
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c9 63 01 00       	call   c00163e9 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 43 03 c0       	mov    eax,0xc0034344
c0000025:	3d 44 43 03 c0       	cmp    eax,0xc0034344
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 43 03 c0       	push   0xc0034344
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 43 03 c0       	mov    eax,0xc0034344
c0000051:	2d 44 43 03 c0       	sub    eax,0xc0034344
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 43 03 c0       	push   0xc0034344
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc ef 02 c0       	mov    ebx,0xc002efcc
c0000097:	81 eb c8 ef 02 c0    	sub    ebx,0xc002efc8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 ef 02 c0       	mov    esi,0xc002efc8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 43 03 c0       	push   0xc0034344
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 44 43 03 c0       	push   0xc0034344
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 4f 41 02 00       	call   c00243fc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b8 8c 01 00       	call   c0018f7d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 2d 41 02 00       	call   c00243fc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3a 46 02 00       	call   c0024928 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 1d 4d 02 00       	call   c0025014 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 df fc 01 00       	jmp    c002005e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 ef 02 c0 02 	test   BYTE PTR [edx-0x3ffd1020],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 ef 02 c0 01 	test   BYTE PTR [edx-0x3ffd1020],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 ef 02 c0 08 	test   BYTE PTR [edx-0x3ffd1020],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 ef 02 c0 08 	test   BYTE PTR [edx-0x3ffd1020],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 ef 02 c0 04 	test   BYTE PTR [ecx-0x3ffd1020],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 ef 02 c0 01 	test   BYTE PTR [edx-0x3ffd1020],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	90                   	nop
c0000c71:	c3                   	ret    
c0000c72:	66 90                	xchg   ax,ax

c0000c74 <sys_mutex_new>:
c0000c74:	90                   	nop
c0000c75:	c3                   	ret    
c0000c76:	66 90                	xchg   ax,ax

c0000c78 <sys_mutex_lock>:
c0000c78:	90                   	nop
c0000c79:	c3                   	ret    
c0000c7a:	66 90                	xchg   ax,ax

c0000c7c <sys_mutex_unlock>:
c0000c7c:	90                   	nop
c0000c7d:	c3                   	ret    
c0000c7e:	66 90                	xchg   ax,ax

c0000c80 <tcpip_callback_with_block>:
c0000c80:	90                   	nop
c0000c81:	c3                   	ret    
c0000c82:	66 90                	xchg   ax,ax

c0000c84 <sys_sem_new>:
c0000c84:	83 ec 04             	sub    esp,0x4
c0000c87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0000c8e:	b0 00                	mov    al,0x0
c0000c90:	83 c4 04             	add    esp,0x4
c0000c93:	c3                   	ret    

c0000c94 <sys_sem_free>:
c0000c94:	90                   	nop
c0000c95:	c3                   	ret    
c0000c96:	66 90                	xchg   ax,ax

c0000c98 <sys_sem_signal>:
c0000c98:	90                   	nop
c0000c99:	c3                   	ret    
c0000c9a:	66 90                	xchg   ax,ax

c0000c9c <sys_arch_sem_wait>:
c0000c9c:	b8 00 00 00 00       	mov    eax,0x0
c0000ca1:	c3                   	ret    
c0000ca2:	66 90                	xchg   ax,ax

c0000ca4 <sys_mbox_new>:
c0000ca4:	b0 00                	mov    al,0x0
c0000ca6:	c3                   	ret    
c0000ca7:	90                   	nop

c0000ca8 <sys_mbox_free>:
c0000ca8:	90                   	nop
c0000ca9:	c3                   	ret    
c0000caa:	66 90                	xchg   ax,ax

c0000cac <sys_mbox_post>:
c0000cac:	90                   	nop
c0000cad:	c3                   	ret    
c0000cae:	66 90                	xchg   ax,ax

c0000cb0 <sys_arch_mbox_fetch>:
c0000cb0:	b8 00 00 00 00       	mov    eax,0x0
c0000cb5:	c3                   	ret    
c0000cb6:	66 90                	xchg   ax,ax

c0000cb8 <sys_arch_mbox_tryfetch>:
c0000cb8:	b8 00 00 00 00       	mov    eax,0x0
c0000cbd:	c3                   	ret    
c0000cbe:	66 90                	xchg   ax,ax

c0000cc0 <sys_mbox_trypost>:
c0000cc0:	90                   	nop
c0000cc1:	c3                   	ret    
c0000cc2:	66 90                	xchg   ax,ax

c0000cc4 <sys_thread_new>:
c0000cc4:	b8 00 00 00 00       	mov    eax,0x0
c0000cc9:	c3                   	ret    
c0000cca:	66 90                	xchg   ax,ax

c0000ccc <sys_init>:
c0000ccc:	90                   	nop
c0000ccd:	c3                   	ret    

c0000cce <largebin_index>:
c0000cce:	89 c2                	mov    edx,eax
c0000cd0:	c1 ea 08             	shr    edx,0x8
c0000cd3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cd9:	77 10                	ja     c0000ceb <largebin_index+0x1d>
c0000cdb:	0f bd d2             	bsr    edx,edx
c0000cde:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000ce1:	d3 e8                	shr    eax,cl
c0000ce3:	83 e0 03             	and    eax,0x3
c0000ce6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cea:	c3                   	ret    
c0000ceb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cf0:	c3                   	ret    

c0000cf1 <malloc_init_state>:
c0000cf1:	8d 50 34             	lea    edx,[eax+0x34]
c0000cf4:	53                   	push   ebx
c0000cf5:	89 d1                	mov    ecx,edx
c0000cf7:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cfd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000d00:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000d03:	83 c2 08             	add    edx,0x8
c0000d06:	39 da                	cmp    edx,ebx
c0000d08:	75 f3                	jne    c0000cfd <malloc_init_state+0xc>
c0000d0a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d16:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000d20:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000d2a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d34:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d3b:	83 e2 03             	and    edx,0x3
c0000d3e:	5b                   	pop    ebx
c0000d3f:	83 ca 48             	or     edx,0x48
c0000d42:	89 10                	mov    DWORD PTR [eax],edx
c0000d44:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d47:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d51:	c3                   	ret    

c0000d52 <malloc_consolidate>:
c0000d52:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d54:	85 d2                	test   edx,edx
c0000d56:	0f 84 d8 00 00 00    	je     c0000e34 <malloc_consolidate+0xe2>
c0000d5c:	55                   	push   ebp
c0000d5d:	83 e2 fd             	and    edx,0xfffffffd
c0000d60:	57                   	push   edi
c0000d61:	89 c5                	mov    ebp,eax
c0000d63:	56                   	push   esi
c0000d64:	53                   	push   ebx
c0000d65:	8d 78 34             	lea    edi,[eax+0x34]
c0000d68:	83 ec 10             	sub    esp,0x10
c0000d6b:	89 10                	mov    DWORD PTR [eax],edx
c0000d6d:	c1 ea 03             	shr    edx,0x3
c0000d70:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d74:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d7c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d7f:	85 d2                	test   edx,edx
c0000d81:	0f 84 98 00 00 00    	je     c0000e1f <malloc_consolidate+0xcd>
c0000d87:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d8e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d91:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d98:	89 f9                	mov    ecx,edi
c0000d9a:	83 e1 fe             	and    ecx,0xfffffffe
c0000d9d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000da0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000da3:	83 e3 fc             	and    ebx,0xfffffffc
c0000da6:	83 e7 01             	and    edi,0x1
c0000da9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000dac:	75 14                	jne    c0000dc2 <malloc_consolidate+0x70>
c0000dae:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000db0:	29 fa                	sub    edx,edi
c0000db2:	01 f9                	add    ecx,edi
c0000db4:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000db7:	89 fb                	mov    ebx,edi
c0000db9:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000dbc:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000dbf:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000dc2:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000dc5:	74 40                	je     c0000e07 <malloc_consolidate+0xb5>
c0000dc7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000dca:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000dcd:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000dd1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dd4:	83 e7 01             	and    edi,0x1
c0000dd7:	75 0e                	jne    c0000de7 <malloc_consolidate+0x95>
c0000dd9:	01 d9                	add    ecx,ebx
c0000ddb:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dde:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000de1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000de4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000de7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dea:	89 ce                	mov    esi,ecx
c0000dec:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000def:	83 ce 01             	or     esi,0x1
c0000df2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000df5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000df8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dfc:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dff:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000e02:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000e05:	eb 0c                	jmp    c0000e13 <malloc_consolidate+0xc1>
c0000e07:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000e0a:	83 c9 01             	or     ecx,0x1
c0000e0d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e10:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000e13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000e17:	85 d2                	test   edx,edx
c0000e19:	0f 85 6f ff ff ff    	jne    c0000d8e <malloc_consolidate+0x3c>
c0000e1f:	83 c5 04             	add    ebp,0x4
c0000e22:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000e26:	0f 85 50 ff ff ff    	jne    c0000d7c <malloc_consolidate+0x2a>
c0000e2c:	83 c4 10             	add    esp,0x10
c0000e2f:	5b                   	pop    ebx
c0000e30:	5e                   	pop    esi
c0000e31:	5f                   	pop    edi
c0000e32:	5d                   	pop    ebp
c0000e33:	c3                   	ret    
c0000e34:	e9 b8 fe ff ff       	jmp    c0000cf1 <malloc_init_state>

c0000e39 <dlfree>:
c0000e39:	57                   	push   edi
c0000e3a:	56                   	push   esi
c0000e3b:	53                   	push   ebx
c0000e3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e40:	85 db                	test   ebx,ebx
c0000e42:	0f 84 e2 00 00 00    	je     c0000f2a <dlfree+0xf1>
c0000e48:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e4b:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e4e:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000e54:	89 f0                	mov    eax,esi
c0000e56:	83 e0 fc             	and    eax,0xfffffffc
c0000e59:	39 c1                	cmp    ecx,eax
c0000e5b:	72 24                	jb     c0000e81 <dlfree+0x48>
c0000e5d:	c1 e8 03             	shr    eax,0x3
c0000e60:	83 c9 03             	or     ecx,0x3
c0000e63:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e69:	83 e8 02             	sub    eax,0x2
c0000e6c:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000e73:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e75:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000e7c:	e9 a9 00 00 00       	jmp    c0000f2a <dlfree+0xf1>
c0000e81:	83 e6 02             	and    esi,0x2
c0000e84:	0f 85 a0 00 00 00    	jne    c0000f2a <dlfree+0xf1>
c0000e8a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e8d:	83 c9 01             	or     ecx,0x1
c0000e90:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e96:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e99:	83 e1 fc             	and    ecx,0xfffffffc
c0000e9c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ea0:	75 13                	jne    c0000eb5 <dlfree+0x7c>
c0000ea2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000ea5:	29 da                	sub    edx,ebx
c0000ea7:	01 d8                	add    eax,ebx
c0000ea9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000eac:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000eaf:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000eb2:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eb5:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000ebb:	74 40                	je     c0000efd <dlfree+0xc4>
c0000ebd:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ec1:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000ec4:	80 e3 01             	and    bl,0x1
c0000ec7:	75 0e                	jne    c0000ed7 <dlfree+0x9e>
c0000ec9:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ecc:	01 c8                	add    eax,ecx
c0000ece:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ed1:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ed4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ed7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000edd:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000ee4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ee7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000eed:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ef0:	89 c1                	mov    ecx,eax
c0000ef2:	83 c9 01             	or     ecx,0x1
c0000ef5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ef8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000efb:	eb 10                	jmp    c0000f0d <dlfree+0xd4>
c0000efd:	01 c8                	add    eax,ecx
c0000eff:	89 c1                	mov    ecx,eax
c0000f01:	83 c9 01             	or     ecx,0x1
c0000f04:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f07:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000f0d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000f12:	76 16                	jbe    c0000f2a <dlfree+0xf1>
c0000f14:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000f1b:	74 0d                	je     c0000f2a <dlfree+0xf1>
c0000f1d:	5b                   	pop    ebx
c0000f1e:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000f23:	5e                   	pop    esi
c0000f24:	5f                   	pop    edi
c0000f25:	e9 28 fe ff ff       	jmp    c0000d52 <malloc_consolidate>
c0000f2a:	5b                   	pop    ebx
c0000f2b:	5e                   	pop    esi
c0000f2c:	5f                   	pop    edi
c0000f2d:	c3                   	ret    

c0000f2e <sYSMALLOc>:
c0000f2e:	55                   	push   ebp
c0000f2f:	57                   	push   edi
c0000f30:	56                   	push   esi
c0000f31:	53                   	push   ebx
c0000f32:	89 d3                	mov    ebx,edx
c0000f34:	83 ec 2c             	sub    esp,0x2c
c0000f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f3b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f41:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f44:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f4b:	74 1f                	je     c0000f6c <sYSMALLOc+0x3e>
c0000f4d:	89 d0                	mov    eax,edx
c0000f4f:	e8 fe fd ff ff       	call   c0000d52 <malloc_consolidate>
c0000f54:	83 ec 0c             	sub    esp,0xc
c0000f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000f5b:	83 e8 07             	sub    eax,0x7
c0000f5e:	50                   	push   eax
c0000f5f:	e8 33 02 00 00       	call   c0001197 <dlmalloc>
c0000f64:	83 c4 10             	add    esp,0x10
c0000f67:	e9 23 02 00 00       	jmp    c000118f <sYSMALLOc+0x261>
c0000f6c:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f73:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000f79:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000f7c:	83 c0 10             	add    eax,0x10
c0000f7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f83:	01 c2                	add    edx,eax
c0000f85:	83 e5 fc             	and    ebp,0xfffffffc
c0000f88:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f8f:	74 02                	je     c0000f93 <sYSMALLOc+0x65>
c0000f91:	29 ea                	sub    edx,ebp
c0000f93:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000f97:	f7 d9                	neg    ecx
c0000f99:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000f9d:	21 ca                	and    edx,ecx
c0000f9f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000fa3:	7f 07                	jg     c0000fac <sYSMALLOc+0x7e>
c0000fa5:	31 c0                	xor    eax,eax
c0000fa7:	e9 e3 01 00 00       	jmp    c000118f <sYSMALLOc+0x261>
c0000fac:	83 ec 0c             	sub    esp,0xc
c0000faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000fb3:	e8 ac 52 01 00       	call   c0016264 <sbrk>
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	83 f8 ff             	cmp    eax,0xffffffff
c0000fbe:	89 c6                	mov    esi,eax
c0000fc0:	74 e3                	je     c0000fa5 <sYSMALLOc+0x77>
c0000fc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fc6:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000fc9:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000fcf:	39 c2                	cmp    edx,eax
c0000fd1:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000fd7:	75 11                	jne    c0000fea <sYSMALLOc+0xbc>
c0000fd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fdd:	01 e8                	add    eax,ebp
c0000fdf:	83 c8 01             	or     eax,0x1
c0000fe2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fe5:	e9 93 00 00 00       	jmp    c000107d <sYSMALLOc+0x14f>
c0000fea:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000ff0:	a8 01                	test   al,0x1
c0000ff2:	0f 84 73 01 00 00    	je     c000116b <sYSMALLOc+0x23d>
c0000ff8:	85 ed                	test   ebp,ebp
c0000ffa:	74 12                	je     c000100e <sYSMALLOc+0xe0>
c0000ffc:	39 f2                	cmp    edx,esi
c0000ffe:	76 0e                	jbe    c000100e <sYSMALLOc+0xe0>
c0001000:	83 e0 fe             	and    eax,0xfffffffe
c0001003:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0001009:	e9 5d 01 00 00       	jmp    c000116b <sYSMALLOc+0x23d>
c000100e:	85 ed                	test   ebp,ebp
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0xf0>
c0001012:	89 f0                	mov    eax,esi
c0001014:	29 d0                	sub    eax,edx
c0001016:	01 c1                	add    ecx,eax
c0001018:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000101e:	89 f2                	mov    edx,esi
c0001020:	83 e2 07             	and    edx,0x7
c0001023:	0f 84 b1 00 00 00    	je     c00010da <sYSMALLOc+0x1ac>
c0001029:	b8 08 00 00 00       	mov    eax,0x8
c000102e:	29 d0                	sub    eax,edx
c0001030:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001033:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001037:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000103b:	01 e8                	add    eax,ebp
c000103d:	83 ec 0c             	sub    esp,0xc
c0001040:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001043:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0001047:	01 f2                	add    edx,esi
c0001049:	29 d0                	sub    eax,edx
c000104b:	01 d1                	add    ecx,edx
c000104d:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001051:	01 c1                	add    ecx,eax
c0001053:	51                   	push   ecx
c0001054:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0001058:	e8 07 52 01 00       	call   c0016264 <sbrk>
c000105d:	83 c4 10             	add    esp,0x10
c0001060:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001064:	83 f8 ff             	cmp    eax,0xffffffff
c0001067:	75 7c                	jne    c00010e5 <sYSMALLOc+0x1b7>
c0001069:	83 ec 0c             	sub    esp,0xc
c000106c:	6a 00                	push   0x0
c000106e:	e8 f1 51 01 00       	call   c0016264 <sbrk>
c0001073:	83 c4 10             	add    esp,0x10
c0001076:	31 c9                	xor    ecx,ecx
c0001078:	83 f8 ff             	cmp    eax,0xffffffff
c000107b:	75 7e                	jne    c00010fb <sYSMALLOc+0x1cd>
c000107d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001083:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001089:	73 06                	jae    c0001091 <sYSMALLOc+0x163>
c000108b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001091:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001097:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000109d:	73 06                	jae    c00010a5 <sYSMALLOc+0x177>
c000109f:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ab:	83 e2 fc             	and    edx,0xfffffffc
c00010ae:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c00010b2:	0f 87 ed fe ff ff    	ja     c0000fa5 <sYSMALLOc+0x77>
c00010b8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00010bc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010bf:	29 fa                	sub    edx,edi
c00010c1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010c4:	89 fb                	mov    ebx,edi
c00010c6:	83 ca 01             	or     edx,0x1
c00010c9:	83 cb 01             	or     ebx,0x1
c00010cc:	83 c0 08             	add    eax,0x8
c00010cf:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010d5:	e9 b5 00 00 00       	jmp    c000118f <sYSMALLOc+0x261>
c00010da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010de:	31 c0                	xor    eax,eax
c00010e0:	e9 52 ff ff ff       	jmp    c0001037 <sYSMALLOc+0x109>
c00010e5:	39 c6                	cmp    esi,eax
c00010e7:	76 12                	jbe    c00010fb <sYSMALLOc+0x1cd>
c00010e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010ed:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010f4:	01 f0                	add    eax,esi
c00010f6:	e9 7b ff ff ff       	jmp    c0001076 <sYSMALLOc+0x148>
c00010fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00010ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001102:	29 f0                	sub    eax,esi
c0001104:	01 c8                	add    eax,ecx
c0001106:	83 c8 01             	or     eax,0x1
c0001109:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000110c:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001112:	85 ed                	test   ebp,ebp
c0001114:	0f 84 63 ff ff ff    	je     c000107d <sYSMALLOc+0x14f>
c000111a:	8d 45 f4             	lea    eax,[ebp-0xc]
c000111d:	83 e0 f8             	and    eax,0xfffffff8
c0001120:	89 c2                	mov    edx,eax
c0001122:	83 ca 01             	or     edx,0x1
c0001125:	83 f8 0f             	cmp    eax,0xf
c0001128:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000112b:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001133:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000113b:	0f 86 3c ff ff ff    	jbe    c000107d <sYSMALLOc+0x14f>
c0001141:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001147:	83 ec 0c             	sub    esp,0xc
c000114a:	83 c7 08             	add    edi,0x8
c000114d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001157:	57                   	push   edi
c0001158:	e8 dc fc ff ff       	call   c0000e39 <dlfree>
c000115d:	83 c4 10             	add    esp,0x10
c0001160:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001166:	e9 12 ff ff ff       	jmp    c000107d <sYSMALLOc+0x14f>
c000116b:	83 ec 0c             	sub    esp,0xc
c000116e:	6a 00                	push   0x0
c0001170:	e8 ef 50 01 00       	call   c0016264 <sbrk>
c0001175:	89 c2                	mov    edx,eax
c0001177:	29 f2                	sub    edx,esi
c0001179:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001186:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000118a:	e9 e7 fe ff ff       	jmp    c0001076 <sYSMALLOc+0x148>
c000118f:	83 c4 2c             	add    esp,0x2c
c0001192:	5b                   	pop    ebx
c0001193:	5e                   	pop    esi
c0001194:	5f                   	pop    edi
c0001195:	5d                   	pop    ebp
c0001196:	c3                   	ret    

c0001197 <dlmalloc>:
c0001197:	55                   	push   ebp
c0001198:	57                   	push   edi
c0001199:	56                   	push   esi
c000119a:	53                   	push   ebx
c000119b:	83 ec 1c             	sub    esp,0x1c
c000119e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00011a2:	83 f8 df             	cmp    eax,0xffffffdf
c00011a5:	0f 87 70 03 00 00    	ja     c000151b <dlmalloc+0x384>
c00011ab:	83 c0 0b             	add    eax,0xb
c00011ae:	be 10 00 00 00       	mov    esi,0x10
c00011b3:	83 f8 0f             	cmp    eax,0xf
c00011b6:	76 05                	jbe    c00011bd <dlmalloc+0x26>
c00011b8:	83 e0 f8             	and    eax,0xfffffff8
c00011bb:	89 c6                	mov    esi,eax
c00011bd:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00011c3:	f7 c7 01 00 00 00    	test   edi,0x1
c00011c9:	75 17                	jne    c00011e2 <dlmalloc+0x4b>
c00011cb:	85 ff                	test   edi,edi
c00011cd:	0f 85 05 03 00 00    	jne    c00014d8 <dlmalloc+0x341>
c00011d3:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00011d8:	e8 75 fb ff ff       	call   c0000d52 <malloc_consolidate>
c00011dd:	e9 f6 02 00 00       	jmp    c00014d8 <dlmalloc+0x341>
c00011e2:	39 f7                	cmp    edi,esi
c00011e4:	72 1f                	jb     c0001205 <dlmalloc+0x6e>
c00011e6:	89 f2                	mov    edx,esi
c00011e8:	c1 ea 03             	shr    edx,0x3
c00011eb:	83 ea 02             	sub    edx,0x2
c00011ee:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00011f5:	85 c0                	test   eax,eax
c00011f7:	74 0c                	je     c0001205 <dlmalloc+0x6e>
c00011f9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011fc:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c0001203:	eb 30                	jmp    c0001235 <dlmalloc+0x9e>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	89 f0                	mov    eax,esi
c000120d:	77 2e                	ja     c000123d <dlmalloc+0xa6>
c000120f:	c1 e8 03             	shr    eax,0x3
c0001212:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001216:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c000121d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001220:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001223:	39 c3                	cmp    ebx,eax
c0001225:	74 2e                	je     c0001255 <dlmalloc+0xbe>
c0001227:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000122a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000122f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001232:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001235:	83 c0 08             	add    eax,0x8
c0001238:	e9 e0 02 00 00       	jmp    c000151d <dlmalloc+0x386>
c000123d:	e8 8c fa ff ff       	call   c0000cce <largebin_index>
c0001242:	83 e7 02             	and    edi,0x2
c0001245:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001249:	74 0a                	je     c0001255 <dlmalloc+0xbe>
c000124b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001250:	e8 fd fa ff ff       	call   c0000d52 <malloc_consolidate>
c0001255:	8d 46 10             	lea    eax,[esi+0x10]
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c0001262:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001268:	0f 84 13 01 00 00    	je     c0001381 <dlmalloc+0x1ea>
c000126e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001271:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001274:	83 e7 fc             	and    edi,0xfffffffc
c0001277:	81 fe ff 00 00 00    	cmp    esi,0xff
c000127d:	77 4c                	ja     c00012cb <dlmalloc+0x134>
c000127f:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c0001284:	75 45                	jne    c00012cb <dlmalloc+0x134>
c0001286:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c000128c:	75 3d                	jne    c00012cb <dlmalloc+0x134>
c000128e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001292:	73 37                	jae    c00012cb <dlmalloc+0x134>
c0001294:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001297:	89 fa                	mov    edx,edi
c0001299:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c000129e:	29 f2                	sub    edx,esi
c00012a0:	83 ce 01             	or     esi,0x1
c00012a3:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012a8:	89 d1                	mov    ecx,edx
c00012aa:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00012af:	83 c9 01             	or     ecx,0x1
c00012b2:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012b9:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00012c0:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00012c3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00012c6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00012c9:	eb 15                	jmp    c00012e0 <dlmalloc+0x149>
c00012cb:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012d0:	39 fe                	cmp    esi,edi
c00012d2:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012d9:	75 0d                	jne    c00012e8 <dlmalloc+0x151>
c00012db:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012e0:	8d 43 08             	lea    eax,[ebx+0x8]
c00012e3:	e9 35 02 00 00       	jmp    c000151d <dlmalloc+0x386>
c00012e8:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ee:	89 f8                	mov    eax,edi
c00012f0:	77 19                	ja     c000130b <dlmalloc+0x174>
c00012f2:	c1 e8 03             	shr    eax,0x3
c00012f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00012f8:	83 c2 0d             	add    edx,0xd
c00012fb:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c0001302:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001309:	eb 46                	jmp    c0001351 <dlmalloc+0x1ba>
c000130b:	e8 be f9 ff ff       	call   c0000cce <largebin_index>
c0001310:	8d 14 00             	lea    edx,[eax+eax*1]
c0001313:	83 c2 0d             	add    edx,0xd
c0001316:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c000131d:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001324:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001327:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000132b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000132f:	89 d5                	mov    ebp,edx
c0001331:	74 1e                	je     c0001351 <dlmalloc+0x1ba>
c0001333:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001336:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001339:	77 12                	ja     c000134d <dlmalloc+0x1b6>
c000133b:	83 cf 01             	or     edi,0x1
c000133e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001341:	76 05                	jbe    c0001348 <dlmalloc+0x1b1>
c0001343:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001346:	eb f6                	jmp    c000133e <dlmalloc+0x1a7>
c0001348:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000134b:	eb 04                	jmp    c0001351 <dlmalloc+0x1ba>
c000134d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001351:	89 c7                	mov    edi,eax
c0001353:	88 c1                	mov    cl,al
c0001355:	c1 ff 05             	sar    edi,0x5
c0001358:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000135c:	bf 01 00 00 00       	mov    edi,0x1
c0001361:	d3 e7                	shl    edi,cl
c0001363:	89 f8                	mov    eax,edi
c0001365:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001369:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c0001370:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001373:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001376:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001379:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000137c:	e9 db fe ff ff       	jmp    c000125c <dlmalloc+0xc5>
c0001381:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001387:	76 78                	jbe    c0001401 <dlmalloc+0x26a>
c0001389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000138d:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c0001394:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001397:	8d 48 f8             	lea    ecx,[eax-0x8]
c000139a:	39 ca                	cmp    edx,ecx
c000139c:	74 63                	je     c0001401 <dlmalloc+0x26a>
c000139e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00013a1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00013a4:	83 e3 fc             	and    ebx,0xfffffffc
c00013a7:	39 de                	cmp    esi,ebx
c00013a9:	77 52                	ja     c00013fd <dlmalloc+0x266>
c00013ab:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00013ae:	89 df                	mov    edi,ebx
c00013b0:	01 d3                	add    ebx,edx
c00013b2:	29 f7                	sub    edi,esi
c00013b4:	83 ff 0f             	cmp    edi,0xf
c00013b7:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00013ba:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00013bd:	8d 42 08             	lea    eax,[edx+0x8]
c00013c0:	77 09                	ja     c00013cb <dlmalloc+0x234>
c00013c2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00013c6:	e9 52 01 00 00       	jmp    c000151d <dlmalloc+0x386>
c00013cb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013ce:	83 ce 01             	or     esi,0x1
c00013d1:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00013d7:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00013dd:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00013e4:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00013eb:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013ee:	89 fa                	mov    edx,edi
c00013f0:	83 ca 01             	or     edx,0x1
c00013f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013f6:	89 3b                	mov    DWORD PTR [ebx],edi
c00013f8:	e9 20 01 00 00       	jmp    c000151d <dlmalloc+0x386>
c00013fd:	89 c2                	mov    edx,eax
c00013ff:	eb 99                	jmp    c000139a <dlmalloc+0x203>
c0001401:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001405:	b8 01 00 00 00       	mov    eax,0x1
c000140a:	41                   	inc    ecx
c000140b:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c0001412:	89 cb                	mov    ebx,ecx
c0001414:	c1 eb 05             	shr    ebx,0x5
c0001417:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000141e:	d3 e0                	shl    eax,cl
c0001420:	39 f8                	cmp    eax,edi
c0001422:	77 04                	ja     c0001428 <dlmalloc+0x291>
c0001424:	85 c0                	test   eax,eax
c0001426:	75 26                	jne    c000144e <dlmalloc+0x2b7>
c0001428:	43                   	inc    ebx
c0001429:	83 fb 02             	cmp    ebx,0x2
c000142c:	0f 87 a6 00 00 00    	ja     c00014d8 <dlmalloc+0x341>
c0001432:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001439:	85 ff                	test   edi,edi
c000143b:	74 eb                	je     c0001428 <dlmalloc+0x291>
c000143d:	89 d8                	mov    eax,ebx
c000143f:	c1 e0 06             	shl    eax,0x6
c0001442:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001449:	b8 01 00 00 00       	mov    eax,0x1
c000144e:	85 f8                	test   eax,edi
c0001450:	75 07                	jne    c0001459 <dlmalloc+0x2c2>
c0001452:	83 c2 08             	add    edx,0x8
c0001455:	01 c0                	add    eax,eax
c0001457:	eb f5                	jmp    c000144e <dlmalloc+0x2b7>
c0001459:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000145c:	39 ca                	cmp    edx,ecx
c000145e:	75 14                	jne    c0001474 <dlmalloc+0x2dd>
c0001460:	89 c1                	mov    ecx,eax
c0001462:	83 c2 08             	add    edx,0x8
c0001465:	f7 d1                	not    ecx
c0001467:	01 c0                	add    eax,eax
c0001469:	21 cf                	and    edi,ecx
c000146b:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c0001472:	eb ac                	jmp    c0001420 <dlmalloc+0x289>
c0001474:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001477:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000147a:	83 e0 fc             	and    eax,0xfffffffc
c000147d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001480:	89 c3                	mov    ebx,eax
c0001482:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001485:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001488:	29 f3                	sub    ebx,esi
c000148a:	8d 41 08             	lea    eax,[ecx+0x8]
c000148d:	83 fb 0f             	cmp    ebx,0xf
c0001490:	77 09                	ja     c000149b <dlmalloc+0x304>
c0001492:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001496:	e9 82 00 00 00       	jmp    c000151d <dlmalloc+0x386>
c000149b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000149e:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014a4:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00014aa:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00014b0:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00014b7:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00014be:	77 06                	ja     c00014c6 <dlmalloc+0x32f>
c00014c0:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00014c6:	83 ce 01             	or     esi,0x1
c00014c9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014cc:	89 d9                	mov    ecx,ebx
c00014ce:	83 c9 01             	or     ecx,0x1
c00014d1:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014d4:	89 1a                	mov    DWORD PTR [edx],ebx
c00014d6:	eb 45                	jmp    c000151d <dlmalloc+0x386>
c00014d8:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00014dd:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014e3:	83 e2 fc             	and    edx,0xfffffffc
c00014e6:	39 d1                	cmp    ecx,edx
c00014e8:	77 1e                	ja     c0001508 <dlmalloc+0x371>
c00014ea:	89 f3                	mov    ebx,esi
c00014ec:	29 f2                	sub    edx,esi
c00014ee:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014f1:	83 cb 01             	or     ebx,0x1
c00014f4:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00014fa:	83 ca 01             	or     edx,0x1
c00014fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001500:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001503:	e9 2d fd ff ff       	jmp    c0001235 <dlmalloc+0x9e>
c0001508:	83 c4 1c             	add    esp,0x1c
c000150b:	89 f0                	mov    eax,esi
c000150d:	5b                   	pop    ebx
c000150e:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c0001513:	5e                   	pop    esi
c0001514:	5f                   	pop    edi
c0001515:	5d                   	pop    ebp
c0001516:	e9 13 fa ff ff       	jmp    c0000f2e <sYSMALLOc>
c000151b:	31 c0                	xor    eax,eax
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	5b                   	pop    ebx
c0001521:	5e                   	pop    esi
c0001522:	5f                   	pop    edi
c0001523:	5d                   	pop    ebp
c0001524:	c3                   	ret    

c0001525 <iALLOc>:
c0001525:	55                   	push   ebp
c0001526:	89 c5                	mov    ebp,eax
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 2c             	sub    esp,0x2c
c000152e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001532:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001536:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000153d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001541:	75 12                	jne    c0001555 <iALLOc+0x30>
c0001543:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001547:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000154c:	e8 01 f8 ff ff       	call   c0000d52 <malloc_consolidate>
c0001551:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001555:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000155a:	74 12                	je     c000156e <iALLOc+0x49>
c000155c:	85 ed                	test   ebp,ebp
c000155e:	0f 84 64 01 00 00    	je     c00016c8 <iALLOc+0x1a3>
c0001564:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000156c:	eb 33                	jmp    c00015a1 <iALLOc+0x7c>
c000156e:	85 ed                	test   ebp,ebp
c0001570:	75 14                	jne    c0001586 <iALLOc+0x61>
c0001572:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000157a:	83 c4 2c             	add    esp,0x2c
c000157d:	5b                   	pop    ebx
c000157e:	5e                   	pop    esi
c000157f:	5f                   	pop    edi
c0001580:	5d                   	pop    ebp
c0001581:	e9 11 fc ff ff       	jmp    c0001197 <dlmalloc>
c0001586:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000158e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001595:	83 f8 0f             	cmp    eax,0xf
c0001598:	76 07                	jbe    c00015a1 <iALLOc+0x7c>
c000159a:	83 e0 f8             	and    eax,0xfffffff8
c000159d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00015a1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00015a6:	75 09                	jne    c00015b1 <iALLOc+0x8c>
c00015a8:	89 d0                	mov    eax,edx
c00015aa:	31 f6                	xor    esi,esi
c00015ac:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00015af:	eb 3b                	jmp    c00015ec <iALLOc+0xc7>
c00015b1:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00015b9:	8b 02                	mov    eax,DWORD PTR [edx]
c00015bb:	83 c0 0b             	add    eax,0xb
c00015be:	83 f8 0f             	cmp    eax,0xf
c00015c1:	76 07                	jbe    c00015ca <iALLOc+0xa5>
c00015c3:	83 e0 f8             	and    eax,0xfffffff8
c00015c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00015ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015ce:	0f af f5             	imul   esi,ebp
c00015d1:	eb 25                	jmp    c00015f8 <iALLOc+0xd3>
c00015d3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015d5:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015d8:	bb 10 00 00 00       	mov    ebx,0x10
c00015dd:	83 f9 0f             	cmp    ecx,0xf
c00015e0:	76 05                	jbe    c00015e7 <iALLOc+0xc2>
c00015e2:	83 e1 f8             	and    ecx,0xfffffff8
c00015e5:	89 cb                	mov    ebx,ecx
c00015e7:	01 de                	add    esi,ebx
c00015e9:	83 c0 04             	add    eax,0x4
c00015ec:	39 c7                	cmp    edi,eax
c00015ee:	75 e3                	jne    c00015d3 <iALLOc+0xae>
c00015f0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015fc:	83 ec 0c             	sub    esp,0xc
c00015ff:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c0001605:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c000160f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001613:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001617:	50                   	push   eax
c0001618:	e8 7a fb ff ff       	call   c0001197 <dlmalloc>
c000161d:	83 c4 10             	add    esp,0x10
c0001620:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001626:	85 c0                	test   eax,eax
c0001628:	0f 84 92 00 00 00    	je     c00016c0 <iALLOc+0x19b>
c000162e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001631:	8d 78 f8             	lea    edi,[eax-0x8]
c0001634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001638:	83 e3 fc             	and    ebx,0xfffffffc
c000163b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001640:	74 1e                	je     c0001660 <iALLOc+0x13b>
c0001642:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001646:	89 d9                	mov    ecx,ebx
c0001648:	52                   	push   edx
c0001649:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000164d:	83 e9 04             	sub    ecx,0x4
c0001650:	51                   	push   ecx
c0001651:	6a 00                	push   0x0
c0001653:	50                   	push   eax
c0001654:	e8 97 ee ff ff       	call   c00004f0 <memset>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001660:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001665:	75 14                	jne    c000167b <iALLOc+0x156>
c0001667:	8d 04 37             	lea    eax,[edi+esi*1]
c000166a:	29 f3                	sub    ebx,esi
c000166c:	8d 48 08             	lea    ecx,[eax+0x8]
c000166f:	83 cb 01             	or     ebx,0x1
c0001672:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001675:	89 f3                	mov    ebx,esi
c0001677:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000167b:	31 c0                	xor    eax,eax
c000167d:	4d                   	dec    ebp
c000167e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001682:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001685:	39 c5                	cmp    ebp,eax
c0001687:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000168a:	74 2c                	je     c00016b8 <iALLOc+0x193>
c000168c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001690:	85 c9                	test   ecx,ecx
c0001692:	75 15                	jne    c00016a9 <iALLOc+0x184>
c0001694:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001697:	8d 71 0b             	lea    esi,[ecx+0xb]
c000169a:	b9 10 00 00 00       	mov    ecx,0x10
c000169f:	83 fe 0f             	cmp    esi,0xf
c00016a2:	76 05                	jbe    c00016a9 <iALLOc+0x184>
c00016a4:	83 e6 f8             	and    esi,0xfffffff8
c00016a7:	89 f1                	mov    ecx,esi
c00016a9:	89 ce                	mov    esi,ecx
c00016ab:	29 cb                	sub    ebx,ecx
c00016ad:	83 ce 01             	or     esi,0x1
c00016b0:	40                   	inc    eax
c00016b1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00016b4:	01 cf                	add    edi,ecx
c00016b6:	eb c6                	jmp    c000167e <iALLOc+0x159>
c00016b8:	83 cb 01             	or     ebx,0x1
c00016bb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00016be:	eb 08                	jmp    c00016c8 <iALLOc+0x1a3>
c00016c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00016c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016cc:	83 c4 2c             	add    esp,0x2c
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlrealloc>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 1c             	sub    esp,0x1c
c00016db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016e3:	85 db                	test   ebx,ebx
c00016e5:	75 10                	jne    c00016f7 <dlrealloc+0x23>
c00016e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016eb:	83 c4 1c             	add    esp,0x1c
c00016ee:	5b                   	pop    ebx
c00016ef:	5e                   	pop    esi
c00016f0:	5f                   	pop    edi
c00016f1:	5d                   	pop    ebp
c00016f2:	e9 a0 fa ff ff       	jmp    c0001197 <dlmalloc>
c00016f7:	83 f8 df             	cmp    eax,0xffffffdf
c00016fa:	76 07                	jbe    c0001703 <dlrealloc+0x2f>
c00016fc:	31 db                	xor    ebx,ebx
c00016fe:	e9 6b 01 00 00       	jmp    c000186e <dlrealloc+0x19a>
c0001703:	83 c0 0b             	add    eax,0xb
c0001706:	bd 10 00 00 00       	mov    ebp,0x10
c000170b:	83 f8 0f             	cmp    eax,0xf
c000170e:	76 05                	jbe    c0001715 <dlrealloc+0x41>
c0001710:	83 e0 f8             	and    eax,0xfffffff8
c0001713:	89 c5                	mov    ebp,eax
c0001715:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001718:	8d 7b f8             	lea    edi,[ebx-0x8]
c000171b:	89 ce                	mov    esi,ecx
c000171d:	83 e6 fc             	and    esi,0xfffffffc
c0001720:	f6 c1 02             	test   cl,0x2
c0001723:	75 d7                	jne    c00016fc <dlrealloc+0x28>
c0001725:	39 f5                	cmp    ebp,esi
c0001727:	0f 86 04 01 00 00    	jbe    c0001831 <dlrealloc+0x15d>
c000172d:	8d 14 37             	lea    edx,[edi+esi*1]
c0001730:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001736:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001739:	75 33                	jne    c000176e <dlrealloc+0x9a>
c000173b:	83 e0 fc             	and    eax,0xfffffffc
c000173e:	01 f0                	add    eax,esi
c0001740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001744:	8d 45 10             	lea    eax,[ebp+0x10]
c0001747:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000174b:	77 49                	ja     c0001796 <dlrealloc+0xc2>
c000174d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001751:	83 e1 01             	and    ecx,0x1
c0001754:	01 ef                	add    edi,ebp
c0001756:	09 e9                	or     ecx,ebp
c0001758:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000175b:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001761:	29 e8                	sub    eax,ebp
c0001763:	83 c8 01             	or     eax,0x1
c0001766:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001769:	e9 00 01 00 00       	jmp    c000186e <dlrealloc+0x19a>
c000176e:	89 c1                	mov    ecx,eax
c0001770:	83 e1 fe             	and    ecx,0xfffffffe
c0001773:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c0001778:	75 1c                	jne    c0001796 <dlrealloc+0xc2>
c000177a:	83 e0 fc             	and    eax,0xfffffffc
c000177d:	01 f0                	add    eax,esi
c000177f:	39 c5                	cmp    ebp,eax
c0001781:	77 13                	ja     c0001796 <dlrealloc+0xc2>
c0001783:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001786:	89 c6                	mov    esi,eax
c0001788:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000178b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000178e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001791:	e9 9b 00 00 00       	jmp    c0001831 <dlrealloc+0x15d>
c0001796:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000179a:	8d 45 f9             	lea    eax,[ebp-0x7]
c000179d:	83 ec 0c             	sub    esp,0xc
c00017a0:	50                   	push   eax
c00017a1:	e8 f1 f9 ff ff       	call   c0001197 <dlmalloc>
c00017a6:	83 c4 10             	add    esp,0x10
c00017a9:	85 c0                	test   eax,eax
c00017ab:	0f 84 4b ff ff ff    	je     c00016fc <dlrealloc+0x28>
c00017b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017b5:	8d 48 f8             	lea    ecx,[eax-0x8]
c00017b8:	39 ca                	cmp    edx,ecx
c00017ba:	75 0a                	jne    c00017c6 <dlrealloc+0xf2>
c00017bc:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00017bf:	83 e0 fc             	and    eax,0xfffffffc
c00017c2:	01 c6                	add    esi,eax
c00017c4:	eb 6b                	jmp    c0001831 <dlrealloc+0x15d>
c00017c6:	8d 4e fc             	lea    ecx,[esi-0x4]
c00017c9:	83 f9 27             	cmp    ecx,0x27
c00017cc:	76 08                	jbe    c00017d6 <dlrealloc+0x102>
c00017ce:	89 de                	mov    esi,ebx
c00017d0:	89 c7                	mov    edi,eax
c00017d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017d4:	eb 43                	jmp    c0001819 <dlrealloc+0x145>
c00017d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017d8:	83 f9 13             	cmp    ecx,0x13
c00017db:	89 10                	mov    DWORD PTR [eax],edx
c00017dd:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017e9:	76 2e                	jbe    c0001819 <dlrealloc+0x145>
c00017eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017ee:	83 f9 1b             	cmp    ecx,0x1b
c00017f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017f4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017f7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017fa:	76 1d                	jbe    c0001819 <dlrealloc+0x145>
c00017fc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017ff:	83 f9 23             	cmp    ecx,0x23
c0001802:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001805:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001808:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000180b:	76 0c                	jbe    c0001819 <dlrealloc+0x145>
c000180d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001810:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001813:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001816:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000181d:	83 ec 0c             	sub    esp,0xc
c0001820:	53                   	push   ebx
c0001821:	e8 13 f6 ff ff       	call   c0000e39 <dlfree>
c0001826:	83 c4 10             	add    esp,0x10
c0001829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000182d:	89 c3                	mov    ebx,eax
c000182f:	eb 3d                	jmp    c000186e <dlrealloc+0x19a>
c0001831:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001834:	8d 04 37             	lea    eax,[edi+esi*1]
c0001837:	89 f2                	mov    edx,esi
c0001839:	29 ea                	sub    edx,ebp
c000183b:	83 e1 01             	and    ecx,0x1
c000183e:	83 fa 0f             	cmp    edx,0xf
c0001841:	77 0b                	ja     c000184e <dlrealloc+0x17a>
c0001843:	09 ce                	or     esi,ecx
c0001845:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001848:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000184c:	eb 20                	jmp    c000186e <dlrealloc+0x19a>
c000184e:	01 ef                	add    edi,ebp
c0001850:	83 ca 01             	or     edx,0x1
c0001853:	09 cd                	or     ebp,ecx
c0001855:	83 ec 0c             	sub    esp,0xc
c0001858:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000185b:	83 c7 08             	add    edi,0x8
c000185e:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001861:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001865:	57                   	push   edi
c0001866:	e8 ce f5 ff ff       	call   c0000e39 <dlfree>
c000186b:	83 c4 10             	add    esp,0x10
c000186e:	83 c4 1c             	add    esp,0x1c
c0001871:	89 d8                	mov    eax,ebx
c0001873:	5b                   	pop    ebx
c0001874:	5e                   	pop    esi
c0001875:	5f                   	pop    edi
c0001876:	5d                   	pop    ebp
c0001877:	c3                   	ret    

c0001878 <dlmemalign>:
c0001878:	55                   	push   ebp
c0001879:	57                   	push   edi
c000187a:	56                   	push   esi
c000187b:	53                   	push   ebx
c000187c:	83 ec 0c             	sub    esp,0xc
c000187f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001883:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001887:	83 fa 08             	cmp    edx,0x8
c000188a:	77 10                	ja     c000189c <dlmemalign+0x24>
c000188c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001890:	83 c4 0c             	add    esp,0xc
c0001893:	5b                   	pop    ebx
c0001894:	5e                   	pop    esi
c0001895:	5f                   	pop    edi
c0001896:	5d                   	pop    ebp
c0001897:	e9 fb f8 ff ff       	jmp    c0001197 <dlmalloc>
c000189c:	83 fa 0f             	cmp    edx,0xf
c000189f:	bf 10 00 00 00       	mov    edi,0x10
c00018a4:	76 13                	jbe    c00018b9 <dlmemalign+0x41>
c00018a6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00018a9:	85 d1                	test   ecx,edx
c00018ab:	75 04                	jne    c00018b1 <dlmemalign+0x39>
c00018ad:	89 d7                	mov    edi,edx
c00018af:	eb 08                	jmp    c00018b9 <dlmemalign+0x41>
c00018b1:	39 d7                	cmp    edi,edx
c00018b3:	73 04                	jae    c00018b9 <dlmemalign+0x41>
c00018b5:	01 ff                	add    edi,edi
c00018b7:	eb f8                	jmp    c00018b1 <dlmemalign+0x39>
c00018b9:	83 f8 df             	cmp    eax,0xffffffdf
c00018bc:	76 07                	jbe    c00018c5 <dlmemalign+0x4d>
c00018be:	31 c0                	xor    eax,eax
c00018c0:	e9 ce 00 00 00       	jmp    c0001993 <dlmemalign+0x11b>
c00018c5:	83 c0 0b             	add    eax,0xb
c00018c8:	bd 10 00 00 00       	mov    ebp,0x10
c00018cd:	83 f8 0f             	cmp    eax,0xf
c00018d0:	76 05                	jbe    c00018d7 <dlmemalign+0x5f>
c00018d2:	83 e0 f8             	and    eax,0xfffffff8
c00018d5:	89 c5                	mov    ebp,eax
c00018d7:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018db:	83 ec 0c             	sub    esp,0xc
c00018de:	50                   	push   eax
c00018df:	e8 b3 f8 ff ff       	call   c0001197 <dlmalloc>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	85 c0                	test   eax,eax
c00018e9:	89 c1                	mov    ecx,eax
c00018eb:	74 d1                	je     c00018be <dlmemalign+0x46>
c00018ed:	8d 70 f8             	lea    esi,[eax-0x8]
c00018f0:	31 d2                	xor    edx,edx
c00018f2:	f7 f7                	div    edi
c00018f4:	85 d2                	test   edx,edx
c00018f6:	74 62                	je     c000195a <dlmemalign+0xe2>
c00018f8:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018fc:	89 f8                	mov    eax,edi
c00018fe:	f7 d8                	neg    eax
c0001900:	21 c3                	and    ebx,eax
c0001902:	83 eb 08             	sub    ebx,0x8
c0001905:	89 d8                	mov    eax,ebx
c0001907:	29 f0                	sub    eax,esi
c0001909:	83 f8 0f             	cmp    eax,0xf
c000190c:	77 02                	ja     c0001910 <dlmemalign+0x98>
c000190e:	01 fb                	add    ebx,edi
c0001910:	89 d8                	mov    eax,ebx
c0001912:	29 f0                	sub    eax,esi
c0001914:	89 c6                	mov    esi,eax
c0001916:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001919:	89 c2                	mov    edx,eax
c000191b:	83 e2 fc             	and    edx,0xfffffffc
c000191e:	29 f2                	sub    edx,esi
c0001920:	a8 02                	test   al,0x2
c0001922:	74 10                	je     c0001934 <dlmemalign+0xbc>
c0001924:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001927:	83 ca 02             	or     edx,0x2
c000192a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000192d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001930:	89 33                	mov    DWORD PTR [ebx],esi
c0001932:	eb 5f                	jmp    c0001993 <dlmemalign+0x11b>
c0001934:	89 d0                	mov    eax,edx
c0001936:	83 ec 0c             	sub    esp,0xc
c0001939:	83 c8 01             	or     eax,0x1
c000193c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000193f:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001944:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001947:	83 e0 01             	and    eax,0x1
c000194a:	09 f0                	or     eax,esi
c000194c:	89 de                	mov    esi,ebx
c000194e:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001951:	51                   	push   ecx
c0001952:	e8 e2 f4 ff ff       	call   c0000e39 <dlfree>
c0001957:	83 c4 10             	add    esp,0x10
c000195a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195d:	a8 02                	test   al,0x2
c000195f:	75 2f                	jne    c0001990 <dlmemalign+0x118>
c0001961:	8d 55 10             	lea    edx,[ebp+0x10]
c0001964:	83 e0 fc             	and    eax,0xfffffffc
c0001967:	39 c2                	cmp    edx,eax
c0001969:	73 25                	jae    c0001990 <dlmemalign+0x118>
c000196b:	29 e8                	sub    eax,ebp
c000196d:	83 ec 0c             	sub    esp,0xc
c0001970:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001973:	83 c8 01             	or     eax,0x1
c0001976:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001979:	83 c2 08             	add    edx,0x8
c000197c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000197f:	83 e0 01             	and    eax,0x1
c0001982:	09 c5                	or     ebp,eax
c0001984:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001987:	52                   	push   edx
c0001988:	e8 ac f4 ff ff       	call   c0000e39 <dlfree>
c000198d:	83 c4 10             	add    esp,0x10
c0001990:	8d 46 08             	lea    eax,[esi+0x8]
c0001993:	83 c4 0c             	add    esp,0xc
c0001996:	5b                   	pop    ebx
c0001997:	5e                   	pop    esi
c0001998:	5f                   	pop    edi
c0001999:	5d                   	pop    ebp
c000199a:	c3                   	ret    

c000199b <dlcalloc>:
c000199b:	53                   	push   ebx
c000199c:	83 ec 14             	sub    esp,0x14
c000199f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00019a3:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00019a8:	50                   	push   eax
c00019a9:	e8 e9 f7 ff ff       	call   c0001197 <dlmalloc>
c00019ae:	83 c4 10             	add    esp,0x10
c00019b1:	85 c0                	test   eax,eax
c00019b3:	89 c3                	mov    ebx,eax
c00019b5:	74 77                	je     c0001a2e <dlcalloc+0x93>
c00019b7:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00019ba:	89 d0                	mov    eax,edx
c00019bc:	83 e0 fc             	and    eax,0xfffffffc
c00019bf:	80 e2 02             	and    dl,0x2
c00019c2:	75 5a                	jne    c0001a1e <dlcalloc+0x83>
c00019c4:	83 e8 04             	sub    eax,0x4
c00019c7:	83 f8 27             	cmp    eax,0x27
c00019ca:	76 03                	jbe    c00019cf <dlcalloc+0x34>
c00019cc:	51                   	push   ecx
c00019cd:	eb 53                	jmp    c0001a22 <dlcalloc+0x87>
c00019cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019d5:	83 f8 13             	cmp    eax,0x13
c00019d8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019df:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019e6:	76 46                	jbe    c0001a2e <dlcalloc+0x93>
c00019e8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ef:	83 f8 1b             	cmp    eax,0x1b
c00019f2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019f9:	76 33                	jbe    c0001a2e <dlcalloc+0x93>
c00019fb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001a02:	83 f8 23             	cmp    eax,0x23
c0001a05:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001a0c:	76 20                	jbe    c0001a2e <dlcalloc+0x93>
c0001a0e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001a15:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001a1c:	eb 10                	jmp    c0001a2e <dlcalloc+0x93>
c0001a1e:	52                   	push   edx
c0001a1f:	83 e8 08             	sub    eax,0x8
c0001a22:	50                   	push   eax
c0001a23:	6a 00                	push   0x0
c0001a25:	53                   	push   ebx
c0001a26:	e8 c5 ea ff ff       	call   c00004f0 <memset>
c0001a2b:	83 c4 10             	add    esp,0x10
c0001a2e:	83 c4 08             	add    esp,0x8
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	5b                   	pop    ebx
c0001a34:	c3                   	ret    

c0001a35 <dlcfree>:
c0001a35:	e9 ff f3 ff ff       	jmp    c0000e39 <dlfree>

c0001a3a <dlindependent_calloc>:
c0001a3a:	83 ec 28             	sub    esp,0x28
c0001a3d:	b9 03 00 00 00       	mov    ecx,0x3
c0001a42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a52:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a56:	e8 ca fa ff ff       	call   c0001525 <iALLOc>
c0001a5b:	83 c4 2c             	add    esp,0x2c
c0001a5e:	c3                   	ret    

c0001a5f <dlindependent_comalloc>:
c0001a5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a63:	31 c9                	xor    ecx,ecx
c0001a65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a71:	e9 af fa ff ff       	jmp    c0001525 <iALLOc>

c0001a76 <dlvalloc>:
c0001a76:	83 ec 0c             	sub    esp,0xc
c0001a79:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001a80:	75 0a                	jne    c0001a8c <dlvalloc+0x16>
c0001a82:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001a87:	e8 c6 f2 ff ff       	call   c0000d52 <malloc_consolidate>
c0001a8c:	50                   	push   eax
c0001a8d:	50                   	push   eax
c0001a8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a92:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001a98:	e8 db fd ff ff       	call   c0001878 <dlmemalign>
c0001a9d:	83 c4 1c             	add    esp,0x1c
c0001aa0:	c3                   	ret    

c0001aa1 <dlpvalloc>:
c0001aa1:	83 ec 0c             	sub    esp,0xc
c0001aa4:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001aab:	75 0a                	jne    c0001ab7 <dlpvalloc+0x16>
c0001aad:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001ab2:	e8 9b f2 ff ff       	call   c0000d52 <malloc_consolidate>
c0001ab7:	52                   	push   edx
c0001ab8:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001abd:	52                   	push   edx
c0001abe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ac2:	89 c1                	mov    ecx,eax
c0001ac4:	f7 d9                	neg    ecx
c0001ac6:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aca:	21 ca                	and    edx,ecx
c0001acc:	52                   	push   edx
c0001acd:	50                   	push   eax
c0001ace:	e8 a5 fd ff ff       	call   c0001878 <dlmemalign>
c0001ad3:	83 c4 1c             	add    esp,0x1c
c0001ad6:	c3                   	ret    

c0001ad7 <dlmalloc_trim>:
c0001ad7:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001adc:	e8 71 f2 ff ff       	call   c0000d52 <malloc_consolidate>
c0001ae1:	31 c0                	xor    eax,eax
c0001ae3:	c3                   	ret    

c0001ae4 <dlmalloc_usable_size>:
c0001ae4:	53                   	push   ebx
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001aeb:	85 c9                	test   ecx,ecx
c0001aed:	74 24                	je     c0001b13 <dlmalloc_usable_size+0x2f>
c0001aef:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001af2:	f6 c2 02             	test   dl,0x2
c0001af5:	74 08                	je     c0001aff <dlmalloc_usable_size+0x1b>
c0001af7:	83 e2 fc             	and    edx,0xfffffffc
c0001afa:	8d 42 f8             	lea    eax,[edx-0x8]
c0001afd:	eb 14                	jmp    c0001b13 <dlmalloc_usable_size+0x2f>
c0001aff:	89 d3                	mov    ebx,edx
c0001b01:	31 c0                	xor    eax,eax
c0001b03:	83 e3 fe             	and    ebx,0xfffffffe
c0001b06:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001b0b:	74 06                	je     c0001b13 <dlmalloc_usable_size+0x2f>
c0001b0d:	83 e2 fc             	and    edx,0xfffffffc
c0001b10:	8d 42 fc             	lea    eax,[edx-0x4]
c0001b13:	5b                   	pop    ebx
c0001b14:	c3                   	ret    

c0001b15 <dlmallinfo>:
c0001b15:	55                   	push   ebp
c0001b16:	57                   	push   edi
c0001b17:	56                   	push   esi
c0001b18:	53                   	push   ebx
c0001b19:	83 ec 08             	sub    esp,0x8
c0001b1c:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001b23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001b27:	75 0a                	jne    c0001b33 <dlmallinfo+0x1e>
c0001b29:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b2e:	e8 1f f2 ff ff       	call   c0000d52 <malloc_consolidate>
c0001b33:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001b38:	31 ed                	xor    ebp,ebp
c0001b3a:	31 c9                	xor    ecx,ecx
c0001b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b3f:	83 e0 fc             	and    eax,0xfffffffc
c0001b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b46:	31 c0                	xor    eax,eax
c0001b48:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001b4f:	85 d2                	test   edx,edx
c0001b51:	74 0e                	je     c0001b61 <dlmallinfo+0x4c>
c0001b53:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b56:	45                   	inc    ebp
c0001b57:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b5a:	83 e6 fc             	and    esi,0xfffffffc
c0001b5d:	01 f1                	add    ecx,esi
c0001b5f:	eb ee                	jmp    c0001b4f <dlmallinfo+0x3a>
c0001b61:	40                   	inc    eax
c0001b62:	83 f8 0a             	cmp    eax,0xa
c0001b65:	75 e1                	jne    c0001b48 <dlmallinfo+0x33>
c0001b67:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b72:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b75:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001b7a:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b7d:	39 f0                	cmp    eax,esi
c0001b7f:	74 10                	je     c0001b91 <dlmallinfo+0x7c>
c0001b81:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b84:	ff 04 24             	inc    DWORD PTR [esp]
c0001b87:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b8a:	83 e7 fc             	and    edi,0xfffffffc
c0001b8d:	01 fa                	add    edx,edi
c0001b8f:	eb ec                	jmp    c0001b7d <dlmallinfo+0x68>
c0001b91:	83 c0 08             	add    eax,0x8
c0001b94:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001b99:	75 df                	jne    c0001b7a <dlmallinfo+0x65>
c0001b9b:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001ba1:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ba4:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001ba9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001bac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001baf:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001bb2:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001bb5:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001bbb:	89 03                	mov    DWORD PTR [ebx],eax
c0001bbd:	29 d0                	sub    eax,edx
c0001bbf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bc6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001bc9:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001bcc:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001bd2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001bd5:	89 d8                	mov    eax,ebx
c0001bd7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bda:	83 c4 08             	add    esp,0x8
c0001bdd:	5b                   	pop    ebx
c0001bde:	5e                   	pop    esi
c0001bdf:	5f                   	pop    edi
c0001be0:	5d                   	pop    ebp
c0001be1:	c2 04 00             	ret    0x4

c0001be4 <dlmalloc_stats>:
c0001be4:	83 ec 30             	sub    esp,0x30
c0001be7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001beb:	50                   	push   eax
c0001bec:	e8 24 ff ff ff       	call   c0001b15 <dlmallinfo>
c0001bf1:	83 c4 30             	add    esp,0x30
c0001bf4:	c3                   	ret    

c0001bf5 <dlmallopt>:
c0001bf5:	56                   	push   esi
c0001bf6:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bfb:	53                   	push   ebx
c0001bfc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001c00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c04:	e8 49 f1 ff ff       	call   c0000d52 <malloc_consolidate>
c0001c09:	8d 46 04             	lea    eax,[esi+0x4]
c0001c0c:	83 f8 05             	cmp    eax,0x5
c0001c0f:	77 67                	ja     c0001c78 <dlmallopt+0x83>
c0001c11:	ff 24 85 e4 f0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0f1c]
c0001c18:	83 fb 50             	cmp    ebx,0x50
c0001c1b:	77 5b                	ja     c0001c78 <dlmallopt+0x83>
c0001c1d:	85 db                	test   ebx,ebx
c0001c1f:	ba 08 00 00 00       	mov    edx,0x8
c0001c24:	74 12                	je     c0001c38 <dlmallopt+0x43>
c0001c26:	83 c3 0b             	add    ebx,0xb
c0001c29:	ba 10 00 00 00       	mov    edx,0x10
c0001c2e:	83 fb 0f             	cmp    ebx,0xf
c0001c31:	76 05                	jbe    c0001c38 <dlmallopt+0x43>
c0001c33:	89 da                	mov    edx,ebx
c0001c35:	83 e2 f8             	and    edx,0xfffffff8
c0001c38:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c3d:	83 e0 03             	and    eax,0x3
c0001c40:	09 d0                	or     eax,edx
c0001c42:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c47:	eb 31                	jmp    c0001c7a <dlmallopt+0x85>
c0001c49:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001c4f:	eb 06                	jmp    c0001c57 <dlmallopt+0x62>
c0001c51:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001c57:	be 01 00 00 00       	mov    esi,0x1
c0001c5c:	eb 1c                	jmp    c0001c7a <dlmallopt+0x85>
c0001c5e:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001c64:	eb f1                	jmp    c0001c57 <dlmallopt+0x62>
c0001c66:	31 f6                	xor    esi,esi
c0001c68:	85 db                	test   ebx,ebx
c0001c6a:	75 0e                	jne    c0001c7a <dlmallopt+0x85>
c0001c6c:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001c76:	eb df                	jmp    c0001c57 <dlmallopt+0x62>
c0001c78:	31 f6                	xor    esi,esi
c0001c7a:	5b                   	pop    ebx
c0001c7b:	89 f0                	mov    eax,esi
c0001c7d:	5e                   	pop    esi
c0001c7e:	c3                   	ret    
c0001c7f:	90                   	nop

c0001c80 <isblank>:
c0001c80:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c85:	74 09                	je     c0001c90 <isblank+0x10>
c0001c87:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c8c:	75 0a                	jne    c0001c98 <isblank+0x18>
c0001c8e:	66 90                	xchg   ax,ax
c0001c90:	b8 01 00 00 00       	mov    eax,0x1
c0001c95:	c3                   	ret    
c0001c96:	66 90                	xchg   ax,ax
c0001c98:	b8 00 00 00 00       	mov    eax,0x0
c0001c9d:	c3                   	ret    
c0001c9e:	66 90                	xchg   ax,ax

c0001ca0 <iscntrl>:
c0001ca0:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001ca5:	7e 09                	jle    c0001cb0 <iscntrl+0x10>
c0001ca7:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001cac:	75 0a                	jne    c0001cb8 <iscntrl+0x18>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    
c0001cbe:	66 90                	xchg   ax,ax

c0001cc0 <isdigit>:
c0001cc0:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001cc5:	7e 0d                	jle    c0001cd4 <isdigit+0x14>
c0001cc7:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ccc:	7f 06                	jg     c0001cd4 <isdigit+0x14>
c0001cce:	b8 01 00 00 00       	mov    eax,0x1
c0001cd3:	c3                   	ret    
c0001cd4:	b8 00 00 00 00       	mov    eax,0x0
c0001cd9:	c3                   	ret    
c0001cda:	66 90                	xchg   ax,ax

c0001cdc <islower>:
c0001cdc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ce1:	7e 0d                	jle    c0001cf0 <islower+0x14>
c0001ce3:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001ce8:	7f 06                	jg     c0001cf0 <islower+0x14>
c0001cea:	b8 01 00 00 00       	mov    eax,0x1
c0001cef:	c3                   	ret    
c0001cf0:	b8 00 00 00 00       	mov    eax,0x0
c0001cf5:	c3                   	ret    
c0001cf6:	66 90                	xchg   ax,ax

c0001cf8 <isspace>:
c0001cf8:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cfd:	7c 19                	jl     c0001d18 <isspace+0x20>
c0001cff:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001d04:	7e 0a                	jle    c0001d10 <isspace+0x18>
c0001d06:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d0b:	75 0b                	jne    c0001d18 <isspace+0x20>
c0001d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isupper>:
c0001d20:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d25:	7e 0d                	jle    c0001d34 <isupper+0x14>
c0001d27:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d2c:	7f 06                	jg     c0001d34 <isupper+0x14>
c0001d2e:	b8 01 00 00 00       	mov    eax,0x1
c0001d33:	c3                   	ret    
c0001d34:	b8 00 00 00 00       	mov    eax,0x0
c0001d39:	c3                   	ret    
c0001d3a:	66 90                	xchg   ax,ax

c0001d3c <isalpha>:
c0001d3c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d40:	e8 db ff ff ff       	call   c0001d20 <isupper>
c0001d45:	83 c4 04             	add    esp,0x4
c0001d48:	85 c0                	test   eax,eax
c0001d4a:	75 10                	jne    c0001d5c <isalpha+0x20>
c0001d4c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d50:	e8 87 ff ff ff       	call   c0001cdc <islower>
c0001d55:	83 c4 04             	add    esp,0x4
c0001d58:	85 c0                	test   eax,eax
c0001d5a:	74 08                	je     c0001d64 <isalpha+0x28>
c0001d5c:	b8 01 00 00 00       	mov    eax,0x1
c0001d61:	c3                   	ret    
c0001d62:	66 90                	xchg   ax,ax
c0001d64:	b8 00 00 00 00       	mov    eax,0x0
c0001d69:	c3                   	ret    
c0001d6a:	66 90                	xchg   ax,ax

c0001d6c <isalnum>:
c0001d6c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d70:	e8 c7 ff ff ff       	call   c0001d3c <isalpha>
c0001d75:	83 c4 04             	add    esp,0x4
c0001d78:	85 c0                	test   eax,eax
c0001d7a:	75 10                	jne    c0001d8c <isalnum+0x20>
c0001d7c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d80:	e8 3b ff ff ff       	call   c0001cc0 <isdigit>
c0001d85:	83 c4 04             	add    esp,0x4
c0001d88:	85 c0                	test   eax,eax
c0001d8a:	74 08                	je     c0001d94 <isalnum+0x28>
c0001d8c:	b8 01 00 00 00       	mov    eax,0x1
c0001d91:	c3                   	ret    
c0001d92:	66 90                	xchg   ax,ax
c0001d94:	b8 00 00 00 00       	mov    eax,0x0
c0001d99:	c3                   	ret    
c0001d9a:	66 90                	xchg   ax,ax

c0001d9c <ispunct>:
c0001d9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001da0:	e8 c7 ff ff ff       	call   c0001d6c <isalnum>
c0001da5:	83 c4 04             	add    esp,0x4
c0001da8:	85 c0                	test   eax,eax
c0001daa:	75 28                	jne    c0001dd4 <ispunct+0x38>
c0001dac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001db0:	e8 43 ff ff ff       	call   c0001cf8 <isspace>
c0001db5:	83 c4 04             	add    esp,0x4
c0001db8:	85 c0                	test   eax,eax
c0001dba:	75 18                	jne    c0001dd4 <ispunct+0x38>
c0001dbc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dc0:	e8 db fe ff ff       	call   c0001ca0 <iscntrl>
c0001dc5:	83 c4 04             	add    esp,0x4
c0001dc8:	85 c0                	test   eax,eax
c0001dca:	75 08                	jne    c0001dd4 <ispunct+0x38>
c0001dcc:	b8 01 00 00 00       	mov    eax,0x1
c0001dd1:	c3                   	ret    
c0001dd2:	66 90                	xchg   ax,ax
c0001dd4:	b8 00 00 00 00       	mov    eax,0x0
c0001dd9:	c3                   	ret    
c0001dda:	66 90                	xchg   ax,ax

c0001ddc <isgraph>:
c0001ddc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de0:	e8 87 ff ff ff       	call   c0001d6c <isalnum>
c0001de5:	83 c4 04             	add    esp,0x4
c0001de8:	85 c0                	test   eax,eax
c0001dea:	75 10                	jne    c0001dfc <isgraph+0x20>
c0001dec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df0:	e8 a7 ff ff ff       	call   c0001d9c <ispunct>
c0001df5:	83 c4 04             	add    esp,0x4
c0001df8:	85 c0                	test   eax,eax
c0001dfa:	74 08                	je     c0001e04 <isgraph+0x28>
c0001dfc:	b8 01 00 00 00       	mov    eax,0x1
c0001e01:	c3                   	ret    
c0001e02:	66 90                	xchg   ax,ax
c0001e04:	b8 00 00 00 00       	mov    eax,0x0
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax

c0001e0c <isprint>:
c0001e0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e10:	e8 c7 ff ff ff       	call   c0001ddc <isgraph>
c0001e15:	83 c4 04             	add    esp,0x4
c0001e18:	85 c0                	test   eax,eax
c0001e1a:	75 08                	jne    c0001e24 <isprint+0x18>
c0001e1c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e21:	75 09                	jne    c0001e2c <isprint+0x20>
c0001e23:	90                   	nop
c0001e24:	b8 01 00 00 00       	mov    eax,0x1
c0001e29:	c3                   	ret    
c0001e2a:	66 90                	xchg   ax,ax
c0001e2c:	b8 00 00 00 00       	mov    eax,0x0
c0001e31:	c3                   	ret    
c0001e32:	66 90                	xchg   ax,ax

c0001e34 <isxdigit>:
c0001e34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e38:	e8 83 fe ff ff       	call   c0001cc0 <isdigit>
c0001e3d:	83 c4 04             	add    esp,0x4
c0001e40:	85 c0                	test   eax,eax
c0001e42:	75 20                	jne    c0001e64 <isxdigit+0x30>
c0001e44:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e49:	7e 09                	jle    c0001e54 <isxdigit+0x20>
c0001e4b:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001e50:	7e 12                	jle    c0001e64 <isxdigit+0x30>
c0001e52:	66 90                	xchg   ax,ax
c0001e54:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001e59:	7e 11                	jle    c0001e6c <isxdigit+0x38>
c0001e5b:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001e60:	7f 0a                	jg     c0001e6c <isxdigit+0x38>
c0001e62:	66 90                	xchg   ax,ax
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    

c0001e72 <disk_status>:
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	c3                   	ret    

c0001e75 <disk_initialize>:
c0001e75:	31 c0                	xor    eax,eax
c0001e77:	c3                   	ret    

c0001e78 <disk_read>:
c0001e78:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e7d:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e89:	e9 52 67 02 00       	jmp    c00285e0 <fatWrapperReadDisk>

c0001e8e <disk_write>:
c0001e8e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e93:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e9f:	e9 7c 67 02 00       	jmp    c0028620 <fatWrapperWriteDisk>

c0001ea4 <disk_ioctl>:
c0001ea4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001ead:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eb2:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ebe:	e9 9d 67 02 00       	jmp    c0028660 <fatWrapperIoctl>

c0001ec3 <ld_word>:
c0001ec3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ec7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eca:	c1 e2 08             	shl    edx,0x8
c0001ecd:	09 d0                	or     eax,edx
c0001ecf:	c3                   	ret    

c0001ed0 <ld_dword>:
c0001ed0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001ed4:	89 d1                	mov    ecx,edx
c0001ed6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001eda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001edd:	c1 e1 08             	shl    ecx,0x8
c0001ee0:	09 ca                	or     edx,ecx
c0001ee2:	c1 e2 08             	shl    edx,0x8
c0001ee5:	09 d0                	or     eax,edx
c0001ee7:	c3                   	ret    

c0001ee8 <st_word>:
c0001ee8:	66 89 10             	mov    WORD PTR [eax],dx
c0001eeb:	c3                   	ret    

c0001eec <st_dword>:
c0001eec:	89 10                	mov    DWORD PTR [eax],edx
c0001eee:	c3                   	ret    

c0001eef <mem_cpy>:
c0001eef:	85 c9                	test   ecx,ecx
c0001ef1:	74 10                	je     c0001f03 <mem_cpy+0x14>
c0001ef3:	57                   	push   edi
c0001ef4:	01 c1                	add    ecx,eax
c0001ef6:	56                   	push   esi
c0001ef7:	89 c7                	mov    edi,eax
c0001ef9:	89 d6                	mov    esi,edx
c0001efb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001efc:	39 f9                	cmp    ecx,edi
c0001efe:	75 fb                	jne    c0001efb <mem_cpy+0xc>
c0001f00:	5e                   	pop    esi
c0001f01:	5f                   	pop    edi
c0001f02:	c3                   	ret    
c0001f03:	c3                   	ret    

c0001f04 <mem_set>:
c0001f04:	01 c1                	add    ecx,eax
c0001f06:	88 10                	mov    BYTE PTR [eax],dl
c0001f08:	40                   	inc    eax
c0001f09:	39 c8                	cmp    eax,ecx
c0001f0b:	75 f9                	jne    c0001f06 <mem_set+0x2>
c0001f0d:	c3                   	ret    

c0001f0e <mem_cmp>:
c0001f0e:	57                   	push   edi
c0001f0f:	56                   	push   esi
c0001f10:	89 c6                	mov    esi,eax
c0001f12:	53                   	push   ebx
c0001f13:	46                   	inc    esi
c0001f14:	42                   	inc    edx
c0001f15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f19:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f1d:	29 fb                	sub    ebx,edi
c0001f1f:	89 cf                	mov    edi,ecx
c0001f21:	29 f7                	sub    edi,esi
c0001f23:	01 c7                	add    edi,eax
c0001f25:	74 04                	je     c0001f2b <mem_cmp+0x1d>
c0001f27:	85 db                	test   ebx,ebx
c0001f29:	74 e8                	je     c0001f13 <mem_cmp+0x5>
c0001f2b:	89 d8                	mov    eax,ebx
c0001f2d:	5b                   	pop    ebx
c0001f2e:	5e                   	pop    esi
c0001f2f:	5f                   	pop    edi
c0001f30:	c3                   	ret    

c0001f31 <chk_chr>:
c0001f31:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f34:	85 c9                	test   ecx,ecx
c0001f36:	74 07                	je     c0001f3f <chk_chr+0xe>
c0001f38:	39 d1                	cmp    ecx,edx
c0001f3a:	74 03                	je     c0001f3f <chk_chr+0xe>
c0001f3c:	40                   	inc    eax
c0001f3d:	eb f2                	jmp    c0001f31 <chk_chr>
c0001f3f:	89 c8                	mov    eax,ecx
c0001f41:	c3                   	ret    

c0001f42 <dbc_1st>:
c0001f42:	31 c0                	xor    eax,eax
c0001f44:	c3                   	ret    

c0001f45 <dbc_2nd>:
c0001f45:	31 c0                	xor    eax,eax
c0001f47:	c3                   	ret    

c0001f48 <tchar2uni>:
c0001f48:	57                   	push   edi
c0001f49:	56                   	push   esi
c0001f4a:	53                   	push   ebx
c0001f4b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f4d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001f4f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001f52:	f6 c1 80             	test   cl,0x80
c0001f55:	75 0a                	jne    c0001f61 <tchar2uni+0x19>
c0001f57:	0f b6 d1             	movzx  edx,cl
c0001f5a:	89 f3                	mov    ebx,esi
c0001f5c:	e9 b2 00 00 00       	jmp    c0002013 <tchar2uni+0xcb>
c0001f61:	89 ca                	mov    edx,ecx
c0001f63:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001f69:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001f6f:	89 ca                	mov    edx,ecx
c0001f71:	75 0a                	jne    c0001f7d <tchar2uni+0x35>
c0001f73:	83 e2 1f             	and    edx,0x1f
c0001f76:	b9 01 00 00 00       	mov    ecx,0x1
c0001f7b:	eb 37                	jmp    c0001fb4 <tchar2uni+0x6c>
c0001f7d:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001f83:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001f89:	75 0c                	jne    c0001f97 <tchar2uni+0x4f>
c0001f8b:	89 ca                	mov    edx,ecx
c0001f8d:	b9 02 00 00 00       	mov    ecx,0x2
c0001f92:	83 e2 0f             	and    edx,0xf
c0001f95:	eb 1d                	jmp    c0001fb4 <tchar2uni+0x6c>
c0001f97:	89 cf                	mov    edi,ecx
c0001f99:	83 ca ff             	or     edx,0xffffffff
c0001f9c:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001fa2:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001fa8:	75 70                	jne    c000201a <tchar2uni+0xd2>
c0001faa:	89 ca                	mov    edx,ecx
c0001fac:	b9 03 00 00 00       	mov    ecx,0x3
c0001fb1:	83 e2 07             	and    edx,0x7
c0001fb4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001fb8:	46                   	inc    esi
c0001fb9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001fbc:	89 cf                	mov    edi,ecx
c0001fbe:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001fc4:	83 c7 80             	add    edi,0xffffff80
c0001fc7:	75 4e                	jne    c0002017 <tchar2uni+0xcf>
c0001fc9:	c1 e2 06             	shl    edx,0x6
c0001fcc:	83 e1 3f             	and    ecx,0x3f
c0001fcf:	09 ca                	or     edx,ecx
c0001fd1:	39 de                	cmp    esi,ebx
c0001fd3:	75 e3                	jne    c0001fb8 <tchar2uni+0x70>
c0001fd5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001fdb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fe1:	76 34                	jbe    c0002017 <tchar2uni+0xcf>
c0001fe3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001fe6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001fec:	77 29                	ja     c0002017 <tchar2uni+0xcf>
c0001fee:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ff4:	76 1d                	jbe    c0002013 <tchar2uni+0xcb>
c0001ff6:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ffc:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002002:	c1 e1 06             	shl    ecx,0x6
c0002005:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000200b:	09 ca                	or     edx,ecx
c000200d:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002013:	89 18                	mov    DWORD PTR [eax],ebx
c0002015:	eb 03                	jmp    c000201a <tchar2uni+0xd2>
c0002017:	83 ca ff             	or     edx,0xffffffff
c000201a:	5b                   	pop    ebx
c000201b:	89 d0                	mov    eax,edx
c000201d:	5e                   	pop    esi
c000201e:	5f                   	pop    edi
c000201f:	c3                   	ret    

c0002020 <put_utf>:
c0002020:	53                   	push   ebx
c0002021:	83 f8 7f             	cmp    eax,0x7f
c0002024:	89 c3                	mov    ebx,eax
c0002026:	b0 00                	mov    al,0x0
c0002028:	77 11                	ja     c000203b <put_utf+0x1b>
c000202a:	85 c9                	test   ecx,ecx
c000202c:	0f 84 e5 00 00 00    	je     c0002117 <put_utf+0xf7>
c0002032:	88 1a                	mov    BYTE PTR [edx],bl
c0002034:	b0 01                	mov    al,0x1
c0002036:	e9 dc 00 00 00       	jmp    c0002117 <put_utf+0xf7>
c000203b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002041:	77 23                	ja     c0002066 <put_utf+0x46>
c0002043:	83 f9 01             	cmp    ecx,0x1
c0002046:	0f 86 cb 00 00 00    	jbe    c0002117 <put_utf+0xf7>
c000204c:	89 d8                	mov    eax,ebx
c000204e:	83 e3 3f             	and    ebx,0x3f
c0002051:	c1 e8 06             	shr    eax,0x6
c0002054:	83 cb 80             	or     ebx,0xffffff80
c0002057:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000205a:	83 c8 c0             	or     eax,0xffffffc0
c000205d:	88 02                	mov    BYTE PTR [edx],al
c000205f:	b0 02                	mov    al,0x2
c0002061:	e9 b1 00 00 00       	jmp    c0002117 <put_utf+0xf7>
c0002066:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000206c:	77 40                	ja     c00020ae <put_utf+0x8e>
c000206e:	83 f9 02             	cmp    ecx,0x2
c0002071:	0f 86 a0 00 00 00    	jbe    c0002117 <put_utf+0xf7>
c0002077:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000207d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002083:	0f 86 8e 00 00 00    	jbe    c0002117 <put_utf+0xf7>
c0002089:	89 d8                	mov    eax,ebx
c000208b:	c1 e8 0c             	shr    eax,0xc
c000208e:	83 c8 e0             	or     eax,0xffffffe0
c0002091:	88 02                	mov    BYTE PTR [edx],al
c0002093:	89 d8                	mov    eax,ebx
c0002095:	83 e3 3f             	and    ebx,0x3f
c0002098:	c1 e8 06             	shr    eax,0x6
c000209b:	83 cb 80             	or     ebx,0xffffff80
c000209e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00020a1:	83 e0 3f             	and    eax,0x3f
c00020a4:	83 c8 80             	or     eax,0xffffff80
c00020a7:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020aa:	b0 03                	mov    al,0x3
c00020ac:	eb 69                	jmp    c0002117 <put_utf+0xf7>
c00020ae:	83 f9 03             	cmp    ecx,0x3
c00020b1:	76 64                	jbe    c0002117 <put_utf+0xf7>
c00020b3:	89 d9                	mov    ecx,ebx
c00020b5:	0f b7 c3             	movzx  eax,bx
c00020b8:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00020be:	66 31 c9             	xor    cx,cx
c00020c1:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00020c7:	c1 e9 06             	shr    ecx,0x6
c00020ca:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00020d0:	77 43                	ja     c0002115 <put_utf+0xf5>
c00020d2:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00020d8:	77 3b                	ja     c0002115 <put_utf+0xf5>
c00020da:	09 cb                	or     ebx,ecx
c00020dc:	81 c3 00 00 01 00    	add    ebx,0x10000
c00020e2:	89 d8                	mov    eax,ebx
c00020e4:	c1 e8 12             	shr    eax,0x12
c00020e7:	83 c8 f0             	or     eax,0xfffffff0
c00020ea:	88 02                	mov    BYTE PTR [edx],al
c00020ec:	89 d8                	mov    eax,ebx
c00020ee:	c1 e8 0c             	shr    eax,0xc
c00020f1:	83 e0 3f             	and    eax,0x3f
c00020f4:	83 c8 80             	or     eax,0xffffff80
c00020f7:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020fa:	89 d8                	mov    eax,ebx
c00020fc:	83 e3 3f             	and    ebx,0x3f
c00020ff:	c1 e8 06             	shr    eax,0x6
c0002102:	83 cb 80             	or     ebx,0xffffff80
c0002105:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002108:	83 e0 3f             	and    eax,0x3f
c000210b:	83 c8 80             	or     eax,0xffffff80
c000210e:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002111:	b0 04                	mov    al,0x4
c0002113:	eb 02                	jmp    c0002117 <put_utf+0xf7>
c0002115:	31 c0                	xor    eax,eax
c0002117:	5b                   	pop    ebx
c0002118:	c3                   	ret    

c0002119 <clst2sect>:
c0002119:	8d 4a fe             	lea    ecx,[edx-0x2]
c000211c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000211f:	83 ea 02             	sub    edx,0x2
c0002122:	39 ca                	cmp    edx,ecx
c0002124:	76 0d                	jbe    c0002133 <clst2sect+0x1a>
c0002126:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000212a:	0f af d1             	imul   edx,ecx
c000212d:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002130:	89 d0                	mov    eax,edx
c0002132:	c3                   	ret    
c0002133:	31 c0                	xor    eax,eax
c0002135:	c3                   	ret    

c0002136 <pick_lfn>:
c0002136:	55                   	push   ebp
c0002137:	57                   	push   edi
c0002138:	89 c7                	mov    edi,eax
c000213a:	56                   	push   esi
c000213b:	53                   	push   ebx
c000213c:	89 d3                	mov    ebx,edx
c000213e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002141:	e8 7d fd ff ff       	call   c0001ec3 <ld_word>
c0002146:	66 85 c0             	test   ax,ax
c0002149:	74 04                	je     c000214f <pick_lfn+0x19>
c000214b:	31 c0                	xor    eax,eax
c000214d:	eb 62                	jmp    c00021b1 <pick_lfn+0x7b>
c000214f:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002152:	bd 01 00 00 00       	mov    ebp,0x1
c0002157:	31 f6                	xor    esi,esi
c0002159:	83 e1 bf             	and    ecx,0xffffffbf
c000215c:	49                   	dec    ecx
c000215d:	6b c9 0d             	imul   ecx,ecx,0xd
c0002160:	0f b6 86 40 f2 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0dc0]
c0002167:	01 d8                	add    eax,ebx
c0002169:	e8 55 fd ff ff       	call   c0001ec3 <ld_word>
c000216e:	66 85 ed             	test   bp,bp
c0002171:	74 11                	je     c0002184 <pick_lfn+0x4e>
c0002173:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002179:	77 d0                	ja     c000214b <pick_lfn+0x15>
c000217b:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000217f:	89 c5                	mov    ebp,eax
c0002181:	41                   	inc    ecx
c0002182:	eb 0a                	jmp    c000218e <pick_lfn+0x58>
c0002184:	0f b7 c0             	movzx  eax,ax
c0002187:	3d ff ff 00 00       	cmp    eax,0xffff
c000218c:	75 bd                	jne    c000214b <pick_lfn+0x15>
c000218e:	46                   	inc    esi
c000218f:	83 fe 0d             	cmp    esi,0xd
c0002192:	75 cc                	jne    c0002160 <pick_lfn+0x2a>
c0002194:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002197:	74 13                	je     c00021ac <pick_lfn+0x76>
c0002199:	66 85 ed             	test   bp,bp
c000219c:	74 0e                	je     c00021ac <pick_lfn+0x76>
c000219e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021a4:	77 a5                	ja     c000214b <pick_lfn+0x15>
c00021a6:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00021ac:	b8 01 00 00 00       	mov    eax,0x1
c00021b1:	5b                   	pop    ebx
c00021b2:	5e                   	pop    esi
c00021b3:	5f                   	pop    edi
c00021b4:	5d                   	pop    ebp
c00021b5:	c3                   	ret    

c00021b6 <put_lfn>:
c00021b6:	55                   	push   ebp
c00021b7:	57                   	push   edi
c00021b8:	89 d7                	mov    edi,edx
c00021ba:	56                   	push   esi
c00021bb:	31 f6                	xor    esi,esi
c00021bd:	53                   	push   ebx
c00021be:	83 ec 0c             	sub    esp,0xc
c00021c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00021c5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00021c9:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00021d3:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021d6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021d9:	31 d2                	xor    edx,edx
c00021db:	e8 08 fd ff ff       	call   c0001ee8 <st_word>
c00021e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021e7:	0f b6 d9             	movzx  ebx,cl
c00021ea:	4b                   	dec    ebx
c00021eb:	6b db 0d             	imul   ebx,ebx,0xd
c00021ee:	0f b7 c6             	movzx  eax,si
c00021f1:	3d ff ff 00 00       	cmp    eax,0xffff
c00021f6:	74 09                	je     c0002201 <put_lfn+0x4b>
c00021f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00021fc:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002200:	43                   	inc    ebx
c0002201:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002204:	0f b7 ee             	movzx  ebp,si
c0002207:	89 ea                	mov    edx,ebp
c0002209:	0f b6 80 40 f2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0dc0]
c0002210:	01 f8                	add    eax,edi
c0002212:	e8 d1 fc ff ff       	call   c0001ee8 <st_word>
c0002217:	85 ed                	test   ebp,ebp
c0002219:	75 05                	jne    c0002220 <put_lfn+0x6a>
c000221b:	be ff ff 00 00       	mov    esi,0xffff
c0002220:	ff 04 24             	inc    DWORD PTR [esp]
c0002223:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002227:	75 c5                	jne    c00021ee <put_lfn+0x38>
c0002229:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000222f:	74 0b                	je     c000223c <put_lfn+0x86>
c0002231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002235:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000223a:	75 07                	jne    c0002243 <put_lfn+0x8d>
c000223c:	83 c9 40             	or     ecx,0x40
c000223f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002243:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002247:	88 07                	mov    BYTE PTR [edi],al
c0002249:	83 c4 0c             	add    esp,0xc
c000224c:	5b                   	pop    ebx
c000224d:	5e                   	pop    esi
c000224e:	5f                   	pop    edi
c000224f:	5d                   	pop    ebp
c0002250:	c3                   	ret    

c0002251 <gen_numname>:
c0002251:	57                   	push   edi
c0002252:	89 cf                	mov    edi,ecx
c0002254:	56                   	push   esi
c0002255:	b9 0b 00 00 00       	mov    ecx,0xb
c000225a:	53                   	push   ebx
c000225b:	89 c6                	mov    esi,eax
c000225d:	83 ec 10             	sub    esp,0x10
c0002260:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002264:	e8 86 fc ff ff       	call   c0001eef <mem_cpy>
c0002269:	83 fb 05             	cmp    ebx,0x5
c000226c:	76 30                	jbe    c000229e <gen_numname+0x4d>
c000226e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002271:	66 85 c0             	test   ax,ax
c0002274:	74 28                	je     c000229e <gen_numname+0x4d>
c0002276:	83 c7 02             	add    edi,0x2
c0002279:	ba 10 00 00 00       	mov    edx,0x10
c000227e:	89 c1                	mov    ecx,eax
c0002280:	01 db                	add    ebx,ebx
c0002282:	c1 e0 10             	shl    eax,0x10
c0002285:	83 e1 01             	and    ecx,0x1
c0002288:	c1 e8 11             	shr    eax,0x11
c000228b:	01 cb                	add    ebx,ecx
c000228d:	0f ba e3 10          	bt     ebx,0x10
c0002291:	73 06                	jae    c0002299 <gen_numname+0x48>
c0002293:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002299:	4a                   	dec    edx
c000229a:	75 e2                	jne    c000227e <gen_numname+0x2d>
c000229c:	eb d0                	jmp    c000226e <gen_numname+0x1d>
c000229e:	b8 07 00 00 00       	mov    eax,0x7
c00022a3:	89 d9                	mov    ecx,ebx
c00022a5:	83 e1 0f             	and    ecx,0xf
c00022a8:	8d 79 30             	lea    edi,[ecx+0x30]
c00022ab:	83 ff 39             	cmp    edi,0x39
c00022ae:	89 fa                	mov    edx,edi
c00022b0:	76 03                	jbe    c00022b5 <gen_numname+0x64>
c00022b2:	8d 51 37             	lea    edx,[ecx+0x37]
c00022b5:	8d 48 ff             	lea    ecx,[eax-0x1]
c00022b8:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00022bc:	89 da                	mov    edx,ebx
c00022be:	c1 ea 04             	shr    edx,0x4
c00022c1:	83 fb 0f             	cmp    ebx,0xf
c00022c4:	76 06                	jbe    c00022cc <gen_numname+0x7b>
c00022c6:	89 c8                	mov    eax,ecx
c00022c8:	89 d3                	mov    ebx,edx
c00022ca:	eb d7                	jmp    c00022a3 <gen_numname+0x52>
c00022cc:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00022d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00022d4:	31 d2                	xor    edx,edx
c00022d6:	8d 04 16             	lea    eax,[esi+edx*1]
c00022d9:	39 ca                	cmp    edx,ecx
c00022db:	73 19                	jae    c00022f6 <gen_numname+0xa5>
c00022dd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022e0:	83 f8 20             	cmp    eax,0x20
c00022e3:	74 11                	je     c00022f6 <gen_numname+0xa5>
c00022e5:	e8 58 fc ff ff       	call   c0001f42 <dbc_1st>
c00022ea:	85 c0                	test   eax,eax
c00022ec:	74 05                	je     c00022f3 <gen_numname+0xa2>
c00022ee:	39 d3                	cmp    ebx,edx
c00022f0:	74 04                	je     c00022f6 <gen_numname+0xa5>
c00022f2:	42                   	inc    edx
c00022f3:	42                   	inc    edx
c00022f4:	eb e0                	jmp    c00022d6 <gen_numname+0x85>
c00022f6:	83 f9 07             	cmp    ecx,0x7
c00022f9:	b0 20                	mov    al,0x20
c00022fb:	77 05                	ja     c0002302 <gen_numname+0xb1>
c00022fd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002301:	41                   	inc    ecx
c0002302:	42                   	inc    edx
c0002303:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002307:	83 fa 07             	cmp    edx,0x7
c000230a:	76 ea                	jbe    c00022f6 <gen_numname+0xa5>
c000230c:	83 c4 10             	add    esp,0x10
c000230f:	5b                   	pop    ebx
c0002310:	5e                   	pop    esi
c0002311:	5f                   	pop    edi
c0002312:	c3                   	ret    

c0002313 <sum_sfn>:
c0002313:	53                   	push   ebx
c0002314:	31 c9                	xor    ecx,ecx
c0002316:	31 db                	xor    ebx,ebx
c0002318:	0f b6 d1             	movzx  edx,cl
c000231b:	d1 ea                	shr    edx,1
c000231d:	c1 e1 07             	shl    ecx,0x7
c0002320:	09 ca                	or     edx,ecx
c0002322:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002325:	43                   	inc    ebx
c0002326:	01 ca                	add    edx,ecx
c0002328:	83 fb 0b             	cmp    ebx,0xb
c000232b:	88 d1                	mov    cl,dl
c000232d:	75 e9                	jne    c0002318 <sum_sfn+0x5>
c000232f:	5b                   	pop    ebx
c0002330:	88 d0                	mov    al,dl
c0002332:	c3                   	ret    

c0002333 <get_ldnumber>:
c0002333:	55                   	push   ebp
c0002334:	57                   	push   edi
c0002335:	56                   	push   esi
c0002336:	83 ce ff             	or     esi,0xffffffff
c0002339:	53                   	push   ebx
c000233a:	8b 10                	mov    edx,DWORD PTR [eax]
c000233c:	85 d2                	test   edx,edx
c000233e:	74 38                	je     c0002378 <get_ldnumber+0x45>
c0002340:	89 c5                	mov    ebp,eax
c0002342:	89 d1                	mov    ecx,edx
c0002344:	41                   	inc    ecx
c0002345:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002349:	80 fb 1f             	cmp    bl,0x1f
c000234c:	76 05                	jbe    c0002353 <get_ldnumber+0x20>
c000234e:	83 fb 3a             	cmp    ebx,0x3a
c0002351:	75 f1                	jne    c0002344 <get_ldnumber+0x11>
c0002353:	31 f6                	xor    esi,esi
c0002355:	83 fb 3a             	cmp    ebx,0x3a
c0002358:	75 1e                	jne    c0002378 <get_ldnumber+0x45>
c000235a:	8a 1a                	mov    bl,BYTE PTR [edx]
c000235c:	83 ce ff             	or     esi,0xffffffff
c000235f:	8d 7b d0             	lea    edi,[ebx-0x30]
c0002362:	89 f8                	mov    eax,edi
c0002364:	3c 09                	cmp    al,0x9
c0002366:	77 10                	ja     c0002378 <get_ldnumber+0x45>
c0002368:	83 c2 02             	add    edx,0x2
c000236b:	39 d1                	cmp    ecx,edx
c000236d:	75 09                	jne    c0002378 <get_ldnumber+0x45>
c000236f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002372:	0f be f3             	movsx  esi,bl
c0002375:	83 ee 30             	sub    esi,0x30
c0002378:	5b                   	pop    ebx
c0002379:	89 f0                	mov    eax,esi
c000237b:	5e                   	pop    esi
c000237c:	5f                   	pop    edi
c000237d:	5d                   	pop    ebp
c000237e:	c3                   	ret    

c000237f <validate>:
c000237f:	56                   	push   esi
c0002380:	85 c0                	test   eax,eax
c0002382:	53                   	push   ebx
c0002383:	89 d6                	mov    esi,edx
c0002385:	51                   	push   ecx
c0002386:	75 09                	jne    c0002391 <validate+0x12>
c0002388:	b8 09 00 00 00       	mov    eax,0x9
c000238d:	31 c9                	xor    ecx,ecx
c000238f:	eb 2e                	jmp    c00023bf <validate+0x40>
c0002391:	89 c3                	mov    ebx,eax
c0002393:	8b 00                	mov    eax,DWORD PTR [eax]
c0002395:	85 c0                	test   eax,eax
c0002397:	74 ef                	je     c0002388 <validate+0x9>
c0002399:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000239c:	74 ea                	je     c0002388 <validate+0x9>
c000239e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00023a1:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00023a5:	75 e1                	jne    c0002388 <validate+0x9>
c00023a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ab:	83 ec 0c             	sub    esp,0xc
c00023ae:	50                   	push   eax
c00023af:	e8 be fa ff ff       	call   c0001e72 <disk_status>
c00023b4:	83 c4 10             	add    esp,0x10
c00023b7:	a8 01                	test   al,0x1
c00023b9:	75 cd                	jne    c0002388 <validate+0x9>
c00023bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023bd:	31 c0                	xor    eax,eax
c00023bf:	89 0e                	mov    DWORD PTR [esi],ecx
c00023c1:	5a                   	pop    edx
c00023c2:	5b                   	pop    ebx
c00023c3:	5e                   	pop    esi
c00023c4:	c3                   	ret    

c00023c5 <sync_window>:
c00023c5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023c9:	74 58                	je     c0002423 <sync_window+0x5e>
c00023cb:	56                   	push   esi
c00023cc:	53                   	push   ebx
c00023cd:	89 c3                	mov    ebx,eax
c00023cf:	51                   	push   ecx
c00023d0:	6a 01                	push   0x1
c00023d2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00023d5:	8d 70 34             	lea    esi,[eax+0x34]
c00023d8:	56                   	push   esi
c00023d9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023dd:	50                   	push   eax
c00023de:	e8 ab fa ff ff       	call   c0001e8e <disk_write>
c00023e3:	83 c4 10             	add    esp,0x10
c00023e6:	ba 01 00 00 00       	mov    edx,0x1
c00023eb:	85 c0                	test   eax,eax
c00023ed:	75 2e                	jne    c000241d <sync_window+0x58>
c00023ef:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023f3:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023f6:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023f9:	89 c1                	mov    ecx,eax
c00023fb:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023fe:	39 d1                	cmp    ecx,edx
c0002400:	73 19                	jae    c000241b <sync_window+0x56>
c0002402:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002406:	75 13                	jne    c000241b <sync_window+0x56>
c0002408:	6a 01                	push   0x1
c000240a:	01 d0                	add    eax,edx
c000240c:	50                   	push   eax
c000240d:	56                   	push   esi
c000240e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002412:	50                   	push   eax
c0002413:	e8 76 fa ff ff       	call   c0001e8e <disk_write>
c0002418:	83 c4 10             	add    esp,0x10
c000241b:	31 d2                	xor    edx,edx
c000241d:	89 d0                	mov    eax,edx
c000241f:	5a                   	pop    edx
c0002420:	5b                   	pop    ebx
c0002421:	5e                   	pop    esi
c0002422:	c3                   	ret    
c0002423:	31 d2                	xor    edx,edx
c0002425:	89 d0                	mov    eax,edx
c0002427:	c3                   	ret    

c0002428 <move_window>:
c0002428:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000242b:	74 3a                	je     c0002467 <move_window+0x3f>
c000242d:	56                   	push   esi
c000242e:	89 d6                	mov    esi,edx
c0002430:	53                   	push   ebx
c0002431:	89 c3                	mov    ebx,eax
c0002433:	51                   	push   ecx
c0002434:	e8 8c ff ff ff       	call   c00023c5 <sync_window>
c0002439:	85 c0                	test   eax,eax
c000243b:	75 2d                	jne    c000246a <move_window+0x42>
c000243d:	6a 01                	push   0x1
c000243f:	56                   	push   esi
c0002440:	8d 43 34             	lea    eax,[ebx+0x34]
c0002443:	50                   	push   eax
c0002444:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002448:	50                   	push   eax
c0002449:	e8 2a fa ff ff       	call   c0001e78 <disk_read>
c000244e:	83 c4 10             	add    esp,0x10
c0002451:	89 c2                	mov    edx,eax
c0002453:	31 c0                	xor    eax,eax
c0002455:	85 d2                	test   edx,edx
c0002457:	ba ff ff ff ff       	mov    edx,0xffffffff
c000245c:	0f 45 f2             	cmovne esi,edx
c000245f:	0f 95 c0             	setne  al
c0002462:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002465:	eb 03                	jmp    c000246a <move_window+0x42>
c0002467:	31 c0                	xor    eax,eax
c0002469:	c3                   	ret    
c000246a:	5a                   	pop    edx
c000246b:	5b                   	pop    ebx
c000246c:	5e                   	pop    esi
c000246d:	c3                   	ret    

c000246e <check_fs>:
c000246e:	53                   	push   ebx
c000246f:	89 c3                	mov    ebx,eax
c0002471:	83 ec 08             	sub    esp,0x8
c0002474:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002478:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000247f:	e8 a4 ff ff ff       	call   c0002428 <move_window>
c0002484:	ba 04 00 00 00       	mov    edx,0x4
c0002489:	85 c0                	test   eax,eax
c000248b:	75 68                	jne    c00024f5 <check_fs+0x87>
c000248d:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002493:	e8 2b fa ff ff       	call   c0001ec3 <ld_word>
c0002498:	ba 03 00 00 00       	mov    edx,0x3
c000249d:	66 3d 55 aa          	cmp    ax,0xaa55
c00024a1:	75 52                	jne    c00024f5 <check_fs+0x87>
c00024a3:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00024a6:	8d 50 18             	lea    edx,[eax+0x18]
c00024a9:	80 fa 01             	cmp    dl,0x1
c00024ac:	76 09                	jbe    c00024b7 <check_fs+0x49>
c00024ae:	3c eb                	cmp    al,0xeb
c00024b0:	ba 02 00 00 00       	mov    edx,0x2
c00024b5:	75 3e                	jne    c00024f5 <check_fs+0x87>
c00024b7:	ba 50 2f 03 c0       	mov    edx,0xc0032f50
c00024bc:	b9 03 00 00 00       	mov    ecx,0x3
c00024c1:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00024c4:	e8 45 fa ff ff       	call   c0001f0e <mem_cmp>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	85 c0                	test   eax,eax
c00024cd:	74 26                	je     c00024f5 <check_fs+0x87>
c00024cf:	ba fc f0 02 c0       	mov    edx,0xc002f0fc
c00024d4:	b9 05 00 00 00       	mov    ecx,0x5
c00024d9:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00024df:	e8 2a fa ff ff       	call   c0001f0e <mem_cmp>
c00024e4:	31 d2                	xor    edx,edx
c00024e6:	85 c0                	test   eax,eax
c00024e8:	74 0b                	je     c00024f5 <check_fs+0x87>
c00024ea:	31 d2                	xor    edx,edx
c00024ec:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024f0:	0f 95 c2             	setne  dl
c00024f3:	01 d2                	add    edx,edx
c00024f5:	83 c4 08             	add    esp,0x8
c00024f8:	89 d0                	mov    eax,edx
c00024fa:	5b                   	pop    ebx
c00024fb:	c3                   	ret    

c00024fc <find_volume>:
c00024fc:	55                   	push   ebp
c00024fd:	57                   	push   edi
c00024fe:	56                   	push   esi
c00024ff:	89 c6                	mov    esi,eax
c0002501:	53                   	push   ebx
c0002502:	89 d3                	mov    ebx,edx
c0002504:	83 ec 2c             	sub    esp,0x2c
c0002507:	31 d2                	xor    edx,edx
c0002509:	e8 60 ff ff ff       	call   c000246e <check_fs>
c000250e:	85 db                	test   ebx,ebx
c0002510:	0f 94 c2             	sete   dl
c0002513:	83 f8 02             	cmp    eax,0x2
c0002516:	74 07                	je     c000251f <find_volume+0x23>
c0002518:	77 63                	ja     c000257d <find_volume+0x81>
c000251a:	f6 c2 01             	test   dl,0x1
c000251d:	75 5e                	jne    c000257d <find_volume+0x81>
c000251f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002529:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000252f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002533:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002537:	89 f8                	mov    eax,edi
c0002539:	83 c7 10             	add    edi,0x10
c000253c:	e8 8f f9 ff ff       	call   c0001ed0 <ld_dword>
c0002541:	83 c5 04             	add    ebp,0x4
c0002544:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002548:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000254b:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000254f:	75 e2                	jne    c0002533 <find_volume+0x37>
c0002551:	83 fb 01             	cmp    ebx,0x1
c0002554:	0f b6 fa             	movzx  edi,dl
c0002557:	83 d3 ff             	adc    ebx,0xffffffff
c000255a:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000255e:	b8 03 00 00 00       	mov    eax,0x3
c0002563:	85 d2                	test   edx,edx
c0002565:	74 07                	je     c000256e <find_volume+0x72>
c0002567:	89 f0                	mov    eax,esi
c0002569:	e8 00 ff ff ff       	call   c000246e <check_fs>
c000256e:	83 f8 01             	cmp    eax,0x1
c0002571:	76 0a                	jbe    c000257d <find_volume+0x81>
c0002573:	85 ff                	test   edi,edi
c0002575:	74 06                	je     c000257d <find_volume+0x81>
c0002577:	43                   	inc    ebx
c0002578:	83 fb 03             	cmp    ebx,0x3
c000257b:	76 dd                	jbe    c000255a <find_volume+0x5e>
c000257d:	83 c4 2c             	add    esp,0x2c
c0002580:	5b                   	pop    ebx
c0002581:	5e                   	pop    esi
c0002582:	5f                   	pop    edi
c0002583:	5d                   	pop    ebp
c0002584:	c3                   	ret    

c0002585 <mount_volume>:
c0002585:	55                   	push   ebp
c0002586:	89 d5                	mov    ebp,edx
c0002588:	57                   	push   edi
c0002589:	89 cf                	mov    edi,ecx
c000258b:	56                   	push   esi
c000258c:	53                   	push   ebx
c000258d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002592:	83 ec 2c             	sub    esp,0x2c
c0002595:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000259b:	e8 93 fd ff ff       	call   c0002333 <get_ldnumber>
c00025a0:	85 c0                	test   eax,eax
c00025a2:	0f 88 d0 02 00 00    	js     c0002878 <mount_volume+0x2f3>
c00025a8:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00025af:	89 c2                	mov    edx,eax
c00025b1:	bb 0c 00 00 00       	mov    ebx,0xc
c00025b6:	85 f6                	test   esi,esi
c00025b8:	0f 84 ba 02 00 00    	je     c0002878 <mount_volume+0x2f3>
c00025be:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00025c1:	83 e7 fe             	and    edi,0xfffffffe
c00025c4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00025c7:	74 3c                	je     c0002605 <mount_volume+0x80>
c00025c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00025d1:	83 ec 0c             	sub    esp,0xc
c00025d4:	50                   	push   eax
c00025d5:	e8 98 f8 ff ff       	call   c0001e72 <disk_status>
c00025da:	83 c4 10             	add    esp,0x10
c00025dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00025e1:	a8 01                	test   al,0x1
c00025e3:	75 20                	jne    c0002605 <mount_volume+0x80>
c00025e5:	31 db                	xor    ebx,ebx
c00025e7:	81 e7 fe 00 00 00    	and    edi,0xfe
c00025ed:	0f 84 85 02 00 00    	je     c0002878 <mount_volume+0x2f3>
c00025f3:	a8 04                	test   al,0x4
c00025f5:	0f 84 7d 02 00 00    	je     c0002878 <mount_volume+0x2f3>
c00025fb:	bb 0a 00 00 00       	mov    ebx,0xa
c0002600:	e9 73 02 00 00       	jmp    c0002878 <mount_volume+0x2f3>
c0002605:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002608:	83 ec 0c             	sub    esp,0xc
c000260b:	0f b6 c2             	movzx  eax,dl
c000260e:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002611:	bb 03 00 00 00       	mov    ebx,0x3
c0002616:	50                   	push   eax
c0002617:	e8 59 f8 ff ff       	call   c0001e75 <disk_initialize>
c000261c:	83 c4 10             	add    esp,0x10
c000261f:	a8 01                	test   al,0x1
c0002621:	0f 85 51 02 00 00    	jne    c0002878 <mount_volume+0x2f3>
c0002627:	81 e7 fe 00 00 00    	and    edi,0xfe
c000262d:	74 04                	je     c0002633 <mount_volume+0xae>
c000262f:	a8 04                	test   al,0x4
c0002631:	75 c8                	jne    c00025fb <mount_volume+0x76>
c0002633:	31 d2                	xor    edx,edx
c0002635:	89 f0                	mov    eax,esi
c0002637:	e8 c0 fe ff ff       	call   c00024fc <find_volume>
c000263c:	bb 01 00 00 00       	mov    ebx,0x1
c0002641:	83 f8 04             	cmp    eax,0x4
c0002644:	0f 84 2e 02 00 00    	je     c0002878 <mount_volume+0x2f3>
c000264a:	83 f8 01             	cmp    eax,0x1
c000264d:	76 0a                	jbe    c0002659 <mount_volume+0xd4>
c000264f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002654:	e9 1f 02 00 00       	jmp    c0002878 <mount_volume+0x2f3>
c0002659:	8d 46 3f             	lea    eax,[esi+0x3f]
c000265c:	e8 62 f8 ff ff       	call   c0001ec3 <ld_word>
c0002661:	66 3d 00 02          	cmp    ax,0x200
c0002665:	75 e8                	jne    c000264f <mount_volume+0xca>
c0002667:	8d 46 4a             	lea    eax,[esi+0x4a]
c000266a:	e8 54 f8 ff ff       	call   c0001ec3 <ld_word>
c000266f:	0f b7 c0             	movzx  eax,ax
c0002672:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002676:	85 c0                	test   eax,eax
c0002678:	75 0c                	jne    c0002686 <mount_volume+0x101>
c000267a:	8d 46 58             	lea    eax,[esi+0x58]
c000267d:	e8 4e f8 ff ff       	call   c0001ed0 <ld_dword>
c0002682:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002686:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002689:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000268c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002694:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002697:	89 e8                	mov    eax,ebp
c0002699:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000269c:	8d 45 ff             	lea    eax,[ebp-0x1]
c000269f:	3c 01                	cmp    al,0x1
c00026a1:	77 ac                	ja     c000264f <mount_volume+0xca>
c00026a3:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00026a7:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00026ab:	66 85 c0             	test   ax,ax
c00026ae:	89 c3                	mov    ebx,eax
c00026b0:	74 9d                	je     c000264f <mount_volume+0xca>
c00026b2:	8d 40 ff             	lea    eax,[eax-0x1]
c00026b5:	85 d8                	test   eax,ebx
c00026b7:	75 96                	jne    c000264f <mount_volume+0xca>
c00026b9:	8d 46 45             	lea    eax,[esi+0x45]
c00026bc:	e8 02 f8 ff ff       	call   c0001ec3 <ld_word>
c00026c1:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00026c5:	a8 0f                	test   al,0xf
c00026c7:	89 c7                	mov    edi,eax
c00026c9:	75 84                	jne    c000264f <mount_volume+0xca>
c00026cb:	8d 46 47             	lea    eax,[esi+0x47]
c00026ce:	e8 f0 f7 ff ff       	call   c0001ec3 <ld_word>
c00026d3:	0f b7 d0             	movzx  edx,ax
c00026d6:	85 d2                	test   edx,edx
c00026d8:	75 0a                	jne    c00026e4 <mount_volume+0x15f>
c00026da:	8d 46 54             	lea    eax,[esi+0x54]
c00026dd:	e8 ee f7 ff ff       	call   c0001ed0 <ld_dword>
c00026e2:	89 c2                	mov    edx,eax
c00026e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00026e8:	8d 46 42             	lea    eax,[esi+0x42]
c00026eb:	e8 d3 f7 ff ff       	call   c0001ec3 <ld_word>
c00026f0:	0f b7 c8             	movzx  ecx,ax
c00026f3:	85 c9                	test   ecx,ecx
c00026f5:	0f 84 54 ff ff ff    	je     c000264f <mount_volume+0xca>
c00026fb:	89 e8                	mov    eax,ebp
c00026fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002701:	0f b6 e8             	movzx  ebp,al
c0002704:	0f b7 c7             	movzx  eax,di
c0002707:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c000270c:	c1 e8 04             	shr    eax,0x4
c000270f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002713:	01 e8                	add    eax,ebp
c0002715:	01 c8                	add    eax,ecx
c0002717:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000271b:	39 c2                	cmp    edx,eax
c000271d:	0f 82 2c ff ff ff    	jb     c000264f <mount_volume+0xca>
c0002723:	29 c2                	sub    edx,eax
c0002725:	89 d5                	mov    ebp,edx
c0002727:	89 d0                	mov    eax,edx
c0002729:	31 d2                	xor    edx,edx
c000272b:	f7 f3                	div    ebx
c000272d:	39 dd                	cmp    ebp,ebx
c000272f:	0f 82 1a ff ff ff    	jb     c000264f <mount_volume+0xca>
c0002735:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000273a:	0f 87 0f ff ff ff    	ja     c000264f <mount_volume+0xca>
c0002740:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002745:	0f 86 1e 01 00 00    	jbe    c0002869 <mount_volume+0x2e4>
c000274b:	bb 03 00 00 00       	mov    ebx,0x3
c0002750:	8d 68 02             	lea    ebp,[eax+0x2]
c0002753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002757:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000275a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000275e:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002762:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002765:	01 c8                	add    eax,ecx
c0002767:	83 fb 03             	cmp    ebx,0x3
c000276a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000276d:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002770:	75 23                	jne    c0002795 <mount_volume+0x210>
c0002772:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002775:	e8 49 f7 ff ff       	call   c0001ec3 <ld_word>
c000277a:	09 c7                	or     edi,eax
c000277c:	66 85 ff             	test   di,di
c000277f:	0f 85 ca fe ff ff    	jne    c000264f <mount_volume+0xca>
c0002785:	8d 46 60             	lea    eax,[esi+0x60]
c0002788:	e8 43 f7 ff ff       	call   c0001ed0 <ld_dword>
c000278d:	c1 e5 02             	shl    ebp,0x2
c0002790:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002793:	eb 25                	jmp    c00027ba <mount_volume+0x235>
c0002795:	66 85 ff             	test   di,di
c0002798:	0f 84 b1 fe ff ff    	je     c000264f <mount_volume+0xca>
c000279e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00027a2:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00027a6:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00027aa:	83 e5 01             	and    ebp,0x1
c00027ad:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027b0:	d1 ea                	shr    edx,1
c00027b2:	01 d5                	add    ebp,edx
c00027b4:	83 fb 02             	cmp    ebx,0x2
c00027b7:	0f 44 ef             	cmove  ebp,edi
c00027ba:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00027c0:	c1 ed 09             	shr    ebp,0x9
c00027c3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00027c7:	0f 87 82 fe ff ff    	ja     c000264f <mount_volume+0xca>
c00027cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00027d4:	83 fb 03             	cmp    ebx,0x3
c00027d7:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00027de:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00027e2:	75 6e                	jne    c0002852 <mount_volume+0x2cd>
c00027e4:	8d 46 64             	lea    eax,[esi+0x64]
c00027e7:	e8 d7 f6 ff ff       	call   c0001ec3 <ld_word>
c00027ec:	66 48                	dec    ax
c00027ee:	75 62                	jne    c0002852 <mount_volume+0x2cd>
c00027f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00027f4:	89 f0                	mov    eax,esi
c00027f6:	42                   	inc    edx
c00027f7:	e8 2c fc ff ff       	call   c0002428 <move_window>
c00027fc:	85 c0                	test   eax,eax
c00027fe:	75 52                	jne    c0002852 <mount_volume+0x2cd>
c0002800:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002804:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000280a:	e8 b4 f6 ff ff       	call   c0001ec3 <ld_word>
c000280f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002813:	75 3d                	jne    c0002852 <mount_volume+0x2cd>
c0002815:	8d 46 34             	lea    eax,[esi+0x34]
c0002818:	e8 b3 f6 ff ff       	call   c0001ed0 <ld_dword>
c000281d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002822:	75 2e                	jne    c0002852 <mount_volume+0x2cd>
c0002824:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000282a:	e8 a1 f6 ff ff       	call   c0001ed0 <ld_dword>
c000282f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002834:	75 1c                	jne    c0002852 <mount_volume+0x2cd>
c0002836:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000283c:	e8 8f f6 ff ff       	call   c0001ed0 <ld_dword>
c0002841:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002844:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000284a:	e8 81 f6 ff ff       	call   c0001ed0 <ld_dword>
c000284f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002852:	88 1e                	mov    BYTE PTR [esi],bl
c0002854:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000285a:	31 db                	xor    ebx,ebx
c000285c:	40                   	inc    eax
c000285d:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002863:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002867:	eb 0f                	jmp    c0002878 <mount_volume+0x2f3>
c0002869:	3d f6 0f 00 00       	cmp    eax,0xff6
c000286e:	19 db                	sbb    ebx,ebx
c0002870:	83 c3 02             	add    ebx,0x2
c0002873:	e9 d8 fe ff ff       	jmp    c0002750 <mount_volume+0x1cb>
c0002878:	83 c4 2c             	add    esp,0x2c
c000287b:	89 d8                	mov    eax,ebx
c000287d:	5b                   	pop    ebx
c000287e:	5e                   	pop    esi
c000287f:	5f                   	pop    edi
c0002880:	5d                   	pop    ebp
c0002881:	c3                   	ret    

c0002882 <put_fat>:
c0002882:	55                   	push   ebp
c0002883:	bd 02 00 00 00       	mov    ebp,0x2
c0002888:	57                   	push   edi
c0002889:	56                   	push   esi
c000288a:	53                   	push   ebx
c000288b:	83 ec 1c             	sub    esp,0x1c
c000288e:	83 fa 01             	cmp    edx,0x1
c0002891:	0f 86 38 01 00 00    	jbe    c00029cf <put_fat+0x14d>
c0002897:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000289a:	0f 86 2f 01 00 00    	jbe    c00029cf <put_fat+0x14d>
c00028a0:	89 c6                	mov    esi,eax
c00028a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00028a5:	89 cf                	mov    edi,ecx
c00028a7:	89 d3                	mov    ebx,edx
c00028a9:	83 f8 02             	cmp    eax,0x2
c00028ac:	0f 84 b1 00 00 00    	je     c0002963 <put_fat+0xe1>
c00028b2:	83 f8 03             	cmp    eax,0x3
c00028b5:	0f 84 d5 00 00 00    	je     c0002990 <put_fat+0x10e>
c00028bb:	48                   	dec    eax
c00028bc:	0f 85 0d 01 00 00    	jne    c00029cf <put_fat+0x14d>
c00028c2:	89 d1                	mov    ecx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	d1 e9                	shr    ecx,1
c00028c8:	01 d1                	add    ecx,edx
c00028ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00028ce:	89 ca                	mov    edx,ecx
c00028d0:	c1 ea 09             	shr    edx,0x9
c00028d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028d6:	e8 4d fb ff ff       	call   c0002428 <move_window>
c00028db:	85 c0                	test   eax,eax
c00028dd:	89 c5                	mov    ebp,eax
c00028df:	0f 85 ea 00 00 00    	jne    c00029cf <put_fat+0x14d>
c00028e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028e9:	8d 46 34             	lea    eax,[esi+0x34]
c00028ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00028f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028f9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028fd:	83 e3 01             	and    ebx,0x1
c0002900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002904:	89 f8                	mov    eax,edi
c0002906:	74 11                	je     c0002919 <put_fat+0x97>
c0002908:	8a 11                	mov    dl,BYTE PTR [ecx]
c000290a:	89 f8                	mov    eax,edi
c000290c:	c1 e0 04             	shl    eax,0x4
c000290f:	25 f0 0f 00 00       	and    eax,0xff0
c0002914:	83 e2 0f             	and    edx,0xf
c0002917:	09 d0                	or     eax,edx
c0002919:	88 01                	mov    BYTE PTR [ecx],al
c000291b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000291f:	89 f0                	mov    eax,esi
c0002921:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002925:	c1 ea 09             	shr    edx,0x9
c0002928:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000292b:	e8 f8 fa ff ff       	call   c0002428 <move_window>
c0002930:	85 c0                	test   eax,eax
c0002932:	89 c5                	mov    ebp,eax
c0002934:	0f 85 95 00 00 00    	jne    c00029cf <put_fat+0x14d>
c000293a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000293e:	25 ff 01 00 00       	and    eax,0x1ff
c0002943:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002947:	85 db                	test   ebx,ebx
c0002949:	74 07                	je     c0002952 <put_fat+0xd0>
c000294b:	c1 ef 04             	shr    edi,0x4
c000294e:	89 f9                	mov    ecx,edi
c0002950:	eb 0d                	jmp    c000295f <put_fat+0xdd>
c0002952:	8a 08                	mov    cl,BYTE PTR [eax]
c0002954:	c1 ef 08             	shr    edi,0x8
c0002957:	83 e7 0f             	and    edi,0xf
c000295a:	83 e1 f0             	and    ecx,0xfffffff0
c000295d:	09 f9                	or     ecx,edi
c000295f:	88 08                	mov    BYTE PTR [eax],cl
c0002961:	eb 27                	jmp    c000298a <put_fat+0x108>
c0002963:	c1 ea 08             	shr    edx,0x8
c0002966:	89 f0                	mov    eax,esi
c0002968:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000296b:	e8 b8 fa ff ff       	call   c0002428 <move_window>
c0002970:	85 c0                	test   eax,eax
c0002972:	89 c5                	mov    ebp,eax
c0002974:	75 59                	jne    c00029cf <put_fat+0x14d>
c0002976:	01 db                	add    ebx,ebx
c0002978:	0f b7 d7             	movzx  edx,di
c000297b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002981:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002985:	e8 5e f5 ff ff       	call   c0001ee8 <st_word>
c000298a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000298e:	eb 3f                	jmp    c00029cf <put_fat+0x14d>
c0002990:	c1 ea 07             	shr    edx,0x7
c0002993:	89 f0                	mov    eax,esi
c0002995:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002998:	e8 8b fa ff ff       	call   c0002428 <move_window>
c000299d:	85 c0                	test   eax,eax
c000299f:	89 c5                	mov    ebp,eax
c00029a1:	75 2c                	jne    c00029cf <put_fat+0x14d>
c00029a3:	c1 e3 02             	shl    ebx,0x2
c00029a6:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00029ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00029b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00029b6:	89 d8                	mov    eax,ebx
c00029b8:	e8 13 f5 ff ff       	call   c0001ed0 <ld_dword>
c00029bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00029c2:	09 f8                	or     eax,edi
c00029c4:	89 c2                	mov    edx,eax
c00029c6:	89 d8                	mov    eax,ebx
c00029c8:	e8 1f f5 ff ff       	call   c0001eec <st_dword>
c00029cd:	eb bb                	jmp    c000298a <put_fat+0x108>
c00029cf:	83 c4 1c             	add    esp,0x1c
c00029d2:	89 e8                	mov    eax,ebp
c00029d4:	5b                   	pop    ebx
c00029d5:	5e                   	pop    esi
c00029d6:	5f                   	pop    edi
c00029d7:	5d                   	pop    ebp
c00029d8:	c3                   	ret    

c00029d9 <dir_clear>:
c00029d9:	55                   	push   ebp
c00029da:	57                   	push   edi
c00029db:	56                   	push   esi
c00029dc:	89 c6                	mov    esi,eax
c00029de:	53                   	push   ebx
c00029df:	83 ec 1c             	sub    esp,0x1c
c00029e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00029e6:	e8 da f9 ff ff       	call   c00023c5 <sync_window>
c00029eb:	85 c0                	test   eax,eax
c00029ed:	0f 85 c1 00 00 00    	jne    c0002ab4 <dir_clear+0xdb>
c00029f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029f7:	89 f0                	mov    eax,esi
c00029f9:	e8 1b f7 ff ff       	call   c0002119 <clst2sect>
c00029fe:	31 d2                	xor    edx,edx
c0002a00:	b9 00 02 00 00       	mov    ecx,0x200
c0002a05:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002a08:	89 c5                	mov    ebp,eax
c0002a0a:	8d 46 34             	lea    eax,[esi+0x34]
c0002a0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a11:	e8 ee f4 ff ff       	call   c0001f04 <mem_set>
c0002a16:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002a1a:	b8 00 80 00 00       	mov    eax,0x8000
c0002a1f:	c1 e3 09             	shl    ebx,0x9
c0002a22:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002a28:	0f 47 d8             	cmova  ebx,eax
c0002a2b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002a31:	76 16                	jbe    c0002a49 <dir_clear+0x70>
c0002a33:	83 ec 0c             	sub    esp,0xc
c0002a36:	53                   	push   ebx
c0002a37:	e8 cc 32 00 00       	call   c0005d08 <ff_memalloc>
c0002a3c:	83 c4 10             	add    esp,0x10
c0002a3f:	85 c0                	test   eax,eax
c0002a41:	89 c7                	mov    edi,eax
c0002a43:	75 76                	jne    c0002abb <dir_clear+0xe2>
c0002a45:	d1 eb                	shr    ebx,1
c0002a47:	eb e2                	jmp    c0002a2b <dir_clear+0x52>
c0002a49:	31 db                	xor    ebx,ebx
c0002a4b:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a4f:	39 d8                	cmp    eax,ebx
c0002a51:	76 53                	jbe    c0002aa6 <dir_clear+0xcd>
c0002a53:	6a 01                	push   0x1
c0002a55:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a58:	50                   	push   eax
c0002a59:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a61:	50                   	push   eax
c0002a62:	e8 27 f4 ff ff       	call   c0001e8e <disk_write>
c0002a67:	83 c4 10             	add    esp,0x10
c0002a6a:	85 c0                	test   eax,eax
c0002a6c:	75 38                	jne    c0002aa6 <dir_clear+0xcd>
c0002a6e:	43                   	inc    ebx
c0002a6f:	eb da                	jmp    c0002a4b <dir_clear+0x72>
c0002a71:	52                   	push   edx
c0002a72:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a75:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a79:	50                   	push   eax
c0002a7a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a7e:	57                   	push   edi
c0002a7f:	50                   	push   eax
c0002a80:	e8 09 f4 ff ff       	call   c0001e8e <disk_write>
c0002a85:	83 c4 10             	add    esp,0x10
c0002a88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a8c:	85 c0                	test   eax,eax
c0002a8e:	75 0a                	jne    c0002a9a <dir_clear+0xc1>
c0002a90:	01 d3                	add    ebx,edx
c0002a92:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a96:	39 d8                	cmp    eax,ebx
c0002a98:	77 d7                	ja     c0002a71 <dir_clear+0x98>
c0002a9a:	83 ec 0c             	sub    esp,0xc
c0002a9d:	57                   	push   edi
c0002a9e:	e8 7d 32 00 00       	call   c0005d20 <ff_memfree>
c0002aa3:	83 c4 10             	add    esp,0x10
c0002aa6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002aaa:	39 d8                	cmp    eax,ebx
c0002aac:	0f 95 c0             	setne  al
c0002aaf:	0f b6 c0             	movzx  eax,al
c0002ab2:	eb 19                	jmp    c0002acd <dir_clear+0xf4>
c0002ab4:	b8 01 00 00 00       	mov    eax,0x1
c0002ab9:	eb 12                	jmp    c0002acd <dir_clear+0xf4>
c0002abb:	89 d9                	mov    ecx,ebx
c0002abd:	31 d2                	xor    edx,edx
c0002abf:	e8 40 f4 ff ff       	call   c0001f04 <mem_set>
c0002ac4:	89 da                	mov    edx,ebx
c0002ac6:	31 db                	xor    ebx,ebx
c0002ac8:	c1 ea 09             	shr    edx,0x9
c0002acb:	eb c5                	jmp    c0002a92 <dir_clear+0xb9>
c0002acd:	83 c4 1c             	add    esp,0x1c
c0002ad0:	5b                   	pop    ebx
c0002ad1:	5e                   	pop    esi
c0002ad2:	5f                   	pop    edi
c0002ad3:	5d                   	pop    ebp
c0002ad4:	c3                   	ret    

c0002ad5 <create_name>:
c0002ad5:	55                   	push   ebp
c0002ad6:	89 c5                	mov    ebp,eax
c0002ad8:	57                   	push   edi
c0002ad9:	89 d7                	mov    edi,edx
c0002adb:	56                   	push   esi
c0002adc:	31 f6                	xor    esi,esi
c0002ade:	53                   	push   ebx
c0002adf:	83 ec 3c             	sub    esp,0x3c
c0002ae2:	8b 02                	mov    eax,DWORD PTR [edx]
c0002ae4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ae8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002aeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002aee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002af2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002af6:	e8 4d f4 ff ff       	call   c0001f48 <tchar2uni>
c0002afb:	83 f8 ff             	cmp    eax,0xffffffff
c0002afe:	89 c3                	mov    ebx,eax
c0002b00:	75 0a                	jne    c0002b0c <create_name+0x37>
c0002b02:	b8 06 00 00 00       	mov    eax,0x6
c0002b07:	e9 7c 02 00 00       	jmp    c0002d88 <create_name+0x2b3>
c0002b0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002b11:	76 0c                	jbe    c0002b1f <create_name+0x4a>
c0002b13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b17:	c1 e8 10             	shr    eax,0x10
c0002b1a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002b1e:	46                   	inc    esi
c0002b1f:	0f b7 d3             	movzx  edx,bx
c0002b22:	89 d8                	mov    eax,ebx
c0002b24:	83 fa 1f             	cmp    edx,0x1f
c0002b27:	76 30                	jbe    c0002b59 <create_name+0x84>
c0002b29:	83 fa 2f             	cmp    edx,0x2f
c0002b2c:	74 2b                	je     c0002b59 <create_name+0x84>
c0002b2e:	83 fa 5c             	cmp    edx,0x5c
c0002b31:	74 35                	je     c0002b68 <create_name+0x93>
c0002b33:	83 fa 7f             	cmp    edx,0x7f
c0002b36:	77 0e                	ja     c0002b46 <create_name+0x71>
c0002b38:	b8 02 f1 02 c0       	mov    eax,0xc002f102
c0002b3d:	e8 ef f3 ff ff       	call   c0001f31 <chk_chr>
c0002b42:	85 c0                	test   eax,eax
c0002b44:	75 bc                	jne    c0002b02 <create_name+0x2d>
c0002b46:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b4c:	77 b4                	ja     c0002b02 <create_name+0x2d>
c0002b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b52:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002b56:	46                   	inc    esi
c0002b57:	eb 99                	jmp    c0002af2 <create_name+0x1d>
c0002b59:	66 83 f8 1f          	cmp    ax,0x1f
c0002b5d:	b3 04                	mov    bl,0x4
c0002b5f:	76 1a                	jbe    c0002b7b <create_name+0xa6>
c0002b61:	eb 05                	jmp    c0002b68 <create_name+0x93>
c0002b63:	40                   	inc    eax
c0002b64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b6c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002b6f:	83 fa 2f             	cmp    edx,0x2f
c0002b72:	74 ef                	je     c0002b63 <create_name+0x8e>
c0002b74:	83 fa 5c             	cmp    edx,0x5c
c0002b77:	74 ea                	je     c0002b63 <create_name+0x8e>
c0002b79:	31 db                	xor    ebx,ebx
c0002b7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b7f:	89 07                	mov    DWORD PTR [edi],eax
c0002b81:	85 f6                	test   esi,esi
c0002b83:	74 16                	je     c0002b9b <create_name+0xc6>
c0002b85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b89:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b8e:	83 f8 20             	cmp    eax,0x20
c0002b91:	74 05                	je     c0002b98 <create_name+0xc3>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 03                	jne    c0002b9b <create_name+0xc6>
c0002b98:	4e                   	dec    esi
c0002b99:	eb e6                	jmp    c0002b81 <create_name+0xac>
c0002b9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b9f:	31 ff                	xor    edi,edi
c0002ba1:	85 f6                	test   esi,esi
c0002ba3:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002ba9:	0f 84 53 ff ff ff    	je     c0002b02 <create_name+0x2d>
c0002baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bb3:	8d 57 01             	lea    edx,[edi+0x1]
c0002bb6:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002bba:	83 f8 20             	cmp    eax,0x20
c0002bbd:	75 04                	jne    c0002bc3 <create_name+0xee>
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	eb ec                	jmp    c0002baf <create_name+0xda>
c0002bc3:	85 ff                	test   edi,edi
c0002bc5:	75 05                	jne    c0002bcc <create_name+0xf7>
c0002bc7:	83 f8 2e             	cmp    eax,0x2e
c0002bca:	75 08                	jne    c0002bd4 <create_name+0xff>
c0002bcc:	83 cb 03             	or     ebx,0x3
c0002bcf:	eb 03                	jmp    c0002bd4 <create_name+0xff>
c0002bd1:	4e                   	dec    esi
c0002bd2:	74 0c                	je     c0002be0 <create_name+0x10b>
c0002bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bd8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002bde:	75 f1                	jne    c0002bd1 <create_name+0xfc>
c0002be0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002be5:	ba 20 00 00 00       	mov    edx,0x20
c0002bea:	8d 45 20             	lea    eax,[ebp+0x20]
c0002bed:	e8 12 f3 ff ff       	call   c0001f04 <mem_set>
c0002bf2:	31 c9                	xor    ecx,ecx
c0002bf4:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002bfc:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002c01:	8d 47 01             	lea    eax,[edi+0x1]
c0002c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c0c:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c10:	85 c0                	test   eax,eax
c0002c12:	89 c7                	mov    edi,eax
c0002c14:	0f 84 1d 01 00 00    	je     c0002d37 <create_name+0x262>
c0002c1a:	83 f8 20             	cmp    eax,0x20
c0002c1d:	74 0b                	je     c0002c2a <create_name+0x155>
c0002c1f:	83 f8 2e             	cmp    eax,0x2e
c0002c22:	75 0f                	jne    c0002c33 <create_name+0x15e>
c0002c24:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c28:	74 09                	je     c0002c33 <create_name+0x15e>
c0002c2a:	83 cb 03             	or     ebx,0x3
c0002c2d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002c31:	eb ce                	jmp    c0002c01 <create_name+0x12c>
c0002c33:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002c37:	73 06                	jae    c0002c3f <create_name+0x16a>
c0002c39:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c3d:	75 3a                	jne    c0002c79 <create_name+0x1a4>
c0002c3f:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002c44:	75 08                	jne    c0002c4e <create_name+0x179>
c0002c46:	83 cb 03             	or     ebx,0x3
c0002c49:	e9 e9 00 00 00       	jmp    c0002d37 <create_name+0x262>
c0002c4e:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c52:	74 0d                	je     c0002c61 <create_name+0x18c>
c0002c54:	83 cb 03             	or     ebx,0x3
c0002c57:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c5b:	0f 87 d6 00 00 00    	ja     c0002d37 <create_name+0x262>
c0002c61:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c66:	b9 08 00 00 00       	mov    ecx,0x8
c0002c6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002c6f:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002c77:	eb b4                	jmp    c0002c2d <create_name+0x158>
c0002c79:	0f b7 c7             	movzx  eax,di
c0002c7c:	83 f8 7f             	cmp    eax,0x7f
c0002c7f:	76 66                	jbe    c0002ce7 <create_name+0x212>
c0002c81:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002c85:	89 d9                	mov    ecx,ebx
c0002c87:	83 c9 02             	or     ecx,0x2
c0002c8a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c8e:	52                   	push   edx
c0002c8f:	52                   	push   edx
c0002c90:	68 b5 01 00 00       	push   0x1b5
c0002c95:	50                   	push   eax
c0002c96:	e8 9d 30 00 00       	call   c0005d38 <ff_uni2oem>
c0002c9b:	83 c4 10             	add    esp,0x10
c0002c9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ca2:	a8 80                	test   al,0x80
c0002ca4:	89 c7                	mov    edi,eax
c0002ca6:	74 0c                	je     c0002cb4 <create_name+0x1df>
c0002ca8:	83 e7 7f             	and    edi,0x7f
c0002cab:	0f b6 bf c0 f1 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0e40]
c0002cb2:	eb 2a                	jmp    c0002cde <create_name+0x209>
c0002cb4:	0f b7 c0             	movzx  eax,ax
c0002cb7:	3d ff 00 00 00       	cmp    eax,0xff
c0002cbc:	76 20                	jbe    c0002cde <create_name+0x209>
c0002cbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002cc2:	4a                   	dec    edx
c0002cc3:	39 ca                	cmp    edx,ecx
c0002cc5:	77 0c                	ja     c0002cd3 <create_name+0x1fe>
c0002cc7:	83 cb 03             	or     ebx,0x3
c0002cca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002cce:	e9 5a ff ff ff       	jmp    c0002c2d <create_name+0x158>
c0002cd3:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002cd7:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002cdb:	41                   	inc    ecx
c0002cdc:	eb 4d                	jmp    c0002d2b <create_name+0x256>
c0002cde:	66 85 ff             	test   di,di
c0002ce1:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ce5:	74 19                	je     c0002d00 <create_name+0x22b>
c0002ce7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002ceb:	0f b7 d7             	movzx  edx,di
c0002cee:	b8 0b f1 02 c0       	mov    eax,0xc002f10b
c0002cf3:	e8 39 f2 ff ff       	call   c0001f31 <chk_chr>
c0002cf8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002cfc:	85 c0                	test   eax,eax
c0002cfe:	74 0a                	je     c0002d0a <create_name+0x235>
c0002d00:	83 cb 03             	or     ebx,0x3
c0002d03:	bf 5f 00 00 00       	mov    edi,0x5f
c0002d08:	eb 21                	jmp    c0002d2b <create_name+0x256>
c0002d0a:	8d 47 bf             	lea    eax,[edi-0x41]
c0002d0d:	66 83 f8 19          	cmp    ax,0x19
c0002d11:	77 07                	ja     c0002d1a <create_name+0x245>
c0002d13:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002d18:	eb 11                	jmp    c0002d2b <create_name+0x256>
c0002d1a:	8d 47 9f             	lea    eax,[edi-0x61]
c0002d1d:	66 83 f8 19          	cmp    ax,0x19
c0002d21:	77 08                	ja     c0002d2b <create_name+0x256>
c0002d23:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002d28:	83 ef 20             	sub    edi,0x20
c0002d2b:	89 f8                	mov    eax,edi
c0002d2d:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002d31:	41                   	inc    ecx
c0002d32:	e9 f6 fe ff ff       	jmp    c0002c2d <create_name+0x158>
c0002d37:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002d3b:	75 04                	jne    c0002d41 <create_name+0x26c>
c0002d3d:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002d41:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002d46:	75 05                	jne    c0002d4d <create_name+0x278>
c0002d48:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d51:	83 e0 0c             	and    eax,0xc
c0002d54:	83 f8 0c             	cmp    eax,0xc
c0002d57:	74 0c                	je     c0002d65 <create_name+0x290>
c0002d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5d:	83 e0 03             	and    eax,0x3
c0002d60:	83 f8 03             	cmp    eax,0x3
c0002d63:	75 05                	jne    c0002d6a <create_name+0x295>
c0002d65:	83 cb 02             	or     ebx,0x2
c0002d68:	eb 19                	jmp    c0002d83 <create_name+0x2ae>
c0002d6a:	f6 c3 02             	test   bl,0x2
c0002d6d:	75 14                	jne    c0002d83 <create_name+0x2ae>
c0002d6f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002d74:	74 03                	je     c0002d79 <create_name+0x2a4>
c0002d76:	83 cb 10             	or     ebx,0x10
c0002d79:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002d7e:	74 03                	je     c0002d83 <create_name+0x2ae>
c0002d80:	83 cb 08             	or     ebx,0x8
c0002d83:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002d86:	31 c0                	xor    eax,eax
c0002d88:	83 c4 3c             	add    esp,0x3c
c0002d8b:	5b                   	pop    ebx
c0002d8c:	5e                   	pop    esi
c0002d8d:	5f                   	pop    edi
c0002d8e:	5d                   	pop    ebp
c0002d8f:	c3                   	ret    

c0002d90 <cmp_lfn>:
c0002d90:	55                   	push   ebp
c0002d91:	57                   	push   edi
c0002d92:	89 d7                	mov    edi,edx
c0002d94:	56                   	push   esi
c0002d95:	53                   	push   ebx
c0002d96:	83 ec 1c             	sub    esp,0x1c
c0002d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d9d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002da0:	e8 1e f1 ff ff       	call   c0001ec3 <ld_word>
c0002da5:	66 85 c0             	test   ax,ax
c0002da8:	74 07                	je     c0002db1 <cmp_lfn+0x21>
c0002daa:	31 c0                	xor    eax,eax
c0002dac:	e9 a4 00 00 00       	jmp    c0002e55 <cmp_lfn+0xc5>
c0002db1:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002db3:	bd 01 00 00 00       	mov    ebp,0x1
c0002db8:	31 c9                	xor    ecx,ecx
c0002dba:	83 e3 3f             	and    ebx,0x3f
c0002dbd:	4b                   	dec    ebx
c0002dbe:	6b db 0d             	imul   ebx,ebx,0xd
c0002dc1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002dc5:	0f b6 81 40 f2 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0dc0]
c0002dcc:	01 f8                	add    eax,edi
c0002dce:	e8 f0 f0 ff ff       	call   c0001ec3 <ld_word>
c0002dd3:	66 85 ed             	test   bp,bp
c0002dd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002dda:	0f b7 f0             	movzx  esi,ax
c0002ddd:	74 44                	je     c0002e23 <cmp_lfn+0x93>
c0002ddf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002de3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002de9:	77 bf                	ja     c0002daa <cmp_lfn+0x1a>
c0002deb:	83 ec 0c             	sub    esp,0xc
c0002dee:	0f b7 c6             	movzx  eax,si
c0002df1:	50                   	push   eax
c0002df2:	e8 55 30 00 00       	call   c0005e4c <ff_wtoupper>
c0002df7:	89 c5                	mov    ebp,eax
c0002df9:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002e00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e04:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002e08:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e0b:	e8 3c 30 00 00       	call   c0005e4c <ff_wtoupper>
c0002e10:	83 c4 10             	add    esp,0x10
c0002e13:	39 c5                	cmp    ebp,eax
c0002e15:	75 93                	jne    c0002daa <cmp_lfn+0x1a>
c0002e17:	89 f5                	mov    ebp,esi
c0002e19:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002e1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002e21:	eb 0c                	jmp    c0002e2f <cmp_lfn+0x9f>
c0002e23:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002e29:	0f 85 7b ff ff ff    	jne    c0002daa <cmp_lfn+0x1a>
c0002e2f:	41                   	inc    ecx
c0002e30:	83 f9 0d             	cmp    ecx,0xd
c0002e33:	75 8c                	jne    c0002dc1 <cmp_lfn+0x31>
c0002e35:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e38:	74 16                	je     c0002e50 <cmp_lfn+0xc0>
c0002e3a:	66 85 ed             	test   bp,bp
c0002e3d:	74 11                	je     c0002e50 <cmp_lfn+0xc0>
c0002e3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e43:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e48:	0f 94 c0             	sete   al
c0002e4b:	0f b6 c0             	movzx  eax,al
c0002e4e:	eb 05                	jmp    c0002e55 <cmp_lfn+0xc5>
c0002e50:	b8 01 00 00 00       	mov    eax,0x1
c0002e55:	83 c4 1c             	add    esp,0x1c
c0002e58:	5b                   	pop    ebx
c0002e59:	5e                   	pop    esi
c0002e5a:	5f                   	pop    edi
c0002e5b:	5d                   	pop    ebp
c0002e5c:	c3                   	ret    

c0002e5d <sync_fs>:
c0002e5d:	56                   	push   esi
c0002e5e:	53                   	push   ebx
c0002e5f:	53                   	push   ebx
c0002e60:	89 c3                	mov    ebx,eax
c0002e62:	e8 5e f5 ff ff       	call   c00023c5 <sync_window>
c0002e67:	85 c0                	test   eax,eax
c0002e69:	0f 85 9a 00 00 00    	jne    c0002f09 <sync_fs+0xac>
c0002e6f:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e72:	75 7b                	jne    c0002eef <sync_fs+0x92>
c0002e74:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e78:	75 75                	jne    c0002eef <sync_fs+0x92>
c0002e7a:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e7d:	b9 00 02 00 00       	mov    ecx,0x200
c0002e82:	31 d2                	xor    edx,edx
c0002e84:	89 f0                	mov    eax,esi
c0002e86:	e8 79 f0 ff ff       	call   c0001f04 <mem_set>
c0002e8b:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e91:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e96:	e8 4d f0 ff ff       	call   c0001ee8 <st_word>
c0002e9b:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ea0:	89 f0                	mov    eax,esi
c0002ea2:	e8 45 f0 ff ff       	call   c0001eec <st_dword>
c0002ea7:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002ead:	ba 72 72 41 61       	mov    edx,0x61417272
c0002eb2:	e8 35 f0 ff ff       	call   c0001eec <st_dword>
c0002eb7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002eba:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ec0:	e8 27 f0 ff ff       	call   c0001eec <st_dword>
c0002ec5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ec8:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ece:	e8 19 f0 ff ff       	call   c0001eec <st_dword>
c0002ed3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002ed6:	6a 01                	push   0x1
c0002ed8:	40                   	inc    eax
c0002ed9:	50                   	push   eax
c0002eda:	56                   	push   esi
c0002edb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ede:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ee2:	50                   	push   eax
c0002ee3:	e8 a6 ef ff ff       	call   c0001e8e <disk_write>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eef:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ef3:	51                   	push   ecx
c0002ef4:	6a 00                	push   0x0
c0002ef6:	6a 00                	push   0x0
c0002ef8:	50                   	push   eax
c0002ef9:	e8 a6 ef ff ff       	call   c0001ea4 <disk_ioctl>
c0002efe:	83 c4 10             	add    esp,0x10
c0002f01:	85 c0                	test   eax,eax
c0002f03:	0f 95 c0             	setne  al
c0002f06:	0f b6 c0             	movzx  eax,al
c0002f09:	5a                   	pop    edx
c0002f0a:	5b                   	pop    ebx
c0002f0b:	5e                   	pop    esi
c0002f0c:	c3                   	ret    

c0002f0d <create_partition>:
c0002f0d:	55                   	push   ebp
c0002f0e:	0f b6 c0             	movzx  eax,al
c0002f11:	57                   	push   edi
c0002f12:	56                   	push   esi
c0002f13:	53                   	push   ebx
c0002f14:	83 ec 40             	sub    esp,0x40
c0002f17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f1b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002f1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002f23:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f27:	50                   	push   eax
c0002f28:	6a 01                	push   0x1
c0002f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f2e:	e8 71 ef ff ff       	call   c0001ea4 <disk_ioctl>
c0002f33:	83 c4 10             	add    esp,0x10
c0002f36:	85 c0                	test   eax,eax
c0002f38:	0f 85 68 01 00 00    	jne    c00030a6 <create_partition+0x199>
c0002f3e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f42:	b9 05 00 00 00       	mov    ecx,0x5
c0002f47:	be 08 00 00 00       	mov    esi,0x8
c0002f4c:	89 f0                	mov    eax,esi
c0002f4e:	31 d2                	xor    edx,edx
c0002f50:	0f b6 d8             	movzx  ebx,al
c0002f53:	89 e8                	mov    eax,ebp
c0002f55:	f7 f3                	div    ebx
c0002f57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f5c:	76 0a                	jbe    c0002f68 <create_partition+0x5b>
c0002f5e:	d1 e6                	shl    esi,1
c0002f60:	49                   	dec    ecx
c0002f61:	75 e9                	jne    c0002f4c <create_partition+0x3f>
c0002f63:	be ff ff ff ff       	mov    esi,0xffffffff
c0002f68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	e8 8c ef ff ff       	call   c0001f04 <mem_set>
c0002f78:	b9 64 00 00 00       	mov    ecx,0x64
c0002f7d:	89 e8                	mov    eax,ebp
c0002f7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f87:	31 d2                	xor    edx,edx
c0002f89:	f7 f1                	div    ecx
c0002f8b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002f90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f98:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002f9e:	89 f0                	mov    eax,esi
c0002fa0:	0f b6 c0             	movzx  eax,al
c0002fa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fa7:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002fac:	0f 96 c0             	setbe  al
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	85 c9                	test   ecx,ecx
c0002fb3:	0f 95 c2             	setne  dl
c0002fb6:	85 c2                	test   edx,eax
c0002fb8:	0f 84 b7 00 00 00    	je     c0003075 <create_partition+0x168>
c0002fbe:	39 e9                	cmp    ecx,ebp
c0002fc0:	0f 83 af 00 00 00    	jae    c0003075 <create_partition+0x168>
c0002fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002fca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002fce:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002fd1:	83 fe 64             	cmp    esi,0x64
c0002fd4:	77 0b                	ja     c0002fe1 <create_partition+0xd4>
c0002fd6:	74 07                	je     c0002fdf <create_partition+0xd2>
c0002fd8:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002fdd:	eb 02                	jmp    c0002fe1 <create_partition+0xd4>
c0002fdf:	89 ee                	mov    esi,ebp
c0002fe1:	89 ca                	mov    edx,ecx
c0002fe3:	31 c0                	xor    eax,eax
c0002fe5:	01 f2                	add    edx,esi
c0002fe7:	0f 92 c0             	setb   al
c0002fea:	39 ea                	cmp    edx,ebp
c0002fec:	77 04                	ja     c0002ff2 <create_partition+0xe5>
c0002fee:	85 c0                	test   eax,eax
c0002ff0:	74 06                	je     c0002ff8 <create_partition+0xeb>
c0002ff2:	89 ee                	mov    esi,ebp
c0002ff4:	29 ce                	sub    esi,ecx
c0002ff6:	eb 04                	jmp    c0002ffc <create_partition+0xef>
c0002ff8:	85 f6                	test   esi,esi
c0002ffa:	74 79                	je     c0003075 <create_partition+0x168>
c0002ffc:	89 ca                	mov    edx,ecx
c0002ffe:	89 d8                	mov    eax,ebx
c0003000:	e8 e7 ee ff ff       	call   c0001eec <st_dword>
c0003005:	8d 43 04             	lea    eax,[ebx+0x4]
c0003008:	89 f2                	mov    edx,esi
c000300a:	e8 dd ee ff ff       	call   c0001eec <st_dword>
c000300f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003013:	bf 3f 00 00 00       	mov    edi,0x3f
c0003018:	31 d2                	xor    edx,edx
c000301a:	83 c3 10             	add    ebx,0x10
c000301d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003021:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003024:	89 c8                	mov    eax,ecx
c0003026:	01 f1                	add    ecx,esi
c0003028:	f7 f7                	div    edi
c000302a:	89 d7                	mov    edi,edx
c000302c:	31 d2                	xor    edx,edx
c000302e:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003032:	47                   	inc    edi
c0003033:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003036:	89 c2                	mov    edx,eax
c0003038:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c000303b:	c1 ea 02             	shr    edx,0x2
c000303e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003041:	83 e2 c0             	and    edx,0xffffffc0
c0003044:	09 fa                	or     edx,edi
c0003046:	bf 3f 00 00 00       	mov    edi,0x3f
c000304b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000304e:	31 d2                	xor    edx,edx
c0003050:	f7 f7                	div    edi
c0003052:	89 d6                	mov    esi,edx
c0003054:	31 d2                	xor    edx,edx
c0003056:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000305a:	46                   	inc    esi
c000305b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000305e:	89 c7                	mov    edi,eax
c0003060:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003063:	c1 ef 02             	shr    edi,0x2
c0003066:	83 e7 c0             	and    edi,0xffffffc0
c0003069:	09 fe                	or     esi,edi
c000306b:	89 f2                	mov    edx,esi
c000306d:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003070:	e9 32 ff ff ff       	jmp    c0002fa7 <create_partition+0x9a>
c0003075:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003079:	ba 55 aa 00 00       	mov    edx,0xaa55
c000307e:	05 fe 01 00 00       	add    eax,0x1fe
c0003083:	e8 60 ee ff ff       	call   c0001ee8 <st_word>
c0003088:	6a 01                	push   0x1
c000308a:	6a 00                	push   0x0
c000308c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003090:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003094:	e8 f5 ed ff ff       	call   c0001e8e <disk_write>
c0003099:	83 c4 10             	add    esp,0x10
c000309c:	85 c0                	test   eax,eax
c000309e:	0f 95 c0             	setne  al
c00030a1:	0f b6 c0             	movzx  eax,al
c00030a4:	eb 05                	jmp    c00030ab <create_partition+0x19e>
c00030a6:	b8 01 00 00 00       	mov    eax,0x1
c00030ab:	83 c4 3c             	add    esp,0x3c
c00030ae:	5b                   	pop    ebx
c00030af:	5e                   	pop    esi
c00030b0:	5f                   	pop    edi
c00030b1:	5d                   	pop    ebp
c00030b2:	c3                   	ret    

c00030b3 <get_fileinfo>:
c00030b3:	55                   	push   ebp
c00030b4:	57                   	push   edi
c00030b5:	56                   	push   esi
c00030b6:	53                   	push   ebx
c00030b7:	83 ec 1c             	sub    esp,0x1c
c00030ba:	8b 30                	mov    esi,DWORD PTR [eax]
c00030bc:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00030c0:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00030c4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00030c8:	0f 84 de 01 00 00    	je     c00032ac <get_fileinfo+0x1f9>
c00030ce:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00030d2:	89 d3                	mov    ebx,edx
c00030d4:	89 c6                	mov    esi,eax
c00030d6:	74 7d                	je     c0003155 <get_fileinfo+0xa2>
c00030d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030e0:	31 ff                	xor    edi,edi
c00030e2:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c00030e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00030f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030f4:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030f8:	85 c0                	test   eax,eax
c00030fa:	89 c2                	mov    edx,eax
c00030fc:	74 44                	je     c0003142 <get_fileinfo+0x8f>
c00030fe:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003103:	85 ed                	test   ebp,ebp
c0003105:	75 0d                	jne    c0003114 <get_fileinfo+0x61>
c0003107:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000310d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003112:	76 20                	jbe    c0003134 <get_fileinfo+0x81>
c0003114:	c1 e5 10             	shl    ebp,0x10
c0003117:	b9 ff 00 00 00       	mov    ecx,0xff
c000311c:	29 f9                	sub    ecx,edi
c000311e:	09 e8                	or     eax,ebp
c0003120:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003124:	e8 f7 ee ff ff       	call   c0002020 <put_utf>
c0003129:	0f b6 c0             	movzx  eax,al
c000312c:	85 c0                	test   eax,eax
c000312e:	74 10                	je     c0003140 <get_fileinfo+0x8d>
c0003130:	01 c7                	add    edi,eax
c0003132:	31 d2                	xor    edx,edx
c0003134:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003139:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000313e:	eb a9                	jmp    c00030e9 <get_fileinfo+0x36>
c0003140:	31 ff                	xor    edi,edi
c0003142:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003148:	b8 00 00 00 00       	mov    eax,0x0
c000314d:	0f 45 f8             	cmovne edi,eax
c0003150:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003155:	31 ff                	xor    edi,edi
c0003157:	31 c9                	xor    ecx,ecx
c0003159:	83 f9 0a             	cmp    ecx,0xa
c000315c:	0f 87 ac 00 00 00    	ja     c000320e <get_fileinfo+0x15b>
c0003162:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003165:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003168:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000316c:	83 f8 20             	cmp    eax,0x20
c000316f:	89 c2                	mov    edx,eax
c0003171:	0f 84 90 00 00 00    	je     c0003207 <get_fileinfo+0x154>
c0003177:	83 f8 05             	cmp    eax,0x5
c000317a:	75 05                	jne    c0003181 <get_fileinfo+0xce>
c000317c:	ba e5 00 00 00       	mov    edx,0xe5
c0003181:	83 fd 09             	cmp    ebp,0x9
c0003184:	75 0b                	jne    c0003191 <get_fileinfo+0xde>
c0003186:	83 ff 0b             	cmp    edi,0xb
c0003189:	77 06                	ja     c0003191 <get_fileinfo+0xde>
c000318b:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003190:	47                   	inc    edi
c0003191:	0f b7 c2             	movzx  eax,dx
c0003194:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003198:	e8 a5 ed ff ff       	call   c0001f42 <dbc_1st>
c000319d:	85 c0                	test   eax,eax
c000319f:	74 2f                	je     c00031d0 <get_fileinfo+0x11d>
c00031a1:	83 fd 08             	cmp    ebp,0x8
c00031a4:	74 2a                	je     c00031d0 <get_fileinfo+0x11d>
c00031a6:	83 fd 0b             	cmp    ebp,0xb
c00031a9:	74 25                	je     c00031d0 <get_fileinfo+0x11d>
c00031ab:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ae:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00031b2:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00031b6:	e8 8a ed ff ff       	call   c0001f45 <dbc_2nd>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	74 11                	je     c00031d0 <get_fileinfo+0x11d>
c00031bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00031c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00031c6:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00031cb:	c1 e0 08             	shl    eax,0x8
c00031ce:	09 c2                	or     edx,eax
c00031d0:	50                   	push   eax
c00031d1:	0f b7 d2             	movzx  edx,dx
c00031d4:	50                   	push   eax
c00031d5:	68 b5 01 00 00       	push   0x1b5
c00031da:	52                   	push   edx
c00031db:	e8 f4 2b 00 00       	call   c0005dd4 <ff_oem2uni>
c00031e0:	83 c4 10             	add    esp,0x10
c00031e3:	0f b7 c0             	movzx  eax,ax
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 04                	jne    c00031ee <get_fileinfo+0x13b>
c00031ea:	31 ff                	xor    edi,edi
c00031ec:	eb 20                	jmp    c000320e <get_fileinfo+0x15b>
c00031ee:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00031f2:	b9 0c 00 00 00       	mov    ecx,0xc
c00031f7:	29 f9                	sub    ecx,edi
c00031f9:	e8 22 ee ff ff       	call   c0002020 <put_utf>
c00031fe:	0f b6 c0             	movzx  eax,al
c0003201:	85 c0                	test   eax,eax
c0003203:	74 e5                	je     c00031ea <get_fileinfo+0x137>
c0003205:	01 c7                	add    edi,eax
c0003207:	89 e9                	mov    ecx,ebp
c0003209:	e9 4b ff ff ff       	jmp    c0003159 <get_fileinfo+0xa6>
c000320e:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003213:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003217:	75 5f                	jne    c0003278 <get_fileinfo+0x1c5>
c0003219:	85 ff                	test   edi,edi
c000321b:	75 0b                	jne    c0003228 <get_fileinfo+0x175>
c000321d:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003221:	ba 01 00 00 00       	mov    edx,0x1
c0003226:	eb 3e                	jmp    c0003266 <get_fileinfo+0x1b3>
c0003228:	bf 08 00 00 00       	mov    edi,0x8
c000322d:	31 d2                	xor    edx,edx
c000322f:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003235:	84 c0                	test   al,al
c0003237:	74 2d                	je     c0003266 <get_fileinfo+0x1b3>
c0003239:	66 83 f8 2e          	cmp    ax,0x2e
c000323d:	74 1b                	je     c000325a <get_fileinfo+0x1a7>
c000323f:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003242:	66 83 f9 19          	cmp    cx,0x19
c0003246:	77 17                	ja     c000325f <get_fileinfo+0x1ac>
c0003248:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000324b:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000324e:	21 f9                	and    ecx,edi
c0003250:	80 e1 18             	and    cl,0x18
c0003253:	74 0a                	je     c000325f <get_fileinfo+0x1ac>
c0003255:	83 c0 20             	add    eax,0x20
c0003258:	eb 05                	jmp    c000325f <get_fileinfo+0x1ac>
c000325a:	bf 10 00 00 00       	mov    edi,0x10
c000325f:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003263:	42                   	inc    edx
c0003264:	eb c9                	jmp    c000322f <get_fileinfo+0x17c>
c0003266:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000326b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000326e:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003272:	75 04                	jne    c0003278 <get_fileinfo+0x1c5>
c0003274:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003278:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000327b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000327e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003281:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003284:	83 c0 1c             	add    eax,0x1c
c0003287:	e8 44 ec ff ff       	call   c0001ed0 <ld_dword>
c000328c:	89 03                	mov    DWORD PTR [ebx],eax
c000328e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003291:	83 c0 16             	add    eax,0x16
c0003294:	e8 2a ec ff ff       	call   c0001ec3 <ld_word>
c0003299:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000329d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a0:	83 c0 18             	add    eax,0x18
c00032a3:	e8 1b ec ff ff       	call   c0001ec3 <ld_word>
c00032a8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00032ac:	83 c4 1c             	add    esp,0x1c
c00032af:	5b                   	pop    ebx
c00032b0:	5e                   	pop    esi
c00032b1:	5f                   	pop    edi
c00032b2:	5d                   	pop    ebp
c00032b3:	c3                   	ret    

c00032b4 <ld_clust.isra.0>:
c00032b4:	56                   	push   esi
c00032b5:	89 c6                	mov    esi,eax
c00032b7:	53                   	push   ebx
c00032b8:	89 d3                	mov    ebx,edx
c00032ba:	8d 42 1a             	lea    eax,[edx+0x1a]
c00032bd:	e8 01 ec ff ff       	call   c0001ec3 <ld_word>
c00032c2:	0f b7 c8             	movzx  ecx,ax
c00032c5:	89 f0                	mov    eax,esi
c00032c7:	3c 03                	cmp    al,0x3
c00032c9:	75 0d                	jne    c00032d8 <ld_clust.isra.0+0x24>
c00032cb:	8d 43 14             	lea    eax,[ebx+0x14]
c00032ce:	e8 f0 eb ff ff       	call   c0001ec3 <ld_word>
c00032d3:	c1 e0 10             	shl    eax,0x10
c00032d6:	09 c1                	or     ecx,eax
c00032d8:	5b                   	pop    ebx
c00032d9:	89 c8                	mov    eax,ecx
c00032db:	5e                   	pop    esi
c00032dc:	c3                   	ret    

c00032dd <st_clust.isra.1>:
c00032dd:	56                   	push   esi
c00032de:	89 c6                	mov    esi,eax
c00032e0:	53                   	push   ebx
c00032e1:	89 d3                	mov    ebx,edx
c00032e3:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00032e6:	0f b7 d1             	movzx  edx,cx
c00032e9:	e8 fa eb ff ff       	call   c0001ee8 <st_word>
c00032ee:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00032f1:	75 0f                	jne    c0003302 <st_clust.isra.1+0x25>
c00032f3:	8d 43 14             	lea    eax,[ebx+0x14]
c00032f6:	5b                   	pop    ebx
c00032f7:	c1 e9 10             	shr    ecx,0x10
c00032fa:	89 ca                	mov    edx,ecx
c00032fc:	5e                   	pop    esi
c00032fd:	e9 e6 eb ff ff       	jmp    c0001ee8 <st_word>
c0003302:	5b                   	pop    ebx
c0003303:	5e                   	pop    esi
c0003304:	c3                   	ret    

c0003305 <get_fat.isra.2>:
c0003305:	83 fa 01             	cmp    edx,0x1
c0003308:	b9 01 00 00 00       	mov    ecx,0x1
c000330d:	0f 86 f4 00 00 00    	jbe    c0003407 <get_fat.isra.2+0x102>
c0003313:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003316:	0f 83 eb 00 00 00    	jae    c0003407 <get_fat.isra.2+0x102>
c000331c:	55                   	push   ebp
c000331d:	57                   	push   edi
c000331e:	56                   	push   esi
c000331f:	89 c6                	mov    esi,eax
c0003321:	53                   	push   ebx
c0003322:	89 d3                	mov    ebx,edx
c0003324:	83 ec 0c             	sub    esp,0xc
c0003327:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000332a:	83 f8 02             	cmp    eax,0x2
c000332d:	74 79                	je     c00033a8 <get_fat.isra.2+0xa3>
c000332f:	83 f8 03             	cmp    eax,0x3
c0003332:	0f 84 97 00 00 00    	je     c00033cf <get_fat.isra.2+0xca>
c0003338:	48                   	dec    eax
c0003339:	0f 85 be 00 00 00    	jne    c00033fd <get_fat.isra.2+0xf8>
c000333f:	89 d7                	mov    edi,edx
c0003341:	89 f0                	mov    eax,esi
c0003343:	d1 ef                	shr    edi,1
c0003345:	01 d7                	add    edi,edx
c0003347:	89 fa                	mov    edx,edi
c0003349:	c1 ea 09             	shr    edx,0x9
c000334c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000334f:	e8 d4 f0 ff ff       	call   c0002428 <move_window>
c0003354:	85 c0                	test   eax,eax
c0003356:	74 08                	je     c0003360 <get_fat.isra.2+0x5b>
c0003358:	83 c9 ff             	or     ecx,0xffffffff
c000335b:	e9 9d 00 00 00       	jmp    c00033fd <get_fat.isra.2+0xf8>
c0003360:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003363:	89 f0                	mov    eax,esi
c0003365:	89 ea                	mov    edx,ebp
c0003367:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000336d:	c1 ea 09             	shr    edx,0x9
c0003370:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003375:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003378:	e8 ab f0 ff ff       	call   c0002428 <move_window>
c000337d:	85 c0                	test   eax,eax
c000337f:	75 d7                	jne    c0003358 <get_fat.isra.2+0x53>
c0003381:	89 f8                	mov    eax,edi
c0003383:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003389:	0f b6 f8             	movzx  edi,al
c000338c:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003391:	c1 e0 08             	shl    eax,0x8
c0003394:	09 f8                	or     eax,edi
c0003396:	89 c1                	mov    ecx,eax
c0003398:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000339e:	80 e3 01             	and    bl,0x1
c00033a1:	74 5a                	je     c00033fd <get_fat.isra.2+0xf8>
c00033a3:	c1 e8 04             	shr    eax,0x4
c00033a6:	eb 53                	jmp    c00033fb <get_fat.isra.2+0xf6>
c00033a8:	c1 ea 08             	shr    edx,0x8
c00033ab:	89 f0                	mov    eax,esi
c00033ad:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033b0:	e8 73 f0 ff ff       	call   c0002428 <move_window>
c00033b5:	85 c0                	test   eax,eax
c00033b7:	75 9f                	jne    c0003358 <get_fat.isra.2+0x53>
c00033b9:	01 db                	add    ebx,ebx
c00033bb:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00033c1:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00033c5:	e8 f9 ea ff ff       	call   c0001ec3 <ld_word>
c00033ca:	0f b7 c8             	movzx  ecx,ax
c00033cd:	eb 2e                	jmp    c00033fd <get_fat.isra.2+0xf8>
c00033cf:	c1 ea 07             	shr    edx,0x7
c00033d2:	89 f0                	mov    eax,esi
c00033d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033d7:	e8 4c f0 ff ff       	call   c0002428 <move_window>
c00033dc:	85 c0                	test   eax,eax
c00033de:	0f 85 74 ff ff ff    	jne    c0003358 <get_fat.isra.2+0x53>
c00033e4:	c1 e3 02             	shl    ebx,0x2
c00033e7:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00033ed:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00033f1:	e8 da ea ff ff       	call   c0001ed0 <ld_dword>
c00033f6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00033fb:	89 c1                	mov    ecx,eax
c00033fd:	83 c4 0c             	add    esp,0xc
c0003400:	89 c8                	mov    eax,ecx
c0003402:	5b                   	pop    ebx
c0003403:	5e                   	pop    esi
c0003404:	5f                   	pop    edi
c0003405:	5d                   	pop    ebp
c0003406:	c3                   	ret    
c0003407:	89 c8                	mov    eax,ecx
c0003409:	c3                   	ret    

c000340a <dir_sdi>:
c000340a:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003410:	0f 87 b6 00 00 00    	ja     c00034cc <dir_sdi+0xc2>
c0003416:	55                   	push   ebp
c0003417:	57                   	push   edi
c0003418:	56                   	push   esi
c0003419:	53                   	push   ebx
c000341a:	89 d3                	mov    ebx,edx
c000341c:	83 ec 1c             	sub    esp,0x1c
c000341f:	f6 c2 1f             	test   dl,0x1f
c0003422:	74 0a                	je     c000342e <dir_sdi+0x24>
c0003424:	b8 02 00 00 00       	mov    eax,0x2
c0003429:	e9 96 00 00 00       	jmp    c00034c4 <dir_sdi+0xba>
c000342e:	89 c6                	mov    esi,eax
c0003430:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003432:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003435:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003438:	85 ff                	test   edi,edi
c000343a:	75 21                	jne    c000345d <dir_sdi+0x53>
c000343c:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003440:	76 07                	jbe    c0003449 <dir_sdi+0x3f>
c0003442:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003445:	85 c0                	test   eax,eax
c0003447:	75 12                	jne    c000345b <dir_sdi+0x51>
c0003449:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000344d:	89 da                	mov    edx,ebx
c000344f:	c1 ea 05             	shr    edx,0x5
c0003452:	39 c2                	cmp    edx,eax
c0003454:	73 ce                	jae    c0003424 <dir_sdi+0x1a>
c0003456:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003459:	eb 3c                	jmp    c0003497 <dir_sdi+0x8d>
c000345b:	89 c7                	mov    edi,eax
c000345d:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0003461:	c1 e1 09             	shl    ecx,0x9
c0003464:	39 cb                	cmp    ebx,ecx
c0003466:	72 26                	jb     c000348e <dir_sdi+0x84>
c0003468:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000346c:	8b 06                	mov    eax,DWORD PTR [esi]
c000346e:	89 fa                	mov    edx,edi
c0003470:	e8 90 fe ff ff       	call   c0003305 <get_fat.isra.2>
c0003475:	83 f8 ff             	cmp    eax,0xffffffff
c0003478:	89 c7                	mov    edi,eax
c000347a:	74 43                	je     c00034bf <dir_sdi+0xb5>
c000347c:	83 f8 01             	cmp    eax,0x1
c000347f:	76 a3                	jbe    c0003424 <dir_sdi+0x1a>
c0003481:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003484:	76 9e                	jbe    c0003424 <dir_sdi+0x1a>
c0003486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000348a:	29 cb                	sub    ebx,ecx
c000348c:	eb d6                	jmp    c0003464 <dir_sdi+0x5a>
c000348e:	89 fa                	mov    edx,edi
c0003490:	89 e8                	mov    eax,ebp
c0003492:	e8 82 ec ff ff       	call   c0002119 <clst2sect>
c0003497:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000349a:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c000349d:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00034a0:	85 d2                	test   edx,edx
c00034a2:	74 80                	je     c0003424 <dir_sdi+0x1a>
c00034a4:	89 d8                	mov    eax,ebx
c00034a6:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00034ac:	c1 e8 09             	shr    eax,0x9
c00034af:	01 d0                	add    eax,edx
c00034b1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034b4:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00034b8:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00034bb:	31 c0                	xor    eax,eax
c00034bd:	eb 05                	jmp    c00034c4 <dir_sdi+0xba>
c00034bf:	b8 01 00 00 00       	mov    eax,0x1
c00034c4:	83 c4 1c             	add    esp,0x1c
c00034c7:	5b                   	pop    ebx
c00034c8:	5e                   	pop    esi
c00034c9:	5f                   	pop    edi
c00034ca:	5d                   	pop    ebp
c00034cb:	c3                   	ret    
c00034cc:	b8 02 00 00 00       	mov    eax,0x2
c00034d1:	c3                   	ret    

c00034d2 <create_chain>:
c00034d2:	55                   	push   ebp
c00034d3:	89 c5                	mov    ebp,eax
c00034d5:	57                   	push   edi
c00034d6:	89 d7                	mov    edi,edx
c00034d8:	56                   	push   esi
c00034d9:	53                   	push   ebx
c00034da:	83 ec 1c             	sub    esp,0x1c
c00034dd:	85 d2                	test   edx,edx
c00034df:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034e1:	75 0e                	jne    c00034f1 <create_chain+0x1f>
c00034e3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00034e6:	85 c9                	test   ecx,ecx
c00034e8:	74 32                	je     c000351c <create_chain+0x4a>
c00034ea:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00034ed:	77 32                	ja     c0003521 <create_chain+0x4f>
c00034ef:	eb 2b                	jmp    c000351c <create_chain+0x4a>
c00034f1:	89 d8                	mov    eax,ebx
c00034f3:	e8 0d fe ff ff       	call   c0003305 <get_fat.isra.2>
c00034f8:	83 f8 01             	cmp    eax,0x1
c00034fb:	77 0a                	ja     c0003507 <create_chain+0x35>
c00034fd:	b8 01 00 00 00       	mov    eax,0x1
c0003502:	e9 fd 00 00 00       	jmp    c0003604 <create_chain+0x132>
c0003507:	83 f8 ff             	cmp    eax,0xffffffff
c000350a:	0f 84 f1 00 00 00    	je     c0003601 <create_chain+0x12f>
c0003510:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003513:	89 f9                	mov    ecx,edi
c0003515:	76 0a                	jbe    c0003521 <create_chain+0x4f>
c0003517:	e9 e8 00 00 00       	jmp    c0003604 <create_chain+0x132>
c000351c:	b9 01 00 00 00       	mov    ecx,0x1
c0003521:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003525:	75 07                	jne    c000352e <create_chain+0x5c>
c0003527:	31 c0                	xor    eax,eax
c0003529:	e9 d6 00 00 00       	jmp    c0003604 <create_chain+0x132>
c000352e:	39 f9                	cmp    ecx,edi
c0003530:	75 49                	jne    c000357b <create_chain+0xa9>
c0003532:	8d 71 01             	lea    esi,[ecx+0x1]
c0003535:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003538:	77 05                	ja     c000353f <create_chain+0x6d>
c000353a:	be 02 00 00 00       	mov    esi,0x2
c000353f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003543:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003546:	89 f2                	mov    edx,esi
c0003548:	e8 b8 fd ff ff       	call   c0003305 <get_fat.isra.2>
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	0f 84 ae 00 00 00    	je     c0003604 <create_chain+0x132>
c0003556:	83 f8 ff             	cmp    eax,0xffffffff
c0003559:	0f 84 a5 00 00 00    	je     c0003604 <create_chain+0x132>
c000355f:	85 c0                	test   eax,eax
c0003561:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003565:	74 10                	je     c0003577 <create_chain+0xa5>
c0003567:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000356a:	83 f8 01             	cmp    eax,0x1
c000356d:	76 0c                	jbe    c000357b <create_chain+0xa9>
c000356f:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003572:	0f 47 c8             	cmova  ecx,eax
c0003575:	eb 04                	jmp    c000357b <create_chain+0xa9>
c0003577:	85 f6                	test   esi,esi
c0003579:	75 3b                	jne    c00035b6 <create_chain+0xe4>
c000357b:	89 ce                	mov    esi,ecx
c000357d:	46                   	inc    esi
c000357e:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003581:	77 0a                	ja     c000358d <create_chain+0xbb>
c0003583:	83 f9 01             	cmp    ecx,0x1
c0003586:	76 9f                	jbe    c0003527 <create_chain+0x55>
c0003588:	be 02 00 00 00       	mov    esi,0x2
c000358d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003591:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003594:	89 f2                	mov    edx,esi
c0003596:	e8 6a fd ff ff       	call   c0003305 <get_fat.isra.2>
c000359b:	85 c0                	test   eax,eax
c000359d:	74 17                	je     c00035b6 <create_chain+0xe4>
c000359f:	83 f8 01             	cmp    eax,0x1
c00035a2:	74 60                	je     c0003604 <create_chain+0x132>
c00035a4:	83 f8 ff             	cmp    eax,0xffffffff
c00035a7:	74 5b                	je     c0003604 <create_chain+0x132>
c00035a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035ad:	39 ce                	cmp    esi,ecx
c00035af:	75 cc                	jne    c000357d <create_chain+0xab>
c00035b1:	e9 71 ff ff ff       	jmp    c0003527 <create_chain+0x55>
c00035b6:	83 c9 ff             	or     ecx,0xffffffff
c00035b9:	89 f2                	mov    edx,esi
c00035bb:	89 d8                	mov    eax,ebx
c00035bd:	e8 c0 f2 ff ff       	call   c0002882 <put_fat>
c00035c2:	85 c0                	test   eax,eax
c00035c4:	75 0f                	jne    c00035d5 <create_chain+0x103>
c00035c6:	85 ff                	test   edi,edi
c00035c8:	74 0b                	je     c00035d5 <create_chain+0x103>
c00035ca:	89 f1                	mov    ecx,esi
c00035cc:	89 fa                	mov    edx,edi
c00035ce:	89 d8                	mov    eax,ebx
c00035d0:	e8 ad f2 ff ff       	call   c0002882 <put_fat>
c00035d5:	85 c0                	test   eax,eax
c00035d7:	75 21                	jne    c00035fa <create_chain+0x128>
c00035d9:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00035dc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00035df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00035e5:	39 d0                	cmp    eax,edx
c00035e7:	77 04                	ja     c00035ed <create_chain+0x11b>
c00035e9:	48                   	dec    eax
c00035ea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035ed:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035f0:	83 c8 01             	or     eax,0x1
c00035f3:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035f6:	89 f0                	mov    eax,esi
c00035f8:	eb 0a                	jmp    c0003604 <create_chain+0x132>
c00035fa:	48                   	dec    eax
c00035fb:	0f 85 fc fe ff ff    	jne    c00034fd <create_chain+0x2b>
c0003601:	83 c8 ff             	or     eax,0xffffffff
c0003604:	83 c4 1c             	add    esp,0x1c
c0003607:	5b                   	pop    ebx
c0003608:	5e                   	pop    esi
c0003609:	5f                   	pop    edi
c000360a:	5d                   	pop    ebp
c000360b:	c3                   	ret    

c000360c <remove_chain>:
c000360c:	55                   	push   ebp
c000360d:	57                   	push   edi
c000360e:	56                   	push   esi
c000360f:	89 d6                	mov    esi,edx
c0003611:	53                   	push   ebx
c0003612:	83 ec 0c             	sub    esp,0xc
c0003615:	83 fa 01             	cmp    edx,0x1
c0003618:	8b 18                	mov    ebx,DWORD PTR [eax]
c000361a:	76 6a                	jbe    c0003686 <remove_chain+0x7a>
c000361c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000361f:	76 65                	jbe    c0003686 <remove_chain+0x7a>
c0003621:	85 c9                	test   ecx,ecx
c0003623:	89 c5                	mov    ebp,eax
c0003625:	89 ca                	mov    edx,ecx
c0003627:	74 0e                	je     c0003637 <remove_chain+0x2b>
c0003629:	83 c9 ff             	or     ecx,0xffffffff
c000362c:	89 d8                	mov    eax,ebx
c000362e:	e8 4f f2 ff ff       	call   c0002882 <put_fat>
c0003633:	85 c0                	test   eax,eax
c0003635:	75 5b                	jne    c0003692 <remove_chain+0x86>
c0003637:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000363a:	89 f2                	mov    edx,esi
c000363c:	e8 c4 fc ff ff       	call   c0003305 <get_fat.isra.2>
c0003641:	85 c0                	test   eax,eax
c0003643:	89 c7                	mov    edi,eax
c0003645:	75 04                	jne    c000364b <remove_chain+0x3f>
c0003647:	31 c0                	xor    eax,eax
c0003649:	eb 47                	jmp    c0003692 <remove_chain+0x86>
c000364b:	83 f8 01             	cmp    eax,0x1
c000364e:	74 36                	je     c0003686 <remove_chain+0x7a>
c0003650:	83 f8 ff             	cmp    eax,0xffffffff
c0003653:	74 38                	je     c000368d <remove_chain+0x81>
c0003655:	31 c9                	xor    ecx,ecx
c0003657:	89 f2                	mov    edx,esi
c0003659:	89 d8                	mov    eax,ebx
c000365b:	e8 22 f2 ff ff       	call   c0002882 <put_fat>
c0003660:	85 c0                	test   eax,eax
c0003662:	75 2e                	jne    c0003692 <remove_chain+0x86>
c0003664:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003667:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000366a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000366d:	39 c8                	cmp    eax,ecx
c000366f:	73 0d                	jae    c000367e <remove_chain+0x72>
c0003671:	40                   	inc    eax
c0003672:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003675:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003678:	83 c8 01             	or     eax,0x1
c000367b:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000367e:	39 fa                	cmp    edx,edi
c0003680:	89 fe                	mov    esi,edi
c0003682:	77 b3                	ja     c0003637 <remove_chain+0x2b>
c0003684:	eb c1                	jmp    c0003647 <remove_chain+0x3b>
c0003686:	b8 02 00 00 00       	mov    eax,0x2
c000368b:	eb 05                	jmp    c0003692 <remove_chain+0x86>
c000368d:	b8 01 00 00 00       	mov    eax,0x1
c0003692:	83 c4 0c             	add    esp,0xc
c0003695:	5b                   	pop    ebx
c0003696:	5e                   	pop    esi
c0003697:	5f                   	pop    edi
c0003698:	5d                   	pop    ebp
c0003699:	c3                   	ret    

c000369a <dir_next>:
c000369a:	55                   	push   ebp
c000369b:	57                   	push   edi
c000369c:	56                   	push   esi
c000369d:	53                   	push   ebx
c000369e:	83 ec 1c             	sub    esp,0x1c
c00036a1:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00036a4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036a6:	83 c7 20             	add    edi,0x20
c00036a9:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00036af:	76 07                	jbe    c00036b8 <dir_next+0x1e>
c00036b1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00036b8:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00036bb:	b9 04 00 00 00       	mov    ecx,0x4
c00036c0:	85 f6                	test   esi,esi
c00036c2:	0f 84 cd 00 00 00    	je     c0003795 <dir_next+0xfb>
c00036c8:	89 c3                	mov    ebx,eax
c00036ca:	89 f8                	mov    eax,edi
c00036cc:	25 ff 01 00 00       	and    eax,0x1ff
c00036d1:	89 d1                	mov    ecx,edx
c00036d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00036d7:	0f 85 a8 00 00 00    	jne    c0003785 <dir_next+0xeb>
c00036dd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036e0:	46                   	inc    esi
c00036e1:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00036e4:	85 d2                	test   edx,edx
c00036e6:	75 22                	jne    c000370a <dir_next+0x70>
c00036e8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036ec:	89 fa                	mov    edx,edi
c00036ee:	c1 ea 05             	shr    edx,0x5
c00036f1:	39 c2                	cmp    edx,eax
c00036f3:	0f 82 8c 00 00 00    	jb     c0003785 <dir_next+0xeb>
c00036f9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003700:	b9 04 00 00 00       	mov    ecx,0x4
c0003705:	e9 8b 00 00 00       	jmp    c0003795 <dir_next+0xfb>
c000370a:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000370e:	89 fe                	mov    esi,edi
c0003710:	c1 ee 09             	shr    esi,0x9
c0003713:	48                   	dec    eax
c0003714:	85 f0                	test   eax,esi
c0003716:	75 6d                	jne    c0003785 <dir_next+0xeb>
c0003718:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 e2 fb ff ff       	call   c0003305 <get_fat.isra.2>
c0003723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003727:	83 f8 01             	cmp    eax,0x1
c000372a:	89 c6                	mov    esi,eax
c000372c:	77 07                	ja     c0003735 <dir_next+0x9b>
c000372e:	b9 02 00 00 00       	mov    ecx,0x2
c0003733:	eb 60                	jmp    c0003795 <dir_next+0xfb>
c0003735:	83 f8 ff             	cmp    eax,0xffffffff
c0003738:	75 07                	jne    c0003741 <dir_next+0xa7>
c000373a:	b9 01 00 00 00       	mov    ecx,0x1
c000373f:	eb 54                	jmp    c0003795 <dir_next+0xfb>
c0003741:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003744:	77 30                	ja     c0003776 <dir_next+0xdc>
c0003746:	85 c9                	test   ecx,ecx
c0003748:	74 af                	je     c00036f9 <dir_next+0x5f>
c000374a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000374d:	89 d8                	mov    eax,ebx
c000374f:	e8 7e fd ff ff       	call   c00034d2 <create_chain>
c0003754:	b9 07 00 00 00       	mov    ecx,0x7
c0003759:	85 c0                	test   eax,eax
c000375b:	89 c6                	mov    esi,eax
c000375d:	74 36                	je     c0003795 <dir_next+0xfb>
c000375f:	83 f8 01             	cmp    eax,0x1
c0003762:	74 ca                	je     c000372e <dir_next+0x94>
c0003764:	83 f8 ff             	cmp    eax,0xffffffff
c0003767:	74 d1                	je     c000373a <dir_next+0xa0>
c0003769:	89 c2                	mov    edx,eax
c000376b:	89 e8                	mov    eax,ebp
c000376d:	e8 67 f2 ff ff       	call   c00029d9 <dir_clear>
c0003772:	85 c0                	test   eax,eax
c0003774:	75 c4                	jne    c000373a <dir_next+0xa0>
c0003776:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003779:	89 f2                	mov    edx,esi
c000377b:	89 e8                	mov    eax,ebp
c000377d:	e8 97 e9 ff ff       	call   c0002119 <clst2sect>
c0003782:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003785:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000378c:	31 c9                	xor    ecx,ecx
c000378e:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003792:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003795:	83 c4 1c             	add    esp,0x1c
c0003798:	89 c8                	mov    eax,ecx
c000379a:	5b                   	pop    ebx
c000379b:	5e                   	pop    esi
c000379c:	5f                   	pop    edi
c000379d:	5d                   	pop    ebp
c000379e:	c3                   	ret    

c000379f <dir_alloc>:
c000379f:	55                   	push   ebp
c00037a0:	89 c5                	mov    ebp,eax
c00037a2:	57                   	push   edi
c00037a3:	89 d7                	mov    edi,edx
c00037a5:	56                   	push   esi
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	53                   	push   ebx
c00037a9:	83 ec 0c             	sub    esp,0xc
c00037ac:	8b 30                	mov    esi,DWORD PTR [eax]
c00037ae:	e8 57 fc ff ff       	call   c000340a <dir_sdi>
c00037b3:	85 c0                	test   eax,eax
c00037b5:	75 3b                	jne    c00037f2 <dir_alloc+0x53>
c00037b7:	31 db                	xor    ebx,ebx
c00037b9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00037bc:	89 f0                	mov    eax,esi
c00037be:	e8 65 ec ff ff       	call   c0002428 <move_window>
c00037c3:	85 c0                	test   eax,eax
c00037c5:	75 2b                	jne    c00037f2 <dir_alloc+0x53>
c00037c7:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00037ca:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00037cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00037d3:	74 04                	je     c00037d9 <dir_alloc+0x3a>
c00037d5:	85 d2                	test   edx,edx
c00037d7:	75 07                	jne    c00037e0 <dir_alloc+0x41>
c00037d9:	43                   	inc    ebx
c00037da:	39 fb                	cmp    ebx,edi
c00037dc:	75 04                	jne    c00037e2 <dir_alloc+0x43>
c00037de:	eb 1c                	jmp    c00037fc <dir_alloc+0x5d>
c00037e0:	31 db                	xor    ebx,ebx
c00037e2:	ba 01 00 00 00       	mov    edx,0x1
c00037e7:	89 e8                	mov    eax,ebp
c00037e9:	e8 ac fe ff ff       	call   c000369a <dir_next>
c00037ee:	85 c0                	test   eax,eax
c00037f0:	74 c7                	je     c00037b9 <dir_alloc+0x1a>
c00037f2:	83 f8 04             	cmp    eax,0x4
c00037f5:	75 05                	jne    c00037fc <dir_alloc+0x5d>
c00037f7:	b8 07 00 00 00       	mov    eax,0x7
c00037fc:	83 c4 0c             	add    esp,0xc
c00037ff:	5b                   	pop    ebx
c0003800:	5e                   	pop    esi
c0003801:	5f                   	pop    edi
c0003802:	5d                   	pop    ebp
c0003803:	c3                   	ret    

c0003804 <dir_read>:
c0003804:	55                   	push   ebp
c0003805:	57                   	push   edi
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	56                   	push   esi
c000380c:	be 04 00 00 00       	mov    esi,0x4
c0003811:	53                   	push   ebx
c0003812:	89 c3                	mov    ebx,eax
c0003814:	83 ec 1c             	sub    esp,0x1c
c0003817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000381b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000381d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003822:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003825:	85 d2                	test   edx,edx
c0003827:	0f 84 e3 00 00 00    	je     c0003910 <dir_read+0x10c>
c000382d:	89 e8                	mov    eax,ebp
c000382f:	e8 f4 eb ff ff       	call   c0002428 <move_window>
c0003834:	85 c0                	test   eax,eax
c0003836:	89 c6                	mov    esi,eax
c0003838:	0f 85 dd 00 00 00    	jne    c000391b <dir_read+0x117>
c000383e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003841:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003844:	88 04 24             	mov    BYTE PTR [esp],al
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 84 c7 00 00 00    	je     c0003916 <dir_read+0x112>
c000384f:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003852:	83 e1 3f             	and    ecx,0x3f
c0003855:	3d e5 00 00 00       	cmp    eax,0xe5
c000385a:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000385d:	0f 84 93 00 00 00    	je     c00038f6 <dir_read+0xf2>
c0003863:	83 f8 2e             	cmp    eax,0x2e
c0003866:	0f 84 8a 00 00 00    	je     c00038f6 <dir_read+0xf2>
c000386c:	0f b6 c9             	movzx  ecx,cl
c000386f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003873:	83 e1 df             	and    ecx,0xffffffdf
c0003876:	83 f9 08             	cmp    ecx,0x8
c0003879:	0f 94 c1             	sete   cl
c000387c:	0f b6 c9             	movzx  ecx,cl
c000387f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003883:	75 71                	jne    c00038f6 <dir_read+0xf2>
c0003885:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000388a:	75 4a                	jne    c00038d6 <dir_read+0xd2>
c000388c:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003890:	74 16                	je     c00038a8 <dir_read+0xa4>
c0003892:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003895:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c000389c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038a3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038a6:	eb 0e                	jmp    c00038b6 <dir_read+0xb2>
c00038a8:	89 f9                	mov    ecx,edi
c00038aa:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038af:	0f b6 c9             	movzx  ecx,cl
c00038b2:	39 c1                	cmp    ecx,eax
c00038b4:	75 45                	jne    c00038fb <dir_read+0xf7>
c00038b6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ba:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038bf:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00038c2:	75 37                	jne    c00038fb <dir_read+0xf7>
c00038c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00038c7:	e8 6a e8 ff ff       	call   c0002136 <pick_lfn>
c00038cc:	85 c0                	test   eax,eax
c00038ce:	74 2b                	je     c00038fb <dir_read+0xf7>
c00038d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00038d3:	4f                   	dec    edi
c00038d4:	eb 25                	jmp    c00038fb <dir_read+0xf7>
c00038d6:	89 f8                	mov    eax,edi
c00038d8:	84 c0                	test   al,al
c00038da:	75 11                	jne    c00038ed <dir_read+0xe9>
c00038dc:	89 d0                	mov    eax,edx
c00038de:	e8 30 ea ff ff       	call   c0002313 <sum_sfn>
c00038e3:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00038e7:	75 04                	jne    c00038ed <dir_read+0xe9>
c00038e9:	31 f6                	xor    esi,esi
c00038eb:	eb 35                	jmp    c0003922 <dir_read+0x11e>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	eb 2c                	jmp    c0003922 <dir_read+0x11e>
c00038f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	89 d8                	mov    eax,ebx
c00038ff:	e8 96 fd ff ff       	call   c000369a <dir_next>
c0003904:	85 c0                	test   eax,eax
c0003906:	89 c6                	mov    esi,eax
c0003908:	0f 84 14 ff ff ff    	je     c0003822 <dir_read+0x1e>
c000390e:	eb 0b                	jmp    c000391b <dir_read+0x117>
c0003910:	85 f6                	test   esi,esi
c0003912:	74 d5                	je     c00038e9 <dir_read+0xe5>
c0003914:	eb 05                	jmp    c000391b <dir_read+0x117>
c0003916:	be 04 00 00 00       	mov    esi,0x4
c000391b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003922:	83 c4 1c             	add    esp,0x1c
c0003925:	89 f0                	mov    eax,esi
c0003927:	5b                   	pop    ebx
c0003928:	5e                   	pop    esi
c0003929:	5f                   	pop    edi
c000392a:	5d                   	pop    ebp
c000392b:	c3                   	ret    

c000392c <dir_remove>:
c000392c:	57                   	push   edi
c000392d:	56                   	push   esi
c000392e:	53                   	push   ebx
c000392f:	89 c3                	mov    ebx,eax
c0003931:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003934:	8b 30                	mov    esi,DWORD PTR [eax]
c0003936:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003939:	83 fa ff             	cmp    edx,0xffffffff
c000393c:	74 09                	je     c0003947 <dir_remove+0x1b>
c000393e:	e8 c7 fa ff ff       	call   c000340a <dir_sdi>
c0003943:	85 c0                	test   eax,eax
c0003945:	75 34                	jne    c000397b <dir_remove+0x4f>
c0003947:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000394a:	89 f0                	mov    eax,esi
c000394c:	e8 d7 ea ff ff       	call   c0002428 <move_window>
c0003951:	85 c0                	test   eax,eax
c0003953:	75 1c                	jne    c0003971 <dir_remove+0x45>
c0003955:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003958:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000395b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000395f:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003962:	73 17                	jae    c000397b <dir_remove+0x4f>
c0003964:	31 d2                	xor    edx,edx
c0003966:	89 d8                	mov    eax,ebx
c0003968:	e8 2d fd ff ff       	call   c000369a <dir_next>
c000396d:	85 c0                	test   eax,eax
c000396f:	74 d6                	je     c0003947 <dir_remove+0x1b>
c0003971:	83 f8 04             	cmp    eax,0x4
c0003974:	75 05                	jne    c000397b <dir_remove+0x4f>
c0003976:	b8 02 00 00 00       	mov    eax,0x2
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	c3                   	ret    

c000397f <dir_find>:
c000397f:	55                   	push   ebp
c0003980:	31 d2                	xor    edx,edx
c0003982:	57                   	push   edi
c0003983:	56                   	push   esi
c0003984:	53                   	push   ebx
c0003985:	89 c3                	mov    ebx,eax
c0003987:	83 ec 1c             	sub    esp,0x1c
c000398a:	8b 00                	mov    eax,DWORD PTR [eax]
c000398c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003990:	89 d8                	mov    eax,ebx
c0003992:	e8 73 fa ff ff       	call   c000340a <dir_sdi>
c0003997:	85 c0                	test   eax,eax
c0003999:	89 c6                	mov    esi,eax
c000399b:	0f 85 22 01 00 00    	jne    c0003ac3 <dir_find+0x144>
c00039a1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039a8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039ad:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00039b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039b9:	e8 6a ea ff ff       	call   c0002428 <move_window>
c00039be:	85 c0                	test   eax,eax
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	0f 85 fb 00 00 00    	jne    c0003ac3 <dir_find+0x144>
c00039c8:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00039cb:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00039ce:	85 d2                	test   edx,edx
c00039d0:	89 d1                	mov    ecx,edx
c00039d2:	0f 84 e6 00 00 00    	je     c0003abe <dir_find+0x13f>
c00039d8:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00039db:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00039df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e3:	83 e0 3f             	and    eax,0x3f
c00039e6:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00039ec:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00039ef:	0f 84 a8 00 00 00    	je     c0003a9d <dir_find+0x11e>
c00039f5:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c00039fa:	0f b6 c0             	movzx  eax,al
c00039fd:	74 0b                	je     c0003a0a <dir_find+0x8b>
c00039ff:	83 f8 0f             	cmp    eax,0xf
c0003a02:	0f 85 95 00 00 00    	jne    c0003a9d <dir_find+0x11e>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x90>
c0003a0a:	83 f8 0f             	cmp    eax,0xf
c0003a0d:	75 62                	jne    c0003a71 <dir_find+0xf2>
c0003a0f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003a13:	0f 85 90 00 00 00    	jne    c0003aa9 <dir_find+0x12a>
c0003a19:	f6 c1 40             	test   cl,0x40
c0003a1c:	74 15                	je     c0003a33 <dir_find+0xb4>
c0003a1e:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003a21:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003a27:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a2b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a2e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003a31:	eb 11                	jmp    c0003a44 <dir_find+0xc5>
c0003a33:	89 e8                	mov    eax,ebp
c0003a35:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a3a:	0f b6 d0             	movzx  edx,al
c0003a3d:	0f b6 c1             	movzx  eax,cl
c0003a40:	39 c2                	cmp    edx,eax
c0003a42:	75 65                	jne    c0003aa9 <dir_find+0x12a>
c0003a44:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a48:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a4d:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003a50:	75 57                	jne    c0003aa9 <dir_find+0x12a>
c0003a52:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a5a:	89 fa                	mov    edx,edi
c0003a5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5f:	e8 2c f3 ff ff       	call   c0002d90 <cmp_lfn>
c0003a64:	85 c0                	test   eax,eax
c0003a66:	74 41                	je     c0003aa9 <dir_find+0x12a>
c0003a68:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003a6c:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003a6f:	eb 38                	jmp    c0003aa9 <dir_find+0x12a>
c0003a71:	89 e8                	mov    eax,ebp
c0003a73:	84 c0                	test   al,al
c0003a75:	75 0d                	jne    c0003a84 <dir_find+0x105>
c0003a77:	89 f8                	mov    eax,edi
c0003a79:	e8 95 e8 ff ff       	call   c0002313 <sum_sfn>
c0003a7e:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a82:	74 3f                	je     c0003ac3 <dir_find+0x144>
c0003a84:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003a88:	75 13                	jne    c0003a9d <dir_find+0x11e>
c0003a8a:	8d 53 20             	lea    edx,[ebx+0x20]
c0003a8d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a92:	89 f8                	mov    eax,edi
c0003a94:	e8 75 e4 ff ff       	call   c0001f0e <mem_cmp>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	74 26                	je     c0003ac3 <dir_find+0x144>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	89 d8                	mov    eax,ebx
c0003aad:	e8 e8 fb ff ff       	call   c000369a <dir_next>
c0003ab2:	85 c0                	test   eax,eax
c0003ab4:	89 c6                	mov    esi,eax
c0003ab6:	0f 84 f6 fe ff ff    	je     c00039b2 <dir_find+0x33>
c0003abc:	eb 05                	jmp    c0003ac3 <dir_find+0x144>
c0003abe:	be 04 00 00 00       	mov    esi,0x4
c0003ac3:	83 c4 1c             	add    esp,0x1c
c0003ac6:	89 f0                	mov    eax,esi
c0003ac8:	5b                   	pop    ebx
c0003ac9:	5e                   	pop    esi
c0003aca:	5f                   	pop    edi
c0003acb:	5d                   	pop    ebp
c0003acc:	c3                   	ret    

c0003acd <follow_path>:
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	89 c3                	mov    ebx,eax
c0003ad1:	83 ec 14             	sub    esp,0x14
c0003ad4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ad8:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ade:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003ae1:	83 fa 2f             	cmp    edx,0x2f
c0003ae4:	75 07                	jne    c0003aed <follow_path+0x20>
c0003ae6:	40                   	inc    eax
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	eb ed                	jmp    c0003ada <follow_path+0xd>
c0003aed:	83 fa 5c             	cmp    edx,0x5c
c0003af0:	74 f4                	je     c0003ae6 <follow_path+0x19>
c0003af2:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003af9:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003afc:	77 3e                	ja     c0003b3c <follow_path+0x6f>
c0003afe:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003b02:	31 d2                	xor    edx,edx
c0003b04:	89 d8                	mov    eax,ebx
c0003b06:	e8 ff f8 ff ff       	call   c000340a <dir_sdi>
c0003b0b:	eb 57                	jmp    c0003b64 <follow_path+0x97>
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 6b fe ff ff       	call   c000397f <dir_find>
c0003b14:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003b17:	85 c0                	test   eax,eax
c0003b19:	75 32                	jne    c0003b4d <follow_path+0x80>
c0003b1b:	80 e2 04             	and    dl,0x4
c0003b1e:	75 44                	jne    c0003b64 <follow_path+0x97>
c0003b20:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003b24:	74 39                	je     c0003b5f <follow_path+0x92>
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	25 ff 01 00 00       	and    eax,0x1ff
c0003b2e:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003b32:	8a 06                	mov    al,BYTE PTR [esi]
c0003b34:	e8 7b f7 ff ff       	call   c00032b4 <ld_clust.isra.0>
c0003b39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b3c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003b40:	89 d8                	mov    eax,ebx
c0003b42:	e8 8e ef ff ff       	call   c0002ad5 <create_name>
c0003b47:	85 c0                	test   eax,eax
c0003b49:	74 c2                	je     c0003b0d <follow_path+0x40>
c0003b4b:	eb 17                	jmp    c0003b64 <follow_path+0x97>
c0003b4d:	83 f8 04             	cmp    eax,0x4
c0003b50:	75 12                	jne    c0003b64 <follow_path+0x97>
c0003b52:	80 e2 04             	and    dl,0x4
c0003b55:	ba 05 00 00 00       	mov    edx,0x5
c0003b5a:	0f 44 c2             	cmove  eax,edx
c0003b5d:	eb 05                	jmp    c0003b64 <follow_path+0x97>
c0003b5f:	b8 05 00 00 00       	mov    eax,0x5
c0003b64:	83 c4 14             	add    esp,0x14
c0003b67:	5b                   	pop    ebx
c0003b68:	5e                   	pop    esi
c0003b69:	c3                   	ret    

c0003b6a <dir_register>:
c0003b6a:	55                   	push   ebp
c0003b6b:	57                   	push   edi
c0003b6c:	56                   	push   esi
c0003b6d:	be 06 00 00 00       	mov    esi,0x6
c0003b72:	53                   	push   ebx
c0003b73:	83 ec 2c             	sub    esp,0x2c
c0003b76:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003b79:	80 e2 a0             	and    dl,0xa0
c0003b7c:	0f 85 66 01 00 00    	jne    c0003ce8 <dir_register+0x17e>
c0003b82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003b8a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b8c:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003b8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b93:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003b98:	74 06                	je     c0003ba0 <dir_register+0x36>
c0003b9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003b9e:	eb ef                	jmp    c0003b8f <dir_register+0x25>
c0003ba0:	89 c3                	mov    ebx,eax
c0003ba2:	b9 0c 00 00 00       	mov    ecx,0xc
c0003ba7:	8d 40 20             	lea    eax,[eax+0x20]
c0003baa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003bae:	89 c2                	mov    edx,eax
c0003bb0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003bb4:	e8 36 e3 ff ff       	call   c0001eef <mem_cpy>
c0003bb9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003bbe:	74 48                	je     c0003c08 <dir_register+0x9e>
c0003bc0:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003bc4:	bd 01 00 00 00       	mov    ebp,0x1
c0003bc9:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003bcc:	55                   	push   ebp
c0003bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003bd5:	e8 77 e6 ff ff       	call   c0002251 <gen_numname>
c0003bda:	58                   	pop    eax
c0003bdb:	89 d8                	mov    eax,ebx
c0003bdd:	e8 9d fd ff ff       	call   c000397f <dir_find>
c0003be2:	85 c0                	test   eax,eax
c0003be4:	89 c6                	mov    esi,eax
c0003be6:	75 10                	jne    c0003bf8 <dir_register+0x8e>
c0003be8:	45                   	inc    ebp
c0003be9:	83 fd 64             	cmp    ebp,0x64
c0003bec:	75 db                	jne    c0003bc9 <dir_register+0x5f>
c0003bee:	be 07 00 00 00       	mov    esi,0x7
c0003bf3:	e9 f0 00 00 00       	jmp    c0003ce8 <dir_register+0x17e>
c0003bf8:	83 f8 04             	cmp    eax,0x4
c0003bfb:	0f 85 e7 00 00 00    	jne    c0003ce8 <dir_register+0x17e>
c0003c01:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003c05:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003c08:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003c0d:	bd 01 00 00 00       	mov    ebp,0x1
c0003c12:	74 13                	je     c0003c27 <dir_register+0xbd>
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	b9 0d 00 00 00       	mov    ecx,0xd
c0003c1d:	31 d2                	xor    edx,edx
c0003c1f:	83 c0 0c             	add    eax,0xc
c0003c22:	f7 f1                	div    ecx
c0003c24:	8d 68 01             	lea    ebp,[eax+0x1]
c0003c27:	89 ea                	mov    edx,ebp
c0003c29:	89 d8                	mov    eax,ebx
c0003c2b:	e8 6f fb ff ff       	call   c000379f <dir_alloc>
c0003c30:	85 c0                	test   eax,eax
c0003c32:	89 c6                	mov    esi,eax
c0003c34:	0f 85 ae 00 00 00    	jne    c0003ce8 <dir_register+0x17e>
c0003c3a:	4d                   	dec    ebp
c0003c3b:	74 6b                	je     c0003ca8 <dir_register+0x13e>
c0003c3d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003c40:	89 e8                	mov    eax,ebp
c0003c42:	c1 e0 05             	shl    eax,0x5
c0003c45:	29 c2                	sub    edx,eax
c0003c47:	89 d8                	mov    eax,ebx
c0003c49:	e8 bc f7 ff ff       	call   c000340a <dir_sdi>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	0f 85 90 00 00 00    	jne    c0003ce8 <dir_register+0x17e>
c0003c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c5c:	e8 b2 e6 ff ff       	call   c0002313 <sum_sfn>
c0003c61:	0f b6 c0             	movzx  eax,al
c0003c64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c68:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	e8 b6 e7 ff ff       	call   c0002428 <move_window>
c0003c72:	85 c0                	test   eax,eax
c0003c74:	89 c6                	mov    esi,eax
c0003c76:	75 70                	jne    c0003ce8 <dir_register+0x17e>
c0003c78:	83 ec 0c             	sub    esp,0xc
c0003c7b:	89 e8                	mov    eax,ebp
c0003c7d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c80:	0f b6 c8             	movzx  ecx,al
c0003c83:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003c86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003c8a:	e8 27 e5 ff ff       	call   c00021b6 <put_lfn>
c0003c8f:	31 d2                	xor    edx,edx
c0003c91:	89 d8                	mov    eax,ebx
c0003c93:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c97:	e8 fe f9 ff ff       	call   c000369a <dir_next>
c0003c9c:	83 c4 10             	add    esp,0x10
c0003c9f:	85 c0                	test   eax,eax
c0003ca1:	89 c6                	mov    esi,eax
c0003ca3:	75 43                	jne    c0003ce8 <dir_register+0x17e>
c0003ca5:	4d                   	dec    ebp
c0003ca6:	75 c0                	jne    c0003c68 <dir_register+0xfe>
c0003ca8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cab:	89 f8                	mov    eax,edi
c0003cad:	e8 76 e7 ff ff       	call   c0002428 <move_window>
c0003cb2:	85 c0                	test   eax,eax
c0003cb4:	89 c6                	mov    esi,eax
c0003cb6:	75 30                	jne    c0003ce8 <dir_register+0x17e>
c0003cb8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cbb:	b9 20 00 00 00       	mov    ecx,0x20
c0003cc0:	31 d2                	xor    edx,edx
c0003cc2:	e8 3d e2 ff ff       	call   c0001f04 <mem_set>
c0003cc7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cca:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ccf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd3:	e8 17 e2 ff ff       	call   c0001eef <mem_cpy>
c0003cd8:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003cdb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003cde:	83 e0 18             	and    eax,0x18
c0003ce1:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003ce4:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ce8:	83 c4 2c             	add    esp,0x2c
c0003ceb:	89 f0                	mov    eax,esi
c0003ced:	5b                   	pop    ebx
c0003cee:	5e                   	pop    esi
c0003cef:	5f                   	pop    edi
c0003cf0:	5d                   	pop    ebp
c0003cf1:	c3                   	ret    

c0003cf2 <f_mount>:
c0003cf2:	53                   	push   ebx
c0003cf3:	83 ec 18             	sub    esp,0x18
c0003cf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003cfa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003cfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003d06:	e8 28 e6 ff ff       	call   c0002333 <get_ldnumber>
c0003d0b:	89 c2                	mov    edx,eax
c0003d0d:	b8 0b 00 00 00       	mov    eax,0xb
c0003d12:	85 d2                	test   edx,edx
c0003d14:	78 39                	js     c0003d4f <f_mount+0x5d>
c0003d16:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003d1d:	85 c0                	test   eax,eax
c0003d1f:	74 03                	je     c0003d24 <f_mount+0x32>
c0003d21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d28:	85 c0                	test   eax,eax
c0003d2a:	74 03                	je     c0003d2f <f_mount+0x3d>
c0003d2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d33:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003d3a:	31 c0                	xor    eax,eax
c0003d3c:	84 db                	test   bl,bl
c0003d3e:	74 0f                	je     c0003d4f <f_mount+0x5d>
c0003d40:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003d44:	31 c9                	xor    ecx,ecx
c0003d46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d4a:	e8 36 e8 ff ff       	call   c0002585 <mount_volume>
c0003d4f:	83 c4 18             	add    esp,0x18
c0003d52:	5b                   	pop    ebx
c0003d53:	c3                   	ret    

c0003d54 <f_open>:
c0003d54:	55                   	push   ebp
c0003d55:	b8 09 00 00 00       	mov    eax,0x9
c0003d5a:	57                   	push   edi
c0003d5b:	56                   	push   esi
c0003d5c:	53                   	push   ebx
c0003d5d:	83 ec 5c             	sub    esp,0x5c
c0003d60:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003d64:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003d68:	85 db                	test   ebx,ebx
c0003d6a:	0f 84 9f 02 00 00    	je     c000400f <f_open+0x2bb>
c0003d70:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003d74:	89 fd                	mov    ebp,edi
c0003d76:	83 e5 3f             	and    ebp,0x3f
c0003d79:	89 e8                	mov    eax,ebp
c0003d7b:	89 ee                	mov    esi,ebp
c0003d7d:	0f b6 c8             	movzx  ecx,al
c0003d80:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003d84:	e8 fc e7 ff ff       	call   c0002585 <mount_volume>
c0003d89:	85 c0                	test   eax,eax
c0003d8b:	0f 85 78 02 00 00    	jne    c0004009 <f_open+0x2b5>
c0003d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d95:	83 ec 0c             	sub    esp,0xc
c0003d98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d9c:	68 00 02 00 00       	push   0x200
c0003da1:	e8 62 1f 00 00       	call   c0005d08 <ff_memalloc>
c0003da6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003daa:	83 c4 10             	add    esp,0x10
c0003dad:	b8 11 00 00 00       	mov    eax,0x11
c0003db2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003db7:	0f 84 52 02 00 00    	je     c000400f <f_open+0x2bb>
c0003dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003dc5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003dc9:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003dcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dd0:	e8 f8 fc ff ff       	call   c0003acd <follow_path>
c0003dd5:	85 c0                	test   eax,eax
c0003dd7:	75 0d                	jne    c0003de6 <f_open+0x92>
c0003dd9:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003dde:	ba 06 00 00 00       	mov    edx,0x6
c0003de3:	0f 45 c2             	cmovne eax,edx
c0003de6:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003dec:	0f 84 d5 00 00 00    	je     c0003ec7 <f_open+0x173>
c0003df2:	85 c0                	test   eax,eax
c0003df4:	74 21                	je     c0003e17 <f_open+0xc3>
c0003df6:	83 f8 04             	cmp    eax,0x4
c0003df9:	0f 85 ef 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003dff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e03:	e8 62 fd ff ff       	call   c0003b6a <dir_register>
c0003e08:	85 c0                	test   eax,eax
c0003e0a:	0f 85 de 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003e10:	83 cd 08             	or     ebp,0x8
c0003e13:	89 ee                	mov    esi,ebp
c0003e15:	eb 2c                	jmp    c0003e43 <f_open+0xef>
c0003e17:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1b:	b8 07 00 00 00       	mov    eax,0x7
c0003e20:	80 e2 11             	and    dl,0x11
c0003e23:	0f 85 c5 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003e29:	f7 c7 04 00 00 00    	test   edi,0x4
c0003e2f:	b8 08 00 00 00       	mov    eax,0x8
c0003e34:	0f 85 b4 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003e3a:	83 e7 08             	and    edi,0x8
c0003e3d:	0f 84 b1 00 00 00    	je     c0003ef4 <f_open+0x1a0>
c0003e43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e47:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003e4b:	8a 00                	mov    al,BYTE PTR [eax]
c0003e4d:	89 ea                	mov    edx,ebp
c0003e4f:	e8 60 f4 ff ff       	call   c00032b4 <ld_clust.isra.0>
c0003e54:	ba 00 00 21 50       	mov    edx,0x50210000
c0003e59:	89 c7                	mov    edi,eax
c0003e5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003e5e:	e8 89 e0 ff ff       	call   c0001eec <st_dword>
c0003e63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e67:	31 c9                	xor    ecx,ecx
c0003e69:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003e6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e71:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003e75:	e8 63 f4 ff ff       	call   c00032dd <st_clust.isra.1>
c0003e7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e7e:	31 d2                	xor    edx,edx
c0003e80:	83 c0 1c             	add    eax,0x1c
c0003e83:	e8 64 e0 ff ff       	call   c0001eec <st_dword>
c0003e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e8c:	85 ff                	test   edi,edi
c0003e8e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003e92:	74 60                	je     c0003ef4 <f_open+0x1a0>
c0003e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e98:	31 c9                	xor    ecx,ecx
c0003e9a:	89 fa                	mov    edx,edi
c0003e9c:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003e9f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ea3:	e8 64 f7 ff ff       	call   c000360c <remove_chain>
c0003ea8:	85 c0                	test   eax,eax
c0003eaa:	0f 85 3e 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003eb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb4:	89 ea                	mov    edx,ebp
c0003eb6:	4f                   	dec    edi
c0003eb7:	e8 6c e5 ff ff       	call   c0002428 <move_window>
c0003ebc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ec0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ec3:	85 c0                	test   eax,eax
c0003ec5:	eb 27                	jmp    c0003eee <f_open+0x19a>
c0003ec7:	85 c0                	test   eax,eax
c0003ec9:	0f 85 1f 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003ecf:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ed3:	b8 04 00 00 00       	mov    eax,0x4
c0003ed8:	f6 c2 10             	test   dl,0x10
c0003edb:	0f 85 0d 01 00 00    	jne    c0003fee <f_open+0x29a>
c0003ee1:	83 e7 02             	and    edi,0x2
c0003ee4:	74 0e                	je     c0003ef4 <f_open+0x1a0>
c0003ee6:	b8 07 00 00 00       	mov    eax,0x7
c0003eeb:	80 e2 01             	and    dl,0x1
c0003eee:	0f 85 fa 00 00 00    	jne    c0003fee <f_open+0x29a>
c0003ef4:	f7 c6 08 00 00 00    	test   esi,0x8
c0003efa:	74 03                	je     c0003eff <f_open+0x1ab>
c0003efc:	83 ce 40             	or     esi,0x40
c0003eff:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f03:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003f07:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003f0a:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003f0d:	89 fa                	mov    edx,edi
c0003f0f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003f12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003f15:	e8 9a f3 ff ff       	call   c00032b4 <ld_clust.isra.0>
c0003f1a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f1d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003f20:	e8 ab df ff ff       	call   c0001ed0 <ld_dword>
c0003f25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003f28:	31 d2                	xor    edx,edx
c0003f2a:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003f2c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003f38:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003f3c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003f43:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f4a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003f4e:	89 f0                	mov    eax,esi
c0003f50:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003f53:	89 f8                	mov    eax,edi
c0003f55:	e8 aa df ff ff       	call   c0001f04 <mem_set>
c0003f5a:	83 e6 20             	and    esi,0x20
c0003f5d:	75 07                	jne    c0003f66 <f_open+0x212>
c0003f5f:	31 c0                	xor    eax,eax
c0003f61:	e9 88 00 00 00       	jmp    c0003fee <f_open+0x29a>
c0003f66:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003f69:	85 f6                	test   esi,esi
c0003f6b:	74 f2                	je     c0003f5f <f_open+0x20b>
c0003f6d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003f77:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003f7b:	31 c0                	xor    eax,eax
c0003f7d:	c1 e5 09             	shl    ebp,0x9
c0003f80:	85 c0                	test   eax,eax
c0003f82:	75 23                	jne    c0003fa7 <f_open+0x253>
c0003f84:	39 ee                	cmp    esi,ebp
c0003f86:	76 1f                	jbe    c0003fa7 <f_open+0x253>
c0003f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f8a:	e8 76 f3 ff ff       	call   c0003305 <get_fat.isra.2>
c0003f8f:	89 c2                	mov    edx,eax
c0003f91:	b8 02 00 00 00       	mov    eax,0x2
c0003f96:	83 fa 01             	cmp    edx,0x1
c0003f99:	76 08                	jbe    c0003fa3 <f_open+0x24f>
c0003f9b:	31 c0                	xor    eax,eax
c0003f9d:	83 fa ff             	cmp    edx,0xffffffff
c0003fa0:	0f 94 c0             	sete   al
c0003fa3:	29 ee                	sub    esi,ebp
c0003fa5:	eb d9                	jmp    c0003f80 <f_open+0x22c>
c0003fa7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003faa:	85 c0                	test   eax,eax
c0003fac:	75 40                	jne    c0003fee <f_open+0x29a>
c0003fae:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003fb4:	74 a9                	je     c0003f5f <f_open+0x20b>
c0003fb6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003fba:	89 e8                	mov    eax,ebp
c0003fbc:	e8 58 e1 ff ff       	call   c0002119 <clst2sect>
c0003fc1:	89 c2                	mov    edx,eax
c0003fc3:	b8 02 00 00 00       	mov    eax,0x2
c0003fc8:	85 d2                	test   edx,edx
c0003fca:	74 22                	je     c0003fee <f_open+0x29a>
c0003fcc:	c1 ee 09             	shr    esi,0x9
c0003fcf:	8d 04 16             	lea    eax,[esi+edx*1]
c0003fd2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fd5:	6a 01                	push   0x1
c0003fd7:	50                   	push   eax
c0003fd8:	57                   	push   edi
c0003fd9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003fdd:	50                   	push   eax
c0003fde:	e8 95 de ff ff       	call   c0001e78 <disk_read>
c0003fe3:	83 c4 10             	add    esp,0x10
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 95 c0             	setne  al
c0003feb:	0f b6 c0             	movzx  eax,al
c0003fee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ff2:	83 ec 0c             	sub    esp,0xc
c0003ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003ff9:	e8 22 1d 00 00       	call   c0005d20 <ff_memfree>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004005:	85 c0                	test   eax,eax
c0004007:	74 06                	je     c000400f <f_open+0x2bb>
c0004009:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000400f:	83 c4 5c             	add    esp,0x5c
c0004012:	5b                   	pop    ebx
c0004013:	5e                   	pop    esi
c0004014:	5f                   	pop    edi
c0004015:	5d                   	pop    ebp
c0004016:	c3                   	ret    

c0004017 <f_read>:
c0004017:	55                   	push   ebp
c0004018:	57                   	push   edi
c0004019:	56                   	push   esi
c000401a:	53                   	push   ebx
c000401b:	83 ec 2c             	sub    esp,0x2c
c000401e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004022:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004026:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000402a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000402e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004034:	89 d8                	mov    eax,ebx
c0004036:	e8 44 e3 ff ff       	call   c000237f <validate>
c000403b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000403f:	85 c0                	test   eax,eax
c0004041:	0f 85 a5 01 00 00    	jne    c00041ec <f_read+0x1d5>
c0004047:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c000404b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000404f:	85 c0                	test   eax,eax
c0004051:	0f 85 95 01 00 00    	jne    c00041ec <f_read+0x1d5>
c0004057:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000405b:	0f 84 83 01 00 00    	je     c00041e4 <f_read+0x1cd>
c0004061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004064:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004067:	39 f8                	cmp    eax,edi
c0004069:	0f 46 f8             	cmovbe edi,eax
c000406c:	85 ff                	test   edi,edi
c000406e:	0f 84 78 01 00 00    	je     c00041ec <f_read+0x1d5>
c0004074:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004077:	a9 ff 01 00 00       	test   eax,0x1ff
c000407c:	0f 85 2b 01 00 00    	jne    c00041ad <f_read+0x196>
c0004082:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004086:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000408a:	89 c2                	mov    edx,eax
c000408c:	c1 ea 09             	shr    edx,0x9
c000408f:	4d                   	dec    ebp
c0004090:	21 d5                	and    ebp,edx
c0004092:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004096:	75 42                	jne    c00040da <f_read+0xc3>
c0004098:	85 c0                	test   eax,eax
c000409a:	75 05                	jne    c00040a1 <f_read+0x8a>
c000409c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000409f:	eb 0a                	jmp    c00040ab <f_read+0x94>
c00040a1:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040a6:	e8 5a f2 ff ff       	call   c0003305 <get_fat.isra.2>
c00040ab:	83 f8 01             	cmp    eax,0x1
c00040ae:	77 11                	ja     c00040c1 <f_read+0xaa>
c00040b0:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00040b4:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00040bc:	e9 2b 01 00 00       	jmp    c00041ec <f_read+0x1d5>
c00040c1:	83 f8 ff             	cmp    eax,0xffffffff
c00040c4:	75 11                	jne    c00040d7 <f_read+0xc0>
c00040c6:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00040ca:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00040d2:	e9 15 01 00 00       	jmp    c00041ec <f_read+0x1d5>
c00040d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00040da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00040de:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040e5:	89 c8                	mov    eax,ecx
c00040e7:	e8 2d e0 ff ff       	call   c0002119 <clst2sect>
c00040ec:	85 c0                	test   eax,eax
c00040ee:	74 c0                	je     c00040b0 <f_read+0x99>
c00040f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00040f4:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c00040fa:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00040fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004101:	76 58                	jbe    c000415b <f_read+0x144>
c0004103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004107:	89 fe                	mov    esi,edi
c0004109:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000410d:	c1 ee 09             	shr    esi,0x9
c0004110:	01 f2                	add    edx,esi
c0004112:	39 c2                	cmp    edx,eax
c0004114:	76 06                	jbe    c000411c <f_read+0x105>
c0004116:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000411a:	89 c6                	mov    esi,eax
c000411c:	56                   	push   esi
c000411d:	55                   	push   ebp
c000411e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004122:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004126:	50                   	push   eax
c0004127:	e8 4c dd ff ff       	call   c0001e78 <disk_read>
c000412c:	83 c4 10             	add    esp,0x10
c000412f:	85 c0                	test   eax,eax
c0004131:	75 93                	jne    c00040c6 <f_read+0xaf>
c0004133:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004137:	74 1d                	je     c0004156 <f_read+0x13f>
c0004139:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000413c:	29 e8                	sub    eax,ebp
c000413e:	39 f0                	cmp    eax,esi
c0004140:	73 14                	jae    c0004156 <f_read+0x13f>
c0004142:	c1 e0 09             	shl    eax,0x9
c0004145:	b9 00 02 00 00       	mov    ecx,0x200
c000414a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000414e:	8d 53 28             	lea    edx,[ebx+0x28]
c0004151:	e8 99 dd ff ff       	call   c0001eef <mem_cpy>
c0004156:	c1 e6 09             	shl    esi,0x9
c0004159:	eb 75                	jmp    c00041d0 <f_read+0x1b9>
c000415b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000415e:	39 e8                	cmp    eax,ebp
c0004160:	74 48                	je     c00041aa <f_read+0x193>
c0004162:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004166:	8d 73 28             	lea    esi,[ebx+0x28]
c0004169:	74 22                	je     c000418d <f_read+0x176>
c000416b:	6a 01                	push   0x1
c000416d:	50                   	push   eax
c000416e:	56                   	push   esi
c000416f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004173:	50                   	push   eax
c0004174:	e8 15 dd ff ff       	call   c0001e8e <disk_write>
c0004179:	83 c4 10             	add    esp,0x10
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 42 ff ff ff    	jne    c00040c6 <f_read+0xaf>
c0004184:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004187:	83 e0 7f             	and    eax,0x7f
c000418a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000418d:	6a 01                	push   0x1
c000418f:	55                   	push   ebp
c0004190:	56                   	push   esi
c0004191:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004195:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004199:	50                   	push   eax
c000419a:	e8 d9 dc ff ff       	call   c0001e78 <disk_read>
c000419f:	83 c4 10             	add    esp,0x10
c00041a2:	85 c0                	test   eax,eax
c00041a4:	0f 85 1c ff ff ff    	jne    c00040c6 <f_read+0xaf>
c00041aa:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00041ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041b0:	be 00 02 00 00       	mov    esi,0x200
c00041b5:	25 ff 01 00 00       	and    eax,0x1ff
c00041ba:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00041be:	29 c6                	sub    esi,eax
c00041c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00041c4:	39 f7                	cmp    edi,esi
c00041c6:	0f 46 f7             	cmovbe esi,edi
c00041c9:	89 f1                	mov    ecx,esi
c00041cb:	e8 1f dd ff ff       	call   c0001eef <mem_cpy>
c00041d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041d4:	29 f7                	sub    edi,esi
c00041d6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041da:	01 30                	add    DWORD PTR [eax],esi
c00041dc:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00041df:	e9 88 fe ff ff       	jmp    c000406c <f_read+0x55>
c00041e4:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c00041ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00041f0:	83 c4 2c             	add    esp,0x2c
c00041f3:	5b                   	pop    ebx
c00041f4:	5e                   	pop    esi
c00041f5:	5f                   	pop    edi
c00041f6:	5d                   	pop    ebp
c00041f7:	c3                   	ret    

c00041f8 <f_write>:
c00041f8:	55                   	push   ebp
c00041f9:	57                   	push   edi
c00041fa:	56                   	push   esi
c00041fb:	53                   	push   ebx
c00041fc:	83 ec 2c             	sub    esp,0x2c
c00041ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004203:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004207:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000420b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004211:	89 d8                	mov    eax,ebx
c0004213:	e8 67 e1 ff ff       	call   c000237f <validate>
c0004218:	85 c0                	test   eax,eax
c000421a:	89 c7                	mov    edi,eax
c000421c:	0f 85 13 02 00 00    	jne    c0004435 <f_write+0x23d>
c0004222:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004226:	85 ff                	test   edi,edi
c0004228:	0f 85 07 02 00 00    	jne    c0004435 <f_write+0x23d>
c000422e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004232:	0f 84 f8 01 00 00    	je     c0004430 <f_write+0x238>
c0004238:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000423b:	89 c1                	mov    ecx,eax
c000423d:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0004241:	0f 83 ed 00 00 00    	jae    c0004334 <f_write+0x13c>
c0004247:	f7 d0                	not    eax
c0004249:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000424d:	e9 e2 00 00 00       	jmp    c0004334 <f_write+0x13c>
c0004252:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004255:	a9 ff 01 00 00       	test   eax,0x1ff
c000425a:	0f 85 9b 01 00 00    	jne    c00043fb <f_write+0x203>
c0004260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004264:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004268:	89 c2                	mov    edx,eax
c000426a:	c1 ea 09             	shr    edx,0x9
c000426d:	4d                   	dec    ebp
c000426e:	21 d5                	and    ebp,edx
c0004270:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004274:	0f 84 c7 00 00 00    	je     c0004341 <f_write+0x149>
c000427a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000427e:	0f 85 23 01 00 00    	jne    c00043a7 <f_write+0x1af>
c0004284:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004288:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000428b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428f:	89 c8                	mov    eax,ecx
c0004291:	e8 83 de ff ff       	call   c0002119 <clst2sect>
c0004296:	85 c0                	test   eax,eax
c0004298:	0f 84 d3 00 00 00    	je     c0004371 <f_write+0x179>
c000429e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00042a2:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00042aa:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00042ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b1:	0f 86 1c 01 00 00    	jbe    c00043d3 <f_write+0x1db>
c00042b7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00042bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042bf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00042c3:	c1 ee 09             	shr    esi,0x9
c00042c6:	01 f2                	add    edx,esi
c00042c8:	39 c2                	cmp    edx,eax
c00042ca:	76 06                	jbe    c00042d2 <f_write+0xda>
c00042cc:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	56                   	push   esi
c00042d3:	55                   	push   ebp
c00042d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00042d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 ac db ff ff       	call   c0001e8e <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	0f 85 97 00 00 00    	jne    c0004384 <f_write+0x18c>
c00042ed:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00042f0:	29 ea                	sub    edx,ebp
c00042f2:	39 f2                	cmp    edx,esi
c00042f4:	73 1d                	jae    c0004313 <f_write+0x11b>
c00042f6:	c1 e2 09             	shl    edx,0x9
c00042f9:	b9 00 02 00 00       	mov    ecx,0x200
c00042fe:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004302:	8d 43 28             	lea    eax,[ebx+0x28]
c0004305:	e8 e5 db ff ff       	call   c0001eef <mem_cpy>
c000430a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000430d:	83 e0 7f             	and    eax,0x7f
c0004310:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004313:	c1 e6 09             	shl    esi,0x9
c0004316:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000431a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000431e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004322:	01 30                	add    DWORD PTR [eax],esi
c0004324:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004327:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000432a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000432d:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004331:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004334:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004339:	0f 85 13 ff ff ff    	jne    c0004252 <f_write+0x5a>
c000433f:	eb 1d                	jmp    c000435e <f_write+0x166>
c0004341:	85 c0                	test   eax,eax
c0004343:	75 0b                	jne    c0004350 <f_write+0x158>
c0004345:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004348:	31 d2                	xor    edx,edx
c000434a:	85 c0                	test   eax,eax
c000434c:	75 1e                	jne    c000436c <f_write+0x174>
c000434e:	eb 03                	jmp    c0004353 <f_write+0x15b>
c0004350:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004353:	89 d8                	mov    eax,ebx
c0004355:	e8 78 f1 ff ff       	call   c00034d2 <create_chain>
c000435a:	85 c0                	test   eax,eax
c000435c:	75 0e                	jne    c000436c <f_write+0x174>
c000435e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004361:	83 c8 40             	or     eax,0x40
c0004364:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004367:	e9 c9 00 00 00       	jmp    c0004435 <f_write+0x23d>
c000436c:	83 f8 01             	cmp    eax,0x1
c000436f:	75 0e                	jne    c000437f <f_write+0x187>
c0004371:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004375:	bf 02 00 00 00       	mov    edi,0x2
c000437a:	e9 b6 00 00 00       	jmp    c0004435 <f_write+0x23d>
c000437f:	83 f8 ff             	cmp    eax,0xffffffff
c0004382:	75 0e                	jne    c0004392 <f_write+0x19a>
c0004384:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004388:	bf 01 00 00 00       	mov    edi,0x1
c000438d:	e9 a3 00 00 00       	jmp    c0004435 <f_write+0x23d>
c0004392:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004396:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004399:	0f 85 db fe ff ff    	jne    c000427a <f_write+0x82>
c000439f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043a2:	e9 d3 fe ff ff       	jmp    c000427a <f_write+0x82>
c00043a7:	6a 01                	push   0x1
c00043a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043ac:	8d 43 28             	lea    eax,[ebx+0x28]
c00043af:	50                   	push   eax
c00043b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00043b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043b8:	50                   	push   eax
c00043b9:	e8 d0 da ff ff       	call   c0001e8e <disk_write>
c00043be:	83 c4 10             	add    esp,0x10
c00043c1:	85 c0                	test   eax,eax
c00043c3:	75 bf                	jne    c0004384 <f_write+0x18c>
c00043c5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043c8:	83 e0 7f             	and    eax,0x7f
c00043cb:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043ce:	e9 b1 fe ff ff       	jmp    c0004284 <f_write+0x8c>
c00043d3:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00043d6:	74 20                	je     c00043f8 <f_write+0x200>
c00043d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00043db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00043de:	76 18                	jbe    c00043f8 <f_write+0x200>
c00043e0:	6a 01                	push   0x1
c00043e2:	55                   	push   ebp
c00043e3:	8d 43 28             	lea    eax,[ebx+0x28]
c00043e6:	50                   	push   eax
c00043e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043eb:	50                   	push   eax
c00043ec:	e8 87 da ff ff       	call   c0001e78 <disk_read>
c00043f1:	83 c4 10             	add    esp,0x10
c00043f4:	85 c0                	test   eax,eax
c00043f6:	75 8c                	jne    c0004384 <f_write+0x18c>
c00043f8:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00043fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00043fe:	be 00 02 00 00       	mov    esi,0x200
c0004403:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004407:	25 ff 01 00 00       	and    eax,0x1ff
c000440c:	29 c6                	sub    esi,eax
c000440e:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0004412:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004416:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c000441b:	89 f1                	mov    ecx,esi
c000441d:	e8 cd da ff ff       	call   c0001eef <mem_cpy>
c0004422:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004425:	83 c8 80             	or     eax,0xffffff80
c0004428:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000442b:	e9 e6 fe ff ff       	jmp    c0004316 <f_write+0x11e>
c0004430:	bf 07 00 00 00       	mov    edi,0x7
c0004435:	83 c4 2c             	add    esp,0x2c
c0004438:	89 f8                	mov    eax,edi
c000443a:	5b                   	pop    ebx
c000443b:	5e                   	pop    esi
c000443c:	5f                   	pop    edi
c000443d:	5d                   	pop    ebp
c000443e:	c3                   	ret    

c000443f <f_sync>:
c000443f:	56                   	push   esi
c0004440:	53                   	push   ebx
c0004441:	83 ec 14             	sub    esp,0x14
c0004444:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004448:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000444c:	89 d8                	mov    eax,ebx
c000444e:	e8 2c df ff ff       	call   c000237f <validate>
c0004453:	85 c0                	test   eax,eax
c0004455:	0f 85 a3 00 00 00    	jne    c00044fe <f_sync+0xbf>
c000445b:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000445e:	f6 c2 40             	test   dl,0x40
c0004461:	0f 84 97 00 00 00    	je     c00044fe <f_sync+0xbf>
c0004467:	80 e2 80             	and    dl,0x80
c000446a:	74 2e                	je     c000449a <f_sync+0x5b>
c000446c:	6a 01                	push   0x1
c000446e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004471:	8d 43 28             	lea    eax,[ebx+0x28]
c0004474:	50                   	push   eax
c0004475:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004479:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000447d:	50                   	push   eax
c000447e:	e8 0b da ff ff       	call   c0001e8e <disk_write>
c0004483:	83 c4 10             	add    esp,0x10
c0004486:	89 c2                	mov    edx,eax
c0004488:	b8 01 00 00 00       	mov    eax,0x1
c000448d:	85 d2                	test   edx,edx
c000448f:	75 6d                	jne    c00044fe <f_sync+0xbf>
c0004491:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004494:	83 e0 7f             	and    eax,0x7f
c0004497:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000449a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000449d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044a1:	e8 82 df ff ff       	call   c0002428 <move_window>
c00044a6:	85 c0                	test   eax,eax
c00044a8:	75 54                	jne    c00044fe <f_sync+0xbf>
c00044aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00044ad:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00044b0:	89 f2                	mov    edx,esi
c00044b2:	83 c8 20             	or     eax,0x20
c00044b5:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00044b8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00044bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044bd:	e8 1b ee ff ff       	call   c00032dd <st_clust.isra.1>
c00044c2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00044c5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00044c8:	e8 1f da ff ff       	call   c0001eec <st_dword>
c00044cd:	8d 46 16             	lea    eax,[esi+0x16]
c00044d0:	ba 00 00 21 50       	mov    edx,0x50210000
c00044d5:	e8 12 da ff ff       	call   c0001eec <st_dword>
c00044da:	8d 46 12             	lea    eax,[esi+0x12]
c00044dd:	31 d2                	xor    edx,edx
c00044df:	e8 04 da ff ff       	call   c0001ee8 <st_word>
c00044e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044e8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00044ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044f0:	e8 68 e9 ff ff       	call   c0002e5d <sync_fs>
c00044f5:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00044f8:	83 e2 bf             	and    edx,0xffffffbf
c00044fb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00044fe:	83 c4 14             	add    esp,0x14
c0004501:	5b                   	pop    ebx
c0004502:	5e                   	pop    esi
c0004503:	c3                   	ret    

c0004504 <f_close>:
c0004504:	53                   	push   ebx
c0004505:	83 ec 24             	sub    esp,0x24
c0004508:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000450c:	53                   	push   ebx
c000450d:	e8 2d ff ff ff       	call   c000443f <f_sync>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	85 c0                	test   eax,eax
c0004517:	75 15                	jne    c000452e <f_close+0x2a>
c0004519:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000451d:	89 d8                	mov    eax,ebx
c000451f:	e8 5b de ff ff       	call   c000237f <validate>
c0004524:	85 c0                	test   eax,eax
c0004526:	75 06                	jne    c000452e <f_close+0x2a>
c0004528:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000452e:	83 c4 18             	add    esp,0x18
c0004531:	5b                   	pop    ebx
c0004532:	c3                   	ret    

c0004533 <f_lseek>:
c0004533:	55                   	push   ebp
c0004534:	57                   	push   edi
c0004535:	56                   	push   esi
c0004536:	53                   	push   ebx
c0004537:	83 ec 2c             	sub    esp,0x2c
c000453a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000453e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004542:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004546:	89 d8                	mov    eax,ebx
c0004548:	e8 32 de ff ff       	call   c000237f <validate>
c000454d:	85 c0                	test   eax,eax
c000454f:	89 c5                	mov    ebp,eax
c0004551:	0f 85 82 01 00 00    	jne    c00046d9 <f_lseek+0x1a6>
c0004557:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000455b:	85 ed                	test   ebp,ebp
c000455d:	0f 85 76 01 00 00    	jne    c00046d9 <f_lseek+0x1a6>
c0004563:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004566:	39 f0                	cmp    eax,esi
c0004568:	73 07                	jae    c0004571 <f_lseek+0x3e>
c000456a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000456e:	0f 44 f0             	cmove  esi,eax
c0004571:	85 f6                	test   esi,esi
c0004573:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004576:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000457d:	75 07                	jne    c0004586 <f_lseek+0x53>
c000457f:	31 f6                	xor    esi,esi
c0004581:	e9 e2 00 00 00       	jmp    c0004668 <f_lseek+0x135>
c0004586:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000458a:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000458e:	c1 e7 09             	shl    edi,0x9
c0004591:	85 c9                	test   ecx,ecx
c0004593:	74 28                	je     c00045bd <f_lseek+0x8a>
c0004595:	31 d2                	xor    edx,edx
c0004597:	49                   	dec    ecx
c0004598:	8d 46 ff             	lea    eax,[esi-0x1]
c000459b:	f7 f7                	div    edi
c000459d:	31 d2                	xor    edx,edx
c000459f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045a3:	89 c8                	mov    eax,ecx
c00045a5:	f7 f7                	div    edi
c00045a7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00045ab:	72 10                	jb     c00045bd <f_lseek+0x8a>
c00045ad:	89 f8                	mov    eax,edi
c00045af:	f7 d8                	neg    eax
c00045b1:	21 c1                	and    ecx,eax
c00045b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00045b6:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00045b9:	29 ce                	sub    esi,ecx
c00045bb:	eb 3c                	jmp    c00045f9 <f_lseek+0xc6>
c00045bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045c0:	85 c0                	test   eax,eax
c00045c2:	75 32                	jne    c00045f6 <f_lseek+0xc3>
c00045c4:	31 d2                	xor    edx,edx
c00045c6:	89 d8                	mov    eax,ebx
c00045c8:	e8 05 ef ff ff       	call   c00034d2 <create_chain>
c00045cd:	83 f8 01             	cmp    eax,0x1
c00045d0:	75 0e                	jne    c00045e0 <f_lseek+0xad>
c00045d2:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045d6:	bd 02 00 00 00       	mov    ebp,0x2
c00045db:	e9 f9 00 00 00       	jmp    c00046d9 <f_lseek+0x1a6>
c00045e0:	83 f8 ff             	cmp    eax,0xffffffff
c00045e3:	75 0e                	jne    c00045f3 <f_lseek+0xc0>
c00045e5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045e9:	bd 01 00 00 00       	mov    ebp,0x1
c00045ee:	e9 e6 00 00 00       	jmp    c00046d9 <f_lseek+0x1a6>
c00045f3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00045f6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00045f9:	85 c0                	test   eax,eax
c00045fb:	74 82                	je     c000457f <f_lseek+0x4c>
c00045fd:	39 fe                	cmp    esi,edi
c00045ff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004602:	76 3d                	jbe    c0004641 <f_lseek+0x10e>
c0004604:	01 fa                	add    edx,edi
c0004606:	29 fe                	sub    esi,edi
c0004608:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000460c:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000460f:	89 c2                	mov    edx,eax
c0004611:	74 0d                	je     c0004620 <f_lseek+0xed>
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 b8 ee ff ff       	call   c00034d2 <create_chain>
c000461a:	85 c0                	test   eax,eax
c000461c:	75 09                	jne    c0004627 <f_lseek+0xf4>
c000461e:	eb 1f                	jmp    c000463f <f_lseek+0x10c>
c0004620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004622:	e8 de ec ff ff       	call   c0003305 <get_fat.isra.2>
c0004627:	83 f8 ff             	cmp    eax,0xffffffff
c000462a:	74 b9                	je     c00045e5 <f_lseek+0xb2>
c000462c:	83 f8 01             	cmp    eax,0x1
c000462f:	76 a1                	jbe    c00045d2 <f_lseek+0x9f>
c0004631:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004635:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004638:	76 98                	jbe    c00045d2 <f_lseek+0x9f>
c000463a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000463d:	eb be                	jmp    c00045fd <f_lseek+0xca>
c000463f:	31 f6                	xor    esi,esi
c0004641:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004644:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000464a:	0f 84 2f ff ff ff    	je     c000457f <f_lseek+0x4c>
c0004650:	89 c2                	mov    edx,eax
c0004652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004656:	e8 be da ff ff       	call   c0002119 <clst2sect>
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 84 6f ff ff ff    	je     c00045d2 <f_lseek+0x9f>
c0004663:	c1 ee 09             	shr    esi,0x9
c0004666:	01 c6                	add    esi,eax
c0004668:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000466e:	76 0c                	jbe    c000467c <f_lseek+0x149>
c0004670:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004673:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004676:	83 ca 40             	or     edx,0x40
c0004679:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000467c:	a9 ff 01 00 00       	test   eax,0x1ff
c0004681:	74 56                	je     c00046d9 <f_lseek+0x1a6>
c0004683:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004686:	39 f0                	cmp    eax,esi
c0004688:	74 4f                	je     c00046d9 <f_lseek+0x1a6>
c000468a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000468e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004691:	74 26                	je     c00046b9 <f_lseek+0x186>
c0004693:	6a 01                	push   0x1
c0004695:	50                   	push   eax
c0004696:	57                   	push   edi
c0004697:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000469b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000469f:	50                   	push   eax
c00046a0:	e8 e9 d7 ff ff       	call   c0001e8e <disk_write>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	0f 85 35 ff ff ff    	jne    c00045e5 <f_lseek+0xb2>
c00046b0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046b3:	83 e0 7f             	and    eax,0x7f
c00046b6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046b9:	6a 01                	push   0x1
c00046bb:	56                   	push   esi
c00046bc:	57                   	push   edi
c00046bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046c5:	50                   	push   eax
c00046c6:	e8 ad d7 ff ff       	call   c0001e78 <disk_read>
c00046cb:	83 c4 10             	add    esp,0x10
c00046ce:	85 c0                	test   eax,eax
c00046d0:	0f 85 0f ff ff ff    	jne    c00045e5 <f_lseek+0xb2>
c00046d6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00046d9:	83 c4 2c             	add    esp,0x2c
c00046dc:	89 e8                	mov    eax,ebp
c00046de:	5b                   	pop    ebx
c00046df:	5e                   	pop    esi
c00046e0:	5f                   	pop    edi
c00046e1:	5d                   	pop    ebp
c00046e2:	c3                   	ret    

c00046e3 <f_opendir>:
c00046e3:	56                   	push   esi
c00046e4:	b8 09 00 00 00       	mov    eax,0x9
c00046e9:	53                   	push   ebx
c00046ea:	83 ec 24             	sub    esp,0x24
c00046ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00046f1:	85 db                	test   ebx,ebx
c00046f3:	0f 84 af 00 00 00    	je     c00047a8 <f_opendir+0xc5>
c00046f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046fd:	31 c9                	xor    ecx,ecx
c00046ff:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004703:	e8 7d de ff ff       	call   c0002585 <mount_volume>
c0004708:	85 c0                	test   eax,eax
c000470a:	0f 85 92 00 00 00    	jne    c00047a2 <f_opendir+0xbf>
c0004710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004714:	83 ec 0c             	sub    esp,0xc
c0004717:	89 03                	mov    DWORD PTR [ebx],eax
c0004719:	68 00 02 00 00       	push   0x200
c000471e:	e8 e5 15 00 00       	call   c0005d08 <ff_memalloc>
c0004723:	83 c4 10             	add    esp,0x10
c0004726:	89 c6                	mov    esi,eax
c0004728:	b8 11 00 00 00       	mov    eax,0x11
c000472d:	85 f6                	test   esi,esi
c000472f:	74 77                	je     c00047a8 <f_opendir+0xc5>
c0004731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004735:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004739:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000473c:	89 d8                	mov    eax,ebx
c000473e:	e8 8a f3 ff ff       	call   c0003acd <follow_path>
c0004743:	85 c0                	test   eax,eax
c0004745:	75 37                	jne    c000477e <f_opendir+0x9b>
c0004747:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000474b:	75 1c                	jne    c0004769 <f_opendir+0x86>
c000474d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004751:	b8 05 00 00 00       	mov    eax,0x5
c0004756:	74 26                	je     c000477e <f_opendir+0x9b>
c0004758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000475f:	8a 00                	mov    al,BYTE PTR [eax]
c0004761:	e8 4e eb ff ff       	call   c00032b4 <ld_clust.isra.0>
c0004766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004769:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000476d:	31 d2                	xor    edx,edx
c000476f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004773:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004777:	89 d8                	mov    eax,ebx
c0004779:	e8 8c ec ff ff       	call   c000340a <dir_sdi>
c000477e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004782:	83 ec 0c             	sub    esp,0xc
c0004785:	56                   	push   esi
c0004786:	e8 95 15 00 00       	call   c0005d20 <ff_memfree>
c000478b:	83 c4 10             	add    esp,0x10
c000478e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004792:	83 f8 04             	cmp    eax,0x4
c0004795:	74 06                	je     c000479d <f_opendir+0xba>
c0004797:	85 c0                	test   eax,eax
c0004799:	74 0d                	je     c00047a8 <f_opendir+0xc5>
c000479b:	eb 05                	jmp    c00047a2 <f_opendir+0xbf>
c000479d:	b8 05 00 00 00       	mov    eax,0x5
c00047a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047a8:	83 c4 24             	add    esp,0x24
c00047ab:	5b                   	pop    ebx
c00047ac:	5e                   	pop    esi
c00047ad:	c3                   	ret    

c00047ae <f_closedir>:
c00047ae:	53                   	push   ebx
c00047af:	83 ec 18             	sub    esp,0x18
c00047b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047b6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047ba:	89 d8                	mov    eax,ebx
c00047bc:	e8 be db ff ff       	call   c000237f <validate>
c00047c1:	85 c0                	test   eax,eax
c00047c3:	75 06                	jne    c00047cb <f_closedir+0x1d>
c00047c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047cb:	83 c4 18             	add    esp,0x18
c00047ce:	5b                   	pop    ebx
c00047cf:	c3                   	ret    

c00047d0 <f_readdir>:
c00047d0:	57                   	push   edi
c00047d1:	56                   	push   esi
c00047d2:	53                   	push   ebx
c00047d3:	83 ec 20             	sub    esp,0x20
c00047d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047de:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00047e2:	89 d8                	mov    eax,ebx
c00047e4:	e8 96 db ff ff       	call   c000237f <validate>
c00047e9:	85 c0                	test   eax,eax
c00047eb:	75 6e                	jne    c000485b <f_readdir+0x8b>
c00047ed:	85 ff                	test   edi,edi
c00047ef:	75 0b                	jne    c00047fc <f_readdir+0x2c>
c00047f1:	31 d2                	xor    edx,edx
c00047f3:	89 d8                	mov    eax,ebx
c00047f5:	e8 10 ec ff ff       	call   c000340a <dir_sdi>
c00047fa:	eb 5f                	jmp    c000485b <f_readdir+0x8b>
c00047fc:	83 ec 0c             	sub    esp,0xc
c00047ff:	68 00 02 00 00       	push   0x200
c0004804:	e8 ff 14 00 00       	call   c0005d08 <ff_memalloc>
c0004809:	83 c4 10             	add    esp,0x10
c000480c:	89 c6                	mov    esi,eax
c000480e:	b8 11 00 00 00       	mov    eax,0x11
c0004813:	85 f6                	test   esi,esi
c0004815:	74 44                	je     c000485b <f_readdir+0x8b>
c0004817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000481b:	31 d2                	xor    edx,edx
c000481d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004820:	89 d8                	mov    eax,ebx
c0004822:	e8 dd ef ff ff       	call   c0003804 <dir_read>
c0004827:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000482c:	75 19                	jne    c0004847 <f_readdir+0x77>
c000482e:	89 fa                	mov    edx,edi
c0004830:	89 d8                	mov    eax,ebx
c0004832:	e8 7c e8 ff ff       	call   c00030b3 <get_fileinfo>
c0004837:	31 d2                	xor    edx,edx
c0004839:	89 d8                	mov    eax,ebx
c000483b:	e8 5a ee ff ff       	call   c000369a <dir_next>
c0004840:	83 f8 04             	cmp    eax,0x4
c0004843:	75 02                	jne    c0004847 <f_readdir+0x77>
c0004845:	31 c0                	xor    eax,eax
c0004847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000484b:	83 ec 0c             	sub    esp,0xc
c000484e:	56                   	push   esi
c000484f:	e8 cc 14 00 00       	call   c0005d20 <ff_memfree>
c0004854:	83 c4 10             	add    esp,0x10
c0004857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000485b:	83 c4 20             	add    esp,0x20
c000485e:	5b                   	pop    ebx
c000485f:	5e                   	pop    esi
c0004860:	5f                   	pop    edi
c0004861:	c3                   	ret    

c0004862 <f_stat>:
c0004862:	57                   	push   edi
c0004863:	31 c9                	xor    ecx,ecx
c0004865:	56                   	push   esi
c0004866:	53                   	push   ebx
c0004867:	83 ec 30             	sub    esp,0x30
c000486a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000486e:	89 e2                	mov    edx,esp
c0004870:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004874:	e8 0c dd ff ff       	call   c0002585 <mount_volume>
c0004879:	85 c0                	test   eax,eax
c000487b:	89 c3                	mov    ebx,eax
c000487d:	75 59                	jne    c00048d8 <f_stat+0x76>
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	bb 11 00 00 00       	mov    ebx,0x11
c0004887:	68 00 02 00 00       	push   0x200
c000488c:	e8 77 14 00 00       	call   c0005d08 <ff_memalloc>
c0004891:	83 c4 10             	add    esp,0x10
c0004894:	85 c0                	test   eax,eax
c0004896:	89 c6                	mov    esi,eax
c0004898:	74 3e                	je     c00048d8 <f_stat+0x76>
c000489a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00048a1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048a4:	89 e0                	mov    eax,esp
c00048a6:	e8 22 f2 ff ff       	call   c0003acd <follow_path>
c00048ab:	85 c0                	test   eax,eax
c00048ad:	89 c3                	mov    ebx,eax
c00048af:	75 1b                	jne    c00048cc <f_stat+0x6a>
c00048b1:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00048b6:	75 0f                	jne    c00048c7 <f_stat+0x65>
c00048b8:	85 ff                	test   edi,edi
c00048ba:	74 10                	je     c00048cc <f_stat+0x6a>
c00048bc:	89 fa                	mov    edx,edi
c00048be:	89 e0                	mov    eax,esp
c00048c0:	e8 ee e7 ff ff       	call   c00030b3 <get_fileinfo>
c00048c5:	eb 05                	jmp    c00048cc <f_stat+0x6a>
c00048c7:	bb 06 00 00 00       	mov    ebx,0x6
c00048cc:	83 ec 0c             	sub    esp,0xc
c00048cf:	56                   	push   esi
c00048d0:	e8 4b 14 00 00       	call   c0005d20 <ff_memfree>
c00048d5:	83 c4 10             	add    esp,0x10
c00048d8:	83 c4 30             	add    esp,0x30
c00048db:	89 d8                	mov    eax,ebx
c00048dd:	5b                   	pop    ebx
c00048de:	5e                   	pop    esi
c00048df:	5f                   	pop    edi
c00048e0:	c3                   	ret    

c00048e1 <f_getfree>:
c00048e1:	55                   	push   ebp
c00048e2:	31 c9                	xor    ecx,ecx
c00048e4:	57                   	push   edi
c00048e5:	56                   	push   esi
c00048e6:	53                   	push   ebx
c00048e7:	83 ec 2c             	sub    esp,0x2c
c00048ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048ee:	8d 44 24 40          	lea    eax,[esp+0x40]
c00048f2:	e8 8e dc ff ff       	call   c0002585 <mount_volume>
c00048f7:	85 c0                	test   eax,eax
c00048f9:	89 c6                	mov    esi,eax
c00048fb:	0f 85 df 00 00 00    	jne    c00049e0 <f_getfree+0xff>
c0004901:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004905:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004909:	89 18                	mov    DWORD PTR [eax],ebx
c000490b:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000490e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004911:	8d 57 fe             	lea    edx,[edi-0x2]
c0004914:	39 d0                	cmp    eax,edx
c0004916:	77 0b                	ja     c0004923 <f_getfree+0x42>
c0004918:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000491c:	89 01                	mov    DWORD PTR [ecx],eax
c000491e:	e9 bd 00 00 00       	jmp    c00049e0 <f_getfree+0xff>
c0004923:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004926:	75 29                	jne    c0004951 <f_getfree+0x70>
c0004928:	bf 02 00 00 00       	mov    edi,0x2
c000492d:	31 ed                	xor    ebp,ebp
c000492f:	89 fa                	mov    edx,edi
c0004931:	89 d8                	mov    eax,ebx
c0004933:	e8 cd e9 ff ff       	call   c0003305 <get_fat.isra.2>
c0004938:	83 f8 ff             	cmp    eax,0xffffffff
c000493b:	74 7d                	je     c00049ba <f_getfree+0xd9>
c000493d:	83 f8 01             	cmp    eax,0x1
c0004940:	74 7f                	je     c00049c1 <f_getfree+0xe0>
c0004942:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004946:	83 d5 00             	adc    ebp,0x0
c0004949:	47                   	inc    edi
c000494a:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c000494d:	77 e0                	ja     c000492f <f_getfree+0x4e>
c000494f:	eb 79                	jmp    c00049ca <f_getfree+0xe9>
c0004951:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004954:	31 ed                	xor    ebp,ebp
c0004956:	31 db                	xor    ebx,ebx
c0004958:	85 db                	test   ebx,ebx
c000495a:	75 18                	jne    c0004974 <f_getfree+0x93>
c000495c:	8d 42 01             	lea    eax,[edx+0x1]
c000495f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004963:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004967:	e8 bc da ff ff       	call   c0002428 <move_window>
c000496c:	85 c0                	test   eax,eax
c000496e:	75 58                	jne    c00049c8 <f_getfree+0xe7>
c0004970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004974:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004978:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000497c:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c000497f:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004983:	75 13                	jne    c0004998 <f_getfree+0xb7>
c0004985:	e8 39 d5 ff ff       	call   c0001ec3 <ld_word>
c000498a:	0f b7 c0             	movzx  eax,ax
c000498d:	83 f8 01             	cmp    eax,0x1
c0004990:	83 d5 00             	adc    ebp,0x0
c0004993:	83 c3 02             	add    ebx,0x2
c0004996:	eb 13                	jmp    c00049ab <f_getfree+0xca>
c0004998:	e8 33 d5 ff ff       	call   c0001ed0 <ld_dword>
c000499d:	25 ff ff ff 0f       	and    eax,0xfffffff
c00049a2:	83 f8 01             	cmp    eax,0x1
c00049a5:	83 d5 00             	adc    ebp,0x0
c00049a8:	83 c3 04             	add    ebx,0x4
c00049ab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00049b1:	4f                   	dec    edi
c00049b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049b6:	75 a0                	jne    c0004958 <f_getfree+0x77>
c00049b8:	eb 10                	jmp    c00049ca <f_getfree+0xe9>
c00049ba:	be 01 00 00 00       	mov    esi,0x1
c00049bf:	eb 09                	jmp    c00049ca <f_getfree+0xe9>
c00049c1:	be 02 00 00 00       	mov    esi,0x2
c00049c6:	eb 02                	jmp    c00049ca <f_getfree+0xe9>
c00049c8:	89 c6                	mov    esi,eax
c00049ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00049ce:	89 28                	mov    DWORD PTR [eax],ebp
c00049d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d4:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c00049d7:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00049da:	83 ca 01             	or     edx,0x1
c00049dd:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00049e0:	83 c4 2c             	add    esp,0x2c
c00049e3:	89 f0                	mov    eax,esi
c00049e5:	5b                   	pop    ebx
c00049e6:	5e                   	pop    esi
c00049e7:	5f                   	pop    edi
c00049e8:	5d                   	pop    ebp
c00049e9:	c3                   	ret    

c00049ea <f_truncate>:
c00049ea:	56                   	push   esi
c00049eb:	53                   	push   ebx
c00049ec:	83 ec 14             	sub    esp,0x14
c00049ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00049f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049f7:	89 d8                	mov    eax,ebx
c00049f9:	e8 81 d9 ff ff       	call   c000237f <validate>
c00049fe:	85 c0                	test   eax,eax
c0004a00:	89 c6                	mov    esi,eax
c0004a02:	0f 85 c4 00 00 00    	jne    c0004acc <f_truncate+0xe2>
c0004a08:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004a0c:	85 f6                	test   esi,esi
c0004a0e:	0f 85 b8 00 00 00    	jne    c0004acc <f_truncate+0xe2>
c0004a14:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004a18:	0f 84 a9 00 00 00    	je     c0004ac7 <f_truncate+0xdd>
c0004a1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a21:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004a24:	0f 83 a2 00 00 00    	jae    c0004acc <f_truncate+0xe2>
c0004a2a:	85 c0                	test   eax,eax
c0004a2c:	75 15                	jne    c0004a43 <f_truncate+0x59>
c0004a2e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a31:	31 c9                	xor    ecx,ecx
c0004a33:	89 d8                	mov    eax,ebx
c0004a35:	e8 d2 eb ff ff       	call   c000360c <remove_chain>
c0004a3a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a41:	eb 35                	jmp    c0004a78 <f_truncate+0x8e>
c0004a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a48:	e8 b8 e8 ff ff       	call   c0003305 <get_fat.isra.2>
c0004a4d:	89 c2                	mov    edx,eax
c0004a4f:	b8 01 00 00 00       	mov    eax,0x1
c0004a54:	83 fa ff             	cmp    edx,0xffffffff
c0004a57:	74 1f                	je     c0004a78 <f_truncate+0x8e>
c0004a59:	83 fa 01             	cmp    edx,0x1
c0004a5c:	b8 02 00 00 00       	mov    eax,0x2
c0004a61:	74 15                	je     c0004a78 <f_truncate+0x8e>
c0004a63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a67:	31 c0                	xor    eax,eax
c0004a69:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004a6c:	76 0a                	jbe    c0004a78 <f_truncate+0x8e>
c0004a6e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004a71:	89 d8                	mov    eax,ebx
c0004a73:	e8 94 eb ff ff       	call   c000360c <remove_chain>
c0004a78:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004a7b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004a7e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004a81:	83 ca 40             	or     edx,0x40
c0004a84:	85 c0                	test   eax,eax
c0004a86:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004a89:	75 35                	jne    c0004ac0 <f_truncate+0xd6>
c0004a8b:	80 e2 80             	and    dl,0x80
c0004a8e:	74 3c                	je     c0004acc <f_truncate+0xe2>
c0004a90:	6a 01                	push   0x1
c0004a92:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004a95:	8d 43 28             	lea    eax,[ebx+0x28]
c0004a98:	50                   	push   eax
c0004a99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a9d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004aa1:	50                   	push   eax
c0004aa2:	e8 e7 d3 ff ff       	call   c0001e8e <disk_write>
c0004aa7:	83 c4 10             	add    esp,0x10
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	75 0d                	jne    c0004abb <f_truncate+0xd1>
c0004aae:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004ab1:	31 f6                	xor    esi,esi
c0004ab3:	83 e0 7f             	and    eax,0x7f
c0004ab6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004ab9:	eb 11                	jmp    c0004acc <f_truncate+0xe2>
c0004abb:	b8 01 00 00 00       	mov    eax,0x1
c0004ac0:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	eb 05                	jmp    c0004acc <f_truncate+0xe2>
c0004ac7:	be 07 00 00 00       	mov    esi,0x7
c0004acc:	83 c4 14             	add    esp,0x14
c0004acf:	89 f0                	mov    eax,esi
c0004ad1:	5b                   	pop    ebx
c0004ad2:	5e                   	pop    esi
c0004ad3:	c3                   	ret    

c0004ad4 <f_unlink>:
c0004ad4:	55                   	push   ebp
c0004ad5:	b9 02 00 00 00       	mov    ecx,0x2
c0004ada:	57                   	push   edi
c0004adb:	56                   	push   esi
c0004adc:	53                   	push   ebx
c0004add:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004ae3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ae7:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004aee:	e8 92 da ff ff       	call   c0002585 <mount_volume>
c0004af3:	85 c0                	test   eax,eax
c0004af5:	0f 85 ee 00 00 00    	jne    c0004be9 <f_unlink+0x115>
c0004afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aff:	83 ec 0c             	sub    esp,0xc
c0004b02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b06:	68 00 02 00 00       	push   0x200
c0004b0b:	e8 f8 11 00 00       	call   c0005d08 <ff_memalloc>
c0004b10:	83 c4 10             	add    esp,0x10
c0004b13:	89 c3                	mov    ebx,eax
c0004b15:	b8 11 00 00 00       	mov    eax,0x11
c0004b1a:	85 db                	test   ebx,ebx
c0004b1c:	0f 84 c7 00 00 00    	je     c0004be9 <f_unlink+0x115>
c0004b22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b26:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b2d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b34:	e8 94 ef ff ff       	call   c0003acd <follow_path>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	0f 85 94 00 00 00    	jne    c0004bd5 <f_unlink+0x101>
c0004b41:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b46:	b8 06 00 00 00       	mov    eax,0x6
c0004b4b:	0f 85 84 00 00 00    	jne    c0004bd5 <f_unlink+0x101>
c0004b51:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004b56:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004b5c:	74 07                	je     c0004b65 <f_unlink+0x91>
c0004b5e:	b8 07 00 00 00       	mov    eax,0x7
c0004b63:	eb 70                	jmp    c0004bd5 <f_unlink+0x101>
c0004b65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004b69:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b6d:	8a 07                	mov    al,BYTE PTR [edi]
c0004b6f:	e8 40 e7 ff ff       	call   c00032b4 <ld_clust.isra.0>
c0004b74:	83 e5 10             	and    ebp,0x10
c0004b77:	89 c6                	mov    esi,eax
c0004b79:	75 20                	jne    c0004b9b <f_unlink+0xc7>
c0004b7b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b7f:	e8 a8 ed ff ff       	call   c000392c <dir_remove>
c0004b84:	85 c0                	test   eax,eax
c0004b86:	75 40                	jne    c0004bc8 <f_unlink+0xf4>
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	74 3c                	je     c0004bc8 <f_unlink+0xf4>
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	89 f2                	mov    edx,esi
c0004b90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b94:	e8 73 ea ff ff       	call   c000360c <remove_chain>
c0004b99:	eb 2d                	jmp    c0004bc8 <f_unlink+0xf4>
c0004b9b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004b9f:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ba3:	31 d2                	xor    edx,edx
c0004ba5:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ba9:	e8 5c e8 ff ff       	call   c000340a <dir_sdi>
c0004bae:	85 c0                	test   eax,eax
c0004bb0:	75 23                	jne    c0004bd5 <f_unlink+0x101>
c0004bb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bb6:	31 d2                	xor    edx,edx
c0004bb8:	e8 47 ec ff ff       	call   c0003804 <dir_read>
c0004bbd:	85 c0                	test   eax,eax
c0004bbf:	74 9d                	je     c0004b5e <f_unlink+0x8a>
c0004bc1:	83 f8 04             	cmp    eax,0x4
c0004bc4:	75 0f                	jne    c0004bd5 <f_unlink+0x101>
c0004bc6:	eb b3                	jmp    c0004b7b <f_unlink+0xa7>
c0004bc8:	85 c0                	test   eax,eax
c0004bca:	75 09                	jne    c0004bd5 <f_unlink+0x101>
c0004bcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd0:	e8 88 e2 ff ff       	call   c0002e5d <sync_fs>
c0004bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd9:	83 ec 0c             	sub    esp,0xc
c0004bdc:	53                   	push   ebx
c0004bdd:	e8 3e 11 00 00       	call   c0005d20 <ff_memfree>
c0004be2:	83 c4 10             	add    esp,0x10
c0004be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be9:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	5f                   	pop    edi
c0004bf2:	5d                   	pop    ebp
c0004bf3:	c3                   	ret    

c0004bf4 <f_mkdir>:
c0004bf4:	57                   	push   edi
c0004bf5:	b9 02 00 00 00       	mov    ecx,0x2
c0004bfa:	56                   	push   esi
c0004bfb:	53                   	push   ebx
c0004bfc:	83 ec 50             	sub    esp,0x50
c0004bff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c03:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c07:	e8 79 d9 ff ff       	call   c0002585 <mount_volume>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	0f 85 70 01 00 00    	jne    c0004d86 <f_mkdir+0x192>
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	83 ec 0c             	sub    esp,0xc
c0004c1d:	bb 11 00 00 00       	mov    ebx,0x11
c0004c22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c26:	68 00 02 00 00       	push   0x200
c0004c2b:	e8 d8 10 00 00       	call   c0005d08 <ff_memalloc>
c0004c30:	83 c4 10             	add    esp,0x10
c0004c33:	85 c0                	test   eax,eax
c0004c35:	89 c7                	mov    edi,eax
c0004c37:	0f 84 49 01 00 00    	je     c0004d86 <f_mkdir+0x192>
c0004c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c41:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c45:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c48:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c4c:	e8 7c ee ff ff       	call   c0003acd <follow_path>
c0004c51:	85 c0                	test   eax,eax
c0004c53:	89 c3                	mov    ebx,eax
c0004c55:	74 3e                	je     c0004c95 <f_mkdir+0xa1>
c0004c57:	83 f8 04             	cmp    eax,0x4
c0004c5a:	75 3e                	jne    c0004c9a <f_mkdir+0xa6>
c0004c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004c66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c6a:	e8 63 e8 ff ff       	call   c00034d2 <create_chain>
c0004c6f:	85 c0                	test   eax,eax
c0004c71:	89 c6                	mov    esi,eax
c0004c73:	74 0c                	je     c0004c81 <f_mkdir+0x8d>
c0004c75:	83 f8 01             	cmp    eax,0x1
c0004c78:	bb 02 00 00 00       	mov    ebx,0x2
c0004c7d:	74 07                	je     c0004c86 <f_mkdir+0x92>
c0004c7f:	eb 2a                	jmp    c0004cab <f_mkdir+0xb7>
c0004c81:	bb 07 00 00 00       	mov    ebx,0x7
c0004c86:	31 c9                	xor    ecx,ecx
c0004c88:	89 f2                	mov    edx,esi
c0004c8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c8e:	e8 79 e9 ff ff       	call   c000360c <remove_chain>
c0004c93:	eb 05                	jmp    c0004c9a <f_mkdir+0xa6>
c0004c95:	bb 08 00 00 00       	mov    ebx,0x8
c0004c9a:	83 ec 0c             	sub    esp,0xc
c0004c9d:	57                   	push   edi
c0004c9e:	e8 7d 10 00 00       	call   c0005d20 <ff_memfree>
c0004ca3:	83 c4 10             	add    esp,0x10
c0004ca6:	e9 db 00 00 00       	jmp    c0004d86 <f_mkdir+0x192>
c0004cab:	83 f8 ff             	cmp    eax,0xffffffff
c0004cae:	bb 01 00 00 00       	mov    ebx,0x1
c0004cb3:	74 d1                	je     c0004c86 <f_mkdir+0x92>
c0004cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cb9:	89 f2                	mov    edx,esi
c0004cbb:	e8 19 dd ff ff       	call   c00029d9 <dir_clear>
c0004cc0:	85 c0                	test   eax,eax
c0004cc2:	89 c3                	mov    ebx,eax
c0004cc4:	75 c0                	jne    c0004c86 <f_mkdir+0x92>
c0004cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cca:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ccf:	ba 20 00 00 00       	mov    edx,0x20
c0004cd4:	83 c0 34             	add    eax,0x34
c0004cd7:	e8 28 d2 ff ff       	call   c0001f04 <mem_set>
c0004cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ce5:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ce9:	83 c0 4a             	add    eax,0x4a
c0004cec:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004cf0:	e8 f7 d1 ff ff       	call   c0001eec <st_dword>
c0004cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf9:	89 f1                	mov    ecx,esi
c0004cfb:	8d 50 34             	lea    edx,[eax+0x34]
c0004cfe:	e8 da e5 ff ff       	call   c00032dd <st_clust.isra.1>
c0004d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d07:	b9 20 00 00 00       	mov    ecx,0x20
c0004d0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004d0f:	83 c0 54             	add    eax,0x54
c0004d12:	e8 d8 d1 ff ff       	call   c0001eef <mem_cpy>
c0004d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004d1f:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004d23:	8d 50 54             	lea    edx,[eax+0x54]
c0004d26:	e8 b2 e5 ff ff       	call   c00032dd <st_clust.isra.1>
c0004d2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d37:	e8 2e ee ff ff       	call   c0003b6a <dir_register>
c0004d3c:	85 c0                	test   eax,eax
c0004d3e:	89 c3                	mov    ebx,eax
c0004d40:	0f 85 40 ff ff ff    	jne    c0004c86 <f_mkdir+0x92>
c0004d46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d4a:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d4f:	83 c0 16             	add    eax,0x16
c0004d52:	e8 95 d1 ff ff       	call   c0001eec <st_dword>
c0004d57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004d5b:	89 f1                	mov    ecx,esi
c0004d5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d61:	e8 77 e5 ff ff       	call   c00032dd <st_clust.isra.1>
c0004d66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d7a:	e8 de e0 ff ff       	call   c0002e5d <sync_fs>
c0004d7f:	89 c3                	mov    ebx,eax
c0004d81:	e9 14 ff ff ff       	jmp    c0004c9a <f_mkdir+0xa6>
c0004d86:	83 c4 50             	add    esp,0x50
c0004d89:	89 d8                	mov    eax,ebx
c0004d8b:	5b                   	pop    ebx
c0004d8c:	5e                   	pop    esi
c0004d8d:	5f                   	pop    edi
c0004d8e:	c3                   	ret    

c0004d8f <f_rename>:
c0004d8f:	57                   	push   edi
c0004d90:	56                   	push   esi
c0004d91:	53                   	push   ebx
c0004d92:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004d98:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004d9f:	e8 8f d5 ff ff       	call   c0002333 <get_ldnumber>
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	b9 02 00 00 00       	mov    ecx,0x2
c0004dad:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004db4:	e8 cc d7 ff ff       	call   c0002585 <mount_volume>
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 7c 01 00 00    	jne    c0004f3d <f_rename+0x1ae>
c0004dc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dc5:	83 ec 0c             	sub    esp,0xc
c0004dc8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004dcc:	68 00 02 00 00       	push   0x200
c0004dd1:	e8 32 0f 00 00       	call   c0005d08 <ff_memalloc>
c0004dd6:	83 c4 10             	add    esp,0x10
c0004dd9:	89 c6                	mov    esi,eax
c0004ddb:	b8 11 00 00 00       	mov    eax,0x11
c0004de0:	85 f6                	test   esi,esi
c0004de2:	0f 84 55 01 00 00    	je     c0004f3d <f_rename+0x1ae>
c0004de8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dec:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004df3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004df6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004dfa:	e8 ce ec ff ff       	call   c0003acd <follow_path>
c0004dff:	85 c0                	test   eax,eax
c0004e01:	0f 85 22 01 00 00    	jne    c0004f29 <f_rename+0x19a>
c0004e07:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004e0b:	b8 06 00 00 00       	mov    eax,0x6
c0004e10:	80 e2 a0             	and    dl,0xa0
c0004e13:	0f 85 10 01 00 00    	jne    c0004f29 <f_rename+0x19a>
c0004e19:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e1d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e21:	b9 20 00 00 00       	mov    ecx,0x20
c0004e26:	e8 c4 d0 ff ff       	call   c0001eef <mem_cpy>
c0004e2b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e2f:	b9 30 00 00 00       	mov    ecx,0x30
c0004e34:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e38:	e8 b2 d0 ff ff       	call   c0001eef <mem_cpy>
c0004e3d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e44:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e48:	e8 80 ec ff ff       	call   c0003acd <follow_path>
c0004e4d:	85 c0                	test   eax,eax
c0004e4f:	75 20                	jne    c0004e71 <f_rename+0xe2>
c0004e51:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004e55:	b8 08 00 00 00       	mov    eax,0x8
c0004e5a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004e5e:	0f 85 c5 00 00 00    	jne    c0004f29 <f_rename+0x19a>
c0004e64:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004e68:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004e6f:	eb 03                	jmp    c0004e74 <f_rename+0xe5>
c0004e71:	83 f8 04             	cmp    eax,0x4
c0004e74:	0f 85 af 00 00 00    	jne    c0004f29 <f_rename+0x19a>
c0004e7a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e7e:	e8 e7 ec ff ff       	call   c0003b6a <dir_register>
c0004e83:	85 c0                	test   eax,eax
c0004e85:	0f 85 9e 00 00 00    	jne    c0004f29 <f_rename+0x19a>
c0004e8b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004e92:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004e96:	b9 13 00 00 00       	mov    ecx,0x13
c0004e9b:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004e9e:	e8 4c d0 ff ff       	call   c0001eef <mem_cpy>
c0004ea3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004ea7:	a8 10                	test   al,0x10
c0004ea9:	75 03                	jne    c0004eae <f_rename+0x11f>
c0004eab:	83 c8 20             	or     eax,0x20
c0004eae:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004eb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eb9:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ebd:	74 54                	je     c0004f13 <f_rename+0x184>
c0004ebf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ec3:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ec7:	74 4a                	je     c0004f13 <f_rename+0x184>
c0004ec9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ecd:	89 da                	mov    edx,ebx
c0004ecf:	8a 07                	mov    al,BYTE PTR [edi]
c0004ed1:	e8 de e3 ff ff       	call   c00032b4 <ld_clust.isra.0>
c0004ed6:	89 c2                	mov    edx,eax
c0004ed8:	89 f8                	mov    eax,edi
c0004eda:	e8 3a d2 ff ff       	call   c0002119 <clst2sect>
c0004edf:	89 c2                	mov    edx,eax
c0004ee1:	b8 02 00 00 00       	mov    eax,0x2
c0004ee6:	85 d2                	test   edx,edx
c0004ee8:	74 3f                	je     c0004f29 <f_rename+0x19a>
c0004eea:	89 f8                	mov    eax,edi
c0004eec:	e8 37 d5 ff ff       	call   c0002428 <move_window>
c0004ef1:	85 c0                	test   eax,eax
c0004ef3:	75 34                	jne    c0004f29 <f_rename+0x19a>
c0004ef5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef9:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004efd:	75 14                	jne    c0004f13 <f_rename+0x184>
c0004eff:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004f03:	8d 50 54             	lea    edx,[eax+0x54]
c0004f06:	e8 d2 e3 ff ff       	call   c00032dd <st_clust.isra.1>
c0004f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f0f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f13:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f17:	e8 10 ea ff ff       	call   c000392c <dir_remove>
c0004f1c:	85 c0                	test   eax,eax
c0004f1e:	75 09                	jne    c0004f29 <f_rename+0x19a>
c0004f20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f24:	e8 34 df ff ff       	call   c0002e5d <sync_fs>
c0004f29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2d:	83 ec 0c             	sub    esp,0xc
c0004f30:	56                   	push   esi
c0004f31:	e8 ea 0d 00 00       	call   c0005d20 <ff_memfree>
c0004f36:	83 c4 10             	add    esp,0x10
c0004f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f43:	5b                   	pop    ebx
c0004f44:	5e                   	pop    esi
c0004f45:	5f                   	pop    edi
c0004f46:	c3                   	ret    

c0004f47 <f_chmod>:
c0004f47:	57                   	push   edi
c0004f48:	b9 02 00 00 00       	mov    ecx,0x2
c0004f4d:	56                   	push   esi
c0004f4e:	53                   	push   ebx
c0004f4f:	83 ec 50             	sub    esp,0x50
c0004f52:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f56:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004f5a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f5e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004f62:	e8 1e d6 ff ff       	call   c0002585 <mount_volume>
c0004f67:	85 c0                	test   eax,eax
c0004f69:	0f 85 81 00 00 00    	jne    c0004ff0 <f_chmod+0xa9>
c0004f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f73:	83 ec 0c             	sub    esp,0xc
c0004f76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f7a:	68 00 02 00 00       	push   0x200
c0004f7f:	e8 84 0d 00 00       	call   c0005d08 <ff_memalloc>
c0004f84:	83 c4 10             	add    esp,0x10
c0004f87:	89 c6                	mov    esi,eax
c0004f89:	b8 11 00 00 00       	mov    eax,0x11
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	74 5e                	je     c0004ff0 <f_chmod+0xa9>
c0004f92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f96:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f9a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fa1:	e8 27 eb ff ff       	call   c0003acd <follow_path>
c0004fa6:	85 c0                	test   eax,eax
c0004fa8:	75 32                	jne    c0004fdc <f_chmod+0x95>
c0004faa:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fae:	b8 06 00 00 00       	mov    eax,0x6
c0004fb3:	80 e2 a0             	and    dl,0xa0
c0004fb6:	75 24                	jne    c0004fdc <f_chmod+0x95>
c0004fb8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbc:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004fbf:	31 d7                	xor    edi,edx
c0004fc1:	21 fb                	and    ebx,edi
c0004fc3:	83 e3 27             	and    ebx,0x27
c0004fc6:	31 d3                	xor    ebx,edx
c0004fc8:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd7:	e8 81 de ff ff       	call   c0002e5d <sync_fs>
c0004fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fe0:	83 ec 0c             	sub    esp,0xc
c0004fe3:	56                   	push   esi
c0004fe4:	e8 37 0d 00 00       	call   c0005d20 <ff_memfree>
c0004fe9:	83 c4 10             	add    esp,0x10
c0004fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ff0:	83 c4 50             	add    esp,0x50
c0004ff3:	5b                   	pop    ebx
c0004ff4:	5e                   	pop    esi
c0004ff5:	5f                   	pop    edi
c0004ff6:	c3                   	ret    

c0004ff7 <f_utime>:
c0004ff7:	56                   	push   esi
c0004ff8:	b9 02 00 00 00       	mov    ecx,0x2
c0004ffd:	53                   	push   ebx
c0004ffe:	83 ec 54             	sub    esp,0x54
c0005001:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005005:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005009:	8d 44 24 60          	lea    eax,[esp+0x60]
c000500d:	e8 73 d5 ff ff       	call   c0002585 <mount_volume>
c0005012:	85 c0                	test   eax,eax
c0005014:	0f 85 87 00 00 00    	jne    c00050a1 <f_utime+0xaa>
c000501a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005025:	68 00 02 00 00       	push   0x200
c000502a:	e8 d9 0c 00 00       	call   c0005d08 <ff_memalloc>
c000502f:	83 c4 10             	add    esp,0x10
c0005032:	89 c3                	mov    ebx,eax
c0005034:	b8 11 00 00 00       	mov    eax,0x11
c0005039:	85 db                	test   ebx,ebx
c000503b:	74 64                	je     c00050a1 <f_utime+0xaa>
c000503d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005041:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005045:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005048:	8d 44 24 20          	lea    eax,[esp+0x20]
c000504c:	e8 7c ea ff ff       	call   c0003acd <follow_path>
c0005051:	85 c0                	test   eax,eax
c0005053:	75 38                	jne    c000508d <f_utime+0x96>
c0005055:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005059:	b8 06 00 00 00       	mov    eax,0x6
c000505e:	80 e2 a0             	and    dl,0xa0
c0005061:	75 2a                	jne    c000508d <f_utime+0x96>
c0005063:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005067:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c000506b:	c1 e2 10             	shl    edx,0x10
c000506e:	09 c2                	or     edx,eax
c0005070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005074:	83 c0 16             	add    eax,0x16
c0005077:	e8 70 ce ff ff       	call   c0001eec <st_dword>
c000507c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005080:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005088:	e8 d0 dd ff ff       	call   c0002e5d <sync_fs>
c000508d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005091:	83 ec 0c             	sub    esp,0xc
c0005094:	53                   	push   ebx
c0005095:	e8 86 0c 00 00       	call   c0005d20 <ff_memfree>
c000509a:	83 c4 10             	add    esp,0x10
c000509d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050a1:	83 c4 54             	add    esp,0x54
c00050a4:	5b                   	pop    ebx
c00050a5:	5e                   	pop    esi
c00050a6:	c3                   	ret    

c00050a7 <f_getlabel>:
c00050a7:	55                   	push   ebp
c00050a8:	31 c9                	xor    ecx,ecx
c00050aa:	57                   	push   edi
c00050ab:	56                   	push   esi
c00050ac:	53                   	push   ebx
c00050ad:	83 ec 5c             	sub    esp,0x5c
c00050b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050b4:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 c4 d4 ff ff       	call   c0002585 <mount_volume>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	89 c3                	mov    ebx,eax
c00050c5:	0f 85 d9 00 00 00    	jne    c00051a4 <f_getlabel+0xfd>
c00050cb:	85 ff                	test   edi,edi
c00050cd:	0f 84 d1 00 00 00    	je     c00051a4 <f_getlabel+0xfd>
c00050d3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00050db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050df:	31 d2                	xor    edx,edx
c00050e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00050e5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050e9:	e8 1c e3 ff ff       	call   c000340a <dir_sdi>
c00050ee:	85 c0                	test   eax,eax
c00050f0:	89 c3                	mov    ebx,eax
c00050f2:	0f 85 a2 00 00 00    	jne    c000519a <f_getlabel+0xf3>
c00050f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050fc:	ba 01 00 00 00       	mov    edx,0x1
c0005101:	e8 fe e6 ff ff       	call   c0003804 <dir_read>
c0005106:	85 c0                	test   eax,eax
c0005108:	89 c3                	mov    ebx,eax
c000510a:	0f 85 8a 00 00 00    	jne    c000519a <f_getlabel+0xf3>
c0005110:	31 f6                	xor    esi,esi
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005118:	8d 6a 01             	lea    ebp,[edx+0x1]
c000511b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000511f:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005123:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005128:	89 c8                	mov    eax,ecx
c000512a:	e8 13 ce ff ff       	call   c0001f42 <dbc_1st>
c000512f:	85 c0                	test   eax,eax
c0005131:	74 19                	je     c000514c <f_getlabel+0xa5>
c0005133:	83 fd 0b             	cmp    ebp,0xb
c0005136:	74 14                	je     c000514c <f_getlabel+0xa5>
c0005138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000513c:	c1 e1 08             	shl    ecx,0x8
c000513f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005143:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005146:	09 c1                	or     ecx,eax
c0005148:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000514c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0005151:	52                   	push   edx
c0005152:	52                   	push   edx
c0005153:	68 b5 01 00 00       	push   0x1b5
c0005158:	50                   	push   eax
c0005159:	e8 76 0c 00 00       	call   c0005dd4 <ff_oem2uni>
c000515e:	83 c4 10             	add    esp,0x10
c0005161:	0f b7 c0             	movzx  eax,ax
c0005164:	85 c0                	test   eax,eax
c0005166:	74 1f                	je     c0005187 <f_getlabel+0xe0>
c0005168:	8d 14 37             	lea    edx,[edi+esi*1]
c000516b:	b9 04 00 00 00       	mov    ecx,0x4
c0005170:	e8 ab ce ff ff       	call   c0002020 <put_utf>
c0005175:	0f b6 c0             	movzx  eax,al
c0005178:	85 c0                	test   eax,eax
c000517a:	74 0b                	je     c0005187 <f_getlabel+0xe0>
c000517c:	01 c6                	add    esi,eax
c000517e:	83 fd 0b             	cmp    ebp,0xb
c0005181:	74 06                	je     c0005189 <f_getlabel+0xe2>
c0005183:	89 ea                	mov    edx,ebp
c0005185:	eb 8d                	jmp    c0005114 <f_getlabel+0x6d>
c0005187:	31 f6                	xor    esi,esi
c0005189:	01 fe                	add    esi,edi
c000518b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000518e:	39 f7                	cmp    edi,esi
c0005190:	74 12                	je     c00051a4 <f_getlabel+0xfd>
c0005192:	4e                   	dec    esi
c0005193:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005196:	74 f3                	je     c000518b <f_getlabel+0xe4>
c0005198:	eb 0a                	jmp    c00051a4 <f_getlabel+0xfd>
c000519a:	83 fb 04             	cmp    ebx,0x4
c000519d:	75 05                	jne    c00051a4 <f_getlabel+0xfd>
c000519f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00051a2:	31 db                	xor    ebx,ebx
c00051a4:	85 db                	test   ebx,ebx
c00051a6:	75 49                	jne    c00051f1 <f_getlabel+0x14a>
c00051a8:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00051ad:	74 42                	je     c00051f1 <f_getlabel+0x14a>
c00051af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00051b6:	e8 6d d2 ff ff       	call   c0002428 <move_window>
c00051bb:	85 c0                	test   eax,eax
c00051bd:	89 c3                	mov    ebx,eax
c00051bf:	75 30                	jne    c00051f1 <f_getlabel+0x14a>
c00051c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c5:	b8 43 00 00 00       	mov    eax,0x43
c00051ca:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00051cd:	83 f9 03             	cmp    ecx,0x3
c00051d0:	74 10                	je     c00051e2 <f_getlabel+0x13b>
c00051d2:	83 f9 04             	cmp    ecx,0x4
c00051d5:	b8 64 00 00 00       	mov    eax,0x64
c00051da:	b9 27 00 00 00       	mov    ecx,0x27
c00051df:	0f 45 c1             	cmovne eax,ecx
c00051e2:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00051e6:	e8 e5 cc ff ff       	call   c0001ed0 <ld_dword>
c00051eb:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00051ef:	89 07                	mov    DWORD PTR [edi],eax
c00051f1:	83 c4 5c             	add    esp,0x5c
c00051f4:	89 d8                	mov    eax,ebx
c00051f6:	5b                   	pop    ebx
c00051f7:	5e                   	pop    esi
c00051f8:	5f                   	pop    edi
c00051f9:	5d                   	pop    ebp
c00051fa:	c3                   	ret    

c00051fb <f_setlabel>:
c00051fb:	57                   	push   edi
c00051fc:	b9 02 00 00 00       	mov    ecx,0x2
c0005201:	56                   	push   esi
c0005202:	53                   	push   ebx
c0005203:	83 ec 50             	sub    esp,0x50
c0005206:	8d 54 24 04          	lea    edx,[esp+0x4]
c000520a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000520e:	e8 72 d3 ff ff       	call   c0002585 <mount_volume>
c0005213:	85 c0                	test   eax,eax
c0005215:	89 c6                	mov    esi,eax
c0005217:	0f 85 65 01 00 00    	jne    c0005382 <f_setlabel+0x187>
c000521d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005222:	ba 20 00 00 00       	mov    edx,0x20
c0005227:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000522b:	31 db                	xor    ebx,ebx
c000522d:	e8 d2 cc ff ff       	call   c0001f04 <mem_set>
c0005232:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005236:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005239:	76 5d                	jbe    c0005298 <f_setlabel+0x9d>
c000523b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000523f:	e8 04 cd ff ff       	call   c0001f48 <tchar2uni>
c0005244:	3d ff ff 00 00       	cmp    eax,0xffff
c0005249:	76 0a                	jbe    c0005255 <f_setlabel+0x5a>
c000524b:	be 06 00 00 00       	mov    esi,0x6
c0005250:	e9 2d 01 00 00       	jmp    c0005382 <f_setlabel+0x187>
c0005255:	83 ec 0c             	sub    esp,0xc
c0005258:	50                   	push   eax
c0005259:	e8 ee 0b 00 00       	call   c0005e4c <ff_wtoupper>
c000525e:	5a                   	pop    edx
c000525f:	59                   	pop    ecx
c0005260:	68 b5 01 00 00       	push   0x1b5
c0005265:	50                   	push   eax
c0005266:	e8 cd 0a 00 00       	call   c0005d38 <ff_uni2oem>
c000526b:	83 c4 10             	add    esp,0x10
c000526e:	0f b7 f0             	movzx  esi,ax
c0005271:	85 f6                	test   esi,esi
c0005273:	89 f7                	mov    edi,esi
c0005275:	74 d4                	je     c000524b <f_setlabel+0x50>
c0005277:	89 f2                	mov    edx,esi
c0005279:	b8 90 f1 02 c0       	mov    eax,0xc002f190
c000527e:	e8 ae cc ff ff       	call   c0001f31 <chk_chr>
c0005283:	85 c0                	test   eax,eax
c0005285:	75 c4                	jne    c000524b <f_setlabel+0x50>
c0005287:	81 fe ff 00 00 00    	cmp    esi,0xff
c000528d:	0f 87 c9 00 00 00    	ja     c000535c <f_setlabel+0x161>
c0005293:	e9 e0 00 00 00       	jmp    c0005378 <f_setlabel+0x17d>
c0005298:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000529d:	74 ac                	je     c000524b <f_setlabel+0x50>
c000529f:	85 db                	test   ebx,ebx
c00052a1:	74 0e                	je     c00052b1 <f_setlabel+0xb6>
c00052a3:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00052a8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00052ab:	75 04                	jne    c00052b1 <f_setlabel+0xb6>
c00052ad:	89 c3                	mov    ebx,eax
c00052af:	eb ee                	jmp    c000529f <f_setlabel+0xa4>
c00052b1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00052b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00052c3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c7:	e8 3e e1 ff ff       	call   c000340a <dir_sdi>
c00052cc:	85 c0                	test   eax,eax
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	0f 85 ac 00 00 00    	jne    c0005382 <f_setlabel+0x187>
c00052d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052da:	ba 01 00 00 00       	mov    edx,0x1
c00052df:	e8 20 e5 ff ff       	call   c0003804 <dir_read>
c00052e4:	85 c0                	test   eax,eax
c00052e6:	75 18                	jne    c0005300 <f_setlabel+0x105>
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052ee:	74 0b                	je     c00052fb <f_setlabel+0x100>
c00052f0:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00052f4:	b9 0b 00 00 00       	mov    ecx,0xb
c00052f9:	eb 47                	jmp    c0005342 <f_setlabel+0x147>
c00052fb:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00052fe:	eb 47                	jmp    c0005347 <f_setlabel+0x14c>
c0005300:	83 f8 04             	cmp    eax,0x4
c0005303:	75 53                	jne    c0005358 <f_setlabel+0x15d>
c0005305:	85 db                	test   ebx,ebx
c0005307:	74 79                	je     c0005382 <f_setlabel+0x187>
c0005309:	8d 44 24 20          	lea    eax,[esp+0x20]
c000530d:	ba 01 00 00 00       	mov    edx,0x1
c0005312:	e8 88 e4 ff ff       	call   c000379f <dir_alloc>
c0005317:	85 c0                	test   eax,eax
c0005319:	89 c6                	mov    esi,eax
c000531b:	75 65                	jne    c0005382 <f_setlabel+0x187>
c000531d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005321:	b9 20 00 00 00       	mov    ecx,0x20
c0005326:	31 d2                	xor    edx,edx
c0005328:	e8 d7 cb ff ff       	call   c0001f04 <mem_set>
c000532d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005331:	b9 0b 00 00 00       	mov    ecx,0xb
c0005336:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000533a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000533e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005342:	e8 a8 cb ff ff       	call   c0001eef <mem_cpy>
c0005347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000534b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000534f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005353:	e8 05 db ff ff       	call   c0002e5d <sync_fs>
c0005358:	89 c6                	mov    esi,eax
c000535a:	eb 26                	jmp    c0005382 <f_setlabel+0x187>
c000535c:	83 fb 09             	cmp    ebx,0x9
c000535f:	0f 87 e6 fe ff ff    	ja     c000524b <f_setlabel+0x50>
c0005365:	89 f0                	mov    eax,esi
c0005367:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c000536b:	43                   	inc    ebx
c000536c:	89 f8                	mov    eax,edi
c000536e:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005372:	43                   	inc    ebx
c0005373:	e9 ba fe ff ff       	jmp    c0005232 <f_setlabel+0x37>
c0005378:	83 fb 0a             	cmp    ebx,0xa
c000537b:	76 ef                	jbe    c000536c <f_setlabel+0x171>
c000537d:	e9 c9 fe ff ff       	jmp    c000524b <f_setlabel+0x50>
c0005382:	83 c4 50             	add    esp,0x50
c0005385:	89 f0                	mov    eax,esi
c0005387:	5b                   	pop    ebx
c0005388:	5e                   	pop    esi
c0005389:	5f                   	pop    edi
c000538a:	c3                   	ret    

c000538b <f_expand>:
c000538b:	55                   	push   ebp
c000538c:	57                   	push   edi
c000538d:	56                   	push   esi
c000538e:	53                   	push   ebx
c000538f:	83 ec 2c             	sub    esp,0x2c
c0005392:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005396:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000539a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000539e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053a2:	89 d8                	mov    eax,ebx
c00053a4:	e8 d6 cf ff ff       	call   c000237f <validate>
c00053a9:	85 c0                	test   eax,eax
c00053ab:	89 c6                	mov    esi,eax
c00053ad:	0f 85 3b 01 00 00    	jne    c00054ee <f_expand+0x163>
c00053b3:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00053b7:	85 f6                	test   esi,esi
c00053b9:	0f 85 2f 01 00 00    	jne    c00054ee <f_expand+0x163>
c00053bf:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00053c4:	75 0a                	jne    c00053d0 <f_expand+0x45>
c00053c6:	be 07 00 00 00       	mov    esi,0x7
c00053cb:	e9 1e 01 00 00       	jmp    c00054ee <f_expand+0x163>
c00053d0:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00053d4:	75 f0                	jne    c00053c6 <f_expand+0x3b>
c00053d6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00053da:	74 ea                	je     c00053c6 <f_expand+0x3b>
c00053dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053e0:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c00053e4:	c1 e7 09             	shl    edi,0x9
c00053e7:	8d 47 ff             	lea    eax,[edi-0x1]
c00053ea:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00053ee:	0f 95 c0             	setne  al
c00053f1:	31 d2                	xor    edx,edx
c00053f3:	0f b6 c0             	movzx  eax,al
c00053f6:	89 c5                	mov    ebp,eax
c00053f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053fc:	f7 f7                	div    edi
c00053fe:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005401:	01 e8                	add    eax,ebp
c0005403:	83 ff 01             	cmp    edi,0x1
c0005406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000540a:	76 05                	jbe    c0005411 <f_expand+0x86>
c000540c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000540f:	77 05                	ja     c0005416 <f_expand+0x8b>
c0005411:	bf 02 00 00 00       	mov    edi,0x2
c0005416:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005419:	89 fd                	mov    ebp,edi
c000541b:	31 c9                	xor    ecx,ecx
c000541d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005421:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005423:	89 ea                	mov    edx,ebp
c0005425:	45                   	inc    ebp
c0005426:	e8 da de ff ff       	call   c0003305 <get_fat.isra.2>
c000542b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000542f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005433:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005436:	77 05                	ja     c000543d <f_expand+0xb2>
c0005438:	bd 02 00 00 00       	mov    ebp,0x2
c000543d:	83 f8 01             	cmp    eax,0x1
c0005440:	74 20                	je     c0005462 <f_expand+0xd7>
c0005442:	83 f8 ff             	cmp    eax,0xffffffff
c0005445:	74 25                	je     c000546c <f_expand+0xe1>
c0005447:	85 c0                	test   eax,eax
c0005449:	75 09                	jne    c0005454 <f_expand+0xc9>
c000544b:	41                   	inc    ecx
c000544c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005450:	75 07                	jne    c0005459 <f_expand+0xce>
c0005452:	eb 1f                	jmp    c0005473 <f_expand+0xe8>
c0005454:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005457:	31 c9                	xor    ecx,ecx
c0005459:	39 fd                	cmp    ebp,edi
c000545b:	75 c0                	jne    c000541d <f_expand+0x92>
c000545d:	e9 64 ff ff ff       	jmp    c00053c6 <f_expand+0x3b>
c0005462:	be 02 00 00 00       	mov    esi,0x2
c0005467:	e9 82 00 00 00       	jmp    c00054ee <f_expand+0x163>
c000546c:	be 01 00 00 00       	mov    esi,0x1
c0005471:	eb 7b                	jmp    c00054ee <f_expand+0x163>
c0005473:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005478:	74 2b                	je     c00054a5 <f_expand+0x11a>
c000547a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000547d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005481:	85 ed                	test   ebp,ebp
c0005483:	74 24                	je     c00054a9 <f_expand+0x11e>
c0005485:	83 c9 ff             	or     ecx,0xffffffff
c0005488:	83 fd 01             	cmp    ebp,0x1
c000548b:	74 03                	je     c0005490 <f_expand+0x105>
c000548d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005494:	89 fa                	mov    edx,edi
c0005496:	e8 e7 d3 ff ff       	call   c0002882 <put_fat>
c000549b:	85 c0                	test   eax,eax
c000549d:	75 4d                	jne    c00054ec <f_expand+0x161>
c000549f:	89 f8                	mov    eax,edi
c00054a1:	4d                   	dec    ebp
c00054a2:	47                   	inc    edi
c00054a3:	eb dc                	jmp    c0005481 <f_expand+0xf6>
c00054a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054a8:	48                   	dec    eax
c00054a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00054ad:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054b2:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00054b5:	74 37                	je     c00054ee <f_expand+0x163>
c00054b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00054bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054c1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00054c4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00054c7:	83 c8 40             	or     eax,0x40
c00054ca:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00054cd:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00054d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00054d3:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00054d6:	39 c8                	cmp    eax,ecx
c00054d8:	77 14                	ja     c00054ee <f_expand+0x163>
c00054da:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00054de:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00054e1:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00054e4:	83 c8 01             	or     eax,0x1
c00054e7:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00054ea:	eb 02                	jmp    c00054ee <f_expand+0x163>
c00054ec:	89 c6                	mov    esi,eax
c00054ee:	83 c4 2c             	add    esp,0x2c
c00054f1:	89 f0                	mov    eax,esi
c00054f3:	5b                   	pop    ebx
c00054f4:	5e                   	pop    esi
c00054f5:	5f                   	pop    edi
c00054f6:	5d                   	pop    ebp
c00054f7:	c3                   	ret    

c00054f8 <f_mkfs>:
c00054f8:	55                   	push   ebp
c00054f9:	57                   	push   edi
c00054fa:	56                   	push   esi
c00054fb:	be 0b 00 00 00       	mov    esi,0xb
c0005500:	53                   	push   ebx
c0005501:	83 ec 5c             	sub    esp,0x5c
c0005504:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005508:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000550c:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005510:	e8 1e ce ff ff       	call   c0002333 <get_ldnumber>
c0005515:	85 c0                	test   eax,eax
c0005517:	0f 88 e0 07 00 00    	js     c0005cfd <f_mkfs+0x805>
c000551d:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005524:	85 d2                	test   edx,edx
c0005526:	74 03                	je     c000552b <f_mkfs+0x33>
c0005528:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000552b:	85 db                	test   ebx,ebx
c000552d:	75 05                	jne    c0005534 <f_mkfs+0x3c>
c000552f:	bb 80 f1 02 c0       	mov    ebx,0xc002f180
c0005534:	0f b6 c0             	movzx  eax,al
c0005537:	83 ec 0c             	sub    esp,0xc
c000553a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000553e:	be 03 00 00 00       	mov    esi,0x3
c0005543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005547:	e8 29 c9 ff ff       	call   c0001e75 <disk_initialize>
c000554c:	83 c4 10             	add    esp,0x10
c000554f:	a8 01                	test   al,0x1
c0005551:	0f 85 a6 07 00 00    	jne    c0005cfd <f_mkfs+0x805>
c0005557:	a8 04                	test   al,0x4
c0005559:	be 0a 00 00 00       	mov    esi,0xa
c000555e:	0f 85 99 07 00 00    	jne    c0005cfd <f_mkfs+0x805>
c0005564:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005567:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000556b:	85 c0                	test   eax,eax
c000556d:	75 20                	jne    c000558f <f_mkfs+0x97>
c000556f:	51                   	push   ecx
c0005570:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005574:	50                   	push   eax
c0005575:	6a 03                	push   0x3
c0005577:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000557b:	e8 24 c9 ff ff       	call   c0001ea4 <disk_ioctl>
c0005580:	83 c4 10             	add    esp,0x10
c0005583:	85 c0                	test   eax,eax
c0005585:	74 08                	je     c000558f <f_mkfs+0x97>
c0005587:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000558f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005593:	8d 42 ff             	lea    eax,[edx-0x1]
c0005596:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000559b:	77 04                	ja     c00055a1 <f_mkfs+0xa9>
c000559d:	85 c2                	test   edx,eax
c000559f:	74 08                	je     c00055a9 <f_mkfs+0xb1>
c00055a1:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055a9:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00055ac:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00055b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00055b4:	48                   	dec    eax
c00055b5:	3c 01                	cmp    al,0x1
c00055b7:	76 05                	jbe    c00055be <f_mkfs+0xc6>
c00055b9:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00055be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00055c5:	48                   	dec    eax
c00055c6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055cb:	77 15                	ja     c00055e2 <f_mkfs+0xea>
c00055cd:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00055d2:	b8 00 02 00 00       	mov    eax,0x200
c00055d7:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c00055dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00055e0:	eb 08                	jmp    c00055ea <f_mkfs+0xf2>
c00055e2:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c00055ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00055ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00055f3:	77 0f                	ja     c0005604 <f_mkfs+0x10c>
c00055f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00055f8:	85 f8                	test   eax,edi
c00055fa:	b8 00 00 00 00       	mov    eax,0x0
c00055ff:	0f 45 f8             	cmovne edi,eax
c0005602:	eb 02                	jmp    c0005606 <f_mkfs+0x10e>
c0005604:	31 ff                	xor    edi,edi
c0005606:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000560e:	77 0a                	ja     c000561a <f_mkfs+0x122>
c0005610:	be 11 00 00 00       	mov    esi,0x11
c0005615:	e9 e3 06 00 00       	jmp    c0005cfd <f_mkfs+0x805>
c000561a:	85 ed                	test   ebp,ebp
c000561c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000561e:	89 eb                	mov    ebx,ebp
c0005620:	75 1e                	jne    c0005640 <f_mkfs+0x148>
c0005622:	83 ec 0c             	sub    esp,0xc
c0005625:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000562c:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005631:	50                   	push   eax
c0005632:	e8 d1 06 00 00       	call   c0005d08 <ff_memalloc>
c0005637:	83 c4 10             	add    esp,0x10
c000563a:	85 c0                	test   eax,eax
c000563c:	89 c3                	mov    ebx,eax
c000563e:	74 d0                	je     c0005610 <f_mkfs+0x118>
c0005640:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005648:	52                   	push   edx
c0005649:	8d 44 24 48          	lea    eax,[esp+0x48]
c000564d:	50                   	push   eax
c000564e:	6a 01                	push   0x1
c0005650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005654:	e8 4b c8 ff ff       	call   c0001ea4 <disk_ioctl>
c0005659:	83 c4 10             	add    esp,0x10
c000565c:	85 c0                	test   eax,eax
c000565e:	0f 85 42 06 00 00    	jne    c0005ca6 <f_mkfs+0x7ae>
c0005664:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000566c:	89 f0                	mov    eax,esi
c000566e:	83 e0 08             	and    eax,0x8
c0005671:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005675:	75 18                	jne    c000568f <f_mkfs+0x197>
c0005677:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567b:	83 f8 3f             	cmp    eax,0x3f
c000567e:	76 0f                	jbe    c000568f <f_mkfs+0x197>
c0005680:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c0005688:	83 e8 3f             	sub    eax,0x3f
c000568b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000568f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005693:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005697:	83 f8 7f             	cmp    eax,0x7f
c000569a:	0f 86 5f 02 00 00    	jbe    c00058ff <f_mkfs+0x407>
c00056a0:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00056a6:	b9 80 00 00 00       	mov    ecx,0x80
c00056ab:	77 05                	ja     c00056b2 <f_mkfs+0x1ba>
c00056ad:	c1 ef 09             	shr    edi,0x9
c00056b0:	89 f9                	mov    ecx,edi
c00056b2:	89 f0                	mov    eax,esi
c00056b4:	89 f7                	mov    edi,esi
c00056b6:	83 e0 01             	and    eax,0x1
c00056b9:	83 e7 02             	and    edi,0x2
c00056bc:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00056c0:	0f b6 c0             	movzx  eax,al
c00056c3:	74 0a                	je     c00056cf <f_mkfs+0x1d7>
c00056c5:	85 c0                	test   eax,eax
c00056c7:	0f 84 53 01 00 00    	je     c0005820 <f_mkfs+0x328>
c00056cd:	eb 37                	jmp    c0005706 <f_mkfs+0x20e>
c00056cf:	85 c0                	test   eax,eax
c00056d1:	be 13 00 00 00       	mov    esi,0x13
c00056d6:	75 2e                	jne    c0005706 <f_mkfs+0x20e>
c00056d8:	e9 e0 05 00 00       	jmp    c0005cbd <f_mkfs+0x7c5>
c00056dd:	83 f8 02             	cmp    eax,0x2
c00056e0:	0f 85 11 02 00 00    	jne    c00058f7 <f_mkfs+0x3ff>
c00056e6:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00056ec:	0f 86 e8 01 00 00    	jbe    c00058da <f_mkfs+0x3e2>
c00056f2:	85 c9                	test   ecx,ecx
c00056f4:	0f 85 d5 05 00 00    	jne    c0005ccf <f_mkfs+0x7d7>
c00056fa:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00056fd:	83 f9 40             	cmp    ecx,0x40
c0005700:	0f 87 d9 05 00 00    	ja     c0005cdf <f_mkfs+0x7e7>
c0005706:	85 c9                	test   ecx,ecx
c0005708:	89 cf                	mov    edi,ecx
c000570a:	75 1c                	jne    c0005728 <f_mkfs+0x230>
c000570c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005710:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0005715:	bf 01 00 00 00       	mov    edi,0x1
c000571a:	c1 ee 0c             	shr    esi,0xc
c000571d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005720:	85 d2                	test   edx,edx
c0005722:	0f 85 67 01 00 00    	jne    c000588f <f_mkfs+0x397>
c0005728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000572c:	31 d2                	xor    edx,edx
c000572e:	f7 f7                	div    edi
c0005730:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005735:	0f 86 66 01 00 00    	jbe    c00058a1 <f_mkfs+0x3a9>
c000573b:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005740:	83 c0 02             	add    eax,0x2
c0005743:	01 c0                	add    eax,eax
c0005745:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000574d:	05 ff 01 00 00       	add    eax,0x1ff
c0005752:	c1 e8 09             	shr    eax,0x9
c0005755:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575d:	c1 e0 05             	shl    eax,0x5
c0005760:	c1 e8 09             	shr    eax,0x9
c0005763:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005767:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000576c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005774:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005778:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000577c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005780:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005785:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005789:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000578d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005791:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005795:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005799:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c000579d:	f7 d8                	neg    eax
c000579f:	21 c6                	and    esi,eax
c00057a1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057a6:	29 d6                	sub    esi,edx
c00057a8:	83 f8 03             	cmp    eax,0x3
c00057ab:	0f 85 03 01 00 00    	jne    c00058b4 <f_mkfs+0x3bc>
c00057b1:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00057b5:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00057b9:	89 f8                	mov    eax,edi
c00057bb:	c1 e0 04             	shl    eax,0x4
c00057be:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00057c2:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00057c6:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00057ca:	0f 82 2f 01 00 00    	jb     c00058ff <f_mkfs+0x407>
c00057d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057d4:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00057d8:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00057dc:	89 c2                	mov    edx,eax
c00057de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00057e2:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00057e7:	29 c2                	sub    edx,eax
c00057e9:	89 d0                	mov    eax,edx
c00057eb:	31 d2                	xor    edx,edx
c00057ed:	f7 f7                	div    edi
c00057ef:	89 c6                	mov    esi,eax
c00057f1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057f6:	83 f8 03             	cmp    eax,0x3
c00057f9:	0f 85 de fe ff ff    	jne    c00056dd <f_mkfs+0x1e5>
c00057ff:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005805:	0f 87 03 01 00 00    	ja     c000590e <f_mkfs+0x416>
c000580b:	85 c9                	test   ecx,ecx
c000580d:	0f 85 ec 00 00 00    	jne    c00058ff <f_mkfs+0x407>
c0005813:	83 ff 01             	cmp    edi,0x1
c0005816:	0f 86 e3 00 00 00    	jbe    c00058ff <f_mkfs+0x407>
c000581c:	d1 ef                	shr    edi,1
c000581e:	89 f9                	mov    ecx,edi
c0005820:	85 c9                	test   ecx,ecx
c0005822:	89 ce                	mov    esi,ecx
c0005824:	75 25                	jne    c000584b <f_mkfs+0x353>
c0005826:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000582a:	b8 70 f1 02 c0       	mov    eax,0xc002f170
c000582f:	b9 01 00 00 00       	mov    ecx,0x1
c0005834:	c1 ee 11             	shr    esi,0x11
c0005837:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000583a:	85 d2                	test   edx,edx
c000583c:	74 0b                	je     c0005849 <f_mkfs+0x351>
c000583e:	83 c0 02             	add    eax,0x2
c0005841:	39 f2                	cmp    edx,esi
c0005843:	77 04                	ja     c0005849 <f_mkfs+0x351>
c0005845:	01 c9                	add    ecx,ecx
c0005847:	eb ee                	jmp    c0005837 <f_mkfs+0x33f>
c0005849:	31 f6                	xor    esi,esi
c000584b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000584f:	31 d2                	xor    edx,edx
c0005851:	f7 f1                	div    ecx
c0005853:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000585a:	2d f6 ff 00 00       	sub    eax,0xfff6
c000585f:	c1 ea 09             	shr    edx,0x9
c0005862:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005867:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000586b:	0f 87 8e 00 00 00    	ja     c00058ff <f_mkfs+0x407>
c0005871:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005879:	89 cf                	mov    edi,ecx
c000587b:	89 f1                	mov    ecx,esi
c000587d:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005885:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000588a:	e9 d8 fe ff ff       	jmp    c0005767 <f_mkfs+0x26f>
c000588f:	83 c0 02             	add    eax,0x2
c0005892:	39 f2                	cmp    edx,esi
c0005894:	0f 87 8e fe ff ff    	ja     c0005728 <f_mkfs+0x230>
c000589a:	01 ff                	add    edi,edi
c000589c:	e9 7c fe ff ff       	jmp    c000571d <f_mkfs+0x225>
c00058a1:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058a6:	8d 04 40             	lea    eax,[eax+eax*2]
c00058a9:	40                   	inc    eax
c00058aa:	d1 e8                	shr    eax,1
c00058ac:	83 c0 03             	add    eax,0x3
c00058af:	e9 91 fe ff ff       	jmp    c0005745 <f_mkfs+0x24d>
c00058b4:	31 d2                	xor    edx,edx
c00058b6:	89 f0                	mov    eax,esi
c00058b8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058bc:	85 d2                	test   edx,edx
c00058be:	74 09                	je     c00058c9 <f_mkfs+0x3d1>
c00058c0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00058c4:	4e                   	dec    esi
c00058c5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00058c9:	89 f0                	mov    eax,esi
c00058cb:	31 d2                	xor    edx,edx
c00058cd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058d1:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00058d5:	e9 df fe ff ff       	jmp    c00057b9 <f_mkfs+0x2c1>
c00058da:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00058e0:	77 2c                	ja     c000590e <f_mkfs+0x416>
c00058e2:	85 c9                	test   ecx,ecx
c00058e4:	75 19                	jne    c00058ff <f_mkfs+0x407>
c00058e6:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00058e9:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00058ef:	0f 86 11 fe ff ff    	jbe    c0005706 <f_mkfs+0x20e>
c00058f5:	eb 08                	jmp    c00058ff <f_mkfs+0x407>
c00058f7:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00058fd:	76 0a                	jbe    c0005909 <f_mkfs+0x411>
c00058ff:	be 0e 00 00 00       	mov    esi,0xe
c0005904:	e9 b4 03 00 00       	jmp    c0005cbd <f_mkfs+0x7c5>
c0005909:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000590e:	31 d2                	xor    edx,edx
c0005910:	b9 00 02 00 00       	mov    ecx,0x200
c0005915:	89 d8                	mov    eax,ebx
c0005917:	e8 e8 c5 ff ff       	call   c0001f04 <mem_set>
c000591c:	b9 0b 00 00 00       	mov    ecx,0xb
c0005921:	ba 12 f1 02 c0       	mov    edx,0xc002f112
c0005926:	89 d8                	mov    eax,ebx
c0005928:	e8 c2 c5 ff ff       	call   c0001eef <mem_cpy>
c000592d:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005930:	ba 00 02 00 00       	mov    edx,0x200
c0005935:	e8 ae c5 ff ff       	call   c0001ee8 <st_word>
c000593a:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000593f:	89 f8                	mov    eax,edi
c0005941:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005944:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005947:	e8 9c c5 ff ff       	call   c0001ee8 <st_word>
c000594c:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005950:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005953:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005958:	83 f8 03             	cmp    eax,0x3
c000595b:	b8 00 00 00 00       	mov    eax,0x0
c0005960:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005965:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005969:	8d 43 11             	lea    eax,[ebx+0x11]
c000596c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005970:	e8 73 c5 ff ff       	call   c0001ee8 <st_word>
c0005975:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005979:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000597f:	77 0a                	ja     c000598b <f_mkfs+0x493>
c0005981:	8d 43 13             	lea    eax,[ebx+0x13]
c0005984:	e8 5f c5 ff ff       	call   c0001ee8 <st_word>
c0005989:	eb 08                	jmp    c0005993 <f_mkfs+0x49b>
c000598b:	8d 43 20             	lea    eax,[ebx+0x20]
c000598e:	e8 59 c5 ff ff       	call   c0001eec <st_dword>
c0005993:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005997:	8d 43 18             	lea    eax,[ebx+0x18]
c000599a:	ba 3f 00 00 00       	mov    edx,0x3f
c000599f:	e8 44 c5 ff ff       	call   c0001ee8 <st_word>
c00059a4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00059a7:	ba ff 00 00 00       	mov    edx,0xff
c00059ac:	e8 37 c5 ff ff       	call   c0001ee8 <st_word>
c00059b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00059b5:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00059b8:	e8 2f c5 ff ff       	call   c0001eec <st_dword>
c00059bd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059c2:	83 f8 03             	cmp    eax,0x3
c00059c5:	75 57                	jne    c0005a1e <f_mkfs+0x526>
c00059c7:	8d 43 43             	lea    eax,[ebx+0x43]
c00059ca:	ba 00 00 21 50       	mov    edx,0x50210000
c00059cf:	e8 18 c5 ff ff       	call   c0001eec <st_dword>
c00059d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00059d8:	8d 43 24             	lea    eax,[ebx+0x24]
c00059db:	e8 0c c5 ff ff       	call   c0001eec <st_dword>
c00059e0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00059e3:	ba 02 00 00 00       	mov    edx,0x2
c00059e8:	e8 ff c4 ff ff       	call   c0001eec <st_dword>
c00059ed:	8d 43 30             	lea    eax,[ebx+0x30]
c00059f0:	ba 01 00 00 00       	mov    edx,0x1
c00059f5:	e8 ee c4 ff ff       	call   c0001ee8 <st_word>
c00059fa:	8d 43 32             	lea    eax,[ebx+0x32]
c00059fd:	ba 06 00 00 00       	mov    edx,0x6
c0005a02:	e8 e1 c4 ff ff       	call   c0001ee8 <st_word>
c0005a07:	8d 43 47             	lea    eax,[ebx+0x47]
c0005a0a:	b9 13 00 00 00       	mov    ecx,0x13
c0005a0f:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005a13:	ba 1e f1 02 c0       	mov    edx,0xc002f11e
c0005a18:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005a1c:	eb 2f                	jmp    c0005a4d <f_mkfs+0x555>
c0005a1e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005a21:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a26:	e8 c1 c4 ff ff       	call   c0001eec <st_dword>
c0005a2b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005a30:	8d 43 16             	lea    eax,[ebx+0x16]
c0005a33:	e8 b0 c4 ff ff       	call   c0001ee8 <st_word>
c0005a38:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005a3b:	b9 13 00 00 00       	mov    ecx,0x13
c0005a40:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005a44:	ba 32 f1 02 c0       	mov    edx,0xc002f132
c0005a49:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005a4d:	e8 9d c4 ff ff       	call   c0001eef <mem_cpy>
c0005a52:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a58:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a61:	e8 82 c4 ff ff       	call   c0001ee8 <st_word>
c0005a66:	6a 01                	push   0x1
c0005a68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6c:	53                   	push   ebx
c0005a6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a71:	e8 18 c4 ff ff       	call   c0001e8e <disk_write>
c0005a76:	83 c4 10             	add    esp,0x10
c0005a79:	85 c0                	test   eax,eax
c0005a7b:	0f 85 25 02 00 00    	jne    c0005ca6 <f_mkfs+0x7ae>
c0005a81:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a86:	83 f8 03             	cmp    eax,0x3
c0005a89:	0f 85 98 00 00 00    	jne    c0005b27 <f_mkfs+0x62f>
c0005a8f:	6a 01                	push   0x1
c0005a91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a95:	83 c0 06             	add    eax,0x6
c0005a98:	50                   	push   eax
c0005a99:	53                   	push   ebx
c0005a9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a9e:	e8 eb c3 ff ff       	call   c0001e8e <disk_write>
c0005aa3:	b9 00 02 00 00       	mov    ecx,0x200
c0005aa8:	31 d2                	xor    edx,edx
c0005aaa:	89 d8                	mov    eax,ebx
c0005aac:	e8 53 c4 ff ff       	call   c0001f04 <mem_set>
c0005ab1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ab6:	89 d8                	mov    eax,ebx
c0005ab8:	e8 2f c4 ff ff       	call   c0001eec <st_dword>
c0005abd:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005ac3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005ac8:	e8 1f c4 ff ff       	call   c0001eec <st_dword>
c0005acd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005ad0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005ad6:	e8 11 c4 ff ff       	call   c0001eec <st_dword>
c0005adb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005ae1:	ba 02 00 00 00       	mov    edx,0x2
c0005ae6:	e8 01 c4 ff ff       	call   c0001eec <st_dword>
c0005aeb:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005af1:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005af6:	e8 ed c3 ff ff       	call   c0001ee8 <st_word>
c0005afb:	6a 01                	push   0x1
c0005afd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005b01:	83 c0 07             	add    eax,0x7
c0005b04:	50                   	push   eax
c0005b05:	53                   	push   ebx
c0005b06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005b0a:	e8 7f c3 ff ff       	call   c0001e8e <disk_write>
c0005b0f:	83 c4 20             	add    esp,0x20
c0005b12:	6a 01                	push   0x1
c0005b14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b18:	40                   	inc    eax
c0005b19:	50                   	push   eax
c0005b1a:	53                   	push   ebx
c0005b1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b1f:	e8 6a c3 ff ff       	call   c0001e8e <disk_write>
c0005b24:	83 c4 10             	add    esp,0x10
c0005b27:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005b2b:	31 d2                	xor    edx,edx
c0005b2d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005b31:	c1 e8 09             	shr    eax,0x9
c0005b34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b38:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005b3e:	89 d8                	mov    eax,ebx
c0005b40:	e8 bf c3 ff ff       	call   c0001f04 <mem_set>
c0005b45:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4a:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005b4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005b57:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005b5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005b60:	83 f8 01             	cmp    eax,0x1
c0005b63:	0f 44 d1             	cmove  edx,ecx
c0005b66:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005b6a:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005b6f:	75 21                	jne    c0005b92 <f_mkfs+0x69a>
c0005b71:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 6f c3 ff ff       	call   c0001eec <st_dword>
c0005b7d:	8d 43 04             	lea    eax,[ebx+0x4]
c0005b80:	83 ca ff             	or     edx,0xffffffff
c0005b83:	e8 64 c3 ff ff       	call   c0001eec <st_dword>
c0005b88:	8d 43 08             	lea    eax,[ebx+0x8]
c0005b8b:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005b90:	eb 06                	jmp    c0005b98 <f_mkfs+0x6a0>
c0005b92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005b96:	89 d8                	mov    eax,ebx
c0005b98:	e8 4f c3 ff ff       	call   c0001eec <st_dword>
c0005b9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ba5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005ba9:	0f 46 c6             	cmovbe eax,esi
c0005bac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005bb0:	50                   	push   eax
c0005bb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005bb5:	53                   	push   ebx
c0005bb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bba:	e8 cf c2 ff ff       	call   c0001e8e <disk_write>
c0005bbf:	83 c4 10             	add    esp,0x10
c0005bc2:	85 c0                	test   eax,eax
c0005bc4:	0f 85 dc 00 00 00    	jne    c0005ca6 <f_mkfs+0x7ae>
c0005bca:	b9 00 02 00 00       	mov    ecx,0x200
c0005bcf:	31 d2                	xor    edx,edx
c0005bd1:	89 d8                	mov    eax,ebx
c0005bd3:	e8 2c c3 ff ff       	call   c0001f04 <mem_set>
c0005bd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bdc:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005be0:	29 ce                	sub    esi,ecx
c0005be2:	75 bd                	jne    c0005ba1 <f_mkfs+0x6a9>
c0005be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005be8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005bf0:	40                   	inc    eax
c0005bf1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005bf5:	0f 87 6f ff ff ff    	ja     c0005b6a <f_mkfs+0x672>
c0005bfb:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c00:	83 f8 03             	cmp    eax,0x3
c0005c03:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005c08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c0c:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005c10:	0f 46 f7             	cmovbe esi,edi
c0005c13:	56                   	push   esi
c0005c14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c18:	53                   	push   ebx
c0005c19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c1d:	e8 6c c2 ff ff       	call   c0001e8e <disk_write>
c0005c22:	83 c4 10             	add    esp,0x10
c0005c25:	85 c0                	test   eax,eax
c0005c27:	75 7d                	jne    c0005ca6 <f_mkfs+0x7ae>
c0005c29:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005c2d:	29 f7                	sub    edi,esi
c0005c2f:	75 d7                	jne    c0005c08 <f_mkfs+0x710>
c0005c31:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c36:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c3b:	83 f8 03             	cmp    eax,0x3
c0005c3e:	74 1e                	je     c0005c5e <f_mkfs+0x766>
c0005c40:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c48:	b9 06 00 00 00       	mov    ecx,0x6
c0005c4d:	77 0f                	ja     c0005c5e <f_mkfs+0x766>
c0005c4f:	83 f8 02             	cmp    eax,0x2
c0005c52:	b9 04 00 00 00       	mov    ecx,0x4
c0005c57:	74 05                	je     c0005c5e <f_mkfs+0x766>
c0005c59:	b9 01 00 00 00       	mov    ecx,0x1
c0005c5e:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005c63:	75 2a                	jne    c0005c8f <f_mkfs+0x797>
c0005c65:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005c6d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005c71:	83 ec 0c             	sub    esp,0xc
c0005c74:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005c78:	53                   	push   ebx
c0005c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c7d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005c81:	e8 87 d2 ff ff       	call   c0002f0d <create_partition>
c0005c86:	83 c4 10             	add    esp,0x10
c0005c89:	85 c0                	test   eax,eax
c0005c8b:	89 c6                	mov    esi,eax
c0005c8d:	75 2e                	jne    c0005cbd <f_mkfs+0x7c5>
c0005c8f:	50                   	push   eax
c0005c90:	31 f6                	xor    esi,esi
c0005c92:	6a 00                	push   0x0
c0005c94:	6a 00                	push   0x0
c0005c96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c9a:	e8 05 c2 ff ff       	call   c0001ea4 <disk_ioctl>
c0005c9f:	83 c4 10             	add    esp,0x10
c0005ca2:	85 c0                	test   eax,eax
c0005ca4:	74 17                	je     c0005cbd <f_mkfs+0x7c5>
c0005ca6:	85 ed                	test   ebp,ebp
c0005ca8:	75 0c                	jne    c0005cb6 <f_mkfs+0x7be>
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	53                   	push   ebx
c0005cae:	e8 6d 00 00 00       	call   c0005d20 <ff_memfree>
c0005cb3:	83 c4 10             	add    esp,0x10
c0005cb6:	be 01 00 00 00       	mov    esi,0x1
c0005cbb:	eb 40                	jmp    c0005cfd <f_mkfs+0x805>
c0005cbd:	85 ed                	test   ebp,ebp
c0005cbf:	75 3c                	jne    c0005cfd <f_mkfs+0x805>
c0005cc1:	83 ec 0c             	sub    esp,0xc
c0005cc4:	53                   	push   ebx
c0005cc5:	e8 56 00 00 00       	call   c0005d20 <ff_memfree>
c0005cca:	83 c4 10             	add    esp,0x10
c0005ccd:	eb 2e                	jmp    c0005cfd <f_mkfs+0x805>
c0005ccf:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005cd4:	0f 85 46 fb ff ff    	jne    c0005820 <f_mkfs+0x328>
c0005cda:	e9 20 fc ff ff       	jmp    c00058ff <f_mkfs+0x407>
c0005cdf:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005ce4:	0f 85 3c fb ff ff    	jne    c0005826 <f_mkfs+0x32e>
c0005cea:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005cf0:	89 cf                	mov    edi,ecx
c0005cf2:	0f 86 30 fa ff ff    	jbe    c0005728 <f_mkfs+0x230>
c0005cf8:	e9 02 fc ff ff       	jmp    c00058ff <f_mkfs+0x407>
c0005cfd:	83 c4 5c             	add    esp,0x5c
c0005d00:	89 f0                	mov    eax,esi
c0005d02:	5b                   	pop    ebx
c0005d03:	5e                   	pop    esi
c0005d04:	5f                   	pop    edi
c0005d05:	5d                   	pop    ebp
c0005d06:	c3                   	ret    
c0005d07:	90                   	nop

c0005d08 <ff_memalloc>:
c0005d08:	83 ec 0c             	sub    esp,0xc
c0005d0b:	83 ec 0c             	sub    esp,0xc
c0005d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d12:	e8 78 06 01 00       	call   c001638f <malloc>
c0005d17:	83 c4 10             	add    esp,0x10
c0005d1a:	83 c4 0c             	add    esp,0xc
c0005d1d:	c3                   	ret    
c0005d1e:	66 90                	xchg   ax,ax

c0005d20 <ff_memfree>:
c0005d20:	83 ec 0c             	sub    esp,0xc
c0005d23:	83 ec 0c             	sub    esp,0xc
c0005d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d2a:	e8 70 06 01 00       	call   c001639f <free>
c0005d2f:	83 c4 10             	add    esp,0x10
c0005d32:	90                   	nop
c0005d33:	83 c4 0c             	add    esp,0xc
c0005d36:	c3                   	ret    
c0005d37:	90                   	nop

c0005d38 <ff_uni2oem>:
c0005d38:	83 ec 14             	sub    esp,0x14
c0005d3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d4a:	c7 44 24 0c 60 f5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f560
c0005d52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005d57:	77 0b                	ja     c0005d64 <ff_uni2oem+0x2c>
c0005d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d62:	eb 64                	jmp    c0005dc8 <ff_uni2oem+0x90>
c0005d64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005d6c:	77 5a                	ja     c0005dc8 <ff_uni2oem+0x90>
c0005d6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d77:	75 4f                	jne    c0005dc8 <ff_uni2oem+0x90>
c0005d79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d80:	eb 12                	jmp    c0005d94 <ff_uni2oem+0x5c>
c0005d82:	66 90                	xchg   ax,ax
c0005d84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d89:	83 c0 01             	add    eax,0x1
c0005d8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d91:	8d 76 00             	lea    esi,[esi+0x0]
c0005d94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005d99:	83 f8 7f             	cmp    eax,0x7f
c0005d9c:	77 1a                	ja     c0005db8 <ff_uni2oem+0x80>
c0005d9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005da3:	8d 14 00             	lea    edx,[eax+eax*1]
c0005da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005daa:	01 d0                	add    eax,edx
c0005dac:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005daf:	0f b7 c0             	movzx  eax,ax
c0005db2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005db6:	75 cc                	jne    c0005d84 <ff_uni2oem+0x4c>
c0005db8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005dbd:	83 e8 80             	sub    eax,0xffffff80
c0005dc0:	0f b6 c0             	movzx  eax,al
c0005dc3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005dc8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005dcd:	83 c4 14             	add    esp,0x14
c0005dd0:	c3                   	ret    
c0005dd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005dd4 <ff_oem2uni>:
c0005dd4:	83 ec 18             	sub    esp,0x18
c0005dd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ddf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005de4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005de8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005def:	c7 44 24 10 60 f5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f560
c0005df7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005dfc:	83 f8 7f             	cmp    eax,0x7f
c0005dff:	77 0b                	ja     c0005e0c <ff_oem2uni+0x38>
c0005e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e05:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e0a:	eb 34                	jmp    c0005e40 <ff_oem2uni+0x6c>
c0005e0c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e10:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e15:	75 29                	jne    c0005e40 <ff_oem2uni+0x6c>
c0005e17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e1c:	3d ff 00 00 00       	cmp    eax,0xff
c0005e21:	77 1d                	ja     c0005e40 <ff_oem2uni+0x6c>
c0005e23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e28:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005e2d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e34:	01 d0                	add    eax,edx
c0005e36:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e39:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e3e:	66 90                	xchg   ax,ax
c0005e40:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e45:	83 c4 18             	add    esp,0x18
c0005e48:	c3                   	ret    
c0005e49:	8d 76 00             	lea    esi,[esi+0x0]

c0005e4c <ff_wtoupper>:
c0005e4c:	83 ec 10             	sub    esp,0x10
c0005e4f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005e57:	0f 87 a7 01 00 00    	ja     c0006004 <ff_wtoupper+0x1b8>
c0005e5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e61:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e66:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e6b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005e70:	77 0a                	ja     c0005e7c <ff_wtoupper+0x30>
c0005e72:	b8 60 f3 02 c0       	mov    eax,0xc002f360
c0005e77:	eb 0b                	jmp    c0005e84 <ff_wtoupper+0x38>
c0005e79:	8d 76 00             	lea    esi,[esi+0x0]
c0005e7c:	b8 a0 f2 02 c0       	mov    eax,0xc002f2a0
c0005e81:	8d 76 00             	lea    esi,[esi+0x0]
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8c:	8d 50 02             	lea    edx,[eax+0x2]
c0005e8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e93:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e96:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005e9b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ea0:	85 c0                	test   eax,eax
c0005ea2:	0f 84 50 01 00 00    	je     c0005ff8 <ff_wtoupper+0x1ac>
c0005ea8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ead:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005eb2:	39 c2                	cmp    edx,eax
c0005eb4:	0f 82 3e 01 00 00    	jb     c0005ff8 <ff_wtoupper+0x1ac>
c0005eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ebe:	8d 50 02             	lea    edx,[eax+0x2]
c0005ec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ec5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ec8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ecd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ed2:	c1 e8 08             	shr    eax,0x8
c0005ed5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005eda:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005edf:	0f b6 c0             	movzx  eax,al
c0005ee2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ee7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005eec:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ef1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ef6:	01 ca                	add    edx,ecx
c0005ef8:	39 d0                	cmp    eax,edx
c0005efa:	0f 8d d4 00 00 00    	jge    c0005fd4 <ff_wtoupper+0x188>
c0005f00:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f05:	83 f8 08             	cmp    eax,0x8
c0005f08:	0f 87 e6 00 00 00    	ja     c0005ff4 <ff_wtoupper+0x1a8>
c0005f0e:	8b 04 85 60 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0da0]
c0005f15:	ff e0                	jmp    eax
c0005f17:	90                   	nop
c0005f18:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f1d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f22:	29 c2                	sub    edx,eax
c0005f24:	89 d0                	mov    eax,edx
c0005f26:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f2d:	01 d0                	add    eax,edx
c0005f2f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f32:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f37:	e9 94 00 00 00       	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f3c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f45:	89 d1                	mov    ecx,edx
c0005f47:	29 c1                	sub    ecx,eax
c0005f49:	89 c8                	mov    eax,ecx
c0005f4b:	83 e0 01             	and    eax,0x1
c0005f4e:	89 c2                	mov    edx,eax
c0005f50:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f55:	29 d0                	sub    eax,edx
c0005f57:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f5c:	eb 72                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f5e:	66 90                	xchg   ax,ax
c0005f60:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f65:	83 e8 10             	sub    eax,0x10
c0005f68:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6d:	eb 61                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f6f:	90                   	nop
c0005f70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f75:	83 e8 20             	sub    eax,0x20
c0005f78:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f7d:	eb 51                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f7f:	90                   	nop
c0005f80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f85:	83 e8 30             	sub    eax,0x30
c0005f88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f8d:	eb 41                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f8f:	90                   	nop
c0005f90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f95:	83 e8 1a             	sub    eax,0x1a
c0005f98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f9d:	eb 31                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005f9f:	90                   	nop
c0005fa0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fa5:	83 c0 08             	add    eax,0x8
c0005fa8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fad:	eb 21                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005faf:	90                   	nop
c0005fb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fb5:	83 e8 50             	sub    eax,0x50
c0005fb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fbd:	eb 11                	jmp    c0005fd0 <ff_wtoupper+0x184>
c0005fbf:	90                   	nop
c0005fc0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fc5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005fca:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fcf:	90                   	nop
c0005fd0:	eb 22                	jmp    c0005ff4 <ff_wtoupper+0x1a8>
c0005fd2:	66 90                	xchg   ax,ax
c0005fd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005fd9:	85 c0                	test   eax,eax
c0005fdb:	0f 85 a7 fe ff ff    	jne    c0005e88 <ff_wtoupper+0x3c>
c0005fe1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fe6:	d1 e0                	shl    eax,1
c0005fe8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005fec:	e9 97 fe ff ff       	jmp    c0005e88 <ff_wtoupper+0x3c>
c0005ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff4:	90                   	nop
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ffd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006001:	8d 76 00             	lea    esi,[esi+0x0]
c0006004:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006008:	83 c4 10             	add    esp,0x10
c000600b:	c3                   	ret    

c000600c <utf2ucs>:
c000600c:	57                   	push   edi
c000600d:	31 c9                	xor    ecx,ecx
c000600f:	56                   	push   esi
c0006010:	89 d7                	mov    edi,edx
c0006012:	53                   	push   ebx
c0006013:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006017:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c000601b:	89 de                	mov    esi,ebx
c000601d:	c1 fe 08             	sar    esi,0x8
c0006020:	89 f2                	mov    edx,esi
c0006022:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006025:	41                   	inc    ecx
c0006026:	85 db                	test   ebx,ebx
c0006028:	75 e9                	jne    c0006013 <utf2ucs+0x7>
c000602a:	5b                   	pop    ebx
c000602b:	5e                   	pop    esi
c000602c:	5f                   	pop    edi
c000602d:	c3                   	ret    

c000602e <ucs2utfn>:
c000602e:	83 e1 fe             	and    ecx,0xfffffffe
c0006031:	01 d1                	add    ecx,edx
c0006033:	39 d1                	cmp    ecx,edx
c0006035:	75 04                	jne    c000603b <ucs2utfn+0xd>
c0006037:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000603a:	c3                   	ret    
c000603b:	57                   	push   edi
c000603c:	56                   	push   esi
c000603d:	53                   	push   ebx
c000603e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006041:	83 c2 02             	add    edx,0x2
c0006044:	89 de                	mov    esi,ebx
c0006046:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000604a:	c1 e6 08             	shl    esi,0x8
c000604d:	09 f3                	or     ebx,esi
c000604f:	83 fb 3b             	cmp    ebx,0x3b
c0006052:	74 50                	je     c00060a4 <ucs2utfn+0x76>
c0006054:	83 fb 7f             	cmp    ebx,0x7f
c0006057:	7f 05                	jg     c000605e <ucs2utfn+0x30>
c0006059:	88 18                	mov    BYTE PTR [eax],bl
c000605b:	40                   	inc    eax
c000605c:	eb 42                	jmp    c00060a0 <ucs2utfn+0x72>
c000605e:	89 df                	mov    edi,ebx
c0006060:	89 de                	mov    esi,ebx
c0006062:	c1 fe 06             	sar    esi,0x6
c0006065:	83 e7 3f             	and    edi,0x3f
c0006068:	83 cf 80             	or     edi,0xffffff80
c000606b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006071:	7f 12                	jg     c0006085 <ucs2utfn+0x57>
c0006073:	83 ce c0             	or     esi,0xffffffc0
c0006076:	83 c0 02             	add    eax,0x2
c0006079:	89 f3                	mov    ebx,esi
c000607b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000607e:	89 fb                	mov    ebx,edi
c0006080:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006083:	eb 1b                	jmp    c00060a0 <ucs2utfn+0x72>
c0006085:	c1 fb 0c             	sar    ebx,0xc
c0006088:	83 e6 3f             	and    esi,0x3f
c000608b:	83 cb e0             	or     ebx,0xffffffe0
c000608e:	83 ce 80             	or     esi,0xffffff80
c0006091:	88 18                	mov    BYTE PTR [eax],bl
c0006093:	89 f3                	mov    ebx,esi
c0006095:	83 c0 03             	add    eax,0x3
c0006098:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000609b:	89 fb                	mov    ebx,edi
c000609d:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060a0:	39 d1                	cmp    ecx,edx
c00060a2:	75 9a                	jne    c000603e <ucs2utfn+0x10>
c00060a4:	5b                   	pop    ebx
c00060a5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00060a8:	5e                   	pop    esi
c00060a9:	5f                   	pop    edi
c00060aa:	c3                   	ret    

c00060ab <isjoliet>:
c00060ab:	31 d2                	xor    edx,edx
c00060ad:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00060b0:	75 26                	jne    c00060d8 <isjoliet+0x2d>
c00060b2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00060b6:	75 20                	jne    c00060d8 <isjoliet+0x2d>
c00060b8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00060bc:	ba 02 00 00 00       	mov    edx,0x2
c00060c1:	83 f8 43             	cmp    eax,0x43
c00060c4:	74 12                	je     c00060d8 <isjoliet+0x2d>
c00060c6:	83 f8 45             	cmp    eax,0x45
c00060c9:	ba 03 00 00 00       	mov    edx,0x3
c00060ce:	74 08                	je     c00060d8 <isjoliet+0x2d>
c00060d0:	31 d2                	xor    edx,edx
c00060d2:	83 f8 40             	cmp    eax,0x40
c00060d5:	0f 94 c2             	sete   dl
c00060d8:	89 d0                	mov    eax,edx
c00060da:	c3                   	ret    

c00060db <htohl_32>:
c00060db:	8b 00                	mov    eax,DWORD PTR [eax]
c00060dd:	c3                   	ret    

c00060de <iso_733>:
c00060de:	eb fb                	jmp    c00060db <htohl_32>

c00060e0 <bgrad_cache>:
c00060e0:	83 fa 0e             	cmp    edx,0xe
c00060e3:	77 16                	ja     c00060fb <bgrad_cache+0x1b>
c00060e5:	53                   	push   ebx
c00060e6:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00060e9:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00060ed:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00060f0:	42                   	inc    edx
c00060f1:	83 fa 0f             	cmp    edx,0xf
c00060f4:	75 f3                	jne    c00060e9 <bgrad_cache+0x9>
c00060f6:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00060f9:	5b                   	pop    ebx
c00060fa:	c3                   	ret    
c00060fb:	c3                   	ret    

c00060fc <ucscompare>:
c00060fc:	55                   	push   ebp
c00060fd:	57                   	push   edi
c00060fe:	89 c7                	mov    edi,eax
c0006100:	56                   	push   esi
c0006101:	89 d6                	mov    esi,edx
c0006103:	53                   	push   ebx
c0006104:	31 d2                	xor    edx,edx
c0006106:	83 ec 1c             	sub    esp,0x1c
c0006109:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000610d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006112:	c1 e3 08             	shl    ebx,0x8
c0006115:	09 c3                	or     ebx,eax
c0006117:	39 ca                	cmp    edx,ecx
c0006119:	7d 42                	jge    c000615d <ucscompare+0x61>
c000611b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000611f:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006123:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006127:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000612c:	c1 e0 08             	shl    eax,0x8
c000612f:	09 e8                	or     eax,ebp
c0006131:	83 f8 3b             	cmp    eax,0x3b
c0006134:	74 27                	je     c000615d <ucscompare+0x61>
c0006136:	83 ec 0c             	sub    esp,0xc
c0006139:	50                   	push   eax
c000613a:	e8 41 a8 ff ff       	call   c0000980 <tolower>
c000613f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006142:	89 c5                	mov    ebp,eax
c0006144:	e8 37 a8 ff ff       	call   c0000980 <tolower>
c0006149:	83 c4 10             	add    esp,0x10
c000614c:	39 c5                	cmp    ebp,eax
c000614e:	75 20                	jne    c0006170 <ucscompare+0x74>
c0006150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006154:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006158:	83 c2 02             	add    edx,0x2
c000615b:	eb ac                	jmp    c0006109 <ucscompare+0xd>
c000615d:	83 fb 2f             	cmp    ebx,0x2f
c0006160:	0f 95 c2             	setne  dl
c0006163:	31 c0                	xor    eax,eax
c0006165:	85 db                	test   ebx,ebx
c0006167:	0f 95 c0             	setne  al
c000616a:	21 d0                	and    eax,edx
c000616c:	f7 d8                	neg    eax
c000616e:	eb 03                	jmp    c0006173 <ucscompare+0x77>
c0006170:	83 c8 ff             	or     eax,0xffffffff
c0006173:	83 c4 1c             	add    esp,0x1c
c0006176:	5b                   	pop    ebx
c0006177:	5e                   	pop    esi
c0006178:	5f                   	pop    edi
c0006179:	5d                   	pop    ebp
c000617a:	c3                   	ret    

c000617b <fncompare>:
c000617b:	55                   	push   ebp
c000617c:	57                   	push   edi
c000617d:	89 c7                	mov    edi,eax
c000617f:	56                   	push   esi
c0006180:	89 ce                	mov    esi,ecx
c0006182:	53                   	push   ebx
c0006183:	31 db                	xor    ebx,ebx
c0006185:	83 ec 1c             	sub    esp,0x1c
c0006188:	39 d3                	cmp    ebx,edx
c000618a:	7d 45                	jge    c00061d1 <fncompare+0x56>
c000618c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006190:	83 f8 3b             	cmp    eax,0x3b
c0006193:	74 3c                	je     c00061d1 <fncompare+0x56>
c0006195:	83 f8 2e             	cmp    eax,0x2e
c0006198:	75 0e                	jne    c00061a8 <fncompare+0x2d>
c000619a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000619d:	39 d9                	cmp    ecx,ebx
c000619f:	74 30                	je     c00061d1 <fncompare+0x56>
c00061a1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00061a6:	74 29                	je     c00061d1 <fncompare+0x56>
c00061a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061ac:	83 ec 0c             	sub    esp,0xc
c00061af:	50                   	push   eax
c00061b0:	e8 cb a7 ff ff       	call   c0000980 <tolower>
c00061b5:	89 c5                	mov    ebp,eax
c00061b7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00061bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00061be:	e8 bd a7 ff ff       	call   c0000980 <tolower>
c00061c3:	83 c4 10             	add    esp,0x10
c00061c6:	39 c5                	cmp    ebp,eax
c00061c8:	75 1e                	jne    c00061e8 <fncompare+0x6d>
c00061ca:	43                   	inc    ebx
c00061cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00061cf:	eb b7                	jmp    c0006188 <fncompare+0xd>
c00061d1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00061d5:	83 fa 2f             	cmp    edx,0x2f
c00061d8:	0f 95 c1             	setne  cl
c00061db:	31 c0                	xor    eax,eax
c00061dd:	85 d2                	test   edx,edx
c00061df:	0f 95 c0             	setne  al
c00061e2:	21 c8                	and    eax,ecx
c00061e4:	f7 d8                	neg    eax
c00061e6:	eb 03                	jmp    c00061eb <fncompare+0x70>
c00061e8:	83 c8 ff             	or     eax,0xffffffff
c00061eb:	83 c4 1c             	add    esp,0x1c
c00061ee:	5b                   	pop    ebx
c00061ef:	5e                   	pop    esi
c00061f0:	5f                   	pop    edi
c00061f1:	5d                   	pop    ebp
c00061f2:	c3                   	ret    

c00061f3 <bclear_cache>:
c00061f3:	83 ec 18             	sub    esp,0x18
c00061f6:	68 60 f6 02 c0       	push   0xc002f660
c00061fb:	e8 84 2d 02 00       	call   c0028f84 <iso_kprintf>
c0006200:	83 c4 10             	add    esp,0x10
c0006203:	31 c0                	xor    eax,eax
c0006205:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c000620c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006212:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006219:	40                   	inc    eax
c000621a:	83 f8 10             	cmp    eax,0x10
c000621d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006223:	75 e0                	jne    c0006205 <bclear_cache+0x12>
c0006225:	83 c4 0c             	add    esp,0xc
c0006228:	c3                   	ret    

c0006229 <bclear>:
c0006229:	eb c8                	jmp    c00061f3 <bclear_cache>

c000622b <iso_break_all>:
c000622b:	83 ec 18             	sub    esp,0x18
c000622e:	68 6e f6 02 c0       	push   0xc002f66e
c0006233:	e8 4c 2d 02 00       	call   c0028f84 <iso_kprintf>
c0006238:	83 c4 10             	add    esp,0x10
c000623b:	31 c0                	xor    eax,eax
c000623d:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c0006247:	05 94 00 00 00       	add    eax,0x94
c000624c:	3d 40 09 00 00       	cmp    eax,0x940
c0006251:	75 ea                	jne    c000623d <iso_break_all+0x12>
c0006253:	83 c4 0c             	add    esp,0xc
c0006256:	c3                   	ret    

c0006257 <isoReadDiscSector>:
c0006257:	83 ec 0c             	sub    esp,0xc
c000625a:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006261:	50                   	push   eax
c0006262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000626a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000626e:	e8 b5 2c 02 00       	call   c0028f28 <isoReadDiscSectorHelper>
c0006273:	83 c4 1c             	add    esp,0x1c
c0006276:	c3                   	ret    

c0006277 <bread_cache>:
c0006277:	55                   	push   ebp
c0006278:	57                   	push   edi
c0006279:	89 d7                	mov    edi,edx
c000627b:	56                   	push   esi
c000627c:	ba 0f 00 00 00       	mov    edx,0xf
c0006281:	53                   	push   ebx
c0006282:	89 c6                	mov    esi,eax
c0006284:	83 ec 0c             	sub    esp,0xc
c0006287:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000628a:	39 38                	cmp    DWORD PTR [eax],edi
c000628c:	74 3c                	je     c00062ca <bread_cache+0x53>
c000628e:	4a                   	dec    edx
c000628f:	83 fa ff             	cmp    edx,0xffffffff
c0006292:	75 f3                	jne    c0006287 <bread_cache+0x10>
c0006294:	31 db                	xor    ebx,ebx
c0006296:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006299:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000629c:	74 08                	je     c00062a6 <bread_cache+0x2f>
c000629e:	43                   	inc    ebx
c000629f:	83 fb 10             	cmp    ebx,0x10
c00062a2:	75 f2                	jne    c0006296 <bread_cache+0x1f>
c00062a4:	31 db                	xor    ebx,ebx
c00062a6:	50                   	push   eax
c00062a7:	6a 01                	push   0x1
c00062a9:	57                   	push   edi
c00062aa:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00062ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062b0:	83 c0 04             	add    eax,0x4
c00062b3:	50                   	push   eax
c00062b4:	e8 9e ff ff ff       	call   c0006257 <isoReadDiscSector>
c00062b9:	83 c4 10             	add    esp,0x10
c00062bc:	83 c9 ff             	or     ecx,0xffffffff
c00062bf:	85 c0                	test   eax,eax
c00062c1:	78 13                	js     c00062d6 <bread_cache+0x5f>
c00062c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062c6:	89 da                	mov    edx,ebx
c00062c8:	89 38                	mov    DWORD PTR [eax],edi
c00062ca:	89 f0                	mov    eax,esi
c00062cc:	e8 0f fe ff ff       	call   c00060e0 <bgrad_cache>
c00062d1:	b9 0f 00 00 00       	mov    ecx,0xf
c00062d6:	83 c4 0c             	add    esp,0xc
c00062d9:	89 c8                	mov    eax,ecx
c00062db:	5b                   	pop    ebx
c00062dc:	5e                   	pop    esi
c00062dd:	5f                   	pop    edi
c00062de:	5d                   	pop    ebp
c00062df:	c3                   	ret    

c00062e0 <biread>:
c00062e0:	89 c2                	mov    edx,eax
c00062e2:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00062e7:	eb 8e                	jmp    c0006277 <bread_cache>

c00062e9 <bdread>:
c00062e9:	89 c2                	mov    edx,eax
c00062eb:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00062f0:	eb 85                	jmp    c0006277 <bread_cache>

c00062f2 <strnicmp>:
c00062f2:	55                   	push   ebp
c00062f3:	57                   	push   edi
c00062f4:	31 ff                	xor    edi,edi
c00062f6:	56                   	push   esi
c00062f7:	53                   	push   ebx
c00062f8:	83 ec 0c             	sub    esp,0xc
c00062fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00062ff:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006303:	74 43                	je     c0006348 <strnicmp+0x56>
c0006305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006309:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000630d:	85 c0                	test   eax,eax
c000630f:	74 37                	je     c0006348 <strnicmp+0x56>
c0006311:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006315:	85 d2                	test   edx,edx
c0006317:	74 2f                	je     c0006348 <strnicmp+0x56>
c0006319:	8d 6f 01             	lea    ebp,[edi+0x1]
c000631c:	39 d0                	cmp    eax,edx
c000631e:	75 04                	jne    c0006324 <strnicmp+0x32>
c0006320:	89 ef                	mov    edi,ebp
c0006322:	eb db                	jmp    c00062ff <strnicmp+0xd>
c0006324:	83 ec 0c             	sub    esp,0xc
c0006327:	50                   	push   eax
c0006328:	e8 53 a6 ff ff       	call   c0000980 <tolower>
c000632d:	89 c3                	mov    ebx,eax
c000632f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006333:	89 ef                	mov    edi,ebp
c0006335:	89 04 24             	mov    DWORD PTR [esp],eax
c0006338:	e8 43 a6 ff ff       	call   c0000980 <tolower>
c000633d:	83 c4 10             	add    esp,0x10
c0006340:	29 c3                	sub    ebx,eax
c0006342:	89 d8                	mov    eax,ebx
c0006344:	74 b9                	je     c00062ff <strnicmp+0xd>
c0006346:	eb 02                	jmp    c000634a <strnicmp+0x58>
c0006348:	31 c0                	xor    eax,eax
c000634a:	83 c4 0c             	add    esp,0xc
c000634d:	5b                   	pop    ebx
c000634e:	5e                   	pop    esi
c000634f:	5f                   	pop    edi
c0006350:	5d                   	pop    ebp
c0006351:	c3                   	ret    

c0006352 <find_object>:
c0006352:	55                   	push   ebp
c0006353:	57                   	push   edi
c0006354:	89 c7                	mov    edi,eax
c0006356:	56                   	push   esi
c0006357:	53                   	push   ebx
c0006358:	89 d3                	mov    ebx,edx
c000635a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006360:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006364:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000636b:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006372:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006376:	74 0b                	je     c0006383 <find_object+0x31>
c0006378:	8d 44 24 20          	lea    eax,[esp+0x20]
c000637c:	89 fa                	mov    edx,edi
c000637e:	e8 89 fc ff ff       	call   c000600c <utf2ucs>
c0006383:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006386:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000638f:	7e 11                	jle    c00063a2 <find_object+0x50>
c0006391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006395:	e8 46 ff ff ff       	call   c00062e0 <biread>
c000639a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000639e:	85 c0                	test   eax,eax
c00063a0:	79 07                	jns    c00063a9 <find_object+0x57>
c00063a2:	31 db                	xor    ebx,ebx
c00063a4:	e9 47 01 00 00       	jmp    c00064f0 <find_object+0x19e>
c00063a9:	31 ed                	xor    ebp,ebp
c00063ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00063af:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00063b6:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00063ba:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00063bd:	85 f6                	test   esi,esi
c00063bf:	75 0e                	jne    c00063cf <find_object+0x7d>
c00063c1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00063c5:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00063cd:	eb bb                	jmp    c000638a <find_object+0x38>
c00063cf:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c00063d5:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063d9:	85 c9                	test   ecx,ecx
c00063db:	89 d0                	mov    eax,edx
c00063dd:	74 2b                	je     c000640a <find_object+0xb8>
c00063df:	8d 43 21             	lea    eax,[ebx+0x21]
c00063e2:	89 d1                	mov    ecx,edx
c00063e4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00063e8:	e8 0f fd ff ff       	call   c00060fc <ucscompare>
c00063ed:	85 c0                	test   eax,eax
c00063ef:	0f 84 cd 00 00 00    	je     c00064c2 <find_object+0x170>
c00063f5:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00063f8:	01 c5                	add    ebp,eax
c00063fa:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006400:	7f bf                	jg     c00063c1 <find_object+0x6f>
c0006402:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006406:	7f a3                	jg     c00063ab <find_object+0x59>
c0006408:	eb b7                	jmp    c00063c1 <find_object+0x6f>
c000640a:	29 d6                	sub    esi,edx
c000640c:	a8 01                	test   al,0x1
c000640e:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c0006412:	74 05                	je     c0006419 <find_object+0xc7>
c0006414:	83 ee 21             	sub    esi,0x21
c0006417:	eb 6a                	jmp    c0006483 <find_object+0x131>
c0006419:	42                   	inc    edx
c000641a:	83 ee 22             	sub    esi,0x22
c000641d:	eb 64                	jmp    c0006483 <find_object+0x131>
c000641f:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006422:	48                   	dec    eax
c0006423:	3c 01                	cmp    al,0x1
c0006425:	77 61                	ja     c0006488 <find_object+0x136>
c0006427:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000642b:	50                   	push   eax
c000642c:	6a 02                	push   0x2
c000642e:	68 7d f6 02 c0       	push   0xc002f67d
c0006433:	52                   	push   edx
c0006434:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006438:	e8 d3 a3 ff ff       	call   c0000810 <strncmp>
c000643d:	83 c4 10             	add    esp,0x10
c0006440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006444:	85 c0                	test   eax,eax
c0006446:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000644a:	75 2f                	jne    c000647b <find_object+0x129>
c000644c:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c0006450:	50                   	push   eax
c0006451:	8d 42 05             	lea    eax,[edx+0x5]
c0006454:	83 e9 05             	sub    ecx,0x5
c0006457:	51                   	push   ecx
c0006458:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000645c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006460:	50                   	push   eax
c0006461:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006465:	50                   	push   eax
c0006466:	e8 25 a2 ff ff       	call   c0000690 <strncpy>
c000646b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000646f:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000647b:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000647f:	29 c6                	sub    esi,eax
c0006481:	01 c2                	add    edx,eax
c0006483:	83 fe 03             	cmp    esi,0x3
c0006486:	7f 97                	jg     c000641f <find_object+0xcd>
c0006488:	85 c9                	test   ecx,ecx
c000648a:	7e 40                	jle    c00064cc <find_object+0x17a>
c000648c:	51                   	push   ecx
c000648d:	51                   	push   ecx
c000648e:	6a 2f                	push   0x2f
c0006490:	57                   	push   edi
c0006491:	e8 3a a3 ff ff       	call   c00007d0 <strchr>
c0006496:	83 c4 10             	add    esp,0x10
c0006499:	85 c0                	test   eax,eax
c000649b:	74 04                	je     c00064a1 <find_object+0x14f>
c000649d:	29 f8                	sub    eax,edi
c000649f:	eb 0c                	jmp    c00064ad <find_object+0x15b>
c00064a1:	83 ec 0c             	sub    esp,0xc
c00064a4:	57                   	push   edi
c00064a5:	e8 d6 a0 ff ff       	call   c0000580 <strlen>
c00064aa:	83 c4 10             	add    esp,0x10
c00064ad:	52                   	push   edx
c00064ae:	50                   	push   eax
c00064af:	57                   	push   edi
c00064b0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064b4:	50                   	push   eax
c00064b5:	e8 38 fe ff ff       	call   c00062f2 <strnicmp>
c00064ba:	83 c4 10             	add    esp,0x10
c00064bd:	e9 2b ff ff ff       	jmp    c00063ed <find_object+0x9b>
c00064c2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064c6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00064ca:	eb 1e                	jmp    c00064ea <find_object+0x198>
c00064cc:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00064d0:	8d 43 21             	lea    eax,[ebx+0x21]
c00064d3:	89 f9                	mov    ecx,edi
c00064d5:	e8 a1 fc ff ff       	call   c000617b <fncompare>
c00064da:	85 c0                	test   eax,eax
c00064dc:	0f 85 13 ff ff ff    	jne    c00063f5 <find_object+0xa3>
c00064e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064e6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00064ea:	0f 85 05 ff ff ff    	jne    c00063f5 <find_object+0xa3>
c00064f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00064f6:	89 d8                	mov    eax,ebx
c00064f8:	5b                   	pop    ebx
c00064f9:	5e                   	pop    esi
c00064fa:	5f                   	pop    edi
c00064fb:	5d                   	pop    ebp
c00064fc:	c3                   	ret    

c00064fd <find_object_path>:
c00064fd:	55                   	push   ebp
c00064fe:	57                   	push   edi
c00064ff:	89 d7                	mov    edi,edx
c0006501:	56                   	push   esi
c0006502:	89 c6                	mov    esi,eax
c0006504:	53                   	push   ebx
c0006505:	89 cb                	mov    ebx,ecx
c0006507:	83 ec 0c             	sub    esp,0xc
c000650a:	50                   	push   eax
c000650b:	50                   	push   eax
c000650c:	6a 2f                	push   0x2f
c000650e:	56                   	push   esi
c000650f:	e8 bc a2 ff ff       	call   c00007d0 <strchr>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	85 c0                	test   eax,eax
c0006519:	89 c5                	mov    ebp,eax
c000651b:	74 3a                	je     c0006557 <find_object_path+0x5a>
c000651d:	39 ee                	cmp    esi,ebp
c000651f:	74 31                	je     c0006552 <find_object_path+0x55>
c0006521:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006524:	e8 b5 fb ff ff       	call   c00060de <iso_733>
c0006529:	89 c2                	mov    edx,eax
c000652b:	8d 43 02             	lea    eax,[ebx+0x2]
c000652e:	e8 ab fb ff ff       	call   c00060de <iso_733>
c0006533:	83 ec 0c             	sub    esp,0xc
c0006536:	52                   	push   edx
c0006537:	89 c1                	mov    ecx,eax
c0006539:	ba 01 00 00 00       	mov    edx,0x1
c000653e:	89 f0                	mov    eax,esi
c0006540:	e8 0d fe ff ff       	call   c0006352 <find_object>
c0006545:	83 c4 10             	add    esp,0x10
c0006548:	85 c0                	test   eax,eax
c000654a:	89 c3                	mov    ebx,eax
c000654c:	75 04                	jne    c0006552 <find_object_path+0x55>
c000654e:	31 db                	xor    ebx,ebx
c0006550:	eb 36                	jmp    c0006588 <find_object_path+0x8b>
c0006552:	8d 75 01             	lea    esi,[ebp+0x1]
c0006555:	eb b3                	jmp    c000650a <find_object_path+0xd>
c0006557:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000655a:	74 28                	je     c0006584 <find_object_path+0x87>
c000655c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000655f:	e8 7a fb ff ff       	call   c00060de <iso_733>
c0006564:	89 c2                	mov    edx,eax
c0006566:	8d 43 02             	lea    eax,[ebx+0x2]
c0006569:	e8 70 fb ff ff       	call   c00060de <iso_733>
c000656e:	83 ec 0c             	sub    esp,0xc
c0006571:	52                   	push   edx
c0006572:	89 c1                	mov    ecx,eax
c0006574:	89 fa                	mov    edx,edi
c0006576:	89 f0                	mov    eax,esi
c0006578:	e8 d5 fd ff ff       	call   c0006352 <find_object>
c000657d:	83 c4 10             	add    esp,0x10
c0006580:	89 c3                	mov    ebx,eax
c0006582:	eb 04                	jmp    c0006588 <find_object_path+0x8b>
c0006584:	85 ff                	test   edi,edi
c0006586:	74 c6                	je     c000654e <find_object_path+0x51>
c0006588:	83 c4 0c             	add    esp,0xc
c000658b:	89 d8                	mov    eax,ebx
c000658d:	5b                   	pop    ebx
c000658e:	5e                   	pop    esi
c000658f:	5f                   	pop    edi
c0006590:	5d                   	pop    ebp
c0006591:	c3                   	ret    

c0006592 <stricmp>:
c0006592:	57                   	push   edi
c0006593:	56                   	push   esi
c0006594:	31 f6                	xor    esi,esi
c0006596:	53                   	push   ebx
c0006597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000659b:	83 ec 0c             	sub    esp,0xc
c000659e:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00065a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065a6:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00065aa:	46                   	inc    esi
c00065ab:	50                   	push   eax
c00065ac:	e8 af a3 ff ff       	call   c0000960 <toupper>
c00065b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065b4:	e8 c7 a3 ff ff       	call   c0000980 <tolower>
c00065b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00065bc:	89 c3                	mov    ebx,eax
c00065be:	e8 9d a3 ff ff       	call   c0000960 <toupper>
c00065c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00065c6:	e8 b5 a3 ff ff       	call   c0000980 <tolower>
c00065cb:	83 c4 10             	add    esp,0x10
c00065ce:	39 c3                	cmp    ebx,eax
c00065d0:	75 04                	jne    c00065d6 <stricmp+0x44>
c00065d2:	85 db                	test   ebx,ebx
c00065d4:	75 c1                	jne    c0006597 <stricmp+0x5>
c00065d6:	29 c3                	sub    ebx,eax
c00065d8:	89 d8                	mov    eax,ebx
c00065da:	5b                   	pop    ebx
c00065db:	5e                   	pop    esi
c00065dc:	5f                   	pop    edi
c00065dd:	c3                   	ret    

c00065de <iso_open>:
c00065de:	57                   	push   edi
c00065df:	31 c0                	xor    eax,eax
c00065e1:	56                   	push   esi
c00065e2:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00065e7:	53                   	push   ebx
c00065e8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00065ed:	0f 95 c0             	setne  al
c00065f0:	89 c2                	mov    edx,eax
c00065f2:	89 c6                	mov    esi,eax
c00065f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00065f8:	e8 00 ff ff ff       	call   c00064fd <find_object_path>
c00065fd:	83 ca ff             	or     edx,0xffffffff
c0006600:	85 c0                	test   eax,eax
c0006602:	74 5e                	je     c0006662 <iso_open+0x84>
c0006604:	89 c1                	mov    ecx,eax
c0006606:	31 d2                	xor    edx,edx
c0006608:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000660e:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006615:	75 42                	jne    c0006659 <iso_open+0x7b>
c0006617:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006621:	8d 41 02             	lea    eax,[ecx+0x2]
c0006624:	e8 b5 fa ff ff       	call   c00060de <iso_733>
c0006629:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c000662f:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006639:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c000663f:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006642:	e8 97 fa ff ff       	call   c00060de <iso_733>
c0006647:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006651:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c0006657:	eb 09                	jmp    c0006662 <iso_open+0x84>
c0006659:	42                   	inc    edx
c000665a:	83 fa 10             	cmp    edx,0x10
c000665d:	75 a9                	jne    c0006608 <iso_open+0x2a>
c000665f:	83 ca ff             	or     edx,0xffffffff
c0006662:	5b                   	pop    ebx
c0006663:	89 d0                	mov    eax,edx
c0006665:	5e                   	pop    esi
c0006666:	5f                   	pop    edi
c0006667:	c3                   	ret    

c0006668 <iso_close>:
c0006668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000666c:	83 f8 0f             	cmp    eax,0xf
c000666f:	7f 10                	jg     c0006681 <iso_close+0x19>
c0006671:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006677:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006681:	e9 6d fb ff ff       	jmp    c00061f3 <bclear_cache>

c0006686 <iso_read>:
c0006686:	55                   	push   ebp
c0006687:	57                   	push   edi
c0006688:	56                   	push   esi
c0006689:	53                   	push   ebx
c000668a:	83 ec 1c             	sub    esp,0x1c
c000668d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006691:	83 fd 0f             	cmp    ebp,0xf
c0006694:	7e 0a                	jle    c00066a0 <iso_read+0x1a>
c0006696:	83 c8 ff             	or     eax,0xffffffff
c0006699:	89 c2                	mov    edx,eax
c000669b:	e9 f4 00 00 00       	jmp    c0006794 <iso_read+0x10e>
c00066a0:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00066a6:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00066ad:	74 e7                	je     c0006696 <iso_read+0x10>
c00066af:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00066b5:	85 d2                	test   edx,edx
c00066b7:	75 dd                	jne    c0006696 <iso_read+0x10>
c00066b9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00066be:	0f 84 cd 00 00 00    	je     c0006791 <iso_read+0x10b>
c00066c4:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00066ca:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c00066d0:	29 c3                	sub    ebx,eax
c00066d2:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00066d6:	89 d9                	mov    ecx,ebx
c00066d8:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00066dd:	85 c9                	test   ecx,ecx
c00066df:	0f 84 ac 00 00 00    	je     c0006791 <iso_read+0x10b>
c00066e5:	89 c6                	mov    esi,eax
c00066e7:	bb 00 08 00 00       	mov    ebx,0x800
c00066ec:	c1 e8 0b             	shr    eax,0xb
c00066ef:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00066f5:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00066fb:	29 f3                	sub    ebx,esi
c00066fd:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006703:	75 3f                	jne    c0006744 <iso_read+0xbe>
c0006705:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000670b:	7e 37                	jle    c0006744 <iso_read+0xbe>
c000670d:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006713:	be 20 00 00 00       	mov    esi,0x20
c0006718:	7f 05                	jg     c000671f <iso_read+0x99>
c000671a:	89 ce                	mov    esi,ecx
c000671c:	c1 fe 0b             	sar    esi,0xb
c000671f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006723:	89 f3                	mov    ebx,esi
c0006725:	52                   	push   edx
c0006726:	56                   	push   esi
c0006727:	50                   	push   eax
c0006728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000672c:	c1 e3 0b             	shl    ebx,0xb
c000672f:	e8 23 fb ff ff       	call   c0006257 <isoReadDiscSector>
c0006734:	83 c4 10             	add    esp,0x10
c0006737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000673b:	85 c0                	test   eax,eax
c000673d:	7f 3d                	jg     c000677c <iso_read+0xf6>
c000673f:	e9 52 ff ff ff       	jmp    c0006696 <iso_read+0x10>
c0006744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006748:	39 d9                	cmp    ecx,ebx
c000674a:	0f 4e d9             	cmovle ebx,ecx
c000674d:	e8 97 fb ff ff       	call   c00062e9 <bdread>
c0006752:	85 c0                	test   eax,eax
c0006754:	0f 88 3c ff ff ff    	js     c0006696 <iso_read+0x10>
c000675a:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006761:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006767:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000676b:	25 ff 07 00 00       	and    eax,0x7ff
c0006770:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006774:	89 d9                	mov    ecx,ebx
c0006776:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000677c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006780:	01 da                	add    edx,ebx
c0006782:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006788:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000678c:	e9 28 ff ff ff       	jmp    c00066b9 <iso_read+0x33>
c0006791:	89 d0                	mov    eax,edx
c0006793:	99                   	cdq    
c0006794:	83 c4 1c             	add    esp,0x1c
c0006797:	5b                   	pop    ebx
c0006798:	5e                   	pop    esi
c0006799:	5f                   	pop    edi
c000679a:	5d                   	pop    ebp
c000679b:	c3                   	ret    

c000679c <iso_seek>:
c000679c:	55                   	push   ebp
c000679d:	83 c8 ff             	or     eax,0xffffffff
c00067a0:	57                   	push   edi
c00067a1:	89 c2                	mov    edx,eax
c00067a3:	56                   	push   esi
c00067a4:	53                   	push   ebx
c00067a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00067a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00067ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067b1:	83 fe 0f             	cmp    esi,0xf
c00067b4:	7f 65                	jg     c000681b <iso_seek+0x7f>
c00067b6:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00067bc:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067c3:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00067c9:	74 50                	je     c000681b <iso_seek+0x7f>
c00067cb:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00067d2:	75 47                	jne    c000681b <iso_seek+0x7f>
c00067d4:	83 fb 01             	cmp    ebx,0x1
c00067d7:	74 0e                	je     c00067e7 <iso_seek+0x4b>
c00067d9:	83 fb 02             	cmp    ebx,0x2
c00067dc:	74 0e                	je     c00067ec <iso_seek+0x50>
c00067de:	85 db                	test   ebx,ebx
c00067e0:	75 39                	jne    c000681b <iso_seek+0x7f>
c00067e2:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00067e5:	eb 0d                	jmp    c00067f4 <iso_seek+0x58>
c00067e7:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00067ea:	eb 08                	jmp    c00067f4 <iso_seek+0x58>
c00067ec:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00067ef:	01 f8                	add    eax,edi
c00067f1:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00067f4:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00067fa:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006800:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006805:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006808:	76 03                	jbe    c000680d <iso_seek+0x71>
c000680a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000680d:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006813:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006819:	31 d2                	xor    edx,edx
c000681b:	5b                   	pop    ebx
c000681c:	5e                   	pop    esi
c000681d:	5f                   	pop    edi
c000681e:	5d                   	pop    ebp
c000681f:	c3                   	ret    

c0006820 <iso_tell>:
c0006820:	53                   	push   ebx
c0006821:	83 c8 ff             	or     eax,0xffffffff
c0006824:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006828:	89 c2                	mov    edx,eax
c000682a:	83 f9 0f             	cmp    ecx,0xf
c000682d:	7f 20                	jg     c000684f <iso_tell+0x2f>
c000682f:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006835:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000683c:	74 11                	je     c000684f <iso_tell+0x2f>
c000683e:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006845:	75 08                	jne    c000684f <iso_tell+0x2f>
c0006847:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c000684d:	31 d2                	xor    edx,edx
c000684f:	5b                   	pop    ebx
c0006850:	c3                   	ret    

c0006851 <iso_total>:
c0006851:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006855:	83 c8 ff             	or     eax,0xffffffff
c0006858:	83 fa 0f             	cmp    edx,0xf
c000685b:	7f 1e                	jg     c000687b <iso_total+0x2a>
c000685d:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006863:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000686a:	74 0f                	je     c000687b <iso_total+0x2a>
c000686c:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006873:	75 06                	jne    c000687b <iso_total+0x2a>
c0006875:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000687b:	c3                   	ret    

c000687c <fn_postprocess>:
c000687c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006880:	89 d0                	mov    eax,edx
c0006882:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006885:	85 c9                	test   ecx,ecx
c0006887:	74 08                	je     c0006891 <fn_postprocess+0x15>
c0006889:	83 f9 3b             	cmp    ecx,0x3b
c000688c:	74 03                	je     c0006891 <fn_postprocess+0x15>
c000688e:	40                   	inc    eax
c000688f:	eb f1                	jmp    c0006882 <fn_postprocess+0x6>
c0006891:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006894:	39 d0                	cmp    eax,edx
c0006896:	76 0a                	jbe    c00068a2 <fn_postprocess+0x26>
c0006898:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000689c:	75 04                	jne    c00068a2 <fn_postprocess+0x26>
c000689e:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00068a2:	c3                   	ret    

c00068a3 <iso_readdir>:
c00068a3:	55                   	push   ebp
c00068a4:	57                   	push   edi
c00068a5:	56                   	push   esi
c00068a6:	53                   	push   ebx
c00068a7:	83 ec 1c             	sub    esp,0x1c
c00068aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00068ae:	83 fb 0f             	cmp    ebx,0xf
c00068b1:	7f 28                	jg     c00068db <iso_readdir+0x38>
c00068b3:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00068b9:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00068c0:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00068c6:	74 13                	je     c00068db <iso_readdir+0x38>
c00068c8:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00068cc:	74 0d                	je     c00068db <iso_readdir+0x38>
c00068ce:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00068d5:	0f 84 b1 00 00 00    	je     c000698c <iso_readdir+0xe9>
c00068db:	83 ec 0c             	sub    esp,0xc
c00068de:	68 80 f6 02 c0       	push   0xc002f680
c00068e3:	e8 9c 26 02 00       	call   c0028f84 <iso_kprintf>
c00068e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00068eb:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00068f1:	e8 aa 26 02 00       	call   c0028fa0 <iso_kprintfd>
c00068f6:	c7 04 24 85 f6 02 c0 	mov    DWORD PTR [esp],0xc002f685
c00068fd:	e8 82 26 02 00       	call   c0028f84 <iso_kprintf>
c0006902:	58                   	pop    eax
c0006903:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006909:	e8 92 26 02 00       	call   c0028fa0 <iso_kprintfd>
c000690e:	c7 04 24 8b f6 02 c0 	mov    DWORD PTR [esp],0xc002f68b
c0006915:	e8 6a 26 02 00       	call   c0028f84 <iso_kprintf>
c000691a:	58                   	pop    eax
c000691b:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006921:	e8 7a 26 02 00       	call   c0028fa0 <iso_kprintfd>
c0006926:	c7 04 24 91 f6 02 c0 	mov    DWORD PTR [esp],0xc002f691
c000692d:	e8 52 26 02 00       	call   c0028f84 <iso_kprintf>
c0006932:	58                   	pop    eax
c0006933:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006939:	e8 62 26 02 00       	call   c0028fa0 <iso_kprintfd>
c000693e:	83 c4 10             	add    esp,0x10
c0006941:	eb 42                	jmp    c0006985 <iso_readdir+0xe2>
c0006943:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006946:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c000694d:	89 d1                	mov    ecx,edx
c000694f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006955:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006959:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000695c:	75 35                	jne    c0006993 <iso_readdir+0xf0>
c000695e:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006964:	81 c2 00 08 00 00    	add    edx,0x800
c000696a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000696d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006970:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006973:	73 1e                	jae    c0006993 <iso_readdir+0xf0>
c0006975:	8b 07                	mov    eax,DWORD PTR [edi]
c0006977:	c1 ea 0b             	shr    edx,0xb
c000697a:	01 d0                	add    eax,edx
c000697c:	e8 5f f9 ff ff       	call   c00062e0 <biread>
c0006981:	85 c0                	test   eax,eax
c0006983:	79 be                	jns    c0006943 <iso_readdir+0xa0>
c0006985:	31 c0                	xor    eax,eax
c0006987:	e9 6a 01 00 00       	jmp    c0006af6 <iso_readdir+0x253>
c000698c:	31 f6                	xor    esi,esi
c000698e:	83 c8 ff             	or     eax,0xffffffff
c0006991:	eb da                	jmp    c000696d <iso_readdir+0xca>
c0006993:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006999:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c000699f:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c00069a5:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00069a8:	73 db                	jae    c0006985 <iso_readdir+0xe2>
c00069aa:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00069ae:	75 34                	jne    c00069e4 <iso_readdir+0x141>
c00069b0:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00069b4:	75 2e                	jne    c00069e4 <iso_readdir+0x141>
c00069b6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00069b9:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c00069c0:	01 f9                	add    ecx,edi
c00069c2:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00069c5:	89 c8                	mov    eax,ecx
c00069c7:	25 ff 07 00 00       	and    eax,0x7ff
c00069cc:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00069d1:	01 c8                	add    eax,ecx
c00069d3:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00069d6:	25 ff 07 00 00       	and    eax,0x7ff
c00069db:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00069df:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00069e2:	74 a1                	je     c0006985 <iso_readdir+0xe2>
c00069e4:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00069ea:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00069ee:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00069f5:	8d 56 21             	lea    edx,[esi+0x21]
c00069f8:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c00069fe:	74 0c                	je     c0006a0c <iso_readdir+0x169>
c0006a00:	89 e8                	mov    eax,ebp
c0006a02:	e8 27 f6 ff ff       	call   c000602e <ucs2utfn>
c0006a07:	e9 b1 00 00 00       	jmp    c0006abd <iso_readdir+0x21a>
c0006a0c:	50                   	push   eax
c0006a0d:	51                   	push   ecx
c0006a0e:	52                   	push   edx
c0006a0f:	55                   	push   ebp
c0006a10:	e8 7b 9c ff ff       	call   c0000690 <strncpy>
c0006a15:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006a19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a1c:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006a24:	e8 53 fe ff ff       	call   c000687c <fn_postprocess>
c0006a29:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a2d:	83 c4 10             	add    esp,0x10
c0006a30:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a33:	89 d1                	mov    ecx,edx
c0006a35:	29 d0                	sub    eax,edx
c0006a37:	80 e1 01             	and    cl,0x1
c0006a3a:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006a3e:	74 05                	je     c0006a45 <iso_readdir+0x1a2>
c0006a40:	83 e8 21             	sub    eax,0x21
c0006a43:	eb 04                	jmp    c0006a49 <iso_readdir+0x1a6>
c0006a45:	42                   	inc    edx
c0006a46:	83 e8 22             	sub    eax,0x22
c0006a49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a4d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006a57:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006a5c:	7e 5f                	jle    c0006abd <iso_readdir+0x21a>
c0006a5e:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006a61:	48                   	dec    eax
c0006a62:	3c 01                	cmp    al,0x1
c0006a64:	77 57                	ja     c0006abd <iso_readdir+0x21a>
c0006a66:	51                   	push   ecx
c0006a67:	6a 02                	push   0x2
c0006a69:	68 7d f6 02 c0       	push   0xc002f67d
c0006a6e:	52                   	push   edx
c0006a6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006a73:	e8 98 9d ff ff       	call   c0000810 <strncmp>
c0006a78:	83 c4 10             	add    esp,0x10
c0006a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006a7f:	85 c0                	test   eax,eax
c0006a81:	75 2e                	jne    c0006ab1 <iso_readdir+0x20e>
c0006a83:	50                   	push   eax
c0006a84:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a88:	83 e8 05             	sub    eax,0x5
c0006a8b:	50                   	push   eax
c0006a8c:	8d 42 05             	lea    eax,[edx+0x5]
c0006a8f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006a93:	50                   	push   eax
c0006a94:	55                   	push   ebp
c0006a95:	e8 f6 9b ff ff       	call   c0000690 <strncpy>
c0006a9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006aa2:	83 c4 10             	add    esp,0x10
c0006aa5:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006aa9:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006ab1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006ab5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006ab9:	01 c2                	add    edx,eax
c0006abb:	eb 9a                	jmp    c0006a57 <iso_readdir+0x1b4>
c0006abd:	83 c8 ff             	or     eax,0xffffffff
c0006ac0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006ac4:	89 c2                	mov    edx,eax
c0006ac6:	75 0a                	jne    c0006ad2 <iso_readdir+0x22f>
c0006ac8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006acb:	e8 0e f6 ff ff       	call   c00060de <iso_733>
c0006ad0:	31 d2                	xor    edx,edx
c0006ad2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006ad8:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006ade:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006ae4:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006aea:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006aed:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006af0:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006af6:	83 c4 1c             	add    esp,0x1c
c0006af9:	5b                   	pop    ebx
c0006afa:	5e                   	pop    esi
c0006afb:	5f                   	pop    edi
c0006afc:	5d                   	pop    ebp
c0006afd:	c3                   	ret    

c0006afe <iso_reset>:
c0006afe:	83 ec 18             	sub    esp,0x18
c0006b01:	68 9a f6 02 c0       	push   0xc002f69a
c0006b06:	e8 79 24 02 00       	call   c0028f84 <iso_kprintf>
c0006b0b:	e8 1b f7 ff ff       	call   c000622b <iso_break_all>
c0006b10:	e8 14 f7 ff ff       	call   c0006229 <bclear>
c0006b15:	31 c0                	xor    eax,eax
c0006b17:	83 c4 1c             	add    esp,0x1c
c0006b1a:	c3                   	ret    

c0006b1b <init_percd>:
c0006b1b:	57                   	push   edi
c0006b1c:	56                   	push   esi
c0006b1d:	53                   	push   ebx
c0006b1e:	bb 01 00 00 00       	mov    ebx,0x1
c0006b23:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006b27:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b2c:	e8 cd ff ff ff       	call   c0006afe <iso_reset>
c0006b31:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b3b:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b40:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b44:	e8 97 f7 ff ff       	call   c00062e0 <biread>
c0006b49:	85 c0                	test   eax,eax
c0006b4b:	89 c6                	mov    esi,eax
c0006b4d:	0f 88 ba 00 00 00    	js     c0006c0d <init_percd+0xf2>
c0006b53:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006b5a:	52                   	push   edx
c0006b5b:	6a 06                	push   0x6
c0006b5d:	68 a5 f6 02 c0       	push   0xc002f6a5
c0006b62:	83 c0 04             	add    eax,0x4
c0006b65:	50                   	push   eax
c0006b66:	e8 15 98 ff ff       	call   c0000380 <memcmp>
c0006b6b:	83 c4 10             	add    esp,0x10
c0006b6e:	85 c0                	test   eax,eax
c0006b70:	74 08                	je     c0006b7a <init_percd+0x5f>
c0006b72:	43                   	inc    ebx
c0006b73:	83 fb 04             	cmp    ebx,0x4
c0006b76:	75 c3                	jne    c0006b3b <init_percd+0x20>
c0006b78:	eb 1a                	jmp    c0006b94 <init_percd+0x79>
c0006b7a:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006b81:	83 c0 5c             	add    eax,0x5c
c0006b84:	e8 22 f5 ff ff       	call   c00060ab <isjoliet>
c0006b89:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006b8e:	85 c0                	test   eax,eax
c0006b90:	74 e0                	je     c0006b72 <init_percd+0x57>
c0006b92:	eb 3e                	jmp    c0006bd2 <init_percd+0xb7>
c0006b94:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006b9b:	75 35                	jne    c0006bd2 <init_percd+0xb7>
c0006b9d:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006ba2:	83 c0 10             	add    eax,0x10
c0006ba5:	e8 36 f7 ff ff       	call   c00062e0 <biread>
c0006baa:	85 c0                	test   eax,eax
c0006bac:	89 c6                	mov    esi,eax
c0006bae:	78 5f                	js     c0006c0f <init_percd+0xf4>
c0006bb0:	50                   	push   eax
c0006bb1:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bb8:	83 cb ff             	or     ebx,0xffffffff
c0006bbb:	6a 06                	push   0x6
c0006bbd:	68 ac f6 02 c0       	push   0xc002f6ac
c0006bc2:	83 c0 04             	add    eax,0x4
c0006bc5:	50                   	push   eax
c0006bc6:	e8 b5 97 ff ff       	call   c0000380 <memcmp>
c0006bcb:	83 c4 10             	add    esp,0x10
c0006bce:	85 c0                	test   eax,eax
c0006bd0:	75 3d                	jne    c0006c0f <init_percd+0xf4>
c0006bd2:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006bd9:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006bde:	b9 22 00 00 00       	mov    ecx,0x22
c0006be3:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006beb:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006bf0:	31 db                	xor    ebx,ebx
c0006bf2:	e8 e7 f4 ff ff       	call   c00060de <iso_733>
c0006bf7:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006bfc:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006c01:	e8 d8 f4 ff ff       	call   c00060de <iso_733>
c0006c06:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006c0b:	eb 02                	jmp    c0006c0f <init_percd+0xf4>
c0006c0d:	89 c3                	mov    ebx,eax
c0006c0f:	89 d8                	mov    eax,ebx
c0006c11:	5b                   	pop    ebx
c0006c12:	5e                   	pop    esi
c0006c13:	5f                   	pop    edi
c0006c14:	c3                   	ret    

c0006c15 <iso_ioctl>:
c0006c15:	83 ec 18             	sub    esp,0x18
c0006c18:	68 b3 f6 02 c0       	push   0xc002f6b3
c0006c1d:	e8 62 23 02 00       	call   c0028f84 <iso_kprintf>
c0006c22:	e8 d7 fe ff ff       	call   c0006afe <iso_reset>
c0006c27:	31 c0                	xor    eax,eax
c0006c29:	83 c4 1c             	add    esp,0x1c
c0006c2c:	c3                   	ret    

c0006c2d <fs_iso9660_init>:
c0006c2d:	53                   	push   ebx
c0006c2e:	31 db                	xor    ebx,ebx
c0006c30:	83 ec 14             	sub    esp,0x14
c0006c33:	68 be f6 02 c0       	push   0xc002f6be
c0006c38:	e8 47 23 02 00       	call   c0028f84 <iso_kprintf>
c0006c3d:	83 c4 0c             	add    esp,0xc
c0006c40:	68 40 09 00 00       	push   0x940
c0006c45:	6a 00                	push   0x0
c0006c47:	68 20 6d 03 c0       	push   0xc0036d20
c0006c4c:	e8 9f 98 ff ff       	call   c00004f0 <memset>
c0006c51:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006c5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c62:	e8 28 f7 00 00       	call   c001638f <malloc>
c0006c67:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c6e:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006c73:	e8 17 f7 00 00       	call   c001638f <malloc>
c0006c78:	83 c4 10             	add    esp,0x10
c0006c7b:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006c80:	83 ec 0c             	sub    esp,0xc
c0006c83:	68 04 08 00 00       	push   0x804
c0006c88:	e8 02 f7 00 00       	call   c001638f <malloc>
c0006c8d:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006c94:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c9a:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006ca1:	e8 e9 f6 00 00       	call   c001638f <malloc>
c0006ca6:	83 c4 10             	add    esp,0x10
c0006ca9:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006cb0:	43                   	inc    ebx
c0006cb1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cb7:	83 fb 10             	cmp    ebx,0x10
c0006cba:	75 c4                	jne    c0006c80 <fs_iso9660_init+0x53>
c0006cbc:	83 c4 08             	add    esp,0x8
c0006cbf:	31 c0                	xor    eax,eax
c0006cc1:	5b                   	pop    ebx
c0006cc2:	c3                   	ret    

c0006cc3 <fs_iso9660_shutdown>:
c0006cc3:	53                   	push   ebx
c0006cc4:	31 db                	xor    ebx,ebx
c0006cc6:	83 ec 08             	sub    esp,0x8
c0006cc9:	83 ec 0c             	sub    esp,0xc
c0006ccc:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006cd3:	e8 c7 f6 00 00       	call   c001639f <free>
c0006cd8:	58                   	pop    eax
c0006cd9:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006ce0:	43                   	inc    ebx
c0006ce1:	e8 b9 f6 00 00       	call   c001639f <free>
c0006ce6:	83 c4 10             	add    esp,0x10
c0006ce9:	83 fb 10             	cmp    ebx,0x10
c0006cec:	75 db                	jne    c0006cc9 <fs_iso9660_shutdown+0x6>
c0006cee:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006cf3:	85 c0                	test   eax,eax
c0006cf5:	74 0c                	je     c0006d03 <fs_iso9660_shutdown+0x40>
c0006cf7:	83 ec 0c             	sub    esp,0xc
c0006cfa:	50                   	push   eax
c0006cfb:	e8 9f f6 00 00       	call   c001639f <free>
c0006d00:	83 c4 10             	add    esp,0x10
c0006d03:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006d08:	85 c0                	test   eax,eax
c0006d0a:	74 0c                	je     c0006d18 <fs_iso9660_shutdown+0x55>
c0006d0c:	83 ec 0c             	sub    esp,0xc
c0006d0f:	50                   	push   eax
c0006d10:	e8 8a f6 00 00       	call   c001639f <free>
c0006d15:	83 c4 10             	add    esp,0x10
c0006d18:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006d22:	31 c0                	xor    eax,eax
c0006d24:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d2e:	83 c4 08             	add    esp,0x8
c0006d31:	5b                   	pop    ebx
c0006d32:	c3                   	ret    
c0006d33:	90                   	nop

c0006d34 <lwip_init>:
c0006d34:	83 ec 0c             	sub    esp,0xc
c0006d37:	e8 58 2c 00 00       	call   c0009994 <stats_init>
c0006d3c:	e8 8b 9f ff ff       	call   c0000ccc <sys_init>
c0006d41:	e8 ae 01 00 00       	call   c0006ef4 <mem_init>
c0006d46:	e8 05 0a 00 00       	call   c0007750 <memp_init>
c0006d4b:	e8 e8 0c 00 00       	call   c0007a38 <netif_init>
c0006d50:	e8 1b 9f ff ff       	call   c0000c70 <lwip_socket_init>
c0006d55:	e8 02 9e 00 00       	call   c0010b5c <sys_timeouts_init>
c0006d5a:	90                   	nop
c0006d5b:	83 c4 0c             	add    esp,0xc
c0006d5e:	c3                   	ret    
c0006d5f:	90                   	nop

c0006d60 <plug_holes>:
c0006d60:	83 ec 1c             	sub    esp,0x1c
c0006d63:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006d68:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d6c:	73 16                	jae    c0006d84 <plug_holes+0x24>
c0006d6e:	83 ec 08             	sub    esp,0x8
c0006d71:	68 cf f6 02 c0       	push   0xc002f6cf
c0006d76:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006d7b:	e8 3c 8c 01 00       	call   c001f9bc <CPrintf>
c0006d80:	83 c4 10             	add    esp,0x10
c0006d83:	90                   	nop
c0006d84:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006d89:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d8d:	72 15                	jb     c0006da4 <plug_holes+0x44>
c0006d8f:	83 ec 08             	sub    esp,0x8
c0006d92:	68 f3 f6 02 c0       	push   0xc002f6f3
c0006d97:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006d9c:	e8 1b 8c 01 00       	call   c001f9bc <CPrintf>
c0006da1:	83 c4 10             	add    esp,0x10
c0006da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006da8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006dab:	0f b6 c0             	movzx  eax,al
c0006dae:	85 c0                	test   eax,eax
c0006db0:	74 16                	je     c0006dc8 <plug_holes+0x68>
c0006db2:	83 ec 08             	sub    esp,0x8
c0006db5:	68 0d f7 02 c0       	push   0xc002f70d
c0006dba:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006dbf:	e8 f8 8b 01 00       	call   c001f9bc <CPrintf>
c0006dc4:	83 c4 10             	add    esp,0x10
c0006dc7:	90                   	nop
c0006dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dcc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006dcf:	0f b7 c0             	movzx  eax,ax
c0006dd2:	3d 40 06 00 00       	cmp    eax,0x640
c0006dd7:	76 17                	jbe    c0006df0 <plug_holes+0x90>
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	68 a0 f7 02 c0       	push   0xc002f7a0
c0006de1:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006de6:	e8 d1 8b 01 00       	call   c001f9bc <CPrintf>
c0006deb:	83 c4 10             	add    esp,0x10
c0006dee:	66 90                	xchg   ax,ax
c0006df0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfa:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006dfd:	0f b7 c0             	movzx  eax,ax
c0006e00:	01 d0                	add    eax,edx
c0006e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e0a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006e0e:	74 64                	je     c0006e74 <plug_holes+0x114>
c0006e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e14:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e17:	0f b6 c0             	movzx  eax,al
c0006e1a:	85 c0                	test   eax,eax
c0006e1c:	75 56                	jne    c0006e74 <plug_holes+0x114>
c0006e1e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e23:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e27:	74 4b                	je     c0006e74 <plug_holes+0x114>
c0006e29:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e2e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e32:	75 0c                	jne    c0006e40 <plug_holes+0xe0>
c0006e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e38:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0006e40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e44:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4b:	66 89 10             	mov    WORD PTR [eax],dx
c0006e4e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e57:	89 d1                	mov    ecx,edx
c0006e59:	29 c1                	sub    ecx,eax
c0006e5b:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e65:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e68:	0f b7 c0             	movzx  eax,ax
c0006e6b:	01 d0                	add    eax,edx
c0006e6d:	89 ca                	mov    edx,ecx
c0006e6f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006e73:	90                   	nop
c0006e74:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e7e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006e82:	0f b7 c0             	movzx  eax,ax
c0006e85:	01 d0                	add    eax,edx
c0006e87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e8f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006e93:	74 57                	je     c0006eec <plug_holes+0x18c>
c0006e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e99:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e9c:	0f b6 c0             	movzx  eax,al
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 49                	jne    c0006eec <plug_holes+0x18c>
c0006ea3:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006ea8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006eac:	75 0a                	jne    c0006eb8 <plug_holes+0x158>
c0006eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb2:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006eb7:	90                   	nop
c0006eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ebc:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec3:	66 89 10             	mov    WORD PTR [eax],dx
c0006ec6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ecb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ecf:	89 d1                	mov    ecx,edx
c0006ed1:	29 c1                	sub    ecx,eax
c0006ed3:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006edd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006ee0:	0f b7 c0             	movzx  eax,ax
c0006ee3:	01 d0                	add    eax,edx
c0006ee5:	89 ca                	mov    edx,ecx
c0006ee7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006eeb:	90                   	nop
c0006eec:	90                   	nop
c0006eed:	83 c4 1c             	add    esp,0x1c
c0006ef0:	c3                   	ret    
c0006ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0006ef4 <mem_init>:
c0006ef4:	83 ec 1c             	sub    esp,0x1c
c0006ef7:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006f01:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f0e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f17:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f21:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f25:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f2a:	05 40 06 00 00       	add    eax,0x640
c0006f2f:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f34:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f39:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f3d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f42:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f47:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f4c:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006f52:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f57:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f5c:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006f65:	83 ec 0c             	sub    esp,0xc
c0006f68:	68 98 76 03 c0       	push   0xc0037698
c0006f6d:	e8 02 9d ff ff       	call   c0000c74 <sys_mutex_new>
c0006f72:	83 c4 10             	add    esp,0x10
c0006f75:	0f be c0             	movsx  eax,al
c0006f78:	85 c0                	test   eax,eax
c0006f7a:	74 18                	je     c0006f94 <mem_init+0xa0>
c0006f7c:	83 ec 08             	sub    esp,0x8
c0006f7f:	68 28 f7 02 c0       	push   0xc002f728
c0006f84:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006f89:	e8 2e 8a 01 00       	call   c001f9bc <CPrintf>
c0006f8e:	83 c4 10             	add    esp,0x10
c0006f91:	8d 76 00             	lea    esi,[esi+0x0]
c0006f94:	90                   	nop
c0006f95:	83 c4 1c             	add    esp,0x1c
c0006f98:	c3                   	ret    
c0006f99:	8d 76 00             	lea    esi,[esi+0x0]

c0006f9c <mem_free>:
c0006f9c:	83 ec 1c             	sub    esp,0x1c
c0006f9f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006fa4:	0f 84 0e 01 00 00    	je     c00070b8 <mem_free+0x11c>
c0006faa:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006faf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fb3:	72 0b                	jb     c0006fc0 <mem_free+0x24>
c0006fb5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fba:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fbe:	72 18                	jb     c0006fd8 <mem_free+0x3c>
c0006fc0:	83 ec 08             	sub    esp,0x8
c0006fc3:	68 43 f7 02 c0       	push   0xc002f743
c0006fc8:	68 e6 f6 02 c0       	push   0xc002f6e6
c0006fcd:	e8 ea 89 01 00       	call   c001f9bc <CPrintf>
c0006fd2:	83 c4 10             	add    esp,0x10
c0006fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0006fd8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fdd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe1:	72 0d                	jb     c0006ff0 <mem_free+0x54>
c0006fe3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fe8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fec:	72 22                	jb     c0007010 <mem_free+0x74>
c0006fee:	66 90                	xchg   ax,ax
c0006ff0:	e8 b7 89 01 00       	call   c001f9ac <CLockScheduler>
c0006ff5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0006ffb:	83 c0 01             	add    eax,0x1
c0006ffe:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007004:	e8 87 89 01 00       	call   c001f990 <CUnlockScheduler>
c0007009:	e9 ae 00 00 00       	jmp    c00070bc <mem_free+0x120>
c000700e:	66 90                	xchg   ax,ax
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	68 98 76 03 c0       	push   0xc0037698
c0007018:	e8 5b 9c ff ff       	call   c0000c78 <sys_mutex_lock>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007024:	83 e8 06             	sub    eax,0x6
c0007027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000702b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000702f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007032:	0f b6 c0             	movzx  eax,al
c0007035:	85 c0                	test   eax,eax
c0007037:	75 17                	jne    c0007050 <mem_free+0xb4>
c0007039:	83 ec 08             	sub    esp,0x8
c000703c:	68 5a f7 02 c0       	push   0xc002f75a
c0007041:	68 e6 f6 02 c0       	push   0xc002f6e6
c0007046:	e8 71 89 01 00       	call   c001f9bc <CPrintf>
c000704b:	83 c4 10             	add    esp,0x10
c000704e:	66 90                	xchg   ax,ax
c0007050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007054:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007058:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000705d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007061:	73 09                	jae    c000706c <mem_free+0xd0>
c0007063:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007067:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000706c:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007073:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007078:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707c:	29 c1                	sub    ecx,eax
c000707e:	89 c8                	mov    eax,ecx
c0007080:	89 c1                	mov    ecx,eax
c0007082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007086:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007089:	29 c1                	sub    ecx,eax
c000708b:	89 c8                	mov    eax,ecx
c000708d:	01 d0                	add    eax,edx
c000708f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000709c:	e8 bf fc ff ff       	call   c0006d60 <plug_holes>
c00070a1:	83 c4 10             	add    esp,0x10
c00070a4:	83 ec 0c             	sub    esp,0xc
c00070a7:	68 98 76 03 c0       	push   0xc0037698
c00070ac:	e8 cb 9b ff ff       	call   c0000c7c <sys_mutex_unlock>
c00070b1:	83 c4 10             	add    esp,0x10
c00070b4:	eb 06                	jmp    c00070bc <mem_free+0x120>
c00070b6:	66 90                	xchg   ax,ax
c00070b8:	90                   	nop
c00070b9:	8d 76 00             	lea    esi,[esi+0x0]
c00070bc:	83 c4 1c             	add    esp,0x1c
c00070bf:	c3                   	ret    

c00070c0 <mem_trim>:
c00070c0:	83 ec 2c             	sub    esp,0x2c
c00070c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00070c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00070cc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00070d1:	83 f8 0b             	cmp    eax,0xb
c00070d4:	77 0a                	ja     c00070e0 <mem_trim+0x20>
c00070d6:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00070dd:	8d 76 00             	lea    esi,[esi+0x0]
c00070e0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00070e5:	3d 40 06 00 00       	cmp    eax,0x640
c00070ea:	76 0c                	jbe    c00070f8 <mem_trim+0x38>
c00070ec:	b8 00 00 00 00       	mov    eax,0x0
c00070f1:	e9 d2 02 00 00       	jmp    c00073c8 <mem_trim+0x308>
c00070f6:	66 90                	xchg   ax,ax
c00070f8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070fd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007101:	72 0d                	jb     c0007110 <mem_trim+0x50>
c0007103:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007108:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000710c:	72 1a                	jb     c0007128 <mem_trim+0x68>
c000710e:	66 90                	xchg   ax,ax
c0007110:	83 ec 08             	sub    esp,0x8
c0007113:	68 6e f7 02 c0       	push   0xc002f76e
c0007118:	68 e6 f6 02 c0       	push   0xc002f6e6
c000711d:	e8 9a 88 01 00       	call   c001f9bc <CPrintf>
c0007122:	83 c4 10             	add    esp,0x10
c0007125:	8d 76 00             	lea    esi,[esi+0x0]
c0007128:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000712d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007131:	72 0d                	jb     c0007140 <mem_trim+0x80>
c0007133:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007138:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000713c:	72 26                	jb     c0007164 <mem_trim+0xa4>
c000713e:	66 90                	xchg   ax,ax
c0007140:	e8 67 88 01 00       	call   c001f9ac <CLockScheduler>
c0007145:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000714b:	83 c0 01             	add    eax,0x1
c000714e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007154:	e8 37 88 01 00       	call   c001f990 <CUnlockScheduler>
c0007159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000715d:	e9 66 02 00 00       	jmp    c00073c8 <mem_trim+0x308>
c0007162:	66 90                	xchg   ax,ax
c0007164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007168:	83 e8 06             	sub    eax,0x6
c000716b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000716f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007178:	29 c2                	sub    edx,eax
c000717a:	89 d0                	mov    eax,edx
c000717c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007185:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007188:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000718d:	89 d1                	mov    ecx,edx
c000718f:	29 c1                	sub    ecx,eax
c0007191:	89 c8                	mov    eax,ecx
c0007193:	83 e8 06             	sub    eax,0x6
c0007196:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000719b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071a5:	39 c2                	cmp    edx,eax
c00071a7:	76 17                	jbe    c00071c0 <mem_trim+0x100>
c00071a9:	83 ec 08             	sub    esp,0x8
c00071ac:	68 cc f7 02 c0       	push   0xc002f7cc
c00071b1:	68 e6 f6 02 c0       	push   0xc002f6e6
c00071b6:	e8 01 88 01 00       	call   c001f9bc <CPrintf>
c00071bb:	83 c4 10             	add    esp,0x10
c00071be:	66 90                	xchg   ax,ax
c00071c0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071c5:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071ca:	39 c2                	cmp    edx,eax
c00071cc:	76 0a                	jbe    c00071d8 <mem_trim+0x118>
c00071ce:	b8 00 00 00 00       	mov    eax,0x0
c00071d3:	e9 f0 01 00 00       	jmp    c00073c8 <mem_trim+0x308>
c00071d8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071dd:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071e2:	39 c2                	cmp    edx,eax
c00071e4:	75 0a                	jne    c00071f0 <mem_trim+0x130>
c00071e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071ea:	e9 d9 01 00 00       	jmp    c00073c8 <mem_trim+0x308>
c00071ef:	90                   	nop
c00071f0:	83 ec 0c             	sub    esp,0xc
c00071f3:	68 98 76 03 c0       	push   0xc0037698
c00071f8:	e8 7b 9a ff ff       	call   c0000c78 <sys_mutex_lock>
c00071fd:	83 c4 10             	add    esp,0x10
c0007200:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000720a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000720d:	0f b7 c0             	movzx  eax,ax
c0007210:	01 d0                	add    eax,edx
c0007212:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007216:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000721a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000721d:	0f b6 c0             	movzx  eax,al
c0007220:	85 c0                	test   eax,eax
c0007222:	0f 85 c4 00 00 00    	jne    c00072ec <mem_trim+0x22c>
c0007228:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000722c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000722f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007234:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007239:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000723d:	01 d0                	add    eax,edx
c000723f:	83 c0 06             	add    eax,0x6
c0007242:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007247:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000724c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007250:	75 12                	jne    c0007264 <mem_trim+0x1a4>
c0007252:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007258:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000725d:	01 d0                	add    eax,edx
c000725f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007264:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000726a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000726f:	01 d0                	add    eax,edx
c0007271:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007279:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000727d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007281:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0007286:	66 89 10             	mov    WORD PTR [eax],dx
c0007289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000728d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007292:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000729a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000729e:	66 89 10             	mov    WORD PTR [eax],dx
c00072a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072a8:	0f b7 c0             	movzx  eax,ax
c00072ab:	3d 40 06 00 00       	cmp    eax,0x640
c00072b0:	74 1a                	je     c00072cc <mem_trim+0x20c>
c00072b2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072bf:	0f b7 c0             	movzx  eax,ax
c00072c2:	01 c2                	add    edx,eax
c00072c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072c8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072cc:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00072da:	29 d1                	sub    ecx,edx
c00072dc:	89 ca                	mov    edx,ecx
c00072de:	01 d0                	add    eax,edx
c00072e0:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00072e6:	e9 c9 00 00 00       	jmp    c00073b4 <mem_trim+0x2f4>
c00072eb:	90                   	nop
c00072ec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00072f1:	8d 50 12             	lea    edx,[eax+0x12]
c00072f4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072f9:	39 c2                	cmp    edx,eax
c00072fb:	0f 87 b3 00 00 00    	ja     c00073b4 <mem_trim+0x2f4>
c0007301:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000730a:	01 d0                	add    eax,edx
c000730c:	83 c0 06             	add    eax,0x6
c000730f:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007314:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000731a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000731f:	01 d0                	add    eax,edx
c0007321:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007325:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000732a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000732e:	73 0c                	jae    c000733c <mem_trim+0x27c>
c0007330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007334:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007339:	8d 76 00             	lea    esi,[esi+0x0]
c000733c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007340:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007348:	66 8b 10             	mov    dx,WORD PTR [eax]
c000734b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000734f:	66 89 10             	mov    WORD PTR [eax],dx
c0007352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007356:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000735b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000735f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007363:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007367:	66 89 10             	mov    WORD PTR [eax],dx
c000736a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000736e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007371:	0f b7 c0             	movzx  eax,ax
c0007374:	3d 40 06 00 00       	cmp    eax,0x640
c0007379:	74 1d                	je     c0007398 <mem_trim+0x2d8>
c000737b:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007385:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007388:	0f b7 c0             	movzx  eax,ax
c000738b:	01 c2                	add    edx,eax
c000738d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007391:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007395:	8d 76 00             	lea    esi,[esi+0x0]
c0007398:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000739e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073a6:	29 d1                	sub    ecx,edx
c00073a8:	89 ca                	mov    edx,ecx
c00073aa:	01 d0                	add    eax,edx
c00073ac:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073b2:	66 90                	xchg   ax,ax
c00073b4:	83 ec 0c             	sub    esp,0xc
c00073b7:	68 98 76 03 c0       	push   0xc0037698
c00073bc:	e8 bb 98 ff ff       	call   c0000c7c <sys_mutex_unlock>
c00073c1:	83 c4 10             	add    esp,0x10
c00073c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073c8:	83 c4 2c             	add    esp,0x2c
c00073cb:	c3                   	ret    

c00073cc <mem_malloc>:
c00073cc:	53                   	push   ebx
c00073cd:	83 ec 28             	sub    esp,0x28
c00073d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00073d9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073de:	85 c0                	test   eax,eax
c00073e0:	75 0a                	jne    c00073ec <mem_malloc+0x20>
c00073e2:	b8 00 00 00 00       	mov    eax,0x0
c00073e7:	e9 f8 02 00 00       	jmp    c00076e4 <mem_malloc+0x318>
c00073ec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073f1:	83 f8 0b             	cmp    eax,0xb
c00073f4:	77 0a                	ja     c0007400 <mem_malloc+0x34>
c00073f6:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00073fd:	8d 76 00             	lea    esi,[esi+0x0]
c0007400:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007405:	3d 40 06 00 00       	cmp    eax,0x640
c000740a:	76 0c                	jbe    c0007418 <mem_malloc+0x4c>
c000740c:	b8 00 00 00 00       	mov    eax,0x0
c0007411:	e9 ce 02 00 00       	jmp    c00076e4 <mem_malloc+0x318>
c0007416:	66 90                	xchg   ax,ax
c0007418:	83 ec 0c             	sub    esp,0xc
c000741b:	68 98 76 03 c0       	push   0xc0037698
c0007420:	e8 53 98 ff ff       	call   c0000c78 <sys_mutex_lock>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000742e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007433:	29 c2                	sub    edx,eax
c0007435:	89 d0                	mov    eax,edx
c0007437:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000743c:	e9 63 02 00 00       	jmp    c00076a4 <mem_malloc+0x2d8>
c0007441:	8d 76 00             	lea    esi,[esi+0x0]
c0007444:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000744a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000744f:	01 d0                	add    eax,edx
c0007451:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007455:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007459:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000745c:	0f b6 c0             	movzx  eax,al
c000745f:	85 c0                	test   eax,eax
c0007461:	0f 85 25 02 00 00    	jne    c000768c <mem_malloc+0x2c0>
c0007467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000746b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000746e:	0f b7 d0             	movzx  edx,ax
c0007471:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007476:	29 c2                	sub    edx,eax
c0007478:	89 d0                	mov    eax,edx
c000747a:	8d 50 fa             	lea    edx,[eax-0x6]
c000747d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007482:	39 c2                	cmp    edx,eax
c0007484:	0f 82 02 02 00 00    	jb     c000768c <mem_malloc+0x2c0>
c000748a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000748e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007491:	0f b7 d0             	movzx  edx,ax
c0007494:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007499:	29 c2                	sub    edx,eax
c000749b:	89 d0                	mov    eax,edx
c000749d:	8d 50 fa             	lea    edx,[eax-0x6]
c00074a0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074a5:	83 c0 12             	add    eax,0x12
c00074a8:	39 c2                	cmp    edx,eax
c00074aa:	0f 82 c4 00 00 00    	jb     c0007574 <mem_malloc+0x1a8>
c00074b0:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00074b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b9:	01 d0                	add    eax,edx
c00074bb:	83 c0 06             	add    eax,0x6
c00074be:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00074c3:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074c9:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00074ce:	01 d0                	add    eax,edx
c00074d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00074d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074d8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e0:	66 8b 10             	mov    dx,WORD PTR [eax]
c00074e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e7:	66 89 10             	mov    WORD PTR [eax],dx
c00074ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ee:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00074f3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00074f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074fb:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007500:	66 89 10             	mov    WORD PTR [eax],dx
c0007503:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007507:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000750b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007512:	0f b7 c0             	movzx  eax,ax
c0007515:	3d 40 06 00 00       	cmp    eax,0x640
c000751a:	74 1c                	je     c0007538 <mem_malloc+0x16c>
c000751c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007526:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007529:	0f b7 c0             	movzx  eax,ax
c000752c:	01 c2                	add    edx,eax
c000752e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007533:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007537:	90                   	nop
c0007538:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000753e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007542:	01 d0                	add    eax,edx
c0007544:	83 c0 06             	add    eax,0x6
c0007547:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000754d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007554:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000755a:	0f b7 d2             	movzx  edx,dx
c000755d:	0f b7 c0             	movzx  eax,ax
c0007560:	39 c2                	cmp    edx,eax
c0007562:	73 64                	jae    c00075c8 <mem_malloc+0x1fc>
c0007564:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000756a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007570:	eb 56                	jmp    c00075c8 <mem_malloc+0x1fc>
c0007572:	66 90                	xchg   ax,ax
c0007574:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007578:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000757c:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007587:	66 8b 00             	mov    ax,WORD PTR [eax]
c000758a:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007590:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007594:	29 cb                	sub    ebx,ecx
c0007596:	89 d9                	mov    ecx,ebx
c0007598:	29 c8                	sub    eax,ecx
c000759a:	01 d0                	add    eax,edx
c000759c:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075a2:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075a9:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075af:	0f b7 d2             	movzx  edx,dx
c00075b2:	0f b7 c0             	movzx  eax,ax
c00075b5:	39 c2                	cmp    edx,eax
c00075b7:	73 0f                	jae    c00075c8 <mem_malloc+0x1fc>
c00075b9:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075bf:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075c5:	8d 76 00             	lea    esi,[esi+0x0]
c00075c8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00075d1:	75 71                	jne    c0007644 <mem_malloc+0x278>
c00075d3:	eb 1b                	jmp    c00075f0 <mem_malloc+0x224>
c00075d5:	8d 76 00             	lea    esi,[esi+0x0]
c00075d8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075de:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075e3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075e6:	0f b7 c0             	movzx  eax,ax
c00075e9:	01 d0                	add    eax,edx
c00075eb:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075f0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075f5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00075f8:	0f b6 c0             	movzx  eax,al
c00075fb:	85 c0                	test   eax,eax
c00075fd:	74 11                	je     c0007610 <mem_malloc+0x244>
c00075ff:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007605:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000760a:	39 c2                	cmp    edx,eax
c000760c:	75 ca                	jne    c00075d8 <mem_malloc+0x20c>
c000760e:	66 90                	xchg   ax,ax
c0007610:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007616:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000761b:	39 c2                	cmp    edx,eax
c000761d:	74 25                	je     c0007644 <mem_malloc+0x278>
c000761f:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007624:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007627:	0f b6 c0             	movzx  eax,al
c000762a:	85 c0                	test   eax,eax
c000762c:	74 16                	je     c0007644 <mem_malloc+0x278>
c000762e:	83 ec 08             	sub    esp,0x8
c0007631:	68 85 f7 02 c0       	push   0xc002f785
c0007636:	68 e6 f6 02 c0       	push   0xc002f6e6
c000763b:	e8 7c 83 01 00       	call   c001f9bc <CPrintf>
c0007640:	83 c4 10             	add    esp,0x10
c0007643:	90                   	nop
c0007644:	83 ec 0c             	sub    esp,0xc
c0007647:	68 98 76 03 c0       	push   0xc0037698
c000764c:	e8 2b 96 ff ff       	call   c0000c7c <sys_mutex_unlock>
c0007651:	83 c4 10             	add    esp,0x10
c0007654:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007659:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765d:	01 d0                	add    eax,edx
c000765f:	8d 50 06             	lea    edx,[eax+0x6]
c0007662:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007667:	39 c2                	cmp    edx,eax
c0007669:	76 15                	jbe    c0007680 <mem_malloc+0x2b4>
c000766b:	83 ec 08             	sub    esp,0x8
c000766e:	68 ec f7 02 c0       	push   0xc002f7ec
c0007673:	68 e6 f6 02 c0       	push   0xc002f6e6
c0007678:	e8 3f 83 01 00       	call   c001f9bc <CPrintf>
c000767d:	83 c4 10             	add    esp,0x10
c0007680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007684:	83 c0 06             	add    eax,0x6
c0007687:	eb 5b                	jmp    c00076e4 <mem_malloc+0x318>
c0007689:	8d 76 00             	lea    esi,[esi+0x0]
c000768c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007692:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007697:	01 d0                	add    eax,edx
c0007699:	66 8b 00             	mov    ax,WORD PTR [eax]
c000769c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076a1:	8d 76 00             	lea    esi,[esi+0x0]
c00076a4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076a9:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076ae:	b9 40 06 00 00       	mov    ecx,0x640
c00076b3:	29 d1                	sub    ecx,edx
c00076b5:	89 ca                	mov    edx,ecx
c00076b7:	39 d0                	cmp    eax,edx
c00076b9:	0f 8c 85 fd ff ff    	jl     c0007444 <mem_malloc+0x78>
c00076bf:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00076c5:	83 c0 01             	add    eax,0x1
c00076c8:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00076ce:	83 ec 0c             	sub    esp,0xc
c00076d1:	68 98 76 03 c0       	push   0xc0037698
c00076d6:	e8 a1 95 ff ff       	call   c0000c7c <sys_mutex_unlock>
c00076db:	83 c4 10             	add    esp,0x10
c00076de:	b8 00 00 00 00       	mov    eax,0x0
c00076e3:	90                   	nop
c00076e4:	83 c4 28             	add    esp,0x28
c00076e7:	5b                   	pop    ebx
c00076e8:	c3                   	ret    
c00076e9:	8d 76 00             	lea    esi,[esi+0x0]

c00076ec <mem_calloc>:
c00076ec:	83 ec 2c             	sub    esp,0x2c
c00076ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00076f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00076f7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00076fc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007709:	0f af c2             	imul   eax,edx
c000770c:	0f b7 c0             	movzx  eax,ax
c000770f:	83 ec 0c             	sub    esp,0xc
c0007712:	50                   	push   eax
c0007713:	e8 b4 fc ff ff       	call   c00073cc <mem_malloc>
c0007718:	83 c4 10             	add    esp,0x10
c000771b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007724:	74 22                	je     c0007748 <mem_calloc+0x5c>
c0007726:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000772b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007730:	0f af c2             	imul   eax,edx
c0007733:	83 ec 04             	sub    esp,0x4
c0007736:	50                   	push   eax
c0007737:	6a 00                	push   0x0
c0007739:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000773d:	e8 ae 8d ff ff       	call   c00004f0 <memset>
c0007742:	83 c4 10             	add    esp,0x10
c0007745:	8d 76 00             	lea    esi,[esi+0x0]
c0007748:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000774c:	83 c4 2c             	add    esp,0x2c
c000774f:	c3                   	ret    

c0007750 <memp_init>:
c0007750:	83 ec 10             	sub    esp,0x10
c0007753:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000775a:	eb 78                	jmp    c00077d4 <memp_init+0x84>
c000775c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007761:	89 d0                	mov    eax,edx
c0007763:	c1 e0 02             	shl    eax,0x2
c0007766:	01 d0                	add    eax,edx
c0007768:	d1 e0                	shl    eax,1
c000776a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000776f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007774:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007779:	89 d0                	mov    eax,edx
c000777b:	c1 e0 02             	shl    eax,0x2
c000777e:	01 d0                	add    eax,edx
c0007780:	d1 e0                	shl    eax,1
c0007782:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007787:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000778c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007791:	89 d0                	mov    eax,edx
c0007793:	c1 e0 02             	shl    eax,0x2
c0007796:	01 d0                	add    eax,edx
c0007798:	d1 e0                	shl    eax,1
c000779a:	05 d8 67 03 c0       	add    eax,0xc00367d8
c000779f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077a4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077a9:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077ae:	66 8b 8c 00 3c f8 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd07c4]
c00077b6:	89 d0                	mov    eax,edx
c00077b8:	c1 e0 02             	shl    eax,0x2
c00077bb:	01 d0                	add    eax,edx
c00077bd:	d1 e0                	shl    eax,1
c00077bf:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00077c4:	66 89 08             	mov    WORD PTR [eax],cx
c00077c7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00077cc:	83 c0 01             	add    eax,0x1
c00077cf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00077d4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077d9:	83 f8 0d             	cmp    eax,0xd
c00077dc:	0f 86 7a ff ff ff    	jbe    c000775c <memp_init+0xc>
c00077e2:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00077ea:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00077f1:	e9 8a 00 00 00       	jmp    c0007880 <memp_init+0x130>
c00077f6:	66 90                	xchg   ax,ax
c00077f8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077fd:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007808:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000780f:	eb 47                	jmp    c0007858 <memp_init+0x108>
c0007811:	8d 76 00             	lea    esi,[esi+0x0]
c0007814:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007819:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007824:	89 10                	mov    DWORD PTR [eax],edx
c0007826:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000782b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000782f:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007836:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000783b:	66 8b 84 00 58 f8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd07a8]
c0007843:	0f b7 c0             	movzx  eax,ax
c0007846:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000784a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784e:	83 c0 01             	add    eax,0x1
c0007851:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007856:	66 90                	xchg   ax,ax
c0007858:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000785d:	66 8b 84 00 3c f8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd07c4]
c0007865:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000786a:	0f b7 c0             	movzx  eax,ax
c000786d:	39 c2                	cmp    edx,eax
c000786f:	72 a3                	jb     c0007814 <memp_init+0xc4>
c0007871:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007876:	83 c0 01             	add    eax,0x1
c0007879:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000787e:	66 90                	xchg   ax,ax
c0007880:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007885:	83 f8 0d             	cmp    eax,0xd
c0007888:	0f 86 6a ff ff ff    	jbe    c00077f8 <memp_init+0xa8>
c000788e:	90                   	nop
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	c3                   	ret    
c0007893:	90                   	nop

c0007894 <memp_malloc>:
c0007894:	83 ec 1c             	sub    esp,0x1c
c0007897:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c000789c:	76 22                	jbe    c00078c0 <memp_malloc+0x2c>
c000789e:	83 ec 08             	sub    esp,0x8
c00078a1:	68 1c f8 02 c0       	push   0xc002f81c
c00078a6:	68 e6 f6 02 c0       	push   0xc002f6e6
c00078ab:	e8 0c 81 01 00       	call   c001f9bc <CPrintf>
c00078b0:	83 c4 10             	add    esp,0x10
c00078b3:	b8 00 00 00 00       	mov    eax,0x0
c00078b8:	e9 ff 00 00 00       	jmp    c00079bc <memp_malloc+0x128>
c00078bd:	8d 76 00             	lea    esi,[esi+0x0]
c00078c0:	e8 e7 80 01 00       	call   c001f9ac <CLockScheduler>
c00078c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078c9:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00078d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00078d9:	0f 84 a1 00 00 00    	je     c0007980 <memp_malloc+0xec>
c00078df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00078e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078e9:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00078f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00078f4:	89 d0                	mov    eax,edx
c00078f6:	c1 e0 02             	shl    eax,0x2
c00078f9:	01 d0                	add    eax,edx
c00078fb:	d1 e0                	shl    eax,1
c00078fd:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007902:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007905:	83 c0 01             	add    eax,0x1
c0007908:	89 c1                	mov    ecx,eax
c000790a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000790e:	89 d0                	mov    eax,edx
c0007910:	c1 e0 02             	shl    eax,0x2
c0007913:	01 d0                	add    eax,edx
c0007915:	d1 e0                	shl    eax,1
c0007917:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000791c:	66 89 08             	mov    WORD PTR [eax],cx
c000791f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007923:	89 d0                	mov    eax,edx
c0007925:	c1 e0 02             	shl    eax,0x2
c0007928:	01 d0                	add    eax,edx
c000792a:	d1 e0                	shl    eax,1
c000792c:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007931:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007934:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007938:	89 d0                	mov    eax,edx
c000793a:	c1 e0 02             	shl    eax,0x2
c000793d:	01 d0                	add    eax,edx
c000793f:	d1 e0                	shl    eax,1
c0007941:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007946:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007949:	0f b7 d1             	movzx  edx,cx
c000794c:	0f b7 c0             	movzx  eax,ax
c000794f:	39 c2                	cmp    edx,eax
c0007951:	73 5d                	jae    c00079b0 <memp_malloc+0x11c>
c0007953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007957:	89 d0                	mov    eax,edx
c0007959:	c1 e0 02             	shl    eax,0x2
c000795c:	01 d0                	add    eax,edx
c000795e:	d1 e0                	shl    eax,1
c0007960:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007965:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007968:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000796c:	89 d0                	mov    eax,edx
c000796e:	c1 e0 02             	shl    eax,0x2
c0007971:	01 d0                	add    eax,edx
c0007973:	d1 e0                	shl    eax,1
c0007975:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000797a:	66 89 08             	mov    WORD PTR [eax],cx
c000797d:	eb 31                	jmp    c00079b0 <memp_malloc+0x11c>
c000797f:	90                   	nop
c0007980:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007984:	89 d0                	mov    eax,edx
c0007986:	c1 e0 02             	shl    eax,0x2
c0007989:	01 d0                	add    eax,edx
c000798b:	d1 e0                	shl    eax,1
c000798d:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007992:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007995:	83 c0 01             	add    eax,0x1
c0007998:	89 c1                	mov    ecx,eax
c000799a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000799e:	89 d0                	mov    eax,edx
c00079a0:	c1 e0 02             	shl    eax,0x2
c00079a3:	01 d0                	add    eax,edx
c00079a5:	d1 e0                	shl    eax,1
c00079a7:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079ac:	66 89 08             	mov    WORD PTR [eax],cx
c00079af:	90                   	nop
c00079b0:	e8 db 7f 01 00       	call   c001f990 <CUnlockScheduler>
c00079b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079b9:	8d 76 00             	lea    esi,[esi+0x0]
c00079bc:	83 c4 1c             	add    esp,0x1c
c00079bf:	c3                   	ret    

c00079c0 <memp_free>:
c00079c0:	83 ec 1c             	sub    esp,0x1c
c00079c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00079c8:	74 66                	je     c0007a30 <memp_free+0x70>
c00079ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00079ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079d2:	e8 d5 7f 01 00       	call   c001f9ac <CLockScheduler>
c00079d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079db:	89 d0                	mov    eax,edx
c00079dd:	c1 e0 02             	shl    eax,0x2
c00079e0:	01 d0                	add    eax,edx
c00079e2:	d1 e0                	shl    eax,1
c00079e4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079ec:	83 e8 01             	sub    eax,0x1
c00079ef:	89 c1                	mov    ecx,eax
c00079f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079f5:	89 d0                	mov    eax,edx
c00079f7:	c1 e0 02             	shl    eax,0x2
c00079fa:	01 d0                	add    eax,edx
c00079fc:	d1 e0                	shl    eax,1
c00079fe:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a03:	66 89 08             	mov    WORD PTR [eax],cx
c0007a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a0a:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	89 10                	mov    DWORD PTR [eax],edx
c0007a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a1f:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007a26:	e8 65 7f 01 00       	call   c001f990 <CUnlockScheduler>
c0007a2b:	eb 07                	jmp    c0007a34 <memp_free+0x74>
c0007a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a30:	90                   	nop
c0007a31:	8d 76 00             	lea    esi,[esi+0x0]
c0007a34:	83 c4 1c             	add    esp,0x1c
c0007a37:	c3                   	ret    

c0007a38 <netif_init>:
c0007a38:	90                   	nop
c0007a39:	c3                   	ret    
c0007a3a:	66 90                	xchg   ax,ax

c0007a3c <netif_find>:
c0007a3c:	83 ec 10             	sub    esp,0x10
c0007a3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a44:	75 0a                	jne    c0007a50 <netif_find+0x14>
c0007a46:	b8 00 00 00 00       	mov    eax,0x0
c0007a4b:	e9 80 00 00 00       	jmp    c0007ad0 <netif_find+0x94>
c0007a50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a54:	83 c0 02             	add    eax,0x2
c0007a57:	8a 00                	mov    al,BYTE PTR [eax]
c0007a59:	83 e8 30             	sub    eax,0x30
c0007a5c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007a60:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007a65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a69:	eb 59                	jmp    c0007ac4 <netif_find+0x88>
c0007a6b:	90                   	nop
c0007a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a70:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007a73:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007a78:	0f b6 c0             	movzx  eax,al
c0007a7b:	39 c2                	cmp    edx,eax
c0007a7d:	75 39                	jne    c0007ab8 <netif_find+0x7c>
c0007a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a83:	8a 10                	mov    dl,BYTE PTR [eax]
c0007a85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a89:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007a8c:	0f be d2             	movsx  edx,dl
c0007a8f:	0f be c0             	movsx  eax,al
c0007a92:	39 c2                	cmp    edx,eax
c0007a94:	75 22                	jne    c0007ab8 <netif_find+0x7c>
c0007a96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a9a:	83 c0 01             	add    eax,0x1
c0007a9d:	8a 10                	mov    dl,BYTE PTR [eax]
c0007a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007aa3:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007aa6:	0f be d2             	movsx  edx,dl
c0007aa9:	0f be c0             	movsx  eax,al
c0007aac:	39 c2                	cmp    edx,eax
c0007aae:	75 08                	jne    c0007ab8 <netif_find+0x7c>
c0007ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ab4:	eb 1a                	jmp    c0007ad0 <netif_find+0x94>
c0007ab6:	66 90                	xchg   ax,ax
c0007ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0007abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ac2:	66 90                	xchg   ax,ax
c0007ac4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007ac9:	75 a1                	jne    c0007a6c <netif_find+0x30>
c0007acb:	b8 00 00 00 00       	mov    eax,0x0
c0007ad0:	83 c4 10             	add    esp,0x10
c0007ad3:	c3                   	ret    

c0007ad4 <netif_set_ipaddr>:
c0007ad4:	83 ec 1c             	sub    esp,0x1c
c0007ad7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007adb:	8b 10                	mov    edx,DWORD PTR [eax]
c0007add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ae1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ae4:	39 c2                	cmp    edx,eax
c0007ae6:	0f 84 bc 00 00 00    	je     c0007ba8 <netif_set_ipaddr+0xd4>
c0007aec:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007af1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007af5:	eb 45                	jmp    c0007b3c <netif_set_ipaddr+0x68>
c0007af7:	90                   	nop
c0007af8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007afc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b05:	39 c2                	cmp    edx,eax
c0007b07:	75 27                	jne    c0007b30 <netif_set_ipaddr+0x5c>
c0007b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007b14:	83 ec 0c             	sub    esp,0xc
c0007b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b1b:	e8 8c 36 00 00       	call   c000b1ac <tcp_abort>
c0007b20:	83 c4 10             	add    esp,0x10
c0007b23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007b27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b2b:	eb 0f                	jmp    c0007b3c <netif_set_ipaddr+0x68>
c0007b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b3b:	90                   	nop
c0007b3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b41:	75 b5                	jne    c0007af8 <netif_set_ipaddr+0x24>
c0007b43:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b4c:	eb 52                	jmp    c0007ba0 <netif_set_ipaddr+0xcc>
c0007b4e:	66 90                	xchg   ax,ax
c0007b50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b54:	85 c0                	test   eax,eax
c0007b56:	74 3c                	je     c0007b94 <netif_set_ipaddr+0xc0>
c0007b58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b5e:	85 c0                	test   eax,eax
c0007b60:	74 32                	je     c0007b94 <netif_set_ipaddr+0xc0>
c0007b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b66:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b6f:	39 c2                	cmp    edx,eax
c0007b71:	75 21                	jne    c0007b94 <netif_set_ipaddr+0xc0>
c0007b73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007b78:	74 0a                	je     c0007b84 <netif_set_ipaddr+0xb0>
c0007b7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b80:	eb 0a                	jmp    c0007b8c <netif_set_ipaddr+0xb8>
c0007b82:	66 90                	xchg   ax,ax
c0007b84:	b8 00 00 00 00       	mov    eax,0x0
c0007b89:	8d 76 00             	lea    esi,[esi+0x0]
c0007b8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b90:	89 02                	mov    DWORD PTR [edx],eax
c0007b92:	66 90                	xchg   ax,ax
c0007b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	90                   	nop
c0007ba0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba5:	75 a9                	jne    c0007b50 <netif_set_ipaddr+0x7c>
c0007ba7:	90                   	nop
c0007ba8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bad:	74 09                	je     c0007bb8 <netif_set_ipaddr+0xe4>
c0007baf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bb5:	eb 09                	jmp    c0007bc0 <netif_set_ipaddr+0xec>
c0007bb7:	90                   	nop
c0007bb8:	b8 00 00 00 00       	mov    eax,0x0
c0007bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0007bc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007bc7:	90                   	nop
c0007bc8:	83 c4 1c             	add    esp,0x1c
c0007bcb:	c3                   	ret    

c0007bcc <netif_set_gw>:
c0007bcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd1:	74 09                	je     c0007bdc <netif_set_gw+0x10>
c0007bd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bd9:	eb 09                	jmp    c0007be4 <netif_set_gw+0x18>
c0007bdb:	90                   	nop
c0007bdc:	b8 00 00 00 00       	mov    eax,0x0
c0007be1:	8d 76 00             	lea    esi,[esi+0x0]
c0007be4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007be8:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007beb:	90                   	nop
c0007bec:	c3                   	ret    
c0007bed:	8d 76 00             	lea    esi,[esi+0x0]

c0007bf0 <netif_set_netmask>:
c0007bf0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bf5:	74 09                	je     c0007c00 <netif_set_netmask+0x10>
c0007bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bfd:	eb 09                	jmp    c0007c08 <netif_set_netmask+0x18>
c0007bff:	90                   	nop
c0007c00:	b8 00 00 00 00       	mov    eax,0x0
c0007c05:	8d 76 00             	lea    esi,[esi+0x0]
c0007c08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c0c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007c0f:	90                   	nop
c0007c10:	c3                   	ret    
c0007c11:	8d 76 00             	lea    esi,[esi+0x0]

c0007c14 <netif_set_addr>:
c0007c14:	83 ec 0c             	sub    esp,0xc
c0007c17:	83 ec 08             	sub    esp,0x8
c0007c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c22:	e8 ad fe ff ff       	call   c0007ad4 <netif_set_ipaddr>
c0007c27:	83 c4 10             	add    esp,0x10
c0007c2a:	83 ec 08             	sub    esp,0x8
c0007c2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c35:	e8 b6 ff ff ff       	call   c0007bf0 <netif_set_netmask>
c0007c3a:	83 c4 10             	add    esp,0x10
c0007c3d:	83 ec 08             	sub    esp,0x8
c0007c40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c48:	e8 7f ff ff ff       	call   c0007bcc <netif_set_gw>
c0007c4d:	83 c4 10             	add    esp,0x10
c0007c50:	90                   	nop
c0007c51:	83 c4 0c             	add    esp,0xc
c0007c54:	c3                   	ret    
c0007c55:	8d 76 00             	lea    esi,[esi+0x0]

c0007c58 <netif_add>:
c0007c58:	83 ec 0c             	sub    esp,0xc
c0007c5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c60:	75 16                	jne    c0007c78 <netif_add+0x20>
c0007c62:	83 ec 08             	sub    esp,0x8
c0007c65:	68 74 f8 02 c0       	push   0xc002f874
c0007c6a:	68 e6 f6 02 c0       	push   0xc002f6e6
c0007c6f:	e8 48 7d 01 00       	call   c001f9bc <CPrintf>
c0007c74:	83 c4 10             	add    esp,0x10
c0007c77:	90                   	nop
c0007c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c92:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c9d:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ca5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ca9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007cac:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0007cb4:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007cba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007cbe:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007cc9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cdc:	e8 33 ff ff ff       	call   c0007c14 <netif_set_addr>
c0007ce1:	83 c4 10             	add    esp,0x10
c0007ce4:	83 ec 0c             	sub    esp,0xc
c0007ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007cef:	ff d0                	call   eax
c0007cf1:	83 c4 10             	add    esp,0x10
c0007cf4:	0f be c0             	movsx  eax,al
c0007cf7:	85 c0                	test   eax,eax
c0007cf9:	74 09                	je     c0007d04 <netif_add+0xac>
c0007cfb:	b8 00 00 00 00       	mov    eax,0x0
c0007d00:	eb 1e                	jmp    c0007d20 <netif_add+0xc8>
c0007d02:	66 90                	xchg   ax,ax
c0007d04:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d0e:	89 10                	mov    DWORD PTR [eax],edx
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007d20:	83 c4 0c             	add    esp,0xc
c0007d23:	c3                   	ret    

c0007d24 <netif_set_default>:
c0007d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d28:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d2d:	90                   	nop
c0007d2e:	c3                   	ret    
c0007d2f:	90                   	nop

c0007d30 <netif_set_up>:
c0007d30:	83 ec 0c             	sub    esp,0xc
c0007d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d37:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d3a:	0f b6 c0             	movzx  eax,al
c0007d3d:	83 e0 01             	and    eax,0x1
c0007d40:	75 4a                	jne    c0007d8c <netif_set_up+0x5c>
c0007d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d46:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d49:	83 c8 01             	or     eax,0x1
c0007d4c:	88 c2                	mov    dl,al
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d59:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d5c:	0f b6 c0             	movzx  eax,al
c0007d5f:	83 e0 10             	and    eax,0x10
c0007d62:	74 28                	je     c0007d8c <netif_set_up+0x5c>
c0007d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d6b:	0f b6 c0             	movzx  eax,al
c0007d6e:	83 e0 20             	and    eax,0x20
c0007d71:	74 19                	je     c0007d8c <netif_set_up+0x5c>
c0007d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d77:	83 c0 04             	add    eax,0x4
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	50                   	push   eax
c0007d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d82:	e8 55 a6 00 00       	call   c00123dc <etharp_request>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	66 90                	xchg   ax,ax
c0007d8c:	90                   	nop
c0007d8d:	83 c4 0c             	add    esp,0xc
c0007d90:	c3                   	ret    
c0007d91:	8d 76 00             	lea    esi,[esi+0x0]

c0007d94 <netif_set_down>:
c0007d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d98:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d9b:	0f b6 c0             	movzx  eax,al
c0007d9e:	83 e0 01             	and    eax,0x1
c0007da1:	74 15                	je     c0007db8 <netif_set_down+0x24>
c0007da3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007da7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007daa:	83 e0 fe             	and    eax,0xfffffffe
c0007dad:	88 c2                	mov    dl,al
c0007daf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007db3:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007db6:	66 90                	xchg   ax,ax
c0007db8:	90                   	nop
c0007db9:	c3                   	ret    
c0007dba:	66 90                	xchg   ax,ax

c0007dbc <netif_remove>:
c0007dbc:	83 ec 10             	sub    esp,0x10
c0007dbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007dc4:	0f 84 92 00 00 00    	je     c0007e5c <netif_remove+0xa0>
c0007dca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007dce:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dd1:	83 e0 01             	and    eax,0x1
c0007dd4:	0f b6 c0             	movzx  eax,al
c0007dd7:	85 c0                	test   eax,eax
c0007dd9:	74 0d                	je     c0007de8 <netif_remove+0x2c>
c0007ddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ddf:	e8 b0 ff ff ff       	call   c0007d94 <netif_set_down>
c0007de4:	83 c4 04             	add    esp,0x4
c0007de7:	90                   	nop
c0007de8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ded:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007df1:	75 0d                	jne    c0007e00 <netif_remove+0x44>
c0007df3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df9:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007dfe:	eb 44                	jmp    c0007e44 <netif_remove+0x88>
c0007e00:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e09:	eb 29                	jmp    c0007e34 <netif_remove+0x78>
c0007e0b:	90                   	nop
c0007e0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e12:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e16:	75 10                	jne    c0007e28 <netif_remove+0x6c>
c0007e18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e22:	89 10                	mov    DWORD PTR [eax],edx
c0007e24:	eb 16                	jmp    c0007e3c <netif_remove+0x80>
c0007e26:	66 90                	xchg   ax,ax
c0007e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e32:	66 90                	xchg   ax,ax
c0007e34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e39:	75 d1                	jne    c0007e0c <netif_remove+0x50>
c0007e3b:	90                   	nop
c0007e3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e41:	74 1d                	je     c0007e60 <netif_remove+0xa4>
c0007e43:	90                   	nop
c0007e44:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e49:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e4d:	75 15                	jne    c0007e64 <netif_remove+0xa8>
c0007e4f:	6a 00                	push   0x0
c0007e51:	e8 ce fe ff ff       	call   c0007d24 <netif_set_default>
c0007e56:	83 c4 04             	add    esp,0x4
c0007e59:	eb 09                	jmp    c0007e64 <netif_remove+0xa8>
c0007e5b:	90                   	nop
c0007e5c:	90                   	nop
c0007e5d:	eb 05                	jmp    c0007e64 <netif_remove+0xa8>
c0007e5f:	90                   	nop
c0007e60:	90                   	nop
c0007e61:	8d 76 00             	lea    esi,[esi+0x0]
c0007e64:	83 c4 10             	add    esp,0x10
c0007e67:	c3                   	ret    

c0007e68 <netif_set_link_up>:
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e6f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e72:	0f b6 c0             	movzx  eax,al
c0007e75:	83 e0 10             	and    eax,0x10
c0007e78:	75 4a                	jne    c0007ec4 <netif_set_link_up+0x5c>
c0007e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e7e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e81:	83 c8 10             	or     eax,0x10
c0007e84:	88 c2                	mov    dl,al
c0007e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e8a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e91:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e94:	0f b6 c0             	movzx  eax,al
c0007e97:	83 e0 01             	and    eax,0x1
c0007e9a:	74 28                	je     c0007ec4 <netif_set_link_up+0x5c>
c0007e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ea3:	0f b6 c0             	movzx  eax,al
c0007ea6:	83 e0 20             	and    eax,0x20
c0007ea9:	74 19                	je     c0007ec4 <netif_set_link_up+0x5c>
c0007eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eaf:	83 c0 04             	add    eax,0x4
c0007eb2:	83 ec 08             	sub    esp,0x8
c0007eb5:	50                   	push   eax
c0007eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eba:	e8 1d a5 00 00       	call   c00123dc <etharp_request>
c0007ebf:	83 c4 10             	add    esp,0x10
c0007ec2:	66 90                	xchg   ax,ax
c0007ec4:	90                   	nop
c0007ec5:	83 c4 0c             	add    esp,0xc
c0007ec8:	c3                   	ret    
c0007ec9:	8d 76 00             	lea    esi,[esi+0x0]

c0007ecc <netif_set_link_down>:
c0007ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ed3:	0f b6 c0             	movzx  eax,al
c0007ed6:	83 e0 10             	and    eax,0x10
c0007ed9:	74 15                	je     c0007ef0 <netif_set_link_down+0x24>
c0007edb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007edf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ee2:	83 e0 ef             	and    eax,0xffffffef
c0007ee5:	88 c2                	mov    dl,al
c0007ee7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007eeb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007eee:	66 90                	xchg   ax,ax
c0007ef0:	90                   	nop
c0007ef1:	c3                   	ret    
c0007ef2:	66 90                	xchg   ax,ax

c0007ef4 <pbuf_free_ooseq>:
c0007ef4:	83 ec 1c             	sub    esp,0x1c
c0007ef7:	e8 b0 7a 01 00       	call   c001f9ac <CLockScheduler>
c0007efc:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f03:	e8 88 7a 01 00       	call   c001f990 <CUnlockScheduler>
c0007f08:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f11:	eb 41                	jmp    c0007f54 <pbuf_free_ooseq+0x60>
c0007f13:	90                   	nop
c0007f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f18:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f1e:	85 c0                	test   eax,eax
c0007f20:	74 26                	je     c0007f48 <pbuf_free_ooseq+0x54>
c0007f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f26:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f2c:	83 ec 0c             	sub    esp,0xc
c0007f2f:	50                   	push   eax
c0007f30:	e8 1b 20 00 00       	call   c0009f50 <tcp_segs_free>
c0007f35:	83 c4 10             	add    esp,0x10
c0007f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f3c:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f46:	eb 14                	jmp    c0007f5c <pbuf_free_ooseq+0x68>
c0007f48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f53:	90                   	nop
c0007f54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f59:	75 b9                	jne    c0007f14 <pbuf_free_ooseq+0x20>
c0007f5b:	90                   	nop
c0007f5c:	83 c4 1c             	add    esp,0x1c
c0007f5f:	c3                   	ret    

c0007f60 <pbuf_pool_is_empty>:
c0007f60:	83 ec 1c             	sub    esp,0x1c
c0007f63:	e8 44 7a 01 00       	call   c001f9ac <CLockScheduler>
c0007f68:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007f6d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007f71:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007f78:	e8 13 7a 01 00       	call   c001f990 <CUnlockScheduler>
c0007f7d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007f82:	85 c0                	test   eax,eax
c0007f84:	75 2e                	jne    c0007fb4 <pbuf_pool_is_empty+0x54>
c0007f86:	83 ec 04             	sub    esp,0x4
c0007f89:	6a 00                	push   0x0
c0007f8b:	6a 00                	push   0x0
c0007f8d:	68 f4 7e 00 c0       	push   0xc0007ef4
c0007f92:	e8 e9 8c ff ff       	call   c0000c80 <tcpip_callback_with_block>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	0f be c0             	movsx  eax,al
c0007f9d:	85 c0                	test   eax,eax
c0007f9f:	74 13                	je     c0007fb4 <pbuf_pool_is_empty+0x54>
c0007fa1:	e8 06 7a 01 00       	call   c001f9ac <CLockScheduler>
c0007fa6:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fad:	e8 de 79 01 00       	call   c001f990 <CUnlockScheduler>
c0007fb2:	66 90                	xchg   ax,ax
c0007fb4:	90                   	nop
c0007fb5:	83 c4 1c             	add    esp,0x1c
c0007fb8:	c3                   	ret    
c0007fb9:	8d 76 00             	lea    esi,[esi+0x0]

c0007fbc <pbuf_alloced_custom>:
c0007fbc:	83 ec 2c             	sub    esp,0x2c
c0007fbf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0007fc3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0007fc7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007fcc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007fd1:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0007fd8:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fdd:	74 29                	je     c0008008 <pbuf_alloced_custom+0x4c>
c0007fdf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0007fe4:	74 12                	je     c0007ff8 <pbuf_alloced_custom+0x3c>
c0007fe6:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0007feb:	74 2b                	je     c0008018 <pbuf_alloced_custom+0x5c>
c0007fed:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0007ff2:	74 54                	je     c0008048 <pbuf_alloced_custom+0x8c>
c0007ff4:	eb 32                	jmp    c0008028 <pbuf_alloced_custom+0x6c>
c0007ff6:	66 90                	xchg   ax,ax
c0007ff8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0007ffd:	83 c0 14             	add    eax,0x14
c0008000:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008005:	8d 76 00             	lea    esi,[esi+0x0]
c0008008:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000800d:	83 c0 14             	add    eax,0x14
c0008010:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008015:	8d 76 00             	lea    esi,[esi+0x0]
c0008018:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000801d:	83 c0 0e             	add    eax,0xe
c0008020:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008025:	eb 25                	jmp    c000804c <pbuf_alloced_custom+0x90>
c0008027:	90                   	nop
c0008028:	83 ec 08             	sub    esp,0x8
c000802b:	68 8c f8 02 c0       	push   0xc002f88c
c0008030:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008035:	e8 82 79 01 00       	call   c001f9bc <CPrintf>
c000803a:	83 c4 10             	add    esp,0x10
c000803d:	b8 00 00 00 00       	mov    eax,0x0
c0008042:	e9 95 00 00 00       	jmp    c00080dc <pbuf_alloced_custom+0x120>
c0008047:	90                   	nop
c0008048:	90                   	nop
c0008049:	8d 76 00             	lea    esi,[esi+0x0]
c000804c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008051:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008056:	01 c2                	add    edx,eax
c0008058:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000805d:	39 c2                	cmp    edx,eax
c000805f:	7d 07                	jge    c0008068 <pbuf_alloced_custom+0xac>
c0008061:	b8 00 00 00 00       	mov    eax,0x0
c0008066:	eb 74                	jmp    c00080dc <pbuf_alloced_custom+0x120>
c0008068:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000806c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008072:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008077:	74 17                	je     c0008090 <pbuf_alloced_custom+0xd4>
c0008079:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000807e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008082:	01 c2                	add    edx,eax
c0008084:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008088:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000808b:	eb 0f                	jmp    c000809c <pbuf_alloced_custom+0xe0>
c000808d:	8d 76 00             	lea    esi,[esi+0x0]
c0008090:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008094:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000809b:	90                   	nop
c000809c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080a0:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00080a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00080ac:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00080b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080b4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00080b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080bb:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00080bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080c9:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00080cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080d0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00080d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080da:	66 90                	xchg   ax,ax
c00080dc:	83 c4 2c             	add    esp,0x2c
c00080df:	c3                   	ret    

c00080e0 <pbuf_header>:
c00080e0:	83 ec 2c             	sub    esp,0x2c
c00080e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00080e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00080ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080f1:	75 15                	jne    c0008108 <pbuf_header+0x28>
c00080f3:	83 ec 08             	sub    esp,0x8
c00080f6:	68 16 fb 02 c0       	push   0xc002fb16
c00080fb:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008100:	e8 b7 78 01 00       	call   c001f9bc <CPrintf>
c0008105:	83 c4 10             	add    esp,0x10
c0008108:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000810d:	85 c0                	test   eax,eax
c000810f:	74 07                	je     c0008118 <pbuf_header+0x38>
c0008111:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008116:	75 08                	jne    c0008120 <pbuf_header+0x40>
c0008118:	b0 00                	mov    al,0x0
c000811a:	e9 5d 01 00 00       	jmp    c000827c <pbuf_header+0x19c>
c000811f:	90                   	nop
c0008120:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008125:	85 c0                	test   eax,eax
c0008127:	79 3b                	jns    c0008164 <pbuf_header+0x84>
c0008129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000812d:	f7 d8                	neg    eax
c000812f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008138:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000813c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008141:	0f b7 c0             	movzx  eax,ax
c0008144:	39 c2                	cmp    edx,eax
c0008146:	76 28                	jbe    c0008170 <pbuf_header+0x90>
c0008148:	83 ec 08             	sub    esp,0x8
c000814b:	68 67 fa 02 c0       	push   0xc002fa67
c0008150:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008155:	e8 62 78 01 00       	call   c001f9bc <CPrintf>
c000815a:	83 c4 10             	add    esp,0x10
c000815d:	b0 01                	mov    al,0x1
c000815f:	e9 18 01 00 00       	jmp    c000827c <pbuf_header+0x19c>
c0008164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008168:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000816d:	8d 76 00             	lea    esi,[esi+0x0]
c0008170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008174:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008177:	0f b6 c0             	movzx  eax,al
c000817a:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000817f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008183:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000818a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000818f:	85 c0                	test   eax,eax
c0008191:	74 0d                	je     c00081a0 <pbuf_header+0xc0>
c0008193:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008198:	83 f8 03             	cmp    eax,0x3
c000819b:	75 3f                	jne    c00081dc <pbuf_header+0xfc>
c000819d:	8d 76 00             	lea    esi,[esi+0x0]
c00081a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081a7:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00081ac:	f7 da                	neg    edx
c00081ae:	01 c2                	add    edx,eax
c00081b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081c2:	83 c2 10             	add    edx,0x10
c00081c5:	39 d0                	cmp    eax,edx
c00081c7:	73 7f                	jae    c0008248 <pbuf_header+0x168>
c00081c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00081d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081d4:	b0 01                	mov    al,0x1
c00081d6:	e9 a1 00 00 00       	jmp    c000827c <pbuf_header+0x19c>
c00081db:	90                   	nop
c00081dc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081e1:	83 f8 02             	cmp    eax,0x2
c00081e4:	74 0a                	je     c00081f0 <pbuf_header+0x110>
c00081e6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081eb:	83 f8 01             	cmp    eax,0x1
c00081ee:	75 3c                	jne    c000822c <pbuf_header+0x14c>
c00081f0:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00081f5:	85 c0                	test   eax,eax
c00081f7:	79 2f                	jns    c0008228 <pbuf_header+0x148>
c00081f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081fd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008201:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008206:	0f b7 c0             	movzx  eax,ax
c0008209:	39 c2                	cmp    edx,eax
c000820b:	77 1b                	ja     c0008228 <pbuf_header+0x148>
c000820d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008211:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008214:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008219:	f7 da                	neg    edx
c000821b:	01 c2                	add    edx,eax
c000821d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008221:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008224:	eb 22                	jmp    c0008248 <pbuf_header+0x168>
c0008226:	66 90                	xchg   ax,ax
c0008228:	b0 01                	mov    al,0x1
c000822a:	eb 50                	jmp    c000827c <pbuf_header+0x19c>
c000822c:	83 ec 08             	sub    esp,0x8
c000822f:	68 85 fa 02 c0       	push   0xc002fa85
c0008234:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008239:	e8 7e 77 01 00       	call   c001f9bc <CPrintf>
c000823e:	83 c4 10             	add    esp,0x10
c0008241:	b0 01                	mov    al,0x1
c0008243:	eb 37                	jmp    c000827c <pbuf_header+0x19c>
c0008245:	8d 76 00             	lea    esi,[esi+0x0]
c0008248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000824c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008254:	01 d0                	add    eax,edx
c0008256:	89 c2                	mov    edx,eax
c0008258:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000825c:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008260:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008264:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008267:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000826b:	01 d0                	add    eax,edx
c000826d:	89 c2                	mov    edx,eax
c000826f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008273:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008277:	b0 00                	mov    al,0x0
c0008279:	8d 76 00             	lea    esi,[esi+0x0]
c000827c:	83 c4 2c             	add    esp,0x2c
c000827f:	c3                   	ret    

c0008280 <pbuf_free>:
c0008280:	83 ec 1c             	sub    esp,0x1c
c0008283:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008288:	75 26                	jne    c00082b0 <pbuf_free+0x30>
c000828a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000828f:	75 17                	jne    c00082a8 <pbuf_free+0x28>
c0008291:	83 ec 08             	sub    esp,0x8
c0008294:	68 16 fb 02 c0       	push   0xc002fb16
c0008299:	68 e6 f6 02 c0       	push   0xc002f6e6
c000829e:	e8 19 77 01 00       	call   c001f9bc <CPrintf>
c00082a3:	83 c4 10             	add    esp,0x10
c00082a6:	66 90                	xchg   ax,ax
c00082a8:	b0 00                	mov    al,0x0
c00082aa:	e9 a9 01 00 00       	jmp    c0008458 <pbuf_free+0x1d8>
c00082af:	90                   	nop
c00082b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082b4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082b7:	0f b6 c0             	movzx  eax,al
c00082ba:	85 c0                	test   eax,eax
c00082bc:	74 42                	je     c0008300 <pbuf_free+0x80>
c00082be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082c2:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082c5:	0f b6 c0             	movzx  eax,al
c00082c8:	83 f8 01             	cmp    eax,0x1
c00082cb:	74 33                	je     c0008300 <pbuf_free+0x80>
c00082cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082d1:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082d4:	0f b6 c0             	movzx  eax,al
c00082d7:	83 f8 02             	cmp    eax,0x2
c00082da:	74 24                	je     c0008300 <pbuf_free+0x80>
c00082dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082e0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082e3:	0f b6 c0             	movzx  eax,al
c00082e6:	83 f8 03             	cmp    eax,0x3
c00082e9:	74 15                	je     c0008300 <pbuf_free+0x80>
c00082eb:	83 ec 08             	sub    esp,0x8
c00082ee:	68 93 fa 02 c0       	push   0xc002fa93
c00082f3:	68 e6 f6 02 c0       	push   0xc002f6e6
c00082f8:	e8 bf 76 01 00       	call   c001f9bc <CPrintf>
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008305:	e9 3e 01 00 00       	jmp    c0008448 <pbuf_free+0x1c8>
c000830a:	66 90                	xchg   ax,ax
c000830c:	e8 9b 76 01 00       	call   c001f9ac <CLockScheduler>
c0008311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008315:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008319:	0f b7 c0             	movzx  eax,ax
c000831c:	85 c0                	test   eax,eax
c000831e:	75 18                	jne    c0008338 <pbuf_free+0xb8>
c0008320:	83 ec 08             	sub    esp,0x8
c0008323:	68 a8 fa 02 c0       	push   0xc002faa8
c0008328:	68 e6 f6 02 c0       	push   0xc002f6e6
c000832d:	e8 8a 76 01 00       	call   c001f9bc <CPrintf>
c0008332:	83 c4 10             	add    esp,0x10
c0008335:	8d 76 00             	lea    esi,[esi+0x0]
c0008338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000833c:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008340:	83 e8 01             	sub    eax,0x1
c0008343:	89 c2                	mov    edx,eax
c0008345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008349:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000834d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008351:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008355:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000835a:	e8 31 76 01 00       	call   c001f990 <CUnlockScheduler>
c000835f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008364:	85 c0                	test   eax,eax
c0008366:	0f 85 d4 00 00 00    	jne    c0008440 <pbuf_free+0x1c0>
c000836c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008370:	8b 00                	mov    eax,DWORD PTR [eax]
c0008372:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000837a:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000837d:	0f b6 c0             	movzx  eax,al
c0008380:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008389:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000838c:	0f b6 c0             	movzx  eax,al
c000838f:	83 e0 02             	and    eax,0x2
c0008392:	74 3c                	je     c00083d0 <pbuf_free+0x150>
c0008394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008398:	89 04 24             	mov    DWORD PTR [esp],eax
c000839b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000839e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083a1:	85 c0                	test   eax,eax
c00083a3:	75 17                	jne    c00083bc <pbuf_free+0x13c>
c00083a5:	83 ec 08             	sub    esp,0x8
c00083a8:	68 b0 f8 02 c0       	push   0xc002f8b0
c00083ad:	68 e6 f6 02 c0       	push   0xc002f6e6
c00083b2:	e8 05 76 01 00       	call   c001f9bc <CPrintf>
c00083b7:	83 c4 10             	add    esp,0x10
c00083ba:	66 90                	xchg   ax,ax
c00083bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00083c9:	ff d0                	call   eax
c00083cb:	83 c4 10             	add    esp,0x10
c00083ce:	eb 58                	jmp    c0008428 <pbuf_free+0x1a8>
c00083d0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083d5:	83 f8 03             	cmp    eax,0x3
c00083d8:	75 16                	jne    c00083f0 <pbuf_free+0x170>
c00083da:	83 ec 08             	sub    esp,0x8
c00083dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083e1:	6a 0d                	push   0xd
c00083e3:	e8 d8 f5 ff ff       	call   c00079c0 <memp_free>
c00083e8:	83 c4 10             	add    esp,0x10
c00083eb:	eb 3b                	jmp    c0008428 <pbuf_free+0x1a8>
c00083ed:	8d 76 00             	lea    esi,[esi+0x0]
c00083f0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083f5:	83 f8 01             	cmp    eax,0x1
c00083f8:	74 0a                	je     c0008404 <pbuf_free+0x184>
c00083fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083ff:	83 f8 02             	cmp    eax,0x2
c0008402:	75 14                	jne    c0008418 <pbuf_free+0x198>
c0008404:	83 ec 08             	sub    esp,0x8
c0008407:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000840b:	6a 0c                	push   0xc
c000840d:	e8 ae f5 ff ff       	call   c00079c0 <memp_free>
c0008412:	83 c4 10             	add    esp,0x10
c0008415:	eb 11                	jmp    c0008428 <pbuf_free+0x1a8>
c0008417:	90                   	nop
c0008418:	83 ec 0c             	sub    esp,0xc
c000841b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000841f:	e8 78 eb ff ff       	call   c0006f9c <mem_free>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	90                   	nop
c0008428:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000842c:	83 c0 01             	add    eax,0x1
c000842f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000843b:	eb 0b                	jmp    c0008448 <pbuf_free+0x1c8>
c000843d:	8d 76 00             	lea    esi,[esi+0x0]
c0008440:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008448:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000844d:	0f 85 b9 fe ff ff    	jne    c000830c <pbuf_free+0x8c>
c0008453:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008457:	90                   	nop
c0008458:	83 c4 1c             	add    esp,0x1c
c000845b:	c3                   	ret    

c000845c <pbuf_alloc>:
c000845c:	83 ec 3c             	sub    esp,0x3c
c000845f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0008463:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008468:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c000846f:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008474:	74 2a                	je     c00084a0 <pbuf_alloc+0x44>
c0008476:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000847b:	74 13                	je     c0008490 <pbuf_alloc+0x34>
c000847d:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c0008482:	74 2c                	je     c00084b0 <pbuf_alloc+0x54>
c0008484:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008489:	74 55                	je     c00084e0 <pbuf_alloc+0x84>
c000848b:	eb 33                	jmp    c00084c0 <pbuf_alloc+0x64>
c000848d:	8d 76 00             	lea    esi,[esi+0x0]
c0008490:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008495:	83 c0 14             	add    eax,0x14
c0008498:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000849d:	8d 76 00             	lea    esi,[esi+0x0]
c00084a0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084a5:	83 c0 14             	add    eax,0x14
c00084a8:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]
c00084b0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084b5:	83 c0 0e             	add    eax,0xe
c00084b8:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084bd:	eb 25                	jmp    c00084e4 <pbuf_alloc+0x88>
c00084bf:	90                   	nop
c00084c0:	83 ec 08             	sub    esp,0x8
c00084c3:	68 be fa 02 c0       	push   0xc002fabe
c00084c8:	68 e6 f6 02 c0       	push   0xc002f6e6
c00084cd:	e8 ea 74 01 00       	call   c001f9bc <CPrintf>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	b8 00 00 00 00       	mov    eax,0x0
c00084da:	e9 71 03 00 00       	jmp    c0008850 <pbuf_alloc+0x3f4>
c00084df:	90                   	nop
c00084e0:	90                   	nop
c00084e1:	8d 76 00             	lea    esi,[esi+0x0]
c00084e4:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00084e9:	77 11                	ja     c00084fc <pbuf_alloc+0xa0>
c00084eb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00084f0:	0f 85 c6 02 00 00    	jne    c00087bc <pbuf_alloc+0x360>
c00084f6:	e9 41 02 00 00       	jmp    c000873c <pbuf_alloc+0x2e0>
c00084fb:	90                   	nop
c00084fc:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008501:	0f 85 15 03 00 00    	jne    c000881c <pbuf_alloc+0x3c0>
c0008507:	83 ec 0c             	sub    esp,0xc
c000850a:	6a 0d                	push   0xd
c000850c:	e8 83 f3 ff ff       	call   c0007894 <memp_malloc>
c0008511:	83 c4 10             	add    esp,0x10
c0008514:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008518:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000851d:	75 11                	jne    c0008530 <pbuf_alloc+0xd4>
c000851f:	e8 3c fa ff ff       	call   c0007f60 <pbuf_pool_is_empty>
c0008524:	b8 00 00 00 00       	mov    eax,0x0
c0008529:	e9 22 03 00 00       	jmp    c0008850 <pbuf_alloc+0x3f4>
c000852e:	66 90                	xchg   ax,ax
c0008530:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008534:	88 c2                	mov    dl,al
c0008536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000853a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000853d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008541:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008547:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000854c:	8d 50 10             	lea    edx,[eax+0x10]
c000854f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008553:	01 c2                	add    edx,eax
c0008555:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008559:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000855c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008564:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000856d:	ba 4e 02 00 00       	mov    edx,0x24e
c0008572:	29 c2                	sub    edx,eax
c0008574:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008579:	39 c2                	cmp    edx,eax
c000857b:	0f 4e c2             	cmovle eax,edx
c000857e:	89 c2                	mov    edx,eax
c0008580:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008584:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008588:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000858c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000858f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008593:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008597:	0f b7 c0             	movzx  eax,ax
c000859a:	01 c2                	add    edx,eax
c000859c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085a0:	05 5e 02 00 00       	add    eax,0x25e
c00085a5:	39 c2                	cmp    edx,eax
c00085a7:	76 17                	jbe    c00085c0 <pbuf_alloc+0x164>
c00085a9:	83 ec 08             	sub    esp,0x8
c00085ac:	68 d4 f8 02 c0       	push   0xc002f8d4
c00085b1:	68 e6 f6 02 c0       	push   0xc002f6e6
c00085b6:	e8 01 74 01 00       	call   c001f9bc <CPrintf>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	66 90                	xchg   ax,ax
c00085c0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085c5:	ba 4e 02 00 00       	mov    edx,0x24e
c00085ca:	29 c2                	sub    edx,eax
c00085cc:	89 d0                	mov    eax,edx
c00085ce:	85 c0                	test   eax,eax
c00085d0:	7f 16                	jg     c00085e8 <pbuf_alloc+0x18c>
c00085d2:	83 ec 08             	sub    esp,0x8
c00085d5:	68 08 f9 02 c0       	push   0xc002f908
c00085da:	68 e6 f6 02 c0       	push   0xc002f6e6
c00085df:	e8 d8 73 01 00       	call   c001f9bc <CPrintf>
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	90                   	nop
c00085e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ec:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00085f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00085fa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00085ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008603:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008607:	0f b7 c0             	movzx  eax,ax
c000860a:	29 c2                	sub    edx,eax
c000860c:	89 d0                	mov    eax,edx
c000860e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008612:	e9 15 01 00 00       	jmp    c000872c <pbuf_alloc+0x2d0>
c0008617:	90                   	nop
c0008618:	83 ec 0c             	sub    esp,0xc
c000861b:	6a 0d                	push   0xd
c000861d:	e8 72 f2 ff ff       	call   c0007894 <memp_malloc>
c0008622:	83 c4 10             	add    esp,0x10
c0008625:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008629:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000862e:	75 20                	jne    c0008650 <pbuf_alloc+0x1f4>
c0008630:	e8 2b f9 ff ff       	call   c0007f60 <pbuf_pool_is_empty>
c0008635:	83 ec 0c             	sub    esp,0xc
c0008638:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000863c:	e8 3f fc ff ff       	call   c0008280 <pbuf_free>
c0008641:	83 c4 10             	add    esp,0x10
c0008644:	b8 00 00 00 00       	mov    eax,0x0
c0008649:	e9 02 02 00 00       	jmp    c0008850 <pbuf_alloc+0x3f4>
c000864e:	66 90                	xchg   ax,ax
c0008650:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008654:	88 c2                	mov    dl,al
c0008656:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000865a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000865d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008661:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008665:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008669:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000866f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008673:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008677:	89 10                	mov    DWORD PTR [eax],edx
c0008679:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008681:	7e 15                	jle    c0008698 <pbuf_alloc+0x23c>
c0008683:	83 ec 08             	sub    esp,0x8
c0008686:	68 d9 fa 02 c0       	push   0xc002fad9
c000868b:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008690:	e8 27 73 01 00       	call   c001f9bc <CPrintf>
c0008695:	83 c4 10             	add    esp,0x10
c0008698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000869c:	89 c2                	mov    edx,eax
c000869e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086a2:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00086a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086aa:	0f b7 d0             	movzx  edx,ax
c00086ad:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00086b3:	76 07                	jbe    c00086bc <pbuf_alloc+0x260>
c00086b5:	b8 4e 02 00 00       	mov    eax,0x24e
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086c0:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00086c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c8:	8d 50 10             	lea    edx,[eax+0x10]
c00086cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00086d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00086d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086dd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086e1:	0f b7 c0             	movzx  eax,ax
c00086e4:	01 c2                	add    edx,eax
c00086e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086ea:	05 5e 02 00 00       	add    eax,0x25e
c00086ef:	39 c2                	cmp    edx,eax
c00086f1:	76 15                	jbe    c0008708 <pbuf_alloc+0x2ac>
c00086f3:	83 ec 08             	sub    esp,0x8
c00086f6:	68 d4 f8 02 c0       	push   0xc002f8d4
c00086fb:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008700:	e8 b7 72 01 00       	call   c001f9bc <CPrintf>
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000870c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008716:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000871a:	0f b7 c0             	movzx  eax,ax
c000871d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008725:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008731:	0f 8f e1 fe ff ff    	jg     c0008618 <pbuf_alloc+0x1bc>
c0008737:	e9 fc 00 00 00       	jmp    c0008838 <pbuf_alloc+0x3dc>
c000873c:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008745:	01 d0                	add    eax,edx
c0008747:	83 c0 10             	add    eax,0x10
c000874a:	0f b7 c0             	movzx  eax,ax
c000874d:	83 ec 0c             	sub    esp,0xc
c0008750:	50                   	push   eax
c0008751:	e8 76 ec ff ff       	call   c00073cc <mem_malloc>
c0008756:	83 c4 10             	add    esp,0x10
c0008759:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000875d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008762:	75 0c                	jne    c0008770 <pbuf_alloc+0x314>
c0008764:	b8 00 00 00 00       	mov    eax,0x0
c0008769:	e9 e2 00 00 00       	jmp    c0008850 <pbuf_alloc+0x3f4>
c000876e:	66 90                	xchg   ax,ax
c0008770:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008775:	8d 50 10             	lea    edx,[eax+0x10]
c0008778:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000877c:	01 c2                	add    edx,eax
c000877e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008782:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008785:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008789:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000878d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008791:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008795:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000879c:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00087a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087ae:	88 c2                	mov    dl,al
c00087b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b4:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087b7:	eb 7f                	jmp    c0008838 <pbuf_alloc+0x3dc>
c00087b9:	8d 76 00             	lea    esi,[esi+0x0]
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	6a 0c                	push   0xc
c00087c1:	e8 ce f0 ff ff       	call   c0007894 <memp_malloc>
c00087c6:	83 c4 10             	add    esp,0x10
c00087c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087d2:	75 08                	jne    c00087dc <pbuf_alloc+0x380>
c00087d4:	b8 00 00 00 00       	mov    eax,0x0
c00087d9:	eb 75                	jmp    c0008850 <pbuf_alloc+0x3f4>
c00087db:	90                   	nop
c00087dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00087e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087ef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00087fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087fe:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008806:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000880c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008810:	88 c2                	mov    dl,al
c0008812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008816:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008819:	eb 1d                	jmp    c0008838 <pbuf_alloc+0x3dc>
c000881b:	90                   	nop
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 ed fa 02 c0       	push   0xc002faed
c0008824:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008829:	e8 8e 71 01 00       	call   c001f9bc <CPrintf>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	b8 00 00 00 00       	mov    eax,0x0
c0008836:	eb 18                	jmp    c0008850 <pbuf_alloc+0x3f4>
c0008838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000883c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008842:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008846:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000884a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000884e:	66 90                	xchg   ax,ax
c0008850:	83 c4 3c             	add    esp,0x3c
c0008853:	c3                   	ret    

c0008854 <pbuf_realloc>:
c0008854:	83 ec 2c             	sub    esp,0x2c
c0008857:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000885b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008860:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008865:	75 15                	jne    c000887c <pbuf_realloc+0x28>
c0008867:	83 ec 08             	sub    esp,0x8
c000886a:	68 08 fb 02 c0       	push   0xc002fb08
c000886f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008874:	e8 43 71 01 00       	call   c001f9bc <CPrintf>
c0008879:	83 c4 10             	add    esp,0x10
c000887c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008880:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008883:	0f b6 c0             	movzx  eax,al
c0008886:	83 f8 03             	cmp    eax,0x3
c0008889:	74 41                	je     c00088cc <pbuf_realloc+0x78>
c000888b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000888f:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008892:	0f b6 c0             	movzx  eax,al
c0008895:	83 f8 01             	cmp    eax,0x1
c0008898:	74 32                	je     c00088cc <pbuf_realloc+0x78>
c000889a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000889e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088a1:	0f b6 c0             	movzx  eax,al
c00088a4:	85 c0                	test   eax,eax
c00088a6:	74 24                	je     c00088cc <pbuf_realloc+0x78>
c00088a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ac:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088af:	0f b6 c0             	movzx  eax,al
c00088b2:	83 f8 02             	cmp    eax,0x2
c00088b5:	74 15                	je     c00088cc <pbuf_realloc+0x78>
c00088b7:	83 ec 08             	sub    esp,0x8
c00088ba:	68 20 fb 02 c0       	push   0xc002fb20
c00088bf:	68 e6 f6 02 c0       	push   0xc002f6e6
c00088c4:	e8 f3 70 01 00       	call   c001f9bc <CPrintf>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088d3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088d8:	0f b7 c0             	movzx  eax,ax
c00088db:	39 c2                	cmp    edx,eax
c00088dd:	0f 83 71 01 00 00    	jae    c0008a54 <pbuf_realloc+0x200>
c00088e3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088ef:	0f b7 c0             	movzx  eax,ax
c00088f2:	29 c2                	sub    edx,eax
c00088f4:	89 d0                	mov    eax,edx
c00088f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00088fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088fe:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000890b:	eb 7b                	jmp    c0008988 <pbuf_realloc+0x134>
c000890d:	8d 76 00             	lea    esi,[esi+0x0]
c0008910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008914:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008918:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000891d:	89 d1                	mov    ecx,edx
c000891f:	29 c1                	sub    ecx,eax
c0008921:	89 c8                	mov    eax,ecx
c0008923:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008928:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008930:	7e 16                	jle    c0008948 <pbuf_realloc+0xf4>
c0008932:	83 ec 08             	sub    esp,0x8
c0008935:	68 3b fb 02 c0       	push   0xc002fb3b
c000893a:	68 e6 f6 02 c0       	push   0xc002f6e6
c000893f:	e8 78 70 01 00       	call   c001f9bc <CPrintf>
c0008944:	83 c4 10             	add    esp,0x10
c0008947:	90                   	nop
c0008948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000894c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000894f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008953:	01 d0                	add    eax,edx
c0008955:	89 c2                	mov    edx,eax
c0008957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000895b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000895f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008963:	8b 00                	mov    eax,DWORD PTR [eax]
c0008965:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008969:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000896e:	75 18                	jne    c0008988 <pbuf_realloc+0x134>
c0008970:	83 ec 08             	sub    esp,0x8
c0008973:	68 4c fb 02 c0       	push   0xc002fb4c
c0008978:	68 e6 f6 02 c0       	push   0xc002f6e6
c000897d:	e8 3a 70 01 00       	call   c001f9bc <CPrintf>
c0008982:	83 c4 10             	add    esp,0x10
c0008985:	8d 76 00             	lea    esi,[esi+0x0]
c0008988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000898c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008990:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008995:	0f b7 c0             	movzx  eax,ax
c0008998:	39 c2                	cmp    edx,eax
c000899a:	0f 87 70 ff ff ff    	ja     c0008910 <pbuf_realloc+0xbc>
c00089a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089a7:	0f b6 c0             	movzx  eax,al
c00089aa:	85 c0                	test   eax,eax
c00089ac:	75 5e                	jne    c0008a0c <pbuf_realloc+0x1b8>
c00089ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089b6:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089bb:	0f b7 c0             	movzx  eax,ax
c00089be:	39 c2                	cmp    edx,eax
c00089c0:	74 4a                	je     c0008a0c <pbuf_realloc+0x1b8>
c00089c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00089c9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c00089cd:	89 c2                	mov    edx,eax
c00089cf:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00089d4:	01 d0                	add    eax,edx
c00089d6:	0f b7 c0             	movzx  eax,ax
c00089d9:	83 ec 08             	sub    esp,0x8
c00089dc:	50                   	push   eax
c00089dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00089e1:	e8 da e6 ff ff       	call   c00070c0 <mem_trim>
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089ed:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00089f2:	75 18                	jne    c0008a0c <pbuf_realloc+0x1b8>
c00089f4:	83 ec 08             	sub    esp,0x8
c00089f7:	68 64 fb 02 c0       	push   0xc002fb64
c00089fc:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008a01:	e8 b6 6f 01 00       	call   c001f9bc <CPrintf>
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	8d 76 00             	lea    esi,[esi+0x0]
c0008a0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a10:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008a15:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a1d:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a25:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a2f:	85 c0                	test   eax,eax
c0008a31:	74 15                	je     c0008a48 <pbuf_realloc+0x1f4>
c0008a33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a39:	83 ec 0c             	sub    esp,0xc
c0008a3c:	50                   	push   eax
c0008a3d:	e8 3e f8 ff ff       	call   c0008280 <pbuf_free>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	8d 76 00             	lea    esi,[esi+0x0]
c0008a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a52:	eb 04                	jmp    c0008a58 <pbuf_realloc+0x204>
c0008a54:	90                   	nop
c0008a55:	8d 76 00             	lea    esi,[esi+0x0]
c0008a58:	83 c4 2c             	add    esp,0x2c
c0008a5b:	c3                   	ret    

c0008a5c <pbuf_clen>:
c0008a5c:	83 ec 10             	sub    esp,0x10
c0008a5f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008a64:	eb 1a                	jmp    c0008a80 <pbuf_clen+0x24>
c0008a66:	66 90                	xchg   ax,ax
c0008a68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a6c:	83 c0 01             	add    eax,0x1
c0008a6f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008a77:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a80:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a85:	75 e1                	jne    c0008a68 <pbuf_clen+0xc>
c0008a87:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	c3                   	ret    
c0008a8f:	90                   	nop

c0008a90 <pbuf_ref>:
c0008a90:	83 ec 0c             	sub    esp,0xc
c0008a93:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008a98:	74 22                	je     c0008abc <pbuf_ref+0x2c>
c0008a9a:	e8 0d 6f 01 00       	call   c001f9ac <CLockScheduler>
c0008a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aa3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008aa7:	83 c0 01             	add    eax,0x1
c0008aaa:	89 c2                	mov    edx,eax
c0008aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab0:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008ab4:	e8 d7 6e 01 00       	call   c001f990 <CUnlockScheduler>
c0008ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0008abc:	90                   	nop
c0008abd:	83 c4 0c             	add    esp,0xc
c0008ac0:	c3                   	ret    
c0008ac1:	8d 76 00             	lea    esi,[esi+0x0]

c0008ac4 <pbuf_cat>:
c0008ac4:	83 ec 1c             	sub    esp,0x1c
c0008ac7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008acc:	74 0a                	je     c0008ad8 <pbuf_cat+0x14>
c0008ace:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ad3:	75 1f                	jne    c0008af4 <pbuf_cat+0x30>
c0008ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ad8:	83 ec 08             	sub    esp,0x8
c0008adb:	68 3c f9 02 c0       	push   0xc002f93c
c0008ae0:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008ae5:	e8 d2 6e 01 00       	call   c001f9bc <CPrintf>
c0008aea:	83 c4 10             	add    esp,0x10
c0008aed:	e9 ae 00 00 00       	jmp    c0008ba0 <pbuf_cat+0xdc>
c0008af2:	66 90                	xchg   ax,ax
c0008af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008afc:	eb 26                	jmp    c0008b24 <pbuf_cat+0x60>
c0008afe:	66 90                	xchg   ax,ax
c0008b00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b04:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b0e:	01 d0                	add    eax,edx
c0008b10:	89 c2                	mov    edx,eax
c0008b12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b16:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	75 d2                	jne    c0008b00 <pbuf_cat+0x3c>
c0008b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b32:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b39:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b3d:	0f b7 d2             	movzx  edx,dx
c0008b40:	0f b7 c0             	movzx  eax,ax
c0008b43:	39 c2                	cmp    edx,eax
c0008b45:	74 15                	je     c0008b5c <pbuf_cat+0x98>
c0008b47:	83 ec 08             	sub    esp,0x8
c0008b4a:	68 74 f9 02 c0       	push   0xc002f974
c0008b4f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008b54:	e8 63 6e 01 00       	call   c001f9bc <CPrintf>
c0008b59:	83 c4 10             	add    esp,0x10
c0008b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b62:	85 c0                	test   eax,eax
c0008b64:	74 16                	je     c0008b7c <pbuf_cat+0xb8>
c0008b66:	83 ec 08             	sub    esp,0x8
c0008b69:	68 80 fb 02 c0       	push   0xc002fb80
c0008b6e:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008b73:	e8 44 6e 01 00       	call   c001f9bc <CPrintf>
c0008b78:	83 c4 10             	add    esp,0x10
c0008b7b:	90                   	nop
c0008b7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b80:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b8a:	01 d0                	add    eax,edx
c0008b8c:	89 c2                	mov    edx,eax
c0008b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b92:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b9a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b9e:	89 10                	mov    DWORD PTR [eax],edx
c0008ba0:	83 c4 1c             	add    esp,0x1c
c0008ba3:	c3                   	ret    

c0008ba4 <pbuf_chain>:
c0008ba4:	83 ec 0c             	sub    esp,0xc
c0008ba7:	83 ec 08             	sub    esp,0x8
c0008baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bb2:	e8 0d ff ff ff       	call   c0008ac4 <pbuf_cat>
c0008bb7:	83 c4 10             	add    esp,0x10
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008bc1:	e8 ca fe ff ff       	call   c0008a90 <pbuf_ref>
c0008bc6:	83 c4 10             	add    esp,0x10
c0008bc9:	90                   	nop
c0008bca:	83 c4 0c             	add    esp,0xc
c0008bcd:	c3                   	ret    
c0008bce:	66 90                	xchg   ax,ax

c0008bd0 <pbuf_dechain>:
c0008bd0:	83 ec 1c             	sub    esp,0x1c
c0008bd3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008be2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008be7:	0f 84 8b 00 00 00    	je     c0008c78 <pbuf_dechain+0xa8>
c0008bed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008bf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bf4:	0f b7 d0             	movzx  edx,ax
c0008bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bfb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bfe:	0f b7 c8             	movzx  ecx,ax
c0008c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c05:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c09:	0f b7 c0             	movzx  eax,ax
c0008c0c:	29 c1                	sub    ecx,eax
c0008c0e:	89 c8                	mov    eax,ecx
c0008c10:	39 c2                	cmp    edx,eax
c0008c12:	74 18                	je     c0008c2c <pbuf_dechain+0x5c>
c0008c14:	83 ec 08             	sub    esp,0x8
c0008c17:	68 a4 f9 02 c0       	push   0xc002f9a4
c0008c1c:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008c21:	e8 96 6d 01 00       	call   c001f9bc <CPrintf>
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	8d 76 00             	lea    esi,[esi+0x0]
c0008c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c30:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c37:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c3b:	89 d1                	mov    ecx,edx
c0008c3d:	29 c1                	sub    ecx,eax
c0008c3f:	89 c8                	mov    eax,ecx
c0008c41:	89 c2                	mov    edx,eax
c0008c43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c47:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c59:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c61:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c65:	83 ec 0c             	sub    esp,0xc
c0008c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6c:	e8 0f f6 ff ff       	call   c0008280 <pbuf_free>
c0008c71:	83 c4 10             	add    esp,0x10
c0008c74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c83:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c87:	0f b7 d2             	movzx  edx,dx
c0008c8a:	0f b7 c0             	movzx  eax,ax
c0008c8d:	39 c2                	cmp    edx,eax
c0008c8f:	74 17                	je     c0008ca8 <pbuf_dechain+0xd8>
c0008c91:	83 ec 08             	sub    esp,0x8
c0008c94:	68 90 fb 02 c0       	push   0xc002fb90
c0008c99:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008c9e:	e8 19 6d 01 00       	call   c001f9bc <CPrintf>
c0008ca3:	83 c4 10             	add    esp,0x10
c0008ca6:	66 90                	xchg   ax,ax
c0008ca8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 07                	jne    c0008cb8 <pbuf_dechain+0xe8>
c0008cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cb5:	eb 09                	jmp    c0008cc0 <pbuf_dechain+0xf0>
c0008cb7:	90                   	nop
c0008cb8:	b8 00 00 00 00       	mov    eax,0x0
c0008cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc0:	83 c4 1c             	add    esp,0x1c
c0008cc3:	c3                   	ret    

c0008cc4 <pbuf_copy>:
c0008cc4:	53                   	push   ebx
c0008cc5:	83 ec 18             	sub    esp,0x18
c0008cc8:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008ccf:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008cd6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008cdb:	74 1f                	je     c0008cfc <pbuf_copy+0x38>
c0008cdd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ce2:	74 18                	je     c0008cfc <pbuf_copy+0x38>
c0008ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008cef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cf2:	0f b7 d2             	movzx  edx,dx
c0008cf5:	0f b7 c0             	movzx  eax,ax
c0008cf8:	39 c2                	cmp    edx,eax
c0008cfa:	73 1c                	jae    c0008d18 <pbuf_copy+0x54>
c0008cfc:	83 ec 08             	sub    esp,0x8
c0008cff:	68 c8 f9 02 c0       	push   0xc002f9c8
c0008d04:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008d09:	e8 ae 6c 01 00       	call   c001f9bc <CPrintf>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	b0 f2                	mov    al,0xf2
c0008d13:	e9 0c 02 00 00       	jmp    c0008f24 <pbuf_copy+0x260>
c0008d18:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d1d:	75 15                	jne    c0008d34 <pbuf_copy+0x70>
c0008d1f:	83 ec 08             	sub    esp,0x8
c0008d22:	68 a5 fb 02 c0       	push   0xc002fba5
c0008d27:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008d2c:	e8 8b 6c 01 00       	call   c001f9bc <CPrintf>
c0008d31:	83 c4 10             	add    esp,0x10
c0008d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d38:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d3c:	0f b7 d0             	movzx  edx,ax
c0008d3f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d44:	89 d1                	mov    ecx,edx
c0008d46:	29 c1                	sub    ecx,eax
c0008d48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d4c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d50:	0f b7 d0             	movzx  edx,ax
c0008d53:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008d58:	29 c2                	sub    edx,eax
c0008d5a:	89 d0                	mov    eax,edx
c0008d5c:	39 c1                	cmp    ecx,eax
c0008d5e:	7c 1c                	jl     c0008d7c <pbuf_copy+0xb8>
c0008d60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d64:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	89 d3                	mov    ebx,edx
c0008d6e:	29 c3                	sub    ebx,eax
c0008d70:	89 d8                	mov    eax,ebx
c0008d72:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d77:	eb 1b                	jmp    c0008d94 <pbuf_copy+0xd0>
c0008d79:	8d 76 00             	lea    esi,[esi+0x0]
c0008d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d80:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d84:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008d89:	89 d3                	mov    ebx,edx
c0008d8b:	29 c3                	sub    ebx,eax
c0008d8d:	89 d8                	mov    eax,ebx
c0008d8f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d94:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008d99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d9d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008da0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008da5:	01 d1                	add    ecx,edx
c0008da7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008dab:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008dae:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008db3:	01 da                	add    edx,ebx
c0008db5:	83 ec 04             	sub    esp,0x4
c0008db8:	50                   	push   eax
c0008db9:	51                   	push   ecx
c0008dba:	52                   	push   edx
c0008dbb:	e8 ba 75 ff ff       	call   c000037a <memcpy>
c0008dc0:	83 c4 10             	add    esp,0x10
c0008dc3:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008dc8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008dcd:	01 d0                	add    eax,edx
c0008dcf:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008dd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008dd8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ddd:	01 d0                	add    eax,edx
c0008ddf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008dec:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008df1:	0f b7 c0             	movzx  eax,ax
c0008df4:	39 c2                	cmp    edx,eax
c0008df6:	76 18                	jbe    c0008e10 <pbuf_copy+0x14c>
c0008df8:	83 ec 08             	sub    esp,0x8
c0008dfb:	68 b2 fb 02 c0       	push   0xc002fbb2
c0008e00:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008e05:	e8 b2 6b 01 00       	call   c001f9bc <CPrintf>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0008e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e14:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e18:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e1d:	0f b7 c0             	movzx  eax,ax
c0008e20:	39 c2                	cmp    edx,eax
c0008e22:	75 14                	jne    c0008e38 <pbuf_copy+0x174>
c0008e24:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e35:	8d 76 00             	lea    esi,[esi+0x0]
c0008e38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e3c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e40:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e45:	0f b7 c0             	movzx  eax,ax
c0008e48:	39 c2                	cmp    edx,eax
c0008e4a:	76 18                	jbe    c0008e64 <pbuf_copy+0x1a0>
c0008e4c:	83 ec 08             	sub    esp,0x8
c0008e4f:	68 c9 fb 02 c0       	push   0xc002fbc9
c0008e54:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008e59:	e8 5e 6b 01 00       	call   c001f9bc <CPrintf>
c0008e5e:	83 c4 10             	add    esp,0x10
c0008e61:	8d 76 00             	lea    esi,[esi+0x0]
c0008e64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e68:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e6c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	39 c2                	cmp    edx,eax
c0008e76:	72 14                	jb     c0008e8c <pbuf_copy+0x1c8>
c0008e78:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008e7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e83:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008e89:	8d 76 00             	lea    esi,[esi+0x0]
c0008e8c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008e91:	74 3d                	je     c0008ed0 <pbuf_copy+0x20c>
c0008e93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e97:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ea2:	0f b7 d2             	movzx  edx,dx
c0008ea5:	0f b7 c0             	movzx  eax,ax
c0008ea8:	39 c2                	cmp    edx,eax
c0008eaa:	75 24                	jne    c0008ed0 <pbuf_copy+0x20c>
c0008eac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008eb2:	85 c0                	test   eax,eax
c0008eb4:	74 1a                	je     c0008ed0 <pbuf_copy+0x20c>
c0008eb6:	83 ec 08             	sub    esp,0x8
c0008eb9:	68 f8 f9 02 c0       	push   0xc002f9f8
c0008ebe:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008ec3:	e8 f4 6a 01 00       	call   c001f9bc <CPrintf>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	b0 fa                	mov    al,0xfa
c0008ecd:	eb 55                	jmp    c0008f24 <pbuf_copy+0x260>
c0008ecf:	90                   	nop
c0008ed0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ed5:	74 3d                	je     c0008f14 <pbuf_copy+0x250>
c0008ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008edb:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ee6:	0f b7 d2             	movzx  edx,dx
c0008ee9:	0f b7 c0             	movzx  eax,ax
c0008eec:	39 c2                	cmp    edx,eax
c0008eee:	75 24                	jne    c0008f14 <pbuf_copy+0x250>
c0008ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ef6:	85 c0                	test   eax,eax
c0008ef8:	74 1a                	je     c0008f14 <pbuf_copy+0x250>
c0008efa:	83 ec 08             	sub    esp,0x8
c0008efd:	68 f8 f9 02 c0       	push   0xc002f9f8
c0008f02:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008f07:	e8 b0 6a 01 00       	call   c001f9bc <CPrintf>
c0008f0c:	83 c4 10             	add    esp,0x10
c0008f0f:	b0 fa                	mov    al,0xfa
c0008f11:	eb 11                	jmp    c0008f24 <pbuf_copy+0x260>
c0008f13:	90                   	nop
c0008f14:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f19:	0f 85 f9 fd ff ff    	jne    c0008d18 <pbuf_copy+0x54>
c0008f1f:	b0 00                	mov    al,0x0
c0008f21:	8d 76 00             	lea    esi,[esi+0x0]
c0008f24:	83 c4 18             	add    esp,0x18
c0008f27:	5b                   	pop    ebx
c0008f28:	c3                   	ret    
c0008f29:	8d 76 00             	lea    esi,[esi+0x0]

c0008f2c <pbuf_copy_partial>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008f34:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f38:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f3d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f42:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f49:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f4e:	75 20                	jne    c0008f70 <pbuf_copy_partial+0x44>
c0008f50:	83 ec 08             	sub    esp,0x8
c0008f53:	68 24 fa 02 c0       	push   0xc002fa24
c0008f58:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008f5d:	e8 5a 6a 01 00       	call   c001f9bc <CPrintf>
c0008f62:	83 c4 10             	add    esp,0x10
c0008f65:	b8 00 00 00 00       	mov    eax,0x0
c0008f6a:	e9 59 01 00 00       	jmp    c00090c8 <pbuf_copy_partial+0x19c>
c0008f6f:	90                   	nop
c0008f70:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008f75:	75 21                	jne    c0008f98 <pbuf_copy_partial+0x6c>
c0008f77:	83 ec 08             	sub    esp,0x8
c0008f7a:	68 44 fa 02 c0       	push   0xc002fa44
c0008f7f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0008f84:	e8 33 6a 01 00       	call   c001f9bc <CPrintf>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	b8 00 00 00 00       	mov    eax,0x0
c0008f91:	e9 32 01 00 00       	jmp    c00090c8 <pbuf_copy_partial+0x19c>
c0008f96:	66 90                	xchg   ax,ax
c0008f98:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008f9f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008fa4:	74 0a                	je     c0008fb0 <pbuf_copy_partial+0x84>
c0008fa6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fab:	75 0f                	jne    c0008fbc <pbuf_copy_partial+0x90>
c0008fad:	8d 76 00             	lea    esi,[esi+0x0]
c0008fb0:	b8 00 00 00 00       	mov    eax,0x0
c0008fb5:	e9 0e 01 00 00       	jmp    c00090c8 <pbuf_copy_partial+0x19c>
c0008fba:	66 90                	xchg   ax,ax
c0008fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fc4:	e9 e3 00 00 00       	jmp    c00090ac <pbuf_copy_partial+0x180>
c0008fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0008fcc:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008fd1:	85 c0                	test   eax,eax
c0008fd3:	74 33                	je     c0009008 <pbuf_copy_partial+0xdc>
c0008fd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fdd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0008fe2:	0f b7 c0             	movzx  eax,ax
c0008fe5:	39 c2                	cmp    edx,eax
c0008fe7:	72 1f                	jb     c0009008 <pbuf_copy_partial+0xdc>
c0008fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fed:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ff1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ff5:	89 d3                	mov    ebx,edx
c0008ff7:	29 c3                	sub    ebx,eax
c0008ff9:	89 d8                	mov    eax,ebx
c0008ffb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009000:	e9 9b 00 00 00       	jmp    c00090a0 <pbuf_copy_partial+0x174>
c0009005:	8d 76 00             	lea    esi,[esi+0x0]
c0009008:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000900c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009014:	89 d1                	mov    ecx,edx
c0009016:	29 c1                	sub    ecx,eax
c0009018:	89 c8                	mov    eax,ecx
c000901a:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000901f:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0009024:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009029:	39 c2                	cmp    edx,eax
c000902b:	76 0b                	jbe    c0009038 <pbuf_copy_partial+0x10c>
c000902d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009031:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009036:	66 90                	xchg   ax,ax
c0009038:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000903d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009041:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009044:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009049:	01 d1                	add    ecx,edx
c000904b:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009050:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009054:	01 da                	add    edx,ebx
c0009056:	83 ec 04             	sub    esp,0x4
c0009059:	50                   	push   eax
c000905a:	51                   	push   ecx
c000905b:	52                   	push   edx
c000905c:	e8 19 73 ff ff       	call   c000037a <memcpy>
c0009061:	83 c4 10             	add    esp,0x10
c0009064:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000906d:	01 d0                	add    eax,edx
c000906f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009074:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009079:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000907d:	01 d0                	add    eax,edx
c000907f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000908c:	89 d3                	mov    ebx,edx
c000908e:	29 c3                	sub    ebx,eax
c0009090:	89 d8                	mov    eax,ebx
c0009092:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009097:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000909e:	66 90                	xchg   ax,ax
c00090a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090aa:	66 90                	xchg   ax,ax
c00090ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090b1:	85 c0                	test   eax,eax
c00090b3:	74 0b                	je     c00090c0 <pbuf_copy_partial+0x194>
c00090b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00090ba:	0f 85 0c ff ff ff    	jne    c0008fcc <pbuf_copy_partial+0xa0>
c00090c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00090c5:	8d 76 00             	lea    esi,[esi+0x0]
c00090c8:	83 c4 28             	add    esp,0x28
c00090cb:	5b                   	pop    ebx
c00090cc:	c3                   	ret    
c00090cd:	8d 76 00             	lea    esi,[esi+0x0]

c00090d0 <pbuf_take>:
c00090d0:	83 ec 2c             	sub    esp,0x2c
c00090d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00090d7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090e0:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090e5:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00090ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00090f1:	75 1d                	jne    c0009110 <pbuf_take+0x40>
c00090f3:	83 ec 08             	sub    esp,0x8
c00090f6:	68 e4 fb 02 c0       	push   0xc002fbe4
c00090fb:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009100:	e8 b7 68 01 00       	call   c001f9bc <CPrintf>
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	b0 00                	mov    al,0x0
c000910a:	e9 3d 01 00 00       	jmp    c000924c <pbuf_take+0x17c>
c000910f:	90                   	nop
c0009110:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009115:	75 1d                	jne    c0009134 <pbuf_take+0x64>
c0009117:	83 ec 08             	sub    esp,0x8
c000911a:	68 fb fb 02 c0       	push   0xc002fbfb
c000911f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009124:	e8 93 68 01 00       	call   c001f9bc <CPrintf>
c0009129:	83 c4 10             	add    esp,0x10
c000912c:	b0 00                	mov    al,0x0
c000912e:	e9 19 01 00 00       	jmp    c000924c <pbuf_take+0x17c>
c0009133:	90                   	nop
c0009134:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009139:	74 1d                	je     c0009158 <pbuf_take+0x88>
c000913b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009140:	74 16                	je     c0009158 <pbuf_take+0x88>
c0009142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009149:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000914e:	0f b7 c0             	movzx  eax,ax
c0009151:	39 c2                	cmp    edx,eax
c0009153:	76 0b                	jbe    c0009160 <pbuf_take+0x90>
c0009155:	8d 76 00             	lea    esi,[esi+0x0]
c0009158:	b0 f2                	mov    al,0xf2
c000915a:	e9 ed 00 00 00       	jmp    c000924c <pbuf_take+0x17c>
c000915f:	90                   	nop
c0009160:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009164:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009168:	e9 9f 00 00 00       	jmp    c000920c <pbuf_take+0x13c>
c000916d:	8d 76 00             	lea    esi,[esi+0x0]
c0009170:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009175:	75 15                	jne    c000918c <pbuf_take+0xbc>
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	68 16 fc 02 c0       	push   0xc002fc16
c000917f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009184:	e8 33 68 01 00       	call   c001f9bc <CPrintf>
c0009189:	83 c4 10             	add    esp,0x10
c000918c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009190:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009199:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000919d:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091a2:	0f b7 c0             	movzx  eax,ax
c00091a5:	39 c2                	cmp    edx,eax
c00091a7:	76 0f                	jbe    c00091b8 <pbuf_take+0xe8>
c00091a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ad:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091b1:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091b6:	66 90                	xchg   ax,ax
c00091b8:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091bd:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c00091c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091c6:	01 c1                	add    ecx,eax
c00091c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cf:	83 ec 04             	sub    esp,0x4
c00091d2:	52                   	push   edx
c00091d3:	51                   	push   ecx
c00091d4:	50                   	push   eax
c00091d5:	e8 a0 71 ff ff       	call   c000037a <memcpy>
c00091da:	83 c4 10             	add    esp,0x10
c00091dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00091e1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00091e6:	89 d1                	mov    ecx,edx
c00091e8:	29 c1                	sub    ecx,eax
c00091ea:	89 c8                	mov    eax,ecx
c00091ec:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091f1:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00091f6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00091fb:	01 d0                	add    eax,edx
c00091fd:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009206:	8b 00                	mov    eax,DWORD PTR [eax]
c0009208:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000920c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009211:	85 c0                	test   eax,eax
c0009213:	0f 85 57 ff ff ff    	jne    c0009170 <pbuf_take+0xa0>
c0009219:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000921e:	85 c0                	test   eax,eax
c0009220:	75 0e                	jne    c0009230 <pbuf_take+0x160>
c0009222:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009227:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000922c:	39 c2                	cmp    edx,eax
c000922e:	74 18                	je     c0009248 <pbuf_take+0x178>
c0009230:	83 ec 08             	sub    esp,0x8
c0009233:	68 2e fc 02 c0       	push   0xc002fc2e
c0009238:	68 e6 f6 02 c0       	push   0xc002f6e6
c000923d:	e8 7a 67 01 00       	call   c001f9bc <CPrintf>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	8d 76 00             	lea    esi,[esi+0x0]
c0009248:	b0 00                	mov    al,0x0
c000924a:	66 90                	xchg   ax,ax
c000924c:	83 c4 2c             	add    esp,0x2c
c000924f:	c3                   	ret    

c0009250 <pbuf_coalesce>:
c0009250:	83 ec 1c             	sub    esp,0x1c
c0009253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009257:	8b 00                	mov    eax,DWORD PTR [eax]
c0009259:	85 c0                	test   eax,eax
c000925b:	75 07                	jne    c0009264 <pbuf_coalesce+0x14>
c000925d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009261:	eb 7d                	jmp    c00092e0 <pbuf_coalesce+0x90>
c0009263:	90                   	nop
c0009264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009268:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000926b:	0f b7 c0             	movzx  eax,ax
c000926e:	83 ec 04             	sub    esp,0x4
c0009271:	6a 00                	push   0x0
c0009273:	50                   	push   eax
c0009274:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009278:	e8 df f1 ff ff       	call   c000845c <pbuf_alloc>
c000927d:	83 c4 10             	add    esp,0x10
c0009280:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009284:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009289:	75 09                	jne    c0009294 <pbuf_coalesce+0x44>
c000928b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928f:	eb 4f                	jmp    c00092e0 <pbuf_coalesce+0x90>
c0009291:	8d 76 00             	lea    esi,[esi+0x0]
c0009294:	83 ec 08             	sub    esp,0x8
c0009297:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000929b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000929f:	e8 20 fa ff ff       	call   c0008cc4 <pbuf_copy>
c00092a4:	83 c4 10             	add    esp,0x10
c00092a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00092ab:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00092b0:	85 c0                	test   eax,eax
c00092b2:	74 18                	je     c00092cc <pbuf_coalesce+0x7c>
c00092b4:	83 ec 08             	sub    esp,0x8
c00092b7:	68 44 fc 02 c0       	push   0xc002fc44
c00092bc:	68 e6 f6 02 c0       	push   0xc002f6e6
c00092c1:	e8 f6 66 01 00       	call   c001f9bc <CPrintf>
c00092c6:	83 c4 10             	add    esp,0x10
c00092c9:	8d 76 00             	lea    esi,[esi+0x0]
c00092cc:	83 ec 0c             	sub    esp,0xc
c00092cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092d3:	e8 a8 ef ff ff       	call   c0008280 <pbuf_free>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092df:	90                   	nop
c00092e0:	83 c4 1c             	add    esp,0x1c
c00092e3:	c3                   	ret    

c00092e4 <pbuf_get_at>:
c00092e4:	83 ec 14             	sub    esp,0x14
c00092e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092eb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00092ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00092f2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00092f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092ff:	eb 27                	jmp    c0009328 <pbuf_get_at+0x44>
c0009301:	8d 76 00             	lea    esi,[esi+0x0]
c0009304:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009308:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000930c:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009311:	89 d1                	mov    ecx,edx
c0009313:	29 c1                	sub    ecx,eax
c0009315:	89 c8                	mov    eax,ecx
c0009317:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000931c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009320:	8b 00                	mov    eax,DWORD PTR [eax]
c0009322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009326:	66 90                	xchg   ax,ax
c0009328:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000932d:	74 15                	je     c0009344 <pbuf_get_at+0x60>
c000932f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009333:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009337:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000933c:	0f b7 c0             	movzx  eax,ax
c000933f:	39 c2                	cmp    edx,eax
c0009341:	73 c1                	jae    c0009304 <pbuf_get_at+0x20>
c0009343:	90                   	nop
c0009344:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009349:	74 29                	je     c0009374 <pbuf_get_at+0x90>
c000934b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000934f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009353:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009358:	0f b7 c0             	movzx  eax,ax
c000935b:	39 c2                	cmp    edx,eax
c000935d:	73 15                	jae    c0009374 <pbuf_get_at+0x90>
c000935f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009363:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009366:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000936b:	01 d0                	add    eax,edx
c000936d:	8a 00                	mov    al,BYTE PTR [eax]
c000936f:	eb 07                	jmp    c0009378 <pbuf_get_at+0x94>
c0009371:	8d 76 00             	lea    esi,[esi+0x0]
c0009374:	b0 00                	mov    al,0x0
c0009376:	66 90                	xchg   ax,ax
c0009378:	83 c4 14             	add    esp,0x14
c000937b:	c3                   	ret    

c000937c <pbuf_memcmp>:
c000937c:	83 ec 18             	sub    esp,0x18
c000937f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009383:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009387:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000938c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009394:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000939d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093a1:	eb 25                	jmp    c00093c8 <pbuf_memcmp+0x4c>
c00093a3:	90                   	nop
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093ac:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00093b1:	89 d1                	mov    ecx,edx
c00093b3:	29 c1                	sub    ecx,eax
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00093c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093c6:	66 90                	xchg   ax,ax
c00093c8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093cd:	74 15                	je     c00093e4 <pbuf_memcmp+0x68>
c00093cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093d7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093dc:	0f b7 c0             	movzx  eax,ax
c00093df:	39 c2                	cmp    edx,eax
c00093e1:	73 c1                	jae    c00093a4 <pbuf_memcmp+0x28>
c00093e3:	90                   	nop
c00093e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093e9:	0f 84 8d 00 00 00    	je     c000947c <pbuf_memcmp+0x100>
c00093ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093f7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093fc:	0f b7 c0             	movzx  eax,ax
c00093ff:	39 c2                	cmp    edx,eax
c0009401:	73 79                	jae    c000947c <pbuf_memcmp+0x100>
c0009403:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000940a:	eb 5c                	jmp    c0009468 <pbuf_memcmp+0xec>
c000940c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009411:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009416:	01 d0                	add    eax,edx
c0009418:	0f b7 c0             	movzx  eax,ax
c000941b:	50                   	push   eax
c000941c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009420:	e8 bf fe ff ff       	call   c00092e4 <pbuf_get_at>
c0009425:	83 c4 08             	add    esp,0x8
c0009428:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c000942c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009431:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009435:	01 d0                	add    eax,edx
c0009437:	8a 00                	mov    al,BYTE PTR [eax]
c0009439:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000943d:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009442:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009447:	39 c2                	cmp    edx,eax
c0009449:	74 0d                	je     c0009458 <pbuf_memcmp+0xdc>
c000944b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009450:	83 c0 01             	add    eax,0x1
c0009453:	eb 2f                	jmp    c0009484 <pbuf_memcmp+0x108>
c0009455:	8d 76 00             	lea    esi,[esi+0x0]
c0009458:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000945d:	83 c0 01             	add    eax,0x1
c0009460:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009465:	8d 76 00             	lea    esi,[esi+0x0]
c0009468:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000946d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009471:	39 c2                	cmp    edx,eax
c0009473:	72 97                	jb     c000940c <pbuf_memcmp+0x90>
c0009475:	b8 00 00 00 00       	mov    eax,0x0
c000947a:	eb 08                	jmp    c0009484 <pbuf_memcmp+0x108>
c000947c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009481:	8d 76 00             	lea    esi,[esi+0x0]
c0009484:	83 c4 18             	add    esp,0x18
c0009487:	c3                   	ret    

c0009488 <pbuf_memfind>:
c0009488:	83 ec 18             	sub    esp,0x18
c000948b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000948f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009493:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009498:	66 89 04 24          	mov    WORD PTR [esp],ax
c000949c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094a0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00094a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094a7:	89 d1                	mov    ecx,edx
c00094a9:	29 c1                	sub    ecx,eax
c00094ab:	89 c8                	mov    eax,ecx
c00094ad:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00094b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094b9:	0f b7 c0             	movzx  eax,ax
c00094bc:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00094c1:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00094c5:	01 ca                	add    edx,ecx
c00094c7:	39 d0                	cmp    eax,edx
c00094c9:	7c 65                	jl     c0009530 <pbuf_memfind+0xa8>
c00094cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00094ce:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094d3:	eb 4b                	jmp    c0009520 <pbuf_memfind+0x98>
c00094d5:	8d 76 00             	lea    esi,[esi+0x0]
c00094d8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00094dd:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00094e2:	52                   	push   edx
c00094e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e7:	50                   	push   eax
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	e8 8b fe ff ff       	call   c000937c <pbuf_memcmp>
c00094f1:	83 c4 10             	add    esp,0x10
c00094f4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00094f9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00094fe:	85 c0                	test   eax,eax
c0009500:	75 0a                	jne    c000950c <pbuf_memfind+0x84>
c0009502:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009507:	eb 2f                	jmp    c0009538 <pbuf_memfind+0xb0>
c0009509:	8d 76 00             	lea    esi,[esi+0x0]
c000950c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009511:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0009516:	01 d0                	add    eax,edx
c0009518:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000951d:	8d 76 00             	lea    esi,[esi+0x0]
c0009520:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009525:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c000952a:	39 c2                	cmp    edx,eax
c000952c:	76 aa                	jbe    c00094d8 <pbuf_memfind+0x50>
c000952e:	66 90                	xchg   ax,ax
c0009530:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009535:	8d 76 00             	lea    esi,[esi+0x0]
c0009538:	83 c4 18             	add    esp,0x18
c000953b:	c3                   	ret    

c000953c <pbuf_strstr>:
c000953c:	83 ec 1c             	sub    esp,0x1c
c000953f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009544:	74 1e                	je     c0009564 <pbuf_strstr+0x28>
c0009546:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000954a:	8a 00                	mov    al,BYTE PTR [eax]
c000954c:	0f be c0             	movsx  eax,al
c000954f:	85 c0                	test   eax,eax
c0009551:	74 11                	je     c0009564 <pbuf_strstr+0x28>
c0009553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000955a:	0f b7 c0             	movzx  eax,ax
c000955d:	3d ff ff 00 00       	cmp    eax,0xffff
c0009562:	75 08                	jne    c000956c <pbuf_strstr+0x30>
c0009564:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009569:	eb 41                	jmp    c00095ac <pbuf_strstr+0x70>
c000956b:	90                   	nop
c000956c:	83 ec 0c             	sub    esp,0xc
c000956f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009573:	e8 08 70 ff ff       	call   c0000580 <strlen>
c0009578:	83 c4 10             	add    esp,0x10
c000957b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000957f:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c0009587:	76 07                	jbe    c0009590 <pbuf_strstr+0x54>
c0009589:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000958e:	eb 1c                	jmp    c00095ac <pbuf_strstr+0x70>
c0009590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009594:	0f b7 c0             	movzx  eax,ax
c0009597:	6a 00                	push   0x0
c0009599:	50                   	push   eax
c000959a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000959e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095a2:	e8 e1 fe ff ff       	call   c0009488 <pbuf_memfind>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	66 90                	xchg   ax,ax
c00095ac:	83 c4 1c             	add    esp,0x1c
c00095af:	c3                   	ret    

c00095b0 <raw_input>:
c00095b0:	83 ec 2c             	sub    esp,0x2c
c00095b3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00095b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00095bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00095bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095c7:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00095ca:	0f b6 c0             	movzx  eax,al
c00095cd:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00095d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00095da:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00095df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095e3:	e9 b8 00 00 00       	jmp    c00096a0 <raw_input+0xf0>
c00095e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00095ef:	0f b6 d0             	movzx  edx,al
c00095f2:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00095f7:	39 c2                	cmp    edx,eax
c00095f9:	0f 85 8d 00 00 00    	jne    c000968c <raw_input+0xdc>
c00095ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009603:	85 c0                	test   eax,eax
c0009605:	74 19                	je     c0009620 <raw_input+0x70>
c0009607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000960b:	8b 00                	mov    eax,DWORD PTR [eax]
c000960d:	85 c0                	test   eax,eax
c000960f:	74 0f                	je     c0009620 <raw_input+0x70>
c0009611:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009615:	8b 10                	mov    edx,DWORD PTR [eax]
c0009617:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000961c:	39 c2                	cmp    edx,eax
c000961e:	75 6c                	jne    c000968c <raw_input+0xdc>
c0009620:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009624:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009627:	85 c0                	test   eax,eax
c0009629:	74 61                	je     c000968c <raw_input+0xdc>
c000962b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000962f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009636:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009639:	68 90 68 03 c0       	push   0xc0036890
c000963e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009646:	52                   	push   edx
c0009647:	ff d0                	call   eax
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	0f b6 c0             	movzx  eax,al
c000964f:	85 c0                	test   eax,eax
c0009651:	74 39                	je     c000968c <raw_input+0xdc>
c0009653:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000965b:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009660:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009665:	74 25                	je     c000968c <raw_input+0xdc>
c0009667:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000966b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000966e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009672:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009675:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000967b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000967f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009682:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009686:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000968b:	90                   	nop
c000968c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009690:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009698:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000969b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000969f:	90                   	nop
c00096a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00096a5:	85 c0                	test   eax,eax
c00096a7:	75 0b                	jne    c00096b4 <raw_input+0x104>
c00096a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00096ae:	0f 85 34 ff ff ff    	jne    c00095e8 <raw_input+0x38>
c00096b4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00096b8:	83 c4 2c             	add    esp,0x2c
c00096bb:	c3                   	ret    

c00096bc <raw_bind>:
c00096bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096c1:	74 09                	je     c00096cc <raw_bind+0x10>
c00096c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c9:	eb 09                	jmp    c00096d4 <raw_bind+0x18>
c00096cb:	90                   	nop
c00096cc:	b8 00 00 00 00       	mov    eax,0x0
c00096d1:	8d 76 00             	lea    esi,[esi+0x0]
c00096d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096d8:	89 02                	mov    DWORD PTR [edx],eax
c00096da:	b0 00                	mov    al,0x0
c00096dc:	c3                   	ret    
c00096dd:	8d 76 00             	lea    esi,[esi+0x0]

c00096e0 <raw_connect>:
c00096e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096e5:	74 09                	je     c00096f0 <raw_connect+0x10>
c00096e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096ed:	eb 09                	jmp    c00096f8 <raw_connect+0x18>
c00096ef:	90                   	nop
c00096f0:	b8 00 00 00 00       	mov    eax,0x0
c00096f5:	8d 76 00             	lea    esi,[esi+0x0]
c00096f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096fc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00096ff:	b0 00                	mov    al,0x0
c0009701:	c3                   	ret    
c0009702:	66 90                	xchg   ax,ax

c0009704 <raw_recv>:
c0009704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000970c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000970f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009713:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009717:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000971a:	90                   	nop
c000971b:	c3                   	ret    

c000971c <raw_sendto>:
c000971c:	83 ec 1c             	sub    esp,0x1c
c000971f:	83 ec 08             	sub    esp,0x8
c0009722:	6a 14                	push   0x14
c0009724:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009728:	e8 b3 e9 ff ff       	call   c00080e0 <pbuf_header>
c000972d:	83 c4 10             	add    esp,0x10
c0009730:	0f b6 c0             	movzx  eax,al
c0009733:	85 c0                	test   eax,eax
c0009735:	74 49                	je     c0009780 <raw_sendto+0x64>
c0009737:	83 ec 04             	sub    esp,0x4
c000973a:	6a 00                	push   0x0
c000973c:	6a 00                	push   0x0
c000973e:	6a 01                	push   0x1
c0009740:	e8 17 ed ff ff       	call   c000845c <pbuf_alloc>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000974c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009751:	75 09                	jne    c000975c <raw_sendto+0x40>
c0009753:	b0 ff                	mov    al,0xff
c0009755:	e9 2a 01 00 00       	jmp    c0009884 <raw_sendto+0x168>
c000975a:	66 90                	xchg   ax,ax
c000975c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009760:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009763:	0f b7 c0             	movzx  eax,ax
c0009766:	85 c0                	test   eax,eax
c0009768:	74 52                	je     c00097bc <raw_sendto+0xa0>
c000976a:	83 ec 08             	sub    esp,0x8
c000976d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009775:	e8 2a f4 ff ff       	call   c0008ba4 <pbuf_chain>
c000977a:	83 c4 10             	add    esp,0x10
c000977d:	eb 3d                	jmp    c00097bc <raw_sendto+0xa0>
c000977f:	90                   	nop
c0009780:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009784:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009788:	83 ec 08             	sub    esp,0x8
c000978b:	6a ec                	push   0xffffffec
c000978d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009791:	e8 4a e9 ff ff       	call   c00080e0 <pbuf_header>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	0f b6 c0             	movzx  eax,al
c000979c:	85 c0                	test   eax,eax
c000979e:	74 1c                	je     c00097bc <raw_sendto+0xa0>
c00097a0:	83 ec 08             	sub    esp,0x8
c00097a3:	68 58 fc 02 c0       	push   0xc002fc58
c00097a8:	68 e6 f6 02 c0       	push   0xc002f6e6
c00097ad:	e8 0a 62 01 00       	call   c001f9bc <CPrintf>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	b0 ff                	mov    al,0xff
c00097b7:	e9 c8 00 00 00       	jmp    c0009884 <raw_sendto+0x168>
c00097bc:	83 ec 0c             	sub    esp,0xc
c00097bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c3:	e8 00 9e 00 00       	call   c00135c8 <ip_route>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097cf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00097d4:	75 22                	jne    c00097f8 <raw_sendto+0xdc>
c00097d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097da:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00097de:	74 10                	je     c00097f0 <raw_sendto+0xd4>
c00097e0:	83 ec 0c             	sub    esp,0xc
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 94 ea ff ff       	call   c0008280 <pbuf_free>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	90                   	nop
c00097f0:	b0 fc                	mov    al,0xfc
c00097f2:	e9 8d 00 00 00       	jmp    c0009884 <raw_sendto+0x168>
c00097f7:	90                   	nop
c00097f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097fc:	85 c0                	test   eax,eax
c00097fe:	74 0c                	je     c000980c <raw_sendto+0xf0>
c0009800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009804:	8b 00                	mov    eax,DWORD PTR [eax]
c0009806:	85 c0                	test   eax,eax
c0009808:	75 12                	jne    c000981c <raw_sendto+0x100>
c000980a:	66 90                	xchg   ax,ax
c000980c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009810:	83 c0 04             	add    eax,0x4
c0009813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009817:	eb 0b                	jmp    c0009824 <raw_sendto+0x108>
c0009819:	8d 76 00             	lea    esi,[esi+0x0]
c000981c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009820:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009828:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c000982b:	0f b6 c8             	movzx  ecx,al
c000982e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009832:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009835:	0f b6 d0             	movzx  edx,al
c0009838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000983c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000983f:	0f b6 c0             	movzx  eax,al
c0009842:	83 ec 04             	sub    esp,0x4
c0009845:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009849:	51                   	push   ecx
c000984a:	52                   	push   edx
c000984b:	50                   	push   eax
c000984c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009850:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009858:	e8 43 a2 00 00       	call   c0013aa0 <ip_output_if>
c000985d:	83 c4 20             	add    esp,0x20
c0009860:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009868:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c000986c:	74 12                	je     c0009880 <raw_sendto+0x164>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009875:	e8 06 ea ff ff       	call   c0008280 <pbuf_free>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	8d 76 00             	lea    esi,[esi+0x0]
c0009880:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009884:	83 c4 1c             	add    esp,0x1c
c0009887:	c3                   	ret    

c0009888 <raw_send>:
c0009888:	83 ec 0c             	sub    esp,0xc
c000988b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988f:	83 c0 04             	add    eax,0x4
c0009892:	83 ec 04             	sub    esp,0x4
c0009895:	50                   	push   eax
c0009896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000989a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000989e:	e8 79 fe ff ff       	call   c000971c <raw_sendto>
c00098a3:	83 c4 10             	add    esp,0x10
c00098a6:	83 c4 0c             	add    esp,0xc
c00098a9:	c3                   	ret    
c00098aa:	66 90                	xchg   ax,ax

c00098ac <raw_remove>:
c00098ac:	83 ec 1c             	sub    esp,0x1c
c00098af:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098b4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00098b8:	75 12                	jne    c00098cc <raw_remove+0x20>
c00098ba:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098c2:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098c7:	eb 4b                	jmp    c0009914 <raw_remove+0x68>
c00098c9:	8d 76 00             	lea    esi,[esi+0x0]
c00098cc:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098d5:	eb 35                	jmp    c000990c <raw_remove+0x60>
c00098d7:	90                   	nop
c00098d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098df:	85 c0                	test   eax,eax
c00098e1:	74 1d                	je     c0009900 <raw_remove+0x54>
c00098e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ea:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00098ee:	75 10                	jne    c0009900 <raw_remove+0x54>
c00098f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098fe:	66 90                	xchg   ax,ax
c0009900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000990b:	90                   	nop
c000990c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009911:	75 c5                	jne    c00098d8 <raw_remove+0x2c>
c0009913:	90                   	nop
c0009914:	83 ec 08             	sub    esp,0x8
c0009917:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000991b:	6a 00                	push   0x0
c000991d:	e8 9e e0 ff ff       	call   c00079c0 <memp_free>
c0009922:	83 c4 10             	add    esp,0x10
c0009925:	90                   	nop
c0009926:	83 c4 1c             	add    esp,0x1c
c0009929:	c3                   	ret    
c000992a:	66 90                	xchg   ax,ax

c000992c <raw_new>:
c000992c:	83 ec 2c             	sub    esp,0x2c
c000992f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009933:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009937:	83 ec 0c             	sub    esp,0xc
c000993a:	6a 00                	push   0x0
c000993c:	e8 53 df ff ff       	call   c0007894 <memp_malloc>
c0009941:	83 c4 10             	add    esp,0x10
c0009944:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000994d:	74 3d                	je     c000998c <raw_new+0x60>
c000994f:	83 ec 04             	sub    esp,0x4
c0009952:	6a 1c                	push   0x1c
c0009954:	6a 00                	push   0x0
c0009956:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000995a:	e8 91 6b ff ff       	call   c00004f0 <memset>
c000995f:	83 c4 10             	add    esp,0x10
c0009962:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009966:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000996a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c000996d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009971:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009975:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000997b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000997f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009986:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000998b:	90                   	nop
c000998c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009990:	83 c4 2c             	add    esp,0x2c
c0009993:	c3                   	ret    

c0009994 <stats_init>:
c0009994:	90                   	nop
c0009995:	c3                   	ret    
c0009996:	66 90                	xchg   ax,ax

c0009998 <sys_msleep>:
c0009998:	83 ec 1c             	sub    esp,0x1c
c000999b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00099a0:	74 46                	je     c00099e8 <sys_msleep+0x50>
c00099a2:	83 ec 08             	sub    esp,0x8
c00099a5:	6a 00                	push   0x0
c00099a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099ab:	50                   	push   eax
c00099ac:	e8 d3 72 ff ff       	call   c0000c84 <sys_sem_new>
c00099b1:	83 c4 10             	add    esp,0x10
c00099b4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00099b8:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00099bd:	85 c0                	test   eax,eax
c00099bf:	75 27                	jne    c00099e8 <sys_msleep+0x50>
c00099c1:	83 ec 08             	sub    esp,0x8
c00099c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099cc:	50                   	push   eax
c00099cd:	e8 ca 72 ff ff       	call   c0000c9c <sys_arch_sem_wait>
c00099d2:	83 c4 10             	add    esp,0x10
c00099d5:	83 ec 0c             	sub    esp,0xc
c00099d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099dc:	50                   	push   eax
c00099dd:	e8 b2 72 ff ff       	call   c0000c94 <sys_sem_free>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	8d 76 00             	lea    esi,[esi+0x0]
c00099e8:	90                   	nop
c00099e9:	83 c4 1c             	add    esp,0x1c
c00099ec:	c3                   	ret    
c00099ed:	66 90                	xchg   ax,ax
c00099ef:	90                   	nop

c00099f0 <tcp_accept_null>:
c00099f0:	83 ec 04             	sub    esp,0x4
c00099f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099f7:	88 04 24             	mov    BYTE PTR [esp],al
c00099fa:	b0 f6                	mov    al,0xf6
c00099fc:	83 c4 04             	add    esp,0x4
c00099ff:	c3                   	ret    

c0009a00 <tcp_listen_with_backlog>:
c0009a00:	83 ec 2c             	sub    esp,0x2c
c0009a03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a12:	85 c0                	test   eax,eax
c0009a14:	74 22                	je     c0009a38 <tcp_listen_with_backlog+0x38>
c0009a16:	83 ec 08             	sub    esp,0x8
c0009a19:	68 80 fc 02 c0       	push   0xc002fc80
c0009a1e:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009a23:	e8 94 5f 01 00       	call   c001f9bc <CPrintf>
c0009a28:	83 c4 10             	add    esp,0x10
c0009a2b:	b8 00 00 00 00       	mov    eax,0x0
c0009a30:	e9 77 01 00 00       	jmp    c0009bac <tcp_listen_with_backlog+0x1ac>
c0009a35:	8d 76 00             	lea    esi,[esi+0x0]
c0009a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a3f:	83 f8 01             	cmp    eax,0x1
c0009a42:	75 0c                	jne    c0009a50 <tcp_listen_with_backlog+0x50>
c0009a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a48:	e9 5f 01 00 00       	jmp    c0009bac <tcp_listen_with_backlog+0x1ac>
c0009a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009a50:	83 ec 0c             	sub    esp,0xc
c0009a53:	6a 03                	push   0x3
c0009a55:	e8 3a de ff ff       	call   c0007894 <memp_malloc>
c0009a5a:	83 c4 10             	add    esp,0x10
c0009a5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a61:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a66:	75 0c                	jne    c0009a74 <tcp_listen_with_backlog+0x74>
c0009a68:	b8 00 00 00 00       	mov    eax,0x0
c0009a6d:	e9 3a 01 00 00       	jmp    c0009bac <tcp_listen_with_backlog+0x1ac>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a7f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009a82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a86:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a8d:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a95:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009a9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aa0:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009aa7:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009aaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aae:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009ab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ab5:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009abc:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009abf:	83 c8 02             	or     eax,0x2
c0009ac2:	88 c2                	mov    dl,al
c0009ac4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ac8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009acb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009acf:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009ad2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad6:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009ad9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009add:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ae4:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009ae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aeb:	8b 10                	mov    edx,DWORD PTR [eax]
c0009aed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009af1:	89 10                	mov    DWORD PTR [eax],edx
c0009af3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009afa:	0f b7 c0             	movzx  eax,ax
c0009afd:	85 c0                	test   eax,eax
c0009aff:	74 6f                	je     c0009b70 <tcp_listen_with_backlog+0x170>
c0009b01:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b06:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b0a:	75 10                	jne    c0009b1c <tcp_listen_with_backlog+0x11c>
c0009b0c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b14:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009b19:	eb 49                	jmp    c0009b64 <tcp_listen_with_backlog+0x164>
c0009b1b:	90                   	nop
c0009b1c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b21:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b26:	eb 30                	jmp    c0009b58 <tcp_listen_with_backlog+0x158>
c0009b28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b30:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b34:	75 12                	jne    c0009b48 <tcp_listen_with_backlog+0x148>
c0009b36:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b3f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b45:	eb 1d                	jmp    c0009b64 <tcp_listen_with_backlog+0x164>
c0009b47:	90                   	nop
c0009b48:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b50:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b55:	8d 76 00             	lea    esi,[esi+0x0]
c0009b58:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b5d:	85 c0                	test   eax,eax
c0009b5f:	75 c7                	jne    c0009b28 <tcp_listen_with_backlog+0x128>
c0009b61:	8d 76 00             	lea    esi,[esi+0x0]
c0009b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b68:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009b6f:	90                   	nop
c0009b70:	83 ec 08             	sub    esp,0x8
c0009b73:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009b77:	6a 02                	push   0x2
c0009b79:	e8 42 de ff ff       	call   c00079c0 <memp_free>
c0009b7e:	83 c4 10             	add    esp,0x10
c0009b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b85:	c7 40 1c f0 99 00 c0 	mov    DWORD PTR [eax+0x1c],0xc00099f0
c0009b8c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009b92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009ba2:	e8 21 6f 00 00       	call   c0010ac8 <tcp_timer_needed>
c0009ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bab:	90                   	nop
c0009bac:	83 c4 2c             	add    esp,0x2c
c0009baf:	c3                   	ret    

c0009bb0 <tcp_update_rcv_ann_wnd>:
c0009bb0:	83 ec 1c             	sub    esp,0x1c
c0009bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bbe:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009bc1:	0f b7 c0             	movzx  eax,ax
c0009bc4:	01 d0                	add    eax,edx
c0009bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bce:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd8:	0f b7 c8             	movzx  ecx,ax
c0009bdb:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009be1:	76 05                	jbe    c0009be8 <tcp_update_rcv_ann_wnd+0x38>
c0009be3:	b8 30 04 00 00       	mov    eax,0x430
c0009be8:	0f b7 c0             	movzx  eax,ax
c0009beb:	01 c2                	add    edx,eax
c0009bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf1:	29 d0                	sub    eax,edx
c0009bf3:	78 23                	js     c0009c18 <tcp_update_rcv_ann_wnd+0x68>
c0009bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf9:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c00:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c08:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c0f:	29 c2                	sub    edx,eax
c0009c11:	89 d0                	mov    eax,edx
c0009c13:	eb 77                	jmp    c0009c8c <tcp_update_rcv_ann_wnd+0xdc>
c0009c15:	8d 76 00             	lea    esi,[esi+0x0]
c0009c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c23:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c26:	29 c2                	sub    edx,eax
c0009c28:	89 d0                	mov    eax,edx
c0009c2a:	85 c0                	test   eax,eax
c0009c2c:	7e 0e                	jle    c0009c3c <tcp_update_rcv_ann_wnd+0x8c>
c0009c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c32:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c38:	eb 4a                	jmp    c0009c84 <tcp_update_rcv_ann_wnd+0xd4>
c0009c3a:	66 90                	xchg   ax,ax
c0009c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c40:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c47:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c4a:	29 c2                	sub    edx,eax
c0009c4c:	89 d0                	mov    eax,edx
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009c5a:	76 18                	jbe    c0009c74 <tcp_update_rcv_ann_wnd+0xc4>
c0009c5c:	83 ec 08             	sub    esp,0x8
c0009c5f:	68 b4 fe 02 c0       	push   0xc002feb4
c0009c64:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009c69:	e8 4e 5d 01 00       	call   c001f9bc <CPrintf>
c0009c6e:	83 c4 10             	add    esp,0x10
c0009c71:	8d 76 00             	lea    esi,[esi+0x0]
c0009c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c78:	89 c2                	mov    edx,eax
c0009c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c7e:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009c82:	66 90                	xchg   ax,ax
c0009c84:	b8 00 00 00 00       	mov    eax,0x0
c0009c89:	8d 76 00             	lea    esi,[esi+0x0]
c0009c8c:	83 c4 1c             	add    esp,0x1c
c0009c8f:	c3                   	ret    

c0009c90 <tcp_recved>:
c0009c90:	83 ec 2c             	sub    esp,0x2c
c0009c93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c97:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009c9c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009ca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ca8:	0f b7 c0             	movzx  eax,ax
c0009cab:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009cb0:	29 c1                	sub    ecx,eax
c0009cb2:	89 c8                	mov    eax,ecx
c0009cb4:	39 c2                	cmp    edx,eax
c0009cb6:	7e 18                	jle    c0009cd0 <tcp_recved+0x40>
c0009cb8:	83 ec 08             	sub    esp,0x8
c0009cbb:	68 a4 fc 02 c0       	push   0xc002fca4
c0009cc0:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009cc5:	e8 f2 5c 01 00       	call   c001f9bc <CPrintf>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0009cd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cdb:	01 d0                	add    eax,edx
c0009cdd:	89 c2                	mov    edx,eax
c0009cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce3:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ceb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cee:	0f b7 c0             	movzx  eax,ax
c0009cf1:	3d 60 08 00 00       	cmp    eax,0x860
c0009cf6:	76 0c                	jbe    c0009d04 <tcp_recved+0x74>
c0009cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cfc:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009d02:	66 90                	xchg   ax,ax
c0009d04:	83 ec 0c             	sub    esp,0xc
c0009d07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d0b:	e8 a0 fe ff ff       	call   c0009bb0 <tcp_update_rcv_ann_wnd>
c0009d10:	83 c4 10             	add    esp,0x10
c0009d13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d17:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009d1f:	7e 23                	jle    c0009d44 <tcp_recved+0xb4>
c0009d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d25:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009d28:	83 c8 02             	or     eax,0x2
c0009d2b:	88 c2                	mov    dl,al
c0009d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d31:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009d34:	83 ec 0c             	sub    esp,0xc
c0009d37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d3b:	e8 e0 60 00 00       	call   c000fe20 <tcp_output>
c0009d40:	83 c4 10             	add    esp,0x10
c0009d43:	90                   	nop
c0009d44:	90                   	nop
c0009d45:	83 c4 2c             	add    esp,0x2c
c0009d48:	c3                   	ret    
c0009d49:	8d 76 00             	lea    esi,[esi+0x0]

c0009d4c <tcp_new_port>:
c0009d4c:	83 ec 10             	sub    esp,0x10
c0009d4f:	90                   	nop
c0009d50:	66 a1 90 37 03 c0    	mov    ax,ds:0xc0033790
c0009d56:	8d 50 01             	lea    edx,[eax+0x1]
c0009d59:	66 89 15 90 37 03 c0 	mov    WORD PTR ds:0xc0033790,dx
c0009d60:	0f b7 c0             	movzx  eax,ax
c0009d63:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d68:	75 0a                	jne    c0009d74 <tcp_new_port+0x28>
c0009d6a:	66 c7 05 90 37 03 c0 00 c0 	mov    WORD PTR ds:0xc0033790,0xc000
c0009d73:	90                   	nop
c0009d74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009d7c:	eb 4a                	jmp    c0009dc8 <tcp_new_port+0x7c>
c0009d7e:	66 90                	xchg   ax,ax
c0009d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d84:	8b 04 85 c0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0040]
c0009d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d91:	eb 29                	jmp    c0009dbc <tcp_new_port+0x70>
c0009d93:	90                   	nop
c0009d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d98:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009d9b:	66 a1 90 37 03 c0    	mov    ax,ds:0xc0033790
c0009da1:	0f b7 d2             	movzx  edx,dx
c0009da4:	0f b7 c0             	movzx  eax,ax
c0009da7:	39 c2                	cmp    edx,eax
c0009da9:	75 05                	jne    c0009db0 <tcp_new_port+0x64>
c0009dab:	eb a3                	jmp    c0009d50 <tcp_new_port+0x4>
c0009dad:	8d 76 00             	lea    esi,[esi+0x0]
c0009db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009db4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009dbb:	90                   	nop
c0009dbc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009dc1:	75 d1                	jne    c0009d94 <tcp_new_port+0x48>
c0009dc3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009dc8:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009dcd:	7e b1                	jle    c0009d80 <tcp_new_port+0x34>
c0009dcf:	66 a1 90 37 03 c0    	mov    ax,ds:0xc0033790
c0009dd5:	83 c4 10             	add    esp,0x10
c0009dd8:	c3                   	ret    
c0009dd9:	8d 76 00             	lea    esi,[esi+0x0]

c0009ddc <tcp_bind>:
c0009ddc:	83 ec 2c             	sub    esp,0x2c
c0009ddf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009de3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009de8:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009df0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009df7:	85 c0                	test   eax,eax
c0009df9:	74 1d                	je     c0009e18 <tcp_bind+0x3c>
c0009dfb:	83 ec 08             	sub    esp,0x8
c0009dfe:	68 c8 fc 02 c0       	push   0xc002fcc8
c0009e03:	68 e6 f6 02 c0       	push   0xc002f6e6
c0009e08:	e8 af 5b 01 00       	call   c001f9bc <CPrintf>
c0009e0d:	83 c4 10             	add    esp,0x10
c0009e10:	b0 fa                	mov    al,0xfa
c0009e12:	e9 f1 00 00 00       	jmp    c0009f08 <tcp_bind+0x12c>
c0009e17:	90                   	nop
c0009e18:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009e1d:	85 c0                	test   eax,eax
c0009e1f:	75 0b                	jne    c0009e2c <tcp_bind+0x50>
c0009e21:	e8 26 ff ff ff       	call   c0009d4c <tcp_new_port>
c0009e26:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e2b:	90                   	nop
c0009e2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e34:	eb 7a                	jmp    c0009eb0 <tcp_bind+0xd4>
c0009e36:	66 90                	xchg   ax,ax
c0009e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e3c:	8b 04 85 c0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0040]
c0009e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e49:	eb 59                	jmp    c0009ea4 <tcp_bind+0xc8>
c0009e4b:	90                   	nop
c0009e4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009e53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009e58:	0f b7 c0             	movzx  eax,ax
c0009e5b:	39 c2                	cmp    edx,eax
c0009e5d:	75 39                	jne    c0009e98 <tcp_bind+0xbc>
c0009e5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e63:	85 c0                	test   eax,eax
c0009e65:	74 2d                	je     c0009e94 <tcp_bind+0xb8>
c0009e67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e6d:	85 c0                	test   eax,eax
c0009e6f:	74 23                	je     c0009e94 <tcp_bind+0xb8>
c0009e71:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009e76:	74 1c                	je     c0009e94 <tcp_bind+0xb8>
c0009e78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7e:	85 c0                	test   eax,eax
c0009e80:	74 12                	je     c0009e94 <tcp_bind+0xb8>
c0009e82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e86:	8b 10                	mov    edx,DWORD PTR [eax]
c0009e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e8e:	39 c2                	cmp    edx,eax
c0009e90:	75 06                	jne    c0009e98 <tcp_bind+0xbc>
c0009e92:	66 90                	xchg   ax,ax
c0009e94:	b0 f8                	mov    al,0xf8
c0009e96:	eb 70                	jmp    c0009f08 <tcp_bind+0x12c>
c0009e98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ea3:	90                   	nop
c0009ea4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009ea9:	75 a1                	jne    c0009e4c <tcp_bind+0x70>
c0009eab:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009eb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009eb4:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009eb8:	0f 8c 7a ff ff ff    	jl     c0009e38 <tcp_bind+0x5c>
c0009ebe:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009ec3:	74 17                	je     c0009edc <tcp_bind+0x100>
c0009ec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec9:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ecb:	85 c0                	test   eax,eax
c0009ecd:	74 0d                	je     c0009edc <tcp_bind+0x100>
c0009ecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ed7:	8b 12                	mov    edx,DWORD PTR [edx]
c0009ed9:	89 10                	mov    DWORD PTR [eax],edx
c0009edb:	90                   	nop
c0009edc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ee4:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009ee8:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef9:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009efe:	e8 c5 6b 00 00       	call   c0010ac8 <tcp_timer_needed>
c0009f03:	b0 00                	mov    al,0x0
c0009f05:	8d 76 00             	lea    esi,[esi+0x0]
c0009f08:	83 c4 2c             	add    esp,0x2c
c0009f0b:	c3                   	ret    

c0009f0c <tcp_seg_free>:
c0009f0c:	83 ec 0c             	sub    esp,0xc
c0009f0f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009f14:	74 32                	je     c0009f48 <tcp_seg_free+0x3c>
c0009f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f1d:	85 c0                	test   eax,eax
c0009f1f:	74 13                	je     c0009f34 <tcp_seg_free+0x28>
c0009f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f28:	83 ec 0c             	sub    esp,0xc
c0009f2b:	50                   	push   eax
c0009f2c:	e8 4f e3 ff ff       	call   c0008280 <pbuf_free>
c0009f31:	83 c4 10             	add    esp,0x10
c0009f34:	83 ec 08             	sub    esp,0x8
c0009f37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f3b:	6a 04                	push   0x4
c0009f3d:	e8 7e da ff ff       	call   c00079c0 <memp_free>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	8d 76 00             	lea    esi,[esi+0x0]
c0009f48:	90                   	nop
c0009f49:	83 c4 0c             	add    esp,0xc
c0009f4c:	c3                   	ret    
c0009f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0009f50 <tcp_segs_free>:
c0009f50:	83 ec 1c             	sub    esp,0x1c
c0009f53:	eb 27                	jmp    c0009f7c <tcp_segs_free+0x2c>
c0009f55:	8d 76 00             	lea    esi,[esi+0x0]
c0009f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f62:	83 ec 0c             	sub    esp,0xc
c0009f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f69:	e8 9e ff ff ff       	call   c0009f0c <tcp_seg_free>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f79:	8d 76 00             	lea    esi,[esi+0x0]
c0009f7c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009f81:	75 d5                	jne    c0009f58 <tcp_segs_free+0x8>
c0009f83:	90                   	nop
c0009f84:	83 c4 1c             	add    esp,0x1c
c0009f87:	c3                   	ret    

c0009f88 <tcp_setprio>:
c0009f88:	83 ec 04             	sub    esp,0x4
c0009f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f8f:	88 04 24             	mov    BYTE PTR [esp],al
c0009f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f96:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009f99:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009f9c:	90                   	nop
c0009f9d:	83 c4 04             	add    esp,0x4
c0009fa0:	c3                   	ret    
c0009fa1:	8d 76 00             	lea    esi,[esi+0x0]

c0009fa4 <tcp_seg_copy>:
c0009fa4:	83 ec 1c             	sub    esp,0x1c
c0009fa7:	83 ec 0c             	sub    esp,0xc
c0009faa:	6a 04                	push   0x4
c0009fac:	e8 e3 d8 ff ff       	call   c0007894 <memp_malloc>
c0009fb1:	83 c4 10             	add    esp,0x10
c0009fb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fbd:	75 09                	jne    c0009fc8 <tcp_seg_copy+0x24>
c0009fbf:	b8 00 00 00 00       	mov    eax,0x0
c0009fc4:	eb 2e                	jmp    c0009ff4 <tcp_seg_copy+0x50>
c0009fc6:	66 90                	xchg   ax,ax
c0009fc8:	83 ec 04             	sub    esp,0x4
c0009fcb:	6a 10                	push   0x10
c0009fcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009fd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd5:	e8 a0 63 ff ff       	call   c000037a <memcpy>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009fe4:	83 ec 0c             	sub    esp,0xc
c0009fe7:	50                   	push   eax
c0009fe8:	e8 a3 ea ff ff       	call   c0008a90 <pbuf_ref>
c0009fed:	83 c4 10             	add    esp,0x10
c0009ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ff4:	83 c4 1c             	add    esp,0x1c
c0009ff7:	c3                   	ret    

c0009ff8 <tcp_arg>:
c0009ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a000:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a003:	90                   	nop
c000a004:	c3                   	ret    
c000a005:	8d 76 00             	lea    esi,[esi+0x0]

c000a008 <tcp_recv>:
c000a008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a00c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a010:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a016:	90                   	nop
c000a017:	c3                   	ret    

c000a018 <tcp_sent>:
c000a018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a01c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a020:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a026:	90                   	nop
c000a027:	c3                   	ret    

c000a028 <tcp_err>:
c000a028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a02c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a030:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a036:	90                   	nop
c000a037:	c3                   	ret    

c000a038 <tcp_accept>:
c000a038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a03c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a040:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a043:	90                   	nop
c000a044:	c3                   	ret    
c000a045:	8d 76 00             	lea    esi,[esi+0x0]

c000a048 <tcp_poll>:
c000a048:	83 ec 04             	sub    esp,0x4
c000a04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a04f:	88 04 24             	mov    BYTE PTR [esp],al
c000a052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a056:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a05a:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a064:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a067:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a06a:	90                   	nop
c000a06b:	83 c4 04             	add    esp,0x4
c000a06e:	c3                   	ret    
c000a06f:	90                   	nop

c000a070 <tcp_pcb_purge>:
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a077:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a07a:	85 c0                	test   eax,eax
c000a07c:	0f 84 ca 00 00 00    	je     c000a14c <tcp_pcb_purge+0xdc>
c000a082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a086:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a089:	83 f8 0a             	cmp    eax,0xa
c000a08c:	0f 84 ba 00 00 00    	je     c000a14c <tcp_pcb_purge+0xdc>
c000a092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a096:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a099:	83 f8 01             	cmp    eax,0x1
c000a09c:	0f 84 aa 00 00 00    	je     c000a14c <tcp_pcb_purge+0xdc>
c000a0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0a6:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	74 24                	je     c000a0d4 <tcp_pcb_purge+0x64>
c000a0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0b4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0ba:	83 ec 0c             	sub    esp,0xc
c000a0bd:	50                   	push   eax
c000a0be:	e8 bd e1 ff ff       	call   c0008280 <pbuf_free>
c000a0c3:	83 c4 10             	add    esp,0x10
c000a0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ca:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a0de:	83 ec 0c             	sub    esp,0xc
c000a0e1:	50                   	push   eax
c000a0e2:	e8 69 fe ff ff       	call   c0009f50 <tcp_segs_free>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ee:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0fc:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a106:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a109:	83 ec 0c             	sub    esp,0xc
c000a10c:	50                   	push   eax
c000a10d:	e8 3e fe ff ff       	call   c0009f50 <tcp_segs_free>
c000a112:	83 c4 10             	add    esp,0x10
c000a115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a119:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a11c:	83 ec 0c             	sub    esp,0xc
c000a11f:	50                   	push   eax
c000a120:	e8 2b fe ff ff       	call   c0009f50 <tcp_segs_free>
c000a125:	83 c4 10             	add    esp,0x10
c000a128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a12c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a137:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a13e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a145:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a14b:	90                   	nop
c000a14c:	90                   	nop
c000a14d:	83 c4 0c             	add    esp,0xc
c000a150:	c3                   	ret    
c000a151:	8d 76 00             	lea    esi,[esi+0x0]

c000a154 <tcp_slowtmr>:
c000a154:	57                   	push   edi
c000a155:	56                   	push   esi
c000a156:	53                   	push   ebx
c000a157:	83 ec 20             	sub    esp,0x20
c000a15a:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a15f:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a164:	83 c0 01             	add    eax,0x1
c000a167:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a16c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a174:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a179:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a17d:	e9 0e 06 00 00       	jmp    c000a790 <tcp_slowtmr+0x63c>
c000a182:	66 90                	xchg   ax,ax
c000a184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a188:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a18b:	85 c0                	test   eax,eax
c000a18d:	75 15                	jne    c000a1a4 <tcp_slowtmr+0x50>
c000a18f:	83 ec 08             	sub    esp,0x8
c000a192:	68 f0 fc 02 c0       	push   0xc002fcf0
c000a197:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a19c:	e8 1b 58 01 00       	call   c001f9bc <CPrintf>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1ab:	83 f8 01             	cmp    eax,0x1
c000a1ae:	75 18                	jne    c000a1c8 <tcp_slowtmr+0x74>
c000a1b0:	83 ec 08             	sub    esp,0x8
c000a1b3:	68 1c fd 02 c0       	push   0xc002fd1c
c000a1b8:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a1bd:	e8 fa 57 01 00       	call   c001f9bc <CPrintf>
c000a1c2:	83 c4 10             	add    esp,0x10
c000a1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1cf:	83 f8 0a             	cmp    eax,0xa
c000a1d2:	75 18                	jne    c000a1ec <tcp_slowtmr+0x98>
c000a1d4:	83 ec 08             	sub    esp,0x8
c000a1d7:	68 48 fd 02 c0       	push   0xc002fd48
c000a1dc:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a1e1:	e8 d6 57 01 00       	call   c001f9bc <CPrintf>
c000a1e6:	83 c4 10             	add    esp,0x10
c000a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a1f1:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a1f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1fd:	83 f8 02             	cmp    eax,0x2
c000a200:	75 22                	jne    c000a224 <tcp_slowtmr+0xd0>
c000a202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a206:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a209:	0f b6 c0             	movzx  eax,al
c000a20c:	83 f8 06             	cmp    eax,0x6
c000a20f:	75 13                	jne    c000a224 <tcp_slowtmr+0xd0>
c000a211:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a215:	83 c0 01             	add    eax,0x1
c000a218:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a21c:	e9 eb 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2b8>
c000a221:	8d 76 00             	lea    esi,[esi+0x0]
c000a224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a228:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a22b:	0f b6 c0             	movzx  eax,al
c000a22e:	83 f8 0c             	cmp    eax,0xc
c000a231:	75 11                	jne    c000a244 <tcp_slowtmr+0xf0>
c000a233:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a237:	83 c0 01             	add    eax,0x1
c000a23a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a23e:	e9 c9 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2b8>
c000a243:	90                   	nop
c000a244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a248:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a24e:	0f b6 c0             	movzx  eax,al
c000a251:	85 c0                	test   eax,eax
c000a253:	0f 84 8f 00 00 00    	je     c000a2e8 <tcp_slowtmr+0x194>
c000a259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a25d:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a263:	8d 50 01             	lea    edx,[eax+0x1]
c000a266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a26a:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a274:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a27a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a27e:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a284:	0f b6 c0             	movzx  eax,al
c000a287:	83 e8 01             	sub    eax,0x1
c000a28a:	8a 80 d0 ff 02 c0    	mov    al,BYTE PTR [eax-0x3ffd0030]
c000a290:	0f b6 c0             	movzx  eax,al
c000a293:	39 c2                	cmp    edx,eax
c000a295:	0f 82 71 01 00 00    	jb     c000a40c <tcp_slowtmr+0x2b8>
c000a29b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a29f:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a2a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ad:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2b3:	0f b6 c0             	movzx  eax,al
c000a2b6:	83 f8 06             	cmp    eax,0x6
c000a2b9:	77 19                	ja     c000a2d4 <tcp_slowtmr+0x180>
c000a2bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2bf:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2c5:	83 c0 01             	add    eax,0x1
c000a2c8:	88 c2                	mov    dl,al
c000a2ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ce:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a2d4:	83 ec 0c             	sub    esp,0xc
c000a2d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a2db:	e8 58 64 00 00       	call   c0010738 <tcp_zero_window_probe>
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	e9 24 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2b8>
c000a2e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ec:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a2f0:	98                   	cwde   
c000a2f1:	85 c0                	test   eax,eax
c000a2f3:	78 17                	js     c000a30c <tcp_slowtmr+0x1b8>
c000a2f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f9:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a2fd:	83 c0 01             	add    eax,0x1
c000a300:	89 c2                	mov    edx,eax
c000a302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a306:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a30a:	66 90                	xchg   ax,ax
c000a30c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a310:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a313:	85 c0                	test   eax,eax
c000a315:	0f 84 f1 00 00 00    	je     c000a40c <tcp_slowtmr+0x2b8>
c000a31b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a31f:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a327:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a32a:	0f bf d2             	movsx  edx,dx
c000a32d:	98                   	cwde   
c000a32e:	39 c2                	cmp    edx,eax
c000a330:	0f 8c d6 00 00 00    	jl     c000a40c <tcp_slowtmr+0x2b8>
c000a336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a33a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a33d:	83 f8 02             	cmp    eax,0x2
c000a340:	74 3e                	je     c000a380 <tcp_slowtmr+0x22c>
c000a342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a346:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a349:	98                   	cwde   
c000a34a:	c1 f8 03             	sar    eax,0x3
c000a34d:	0f bf d0             	movsx  edx,ax
c000a350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a354:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a358:	98                   	cwde   
c000a359:	01 c2                	add    edx,eax
c000a35b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a35f:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a362:	0f b6 c0             	movzx  eax,al
c000a365:	8a 80 d8 ff 02 c0    	mov    al,BYTE PTR [eax-0x3ffd0028]
c000a36b:	0f b6 c0             	movzx  eax,al
c000a36e:	88 c1                	mov    cl,al
c000a370:	d3 e2                	shl    edx,cl
c000a372:	89 d0                	mov    eax,edx
c000a374:	89 c2                	mov    edx,eax
c000a376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a37a:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a37e:	66 90                	xchg   ax,ax
c000a380:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a384:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a38a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a38e:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a391:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a395:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a399:	89 c8                	mov    eax,ecx
c000a39b:	0f b7 d8             	movzx  ebx,ax
c000a39e:	0f b7 ca             	movzx  ecx,dx
c000a3a1:	39 cb                	cmp    ebx,ecx
c000a3a3:	76 03                	jbe    c000a3a8 <tcp_slowtmr+0x254>
c000a3a5:	89 d0                	mov    eax,edx
c000a3a7:	90                   	nop
c000a3a8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a3ad:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a3b2:	d1 e8                	shr    eax,1
c000a3b4:	89 c2                	mov    edx,eax
c000a3b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3ba:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a3be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c2:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a3c5:	0f b7 d0             	movzx  edx,ax
c000a3c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3cf:	0f b7 c0             	movzx  eax,ax
c000a3d2:	d1 e0                	shl    eax,1
c000a3d4:	39 c2                	cmp    edx,eax
c000a3d6:	7d 14                	jge    c000a3ec <tcp_slowtmr+0x298>
c000a3d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3df:	d1 e0                	shl    eax,1
c000a3e1:	89 c2                	mov    edx,eax
c000a3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e7:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a3eb:	90                   	nop
c000a3ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f7:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a3fb:	83 ec 0c             	sub    esp,0xc
c000a3fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a402:	e8 21 60 00 00       	call   c0010428 <tcp_rexmit_rto>
c000a407:	83 c4 10             	add    esp,0x10
c000a40a:	66 90                	xchg   ax,ax
c000a40c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a410:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a413:	83 f8 06             	cmp    eax,0x6
c000a416:	75 24                	jne    c000a43c <tcp_slowtmr+0x2e8>
c000a418:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a41e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a422:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a425:	29 c2                	sub    edx,eax
c000a427:	89 d0                	mov    eax,edx
c000a429:	83 f8 28             	cmp    eax,0x28
c000a42c:	76 0e                	jbe    c000a43c <tcp_slowtmr+0x2e8>
c000a42e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a432:	83 c0 01             	add    eax,0x1
c000a435:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a439:	8d 76 00             	lea    esi,[esi+0x0]
c000a43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a440:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	83 e0 08             	and    eax,0x8
c000a449:	0f 84 cd 00 00 00    	je     c000a51c <tcp_slowtmr+0x3c8>
c000a44f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a453:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a456:	83 f8 04             	cmp    eax,0x4
c000a459:	74 11                	je     c000a46c <tcp_slowtmr+0x318>
c000a45b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a462:	83 f8 07             	cmp    eax,0x7
c000a465:	0f 85 b1 00 00 00    	jne    c000a51c <tcp_slowtmr+0x3c8>
c000a46b:	90                   	nop
c000a46c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a476:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a479:	89 d1                	mov    ecx,edx
c000a47b:	29 c1                	sub    ecx,eax
c000a47d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a481:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a487:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a48c:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a491:	f7 e2                	mul    edx
c000a493:	89 d0                	mov    eax,edx
c000a495:	c1 e8 05             	shr    eax,0x5
c000a498:	39 c1                	cmp    ecx,eax
c000a49a:	76 18                	jbe    c000a4b4 <tcp_slowtmr+0x360>
c000a49c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a0:	83 c0 01             	add    eax,0x1
c000a4a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4a7:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a4ab:	83 c0 01             	add    eax,0x1
c000a4ae:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a4b2:	eb 68                	jmp    c000a51c <tcp_slowtmr+0x3c8>
c000a4b4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4be:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4c1:	89 d1                	mov    ecx,edx
c000a4c3:	29 c1                	sub    ecx,eax
c000a4c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c9:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a4cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d3:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a4d9:	0f b6 c0             	movzx  eax,al
c000a4dc:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a4e2:	01 d0                	add    eax,edx
c000a4e4:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a4e9:	f7 e2                	mul    edx
c000a4eb:	89 d0                	mov    eax,edx
c000a4ed:	c1 e8 05             	shr    eax,0x5
c000a4f0:	39 c1                	cmp    ecx,eax
c000a4f2:	76 28                	jbe    c000a51c <tcp_slowtmr+0x3c8>
c000a4f4:	83 ec 0c             	sub    esp,0xc
c000a4f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a4fb:	e8 6c 61 00 00       	call   c001066c <tcp_keepalive>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a507:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a50d:	83 c0 01             	add    eax,0x1
c000a510:	88 c2                	mov    dl,al
c000a512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a516:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a520:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a526:	85 c0                	test   eax,eax
c000a528:	74 4e                	je     c000a578 <tcp_slowtmr+0x424>
c000a52a:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a530:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a534:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a537:	89 d1                	mov    ecx,edx
c000a539:	29 c1                	sub    ecx,eax
c000a53b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a53f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a542:	0f bf d0             	movsx  edx,ax
c000a545:	89 d0                	mov    eax,edx
c000a547:	d1 e0                	shl    eax,1
c000a549:	01 d0                	add    eax,edx
c000a54b:	d1 e0                	shl    eax,1
c000a54d:	39 c1                	cmp    ecx,eax
c000a54f:	72 27                	jb     c000a578 <tcp_slowtmr+0x424>
c000a551:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a555:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a55b:	83 ec 0c             	sub    esp,0xc
c000a55e:	50                   	push   eax
c000a55f:	e8 ec f9 ff ff       	call   c0009f50 <tcp_segs_free>
c000a564:	83 c4 10             	add    esp,0x10
c000a567:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56b:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a575:	8d 76 00             	lea    esi,[esi+0x0]
c000a578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a57f:	83 f8 03             	cmp    eax,0x3
c000a582:	75 24                	jne    c000a5a8 <tcp_slowtmr+0x454>
c000a584:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a58a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a591:	29 c2                	sub    edx,eax
c000a593:	89 d0                	mov    eax,edx
c000a595:	83 f8 28             	cmp    eax,0x28
c000a598:	76 0e                	jbe    c000a5a8 <tcp_slowtmr+0x454>
c000a59a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a59e:	83 c0 01             	add    eax,0x1
c000a5a1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a5a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5af:	83 f8 09             	cmp    eax,0x9
c000a5b2:	75 24                	jne    c000a5d8 <tcp_slowtmr+0x484>
c000a5b4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5be:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5c1:	29 c2                	sub    edx,eax
c000a5c3:	89 d0                	mov    eax,edx
c000a5c5:	3d f0 00 00 00       	cmp    eax,0xf0
c000a5ca:	76 0c                	jbe    c000a5d8 <tcp_slowtmr+0x484>
c000a5cc:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5d0:	83 c0 01             	add    eax,0x1
c000a5d3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5d7:	90                   	nop
c000a5d8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a5dd:	85 c0                	test   eax,eax
c000a5df:	0f 84 13 01 00 00    	je     c000a6f8 <tcp_slowtmr+0x5a4>
c000a5e5:	83 ec 0c             	sub    esp,0xc
c000a5e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a5ec:	e8 7f fa ff ff       	call   c000a070 <tcp_pcb_purge>
c000a5f1:	83 c4 10             	add    esp,0x10
c000a5f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a5f9:	74 31                	je     c000a62c <tcp_slowtmr+0x4d8>
c000a5fb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a600:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a604:	75 16                	jne    c000a61c <tcp_slowtmr+0x4c8>
c000a606:	83 ec 08             	sub    esp,0x8
c000a609:	68 78 fd 02 c0       	push   0xc002fd78
c000a60e:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a613:	e8 a4 53 01 00       	call   c001f9bc <CPrintf>
c000a618:	83 c4 10             	add    esp,0x10
c000a61b:	90                   	nop
c000a61c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a620:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a623:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a627:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a62a:	eb 2c                	jmp    c000a658 <tcp_slowtmr+0x504>
c000a62c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a631:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a635:	74 15                	je     c000a64c <tcp_slowtmr+0x4f8>
c000a637:	83 ec 08             	sub    esp,0x8
c000a63a:	68 a4 fd 02 c0       	push   0xc002fda4
c000a63f:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a644:	e8 73 53 01 00       	call   c001f9bc <CPrintf>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a653:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a662:	85 c0                	test   eax,eax
c000a664:	74 1e                	je     c000a684 <tcp_slowtmr+0x530>
c000a666:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a66a:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a670:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a674:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a677:	83 ec 08             	sub    esp,0x8
c000a67a:	6a f6                	push   0xfffffff6
c000a67c:	52                   	push   edx
c000a67d:	ff d0                	call   eax
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	66 90                	xchg   ax,ax
c000a684:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a689:	85 c0                	test   eax,eax
c000a68b:	74 3f                	je     c000a6cc <tcp_slowtmr+0x578>
c000a68d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a691:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a695:	0f b7 f0             	movzx  esi,ax
c000a698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a69c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a69f:	0f b7 d8             	movzx  ebx,ax
c000a6a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a6:	8d 78 04             	lea    edi,[eax+0x4]
c000a6a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b8:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a6bb:	83 ec 08             	sub    esp,0x8
c000a6be:	56                   	push   esi
c000a6bf:	53                   	push   ebx
c000a6c0:	57                   	push   edi
c000a6c1:	51                   	push   ecx
c000a6c2:	52                   	push   edx
c000a6c3:	50                   	push   eax
c000a6c4:	e8 e3 5b 00 00       	call   c00102ac <tcp_rst>
c000a6c9:	83 c4 20             	add    esp,0x20
c000a6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6df:	83 ec 08             	sub    esp,0x8
c000a6e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e6:	6a 02                	push   0x2
c000a6e8:	e8 d3 d2 ff ff       	call   c00079c0 <memp_free>
c000a6ed:	83 c4 10             	add    esp,0x10
c000a6f0:	e9 9b 00 00 00       	jmp    c000a790 <tcp_slowtmr+0x63c>
c000a6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a6f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a700:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a704:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a707:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a70b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a70f:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a712:	83 c0 01             	add    eax,0x1
c000a715:	88 c2                	mov    dl,al
c000a717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a71b:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a71e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a722:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a729:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a72c:	0f b6 d2             	movzx  edx,dl
c000a72f:	0f b6 c0             	movzx  eax,al
c000a732:	39 c2                	cmp    edx,eax
c000a734:	72 5a                	jb     c000a790 <tcp_slowtmr+0x63c>
c000a736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a73a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a73e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a742:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a748:	85 c0                	test   eax,eax
c000a74a:	74 24                	je     c000a770 <tcp_slowtmr+0x61c>
c000a74c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a750:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a756:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a75a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a75d:	83 ec 08             	sub    esp,0x8
c000a760:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a764:	52                   	push   edx
c000a765:	ff d0                	call   eax
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a76e:	eb 08                	jmp    c000a778 <tcp_slowtmr+0x624>
c000a770:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a775:	8d 76 00             	lea    esi,[esi+0x0]
c000a778:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a77d:	85 c0                	test   eax,eax
c000a77f:	75 0f                	jne    c000a790 <tcp_slowtmr+0x63c>
c000a781:	83 ec 0c             	sub    esp,0xc
c000a784:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a788:	e8 93 56 00 00       	call   c000fe20 <tcp_output>
c000a78d:	83 c4 10             	add    esp,0x10
c000a790:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a795:	0f 85 e9 f9 ff ff    	jne    c000a184 <tcp_slowtmr+0x30>
c000a79b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a7a3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7ac:	e9 0b 01 00 00       	jmp    c000a8bc <tcp_slowtmr+0x768>
c000a7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7bb:	83 f8 0a             	cmp    eax,0xa
c000a7be:	74 18                	je     c000a7d8 <tcp_slowtmr+0x684>
c000a7c0:	83 ec 08             	sub    esp,0x8
c000a7c3:	68 d0 fd 02 c0       	push   0xc002fdd0
c000a7c8:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a7cd:	e8 ea 51 01 00       	call   c001f9bc <CPrintf>
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a7dd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7ea:	29 c2                	sub    edx,eax
c000a7ec:	89 d0                	mov    eax,edx
c000a7ee:	3d f0 00 00 00       	cmp    eax,0xf0
c000a7f3:	76 0b                	jbe    c000a800 <tcp_slowtmr+0x6ac>
c000a7f5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a7f9:	83 c0 01             	add    eax,0x1
c000a7fc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a800:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a805:	85 c0                	test   eax,eax
c000a807:	0f 84 9b 00 00 00    	je     c000a8a8 <tcp_slowtmr+0x754>
c000a80d:	83 ec 0c             	sub    esp,0xc
c000a810:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a814:	e8 57 f8 ff ff       	call   c000a070 <tcp_pcb_purge>
c000a819:	83 c4 10             	add    esp,0x10
c000a81c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a821:	74 31                	je     c000a854 <tcp_slowtmr+0x700>
c000a823:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a828:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a82c:	75 16                	jne    c000a844 <tcp_slowtmr+0x6f0>
c000a82e:	83 ec 08             	sub    esp,0x8
c000a831:	68 00 fe 02 c0       	push   0xc002fe00
c000a836:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a83b:	e8 7c 51 01 00       	call   c001f9bc <CPrintf>
c000a840:	83 c4 10             	add    esp,0x10
c000a843:	90                   	nop
c000a844:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a848:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a84b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a84f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a852:	eb 2c                	jmp    c000a880 <tcp_slowtmr+0x72c>
c000a854:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a859:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a85d:	74 15                	je     c000a874 <tcp_slowtmr+0x720>
c000a85f:	83 ec 08             	sub    esp,0x8
c000a862:	68 28 fe 02 c0       	push   0xc002fe28
c000a867:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a86c:	e8 4b 51 01 00       	call   c001f9bc <CPrintf>
c000a871:	83 c4 10             	add    esp,0x10
c000a874:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a878:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a87b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a884:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a88c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a88f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a893:	83 ec 08             	sub    esp,0x8
c000a896:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a89a:	6a 02                	push   0x2
c000a89c:	e8 1f d1 ff ff       	call   c00079c0 <memp_free>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	eb 16                	jmp    c000a8bc <tcp_slowtmr+0x768>
c000a8a6:	66 90                	xchg   ax,ax
c000a8a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8bb:	90                   	nop
c000a8bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a8c1:	0f 85 ed fe ff ff    	jne    c000a7b4 <tcp_slowtmr+0x660>
c000a8c7:	90                   	nop
c000a8c8:	83 c4 20             	add    esp,0x20
c000a8cb:	5b                   	pop    ebx
c000a8cc:	5e                   	pop    esi
c000a8cd:	5f                   	pop    edi
c000a8ce:	c3                   	ret    
c000a8cf:	90                   	nop

c000a8d0 <tcp_pcb_remove>:
c000a8d0:	83 ec 0c             	sub    esp,0xc
c000a8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8d9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a8dd:	75 11                	jne    c000a8f0 <tcp_pcb_remove+0x20>
c000a8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8e5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ec:	89 10                	mov    DWORD PTR [eax],edx
c000a8ee:	eb 4c                	jmp    c000a93c <tcp_pcb_remove+0x6c>
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8f6:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a8fb:	eb 33                	jmp    c000a930 <tcp_pcb_remove+0x60>
c000a8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a900:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a905:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a908:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a90c:	75 12                	jne    c000a920 <tcp_pcb_remove+0x50>
c000a90e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a913:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a917:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a91a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a91d:	eb 1d                	jmp    c000a93c <tcp_pcb_remove+0x6c>
c000a91f:	90                   	nop
c000a920:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a925:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a928:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a92d:	8d 76 00             	lea    esi,[esi+0x0]
c000a930:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a935:	85 c0                	test   eax,eax
c000a937:	75 c7                	jne    c000a900 <tcp_pcb_remove+0x30>
c000a939:	8d 76 00             	lea    esi,[esi+0x0]
c000a93c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a940:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a947:	83 ec 0c             	sub    esp,0xc
c000a94a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a94e:	e8 1d f7 ff ff       	call   c000a070 <tcp_pcb_purge>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a95a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a95d:	83 f8 0a             	cmp    eax,0xa
c000a960:	74 3e                	je     c000a9a0 <tcp_pcb_remove+0xd0>
c000a962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a966:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a969:	83 f8 01             	cmp    eax,0x1
c000a96c:	74 32                	je     c000a9a0 <tcp_pcb_remove+0xd0>
c000a96e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a972:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a975:	0f b6 c0             	movzx  eax,al
c000a978:	83 e0 01             	and    eax,0x1
c000a97b:	74 23                	je     c000a9a0 <tcp_pcb_remove+0xd0>
c000a97d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a981:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a984:	83 c8 02             	or     eax,0x2
c000a987:	88 c2                	mov    dl,al
c000a989:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a98d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a990:	83 ec 0c             	sub    esp,0xc
c000a993:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a997:	e8 84 54 00 00       	call   c000fe20 <tcp_output>
c000a99c:	83 c4 10             	add    esp,0x10
c000a99f:	90                   	nop
c000a9a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9a7:	83 f8 01             	cmp    eax,0x1
c000a9aa:	74 64                	je     c000aa10 <tcp_pcb_remove+0x140>
c000a9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9b0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a9b3:	85 c0                	test   eax,eax
c000a9b5:	74 15                	je     c000a9cc <tcp_pcb_remove+0xfc>
c000a9b7:	83 ec 08             	sub    esp,0x8
c000a9ba:	68 ce fe 02 c0       	push   0xc002fece
c000a9bf:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a9c4:	e8 f3 4f 01 00       	call   c001f9bc <CPrintf>
c000a9c9:	83 c4 10             	add    esp,0x10
c000a9cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9d0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a9d3:	85 c0                	test   eax,eax
c000a9d5:	74 15                	je     c000a9ec <tcp_pcb_remove+0x11c>
c000a9d7:	83 ec 08             	sub    esp,0x8
c000a9da:	68 e6 fe 02 c0       	push   0xc002fee6
c000a9df:	68 e6 f6 02 c0       	push   0xc002f6e6
c000a9e4:	e8 d3 4f 01 00       	call   c001f9bc <CPrintf>
c000a9e9:	83 c4 10             	add    esp,0x10
c000a9ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a9f6:	85 c0                	test   eax,eax
c000a9f8:	74 16                	je     c000aa10 <tcp_pcb_remove+0x140>
c000a9fa:	83 ec 08             	sub    esp,0x8
c000a9fd:	68 ff fe 02 c0       	push   0xc002feff
c000aa02:	68 e6 f6 02 c0       	push   0xc002f6e6
c000aa07:	e8 b0 4f 01 00       	call   c001f9bc <CPrintf>
c000aa0c:	83 c4 10             	add    esp,0x10
c000aa0f:	90                   	nop
c000aa10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa14:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa1b:	90                   	nop
c000aa1c:	83 c4 0c             	add    esp,0xc
c000aa1f:	c3                   	ret    

c000aa20 <tcp_close_shutdown>:
c000aa20:	57                   	push   edi
c000aa21:	56                   	push   esi
c000aa22:	53                   	push   ebx
c000aa23:	83 ec 20             	sub    esp,0x20
c000aa26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aa2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000aa33:	85 c0                	test   eax,eax
c000aa35:	0f 84 41 01 00 00    	je     c000ab7c <tcp_close_shutdown+0x15c>
c000aa3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa3f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa42:	83 f8 01             	cmp    eax,0x1
c000aa45:	0f 84 31 01 00 00    	je     c000ab7c <tcp_close_shutdown+0x15c>
c000aa4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa4f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aa55:	85 c0                	test   eax,eax
c000aa57:	75 17                	jne    c000aa70 <tcp_close_shutdown+0x50>
c000aa59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aa60:	0f b7 c0             	movzx  eax,ax
c000aa63:	3d 60 08 00 00       	cmp    eax,0x860
c000aa68:	0f 84 0e 01 00 00    	je     c000ab7c <tcp_close_shutdown+0x15c>
c000aa6e:	66 90                	xchg   ax,ax
c000aa70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa77:	0f b6 c0             	movzx  eax,al
c000aa7a:	83 e0 10             	and    eax,0x10
c000aa7d:	75 15                	jne    c000aa94 <tcp_close_shutdown+0x74>
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	68 16 ff 02 c0       	push   0xc002ff16
c000aa87:	68 e6 f6 02 c0       	push   0xc002f6e6
c000aa8c:	e8 2b 4f 01 00       	call   c001f9bc <CPrintf>
c000aa91:	83 c4 10             	add    esp,0x10
c000aa94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa98:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aa9c:	0f b7 f0             	movzx  esi,ax
c000aa9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaa3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aaa6:	0f b7 d8             	movzx  ebx,ax
c000aaa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaad:	8d 78 04             	lea    edi,[eax+0x4]
c000aab0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000aab4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aab8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000aabb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aabf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000aac2:	83 ec 08             	sub    esp,0x8
c000aac5:	56                   	push   esi
c000aac6:	53                   	push   ebx
c000aac7:	57                   	push   edi
c000aac8:	51                   	push   ecx
c000aac9:	52                   	push   edx
c000aaca:	50                   	push   eax
c000aacb:	e8 dc 57 00 00       	call   c00102ac <tcp_rst>
c000aad0:	83 c4 20             	add    esp,0x20
c000aad3:	83 ec 0c             	sub    esp,0xc
c000aad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aada:	e8 91 f5 ff ff       	call   c000a070 <tcp_pcb_purge>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aae7:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000aaeb:	75 0f                	jne    c000aafc <tcp_close_shutdown+0xdc>
c000aaed:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aaf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000aafa:	eb 48                	jmp    c000ab44 <tcp_close_shutdown+0x124>
c000aafc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab01:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab06:	eb 30                	jmp    c000ab38 <tcp_close_shutdown+0x118>
c000ab08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab10:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab14:	75 12                	jne    c000ab28 <tcp_close_shutdown+0x108>
c000ab16:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab1f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab25:	eb 1d                	jmp    c000ab44 <tcp_close_shutdown+0x124>
c000ab27:	90                   	nop
c000ab28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab30:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab35:	8d 76 00             	lea    esi,[esi+0x0]
c000ab38:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab3d:	85 c0                	test   eax,eax
c000ab3f:	75 c7                	jne    c000ab08 <tcp_close_shutdown+0xe8>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab48:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ab4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab53:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ab5a:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ab60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab64:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab6b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab70:	e8 53 5f 00 00       	call   c0010ac8 <tcp_timer_needed>
c000ab75:	b0 00                	mov    al,0x0
c000ab77:	e9 f4 01 00 00       	jmp    c000ad70 <tcp_close_shutdown+0x350>
c000ab7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab80:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab83:	83 f8 07             	cmp    eax,0x7
c000ab86:	0f 87 a4 01 00 00    	ja     c000ad30 <tcp_close_shutdown+0x310>
c000ab8c:	8b 04 85 a0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0060]
c000ab93:	ff e0                	jmp    eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ab9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aba1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aba4:	0f b7 c0             	movzx  eax,ax
c000aba7:	85 c0                	test   eax,eax
c000aba9:	74 71                	je     c000ac1c <tcp_close_shutdown+0x1fc>
c000abab:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abb0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abb4:	75 12                	jne    c000abc8 <tcp_close_shutdown+0x1a8>
c000abb6:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abbb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abbe:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000abc3:	eb 4b                	jmp    c000ac10 <tcp_close_shutdown+0x1f0>
c000abc5:	8d 76 00             	lea    esi,[esi+0x0]
c000abc8:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abcd:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abd2:	eb 30                	jmp    c000ac04 <tcp_close_shutdown+0x1e4>
c000abd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abdc:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abe0:	75 12                	jne    c000abf4 <tcp_close_shutdown+0x1d4>
c000abe2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abe7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abeb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abf1:	eb 1d                	jmp    c000ac10 <tcp_close_shutdown+0x1f0>
c000abf3:	90                   	nop
c000abf4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abfc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac01:	8d 76 00             	lea    esi,[esi+0x0]
c000ac04:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac09:	85 c0                	test   eax,eax
c000ac0b:	75 c7                	jne    c000abd4 <tcp_close_shutdown+0x1b4>
c000ac0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac14:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac1b:	90                   	nop
c000ac1c:	83 ec 08             	sub    esp,0x8
c000ac1f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac23:	6a 02                	push   0x2
c000ac25:	e8 96 cd ff ff       	call   c00079c0 <memp_free>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac35:	e9 12 01 00 00       	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000ac3a:	66 90                	xchg   ax,ax
c000ac3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac41:	83 ec 08             	sub    esp,0x8
c000ac44:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac48:	68 78 68 03 c0       	push   0xc0036878
c000ac4d:	e8 7e fc ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	83 ec 08             	sub    esp,0x8
c000ac58:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac5c:	6a 03                	push   0x3
c000ac5e:	e8 5d cd ff ff       	call   c00079c0 <memp_free>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac6e:	e9 d9 00 00 00       	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000ac73:	90                   	nop
c000ac74:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac79:	83 ec 08             	sub    esp,0x8
c000ac7c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac80:	68 70 68 03 c0       	push   0xc0036870
c000ac85:	e8 46 fc ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000ac8a:	83 c4 10             	add    esp,0x10
c000ac8d:	83 ec 08             	sub    esp,0x8
c000ac90:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac94:	6a 02                	push   0x2
c000ac96:	e8 25 cd ff ff       	call   c00079c0 <memp_free>
c000ac9b:	83 c4 10             	add    esp,0x10
c000ac9e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aca6:	e9 a1 00 00 00       	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000acab:	90                   	nop
c000acac:	83 ec 0c             	sub    esp,0xc
c000acaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acb3:	e8 b8 4d 00 00       	call   c000fa70 <tcp_send_fin>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acbf:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000acc4:	85 c0                	test   eax,eax
c000acc6:	75 78                	jne    c000ad40 <tcp_close_shutdown+0x320>
c000acc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000accc:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000acd3:	eb 6b                	jmp    c000ad40 <tcp_close_shutdown+0x320>
c000acd5:	8d 76 00             	lea    esi,[esi+0x0]
c000acd8:	83 ec 0c             	sub    esp,0xc
c000acdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acdf:	e8 8c 4d 00 00       	call   c000fa70 <tcp_send_fin>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000aceb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000acf0:	85 c0                	test   eax,eax
c000acf2:	75 50                	jne    c000ad44 <tcp_close_shutdown+0x324>
c000acf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf8:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000acff:	eb 43                	jmp    c000ad44 <tcp_close_shutdown+0x324>
c000ad01:	8d 76 00             	lea    esi,[esi+0x0]
c000ad04:	83 ec 0c             	sub    esp,0xc
c000ad07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad0b:	e8 60 4d 00 00       	call   c000fa70 <tcp_send_fin>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad17:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad1c:	85 c0                	test   eax,eax
c000ad1e:	75 28                	jne    c000ad48 <tcp_close_shutdown+0x328>
c000ad20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad24:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ad2b:	eb 1b                	jmp    c000ad48 <tcp_close_shutdown+0x328>
c000ad2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad30:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad35:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3d:	eb 0d                	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000ad3f:	90                   	nop
c000ad40:	90                   	nop
c000ad41:	eb 09                	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000ad43:	90                   	nop
c000ad44:	90                   	nop
c000ad45:	eb 05                	jmp    c000ad4c <tcp_close_shutdown+0x32c>
c000ad47:	90                   	nop
c000ad48:	90                   	nop
c000ad49:	8d 76 00             	lea    esi,[esi+0x0]
c000ad4c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ad51:	74 19                	je     c000ad6c <tcp_close_shutdown+0x34c>
c000ad53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad58:	85 c0                	test   eax,eax
c000ad5a:	75 10                	jne    c000ad6c <tcp_close_shutdown+0x34c>
c000ad5c:	83 ec 0c             	sub    esp,0xc
c000ad5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad63:	e8 b8 50 00 00       	call   c000fe20 <tcp_output>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	90                   	nop
c000ad6c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ad70:	83 c4 20             	add    esp,0x20
c000ad73:	5b                   	pop    ebx
c000ad74:	5e                   	pop    esi
c000ad75:	5f                   	pop    edi
c000ad76:	c3                   	ret    
c000ad77:	90                   	nop

c000ad78 <tcp_close>:
c000ad78:	83 ec 0c             	sub    esp,0xc
c000ad7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ad82:	83 f8 01             	cmp    eax,0x1
c000ad85:	74 15                	je     c000ad9c <tcp_close+0x24>
c000ad87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ad8e:	83 c8 10             	or     eax,0x10
c000ad91:	88 c2                	mov    dl,al
c000ad93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad97:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ad9a:	66 90                	xchg   ax,ax
c000ad9c:	83 ec 08             	sub    esp,0x8
c000ad9f:	6a 01                	push   0x1
c000ada1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ada5:	e8 76 fc ff ff       	call   c000aa20 <tcp_close_shutdown>
c000adaa:	83 c4 10             	add    esp,0x10
c000adad:	83 c4 0c             	add    esp,0xc
c000adb0:	c3                   	ret    
c000adb1:	8d 76 00             	lea    esi,[esi+0x0]

c000adb4 <tcp_recv_null>:
c000adb4:	83 ec 1c             	sub    esp,0x1c
c000adb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000adbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000adbf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000adc4:	74 2e                	je     c000adf4 <tcp_recv_null+0x40>
c000adc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000adca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000adcd:	0f b7 c0             	movzx  eax,ax
c000add0:	83 ec 08             	sub    esp,0x8
c000add3:	50                   	push   eax
c000add4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000add8:	e8 b3 ee ff ff       	call   c0009c90 <tcp_recved>
c000addd:	83 c4 10             	add    esp,0x10
c000ade0:	83 ec 0c             	sub    esp,0xc
c000ade3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade7:	e8 94 d4 ff ff       	call   c0008280 <pbuf_free>
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	eb 1f                	jmp    c000ae10 <tcp_recv_null+0x5c>
c000adf1:	8d 76 00             	lea    esi,[esi+0x0]
c000adf4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000adf9:	85 c0                	test   eax,eax
c000adfb:	75 13                	jne    c000ae10 <tcp_recv_null+0x5c>
c000adfd:	83 ec 0c             	sub    esp,0xc
c000ae00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae04:	e8 6f ff ff ff       	call   c000ad78 <tcp_close>
c000ae09:	83 c4 10             	add    esp,0x10
c000ae0c:	eb 06                	jmp    c000ae14 <tcp_recv_null+0x60>
c000ae0e:	66 90                	xchg   ax,ax
c000ae10:	b0 00                	mov    al,0x0
c000ae12:	66 90                	xchg   ax,ax
c000ae14:	83 c4 1c             	add    esp,0x1c
c000ae17:	c3                   	ret    

c000ae18 <tcp_fasttmr>:
c000ae18:	83 ec 1c             	sub    esp,0x1c
c000ae1b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ae20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae24:	e9 03 01 00 00       	jmp    c000af2c <tcp_fasttmr+0x114>
c000ae29:	8d 76 00             	lea    esi,[esi+0x0]
c000ae2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae3b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae41:	85 c0                	test   eax,eax
c000ae43:	0f 84 8f 00 00 00    	je     c000aed8 <tcp_fasttmr+0xc0>
c000ae49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae4d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae53:	85 c0                	test   eax,eax
c000ae55:	74 31                	je     c000ae88 <tcp_fasttmr+0x70>
c000ae57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae5b:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae65:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000ae6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae6f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ae72:	6a 00                	push   0x0
c000ae74:	51                   	push   ecx
c000ae75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae79:	52                   	push   edx
c000ae7a:	ff d0                	call   eax
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae83:	eb 23                	jmp    c000aea8 <tcp_fasttmr+0x90>
c000ae85:	8d 76 00             	lea    esi,[esi+0x0]
c000ae88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae8c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae92:	6a 00                	push   0x0
c000ae94:	50                   	push   eax
c000ae95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae99:	6a 00                	push   0x0
c000ae9b:	e8 14 ff ff ff       	call   c000adb4 <tcp_recv_null>
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aea7:	90                   	nop
c000aea8:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aead:	85 c0                	test   eax,eax
c000aeaf:	75 13                	jne    c000aec4 <tcp_fasttmr+0xac>
c000aeb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aeb5:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000aebf:	eb 17                	jmp    c000aed8 <tcp_fasttmr+0xc0>
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aec9:	83 f8 f6             	cmp    eax,0xfffffff6
c000aecc:	75 0a                	jne    c000aed8 <tcp_fasttmr+0xc0>
c000aece:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aed6:	66 90                	xchg   ax,ax
c000aed8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aedd:	74 45                	je     c000af24 <tcp_fasttmr+0x10c>
c000aedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aee3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aee6:	0f b6 c0             	movzx  eax,al
c000aee9:	83 e0 01             	and    eax,0x1
c000aeec:	74 36                	je     c000af24 <tcp_fasttmr+0x10c>
c000aeee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aef2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aef5:	83 c8 02             	or     eax,0x2
c000aef8:	88 c2                	mov    dl,al
c000aefa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aefe:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af01:	83 ec 0c             	sub    esp,0xc
c000af04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af08:	e8 13 4f 00 00       	call   c000fe20 <tcp_output>
c000af0d:	83 c4 10             	add    esp,0x10
c000af10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af14:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af17:	83 e0 fc             	and    eax,0xfffffffc
c000af1a:	88 c2                	mov    dl,al
c000af1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af20:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af23:	90                   	nop
c000af24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af31:	0f 85 f5 fe ff ff    	jne    c000ae2c <tcp_fasttmr+0x14>
c000af37:	90                   	nop
c000af38:	83 c4 1c             	add    esp,0x1c
c000af3b:	c3                   	ret    

c000af3c <tcp_tmr>:
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	e8 d4 fe ff ff       	call   c000ae18 <tcp_fasttmr>
c000af44:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af49:	83 c0 01             	add    eax,0x1
c000af4c:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000af51:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af56:	0f b6 c0             	movzx  eax,al
c000af59:	83 e0 01             	and    eax,0x1
c000af5c:	74 06                	je     c000af64 <tcp_tmr+0x28>
c000af5e:	e8 f1 f1 ff ff       	call   c000a154 <tcp_slowtmr>
c000af63:	90                   	nop
c000af64:	90                   	nop
c000af65:	83 c4 0c             	add    esp,0xc
c000af68:	c3                   	ret    
c000af69:	8d 76 00             	lea    esi,[esi+0x0]

c000af6c <tcp_shutdown>:
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000af76:	83 f8 01             	cmp    eax,0x1
c000af79:	75 09                	jne    c000af84 <tcp_shutdown+0x18>
c000af7b:	b0 f3                	mov    al,0xf3
c000af7d:	e9 92 00 00 00       	jmp    c000b014 <tcp_shutdown+0xa8>
c000af82:	66 90                	xchg   ax,ax
c000af84:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000af89:	74 49                	je     c000afd4 <tcp_shutdown+0x68>
c000af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af95:	85 c0                	test   eax,eax
c000af97:	74 27                	je     c000afc0 <tcp_shutdown+0x54>
c000af99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afa3:	83 ec 0c             	sub    esp,0xc
c000afa6:	50                   	push   eax
c000afa7:	e8 d4 d2 ff ff       	call   c0008280 <pbuf_free>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb3:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000afbd:	8d 76 00             	lea    esi,[esi+0x0]
c000afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afc7:	83 c8 10             	or     eax,0x10
c000afca:	88 c2                	mov    dl,al
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afd3:	90                   	nop
c000afd4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000afd9:	74 2d                	je     c000b008 <tcp_shutdown+0x9c>
c000afdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afe2:	83 f8 03             	cmp    eax,0x3
c000afe5:	72 25                	jb     c000b00c <tcp_shutdown+0xa0>
c000afe7:	83 f8 04             	cmp    eax,0x4
c000afea:	76 08                	jbe    c000aff4 <tcp_shutdown+0x88>
c000afec:	83 f8 07             	cmp    eax,0x7
c000afef:	75 1b                	jne    c000b00c <tcp_shutdown+0xa0>
c000aff1:	8d 76 00             	lea    esi,[esi+0x0]
c000aff4:	83 ec 08             	sub    esp,0x8
c000aff7:	6a 00                	push   0x0
c000aff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000affd:	e8 1e fa ff ff       	call   c000aa20 <tcp_close_shutdown>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	eb 0d                	jmp    c000b014 <tcp_shutdown+0xa8>
c000b007:	90                   	nop
c000b008:	90                   	nop
c000b009:	eb 05                	jmp    c000b010 <tcp_shutdown+0xa4>
c000b00b:	90                   	nop
c000b00c:	90                   	nop
c000b00d:	8d 76 00             	lea    esi,[esi+0x0]
c000b010:	b0 00                	mov    al,0x0
c000b012:	66 90                	xchg   ax,ax
c000b014:	83 c4 0c             	add    esp,0xc
c000b017:	c3                   	ret    

c000b018 <tcp_abandon>:
c000b018:	83 ec 2c             	sub    esp,0x2c
c000b01b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b01f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b022:	83 f8 01             	cmp    eax,0x1
c000b025:	75 15                	jne    c000b03c <tcp_abandon+0x24>
c000b027:	83 ec 08             	sub    esp,0x8
c000b02a:	68 50 fe 02 c0       	push   0xc002fe50
c000b02f:	68 e6 f6 02 c0       	push   0xc002f6e6
c000b034:	e8 83 49 01 00       	call   c001f9bc <CPrintf>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b040:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b043:	83 f8 0a             	cmp    eax,0xa
c000b046:	75 2c                	jne    c000b074 <tcp_abandon+0x5c>
c000b048:	83 ec 08             	sub    esp,0x8
c000b04b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b04f:	68 84 68 03 c0       	push   0xc0036884
c000b054:	e8 77 f8 ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	83 ec 08             	sub    esp,0x8
c000b05f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b063:	6a 02                	push   0x2
c000b065:	e8 56 c9 ff ff       	call   c00079c0 <memp_free>
c000b06a:	83 c4 10             	add    esp,0x10
c000b06d:	e9 32 01 00 00       	jmp    c000b1a4 <tcp_abandon+0x18c>
c000b072:	66 90                	xchg   ax,ax
c000b074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b078:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b07b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b083:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b086:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b08e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b090:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b09f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b0a6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b0ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0af:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b0b3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0bc:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b0c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ca:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b0cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0d8:	68 70 68 03 c0       	push   0xc0036870
c000b0dd:	e8 ee f7 ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0e9:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b0ec:	85 c0                	test   eax,eax
c000b0ee:	74 14                	je     c000b104 <tcp_abandon+0xec>
c000b0f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0f4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b0f7:	83 ec 0c             	sub    esp,0xc
c000b0fa:	50                   	push   eax
c000b0fb:	e8 50 ee ff ff       	call   c0009f50 <tcp_segs_free>
c000b100:	83 c4 10             	add    esp,0x10
c000b103:	90                   	nop
c000b104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b108:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b10b:	85 c0                	test   eax,eax
c000b10d:	74 15                	je     c000b124 <tcp_abandon+0x10c>
c000b10f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b113:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 31 ee ff ff       	call   c0009f50 <tcp_segs_free>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	66 90                	xchg   ax,ax
c000b124:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b128:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b12e:	85 c0                	test   eax,eax
c000b130:	74 16                	je     c000b148 <tcp_abandon+0x130>
c000b132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b136:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b13c:	83 ec 0c             	sub    esp,0xc
c000b13f:	50                   	push   eax
c000b140:	e8 0b ee ff ff       	call   c0009f50 <tcp_segs_free>
c000b145:	83 c4 10             	add    esp,0x10
c000b148:	83 ec 08             	sub    esp,0x8
c000b14b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b14f:	6a 02                	push   0x2
c000b151:	e8 6a c8 ff ff       	call   c00079c0 <memp_free>
c000b156:	83 c4 10             	add    esp,0x10
c000b159:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b15e:	74 14                	je     c000b174 <tcp_abandon+0x15c>
c000b160:	83 ec 08             	sub    esp,0x8
c000b163:	6a f6                	push   0xfffffff6
c000b165:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b16d:	ff d0                	call   eax
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	66 90                	xchg   ax,ax
c000b174:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b179:	74 29                	je     c000b1a4 <tcp_abandon+0x18c>
c000b17b:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b180:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b185:	83 ec 08             	sub    esp,0x8
c000b188:	52                   	push   edx
c000b189:	50                   	push   eax
c000b18a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b18e:	50                   	push   eax
c000b18f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b193:	50                   	push   eax
c000b194:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b198:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b19c:	e8 0b 51 00 00       	call   c00102ac <tcp_rst>
c000b1a1:	83 c4 20             	add    esp,0x20
c000b1a4:	90                   	nop
c000b1a5:	83 c4 2c             	add    esp,0x2c
c000b1a8:	c3                   	ret    
c000b1a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b1ac <tcp_abort>:
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	83 ec 08             	sub    esp,0x8
c000b1b2:	6a 01                	push   0x1
c000b1b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1b8:	e8 5b fe ff ff       	call   c000b018 <tcp_abandon>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	90                   	nop
c000b1c1:	83 c4 0c             	add    esp,0xc
c000b1c4:	c3                   	ret    
c000b1c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b1c8 <tcp_kill_prio>:
c000b1c8:	83 ec 2c             	sub    esp,0x2c
c000b1cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b1d3:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b1d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1e0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1e8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b1f1:	eb 75                	jmp    c000b268 <tcp_kill_prio+0xa0>
c000b1f3:	90                   	nop
c000b1f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b1f8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b1fb:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b200:	0f b6 c0             	movzx  eax,al
c000b203:	39 c2                	cmp    edx,eax
c000b205:	72 55                	jb     c000b25c <tcp_kill_prio+0x94>
c000b207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b20b:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b20e:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b213:	0f b6 c0             	movzx  eax,al
c000b216:	39 c2                	cmp    edx,eax
c000b218:	72 42                	jb     c000b25c <tcp_kill_prio+0x94>
c000b21a:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b220:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b224:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b227:	29 c2                	sub    edx,eax
c000b229:	89 d0                	mov    eax,edx
c000b22b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b22f:	77 2b                	ja     c000b25c <tcp_kill_prio+0x94>
c000b231:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b23b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b23e:	29 c2                	sub    edx,eax
c000b240:	89 d0                	mov    eax,edx
c000b242:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b24a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b24e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b252:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b255:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b260:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b267:	90                   	nop
c000b268:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b26d:	75 85                	jne    c000b1f4 <tcp_kill_prio+0x2c>
c000b26f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b274:	74 12                	je     c000b288 <tcp_kill_prio+0xc0>
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b27d:	e8 2a ff ff ff       	call   c000b1ac <tcp_abort>
c000b282:	83 c4 10             	add    esp,0x10
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	90                   	nop
c000b289:	83 c4 2c             	add    esp,0x2c
c000b28c:	c3                   	ret    
c000b28d:	8d 76 00             	lea    esi,[esi+0x0]

c000b290 <tcp_kill_timewait>:
c000b290:	83 ec 1c             	sub    esp,0x1c
c000b293:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b29b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b2a3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2ac:	eb 42                	jmp    c000b2f0 <tcp_kill_timewait+0x60>
c000b2ae:	66 90                	xchg   ax,ax
c000b2b0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2ba:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2bd:	29 c2                	sub    edx,eax
c000b2bf:	89 d0                	mov    eax,edx
c000b2c1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b2c5:	77 1d                	ja     c000b2e4 <tcp_kill_timewait+0x54>
c000b2c7:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2d1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2d4:	29 c2                	sub    edx,eax
c000b2d6:	89 d0                	mov    eax,edx
c000b2d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2ef:	90                   	nop
c000b2f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b2f5:	75 b9                	jne    c000b2b0 <tcp_kill_timewait+0x20>
c000b2f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b2fc:	74 12                	je     c000b310 <tcp_kill_timewait+0x80>
c000b2fe:	83 ec 0c             	sub    esp,0xc
c000b301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b305:	e8 a2 fe ff ff       	call   c000b1ac <tcp_abort>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	8d 76 00             	lea    esi,[esi+0x0]
c000b310:	90                   	nop
c000b311:	83 c4 1c             	add    esp,0x1c
c000b314:	c3                   	ret    
c000b315:	8d 76 00             	lea    esi,[esi+0x0]

c000b318 <tcp_next_iss>:
c000b318:	8b 15 8c 37 03 c0    	mov    edx,DWORD PTR ds:0xc003378c
c000b31e:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b323:	01 d0                	add    eax,edx
c000b325:	a3 8c 37 03 c0       	mov    ds:0xc003378c,eax
c000b32a:	a1 8c 37 03 c0       	mov    eax,ds:0xc003378c
c000b32f:	c3                   	ret    

c000b330 <tcp_alloc>:
c000b330:	83 ec 2c             	sub    esp,0x2c
c000b333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b337:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	6a 02                	push   0x2
c000b340:	e8 4f c5 ff ff       	call   c0007894 <memp_malloc>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b34c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b351:	75 6d                	jne    c000b3c0 <tcp_alloc+0x90>
c000b353:	e8 38 ff ff ff       	call   c000b290 <tcp_kill_timewait>
c000b358:	83 ec 0c             	sub    esp,0xc
c000b35b:	6a 02                	push   0x2
c000b35d:	e8 32 c5 ff ff       	call   c0007894 <memp_malloc>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b369:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b36e:	75 38                	jne    c000b3a8 <tcp_alloc+0x78>
c000b370:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b375:	83 ec 0c             	sub    esp,0xc
c000b378:	50                   	push   eax
c000b379:	e8 4a fe ff ff       	call   c000b1c8 <tcp_kill_prio>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	83 ec 0c             	sub    esp,0xc
c000b384:	6a 02                	push   0x2
c000b386:	e8 09 c5 ff ff       	call   c0007894 <memp_malloc>
c000b38b:	83 c4 10             	add    esp,0x10
c000b38e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b392:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b397:	74 0f                	je     c000b3a8 <tcp_alloc+0x78>
c000b399:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b39f:	83 e8 01             	sub    eax,0x1
c000b3a2:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3ad:	74 11                	je     c000b3c0 <tcp_alloc+0x90>
c000b3af:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3b5:	83 e8 01             	sub    eax,0x1
c000b3b8:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3be:	66 90                	xchg   ax,ax
c000b3c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3c5:	0f 84 09 01 00 00    	je     c000b4d4 <tcp_alloc+0x1a4>
c000b3cb:	83 ec 04             	sub    esp,0x4
c000b3ce:	68 a8 00 00 00       	push   0xa8
c000b3d3:	6a 00                	push   0x0
c000b3d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b3d9:	e8 12 51 ff ff       	call   c00004f0 <memset>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b3e9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b3ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f0:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b3f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3fa:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b400:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b404:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b40e:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b418:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b41c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b420:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b428:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b42e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b432:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b43c:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b446:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b44c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b450:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b45a:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b460:	e8 b3 fe ff ff       	call   c000b318 <tcp_next_iss>
c000b465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b471:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b478:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b47c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b47f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b483:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b487:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b48a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b492:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b495:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b4a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a6:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b4aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ae:	c7 80 8c 00 00 00 b4 ad 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000adb4
c000b4b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4bc:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ca:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d8:	83 c4 2c             	add    esp,0x2c
c000b4db:	c3                   	ret    

c000b4dc <tcp_new>:
c000b4dc:	83 ec 0c             	sub    esp,0xc
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	6a 40                	push   0x40
c000b4e4:	e8 47 fe ff ff       	call   c000b330 <tcp_alloc>
c000b4e9:	83 c4 10             	add    esp,0x10
c000b4ec:	83 c4 0c             	add    esp,0xc
c000b4ef:	c3                   	ret    

c000b4f0 <tcp_eff_send_mss>:
c000b4f0:	53                   	push   ebx
c000b4f1:	83 ec 28             	sub    esp,0x28
c000b4f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b4f8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b4fd:	83 ec 0c             	sub    esp,0xc
c000b500:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b504:	e8 bf 80 00 00       	call   c00135c8 <ip_route>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b510:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b515:	74 3d                	je     c000b554 <tcp_eff_send_mss+0x64>
c000b517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b51b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b51e:	0f b7 c0             	movzx  eax,ax
c000b521:	85 c0                	test   eax,eax
c000b523:	74 2f                	je     c000b554 <tcp_eff_send_mss+0x64>
c000b525:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b529:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b52c:	83 e8 28             	sub    eax,0x28
c000b52f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b534:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b538:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b53d:	0f b7 d8             	movzx  ebx,ax
c000b540:	0f b7 ca             	movzx  ecx,dx
c000b543:	39 cb                	cmp    ebx,ecx
c000b545:	76 05                	jbe    c000b54c <tcp_eff_send_mss+0x5c>
c000b547:	89 d0                	mov    eax,edx
c000b549:	8d 76 00             	lea    esi,[esi+0x0]
c000b54c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b551:	8d 76 00             	lea    esi,[esi+0x0]
c000b554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b558:	83 c4 28             	add    esp,0x28
c000b55b:	5b                   	pop    ebx
c000b55c:	c3                   	ret    
c000b55d:	8d 76 00             	lea    esi,[esi+0x0]

c000b560 <tcp_connect>:
c000b560:	83 ec 2c             	sub    esp,0x2c
c000b563:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b567:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b56c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b570:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b573:	85 c0                	test   eax,eax
c000b575:	74 1d                	je     c000b594 <tcp_connect+0x34>
c000b577:	83 ec 08             	sub    esp,0x8
c000b57a:	68 84 fe 02 c0       	push   0xc002fe84
c000b57f:	68 e6 f6 02 c0       	push   0xc002f6e6
c000b584:	e8 33 44 01 00       	call   c001f9bc <CPrintf>
c000b589:	83 c4 10             	add    esp,0x10
c000b58c:	b0 f7                	mov    al,0xf7
c000b58e:	e9 41 02 00 00       	jmp    c000b7d4 <tcp_connect+0x274>
c000b593:	90                   	nop
c000b594:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b599:	74 25                	je     c000b5c0 <tcp_connect+0x60>
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b5a3:	8b 12                	mov    edx,DWORD PTR [edx]
c000b5a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5b0:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b5b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b8:	85 c0                	test   eax,eax
c000b5ba:	74 18                	je     c000b5d4 <tcp_connect+0x74>
c000b5bc:	eb 0a                	jmp    c000b5c8 <tcp_connect+0x68>
c000b5be:	66 90                	xchg   ax,ax
c000b5c0:	b0 fa                	mov    al,0xfa
c000b5c2:	e9 0d 02 00 00       	jmp    c000b7d4 <tcp_connect+0x274>
c000b5c7:	90                   	nop
c000b5c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5ce:	85 c0                	test   eax,eax
c000b5d0:	75 3a                	jne    c000b60c <tcp_connect+0xac>
c000b5d2:	66 90                	xchg   ax,ax
c000b5d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5d8:	83 c0 04             	add    eax,0x4
c000b5db:	83 ec 0c             	sub    esp,0xc
c000b5de:	50                   	push   eax
c000b5df:	e8 e4 7f 00 00       	call   c00135c8 <ip_route>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5eb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5f0:	75 0a                	jne    c000b5fc <tcp_connect+0x9c>
c000b5f2:	b0 fc                	mov    al,0xfc
c000b5f4:	e9 db 01 00 00       	jmp    c000b7d4 <tcp_connect+0x274>
c000b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b600:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b607:	89 10                	mov    DWORD PTR [eax],edx
c000b609:	8d 76 00             	lea    esi,[esi+0x0]
c000b60c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b610:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b613:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b61c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b61f:	0f b7 c0             	movzx  eax,ax
c000b622:	85 c0                	test   eax,eax
c000b624:	75 12                	jne    c000b638 <tcp_connect+0xd8>
c000b626:	e8 21 e7 ff ff       	call   c0009d4c <tcp_new_port>
c000b62b:	89 c2                	mov    edx,eax
c000b62d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b631:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	e8 db fc ff ff       	call   c000b318 <tcp_next_iss>
c000b63d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b645:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b64c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b650:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b654:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b65b:	8d 50 ff             	lea    edx,[eax-0x1]
c000b65e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b662:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b669:	8d 50 ff             	lea    edx,[eax-0x1]
c000b66c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b670:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b673:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b677:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b67d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b681:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b68b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b68e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b692:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b699:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b69f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a3:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6b0:	0f b7 c0             	movzx  eax,ax
c000b6b3:	83 ec 08             	sub    esp,0x8
c000b6b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b6ba:	50                   	push   eax
c000b6bb:	e8 30 fe ff ff       	call   c000b4f0 <tcp_eff_send_mss>
c000b6c0:	83 c4 10             	add    esp,0x10
c000b6c3:	89 c2                	mov    edx,eax
c000b6c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c9:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b6cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d1:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6de:	89 c2                	mov    edx,eax
c000b6e0:	c1 e2 02             	shl    edx,0x2
c000b6e3:	01 d0                	add    eax,edx
c000b6e5:	d1 e0                	shl    eax,1
c000b6e7:	89 c2                	mov    edx,eax
c000b6e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ed:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b6f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6f5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6f9:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b6ff:	83 ec 08             	sub    esp,0x8
c000b702:	6a 02                	push   0x2
c000b704:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b708:	e8 73 40 00 00       	call   c000f780 <tcp_enqueue_flags>
c000b70d:	83 c4 10             	add    esp,0x10
c000b710:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b714:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b719:	85 c0                	test   eax,eax
c000b71b:	0f 85 af 00 00 00    	jne    c000b7d0 <tcp_connect+0x270>
c000b721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b725:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b72c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b731:	85 c0                	test   eax,eax
c000b733:	74 6f                	je     c000b7a4 <tcp_connect+0x244>
c000b735:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b73a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b73e:	75 10                	jne    c000b750 <tcp_connect+0x1f0>
c000b740:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b745:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b748:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b74d:	eb 49                	jmp    c000b798 <tcp_connect+0x238>
c000b74f:	90                   	nop
c000b750:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b755:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b75a:	eb 30                	jmp    c000b78c <tcp_connect+0x22c>
c000b75c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b761:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b764:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b768:	75 12                	jne    c000b77c <tcp_connect+0x21c>
c000b76a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b76f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b773:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b776:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b779:	eb 1d                	jmp    c000b798 <tcp_connect+0x238>
c000b77b:	90                   	nop
c000b77c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b781:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b784:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b789:	8d 76 00             	lea    esi,[esi+0x0]
c000b78c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b791:	85 c0                	test   eax,eax
c000b793:	75 c7                	jne    c000b75c <tcp_connect+0x1fc>
c000b795:	8d 76 00             	lea    esi,[esi+0x0]
c000b798:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b7a3:	90                   	nop
c000b7a4:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b7ba:	e8 09 53 00 00       	call   c0010ac8 <tcp_timer_needed>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7c6:	e8 55 46 00 00       	call   c000fe20 <tcp_output>
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	66 90                	xchg   ax,ax
c000b7d0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b7d4:	83 c4 2c             	add    esp,0x2c
c000b7d7:	c3                   	ret    

c000b7d8 <tcp_debug_state_str>:
c000b7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7dc:	8b 04 85 00 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0000]
c000b7e3:	c3                   	ret    

c000b7e4 <tcp_timewait_input>:
c000b7e4:	53                   	push   ebx
c000b7e5:	83 ec 08             	sub    esp,0x8
c000b7e8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b7ed:	0f b6 c0             	movzx  eax,al
c000b7f0:	83 e0 04             	and    eax,0x4
c000b7f3:	74 07                	je     c000b7fc <tcp_timewait_input+0x18>
c000b7f5:	b0 00                	mov    al,0x0
c000b7f7:	e9 e8 00 00 00       	jmp    c000b8e4 <tcp_timewait_input+0x100>
c000b7fc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b801:	0f b6 c0             	movzx  eax,al
c000b804:	83 e0 02             	and    eax,0x2
c000b807:	0f 84 83 00 00 00    	je     c000b890 <tcp_timewait_input+0xac>
c000b80d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b817:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b81a:	29 c2                	sub    edx,eax
c000b81c:	89 d0                	mov    eax,edx
c000b81e:	0f 88 88 00 00 00    	js     c000b8ac <tcp_timewait_input+0xc8>
c000b824:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b82e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b835:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b838:	0f b7 c0             	movzx  eax,ax
c000b83b:	01 c8                	add    eax,ecx
c000b83d:	29 c2                	sub    edx,eax
c000b83f:	89 d0                	mov    eax,edx
c000b841:	85 c0                	test   eax,eax
c000b843:	7f 67                	jg     c000b8ac <tcp_timewait_input+0xc8>
c000b845:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b84a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b84d:	0f b7 c8             	movzx  ecx,ax
c000b850:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b855:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b859:	0f b7 d0             	movzx  edx,ax
c000b85c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b862:	0f b7 d8             	movzx  ebx,ax
c000b865:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b86a:	01 c3                	add    ebx,eax
c000b86c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b871:	83 ec 08             	sub    esp,0x8
c000b874:	51                   	push   ecx
c000b875:	52                   	push   edx
c000b876:	68 90 68 03 c0       	push   0xc0036890
c000b87b:	68 98 68 03 c0       	push   0xc0036898
c000b880:	53                   	push   ebx
c000b881:	50                   	push   eax
c000b882:	e8 25 4a 00 00       	call   c00102ac <tcp_rst>
c000b887:	83 c4 20             	add    esp,0x20
c000b88a:	b0 00                	mov    al,0x0
c000b88c:	eb 56                	jmp    c000b8e4 <tcp_timewait_input+0x100>
c000b88e:	66 90                	xchg   ax,ax
c000b890:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b895:	0f b6 c0             	movzx  eax,al
c000b898:	83 e0 01             	and    eax,0x1
c000b89b:	74 0f                	je     c000b8ac <tcp_timewait_input+0xc8>
c000b89d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b8aa:	66 90                	xchg   ax,ax
c000b8ac:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8b2:	0f b7 c0             	movzx  eax,ax
c000b8b5:	85 c0                	test   eax,eax
c000b8b7:	74 27                	je     c000b8e0 <tcp_timewait_input+0xfc>
c000b8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8bd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b8c0:	83 c8 02             	or     eax,0x2
c000b8c3:	88 c2                	mov    dl,al
c000b8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b8cc:	83 ec 0c             	sub    esp,0xc
c000b8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d3:	e8 48 45 00 00       	call   c000fe20 <tcp_output>
c000b8d8:	83 c4 10             	add    esp,0x10
c000b8db:	eb 07                	jmp    c000b8e4 <tcp_timewait_input+0x100>
c000b8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b8e0:	b0 00                	mov    al,0x0
c000b8e2:	66 90                	xchg   ax,ax
c000b8e4:	83 c4 08             	add    esp,0x8
c000b8e7:	5b                   	pop    ebx
c000b8e8:	c3                   	ret    
c000b8e9:	8d 76 00             	lea    esi,[esi+0x0]

c000b8ec <tcp_oos_insert_segment>:
c000b8ec:	53                   	push   ebx
c000b8ed:	83 ec 18             	sub    esp,0x18
c000b8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b8fb:	0f b7 c0             	movzx  eax,ax
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	50                   	push   eax
c000b902:	e8 15 53 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b907:	83 c4 10             	add    esp,0x10
c000b90a:	0f b7 c0             	movzx  eax,ax
c000b90d:	83 e0 01             	and    eax,0x1
c000b910:	0f 84 8e 00 00 00    	je     c000b9a4 <tcp_oos_insert_segment+0xb8>
c000b916:	83 ec 0c             	sub    esp,0xc
c000b919:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b91d:	e8 2e e6 ff ff       	call   c0009f50 <tcp_segs_free>
c000b922:	83 c4 10             	add    esp,0x10
c000b925:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b92d:	e9 1a 01 00 00       	jmp    c000ba4c <tcp_oos_insert_segment+0x160>
c000b932:	66 90                	xchg   ax,ax
c000b934:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b938:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b93b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b93f:	0f b7 c0             	movzx  eax,ax
c000b942:	83 ec 0c             	sub    esp,0xc
c000b945:	50                   	push   eax
c000b946:	e8 d1 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b94b:	83 c4 10             	add    esp,0x10
c000b94e:	0f b7 c0             	movzx  eax,ax
c000b951:	83 e0 01             	and    eax,0x1
c000b954:	74 2a                	je     c000b980 <tcp_oos_insert_segment+0x94>
c000b956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b95a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b95d:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b961:	83 ec 0c             	sub    esp,0xc
c000b964:	6a 01                	push   0x1
c000b966:	e8 b1 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b96b:	83 c4 10             	add    esp,0x10
c000b96e:	89 c2                	mov    edx,eax
c000b970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b977:	09 da                	or     edx,ebx
c000b979:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000b97d:	8d 76 00             	lea    esi,[esi+0x0]
c000b980:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b984:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b988:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b98e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b992:	83 ec 0c             	sub    esp,0xc
c000b995:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b999:	e8 6e e5 ff ff       	call   c0009f0c <tcp_seg_free>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9a9:	74 35                	je     c000b9e0 <tcp_oos_insert_segment+0xf4>
c000b9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9b2:	0f b7 d0             	movzx  edx,ax
c000b9b5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b9bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b9c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9ce:	0f b7 c0             	movzx  eax,ax
c000b9d1:	01 d0                	add    eax,edx
c000b9d3:	29 c1                	sub    ecx,eax
c000b9d5:	89 c8                	mov    eax,ecx
c000b9d7:	0f 89 57 ff ff ff    	jns    c000b934 <tcp_oos_insert_segment+0x48>
c000b9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b9e0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9e5:	74 65                	je     c000ba4c <tcp_oos_insert_segment+0x160>
c000b9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9ee:	0f b7 d0             	movzx  edx,ax
c000b9f1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9f6:	01 c2                	add    edx,eax
c000b9f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba02:	29 c2                	sub    edx,eax
c000ba04:	89 d0                	mov    eax,edx
c000ba06:	85 c0                	test   eax,eax
c000ba08:	7e 42                	jle    c000ba4c <tcp_oos_insert_segment+0x160>
c000ba0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba14:	89 c2                	mov    edx,eax
c000ba16:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba1b:	89 d3                	mov    ebx,edx
c000ba1d:	29 c3                	sub    ebx,eax
c000ba1f:	89 d8                	mov    eax,ebx
c000ba21:	89 c2                	mov    edx,eax
c000ba23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba27:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ba2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba32:	0f b7 d0             	movzx  edx,ax
c000ba35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba3c:	83 ec 08             	sub    esp,0x8
c000ba3f:	52                   	push   edx
c000ba40:	50                   	push   eax
c000ba41:	e8 0e ce ff ff       	call   c0008854 <pbuf_realloc>
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	8d 76 00             	lea    esi,[esi+0x0]
c000ba4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba54:	89 10                	mov    DWORD PTR [eax],edx
c000ba56:	90                   	nop
c000ba57:	83 c4 18             	add    esp,0x18
c000ba5a:	5b                   	pop    ebx
c000ba5b:	c3                   	ret    

c000ba5c <tcp_receive>:
c000ba5c:	57                   	push   edi
c000ba5d:	56                   	push   esi
c000ba5e:	53                   	push   ebx
c000ba5f:	83 ec 30             	sub    esp,0x30
c000ba62:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ba6a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba6f:	0f b6 c0             	movzx  eax,al
c000ba72:	83 e0 10             	and    eax,0x10
c000ba75:	0f 84 f5 07 00 00    	je     c000c270 <tcp_receive+0x814>
c000ba7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000ba82:	0f b7 d0             	movzx  edx,ax
c000ba85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba89:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ba8c:	01 d0                	add    eax,edx
c000ba8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba96:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000ba99:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba9e:	29 c2                	sub    edx,eax
c000baa0:	89 d0                	mov    eax,edx
c000baa2:	78 50                	js     c000baf4 <tcp_receive+0x98>
c000baa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baa8:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baab:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bab0:	39 c2                	cmp    edx,eax
c000bab2:	75 14                	jne    c000bac8 <tcp_receive+0x6c>
c000bab4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bab8:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000babb:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bac0:	29 c2                	sub    edx,eax
c000bac2:	89 d0                	mov    eax,edx
c000bac4:	78 2e                	js     c000baf4 <tcp_receive+0x98>
c000bac6:	66 90                	xchg   ax,ax
c000bac8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bacc:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bacf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bad4:	39 c2                	cmp    edx,eax
c000bad6:	75 74                	jne    c000bb4c <tcp_receive+0xf0>
c000bad8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000badd:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bae5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bae8:	0f b7 d2             	movzx  edx,dx
c000baeb:	0f b7 c0             	movzx  eax,ax
c000baee:	39 c2                	cmp    edx,eax
c000baf0:	76 5a                	jbe    c000bb4c <tcp_receive+0xf0>
c000baf2:	66 90                	xchg   ax,ax
c000baf4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000baf9:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bafd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb01:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bb05:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bb0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb0f:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bb12:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb1c:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bb1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb23:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb26:	0f b7 c0             	movzx  eax,ax
c000bb29:	85 c0                	test   eax,eax
c000bb2b:	74 1f                	je     c000bb4c <tcp_receive+0xf0>
c000bb2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb31:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bb37:	0f b6 c0             	movzx  eax,al
c000bb3a:	85 c0                	test   eax,eax
c000bb3c:	74 0e                	je     c000bb4c <tcp_receive+0xf0>
c000bb3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb42:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]
c000bb4c:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bb59:	29 c2                	sub    edx,eax
c000bb5b:	89 d0                	mov    eax,edx
c000bb5d:	85 c0                	test   eax,eax
c000bb5f:	0f 8f 03 01 00 00    	jg     c000bc68 <tcp_receive+0x20c>
c000bb65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb69:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bb6f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb75:	0f b7 c0             	movzx  eax,ax
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 d0 00 00 00    	jne    c000bc50 <tcp_receive+0x1f4>
c000bb80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb84:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb8b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb8e:	0f b7 c0             	movzx  eax,ax
c000bb91:	01 d0                	add    eax,edx
c000bb93:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bb97:	0f 85 b3 00 00 00    	jne    c000bc50 <tcp_receive+0x1f4>
c000bb9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba1:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bba5:	98                   	cwde   
c000bba6:	85 c0                	test   eax,eax
c000bba8:	0f 88 a2 00 00 00    	js     c000bc50 <tcp_receive+0x1f4>
c000bbae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb2:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bbb5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbba:	39 c2                	cmp    edx,eax
c000bbbc:	0f 85 8e 00 00 00    	jne    c000bc50 <tcp_receive+0x1f4>
c000bbc2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bbca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbce:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbd1:	83 c0 01             	add    eax,0x1
c000bbd4:	88 c2                	mov    dl,al
c000bbd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbda:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bbdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe1:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbe4:	0f b6 c0             	movzx  eax,al
c000bbe7:	83 f8 03             	cmp    eax,0x3
c000bbea:	76 44                	jbe    c000bc30 <tcp_receive+0x1d4>
c000bbec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf0:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bbf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbfb:	01 d0                	add    eax,edx
c000bbfd:	89 c2                	mov    edx,eax
c000bbff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc03:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bc07:	0f b7 d2             	movzx  edx,dx
c000bc0a:	0f b7 c0             	movzx  eax,ax
c000bc0d:	39 c2                	cmp    edx,eax
c000bc0f:	76 3f                	jbe    c000bc50 <tcp_receive+0x1f4>
c000bc11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc15:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc20:	01 d0                	add    eax,edx
c000bc22:	89 c2                	mov    edx,eax
c000bc24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc28:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bc2c:	eb 22                	jmp    c000bc50 <tcp_receive+0x1f4>
c000bc2e:	66 90                	xchg   ax,ax
c000bc30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc34:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc37:	0f b6 c0             	movzx  eax,al
c000bc3a:	83 f8 03             	cmp    eax,0x3
c000bc3d:	75 11                	jne    c000bc50 <tcp_receive+0x1f4>
c000bc3f:	83 ec 0c             	sub    esp,0xc
c000bc42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bc46:	e8 35 49 00 00       	call   c0010580 <tcp_rexmit_fast>
c000bc4b:	83 c4 10             	add    esp,0x10
c000bc4e:	66 90                	xchg   ax,ax
c000bc50:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc55:	0f 85 a1 04 00 00    	jne    c000c0fc <tcp_receive+0x6a0>
c000bc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc5f:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bc63:	e9 94 04 00 00       	jmp    c000c0fc <tcp_receive+0x6a0>
c000bc68:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc72:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc75:	29 c2                	sub    edx,eax
c000bc77:	89 d0                	mov    eax,edx
c000bc79:	83 e8 01             	sub    eax,0x1
c000bc7c:	0f 88 52 03 00 00    	js     c000bfd4 <tcp_receive+0x578>
c000bc82:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc8c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bc8f:	29 c2                	sub    edx,eax
c000bc91:	89 d0                	mov    eax,edx
c000bc93:	85 c0                	test   eax,eax
c000bc95:	0f 8f 39 03 00 00    	jg     c000bfd4 <tcp_receive+0x578>
c000bc9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc9f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bca2:	0f b6 c0             	movzx  eax,al
c000bca5:	83 e0 04             	and    eax,0x4
c000bca8:	74 22                	je     c000bccc <tcp_receive+0x270>
c000bcaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcae:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcb1:	83 e0 fb             	and    eax,0xfffffffb
c000bcb4:	88 c2                	mov    dl,al
c000bcb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcba:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bcbd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc1:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bcc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc8:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bccc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd0:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bcd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd8:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bcdb:	98                   	cwde   
c000bcdc:	c1 f8 03             	sar    eax,0x3
c000bcdf:	89 c2                	mov    edx,eax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bce9:	01 d0                	add    eax,edx
c000bceb:	89 c2                	mov    edx,eax
c000bced:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf1:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bcf5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bcfa:	89 c2                	mov    edx,eax
c000bcfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd00:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd03:	89 d7                	mov    edi,edx
c000bd05:	29 c7                	sub    edi,eax
c000bd07:	89 f8                	mov    eax,edi
c000bd09:	89 c2                	mov    edx,eax
c000bd0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0f:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bd13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd17:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bd22:	01 d0                	add    eax,edx
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2a:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bd2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd32:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd36:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd40:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bd43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd4a:	83 f8 03             	cmp    eax,0x3
c000bd4d:	0f 86 dd 01 00 00    	jbe    c000bf30 <tcp_receive+0x4d4>
c000bd53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd57:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5f:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd62:	0f b7 d2             	movzx  edx,dx
c000bd65:	0f b7 c0             	movzx  eax,ax
c000bd68:	39 c2                	cmp    edx,eax
c000bd6a:	73 4c                	jae    c000bdb8 <tcp_receive+0x35c>
c000bd6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd70:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd7b:	01 d0                	add    eax,edx
c000bd7d:	89 c2                	mov    edx,eax
c000bd7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd83:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd87:	0f b7 d2             	movzx  edx,dx
c000bd8a:	0f b7 c0             	movzx  eax,ax
c000bd8d:	39 c2                	cmp    edx,eax
c000bd8f:	0f 86 9b 01 00 00    	jbe    c000bf30 <tcp_receive+0x4d4>
c000bd95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd99:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bda4:	01 d0                	add    eax,edx
c000bda6:	89 c2                	mov    edx,eax
c000bda8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdac:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bdb0:	e9 7b 01 00 00       	jmp    c000bf30 <tcp_receive+0x4d4>
c000bdb5:	8d 76 00             	lea    esi,[esi+0x0]
c000bdb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbc:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdc7:	0f b7 d0             	movzx  edx,ax
c000bdca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	0f af c2             	imul   eax,edx
c000bdd7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bddb:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000bddf:	0f b7 f2             	movzx  esi,dx
c000bde2:	89 c2                	mov    edx,eax
c000bde4:	c1 fa 1f             	sar    edx,0x1f
c000bde7:	f7 fe                	idiv   esi
c000bde9:	01 c8                	add    eax,ecx
c000bdeb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bdf8:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000bdfd:	0f b7 c0             	movzx  eax,ax
c000be00:	39 c2                	cmp    edx,eax
c000be02:	0f 86 28 01 00 00    	jbe    c000bf30 <tcp_receive+0x4d4>
c000be08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0c:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000be11:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000be15:	e9 16 01 00 00       	jmp    c000bf30 <tcp_receive+0x4d4>
c000be1a:	66 90                	xchg   ax,ax
c000be1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be20:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be2e:	8b 10                	mov    edx,DWORD PTR [eax]
c000be30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be34:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000be37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000be3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be45:	83 ec 0c             	sub    esp,0xc
c000be48:	50                   	push   eax
c000be49:	e8 0e cc ff ff       	call   c0008a5c <pbuf_clen>
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	0f b6 c0             	movzx  eax,al
c000be54:	0f b7 d3             	movzx  edx,bx
c000be57:	0f b7 c0             	movzx  eax,ax
c000be5a:	39 c2                	cmp    edx,eax
c000be5c:	73 16                	jae    c000be74 <tcp_receive+0x418>
c000be5e:	83 ec 08             	sub    esp,0x8
c000be61:	68 2c 00 03 c0       	push   0xc003002c
c000be66:	68 e6 f6 02 c0       	push   0xc002f6e6
c000be6b:	e8 4c 3b 01 00       	call   c001f9bc <CPrintf>
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	90                   	nop
c000be74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be78:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be7b:	0f b7 c0             	movzx  eax,ax
c000be7e:	85 c0                	test   eax,eax
c000be80:	74 36                	je     c000beb8 <tcp_receive+0x45c>
c000be82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000be8d:	0f b7 c0             	movzx  eax,ax
c000be90:	83 ec 0c             	sub    esp,0xc
c000be93:	50                   	push   eax
c000be94:	e8 83 4d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	0f b7 c0             	movzx  eax,ax
c000be9f:	83 e0 01             	and    eax,0x1
c000bea2:	74 14                	je     c000beb8 <tcp_receive+0x45c>
c000bea4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000beab:	83 e8 01             	sub    eax,0x1
c000beae:	89 c2                	mov    edx,eax
c000beb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb4:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000beb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bebc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bebf:	83 ec 0c             	sub    esp,0xc
c000bec2:	50                   	push   eax
c000bec3:	e8 94 cb ff ff       	call   c0008a5c <pbuf_clen>
c000bec8:	83 c4 10             	add    esp,0x10
c000becb:	88 c1                	mov    cl,al
c000becd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bed4:	0f b6 c1             	movzx  eax,cl
c000bed7:	89 d7                	mov    edi,edx
c000bed9:	29 c7                	sub    edi,eax
c000bedb:	89 f8                	mov    eax,edi
c000bedd:	89 c2                	mov    edx,eax
c000bedf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee3:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000bee7:	83 ec 0c             	sub    esp,0xc
c000beea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000beee:	e8 19 e0 ff ff       	call   c0009f0c <tcp_seg_free>
c000bef3:	83 c4 10             	add    esp,0x10
c000bef6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000befa:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000befd:	0f b7 c0             	movzx  eax,ax
c000bf00:	85 c0                	test   eax,eax
c000bf02:	74 2c                	je     c000bf30 <tcp_receive+0x4d4>
c000bf04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf08:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf0b:	85 c0                	test   eax,eax
c000bf0d:	75 21                	jne    c000bf30 <tcp_receive+0x4d4>
c000bf0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf13:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf16:	85 c0                	test   eax,eax
c000bf18:	75 16                	jne    c000bf30 <tcp_receive+0x4d4>
c000bf1a:	83 ec 08             	sub    esp,0x8
c000bf1d:	68 54 00 03 c0       	push   0xc0030054
c000bf22:	68 e6 f6 02 c0       	push   0xc002f6e6
c000bf27:	e8 90 3a 01 00       	call   c001f9bc <CPrintf>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	90                   	nop
c000bf30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf34:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf37:	85 c0                	test   eax,eax
c000bf39:	74 69                	je     c000bfa4 <tcp_receive+0x548>
c000bf3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 ef 4c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	89 c3                	mov    ebx,eax
c000bf56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bf60:	0f b7 f0             	movzx  esi,ax
c000bf63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf67:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf6d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf71:	0f b7 c0             	movzx  eax,ax
c000bf74:	83 ec 0c             	sub    esp,0xc
c000bf77:	50                   	push   eax
c000bf78:	e8 9f 4c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bf7d:	83 c4 10             	add    esp,0x10
c000bf80:	0f b7 c0             	movzx  eax,ax
c000bf83:	83 e0 03             	and    eax,0x3
c000bf86:	0f 95 c0             	setne  al
c000bf89:	0f b6 c0             	movzx  eax,al
c000bf8c:	01 f0                	add    eax,esi
c000bf8e:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bf91:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf96:	29 c2                	sub    edx,eax
c000bf98:	89 d0                	mov    eax,edx
c000bf9a:	85 c0                	test   eax,eax
c000bf9c:	0f 8e 7a fe ff ff    	jle    c000be1c <tcp_receive+0x3c0>
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfab:	85 c0                	test   eax,eax
c000bfad:	75 0d                	jne    c000bfbc <tcp_receive+0x560>
c000bfaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb3:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000bfb9:	eb 0d                	jmp    c000bfc8 <tcp_receive+0x56c>
c000bfbb:	90                   	nop
c000bfbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc0:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000bfc6:	66 90                	xchg   ax,ax
c000bfc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfcc:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000bfd0:	eb 0e                	jmp    c000bfe0 <tcp_receive+0x584>
c000bfd2:	66 90                	xchg   ax,ax
c000bfd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd8:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	e9 17 01 00 00       	jmp    c000c0fc <tcp_receive+0x6a0>
c000bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bff3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bffa:	8b 10                	mov    edx,DWORD PTR [eax]
c000bffc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c000:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c003:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c007:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c00a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c00e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c011:	83 ec 0c             	sub    esp,0xc
c000c014:	50                   	push   eax
c000c015:	e8 42 ca ff ff       	call   c0008a5c <pbuf_clen>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	0f b6 c0             	movzx  eax,al
c000c020:	0f b7 d3             	movzx  edx,bx
c000c023:	0f b7 c0             	movzx  eax,ax
c000c026:	39 c2                	cmp    edx,eax
c000c028:	73 16                	jae    c000c040 <tcp_receive+0x5e4>
c000c02a:	83 ec 08             	sub    esp,0x8
c000c02d:	68 2c 00 03 c0       	push   0xc003002c
c000c032:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c037:	e8 80 39 01 00       	call   c001f9bc <CPrintf>
c000c03c:	83 c4 10             	add    esp,0x10
c000c03f:	90                   	nop
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c047:	0f b7 c0             	movzx  eax,ax
c000c04a:	85 c0                	test   eax,eax
c000c04c:	74 36                	je     c000c084 <tcp_receive+0x628>
c000c04e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c052:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c055:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c059:	0f b7 c0             	movzx  eax,ax
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	50                   	push   eax
c000c060:	e8 b7 4b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c065:	83 c4 10             	add    esp,0x10
c000c068:	0f b7 c0             	movzx  eax,ax
c000c06b:	83 e0 01             	and    eax,0x1
c000c06e:	74 14                	je     c000c084 <tcp_receive+0x628>
c000c070:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c074:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c077:	83 e8 01             	sub    eax,0x1
c000c07a:	89 c2                	mov    edx,eax
c000c07c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c080:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c08b:	83 ec 0c             	sub    esp,0xc
c000c08e:	50                   	push   eax
c000c08f:	e8 c8 c9 ff ff       	call   c0008a5c <pbuf_clen>
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	88 c1                	mov    cl,al
c000c099:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c09d:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c0a0:	0f b6 c1             	movzx  eax,cl
c000c0a3:	89 d6                	mov    esi,edx
c000c0a5:	29 c6                	sub    esi,eax
c000c0a7:	89 f0                	mov    eax,esi
c000c0a9:	89 c2                	mov    edx,eax
c000c0ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0af:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c0b3:	83 ec 0c             	sub    esp,0xc
c000c0b6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c0ba:	e8 4d de ff ff       	call   c0009f0c <tcp_seg_free>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c6:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c0c9:	0f b7 c0             	movzx  eax,ax
c000c0cc:	85 c0                	test   eax,eax
c000c0ce:	74 2c                	je     c000c0fc <tcp_receive+0x6a0>
c000c0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0d7:	85 c0                	test   eax,eax
c000c0d9:	75 21                	jne    c000c0fc <tcp_receive+0x6a0>
c000c0db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0df:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0e2:	85 c0                	test   eax,eax
c000c0e4:	75 16                	jne    c000c0fc <tcp_receive+0x6a0>
c000c0e6:	83 ec 08             	sub    esp,0x8
c000c0e9:	68 54 00 03 c0       	push   0xc0030054
c000c0ee:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c0f3:	e8 c4 38 01 00       	call   c001f9bc <CPrintf>
c000c0f8:	83 c4 10             	add    esp,0x10
c000c0fb:	90                   	nop
c000c0fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c100:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c103:	85 c0                	test   eax,eax
c000c105:	74 7d                	je     c000c184 <tcp_receive+0x728>
c000c107:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c10d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c111:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	50                   	push   eax
c000c11e:	e8 1d 4b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c123:	83 c4 10             	add    esp,0x10
c000c126:	89 c6                	mov    esi,eax
c000c128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c12c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c12f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c132:	0f b7 f8             	movzx  edi,ax
c000c135:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c139:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c13c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c13f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c143:	0f b7 c0             	movzx  eax,ax
c000c146:	83 ec 0c             	sub    esp,0xc
c000c149:	50                   	push   eax
c000c14a:	e8 cd 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	0f b7 c0             	movzx  eax,ax
c000c155:	83 e0 03             	and    eax,0x3
c000c158:	0f 95 c0             	setne  al
c000c15b:	0f b6 c0             	movzx  eax,al
c000c15e:	01 f8                	add    eax,edi
c000c160:	01 f0                	add    eax,esi
c000c162:	29 c3                	sub    ebx,eax
c000c164:	89 d8                	mov    eax,ebx
c000c166:	78 1c                	js     c000c184 <tcp_receive+0x728>
c000c168:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c16e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c172:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c175:	29 c2                	sub    edx,eax
c000c177:	89 d0                	mov    eax,edx
c000c179:	85 c0                	test   eax,eax
c000c17b:	0f 8e 67 fe ff ff    	jle    c000bfe8 <tcp_receive+0x58c>
c000c181:	8d 76 00             	lea    esi,[esi+0x0]
c000c184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c188:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c18b:	85 c0                	test   eax,eax
c000c18d:	0f 84 dd 00 00 00    	je     c000c270 <tcp_receive+0x814>
c000c193:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c197:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c19a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c19f:	29 c2                	sub    edx,eax
c000c1a1:	89 d0                	mov    eax,edx
c000c1a3:	0f 89 c7 00 00 00    	jns    c000c270 <tcp_receive+0x814>
c000c1a9:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c1ae:	89 c2                	mov    edx,eax
c000c1b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c1b7:	89 d7                	mov    edi,edx
c000c1b9:	29 c7                	sub    edi,eax
c000c1bb:	89 f8                	mov    eax,edi
c000c1bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1c2:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c1c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1cb:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1ce:	98                   	cwde   
c000c1cf:	c1 f8 03             	sar    eax,0x3
c000c1d2:	89 d6                	mov    esi,edx
c000c1d4:	29 c6                	sub    esi,eax
c000c1d6:	89 f0                	mov    eax,esi
c000c1d8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e1:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1e4:	89 c2                	mov    edx,eax
c000c1e6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1eb:	01 d0                	add    eax,edx
c000c1ed:	89 c2                	mov    edx,eax
c000c1ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f3:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c1f7:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c1fc:	85 c0                	test   eax,eax
c000c1fe:	79 0c                	jns    c000c20c <tcp_receive+0x7b0>
c000c200:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c205:	f7 d8                	neg    eax
c000c207:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c20c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c211:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c215:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c219:	98                   	cwde   
c000c21a:	c1 f8 02             	sar    eax,0x2
c000c21d:	89 d7                	mov    edi,edx
c000c21f:	29 c7                	sub    edi,eax
c000c221:	89 f8                	mov    eax,edi
c000c223:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c228:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c230:	89 c2                	mov    edx,eax
c000c232:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c237:	01 d0                	add    eax,edx
c000c239:	89 c2                	mov    edx,eax
c000c23b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23f:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c24a:	98                   	cwde   
c000c24b:	c1 f8 03             	sar    eax,0x3
c000c24e:	89 c2                	mov    edx,eax
c000c250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c254:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c258:	01 d0                	add    eax,edx
c000c25a:	89 c2                	mov    edx,eax
c000c25c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c260:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c264:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c268:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c26f:	90                   	nop
c000c270:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c276:	0f b7 c0             	movzx  eax,ax
c000c279:	85 c0                	test   eax,eax
c000c27b:	0f 84 43 0e 00 00    	je     c000d0c4 <tcp_receive+0x1668>
c000c281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c285:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c288:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c28d:	29 c2                	sub    edx,eax
c000c28f:	89 d0                	mov    eax,edx
c000c291:	83 e8 01             	sub    eax,0x1
c000c294:	0f 88 c6 01 00 00    	js     c000c460 <tcp_receive+0xa04>
c000c29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c2a1:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c2a8:	0f b7 ca             	movzx  ecx,dx
c000c2ab:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c2b1:	01 ca                	add    edx,ecx
c000c2b3:	29 d0                	sub    eax,edx
c000c2b5:	83 c0 01             	add    eax,0x1
c000c2b8:	85 c0                	test   eax,eax
c000c2ba:	0f 8f a0 01 00 00    	jg     c000c460 <tcp_receive+0xa04>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2c7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2cc:	29 c2                	sub    edx,eax
c000c2ce:	89 d0                	mov    eax,edx
c000c2d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c2d4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2dd:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2e2:	85 c0                	test   eax,eax
c000c2e4:	75 16                	jne    c000c2fc <tcp_receive+0x8a0>
c000c2e6:	83 ec 08             	sub    esp,0x8
c000c2e9:	68 51 02 03 c0       	push   0xc0030251
c000c2ee:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c2f3:	e8 c4 36 01 00       	call   c001f9bc <CPrintf>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	90                   	nop
c000c2fc:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c304:	7e 16                	jle    c000c31c <tcp_receive+0x8c0>
c000c306:	83 ec 08             	sub    esp,0x8
c000c309:	68 61 02 03 c0       	push   0xc0030261
c000c30e:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c313:	e8 a4 36 01 00       	call   c001f9bc <CPrintf>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	90                   	nop
c000c31c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c321:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c325:	0f b7 c0             	movzx  eax,ax
c000c328:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c32c:	0f 8e b6 00 00 00    	jle    c000c3e8 <tcp_receive+0x98c>
c000c332:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c337:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c33a:	0f b7 c0             	movzx  eax,ax
c000c33d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c341:	7e 15                	jle    c000c358 <tcp_receive+0x8fc>
c000c343:	83 ec 08             	sub    esp,0x8
c000c346:	68 70 02 03 c0       	push   0xc0030270
c000c34b:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c350:	e8 67 36 01 00       	call   c001f9bc <CPrintf>
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c35d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c364:	29 d0                	sub    eax,edx
c000c366:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c36b:	eb 33                	jmp    c000c3a0 <tcp_receive+0x944>
c000c36d:	8d 76 00             	lea    esi,[esi+0x0]
c000c370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c374:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c378:	0f b7 c0             	movzx  eax,ax
c000c37b:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c37f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c383:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c387:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c38b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c38f:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c395:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c399:	8b 00                	mov    eax,DWORD PTR [eax]
c000c39b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c39f:	90                   	nop
c000c3a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3a8:	0f b7 c0             	movzx  eax,ax
c000c3ab:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3af:	7f bf                	jg     c000c370 <tcp_receive+0x914>
c000c3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3b5:	f7 d8                	neg    eax
c000c3b7:	98                   	cwde   
c000c3b8:	83 ec 08             	sub    esp,0x8
c000c3bb:	50                   	push   eax
c000c3bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c3c0:	e8 1b bd ff ff       	call   c00080e0 <pbuf_header>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	0f b6 c0             	movzx  eax,al
c000c3cb:	85 c0                	test   eax,eax
c000c3cd:	74 51                	je     c000c420 <tcp_receive+0x9c4>
c000c3cf:	83 ec 08             	sub    esp,0x8
c000c3d2:	68 80 02 03 c0       	push   0xc0030280
c000c3d7:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c3dc:	e8 db 35 01 00       	call   c001f9bc <CPrintf>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	eb 3a                	jmp    c000c420 <tcp_receive+0x9c4>
c000c3e6:	66 90                	xchg   ax,ax
c000c3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3ec:	f7 d8                	neg    eax
c000c3ee:	0f bf d0             	movsx  edx,ax
c000c3f1:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3f6:	83 ec 08             	sub    esp,0x8
c000c3f9:	52                   	push   edx
c000c3fa:	50                   	push   eax
c000c3fb:	e8 e0 bc ff ff       	call   c00080e0 <pbuf_header>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	0f b6 c0             	movzx  eax,al
c000c406:	85 c0                	test   eax,eax
c000c408:	74 16                	je     c000c420 <tcp_receive+0x9c4>
c000c40a:	83 ec 08             	sub    esp,0x8
c000c40d:	68 80 02 03 c0       	push   0xc0030280
c000c412:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c417:	e8 a0 35 01 00       	call   c001f9bc <CPrintf>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	90                   	nop
c000c420:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c426:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c42b:	89 c1                	mov    ecx,eax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c434:	89 ce                	mov    esi,ecx
c000c436:	29 c6                	sub    esi,eax
c000c438:	89 f0                	mov    eax,esi
c000c43a:	01 d0                	add    eax,edx
c000c43c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c446:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c449:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c44e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c453:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c459:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c45c:	eb 2a                	jmp    c000c488 <tcp_receive+0xa2c>
c000c45e:	66 90                	xchg   ax,ax
c000c460:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c46a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c46d:	29 c2                	sub    edx,eax
c000c46f:	89 d0                	mov    eax,edx
c000c471:	79 15                	jns    c000c488 <tcp_receive+0xa2c>
c000c473:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c477:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c47a:	83 c8 02             	or     eax,0x2
c000c47d:	88 c2                	mov    dl,al
c000c47f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c483:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c486:	66 90                	xchg   ax,ax
c000c488:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c48e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c492:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c495:	29 c2                	sub    edx,eax
c000c497:	89 d0                	mov    eax,edx
c000c499:	0f 88 11 0c 00 00    	js     c000d0b0 <tcp_receive+0x1654>
c000c49f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c4ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c4b3:	0f b7 c0             	movzx  eax,ax
c000c4b6:	01 c8                	add    eax,ecx
c000c4b8:	29 c2                	sub    edx,eax
c000c4ba:	89 d0                	mov    eax,edx
c000c4bc:	83 c0 01             	add    eax,0x1
c000c4bf:	85 c0                	test   eax,eax
c000c4c1:	0f 8f e9 0b 00 00    	jg     c000d0b0 <tcp_receive+0x1654>
c000c4c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4cb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ce:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4d3:	39 c2                	cmp    edx,eax
c000c4d5:	0f 85 25 07 00 00    	jne    c000cc00 <tcp_receive+0x11a4>
c000c4db:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c4e1:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4e6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c4ea:	0f b7 c0             	movzx  eax,ax
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 26 47 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	0f b7 c0             	movzx  eax,ax
c000c4fc:	83 e0 03             	and    eax,0x3
c000c4ff:	0f 95 c0             	setne  al
c000c502:	0f b6 c0             	movzx  eax,al
c000c505:	01 d8                	add    eax,ebx
c000c507:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c50d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c511:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c514:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c51a:	0f b7 d2             	movzx  edx,dx
c000c51d:	0f b7 c0             	movzx  eax,ax
c000c520:	39 c2                	cmp    edx,eax
c000c522:	0f 83 30 01 00 00    	jae    c000c658 <tcp_receive+0xbfc>
c000c528:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c52d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c531:	0f b7 c0             	movzx  eax,ax
c000c534:	83 ec 0c             	sub    esp,0xc
c000c537:	50                   	push   eax
c000c538:	e8 df 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	0f b7 c0             	movzx  eax,ax
c000c543:	83 e0 01             	and    eax,0x1
c000c546:	74 48                	je     c000c590 <tcp_receive+0xb34>
c000c548:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c54d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c551:	80 e4 c0             	and    ah,0xc0
c000c554:	89 c3                	mov    ebx,eax
c000c556:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c55b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c55f:	0f b7 c0             	movzx  eax,ax
c000c562:	83 ec 0c             	sub    esp,0xc
c000c565:	50                   	push   eax
c000c566:	e8 b1 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	0f b7 c0             	movzx  eax,ax
c000c571:	83 e0 3e             	and    eax,0x3e
c000c574:	83 ec 0c             	sub    esp,0xc
c000c577:	50                   	push   eax
c000c578:	e8 9f 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c57d:	83 c4 10             	add    esp,0x10
c000c580:	09 d8                	or     eax,ebx
c000c582:	89 c2                	mov    edx,eax
c000c584:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c589:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c58d:	8d 76 00             	lea    esi,[esi+0x0]
c000c590:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c594:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c597:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c59d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5a2:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5a6:	0f b7 c0             	movzx  eax,ax
c000c5a9:	83 ec 0c             	sub    esp,0xc
c000c5ac:	50                   	push   eax
c000c5ad:	e8 6a 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5b2:	83 c4 10             	add    esp,0x10
c000c5b5:	0f b7 c0             	movzx  eax,ax
c000c5b8:	83 e0 02             	and    eax,0x2
c000c5bb:	74 0f                	je     c000c5cc <tcp_receive+0xb70>
c000c5bd:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5c2:	83 e8 01             	sub    eax,0x1
c000c5c5:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c5cb:	90                   	nop
c000c5cc:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5d1:	0f b7 d0             	movzx  edx,ax
c000c5d4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5d9:	83 ec 08             	sub    esp,0x8
c000c5dc:	52                   	push   edx
c000c5dd:	50                   	push   eax
c000c5de:	e8 71 c2 ff ff       	call   c0008854 <pbuf_realloc>
c000c5e3:	83 c4 10             	add    esp,0x10
c000c5e6:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c5ec:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5f1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5f5:	0f b7 c0             	movzx  eax,ax
c000c5f8:	83 ec 0c             	sub    esp,0xc
c000c5fb:	50                   	push   eax
c000c5fc:	e8 1b 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	0f b7 c0             	movzx  eax,ax
c000c607:	83 e0 03             	and    eax,0x3
c000c60a:	0f 95 c0             	setne  al
c000c60d:	0f b6 c0             	movzx  eax,al
c000c610:	01 d8                	add    eax,ebx
c000c612:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c618:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c61e:	0f b7 d0             	movzx  edx,ax
c000c621:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c626:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c629:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c62d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c630:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c634:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c637:	0f b7 c0             	movzx  eax,ax
c000c63a:	01 d0                	add    eax,edx
c000c63c:	39 c1                	cmp    ecx,eax
c000c63e:	74 18                	je     c000c658 <tcp_receive+0xbfc>
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	68 74 00 03 c0       	push   0xc0030074
c000c648:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c64d:	e8 6a 33 01 00       	call   c001f9bc <CPrintf>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	8d 76 00             	lea    esi,[esi+0x0]
c000c658:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c65c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c662:	85 c0                	test   eax,eax
c000c664:	0f 84 7e 02 00 00    	je     c000c8e8 <tcp_receive+0xe8c>
c000c66a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c66f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c673:	0f b7 c0             	movzx  eax,ax
c000c676:	83 ec 0c             	sub    esp,0xc
c000c679:	50                   	push   eax
c000c67a:	e8 9d 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c67f:	83 c4 10             	add    esp,0x10
c000c682:	0f b7 c0             	movzx  eax,ax
c000c685:	83 e0 01             	and    eax,0x1
c000c688:	74 4a                	je     c000c6d4 <tcp_receive+0xc78>
c000c68a:	eb 34                	jmp    c000c6c0 <tcp_receive+0xc64>
c000c68c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c690:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c69a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6aa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c6b0:	83 ec 0c             	sub    esp,0xc
c000c6b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6b7:	e8 50 d8 ff ff       	call   c0009f0c <tcp_seg_free>
c000c6bc:	83 c4 10             	add    esp,0x10
c000c6bf:	90                   	nop
c000c6c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6ca:	85 c0                	test   eax,eax
c000c6cc:	75 be                	jne    c000c68c <tcp_receive+0xc30>
c000c6ce:	e9 15 02 00 00       	jmp    c000c8e8 <tcp_receive+0xe8c>
c000c6d3:	90                   	nop
c000c6d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c6e2:	e9 bd 00 00 00       	jmp    c000c7a4 <tcp_receive+0xd48>
c000c6e7:	90                   	nop
c000c6e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6f3:	0f b7 c0             	movzx  eax,ax
c000c6f6:	83 ec 0c             	sub    esp,0xc
c000c6f9:	50                   	push   eax
c000c6fa:	e8 1d 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c6ff:	83 c4 10             	add    esp,0x10
c000c702:	0f b7 c0             	movzx  eax,ax
c000c705:	83 e0 01             	and    eax,0x1
c000c708:	74 76                	je     c000c780 <tcp_receive+0xd24>
c000c70a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c70f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c713:	0f b7 c0             	movzx  eax,ax
c000c716:	83 ec 0c             	sub    esp,0xc
c000c719:	50                   	push   eax
c000c71a:	e8 fd 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c71f:	83 c4 10             	add    esp,0x10
c000c722:	0f b7 c0             	movzx  eax,ax
c000c725:	83 e0 02             	and    eax,0x2
c000c728:	75 56                	jne    c000c780 <tcp_receive+0xd24>
c000c72a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c72f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c733:	83 ec 0c             	sub    esp,0xc
c000c736:	6a 01                	push   0x1
c000c738:	e8 df 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c73d:	83 c4 10             	add    esp,0x10
c000c740:	89 c2                	mov    edx,eax
c000c742:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c747:	09 da                	or     edx,ebx
c000c749:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c74d:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c753:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c758:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c75c:	0f b7 c0             	movzx  eax,ax
c000c75f:	83 ec 0c             	sub    esp,0xc
c000c762:	50                   	push   eax
c000c763:	e8 b4 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c768:	83 c4 10             	add    esp,0x10
c000c76b:	0f b7 c0             	movzx  eax,ax
c000c76e:	83 e0 03             	and    eax,0x3
c000c771:	0f 95 c0             	setne  al
c000c774:	0f b6 c0             	movzx  eax,al
c000c777:	01 d8                	add    eax,ebx
c000c779:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c77f:	90                   	nop
c000c780:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c784:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c788:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c78e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c792:	83 ec 0c             	sub    esp,0xc
c000c795:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c799:	e8 6e d7 ff ff       	call   c0009f0c <tcp_seg_free>
c000c79e:	83 c4 10             	add    esp,0x10
c000c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c7a4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7a9:	74 31                	je     c000c7dc <tcp_receive+0xd80>
c000c7ab:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7b1:	0f b7 d0             	movzx  edx,ax
c000c7b4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7b9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c7bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7c3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c7cd:	0f b7 c0             	movzx  eax,ax
c000c7d0:	01 d0                	add    eax,edx
c000c7d2:	29 c1                	sub    ecx,eax
c000c7d4:	89 c8                	mov    eax,ecx
c000c7d6:	0f 89 0c ff ff ff    	jns    c000c6e8 <tcp_receive+0xc8c>
c000c7dc:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7e1:	0f 84 f1 00 00 00    	je     c000c8d8 <tcp_receive+0xe7c>
c000c7e7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7ed:	0f b7 d0             	movzx  edx,ax
c000c7f0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7f5:	01 c2                	add    edx,eax
c000c7f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c801:	29 c2                	sub    edx,eax
c000c803:	89 d0                	mov    eax,edx
c000c805:	85 c0                	test   eax,eax
c000c807:	0f 8e cb 00 00 00    	jle    c000c8d8 <tcp_receive+0xe7c>
c000c80d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c811:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c814:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c817:	89 c2                	mov    edx,eax
c000c819:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c81e:	89 d7                	mov    edi,edx
c000c820:	29 c7                	sub    edi,eax
c000c822:	89 f8                	mov    eax,edi
c000c824:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c82a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c82f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c833:	0f b7 c0             	movzx  eax,ax
c000c836:	83 ec 0c             	sub    esp,0xc
c000c839:	50                   	push   eax
c000c83a:	e8 dd 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	0f b7 c0             	movzx  eax,ax
c000c845:	83 e0 02             	and    eax,0x2
c000c848:	74 0e                	je     c000c858 <tcp_receive+0xdfc>
c000c84a:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c84f:	83 e8 01             	sub    eax,0x1
c000c852:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c858:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c85d:	0f b7 d0             	movzx  edx,ax
c000c860:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c865:	83 ec 08             	sub    esp,0x8
c000c868:	52                   	push   edx
c000c869:	50                   	push   eax
c000c86a:	e8 e5 bf ff ff       	call   c0008854 <pbuf_realloc>
c000c86f:	83 c4 10             	add    esp,0x10
c000c872:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c878:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c87d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c881:	0f b7 c0             	movzx  eax,ax
c000c884:	83 ec 0c             	sub    esp,0xc
c000c887:	50                   	push   eax
c000c888:	e8 8f 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c88d:	83 c4 10             	add    esp,0x10
c000c890:	0f b7 c0             	movzx  eax,ax
c000c893:	83 e0 03             	and    eax,0x3
c000c896:	0f 95 c0             	setne  al
c000c899:	0f b6 c0             	movzx  eax,al
c000c89c:	01 d8                	add    eax,ebx
c000c89e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8a4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8aa:	0f b7 d0             	movzx  edx,ax
c000c8ad:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8b2:	01 c2                	add    edx,eax
c000c8b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8be:	39 c2                	cmp    edx,eax
c000c8c0:	74 16                	je     c000c8d8 <tcp_receive+0xe7c>
c000c8c2:	83 ec 08             	sub    esp,0x8
c000c8c5:	68 ac 00 03 c0       	push   0xc00300ac
c000c8ca:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c8cf:	e8 e8 30 01 00       	call   c001f9bc <CPrintf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	90                   	nop
c000c8d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8e0:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8e6:	66 90                	xchg   ax,ax
c000c8e8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8ee:	0f b7 d0             	movzx  edx,ax
c000c8f1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8f6:	01 c2                	add    edx,eax
c000c8f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8fc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c8ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c903:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c906:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c90c:	0f b7 d2             	movzx  edx,dx
c000c90f:	0f b7 c0             	movzx  eax,ax
c000c912:	39 c2                	cmp    edx,eax
c000c914:	73 16                	jae    c000c92c <tcp_receive+0xed0>
c000c916:	83 ec 08             	sub    esp,0x8
c000c919:	68 e8 00 03 c0       	push   0xc00300e8
c000c91e:	68 e6 f6 02 c0       	push   0xc002f6e6
c000c923:	e8 94 30 01 00       	call   c001f9bc <CPrintf>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	90                   	nop
c000c92c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c930:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c933:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c939:	89 d6                	mov    esi,edx
c000c93b:	29 c6                	sub    esi,eax
c000c93d:	89 f0                	mov    eax,esi
c000c93f:	89 c2                	mov    edx,eax
c000c941:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c945:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c950:	e8 5b d2 ff ff       	call   c0009bb0 <tcp_update_rcv_ann_wnd>
c000c955:	83 c4 10             	add    esp,0x10
c000c958:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c95d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c960:	0f b7 c0             	movzx  eax,ax
c000c963:	85 c0                	test   eax,eax
c000c965:	74 15                	je     c000c97c <tcp_receive+0xf20>
c000c967:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c96c:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c971:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c97b:	90                   	nop
c000c97c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c981:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c985:	0f b7 c0             	movzx  eax,ax
c000c988:	83 ec 0c             	sub    esp,0xc
c000c98b:	50                   	push   eax
c000c98c:	e8 8b 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c991:	83 c4 10             	add    esp,0x10
c000c994:	0f b7 c0             	movzx  eax,ax
c000c997:	83 e0 01             	and    eax,0x1
c000c99a:	0f 84 dc 01 00 00    	je     c000cb7c <tcp_receive+0x1120>
c000c9a0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c9a5:	83 c8 20             	or     eax,0x20
c000c9a8:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000c9ad:	e9 ca 01 00 00       	jmp    c000cb7c <tcp_receive+0x1120>
c000c9b2:	66 90                	xchg   ax,ax
c000c9b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9c6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9d2:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c9d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9de:	0f b7 d8             	movzx  ebx,ax
c000c9e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9e8:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9ec:	0f b7 c0             	movzx  eax,ax
c000c9ef:	83 ec 0c             	sub    esp,0xc
c000c9f2:	50                   	push   eax
c000c9f3:	e8 24 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9f8:	83 c4 10             	add    esp,0x10
c000c9fb:	0f b7 c0             	movzx  eax,ax
c000c9fe:	83 e0 03             	and    eax,0x3
c000ca01:	0f 95 c0             	setne  al
c000ca04:	0f b6 c0             	movzx  eax,al
c000ca07:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca11:	01 c2                	add    edx,eax
c000ca13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca17:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca21:	0f b7 d8             	movzx  ebx,ax
c000ca24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca2b:	0f b7 f0             	movzx  esi,ax
c000ca2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca35:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca39:	0f b7 c0             	movzx  eax,ax
c000ca3c:	83 ec 0c             	sub    esp,0xc
c000ca3f:	50                   	push   eax
c000ca40:	e8 d7 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca45:	83 c4 10             	add    esp,0x10
c000ca48:	0f b7 c0             	movzx  eax,ax
c000ca4b:	83 e0 03             	and    eax,0x3
c000ca4e:	0f 95 c0             	setne  al
c000ca51:	0f b6 c0             	movzx  eax,al
c000ca54:	01 f0                	add    eax,esi
c000ca56:	39 c3                	cmp    ebx,eax
c000ca58:	7d 16                	jge    c000ca70 <tcp_receive+0x1014>
c000ca5a:	83 ec 08             	sub    esp,0x8
c000ca5d:	68 08 01 03 c0       	push   0xc0030108
c000ca62:	68 e6 f6 02 c0       	push   0xc002f6e6
c000ca67:	e8 50 2f 01 00       	call   c001f9bc <CPrintf>
c000ca6c:	83 c4 10             	add    esp,0x10
c000ca6f:	90                   	nop
c000ca70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca77:	0f b7 d8             	movzx  ebx,ax
c000ca7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca7e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca81:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca85:	0f b7 c0             	movzx  eax,ax
c000ca88:	83 ec 0c             	sub    esp,0xc
c000ca8b:	50                   	push   eax
c000ca8c:	e8 8b 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca91:	83 c4 10             	add    esp,0x10
c000ca94:	0f b7 c0             	movzx  eax,ax
c000ca97:	83 e0 03             	and    eax,0x3
c000ca9a:	0f 95 c0             	setne  al
c000ca9d:	0f b6 c0             	movzx  eax,al
c000caa0:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caa3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caa7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000caaa:	29 d0                	sub    eax,edx
c000caac:	89 c2                	mov    edx,eax
c000caae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cab2:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cab6:	83 ec 0c             	sub    esp,0xc
c000cab9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cabd:	e8 ee d0 ff ff       	call   c0009bb0 <tcp_update_rcv_ann_wnd>
c000cac2:	83 c4 10             	add    esp,0x10
c000cac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cacc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cacf:	0f b7 c0             	movzx  eax,ax
c000cad2:	85 c0                	test   eax,eax
c000cad4:	74 3e                	je     c000cb14 <tcp_receive+0x10b8>
c000cad6:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cadb:	85 c0                	test   eax,eax
c000cadd:	74 1d                	je     c000cafc <tcp_receive+0x10a0>
c000cadf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cae6:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000caeb:	83 ec 08             	sub    esp,0x8
c000caee:	52                   	push   edx
c000caef:	50                   	push   eax
c000caf0:	e8 cf bf ff ff       	call   c0008ac4 <pbuf_cat>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	eb 0e                	jmp    c000cb08 <tcp_receive+0x10ac>
c000cafa:	66 90                	xchg   ax,ax
c000cafc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb03:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb13:	90                   	nop
c000cb14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb1b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb1f:	0f b7 c0             	movzx  eax,ax
c000cb22:	83 ec 0c             	sub    esp,0xc
c000cb25:	50                   	push   eax
c000cb26:	e8 f1 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	0f b7 c0             	movzx  eax,ax
c000cb31:	83 e0 01             	and    eax,0x1
c000cb34:	74 26                	je     c000cb5c <tcp_receive+0x1100>
c000cb36:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cb3b:	83 c8 20             	or     eax,0x20
c000cb3e:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cb43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cb4a:	83 f8 04             	cmp    eax,0x4
c000cb4d:	75 0d                	jne    c000cb5c <tcp_receive+0x1100>
c000cb4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb53:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cb5a:	66 90                	xchg   ax,ax
c000cb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb60:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb66:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb6c:	83 ec 0c             	sub    esp,0xc
c000cb6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb73:	e8 94 d3 ff ff       	call   c0009f0c <tcp_seg_free>
c000cb78:	83 c4 10             	add    esp,0x10
c000cb7b:	90                   	nop
c000cb7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb80:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb86:	85 c0                	test   eax,eax
c000cb88:	74 22                	je     c000cbac <tcp_receive+0x1150>
c000cb8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb8e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb97:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb9e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cba1:	39 c2                	cmp    edx,eax
c000cba3:	0f 84 0b fe ff ff    	je     c000c9b4 <tcp_receive+0xf58>
c000cba9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbb0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbb3:	0f b6 c0             	movzx  eax,al
c000cbb6:	83 e0 01             	and    eax,0x1
c000cbb9:	74 2d                	je     c000cbe8 <tcp_receive+0x118c>
c000cbbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbbf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbc2:	83 e0 fe             	and    eax,0xfffffffe
c000cbc5:	88 c2                	mov    dl,al
c000cbc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbcb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbd5:	83 c8 02             	or     eax,0x2
c000cbd8:	88 c2                	mov    dl,al
c000cbda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbde:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbe1:	e9 2e 05 00 00       	jmp    c000d114 <tcp_receive+0x16b8>
c000cbe6:	66 90                	xchg   ax,ax
c000cbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbec:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbef:	83 c8 01             	or     eax,0x1
c000cbf2:	88 c2                	mov    dl,al
c000cbf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbfb:	e9 14 05 00 00       	jmp    c000d114 <tcp_receive+0x16b8>
c000cc00:	83 ec 0c             	sub    esp,0xc
c000cc03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc07:	e8 00 2f 00 00       	call   c000fb0c <tcp_send_empty_ack>
c000cc0c:	83 c4 10             	add    esp,0x10
c000cc0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc13:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc19:	85 c0                	test   eax,eax
c000cc1b:	75 23                	jne    c000cc40 <tcp_receive+0x11e4>
c000cc1d:	83 ec 0c             	sub    esp,0xc
c000cc20:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc25:	e8 7a d3 ff ff       	call   c0009fa4 <tcp_seg_copy>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	89 c2                	mov    edx,eax
c000cc2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc33:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc39:	e9 d6 04 00 00       	jmp    c000d114 <tcp_receive+0x16b8>
c000cc3e:	66 90                	xchg   ax,ax
c000cc40:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc56:	e9 2d 04 00 00       	jmp    c000d088 <tcp_receive+0x162c>
c000cc5b:	90                   	nop
c000cc5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc66:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cc6b:	39 c2                	cmp    edx,eax
c000cc6d:	75 75                	jne    c000cce4 <tcp_receive+0x1288>
c000cc6f:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cc75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc7c:	0f b7 d2             	movzx  edx,dx
c000cc7f:	0f b7 c0             	movzx  eax,ax
c000cc82:	39 c2                	cmp    edx,eax
c000cc84:	0f 86 0e 04 00 00    	jbe    c000d098 <tcp_receive+0x163c>
c000cc8a:	83 ec 0c             	sub    esp,0xc
c000cc8d:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc92:	e8 0d d3 ff ff       	call   c0009fa4 <tcp_seg_copy>
c000cc97:	83 c4 10             	add    esp,0x10
c000cc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc9e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cca3:	0f 84 f3 03 00 00    	je     c000d09c <tcp_receive+0x1640>
c000cca9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ccae:	74 0c                	je     c000ccbc <tcp_receive+0x1260>
c000ccb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccb8:	89 10                	mov    DWORD PTR [eax],edx
c000ccba:	eb 10                	jmp    c000cccc <tcp_receive+0x1270>
c000ccbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc4:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ccca:	66 90                	xchg   ax,ax
c000cccc:	83 ec 08             	sub    esp,0x8
c000cccf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccd7:	e8 10 ec ff ff       	call   c000b8ec <tcp_oos_insert_segment>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	e9 b8 03 00 00       	jmp    c000d09c <tcp_receive+0x1640>
c000cce4:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cce9:	75 61                	jne    c000cd4c <tcp_receive+0x12f0>
c000cceb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ccf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ccfb:	29 c2                	sub    edx,eax
c000ccfd:	89 d0                	mov    eax,edx
c000ccff:	0f 89 2b 01 00 00    	jns    c000ce30 <tcp_receive+0x13d4>
c000cd05:	83 ec 0c             	sub    esp,0xc
c000cd08:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd0d:	e8 92 d2 ff ff       	call   c0009fa4 <tcp_seg_copy>
c000cd12:	83 c4 10             	add    esp,0x10
c000cd15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd19:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd1e:	0f 84 7c 03 00 00    	je     c000d0a0 <tcp_receive+0x1644>
c000cd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd2c:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd32:	83 ec 08             	sub    esp,0x8
c000cd35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd3d:	e8 aa eb ff ff       	call   c000b8ec <tcp_oos_insert_segment>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	e9 56 03 00 00       	jmp    c000d0a0 <tcp_receive+0x1644>
c000cd4a:	66 90                	xchg   ax,ax
c000cd4c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd5c:	29 c2                	sub    edx,eax
c000cd5e:	89 d0                	mov    eax,edx
c000cd60:	83 e8 01             	sub    eax,0x1
c000cd63:	0f 88 c7 00 00 00    	js     c000ce30 <tcp_receive+0x13d4>
c000cd69:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd79:	29 c2                	sub    edx,eax
c000cd7b:	89 d0                	mov    eax,edx
c000cd7d:	83 c0 01             	add    eax,0x1
c000cd80:	85 c0                	test   eax,eax
c000cd82:	0f 8f a8 00 00 00    	jg     c000ce30 <tcp_receive+0x13d4>
c000cd88:	83 ec 0c             	sub    esp,0xc
c000cd8b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd90:	e8 0f d2 ff ff       	call   c0009fa4 <tcp_seg_copy>
c000cd95:	83 c4 10             	add    esp,0x10
c000cd98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cda1:	0f 84 fd 02 00 00    	je     c000d0a4 <tcp_receive+0x1648>
c000cda7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cdb8:	0f b7 c0             	movzx  eax,ax
c000cdbb:	01 c2                	add    edx,eax
c000cdbd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdc2:	29 c2                	sub    edx,eax
c000cdc4:	89 d0                	mov    eax,edx
c000cdc6:	85 c0                	test   eax,eax
c000cdc8:	7e 42                	jle    c000ce0c <tcp_receive+0x13b0>
c000cdca:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdcf:	89 c2                	mov    edx,eax
c000cdd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cddb:	89 d7                	mov    edi,edx
c000cddd:	29 c7                	sub    edi,eax
c000cddf:	89 f8                	mov    eax,edi
c000cde1:	89 c2                	mov    edx,eax
c000cde3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cde7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cdeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cdf2:	0f b7 d0             	movzx  edx,ax
c000cdf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdfc:	83 ec 08             	sub    esp,0x8
c000cdff:	52                   	push   edx
c000ce00:	50                   	push   eax
c000ce01:	e8 4e ba ff ff       	call   c0008854 <pbuf_realloc>
c000ce06:	83 c4 10             	add    esp,0x10
c000ce09:	8d 76 00             	lea    esi,[esi+0x0]
c000ce0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce14:	89 10                	mov    DWORD PTR [eax],edx
c000ce16:	83 ec 08             	sub    esp,0x8
c000ce19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce21:	e8 c6 ea ff ff       	call   c000b8ec <tcp_oos_insert_segment>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	e9 76 02 00 00       	jmp    c000d0a4 <tcp_receive+0x1648>
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce34:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce36:	85 c0                	test   eax,eax
c000ce38:	0f 85 36 02 00 00    	jne    c000d074 <tcp_receive+0x1618>
c000ce3e:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce4e:	29 c2                	sub    edx,eax
c000ce50:	89 d0                	mov    eax,edx
c000ce52:	85 c0                	test   eax,eax
c000ce54:	0f 8e 1a 02 00 00    	jle    c000d074 <tcp_receive+0x1618>
c000ce5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce61:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ce65:	0f b7 c0             	movzx  eax,ax
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	50                   	push   eax
c000ce6c:	e8 ab 3d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	0f b7 c0             	movzx  eax,ax
c000ce77:	83 e0 01             	and    eax,0x1
c000ce7a:	0f 85 28 02 00 00    	jne    c000d0a8 <tcp_receive+0x164c>
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce88:	e8 17 d1 ff ff       	call   c0009fa4 <tcp_seg_copy>
c000ce8d:	83 c4 10             	add    esp,0x10
c000ce90:	89 c2                	mov    edx,eax
c000ce92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce96:	89 10                	mov    DWORD PTR [eax],edx
c000ce98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce9e:	85 c0                	test   eax,eax
c000cea0:	0f 84 06 02 00 00    	je     c000d0ac <tcp_receive+0x1650>
c000cea6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cead:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ceb7:	0f b7 c0             	movzx  eax,ax
c000ceba:	01 c2                	add    edx,eax
c000cebc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cec1:	29 c2                	sub    edx,eax
c000cec3:	89 d0                	mov    eax,edx
c000cec5:	85 c0                	test   eax,eax
c000cec7:	7e 3f                	jle    c000cf08 <tcp_receive+0x14ac>
c000cec9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cece:	89 c2                	mov    edx,eax
c000ced0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ced4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ced7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ceda:	89 d6                	mov    esi,edx
c000cedc:	29 c6                	sub    esi,eax
c000cede:	89 f0                	mov    eax,esi
c000cee0:	89 c2                	mov    edx,eax
c000cee2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee6:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ceea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cef1:	0f b7 d0             	movzx  edx,ax
c000cef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cefb:	83 ec 08             	sub    esp,0x8
c000cefe:	52                   	push   edx
c000ceff:	50                   	push   eax
c000cf00:	e8 4f b9 ff ff       	call   c0008854 <pbuf_realloc>
c000cf05:	83 c4 10             	add    esp,0x10
c000cf08:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cf0e:	0f b7 d0             	movzx  edx,ax
c000cf11:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf16:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cf19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf1d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cf20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf24:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf27:	0f b7 c0             	movzx  eax,ax
c000cf2a:	01 d0                	add    eax,edx
c000cf2c:	39 c1                	cmp    ecx,eax
c000cf2e:	0f 86 78 01 00 00    	jbe    c000d0ac <tcp_receive+0x1650>
c000cf34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf38:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf41:	0f b7 c0             	movzx  eax,ax
c000cf44:	83 ec 0c             	sub    esp,0xc
c000cf47:	50                   	push   eax
c000cf48:	e8 cf 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf4d:	83 c4 10             	add    esp,0x10
c000cf50:	0f b7 c0             	movzx  eax,ax
c000cf53:	83 e0 01             	and    eax,0x1
c000cf56:	74 54                	je     c000cfac <tcp_receive+0x1550>
c000cf58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf61:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf65:	80 e4 c0             	and    ah,0xc0
c000cf68:	89 c3                	mov    ebx,eax
c000cf6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf73:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf77:	0f b7 c0             	movzx  eax,ax
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	50                   	push   eax
c000cf7e:	e8 99 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	0f b7 c0             	movzx  eax,ax
c000cf89:	83 e0 3e             	and    eax,0x3e
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	50                   	push   eax
c000cf90:	e8 87 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	09 d8                	or     eax,ebx
c000cf9a:	89 c2                	mov    edx,eax
c000cf9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfa5:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000cfa9:	8d 76 00             	lea    esi,[esi+0x0]
c000cfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfb0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cfb3:	89 c2                	mov    edx,eax
c000cfb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfb9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfbc:	01 d0                	add    eax,edx
c000cfbe:	89 c1                	mov    ecx,eax
c000cfc0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfc5:	89 c2                	mov    edx,eax
c000cfc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfcd:	89 cf                	mov    edi,ecx
c000cfcf:	29 d7                	sub    edi,edx
c000cfd1:	89 fa                	mov    edx,edi
c000cfd3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cfd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfdd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cfe0:	0f b7 d0             	movzx  edx,ax
c000cfe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfe7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfec:	83 ec 08             	sub    esp,0x8
c000cfef:	52                   	push   edx
c000cff0:	50                   	push   eax
c000cff1:	e8 5e b8 ff ff       	call   c0008854 <pbuf_realloc>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cffd:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfff:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d006:	8b 00                	mov    eax,DWORD PTR [eax]
c000d008:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d00b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d00f:	0f b7 c0             	movzx  eax,ax
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	50                   	push   eax
c000d016:	e8 01 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d01b:	83 c4 10             	add    esp,0x10
c000d01e:	0f b7 c0             	movzx  eax,ax
c000d021:	83 e0 03             	and    eax,0x3
c000d024:	0f 95 c0             	setne  al
c000d027:	0f b6 c0             	movzx  eax,al
c000d02a:	01 d8                	add    eax,ebx
c000d02c:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d032:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d038:	0f b7 d0             	movzx  edx,ax
c000d03b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d040:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d043:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d047:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d04a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d04e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d051:	0f b7 c0             	movzx  eax,ax
c000d054:	01 d0                	add    eax,edx
c000d056:	39 c1                	cmp    ecx,eax
c000d058:	74 52                	je     c000d0ac <tcp_receive+0x1650>
c000d05a:	83 ec 08             	sub    esp,0x8
c000d05d:	68 74 00 03 c0       	push   0xc0030074
c000d062:	68 e6 f6 02 c0       	push   0xc002f6e6
c000d067:	e8 50 29 01 00       	call   c001f9bc <CPrintf>
c000d06c:	83 c4 10             	add    esp,0x10
c000d06f:	eb 3b                	jmp    c000d0ac <tcp_receive+0x1650>
c000d071:	8d 76 00             	lea    esi,[esi+0x0]
c000d074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d078:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d07c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d080:	8b 00                	mov    eax,DWORD PTR [eax]
c000d082:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d086:	66 90                	xchg   ax,ax
c000d088:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d08d:	0f 85 c9 fb ff ff    	jne    c000cc5c <tcp_receive+0x1200>
c000d093:	eb 7f                	jmp    c000d114 <tcp_receive+0x16b8>
c000d095:	8d 76 00             	lea    esi,[esi+0x0]
c000d098:	90                   	nop
c000d099:	eb 79                	jmp    c000d114 <tcp_receive+0x16b8>
c000d09b:	90                   	nop
c000d09c:	90                   	nop
c000d09d:	eb 75                	jmp    c000d114 <tcp_receive+0x16b8>
c000d09f:	90                   	nop
c000d0a0:	90                   	nop
c000d0a1:	eb 71                	jmp    c000d114 <tcp_receive+0x16b8>
c000d0a3:	90                   	nop
c000d0a4:	90                   	nop
c000d0a5:	eb 6d                	jmp    c000d114 <tcp_receive+0x16b8>
c000d0a7:	90                   	nop
c000d0a8:	90                   	nop
c000d0a9:	eb 69                	jmp    c000d114 <tcp_receive+0x16b8>
c000d0ab:	90                   	nop
c000d0ac:	90                   	nop
c000d0ad:	eb 65                	jmp    c000d114 <tcp_receive+0x16b8>
c000d0af:	90                   	nop
c000d0b0:	83 ec 0c             	sub    esp,0xc
c000d0b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0b7:	e8 50 2a 00 00       	call   c000fb0c <tcp_send_empty_ack>
c000d0bc:	83 c4 10             	add    esp,0x10
c000d0bf:	eb 53                	jmp    c000d114 <tcp_receive+0x16b8>
c000d0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0c4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d0d1:	29 c2                	sub    edx,eax
c000d0d3:	89 d0                	mov    eax,edx
c000d0d5:	78 25                	js     c000d0fc <tcp_receive+0x16a0>
c000d0d7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d0e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0eb:	0f b7 c0             	movzx  eax,ax
c000d0ee:	01 c8                	add    eax,ecx
c000d0f0:	29 c2                	sub    edx,eax
c000d0f2:	89 d0                	mov    eax,edx
c000d0f4:	83 c0 01             	add    eax,0x1
c000d0f7:	85 c0                	test   eax,eax
c000d0f9:	7e 19                	jle    c000d114 <tcp_receive+0x16b8>
c000d0fb:	90                   	nop
c000d0fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d100:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d103:	83 c8 02             	or     eax,0x2
c000d106:	88 c2                	mov    dl,al
c000d108:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d10c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d10f:	eb 03                	jmp    c000d114 <tcp_receive+0x16b8>
c000d111:	8d 76 00             	lea    esi,[esi+0x0]
c000d114:	90                   	nop
c000d115:	83 c4 30             	add    esp,0x30
c000d118:	5b                   	pop    ebx
c000d119:	5e                   	pop    esi
c000d11a:	5f                   	pop    edi
c000d11b:	c3                   	ret    

c000d11c <tcp_parseopt>:
c000d11c:	83 ec 1c             	sub    esp,0x1c
c000d11f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d124:	83 c0 14             	add    eax,0x14
c000d127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d12b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d130:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d134:	0f b7 c0             	movzx  eax,ax
c000d137:	83 ec 0c             	sub    esp,0xc
c000d13a:	50                   	push   eax
c000d13b:	e8 dc 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d140:	83 c4 10             	add    esp,0x10
c000d143:	0f b7 c0             	movzx  eax,ax
c000d146:	c1 e8 0c             	shr    eax,0xc
c000d149:	0f b7 c0             	movzx  eax,ax
c000d14c:	83 f8 05             	cmp    eax,0x5
c000d14f:	0f 86 6f 01 00 00    	jbe    c000d2c4 <tcp_parseopt+0x1a8>
c000d155:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d15a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d15e:	0f b7 c0             	movzx  eax,ax
c000d161:	83 ec 0c             	sub    esp,0xc
c000d164:	50                   	push   eax
c000d165:	e8 b2 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d16a:	83 c4 10             	add    esp,0x10
c000d16d:	0f b7 c0             	movzx  eax,ax
c000d170:	c1 e8 0c             	shr    eax,0xc
c000d173:	83 e8 05             	sub    eax,0x5
c000d176:	c1 e0 02             	shl    eax,0x2
c000d179:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d17e:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d185:	e9 1e 01 00 00       	jmp    c000d2a8 <tcp_parseopt+0x18c>
c000d18a:	66 90                	xchg   ax,ax
c000d18c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d191:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d195:	01 d0                	add    eax,edx
c000d197:	8a 00                	mov    al,BYTE PTR [eax]
c000d199:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d19d:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d1a2:	83 f8 01             	cmp    eax,0x1
c000d1a5:	74 15                	je     c000d1bc <tcp_parseopt+0xa0>
c000d1a7:	83 f8 02             	cmp    eax,0x2
c000d1aa:	74 24                	je     c000d1d0 <tcp_parseopt+0xb4>
c000d1ac:	85 c0                	test   eax,eax
c000d1ae:	0f 85 bc 00 00 00    	jne    c000d270 <tcp_parseopt+0x154>
c000d1b4:	e9 0b 01 00 00       	jmp    c000d2c4 <tcp_parseopt+0x1a8>
c000d1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1bc:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d1c1:	83 c0 01             	add    eax,0x1
c000d1c4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d1c9:	e9 da 00 00 00       	jmp    c000d2a8 <tcp_parseopt+0x18c>
c000d1ce:	66 90                	xchg   ax,ax
c000d1d0:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1d5:	8d 50 01             	lea    edx,[eax+0x1]
c000d1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1dc:	01 d0                	add    eax,edx
c000d1de:	8a 00                	mov    al,BYTE PTR [eax]
c000d1e0:	0f b6 c0             	movzx  eax,al
c000d1e3:	83 f8 04             	cmp    eax,0x4
c000d1e6:	0f 85 d0 00 00 00    	jne    c000d2bc <tcp_parseopt+0x1a0>
c000d1ec:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1f1:	8d 50 03             	lea    edx,[eax+0x3]
c000d1f4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d1f9:	39 c2                	cmp    edx,eax
c000d1fb:	0f 8d bb 00 00 00    	jge    c000d2bc <tcp_parseopt+0x1a0>
c000d201:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d206:	8d 50 02             	lea    edx,[eax+0x2]
c000d209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d20d:	01 d0                	add    eax,edx
c000d20f:	8a 00                	mov    al,BYTE PTR [eax]
c000d211:	0f b6 c0             	movzx  eax,al
c000d214:	c1 e0 08             	shl    eax,0x8
c000d217:	89 c2                	mov    edx,eax
c000d219:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d21e:	8d 48 03             	lea    ecx,[eax+0x3]
c000d221:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d225:	01 c8                	add    eax,ecx
c000d227:	8a 00                	mov    al,BYTE PTR [eax]
c000d229:	0f b6 c0             	movzx  eax,al
c000d22c:	09 d0                	or     eax,edx
c000d22e:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d233:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d238:	3d 18 02 00 00       	cmp    eax,0x218
c000d23d:	77 11                	ja     c000d250 <tcp_parseopt+0x134>
c000d23f:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d244:	85 c0                	test   eax,eax
c000d246:	74 08                	je     c000d250 <tcp_parseopt+0x134>
c000d248:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d24d:	eb 09                	jmp    c000d258 <tcp_parseopt+0x13c>
c000d24f:	90                   	nop
c000d250:	b8 18 02 00 00       	mov    eax,0x218
c000d255:	8d 76 00             	lea    esi,[esi+0x0]
c000d258:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d25c:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d260:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d265:	83 c0 04             	add    eax,0x4
c000d268:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d26d:	eb 39                	jmp    c000d2a8 <tcp_parseopt+0x18c>
c000d26f:	90                   	nop
c000d270:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d275:	8d 50 01             	lea    edx,[eax+0x1]
c000d278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d27c:	01 d0                	add    eax,edx
c000d27e:	8a 00                	mov    al,BYTE PTR [eax]
c000d280:	0f b6 c0             	movzx  eax,al
c000d283:	85 c0                	test   eax,eax
c000d285:	74 39                	je     c000d2c0 <tcp_parseopt+0x1a4>
c000d287:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d28c:	8d 50 01             	lea    edx,[eax+0x1]
c000d28f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d293:	01 d0                	add    eax,edx
c000d295:	8a 00                	mov    al,BYTE PTR [eax]
c000d297:	0f b6 c0             	movzx  eax,al
c000d29a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d29f:	01 d0                	add    eax,edx
c000d2a1:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2a6:	66 90                	xchg   ax,ax
c000d2a8:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d2ad:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d2b2:	39 c2                	cmp    edx,eax
c000d2b4:	0f 82 d2 fe ff ff    	jb     c000d18c <tcp_parseopt+0x70>
c000d2ba:	eb 08                	jmp    c000d2c4 <tcp_parseopt+0x1a8>
c000d2bc:	90                   	nop
c000d2bd:	eb 05                	jmp    c000d2c4 <tcp_parseopt+0x1a8>
c000d2bf:	90                   	nop
c000d2c0:	90                   	nop
c000d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c4:	83 c4 1c             	add    esp,0x1c
c000d2c7:	c3                   	ret    

c000d2c8 <tcp_listen_input>:
c000d2c8:	53                   	push   ebx
c000d2c9:	83 ec 18             	sub    esp,0x18
c000d2cc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d2d1:	0f b6 c0             	movzx  eax,al
c000d2d4:	83 e0 10             	and    eax,0x10
c000d2d7:	74 53                	je     c000d32c <tcp_listen_input+0x64>
c000d2d9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2de:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d2e1:	0f b7 d0             	movzx  edx,ax
c000d2e4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2e9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d2ed:	0f b7 c0             	movzx  eax,ax
c000d2f0:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d2f7:	0f b7 d9             	movzx  ebx,cx
c000d2fa:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d300:	01 cb                	add    ebx,ecx
c000d302:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d308:	83 c1 01             	add    ecx,0x1
c000d30b:	83 ec 08             	sub    esp,0x8
c000d30e:	52                   	push   edx
c000d30f:	50                   	push   eax
c000d310:	68 90 68 03 c0       	push   0xc0036890
c000d315:	68 98 68 03 c0       	push   0xc0036898
c000d31a:	53                   	push   ebx
c000d31b:	51                   	push   ecx
c000d31c:	e8 8b 2f 00 00       	call   c00102ac <tcp_rst>
c000d321:	83 c4 20             	add    esp,0x20
c000d324:	e9 a7 01 00 00       	jmp    c000d4d0 <tcp_listen_input+0x208>
c000d329:	8d 76 00             	lea    esi,[esi+0x0]
c000d32c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d331:	0f b6 c0             	movzx  eax,al
c000d334:	83 e0 02             	and    eax,0x2
c000d337:	0f 84 93 01 00 00    	je     c000d4d0 <tcp_listen_input+0x208>
c000d33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d341:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d344:	0f b6 c0             	movzx  eax,al
c000d347:	83 ec 0c             	sub    esp,0xc
c000d34a:	50                   	push   eax
c000d34b:	e8 e0 df ff ff       	call   c000b330 <tcp_alloc>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d357:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d35c:	75 16                	jne    c000d374 <tcp_listen_input+0xac>
c000d35e:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d364:	83 c0 01             	add    eax,0x1
c000d367:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d36d:	b0 ff                	mov    al,0xff
c000d36f:	e9 60 01 00 00       	jmp    c000d4d4 <tcp_listen_input+0x20c>
c000d374:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d37a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d37e:	89 10                	mov    DWORD PTR [eax],edx
c000d380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d384:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d387:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d38b:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d38f:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d399:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d39c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3a1:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d3a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3a8:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b0:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d3b7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d3bc:	8d 50 01             	lea    edx,[eax+0x1]
c000d3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3c3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d3c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ca:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d3cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d3d4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3d9:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d3dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3e1:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d3e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3e9:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d3ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3f0:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d3f4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d3f9:	8d 50 ff             	lea    edx,[eax-0x1]
c000d3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d400:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d407:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d40a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d40e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d415:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d41f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d423:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d426:	83 e0 8c             	and    eax,0xffffff8c
c000d429:	88 c2                	mov    dl,al
c000d42b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d42f:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d432:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d43c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d443:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d448:	e8 7b 36 00 00       	call   c0010ac8 <tcp_timer_needed>
c000d44d:	83 ec 0c             	sub    esp,0xc
c000d450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d454:	e8 c3 fc ff ff       	call   c000d11c <tcp_parseopt>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d460:	8d 50 04             	lea    edx,[eax+0x4]
c000d463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d467:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d46a:	0f b7 c0             	movzx  eax,ax
c000d46d:	83 ec 08             	sub    esp,0x8
c000d470:	52                   	push   edx
c000d471:	50                   	push   eax
c000d472:	e8 79 e0 ff ff       	call   c000b4f0 <tcp_eff_send_mss>
c000d477:	83 c4 10             	add    esp,0x10
c000d47a:	89 c2                	mov    edx,eax
c000d47c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d480:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d484:	83 ec 08             	sub    esp,0x8
c000d487:	6a 12                	push   0x12
c000d489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d48d:	e8 ee 22 00 00       	call   c000f780 <tcp_enqueue_flags>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d499:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d49e:	85 c0                	test   eax,eax
c000d4a0:	74 1a                	je     c000d4bc <tcp_listen_input+0x1f4>
c000d4a2:	83 ec 08             	sub    esp,0x8
c000d4a5:	6a 00                	push   0x0
c000d4a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4ab:	e8 68 db ff ff       	call   c000b018 <tcp_abandon>
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d4b7:	eb 1b                	jmp    c000d4d4 <tcp_listen_input+0x20c>
c000d4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4bc:	83 ec 0c             	sub    esp,0xc
c000d4bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c3:	e8 58 29 00 00       	call   c000fe20 <tcp_output>
c000d4c8:	83 c4 10             	add    esp,0x10
c000d4cb:	eb 07                	jmp    c000d4d4 <tcp_listen_input+0x20c>
c000d4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d4d0:	b0 00                	mov    al,0x0
c000d4d2:	66 90                	xchg   ax,ax
c000d4d4:	83 c4 18             	add    esp,0x18
c000d4d7:	5b                   	pop    ebx
c000d4d8:	c3                   	ret    
c000d4d9:	8d 76 00             	lea    esi,[esi+0x0]

c000d4dc <tcp_process>:
c000d4dc:	53                   	push   ebx
c000d4dd:	83 ec 18             	sub    esp,0x18
c000d4e0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d4e5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d4ea:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d4ef:	0f b6 c0             	movzx  eax,al
c000d4f2:	83 e0 04             	and    eax,0x4
c000d4f5:	0f 84 bd 00 00 00    	je     c000d5b8 <tcp_process+0xdc>
c000d4fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d502:	83 f8 02             	cmp    eax,0x2
c000d505:	75 19                	jne    c000d520 <tcp_process+0x44>
c000d507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d50e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d513:	39 c2                	cmp    edx,eax
c000d515:	75 45                	jne    c000d55c <tcp_process+0x80>
c000d517:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d51c:	eb 3e                	jmp    c000d55c <tcp_process+0x80>
c000d51e:	66 90                	xchg   ax,ax
c000d520:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d52d:	29 c2                	sub    edx,eax
c000d52f:	89 d0                	mov    eax,edx
c000d531:	78 29                	js     c000d55c <tcp_process+0x80>
c000d533:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d544:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d547:	0f b7 c0             	movzx  eax,ax
c000d54a:	01 c8                	add    eax,ecx
c000d54c:	29 c2                	sub    edx,eax
c000d54e:	89 d0                	mov    eax,edx
c000d550:	85 c0                	test   eax,eax
c000d552:	7f 08                	jg     c000d55c <tcp_process+0x80>
c000d554:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d559:	8d 76 00             	lea    esi,[esi+0x0]
c000d55c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d561:	85 c0                	test   eax,eax
c000d563:	74 4b                	je     c000d5b0 <tcp_process+0xd4>
c000d565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d569:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d56c:	85 c0                	test   eax,eax
c000d56e:	75 18                	jne    c000d588 <tcp_process+0xac>
c000d570:	83 ec 08             	sub    esp,0x8
c000d573:	68 30 01 03 c0       	push   0xc0030130
c000d578:	68 e6 f6 02 c0       	push   0xc002f6e6
c000d57d:	e8 3a 24 01 00       	call   c001f9bc <CPrintf>
c000d582:	83 c4 10             	add    esp,0x10
c000d585:	8d 76 00             	lea    esi,[esi+0x0]
c000d588:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d58d:	83 c8 08             	or     eax,0x8
c000d590:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d599:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d59c:	83 e0 fe             	and    eax,0xfffffffe
c000d59f:	88 c2                	mov    dl,al
c000d5a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5a8:	b0 f5                	mov    al,0xf5
c000d5aa:	e9 c9 08 00 00       	jmp    c000de78 <tcp_process+0x99c>
c000d5af:	90                   	nop
c000d5b0:	b0 00                	mov    al,0x0
c000d5b2:	e9 c1 08 00 00       	jmp    c000de78 <tcp_process+0x99c>
c000d5b7:	90                   	nop
c000d5b8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5bd:	0f b6 c0             	movzx  eax,al
c000d5c0:	83 e0 02             	and    eax,0x2
c000d5c3:	74 33                	je     c000d5f8 <tcp_process+0x11c>
c000d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5cc:	83 f8 02             	cmp    eax,0x2
c000d5cf:	74 27                	je     c000d5f8 <tcp_process+0x11c>
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5d8:	83 f8 03             	cmp    eax,0x3
c000d5db:	74 1b                	je     c000d5f8 <tcp_process+0x11c>
c000d5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5e4:	83 c8 02             	or     eax,0x2
c000d5e7:	88 c2                	mov    dl,al
c000d5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ed:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5f0:	b0 00                	mov    al,0x0
c000d5f2:	e9 81 08 00 00       	jmp    c000de78 <tcp_process+0x99c>
c000d5f7:	90                   	nop
c000d5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5ff:	0f b6 c0             	movzx  eax,al
c000d602:	83 e0 10             	and    eax,0x10
c000d605:	75 0d                	jne    c000d614 <tcp_process+0x138>
c000d607:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d611:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d618:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d61f:	83 ec 0c             	sub    esp,0xc
c000d622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d626:	e8 f1 fa ff ff       	call   c000d11c <tcp_parseopt>
c000d62b:	83 c4 10             	add    esp,0x10
c000d62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d632:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d635:	83 f8 09             	cmp    eax,0x9
c000d638:	0f 87 16 08 00 00    	ja     c000de54 <tcp_process+0x978>
c000d63e:	8b 04 85 d8 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd28]
c000d645:	ff e0                	jmp    eax
c000d647:	90                   	nop
c000d648:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d64d:	0f b6 c0             	movzx  eax,al
c000d650:	83 e0 10             	and    eax,0x10
c000d653:	0f 84 07 02 00 00    	je     c000d860 <tcp_process+0x384>
c000d659:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d65e:	0f b6 c0             	movzx  eax,al
c000d661:	83 e0 02             	and    eax,0x2
c000d664:	0f 84 f6 01 00 00    	je     c000d860 <tcp_process+0x384>
c000d66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d671:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d677:	83 ec 0c             	sub    esp,0xc
c000d67a:	50                   	push   eax
c000d67b:	e8 c0 35 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d680:	83 c4 10             	add    esp,0x10
c000d683:	8d 50 01             	lea    edx,[eax+0x1]
c000d686:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d68b:	39 c2                	cmp    edx,eax
c000d68d:	0f 85 cd 01 00 00    	jne    c000d860 <tcp_process+0x384>
c000d693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d697:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d69b:	83 c0 01             	add    eax,0x1
c000d69e:	89 c2                	mov    edx,eax
c000d6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a4:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d6a8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d6ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6bb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d6c5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d6cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6cf:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d6d2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d6d7:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d6db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6df:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d6e3:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d6e8:	8d 50 ff             	lea    edx,[eax-0x1]
c000d6eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ef:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d701:	8d 50 04             	lea    edx,[eax+0x4]
c000d704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d708:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d70b:	0f b7 c0             	movzx  eax,ax
c000d70e:	83 ec 08             	sub    esp,0x8
c000d711:	52                   	push   edx
c000d712:	50                   	push   eax
c000d713:	e8 d8 dd ff ff       	call   c000b4f0 <tcp_eff_send_mss>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	89 c2                	mov    edx,eax
c000d71d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d721:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d729:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d72c:	89 c2                	mov    edx,eax
c000d72e:	c1 e2 02             	shl    edx,0x2
c000d731:	01 d0                	add    eax,edx
c000d733:	d1 e0                	shl    eax,1
c000d735:	89 c2                	mov    edx,eax
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d743:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d747:	0f b7 c0             	movzx  eax,ax
c000d74a:	83 f8 01             	cmp    eax,0x1
c000d74d:	75 0d                	jne    c000d75c <tcp_process+0x280>
c000d74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d753:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d756:	d1 e0                	shl    eax,1
c000d758:	eb 0a                	jmp    c000d764 <tcp_process+0x288>
c000d75a:	66 90                	xchg   ax,ax
c000d75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d763:	90                   	nop
c000d764:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d768:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d770:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d773:	0f b7 c0             	movzx  eax,ax
c000d776:	85 c0                	test   eax,eax
c000d778:	75 16                	jne    c000d790 <tcp_process+0x2b4>
c000d77a:	83 ec 08             	sub    esp,0x8
c000d77d:	68 93 02 03 c0       	push   0xc0030293
c000d782:	68 e6 f6 02 c0       	push   0xc002f6e6
c000d787:	e8 30 22 01 00       	call   c001f9bc <CPrintf>
c000d78c:	83 c4 10             	add    esp,0x10
c000d78f:	90                   	nop
c000d790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d794:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d797:	83 e8 01             	sub    eax,0x1
c000d79a:	89 c2                	mov    edx,eax
c000d79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a0:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000d7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d7ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d7b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b9:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d7c3:	85 c0                	test   eax,eax
c000d7c5:	75 0d                	jne    c000d7d4 <tcp_process+0x2f8>
c000d7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cb:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d7d1:	eb 15                	jmp    c000d7e8 <tcp_process+0x30c>
c000d7d3:	90                   	nop
c000d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d8:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e2:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d7e6:	66 90                	xchg   ax,ax
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ef:	e8 18 c7 ff ff       	call   c0009f0c <tcp_seg_free>
c000d7f4:	83 c4 10             	add    esp,0x10
c000d7f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fb:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d801:	85 c0                	test   eax,eax
c000d803:	74 27                	je     c000d82c <tcp_process+0x350>
c000d805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d809:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d80f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d813:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d816:	83 ec 04             	sub    esp,0x4
c000d819:	6a 00                	push   0x0
c000d81b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d81f:	52                   	push   edx
c000d820:	ff d0                	call   eax
c000d822:	83 c4 10             	add    esp,0x10
c000d825:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d829:	eb 09                	jmp    c000d834 <tcp_process+0x358>
c000d82b:	90                   	nop
c000d82c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d831:	8d 76 00             	lea    esi,[esi+0x0]
c000d834:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d839:	83 f8 f6             	cmp    eax,0xfffffff6
c000d83c:	75 0a                	jne    c000d848 <tcp_process+0x36c>
c000d83e:	b0 f6                	mov    al,0xf6
c000d840:	e9 33 06 00 00       	jmp    c000de78 <tcp_process+0x99c>
c000d845:	8d 76 00             	lea    esi,[esi+0x0]
c000d848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d84f:	83 c8 02             	or     eax,0x2
c000d852:	88 c2                	mov    dl,al
c000d854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d858:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d85b:	e9 f8 05 00 00       	jmp    c000de58 <tcp_process+0x97c>
c000d860:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d865:	0f b6 c0             	movzx  eax,al
c000d868:	83 e0 10             	and    eax,0x10
c000d86b:	0f 84 e7 05 00 00    	je     c000de58 <tcp_process+0x97c>
c000d871:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d876:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d879:	0f b7 c8             	movzx  ecx,ax
c000d87c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d881:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d885:	0f b7 d0             	movzx  edx,ax
c000d888:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d88e:	0f b7 d8             	movzx  ebx,ax
c000d891:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d896:	01 c3                	add    ebx,eax
c000d898:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d89d:	83 ec 08             	sub    esp,0x8
c000d8a0:	51                   	push   ecx
c000d8a1:	52                   	push   edx
c000d8a2:	68 90 68 03 c0       	push   0xc0036890
c000d8a7:	68 98 68 03 c0       	push   0xc0036898
c000d8ac:	53                   	push   ebx
c000d8ad:	50                   	push   eax
c000d8ae:	e8 f9 29 00 00       	call   c00102ac <tcp_rst>
c000d8b3:	83 c4 20             	add    esp,0x20
c000d8b6:	e9 9d 05 00 00       	jmp    c000de58 <tcp_process+0x97c>
c000d8bb:	90                   	nop
c000d8bc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8c1:	0f b6 c0             	movzx  eax,al
c000d8c4:	83 e0 10             	and    eax,0x10
c000d8c7:	0f 84 ab 01 00 00    	je     c000da78 <tcp_process+0x59c>
c000d8cd:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8d7:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d8da:	29 c2                	sub    edx,eax
c000d8dc:	89 d0                	mov    eax,edx
c000d8de:	83 e8 01             	sub    eax,0x1
c000d8e1:	0f 88 45 01 00 00    	js     c000da2c <tcp_process+0x550>
c000d8e7:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f1:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d8f4:	29 c2                	sub    edx,eax
c000d8f6:	89 d0                	mov    eax,edx
c000d8f8:	85 c0                	test   eax,eax
c000d8fa:	0f 8f 2c 01 00 00    	jg     c000da2c <tcp_process+0x550>
c000d900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d904:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d912:	85 c0                	test   eax,eax
c000d914:	75 16                	jne    c000d92c <tcp_process+0x450>
c000d916:	83 ec 08             	sub    esp,0x8
c000d919:	68 a9 02 03 c0       	push   0xc00302a9
c000d91e:	68 e6 f6 02 c0       	push   0xc002f6e6
c000d923:	e8 94 20 01 00       	call   c001f9bc <CPrintf>
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	90                   	nop
c000d92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d930:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d933:	85 c0                	test   eax,eax
c000d935:	74 25                	je     c000d95c <tcp_process+0x480>
c000d937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d93e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d942:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d945:	83 ec 04             	sub    esp,0x4
c000d948:	6a 00                	push   0x0
c000d94a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d94e:	52                   	push   edx
c000d94f:	ff d0                	call   eax
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d958:	eb 0a                	jmp    c000d964 <tcp_process+0x488>
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d961:	8d 76 00             	lea    esi,[esi+0x0]
c000d964:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d969:	85 c0                	test   eax,eax
c000d96b:	74 23                	je     c000d990 <tcp_process+0x4b4>
c000d96d:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d972:	83 f8 f6             	cmp    eax,0xfffffff6
c000d975:	74 11                	je     c000d988 <tcp_process+0x4ac>
c000d977:	83 ec 0c             	sub    esp,0xc
c000d97a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d97e:	e8 29 d8 ff ff       	call   c000b1ac <tcp_abort>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	66 90                	xchg   ax,ax
c000d988:	b0 f6                	mov    al,0xf6
c000d98a:	e9 e9 04 00 00       	jmp    c000de78 <tcp_process+0x99c>
c000d98f:	90                   	nop
c000d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d994:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d998:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d99d:	83 ec 0c             	sub    esp,0xc
c000d9a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9a4:	e8 b3 e0 ff ff       	call   c000ba5c <tcp_receive>
c000d9a9:	83 c4 10             	add    esp,0x10
c000d9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d9b3:	0f b7 c0             	movzx  eax,ax
c000d9b6:	85 c0                	test   eax,eax
c000d9b8:	74 16                	je     c000d9d0 <tcp_process+0x4f4>
c000d9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9be:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d9c1:	83 e8 01             	sub    eax,0x1
c000d9c4:	89 c2                	mov    edx,eax
c000d9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ca:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000d9ce:	66 90                	xchg   ax,ax
c000d9d0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d9d5:	83 f8 01             	cmp    eax,0x1
c000d9d8:	75 0e                	jne    c000d9e8 <tcp_process+0x50c>
c000d9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9e1:	d1 e0                	shl    eax,1
c000d9e3:	eb 0b                	jmp    c000d9f0 <tcp_process+0x514>
c000d9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ef:	90                   	nop
c000d9f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9f4:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d9f8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d9fd:	0f b6 c0             	movzx  eax,al
c000da00:	83 e0 20             	and    eax,0x20
c000da03:	0f 84 ab 00 00 00    	je     c000dab4 <tcp_process+0x5d8>
c000da09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da10:	83 c8 02             	or     eax,0x2
c000da13:	88 c2                	mov    dl,al
c000da15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da19:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da20:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000da27:	e9 88 00 00 00       	jmp    c000dab4 <tcp_process+0x5d8>
c000da2c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da31:	66 8b 00             	mov    ax,WORD PTR [eax]
c000da34:	0f b7 c8             	movzx  ecx,ax
c000da37:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000da40:	0f b7 d0             	movzx  edx,ax
c000da43:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000da49:	0f b7 d8             	movzx  ebx,ax
c000da4c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da51:	01 c3                	add    ebx,eax
c000da53:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000da58:	83 ec 08             	sub    esp,0x8
c000da5b:	51                   	push   ecx
c000da5c:	52                   	push   edx
c000da5d:	68 90 68 03 c0       	push   0xc0036890
c000da62:	68 98 68 03 c0       	push   0xc0036898
c000da67:	53                   	push   ebx
c000da68:	50                   	push   eax
c000da69:	e8 3e 28 00 00       	call   c00102ac <tcp_rst>
c000da6e:	83 c4 20             	add    esp,0x20
c000da71:	e9 e6 03 00 00       	jmp    c000de5c <tcp_process+0x980>
c000da76:	66 90                	xchg   ax,ax
c000da78:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da7d:	0f b6 c0             	movzx  eax,al
c000da80:	83 e0 02             	and    eax,0x2
c000da83:	0f 84 d3 03 00 00    	je     c000de5c <tcp_process+0x980>
c000da89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000da90:	8d 50 ff             	lea    edx,[eax-0x1]
c000da93:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da98:	39 c2                	cmp    edx,eax
c000da9a:	0f 85 bc 03 00 00    	jne    c000de5c <tcp_process+0x980>
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa7:	e8 0c 2a 00 00       	call   c00104b8 <tcp_rexmit>
c000daac:	83 c4 10             	add    esp,0x10
c000daaf:	e9 a8 03 00 00       	jmp    c000de5c <tcp_process+0x980>
c000dab4:	90                   	nop
c000dab5:	e9 a2 03 00 00       	jmp    c000de5c <tcp_process+0x980>
c000daba:	66 90                	xchg   ax,ax
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac3:	e8 94 df ff ff       	call   c000ba5c <tcp_receive>
c000dac8:	83 c4 10             	add    esp,0x10
c000dacb:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dad0:	0f b6 c0             	movzx  eax,al
c000dad3:	83 e0 20             	and    eax,0x20
c000dad6:	0f 84 84 03 00 00    	je     c000de60 <tcp_process+0x984>
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dae3:	83 c8 02             	or     eax,0x2
c000dae6:	88 c2                	mov    dl,al
c000dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf3:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dafa:	e9 61 03 00 00       	jmp    c000de60 <tcp_process+0x984>
c000daff:	90                   	nop
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db07:	e8 50 df ff ff       	call   c000ba5c <tcp_receive>
c000db0c:	83 c4 10             	add    esp,0x10
c000db0f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db14:	0f b6 c0             	movzx  eax,al
c000db17:	83 e0 20             	and    eax,0x20
c000db1a:	0f 84 08 01 00 00    	je     c000dc28 <tcp_process+0x74c>
c000db20:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db25:	0f b6 c0             	movzx  eax,al
c000db28:	83 e0 10             	and    eax,0x10
c000db2b:	0f 84 d3 00 00 00    	je     c000dc04 <tcp_process+0x728>
c000db31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db35:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000db38:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db3d:	39 c2                	cmp    edx,eax
c000db3f:	0f 85 bf 00 00 00    	jne    c000dc04 <tcp_process+0x728>
c000db45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db49:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db4c:	83 c8 02             	or     eax,0x2
c000db4f:	88 c2                	mov    dl,al
c000db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db55:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db58:	83 ec 0c             	sub    esp,0xc
c000db5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5f:	e8 0c c5 ff ff       	call   c000a070 <tcp_pcb_purge>
c000db64:	83 c4 10             	add    esp,0x10
c000db67:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db6c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db70:	75 12                	jne    c000db84 <tcp_process+0x6a8>
c000db72:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db7a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000db7f:	eb 4b                	jmp    c000dbcc <tcp_process+0x6f0>
c000db81:	8d 76 00             	lea    esi,[esi+0x0]
c000db84:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db89:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db8e:	eb 30                	jmp    c000dbc0 <tcp_process+0x6e4>
c000db90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db98:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db9c:	75 12                	jne    c000dbb0 <tcp_process+0x6d4>
c000db9e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dba3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dba7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dbaa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dbad:	eb 1d                	jmp    c000dbcc <tcp_process+0x6f0>
c000dbaf:	90                   	nop
c000dbb0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dbb8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbc5:	85 c0                	test   eax,eax
c000dbc7:	75 c7                	jne    c000db90 <tcp_process+0x6b4>
c000dbc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dbe2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbec:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dbf8:	e8 cb 2e 00 00       	call   c0010ac8 <tcp_timer_needed>
c000dbfd:	e9 62 02 00 00       	jmp    c000de64 <tcp_process+0x988>
c000dc02:	66 90                	xchg   ax,ax
c000dc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc08:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc0b:	83 c8 02             	or     eax,0x2
c000dc0e:	88 c2                	mov    dl,al
c000dc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc14:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1b:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dc22:	e9 3d 02 00 00       	jmp    c000de64 <tcp_process+0x988>
c000dc27:	90                   	nop
c000dc28:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc2d:	0f b6 c0             	movzx  eax,al
c000dc30:	83 e0 10             	and    eax,0x10
c000dc33:	0f 84 2b 02 00 00    	je     c000de64 <tcp_process+0x988>
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc40:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc45:	39 c2                	cmp    edx,eax
c000dc47:	0f 85 17 02 00 00    	jne    c000de64 <tcp_process+0x988>
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dc58:	e9 07 02 00 00       	jmp    c000de64 <tcp_process+0x988>
c000dc5d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc67:	e8 f0 dd ff ff       	call   c000ba5c <tcp_receive>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc74:	0f b6 c0             	movzx  eax,al
c000dc77:	83 e0 20             	and    eax,0x20
c000dc7a:	0f 84 e8 01 00 00    	je     c000de68 <tcp_process+0x98c>
c000dc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc84:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc87:	83 c8 02             	or     eax,0x2
c000dc8a:	88 c2                	mov    dl,al
c000dc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc90:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc93:	83 ec 0c             	sub    esp,0xc
c000dc96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9a:	e8 d1 c3 ff ff       	call   c000a070 <tcp_pcb_purge>
c000dc9f:	83 c4 10             	add    esp,0x10
c000dca2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dca7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dcab:	75 0f                	jne    c000dcbc <tcp_process+0x7e0>
c000dcad:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dcb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcb5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dcba:	eb 48                	jmp    c000dd04 <tcp_process+0x828>
c000dcbc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dcc1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dcc6:	eb 30                	jmp    c000dcf8 <tcp_process+0x81c>
c000dcc8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dccd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcd0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dcd4:	75 12                	jne    c000dce8 <tcp_process+0x80c>
c000dcd6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcdf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dce5:	eb 1d                	jmp    c000dd04 <tcp_process+0x828>
c000dce7:	90                   	nop
c000dce8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dced:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcf0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcfd:	85 c0                	test   eax,eax
c000dcff:	75 c7                	jne    c000dcc8 <tcp_process+0x7ec>
c000dd01:	8d 76 00             	lea    esi,[esi+0x0]
c000dd04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd08:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd13:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dd1a:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dd20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd24:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd30:	e8 93 2d 00 00       	call   c0010ac8 <tcp_timer_needed>
c000dd35:	e9 2e 01 00 00       	jmp    c000de68 <tcp_process+0x98c>
c000dd3a:	66 90                	xchg   ax,ax
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd43:	e8 14 dd ff ff       	call   c000ba5c <tcp_receive>
c000dd48:	83 c4 10             	add    esp,0x10
c000dd4b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd50:	0f b6 c0             	movzx  eax,al
c000dd53:	83 e0 10             	and    eax,0x10
c000dd56:	0f 84 10 01 00 00    	je     c000de6c <tcp_process+0x990>
c000dd5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd60:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd63:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd68:	39 c2                	cmp    edx,eax
c000dd6a:	0f 85 fc 00 00 00    	jne    c000de6c <tcp_process+0x990>
c000dd70:	83 ec 0c             	sub    esp,0xc
c000dd73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd77:	e8 f4 c2 ff ff       	call   c000a070 <tcp_pcb_purge>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd84:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd88:	75 12                	jne    c000dd9c <tcp_process+0x8c0>
c000dd8a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd92:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd97:	eb 4b                	jmp    c000dde4 <tcp_process+0x908>
c000dd99:	8d 76 00             	lea    esi,[esi+0x0]
c000dd9c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dda1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dda6:	eb 30                	jmp    c000ddd8 <tcp_process+0x8fc>
c000dda8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddb0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddb4:	75 12                	jne    c000ddc8 <tcp_process+0x8ec>
c000ddb6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddbf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddc2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddc5:	eb 1d                	jmp    c000dde4 <tcp_process+0x908>
c000ddc7:	90                   	nop
c000ddc8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddd0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dddd:	85 c0                	test   eax,eax
c000dddf:	75 c7                	jne    c000dda8 <tcp_process+0x8cc>
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ddfa:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de04:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de0b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de10:	e8 b3 2c 00 00       	call   c0010ac8 <tcp_timer_needed>
c000de15:	eb 55                	jmp    c000de6c <tcp_process+0x990>
c000de17:	90                   	nop
c000de18:	83 ec 0c             	sub    esp,0xc
c000de1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de1f:	e8 38 dc ff ff       	call   c000ba5c <tcp_receive>
c000de24:	83 c4 10             	add    esp,0x10
c000de27:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de2c:	0f b6 c0             	movzx  eax,al
c000de2f:	83 e0 10             	and    eax,0x10
c000de32:	74 3c                	je     c000de70 <tcp_process+0x994>
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de3b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de40:	39 c2                	cmp    edx,eax
c000de42:	75 2c                	jne    c000de70 <tcp_process+0x994>
c000de44:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de49:	83 c8 10             	or     eax,0x10
c000de4c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000de51:	eb 1d                	jmp    c000de70 <tcp_process+0x994>
c000de53:	90                   	nop
c000de54:	90                   	nop
c000de55:	eb 1d                	jmp    c000de74 <tcp_process+0x998>
c000de57:	90                   	nop
c000de58:	90                   	nop
c000de59:	eb 19                	jmp    c000de74 <tcp_process+0x998>
c000de5b:	90                   	nop
c000de5c:	90                   	nop
c000de5d:	eb 15                	jmp    c000de74 <tcp_process+0x998>
c000de5f:	90                   	nop
c000de60:	90                   	nop
c000de61:	eb 11                	jmp    c000de74 <tcp_process+0x998>
c000de63:	90                   	nop
c000de64:	90                   	nop
c000de65:	eb 0d                	jmp    c000de74 <tcp_process+0x998>
c000de67:	90                   	nop
c000de68:	90                   	nop
c000de69:	eb 09                	jmp    c000de74 <tcp_process+0x998>
c000de6b:	90                   	nop
c000de6c:	90                   	nop
c000de6d:	eb 05                	jmp    c000de74 <tcp_process+0x998>
c000de6f:	90                   	nop
c000de70:	90                   	nop
c000de71:	8d 76 00             	lea    esi,[esi+0x0]
c000de74:	b0 00                	mov    al,0x0
c000de76:	66 90                	xchg   ax,ax
c000de78:	83 c4 18             	add    esp,0x18
c000de7b:	5b                   	pop    ebx
c000de7c:	c3                   	ret    
c000de7d:	8d 76 00             	lea    esi,[esi+0x0]

c000de80 <tcp_input>:
c000de80:	53                   	push   ebx
c000de81:	83 ec 18             	sub    esp,0x18
c000de84:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000de8a:	83 c0 01             	add    eax,0x1
c000de8d:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000de93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de9a:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000de9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea3:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dea6:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000deab:	66 8b 00             	mov    ax,WORD PTR [eax]
c000deae:	0f b7 c0             	movzx  eax,ax
c000deb1:	83 ec 0c             	sub    esp,0xc
c000deb4:	50                   	push   eax
c000deb5:	e8 62 2d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	0f b7 c0             	movzx  eax,ax
c000dec0:	c1 e8 08             	shr    eax,0x8
c000dec3:	0f b7 c0             	movzx  eax,ax
c000dec6:	83 e0 0f             	and    eax,0xf
c000dec9:	c1 e0 02             	shl    eax,0x2
c000decc:	01 d8                	add    eax,ebx
c000dece:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000ded3:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000ded8:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dedb:	0f b7 c0             	movzx  eax,ax
c000dede:	83 ec 0c             	sub    esp,0xc
c000dee1:	50                   	push   eax
c000dee2:	e8 35 2d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	0f b7 c0             	movzx  eax,ax
c000deed:	c1 e8 08             	shr    eax,0x8
c000def0:	83 e0 0f             	and    eax,0xf
c000def3:	c1 e0 02             	shl    eax,0x2
c000def6:	f7 d8                	neg    eax
c000def8:	98                   	cwde   
c000def9:	83 ec 08             	sub    esp,0x8
c000defc:	50                   	push   eax
c000defd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df01:	e8 da a1 ff ff       	call   c00080e0 <pbuf_header>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	0f b6 c0             	movzx  eax,al
c000df0c:	85 c0                	test   eax,eax
c000df0e:	75 10                	jne    c000df20 <tcp_input+0xa0>
c000df10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df17:	0f b7 c0             	movzx  eax,ax
c000df1a:	83 f8 13             	cmp    eax,0x13
c000df1d:	77 35                	ja     c000df54 <tcp_input+0xd4>
c000df1f:	90                   	nop
c000df20:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000df26:	83 c0 01             	add    eax,0x1
c000df29:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000df2f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df35:	83 c0 01             	add    eax,0x1
c000df38:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df3e:	83 ec 0c             	sub    esp,0xc
c000df41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df45:	e8 36 a3 ff ff       	call   c0008280 <pbuf_free>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	e9 fe 09 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000df52:	66 90                	xchg   ax,ax
c000df54:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df59:	83 ec 08             	sub    esp,0x8
c000df5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df60:	50                   	push   eax
c000df61:	e8 be 5e 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	0f b6 c0             	movzx  eax,al
c000df6c:	85 c0                	test   eax,eax
c000df6e:	75 14                	jne    c000df84 <tcp_input+0x104>
c000df70:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df75:	25 f0 00 00 00       	and    eax,0xf0
c000df7a:	3d e0 00 00 00       	cmp    eax,0xe0
c000df7f:	75 37                	jne    c000dfb8 <tcp_input+0x138>
c000df81:	8d 76 00             	lea    esi,[esi+0x0]
c000df84:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000df8a:	83 c0 01             	add    eax,0x1
c000df8d:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000df93:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df99:	83 c0 01             	add    eax,0x1
c000df9c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfa9:	e8 d2 a2 ff ff       	call   c0008280 <pbuf_free>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	e9 9a 09 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000dfb6:	66 90                	xchg   ax,ax
c000dfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dfbf:	0f b7 c0             	movzx  eax,ax
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	50                   	push   eax
c000dfc6:	6a 06                	push   0x6
c000dfc8:	68 98 68 03 c0       	push   0xc0036898
c000dfcd:	68 90 68 03 c0       	push   0xc0036890
c000dfd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dfd6:	e8 61 51 00 00       	call   c001313c <inet_chksum_pseudo>
c000dfdb:	83 c4 20             	add    esp,0x20
c000dfde:	0f b7 c0             	movzx  eax,ax
c000dfe1:	85 c0                	test   eax,eax
c000dfe3:	74 33                	je     c000e018 <tcp_input+0x198>
c000dfe5:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000dfeb:	83 c0 01             	add    eax,0x1
c000dfee:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000dff4:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dffa:	83 c0 01             	add    eax,0x1
c000dffd:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e003:	83 ec 0c             	sub    esp,0xc
c000e006:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00a:	e8 71 a2 ff ff       	call   c0008280 <pbuf_free>
c000e00f:	83 c4 10             	add    esp,0x10
c000e012:	e9 39 09 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e017:	90                   	nop
c000e018:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e01d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e021:	0f b7 c0             	movzx  eax,ax
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	50                   	push   eax
c000e028:	e8 ef 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	0f b7 c0             	movzx  eax,ax
c000e033:	c1 e8 0c             	shr    eax,0xc
c000e036:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e03a:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e03f:	ba 00 00 00 00       	mov    edx,0x0
c000e044:	89 d1                	mov    ecx,edx
c000e046:	29 c1                	sub    ecx,eax
c000e048:	89 c8                	mov    eax,ecx
c000e04a:	c1 e0 02             	shl    eax,0x2
c000e04d:	98                   	cwde   
c000e04e:	83 ec 08             	sub    esp,0x8
c000e051:	50                   	push   eax
c000e052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e056:	e8 85 a0 ff ff       	call   c00080e0 <pbuf_header>
c000e05b:	83 c4 10             	add    esp,0x10
c000e05e:	0f b6 c0             	movzx  eax,al
c000e061:	85 c0                	test   eax,eax
c000e063:	74 33                	je     c000e098 <tcp_input+0x218>
c000e065:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e06b:	83 c0 01             	add    eax,0x1
c000e06e:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e074:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e07a:	83 c0 01             	add    eax,0x1
c000e07d:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e08a:	e8 f1 a1 ff ff       	call   c0008280 <pbuf_free>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	e9 b9 08 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e097:	90                   	nop
c000e098:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e09d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0a0:	0f b7 c0             	movzx  eax,ax
c000e0a3:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0a9:	83 ec 0c             	sub    esp,0xc
c000e0ac:	50                   	push   eax
c000e0ad:	e8 6a 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e0b2:	83 c4 10             	add    esp,0x10
c000e0b5:	66 89 03             	mov    WORD PTR [ebx],ax
c000e0b8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0bd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e0c1:	0f b7 c0             	movzx  eax,ax
c000e0c4:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	50                   	push   eax
c000e0ce:	e8 49 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e0d3:	83 c4 10             	add    esp,0x10
c000e0d6:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e0da:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0e2:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	50                   	push   eax
c000e0ec:	e8 4f 2b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e0f1:	83 c4 10             	add    esp,0x10
c000e0f4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e0f7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e0fa:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e0ff:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e107:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e10d:	83 ec 0c             	sub    esp,0xc
c000e110:	50                   	push   eax
c000e111:	e8 2a 2b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e116:	83 c4 10             	add    esp,0x10
c000e119:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e11c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e11f:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e124:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e129:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e12d:	0f b7 c0             	movzx  eax,ax
c000e130:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e136:	83 ec 0c             	sub    esp,0xc
c000e139:	50                   	push   eax
c000e13a:	e8 dd 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e13f:	83 c4 10             	add    esp,0x10
c000e142:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e146:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e14b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e14f:	0f b7 c0             	movzx  eax,ax
c000e152:	83 ec 0c             	sub    esp,0xc
c000e155:	50                   	push   eax
c000e156:	e8 c1 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e15b:	83 c4 10             	add    esp,0x10
c000e15e:	83 e0 3f             	and    eax,0x3f
c000e161:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e16a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e16d:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e172:	0f b6 c0             	movzx  eax,al
c000e175:	83 e0 03             	and    eax,0x3
c000e178:	0f 95 c0             	setne  al
c000e17b:	0f b6 c0             	movzx  eax,al
c000e17e:	01 d0                	add    eax,edx
c000e180:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e186:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e18e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e197:	e9 50 01 00 00       	jmp    c000e2ec <tcp_input+0x46c>
c000e19c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1a3:	85 c0                	test   eax,eax
c000e1a5:	75 15                	jne    c000e1bc <tcp_input+0x33c>
c000e1a7:	83 ec 08             	sub    esp,0x8
c000e1aa:	68 50 01 03 c0       	push   0xc0030150
c000e1af:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e1b4:	e8 03 18 01 00       	call   c001f9bc <CPrintf>
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1c3:	83 f8 0a             	cmp    eax,0xa
c000e1c6:	75 18                	jne    c000e1e0 <tcp_input+0x360>
c000e1c8:	83 ec 08             	sub    esp,0x8
c000e1cb:	68 78 01 03 c0       	push   0xc0030178
c000e1d0:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e1d5:	e8 e2 17 01 00       	call   c001f9bc <CPrintf>
c000e1da:	83 c4 10             	add    esp,0x10
c000e1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1e7:	83 f8 01             	cmp    eax,0x1
c000e1ea:	75 18                	jne    c000e204 <tcp_input+0x384>
c000e1ec:	83 ec 08             	sub    esp,0x8
c000e1ef:	68 a4 01 03 c0       	push   0xc00301a4
c000e1f4:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e1f9:	e8 be 17 01 00       	call   c001f9bc <CPrintf>
c000e1fe:	83 c4 10             	add    esp,0x10
c000e201:	8d 76 00             	lea    esi,[esi+0x0]
c000e204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e208:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e20c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e211:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e214:	0f b7 d2             	movzx  edx,dx
c000e217:	0f b7 c0             	movzx  eax,ax
c000e21a:	39 c2                	cmp    edx,eax
c000e21c:	0f 85 b6 00 00 00    	jne    c000e2d8 <tcp_input+0x458>
c000e222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e226:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e229:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e22e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e232:	0f b7 d2             	movzx  edx,dx
c000e235:	0f b7 c0             	movzx  eax,ax
c000e238:	39 c2                	cmp    edx,eax
c000e23a:	0f 85 98 00 00 00    	jne    c000e2d8 <tcp_input+0x458>
c000e240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e247:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e24c:	39 c2                	cmp    edx,eax
c000e24e:	0f 85 84 00 00 00    	jne    c000e2d8 <tcp_input+0x458>
c000e254:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e258:	8b 10                	mov    edx,DWORD PTR [eax]
c000e25a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e25f:	39 c2                	cmp    edx,eax
c000e261:	75 75                	jne    c000e2d8 <tcp_input+0x458>
c000e263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e267:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e26a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e26e:	75 18                	jne    c000e288 <tcp_input+0x408>
c000e270:	83 ec 08             	sub    esp,0x8
c000e273:	68 cc 01 03 c0       	push   0xc00301cc
c000e278:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e27d:	e8 3a 17 01 00       	call   c001f9bc <CPrintf>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	8d 76 00             	lea    esi,[esi+0x0]
c000e288:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e28d:	74 25                	je     c000e2b4 <tcp_input+0x434>
c000e28f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e293:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e29a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e29d:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e2a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ae:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e2b3:	90                   	nop
c000e2b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2bb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2bf:	75 3b                	jne    c000e2fc <tcp_input+0x47c>
c000e2c1:	83 ec 08             	sub    esp,0x8
c000e2c4:	68 f8 01 03 c0       	push   0xc00301f8
c000e2c9:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e2ce:	e8 e9 16 01 00       	call   c001f9bc <CPrintf>
c000e2d3:	83 c4 10             	add    esp,0x10
c000e2d6:	eb 24                	jmp    c000e2fc <tcp_input+0x47c>
c000e2d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2eb:	90                   	nop
c000e2ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e2f1:	0f 85 a5 fe ff ff    	jne    c000e19c <tcp_input+0x31c>
c000e2f7:	eb 07                	jmp    c000e300 <tcp_input+0x480>
c000e2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2fc:	90                   	nop
c000e2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e300:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e305:	0f 85 89 01 00 00    	jne    c000e494 <tcp_input+0x614>
c000e30b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e310:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e314:	e9 ab 00 00 00       	jmp    c000e3c4 <tcp_input+0x544>
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e320:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e323:	83 f8 0a             	cmp    eax,0xa
c000e326:	74 18                	je     c000e340 <tcp_input+0x4c0>
c000e328:	83 ec 08             	sub    esp,0x8
c000e32b:	68 24 02 03 c0       	push   0xc0030224
c000e330:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e335:	e8 82 16 01 00       	call   c001f9bc <CPrintf>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	8d 76 00             	lea    esi,[esi+0x0]
c000e340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e344:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e348:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e34d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e350:	0f b7 d2             	movzx  edx,dx
c000e353:	0f b7 c0             	movzx  eax,ax
c000e356:	39 c2                	cmp    edx,eax
c000e358:	75 5e                	jne    c000e3b8 <tcp_input+0x538>
c000e35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e35e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e361:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e366:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e36a:	0f b7 d2             	movzx  edx,dx
c000e36d:	0f b7 c0             	movzx  eax,ax
c000e370:	39 c2                	cmp    edx,eax
c000e372:	75 44                	jne    c000e3b8 <tcp_input+0x538>
c000e374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e378:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e37b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e380:	39 c2                	cmp    edx,eax
c000e382:	75 34                	jne    c000e3b8 <tcp_input+0x538>
c000e384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e388:	8b 10                	mov    edx,DWORD PTR [eax]
c000e38a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e38f:	39 c2                	cmp    edx,eax
c000e391:	75 25                	jne    c000e3b8 <tcp_input+0x538>
c000e393:	83 ec 0c             	sub    esp,0xc
c000e396:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e39a:	e8 45 d4 ff ff       	call   c000b7e4 <tcp_timewait_input>
c000e39f:	83 c4 10             	add    esp,0x10
c000e3a2:	83 ec 0c             	sub    esp,0xc
c000e3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3a9:	e8 d2 9e ff ff       	call   c0008280 <pbuf_free>
c000e3ae:	83 c4 10             	add    esp,0x10
c000e3b1:	e9 9a 05 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e3b6:	66 90                	xchg   ax,ax
c000e3b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3c3:	90                   	nop
c000e3c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e3c9:	0f 85 4d ff ff ff    	jne    c000e31c <tcp_input+0x49c>
c000e3cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3d7:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e3dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3e0:	eb 52                	jmp    c000e434 <tcp_input+0x5b4>
c000e3e2:	66 90                	xchg   ax,ax
c000e3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3eb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3f0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3f4:	0f b7 d2             	movzx  edx,dx
c000e3f7:	0f b7 c0             	movzx  eax,ax
c000e3fa:	39 c2                	cmp    edx,eax
c000e3fc:	75 22                	jne    c000e420 <tcp_input+0x5a0>
c000e3fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e402:	8b 10                	mov    edx,DWORD PTR [eax]
c000e404:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e409:	39 c2                	cmp    edx,eax
c000e40b:	74 2f                	je     c000e43c <tcp_input+0x5bc>
c000e40d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e411:	85 c0                	test   eax,eax
c000e413:	74 27                	je     c000e43c <tcp_input+0x5bc>
c000e415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e419:	8b 00                	mov    eax,DWORD PTR [eax]
c000e41b:	85 c0                	test   eax,eax
c000e41d:	74 1d                	je     c000e43c <tcp_input+0x5bc>
c000e41f:	90                   	nop
c000e420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e42f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e433:	90                   	nop
c000e434:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e439:	75 a9                	jne    c000e3e4 <tcp_input+0x564>
c000e43b:	90                   	nop
c000e43c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e441:	74 51                	je     c000e494 <tcp_input+0x614>
c000e443:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e448:	74 26                	je     c000e470 <tcp_input+0x5f0>
c000e44a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e44e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e455:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e458:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e462:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e469:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e46e:	66 90                	xchg   ax,ax
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e477:	e8 4c ee ff ff       	call   c000d2c8 <tcp_listen_input>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	83 ec 0c             	sub    esp,0xc
c000e482:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e486:	e8 f5 9d ff ff       	call   c0008280 <pbuf_free>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	e9 bd 04 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e493:	90                   	nop
c000e494:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e499:	0f 84 1d 04 00 00    	je     c000e8bc <tcp_input+0xa3c>
c000e49f:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e4b0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ba:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e4bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4c4:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e4c9:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e4d3:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e4da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4de:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e4e4:	85 c0                	test   eax,eax
c000e4e6:	0f 84 b4 00 00 00    	je     c000e5a0 <tcp_input+0x720>
c000e4ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f0:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e4f6:	85 c0                	test   eax,eax
c000e4f8:	74 2e                	je     c000e528 <tcp_input+0x6a8>
c000e4fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fe:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e504:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e508:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e50e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e512:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e515:	6a 00                	push   0x0
c000e517:	51                   	push   ecx
c000e518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e51c:	52                   	push   edx
c000e51d:	ff d0                	call   eax
c000e51f:	83 c4 10             	add    esp,0x10
c000e522:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e526:	eb 20                	jmp    c000e548 <tcp_input+0x6c8>
c000e528:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e52c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e532:	6a 00                	push   0x0
c000e534:	50                   	push   eax
c000e535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e539:	6a 00                	push   0x0
c000e53b:	e8 74 c8 ff ff       	call   c000adb4 <tcp_recv_null>
c000e540:	83 c4 10             	add    esp,0x10
c000e543:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e547:	90                   	nop
c000e548:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e54d:	85 c0                	test   eax,eax
c000e54f:	75 13                	jne    c000e564 <tcp_input+0x6e4>
c000e551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e555:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e55f:	eb 3f                	jmp    c000e5a0 <tcp_input+0x720>
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e569:	83 f8 f6             	cmp    eax,0xfffffff6
c000e56c:	74 0e                	je     c000e57c <tcp_input+0x6fc>
c000e56e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e574:	0f b7 c0             	movzx  eax,ax
c000e577:	85 c0                	test   eax,eax
c000e579:	74 25                	je     c000e5a0 <tcp_input+0x720>
c000e57b:	90                   	nop
c000e57c:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e582:	83 c0 01             	add    eax,0x1
c000e585:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e58b:	83 ec 0c             	sub    esp,0xc
c000e58e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e592:	e8 e9 9c ff ff       	call   c0008280 <pbuf_free>
c000e597:	83 c4 10             	add    esp,0x10
c000e59a:	e9 b1 03 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e59f:	90                   	nop
c000e5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a4:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e5a9:	83 ec 0c             	sub    esp,0xc
c000e5ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5b0:	e8 27 ef ff ff       	call   c000d4dc <tcp_process>
c000e5b5:	83 c4 10             	add    esp,0x10
c000e5b8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5bc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5c1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5c4:	0f 84 9e 02 00 00    	je     c000e868 <tcp_input+0x9e8>
c000e5ca:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e5cf:	0f b6 c0             	movzx  eax,al
c000e5d2:	83 e0 08             	and    eax,0x8
c000e5d5:	74 59                	je     c000e630 <tcp_input+0x7b0>
c000e5d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5db:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5e1:	85 c0                	test   eax,eax
c000e5e3:	74 1f                	je     c000e604 <tcp_input+0x784>
c000e5e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e9:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5f3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5f6:	83 ec 08             	sub    esp,0x8
c000e5f9:	6a f5                	push   0xfffffff5
c000e5fb:	52                   	push   edx
c000e5fc:	ff d0                	call   eax
c000e5fe:	83 c4 10             	add    esp,0x10
c000e601:	8d 76 00             	lea    esi,[esi+0x0]
c000e604:	83 ec 08             	sub    esp,0x8
c000e607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e60b:	68 70 68 03 c0       	push   0xc0036870
c000e610:	e8 bb c2 ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000e615:	83 c4 10             	add    esp,0x10
c000e618:	83 ec 08             	sub    esp,0x8
c000e61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e61f:	6a 02                	push   0x2
c000e621:	e8 9a 93 ff ff       	call   c00079c0 <memp_free>
c000e626:	83 c4 10             	add    esp,0x10
c000e629:	e9 4a 02 00 00       	jmp    c000e878 <tcp_input+0x9f8>
c000e62e:	66 90                	xchg   ax,ax
c000e630:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e635:	0f b6 c0             	movzx  eax,al
c000e638:	83 e0 10             	and    eax,0x10
c000e63b:	74 2b                	je     c000e668 <tcp_input+0x7e8>
c000e63d:	83 ec 08             	sub    esp,0x8
c000e640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e644:	68 70 68 03 c0       	push   0xc0036870
c000e649:	e8 82 c2 ff ff       	call   c000a8d0 <tcp_pcb_remove>
c000e64e:	83 c4 10             	add    esp,0x10
c000e651:	83 ec 08             	sub    esp,0x8
c000e654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e658:	6a 02                	push   0x2
c000e65a:	e8 61 93 ff ff       	call   c00079c0 <memp_free>
c000e65f:	83 c4 10             	add    esp,0x10
c000e662:	e9 11 02 00 00       	jmp    c000e878 <tcp_input+0x9f8>
c000e667:	90                   	nop
c000e668:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e671:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e674:	0f b7 c0             	movzx  eax,ax
c000e677:	85 c0                	test   eax,eax
c000e679:	74 55                	je     c000e6d0 <tcp_input+0x850>
c000e67b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e67f:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e685:	85 c0                	test   eax,eax
c000e687:	74 2f                	je     c000e6b8 <tcp_input+0x838>
c000e689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e68d:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e693:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e697:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e69a:	0f b7 ca             	movzx  ecx,dx
c000e69d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6a1:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6a4:	83 ec 04             	sub    esp,0x4
c000e6a7:	51                   	push   ecx
c000e6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6ac:	52                   	push   edx
c000e6ad:	ff d0                	call   eax
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e6b6:	eb 08                	jmp    c000e6c0 <tcp_input+0x840>
c000e6b8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e6c5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e6c8:	0f 84 9e 01 00 00    	je     c000e86c <tcp_input+0x9ec>
c000e6ce:	66 90                	xchg   ax,ax
c000e6d0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6d5:	85 c0                	test   eax,eax
c000e6d7:	0f 84 f3 00 00 00    	je     c000e7d0 <tcp_input+0x950>
c000e6dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6e1:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e6e7:	85 c0                	test   eax,eax
c000e6e9:	74 15                	je     c000e700 <tcp_input+0x880>
c000e6eb:	83 ec 08             	sub    esp,0x8
c000e6ee:	68 bd 02 03 c0       	push   0xc00302bd
c000e6f3:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e6f8:	e8 bf 12 01 00       	call   c001f9bc <CPrintf>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e704:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e707:	0f b6 c0             	movzx  eax,al
c000e70a:	83 e0 10             	and    eax,0x10
c000e70d:	74 25                	je     c000e734 <tcp_input+0x8b4>
c000e70f:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	50                   	push   eax
c000e718:	e8 63 9b ff ff       	call   c0008280 <pbuf_free>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e727:	e8 80 ca ff ff       	call   c000b1ac <tcp_abort>
c000e72c:	83 c4 10             	add    esp,0x10
c000e72f:	e9 44 01 00 00       	jmp    c000e878 <tcp_input+0x9f8>
c000e734:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e739:	0f b6 c0             	movzx  eax,al
c000e73c:	83 e0 08             	and    eax,0x8
c000e73f:	74 13                	je     c000e754 <tcp_input+0x8d4>
c000e741:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e746:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e749:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e74e:	83 ca 01             	or     edx,0x1
c000e751:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e758:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e75e:	85 c0                	test   eax,eax
c000e760:	74 2a                	je     c000e78c <tcp_input+0x90c>
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e76c:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e776:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e779:	6a 00                	push   0x0
c000e77b:	51                   	push   ecx
c000e77c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e780:	52                   	push   edx
c000e781:	ff d0                	call   eax
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e78a:	eb 1c                	jmp    c000e7a8 <tcp_input+0x928>
c000e78c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e791:	6a 00                	push   0x0
c000e793:	50                   	push   eax
c000e794:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e798:	6a 00                	push   0x0
c000e79a:	e8 15 c6 ff ff       	call   c000adb4 <tcp_recv_null>
c000e79f:	83 c4 10             	add    esp,0x10
c000e7a2:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7a6:	66 90                	xchg   ax,ax
c000e7a8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7ad:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7b0:	0f 84 ba 00 00 00    	je     c000e870 <tcp_input+0x9f0>
c000e7b6:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7bb:	85 c0                	test   eax,eax
c000e7bd:	74 11                	je     c000e7d0 <tcp_input+0x950>
c000e7bf:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e7c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c9:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e7cf:	90                   	nop
c000e7d0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7d5:	0f b6 c0             	movzx  eax,al
c000e7d8:	83 e0 20             	and    eax,0x20
c000e7db:	74 6f                	je     c000e84c <tcp_input+0x9cc>
c000e7dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7e4:	0f b7 c0             	movzx  eax,ax
c000e7e7:	3d 60 08 00 00       	cmp    eax,0x860
c000e7ec:	74 16                	je     c000e804 <tcp_input+0x984>
c000e7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7f5:	83 c0 01             	add    eax,0x1
c000e7f8:	89 c2                	mov    edx,eax
c000e7fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fe:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000e802:	66 90                	xchg   ax,ax
c000e804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e808:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e80e:	85 c0                	test   eax,eax
c000e810:	74 26                	je     c000e838 <tcp_input+0x9b8>
c000e812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e816:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e81c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e820:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e823:	6a 00                	push   0x0
c000e825:	6a 00                	push   0x0
c000e827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82b:	52                   	push   edx
c000e82c:	ff d0                	call   eax
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e835:	eb 09                	jmp    c000e840 <tcp_input+0x9c0>
c000e837:	90                   	nop
c000e838:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e83d:	8d 76 00             	lea    esi,[esi+0x0]
c000e840:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e845:	83 f8 f6             	cmp    eax,0xfffffff6
c000e848:	74 2a                	je     c000e874 <tcp_input+0x9f4>
c000e84a:	66 90                	xchg   ax,ax
c000e84c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e85d:	e8 be 15 00 00       	call   c000fe20 <tcp_output>
c000e862:	83 c4 10             	add    esp,0x10
c000e865:	eb 11                	jmp    c000e878 <tcp_input+0x9f8>
c000e867:	90                   	nop
c000e868:	90                   	nop
c000e869:	eb 0d                	jmp    c000e878 <tcp_input+0x9f8>
c000e86b:	90                   	nop
c000e86c:	90                   	nop
c000e86d:	eb 09                	jmp    c000e878 <tcp_input+0x9f8>
c000e86f:	90                   	nop
c000e870:	90                   	nop
c000e871:	eb 05                	jmp    c000e878 <tcp_input+0x9f8>
c000e873:	90                   	nop
c000e874:	90                   	nop
c000e875:	8d 76 00             	lea    esi,[esi+0x0]
c000e878:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e882:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e88c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e891:	85 c0                	test   eax,eax
c000e893:	0f 84 b7 00 00 00    	je     c000e950 <tcp_input+0xad0>
c000e899:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e89e:	83 ec 0c             	sub    esp,0xc
c000e8a1:	50                   	push   eax
c000e8a2:	e8 d9 99 ff ff       	call   c0008280 <pbuf_free>
c000e8a7:	83 c4 10             	add    esp,0x10
c000e8aa:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e8b4:	e9 97 00 00 00       	jmp    c000e950 <tcp_input+0xad0>
c000e8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8bc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8c1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e8c5:	0f b7 c0             	movzx  eax,ax
c000e8c8:	83 ec 0c             	sub    esp,0xc
c000e8cb:	50                   	push   eax
c000e8cc:	e8 4b 23 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e8d1:	83 c4 10             	add    esp,0x10
c000e8d4:	0f b7 c0             	movzx  eax,ax
c000e8d7:	83 e0 04             	and    eax,0x4
c000e8da:	75 64                	jne    c000e940 <tcp_input+0xac0>
c000e8dc:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e8e2:	83 c0 01             	add    eax,0x1
c000e8e5:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e8eb:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e8f1:	83 c0 01             	add    eax,0x1
c000e8f4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e8fa:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e902:	0f b7 c8             	movzx  ecx,ax
c000e905:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e90a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e90e:	0f b7 d0             	movzx  edx,ax
c000e911:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e917:	0f b7 d8             	movzx  ebx,ax
c000e91a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e91f:	01 c3                	add    ebx,eax
c000e921:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e926:	83 ec 08             	sub    esp,0x8
c000e929:	51                   	push   ecx
c000e92a:	52                   	push   edx
c000e92b:	68 90 68 03 c0       	push   0xc0036890
c000e930:	68 98 68 03 c0       	push   0xc0036898
c000e935:	53                   	push   ebx
c000e936:	50                   	push   eax
c000e937:	e8 70 19 00 00       	call   c00102ac <tcp_rst>
c000e93c:	83 c4 20             	add    esp,0x20
c000e93f:	90                   	nop
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e947:	e8 34 99 ff ff       	call   c0008280 <pbuf_free>
c000e94c:	83 c4 10             	add    esp,0x10
c000e94f:	90                   	nop
c000e950:	83 c4 18             	add    esp,0x18
c000e953:	5b                   	pop    ebx
c000e954:	c3                   	ret    
c000e955:	66 90                	xchg   ax,ax
c000e957:	90                   	nop

c000e958 <tcp_output_alloc_header>:
c000e958:	83 ec 2c             	sub    esp,0x2c
c000e95b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e95f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e963:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e968:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e96d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e975:	01 d0                	add    eax,edx
c000e977:	83 c0 14             	add    eax,0x14
c000e97a:	0f b7 c0             	movzx  eax,ax
c000e97d:	83 ec 04             	sub    esp,0x4
c000e980:	6a 00                	push   0x0
c000e982:	50                   	push   eax
c000e983:	6a 01                	push   0x1
c000e985:	e8 d2 9a ff ff       	call   c000845c <pbuf_alloc>
c000e98a:	83 c4 10             	add    esp,0x10
c000e98d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e991:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e996:	0f 84 18 01 00 00    	je     c000eab4 <tcp_output_alloc_header+0x15c>
c000e99c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e9a1:	8d 50 13             	lea    edx,[eax+0x13]
c000e9a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000e9ac:	0f b7 c0             	movzx  eax,ax
c000e9af:	39 c2                	cmp    edx,eax
c000e9b1:	7c 15                	jl     c000e9c8 <tcp_output_alloc_header+0x70>
c000e9b3:	83 ec 08             	sub    esp,0x8
c000e9b6:	68 00 03 03 c0       	push   0xc0030300
c000e9bb:	68 e6 f6 02 c0       	push   0xc002f6e6
c000e9c0:	e8 f7 0f 01 00       	call   c001f9bc <CPrintf>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e9da:	0f b7 c0             	movzx  eax,ax
c000e9dd:	83 ec 0c             	sub    esp,0xc
c000e9e0:	50                   	push   eax
c000e9e1:	e8 36 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e9e6:	83 c4 10             	add    esp,0x10
c000e9e9:	89 c2                	mov    edx,eax
c000e9eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9ef:	66 89 10             	mov    WORD PTR [eax],dx
c000e9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9f6:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000e9fa:	0f b7 c0             	movzx  eax,ax
c000e9fd:	83 ec 0c             	sub    esp,0xc
c000ea00:	50                   	push   eax
c000ea01:	e8 16 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	89 c2                	mov    edx,eax
c000ea0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea0f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000ea13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea22:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ea25:	83 ec 0c             	sub    esp,0xc
c000ea28:	50                   	push   eax
c000ea29:	e8 12 22 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	89 c2                	mov    edx,eax
c000ea33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea3a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea3f:	c1 e8 02             	shr    eax,0x2
c000ea42:	83 c0 05             	add    eax,0x5
c000ea45:	c1 e0 0c             	shl    eax,0xc
c000ea48:	83 c8 10             	or     eax,0x10
c000ea4b:	0f b7 c0             	movzx  eax,ax
c000ea4e:	83 ec 0c             	sub    esp,0xc
c000ea51:	50                   	push   eax
c000ea52:	e8 c5 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea57:	83 c4 10             	add    esp,0x10
c000ea5a:	89 c2                	mov    edx,eax
c000ea5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea60:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ea64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea68:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea6c:	0f b7 c0             	movzx  eax,ax
c000ea6f:	83 ec 0c             	sub    esp,0xc
c000ea72:	50                   	push   eax
c000ea73:	e8 a4 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea78:	83 c4 10             	add    esp,0x10
c000ea7b:	89 c2                	mov    edx,eax
c000ea7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea81:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ea85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea89:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ea8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea93:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ea99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea9d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eaa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa4:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eaa8:	0f b7 c0             	movzx  eax,ax
c000eaab:	01 c2                	add    edx,eax
c000eaad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eab1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eab4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab8:	83 c4 2c             	add    esp,0x2c
c000eabb:	c3                   	ret    

c000eabc <tcp_create_segment>:
c000eabc:	53                   	push   ebx
c000eabd:	83 ec 28             	sub    esp,0x28
c000eac0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eac4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eac8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eacc:	88 d0                	mov    al,dl
c000eace:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ead2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ead7:	c1 e0 02             	shl    eax,0x2
c000eada:	83 e0 04             	and    eax,0x4
c000eadd:	88 c2                	mov    dl,al
c000eadf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eae4:	83 e0 02             	and    eax,0x2
c000eae7:	74 07                	je     c000eaf0 <tcp_create_segment+0x34>
c000eae9:	b0 0c                	mov    al,0xc
c000eaeb:	eb 07                	jmp    c000eaf4 <tcp_create_segment+0x38>
c000eaed:	8d 76 00             	lea    esi,[esi+0x0]
c000eaf0:	b0 00                	mov    al,0x0
c000eaf2:	66 90                	xchg   ax,ax
c000eaf4:	01 d0                	add    eax,edx
c000eaf6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eafa:	83 ec 0c             	sub    esp,0xc
c000eafd:	6a 04                	push   0x4
c000eaff:	e8 90 8d ff ff       	call   c0007894 <memp_malloc>
c000eb04:	83 c4 10             	add    esp,0x10
c000eb07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb0b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb10:	75 1a                	jne    c000eb2c <tcp_create_segment+0x70>
c000eb12:	83 ec 0c             	sub    esp,0xc
c000eb15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb19:	e8 62 97 ff ff       	call   c0008280 <pbuf_free>
c000eb1e:	83 c4 10             	add    esp,0x10
c000eb21:	b8 00 00 00 00       	mov    eax,0x0
c000eb26:	e9 31 01 00 00       	jmp    c000ec5c <tcp_create_segment+0x1a0>
c000eb2b:	90                   	nop
c000eb2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb30:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eb34:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eb37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb45:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eb53:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eb58:	89 d1                	mov    ecx,edx
c000eb5a:	29 c1                	sub    ecx,eax
c000eb5c:	89 c8                	mov    eax,ecx
c000eb5e:	89 c2                	mov    edx,eax
c000eb60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb64:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000eb68:	83 ec 08             	sub    esp,0x8
c000eb6b:	6a 14                	push   0x14
c000eb6d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb71:	e8 6a 95 ff ff       	call   c00080e0 <pbuf_header>
c000eb76:	83 c4 10             	add    esp,0x10
c000eb79:	0f b6 c0             	movzx  eax,al
c000eb7c:	85 c0                	test   eax,eax
c000eb7e:	74 28                	je     c000eba8 <tcp_create_segment+0xec>
c000eb80:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000eb86:	83 c0 01             	add    eax,0x1
c000eb89:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eb8f:	83 ec 0c             	sub    esp,0xc
c000eb92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb96:	e8 71 b3 ff ff       	call   c0009f0c <tcp_seg_free>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	b8 00 00 00 00       	mov    eax,0x0
c000eba3:	e9 b4 00 00 00       	jmp    c000ec5c <tcp_create_segment+0x1a0>
c000eba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebaf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ebb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ebb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebc0:	0f b7 c0             	movzx  eax,ax
c000ebc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebc7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	50                   	push   eax
c000ebce:	e8 49 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	66 89 03             	mov    WORD PTR [ebx],ax
c000ebd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebdd:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ebe1:	0f b7 c0             	movzx  eax,ax
c000ebe4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebe8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebeb:	83 ec 0c             	sub    esp,0xc
c000ebee:	50                   	push   eax
c000ebef:	e8 28 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ebfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebff:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec02:	83 ec 0c             	sub    esp,0xc
c000ec05:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec09:	e8 32 20 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ec0e:	83 c4 10             	add    esp,0x10
c000ec11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec14:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec19:	c1 e8 02             	shr    eax,0x2
c000ec1c:	0f b6 c0             	movzx  eax,al
c000ec1f:	83 c0 05             	add    eax,0x5
c000ec22:	c1 e0 0c             	shl    eax,0xc
c000ec25:	89 c2                	mov    edx,eax
c000ec27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ec2c:	09 d0                	or     eax,edx
c000ec2e:	0f b7 c0             	movzx  eax,ax
c000ec31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec35:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	50                   	push   eax
c000ec3c:	e8 db 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ec48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec4f:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ec55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec59:	8d 76 00             	lea    esi,[esi+0x0]
c000ec5c:	83 c4 28             	add    esp,0x28
c000ec5f:	5b                   	pop    ebx
c000ec60:	c3                   	ret    
c000ec61:	8d 76 00             	lea    esi,[esi+0x0]

c000ec64 <tcp_pbuf_prealloc>:
c000ec64:	53                   	push   ebx
c000ec65:	83 ec 28             	sub    esp,0x28
c000ec68:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec70:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ec74:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ec78:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ec7d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec82:	88 d8                	mov    al,bl
c000ec84:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ec88:	88 c8                	mov    al,cl
c000ec8a:	88 04 24             	mov    BYTE PTR [esp],al
c000ec8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec91:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ec96:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ec9b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eca0:	39 c2                	cmp    edx,eax
c000eca2:	73 64                	jae    c000ed08 <tcp_pbuf_prealloc+0xa4>
c000eca4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eca9:	83 e0 02             	and    eax,0x2
c000ecac:	75 2e                	jne    c000ecdc <tcp_pbuf_prealloc+0x78>
c000ecae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecb2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecb5:	0f b6 c0             	movzx  eax,al
c000ecb8:	83 e0 40             	and    eax,0x40
c000ecbb:	75 4b                	jne    c000ed08 <tcp_pbuf_prealloc+0xa4>
c000ecbd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ecc1:	85 c0                	test   eax,eax
c000ecc3:	74 17                	je     c000ecdc <tcp_pbuf_prealloc+0x78>
c000ecc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecc9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eccc:	85 c0                	test   eax,eax
c000ecce:	75 0c                	jne    c000ecdc <tcp_pbuf_prealloc+0x78>
c000ecd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecd4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ecd7:	85 c0                	test   eax,eax
c000ecd9:	74 2d                	je     c000ed08 <tcp_pbuf_prealloc+0xa4>
c000ecdb:	90                   	nop
c000ecdc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ece1:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ece7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ecec:	39 c2                	cmp    edx,eax
c000ecee:	7d 0c                	jge    c000ecfc <tcp_pbuf_prealloc+0x98>
c000ecf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf4:	05 18 02 00 00       	add    eax,0x218
c000ecf9:	eb 05                	jmp    c000ed00 <tcp_pbuf_prealloc+0x9c>
c000ecfb:	90                   	nop
c000ecfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed00:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed05:	8d 76 00             	lea    esi,[esi+0x0]
c000ed08:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed0d:	83 ec 04             	sub    esp,0x4
c000ed10:	6a 00                	push   0x0
c000ed12:	50                   	push   eax
c000ed13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed17:	e8 40 97 ff ff       	call   c000845c <pbuf_alloc>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed23:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed28:	75 0a                	jne    c000ed34 <tcp_pbuf_prealloc+0xd0>
c000ed2a:	b8 00 00 00 00       	mov    eax,0x0
c000ed2f:	eb 5f                	jmp    c000ed90 <tcp_pbuf_prealloc+0x12c>
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed3a:	85 c0                	test   eax,eax
c000ed3c:	74 16                	je     c000ed54 <tcp_pbuf_prealloc+0xf0>
c000ed3e:	83 ec 08             	sub    esp,0x8
c000ed41:	68 84 05 03 c0       	push   0xc0030584
c000ed46:	68 e6 f6 02 c0       	push   0xc002f6e6
c000ed4b:	e8 6c 0c 01 00       	call   c001f9bc <CPrintf>
c000ed50:	83 c4 10             	add    esp,0x10
c000ed53:	90                   	nop
c000ed54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed58:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ed5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed60:	89 d1                	mov    ecx,edx
c000ed62:	29 c1                	sub    ecx,eax
c000ed64:	89 c8                	mov    eax,ecx
c000ed66:	89 c2                	mov    edx,eax
c000ed68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed6c:	66 89 10             	mov    WORD PTR [eax],dx
c000ed6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed77:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ed7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed7f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed86:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ed8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed8e:	66 90                	xchg   ax,ax
c000ed90:	83 c4 28             	add    esp,0x28
c000ed93:	5b                   	pop    ebx
c000ed94:	c3                   	ret    
c000ed95:	8d 76 00             	lea    esi,[esi+0x0]

c000ed98 <tcp_write_checks>:
c000ed98:	83 ec 1c             	sub    esp,0x1c
c000ed9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eda4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eda8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edab:	83 f8 04             	cmp    eax,0x4
c000edae:	74 2c                	je     c000eddc <tcp_write_checks+0x44>
c000edb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edb4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edb7:	83 f8 07             	cmp    eax,0x7
c000edba:	74 20                	je     c000eddc <tcp_write_checks+0x44>
c000edbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edc3:	83 f8 02             	cmp    eax,0x2
c000edc6:	74 14                	je     c000eddc <tcp_write_checks+0x44>
c000edc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edcf:	83 f8 03             	cmp    eax,0x3
c000edd2:	74 08                	je     c000eddc <tcp_write_checks+0x44>
c000edd4:	b0 f3                	mov    al,0xf3
c000edd6:	e9 f9 00 00 00       	jmp    c000eed4 <tcp_write_checks+0x13c>
c000eddb:	90                   	nop
c000eddc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ede1:	85 c0                	test   eax,eax
c000ede3:	75 07                	jne    c000edec <tcp_write_checks+0x54>
c000ede5:	b0 00                	mov    al,0x0
c000ede7:	e9 e8 00 00 00       	jmp    c000eed4 <tcp_write_checks+0x13c>
c000edec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf0:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000edf4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000edf9:	0f b7 c0             	movzx  eax,ax
c000edfc:	39 c2                	cmp    edx,eax
c000edfe:	76 1c                	jbe    c000ee1c <tcp_write_checks+0x84>
c000ee00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee07:	83 c8 80             	or     eax,0xffffff80
c000ee0a:	88 c2                	mov    dl,al
c000ee0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee13:	b0 ff                	mov    al,0xff
c000ee15:	e9 ba 00 00 00       	jmp    c000eed4 <tcp_write_checks+0x13c>
c000ee1a:	66 90                	xchg   ax,ax
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee23:	0f b7 c0             	movzx  eax,ax
c000ee26:	83 f8 01             	cmp    eax,0x1
c000ee29:	77 11                	ja     c000ee3c <tcp_write_checks+0xa4>
c000ee2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee32:	0f b7 c0             	movzx  eax,ax
c000ee35:	3d fc ff 00 00       	cmp    eax,0xfffc
c000ee3a:	76 28                	jbe    c000ee64 <tcp_write_checks+0xcc>
c000ee3c:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ee42:	83 c0 01             	add    eax,0x1
c000ee45:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ee4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee4f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee52:	83 c8 80             	or     eax,0xffffff80
c000ee55:	88 c2                	mov    dl,al
c000ee57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee5e:	b0 ff                	mov    al,0xff
c000ee60:	eb 72                	jmp    c000eed4 <tcp_write_checks+0x13c>
c000ee62:	66 90                	xchg   ax,ax
c000ee64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee68:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee6b:	0f b7 c0             	movzx  eax,ax
c000ee6e:	85 c0                	test   eax,eax
c000ee70:	74 2e                	je     c000eea0 <tcp_write_checks+0x108>
c000ee72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee76:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee79:	85 c0                	test   eax,eax
c000ee7b:	75 53                	jne    c000eed0 <tcp_write_checks+0x138>
c000ee7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee81:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee84:	85 c0                	test   eax,eax
c000ee86:	75 48                	jne    c000eed0 <tcp_write_checks+0x138>
c000ee88:	83 ec 08             	sub    esp,0x8
c000ee8b:	68 30 03 03 c0       	push   0xc0030330
c000ee90:	68 e6 f6 02 c0       	push   0xc002f6e6
c000ee95:	e8 22 0b 01 00       	call   c001f9bc <CPrintf>
c000ee9a:	83 c4 10             	add    esp,0x10
c000ee9d:	eb 31                	jmp    c000eed0 <tcp_write_checks+0x138>
c000ee9f:	90                   	nop
c000eea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eea7:	85 c0                	test   eax,eax
c000eea9:	75 0d                	jne    c000eeb8 <tcp_write_checks+0x120>
c000eeab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeaf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eeb2:	85 c0                	test   eax,eax
c000eeb4:	74 1a                	je     c000eed0 <tcp_write_checks+0x138>
c000eeb6:	66 90                	xchg   ax,ax
c000eeb8:	83 ec 08             	sub    esp,0x8
c000eebb:	68 6c 03 03 c0       	push   0xc003036c
c000eec0:	68 e6 f6 02 c0       	push   0xc002f6e6
c000eec5:	e8 f2 0a 01 00       	call   c001f9bc <CPrintf>
c000eeca:	83 c4 10             	add    esp,0x10
c000eecd:	8d 76 00             	lea    esi,[esi+0x0]
c000eed0:	b0 00                	mov    al,0x0
c000eed2:	66 90                	xchg   ax,ax
c000eed4:	83 c4 1c             	add    esp,0x1c
c000eed7:	c3                   	ret    

c000eed8 <tcp_write>:
c000eed8:	56                   	push   esi
c000eed9:	53                   	push   ebx
c000eeda:	83 ec 54             	sub    esp,0x54
c000eedd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000eee1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000eee5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeea:	88 d0                	mov    al,dl
c000eeec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eef0:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000eef8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef00:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef08:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef10:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef18:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef1f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef24:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000ef29:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000ef30:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000ef37:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000ef3c:	75 1e                	jne    c000ef5c <tcp_write+0x84>
c000ef3e:	83 ec 08             	sub    esp,0x8
c000ef41:	68 a0 03 03 c0       	push   0xc00303a0
c000ef46:	68 e6 f6 02 c0       	push   0xc002f6e6
c000ef4b:	e8 6c 0a 01 00       	call   c001f9bc <CPrintf>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	b0 f2                	mov    al,0xf2
c000ef55:	e9 1e 08 00 00       	jmp    c000f778 <tcp_write+0x8a0>
c000ef5a:	66 90                	xchg   ax,ax
c000ef5c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef61:	83 ec 08             	sub    esp,0x8
c000ef64:	50                   	push   eax
c000ef65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ef69:	e8 2a fe ff ff       	call   c000ed98 <tcp_write_checks>
c000ef6e:	83 c4 10             	add    esp,0x10
c000ef71:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000ef75:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000ef7a:	85 c0                	test   eax,eax
c000ef7c:	74 0a                	je     c000ef88 <tcp_write+0xb0>
c000ef7e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000ef82:	e9 f1 07 00 00       	jmp    c000f778 <tcp_write+0x8a0>
c000ef87:	90                   	nop
c000ef88:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef8c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef8f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000ef94:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef98:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef9b:	85 c0                	test   eax,eax
c000ef9d:	0f 84 79 02 00 00    	je     c000f21c <tcp_write+0x344>
c000efa3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efa7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000efaa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000efae:	eb 0c                	jmp    c000efbc <tcp_write+0xe4>
c000efb0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000efba:	66 90                	xchg   ax,ax
c000efbc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efc0:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc2:	85 c0                	test   eax,eax
c000efc4:	75 ea                	jne    c000efb0 <tcp_write+0xd8>
c000efc6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efca:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000efcd:	0f b6 c0             	movzx  eax,al
c000efd0:	c1 e0 02             	shl    eax,0x2
c000efd3:	83 e0 04             	and    eax,0x4
c000efd6:	89 c2                	mov    edx,eax
c000efd8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efdc:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000efdf:	0f b6 c0             	movzx  eax,al
c000efe2:	83 e0 02             	and    eax,0x2
c000efe5:	74 09                	je     c000eff0 <tcp_write+0x118>
c000efe7:	b8 0c 00 00 00       	mov    eax,0xc
c000efec:	eb 0a                	jmp    c000eff8 <tcp_write+0x120>
c000efee:	66 90                	xchg   ax,ax
c000eff0:	b8 00 00 00 00       	mov    eax,0x0
c000eff5:	8d 76 00             	lea    esi,[esi+0x0]
c000eff8:	01 d0                	add    eax,edx
c000effa:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000efff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f003:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f006:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f00a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f00d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f012:	01 c8                	add    eax,ecx
c000f014:	89 d6                	mov    esi,edx
c000f016:	29 c6                	sub    esi,eax
c000f018:	89 f0                	mov    eax,esi
c000f01a:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f01f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f023:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f027:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f02c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f031:	0f b7 c0             	movzx  eax,ax
c000f034:	85 c0                	test   eax,eax
c000f036:	0f 84 84 00 00 00    	je     c000f0c0 <tcp_write+0x1e8>
c000f03c:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f041:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f046:	39 c2                	cmp    edx,eax
c000f048:	76 16                	jbe    c000f060 <tcp_write+0x188>
c000f04a:	83 ec 08             	sub    esp,0x8
c000f04d:	68 d4 03 03 c0       	push   0xc00303d4
c000f052:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f057:	e8 60 09 01 00       	call   c001f9bc <CPrintf>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	90                   	nop
c000f060:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f064:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f068:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f06d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f071:	0f b7 d8             	movzx  ebx,ax
c000f074:	0f b7 ca             	movzx  ecx,dx
c000f077:	39 cb                	cmp    ebx,ecx
c000f079:	76 05                	jbe    c000f080 <tcp_write+0x1a8>
c000f07b:	89 d0                	mov    eax,edx
c000f07d:	8d 76 00             	lea    esi,[esi+0x0]
c000f080:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f085:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f08a:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f08f:	01 d0                	add    eax,edx
c000f091:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f096:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f09b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0a0:	89 d6                	mov    esi,edx
c000f0a2:	29 c6                	sub    esi,eax
c000f0a4:	89 f0                	mov    eax,esi
c000f0a6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0ab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f0af:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0b4:	89 d6                	mov    esi,edx
c000f0b6:	29 c6                	sub    esi,eax
c000f0b8:	89 f0                	mov    eax,esi
c000f0ba:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f0bf:	90                   	nop
c000f0c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f0c5:	0f b7 c0             	movzx  eax,ax
c000f0c8:	85 c0                	test   eax,eax
c000f0ca:	74 24                	je     c000f0f0 <tcp_write+0x218>
c000f0cc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f0d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f0d6:	39 c2                	cmp    edx,eax
c000f0d8:	74 16                	je     c000f0f0 <tcp_write+0x218>
c000f0da:	83 ec 08             	sub    esp,0x8
c000f0dd:	68 98 05 03 c0       	push   0xc0030598
c000f0e2:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f0e7:	e8 d0 08 01 00       	call   c001f9bc <CPrintf>
c000f0ec:	83 c4 10             	add    esp,0x10
c000f0ef:	90                   	nop
c000f0f0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f0f5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f0fa:	39 c2                	cmp    edx,eax
c000f0fc:	0f 83 ca 03 00 00    	jae    c000f4cc <tcp_write+0x5f4>
c000f102:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f107:	85 c0                	test   eax,eax
c000f109:	0f 84 bd 03 00 00    	je     c000f4cc <tcp_write+0x5f4>
c000f10f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f113:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f116:	0f b7 c0             	movzx  eax,ax
c000f119:	85 c0                	test   eax,eax
c000f11b:	0f 84 ab 03 00 00    	je     c000f4cc <tcp_write+0x5f4>
c000f121:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f126:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f12b:	29 c2                	sub    edx,eax
c000f12d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f132:	39 c2                	cmp    edx,eax
c000f134:	0f 4e c2             	cmovle eax,edx
c000f137:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f13c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f140:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f144:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f149:	83 e0 01             	and    eax,0x1
c000f14c:	74 62                	je     c000f1b0 <tcp_write+0x2d8>
c000f14e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f153:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f158:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f15d:	83 ec 04             	sub    esp,0x4
c000f160:	6a 01                	push   0x1
c000f162:	51                   	push   ecx
c000f163:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f167:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f16b:	51                   	push   ecx
c000f16c:	52                   	push   edx
c000f16d:	50                   	push   eax
c000f16e:	6a 03                	push   0x3
c000f170:	e8 ef fa ff ff       	call   c000ec64 <tcp_pbuf_prealloc>
c000f175:	83 c4 20             	add    esp,0x20
c000f178:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f17c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f181:	0f 84 4d 05 00 00    	je     c000f6d4 <tcp_write+0x7fc>
c000f187:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f18c:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f191:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f195:	01 c1                	add    ecx,eax
c000f197:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f19b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f19e:	83 ec 04             	sub    esp,0x4
c000f1a1:	52                   	push   edx
c000f1a2:	51                   	push   ecx
c000f1a3:	50                   	push   eax
c000f1a4:	e8 d1 11 ff ff       	call   c000037a <memcpy>
c000f1a9:	83 c4 10             	add    esp,0x10
c000f1ac:	eb 3a                	jmp    c000f1e8 <tcp_write+0x310>
c000f1ae:	66 90                	xchg   ax,ax
c000f1b0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1b5:	83 ec 04             	sub    esp,0x4
c000f1b8:	6a 01                	push   0x1
c000f1ba:	50                   	push   eax
c000f1bb:	6a 03                	push   0x3
c000f1bd:	e8 9a 92 ff ff       	call   c000845c <pbuf_alloc>
c000f1c2:	83 c4 10             	add    esp,0x10
c000f1c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1c9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1ce:	0f 84 04 05 00 00    	je     c000f6d8 <tcp_write+0x800>
c000f1d4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f1d9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f1dd:	01 c2                	add    edx,eax
c000f1df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f1e6:	66 90                	xchg   ax,ax
c000f1e8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f1ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1f1:	01 d0                	add    eax,edx
c000f1f3:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f1f8:	83 ec 0c             	sub    esp,0xc
c000f1fb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f1ff:	e8 58 98 ff ff       	call   c0008a5c <pbuf_clen>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	0f b6 c0             	movzx  eax,al
c000f20a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f20e:	01 d0                	add    eax,edx
c000f210:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f215:	e9 b2 02 00 00       	jmp    c000f4cc <tcp_write+0x5f4>
c000f21a:	66 90                	xchg   ax,ax
c000f21c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f220:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f224:	0f b7 c0             	movzx  eax,ax
c000f227:	85 c0                	test   eax,eax
c000f229:	0f 84 9d 02 00 00    	je     c000f4cc <tcp_write+0x5f4>
c000f22f:	83 ec 08             	sub    esp,0x8
c000f232:	68 f4 03 03 c0       	push   0xc00303f4
c000f237:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f23c:	e8 7b 07 01 00       	call   c001f9bc <CPrintf>
c000f241:	83 c4 10             	add    esp,0x10
c000f244:	e9 83 02 00 00       	jmp    c000f4cc <tcp_write+0x5f4>
c000f249:	8d 76 00             	lea    esi,[esi+0x0]
c000f24c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f250:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f255:	89 d3                	mov    ebx,edx
c000f257:	29 c3                	sub    ebx,eax
c000f259:	89 d8                	mov    eax,ebx
c000f25b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f260:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f264:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f267:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f26c:	89 d6                	mov    esi,edx
c000f26e:	29 c6                	sub    esi,eax
c000f270:	89 f0                	mov    eax,esi
c000f272:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f277:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f27b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f280:	0f b7 d8             	movzx  ebx,ax
c000f283:	0f b7 ca             	movzx  ecx,dx
c000f286:	39 cb                	cmp    ebx,ecx
c000f288:	76 02                	jbe    c000f28c <tcp_write+0x3b4>
c000f28a:	89 d0                	mov    eax,edx
c000f28c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f291:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f296:	83 e0 01             	and    eax,0x1
c000f299:	0f 84 b1 00 00 00    	je     c000f350 <tcp_write+0x478>
c000f29f:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f2a4:	0f 94 c0             	sete   al
c000f2a7:	0f b6 d8             	movzx  ebx,al
c000f2aa:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f2af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f2b6:	0f b7 d0             	movzx  edx,ax
c000f2b9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2be:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f2c3:	01 f0                	add    eax,esi
c000f2c5:	0f b7 c0             	movzx  eax,ax
c000f2c8:	83 ec 04             	sub    esp,0x4
c000f2cb:	53                   	push   ebx
c000f2cc:	51                   	push   ecx
c000f2cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f2d1:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f2d5:	51                   	push   ecx
c000f2d6:	52                   	push   edx
c000f2d7:	50                   	push   eax
c000f2d8:	6a 00                	push   0x0
c000f2da:	e8 85 f9 ff ff       	call   c000ec64 <tcp_pbuf_prealloc>
c000f2df:	83 c4 20             	add    esp,0x20
c000f2e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f2eb:	0f 84 eb 03 00 00    	je     c000f6dc <tcp_write+0x804>
c000f2f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2f5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f2f9:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f2fe:	0f b7 c0             	movzx  eax,ax
c000f301:	39 c2                	cmp    edx,eax
c000f303:	76 17                	jbe    c000f31c <tcp_write+0x444>
c000f305:	83 ec 08             	sub    esp,0x8
c000f308:	68 24 04 03 c0       	push   0xc0030424
c000f30d:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f312:	e8 a5 06 01 00       	call   c001f9bc <CPrintf>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	66 90                	xchg   ax,ax
c000f31c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f321:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f326:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f32a:	01 d1                	add    ecx,edx
c000f32c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f330:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f333:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f338:	01 da                	add    edx,ebx
c000f33a:	83 ec 04             	sub    esp,0x4
c000f33d:	50                   	push   eax
c000f33e:	51                   	push   ecx
c000f33f:	52                   	push   edx
c000f340:	e8 35 10 ff ff       	call   c000037a <memcpy>
c000f345:	83 c4 10             	add    esp,0x10
c000f348:	e9 a7 00 00 00       	jmp    c000f3f4 <tcp_write+0x51c>
c000f34d:	8d 76 00             	lea    esi,[esi+0x0]
c000f350:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f355:	0f b7 c0             	movzx  eax,ax
c000f358:	85 c0                	test   eax,eax
c000f35a:	74 18                	je     c000f374 <tcp_write+0x49c>
c000f35c:	83 ec 08             	sub    esp,0x8
c000f35f:	68 b6 05 03 c0       	push   0xc00305b6
c000f364:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f369:	e8 4e 06 01 00       	call   c001f9bc <CPrintf>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	8d 76 00             	lea    esi,[esi+0x0]
c000f374:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f379:	83 ec 04             	sub    esp,0x4
c000f37c:	6a 01                	push   0x1
c000f37e:	50                   	push   eax
c000f37f:	6a 00                	push   0x0
c000f381:	e8 d6 90 ff ff       	call   c000845c <pbuf_alloc>
c000f386:	83 c4 10             	add    esp,0x10
c000f389:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f38d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f392:	0f 84 48 03 00 00    	je     c000f6e0 <tcp_write+0x808>
c000f398:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f39d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a1:	01 c2                	add    edx,eax
c000f3a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3aa:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	6a 00                	push   0x0
c000f3b4:	50                   	push   eax
c000f3b5:	6a 00                	push   0x0
c000f3b7:	e8 a0 90 ff ff       	call   c000845c <pbuf_alloc>
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f3c3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f3c8:	75 16                	jne    c000f3e0 <tcp_write+0x508>
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3d1:	e8 aa 8e ff ff       	call   c0008280 <pbuf_free>
c000f3d6:	83 c4 10             	add    esp,0x10
c000f3d9:	e9 0a 03 00 00       	jmp    c000f6e8 <tcp_write+0x810>
c000f3de:	66 90                	xchg   ax,ax
c000f3e0:	83 ec 08             	sub    esp,0x8
c000f3e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3eb:	e8 d4 96 ff ff       	call   c0008ac4 <pbuf_cat>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	90                   	nop
c000f3f4:	83 ec 0c             	sub    esp,0xc
c000f3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3fb:	e8 5c 96 ff ff       	call   c0008a5c <pbuf_clen>
c000f400:	83 c4 10             	add    esp,0x10
c000f403:	0f b6 c0             	movzx  eax,al
c000f406:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f40a:	01 d0                	add    eax,edx
c000f40c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f411:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f416:	83 f8 02             	cmp    eax,0x2
c000f419:	77 0d                	ja     c000f428 <tcp_write+0x550>
c000f41b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f420:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f425:	76 15                	jbe    c000f43c <tcp_write+0x564>
c000f427:	90                   	nop
c000f428:	83 ec 0c             	sub    esp,0xc
c000f42b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f42f:	e8 4c 8e ff ff       	call   c0008280 <pbuf_free>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	e9 ac 02 00 00       	jmp    c000f6e8 <tcp_write+0x810>
c000f43c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f441:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f445:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f448:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f44d:	01 ca                	add    edx,ecx
c000f44f:	83 ec 0c             	sub    esp,0xc
c000f452:	50                   	push   eax
c000f453:	52                   	push   edx
c000f454:	6a 00                	push   0x0
c000f456:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f45a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f45e:	e8 59 f6 ff ff       	call   c000eabc <tcp_create_segment>
c000f463:	83 c4 20             	add    esp,0x20
c000f466:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f46a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f46f:	0f 84 6f 02 00 00    	je     c000f6e4 <tcp_write+0x80c>
c000f475:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f47a:	75 0c                	jne    c000f488 <tcp_write+0x5b0>
c000f47c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f480:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f484:	eb 2a                	jmp    c000f4b0 <tcp_write+0x5d8>
c000f486:	66 90                	xchg   ax,ax
c000f488:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f48d:	75 15                	jne    c000f4a4 <tcp_write+0x5cc>
c000f48f:	83 ec 08             	sub    esp,0x8
c000f492:	68 c4 05 03 c0       	push   0xc00305c4
c000f497:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f49c:	e8 1b 05 01 00       	call   c001f9bc <CPrintf>
c000f4a1:	83 c4 10             	add    esp,0x10
c000f4a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f4a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f4ac:	89 10                	mov    DWORD PTR [eax],edx
c000f4ae:	66 90                	xchg   ax,ax
c000f4b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4b4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f4b8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f4bd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f4c2:	01 d0                	add    eax,edx
c000f4c4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f4d6:	39 c2                	cmp    edx,eax
c000f4d8:	0f 82 6e fd ff ff    	jb     c000f24c <tcp_write+0x374>
c000f4de:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f4e3:	85 c0                	test   eax,eax
c000f4e5:	0f 84 a1 00 00 00    	je     c000f58c <tcp_write+0x6b4>
c000f4eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f4ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4f6:	eb 74                	jmp    c000f56c <tcp_write+0x694>
c000f4f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f4ff:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f504:	01 d0                	add    eax,edx
c000f506:	89 c2                	mov    edx,eax
c000f508:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50c:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f510:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f514:	8b 00                	mov    eax,DWORD PTR [eax]
c000f516:	85 c0                	test   eax,eax
c000f518:	75 46                	jne    c000f560 <tcp_write+0x688>
c000f51a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f51f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f523:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f526:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f52a:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f52e:	0f b7 d2             	movzx  edx,dx
c000f531:	01 ca                	add    edx,ecx
c000f533:	83 ec 04             	sub    esp,0x4
c000f536:	50                   	push   eax
c000f537:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f53b:	52                   	push   edx
c000f53c:	e8 39 0e ff ff       	call   c000037a <memcpy>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f548:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f54c:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f551:	01 d0                	add    eax,edx
c000f553:	89 c2                	mov    edx,eax
c000f555:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f559:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f564:	8b 00                	mov    eax,DWORD PTR [eax]
c000f566:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f56a:	66 90                	xchg   ax,ax
c000f56c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f571:	75 85                	jne    c000f4f8 <tcp_write+0x620>
c000f573:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f57a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f57f:	01 d0                	add    eax,edx
c000f581:	89 c2                	mov    edx,eax
c000f583:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f587:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f58b:	90                   	nop
c000f58c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f591:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f595:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f599:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f59e:	74 50                	je     c000f5f0 <tcp_write+0x718>
c000f5a0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5a5:	75 15                	jne    c000f5bc <tcp_write+0x6e4>
c000f5a7:	83 ec 08             	sub    esp,0x8
c000f5aa:	68 64 04 03 c0       	push   0xc0030464
c000f5af:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f5b4:	e8 03 04 01 00       	call   c001f9bc <CPrintf>
c000f5b9:	83 c4 10             	add    esp,0x10
c000f5bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5c3:	83 ec 08             	sub    esp,0x8
c000f5c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f5ca:	50                   	push   eax
c000f5cb:	e8 f4 94 ff ff       	call   c0008ac4 <pbuf_cat>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f5da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f5de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5e1:	01 d0                	add    eax,edx
c000f5e3:	89 c2                	mov    edx,eax
c000f5e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5e9:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f5f0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5f5:	75 0d                	jne    c000f604 <tcp_write+0x72c>
c000f5f7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f5ff:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f602:	eb 0c                	jmp    c000f610 <tcp_write+0x738>
c000f604:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f608:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f60c:	89 10                	mov    DWORD PTR [eax],edx
c000f60e:	66 90                	xchg   ax,ax
c000f610:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f614:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f617:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f61c:	01 c2                	add    edx,eax
c000f61e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f622:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f625:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f629:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f62d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f631:	89 d3                	mov    ebx,edx
c000f633:	29 c3                	sub    ebx,eax
c000f635:	89 d8                	mov    eax,ebx
c000f637:	89 c2                	mov    edx,eax
c000f639:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f63d:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f641:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f645:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f649:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f64d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f651:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f654:	0f b7 c0             	movzx  eax,ax
c000f657:	85 c0                	test   eax,eax
c000f659:	74 2d                	je     c000f688 <tcp_write+0x7b0>
c000f65b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f65f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f662:	85 c0                	test   eax,eax
c000f664:	75 22                	jne    c000f688 <tcp_write+0x7b0>
c000f666:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f66a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f66d:	85 c0                	test   eax,eax
c000f66f:	75 17                	jne    c000f688 <tcp_write+0x7b0>
c000f671:	83 ec 08             	sub    esp,0x8
c000f674:	68 d5 05 03 c0       	push   0xc00305d5
c000f679:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f67e:	e8 39 03 01 00       	call   c001f9bc <CPrintf>
c000f683:	83 c4 10             	add    esp,0x10
c000f686:	66 90                	xchg   ax,ax
c000f688:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f68d:	74 3d                	je     c000f6cc <tcp_write+0x7f4>
c000f68f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f693:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f696:	85 c0                	test   eax,eax
c000f698:	74 32                	je     c000f6cc <tcp_write+0x7f4>
c000f69a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f69f:	83 e0 02             	and    eax,0x2
c000f6a2:	75 28                	jne    c000f6cc <tcp_write+0x7f4>
c000f6a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6ab:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f6af:	83 ec 0c             	sub    esp,0xc
c000f6b2:	6a 08                	push   0x8
c000f6b4:	e8 63 15 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f6b9:	83 c4 10             	add    esp,0x10
c000f6bc:	89 c2                	mov    edx,eax
c000f6be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6c5:	09 da                	or     edx,ebx
c000f6c7:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f6cb:	90                   	nop
c000f6cc:	b0 00                	mov    al,0x0
c000f6ce:	e9 a5 00 00 00       	jmp    c000f778 <tcp_write+0x8a0>
c000f6d3:	90                   	nop
c000f6d4:	90                   	nop
c000f6d5:	eb 11                	jmp    c000f6e8 <tcp_write+0x810>
c000f6d7:	90                   	nop
c000f6d8:	90                   	nop
c000f6d9:	eb 0d                	jmp    c000f6e8 <tcp_write+0x810>
c000f6db:	90                   	nop
c000f6dc:	90                   	nop
c000f6dd:	eb 09                	jmp    c000f6e8 <tcp_write+0x810>
c000f6df:	90                   	nop
c000f6e0:	90                   	nop
c000f6e1:	eb 05                	jmp    c000f6e8 <tcp_write+0x810>
c000f6e3:	90                   	nop
c000f6e4:	90                   	nop
c000f6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6e8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6ec:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f6ef:	83 c8 80             	or     eax,0xffffff80
c000f6f2:	88 c2                	mov    dl,al
c000f6f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6f8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f6fb:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f701:	83 c0 01             	add    eax,0x1
c000f704:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f70a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f70f:	74 0f                	je     c000f720 <tcp_write+0x848>
c000f711:	83 ec 0c             	sub    esp,0xc
c000f714:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f718:	e8 63 8b ff ff       	call   c0008280 <pbuf_free>
c000f71d:	83 c4 10             	add    esp,0x10
c000f720:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f725:	74 11                	je     c000f738 <tcp_write+0x860>
c000f727:	83 ec 0c             	sub    esp,0xc
c000f72a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f72e:	e8 1d a8 ff ff       	call   c0009f50 <tcp_segs_free>
c000f733:	83 c4 10             	add    esp,0x10
c000f736:	66 90                	xchg   ax,ax
c000f738:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f73c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f73f:	0f b7 c0             	movzx  eax,ax
c000f742:	85 c0                	test   eax,eax
c000f744:	74 2e                	je     c000f774 <tcp_write+0x89c>
c000f746:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f74a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f74d:	85 c0                	test   eax,eax
c000f74f:	75 23                	jne    c000f774 <tcp_write+0x89c>
c000f751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f755:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f758:	85 c0                	test   eax,eax
c000f75a:	75 18                	jne    c000f774 <tcp_write+0x89c>
c000f75c:	83 ec 08             	sub    esp,0x8
c000f75f:	68 d5 05 03 c0       	push   0xc00305d5
c000f764:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f769:	e8 4e 02 01 00       	call   c001f9bc <CPrintf>
c000f76e:	83 c4 10             	add    esp,0x10
c000f771:	8d 76 00             	lea    esi,[esi+0x0]
c000f774:	b0 ff                	mov    al,0xff
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 c4 54             	add    esp,0x54
c000f77b:	5b                   	pop    ebx
c000f77c:	5e                   	pop    esi
c000f77d:	c3                   	ret    
c000f77e:	66 90                	xchg   ax,ax

c000f780 <tcp_enqueue_flags>:
c000f780:	83 ec 3c             	sub    esp,0x3c
c000f783:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f787:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f78b:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f790:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f795:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f79a:	83 e0 03             	and    eax,0x3
c000f79d:	75 15                	jne    c000f7b4 <tcp_enqueue_flags+0x34>
c000f79f:	83 ec 08             	sub    esp,0x8
c000f7a2:	68 9c 04 03 c0       	push   0xc003049c
c000f7a7:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f7ac:	e8 0b 02 01 00       	call   c001f9bc <CPrintf>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7b8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f7bb:	0f b7 c0             	movzx  eax,ax
c000f7be:	83 f8 01             	cmp    eax,0x1
c000f7c1:	77 11                	ja     c000f7d4 <tcp_enqueue_flags+0x54>
c000f7c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7c7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f7ca:	0f b7 c0             	movzx  eax,ax
c000f7cd:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f7d2:	76 2c                	jbe    c000f800 <tcp_enqueue_flags+0x80>
c000f7d4:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f7da:	83 c0 01             	add    eax,0x1
c000f7dd:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f7e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7e7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f7ea:	83 c8 80             	or     eax,0xffffff80
c000f7ed:	88 c2                	mov    dl,al
c000f7ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7f3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f7f6:	b0 ff                	mov    al,0xff
c000f7f8:	e9 6f 02 00 00       	jmp    c000fa6c <tcp_enqueue_flags+0x2ec>
c000f7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f800:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f805:	83 e0 02             	and    eax,0x2
c000f808:	74 06                	je     c000f810 <tcp_enqueue_flags+0x90>
c000f80a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f80f:	90                   	nop
c000f810:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f815:	c1 e0 02             	shl    eax,0x2
c000f818:	83 e0 04             	and    eax,0x4
c000f81b:	88 c2                	mov    dl,al
c000f81d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f822:	83 e0 02             	and    eax,0x2
c000f825:	74 05                	je     c000f82c <tcp_enqueue_flags+0xac>
c000f827:	b0 0c                	mov    al,0xc
c000f829:	eb 05                	jmp    c000f830 <tcp_enqueue_flags+0xb0>
c000f82b:	90                   	nop
c000f82c:	b0 00                	mov    al,0x0
c000f82e:	66 90                	xchg   ax,ax
c000f830:	01 d0                	add    eax,edx
c000f832:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f836:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f83a:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f83e:	0f b7 c0             	movzx  eax,ax
c000f841:	85 c0                	test   eax,eax
c000f843:	75 17                	jne    c000f85c <tcp_enqueue_flags+0xdc>
c000f845:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f84b:	83 c0 01             	add    eax,0x1
c000f84e:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f854:	b0 ff                	mov    al,0xff
c000f856:	e9 11 02 00 00       	jmp    c000fa6c <tcp_enqueue_flags+0x2ec>
c000f85b:	90                   	nop
c000f85c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f861:	83 ec 04             	sub    esp,0x4
c000f864:	6a 00                	push   0x0
c000f866:	50                   	push   eax
c000f867:	6a 00                	push   0x0
c000f869:	e8 ee 8b ff ff       	call   c000845c <pbuf_alloc>
c000f86e:	83 c4 10             	add    esp,0x10
c000f871:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f875:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f87a:	75 2c                	jne    c000f8a8 <tcp_enqueue_flags+0x128>
c000f87c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f880:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f883:	83 c8 80             	or     eax,0xffffff80
c000f886:	88 c2                	mov    dl,al
c000f888:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f88c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f88f:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f895:	83 c0 01             	add    eax,0x1
c000f898:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f89e:	b0 ff                	mov    al,0xff
c000f8a0:	e9 c7 01 00 00       	jmp    c000fa6c <tcp_enqueue_flags+0x2ec>
c000f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8ac:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f8b0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8b5:	0f b7 d2             	movzx  edx,dx
c000f8b8:	0f b7 c0             	movzx  eax,ax
c000f8bb:	39 c2                	cmp    edx,eax
c000f8bd:	73 15                	jae    c000f8d4 <tcp_enqueue_flags+0x154>
c000f8bf:	83 ec 08             	sub    esp,0x8
c000f8c2:	68 f4 04 03 c0       	push   0xc00304f4
c000f8c7:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f8cc:	e8 eb 00 01 00       	call   c001f9bc <CPrintf>
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f8d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8dd:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f8e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f8e5:	83 ec 0c             	sub    esp,0xc
c000f8e8:	51                   	push   ecx
c000f8e9:	52                   	push   edx
c000f8ea:	50                   	push   eax
c000f8eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f8ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f8f3:	e8 c4 f1 ff ff       	call   c000eabc <tcp_create_segment>
c000f8f8:	83 c4 20             	add    esp,0x20
c000f8fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f8ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f904:	75 2a                	jne    c000f930 <tcp_enqueue_flags+0x1b0>
c000f906:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f90a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f90d:	83 c8 80             	or     eax,0xffffff80
c000f910:	88 c2                	mov    dl,al
c000f912:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f916:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f919:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f91f:	83 c0 01             	add    eax,0x1
c000f922:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f928:	b0 ff                	mov    al,0xff
c000f92a:	e9 3d 01 00 00       	jmp    c000fa6c <tcp_enqueue_flags+0x2ec>
c000f92f:	90                   	nop
c000f930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f934:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f937:	0f b7 c0             	movzx  eax,ax
c000f93a:	85 c0                	test   eax,eax
c000f93c:	74 16                	je     c000f954 <tcp_enqueue_flags+0x1d4>
c000f93e:	83 ec 08             	sub    esp,0x8
c000f941:	68 30 05 03 c0       	push   0xc0030530
c000f946:	68 e6 f6 02 c0       	push   0xc002f6e6
c000f94b:	e8 6c 00 01 00       	call   c001f9bc <CPrintf>
c000f950:	83 c4 10             	add    esp,0x10
c000f953:	90                   	nop
c000f954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f958:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f95b:	85 c0                	test   eax,eax
c000f95d:	75 0d                	jne    c000f96c <tcp_enqueue_flags+0x1ec>
c000f95f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f963:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f967:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f96a:	eb 30                	jmp    c000f99c <tcp_enqueue_flags+0x21c>
c000f96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f970:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f973:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f977:	eb 0f                	jmp    c000f988 <tcp_enqueue_flags+0x208>
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f980:	8b 00                	mov    eax,DWORD PTR [eax]
c000f982:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f986:	66 90                	xchg   ax,ax
c000f988:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98e:	85 c0                	test   eax,eax
c000f990:	75 ea                	jne    c000f97c <tcp_enqueue_flags+0x1fc>
c000f992:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f99a:	89 10                	mov    DWORD PTR [eax],edx
c000f99c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9a0:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f9a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9ab:	83 e0 02             	and    eax,0x2
c000f9ae:	75 0c                	jne    c000f9bc <tcp_enqueue_flags+0x23c>
c000f9b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9b5:	83 e0 01             	and    eax,0x1
c000f9b8:	74 2a                	je     c000f9e4 <tcp_enqueue_flags+0x264>
c000f9ba:	66 90                	xchg   ax,ax
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000f9c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f9c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ca:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f9cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9d1:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f9d5:	83 e8 01             	sub    eax,0x1
c000f9d8:	89 c2                	mov    edx,eax
c000f9da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9de:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f9e2:	66 90                	xchg   ax,ax
c000f9e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9e9:	83 e0 01             	and    eax,0x1
c000f9ec:	74 16                	je     c000fa04 <tcp_enqueue_flags+0x284>
c000f9ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9f2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f5:	83 c8 20             	or     eax,0x20
c000f9f8:	88 c2                	mov    dl,al
c000f9fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fe:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa01:	8d 76 00             	lea    esi,[esi+0x0]
c000fa04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa0b:	83 ec 0c             	sub    esp,0xc
c000fa0e:	50                   	push   eax
c000fa0f:	e8 48 90 ff ff       	call   c0008a5c <pbuf_clen>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	88 c1                	mov    cl,al
c000fa19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa1d:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa20:	0f b6 c1             	movzx  eax,cl
c000fa23:	01 d0                	add    eax,edx
c000fa25:	89 c2                	mov    edx,eax
c000fa27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa2b:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fa2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa33:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa36:	0f b7 c0             	movzx  eax,ax
c000fa39:	85 c0                	test   eax,eax
c000fa3b:	74 2b                	je     c000fa68 <tcp_enqueue_flags+0x2e8>
c000fa3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa41:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fa44:	85 c0                	test   eax,eax
c000fa46:	75 20                	jne    c000fa68 <tcp_enqueue_flags+0x2e8>
c000fa48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa4c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa4f:	85 c0                	test   eax,eax
c000fa51:	75 15                	jne    c000fa68 <tcp_enqueue_flags+0x2e8>
c000fa53:	83 ec 08             	sub    esp,0x8
c000fa56:	68 5c 05 03 c0       	push   0xc003055c
c000fa5b:	68 e6 f6 02 c0       	push   0xc002f6e6
c000fa60:	e8 57 ff 00 00       	call   c001f9bc <CPrintf>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	b0 00                	mov    al,0x0
c000fa6a:	66 90                	xchg   ax,ax
c000fa6c:	83 c4 3c             	add    esp,0x3c
c000fa6f:	c3                   	ret    

c000fa70 <tcp_send_fin>:
c000fa70:	53                   	push   ebx
c000fa71:	83 ec 18             	sub    esp,0x18
c000fa74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa7b:	85 c0                	test   eax,eax
c000fa7d:	74 71                	je     c000faf0 <tcp_send_fin+0x80>
c000fa7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa83:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa8a:	eb 0c                	jmp    c000fa98 <tcp_send_fin+0x28>
c000fa8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa96:	66 90                	xchg   ax,ax
c000fa98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9e:	85 c0                	test   eax,eax
c000faa0:	75 ea                	jne    c000fa8c <tcp_send_fin+0x1c>
c000faa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faa6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000faa9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000faad:	0f b7 c0             	movzx  eax,ax
c000fab0:	83 ec 0c             	sub    esp,0xc
c000fab3:	50                   	push   eax
c000fab4:	e8 63 11 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fab9:	83 c4 10             	add    esp,0x10
c000fabc:	0f b7 c0             	movzx  eax,ax
c000fabf:	83 e0 07             	and    eax,0x7
c000fac2:	75 2c                	jne    c000faf0 <tcp_send_fin+0x80>
c000fac4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fac8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000facb:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000facf:	83 ec 0c             	sub    esp,0xc
c000fad2:	6a 01                	push   0x1
c000fad4:	e8 43 11 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	89 c2                	mov    edx,eax
c000fade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fae5:	09 da                	or     edx,ebx
c000fae7:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000faeb:	b0 00                	mov    al,0x0
c000faed:	eb 15                	jmp    c000fb04 <tcp_send_fin+0x94>
c000faef:	90                   	nop
c000faf0:	83 ec 08             	sub    esp,0x8
c000faf3:	6a 01                	push   0x1
c000faf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faf9:	e8 82 fc ff ff       	call   c000f780 <tcp_enqueue_flags>
c000fafe:	83 c4 10             	add    esp,0x10
c000fb01:	8d 76 00             	lea    esi,[esi+0x0]
c000fb04:	83 c4 18             	add    esp,0x18
c000fb07:	5b                   	pop    ebx
c000fb08:	c3                   	ret    
c000fb09:	8d 76 00             	lea    esi,[esi+0x0]

c000fb0c <tcp_send_empty_ack>:
c000fb0c:	53                   	push   ebx
c000fb0d:	83 ec 18             	sub    esp,0x18
c000fb10:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	50                   	push   eax
c000fb20:	e8 1b 11 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	89 c2                	mov    edx,eax
c000fb2a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb2f:	52                   	push   edx
c000fb30:	6a 00                	push   0x0
c000fb32:	50                   	push   eax
c000fb33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb37:	e8 1c ee ff ff       	call   c000e958 <tcp_output_alloc_header>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb43:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fb48:	75 0a                	jne    c000fb54 <tcp_send_empty_ack+0x48>
c000fb4a:	b0 fe                	mov    al,0xfe
c000fb4c:	e9 9b 00 00 00       	jmp    c000fbec <tcp_send_empty_ack+0xe0>
c000fb51:	8d 76 00             	lea    esi,[esi+0x0]
c000fb54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb66:	83 e0 fc             	and    eax,0xfffffffc
c000fb69:	88 c2                	mov    dl,al
c000fb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb79:	0f b7 d0             	movzx  edx,ax
c000fb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb80:	8d 48 04             	lea    ecx,[eax+0x4]
c000fb83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb87:	83 ec 0c             	sub    esp,0xc
c000fb8a:	52                   	push   edx
c000fb8b:	6a 06                	push   0x6
c000fb8d:	51                   	push   ecx
c000fb8e:	50                   	push   eax
c000fb8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb93:	e8 a4 35 00 00       	call   c001313c <inet_chksum_pseudo>
c000fb98:	83 c4 20             	add    esp,0x20
c000fb9b:	89 c2                	mov    edx,eax
c000fb9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fba1:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba9:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fbac:	0f b6 c8             	movzx  ecx,al
c000fbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb3:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fbb6:	0f b6 d0             	movzx  edx,al
c000fbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbbd:	8d 58 04             	lea    ebx,[eax+0x4]
c000fbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc4:	83 ec 08             	sub    esp,0x8
c000fbc7:	6a 06                	push   0x6
c000fbc9:	51                   	push   ecx
c000fbca:	52                   	push   edx
c000fbcb:	53                   	push   ebx
c000fbcc:	50                   	push   eax
c000fbcd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbd1:	e8 a6 41 00 00       	call   c0013d7c <ip_output>
c000fbd6:	83 c4 20             	add    esp,0x20
c000fbd9:	83 ec 0c             	sub    esp,0xc
c000fbdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbe0:	e8 9b 86 ff ff       	call   c0008280 <pbuf_free>
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	b0 00                	mov    al,0x0
c000fbea:	66 90                	xchg   ax,ax
c000fbec:	83 c4 18             	add    esp,0x18
c000fbef:	5b                   	pop    ebx
c000fbf0:	c3                   	ret    
c000fbf1:	8d 76 00             	lea    esi,[esi+0x0]

c000fbf4 <tcp_output_segment>:
c000fbf4:	56                   	push   esi
c000fbf5:	53                   	push   ebx
c000fbf6:	83 ec 14             	sub    esp,0x14
c000fbf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbfd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc04:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc07:	83 ec 0c             	sub    esp,0xc
c000fc0a:	50                   	push   eax
c000fc0b:	e8 30 10 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc1a:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc1e:	0f b7 c0             	movzx  eax,ax
c000fc21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc25:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	50                   	push   eax
c000fc2c:	e8 eb 0f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fc38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fc3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc43:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc47:	0f b7 c0             	movzx  eax,ax
c000fc4a:	01 c2                	add    edx,eax
c000fc4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc50:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc5a:	83 c0 14             	add    eax,0x14
c000fc5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc65:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc68:	0f b6 c0             	movzx  eax,al
c000fc6b:	83 e0 01             	and    eax,0x1
c000fc6e:	74 10                	je     c000fc80 <tcp_output_segment+0x8c>
c000fc70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc74:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fc7a:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fc7f:	90                   	nop
c000fc80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc84:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fc88:	98                   	cwde   
c000fc89:	83 f8 ff             	cmp    eax,0xffffffff
c000fc8c:	75 0a                	jne    c000fc98 <tcp_output_segment+0xa4>
c000fc8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc92:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fc98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc9c:	85 c0                	test   eax,eax
c000fc9e:	74 0c                	je     c000fcac <tcp_output_segment+0xb8>
c000fca0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca6:	85 c0                	test   eax,eax
c000fca8:	75 32                	jne    c000fcdc <tcp_output_segment+0xe8>
c000fcaa:	66 90                	xchg   ax,ax
c000fcac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcb0:	83 c0 04             	add    eax,0x4
c000fcb3:	83 ec 0c             	sub    esp,0xc
c000fcb6:	50                   	push   eax
c000fcb7:	e8 0c 39 00 00       	call   c00135c8 <ip_route>
c000fcbc:	83 c4 10             	add    esp,0x10
c000fcbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fcc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcc8:	0f 84 46 01 00 00    	je     c000fe14 <tcp_output_segment+0x220>
c000fcce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcd2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fcd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd9:	89 10                	mov    DWORD PTR [eax],edx
c000fcdb:	90                   	nop
c000fcdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fce0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fce3:	85 c0                	test   eax,eax
c000fce5:	75 2d                	jne    c000fd14 <tcp_output_segment+0x120>
c000fce7:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fced:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fcf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	50                   	push   eax
c000fd02:	e8 39 0f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	89 c2                	mov    edx,eax
c000fd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd10:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd13:	90                   	nop
c000fd14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd18:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd25:	29 c2                	sub    edx,eax
c000fd27:	89 d0                	mov    eax,edx
c000fd29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd35:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000fd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd40:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fd45:	89 ce                	mov    esi,ecx
c000fd47:	29 d6                	sub    esi,edx
c000fd49:	89 f2                	mov    edx,esi
c000fd4b:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000fd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd56:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000fd59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd60:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fd65:	89 ce                	mov    esi,ecx
c000fd67:	29 d6                	sub    esi,edx
c000fd69:	89 f2                	mov    edx,esi
c000fd6b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000fd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd7a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fd7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd87:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fd8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd97:	0f b7 c8             	movzx  ecx,ax
c000fd9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd9e:	8d 70 04             	lea    esi,[eax+0x4]
c000fda1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fdb0:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fdb3:	83 ec 0c             	sub    esp,0xc
c000fdb6:	51                   	push   ecx
c000fdb7:	6a 06                	push   0x6
c000fdb9:	56                   	push   esi
c000fdba:	52                   	push   edx
c000fdbb:	50                   	push   eax
c000fdbc:	e8 7b 33 00 00       	call   c001313c <inet_chksum_pseudo>
c000fdc1:	83 c4 20             	add    esp,0x20
c000fdc4:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fdc8:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fdce:	83 c0 01             	add    eax,0x1
c000fdd1:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fdd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fddb:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdde:	0f b6 d8             	movzx  ebx,al
c000fde1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fde5:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fde8:	0f b6 c8             	movzx  ecx,al
c000fdeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdef:	8d 70 04             	lea    esi,[eax+0x4]
c000fdf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fdf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdfd:	83 ec 08             	sub    esp,0x8
c000fe00:	6a 06                	push   0x6
c000fe02:	53                   	push   ebx
c000fe03:	51                   	push   ecx
c000fe04:	56                   	push   esi
c000fe05:	52                   	push   edx
c000fe06:	50                   	push   eax
c000fe07:	e8 70 3f 00 00       	call   c0013d7c <ip_output>
c000fe0c:	83 c4 20             	add    esp,0x20
c000fe0f:	eb 07                	jmp    c000fe18 <tcp_output_segment+0x224>
c000fe11:	8d 76 00             	lea    esi,[esi+0x0]
c000fe14:	90                   	nop
c000fe15:	8d 76 00             	lea    esi,[esi+0x0]
c000fe18:	83 c4 14             	add    esp,0x14
c000fe1b:	5b                   	pop    ebx
c000fe1c:	5e                   	pop    esi
c000fe1d:	c3                   	ret    
c000fe1e:	66 90                	xchg   ax,ax

c000fe20 <tcp_output>:
c000fe20:	56                   	push   esi
c000fe21:	53                   	push   ebx
c000fe22:	83 ec 24             	sub    esp,0x24
c000fe25:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe2a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe2e:	75 08                	jne    c000fe38 <tcp_output+0x18>
c000fe30:	b0 00                	mov    al,0x0
c000fe32:	e9 6d 04 00 00       	jmp    c00102a4 <tcp_output+0x484>
c000fe37:	90                   	nop
c000fe38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe3c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000fe40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe44:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000fe47:	89 c8                	mov    eax,ecx
c000fe49:	0f b7 d8             	movzx  ebx,ax
c000fe4c:	0f b7 ca             	movzx  ecx,dx
c000fe4f:	39 cb                	cmp    ebx,ecx
c000fe51:	76 05                	jbe    c000fe58 <tcp_output+0x38>
c000fe53:	89 d0                	mov    eax,edx
c000fe55:	8d 76 00             	lea    esi,[esi+0x0]
c000fe58:	0f b7 c0             	movzx  eax,ax
c000fe5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe63:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fe66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe6e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe71:	0f b6 c0             	movzx  eax,al
c000fe74:	83 e0 02             	and    eax,0x2
c000fe77:	74 4f                	je     c000fec8 <tcp_output+0xa8>
c000fe79:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fe7e:	74 34                	je     c000feb4 <tcp_output+0x94>
c000fe80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe8a:	83 ec 0c             	sub    esp,0xc
c000fe8d:	50                   	push   eax
c000fe8e:	e8 ad 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	89 c2                	mov    edx,eax
c000fe98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe9c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000fe9f:	29 c2                	sub    edx,eax
c000fea1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fea5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fea8:	0f b7 c0             	movzx  eax,ax
c000feab:	01 d0                	add    eax,edx
c000fead:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000feb1:	73 15                	jae    c000fec8 <tcp_output+0xa8>
c000feb3:	90                   	nop
c000feb4:	83 ec 0c             	sub    esp,0xc
c000feb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000febb:	e8 4c fc ff ff       	call   c000fb0c <tcp_send_empty_ack>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	e9 dc 03 00 00       	jmp    c00102a4 <tcp_output+0x484>
c000fec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fecc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fecf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fed3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fed8:	0f 84 e6 02 00 00    	je     c00101c4 <tcp_output+0x3a4>
c000fede:	eb 0c                	jmp    c000feec <tcp_output+0xcc>
c000fee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fee4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feea:	66 90                	xchg   ax,ax
c000feec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fef0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef2:	85 c0                	test   eax,eax
c000fef4:	75 ea                	jne    c000fee0 <tcp_output+0xc0>
c000fef6:	e9 c9 02 00 00       	jmp    c00101c4 <tcp_output+0x3a4>
c000fefb:	90                   	nop
c000fefc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff03:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff07:	0f b7 c0             	movzx  eax,ax
c000ff0a:	83 ec 0c             	sub    esp,0xc
c000ff0d:	50                   	push   eax
c000ff0e:	e8 09 0d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	0f b7 c0             	movzx  eax,ax
c000ff19:	83 e0 04             	and    eax,0x4
c000ff1c:	74 16                	je     c000ff34 <tcp_output+0x114>
c000ff1e:	83 ec 08             	sub    esp,0x8
c000ff21:	68 f3 05 03 c0       	push   0xc00305f3
c000ff26:	68 e6 f6 02 c0       	push   0xc002f6e6
c000ff2b:	e8 8c fa 00 00       	call   c001f9bc <CPrintf>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	90                   	nop
c000ff34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	74 45                	je     c000ff84 <tcp_output+0x164>
c000ff3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff43:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff46:	0f b6 c0             	movzx  eax,al
c000ff49:	83 e0 44             	and    eax,0x44
c000ff4c:	75 36                	jne    c000ff84 <tcp_output+0x164>
c000ff4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff52:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff55:	85 c0                	test   eax,eax
c000ff57:	74 33                	je     c000ff8c <tcp_output+0x16c>
c000ff59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff5d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff60:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff62:	85 c0                	test   eax,eax
c000ff64:	75 1e                	jne    c000ff84 <tcp_output+0x164>
c000ff66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff6d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff77:	0f b7 d2             	movzx  edx,dx
c000ff7a:	0f b7 c0             	movzx  eax,ax
c000ff7d:	39 c2                	cmp    edx,eax
c000ff7f:	72 0b                	jb     c000ff8c <tcp_output+0x16c>
c000ff81:	8d 76 00             	lea    esi,[esi+0x0]
c000ff84:	b8 01 00 00 00       	mov    eax,0x1
c000ff89:	eb 09                	jmp    c000ff94 <tcp_output+0x174>
c000ff8b:	90                   	nop
c000ff8c:	b8 00 00 00 00       	mov    eax,0x0
c000ff91:	8d 76 00             	lea    esi,[esi+0x0]
c000ff94:	85 c0                	test   eax,eax
c000ff96:	75 18                	jne    c000ffb0 <tcp_output+0x190>
c000ff98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff9c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff9f:	0f b6 c0             	movzx  eax,al
c000ffa2:	25 a0 00 00 00       	and    eax,0xa0
c000ffa7:	0f 84 57 02 00 00    	je     c0010204 <tcp_output+0x3e4>
c000ffad:	8d 76 00             	lea    esi,[esi+0x0]
c000ffb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000ffbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ffc4:	83 f8 02             	cmp    eax,0x2
c000ffc7:	74 3b                	je     c0010004 <tcp_output+0x1e4>
c000ffc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ffd0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	6a 10                	push   0x10
c000ffd9:	e8 3e 0c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	89 c2                	mov    edx,eax
c000ffe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffe7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ffea:	09 da                	or     edx,ebx
c000ffec:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fff4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fff7:	83 e0 fc             	and    eax,0xfffffffc
c000fffa:	88 c2                	mov    dl,al
c000fffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010000:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010003:	90                   	nop
c0010004:	83 ec 08             	sub    esp,0x8
c0010007:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001000b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001000f:	e8 e0 fb ff ff       	call   c000fbf4 <tcp_output_segment>
c0010014:	83 c4 10             	add    esp,0x10
c0010017:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001001e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010021:	83 ec 0c             	sub    esp,0xc
c0010024:	50                   	push   eax
c0010025:	e8 16 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	89 c3                	mov    ebx,eax
c001002f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010033:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010036:	0f b7 f0             	movzx  esi,ax
c0010039:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001003d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010040:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010044:	0f b7 c0             	movzx  eax,ax
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	50                   	push   eax
c001004b:	e8 cc 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	0f b7 c0             	movzx  eax,ax
c0010056:	83 e0 03             	and    eax,0x3
c0010059:	0f 95 c0             	setne  al
c001005c:	0f b6 c0             	movzx  eax,al
c001005f:	01 f0                	add    eax,esi
c0010061:	01 d8                	add    eax,ebx
c0010063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001006e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010072:	79 0c                	jns    c0010080 <tcp_output+0x260>
c0010074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001007c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c001007f:	90                   	nop
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010087:	0f b7 d8             	movzx  ebx,ax
c001008a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001008e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010091:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010095:	0f b7 c0             	movzx  eax,ax
c0010098:	83 ec 0c             	sub    esp,0xc
c001009b:	50                   	push   eax
c001009c:	e8 7b 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	0f b7 c0             	movzx  eax,ax
c00100a7:	83 e0 03             	and    eax,0x3
c00100aa:	0f 95 c0             	setne  al
c00100ad:	0f b6 c0             	movzx  eax,al
c00100b0:	01 d8                	add    eax,ebx
c00100b2:	85 c0                	test   eax,eax
c00100b4:	0f 8e ee 00 00 00    	jle    c00101a8 <tcp_output+0x388>
c00100ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cb:	85 c0                	test   eax,eax
c00100cd:	75 19                	jne    c00100e8 <tcp_output+0x2c8>
c00100cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00100d7:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00100da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100e2:	e9 d1 00 00 00       	jmp    c00101b8 <tcp_output+0x398>
c00100e7:	90                   	nop
c00100e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100f2:	83 ec 0c             	sub    esp,0xc
c00100f5:	50                   	push   eax
c00100f6:	e8 45 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	89 c3                	mov    ebx,eax
c0010100:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010104:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010107:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 2d 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	29 c3                	sub    ebx,eax
c0010118:	89 d8                	mov    eax,ebx
c001011a:	79 74                	jns    c0010190 <tcp_output+0x370>
c001011c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010120:	83 c0 7c             	add    eax,0x7c
c0010123:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010127:	eb 0f                	jmp    c0010138 <tcp_output+0x318>
c0010129:	8d 76 00             	lea    esi,[esi+0x0]
c001012c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010130:	8b 00                	mov    eax,DWORD PTR [eax]
c0010132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010136:	66 90                	xchg   ax,ax
c0010138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013c:	8b 00                	mov    eax,DWORD PTR [eax]
c001013e:	85 c0                	test   eax,eax
c0010140:	74 36                	je     c0010178 <tcp_output+0x358>
c0010142:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010146:	8b 00                	mov    eax,DWORD PTR [eax]
c0010148:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001014b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001014e:	83 ec 0c             	sub    esp,0xc
c0010151:	50                   	push   eax
c0010152:	e8 e9 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010157:	83 c4 10             	add    esp,0x10
c001015a:	89 c3                	mov    ebx,eax
c001015c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010160:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010163:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010166:	83 ec 0c             	sub    esp,0xc
c0010169:	50                   	push   eax
c001016a:	e8 d1 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001016f:	83 c4 10             	add    esp,0x10
c0010172:	29 c3                	sub    ebx,eax
c0010174:	89 d8                	mov    eax,ebx
c0010176:	78 b4                	js     c001012c <tcp_output+0x30c>
c0010178:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001017c:	8b 10                	mov    edx,DWORD PTR [eax]
c001017e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010182:	89 10                	mov    DWORD PTR [eax],edx
c0010184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010188:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001018c:	89 10                	mov    DWORD PTR [eax],edx
c001018e:	eb 28                	jmp    c00101b8 <tcp_output+0x398>
c0010190:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010194:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010198:	89 10                	mov    DWORD PTR [eax],edx
c001019a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001019e:	8b 00                	mov    eax,DWORD PTR [eax]
c00101a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101a4:	eb 12                	jmp    c00101b8 <tcp_output+0x398>
c00101a6:	66 90                	xchg   ax,ax
c00101a8:	83 ec 0c             	sub    esp,0xc
c00101ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101af:	e8 58 9d ff ff       	call   c0009f0c <tcp_seg_free>
c00101b4:	83 c4 10             	add    esp,0x10
c00101b7:	90                   	nop
c00101b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101bc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101c3:	90                   	nop
c00101c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00101c9:	74 3d                	je     c0010208 <tcp_output+0x3e8>
c00101cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101d5:	83 ec 0c             	sub    esp,0xc
c00101d8:	50                   	push   eax
c00101d9:	e8 62 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c2                	mov    edx,eax
c00101e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e7:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00101ea:	29 c2                	sub    edx,eax
c00101ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00101f3:	0f b7 c0             	movzx  eax,ax
c00101f6:	01 d0                	add    eax,edx
c00101f8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00101fc:	0f 83 fa fc ff ff    	jae    c000fefc <tcp_output+0xdc>
c0010202:	eb 04                	jmp    c0010208 <tcp_output+0x3e8>
c0010204:	90                   	nop
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001020c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001020f:	85 c0                	test   eax,eax
c0010211:	75 0d                	jne    c0010220 <tcp_output+0x400>
c0010213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010217:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c001021d:	8d 76 00             	lea    esi,[esi+0x0]
c0010220:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010225:	74 65                	je     c001028c <tcp_output+0x46c>
c0010227:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001022b:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010231:	0f b6 c0             	movzx  eax,al
c0010234:	85 c0                	test   eax,eax
c0010236:	75 54                	jne    c001028c <tcp_output+0x46c>
c0010238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001023f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	50                   	push   eax
c0010246:	e8 f5 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001024b:	83 c4 10             	add    esp,0x10
c001024e:	89 c2                	mov    edx,eax
c0010250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010254:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010257:	29 c2                	sub    edx,eax
c0010259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010260:	0f b7 c0             	movzx  eax,ax
c0010263:	01 c2                	add    edx,eax
c0010265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010269:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001026c:	0f b7 c0             	movzx  eax,ax
c001026f:	39 c2                	cmp    edx,eax
c0010271:	76 19                	jbe    c001028c <tcp_output+0x46c>
c0010273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010277:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010285:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c001028c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010290:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010293:	83 e0 7f             	and    eax,0x7f
c0010296:	88 c2                	mov    dl,al
c0010298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001029c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001029f:	b0 00                	mov    al,0x0
c00102a1:	8d 76 00             	lea    esi,[esi+0x0]
c00102a4:	83 c4 24             	add    esp,0x24
c00102a7:	5b                   	pop    ebx
c00102a8:	5e                   	pop    esi
c00102a9:	c3                   	ret    
c00102aa:	66 90                	xchg   ax,ax

c00102ac <tcp_rst>:
c00102ac:	83 ec 2c             	sub    esp,0x2c
c00102af:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00102b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00102b7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00102bc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00102c1:	83 ec 04             	sub    esp,0x4
c00102c4:	6a 00                	push   0x0
c00102c6:	6a 14                	push   0x14
c00102c8:	6a 01                	push   0x1
c00102ca:	e8 8d 81 ff ff       	call   c000845c <pbuf_alloc>
c00102cf:	83 c4 10             	add    esp,0x10
c00102d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102d6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00102db:	0f 84 3f 01 00 00    	je     c0010420 <tcp_rst+0x174>
c00102e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00102e9:	0f b7 c0             	movzx  eax,ax
c00102ec:	83 f8 13             	cmp    eax,0x13
c00102ef:	77 17                	ja     c0010308 <tcp_rst+0x5c>
c00102f1:	83 ec 08             	sub    esp,0x8
c00102f4:	68 00 03 03 c0       	push   0xc0030300
c00102f9:	68 e6 f6 02 c0       	push   0xc002f6e6
c00102fe:	e8 b9 f6 00 00       	call   c001f9bc <CPrintf>
c0010303:	83 c4 10             	add    esp,0x10
c0010306:	66 90                	xchg   ax,ax
c0010308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001030c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010313:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010318:	83 ec 0c             	sub    esp,0xc
c001031b:	50                   	push   eax
c001031c:	e8 fb 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	89 c2                	mov    edx,eax
c0010326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001032a:	66 89 10             	mov    WORD PTR [eax],dx
c001032d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010332:	83 ec 0c             	sub    esp,0xc
c0010335:	50                   	push   eax
c0010336:	e8 e1 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001033b:	83 c4 10             	add    esp,0x10
c001033e:	89 c2                	mov    edx,eax
c0010340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010344:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001034f:	e8 ec 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	89 c2                	mov    edx,eax
c0010359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001035d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010367:	e8 d4 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	89 c2                	mov    edx,eax
c0010371:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010375:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010378:	83 ec 0c             	sub    esp,0xc
c001037b:	68 14 50 00 00       	push   0x5014
c0010380:	e8 97 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010385:	83 c4 10             	add    esp,0x10
c0010388:	89 c2                	mov    edx,eax
c001038a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001038e:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010396:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001039c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a0:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00103a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103aa:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00103b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103b7:	0f b7 c0             	movzx  eax,ax
c00103ba:	83 ec 0c             	sub    esp,0xc
c00103bd:	50                   	push   eax
c00103be:	6a 06                	push   0x6
c00103c0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103c4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00103cc:	e8 6b 2d 00 00       	call   c001313c <inet_chksum_pseudo>
c00103d1:	83 c4 20             	add    esp,0x20
c00103d4:	89 c2                	mov    edx,eax
c00103d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103da:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00103de:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00103e4:	83 c0 01             	add    eax,0x1
c00103e7:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00103ed:	83 ec 08             	sub    esp,0x8
c00103f0:	6a 06                	push   0x6
c00103f2:	6a 00                	push   0x0
c00103f4:	68 ff 00 00 00       	push   0xff
c00103f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103fd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010401:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010405:	e8 72 39 00 00       	call   c0013d7c <ip_output>
c001040a:	83 c4 20             	add    esp,0x20
c001040d:	83 ec 0c             	sub    esp,0xc
c0010410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010414:	e8 67 7e ff ff       	call   c0008280 <pbuf_free>
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	eb 06                	jmp    c0010424 <tcp_rst+0x178>
c001041e:	66 90                	xchg   ax,ax
c0010420:	90                   	nop
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 c4 2c             	add    esp,0x2c
c0010427:	c3                   	ret    

c0010428 <tcp_rexmit_rto>:
c0010428:	83 ec 1c             	sub    esp,0x1c
c001042b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001042f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010432:	85 c0                	test   eax,eax
c0010434:	74 7a                	je     c00104b0 <tcp_rexmit_rto+0x88>
c0010436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001043a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001043d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010441:	eb 0d                	jmp    c0010450 <tcp_rexmit_rto+0x28>
c0010443:	90                   	nop
c0010444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010448:	8b 00                	mov    eax,DWORD PTR [eax]
c001044a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001044e:	66 90                	xchg   ax,ax
c0010450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010454:	8b 00                	mov    eax,DWORD PTR [eax]
c0010456:	85 c0                	test   eax,eax
c0010458:	75 ea                	jne    c0010444 <tcp_rexmit_rto+0x1c>
c001045a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001045e:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c0010461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010465:	89 10                	mov    DWORD PTR [eax],edx
c0010467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001046b:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001046e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010472:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010479:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010484:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010487:	83 c0 01             	add    eax,0x1
c001048a:	88 c2                	mov    dl,al
c001048c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010490:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010497:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001049e:	83 ec 0c             	sub    esp,0xc
c00104a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00104a5:	e8 76 f9 ff ff       	call   c000fe20 <tcp_output>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	eb 05                	jmp    c00104b4 <tcp_rexmit_rto+0x8c>
c00104af:	90                   	nop
c00104b0:	90                   	nop
c00104b1:	8d 76 00             	lea    esi,[esi+0x0]
c00104b4:	83 c4 1c             	add    esp,0x1c
c00104b7:	c3                   	ret    

c00104b8 <tcp_rexmit>:
c00104b8:	53                   	push   ebx
c00104b9:	83 ec 18             	sub    esp,0x18
c00104bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104c3:	85 c0                	test   eax,eax
c00104c5:	0f 84 a9 00 00 00    	je     c0010574 <tcp_rexmit+0xbc>
c00104cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cf:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00104d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104da:	8b 10                	mov    edx,DWORD PTR [eax]
c00104dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e0:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00104e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e7:	83 c0 78             	add    eax,0x78
c00104ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104ee:	eb 0c                	jmp    c00104fc <tcp_rexmit+0x44>
c00104f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00104f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104fa:	66 90                	xchg   ax,ax
c00104fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010500:	8b 00                	mov    eax,DWORD PTR [eax]
c0010502:	85 c0                	test   eax,eax
c0010504:	74 36                	je     c001053c <tcp_rexmit+0x84>
c0010506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001050a:	8b 00                	mov    eax,DWORD PTR [eax]
c001050c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001050f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	50                   	push   eax
c0010516:	e8 25 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	89 c3                	mov    ebx,eax
c0010520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010524:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010527:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001052a:	83 ec 0c             	sub    esp,0xc
c001052d:	50                   	push   eax
c001052e:	e8 0d 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	29 c3                	sub    ebx,eax
c0010538:	89 d8                	mov    eax,ebx
c001053a:	78 b4                	js     c00104f0 <tcp_rexmit+0x38>
c001053c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010540:	8b 10                	mov    edx,DWORD PTR [eax]
c0010542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010546:	89 10                	mov    DWORD PTR [eax],edx
c0010548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001054c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010550:	89 10                	mov    DWORD PTR [eax],edx
c0010552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010556:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010559:	83 c0 01             	add    eax,0x1
c001055c:	88 c2                	mov    dl,al
c001055e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010562:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010569:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010570:	eb 06                	jmp    c0010578 <tcp_rexmit+0xc0>
c0010572:	66 90                	xchg   ax,ax
c0010574:	90                   	nop
c0010575:	8d 76 00             	lea    esi,[esi+0x0]
c0010578:	83 c4 18             	add    esp,0x18
c001057b:	5b                   	pop    ebx
c001057c:	c3                   	ret    
c001057d:	8d 76 00             	lea    esi,[esi+0x0]

c0010580 <tcp_rexmit_fast>:
c0010580:	83 ec 0c             	sub    esp,0xc
c0010583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010587:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001058a:	85 c0                	test   eax,eax
c001058c:	0f 84 d2 00 00 00    	je     c0010664 <tcp_rexmit_fast+0xe4>
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010599:	0f b6 c0             	movzx  eax,al
c001059c:	83 e0 04             	and    eax,0x4
c001059f:	0f 85 bf 00 00 00    	jne    c0010664 <tcp_rexmit_fast+0xe4>
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ac:	e8 07 ff ff ff       	call   c00104b8 <tcp_rexmit>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b8:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00105bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c0:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00105c3:	0f b7 d2             	movzx  edx,dx
c00105c6:	0f b7 c0             	movzx  eax,ax
c00105c9:	39 c2                	cmp    edx,eax
c00105cb:	76 1b                	jbe    c00105e8 <tcp_rexmit_fast+0x68>
c00105cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d1:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00105d4:	0f b7 c0             	movzx  eax,ax
c00105d7:	d1 e8                	shr    eax,1
c00105d9:	89 c2                	mov    edx,eax
c00105db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105df:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00105e3:	eb 1b                	jmp    c0010600 <tcp_rexmit_fast+0x80>
c00105e5:	8d 76 00             	lea    esi,[esi+0x0]
c00105e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ec:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00105f0:	0f b7 c0             	movzx  eax,ax
c00105f3:	d1 e8                	shr    eax,1
c00105f5:	89 c2                	mov    edx,eax
c00105f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fb:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00105ff:	90                   	nop
c0010600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010604:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c0010607:	0f b7 d0             	movzx  edx,ax
c001060a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010611:	0f b7 c0             	movzx  eax,ax
c0010614:	d1 e0                	shl    eax,1
c0010616:	39 c2                	cmp    edx,eax
c0010618:	7d 16                	jge    c0010630 <tcp_rexmit_fast+0xb0>
c001061a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010621:	d1 e0                	shl    eax,1
c0010623:	89 c2                	mov    edx,eax
c0010625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010629:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c001062d:	8d 76 00             	lea    esi,[esi+0x0]
c0010630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010634:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c0010637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001063e:	89 c1                	mov    ecx,eax
c0010640:	d1 e1                	shl    ecx,1
c0010642:	01 c8                	add    eax,ecx
c0010644:	01 d0                	add    eax,edx
c0010646:	89 c2                	mov    edx,eax
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c0010650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010654:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010657:	83 c8 04             	or     eax,0x4
c001065a:	88 c2                	mov    dl,al
c001065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010660:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010663:	90                   	nop
c0010664:	90                   	nop
c0010665:	83 c4 0c             	add    esp,0xc
c0010668:	c3                   	ret    
c0010669:	8d 76 00             	lea    esi,[esi+0x0]

c001066c <tcp_keepalive>:
c001066c:	83 ec 1c             	sub    esp,0x1c
c001066f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010673:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010676:	83 e8 01             	sub    eax,0x1
c0010679:	83 ec 0c             	sub    esp,0xc
c001067c:	50                   	push   eax
c001067d:	e8 be 05 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010682:	83 c4 10             	add    esp,0x10
c0010685:	50                   	push   eax
c0010686:	6a 00                	push   0x0
c0010688:	6a 00                	push   0x0
c001068a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001068e:	e8 c5 e2 ff ff       	call   c000e958 <tcp_output_alloc_header>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001069a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001069f:	0f 84 8b 00 00 00    	je     c0010730 <tcp_keepalive+0xc4>
c00106a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00106ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00106b7:	0f b7 d0             	movzx  edx,ax
c00106ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106be:	8d 48 04             	lea    ecx,[eax+0x4]
c00106c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c5:	83 ec 0c             	sub    esp,0xc
c00106c8:	52                   	push   edx
c00106c9:	6a 06                	push   0x6
c00106cb:	51                   	push   ecx
c00106cc:	50                   	push   eax
c00106cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106d1:	e8 66 2a 00 00       	call   c001313c <inet_chksum_pseudo>
c00106d6:	83 c4 20             	add    esp,0x20
c00106d9:	89 c2                	mov    edx,eax
c00106db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106df:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00106e3:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00106e9:	83 c0 01             	add    eax,0x1
c00106ec:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00106f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106f6:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00106f9:	0f b6 d0             	movzx  edx,al
c00106fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010700:	8d 48 04             	lea    ecx,[eax+0x4]
c0010703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010707:	83 ec 08             	sub    esp,0x8
c001070a:	6a 06                	push   0x6
c001070c:	6a 00                	push   0x0
c001070e:	52                   	push   edx
c001070f:	51                   	push   ecx
c0010710:	50                   	push   eax
c0010711:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010715:	e8 62 36 00 00       	call   c0013d7c <ip_output>
c001071a:	83 c4 20             	add    esp,0x20
c001071d:	83 ec 0c             	sub    esp,0xc
c0010720:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010724:	e8 57 7b ff ff       	call   c0008280 <pbuf_free>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	eb 06                	jmp    c0010734 <tcp_keepalive+0xc8>
c001072e:	66 90                	xchg   ax,ax
c0010730:	90                   	nop
c0010731:	8d 76 00             	lea    esi,[esi+0x0]
c0010734:	83 c4 1c             	add    esp,0x1c
c0010737:	c3                   	ret    

c0010738 <tcp_zero_window_probe>:
c0010738:	53                   	push   ebx
c0010739:	83 ec 28             	sub    esp,0x28
c001073c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010740:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010743:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010747:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001074c:	75 0e                	jne    c001075c <tcp_zero_window_probe+0x24>
c001074e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010752:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010755:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010759:	8d 76 00             	lea    esi,[esi+0x0]
c001075c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010761:	0f 84 99 01 00 00    	je     c0010900 <tcp_zero_window_probe+0x1c8>
c0010767:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001076b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001076e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010772:	0f b7 c0             	movzx  eax,ax
c0010775:	83 ec 0c             	sub    esp,0xc
c0010778:	50                   	push   eax
c0010779:	e8 9e 04 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001077e:	83 c4 10             	add    esp,0x10
c0010781:	0f b7 c0             	movzx  eax,ax
c0010784:	83 e0 01             	and    eax,0x1
c0010787:	74 17                	je     c00107a0 <tcp_zero_window_probe+0x68>
c0010789:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001078d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010790:	0f b7 c0             	movzx  eax,ax
c0010793:	85 c0                	test   eax,eax
c0010795:	75 09                	jne    c00107a0 <tcp_zero_window_probe+0x68>
c0010797:	b8 01 00 00 00       	mov    eax,0x1
c001079c:	eb 0a                	jmp    c00107a8 <tcp_zero_window_probe+0x70>
c001079e:	66 90                	xchg   ax,ax
c00107a0:	b8 00 00 00 00       	mov    eax,0x0
c00107a5:	8d 76 00             	lea    esi,[esi+0x0]
c00107a8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00107ac:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00107b1:	85 c0                	test   eax,eax
c00107b3:	0f 94 c0             	sete   al
c00107b6:	0f b6 c0             	movzx  eax,al
c00107b9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00107be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00107c8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00107cd:	52                   	push   edx
c00107ce:	50                   	push   eax
c00107cf:	6a 00                	push   0x0
c00107d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107d5:	e8 7e e1 ff ff       	call   c000e958 <tcp_output_alloc_header>
c00107da:	83 c4 10             	add    esp,0x10
c00107dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00107e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00107e6:	0f 84 18 01 00 00    	je     c0010904 <tcp_zero_window_probe+0x1cc>
c00107ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00107f7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00107fc:	85 c0                	test   eax,eax
c00107fe:	74 28                	je     c0010828 <tcp_zero_window_probe+0xf0>
c0010800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010804:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010808:	80 e4 c0             	and    ah,0xc0
c001080b:	89 c3                	mov    ebx,eax
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	6a 11                	push   0x11
c0010812:	e8 05 04 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010817:	83 c4 10             	add    esp,0x10
c001081a:	09 d8                	or     eax,ebx
c001081c:	89 c2                	mov    edx,eax
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010826:	eb 58                	jmp    c0010880 <tcp_zero_window_probe+0x148>
c0010828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001082c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001082f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010836:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001083a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001083d:	83 c0 14             	add    eax,0x14
c0010840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010848:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001084c:	0f b7 c0             	movzx  eax,ax
c001084f:	83 ec 0c             	sub    esp,0xc
c0010852:	50                   	push   eax
c0010853:	e8 c4 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010858:	83 c4 10             	add    esp,0x10
c001085b:	0f b7 c0             	movzx  eax,ax
c001085e:	c1 e8 0c             	shr    eax,0xc
c0010861:	c1 e0 02             	shl    eax,0x2
c0010864:	0f b7 d0             	movzx  edx,ax
c0010867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001086b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001086e:	52                   	push   edx
c001086f:	6a 01                	push   0x1
c0010871:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010875:	50                   	push   eax
c0010876:	e8 b1 86 ff ff       	call   c0008f2c <pbuf_copy_partial>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	66 90                	xchg   ax,ax
c0010880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010887:	0f b7 d0             	movzx  edx,ax
c001088a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001088e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010895:	83 ec 0c             	sub    esp,0xc
c0010898:	52                   	push   edx
c0010899:	6a 06                	push   0x6
c001089b:	51                   	push   ecx
c001089c:	50                   	push   eax
c001089d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108a1:	e8 96 28 00 00       	call   c001313c <inet_chksum_pseudo>
c00108a6:	83 c4 20             	add    esp,0x20
c00108a9:	89 c2                	mov    edx,eax
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00108b3:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00108b9:	83 c0 01             	add    eax,0x1
c00108bc:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00108c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108c6:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108c9:	0f b6 d0             	movzx  edx,al
c00108cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108d0:	8d 48 04             	lea    ecx,[eax+0x4]
c00108d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108d7:	83 ec 08             	sub    esp,0x8
c00108da:	6a 06                	push   0x6
c00108dc:	6a 00                	push   0x0
c00108de:	52                   	push   edx
c00108df:	51                   	push   ecx
c00108e0:	50                   	push   eax
c00108e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108e5:	e8 92 34 00 00       	call   c0013d7c <ip_output>
c00108ea:	83 c4 20             	add    esp,0x20
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00108f4:	e8 87 79 ff ff       	call   c0008280 <pbuf_free>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	eb 0a                	jmp    c0010908 <tcp_zero_window_probe+0x1d0>
c00108fe:	66 90                	xchg   ax,ax
c0010900:	90                   	nop
c0010901:	eb 05                	jmp    c0010908 <tcp_zero_window_probe+0x1d0>
c0010903:	90                   	nop
c0010904:	90                   	nop
c0010905:	8d 76 00             	lea    esi,[esi+0x0]
c0010908:	83 c4 28             	add    esp,0x28
c001090b:	5b                   	pop    ebx
c001090c:	c3                   	ret    
c001090d:	66 90                	xchg   ax,ax
c001090f:	90                   	nop

c0010910 <sys_timeout>:
c0010910:	83 ec 1c             	sub    esp,0x1c
c0010913:	83 ec 0c             	sub    esp,0xc
c0010916:	6a 0b                	push   0xb
c0010918:	e8 77 6f ff ff       	call   c0007894 <memp_malloc>
c001091d:	83 c4 10             	add    esp,0x10
c0010920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010929:	75 25                	jne    c0010950 <sys_timeout+0x40>
c001092b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010930:	0f 85 3e 01 00 00    	jne    c0010a74 <sys_timeout+0x164>
c0010936:	83 ec 08             	sub    esp,0x8
c0010939:	68 0c 06 03 c0       	push   0xc003060c
c001093e:	68 e6 f6 02 c0       	push   0xc002f6e6
c0010943:	e8 74 f0 00 00       	call   c001f9bc <CPrintf>
c0010948:	83 c4 10             	add    esp,0x10
c001094b:	e9 24 01 00 00       	jmp    c0010a74 <sys_timeout+0x164>
c0010950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010954:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001095a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001095e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010962:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010969:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001096d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010978:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001097b:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010980:	85 c0                	test   eax,eax
c0010982:	75 10                	jne    c0010994 <sys_timeout+0x84>
c0010984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010988:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c001098d:	e9 e6 00 00 00       	jmp    c0010a78 <sys_timeout+0x168>
c0010992:	66 90                	xchg   ax,ax
c0010994:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001099c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109a0:	73 2e                	jae    c00109d0 <sys_timeout+0xc0>
c00109a2:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109a7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109aa:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109af:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00109b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109b6:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c00109bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c0:	89 10                	mov    DWORD PTR [eax],edx
c00109c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c6:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109cb:	e9 a8 00 00 00       	jmp    c0010a78 <sys_timeout+0x168>
c00109d0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109d9:	e9 86 00 00 00       	jmp    c0010a64 <sys_timeout+0x154>
c00109de:	66 90                	xchg   ax,ax
c00109e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109ee:	29 c2                	sub    edx,eax
c00109f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00109fd:	85 c0                	test   eax,eax
c00109ff:	74 17                	je     c0010a18 <sys_timeout+0x108>
c0010a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a05:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a11:	39 c2                	cmp    edx,eax
c0010a13:	76 43                	jbe    c0010a58 <sys_timeout+0x148>
c0010a15:	8d 76 00             	lea    esi,[esi+0x0]
c0010a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a1e:	85 c0                	test   eax,eax
c0010a20:	74 1e                	je     c0010a40 <sys_timeout+0x130>
c0010a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a28:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a2f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a38:	29 d1                	sub    ecx,edx
c0010a3a:	89 ca                	mov    edx,ecx
c0010a3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a3f:	90                   	nop
c0010a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a44:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a4a:	89 10                	mov    DWORD PTR [eax],edx
c0010a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a54:	89 10                	mov    DWORD PTR [eax],edx
c0010a56:	eb 20                	jmp    c0010a78 <sys_timeout+0x168>
c0010a58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a62:	66 90                	xchg   ax,ax
c0010a64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010a69:	0f 85 71 ff ff ff    	jne    c00109e0 <sys_timeout+0xd0>
c0010a6f:	eb 07                	jmp    c0010a78 <sys_timeout+0x168>
c0010a71:	8d 76 00             	lea    esi,[esi+0x0]
c0010a74:	90                   	nop
c0010a75:	8d 76 00             	lea    esi,[esi+0x0]
c0010a78:	83 c4 1c             	add    esp,0x1c
c0010a7b:	c3                   	ret    

c0010a7c <tcpip_tcp_timer>:
c0010a7c:	83 ec 0c             	sub    esp,0xc
c0010a7f:	e8 b8 a4 ff ff       	call   c000af3c <tcp_tmr>
c0010a84:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a89:	85 c0                	test   eax,eax
c0010a8b:	75 0b                	jne    c0010a98 <tcpip_tcp_timer+0x1c>
c0010a8d:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a92:	85 c0                	test   eax,eax
c0010a94:	74 1e                	je     c0010ab4 <tcpip_tcp_timer+0x38>
c0010a96:	66 90                	xchg   ax,ax
c0010a98:	83 ec 04             	sub    esp,0x4
c0010a9b:	6a 00                	push   0x0
c0010a9d:	68 7c 0a 01 c0       	push   0xc0010a7c
c0010aa2:	68 fa 00 00 00       	push   0xfa
c0010aa7:	e8 64 fe ff ff       	call   c0010910 <sys_timeout>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	eb 0f                	jmp    c0010ac0 <tcpip_tcp_timer+0x44>
c0010ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ab4:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010abe:	66 90                	xchg   ax,ax
c0010ac0:	90                   	nop
c0010ac1:	83 c4 0c             	add    esp,0xc
c0010ac4:	c3                   	ret    
c0010ac5:	8d 76 00             	lea    esi,[esi+0x0]

c0010ac8 <tcp_timer_needed>:
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	75 38                	jne    c0010b0c <tcp_timer_needed+0x44>
c0010ad4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010ad9:	85 c0                	test   eax,eax
c0010adb:	75 0b                	jne    c0010ae8 <tcp_timer_needed+0x20>
c0010add:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ae2:	85 c0                	test   eax,eax
c0010ae4:	74 26                	je     c0010b0c <tcp_timer_needed+0x44>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010af2:	83 ec 04             	sub    esp,0x4
c0010af5:	6a 00                	push   0x0
c0010af7:	68 7c 0a 01 c0       	push   0xc0010a7c
c0010afc:	68 fa 00 00 00       	push   0xfa
c0010b01:	e8 0a fe ff ff       	call   c0010910 <sys_timeout>
c0010b06:	83 c4 10             	add    esp,0x10
c0010b09:	8d 76 00             	lea    esi,[esi+0x0]
c0010b0c:	90                   	nop
c0010b0d:	83 c4 0c             	add    esp,0xc
c0010b10:	c3                   	ret    
c0010b11:	8d 76 00             	lea    esi,[esi+0x0]

c0010b14 <ip_reass_timer>:
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	e8 18 3b 00 00       	call   c0014634 <ip_reass_tmr>
c0010b1c:	83 ec 04             	sub    esp,0x4
c0010b1f:	6a 00                	push   0x0
c0010b21:	68 14 0b 01 c0       	push   0xc0010b14
c0010b26:	68 e8 03 00 00       	push   0x3e8
c0010b2b:	e8 e0 fd ff ff       	call   c0010910 <sys_timeout>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	90                   	nop
c0010b34:	83 c4 0c             	add    esp,0xc
c0010b37:	c3                   	ret    

c0010b38 <arp_timer>:
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	e8 64 0d 00 00       	call   c00118a4 <etharp_tmr>
c0010b40:	83 ec 04             	sub    esp,0x4
c0010b43:	6a 00                	push   0x0
c0010b45:	68 38 0b 01 c0       	push   0xc0010b38
c0010b4a:	68 88 13 00 00       	push   0x1388
c0010b4f:	e8 bc fd ff ff       	call   c0010910 <sys_timeout>
c0010b54:	83 c4 10             	add    esp,0x10
c0010b57:	90                   	nop
c0010b58:	83 c4 0c             	add    esp,0xc
c0010b5b:	c3                   	ret    

c0010b5c <sys_timeouts_init>:
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	83 ec 04             	sub    esp,0x4
c0010b62:	6a 00                	push   0x0
c0010b64:	68 14 0b 01 c0       	push   0xc0010b14
c0010b69:	68 e8 03 00 00       	push   0x3e8
c0010b6e:	e8 9d fd ff ff       	call   c0010910 <sys_timeout>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	83 ec 04             	sub    esp,0x4
c0010b79:	6a 00                	push   0x0
c0010b7b:	68 38 0b 01 c0       	push   0xc0010b38
c0010b80:	68 88 13 00 00       	push   0x1388
c0010b85:	e8 86 fd ff ff       	call   c0010910 <sys_timeout>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	90                   	nop
c0010b8e:	83 c4 0c             	add    esp,0xc
c0010b91:	c3                   	ret    
c0010b92:	66 90                	xchg   ax,ax

c0010b94 <sys_untimeout>:
c0010b94:	83 ec 1c             	sub    esp,0x1c
c0010b97:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	0f 84 b4 00 00 00    	je     c0010c58 <sys_untimeout+0xc4>
c0010ba4:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bb5:	e9 8e 00 00 00       	jmp    c0010c48 <sys_untimeout+0xb4>
c0010bba:	66 90                	xchg   ax,ax
c0010bbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010bc3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010bc7:	75 6b                	jne    c0010c34 <sys_untimeout+0xa0>
c0010bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bd0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010bd4:	75 5e                	jne    c0010c34 <sys_untimeout+0xa0>
c0010bd6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010bdb:	75 0f                	jne    c0010bec <sys_untimeout+0x58>
c0010bdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be3:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010be8:	eb 0e                	jmp    c0010bf8 <sys_untimeout+0x64>
c0010bea:	66 90                	xchg   ax,ax
c0010bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bf0:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf6:	89 10                	mov    DWORD PTR [eax],edx
c0010bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bfe:	85 c0                	test   eax,eax
c0010c00:	74 1e                	je     c0010c20 <sys_untimeout+0x8c>
c0010c02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c08:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c18:	01 ca                	add    edx,ecx
c0010c1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c20:	83 ec 08             	sub    esp,0x8
c0010c23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c27:	6a 0b                	push   0xb
c0010c29:	e8 92 6d ff ff       	call   c00079c0 <memp_free>
c0010c2e:	83 c4 10             	add    esp,0x10
c0010c31:	eb 29                	jmp    c0010c5c <sys_untimeout+0xc8>
c0010c33:	90                   	nop
c0010c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c46:	66 90                	xchg   ax,ax
c0010c48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010c4d:	0f 85 69 ff ff ff    	jne    c0010bbc <sys_untimeout+0x28>
c0010c53:	90                   	nop
c0010c54:	eb 06                	jmp    c0010c5c <sys_untimeout+0xc8>
c0010c56:	66 90                	xchg   ax,ax
c0010c58:	90                   	nop
c0010c59:	8d 76 00             	lea    esi,[esi+0x0]
c0010c5c:	83 c4 1c             	add    esp,0x1c
c0010c5f:	c3                   	ret    

c0010c60 <sys_timeouts_mbox_fetch>:
c0010c60:	83 ec 1c             	sub    esp,0x1c
c0010c63:	90                   	nop
c0010c64:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c69:	85 c0                	test   eax,eax
c0010c6b:	75 1f                	jne    c0010c8c <sys_timeouts_mbox_fetch+0x2c>
c0010c6d:	83 ec 04             	sub    esp,0x4
c0010c70:	6a 00                	push   0x0
c0010c72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c7a:	e8 31 00 ff ff       	call   c0000cb0 <sys_arch_mbox_fetch>
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c86:	e9 cd 00 00 00       	jmp    c0010d58 <sys_timeouts_mbox_fetch+0xf8>
c0010c8b:	90                   	nop
c0010c8c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c94:	85 c0                	test   eax,eax
c0010c96:	74 24                	je     c0010cbc <sys_timeouts_mbox_fetch+0x5c>
c0010c98:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca0:	83 ec 04             	sub    esp,0x4
c0010ca3:	50                   	push   eax
c0010ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cac:	e8 ff ff fe ff       	call   c0000cb0 <sys_arch_mbox_fetch>
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cb8:	eb 0a                	jmp    c0010cc4 <sys_timeouts_mbox_fetch+0x64>
c0010cba:	66 90                	xchg   ax,ax
c0010cbc:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010cc4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010cc9:	75 5d                	jne    c0010d28 <sys_timeouts_mbox_fetch+0xc8>
c0010ccb:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cda:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010cdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ce3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ce6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf4:	83 ec 08             	sub    esp,0x8
c0010cf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cfb:	6a 0b                	push   0xb
c0010cfd:	e8 be 6c ff ff       	call   c00079c0 <memp_free>
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d0a:	0f 84 54 ff ff ff    	je     c0010c64 <sys_timeouts_mbox_fetch+0x4>
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d1b:	ff d0                	call   eax
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	e9 3f ff ff ff       	jmp    c0010c64 <sys_timeouts_mbox_fetch+0x4>
c0010d25:	8d 76 00             	lea    esi,[esi+0x0]
c0010d28:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d30:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d34:	73 16                	jae    c0010d4c <sys_timeouts_mbox_fetch+0xec>
c0010d36:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d3e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d43:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d4a:	eb 0c                	jmp    c0010d58 <sys_timeouts_mbox_fetch+0xf8>
c0010d4c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d58:	90                   	nop
c0010d59:	83 c4 1c             	add    esp,0x1c
c0010d5c:	c3                   	ret    
c0010d5d:	66 90                	xchg   ax,ax
c0010d5f:	90                   	nop

c0010d60 <udp_input>:
c0010d60:	53                   	push   ebx
c0010d61:	83 ec 28             	sub    esp,0x28
c0010d64:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010d6a:	83 c0 01             	add    eax,0x1
c0010d6d:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d85:	0f b7 d8             	movzx  ebx,ax
c0010d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d8c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d8f:	0f b7 c0             	movzx  eax,ax
c0010d92:	83 ec 0c             	sub    esp,0xc
c0010d95:	50                   	push   eax
c0010d96:	e8 81 fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	0f b7 c0             	movzx  eax,ax
c0010da1:	c1 e8 08             	shr    eax,0x8
c0010da4:	0f b7 c0             	movzx  eax,ax
c0010da7:	83 e0 0f             	and    eax,0xf
c0010daa:	83 c0 02             	add    eax,0x2
c0010dad:	c1 e0 02             	shl    eax,0x2
c0010db0:	39 c3                	cmp    ebx,eax
c0010db2:	7c 3c                	jl     c0010df0 <udp_input+0x90>
c0010db4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010db8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010dbb:	0f b7 c0             	movzx  eax,ax
c0010dbe:	83 ec 0c             	sub    esp,0xc
c0010dc1:	50                   	push   eax
c0010dc2:	e8 55 fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010dc7:	83 c4 10             	add    esp,0x10
c0010dca:	0f b7 c0             	movzx  eax,ax
c0010dcd:	c1 e8 08             	shr    eax,0x8
c0010dd0:	83 e0 0f             	and    eax,0xf
c0010dd3:	c1 e0 02             	shl    eax,0x2
c0010dd6:	f7 d8                	neg    eax
c0010dd8:	98                   	cwde   
c0010dd9:	83 ec 08             	sub    esp,0x8
c0010ddc:	50                   	push   eax
c0010ddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010de1:	e8 fa 72 ff ff       	call   c00080e0 <pbuf_header>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	0f b6 c0             	movzx  eax,al
c0010dec:	85 c0                	test   eax,eax
c0010dee:	74 34                	je     c0010e24 <udp_input+0xc4>
c0010df0:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010df6:	83 c0 01             	add    eax,0x1
c0010df9:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010dff:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e05:	83 c0 01             	add    eax,0x1
c0010e08:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e0e:	83 ec 0c             	sub    esp,0xc
c0010e11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e15:	e8 66 74 ff ff       	call   c0008280 <pbuf_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	e9 aa 03 00 00       	jmp    c00111cc <udp_input+0x46c>
c0010e22:	66 90                	xchg   ax,ax
c0010e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e2f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e3b:	50                   	push   eax
c0010e3c:	e8 e3 2f 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e4f:	0f b7 c0             	movzx  eax,ax
c0010e52:	83 ec 0c             	sub    esp,0xc
c0010e55:	50                   	push   eax
c0010e56:	e8 c1 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010e5b:	83 c4 10             	add    esp,0x10
c0010e5e:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e67:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010e6b:	0f b7 c0             	movzx  eax,ax
c0010e6e:	83 ec 0c             	sub    esp,0xc
c0010e71:	50                   	push   eax
c0010e72:	e8 a5 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010e7f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010e87:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e94:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010e99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e9d:	e9 0a 01 00 00       	jmp    c0010fac <udp_input+0x24c>
c0010ea2:	66 90                	xchg   ax,ax
c0010ea4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ea9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ead:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010eb1:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010eb6:	0f b7 c0             	movzx  eax,ax
c0010eb9:	39 c2                	cmp    edx,eax
c0010ebb:	75 57                	jne    c0010f14 <udp_input+0x1b4>
c0010ebd:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	75 12                	jne    c0010ed8 <udp_input+0x178>
c0010ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eca:	85 c0                	test   eax,eax
c0010ecc:	74 22                	je     c0010ef0 <udp_input+0x190>
c0010ece:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed4:	85 c0                	test   eax,eax
c0010ed6:	74 18                	je     c0010ef0 <udp_input+0x190>
c0010ed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010edc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ede:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010ee3:	39 c2                	cmp    edx,eax
c0010ee5:	74 09                	je     c0010ef0 <udp_input+0x190>
c0010ee7:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010eec:	85 c0                	test   eax,eax
c0010eee:	74 24                	je     c0010f14 <udp_input+0x1b4>
c0010ef0:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010ef5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010efa:	75 18                	jne    c0010f14 <udp_input+0x1b4>
c0010efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f00:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f03:	0f b6 c0             	movzx  eax,al
c0010f06:	83 e0 04             	and    eax,0x4
c0010f09:	75 09                	jne    c0010f14 <udp_input+0x1b4>
c0010f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f13:	90                   	nop
c0010f14:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f19:	85 c0                	test   eax,eax
c0010f1b:	74 7b                	je     c0010f98 <udp_input+0x238>
c0010f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f21:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f24:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f29:	0f b7 c0             	movzx  eax,ax
c0010f2c:	39 c2                	cmp    edx,eax
c0010f2e:	75 68                	jne    c0010f98 <udp_input+0x238>
c0010f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f34:	83 c0 04             	add    eax,0x4
c0010f37:	74 1b                	je     c0010f54 <udp_input+0x1f4>
c0010f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 10                	je     c0010f54 <udp_input+0x1f4>
c0010f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f4b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010f50:	39 c2                	cmp    edx,eax
c0010f52:	75 44                	jne    c0010f98 <udp_input+0x238>
c0010f54:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010f59:	74 29                	je     c0010f84 <udp_input+0x224>
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010f62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f69:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f7a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010f7f:	eb 37                	jmp    c0010fb8 <udp_input+0x258>
c0010f81:	8d 76 00             	lea    esi,[esi+0x0]
c0010f84:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010f8a:	83 c0 01             	add    eax,0x1
c0010f8d:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010f93:	eb 23                	jmp    c0010fb8 <udp_input+0x258>
c0010f95:	8d 76 00             	lea    esi,[esi+0x0]
c0010f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010fa0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010fa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fab:	90                   	nop
c0010fac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010fb1:	0f 85 ed fe ff ff    	jne    c0010ea4 <udp_input+0x144>
c0010fb7:	90                   	nop
c0010fb8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010fbd:	75 09                	jne    c0010fc8 <udp_input+0x268>
c0010fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010fc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fc7:	90                   	nop
c0010fc8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010fcd:	75 15                	jne    c0010fe4 <udp_input+0x284>
c0010fcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010fd3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fd6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010fdb:	39 c2                	cmp    edx,eax
c0010fdd:	0f 85 d9 01 00 00    	jne    c00111bc <udp_input+0x45c>
c0010fe3:	90                   	nop
c0010fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fe8:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0010fec:	0f b7 c0             	movzx  eax,ax
c0010fef:	85 c0                	test   eax,eax
c0010ff1:	74 61                	je     c0011054 <udp_input+0x2f4>
c0010ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ff7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ffa:	0f b7 c0             	movzx  eax,ax
c0010ffd:	83 ec 0c             	sub    esp,0xc
c0011000:	50                   	push   eax
c0011001:	6a 11                	push   0x11
c0011003:	68 98 68 03 c0       	push   0xc0036898
c0011008:	68 90 68 03 c0       	push   0xc0036890
c001100d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011011:	e8 26 21 00 00       	call   c001313c <inet_chksum_pseudo>
c0011016:	83 c4 20             	add    esp,0x20
c0011019:	0f b7 c0             	movzx  eax,ax
c001101c:	85 c0                	test   eax,eax
c001101e:	74 34                	je     c0011054 <udp_input+0x2f4>
c0011020:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0011026:	83 c0 01             	add    eax,0x1
c0011029:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c001102f:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011035:	83 c0 01             	add    eax,0x1
c0011038:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011045:	e8 36 72 ff ff       	call   c0008280 <pbuf_free>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	e9 7a 01 00 00       	jmp    c00111cc <udp_input+0x46c>
c0011052:	66 90                	xchg   ax,ax
c0011054:	83 ec 08             	sub    esp,0x8
c0011057:	6a f8                	push   0xfffffff8
c0011059:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001105d:	e8 7e 70 ff ff       	call   c00080e0 <pbuf_header>
c0011062:	83 c4 10             	add    esp,0x10
c0011065:	0f b6 c0             	movzx  eax,al
c0011068:	85 c0                	test   eax,eax
c001106a:	74 38                	je     c00110a4 <udp_input+0x344>
c001106c:	83 ec 08             	sub    esp,0x8
c001106f:	68 49 06 03 c0       	push   0xc0030649
c0011074:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011079:	e8 3e e9 00 00       	call   c001f9bc <CPrintf>
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011087:	83 c0 01             	add    eax,0x1
c001108a:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011097:	e8 e4 71 ff ff       	call   c0008280 <pbuf_free>
c001109c:	83 c4 10             	add    esp,0x10
c001109f:	e9 28 01 00 00       	jmp    c00111cc <udp_input+0x46c>
c00110a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110a9:	74 51                	je     c00110fc <udp_input+0x39c>
c00110ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110af:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110b2:	85 c0                	test   eax,eax
c00110b4:	74 32                	je     c00110e8 <udp_input+0x388>
c00110b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110bd:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00110c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00110c6:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00110c9:	83 ec 0c             	sub    esp,0xc
c00110cc:	51                   	push   ecx
c00110cd:	68 90 68 03 c0       	push   0xc0036890
c00110d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00110da:	52                   	push   edx
c00110db:	ff d0                	call   eax
c00110dd:	83 c4 20             	add    esp,0x20
c00110e0:	e9 e7 00 00 00       	jmp    c00111cc <udp_input+0x46c>
c00110e5:	8d 76 00             	lea    esi,[esi+0x0]
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110ef:	e8 8c 71 ff ff       	call   c0008280 <pbuf_free>
c00110f4:	83 c4 10             	add    esp,0x10
c00110f7:	e9 d0 00 00 00       	jmp    c00111cc <udp_input+0x46c>
c00110fc:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011101:	85 c0                	test   eax,eax
c0011103:	0f 85 83 00 00 00    	jne    c001118c <udp_input+0x42c>
c0011109:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001110e:	25 f0 00 00 00       	and    eax,0xf0
c0011113:	3d e0 00 00 00       	cmp    eax,0xe0
c0011118:	74 72                	je     c001118c <udp_input+0x42c>
c001111a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001111e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011121:	0f b7 c0             	movzx  eax,ax
c0011124:	83 ec 0c             	sub    esp,0xc
c0011127:	50                   	push   eax
c0011128:	e8 ef fa fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001112d:	83 c4 10             	add    esp,0x10
c0011130:	0f b7 c0             	movzx  eax,ax
c0011133:	c1 e8 08             	shr    eax,0x8
c0011136:	0f b7 c0             	movzx  eax,ax
c0011139:	83 e0 0f             	and    eax,0xf
c001113c:	83 c0 02             	add    eax,0x2
c001113f:	c1 e0 02             	shl    eax,0x2
c0011142:	98                   	cwde   
c0011143:	83 ec 08             	sub    esp,0x8
c0011146:	50                   	push   eax
c0011147:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114b:	e8 90 6f ff ff       	call   c00080e0 <pbuf_header>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011157:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001115a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001115e:	74 18                	je     c0011178 <udp_input+0x418>
c0011160:	83 ec 08             	sub    esp,0x8
c0011163:	68 5d 06 03 c0       	push   0xc003065d
c0011168:	68 e6 f6 02 c0       	push   0xc002f6e6
c001116d:	e8 4a e8 00 00       	call   c001f9bc <CPrintf>
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	8d 76 00             	lea    esi,[esi+0x0]
c0011178:	83 ec 08             	sub    esp,0x8
c001117b:	6a 03                	push   0x3
c001117d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011181:	e8 76 1e 00 00       	call   c0012ffc <icmp_dest_unreach>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	8d 76 00             	lea    esi,[esi+0x0]
c001118c:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c0011192:	83 c0 01             	add    eax,0x1
c0011195:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c001119b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111a1:	83 c0 01             	add    eax,0x1
c00111a4:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111aa:	83 ec 0c             	sub    esp,0xc
c00111ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b1:	e8 ca 70 ff ff       	call   c0008280 <pbuf_free>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	eb 11                	jmp    c00111cc <udp_input+0x46c>
c00111bb:	90                   	nop
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111c3:	e8 b8 70 ff ff       	call   c0008280 <pbuf_free>
c00111c8:	83 c4 10             	add    esp,0x10
c00111cb:	90                   	nop
c00111cc:	90                   	nop
c00111cd:	83 c4 28             	add    esp,0x28
c00111d0:	5b                   	pop    ebx
c00111d1:	c3                   	ret    
c00111d2:	66 90                	xchg   ax,ax

c00111d4 <udp_bind>:
c00111d4:	83 ec 2c             	sub    esp,0x2c
c00111d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00111db:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00111e0:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00111e5:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00111ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111ee:	e9 8d 00 00 00       	jmp    c0011280 <udp_bind+0xac>
c00111f3:	90                   	nop
c00111f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111f8:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00111fc:	75 26                	jne    c0011224 <udp_bind+0x50>
c00111fe:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011203:	85 c0                	test   eax,eax
c0011205:	74 15                	je     c001121c <udp_bind+0x48>
c0011207:	83 ec 08             	sub    esp,0x8
c001120a:	68 71 06 03 c0       	push   0xc0030671
c001120f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011214:	e8 a3 e7 00 00       	call   c001f9bc <CPrintf>
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011221:	eb 51                	jmp    c0011274 <udp_bind+0xa0>
c0011223:	90                   	nop
c0011224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011228:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001122c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011231:	0f b7 c0             	movzx  eax,ax
c0011234:	39 c2                	cmp    edx,eax
c0011236:	75 3c                	jne    c0011274 <udp_bind+0xa0>
c0011238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001123c:	85 c0                	test   eax,eax
c001123e:	74 2c                	je     c001126c <udp_bind+0x98>
c0011240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011244:	8b 00                	mov    eax,DWORD PTR [eax]
c0011246:	85 c0                	test   eax,eax
c0011248:	74 22                	je     c001126c <udp_bind+0x98>
c001124a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001124f:	74 1b                	je     c001126c <udp_bind+0x98>
c0011251:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011255:	8b 00                	mov    eax,DWORD PTR [eax]
c0011257:	85 c0                	test   eax,eax
c0011259:	74 11                	je     c001126c <udp_bind+0x98>
c001125b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001125f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011265:	8b 00                	mov    eax,DWORD PTR [eax]
c0011267:	39 c2                	cmp    edx,eax
c0011269:	75 09                	jne    c0011274 <udp_bind+0xa0>
c001126b:	90                   	nop
c001126c:	b0 f8                	mov    al,0xf8
c001126e:	e9 dd 00 00 00       	jmp    c0011350 <udp_bind+0x17c>
c0011273:	90                   	nop
c0011274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011278:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001127b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001127f:	90                   	nop
c0011280:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011285:	0f 85 69 ff ff ff    	jne    c00111f4 <udp_bind+0x20>
c001128b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011290:	74 0a                	je     c001129c <udp_bind+0xc8>
c0011292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011296:	8b 00                	mov    eax,DWORD PTR [eax]
c0011298:	eb 0a                	jmp    c00112a4 <udp_bind+0xd0>
c001129a:	66 90                	xchg   ax,ax
c001129c:	b8 00 00 00 00       	mov    eax,0x0
c00112a1:	8d 76 00             	lea    esi,[esi+0x0]
c00112a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112a8:	89 02                	mov    DWORD PTR [edx],eax
c00112aa:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00112af:	85 c0                	test   eax,eax
c00112b1:	75 6d                	jne    c0011320 <udp_bind+0x14c>
c00112b3:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00112ba:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00112bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112c3:	eb 3b                	jmp    c0011300 <udp_bind+0x12c>
c00112c5:	8d 76 00             	lea    esi,[esi+0x0]
c00112c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112cc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00112d0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00112d5:	0f b7 c0             	movzx  eax,ax
c00112d8:	39 c2                	cmp    edx,eax
c00112da:	75 18                	jne    c00112f4 <udp_bind+0x120>
c00112dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112e0:	83 c0 01             	add    eax,0x1
c00112e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00112e8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00112ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112f1:	eb 0d                	jmp    c0011300 <udp_bind+0x12c>
c00112f3:	90                   	nop
c00112f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112ff:	90                   	nop
c0011300:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011305:	74 0d                	je     c0011314 <udp_bind+0x140>
c0011307:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001130c:	3d ff ff 00 00       	cmp    eax,0xffff
c0011311:	75 b5                	jne    c00112c8 <udp_bind+0xf4>
c0011313:	90                   	nop
c0011314:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011319:	74 05                	je     c0011320 <udp_bind+0x14c>
c001131b:	b0 f8                	mov    al,0xf8
c001131d:	eb 31                	jmp    c0011350 <udp_bind+0x17c>
c001131f:	90                   	nop
c0011320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011324:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011328:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c001132c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011331:	85 c0                	test   eax,eax
c0011333:	75 17                	jne    c001134c <udp_bind+0x178>
c0011335:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001133b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001133f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011346:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001134b:	90                   	nop
c001134c:	b0 00                	mov    al,0x0
c001134e:	66 90                	xchg   ax,ax
c0011350:	83 c4 2c             	add    esp,0x2c
c0011353:	c3                   	ret    

c0011354 <udp_sendto_if>:
c0011354:	83 ec 2c             	sub    esp,0x2c
c0011357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001135b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011364:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011368:	0f b7 c0             	movzx  eax,ax
c001136b:	85 c0                	test   eax,eax
c001136d:	75 39                	jne    c00113a8 <udp_sendto_if+0x54>
c001136f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011373:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011377:	0f b7 d0             	movzx  edx,ax
c001137a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001137e:	83 ec 04             	sub    esp,0x4
c0011381:	52                   	push   edx
c0011382:	50                   	push   eax
c0011383:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011387:	e8 48 fe ff ff       	call   c00111d4 <udp_bind>
c001138c:	83 c4 10             	add    esp,0x10
c001138f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011393:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011398:	85 c0                	test   eax,eax
c001139a:	74 0c                	je     c00113a8 <udp_sendto_if+0x54>
c001139c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113a0:	e9 2f 02 00 00       	jmp    c00115d4 <udp_sendto_if+0x280>
c00113a5:	8d 76 00             	lea    esi,[esi+0x0]
c00113a8:	83 ec 08             	sub    esp,0x8
c00113ab:	6a 08                	push   0x8
c00113ad:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00113b1:	e8 2a 6d ff ff       	call   c00080e0 <pbuf_header>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	0f b6 c0             	movzx  eax,al
c00113bc:	85 c0                	test   eax,eax
c00113be:	74 48                	je     c0011408 <udp_sendto_if+0xb4>
c00113c0:	83 ec 04             	sub    esp,0x4
c00113c3:	6a 00                	push   0x0
c00113c5:	6a 08                	push   0x8
c00113c7:	6a 01                	push   0x1
c00113c9:	e8 8e 70 ff ff       	call   c000845c <pbuf_alloc>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113d5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00113da:	75 08                	jne    c00113e4 <udp_sendto_if+0x90>
c00113dc:	b0 ff                	mov    al,0xff
c00113de:	e9 f1 01 00 00       	jmp    c00115d4 <udp_sendto_if+0x280>
c00113e3:	90                   	nop
c00113e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00113eb:	0f b7 c0             	movzx  eax,ax
c00113ee:	85 c0                	test   eax,eax
c00113f0:	74 1e                	je     c0011410 <udp_sendto_if+0xbc>
c00113f2:	83 ec 08             	sub    esp,0x8
c00113f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00113fd:	e8 a2 77 ff ff       	call   c0008ba4 <pbuf_chain>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	eb 09                	jmp    c0011410 <udp_sendto_if+0xbc>
c0011407:	90                   	nop
c0011408:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001140c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011414:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011418:	0f b7 c0             	movzx  eax,ax
c001141b:	83 f8 07             	cmp    eax,0x7
c001141e:	77 18                	ja     c0011438 <udp_sendto_if+0xe4>
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	68 80 06 03 c0       	push   0xc0030680
c0011428:	68 e6 f6 02 c0       	push   0xc002f6e6
c001142d:	e8 8a e5 00 00       	call   c001f9bc <CPrintf>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	8d 76 00             	lea    esi,[esi+0x0]
c0011438:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001143c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011447:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001144b:	0f b7 c0             	movzx  eax,ax
c001144e:	83 ec 0c             	sub    esp,0xc
c0011451:	50                   	push   eax
c0011452:	e8 c5 f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	89 c2                	mov    edx,eax
c001145c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011460:	66 89 10             	mov    WORD PTR [eax],dx
c0011463:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	50                   	push   eax
c001146c:	e8 ab f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	89 c2                	mov    edx,eax
c0011476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001147a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001147e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011482:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001148c:	85 c0                	test   eax,eax
c001148e:	74 0c                	je     c001149c <udp_sendto_if+0x148>
c0011490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011494:	8b 00                	mov    eax,DWORD PTR [eax]
c0011496:	85 c0                	test   eax,eax
c0011498:	75 12                	jne    c00114ac <udp_sendto_if+0x158>
c001149a:	66 90                	xchg   ax,ax
c001149c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a0:	83 c0 04             	add    eax,0x4
c00114a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a7:	eb 47                	jmp    c00114f0 <udp_sendto_if+0x19c>
c00114a9:	8d 76 00             	lea    esi,[esi+0x0]
c00114ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00114b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b9:	39 c2                	cmp    edx,eax
c00114bb:	74 2b                	je     c00114e8 <udp_sendto_if+0x194>
c00114bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114c1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00114c5:	74 19                	je     c00114e0 <udp_sendto_if+0x18c>
c00114c7:	83 ec 0c             	sub    esp,0xc
c00114ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00114ce:	e8 ad 6d ff ff       	call   c0008280 <pbuf_free>
c00114d3:	83 c4 10             	add    esp,0x10
c00114d6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00114de:	66 90                	xchg   ax,ax
c00114e0:	b0 fa                	mov    al,0xfa
c00114e2:	e9 ed 00 00 00       	jmp    c00115d4 <udp_sendto_if+0x280>
c00114e7:	90                   	nop
c00114e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114f7:	0f b7 c0             	movzx  eax,ax
c00114fa:	83 ec 0c             	sub    esp,0xc
c00114fd:	50                   	push   eax
c00114fe:	e8 19 f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	89 c2                	mov    edx,eax
c0011508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0011510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011514:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011517:	0f b6 c0             	movzx  eax,al
c001151a:	83 e0 01             	and    eax,0x1
c001151d:	75 49                	jne    c0011568 <udp_sendto_if+0x214>
c001151f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011523:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011526:	0f b7 c0             	movzx  eax,ax
c0011529:	83 ec 0c             	sub    esp,0xc
c001152c:	50                   	push   eax
c001152d:	6a 11                	push   0x11
c001152f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001153b:	e8 fc 1b 00 00       	call   c001313c <inet_chksum_pseudo>
c0011540:	83 c4 20             	add    esp,0x20
c0011543:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011548:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c001154d:	85 c0                	test   eax,eax
c001154f:	75 07                	jne    c0011558 <udp_sendto_if+0x204>
c0011551:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c0011558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0011561:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0011565:	8d 76 00             	lea    esi,[esi+0x0]
c0011568:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156c:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c001156f:	0f b6 d0             	movzx  edx,al
c0011572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011576:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011579:	0f b6 c0             	movzx  eax,al
c001157c:	83 ec 04             	sub    esp,0x4
c001157f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011583:	6a 11                	push   0x11
c0011585:	52                   	push   edx
c0011586:	50                   	push   eax
c0011587:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001158b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001158f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011593:	e8 08 25 00 00       	call   c0013aa0 <ip_output_if>
c0011598:	83 c4 20             	add    esp,0x20
c001159b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001159f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115a3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115a7:	74 17                	je     c00115c0 <udp_sendto_if+0x26c>
c00115a9:	83 ec 0c             	sub    esp,0xc
c00115ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115b0:	e8 cb 6c ff ff       	call   c0008280 <pbuf_free>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00115c0:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00115c6:	83 c0 01             	add    eax,0x1
c00115c9:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00115cf:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00115d3:	90                   	nop
c00115d4:	83 c4 2c             	add    esp,0x2c
c00115d7:	c3                   	ret    

c00115d8 <udp_sendto>:
c00115d8:	83 ec 2c             	sub    esp,0x2c
c00115db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115e4:	83 ec 0c             	sub    esp,0xc
c00115e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115eb:	e8 d8 1f 00 00       	call   c00135c8 <ip_route>
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115f7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00115fc:	75 16                	jne    c0011614 <udp_sendto+0x3c>
c00115fe:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011604:	83 c0 01             	add    eax,0x1
c0011607:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c001160d:	b0 fc                	mov    al,0xfc
c001160f:	eb 27                	jmp    c0011638 <udp_sendto+0x60>
c0011611:	8d 76 00             	lea    esi,[esi+0x0]
c0011614:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011619:	83 ec 0c             	sub    esp,0xc
c001161c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011620:	50                   	push   eax
c0011621:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011625:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011629:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001162d:	e8 22 fd ff ff       	call   c0011354 <udp_sendto_if>
c0011632:	83 c4 20             	add    esp,0x20
c0011635:	8d 76 00             	lea    esi,[esi+0x0]
c0011638:	83 c4 2c             	add    esp,0x2c
c001163b:	c3                   	ret    

c001163c <udp_send>:
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011643:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011646:	0f b7 c0             	movzx  eax,ax
c0011649:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164d:	83 c2 04             	add    edx,0x4
c0011650:	50                   	push   eax
c0011651:	52                   	push   edx
c0011652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001165a:	e8 79 ff ff ff       	call   c00115d8 <udp_sendto>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	83 c4 0c             	add    esp,0xc
c0011665:	c3                   	ret    
c0011666:	66 90                	xchg   ax,ax

c0011668 <udp_connect>:
c0011668:	83 ec 2c             	sub    esp,0x2c
c001166b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001166f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011678:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001167c:	0f b7 c0             	movzx  eax,ax
c001167f:	85 c0                	test   eax,eax
c0011681:	75 39                	jne    c00116bc <udp_connect+0x54>
c0011683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011687:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001168b:	0f b7 d0             	movzx  edx,ax
c001168e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011692:	83 ec 04             	sub    esp,0x4
c0011695:	52                   	push   edx
c0011696:	50                   	push   eax
c0011697:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001169b:	e8 34 fb ff ff       	call   c00111d4 <udp_bind>
c00116a0:	83 c4 10             	add    esp,0x10
c00116a3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116a7:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00116ac:	85 c0                	test   eax,eax
c00116ae:	74 0c                	je     c00116bc <udp_connect+0x54>
c00116b0:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00116b4:	e9 8b 00 00 00       	jmp    c0011744 <udp_connect+0xdc>
c00116b9:	8d 76 00             	lea    esi,[esi+0x0]
c00116bc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00116c1:	74 09                	je     c00116cc <udp_connect+0x64>
c00116c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c9:	eb 09                	jmp    c00116d4 <udp_connect+0x6c>
c00116cb:	90                   	nop
c00116cc:	b8 00 00 00 00       	mov    eax,0x0
c00116d1:	8d 76 00             	lea    esi,[esi+0x0]
c00116d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116d8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00116e3:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c00116e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116eb:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116ee:	83 c8 04             	or     eax,0x4
c00116f1:	88 c2                	mov    dl,al
c00116f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116f7:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00116fa:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00116ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011703:	eb 1f                	jmp    c0011724 <udp_connect+0xbc>
c0011705:	8d 76 00             	lea    esi,[esi+0x0]
c0011708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001170c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011710:	75 06                	jne    c0011718 <udp_connect+0xb0>
c0011712:	b0 00                	mov    al,0x0
c0011714:	eb 2e                	jmp    c0011744 <udp_connect+0xdc>
c0011716:	66 90                	xchg   ax,ax
c0011718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001171c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001171f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011723:	90                   	nop
c0011724:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011729:	75 dd                	jne    c0011708 <udp_connect+0xa0>
c001172b:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011735:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001173c:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011741:	b0 00                	mov    al,0x0
c0011743:	90                   	nop
c0011744:	83 c4 2c             	add    esp,0x2c
c0011747:	c3                   	ret    

c0011748 <udp_disconnect>:
c0011748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011757:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c001175d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011761:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011764:	83 e0 fb             	and    eax,0xfffffffb
c0011767:	88 c2                	mov    dl,al
c0011769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176d:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011770:	90                   	nop
c0011771:	c3                   	ret    
c0011772:	66 90                	xchg   ax,ax

c0011774 <udp_recv>:
c0011774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001177c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001177f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011783:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011787:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001178a:	90                   	nop
c001178b:	c3                   	ret    

c001178c <udp_remove>:
c001178c:	83 ec 1c             	sub    esp,0x1c
c001178f:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011794:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011798:	75 12                	jne    c00117ac <udp_remove+0x20>
c001179a:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001179f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117a2:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117a7:	eb 4b                	jmp    c00117f4 <udp_remove+0x68>
c00117a9:	8d 76 00             	lea    esi,[esi+0x0]
c00117ac:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117b5:	eb 35                	jmp    c00117ec <udp_remove+0x60>
c00117b7:	90                   	nop
c00117b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117bf:	85 c0                	test   eax,eax
c00117c1:	74 1d                	je     c00117e0 <udp_remove+0x54>
c00117c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117ca:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117ce:	75 10                	jne    c00117e0 <udp_remove+0x54>
c00117d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117d4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00117de:	66 90                	xchg   ax,ax
c00117e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117eb:	90                   	nop
c00117ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00117f1:	75 c5                	jne    c00117b8 <udp_remove+0x2c>
c00117f3:	90                   	nop
c00117f4:	83 ec 08             	sub    esp,0x8
c00117f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00117fb:	6a 01                	push   0x1
c00117fd:	e8 be 61 ff ff       	call   c00079c0 <memp_free>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	90                   	nop
c0011806:	83 c4 1c             	add    esp,0x1c
c0011809:	c3                   	ret    
c001180a:	66 90                	xchg   ax,ax

c001180c <udp_new>:
c001180c:	83 ec 1c             	sub    esp,0x1c
c001180f:	83 ec 0c             	sub    esp,0xc
c0011812:	6a 01                	push   0x1
c0011814:	e8 7b 60 ff ff       	call   c0007894 <memp_malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011820:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011825:	74 1d                	je     c0011844 <udp_new+0x38>
c0011827:	83 ec 04             	sub    esp,0x4
c001182a:	6a 20                	push   0x20
c001182c:	6a 00                	push   0x0
c001182e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011832:	e8 b9 ec fe ff       	call   c00004f0 <memset>
c0011837:	83 c4 10             	add    esp,0x10
c001183a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183e:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011842:	66 90                	xchg   ax,ax
c0011844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011848:	83 c4 1c             	add    esp,0x1c
c001184b:	c3                   	ret    

c001184c <free_entry>:
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011853:	c1 e0 04             	shl    eax,0x4
c0011856:	05 00 a9 03 c0       	add    eax,0xc003a900
c001185b:	8b 00                	mov    eax,DWORD PTR [eax]
c001185d:	85 c0                	test   eax,eax
c001185f:	74 2f                	je     c0011890 <free_entry+0x44>
c0011861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011865:	c1 e0 04             	shl    eax,0x4
c0011868:	05 00 a9 03 c0       	add    eax,0xc003a900
c001186d:	8b 00                	mov    eax,DWORD PTR [eax]
c001186f:	83 ec 0c             	sub    esp,0xc
c0011872:	50                   	push   eax
c0011873:	e8 08 6a ff ff       	call   c0008280 <pbuf_free>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187f:	c1 e0 04             	shl    eax,0x4
c0011882:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011887:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001188d:	8d 76 00             	lea    esi,[esi+0x0]
c0011890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011894:	c1 e0 04             	shl    eax,0x4
c0011897:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001189c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001189f:	90                   	nop
c00118a0:	83 c4 0c             	add    esp,0xc
c00118a3:	c3                   	ret    

c00118a4 <etharp_tmr>:
c00118a4:	83 ec 1c             	sub    esp,0x1c
c00118a7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118ac:	e9 a7 00 00 00       	jmp    c0011958 <etharp_tmr+0xb4>
c00118b1:	8d 76 00             	lea    esi,[esi+0x0]
c00118b4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118b9:	c1 e0 04             	shl    eax,0x4
c00118bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118c1:	8a 00                	mov    al,BYTE PTR [eax]
c00118c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00118c7:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00118cc:	85 c0                	test   eax,eax
c00118ce:	74 7c                	je     c001194c <etharp_tmr+0xa8>
c00118d0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118d5:	89 c2                	mov    edx,eax
c00118d7:	c1 e2 04             	shl    edx,0x4
c00118da:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c00118e0:	8a 12                	mov    dl,BYTE PTR [edx]
c00118e2:	83 c2 01             	add    edx,0x1
c00118e5:	c1 e0 04             	shl    eax,0x4
c00118e8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00118ed:	88 10                	mov    BYTE PTR [eax],dl
c00118ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118f4:	c1 e0 04             	shl    eax,0x4
c00118f7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00118fc:	8a 00                	mov    al,BYTE PTR [eax]
c00118fe:	0f b6 c0             	movzx  eax,al
c0011901:	3d ef 00 00 00       	cmp    eax,0xef
c0011906:	77 30                	ja     c0011938 <etharp_tmr+0x94>
c0011908:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001190d:	c1 e0 04             	shl    eax,0x4
c0011910:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011915:	8a 00                	mov    al,BYTE PTR [eax]
c0011917:	0f b6 c0             	movzx  eax,al
c001191a:	83 f8 01             	cmp    eax,0x1
c001191d:	75 2d                	jne    c001194c <etharp_tmr+0xa8>
c001191f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011924:	c1 e0 04             	shl    eax,0x4
c0011927:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001192c:	8a 00                	mov    al,BYTE PTR [eax]
c001192e:	0f b6 c0             	movzx  eax,al
c0011931:	83 f8 01             	cmp    eax,0x1
c0011934:	76 16                	jbe    c001194c <etharp_tmr+0xa8>
c0011936:	66 90                	xchg   ax,ax
c0011938:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	50                   	push   eax
c0011941:	e8 06 ff ff ff       	call   c001184c <free_entry>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	8d 76 00             	lea    esi,[esi+0x0]
c001194c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011950:	83 c0 01             	add    eax,0x1
c0011953:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011957:	90                   	nop
c0011958:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001195d:	83 f8 09             	cmp    eax,0x9
c0011960:	0f 86 4e ff ff ff    	jbe    c00118b4 <etharp_tmr+0x10>
c0011966:	90                   	nop
c0011967:	83 c4 1c             	add    esp,0x1c
c001196a:	c3                   	ret    
c001196b:	90                   	nop

c001196c <find_entry>:
c001196c:	83 ec 2c             	sub    esp,0x2c
c001196f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011973:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011977:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c001197c:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011981:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011986:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001198b:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011990:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011995:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c001199a:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c001199f:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119a4:	e9 7f 01 00 00       	jmp    c0011b28 <find_entry+0x1bc>
c00119a9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119b1:	c1 e0 04             	shl    eax,0x4
c00119b4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00119b9:	8a 00                	mov    al,BYTE PTR [eax]
c00119bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00119bf:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c00119c4:	83 f8 0a             	cmp    eax,0xa
c00119c7:	75 17                	jne    c00119e0 <find_entry+0x74>
c00119c9:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119ce:	85 c0                	test   eax,eax
c00119d0:	75 0e                	jne    c00119e0 <find_entry+0x74>
c00119d2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00119d6:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00119da:	e9 3d 01 00 00       	jmp    c0011b1c <find_entry+0x1b0>
c00119df:	90                   	nop
c00119e0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119e5:	85 c0                	test   eax,eax
c00119e7:	0f 84 2f 01 00 00    	je     c0011b1c <find_entry+0x1b0>
c00119ed:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119f2:	83 f8 01             	cmp    eax,0x1
c00119f5:	74 21                	je     c0011a18 <find_entry+0xac>
c00119f7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119fc:	83 f8 02             	cmp    eax,0x2
c00119ff:	74 17                	je     c0011a18 <find_entry+0xac>
c0011a01:	83 ec 08             	sub    esp,0x8
c0011a04:	68 b0 06 03 c0       	push   0xc00306b0
c0011a09:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011a0e:	e8 a9 df 00 00       	call   c001f9bc <CPrintf>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	66 90                	xchg   ax,ax
c0011a18:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a1d:	74 25                	je     c0011a44 <find_entry+0xd8>
c0011a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a23:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a25:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a2a:	c1 e0 04             	shl    eax,0x4
c0011a2d:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a34:	39 c2                	cmp    edx,eax
c0011a36:	75 0c                	jne    c0011a44 <find_entry+0xd8>
c0011a38:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a3c:	e9 53 02 00 00       	jmp    c0011c94 <find_entry+0x328>
c0011a41:	8d 76 00             	lea    esi,[esi+0x0]
c0011a44:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a49:	83 f8 01             	cmp    eax,0x1
c0011a4c:	0f 85 8a 00 00 00    	jne    c0011adc <find_entry+0x170>
c0011a52:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a57:	c1 e0 04             	shl    eax,0x4
c0011a5a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a61:	85 c0                	test   eax,eax
c0011a63:	74 3f                	je     c0011aa4 <find_entry+0x138>
c0011a65:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a6a:	c1 e0 04             	shl    eax,0x4
c0011a6d:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a72:	8a 00                	mov    al,BYTE PTR [eax]
c0011a74:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011a79:	0f b6 c0             	movzx  eax,al
c0011a7c:	39 c2                	cmp    edx,eax
c0011a7e:	0f 87 98 00 00 00    	ja     c0011b1c <find_entry+0x1b0>
c0011a84:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a88:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011a8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a91:	c1 e0 04             	shl    eax,0x4
c0011a94:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a99:	8a 00                	mov    al,BYTE PTR [eax]
c0011a9b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011a9f:	eb 7b                	jmp    c0011b1c <find_entry+0x1b0>
c0011aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0011aa4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa9:	c1 e0 04             	shl    eax,0x4
c0011aac:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ab1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ab8:	0f b6 c0             	movzx  eax,al
c0011abb:	39 c2                	cmp    edx,eax
c0011abd:	77 5d                	ja     c0011b1c <find_entry+0x1b0>
c0011abf:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ac3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011ac7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011acc:	c1 e0 04             	shl    eax,0x4
c0011acf:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ad4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ad6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011ada:	eb 40                	jmp    c0011b1c <find_entry+0x1b0>
c0011adc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ae1:	83 f8 02             	cmp    eax,0x2
c0011ae4:	75 36                	jne    c0011b1c <find_entry+0x1b0>
c0011ae6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aeb:	c1 e0 04             	shl    eax,0x4
c0011aee:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011af3:	8a 00                	mov    al,BYTE PTR [eax]
c0011af5:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011afa:	0f b6 c0             	movzx  eax,al
c0011afd:	39 c2                	cmp    edx,eax
c0011aff:	77 1b                	ja     c0011b1c <find_entry+0x1b0>
c0011b01:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b05:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b09:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b0e:	c1 e0 04             	shl    eax,0x4
c0011b11:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b16:	8a 00                	mov    al,BYTE PTR [eax]
c0011b18:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b1c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b20:	83 c0 01             	add    eax,0x1
c0011b23:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b27:	90                   	nop
c0011b28:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b2d:	83 f8 09             	cmp    eax,0x9
c0011b30:	0f 86 76 fe ff ff    	jbe    c00119ac <find_entry+0x40>
c0011b36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b3b:	83 e0 02             	and    eax,0x2
c0011b3e:	75 14                	jne    c0011b54 <find_entry+0x1e8>
c0011b40:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b45:	83 f8 0a             	cmp    eax,0xa
c0011b48:	75 12                	jne    c0011b5c <find_entry+0x1f0>
c0011b4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b4f:	83 e0 01             	and    eax,0x1
c0011b52:	75 08                	jne    c0011b5c <find_entry+0x1f0>
c0011b54:	b0 ff                	mov    al,0xff
c0011b56:	e9 39 01 00 00       	jmp    c0011c94 <find_entry+0x328>
c0011b5b:	90                   	nop
c0011b5c:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b61:	83 f8 09             	cmp    eax,0x9
c0011b64:	7f 0e                	jg     c0011b74 <find_entry+0x208>
c0011b66:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011b6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b6e:	e9 a1 00 00 00       	jmp    c0011c14 <find_entry+0x2a8>
c0011b73:	90                   	nop
c0011b74:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011b79:	83 f8 09             	cmp    eax,0x9
c0011b7c:	7f 32                	jg     c0011bb0 <find_entry+0x244>
c0011b7e:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011b82:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b86:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b8b:	c1 e0 04             	shl    eax,0x4
c0011b8e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b95:	85 c0                	test   eax,eax
c0011b97:	74 47                	je     c0011be0 <find_entry+0x274>
c0011b99:	83 ec 08             	sub    esp,0x8
c0011b9c:	68 29 08 03 c0       	push   0xc0030829
c0011ba1:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011ba6:	e8 11 de 00 00       	call   c001f9bc <CPrintf>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	eb 30                	jmp    c0011be0 <find_entry+0x274>
c0011bb0:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011bb5:	83 f8 09             	cmp    eax,0x9
c0011bb8:	7f 0a                	jg     c0011bc4 <find_entry+0x258>
c0011bba:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011bbe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bc2:	eb 1c                	jmp    c0011be0 <find_entry+0x274>
c0011bc4:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011bc9:	83 f8 09             	cmp    eax,0x9
c0011bcc:	7f 0a                	jg     c0011bd8 <find_entry+0x26c>
c0011bce:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011bd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bd6:	eb 08                	jmp    c0011be0 <find_entry+0x274>
c0011bd8:	b0 ff                	mov    al,0xff
c0011bda:	e9 b5 00 00 00       	jmp    c0011c94 <find_entry+0x328>
c0011bdf:	90                   	nop
c0011be0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011be5:	83 f8 09             	cmp    eax,0x9
c0011be8:	76 16                	jbe    c0011c00 <find_entry+0x294>
c0011bea:	83 ec 08             	sub    esp,0x8
c0011bed:	68 40 08 03 c0       	push   0xc0030840
c0011bf2:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011bf7:	e8 c0 dd 00 00       	call   c001f9bc <CPrintf>
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	90                   	nop
c0011c00:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c05:	83 ec 0c             	sub    esp,0xc
c0011c08:	50                   	push   eax
c0011c09:	e8 3e fc ff ff       	call   c001184c <free_entry>
c0011c0e:	83 c4 10             	add    esp,0x10
c0011c11:	8d 76 00             	lea    esi,[esi+0x0]
c0011c14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c19:	83 f8 09             	cmp    eax,0x9
c0011c1c:	76 16                	jbe    c0011c34 <find_entry+0x2c8>
c0011c1e:	83 ec 08             	sub    esp,0x8
c0011c21:	68 40 08 03 c0       	push   0xc0030840
c0011c26:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011c2b:	e8 8c dd 00 00       	call   c001f9bc <CPrintf>
c0011c30:	83 c4 10             	add    esp,0x10
c0011c33:	90                   	nop
c0011c34:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c39:	c1 e0 04             	shl    eax,0x4
c0011c3c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c41:	8a 00                	mov    al,BYTE PTR [eax]
c0011c43:	0f b6 c0             	movzx  eax,al
c0011c46:	85 c0                	test   eax,eax
c0011c48:	74 16                	je     c0011c60 <find_entry+0x2f4>
c0011c4a:	83 ec 08             	sub    esp,0x8
c0011c4d:	68 f0 06 03 c0       	push   0xc00306f0
c0011c52:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011c57:	e8 60 dd 00 00       	call   c001f9bc <CPrintf>
c0011c5c:	83 c4 10             	add    esp,0x10
c0011c5f:	90                   	nop
c0011c60:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c65:	74 19                	je     c0011c80 <find_entry+0x314>
c0011c67:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c72:	c1 e2 04             	shl    edx,0x4
c0011c75:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011c7b:	89 02                	mov    DWORD PTR [edx],eax
c0011c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c80:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c85:	c1 e0 04             	shl    eax,0x4
c0011c88:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011c90:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c94:	83 c4 2c             	add    esp,0x2c
c0011c97:	c3                   	ret    

c0011c98 <etharp_send_ip>:
c0011c98:	83 ec 1c             	sub    esp,0x1c
c0011c9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ca2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011caa:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cad:	0f b6 c0             	movzx  eax,al
c0011cb0:	83 f8 06             	cmp    eax,0x6
c0011cb3:	74 17                	je     c0011ccc <etharp_send_ip+0x34>
c0011cb5:	83 ec 08             	sub    esp,0x8
c0011cb8:	68 1c 07 03 c0       	push   0xc003071c
c0011cbd:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011cc2:	e8 f5 dc 00 00       	call   c001f9bc <CPrintf>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	66 90                	xchg   ax,ax
c0011ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd0:	83 ec 04             	sub    esp,0x4
c0011cd3:	6a 06                	push   0x6
c0011cd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011cd9:	50                   	push   eax
c0011cda:	e8 9b e6 fe ff       	call   c000037a <memcpy>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce6:	83 c0 06             	add    eax,0x6
c0011ce9:	83 ec 04             	sub    esp,0x4
c0011cec:	6a 06                	push   0x6
c0011cee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011cf2:	50                   	push   eax
c0011cf3:	e8 82 e6 fe ff       	call   c000037a <memcpy>
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cff:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d09:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d0c:	83 ec 08             	sub    esp,0x8
c0011d0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d17:	ff d0                	call   eax
c0011d19:	83 c4 10             	add    esp,0x10
c0011d1c:	83 c4 1c             	add    esp,0x1c
c0011d1f:	c3                   	ret    

c0011d20 <update_arp_entry>:
c0011d20:	83 ec 2c             	sub    esp,0x2c
c0011d23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d32:	0f b6 c0             	movzx  eax,al
c0011d35:	83 f8 06             	cmp    eax,0x6
c0011d38:	74 16                	je     c0011d50 <update_arp_entry+0x30>
c0011d3a:	83 ec 08             	sub    esp,0x8
c0011d3d:	68 60 07 03 c0       	push   0xc0030760
c0011d42:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011d47:	e8 70 dc 00 00       	call   c001f9bc <CPrintf>
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	90                   	nop
c0011d50:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011d55:	74 39                	je     c0011d90 <update_arp_entry+0x70>
c0011d57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5d:	85 c0                	test   eax,eax
c0011d5f:	74 2f                	je     c0011d90 <update_arp_entry+0x70>
c0011d61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d67:	83 ec 08             	sub    esp,0x8
c0011d6a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d6e:	50                   	push   eax
c0011d6f:	e8 b0 20 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	0f b6 c0             	movzx  eax,al
c0011d7a:	85 c0                	test   eax,eax
c0011d7c:	75 12                	jne    c0011d90 <update_arp_entry+0x70>
c0011d7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d84:	25 f0 00 00 00       	and    eax,0xf0
c0011d89:	3d e0 00 00 00       	cmp    eax,0xe0
c0011d8e:	75 08                	jne    c0011d98 <update_arp_entry+0x78>
c0011d90:	b0 f2                	mov    al,0xf2
c0011d92:	e9 d9 00 00 00       	jmp    c0011e70 <update_arp_entry+0x150>
c0011d97:	90                   	nop
c0011d98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	50                   	push   eax
c0011da1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011da5:	e8 c2 fb ff ff       	call   c001196c <find_entry>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011db1:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011db6:	85 c0                	test   eax,eax
c0011db8:	79 0a                	jns    c0011dc4 <update_arp_entry+0xa4>
c0011dba:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011dbe:	e9 ad 00 00 00       	jmp    c0011e70 <update_arp_entry+0x150>
c0011dc3:	90                   	nop
c0011dc4:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dc9:	c1 e0 04             	shl    eax,0x4
c0011dcc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011dd1:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011dd4:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dd9:	c1 e0 04             	shl    eax,0x4
c0011ddc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011de1:	83 c0 08             	add    eax,0x8
c0011de4:	83 ec 04             	sub    esp,0x4
c0011de7:	6a 06                	push   0x6
c0011de9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ded:	50                   	push   eax
c0011dee:	e8 87 e5 fe ff       	call   c000037a <memcpy>
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dfb:	c1 e0 04             	shl    eax,0x4
c0011dfe:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e03:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e06:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e0b:	c1 e0 04             	shl    eax,0x4
c0011e0e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e15:	85 c0                	test   eax,eax
c0011e17:	74 53                	je     c0011e6c <update_arp_entry+0x14c>
c0011e19:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e1e:	c1 e0 04             	shl    eax,0x4
c0011e21:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e2c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e31:	c1 e0 04             	shl    eax,0x4
c0011e34:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e43:	83 c0 23             	add    eax,0x23
c0011e46:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e4a:	50                   	push   eax
c0011e4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011e53:	e8 40 fe ff ff       	call   c0011c98 <etharp_send_ip>
c0011e58:	83 c4 10             	add    esp,0x10
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e62:	e8 19 64 ff ff       	call   c0008280 <pbuf_free>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	66 90                	xchg   ax,ax
c0011e6c:	b0 00                	mov    al,0x0
c0011e6e:	66 90                	xchg   ax,ax
c0011e70:	83 c4 2c             	add    esp,0x2c
c0011e73:	c3                   	ret    

c0011e74 <etharp_find_addr>:
c0011e74:	83 ec 1c             	sub    esp,0x1c
c0011e77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011e7c:	74 0a                	je     c0011e88 <etharp_find_addr+0x14>
c0011e7e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011e83:	75 1b                	jne    c0011ea0 <etharp_find_addr+0x2c>
c0011e85:	8d 76 00             	lea    esi,[esi+0x0]
c0011e88:	83 ec 08             	sub    esp,0x8
c0011e8b:	68 88 07 03 c0       	push   0xc0030788
c0011e90:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011e95:	e8 22 db 00 00       	call   c001f9bc <CPrintf>
c0011e9a:	83 c4 10             	add    esp,0x10
c0011e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0011ea0:	83 ec 08             	sub    esp,0x8
c0011ea3:	6a 02                	push   0x2
c0011ea5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ea9:	e8 be fa ff ff       	call   c001196c <find_entry>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011eb5:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011eba:	85 c0                	test   eax,eax
c0011ebc:	78 4a                	js     c0011f08 <etharp_find_addr+0x94>
c0011ebe:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011ec3:	c1 e0 04             	shl    eax,0x4
c0011ec6:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ecb:	8a 00                	mov    al,BYTE PTR [eax]
c0011ecd:	0f b6 c0             	movzx  eax,al
c0011ed0:	83 f8 02             	cmp    eax,0x2
c0011ed3:	75 33                	jne    c0011f08 <etharp_find_addr+0x94>
c0011ed5:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011eda:	c1 e0 04             	shl    eax,0x4
c0011edd:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ee2:	8d 50 08             	lea    edx,[eax+0x8]
c0011ee5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ee9:	89 10                	mov    DWORD PTR [eax],edx
c0011eeb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011ef0:	c1 e0 04             	shl    eax,0x4
c0011ef3:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ef8:	8d 50 04             	lea    edx,[eax+0x4]
c0011efb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eff:	89 10                	mov    DWORD PTR [eax],edx
c0011f01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f05:	eb 05                	jmp    c0011f0c <etharp_find_addr+0x98>
c0011f07:	90                   	nop
c0011f08:	b0 ff                	mov    al,0xff
c0011f0a:	66 90                	xchg   ax,ax
c0011f0c:	83 c4 1c             	add    esp,0x1c
c0011f0f:	c3                   	ret    

c0011f10 <etharp_arp_input>:
c0011f10:	83 ec 2c             	sub    esp,0x2c
c0011f13:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f18:	75 1a                	jne    c0011f34 <etharp_arp_input+0x24>
c0011f1a:	83 ec 08             	sub    esp,0x8
c0011f1d:	68 53 08 03 c0       	push   0xc0030853
c0011f22:	68 e6 f6 02 c0       	push   0xc002f6e6
c0011f27:	e8 90 da 00 00       	call   c001f9bc <CPrintf>
c0011f2c:	83 c4 10             	add    esp,0x10
c0011f2f:	e9 d4 02 00 00       	jmp    c0012208 <etharp_arp_input+0x2f8>
c0011f34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f38:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f3c:	0f b7 c0             	movzx  eax,ax
c0011f3f:	83 f8 29             	cmp    eax,0x29
c0011f42:	77 34                	ja     c0011f78 <etharp_arp_input+0x68>
c0011f44:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f4a:	83 c0 01             	add    eax,0x1
c0011f4d:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011f53:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011f59:	83 c0 01             	add    eax,0x1
c0011f5c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011f69:	e8 12 63 ff ff       	call   c0008280 <pbuf_free>
c0011f6e:	83 c4 10             	add    esp,0x10
c0011f71:	e9 92 02 00 00       	jmp    c0012208 <etharp_arp_input+0x2f8>
c0011f76:	66 90                	xchg   ax,ax
c0011f78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f87:	83 c0 0e             	add    eax,0xe
c0011f8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f92:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011f95:	0f b7 c0             	movzx  eax,ax
c0011f98:	3d 00 01 00 00       	cmp    eax,0x100
c0011f9d:	75 31                	jne    c0011fd0 <etharp_arp_input+0xc0>
c0011f9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fa3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011fa6:	0f b6 c0             	movzx  eax,al
c0011fa9:	83 f8 06             	cmp    eax,0x6
c0011fac:	75 22                	jne    c0011fd0 <etharp_arp_input+0xc0>
c0011fae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fb2:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0011fb5:	0f b6 c0             	movzx  eax,al
c0011fb8:	83 f8 04             	cmp    eax,0x4
c0011fbb:	75 13                	jne    c0011fd0 <etharp_arp_input+0xc0>
c0011fbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fc1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011fc5:	0f b7 c0             	movzx  eax,ax
c0011fc8:	83 f8 08             	cmp    eax,0x8
c0011fcb:	74 37                	je     c0012004 <etharp_arp_input+0xf4>
c0011fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0011fd0:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0011fd6:	83 c0 01             	add    eax,0x1
c0011fd9:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0011fdf:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fe5:	83 c0 01             	add    eax,0x1
c0011fe8:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011ff5:	e8 86 62 ff ff       	call   c0008280 <pbuf_free>
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	e9 06 02 00 00       	jmp    c0012208 <etharp_arp_input+0x2f8>
c0012002:	66 90                	xchg   ax,ax
c0012004:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001200a:	83 c0 01             	add    eax,0x1
c001200d:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0012013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012017:	83 c0 0e             	add    eax,0xe
c001201a:	83 ec 04             	sub    esp,0x4
c001201d:	6a 04                	push   0x4
c001201f:	50                   	push   eax
c0012020:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012024:	50                   	push   eax
c0012025:	e8 50 e3 fe ff       	call   c000037a <memcpy>
c001202a:	83 c4 10             	add    esp,0x10
c001202d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012031:	83 c0 18             	add    eax,0x18
c0012034:	83 ec 04             	sub    esp,0x4
c0012037:	6a 04                	push   0x4
c0012039:	50                   	push   eax
c001203a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001203e:	50                   	push   eax
c001203f:	e8 36 e3 fe ff       	call   c000037a <memcpy>
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001204b:	83 c0 04             	add    eax,0x4
c001204e:	74 0c                	je     c001205c <etharp_arp_input+0x14c>
c0012050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012057:	85 c0                	test   eax,eax
c0012059:	75 09                	jne    c0012064 <etharp_arp_input+0x154>
c001205b:	90                   	nop
c001205c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012061:	eb 15                	jmp    c0012078 <etharp_arp_input+0x168>
c0012063:	90                   	nop
c0012064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001206c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001206f:	39 c2                	cmp    edx,eax
c0012071:	0f 94 c0             	sete   al
c0012074:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012078:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001207d:	85 c0                	test   eax,eax
c001207f:	74 07                	je     c0012088 <etharp_arp_input+0x178>
c0012081:	b8 01 00 00 00       	mov    eax,0x1
c0012086:	eb 08                	jmp    c0012090 <etharp_arp_input+0x180>
c0012088:	b8 02 00 00 00       	mov    eax,0x2
c001208d:	8d 76 00             	lea    esi,[esi+0x0]
c0012090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012094:	83 c2 08             	add    edx,0x8
c0012097:	50                   	push   eax
c0012098:	52                   	push   edx
c0012099:	8d 44 24 18          	lea    eax,[esp+0x18]
c001209d:	50                   	push   eax
c001209e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120a2:	e8 79 fc ff ff       	call   c0011d20 <update_arp_entry>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ae:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00120b2:	0f b7 c0             	movzx  eax,ax
c00120b5:	3d 00 01 00 00       	cmp    eax,0x100
c00120ba:	74 10                	je     c00120cc <etharp_arp_input+0x1bc>
c00120bc:	3d 00 02 00 00       	cmp    eax,0x200
c00120c1:	0f 84 2d 01 00 00    	je     c00121f4 <etharp_arp_input+0x2e4>
c00120c7:	e9 14 01 00 00       	jmp    c00121e0 <etharp_arp_input+0x2d0>
c00120cc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120d1:	85 c0                	test   eax,eax
c00120d3:	0f 84 fb 00 00 00    	je     c00121d4 <etharp_arp_input+0x2c4>
c00120d9:	83 ec 0c             	sub    esp,0xc
c00120dc:	6a 02                	push   0x2
c00120de:	e8 39 eb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00120e3:	83 c4 10             	add    esp,0x10
c00120e6:	89 c2                	mov    edx,eax
c00120e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ec:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00120f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120f4:	8d 50 0e             	lea    edx,[eax+0xe]
c00120f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120fb:	83 c0 18             	add    eax,0x18
c00120fe:	83 ec 04             	sub    esp,0x4
c0012101:	6a 04                	push   0x4
c0012103:	52                   	push   edx
c0012104:	50                   	push   eax
c0012105:	e8 70 e2 fe ff       	call   c000037a <memcpy>
c001210a:	83 c4 10             	add    esp,0x10
c001210d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012111:	8d 50 04             	lea    edx,[eax+0x4]
c0012114:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012118:	83 c0 0e             	add    eax,0xe
c001211b:	83 ec 04             	sub    esp,0x4
c001211e:	6a 04                	push   0x4
c0012120:	52                   	push   edx
c0012121:	50                   	push   eax
c0012122:	e8 53 e2 fe ff       	call   c000037a <memcpy>
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212e:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012131:	0f b6 c0             	movzx  eax,al
c0012134:	83 f8 06             	cmp    eax,0x6
c0012137:	74 17                	je     c0012150 <etharp_arp_input+0x240>
c0012139:	83 ec 08             	sub    esp,0x8
c001213c:	68 1c 07 03 c0       	push   0xc003071c
c0012141:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012146:	e8 71 d8 00 00       	call   c001f9bc <CPrintf>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	66 90                	xchg   ax,ax
c0012150:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012154:	8d 50 08             	lea    edx,[eax+0x8]
c0012157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001215b:	83 c0 12             	add    eax,0x12
c001215e:	83 ec 04             	sub    esp,0x4
c0012161:	6a 06                	push   0x6
c0012163:	52                   	push   edx
c0012164:	50                   	push   eax
c0012165:	e8 10 e2 fe ff       	call   c000037a <memcpy>
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012171:	8d 50 08             	lea    edx,[eax+0x8]
c0012174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012178:	83 ec 04             	sub    esp,0x4
c001217b:	6a 06                	push   0x6
c001217d:	52                   	push   edx
c001217e:	50                   	push   eax
c001217f:	e8 f6 e1 fe ff       	call   c000037a <memcpy>
c0012184:	83 c4 10             	add    esp,0x10
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	83 c0 08             	add    eax,0x8
c001218e:	83 ec 04             	sub    esp,0x4
c0012191:	6a 06                	push   0x6
c0012193:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012197:	50                   	push   eax
c0012198:	e8 dd e1 fe ff       	call   c000037a <memcpy>
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121a4:	83 c0 06             	add    eax,0x6
c00121a7:	83 ec 04             	sub    esp,0x4
c00121aa:	6a 06                	push   0x6
c00121ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121b0:	50                   	push   eax
c00121b1:	e8 c4 e1 fe ff       	call   c000037a <memcpy>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00121c0:	83 ec 08             	sub    esp,0x8
c00121c3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121cb:	ff d0                	call   eax
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	eb 26                	jmp    c00121f8 <etharp_arp_input+0x2e8>
c00121d2:	66 90                	xchg   ax,ax
c00121d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d8:	83 c0 04             	add    eax,0x4
c00121db:	eb 1b                	jmp    c00121f8 <etharp_arp_input+0x2e8>
c00121dd:	8d 76 00             	lea    esi,[esi+0x0]
c00121e0:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00121e6:	83 c0 01             	add    eax,0x1
c00121e9:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00121ef:	eb 07                	jmp    c00121f8 <etharp_arp_input+0x2e8>
c00121f1:	8d 76 00             	lea    esi,[esi+0x0]
c00121f4:	90                   	nop
c00121f5:	8d 76 00             	lea    esi,[esi+0x0]
c00121f8:	83 ec 0c             	sub    esp,0xc
c00121fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121ff:	e8 7c 60 ff ff       	call   c0008280 <pbuf_free>
c0012204:	83 c4 10             	add    esp,0x10
c0012207:	90                   	nop
c0012208:	83 c4 2c             	add    esp,0x2c
c001220b:	c3                   	ret    

c001220c <etharp_raw>:
c001220c:	83 ec 2c             	sub    esp,0x2c
c001220f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012213:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012218:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001221d:	83 ec 04             	sub    esp,0x4
c0012220:	6a 00                	push   0x0
c0012222:	6a 2a                	push   0x2a
c0012224:	6a 03                	push   0x3
c0012226:	e8 31 62 ff ff       	call   c000845c <pbuf_alloc>
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012232:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012237:	75 17                	jne    c0012250 <etharp_raw+0x44>
c0012239:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001223f:	83 c0 01             	add    eax,0x1
c0012242:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012248:	b0 ff                	mov    al,0xff
c001224a:	e9 89 01 00 00       	jmp    c00123d8 <etharp_raw+0x1cc>
c001224f:	90                   	nop
c0012250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012254:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012258:	0f b7 c0             	movzx  eax,ax
c001225b:	83 f8 29             	cmp    eax,0x29
c001225e:	77 18                	ja     c0012278 <etharp_raw+0x6c>
c0012260:	83 ec 08             	sub    esp,0x8
c0012263:	68 ac 07 03 c0       	push   0xc00307ac
c0012268:	68 e6 f6 02 c0       	push   0xc002f6e6
c001226d:	e8 4a d7 00 00       	call   c001f9bc <CPrintf>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001227c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001227f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012287:	83 c0 0e             	add    eax,0xe
c001228a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001228e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012293:	83 ec 0c             	sub    esp,0xc
c0012296:	50                   	push   eax
c0012297:	e8 80 e9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001229c:	83 c4 10             	add    esp,0x10
c001229f:	89 c2                	mov    edx,eax
c00122a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a5:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00122a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ad:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00122b0:	0f b6 c0             	movzx  eax,al
c00122b3:	83 f8 06             	cmp    eax,0x6
c00122b6:	74 18                	je     c00122d0 <etharp_raw+0xc4>
c00122b8:	83 ec 08             	sub    esp,0x8
c00122bb:	68 1c 07 03 c0       	push   0xc003071c
c00122c0:	68 e6 f6 02 c0       	push   0xc002f6e6
c00122c5:	e8 f2 d6 00 00       	call   c001f9bc <CPrintf>
c00122ca:	83 c4 10             	add    esp,0x10
c00122cd:	8d 76 00             	lea    esi,[esi+0x0]
c00122d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122d4:	83 c0 08             	add    eax,0x8
c00122d7:	83 ec 04             	sub    esp,0x4
c00122da:	6a 06                	push   0x6
c00122dc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00122e0:	50                   	push   eax
c00122e1:	e8 94 e0 fe ff       	call   c000037a <memcpy>
c00122e6:	83 c4 10             	add    esp,0x10
c00122e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ed:	83 c0 12             	add    eax,0x12
c00122f0:	83 ec 04             	sub    esp,0x4
c00122f3:	6a 06                	push   0x6
c00122f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122f9:	50                   	push   eax
c00122fa:	e8 7b e0 fe ff       	call   c000037a <memcpy>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012306:	83 ec 04             	sub    esp,0x4
c0012309:	6a 06                	push   0x6
c001230b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001230f:	50                   	push   eax
c0012310:	e8 65 e0 fe ff       	call   c000037a <memcpy>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001231c:	83 c0 06             	add    eax,0x6
c001231f:	83 ec 04             	sub    esp,0x4
c0012322:	6a 06                	push   0x6
c0012324:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012328:	50                   	push   eax
c0012329:	e8 4c e0 fe ff       	call   c000037a <memcpy>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012335:	83 c0 0e             	add    eax,0xe
c0012338:	83 ec 04             	sub    esp,0x4
c001233b:	6a 04                	push   0x4
c001233d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012341:	50                   	push   eax
c0012342:	e8 33 e0 fe ff       	call   c000037a <memcpy>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234e:	83 c0 18             	add    eax,0x18
c0012351:	83 ec 04             	sub    esp,0x4
c0012354:	6a 04                	push   0x4
c0012356:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001235a:	50                   	push   eax
c001235b:	e8 1a e0 fe ff       	call   c000037a <memcpy>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012367:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012370:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001237e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012382:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012386:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012390:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012394:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012397:	83 ec 08             	sub    esp,0x8
c001239a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001239e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123a2:	ff d0                	call   eax
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123ab:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00123b1:	83 c0 01             	add    eax,0x1
c00123b4:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c00123ba:	83 ec 0c             	sub    esp,0xc
c00123bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00123c1:	e8 ba 5e ff ff       	call   c0008280 <pbuf_free>
c00123c6:	83 c4 10             	add    esp,0x10
c00123c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123d1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	83 c4 2c             	add    esp,0x2c
c00123db:	c3                   	ret    

c00123dc <etharp_request>:
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e3:	8d 48 04             	lea    ecx,[eax+0x4]
c00123e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ea:	8d 50 23             	lea    edx,[eax+0x23]
c00123ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f1:	83 c0 23             	add    eax,0x23
c00123f4:	6a 01                	push   0x1
c00123f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123fa:	68 7c 08 03 c0       	push   0xc003087c
c00123ff:	51                   	push   ecx
c0012400:	52                   	push   edx
c0012401:	68 84 08 03 c0       	push   0xc0030884
c0012406:	50                   	push   eax
c0012407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001240b:	e8 fc fd ff ff       	call   c001220c <etharp_raw>
c0012410:	83 c4 20             	add    esp,0x20
c0012413:	83 c4 0c             	add    esp,0xc
c0012416:	c3                   	ret    
c0012417:	90                   	nop

c0012418 <etharp_query>:
c0012418:	83 ec 2c             	sub    esp,0x2c
c001241b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001241f:	83 c0 23             	add    eax,0x23
c0012422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012426:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001242b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001242f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012431:	83 ec 08             	sub    esp,0x8
c0012434:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012438:	50                   	push   eax
c0012439:	e8 e6 19 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	0f b6 c0             	movzx  eax,al
c0012444:	85 c0                	test   eax,eax
c0012446:	75 24                	jne    c001246c <etharp_query+0x54>
c0012448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001244c:	8b 00                	mov    eax,DWORD PTR [eax]
c001244e:	25 f0 00 00 00       	and    eax,0xf0
c0012453:	3d e0 00 00 00       	cmp    eax,0xe0
c0012458:	74 12                	je     c001246c <etharp_query+0x54>
c001245a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001245f:	74 0b                	je     c001246c <etharp_query+0x54>
c0012461:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012465:	8b 00                	mov    eax,DWORD PTR [eax]
c0012467:	85 c0                	test   eax,eax
c0012469:	75 09                	jne    c0012474 <etharp_query+0x5c>
c001246b:	90                   	nop
c001246c:	b0 f2                	mov    al,0xf2
c001246e:	e9 dd 02 00 00       	jmp    c0012750 <etharp_query+0x338>
c0012473:	90                   	nop
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	6a 01                	push   0x1
c0012479:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001247d:	e8 ea f4 ff ff       	call   c001196c <find_entry>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012489:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001248e:	85 c0                	test   eax,eax
c0012490:	79 22                	jns    c00124b4 <etharp_query+0x9c>
c0012492:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012497:	74 0f                	je     c00124a8 <etharp_query+0x90>
c0012499:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001249f:	83 c0 01             	add    eax,0x1
c00124a2:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124ac:	e9 9f 02 00 00       	jmp    c0012750 <etharp_query+0x338>
c00124b1:	8d 76 00             	lea    esi,[esi+0x0]
c00124b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124b9:	c1 e0 04             	shl    eax,0x4
c00124bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124c1:	8a 00                	mov    al,BYTE PTR [eax]
c00124c3:	0f b6 c0             	movzx  eax,al
c00124c6:	85 c0                	test   eax,eax
c00124c8:	75 12                	jne    c00124dc <etharp_query+0xc4>
c00124ca:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124cf:	c1 e0 04             	shl    eax,0x4
c00124d2:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124d7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00124da:	66 90                	xchg   ax,ax
c00124dc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124e1:	c1 e0 04             	shl    eax,0x4
c00124e4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124e9:	8a 00                	mov    al,BYTE PTR [eax]
c00124eb:	0f b6 c0             	movzx  eax,al
c00124ee:	83 f8 01             	cmp    eax,0x1
c00124f1:	74 2d                	je     c0012520 <etharp_query+0x108>
c00124f3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124f8:	c1 e0 04             	shl    eax,0x4
c00124fb:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012500:	8a 00                	mov    al,BYTE PTR [eax]
c0012502:	0f b6 c0             	movzx  eax,al
c0012505:	83 f8 02             	cmp    eax,0x2
c0012508:	74 16                	je     c0012520 <etharp_query+0x108>
c001250a:	83 ec 08             	sub    esp,0x8
c001250d:	68 e0 07 03 c0       	push   0xc00307e0
c0012512:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012517:	e8 a0 d4 00 00       	call   c001f9bc <CPrintf>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	90                   	nop
c0012520:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012525:	c1 e0 04             	shl    eax,0x4
c0012528:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001252d:	8a 00                	mov    al,BYTE PTR [eax]
c001252f:	0f b6 c0             	movzx  eax,al
c0012532:	83 f8 01             	cmp    eax,0x1
c0012535:	74 09                	je     c0012540 <etharp_query+0x128>
c0012537:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001253c:	75 2a                	jne    c0012568 <etharp_query+0x150>
c001253e:	66 90                	xchg   ax,ax
c0012540:	83 ec 08             	sub    esp,0x8
c0012543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012547:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001254b:	e8 8c fe ff ff       	call   c00123dc <etharp_request>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012557:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001255c:	75 0a                	jne    c0012568 <etharp_query+0x150>
c001255e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012562:	e9 e9 01 00 00       	jmp    c0012750 <etharp_query+0x338>
c0012567:	90                   	nop
c0012568:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001256d:	75 15                	jne    c0012584 <etharp_query+0x16c>
c001256f:	83 ec 08             	sub    esp,0x8
c0012572:	68 5a fb 02 c0       	push   0xc002fb5a
c0012577:	68 e6 f6 02 c0       	push   0xc002f6e6
c001257c:	e8 3b d4 00 00       	call   c001f9bc <CPrintf>
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012589:	c1 e0 04             	shl    eax,0x4
c001258c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012591:	8a 00                	mov    al,BYTE PTR [eax]
c0012593:	0f b6 c0             	movzx  eax,al
c0012596:	83 f8 02             	cmp    eax,0x2
c0012599:	75 39                	jne    c00125d4 <etharp_query+0x1bc>
c001259b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001259f:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125a4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125a9:	c1 e0 04             	shl    eax,0x4
c00125ac:	05 00 a9 03 c0       	add    eax,0xc003a900
c00125b1:	83 c0 08             	add    eax,0x8
c00125b4:	50                   	push   eax
c00125b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125b9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125c1:	e8 d2 f6 ff ff       	call   c0011c98 <etharp_send_ip>
c00125c6:	83 c4 10             	add    esp,0x10
c00125c9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00125cd:	e9 7a 01 00 00       	jmp    c001274c <etharp_query+0x334>
c00125d2:	66 90                	xchg   ax,ax
c00125d4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d9:	c1 e0 04             	shl    eax,0x4
c00125dc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125e1:	8a 00                	mov    al,BYTE PTR [eax]
c00125e3:	0f b6 c0             	movzx  eax,al
c00125e6:	83 f8 01             	cmp    eax,0x1
c00125e9:	0f 85 5d 01 00 00    	jne    c001274c <etharp_query+0x334>
c00125ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00125fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125ff:	eb 63                	jmp    c0012664 <etharp_query+0x24c>
c0012601:	8d 76 00             	lea    esi,[esi+0x0]
c0012604:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012608:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001260c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012610:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012613:	0f b7 d2             	movzx  edx,dx
c0012616:	0f b7 c0             	movzx  eax,ax
c0012619:	39 c2                	cmp    edx,eax
c001261b:	75 1f                	jne    c001263c <etharp_query+0x224>
c001261d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012621:	8b 00                	mov    eax,DWORD PTR [eax]
c0012623:	85 c0                	test   eax,eax
c0012625:	74 15                	je     c001263c <etharp_query+0x224>
c0012627:	83 ec 08             	sub    esp,0x8
c001262a:	68 61 08 03 c0       	push   0xc0030861
c001262f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012634:	e8 83 d3 00 00       	call   c001f9bc <CPrintf>
c0012639:	83 c4 10             	add    esp,0x10
c001263c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012640:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012643:	0f b6 c0             	movzx  eax,al
c0012646:	83 f8 01             	cmp    eax,0x1
c0012649:	74 0d                	je     c0012658 <etharp_query+0x240>
c001264b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012653:	eb 17                	jmp    c001266c <etharp_query+0x254>
c0012655:	8d 76 00             	lea    esi,[esi+0x0]
c0012658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001265c:	8b 00                	mov    eax,DWORD PTR [eax]
c001265e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012662:	66 90                	xchg   ax,ax
c0012664:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012669:	75 99                	jne    c0012604 <etharp_query+0x1ec>
c001266b:	90                   	nop
c001266c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012671:	74 59                	je     c00126cc <etharp_query+0x2b4>
c0012673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012677:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001267a:	0f b7 c0             	movzx  eax,ax
c001267d:	83 ec 04             	sub    esp,0x4
c0012680:	6a 00                	push   0x0
c0012682:	50                   	push   eax
c0012683:	6a 03                	push   0x3
c0012685:	e8 d2 5d ff ff       	call   c000845c <pbuf_alloc>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012691:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012696:	74 4c                	je     c00126e4 <etharp_query+0x2cc>
c0012698:	83 ec 08             	sub    esp,0x8
c001269b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001269f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126a3:	e8 1c 66 ff ff       	call   c0008cc4 <pbuf_copy>
c00126a8:	83 c4 10             	add    esp,0x10
c00126ab:	0f be c0             	movsx  eax,al
c00126ae:	85 c0                	test   eax,eax
c00126b0:	74 32                	je     c00126e4 <etharp_query+0x2cc>
c00126b2:	83 ec 0c             	sub    esp,0xc
c00126b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126b9:	e8 c2 5b ff ff       	call   c0008280 <pbuf_free>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126c9:	eb 19                	jmp    c00126e4 <etharp_query+0x2cc>
c00126cb:	90                   	nop
c00126cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d4:	83 ec 0c             	sub    esp,0xc
c00126d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126db:	e8 b0 63 ff ff       	call   c0008a90 <pbuf_ref>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	90                   	nop
c00126e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126e9:	74 4d                	je     c0012738 <etharp_query+0x320>
c00126eb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126f0:	c1 e0 04             	shl    eax,0x4
c00126f3:	05 00 a9 03 c0       	add    eax,0xc003a900
c00126f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00126fa:	85 c0                	test   eax,eax
c00126fc:	74 1e                	je     c001271c <etharp_query+0x304>
c00126fe:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012703:	c1 e0 04             	shl    eax,0x4
c0012706:	05 00 a9 03 c0       	add    eax,0xc003a900
c001270b:	8b 00                	mov    eax,DWORD PTR [eax]
c001270d:	83 ec 0c             	sub    esp,0xc
c0012710:	50                   	push   eax
c0012711:	e8 6a 5b ff ff       	call   c0008280 <pbuf_free>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	8d 76 00             	lea    esi,[esi+0x0]
c001271c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012721:	c1 e0 04             	shl    eax,0x4
c0012724:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001272a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001272e:	89 02                	mov    DWORD PTR [edx],eax
c0012730:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012735:	eb 15                	jmp    c001274c <etharp_query+0x334>
c0012737:	90                   	nop
c0012738:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001273e:	83 c0 01             	add    eax,0x1
c0012741:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012747:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001274c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012750:	83 c4 2c             	add    esp,0x2c
c0012753:	c3                   	ret    

c0012754 <etharp_output>:
c0012754:	83 ec 1c             	sub    esp,0x1c
c0012757:	83 ec 08             	sub    esp,0x8
c001275a:	6a 0e                	push   0xe
c001275c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012760:	e8 7b 59 ff ff       	call   c00080e0 <pbuf_header>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	0f b6 c0             	movzx  eax,al
c001276b:	85 c0                	test   eax,eax
c001276d:	74 19                	je     c0012788 <etharp_output+0x34>
c001276f:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012775:	83 c0 01             	add    eax,0x1
c0012778:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c001277e:	b0 fe                	mov    al,0xfe
c0012780:	e9 8b 01 00 00       	jmp    c0012910 <etharp_output+0x1bc>
c0012785:	8d 76 00             	lea    esi,[esi+0x0]
c0012788:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012790:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012794:	8b 00                	mov    eax,DWORD PTR [eax]
c0012796:	83 ec 08             	sub    esp,0x8
c0012799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001279d:	50                   	push   eax
c001279e:	e8 81 16 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c00127a3:	83 c4 10             	add    esp,0x10
c00127a6:	0f b6 c0             	movzx  eax,al
c00127a9:	85 c0                	test   eax,eax
c00127ab:	74 0f                	je     c00127bc <etharp_output+0x68>
c00127ad:	c7 44 24 0c 84 08 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030884
c00127b5:	e9 3a 01 00 00       	jmp    c00128f4 <etharp_output+0x1a0>
c00127ba:	66 90                	xchg   ax,ax
c00127bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c2:	25 f0 00 00 00       	and    eax,0xf0
c00127c7:	3d e0 00 00 00       	cmp    eax,0xe0
c00127cc:	75 42                	jne    c0012810 <etharp_output+0xbc>
c00127ce:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00127d3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00127d8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00127dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127e1:	83 c0 01             	add    eax,0x1
c00127e4:	8a 00                	mov    al,BYTE PTR [eax]
c00127e6:	83 e0 7f             	and    eax,0x7f
c00127e9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00127ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127f1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00127f4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00127f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127fc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00127ff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012803:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001280b:	e9 e4 00 00 00       	jmp    c00128f4 <etharp_output+0x1a0>
c0012810:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012814:	8b 10                	mov    edx,DWORD PTR [eax]
c0012816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001281a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001281d:	31 c2                	xor    edx,eax
c001281f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012823:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012826:	21 d0                	and    eax,edx
c0012828:	74 3a                	je     c0012864 <etharp_output+0x110>
c001282a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001282e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012830:	0f b7 c0             	movzx  eax,ax
c0012833:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012838:	74 2a                	je     c0012864 <etharp_output+0x110>
c001283a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001283e:	83 c0 0c             	add    eax,0xc
c0012841:	74 19                	je     c001285c <etharp_output+0x108>
c0012843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012847:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001284a:	85 c0                	test   eax,eax
c001284c:	74 0e                	je     c001285c <etharp_output+0x108>
c001284e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012852:	83 c0 0c             	add    eax,0xc
c0012855:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012859:	eb 09                	jmp    c0012864 <etharp_output+0x110>
c001285b:	90                   	nop
c001285c:	b0 fc                	mov    al,0xfc
c001285e:	e9 ad 00 00 00       	jmp    c0012910 <etharp_output+0x1bc>
c0012863:	90                   	nop
c0012864:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012869:	0f b6 c0             	movzx  eax,al
c001286c:	c1 e0 04             	shl    eax,0x4
c001286f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012874:	8a 00                	mov    al,BYTE PTR [eax]
c0012876:	0f b6 c0             	movzx  eax,al
c0012879:	83 f8 02             	cmp    eax,0x2
c001287c:	75 5a                	jne    c00128d8 <etharp_output+0x184>
c001287e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012882:	8b 10                	mov    edx,DWORD PTR [eax]
c0012884:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012889:	0f b6 c0             	movzx  eax,al
c001288c:	c1 e0 04             	shl    eax,0x4
c001288f:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012894:	8b 00                	mov    eax,DWORD PTR [eax]
c0012896:	39 c2                	cmp    edx,eax
c0012898:	75 3e                	jne    c00128d8 <etharp_output+0x184>
c001289a:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128a0:	83 c0 01             	add    eax,0x1
c00128a3:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128a9:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128ae:	0f b6 c0             	movzx  eax,al
c00128b1:	c1 e0 04             	shl    eax,0x4
c00128b4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128b9:	8d 50 08             	lea    edx,[eax+0x8]
c00128bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128c0:	83 c0 23             	add    eax,0x23
c00128c3:	52                   	push   edx
c00128c4:	50                   	push   eax
c00128c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128cd:	e8 c6 f3 ff ff       	call   c0011c98 <etharp_send_ip>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	eb 39                	jmp    c0012910 <etharp_output+0x1bc>
c00128d7:	90                   	nop
c00128d8:	83 ec 04             	sub    esp,0x4
c00128db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00128e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128e7:	e8 2c fb ff ff       	call   c0012418 <etharp_query>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	eb 1f                	jmp    c0012910 <etharp_output+0x1bc>
c00128f1:	8d 76 00             	lea    esi,[esi+0x0]
c00128f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128f8:	83 c0 23             	add    eax,0x23
c00128fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00128ff:	50                   	push   eax
c0012900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012908:	e8 8b f3 ff ff       	call   c0011c98 <etharp_send_ip>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	83 c4 1c             	add    esp,0x1c
c0012913:	c3                   	ret    

c0012914 <ethernet_input>:
c0012914:	83 ec 1c             	sub    esp,0x1c
c0012917:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c001291e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012922:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012926:	0f b7 c0             	movzx  eax,ax
c0012929:	83 f8 0e             	cmp    eax,0xe
c001292c:	77 26                	ja     c0012954 <ethernet_input+0x40>
c001292e:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012934:	83 c0 01             	add    eax,0x1
c0012937:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001293d:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012943:	83 c0 01             	add    eax,0x1
c0012946:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001294c:	e9 ef 00 00 00       	jmp    c0012a40 <ethernet_input+0x12c>
c0012951:	8d 76 00             	lea    esi,[esi+0x0]
c0012954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001295b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001295f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012963:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012967:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001296c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012971:	83 f8 08             	cmp    eax,0x8
c0012974:	74 0e                	je     c0012984 <ethernet_input+0x70>
c0012976:	3d 08 06 00 00       	cmp    eax,0x608
c001297b:	74 6b                	je     c00129e8 <ethernet_input+0xd4>
c001297d:	e9 92 00 00 00       	jmp    c0012a14 <ethernet_input+0x100>
c0012982:	66 90                	xchg   ax,ax
c0012984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012988:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001298b:	0f b6 c0             	movzx  eax,al
c001298e:	83 e0 20             	and    eax,0x20
c0012991:	0f 84 a1 00 00 00    	je     c0012a38 <ethernet_input+0x124>
c0012997:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001299c:	f7 d8                	neg    eax
c001299e:	98                   	cwde   
c001299f:	83 ec 08             	sub    esp,0x8
c00129a2:	50                   	push   eax
c00129a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129a7:	e8 34 57 ff ff       	call   c00080e0 <pbuf_header>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	0f b6 c0             	movzx  eax,al
c00129b2:	85 c0                	test   eax,eax
c00129b4:	74 1a                	je     c00129d0 <ethernet_input+0xbc>
c00129b6:	83 ec 08             	sub    esp,0x8
c00129b9:	68 08 08 03 c0       	push   0xc0030808
c00129be:	68 e6 f6 02 c0       	push   0xc002f6e6
c00129c3:	e8 f4 cf 00 00       	call   c001f9bc <CPrintf>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	eb 73                	jmp    c0012a40 <ethernet_input+0x12c>
c00129cd:	8d 76 00             	lea    esi,[esi+0x0]
c00129d0:	83 ec 08             	sub    esp,0x8
c00129d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129db:	e8 7c 0c 00 00       	call   c001365c <ip_input>
c00129e0:	83 c4 10             	add    esp,0x10
c00129e3:	eb 4f                	jmp    c0012a34 <ethernet_input+0x120>
c00129e5:	8d 76 00             	lea    esi,[esi+0x0]
c00129e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129ec:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129ef:	0f b6 c0             	movzx  eax,al
c00129f2:	83 e0 20             	and    eax,0x20
c00129f5:	74 45                	je     c0012a3c <ethernet_input+0x128>
c00129f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129fb:	83 c0 23             	add    eax,0x23
c00129fe:	83 ec 04             	sub    esp,0x4
c0012a01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a05:	50                   	push   eax
c0012a06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a0a:	e8 01 f5 ff ff       	call   c0011f10 <etharp_arp_input>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	eb 20                	jmp    c0012a34 <ethernet_input+0x120>
c0012a14:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a1a:	83 c0 01             	add    eax,0x1
c0012a1d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a23:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a29:	83 c0 01             	add    eax,0x1
c0012a2c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a32:	eb 0c                	jmp    c0012a40 <ethernet_input+0x12c>
c0012a34:	b0 00                	mov    al,0x0
c0012a36:	eb 1c                	jmp    c0012a54 <ethernet_input+0x140>
c0012a38:	90                   	nop
c0012a39:	eb 05                	jmp    c0012a40 <ethernet_input+0x12c>
c0012a3b:	90                   	nop
c0012a3c:	90                   	nop
c0012a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a47:	e8 34 58 ff ff       	call   c0008280 <pbuf_free>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	b0 00                	mov    al,0x0
c0012a51:	8d 76 00             	lea    esi,[esi+0x0]
c0012a54:	83 c4 1c             	add    esp,0x1c
c0012a57:	c3                   	ret    

c0012a58 <icmp_input>:
c0012a58:	83 ec 2c             	sub    esp,0x2c
c0012a5b:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012a61:	83 c0 01             	add    eax,0x1
c0012a64:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012a6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a79:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012a7c:	0f b7 c0             	movzx  eax,ax
c0012a7f:	83 ec 0c             	sub    esp,0xc
c0012a82:	50                   	push   eax
c0012a83:	e8 94 e1 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	0f b7 c0             	movzx  eax,ax
c0012a8e:	c1 e8 08             	shr    eax,0x8
c0012a91:	83 e0 0f             	and    eax,0xf
c0012a94:	c1 e0 02             	shl    eax,0x2
c0012a97:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012a9c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012aa1:	f7 d8                	neg    eax
c0012aa3:	98                   	cwde   
c0012aa4:	83 ec 08             	sub    esp,0x8
c0012aa7:	50                   	push   eax
c0012aa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aac:	e8 2f 56 ff ff       	call   c00080e0 <pbuf_header>
c0012ab1:	83 c4 10             	add    esp,0x10
c0012ab4:	0f b6 c0             	movzx  eax,al
c0012ab7:	85 c0                	test   eax,eax
c0012ab9:	0f 85 b1 03 00 00    	jne    c0012e70 <icmp_input+0x418>
c0012abf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ac6:	0f b7 c0             	movzx  eax,ax
c0012ac9:	83 f8 03             	cmp    eax,0x3
c0012acc:	0f 86 9e 03 00 00    	jbe    c0012e70 <icmp_input+0x418>
c0012ad2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ad9:	8a 00                	mov    al,BYTE PTR [eax]
c0012adb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012adf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012ae4:	85 c0                	test   eax,eax
c0012ae6:	0f 84 6c 03 00 00    	je     c0012e58 <icmp_input+0x400>
c0012aec:	83 f8 08             	cmp    eax,0x8
c0012aef:	0f 85 43 03 00 00    	jne    c0012e38 <icmp_input+0x3e0>
c0012af5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012afd:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b02:	25 f0 00 00 00       	and    eax,0xf0
c0012b07:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b0c:	75 0a                	jne    c0012b18 <icmp_input+0xc0>
c0012b0e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b16:	66 90                	xchg   ax,ax
c0012b18:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b1d:	83 ec 08             	sub    esp,0x8
c0012b20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b24:	50                   	push   eax
c0012b25:	e8 fa 12 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	0f b6 c0             	movzx  eax,al
c0012b30:	85 c0                	test   eax,eax
c0012b32:	74 08                	je     c0012b3c <icmp_input+0xe4>
c0012b34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b41:	75 25                	jne    c0012b68 <icmp_input+0x110>
c0012b43:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b49:	83 c0 01             	add    eax,0x1
c0012b4c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012b52:	83 ec 0c             	sub    esp,0xc
c0012b55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b59:	e8 22 57 ff ff       	call   c0008280 <pbuf_free>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	e9 56 03 00 00       	jmp    c0012ebc <icmp_input+0x464>
c0012b66:	66 90                	xchg   ax,ax
c0012b68:	90                   	nop
c0012b69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b70:	0f b7 c0             	movzx  eax,ax
c0012b73:	83 f8 07             	cmp    eax,0x7
c0012b76:	0f 86 f8 02 00 00    	jbe    c0012e74 <icmp_input+0x41c>
c0012b7c:	83 ec 0c             	sub    esp,0xc
c0012b7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b83:	e8 5c 09 00 00       	call   c00134e4 <inet_chksum_pbuf>
c0012b88:	83 c4 10             	add    esp,0x10
c0012b8b:	0f b7 c0             	movzx  eax,ax
c0012b8e:	85 c0                	test   eax,eax
c0012b90:	74 26                	je     c0012bb8 <icmp_input+0x160>
c0012b92:	83 ec 0c             	sub    esp,0xc
c0012b95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b99:	e8 e2 56 ff ff       	call   c0008280 <pbuf_free>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012ba7:	83 c0 01             	add    eax,0x1
c0012baa:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012bb0:	e9 07 03 00 00       	jmp    c0012ebc <icmp_input+0x464>
c0012bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb8:	83 ec 08             	sub    esp,0x8
c0012bbb:	6a 22                	push   0x22
c0012bbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bc1:	e8 1a 55 ff ff       	call   c00080e0 <pbuf_header>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	0f b6 c0             	movzx  eax,al
c0012bcc:	85 c0                	test   eax,eax
c0012bce:	0f 84 24 01 00 00    	je     c0012cf8 <icmp_input+0x2a0>
c0012bd4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012bd9:	83 ec 08             	sub    esp,0x8
c0012bdc:	50                   	push   eax
c0012bdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be1:	e8 fa 54 ff ff       	call   c00080e0 <pbuf_header>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	0f b6 c0             	movzx  eax,al
c0012bec:	85 c0                	test   eax,eax
c0012bee:	74 1c                	je     c0012c0c <icmp_input+0x1b4>
c0012bf0:	83 ec 08             	sub    esp,0x8
c0012bf3:	68 8c 08 03 c0       	push   0xc003088c
c0012bf8:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012bfd:	e8 ba cd 00 00       	call   c001f9bc <CPrintf>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	e9 92 02 00 00       	jmp    c0012e9c <icmp_input+0x444>
c0012c0a:	66 90                	xchg   ax,ax
c0012c0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c13:	0f b7 c0             	movzx  eax,ax
c0012c16:	83 ec 04             	sub    esp,0x4
c0012c19:	6a 00                	push   0x0
c0012c1b:	50                   	push   eax
c0012c1c:	6a 02                	push   0x2
c0012c1e:	e8 39 58 ff ff       	call   c000845c <pbuf_alloc>
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c2a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c2f:	0f 84 63 02 00 00    	je     c0012e98 <icmp_input+0x440>
c0012c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c39:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c3d:	0f b7 c0             	movzx  eax,ax
c0012c40:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c45:	83 c2 08             	add    edx,0x8
c0012c48:	39 d0                	cmp    eax,edx
c0012c4a:	73 18                	jae    c0012c64 <icmp_input+0x20c>
c0012c4c:	83 ec 08             	sub    esp,0x8
c0012c4f:	68 c0 08 03 c0       	push   0xc00308c0
c0012c54:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012c59:	e8 5e cd 00 00       	call   c001f9bc <CPrintf>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012c6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c6f:	e8 50 60 ff ff       	call   c0008cc4 <pbuf_copy>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	0f be c0             	movsx  eax,al
c0012c7a:	85 c0                	test   eax,eax
c0012c7c:	74 1a                	je     c0012c98 <icmp_input+0x240>
c0012c7e:	83 ec 08             	sub    esp,0x8
c0012c81:	68 f8 08 03 c0       	push   0xc00308f8
c0012c86:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012c8b:	e8 2c cd 00 00       	call   c001f9bc <CPrintf>
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	e9 04 02 00 00       	jmp    c0012e9c <icmp_input+0x444>
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ca3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ca8:	f7 d8                	neg    eax
c0012caa:	98                   	cwde   
c0012cab:	83 ec 08             	sub    esp,0x8
c0012cae:	50                   	push   eax
c0012caf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb3:	e8 28 54 ff ff       	call   c00080e0 <pbuf_header>
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	0f b6 c0             	movzx  eax,al
c0012cbe:	85 c0                	test   eax,eax
c0012cc0:	74 1a                	je     c0012cdc <icmp_input+0x284>
c0012cc2:	83 ec 08             	sub    esp,0x8
c0012cc5:	68 20 09 03 c0       	push   0xc0030920
c0012cca:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012ccf:	e8 e8 cc 00 00       	call   c001f9bc <CPrintf>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	e9 c0 01 00 00       	jmp    c0012e9c <icmp_input+0x444>
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ce3:	e8 98 55 ff ff       	call   c0008280 <pbuf_free>
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cf3:	eb 37                	jmp    c0012d2c <icmp_input+0x2d4>
c0012cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf8:	83 ec 08             	sub    esp,0x8
c0012cfb:	6a de                	push   0xffffffde
c0012cfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d01:	e8 da 53 ff ff       	call   c00080e0 <pbuf_header>
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	0f b6 c0             	movzx  eax,al
c0012d0c:	85 c0                	test   eax,eax
c0012d0e:	74 1c                	je     c0012d2c <icmp_input+0x2d4>
c0012d10:	83 ec 08             	sub    esp,0x8
c0012d13:	68 20 09 03 c0       	push   0xc0030920
c0012d18:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012d1d:	e8 9a cc 00 00       	call   c001f9bc <CPrintf>
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	e9 72 01 00 00       	jmp    c0012e9c <icmp_input+0x444>
c0012d2a:	66 90                	xchg   ax,ax
c0012d2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d37:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d44:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d4e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012d51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d55:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d5c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d60:	0f b7 c0             	movzx  eax,ax
c0012d63:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012d68:	76 1a                	jbe    c0012d84 <icmp_input+0x32c>
c0012d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d6e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d72:	83 c0 09             	add    eax,0x9
c0012d75:	89 c2                	mov    edx,eax
c0012d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d7b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012d7f:	eb 1b                	jmp    c0012d9c <icmp_input+0x344>
c0012d81:	8d 76 00             	lea    esi,[esi+0x0]
c0012d84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d88:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d8c:	83 c0 08             	add    eax,0x8
c0012d8f:	89 c2                	mov    edx,eax
c0012d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d95:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012d99:	8d 76 00             	lea    esi,[esi+0x0]
c0012d9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012da0:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012da8:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012dae:	83 ec 08             	sub    esp,0x8
c0012db1:	6a 14                	push   0x14
c0012db3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012db7:	e8 00 07 00 00       	call   c00134bc <inet_chksum>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	89 c2                	mov    edx,eax
c0012dc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012dc5:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0012dc9:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012dcf:	83 c0 01             	add    eax,0x1
c0012dd2:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012dd8:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012ddd:	83 ec 08             	sub    esp,0x8
c0012de0:	50                   	push   eax
c0012de1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012de5:	e8 f6 52 ff ff       	call   c00080e0 <pbuf_header>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	0f b6 c0             	movzx  eax,al
c0012df0:	85 c0                	test   eax,eax
c0012df2:	74 18                	je     c0012e0c <icmp_input+0x3b4>
c0012df4:	83 ec 08             	sub    esp,0x8
c0012df7:	68 08 08 03 c0       	push   0xc0030808
c0012dfc:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012e01:	e8 b6 cb 00 00       	call   c001f9bc <CPrintf>
c0012e06:	83 c4 10             	add    esp,0x10
c0012e09:	eb 51                	jmp    c0012e5c <icmp_input+0x404>
c0012e0b:	90                   	nop
c0012e0c:	83 ec 04             	sub    esp,0x4
c0012e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e13:	6a 01                	push   0x1
c0012e15:	6a 00                	push   0x0
c0012e17:	68 ff 00 00 00       	push   0xff
c0012e1c:	6a 00                	push   0x0
c0012e1e:	68 98 68 03 c0       	push   0xc0036898
c0012e23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e27:	e8 74 0c 00 00       	call   c0013aa0 <ip_output_if>
c0012e2c:	83 c4 20             	add    esp,0x20
c0012e2f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e33:	eb 27                	jmp    c0012e5c <icmp_input+0x404>
c0012e35:	8d 76 00             	lea    esi,[esi+0x0]
c0012e38:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e3e:	83 c0 01             	add    eax,0x1
c0012e41:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e47:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012e4d:	83 c0 01             	add    eax,0x1
c0012e50:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012e56:	eb 04                	jmp    c0012e5c <icmp_input+0x404>
c0012e58:	90                   	nop
c0012e59:	8d 76 00             	lea    esi,[esi+0x0]
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e63:	e8 18 54 ff ff       	call   c0008280 <pbuf_free>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	eb 4f                	jmp    c0012ebc <icmp_input+0x464>
c0012e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e70:	90                   	nop
c0012e71:	eb 05                	jmp    c0012e78 <icmp_input+0x420>
c0012e73:	90                   	nop
c0012e74:	90                   	nop
c0012e75:	8d 76 00             	lea    esi,[esi+0x0]
c0012e78:	83 ec 0c             	sub    esp,0xc
c0012e7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e7f:	e8 fc 53 ff ff       	call   c0008280 <pbuf_free>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012e8d:	83 c0 01             	add    eax,0x1
c0012e90:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012e96:	eb 24                	jmp    c0012ebc <icmp_input+0x464>
c0012e98:	90                   	nop
c0012e99:	8d 76 00             	lea    esi,[esi+0x0]
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea3:	e8 d8 53 ff ff       	call   c0008280 <pbuf_free>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012eb1:	83 c0 01             	add    eax,0x1
c0012eb4:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012eba:	90                   	nop
c0012ebb:	90                   	nop
c0012ebc:	83 c4 2c             	add    esp,0x2c
c0012ebf:	c3                   	ret    

c0012ec0 <icmp_send_response>:
c0012ec0:	83 ec 2c             	sub    esp,0x2c
c0012ec3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ec7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ecb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ecf:	88 d0                	mov    al,dl
c0012ed1:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012ed5:	83 ec 04             	sub    esp,0x4
c0012ed8:	6a 00                	push   0x0
c0012eda:	6a 24                	push   0x24
c0012edc:	6a 01                	push   0x1
c0012ede:	e8 79 55 ff ff       	call   c000845c <pbuf_alloc>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012eea:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012eef:	0f 84 ff 00 00 00    	je     c0012ff4 <icmp_send_response+0x134>
c0012ef5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ef9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012efd:	0f b7 c0             	movzx  eax,ax
c0012f00:	83 f8 23             	cmp    eax,0x23
c0012f03:	77 17                	ja     c0012f1c <icmp_send_response+0x5c>
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	68 54 09 03 c0       	push   0xc0030954
c0012f0d:	68 e6 f6 02 c0       	push   0xc002f6e6
c0012f12:	e8 a5 ca 00 00       	call   c001f9bc <CPrintf>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	66 90                	xchg   ax,ax
c0012f1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f3a:	88 10                	mov    BYTE PTR [eax],dl
c0012f3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f40:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f44:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f4b:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012f51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f55:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f66:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012f69:	83 c2 08             	add    edx,0x8
c0012f6c:	83 ec 04             	sub    esp,0x4
c0012f6f:	6a 1c                	push   0x1c
c0012f71:	50                   	push   eax
c0012f72:	52                   	push   edx
c0012f73:	e8 02 d4 fe ff       	call   c000037a <memcpy>
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012f85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f8d:	0f b7 c0             	movzx  eax,ax
c0012f90:	83 ec 08             	sub    esp,0x8
c0012f93:	50                   	push   eax
c0012f94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f98:	e8 1f 05 00 00       	call   c00134bc <inet_chksum>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	89 c2                	mov    edx,eax
c0012fa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012faa:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fb0:	83 c0 01             	add    eax,0x1
c0012fb3:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012fb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012fc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fc4:	83 ec 08             	sub    esp,0x8
c0012fc7:	6a 01                	push   0x1
c0012fc9:	6a 00                	push   0x0
c0012fcb:	68 ff 00 00 00       	push   0xff
c0012fd0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fd4:	50                   	push   eax
c0012fd5:	6a 00                	push   0x0
c0012fd7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012fdb:	e8 9c 0d 00 00       	call   c0013d7c <ip_output>
c0012fe0:	83 c4 20             	add    esp,0x20
c0012fe3:	83 ec 0c             	sub    esp,0xc
c0012fe6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012fea:	e8 91 52 ff ff       	call   c0008280 <pbuf_free>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	eb 04                	jmp    c0012ff8 <icmp_send_response+0x138>
c0012ff4:	90                   	nop
c0012ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ff8:	83 c4 2c             	add    esp,0x2c
c0012ffb:	c3                   	ret    

c0012ffc <icmp_dest_unreach>:
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013003:	0f b6 c0             	movzx  eax,al
c0013006:	83 ec 04             	sub    esp,0x4
c0013009:	50                   	push   eax
c001300a:	6a 03                	push   0x3
c001300c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013010:	e8 ab fe ff ff       	call   c0012ec0 <icmp_send_response>
c0013015:	83 c4 10             	add    esp,0x10
c0013018:	90                   	nop
c0013019:	83 c4 0c             	add    esp,0xc
c001301c:	c3                   	ret    
c001301d:	8d 76 00             	lea    esi,[esi+0x0]

c0013020 <icmp_time_exceeded>:
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013027:	0f b6 c0             	movzx  eax,al
c001302a:	83 ec 04             	sub    esp,0x4
c001302d:	50                   	push   eax
c001302e:	6a 0b                	push   0xb
c0013030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013034:	e8 87 fe ff ff       	call   c0012ec0 <icmp_send_response>
c0013039:	83 c4 10             	add    esp,0x10
c001303c:	90                   	nop
c001303d:	83 c4 0c             	add    esp,0xc
c0013040:	c3                   	ret    
c0013041:	66 90                	xchg   ax,ax
c0013043:	90                   	nop

c0013044 <lwip_standard_chksum>:
c0013044:	83 ec 2c             	sub    esp,0x2c
c0013047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001304b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001304f:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0013056:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001305e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013062:	83 e0 01             	and    eax,0x1
c0013065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013069:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001306e:	74 24                	je     c0013094 <lwip_standard_chksum+0x50>
c0013070:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013075:	7e 1d                	jle    c0013094 <lwip_standard_chksum+0x50>
c0013077:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001307b:	8d 42 01             	lea    eax,[edx+0x1]
c001307e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013082:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013086:	83 c0 01             	add    eax,0x1
c0013089:	8a 12                	mov    dl,BYTE PTR [edx]
c001308b:	88 10                	mov    BYTE PTR [eax],dl
c001308d:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013092:	66 90                	xchg   ax,ax
c0013094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013098:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001309c:	eb 1e                	jmp    c00130bc <lwip_standard_chksum+0x78>
c001309e:	66 90                	xchg   ax,ax
c00130a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130a4:	8d 50 02             	lea    edx,[eax+0x2]
c00130a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00130ae:	0f b7 c0             	movzx  eax,ax
c00130b1:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130b5:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00130ba:	66 90                	xchg   ax,ax
c00130bc:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00130c1:	7f dd                	jg     c00130a0 <lwip_standard_chksum+0x5c>
c00130c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130c8:	7e 0e                	jle    c00130d8 <lwip_standard_chksum+0x94>
c00130ca:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130d2:	8a 12                	mov    dl,BYTE PTR [edx]
c00130d4:	88 10                	mov    BYTE PTR [eax],dl
c00130d6:	66 90                	xchg   ax,ax
c00130d8:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00130dd:	0f b7 c0             	movzx  eax,ax
c00130e0:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130e8:	c1 e8 10             	shr    eax,0x10
c00130eb:	89 c2                	mov    edx,eax
c00130ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130f1:	0f b7 c0             	movzx  eax,ax
c00130f4:	01 d0                	add    eax,edx
c00130f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130fe:	c1 e8 10             	shr    eax,0x10
c0013101:	89 c2                	mov    edx,eax
c0013103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013107:	0f b7 c0             	movzx  eax,ax
c001310a:	01 d0                	add    eax,edx
c001310c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013110:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013115:	74 1d                	je     c0013134 <lwip_standard_chksum+0xf0>
c0013117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311b:	0f b7 c0             	movzx  eax,ax
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	50                   	push   eax
c0013122:	e8 f5 da fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	0f b7 c0             	movzx  eax,ax
c001312d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013131:	8d 76 00             	lea    esi,[esi+0x0]
c0013134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013138:	83 c4 2c             	add    esp,0x2c
c001313b:	c3                   	ret    

c001313c <inet_chksum_pseudo>:
c001313c:	83 ec 2c             	sub    esp,0x2c
c001313f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013143:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013147:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001314b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013150:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013158:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001315d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013161:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013165:	e9 8a 00 00 00       	jmp    c00131f4 <inet_chksum_pseudo+0xb8>
c001316a:	66 90                	xchg   ax,ax
c001316c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013170:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013174:	0f b7 d0             	movzx  edx,ax
c0013177:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001317b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001317e:	83 ec 08             	sub    esp,0x8
c0013181:	52                   	push   edx
c0013182:	50                   	push   eax
c0013183:	e8 bc fe ff ff       	call   c0013044 <lwip_standard_chksum>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	0f b7 c0             	movzx  eax,ax
c001318e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013196:	c1 e8 10             	shr    eax,0x10
c0013199:	89 c2                	mov    edx,eax
c001319b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001319f:	0f b7 c0             	movzx  eax,ax
c00131a2:	01 d0                	add    eax,edx
c00131a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131b0:	83 e0 01             	and    eax,0x1
c00131b3:	0f b7 c0             	movzx  eax,ax
c00131b6:	85 c0                	test   eax,eax
c00131b8:	74 2e                	je     c00131e8 <inet_chksum_pseudo+0xac>
c00131ba:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00131be:	ba 01 00 00 00       	mov    edx,0x1
c00131c3:	29 c2                	sub    edx,eax
c00131c5:	89 d0                	mov    eax,edx
c00131c7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00131cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131cf:	0f b7 c0             	movzx  eax,ax
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	50                   	push   eax
c00131d6:	e8 41 da fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00131db:	83 c4 10             	add    esp,0x10
c00131de:	0f b7 c0             	movzx  eax,ax
c00131e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131e5:	8d 76 00             	lea    esi,[esi+0x0]
c00131e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00131ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131f2:	66 90                	xchg   ax,ax
c00131f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00131f9:	0f 85 6d ff ff ff    	jne    c001316c <inet_chksum_pseudo+0x30>
c00131ff:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013204:	85 c0                	test   eax,eax
c0013206:	74 1c                	je     c0013224 <inet_chksum_pseudo+0xe8>
c0013208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001320c:	0f b7 c0             	movzx  eax,ax
c001320f:	83 ec 0c             	sub    esp,0xc
c0013212:	50                   	push   eax
c0013213:	e8 04 da fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	0f b7 c0             	movzx  eax,ax
c001321e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013222:	66 90                	xchg   ax,ax
c0013224:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013228:	8b 00                	mov    eax,DWORD PTR [eax]
c001322a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013232:	0f b7 c0             	movzx  eax,ax
c0013235:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323d:	c1 e8 10             	shr    eax,0x10
c0013240:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013244:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013248:	8b 00                	mov    eax,DWORD PTR [eax]
c001324a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001324e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013252:	0f b7 c0             	movzx  eax,ax
c0013255:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325d:	c1 e8 10             	shr    eax,0x10
c0013260:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013264:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013269:	83 ec 0c             	sub    esp,0xc
c001326c:	50                   	push   eax
c001326d:	e8 aa d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	0f b7 c0             	movzx  eax,ax
c0013278:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001327c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013281:	83 ec 0c             	sub    esp,0xc
c0013284:	50                   	push   eax
c0013285:	e8 92 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	0f b7 c0             	movzx  eax,ax
c0013290:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013298:	c1 e8 10             	shr    eax,0x10
c001329b:	89 c2                	mov    edx,eax
c001329d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a1:	0f b7 c0             	movzx  eax,ax
c00132a4:	01 d0                	add    eax,edx
c00132a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ae:	c1 e8 10             	shr    eax,0x10
c00132b1:	89 c2                	mov    edx,eax
c00132b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b7:	0f b7 c0             	movzx  eax,ax
c00132ba:	01 d0                	add    eax,edx
c00132bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132c4:	f7 d0                	not    eax
c00132c6:	83 c4 2c             	add    esp,0x2c
c00132c9:	c3                   	ret    
c00132ca:	66 90                	xchg   ax,ax

c00132cc <inet_chksum_pseudo_partial>:
c00132cc:	83 ec 2c             	sub    esp,0x2c
c00132cf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00132d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00132d7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00132db:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00132df:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00132e4:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00132e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00132f1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00132f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00132fe:	e9 d9 00 00 00       	jmp    c00133dc <inet_chksum_pseudo_partial+0x110>
c0013303:	90                   	nop
c0013304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013308:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001330c:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013311:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013316:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001331b:	39 c2                	cmp    edx,eax
c001331d:	76 09                	jbe    c0013328 <inet_chksum_pseudo_partial+0x5c>
c001331f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013323:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013328:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001332d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013331:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013334:	83 ec 08             	sub    esp,0x8
c0013337:	52                   	push   edx
c0013338:	50                   	push   eax
c0013339:	e8 06 fd ff ff       	call   c0013044 <lwip_standard_chksum>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	0f b7 c0             	movzx  eax,ax
c0013344:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001334c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013350:	89 d1                	mov    ecx,edx
c0013352:	29 c1                	sub    ecx,eax
c0013354:	89 c8                	mov    eax,ecx
c0013356:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001335b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013360:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013365:	76 15                	jbe    c001337c <inet_chksum_pseudo_partial+0xb0>
c0013367:	83 ec 08             	sub    esp,0x8
c001336a:	68 80 09 03 c0       	push   0xc0030980
c001336f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0013374:	e8 43 c6 00 00       	call   c001f9bc <CPrintf>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013380:	c1 e8 10             	shr    eax,0x10
c0013383:	89 c2                	mov    edx,eax
c0013385:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013389:	0f b7 c0             	movzx  eax,ax
c001338c:	01 d0                	add    eax,edx
c001338e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013396:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001339a:	83 e0 01             	and    eax,0x1
c001339d:	0f b7 c0             	movzx  eax,ax
c00133a0:	85 c0                	test   eax,eax
c00133a2:	74 2c                	je     c00133d0 <inet_chksum_pseudo_partial+0x104>
c00133a4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133a8:	ba 01 00 00 00       	mov    edx,0x1
c00133ad:	29 c2                	sub    edx,eax
c00133af:	89 d0                	mov    eax,edx
c00133b1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00133b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b9:	0f b7 c0             	movzx  eax,ax
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	50                   	push   eax
c00133c0:	e8 57 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	0f b7 c0             	movzx  eax,ax
c00133cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133cf:	90                   	nop
c00133d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00133d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133da:	66 90                	xchg   ax,ax
c00133dc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133e1:	74 0d                	je     c00133f0 <inet_chksum_pseudo_partial+0x124>
c00133e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00133e8:	85 c0                	test   eax,eax
c00133ea:	0f 85 14 ff ff ff    	jne    c0013304 <inet_chksum_pseudo_partial+0x38>
c00133f0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133f5:	85 c0                	test   eax,eax
c00133f7:	74 1b                	je     c0013414 <inet_chksum_pseudo_partial+0x148>
c00133f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fd:	0f b7 c0             	movzx  eax,ax
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	50                   	push   eax
c0013404:	e8 13 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013409:	83 c4 10             	add    esp,0x10
c001340c:	0f b7 c0             	movzx  eax,ax
c001340f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013413:	90                   	nop
c0013414:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013418:	8b 00                	mov    eax,DWORD PTR [eax]
c001341a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013422:	0f b7 c0             	movzx  eax,ax
c0013425:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342d:	c1 e8 10             	shr    eax,0x10
c0013430:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013438:	8b 00                	mov    eax,DWORD PTR [eax]
c001343a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013442:	0f b7 c0             	movzx  eax,ax
c0013445:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344d:	c1 e8 10             	shr    eax,0x10
c0013450:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013454:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013459:	83 ec 0c             	sub    esp,0xc
c001345c:	50                   	push   eax
c001345d:	e8 ba d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	0f b7 c0             	movzx  eax,ax
c0013468:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001346c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013471:	83 ec 0c             	sub    esp,0xc
c0013474:	50                   	push   eax
c0013475:	e8 a2 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	0f b7 c0             	movzx  eax,ax
c0013480:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013488:	c1 e8 10             	shr    eax,0x10
c001348b:	89 c2                	mov    edx,eax
c001348d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013491:	0f b7 c0             	movzx  eax,ax
c0013494:	01 d0                	add    eax,edx
c0013496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001349a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001349e:	c1 e8 10             	shr    eax,0x10
c00134a1:	89 c2                	mov    edx,eax
c00134a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a7:	0f b7 c0             	movzx  eax,ax
c00134aa:	01 d0                	add    eax,edx
c00134ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b4:	f7 d0                	not    eax
c00134b6:	83 c4 2c             	add    esp,0x2c
c00134b9:	c3                   	ret    
c00134ba:	66 90                	xchg   ax,ax

c00134bc <inet_chksum>:
c00134bc:	83 ec 1c             	sub    esp,0x1c
c00134bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00134c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00134c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00134cd:	83 ec 08             	sub    esp,0x8
c00134d0:	50                   	push   eax
c00134d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134d5:	e8 6a fb ff ff       	call   c0013044 <lwip_standard_chksum>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	f7 d0                	not    eax
c00134df:	83 c4 1c             	add    esp,0x1c
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <inet_chksum_pbuf>:
c00134e4:	83 ec 1c             	sub    esp,0x1c
c00134e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00134ef:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00134f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134fc:	e9 8b 00 00 00       	jmp    c001358c <inet_chksum_pbuf+0xa8>
c0013501:	8d 76 00             	lea    esi,[esi+0x0]
c0013504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013508:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001350c:	0f b7 d0             	movzx  edx,ax
c001350f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013513:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013516:	83 ec 08             	sub    esp,0x8
c0013519:	52                   	push   edx
c001351a:	50                   	push   eax
c001351b:	e8 24 fb ff ff       	call   c0013044 <lwip_standard_chksum>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	0f b7 c0             	movzx  eax,ax
c0013526:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001352a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001352e:	c1 e8 10             	shr    eax,0x10
c0013531:	89 c2                	mov    edx,eax
c0013533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013537:	0f b7 c0             	movzx  eax,ax
c001353a:	01 d0                	add    eax,edx
c001353c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013548:	83 e0 01             	and    eax,0x1
c001354b:	0f b7 c0             	movzx  eax,ax
c001354e:	85 c0                	test   eax,eax
c0013550:	74 2e                	je     c0013580 <inet_chksum_pbuf+0x9c>
c0013552:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013556:	ba 01 00 00 00       	mov    edx,0x1
c001355b:	29 c2                	sub    edx,eax
c001355d:	89 d0                	mov    eax,edx
c001355f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013567:	0f b7 c0             	movzx  eax,ax
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	50                   	push   eax
c001356e:	e8 a9 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	0f b7 c0             	movzx  eax,ax
c0013579:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357d:	8d 76 00             	lea    esi,[esi+0x0]
c0013580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013584:	8b 00                	mov    eax,DWORD PTR [eax]
c0013586:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001358a:	66 90                	xchg   ax,ax
c001358c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013591:	0f 85 6d ff ff ff    	jne    c0013504 <inet_chksum_pbuf+0x20>
c0013597:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c001359c:	85 c0                	test   eax,eax
c001359e:	74 1c                	je     c00135bc <inet_chksum_pbuf+0xd8>
c00135a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a4:	0f b7 c0             	movzx  eax,ax
c00135a7:	83 ec 0c             	sub    esp,0xc
c00135aa:	50                   	push   eax
c00135ab:	e8 6c d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	0f b7 c0             	movzx  eax,ax
c00135b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135ba:	66 90                	xchg   ax,ax
c00135bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c0:	f7 d0                	not    eax
c00135c2:	83 c4 1c             	add    esp,0x1c
c00135c5:	c3                   	ret    
c00135c6:	66 90                	xchg   ax,ax

c00135c8 <ip_route>:
c00135c8:	83 ec 10             	sub    esp,0x10
c00135cb:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00135d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135d4:	eb 42                	jmp    c0013618 <ip_route+0x50>
c00135d6:	66 90                	xchg   ax,ax
c00135d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135dc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00135df:	83 e0 01             	and    eax,0x1
c00135e2:	0f b6 c0             	movzx  eax,al
c00135e5:	85 c0                	test   eax,eax
c00135e7:	74 23                	je     c001360c <ip_route+0x44>
c00135e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135f6:	31 c2                	xor    edx,eax
c00135f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00135ff:	21 d0                	and    eax,edx
c0013601:	75 09                	jne    c001360c <ip_route+0x44>
c0013603:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013607:	eb 4f                	jmp    c0013658 <ip_route+0x90>
c0013609:	8d 76 00             	lea    esi,[esi+0x0]
c001360c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013610:	8b 00                	mov    eax,DWORD PTR [eax]
c0013612:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013616:	66 90                	xchg   ax,ax
c0013618:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001361d:	75 b9                	jne    c00135d8 <ip_route+0x10>
c001361f:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013624:	85 c0                	test   eax,eax
c0013626:	74 10                	je     c0013638 <ip_route+0x70>
c0013628:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c001362d:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013630:	0f b6 c0             	movzx  eax,al
c0013633:	83 e0 01             	and    eax,0x1
c0013636:	75 18                	jne    c0013650 <ip_route+0x88>
c0013638:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c001363e:	83 c0 01             	add    eax,0x1
c0013641:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013647:	b8 00 00 00 00       	mov    eax,0x0
c001364c:	eb 0a                	jmp    c0013658 <ip_route+0x90>
c001364e:	66 90                	xchg   ax,ax
c0013650:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013655:	8d 76 00             	lea    esi,[esi+0x0]
c0013658:	83 c4 10             	add    esp,0x10
c001365b:	c3                   	ret    

c001365c <ip_input>:
c001365c:	83 ec 1c             	sub    esp,0x1c
c001365f:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c0013665:	83 c0 01             	add    eax,0x1
c0013668:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c001366e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013672:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001367d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013680:	0f b7 c0             	movzx  eax,ax
c0013683:	83 ec 0c             	sub    esp,0xc
c0013686:	50                   	push   eax
c0013687:	e8 90 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	0f b7 c0             	movzx  eax,ax
c0013692:	c1 e8 0c             	shr    eax,0xc
c0013695:	0f b7 c0             	movzx  eax,ax
c0013698:	83 f8 04             	cmp    eax,0x4
c001369b:	74 37                	je     c00136d4 <ip_input+0x78>
c001369d:	83 ec 0c             	sub    esp,0xc
c00136a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a4:	e8 d7 4b ff ff       	call   c0008280 <pbuf_free>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00136b2:	83 c0 01             	add    eax,0x1
c00136b5:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00136bb:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136c1:	83 c0 01             	add    eax,0x1
c00136c4:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00136ca:	b0 00                	mov    al,0x0
c00136cc:	e9 cb 03 00 00       	jmp    c0013a9c <ip_input+0x440>
c00136d1:	8d 76 00             	lea    esi,[esi+0x0]
c00136d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136db:	0f b7 c0             	movzx  eax,ax
c00136de:	83 ec 0c             	sub    esp,0xc
c00136e1:	50                   	push   eax
c00136e2:	e8 35 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	0f b7 c0             	movzx  eax,ax
c00136ed:	c1 e8 08             	shr    eax,0x8
c00136f0:	83 e0 0f             	and    eax,0xf
c00136f3:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00136f8:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00136fd:	c1 e0 02             	shl    eax,0x2
c0013700:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013709:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c001370d:	0f b7 c0             	movzx  eax,ax
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	50                   	push   eax
c0013714:	e8 03 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0013720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013724:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013728:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001372d:	0f b7 c0             	movzx  eax,ax
c0013730:	39 c2                	cmp    edx,eax
c0013732:	77 14                	ja     c0013748 <ip_input+0xec>
c0013734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013738:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001373b:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c001373f:	0f b7 c0             	movzx  eax,ax
c0013742:	39 c2                	cmp    edx,eax
c0013744:	76 36                	jbe    c001377c <ip_input+0x120>
c0013746:	66 90                	xchg   ax,ax
c0013748:	83 ec 0c             	sub    esp,0xc
c001374b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001374f:	e8 2c 4b ff ff       	call   c0008280 <pbuf_free>
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c001375d:	83 c0 01             	add    eax,0x1
c0013760:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c0013766:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c001376c:	83 c0 01             	add    eax,0x1
c001376f:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013775:	b0 00                	mov    al,0x0
c0013777:	e9 20 03 00 00       	jmp    c0013a9c <ip_input+0x440>
c001377c:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013781:	83 ec 08             	sub    esp,0x8
c0013784:	50                   	push   eax
c0013785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013789:	e8 2e fd ff ff       	call   c00134bc <inet_chksum>
c001378e:	83 c4 10             	add    esp,0x10
c0013791:	0f b7 c0             	movzx  eax,ax
c0013794:	85 c0                	test   eax,eax
c0013796:	74 34                	je     c00137cc <ip_input+0x170>
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001379f:	e8 dc 4a ff ff       	call   c0008280 <pbuf_free>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00137ad:	83 c0 01             	add    eax,0x1
c00137b0:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00137b6:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137bc:	83 c0 01             	add    eax,0x1
c00137bf:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137c5:	b0 00                	mov    al,0x0
c00137c7:	e9 d0 02 00 00       	jmp    c0013a9c <ip_input+0x440>
c00137cc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00137d0:	83 ec 08             	sub    esp,0x8
c00137d3:	50                   	push   eax
c00137d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137d8:	e8 77 50 ff ff       	call   c0008854 <pbuf_realloc>
c00137dd:	83 c4 10             	add    esp,0x10
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137e7:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00137ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00137f3:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c00137f8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013800:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001380c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001380f:	83 e0 01             	and    eax,0x1
c0013812:	0f b6 c0             	movzx  eax,al
c0013815:	85 c0                	test   eax,eax
c0013817:	74 43                	je     c001385c <ip_input+0x200>
c0013819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001381d:	83 c0 04             	add    eax,0x4
c0013820:	74 3a                	je     c001385c <ip_input+0x200>
c0013822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013829:	85 c0                	test   eax,eax
c001382b:	74 2f                	je     c001385c <ip_input+0x200>
c001382d:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013837:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001383a:	39 c2                	cmp    edx,eax
c001383c:	74 66                	je     c00138a4 <ip_input+0x248>
c001383e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013843:	83 ec 08             	sub    esp,0x8
c0013846:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001384a:	50                   	push   eax
c001384b:	e8 d4 05 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c0013850:	83 c4 10             	add    esp,0x10
c0013853:	0f b6 c0             	movzx  eax,al
c0013856:	85 c0                	test   eax,eax
c0013858:	75 4a                	jne    c00138a4 <ip_input+0x248>
c001385a:	66 90                	xchg   ax,ax
c001385c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013861:	74 15                	je     c0013878 <ip_input+0x21c>
c0013863:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001386b:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013870:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013874:	eb 0e                	jmp    c0013884 <ip_input+0x228>
c0013876:	66 90                	xchg   ax,ax
c0013878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001387c:	8b 00                	mov    eax,DWORD PTR [eax]
c001387e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013882:	66 90                	xchg   ax,ax
c0013884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013888:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001388c:	75 0a                	jne    c0013898 <ip_input+0x23c>
c001388e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013892:	8b 00                	mov    eax,DWORD PTR [eax]
c0013894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013898:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001389d:	0f 85 65 ff ff ff    	jne    c0013808 <ip_input+0x1ac>
c00138a3:	90                   	nop
c00138a4:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138a9:	83 ec 08             	sub    esp,0x8
c00138ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138b0:	50                   	push   eax
c00138b1:	e8 6e 05 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	0f b6 c0             	movzx  eax,al
c00138bc:	85 c0                	test   eax,eax
c00138be:	75 14                	jne    c00138d4 <ip_input+0x278>
c00138c0:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138c5:	25 f0 00 00 00       	and    eax,0xf0
c00138ca:	3d e0 00 00 00       	cmp    eax,0xe0
c00138cf:	75 2b                	jne    c00138fc <ip_input+0x2a0>
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	83 ec 0c             	sub    esp,0xc
c00138d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138db:	e8 a0 49 ff ff       	call   c0008280 <pbuf_free>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00138e9:	83 c0 01             	add    eax,0x1
c00138ec:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00138f2:	b0 00                	mov    al,0x0
c00138f4:	e9 a3 01 00 00       	jmp    c0013a9c <ip_input+0x440>
c00138f9:	8d 76 00             	lea    esi,[esi+0x0]
c00138fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013901:	75 19                	jne    c001391c <ip_input+0x2c0>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001390a:	e8 71 49 ff ff       	call   c0008280 <pbuf_free>
c001390f:	83 c4 10             	add    esp,0x10
c0013912:	b0 00                	mov    al,0x0
c0013914:	e9 83 01 00 00       	jmp    c0013a9c <ip_input+0x440>
c0013919:	8d 76 00             	lea    esi,[esi+0x0]
c001391c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013920:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013924:	0f b7 c0             	movzx  eax,ax
c0013927:	25 3f ff 00 00       	and    eax,0xff3f
c001392c:	74 2e                	je     c001395c <ip_input+0x300>
c001392e:	83 ec 0c             	sub    esp,0xc
c0013931:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013935:	e8 8a 13 00 00       	call   c0014cc4 <ip_reass>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013941:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013946:	75 08                	jne    c0013950 <ip_input+0x2f4>
c0013948:	b0 00                	mov    al,0x0
c001394a:	e9 4d 01 00 00       	jmp    c0013a9c <ip_input+0x440>
c001394f:	90                   	nop
c0013950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013954:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001395b:	90                   	nop
c001395c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013960:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013969:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c001396e:	83 ec 08             	sub    esp,0x8
c0013971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013979:	e8 32 5c ff ff       	call   c00095b0 <raw_input>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	0f b6 c0             	movzx  eax,al
c0013984:	85 c0                	test   eax,eax
c0013986:	0f 85 e0 00 00 00    	jne    c0013a6c <ip_input+0x410>
c001398c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013990:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013993:	0f b6 c0             	movzx  eax,al
c0013996:	83 f8 06             	cmp    eax,0x6
c0013999:	74 25                	je     c00139c0 <ip_input+0x364>
c001399b:	83 f8 11             	cmp    eax,0x11
c001399e:	74 08                	je     c00139a8 <ip_input+0x34c>
c00139a0:	83 f8 01             	cmp    eax,0x1
c00139a3:	74 33                	je     c00139d8 <ip_input+0x37c>
c00139a5:	eb 49                	jmp    c00139f0 <ip_input+0x394>
c00139a7:	90                   	nop
c00139a8:	83 ec 08             	sub    esp,0x8
c00139ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b3:	e8 a8 d3 ff ff       	call   c0010d60 <udp_input>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	e9 b0 00 00 00       	jmp    c0013a70 <ip_input+0x414>
c00139c0:	83 ec 08             	sub    esp,0x8
c00139c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139cb:	e8 b0 a4 ff ff       	call   c000de80 <tcp_input>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	e9 98 00 00 00       	jmp    c0013a70 <ip_input+0x414>
c00139d8:	83 ec 08             	sub    esp,0x8
c00139db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 70 f0 ff ff       	call   c0012a58 <icmp_input>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	e9 80 00 00 00       	jmp    c0013a70 <ip_input+0x414>
c00139f0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00139f5:	83 ec 08             	sub    esp,0x8
c00139f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139fc:	50                   	push   eax
c00139fd:	e8 22 04 00 00       	call   c0013e24 <ip4_addr_isbroadcast>
c0013a02:	83 c4 10             	add    esp,0x10
c0013a05:	0f b6 c0             	movzx  eax,al
c0013a08:	85 c0                	test   eax,eax
c0013a0a:	75 30                	jne    c0013a3c <ip_input+0x3e0>
c0013a0c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a11:	25 f0 00 00 00       	and    eax,0xf0
c0013a16:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a1b:	74 1f                	je     c0013a3c <ip_input+0x3e0>
c0013a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a28:	83 ec 08             	sub    esp,0x8
c0013a2b:	6a 02                	push   0x2
c0013a2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a31:	e8 c6 f5 ff ff       	call   c0012ffc <icmp_dest_unreach>
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a43:	e8 38 48 ff ff       	call   c0008280 <pbuf_free>
c0013a48:	83 c4 10             	add    esp,0x10
c0013a4b:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013a51:	83 c0 01             	add    eax,0x1
c0013a54:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013a5a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a60:	83 c0 01             	add    eax,0x1
c0013a63:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013a69:	eb 05                	jmp    c0013a70 <ip_input+0x414>
c0013a6b:	90                   	nop
c0013a6c:	90                   	nop
c0013a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a70:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013a7a:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013a84:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013a8e:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013a98:	b0 00                	mov    al,0x0
c0013a9a:	66 90                	xchg   ax,ax
c0013a9c:	83 c4 1c             	add    esp,0x1c
c0013a9f:	c3                   	ret    

c0013aa0 <ip_output_if>:
c0013aa0:	83 ec 2c             	sub    esp,0x2c
c0013aa3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013aa7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013aab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013aaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013ab3:	88 c8                	mov    al,cl
c0013ab5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013ab9:	88 d0                	mov    al,dl
c0013abb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013abf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ac7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013acb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013acf:	0f b7 c0             	movzx  eax,ax
c0013ad2:	83 f8 01             	cmp    eax,0x1
c0013ad5:	74 15                	je     c0013aec <ip_output_if+0x4c>
c0013ad7:	83 ec 08             	sub    esp,0x8
c0013ada:	68 8a 09 03 c0       	push   0xc003098a
c0013adf:	68 e6 f6 02 c0       	push   0xc002f6e6
c0013ae4:	e8 d3 be 00 00       	call   c001f9bc <CPrintf>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013af1:	0f 84 f5 01 00 00    	je     c0013cec <ip_output_if+0x24c>
c0013af7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013afe:	83 ec 08             	sub    esp,0x8
c0013b01:	6a 14                	push   0x14
c0013b03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b07:	e8 d4 45 ff ff       	call   c00080e0 <pbuf_header>
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	0f b6 c0             	movzx  eax,al
c0013b12:	85 c0                	test   eax,eax
c0013b14:	74 16                	je     c0013b2c <ip_output_if+0x8c>
c0013b16:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b1c:	83 c0 01             	add    eax,0x1
c0013b1f:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b25:	b0 fe                	mov    al,0xfe
c0013b27:	e9 4c 02 00 00       	jmp    c0013d78 <ip_output_if+0x2d8>
c0013b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b3b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b3f:	0f b7 c0             	movzx  eax,ax
c0013b42:	83 f8 13             	cmp    eax,0x13
c0013b45:	77 15                	ja     c0013b5c <ip_output_if+0xbc>
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	68 98 09 03 c0       	push   0xc0030998
c0013b4f:	68 e6 f6 02 c0       	push   0xc002f6e6
c0013b54:	e8 63 be 00 00       	call   c001f9bc <CPrintf>
c0013b59:	83 c4 10             	add    esp,0x10
c0013b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b60:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013b64:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013b67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b6b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013b6f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013b72:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013b77:	c1 e0 08             	shl    eax,0x8
c0013b7a:	89 c2                	mov    edx,eax
c0013b7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013b81:	09 d0                	or     eax,edx
c0013b83:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013b8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b91:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013b94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b9b:	0f b7 c0             	movzx  eax,ax
c0013b9e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ba9:	c1 e8 10             	shr    eax,0x10
c0013bac:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bb0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013bb5:	c1 e8 02             	shr    eax,0x2
c0013bb8:	0f b7 c0             	movzx  eax,ax
c0013bbb:	c1 e0 08             	shl    eax,0x8
c0013bbe:	80 cc 40             	or     ah,0x40
c0013bc1:	89 c2                	mov    edx,eax
c0013bc3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013bc8:	09 d0                	or     eax,edx
c0013bca:	0f b7 c0             	movzx  eax,ax
c0013bcd:	83 ec 0c             	sub    esp,0xc
c0013bd0:	50                   	push   eax
c0013bd1:	e8 46 d0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	89 c2                	mov    edx,eax
c0013bdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bdf:	66 89 10             	mov    WORD PTR [eax],dx
c0013be2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013be9:	0f b7 c0             	movzx  eax,ax
c0013bec:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013bf7:	0f b7 c0             	movzx  eax,ax
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	50                   	push   eax
c0013bfe:	e8 19 d0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	89 c2                	mov    edx,eax
c0013c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c0c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c18:	0f b7 c0             	movzx  eax,ax
c0013c1b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c23:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c29:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c2f:	0f b7 c0             	movzx  eax,ax
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	50                   	push   eax
c0013c36:	e8 e1 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	89 c2                	mov    edx,eax
c0013c40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c44:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c4c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013c50:	0f b7 c0             	movzx  eax,ax
c0013c53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c57:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c5d:	83 c0 01             	add    eax,0x1
c0013c60:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013c66:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013c6b:	74 0b                	je     c0013c78 <ip_output_if+0x1d8>
c0013c6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c73:	85 c0                	test   eax,eax
c0013c75:	75 11                	jne    c0013c88 <ip_output_if+0x1e8>
c0013c77:	90                   	nop
c0013c78:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c86:	eb 10                	jmp    c0013c98 <ip_output_if+0x1f8>
c0013c88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c92:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c95:	8d 76 00             	lea    esi,[esi+0x0]
c0013c98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013caa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cad:	c1 e8 10             	shr    eax,0x10
c0013cb0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb8:	c1 e8 10             	shr    eax,0x10
c0013cbb:	89 c2                	mov    edx,eax
c0013cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cc1:	0f b7 c0             	movzx  eax,ax
c0013cc4:	01 d0                	add    eax,edx
c0013cc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cce:	c1 e8 10             	shr    eax,0x10
c0013cd1:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cd5:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cdd:	89 c2                	mov    edx,eax
c0013cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce3:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013ce7:	eb 23                	jmp    c0013d0c <ip_output_if+0x26c>
c0013ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013cf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013cfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d02:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d0a:	66 90                	xchg   ax,ax
c0013d0c:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d12:	83 c0 01             	add    eax,0x1
c0013d15:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d1b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d22:	0f b7 c0             	movzx  eax,ax
c0013d25:	85 c0                	test   eax,eax
c0013d27:	74 33                	je     c0013d5c <ip_output_if+0x2bc>
c0013d29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d2d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d30:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d34:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d37:	0f b7 d2             	movzx  edx,dx
c0013d3a:	0f b7 c0             	movzx  eax,ax
c0013d3d:	39 c2                	cmp    edx,eax
c0013d3f:	76 1b                	jbe    c0013d5c <ip_output_if+0x2bc>
c0013d41:	83 ec 04             	sub    esp,0x4
c0013d44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d48:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013d4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d50:	e8 37 14 00 00       	call   c001518c <ip_frag>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	eb 1e                	jmp    c0013d78 <ip_output_if+0x2d8>
c0013d5a:	66 90                	xchg   ax,ax
c0013d5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013d63:	83 ec 04             	sub    esp,0x4
c0013d66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d6a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013d6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013d72:	ff d0                	call   eax
c0013d74:	83 c4 10             	add    esp,0x10
c0013d77:	90                   	nop
c0013d78:	83 c4 2c             	add    esp,0x2c
c0013d7b:	c3                   	ret    

c0013d7c <ip_output>:
c0013d7c:	83 ec 2c             	sub    esp,0x2c
c0013d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d83:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013d87:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013d8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d8f:	88 c8                	mov    al,cl
c0013d91:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013d95:	88 d0                	mov    al,dl
c0013d97:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d9f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013da3:	0f b7 c0             	movzx  eax,ax
c0013da6:	83 f8 01             	cmp    eax,0x1
c0013da9:	74 15                	je     c0013dc0 <ip_output+0x44>
c0013dab:	83 ec 08             	sub    esp,0x8
c0013dae:	68 8a 09 03 c0       	push   0xc003098a
c0013db3:	68 e6 f6 02 c0       	push   0xc002f6e6
c0013db8:	e8 ff bb 00 00       	call   c001f9bc <CPrintf>
c0013dbd:	83 c4 10             	add    esp,0x10
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013dc7:	e8 fc f7 ff ff       	call   c00135c8 <ip_route>
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dd3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013dd8:	75 16                	jne    c0013df0 <ip_output+0x74>
c0013dda:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013de0:	83 c0 01             	add    eax,0x1
c0013de3:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013de9:	b0 fc                	mov    al,0xfc
c0013deb:	eb 33                	jmp    c0013e20 <ip_output+0xa4>
c0013ded:	8d 76 00             	lea    esi,[esi+0x0]
c0013df0:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013df5:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013dfa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013dff:	83 ec 04             	sub    esp,0x4
c0013e02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e06:	51                   	push   ecx
c0013e07:	52                   	push   edx
c0013e08:	50                   	push   eax
c0013e09:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e15:	e8 86 fc ff ff       	call   c0013aa0 <ip_output_if>
c0013e1a:	83 c4 20             	add    esp,0x20
c0013e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e20:	83 c4 2c             	add    esp,0x2c
c0013e23:	c3                   	ret    

c0013e24 <ip4_addr_isbroadcast>:
c0013e24:	83 ec 10             	sub    esp,0x10
c0013e27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e2f:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e34:	74 0a                	je     c0013e40 <ip4_addr_isbroadcast+0x1c>
c0013e36:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e3b:	75 07                	jne    c0013e44 <ip4_addr_isbroadcast+0x20>
c0013e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e40:	b0 01                	mov    al,0x1
c0013e42:	eb 64                	jmp    c0013ea8 <ip4_addr_isbroadcast+0x84>
c0013e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e48:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e4b:	0f b6 c0             	movzx  eax,al
c0013e4e:	83 e0 02             	and    eax,0x2
c0013e51:	75 05                	jne    c0013e58 <ip4_addr_isbroadcast+0x34>
c0013e53:	b0 00                	mov    al,0x0
c0013e55:	eb 51                	jmp    c0013ea8 <ip4_addr_isbroadcast+0x84>
c0013e57:	90                   	nop
c0013e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e5f:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013e63:	75 07                	jne    c0013e6c <ip4_addr_isbroadcast+0x48>
c0013e65:	b0 00                	mov    al,0x0
c0013e67:	eb 3f                	jmp    c0013ea8 <ip4_addr_isbroadcast+0x84>
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e77:	31 c2                	xor    edx,eax
c0013e79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e80:	21 d0                	and    eax,edx
c0013e82:	75 20                	jne    c0013ea4 <ip4_addr_isbroadcast+0x80>
c0013e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e8b:	f7 d0                	not    eax
c0013e8d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013e91:	89 c2                	mov    edx,eax
c0013e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e9a:	f7 d0                	not    eax
c0013e9c:	39 c2                	cmp    edx,eax
c0013e9e:	75 04                	jne    c0013ea4 <ip4_addr_isbroadcast+0x80>
c0013ea0:	b0 01                	mov    al,0x1
c0013ea2:	eb 04                	jmp    c0013ea8 <ip4_addr_isbroadcast+0x84>
c0013ea4:	b0 00                	mov    al,0x0
c0013ea6:	66 90                	xchg   ax,ax
c0013ea8:	83 c4 10             	add    esp,0x10
c0013eab:	c3                   	ret    

c0013eac <ip4_addr_netmask_valid>:
c0013eac:	83 ec 1c             	sub    esp,0x1c
c0013eaf:	83 ec 0c             	sub    esp,0xc
c0013eb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb6:	e8 85 cd fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0013ebb:	83 c4 10             	add    esp,0x10
c0013ebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ec2:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013eca:	eb 10                	jmp    c0013edc <ip4_addr_netmask_valid+0x30>
c0013ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ed0:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013ed4:	74 12                	je     c0013ee8 <ip4_addr_netmask_valid+0x3c>
c0013ed6:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013eda:	66 90                	xchg   ax,ax
c0013edc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013ee1:	75 e9                	jne    c0013ecc <ip4_addr_netmask_valid+0x20>
c0013ee3:	eb 1b                	jmp    c0013f00 <ip4_addr_netmask_valid+0x54>
c0013ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ee8:	90                   	nop
c0013ee9:	eb 15                	jmp    c0013f00 <ip4_addr_netmask_valid+0x54>
c0013eeb:	90                   	nop
c0013eec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ef0:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013ef4:	74 06                	je     c0013efc <ip4_addr_netmask_valid+0x50>
c0013ef6:	b0 00                	mov    al,0x0
c0013ef8:	eb 12                	jmp    c0013f0c <ip4_addr_netmask_valid+0x60>
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f05:	75 e5                	jne    c0013eec <ip4_addr_netmask_valid+0x40>
c0013f07:	b0 01                	mov    al,0x1
c0013f09:	8d 76 00             	lea    esi,[esi+0x0]
c0013f0c:	83 c4 1c             	add    esp,0x1c
c0013f0f:	c3                   	ret    

c0013f10 <ipaddr_aton>:
c0013f10:	83 ec 2c             	sub    esp,0x2c
c0013f13:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f1f:	8a 00                	mov    al,BYTE PTR [eax]
c0013f21:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f25:	8d 76 00             	lea    esi,[esi+0x0]
c0013f28:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f2c:	0f b6 c0             	movzx  eax,al
c0013f2f:	83 f8 2f             	cmp    eax,0x2f
c0013f32:	76 0c                	jbe    c0013f40 <ipaddr_aton+0x30>
c0013f34:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f38:	0f b6 c0             	movzx  eax,al
c0013f3b:	83 f8 39             	cmp    eax,0x39
c0013f3e:	76 0c                	jbe    c0013f4c <ipaddr_aton+0x3c>
c0013f40:	b8 00 00 00 00       	mov    eax,0x0
c0013f45:	e9 f2 02 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c0013f4a:	66 90                	xchg   ax,ax
c0013f4c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f54:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013f59:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f5e:	83 f8 30             	cmp    eax,0x30
c0013f61:	75 45                	jne    c0013fa8 <ipaddr_aton+0x98>
c0013f63:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f6c:	8a 00                	mov    al,BYTE PTR [eax]
c0013f6e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f72:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f77:	83 f8 78             	cmp    eax,0x78
c0013f7a:	74 0c                	je     c0013f88 <ipaddr_aton+0x78>
c0013f7c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f81:	83 f8 58             	cmp    eax,0x58
c0013f84:	75 1a                	jne    c0013fa0 <ipaddr_aton+0x90>
c0013f86:	66 90                	xchg   ax,ax
c0013f88:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013f8d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f96:	8a 00                	mov    al,BYTE PTR [eax]
c0013f98:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f9c:	eb 0a                	jmp    c0013fa8 <ipaddr_aton+0x98>
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fac:	0f b6 c0             	movzx  eax,al
c0013faf:	83 f8 2f             	cmp    eax,0x2f
c0013fb2:	76 3c                	jbe    c0013ff0 <ipaddr_aton+0xe0>
c0013fb4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fb8:	0f b6 c0             	movzx  eax,al
c0013fbb:	83 f8 39             	cmp    eax,0x39
c0013fbe:	77 30                	ja     c0013ff0 <ipaddr_aton+0xe0>
c0013fc0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013fc5:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013fca:	89 c2                	mov    edx,eax
c0013fcc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fd1:	01 d0                	add    eax,edx
c0013fd3:	83 e8 30             	sub    eax,0x30
c0013fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013fda:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fe3:	8a 00                	mov    al,BYTE PTR [eax]
c0013fe5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fe9:	e9 ae 00 00 00       	jmp    c001409c <ipaddr_aton+0x18c>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013ff5:	83 f8 10             	cmp    eax,0x10
c0013ff8:	0f 85 a6 00 00 00    	jne    c00140a4 <ipaddr_aton+0x194>
c0013ffe:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014002:	0f b6 c0             	movzx  eax,al
c0014005:	83 f8 2f             	cmp    eax,0x2f
c0014008:	76 0e                	jbe    c0014018 <ipaddr_aton+0x108>
c001400a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001400e:	0f b6 c0             	movzx  eax,al
c0014011:	83 f8 39             	cmp    eax,0x39
c0014014:	76 32                	jbe    c0014048 <ipaddr_aton+0x138>
c0014016:	66 90                	xchg   ax,ax
c0014018:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001401c:	0f b6 c0             	movzx  eax,al
c001401f:	83 f8 60             	cmp    eax,0x60
c0014022:	76 0c                	jbe    c0014030 <ipaddr_aton+0x120>
c0014024:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014028:	0f b6 c0             	movzx  eax,al
c001402b:	83 f8 66             	cmp    eax,0x66
c001402e:	76 18                	jbe    c0014048 <ipaddr_aton+0x138>
c0014030:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014034:	0f b6 c0             	movzx  eax,al
c0014037:	83 f8 40             	cmp    eax,0x40
c001403a:	76 68                	jbe    c00140a4 <ipaddr_aton+0x194>
c001403c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014040:	0f b6 c0             	movzx  eax,al
c0014043:	83 f8 46             	cmp    eax,0x46
c0014046:	77 5c                	ja     c00140a4 <ipaddr_aton+0x194>
c0014048:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001404c:	c1 e0 04             	shl    eax,0x4
c001404f:	89 c2                	mov    edx,eax
c0014051:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014056:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014059:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001405d:	0f b6 c0             	movzx  eax,al
c0014060:	83 f8 60             	cmp    eax,0x60
c0014063:	76 13                	jbe    c0014078 <ipaddr_aton+0x168>
c0014065:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014069:	0f b6 c0             	movzx  eax,al
c001406c:	83 f8 7a             	cmp    eax,0x7a
c001406f:	77 07                	ja     c0014078 <ipaddr_aton+0x168>
c0014071:	b8 61 00 00 00       	mov    eax,0x61
c0014076:	eb 08                	jmp    c0014080 <ipaddr_aton+0x170>
c0014078:	b8 41 00 00 00       	mov    eax,0x41
c001407d:	8d 76 00             	lea    esi,[esi+0x0]
c0014080:	29 c1                	sub    ecx,eax
c0014082:	89 c8                	mov    eax,ecx
c0014084:	09 d0                	or     eax,edx
c0014086:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001408a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001408f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014093:	8a 00                	mov    al,BYTE PTR [eax]
c0014095:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014099:	8d 76 00             	lea    esi,[esi+0x0]
c001409c:	e9 07 ff ff ff       	jmp    c0013fa8 <ipaddr_aton+0x98>
c00140a1:	8d 76 00             	lea    esi,[esi+0x0]
c00140a4:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140a9:	83 f8 2e             	cmp    eax,0x2e
c00140ac:	75 42                	jne    c00140f0 <ipaddr_aton+0x1e0>
c00140ae:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140b2:	83 c0 0c             	add    eax,0xc
c00140b5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140b9:	72 0d                	jb     c00140c8 <ipaddr_aton+0x1b8>
c00140bb:	b8 00 00 00 00       	mov    eax,0x0
c00140c0:	e9 77 01 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140cc:	8d 50 04             	lea    edx,[eax+0x4]
c00140cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00140d7:	89 10                	mov    DWORD PTR [eax],edx
c00140d9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e2:	8a 00                	mov    al,BYTE PTR [eax]
c00140e4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e8:	e9 3b fe ff ff       	jmp    c0013f28 <ipaddr_aton+0x18>
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	90                   	nop
c00140f1:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140f6:	85 c0                	test   eax,eax
c00140f8:	74 46                	je     c0014140 <ipaddr_aton+0x230>
c00140fa:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140ff:	83 f8 20             	cmp    eax,0x20
c0014102:	74 3c                	je     c0014140 <ipaddr_aton+0x230>
c0014104:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014109:	83 f8 0c             	cmp    eax,0xc
c001410c:	74 32                	je     c0014140 <ipaddr_aton+0x230>
c001410e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014113:	83 f8 0a             	cmp    eax,0xa
c0014116:	74 28                	je     c0014140 <ipaddr_aton+0x230>
c0014118:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001411d:	83 f8 0d             	cmp    eax,0xd
c0014120:	74 1e                	je     c0014140 <ipaddr_aton+0x230>
c0014122:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014127:	83 f8 09             	cmp    eax,0x9
c001412a:	74 14                	je     c0014140 <ipaddr_aton+0x230>
c001412c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014131:	83 f8 0b             	cmp    eax,0xb
c0014134:	74 0a                	je     c0014140 <ipaddr_aton+0x230>
c0014136:	b8 00 00 00 00       	mov    eax,0x0
c001413b:	e9 fc 00 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c0014140:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014144:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014148:	29 c2                	sub    edx,eax
c001414a:	89 d0                	mov    eax,edx
c001414c:	c1 f8 02             	sar    eax,0x2
c001414f:	83 c0 01             	add    eax,0x1
c0014152:	83 f8 04             	cmp    eax,0x4
c0014155:	0f 87 9d 00 00 00    	ja     c00141f8 <ipaddr_aton+0x2e8>
c001415b:	8b 04 85 d0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf630]
c0014162:	ff e0                	jmp    eax
c0014164:	b8 00 00 00 00       	mov    eax,0x0
c0014169:	e9 ce 00 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c001416e:	66 90                	xchg   ax,ax
c0014170:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c0014178:	76 0a                	jbe    c0014184 <ipaddr_aton+0x274>
c001417a:	b8 00 00 00 00       	mov    eax,0x0
c001417f:	e9 b8 00 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c0014184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014188:	c1 e0 18             	shl    eax,0x18
c001418b:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001418f:	e9 80 00 00 00       	jmp    c0014214 <ipaddr_aton+0x304>
c0014194:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c001419c:	76 0a                	jbe    c00141a8 <ipaddr_aton+0x298>
c001419e:	b8 00 00 00 00       	mov    eax,0x0
c00141a3:	e9 94 00 00 00       	jmp    c001423c <ipaddr_aton+0x32c>
c00141a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ac:	c1 e0 18             	shl    eax,0x18
c00141af:	89 c2                	mov    edx,eax
c00141b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141b5:	c1 e0 10             	shl    eax,0x10
c00141b8:	09 d0                	or     eax,edx
c00141ba:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141be:	eb 54                	jmp    c0014214 <ipaddr_aton+0x304>
c00141c0:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00141c8:	76 0a                	jbe    c00141d4 <ipaddr_aton+0x2c4>
c00141ca:	b8 00 00 00 00       	mov    eax,0x0
c00141cf:	eb 6b                	jmp    c001423c <ipaddr_aton+0x32c>
c00141d1:	8d 76 00             	lea    esi,[esi+0x0]
c00141d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d8:	c1 e0 18             	shl    eax,0x18
c00141db:	89 c2                	mov    edx,eax
c00141dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141e1:	c1 e0 10             	shl    eax,0x10
c00141e4:	09 c2                	or     edx,eax
c00141e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141ea:	c1 e0 08             	shl    eax,0x8
c00141ed:	09 d0                	or     eax,edx
c00141ef:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141f3:	eb 1f                	jmp    c0014214 <ipaddr_aton+0x304>
c00141f5:	8d 76 00             	lea    esi,[esi+0x0]
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	68 c5 09 03 c0       	push   0xc00309c5
c0014200:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014205:	e8 b2 b7 00 00       	call   c001f9bc <CPrintf>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	eb 05                	jmp    c0014214 <ipaddr_aton+0x304>
c001420f:	90                   	nop
c0014210:	90                   	nop
c0014211:	8d 76 00             	lea    esi,[esi+0x0]
c0014214:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014219:	74 19                	je     c0014234 <ipaddr_aton+0x324>
c001421b:	83 ec 0c             	sub    esp,0xc
c001421e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014222:	e8 19 ca fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	89 c2                	mov    edx,eax
c001422c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014230:	89 10                	mov    DWORD PTR [eax],edx
c0014232:	66 90                	xchg   ax,ax
c0014234:	b8 01 00 00 00       	mov    eax,0x1
c0014239:	8d 76 00             	lea    esi,[esi+0x0]
c001423c:	83 c4 2c             	add    esp,0x2c
c001423f:	c3                   	ret    

c0014240 <ipaddr_addr>:
c0014240:	83 ec 1c             	sub    esp,0x1c
c0014243:	83 ec 08             	sub    esp,0x8
c0014246:	8d 44 24 14          	lea    eax,[esp+0x14]
c001424a:	50                   	push   eax
c001424b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001424f:	e8 bc fc ff ff       	call   c0013f10 <ipaddr_aton>
c0014254:	83 c4 10             	add    esp,0x10
c0014257:	85 c0                	test   eax,eax
c0014259:	74 09                	je     c0014264 <ipaddr_addr+0x24>
c001425b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001425f:	eb 0b                	jmp    c001426c <ipaddr_addr+0x2c>
c0014261:	8d 76 00             	lea    esi,[esi+0x0]
c0014264:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014269:	8d 76 00             	lea    esi,[esi+0x0]
c001426c:	83 c4 1c             	add    esp,0x1c
c001426f:	c3                   	ret    

c0014270 <ipaddr_ntoa_r>:
c0014270:	83 ec 20             	sub    esp,0x20
c0014273:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001427b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001427f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014285:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014289:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001428d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014295:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001429a:	e9 f9 00 00 00       	jmp    c0014398 <ipaddr_ntoa_r+0x128>
c001429f:	90                   	nop
c00142a0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142a5:	8d 76 00             	lea    esi,[esi+0x0]
c00142a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ac:	8a 00                	mov    al,BYTE PTR [eax]
c00142ae:	0f b6 c8             	movzx  ecx,al
c00142b1:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00142b6:	89 c8                	mov    eax,ecx
c00142b8:	f7 e2                	mul    edx
c00142ba:	c1 ea 03             	shr    edx,0x3
c00142bd:	89 d0                	mov    eax,edx
c00142bf:	c1 e0 02             	shl    eax,0x2
c00142c2:	01 d0                	add    eax,edx
c00142c4:	d1 e0                	shl    eax,1
c00142c6:	29 c1                	sub    ecx,eax
c00142c8:	89 c8                	mov    eax,ecx
c00142ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00142ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d2:	8a 00                	mov    al,BYTE PTR [eax]
c00142d4:	0f b6 c0             	movzx  eax,al
c00142d7:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00142dc:	f7 e2                	mul    edx
c00142de:	89 d0                	mov    eax,edx
c00142e0:	c1 e8 03             	shr    eax,0x3
c00142e3:	88 c2                	mov    dl,al
c00142e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e9:	88 10                	mov    BYTE PTR [eax],dl
c00142eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00142ef:	83 c0 30             	add    eax,0x30
c00142f2:	88 c1                	mov    cl,al
c00142f4:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00142f8:	8d 50 01             	lea    edx,[eax+0x1]
c00142fb:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00142ff:	0f b6 c0             	movzx  eax,al
c0014302:	88 ca                	mov    dl,cl
c0014304:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430c:	8a 00                	mov    al,BYTE PTR [eax]
c001430e:	0f b6 c0             	movzx  eax,al
c0014311:	85 c0                	test   eax,eax
c0014313:	75 93                	jne    c00142a8 <ipaddr_ntoa_r+0x38>
c0014315:	eb 35                	jmp    c001434c <ipaddr_ntoa_r+0xdc>
c0014317:	90                   	nop
c0014318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001431c:	8d 50 01             	lea    edx,[eax+0x1]
c001431f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014323:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014327:	7f 0b                	jg     c0014334 <ipaddr_ntoa_r+0xc4>
c0014329:	b8 00 00 00 00       	mov    eax,0x0
c001432e:	e9 85 00 00 00       	jmp    c00143b8 <ipaddr_ntoa_r+0x148>
c0014333:	90                   	nop
c0014334:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001433d:	8d 48 01             	lea    ecx,[eax+0x1]
c0014340:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014344:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014348:	88 10                	mov    BYTE PTR [eax],dl
c001434a:	66 90                	xchg   ax,ax
c001434c:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014350:	8d 50 ff             	lea    edx,[eax-0x1]
c0014353:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014357:	0f b6 c0             	movzx  eax,al
c001435a:	85 c0                	test   eax,eax
c001435c:	75 ba                	jne    c0014318 <ipaddr_ntoa_r+0xa8>
c001435e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014362:	8d 50 01             	lea    edx,[eax+0x1]
c0014365:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014369:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001436d:	7f 09                	jg     c0014378 <ipaddr_ntoa_r+0x108>
c001436f:	b8 00 00 00 00       	mov    eax,0x0
c0014374:	eb 42                	jmp    c00143b8 <ipaddr_ntoa_r+0x148>
c0014376:	66 90                	xchg   ax,ax
c0014378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001437c:	8d 50 01             	lea    edx,[eax+0x1]
c001437f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014383:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c0014386:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001438b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001438f:	83 c0 01             	add    eax,0x1
c0014392:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014396:	66 90                	xchg   ax,ax
c0014398:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001439d:	83 f8 03             	cmp    eax,0x3
c00143a0:	0f 86 fa fe ff ff    	jbe    c00142a0 <ipaddr_ntoa_r+0x30>
c00143a6:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00143b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143b6:	66 90                	xchg   ax,ax
c00143b8:	83 c4 20             	add    esp,0x20
c00143bb:	c3                   	ret    

c00143bc <ipaddr_ntoa>:
c00143bc:	6a 10                	push   0x10
c00143be:	68 a4 a9 03 c0       	push   0xc003a9a4
c00143c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143c7:	e8 a4 fe ff ff       	call   c0014270 <ipaddr_ntoa_r>
c00143cc:	83 c4 0c             	add    esp,0xc
c00143cf:	c3                   	ret    

c00143d0 <ip_reass_dequeue_datagram>:
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00143d8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00143dc:	75 0e                	jne    c00143ec <ip_reass_dequeue_datagram+0x1c>
c00143de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e4:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00143e9:	eb 29                	jmp    c0014414 <ip_reass_dequeue_datagram+0x44>
c00143eb:	90                   	nop
c00143ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00143f1:	75 15                	jne    c0014408 <ip_reass_dequeue_datagram+0x38>
c00143f3:	83 ec 08             	sub    esp,0x8
c00143f6:	68 ec 09 03 c0       	push   0xc00309ec
c00143fb:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014400:	e8 b7 b5 00 00       	call   c001f9bc <CPrintf>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440c:	8b 10                	mov    edx,DWORD PTR [eax]
c001440e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014412:	89 10                	mov    DWORD PTR [eax],edx
c0014414:	83 ec 08             	sub    esp,0x8
c0014417:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001441b:	6a 05                	push   0x5
c001441d:	e8 9e 35 ff ff       	call   c00079c0 <memp_free>
c0014422:	83 c4 10             	add    esp,0x10
c0014425:	90                   	nop
c0014426:	83 c4 0c             	add    esp,0xc
c0014429:	c3                   	ret    
c001442a:	66 90                	xchg   ax,ax

c001442c <ip_reass_free_complete_datagram>:
c001442c:	83 ec 2c             	sub    esp,0x2c
c001442f:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0014436:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001443a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001443e:	75 18                	jne    c0014458 <ip_reass_free_complete_datagram+0x2c>
c0014440:	83 ec 08             	sub    esp,0x8
c0014443:	68 05 0a 03 c0       	push   0xc0030a05
c0014448:	68 e6 f6 02 c0       	push   0xc002f6e6
c001444d:	e8 6a b5 00 00       	call   c001f9bc <CPrintf>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	8d 76 00             	lea    esi,[esi+0x0]
c0014458:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001445d:	74 21                	je     c0014480 <ip_reass_free_complete_datagram+0x54>
c001445f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014463:	8b 00                	mov    eax,DWORD PTR [eax]
c0014465:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014469:	74 15                	je     c0014480 <ip_reass_free_complete_datagram+0x54>
c001446b:	83 ec 08             	sub    esp,0x8
c001446e:	68 11 0a 03 c0       	push   0xc0030a11
c0014473:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014478:	e8 3f b5 00 00       	call   c001f9bc <CPrintf>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014487:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001448a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001448e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014492:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014496:	0f b7 c0             	movzx  eax,ax
c0014499:	85 c0                	test   eax,eax
c001449b:	0f 85 a3 00 00 00    	jne    c0014544 <ip_reass_free_complete_datagram+0x118>
c00144a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00144b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00144b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144bd:	8d 50 08             	lea    edx,[eax+0x8]
c00144c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144c7:	83 ec 04             	sub    esp,0x4
c00144ca:	6a 14                	push   0x14
c00144cc:	52                   	push   edx
c00144cd:	50                   	push   eax
c00144ce:	e8 a7 be fe ff       	call   c000037a <memcpy>
c00144d3:	83 c4 10             	add    esp,0x10
c00144d6:	83 ec 08             	sub    esp,0x8
c00144d9:	6a 01                	push   0x1
c00144db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144df:	e8 3c eb ff ff       	call   c0013020 <icmp_time_exceeded>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	83 ec 0c             	sub    esp,0xc
c00144ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144ee:	e8 69 45 ff ff       	call   c0008a5c <pbuf_clen>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00144fa:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00144ff:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014504:	01 d0                	add    eax,edx
c0014506:	3d ff ff 00 00       	cmp    eax,0xffff
c001450b:	7e 17                	jle    c0014524 <ip_reass_free_complete_datagram+0xf8>
c001450d:	83 ec 08             	sub    esp,0x8
c0014510:	68 23 0a 03 c0       	push   0xc0030a23
c0014515:	68 e6 f6 02 c0       	push   0xc002f6e6
c001451a:	e8 9d b4 00 00       	call   c001f9bc <CPrintf>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	66 90                	xchg   ax,ax
c0014524:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014529:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001452e:	01 d0                	add    eax,edx
c0014530:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014535:	83 ec 0c             	sub    esp,0xc
c0014538:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001453c:	e8 3f 3d ff ff       	call   c0008280 <pbuf_free>
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001454b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001454f:	eb 7b                	jmp    c00145cc <ip_reass_free_complete_datagram+0x1a0>
c0014551:	8d 76 00             	lea    esi,[esi+0x0]
c0014554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001455b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001455f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001456b:	8b 00                	mov    eax,DWORD PTR [eax]
c001456d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014578:	e8 df 44 ff ff       	call   c0008a5c <pbuf_clen>
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014584:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014589:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001458e:	01 d0                	add    eax,edx
c0014590:	3d ff ff 00 00       	cmp    eax,0xffff
c0014595:	7e 15                	jle    c00145ac <ip_reass_free_complete_datagram+0x180>
c0014597:	83 ec 08             	sub    esp,0x8
c001459a:	68 23 0a 03 c0       	push   0xc0030a23
c001459f:	68 e6 f6 02 c0       	push   0xc002f6e6
c00145a4:	e8 13 b4 00 00       	call   c001f9bc <CPrintf>
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145b1:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00145b6:	01 d0                	add    eax,edx
c00145b8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c4:	e8 b7 3c ff ff       	call   c0008280 <pbuf_free>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00145d1:	75 81                	jne    c0014554 <ip_reass_free_complete_datagram+0x128>
c00145d3:	83 ec 08             	sub    esp,0x8
c00145d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00145da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00145de:	e8 ed fd ff ff       	call   c00143d0 <ip_reass_dequeue_datagram>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00145ec:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145f1:	0f b7 c0             	movzx  eax,ax
c00145f4:	39 c2                	cmp    edx,eax
c00145f6:	76 18                	jbe    c0014610 <ip_reass_free_complete_datagram+0x1e4>
c00145f8:	83 ec 08             	sub    esp,0x8
c00145fb:	68 40 0a 03 c0       	push   0xc0030a40
c0014600:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014605:	e8 b2 b3 00 00       	call   c001f9bc <CPrintf>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	8d 76 00             	lea    esi,[esi+0x0]
c0014610:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014617:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001461c:	89 d1                	mov    ecx,edx
c001461e:	29 c1                	sub    ecx,eax
c0014620:	89 c8                	mov    eax,ecx
c0014622:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014628:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001462d:	83 c4 2c             	add    esp,0x2c
c0014630:	c3                   	ret    
c0014631:	8d 76 00             	lea    esi,[esi+0x0]

c0014634 <ip_reass_tmr>:
c0014634:	83 ec 1c             	sub    esp,0x1c
c0014637:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001463f:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014648:	eb 62                	jmp    c00146ac <ip_reass_tmr+0x78>
c001464a:	66 90                	xchg   ax,ax
c001464c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014650:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014653:	0f b6 c0             	movzx  eax,al
c0014656:	85 c0                	test   eax,eax
c0014658:	74 2a                	je     c0014684 <ip_reass_tmr+0x50>
c001465a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001465e:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014661:	83 e8 01             	sub    eax,0x1
c0014664:	88 c2                	mov    dl,al
c0014666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001466a:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c001466d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014679:	8b 00                	mov    eax,DWORD PTR [eax]
c001467b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001467f:	eb 2b                	jmp    c00146ac <ip_reass_tmr+0x78>
c0014681:	8d 76 00             	lea    esi,[esi+0x0]
c0014684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001468c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014690:	8b 00                	mov    eax,DWORD PTR [eax]
c0014692:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014696:	83 ec 08             	sub    esp,0x8
c0014699:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001469d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146a1:	e8 86 fd ff ff       	call   c001442c <ip_reass_free_complete_datagram>
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	8d 76 00             	lea    esi,[esi+0x0]
c00146ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146b1:	75 99                	jne    c001464c <ip_reass_tmr+0x18>
c00146b3:	90                   	nop
c00146b4:	83 c4 1c             	add    esp,0x1c
c00146b7:	c3                   	ret    

c00146b8 <ip_reass_remove_oldest_datagram>:
c00146b8:	83 ec 2c             	sub    esp,0x2c
c00146bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146c3:	90                   	nop
c00146c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146dc:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00146e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146e5:	e9 9a 00 00 00       	jmp    c0014784 <ip_reass_remove_oldest_datagram+0xcc>
c00146ea:	66 90                	xchg   ax,ax
c00146ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146f0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00146f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00146fa:	39 c2                	cmp    edx,eax
c00146fc:	75 2e                	jne    c001472c <ip_reass_remove_oldest_datagram+0x74>
c00146fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014702:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014709:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001470c:	39 c2                	cmp    edx,eax
c001470e:	75 1c                	jne    c001472c <ip_reass_remove_oldest_datagram+0x74>
c0014710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014714:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001471b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001471f:	0f b7 d2             	movzx  edx,dx
c0014722:	0f b7 c0             	movzx  eax,ax
c0014725:	39 c2                	cmp    edx,eax
c0014727:	74 3b                	je     c0014764 <ip_reass_remove_oldest_datagram+0xac>
c0014729:	8d 76 00             	lea    esi,[esi+0x0]
c001472c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0014731:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014736:	75 0c                	jne    c0014744 <ip_reass_remove_oldest_datagram+0x8c>
c0014738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001473c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014740:	eb 22                	jmp    c0014764 <ip_reass_remove_oldest_datagram+0xac>
c0014742:	66 90                	xchg   ax,ax
c0014744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014748:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001474b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001474f:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014752:	0f b6 d2             	movzx  edx,dl
c0014755:	0f b6 c0             	movzx  eax,al
c0014758:	39 c2                	cmp    edx,eax
c001475a:	77 08                	ja     c0014764 <ip_reass_remove_oldest_datagram+0xac>
c001475c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014760:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014768:	8b 00                	mov    eax,DWORD PTR [eax]
c001476a:	85 c0                	test   eax,eax
c001476c:	74 0a                	je     c0014778 <ip_reass_remove_oldest_datagram+0xc0>
c001476e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014772:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014776:	66 90                	xchg   ax,ax
c0014778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001477c:	8b 00                	mov    eax,DWORD PTR [eax]
c001477e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014782:	66 90                	xchg   ax,ax
c0014784:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014789:	0f 85 5d ff ff ff    	jne    c00146ec <ip_reass_remove_oldest_datagram+0x34>
c001478f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014794:	74 22                	je     c00147b8 <ip_reass_remove_oldest_datagram+0x100>
c0014796:	83 ec 08             	sub    esp,0x8
c0014799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147a1:	e8 86 fc ff ff       	call   c001442c <ip_reass_free_complete_datagram>
c00147a6:	83 c4 10             	add    esp,0x10
c00147a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147b1:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00147b5:	8d 76 00             	lea    esi,[esi+0x0]
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00147c0:	7d 0e                	jge    c00147d0 <ip_reass_remove_oldest_datagram+0x118>
c00147c2:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00147c7:	0f 8f f7 fe ff ff    	jg     c00146c4 <ip_reass_remove_oldest_datagram+0xc>
c00147cd:	8d 76 00             	lea    esi,[esi+0x0]
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	83 c4 2c             	add    esp,0x2c
c00147d7:	c3                   	ret    

c00147d8 <ip_reass_enqueue_new_datagram>:
c00147d8:	83 ec 1c             	sub    esp,0x1c
c00147db:	83 ec 0c             	sub    esp,0xc
c00147de:	6a 05                	push   0x5
c00147e0:	e8 af 30 ff ff       	call   c0007894 <memp_malloc>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147f1:	75 4d                	jne    c0014840 <ip_reass_enqueue_new_datagram+0x68>
c00147f3:	83 ec 08             	sub    esp,0x8
c00147f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147fe:	e8 b5 fe ff ff       	call   c00146b8 <ip_reass_remove_oldest_datagram>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c001480a:	7f 14                	jg     c0014820 <ip_reass_enqueue_new_datagram+0x48>
c001480c:	83 ec 0c             	sub    esp,0xc
c001480f:	6a 05                	push   0x5
c0014811:	e8 7e 30 ff ff       	call   c0007894 <memp_malloc>
c0014816:	83 c4 10             	add    esp,0x10
c0014819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001481d:	8d 76 00             	lea    esi,[esi+0x0]
c0014820:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014825:	75 19                	jne    c0014840 <ip_reass_enqueue_new_datagram+0x68>
c0014827:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c001482d:	83 c0 01             	add    eax,0x1
c0014830:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014836:	b8 00 00 00 00       	mov    eax,0x0
c001483b:	eb 53                	jmp    c0014890 <ip_reass_enqueue_new_datagram+0xb8>
c001483d:	8d 76 00             	lea    esi,[esi+0x0]
c0014840:	83 ec 04             	sub    esp,0x4
c0014843:	6a 20                	push   0x20
c0014845:	6a 00                	push   0x0
c0014847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001484b:	e8 a0 bc fe ff       	call   c00004f0 <memset>
c0014850:	83 c4 10             	add    esp,0x10
c0014853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014857:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c001485b:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014865:	89 10                	mov    DWORD PTR [eax],edx
c0014867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001486b:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014874:	83 c0 08             	add    eax,0x8
c0014877:	83 ec 04             	sub    esp,0x4
c001487a:	6a 14                	push   0x14
c001487c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014880:	50                   	push   eax
c0014881:	e8 f4 ba fe ff       	call   c000037a <memcpy>
c0014886:	83 c4 10             	add    esp,0x10
c0014889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001488d:	8d 76 00             	lea    esi,[esi+0x0]
c0014890:	83 c4 1c             	add    esp,0x1c
c0014893:	c3                   	ret    

c0014894 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014894:	53                   	push   ebx
c0014895:	83 ec 28             	sub    esp,0x28
c0014898:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148a0:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b7:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00148bb:	0f b7 c0             	movzx  eax,ax
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	50                   	push   eax
c00148c2:	e8 55 c3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00148c7:	83 c4 10             	add    esp,0x10
c00148ca:	89 c3                	mov    ebx,eax
c00148cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00148d3:	0f b7 c0             	movzx  eax,ax
c00148d6:	83 ec 0c             	sub    esp,0xc
c00148d9:	50                   	push   eax
c00148da:	e8 3d c3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	0f b7 c0             	movzx  eax,ax
c00148e5:	c1 e8 08             	shr    eax,0x8
c00148e8:	83 e0 0f             	and    eax,0xf
c00148eb:	c1 e0 02             	shl    eax,0x2
c00148ee:	89 d9                	mov    ecx,ebx
c00148f0:	29 c1                	sub    ecx,eax
c00148f2:	89 c8                	mov    eax,ecx
c00148f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00148f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fd:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014901:	0f b7 c0             	movzx  eax,ax
c0014904:	83 ec 0c             	sub    esp,0xc
c0014907:	50                   	push   eax
c0014908:	e8 0f c3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	25 ff 1f 00 00       	and    eax,0x1fff
c0014915:	c1 e0 03             	shl    eax,0x3
c0014918:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001491d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014921:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014924:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001493a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001493e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014942:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014947:	01 d0                	add    eax,edx
c0014949:	89 c2                	mov    edx,eax
c001494b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001494f:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001495a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001495e:	e9 11 01 00 00       	jmp    c0014a74 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014963:	90                   	nop
c0014964:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001496b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001496f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014973:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001497b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001497f:	0f b7 d2             	movzx  edx,dx
c0014982:	0f b7 c0             	movzx  eax,ax
c0014985:	39 c2                	cmp    edx,eax
c0014987:	73 6f                	jae    c00149f8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001498d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014991:	89 10                	mov    DWORD PTR [eax],edx
c0014993:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014998:	74 4e                	je     c00149e8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c001499a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001499e:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149a6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149aa:	0f b7 d2             	movzx  edx,dx
c00149ad:	0f b7 c0             	movzx  eax,ax
c00149b0:	39 c2                	cmp    edx,eax
c00149b2:	0f 82 bc 02 00 00    	jb     c0014c74 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00149b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149bc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149c4:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149c8:	0f b7 d2             	movzx  edx,dx
c00149cb:	0f b7 c0             	movzx  eax,ax
c00149ce:	39 c2                	cmp    edx,eax
c00149d0:	0f 87 9e 02 00 00    	ja     c0014c74 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00149d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149de:	89 10                	mov    DWORD PTR [eax],edx
c00149e0:	e9 9b 00 00 00       	jmp    c0014a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c00149e5:	8d 76 00             	lea    esi,[esi+0x0]
c00149e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00149f3:	e9 88 00 00 00       	jmp    c0014a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c00149f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fc:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a04:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a08:	0f b7 d2             	movzx  edx,dx
c0014a0b:	0f b7 c0             	movzx  eax,ax
c0014a0e:	39 c2                	cmp    edx,eax
c0014a10:	0f 84 62 02 00 00    	je     c0014c78 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a1a:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a22:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a26:	0f b7 d2             	movzx  edx,dx
c0014a29:	0f b7 c0             	movzx  eax,ax
c0014a2c:	39 c2                	cmp    edx,eax
c0014a2e:	0f 82 48 02 00 00    	jb     c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a34:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a39:	74 25                	je     c0014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a3f:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a47:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a4b:	0f b7 d2             	movzx  edx,dx
c0014a4e:	0f b7 c0             	movzx  eax,ax
c0014a51:	39 c2                	cmp    edx,eax
c0014a53:	74 0b                	je     c0014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0014a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a72:	66 90                	xchg   ax,ax
c0014a74:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014a79:	0f 85 e5 fe ff ff    	jne    c0014964 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014a7f:	90                   	nop
c0014a80:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014a85:	0f 85 95 00 00 00    	jne    c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a8b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a90:	74 62                	je     c0014af4 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014a92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014aa2:	0f b7 d2             	movzx  edx,dx
c0014aa5:	0f b7 c0             	movzx  eax,ax
c0014aa8:	39 c2                	cmp    edx,eax
c0014aaa:	76 18                	jbe    c0014ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014aac:	83 ec 08             	sub    esp,0x8
c0014aaf:	68 5b 0a 03 c0       	push   0xc0030a5b
c0014ab4:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014ab9:	e8 fe ae 00 00       	call   c001f9bc <CPrintf>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ac8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014acc:	89 10                	mov    DWORD PTR [eax],edx
c0014ace:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ad2:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ad6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ada:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ade:	0f b7 d2             	movzx  edx,dx
c0014ae1:	0f b7 c0             	movzx  eax,ax
c0014ae4:	39 c2                	cmp    edx,eax
c0014ae6:	74 38                	je     c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014ae8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014af0:	eb 2e                	jmp    c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014af2:	66 90                	xchg   ax,ax
c0014af4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014afb:	85 c0                	test   eax,eax
c0014afd:	74 15                	je     c0014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014aff:	83 ec 08             	sub    esp,0x8
c0014b02:	68 9c 0a 03 c0       	push   0xc0030a9c
c0014b07:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014b0c:	e8 ab ae 00 00       	call   c001f9bc <CPrintf>
c0014b11:	83 c4 10             	add    esp,0x10
c0014b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b1f:	90                   	nop
c0014b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b24:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b27:	0f b6 c0             	movzx  eax,al
c0014b2a:	83 e0 01             	and    eax,0x1
c0014b2d:	0f 84 39 01 00 00    	je     c0014c6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b33:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b38:	0f 84 26 01 00 00    	je     c0014c64 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b48:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b4c:	0f b7 c0             	movzx  eax,ax
c0014b4f:	85 c0                	test   eax,eax
c0014b51:	74 0d                	je     c0014b60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014b53:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b5b:	e9 04 01 00 00       	jmp    c0014c64 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b72:	eb 44                	jmp    c0014bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014b74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b83:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b8b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8f:	0f b7 d2             	movzx  edx,dx
c0014b92:	0f b7 c0             	movzx  eax,ax
c0014b95:	39 c2                	cmp    edx,eax
c0014b97:	74 0b                	je     c0014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014b99:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ba1:	eb 1d                	jmp    c0014bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014ba3:	90                   	nop
c0014ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bb6:	66 90                	xchg   ax,ax
c0014bb8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014bbd:	75 b5                	jne    c0014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014bbf:	90                   	nop
c0014bc0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014bc5:	0f 84 99 00 00 00    	je     c0014c64 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bd2:	85 c0                	test   eax,eax
c0014bd4:	75 16                	jne    c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014bd6:	83 ec 08             	sub    esp,0x8
c0014bd9:	68 79 0a 03 c0       	push   0xc0030a79
c0014bde:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014be3:	e8 d4 ad 00 00       	call   c001f9bc <CPrintf>
c0014be8:	83 c4 10             	add    esp,0x10
c0014beb:	90                   	nop
c0014bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bf6:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014bfa:	75 18                	jne    c0014c14 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014bfc:	83 ec 08             	sub    esp,0x8
c0014bff:	68 79 0a 03 c0       	push   0xc0030a79
c0014c04:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014c09:	e8 ae ad 00 00       	call   c001f9bc <CPrintf>
c0014c0e:	83 c4 10             	add    esp,0x10
c0014c11:	8d 76 00             	lea    esi,[esi+0x0]
c0014c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c1a:	85 c0                	test   eax,eax
c0014c1c:	74 16                	je     c0014c34 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c1e:	83 ec 08             	sub    esp,0x8
c0014c21:	68 d4 0a 03 c0       	push   0xc0030ad4
c0014c26:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014c2b:	e8 8c ad 00 00       	call   c001f9bc <CPrintf>
c0014c30:	83 c4 10             	add    esp,0x10
c0014c33:	90                   	nop
c0014c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c38:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c40:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c43:	0f b7 d2             	movzx  edx,dx
c0014c46:	0f b7 c0             	movzx  eax,ax
c0014c49:	39 c2                	cmp    edx,eax
c0014c4b:	74 17                	je     c0014c64 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c4d:	83 ec 08             	sub    esp,0x8
c0014c50:	68 f8 0a 03 c0       	push   0xc0030af8
c0014c55:	68 e6 f6 02 c0       	push   0xc002f6e6
c0014c5a:	e8 5d ad 00 00       	call   c001f9bc <CPrintf>
c0014c5f:	83 c4 10             	add    esp,0x10
c0014c62:	66 90                	xchg   ax,ax
c0014c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c68:	eb 52                	jmp    c0014cbc <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c6a:	66 90                	xchg   ax,ax
c0014c6c:	b8 00 00 00 00       	mov    eax,0x0
c0014c71:	eb 49                	jmp    c0014cbc <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c73:	90                   	nop
c0014c74:	90                   	nop
c0014c75:	eb 09                	jmp    c0014c80 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014c77:	90                   	nop
c0014c78:	90                   	nop
c0014c79:	eb 05                	jmp    c0014c80 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014c7b:	90                   	nop
c0014c7c:	90                   	nop
c0014c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c80:	83 ec 0c             	sub    esp,0xc
c0014c83:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c87:	e8 d0 3d ff ff       	call   c0008a5c <pbuf_clen>
c0014c8c:	83 c4 10             	add    esp,0x10
c0014c8f:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014c96:	0f b6 c0             	movzx  eax,al
c0014c99:	89 d3                	mov    ebx,edx
c0014c9b:	29 c3                	sub    ebx,eax
c0014c9d:	89 d8                	mov    eax,ebx
c0014c9f:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014ca5:	83 ec 0c             	sub    esp,0xc
c0014ca8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cac:	e8 cf 35 ff ff       	call   c0008280 <pbuf_free>
c0014cb1:	83 c4 10             	add    esp,0x10
c0014cb4:	b8 00 00 00 00       	mov    eax,0x0
c0014cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cbc:	83 c4 28             	add    esp,0x28
c0014cbf:	5b                   	pop    ebx
c0014cc0:	c3                   	ret    
c0014cc1:	8d 76 00             	lea    esi,[esi+0x0]

c0014cc4 <ip_reass>:
c0014cc4:	53                   	push   ebx
c0014cc5:	83 ec 28             	sub    esp,0x28
c0014cc8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cd0:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014cd6:	83 c0 01             	add    eax,0x1
c0014cd9:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ce6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cee:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014cf1:	0f b7 c0             	movzx  eax,ax
c0014cf4:	83 ec 0c             	sub    esp,0xc
c0014cf7:	50                   	push   eax
c0014cf8:	e8 1f bf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	0f b7 c0             	movzx  eax,ax
c0014d03:	c1 e8 08             	shr    eax,0x8
c0014d06:	0f b7 c0             	movzx  eax,ax
c0014d09:	83 e0 0f             	and    eax,0xf
c0014d0c:	c1 e0 02             	shl    eax,0x2
c0014d0f:	83 f8 14             	cmp    eax,0x14
c0014d12:	74 14                	je     c0014d28 <ip_reass+0x64>
c0014d14:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d1a:	83 c0 01             	add    eax,0x1
c0014d1d:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d23:	e9 70 03 00 00       	jmp    c0015098 <ip_reass+0x3d4>
c0014d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d2c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d30:	0f b7 c0             	movzx  eax,ax
c0014d33:	83 ec 0c             	sub    esp,0xc
c0014d36:	50                   	push   eax
c0014d37:	e8 e0 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d44:	c1 e0 03             	shl    eax,0x3
c0014d47:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d50:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014d54:	0f b7 c0             	movzx  eax,ax
c0014d57:	83 ec 0c             	sub    esp,0xc
c0014d5a:	50                   	push   eax
c0014d5b:	e8 bc be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	89 c3                	mov    ebx,eax
c0014d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d69:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d6c:	0f b7 c0             	movzx  eax,ax
c0014d6f:	83 ec 0c             	sub    esp,0xc
c0014d72:	50                   	push   eax
c0014d73:	e8 a4 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d78:	83 c4 10             	add    esp,0x10
c0014d7b:	0f b7 c0             	movzx  eax,ax
c0014d7e:	c1 e8 08             	shr    eax,0x8
c0014d81:	83 e0 0f             	and    eax,0xf
c0014d84:	c1 e0 02             	shl    eax,0x2
c0014d87:	89 d9                	mov    ecx,ebx
c0014d89:	29 c1                	sub    ecx,eax
c0014d8b:	89 c8                	mov    eax,ecx
c0014d8d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014d92:	83 ec 0c             	sub    esp,0xc
c0014d95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d99:	e8 be 3c ff ff       	call   c0008a5c <pbuf_clen>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014da5:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dab:	0f b7 d0             	movzx  edx,ax
c0014dae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014db3:	01 d0                	add    eax,edx
c0014db5:	83 f8 0a             	cmp    eax,0xa
c0014db8:	7e 42                	jle    c0014dfc <ip_reass+0x138>
c0014dba:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014dbf:	83 ec 08             	sub    esp,0x8
c0014dc2:	50                   	push   eax
c0014dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc7:	e8 ec f8 ff ff       	call   c00146b8 <ip_reass_remove_oldest_datagram>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	85 c0                	test   eax,eax
c0014dd1:	74 15                	je     c0014de8 <ip_reass+0x124>
c0014dd3:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dd9:	0f b7 d0             	movzx  edx,ax
c0014ddc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014de1:	01 d0                	add    eax,edx
c0014de3:	83 f8 0a             	cmp    eax,0xa
c0014de6:	7e 14                	jle    c0014dfc <ip_reass+0x138>
c0014de8:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014dee:	83 c0 01             	add    eax,0x1
c0014df1:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014df7:	e9 9c 02 00 00       	jmp    c0015098 <ip_reass+0x3d4>
c0014dfc:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e05:	eb 65                	jmp    c0014e6c <ip_reass+0x1a8>
c0014e07:	90                   	nop
c0014e08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e0c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e16:	39 c2                	cmp    edx,eax
c0014e18:	75 3e                	jne    c0014e58 <ip_reass+0x194>
c0014e1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e28:	39 c2                	cmp    edx,eax
c0014e2a:	75 2c                	jne    c0014e58 <ip_reass+0x194>
c0014e2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e30:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e37:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e3b:	0f b7 d2             	movzx  edx,dx
c0014e3e:	0f b7 c0             	movzx  eax,ax
c0014e41:	39 c2                	cmp    edx,eax
c0014e43:	75 13                	jne    c0014e58 <ip_reass+0x194>
c0014e45:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e4b:	83 c0 01             	add    eax,0x1
c0014e4e:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014e54:	eb 1e                	jmp    c0014e74 <ip_reass+0x1b0>
c0014e56:	66 90                	xchg   ax,ax
c0014e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e64:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e6a:	66 90                	xchg   ax,ax
c0014e6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e71:	75 95                	jne    c0014e08 <ip_reass+0x144>
c0014e73:	90                   	nop
c0014e74:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e79:	75 25                	jne    c0014ea0 <ip_reass+0x1dc>
c0014e7b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e80:	83 ec 08             	sub    esp,0x8
c0014e83:	50                   	push   eax
c0014e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e88:	e8 4b f9 ff ff       	call   c00147d8 <ip_reass_enqueue_new_datagram>
c0014e8d:	83 c4 10             	add    esp,0x10
c0014e90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e94:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e99:	75 61                	jne    c0014efc <ip_reass+0x238>
c0014e9b:	e9 f8 01 00 00       	jmp    c0015098 <ip_reass+0x3d4>
c0014ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ea4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ea8:	0f b7 c0             	movzx  eax,ax
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	50                   	push   eax
c0014eaf:	e8 68 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	0f b7 c0             	movzx  eax,ax
c0014eba:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ebf:	75 3b                	jne    c0014efc <ip_reass+0x238>
c0014ec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ec5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014ec9:	0f b7 c0             	movzx  eax,ax
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	50                   	push   eax
c0014ed0:	e8 47 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ed5:	83 c4 10             	add    esp,0x10
c0014ed8:	0f b7 c0             	movzx  eax,ax
c0014edb:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ee0:	74 1a                	je     c0014efc <ip_reass+0x238>
c0014ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ee6:	83 c0 08             	add    eax,0x8
c0014ee9:	83 ec 04             	sub    esp,0x4
c0014eec:	6a 14                	push   0x14
c0014eee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ef2:	50                   	push   eax
c0014ef3:	e8 82 b4 fe ff       	call   c000037a <memcpy>
c0014ef8:	83 c4 10             	add    esp,0x10
c0014efb:	90                   	nop
c0014efc:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f01:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f07:	01 d0                	add    eax,edx
c0014f09:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f13:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f17:	0f b7 c0             	movzx  eax,ax
c0014f1a:	83 e0 20             	and    eax,0x20
c0014f1d:	75 29                	jne    c0014f48 <ip_reass+0x284>
c0014f1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f23:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f26:	83 c8 01             	or     eax,0x1
c0014f29:	88 c2                	mov    dl,al
c0014f2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f2f:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f32:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f3b:	01 d0                	add    eax,edx
c0014f3d:	89 c2                	mov    edx,eax
c0014f3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f43:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014f47:	90                   	nop
c0014f48:	83 ec 08             	sub    esp,0x8
c0014f4b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014f4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f53:	e8 3c f9 ff ff       	call   c0014894 <ip_reass_chain_frag_into_datagram_and_validate>
c0014f58:	83 c4 10             	add    esp,0x10
c0014f5b:	85 c0                	test   eax,eax
c0014f5d:	0f 84 2d 01 00 00    	je     c0015090 <ip_reass+0x3cc>
c0014f63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f67:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f6a:	83 c0 14             	add    eax,0x14
c0014f6d:	89 c2                	mov    edx,eax
c0014f6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f73:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014f77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f99:	83 c0 08             	add    eax,0x8
c0014f9c:	83 ec 04             	sub    esp,0x4
c0014f9f:	6a 14                	push   0x14
c0014fa1:	50                   	push   eax
c0014fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fa6:	e8 cf b3 fe ff       	call   c000037a <memcpy>
c0014fab:	83 c4 10             	add    esp,0x10
c0014fae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fb5:	0f b7 c0             	movzx  eax,ax
c0014fb8:	83 ec 0c             	sub    esp,0xc
c0014fbb:	50                   	push   eax
c0014fbc:	e8 5b bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	89 c2                	mov    edx,eax
c0014fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd2:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0014fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fdc:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0014fe2:	83 ec 08             	sub    esp,0x8
c0014fe5:	6a 14                	push   0x14
c0014fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014feb:	e8 cc e4 ff ff       	call   c00134bc <inet_chksum>
c0014ff0:	83 c4 10             	add    esp,0x10
c0014ff3:	89 c2                	mov    edx,eax
c0014ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ff9:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0014ffd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015001:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015004:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015008:	eb 3e                	jmp    c0015048 <ip_reass+0x384>
c001500a:	66 90                	xchg   ax,ax
c001500c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015017:	83 ec 08             	sub    esp,0x8
c001501a:	6a ec                	push   0xffffffec
c001501c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015020:	e8 bb 30 ff ff       	call   c00080e0 <pbuf_header>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	83 ec 08             	sub    esp,0x8
c001502b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001502f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015033:	e8 8c 3a ff ff       	call   c0008ac4 <pbuf_cat>
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001503f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015041:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015045:	8d 76 00             	lea    esi,[esi+0x0]
c0015048:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001504d:	75 bd                	jne    c001500c <ip_reass+0x348>
c001504f:	83 ec 08             	sub    esp,0x8
c0015052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001505a:	e8 71 f3 ff ff       	call   c00143d0 <ip_reass_dequeue_datagram>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	83 ec 0c             	sub    esp,0xc
c0015065:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015069:	e8 ee 39 ff ff       	call   c0008a5c <pbuf_clen>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015078:	0f b6 c0             	movzx  eax,al
c001507b:	89 d3                	mov    ebx,edx
c001507d:	29 c3                	sub    ebx,eax
c001507f:	89 d8                	mov    eax,ebx
c0015081:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001508b:	eb 2f                	jmp    c00150bc <ip_reass+0x3f8>
c001508d:	8d 76 00             	lea    esi,[esi+0x0]
c0015090:	b8 00 00 00 00       	mov    eax,0x0
c0015095:	eb 25                	jmp    c00150bc <ip_reass+0x3f8>
c0015097:	90                   	nop
c0015098:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c001509e:	83 c0 01             	add    eax,0x1
c00150a1:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150a7:	83 ec 0c             	sub    esp,0xc
c00150aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150ae:	e8 cd 31 ff ff       	call   c0008280 <pbuf_free>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	b8 00 00 00 00       	mov    eax,0x0
c00150bb:	90                   	nop
c00150bc:	83 c4 28             	add    esp,0x28
c00150bf:	5b                   	pop    ebx
c00150c0:	c3                   	ret    
c00150c1:	8d 76 00             	lea    esi,[esi+0x0]

c00150c4 <ip_frag_alloc_pbuf_custom_ref>:
c00150c4:	83 ec 0c             	sub    esp,0xc
c00150c7:	83 ec 0c             	sub    esp,0xc
c00150ca:	6a 06                	push   0x6
c00150cc:	e8 c3 27 ff ff       	call   c0007894 <memp_malloc>
c00150d1:	83 c4 10             	add    esp,0x10
c00150d4:	83 c4 0c             	add    esp,0xc
c00150d7:	c3                   	ret    

c00150d8 <ip_frag_free_pbuf_custom_ref>:
c00150d8:	83 ec 0c             	sub    esp,0xc
c00150db:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00150e0:	75 16                	jne    c00150f8 <ip_frag_free_pbuf_custom_ref+0x20>
c00150e2:	83 ec 08             	sub    esp,0x8
c00150e5:	68 16 fb 02 c0       	push   0xc002fb16
c00150ea:	68 e6 f6 02 c0       	push   0xc002f6e6
c00150ef:	e8 c8 a8 00 00       	call   c001f9bc <CPrintf>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	90                   	nop
c00150f8:	83 ec 08             	sub    esp,0x8
c00150fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150ff:	6a 06                	push   0x6
c0015101:	e8 ba 28 ff ff       	call   c00079c0 <memp_free>
c0015106:	83 c4 10             	add    esp,0x10
c0015109:	90                   	nop
c001510a:	83 c4 0c             	add    esp,0xc
c001510d:	c3                   	ret    
c001510e:	66 90                	xchg   ax,ax

c0015110 <ipfrag_free_pbuf_custom>:
c0015110:	83 ec 1c             	sub    esp,0x1c
c0015113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001511b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015120:	75 16                	jne    c0015138 <ipfrag_free_pbuf_custom+0x28>
c0015122:	83 ec 08             	sub    esp,0x8
c0015125:	68 86 0a 03 c0       	push   0xc0030a86
c001512a:	68 e6 f6 02 c0       	push   0xc002f6e6
c001512f:	e8 88 a8 00 00       	call   c001f9bc <CPrintf>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	90                   	nop
c0015138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001513c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015140:	74 16                	je     c0015158 <ipfrag_free_pbuf_custom+0x48>
c0015142:	83 ec 08             	sub    esp,0x8
c0015145:	68 92 0a 03 c0       	push   0xc0030a92
c001514a:	68 e6 f6 02 c0       	push   0xc002f6e6
c001514f:	e8 68 a8 00 00       	call   c001f9bc <CPrintf>
c0015154:	83 c4 10             	add    esp,0x10
c0015157:	90                   	nop
c0015158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001515c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001515f:	85 c0                	test   eax,eax
c0015161:	74 15                	je     c0015178 <ipfrag_free_pbuf_custom+0x68>
c0015163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015167:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001516a:	83 ec 0c             	sub    esp,0xc
c001516d:	50                   	push   eax
c001516e:	e8 0d 31 ff ff       	call   c0008280 <pbuf_free>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	66 90                	xchg   ax,ax
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001517f:	e8 54 ff ff ff       	call   c00150d8 <ip_frag_free_pbuf_custom_ref>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	90                   	nop
c0015188:	83 c4 1c             	add    esp,0x1c
c001518b:	c3                   	ret    

c001518c <ip_frag>:
c001518c:	53                   	push   ebx
c001518d:	83 ec 38             	sub    esp,0x38
c0015190:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015194:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015197:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c001519c:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151a3:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151c5:	0f b7 c0             	movzx  eax,ax
c00151c8:	83 ec 0c             	sub    esp,0xc
c00151cb:	50                   	push   eax
c00151cc:	e8 4b ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00151d1:	83 c4 10             	add    esp,0x10
c00151d4:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151dd:	25 ff 1f 00 00       	and    eax,0x1fff
c00151e2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00151e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151eb:	25 00 20 00 00       	and    eax,0x2000
c00151f0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00151f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00151fc:	83 e8 14             	sub    eax,0x14
c00151ff:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015204:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015209:	83 e8 14             	sub    eax,0x14
c001520c:	8d 50 07             	lea    edx,[eax+0x7]
c001520f:	0f 48 c2             	cmovs  eax,edx
c0015212:	c1 f8 03             	sar    eax,0x3
c0015215:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001521a:	e9 05 03 00 00       	jmp    c0015524 <ip_frag+0x398>
c001521f:	90                   	nop
c0015220:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015225:	8d 50 ed             	lea    edx,[eax-0x13]
c0015228:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001522d:	39 c2                	cmp    edx,eax
c001522f:	0f 9f c0             	setg   al
c0015232:	0f b6 c0             	movzx  eax,al
c0015235:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001523a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001523e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015243:	89 c2                	mov    edx,eax
c0015245:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001524a:	09 d0                	or     eax,edx
c001524c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015251:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015256:	85 c0                	test   eax,eax
c0015258:	75 0e                	jne    c0015268 <ip_frag+0xdc>
c001525a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001525e:	80 cc 20             	or     ah,0x20
c0015261:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015266:	66 90                	xchg   ax,ax
c0015268:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001526d:	85 c0                	test   eax,eax
c001526f:	75 0b                	jne    c001527c <ip_frag+0xf0>
c0015271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015275:	c1 e0 03             	shl    eax,0x3
c0015278:	eb 0a                	jmp    c0015284 <ip_frag+0xf8>
c001527a:	66 90                	xchg   ax,ax
c001527c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015281:	8d 76 00             	lea    esi,[esi+0x0]
c0015284:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015289:	83 ec 04             	sub    esp,0x4
c001528c:	6a 00                	push   0x0
c001528e:	6a 14                	push   0x14
c0015290:	6a 02                	push   0x2
c0015292:	e8 c5 31 ff ff       	call   c000845c <pbuf_alloc>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001529e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152a3:	75 07                	jne    c00152ac <ip_frag+0x120>
c00152a5:	b0 ff                	mov    al,0xff
c00152a7:	e9 88 02 00 00       	jmp    c0015534 <ip_frag+0x3a8>
c00152ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00152b4:	0f b7 c0             	movzx  eax,ax
c00152b7:	83 f8 13             	cmp    eax,0x13
c00152ba:	77 18                	ja     c00152d4 <ip_frag+0x148>
c00152bc:	83 ec 08             	sub    esp,0x8
c00152bf:	68 28 0b 03 c0       	push   0xc0030b28
c00152c4:	68 e6 f6 02 c0       	push   0xc002f6e6
c00152c9:	e8 ee a6 00 00       	call   c001f9bc <CPrintf>
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	8d 76 00             	lea    esi,[esi+0x0]
c00152d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152db:	83 ec 04             	sub    esp,0x4
c00152de:	6a 14                	push   0x14
c00152e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152e4:	50                   	push   eax
c00152e5:	e8 90 b0 fe ff       	call   c000037a <memcpy>
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152ff:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015304:	01 c2                	add    edx,eax
c0015306:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001530a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001530d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015311:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015315:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001531a:	89 d1                	mov    ecx,edx
c001531c:	29 c1                	sub    ecx,eax
c001531e:	89 c8                	mov    eax,ecx
c0015320:	89 c2                	mov    edx,eax
c0015322:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015326:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001532a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001532e:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015333:	e9 18 01 00 00       	jmp    c0015450 <ip_frag+0x2c4>
c0015338:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001533c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015340:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015344:	0f b7 d8             	movzx  ebx,ax
c0015347:	0f b7 ca             	movzx  ecx,dx
c001534a:	39 cb                	cmp    ebx,ecx
c001534c:	76 02                	jbe    c0015350 <ip_frag+0x1c4>
c001534e:	89 d0                	mov    eax,edx
c0015350:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015355:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001535a:	85 c0                	test   eax,eax
c001535c:	75 12                	jne    c0015370 <ip_frag+0x1e4>
c001535e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015362:	8b 00                	mov    eax,DWORD PTR [eax]
c0015364:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015368:	e9 e3 00 00 00       	jmp    c0015450 <ip_frag+0x2c4>
c001536d:	8d 76 00             	lea    esi,[esi+0x0]
c0015370:	e8 4f fd ff ff       	call   c00150c4 <ip_frag_alloc_pbuf_custom_ref>
c0015375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015379:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001537e:	75 18                	jne    c0015398 <ip_frag+0x20c>
c0015380:	83 ec 0c             	sub    esp,0xc
c0015383:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015387:	e8 f4 2e ff ff       	call   c0008280 <pbuf_free>
c001538c:	83 c4 10             	add    esp,0x10
c001538f:	b0 ff                	mov    al,0xff
c0015391:	e9 9e 01 00 00       	jmp    c0015534 <ip_frag+0x3a8>
c0015396:	66 90                	xchg   ax,ax
c0015398:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001539d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153a1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153a8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153ad:	83 ec 08             	sub    esp,0x8
c00153b0:	53                   	push   ebx
c00153b1:	51                   	push   ecx
c00153b2:	52                   	push   edx
c00153b3:	6a 02                	push   0x2
c00153b5:	50                   	push   eax
c00153b6:	6a 03                	push   0x3
c00153b8:	e8 ff 2b ff ff       	call   c0007fbc <pbuf_alloced_custom>
c00153bd:	83 c4 20             	add    esp,0x20
c00153c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153c4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00153c9:	75 25                	jne    c00153f0 <ip_frag+0x264>
c00153cb:	83 ec 0c             	sub    esp,0xc
c00153ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153d2:	e8 01 fd ff ff       	call   c00150d8 <ip_frag_free_pbuf_custom_ref>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	83 ec 0c             	sub    esp,0xc
c00153dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153e1:	e8 9a 2e ff ff       	call   c0008280 <pbuf_free>
c00153e6:	83 c4 10             	add    esp,0x10
c00153e9:	b0 ff                	mov    al,0xff
c00153eb:	e9 44 01 00 00       	jmp    c0015534 <ip_frag+0x3a8>
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00153f7:	e8 94 36 ff ff       	call   c0008a90 <pbuf_ref>
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015403:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015407:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001540a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001540e:	c7 40 10 10 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015110
c0015415:	83 ec 08             	sub    esp,0x8
c0015418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001541c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015420:	e8 9f 36 ff ff       	call   c0008ac4 <pbuf_cat>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001542c:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015431:	89 d3                	mov    ebx,edx
c0015433:	29 c3                	sub    ebx,eax
c0015435:	89 d8                	mov    eax,ebx
c0015437:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001543c:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015441:	85 c0                	test   eax,eax
c0015443:	74 0b                	je     c0015450 <ip_frag+0x2c4>
c0015445:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001544f:	90                   	nop
c0015450:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015455:	85 c0                	test   eax,eax
c0015457:	0f 85 db fe ff ff    	jne    c0015338 <ip_frag+0x1ac>
c001545d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015462:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015467:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001546c:	83 ec 0c             	sub    esp,0xc
c001546f:	50                   	push   eax
c0015470:	e8 a7 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	89 c2                	mov    edx,eax
c001547a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001547e:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0015482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015486:	83 c0 14             	add    eax,0x14
c0015489:	0f b7 c0             	movzx  eax,ax
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	50                   	push   eax
c0015490:	e8 87 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	89 c2                	mov    edx,eax
c001549a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001549e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00154a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154a6:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00154ac:	83 ec 08             	sub    esp,0x8
c00154af:	6a 14                	push   0x14
c00154b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154b5:	e8 02 e0 ff ff       	call   c00134bc <inet_chksum>
c00154ba:	83 c4 10             	add    esp,0x10
c00154bd:	89 c2                	mov    edx,eax
c00154bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154c3:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00154c7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00154cb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154ce:	83 ec 04             	sub    esp,0x4
c00154d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154d9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00154dd:	ff d0                	call   eax
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00154e8:	83 c0 01             	add    eax,0x1
c00154eb:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00154f1:	83 ec 0c             	sub    esp,0xc
c00154f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f8:	e8 83 2d ff ff       	call   c0008280 <pbuf_free>
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015509:	89 d1                	mov    ecx,edx
c001550b:	29 c1                	sub    ecx,eax
c001550d:	89 c8                	mov    eax,ecx
c001550f:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015514:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015518:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001551c:	01 d0                	add    eax,edx
c001551e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015523:	90                   	nop
c0015524:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015529:	85 c0                	test   eax,eax
c001552b:	0f 85 ef fc ff ff    	jne    c0015220 <ip_frag+0x94>
c0015531:	b0 00                	mov    al,0x0
c0015533:	90                   	nop
c0015534:	83 c4 38             	add    esp,0x38
c0015537:	5b                   	pop    ebx
c0015538:	c3                   	ret    
c0015539:	90                   	nop

c001553a <Computer::close(int, int, void*)>:
c001553a:	53                   	push   ebx
c001553b:	83 ec 08             	sub    esp,0x8
c001553e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015542:	e8 07 a3 00 00       	call   c001f84e <KeExecuteAtexit()>
c0015547:	83 ec 0c             	sub    esp,0xc
c001554a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015550:	50                   	push   eax
c0015551:	e8 6e 5f 00 00       	call   c001b4c4 <Device::closeAll()>
c0015556:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001555c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015560:	8b 10                	mov    edx,DWORD PTR [eax]
c0015562:	51                   	push   ecx
c0015563:	68 0f 27 00 00       	push   0x270f
c0015568:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001556c:	53                   	push   ebx
c001556d:	50                   	push   eax
c001556e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015571:	83 c4 14             	add    esp,0x14
c0015574:	68 48 0b 03 c0       	push   0xc0030b48
c0015579:	e8 f5 aa 00 00       	call   c0020073 <KePanic(char const*)>
c001557e:	83 c4 18             	add    esp,0x18
c0015581:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015586:	5b                   	pop    ebx
c0015587:	c3                   	ret    

c0015588 <Krnl::firstTask()>:
c0015588:	53                   	push   ebx
c0015589:	83 ec 14             	sub    esp,0x14
c001558c:	fb                   	sti    
c001558d:	68 5e 0b 03 c0       	push   0xc0030b5e
c0015592:	e8 96 a3 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015597:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001559e:	e8 ec 0d 00 00       	call   c001638f <malloc>
c00155a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155aa:	89 c3                	mov    ebx,eax
c00155ac:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00155b1:	50                   	push   eax
c00155b2:	68 77 0b 03 c0       	push   0xc0030b77
c00155b7:	6a 01                	push   0x1
c00155b9:	53                   	push   ebx
c00155ba:	e8 95 f1 00 00       	call   c0024754 <Process::Process(bool, char const*, Process*, char**)>
c00155bf:	83 c4 20             	add    esp,0x20
c00155c2:	68 ff 00 00 00       	push   0xff
c00155c7:	6a 00                	push   0x0
c00155c9:	68 db 5d 01 c0       	push   0xc0015ddb
c00155ce:	53                   	push   ebx
c00155cf:	e8 ec f3 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c00155d4:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00155da:	6a 7a                	push   0x7a
c00155dc:	6a 00                	push   0x0
c00155de:	68 84 54 02 c0       	push   0xc0025484
c00155e3:	52                   	push   edx
c00155e4:	e8 d7 f3 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c00155e9:	83 c4 14             	add    esp,0x14
c00155ec:	68 74 0c 03 c0       	push   0xc0030c74
c00155f1:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00155f6:	e8 32 a3 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c00155fb:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015602:	e8 23 ac 00 00       	call   c002022a <KeInitRand()>
c0015607:	e8 9b 02 01 00       	call   c00258a7 <Vm::initialise8086()>
c001560c:	e8 97 4a 00 00       	call   c001a0a8 <Fs::initVFS()>
c0015611:	c7 04 24 84 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b84
c0015618:	e8 10 a3 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001561d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015622:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015628:	8b 10                	mov    edx,DWORD PTR [eax]
c001562a:	6a 00                	push   0x0
c001562c:	6a 00                	push   0x0
c001562e:	6a 00                	push   0x0
c0015630:	50                   	push   eax
c0015631:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015634:	83 c4 14             	add    esp,0x14
c0015637:	68 74 0c 03 c0       	push   0xc0030c74
c001563c:	e8 ec a2 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015641:	e8 fc 41 00 00       	call   c0019842 <KeInitialiseSymlinks()>
c0015646:	e8 8b a8 00 00       	call   c001fed6 <KeLoadSystemEnv()>
c001564b:	e8 e8 aa 00 00       	call   c0020138 <KeSetupPowerManager()>
c0015650:	83 c4 0c             	add    esp,0xc
c0015653:	6a 3a                	push   0x3a
c0015655:	68 9e 0b 03 c0       	push   0xc0030b9e
c001565a:	68 a7 0b 03 c0       	push   0xc0030ba7
c001565f:	e8 8a d2 00 00       	call   c00228ee <Reg::readIntWithDefault(char*, char*, int)>
c0015664:	89 04 24             	mov    DWORD PTR [esp],eax
c0015667:	e8 68 56 00 00       	call   c001acd4 <User::loadClockSettings(int)>
c001566c:	c7 04 24 98 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c98
c0015673:	e8 b5 a2 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015678:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001567d:	59                   	pop    ecx
c001567e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015684:	53                   	push   ebx
c0015685:	e8 ee 5c 00 00       	call   c001b378 <Device::loadDriversForAll()>
c001568a:	c7 04 24 af 0b 03 c0 	mov    DWORD PTR [esp],0xc0030baf
c0015691:	e8 97 a2 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015696:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001569c:	58                   	pop    eax
c001569d:	5a                   	pop    edx
c001569e:	6a 01                	push   0x1
c00156a0:	68 c0 0b 03 c0       	push   0xc0030bc0
c00156a5:	e8 8d ea 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c00156aa:	59                   	pop    ecx
c00156ab:	5a                   	pop    edx
c00156ac:	53                   	push   ebx
c00156ad:	50                   	push   eax
c00156ae:	e8 e5 ec 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c00156b3:	83 c4 10             	add    esp,0x10
c00156b6:	83 ec 0c             	sub    esp,0xc
c00156b9:	6a 02                	push   0x2
c00156bb:	e8 4c f7 00 00       	call   c0024e0c <blockTask(TaskState)>
c00156c0:	83 c4 10             	add    esp,0x10
c00156c3:	eb f1                	jmp    c00156b6 <Krnl::firstTask()+0x12e>
c00156c5:	90                   	nop

c00156c6 <Computer::Computer()>:
c00156c6:	83 ec 0c             	sub    esp,0xc
c00156c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156cd:	83 ec 08             	sub    esp,0x8
c00156d0:	68 dc 0b 03 c0       	push   0xc0030bdc
c00156d5:	50                   	push   eax
c00156d6:	e8 e3 5c 00 00       	call   c001b3be <Device::Device(char const*)>
c00156db:	83 c4 10             	add    esp,0x10
c00156de:	ba e4 0c 03 c0       	mov    edx,0xc0030ce4
c00156e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156e7:	89 10                	mov    DWORD PTR [eax],edx
c00156e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00156f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015709:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001570f:	83 ca 04             	or     edx,0x4
c0015712:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015722:	0f b6 d0             	movzx  edx,al
c0015725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015729:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015734:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001573a:	0f b6 d0             	movzx  edx,al
c001573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015741:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001574a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015750:	8d 50 01             	lea    edx,[eax+0x1]
c0015753:	88 d1                	mov    cl,dl
c0015755:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015759:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001575f:	0f b6 d0             	movzx  edx,al
c0015762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015766:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001576a:	83 e1 3f             	and    ecx,0x3f
c001576d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015771:	90                   	nop
c0015772:	83 c4 0c             	add    esp,0xc
c0015775:	c3                   	ret    

c0015776 <Computer::setBootMessage(char const*)>:
c0015776:	c3                   	ret    
c0015777:	90                   	nop

c0015778 <Computer::detectFeatures()>:
c0015778:	55                   	push   ebp
c0015779:	57                   	push   edi
c001577a:	56                   	push   esi
c001577b:	53                   	push   ebx
c001577c:	83 ec 1c             	sub    esp,0x1c
c001577f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015783:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015789:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c001578f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015795:	e8 5f aa fe ff       	call   c00001f9 <detectCPUID>
c001579a:	31 d2                	xor    edx,edx
c001579c:	85 c0                	test   eax,eax
c001579e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157a4:	0f 95 c2             	setne  dl
c00157a7:	d1 e2                	shl    edx,1
c00157a9:	83 e0 fd             	and    eax,0xfffffffd
c00157ac:	09 d0                	or     eax,edx
c00157ae:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157b4:	a8 02                	test   al,0x2
c00157b6:	75 51                	jne    c0015809 <Computer::detectFeatures()+0x91>
c00157b8:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00157bf:	74 0f                	je     c00157d0 <Computer::detectFeatures()+0x58>
c00157c1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157c7:	83 e0 fb             	and    eax,0xfffffffb
c00157ca:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157d0:	e8 f1 87 01 00       	call   c002dfc6 <x87Detect>
c00157d5:	83 e0 01             	and    eax,0x1
c00157d8:	c1 e0 04             	shl    eax,0x4
c00157db:	89 c2                	mov    edx,eax
c00157dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157e3:	83 e0 ef             	and    eax,0xffffffef
c00157e6:	09 d0                	or     eax,edx
c00157e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157ee:	a8 10                	test   al,0x10
c00157f0:	88 c2                	mov    dl,al
c00157f2:	0f 85 33 01 00 00    	jne    c001592b <Computer::detectFeatures()+0x1b3>
c00157f8:	80 e2 80             	and    dl,0x80
c00157fb:	0f 85 4c 01 00 00    	jne    c001594d <Computer::detectFeatures()+0x1d5>
c0015801:	83 c4 1c             	add    esp,0x1c
c0015804:	5b                   	pop    ebx
c0015805:	5e                   	pop    esi
c0015806:	5f                   	pop    edi
c0015807:	5d                   	pop    ebp
c0015808:	c3                   	ret    
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	6a 20                	push   0x20
c001580e:	e8 53 95 00 00       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c0015813:	83 e0 01             	and    eax,0x1
c0015816:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001581d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015823:	83 e0 f7             	and    eax,0xfffffff7
c0015826:	09 d0                	or     eax,edx
c0015828:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001582e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015835:	e8 2c 95 00 00       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001583a:	89 c2                	mov    edx,eax
c001583c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015842:	83 e2 01             	and    edx,0x1
c0015845:	83 e0 fe             	and    eax,0xfffffffe
c0015848:	09 d0                	or     eax,edx
c001584a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015850:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015857:	e8 0a 95 00 00       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001585c:	89 c2                	mov    edx,eax
c001585e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015864:	c1 e2 07             	shl    edx,0x7
c0015867:	83 e0 7f             	and    eax,0x7f
c001586a:	09 d0                	or     eax,edx
c001586c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015872:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015879:	e8 e8 94 00 00       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	83 e0 01             	and    eax,0x1
c0015884:	c1 e0 05             	shl    eax,0x5
c0015887:	89 c2                	mov    edx,eax
c0015889:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001588f:	83 e0 df             	and    eax,0xffffffdf
c0015892:	09 d0                	or     eax,edx
c0015894:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c001589e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158a4:	0f 84 c9 00 00 00    	je     c0015973 <Computer::detectFeatures()+0x1fb>
c00158aa:	83 e0 fe             	and    eax,0xfffffffe
c00158ad:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158b3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158b9:	89 c2                	mov    edx,eax
c00158bb:	83 e2 09             	and    edx,0x9
c00158be:	83 fa 01             	cmp    edx,0x1
c00158c1:	75 09                	jne    c00158cc <Computer::detectFeatures()+0x154>
c00158c3:	83 e0 fe             	and    eax,0xfffffffe
c00158c6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00158d3:	50                   	push   eax
c00158d4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00158d8:	55                   	push   ebp
c00158d9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00158dd:	57                   	push   edi
c00158de:	8d 74 24 18          	lea    esi,[esp+0x18]
c00158e2:	56                   	push   esi
c00158e3:	68 00 00 00 80       	push   0x80000000
c00158e8:	e8 f5 93 00 00       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00158ed:	83 c4 20             	add    esp,0x20
c00158f0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00158f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00158fb:	0f 86 b7 fe ff ff    	jbe    c00157b8 <Computer::detectFeatures()+0x40>
c0015901:	83 ec 0c             	sub    esp,0xc
c0015904:	50                   	push   eax
c0015905:	55                   	push   ebp
c0015906:	57                   	push   edi
c0015907:	56                   	push   esi
c0015908:	68 01 00 00 80       	push   0x80000001
c001590d:	e8 d0 93 00 00       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015912:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015918:	83 c4 20             	add    esp,0x20
c001591b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015920:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015926:	e9 8d fe ff ff       	jmp    c00157b8 <Computer::detectFeatures()+0x40>
c001592b:	e8 50 86 01 00       	call   c002df80 <sseDetect>
c0015930:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015936:	83 e2 7f             	and    edx,0x7f
c0015939:	c1 e0 07             	shl    eax,0x7
c001593c:	09 c2                	or     edx,eax
c001593e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015944:	80 e2 80             	and    dl,0x80
c0015947:	0f 84 b4 fe ff ff    	je     c0015801 <Computer::detectFeatures()+0x89>
c001594d:	e8 be 82 01 00       	call   c002dc10 <avxDetect>
c0015952:	83 e0 01             	and    eax,0x1
c0015955:	c1 e0 05             	shl    eax,0x5
c0015958:	89 c2                	mov    edx,eax
c001595a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015960:	83 e0 df             	and    eax,0xffffffdf
c0015963:	09 d0                	or     eax,edx
c0015965:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001596b:	83 c4 1c             	add    esp,0x1c
c001596e:	5b                   	pop    ebx
c001596f:	5e                   	pop    esi
c0015970:	5f                   	pop    edi
c0015971:	5d                   	pop    ebp
c0015972:	c3                   	ret    
c0015973:	83 ec 0c             	sub    esp,0xc
c0015976:	68 00 02 00 00       	push   0x200
c001597b:	e8 e6 93 00 00       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	89 c2                	mov    edx,eax
c0015985:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001598b:	83 e2 01             	and    edx,0x1
c001598e:	83 e0 fe             	and    eax,0xfffffffe
c0015991:	09 d0                	or     eax,edx
c0015993:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015999:	e9 15 ff ff ff       	jmp    c00158b3 <Computer::detectFeatures()+0x13b>

c001599e <Computer::displayFeatures()>:
c001599e:	c3                   	ret    
c001599f:	90                   	nop

c00159a0 <Computer::rdmsr(unsigned int)>:
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159ae:	74 0a                	je     c00159ba <Computer::rdmsr(unsigned int)+0x1a>
c00159b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00159b4:	0f 32                	rdmsr  
c00159b6:	83 c4 0c             	add    esp,0xc
c00159b9:	c3                   	ret    
c00159ba:	83 ec 0c             	sub    esp,0xc
c00159bd:	68 e5 0b 03 c0       	push   0xc0030be5
c00159c2:	e8 ac a6 00 00       	call   c0020073 <KePanic(char const*)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	eb e4                	jmp    c00159b0 <Computer::rdmsr(unsigned int)+0x10>

c00159cc <Computer::wrmsr(unsigned int, unsigned long long)>:
c00159cc:	57                   	push   edi
c00159cd:	56                   	push   esi
c00159ce:	83 ec 04             	sub    esp,0x4
c00159d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00159d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00159dd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159e4:	74 10                	je     c00159f6 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00159e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00159ea:	89 f0                	mov    eax,esi
c00159ec:	89 fa                	mov    edx,edi
c00159ee:	0f 30                	wrmsr  
c00159f0:	83 c4 04             	add    esp,0x4
c00159f3:	5e                   	pop    esi
c00159f4:	5f                   	pop    edi
c00159f5:	c3                   	ret    
c00159f6:	83 ec 0c             	sub    esp,0xc
c00159f9:	68 eb 0b 03 c0       	push   0xc0030beb
c00159fe:	e8 70 a6 00 00       	call   c0020073 <KePanic(char const*)>
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	eb de                	jmp    c00159e6 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a08 <Computer::shutdown()>:
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a11:	6a 00                	push   0x0
c0015a13:	6a 00                	push   0x0
c0015a15:	6a 00                	push   0x0
c0015a17:	50                   	push   eax
c0015a18:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a1b:	83 c4 1c             	add    esp,0x1c
c0015a1e:	c3                   	ret    
c0015a1f:	90                   	nop

c0015a20 <Computer::restart()>:
c0015a20:	83 ec 0c             	sub    esp,0xc
c0015a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a27:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a29:	6a 00                	push   0x0
c0015a2b:	6a 00                	push   0x0
c0015a2d:	6a 01                	push   0x1
c0015a2f:	50                   	push   eax
c0015a30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a33:	83 c4 1c             	add    esp,0x1c
c0015a36:	c3                   	ret    
c0015a37:	90                   	nop

c0015a38 <Computer::sleep()>:
c0015a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a3c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a46:	e9 ed 8d 00 00       	jmp    c001e838 <ACPI::sleep()>
c0015a4b:	90                   	nop

c0015a4c <Computer::nmiEnabled()>:
c0015a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015a56:	c3                   	ret    
c0015a57:	90                   	nop

c0015a58 <Computer::readCMOS(unsigned char)>:
c0015a58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015a5c:	31 d2                	xor    edx,edx
c0015a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a62:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015a69:	75 02                	jne    c0015a6d <Computer::readCMOS(unsigned char)+0x15>
c0015a6b:	b2 80                	mov    dl,0x80
c0015a6d:	09 d0                	or     eax,edx
c0015a6f:	e6 70                	out    0x70,al
c0015a71:	e4 71                	in     al,0x71
c0015a73:	c3                   	ret    

c0015a74 <Computer::enableNMI(bool)>:
c0015a74:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a7c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015a82:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015a8a:	eb cc                	jmp    c0015a58 <Computer::readCMOS(unsigned char)>

c0015a8c <Computer::open(int, int, void*)>:
c0015a8c:	56                   	push   esi
c0015a8d:	53                   	push   ebx
c0015a8e:	83 ec 10             	sub    esp,0x10
c0015a91:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015a98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015a9c:	68 f1 0b 03 c0       	push   0xc0030bf1
c0015aa1:	0f 94 05 a0 37 03 c0 	sete   BYTE PTR ds:0xc00337a0
c0015aa8:	e8 80 9e 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015aad:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015ab4:	e8 d6 08 00 00       	call   c001638f <malloc>
c0015ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0015abc:	89 c6                	mov    esi,eax
c0015abe:	e8 e9 88 00 00       	call   c001e3ac <ACPI::ACPI()>
c0015ac3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015ac9:	58                   	pop    eax
c0015aca:	5a                   	pop    edx
c0015acb:	56                   	push   esi
c0015acc:	53                   	push   ebx
c0015acd:	e8 8a 57 00 00       	call   c001b25c <Device::addChild(Device*)>
c0015ad2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ad5:	e8 9e fc ff ff       	call   c0015778 <Computer::detectFeatures()>
c0015ada:	59                   	pop    ecx
c0015adb:	5e                   	pop    esi
c0015adc:	6a 01                	push   0x1
c0015ade:	53                   	push   ebx
c0015adf:	e8 90 ff ff ff       	call   c0015a74 <Computer::enableNMI(bool)>
c0015ae4:	c7 04 24 09 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c09
c0015aeb:	e8 3d 9e 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015af0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015af7:	e8 93 08 00 00       	call   c001638f <malloc>
c0015afc:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aff:	89 c6                	mov    esi,eax
c0015b01:	e8 18 93 00 00       	call   c001ee1e <CPU::CPU()>
c0015b06:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b0c:	58                   	pop    eax
c0015b0d:	5a                   	pop    edx
c0015b0e:	56                   	push   esi
c0015b0f:	53                   	push   ebx
c0015b10:	e8 47 57 00 00       	call   c001b25c <Device::addChild(Device*)>
c0015b15:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b21:	51                   	push   ecx
c0015b22:	6a 00                	push   0x0
c0015b24:	6a 00                	push   0x0
c0015b26:	50                   	push   eax
c0015b27:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b2a:	83 c4 14             	add    esp,0x14
c0015b2d:	68 b8 0c 03 c0       	push   0xc0030cb8
c0015b32:	e8 f6 9d 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015b37:	e8 b2 0f 01 00       	call   c0026aee <HalInitialiseCoprocessor()>
c0015b3c:	c7 04 24 23 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c23
c0015b43:	e8 e5 9d 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c0015b48:	c7 04 24 88 55 01 c0 	mov    DWORD PTR [esp],0xc0015588
c0015b4f:	e8 94 ef 00 00       	call   c0024ae8 <setupMultitasking(void (*)())>
c0015b54:	83 c4 14             	add    esp,0x14
c0015b57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b5c:	5b                   	pop    ebx
c0015b5d:	5e                   	pop    esi
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <Computer::disableNMI()>:
c0015b60:	6a 00                	push   0x0
c0015b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b66:	50                   	push   eax
c0015b67:	e8 08 ff ff ff       	call   c0015a74 <Computer::enableNMI(bool)>
c0015b6c:	5a                   	pop    edx
c0015b6d:	59                   	pop    ecx
c0015b6e:	c3                   	ret    
c0015b6f:	90                   	nop

c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015b70:	53                   	push   ebx
c0015b71:	b2 80                	mov    dl,0x80
c0015b73:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b7f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015b86:	74 02                	je     c0015b8a <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015b88:	31 d2                	xor    edx,edx
c0015b8a:	09 d0                	or     eax,edx
c0015b8c:	e6 70                	out    0x70,al
c0015b8e:	88 c8                	mov    al,cl
c0015b90:	e6 71                	out    0x71,al
c0015b92:	5b                   	pop    ebx
c0015b93:	c3                   	ret    

c0015b94 <Computer::handleNMI()>:
c0015b94:	56                   	push   esi
c0015b95:	53                   	push   ebx
c0015b96:	83 ec 10             	sub    esp,0x10
c0015b99:	e4 92                	in     al,0x92
c0015b9b:	89 c6                	mov    esi,eax
c0015b9d:	e4 61                	in     al,0x61
c0015b9f:	68 3e 0c 03 c0       	push   0xc0030c3e
c0015ba4:	88 c3                	mov    bl,al
c0015ba6:	e8 1b 36 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	83 e6 10             	and    esi,0x10
c0015bb1:	75 10                	jne    c0015bc3 <Computer::handleNMI()+0x2f>
c0015bb3:	f6 c3 40             	test   bl,0x40
c0015bb6:	75 20                	jne    c0015bd8 <Computer::handleNMI()+0x44>
c0015bb8:	80 e3 80             	and    bl,0x80
c0015bbb:	75 30                	jne    c0015bed <Computer::handleNMI()+0x59>
c0015bbd:	83 c4 04             	add    esp,0x4
c0015bc0:	5b                   	pop    ebx
c0015bc1:	5e                   	pop    esi
c0015bc2:	c3                   	ret    
c0015bc3:	83 ec 0c             	sub    esp,0xc
c0015bc6:	68 4f 0c 03 c0       	push   0xc0030c4f
c0015bcb:	e8 a3 a4 00 00       	call   c0020073 <KePanic(char const*)>
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	f6 c3 40             	test   bl,0x40
c0015bd6:	74 e0                	je     c0015bb8 <Computer::handleNMI()+0x24>
c0015bd8:	83 ec 0c             	sub    esp,0xc
c0015bdb:	68 5c 0c 03 c0       	push   0xc0030c5c
c0015be0:	e8 8e a4 00 00       	call   c0020073 <KePanic(char const*)>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	80 e3 80             	and    bl,0x80
c0015beb:	74 d0                	je     c0015bbd <Computer::handleNMI()+0x29>
c0015bed:	c7 44 24 10 66 0c 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030c66
c0015bf5:	83 c4 04             	add    esp,0x4
c0015bf8:	5b                   	pop    ebx
c0015bf9:	5e                   	pop    esi
c0015bfa:	e9 74 a4 00 00       	jmp    c0020073 <KePanic(char const*)>
c0015bff:	90                   	nop

c0015c00 <GDTEntry::setBase(unsigned int)>:
c0015c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c08:	89 c1                	mov    ecx,eax
c0015c0a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c0e:	c1 e9 10             	shr    ecx,0x10
c0015c11:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c14:	c1 e8 18             	shr    eax,0x18
c0015c17:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c1a:	c3                   	ret    
c0015c1b:	90                   	nop

c0015c1c <GDTEntry::setLimit(unsigned int)>:
c0015c1c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c24:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c27:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c2a:	c1 e8 10             	shr    eax,0x10
c0015c2d:	83 e0 0f             	and    eax,0xf
c0015c30:	83 e2 f0             	and    edx,0xfffffff0
c0015c33:	09 d0                	or     eax,edx
c0015c35:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c38:	c3                   	ret    
c0015c39:	90                   	nop

c0015c3a <GDT::GDT()>:
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c4e:	90                   	nop
c0015c4f:	c3                   	ret    

c0015c50 <GDT::addEntry(GDTEntry)>:
c0015c50:	53                   	push   ebx
c0015c51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c5d:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c5f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015c63:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c66:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015c6a:	c1 e0 03             	shl    eax,0x3
c0015c6d:	89 0a                	mov    DWORD PTR [edx],ecx
c0015c6f:	5b                   	pop    ebx
c0015c70:	c3                   	ret    
c0015c71:	90                   	nop

c0015c72 <GDT::getNumberOfEntries()>:
c0015c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	c3                   	ret    
c0015c79:	90                   	nop

c0015c7a <GDT::flush()>:
c0015c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c80:	83 c0 04             	add    eax,0x4
c0015c83:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015c88:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015c8f:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015c96:	e9 bf a6 fe ff       	jmp    c000035a <loadGDT>
c0015c9b:	90                   	nop

c0015c9c <GDT::setup()>:
c0015c9c:	57                   	push   edi
c0015c9d:	56                   	push   esi
c0015c9e:	53                   	push   ebx
c0015c9f:	83 ec 30             	sub    esp,0x30
c0015ca2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015ca6:	6a 00                	push   0x0
c0015ca8:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015cac:	56                   	push   esi
c0015cad:	e8 4e ff ff ff       	call   c0015c00 <GDTEntry::setBase(unsigned int)>
c0015cb2:	6a 00                	push   0x0
c0015cb4:	56                   	push   esi
c0015cb5:	e8 62 ff ff ff       	call   c0015c1c <GDTEntry::setLimit(unsigned int)>
c0015cba:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015cc2:	6a 00                	push   0x0
c0015cc4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015cc8:	56                   	push   esi
c0015cc9:	e8 32 ff ff ff       	call   c0015c00 <GDTEntry::setBase(unsigned int)>
c0015cce:	68 ff ff ff 00       	push   0xffffff
c0015cd3:	56                   	push   esi
c0015cd4:	e8 43 ff ff ff       	call   c0015c1c <GDTEntry::setLimit(unsigned int)>
c0015cd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015ce1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015ce6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015cea:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015cef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015cf3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015cf7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015cfb:	89 f8                	mov    eax,edi
c0015cfd:	89 fa                	mov    edx,edi
c0015cff:	80 e4 f7             	and    ah,0xf7
c0015d02:	80 ce 60             	or     dh,0x60
c0015d05:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d09:	89 c7                	mov    edi,eax
c0015d0b:	80 cc 60             	or     ah,0x60
c0015d0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d1a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d1e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d22:	83 c4 20             	add    esp,0x20
c0015d25:	6a 00                	push   0x0
c0015d27:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d2b:	50                   	push   eax
c0015d2c:	e8 cf fe ff ff       	call   c0015c00 <GDTEntry::setBase(unsigned int)>
c0015d31:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d35:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d39:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d3d:	83 e0 3f             	and    eax,0x3f
c0015d40:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d44:	6a 00                	push   0x0
c0015d46:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d4a:	50                   	push   eax
c0015d4b:	e8 b0 fe ff ff       	call   c0015c00 <GDTEntry::setBase(unsigned int)>
c0015d50:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015d54:	83 e0 3f             	and    eax,0x3f
c0015d57:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015d5b:	83 c4 0c             	add    esp,0xc
c0015d5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d66:	53                   	push   ebx
c0015d67:	e8 e4 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015d6c:	83 c4 0c             	add    esp,0xc
c0015d6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d77:	53                   	push   ebx
c0015d78:	e8 d3 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015d7d:	83 c4 0c             	add    esp,0xc
c0015d80:	57                   	push   edi
c0015d81:	56                   	push   esi
c0015d82:	53                   	push   ebx
c0015d83:	e8 c8 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015d88:	83 c4 0c             	add    esp,0xc
c0015d8b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015d8f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015d93:	53                   	push   ebx
c0015d94:	e8 b7 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015d99:	83 c4 0c             	add    esp,0xc
c0015d9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015da0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015da4:	53                   	push   ebx
c0015da5:	e8 a6 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015daa:	83 c4 0c             	add    esp,0xc
c0015dad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015db1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015db5:	53                   	push   ebx
c0015db6:	e8 95 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015dbb:	83 c4 0c             	add    esp,0xc
c0015dbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dc2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dc6:	53                   	push   ebx
c0015dc7:	e8 84 fe ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c0015dcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dcf:	e8 a6 fe ff ff       	call   c0015c7a <GDT::flush()>
c0015dd4:	83 c4 40             	add    esp,0x40
c0015dd7:	5b                   	pop    ebx
c0015dd8:	5e                   	pop    esi
c0015dd9:	5f                   	pop    edi
c0015dda:	c3                   	ret    

c0015ddb <idleFunction(void*)>:
c0015ddb:	83 ec 0c             	sub    esp,0xc
c0015dde:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015de3:	48                   	dec    eax
c0015de4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015de9:	75 01                	jne    c0015dec <idleFunction(void*)+0x11>
c0015deb:	fb                   	sti    
c0015dec:	e8 c9 09 01 00       	call   c00267ba <HalSystemIdle()>
c0015df1:	e8 8c 87 01 00       	call   c002e582 <idleCommon()>
c0015df6:	eb f4                	jmp    c0015dec <idleFunction(void*)+0x11>

c0015df8 <IDTEntry::IDTEntry(bool)>:
c0015df8:	53                   	push   ebx
c0015df9:	83 ec 04             	sub    esp,0x4
c0015dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e00:	88 04 24             	mov    BYTE PTR [esp],al
c0015e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e1c:	83 e2 f0             	and    edx,0xfffffff0
c0015e1f:	83 ca 0e             	or     edx,0xe
c0015e22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e2c:	83 e2 ef             	and    edx,0xffffffef
c0015e2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e36:	85 c0                	test   eax,eax
c0015e38:	74 06                	je     c0015e40 <IDTEntry::IDTEntry(bool)+0x48>
c0015e3a:	b2 03                	mov    dl,0x3
c0015e3c:	eb 06                	jmp    c0015e44 <IDTEntry::IDTEntry(bool)+0x4c>
c0015e3e:	66 90                	xchg   ax,ax
c0015e40:	b2 00                	mov    dl,0x0
c0015e42:	66 90                	xchg   ax,ax
c0015e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e48:	83 e2 03             	and    edx,0x3
c0015e4b:	89 d3                	mov    ebx,edx
c0015e4d:	c1 e3 05             	shl    ebx,0x5
c0015e50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e53:	83 e2 9f             	and    edx,0xffffff9f
c0015e56:	88 d1                	mov    cl,dl
c0015e58:	88 da                	mov    dl,bl
c0015e5a:	09 ca                	or     edx,ecx
c0015e5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e66:	83 ca 80             	or     edx,0xffffff80
c0015e69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e6c:	90                   	nop
c0015e6d:	83 c4 04             	add    esp,0x4
c0015e70:	5b                   	pop    ebx
c0015e71:	c3                   	ret    

c0015e72 <IDTEntry::setOffset(unsigned int)>:
c0015e72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e7a:	66 89 02             	mov    WORD PTR [edx],ax
c0015e7d:	c1 e8 10             	shr    eax,0x10
c0015e80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015e84:	c3                   	ret    
c0015e85:	90                   	nop
c0015e86:	66 90                	xchg   ax,ax

c0015e88 <IDT::IDT()>:
c0015e88:	90                   	nop
c0015e89:	c3                   	ret    

c0015e8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e8e:	83 c0 30             	add    eax,0x30
c0015e91:	c3                   	ret    

c0015e92 <IDT::addEntry(IDTEntry, int)>:
c0015e92:	53                   	push   ebx
c0015e93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015e9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ea3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015ea6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015eaa:	5b                   	pop    ebx
c0015eab:	c3                   	ret    

c0015eac <IDT::addEntry(int, void (*)(), bool)>:
c0015eac:	53                   	push   ebx
c0015ead:	83 ec 10             	sub    esp,0x10
c0015eb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015eb5:	50                   	push   eax
c0015eb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015eba:	53                   	push   ebx
c0015ebb:	e8 38 ff ff ff       	call   c0015df8 <IDTEntry::IDTEntry(bool)>
c0015ec0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ec4:	53                   	push   ebx
c0015ec5:	e8 a8 ff ff ff       	call   c0015e72 <IDTEntry::setOffset(unsigned int)>
c0015eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ece:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ed2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ed6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015eda:	e8 b3 ff ff ff       	call   c0015e92 <IDT::addEntry(IDTEntry, int)>
c0015edf:	83 c4 30             	add    esp,0x30
c0015ee2:	5b                   	pop    ebx
c0015ee3:	c3                   	ret    

c0015ee4 <IDT::flush()>:
c0015ee4:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015eed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef1:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015ef6:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015efd:	c3                   	ret    

c0015efe <IDT::setup()>:
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 10             	sub    esp,0x10
c0015f04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f08:	6a 00                	push   0x0
c0015f0a:	68 80 dc 02 c0       	push   0xc002dc80
c0015f0f:	6a 00                	push   0x0
c0015f11:	53                   	push   ebx
c0015f12:	e8 95 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f17:	6a 00                	push   0x0
c0015f19:	68 90 dc 02 c0       	push   0xc002dc90
c0015f1e:	6a 01                	push   0x1
c0015f20:	53                   	push   ebx
c0015f21:	e8 86 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f26:	83 c4 20             	add    esp,0x20
c0015f29:	6a 00                	push   0x0
c0015f2b:	68 9a dc 02 c0       	push   0xc002dc9a
c0015f30:	6a 02                	push   0x2
c0015f32:	53                   	push   ebx
c0015f33:	e8 74 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f38:	6a 00                	push   0x0
c0015f3a:	68 a4 dc 02 c0       	push   0xc002dca4
c0015f3f:	6a 03                	push   0x3
c0015f41:	53                   	push   ebx
c0015f42:	e8 65 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f47:	83 c4 20             	add    esp,0x20
c0015f4a:	6a 00                	push   0x0
c0015f4c:	68 ae dc 02 c0       	push   0xc002dcae
c0015f51:	6a 04                	push   0x4
c0015f53:	53                   	push   ebx
c0015f54:	e8 53 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f59:	6a 00                	push   0x0
c0015f5b:	68 b8 dc 02 c0       	push   0xc002dcb8
c0015f60:	6a 05                	push   0x5
c0015f62:	53                   	push   ebx
c0015f63:	e8 44 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f68:	83 c4 20             	add    esp,0x20
c0015f6b:	6a 00                	push   0x0
c0015f6d:	68 c2 dc 02 c0       	push   0xc002dcc2
c0015f72:	6a 06                	push   0x6
c0015f74:	53                   	push   ebx
c0015f75:	e8 32 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f7a:	6a 00                	push   0x0
c0015f7c:	68 cc dc 02 c0       	push   0xc002dccc
c0015f81:	6a 07                	push   0x7
c0015f83:	53                   	push   ebx
c0015f84:	e8 23 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f89:	83 c4 20             	add    esp,0x20
c0015f8c:	6a 00                	push   0x0
c0015f8e:	68 d6 dc 02 c0       	push   0xc002dcd6
c0015f93:	6a 08                	push   0x8
c0015f95:	53                   	push   ebx
c0015f96:	e8 11 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015f9b:	6a 00                	push   0x0
c0015f9d:	68 de dc 02 c0       	push   0xc002dcde
c0015fa2:	6a 09                	push   0x9
c0015fa4:	53                   	push   ebx
c0015fa5:	e8 02 ff ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015faa:	83 c4 20             	add    esp,0x20
c0015fad:	6a 00                	push   0x0
c0015faf:	68 e8 dc 02 c0       	push   0xc002dce8
c0015fb4:	6a 0a                	push   0xa
c0015fb6:	53                   	push   ebx
c0015fb7:	e8 f0 fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015fbc:	6a 00                	push   0x0
c0015fbe:	68 f0 dc 02 c0       	push   0xc002dcf0
c0015fc3:	6a 0b                	push   0xb
c0015fc5:	53                   	push   ebx
c0015fc6:	e8 e1 fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015fcb:	83 c4 20             	add    esp,0x20
c0015fce:	6a 00                	push   0x0
c0015fd0:	68 f8 dc 02 c0       	push   0xc002dcf8
c0015fd5:	6a 0c                	push   0xc
c0015fd7:	53                   	push   ebx
c0015fd8:	e8 cf fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015fdd:	6a 00                	push   0x0
c0015fdf:	68 00 dd 02 c0       	push   0xc002dd00
c0015fe4:	6a 0d                	push   0xd
c0015fe6:	53                   	push   ebx
c0015fe7:	e8 c0 fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015fec:	83 c4 20             	add    esp,0x20
c0015fef:	6a 00                	push   0x0
c0015ff1:	68 1a dd 02 c0       	push   0xc002dd1a
c0015ff6:	6a 0e                	push   0xe
c0015ff8:	53                   	push   ebx
c0015ff9:	e8 ae fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0015ffe:	6a 00                	push   0x0
c0016000:	68 22 dd 02 c0       	push   0xc002dd22
c0016005:	6a 0f                	push   0xf
c0016007:	53                   	push   ebx
c0016008:	e8 9f fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c001600d:	83 c4 20             	add    esp,0x20
c0016010:	6a 00                	push   0x0
c0016012:	68 2c dd 02 c0       	push   0xc002dd2c
c0016017:	6a 10                	push   0x10
c0016019:	53                   	push   ebx
c001601a:	e8 8d fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c001601f:	6a 00                	push   0x0
c0016021:	68 36 dd 02 c0       	push   0xc002dd36
c0016026:	6a 11                	push   0x11
c0016028:	53                   	push   ebx
c0016029:	e8 7e fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c001602e:	83 c4 20             	add    esp,0x20
c0016031:	6a 00                	push   0x0
c0016033:	68 40 dd 02 c0       	push   0xc002dd40
c0016038:	6a 12                	push   0x12
c001603a:	53                   	push   ebx
c001603b:	e8 6c fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016040:	6a 01                	push   0x1
c0016042:	68 da dd 02 c0       	push   0xc002ddda
c0016047:	6a 60                	push   0x60
c0016049:	53                   	push   ebx
c001604a:	e8 5d fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c001604f:	83 c4 20             	add    esp,0x20
c0016052:	6a 00                	push   0x0
c0016054:	68 e1 dd 02 c0       	push   0xc002dde1
c0016059:	6a 20                	push   0x20
c001605b:	53                   	push   ebx
c001605c:	e8 4b fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016061:	6a 00                	push   0x0
c0016063:	68 cc dd 02 c0       	push   0xc002ddcc
c0016068:	6a 21                	push   0x21
c001606a:	53                   	push   ebx
c001606b:	e8 3c fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016070:	83 c4 20             	add    esp,0x20
c0016073:	6a 00                	push   0x0
c0016075:	68 d3 dd 02 c0       	push   0xc002ddd3
c001607a:	6a 22                	push   0x22
c001607c:	53                   	push   ebx
c001607d:	e8 2a fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016082:	6a 00                	push   0x0
c0016084:	68 4a dd 02 c0       	push   0xc002dd4a
c0016089:	6a 23                	push   0x23
c001608b:	53                   	push   ebx
c001608c:	e8 1b fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016091:	83 c4 20             	add    esp,0x20
c0016094:	6a 00                	push   0x0
c0016096:	68 54 dd 02 c0       	push   0xc002dd54
c001609b:	6a 24                	push   0x24
c001609d:	53                   	push   ebx
c001609e:	e8 09 fe ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160a3:	6a 00                	push   0x0
c00160a5:	68 5e dd 02 c0       	push   0xc002dd5e
c00160aa:	6a 25                	push   0x25
c00160ac:	53                   	push   ebx
c00160ad:	e8 fa fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160b2:	83 c4 20             	add    esp,0x20
c00160b5:	6a 00                	push   0x0
c00160b7:	68 68 dd 02 c0       	push   0xc002dd68
c00160bc:	6a 26                	push   0x26
c00160be:	53                   	push   ebx
c00160bf:	e8 e8 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160c4:	6a 00                	push   0x0
c00160c6:	68 72 dd 02 c0       	push   0xc002dd72
c00160cb:	6a 27                	push   0x27
c00160cd:	53                   	push   ebx
c00160ce:	e8 d9 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160d3:	83 c4 20             	add    esp,0x20
c00160d6:	6a 00                	push   0x0
c00160d8:	68 7c dd 02 c0       	push   0xc002dd7c
c00160dd:	6a 28                	push   0x28
c00160df:	53                   	push   ebx
c00160e0:	e8 c7 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160e5:	6a 00                	push   0x0
c00160e7:	68 86 dd 02 c0       	push   0xc002dd86
c00160ec:	6a 29                	push   0x29
c00160ee:	53                   	push   ebx
c00160ef:	e8 b8 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00160f4:	83 c4 20             	add    esp,0x20
c00160f7:	6a 00                	push   0x0
c00160f9:	68 90 dd 02 c0       	push   0xc002dd90
c00160fe:	6a 2a                	push   0x2a
c0016100:	53                   	push   ebx
c0016101:	e8 a6 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016106:	6a 00                	push   0x0
c0016108:	68 9a dd 02 c0       	push   0xc002dd9a
c001610d:	6a 2b                	push   0x2b
c001610f:	53                   	push   ebx
c0016110:	e8 97 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016115:	83 c4 20             	add    esp,0x20
c0016118:	6a 00                	push   0x0
c001611a:	68 a4 dd 02 c0       	push   0xc002dda4
c001611f:	6a 2c                	push   0x2c
c0016121:	53                   	push   ebx
c0016122:	e8 85 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016127:	6a 00                	push   0x0
c0016129:	68 ae dd 02 c0       	push   0xc002ddae
c001612e:	6a 2d                	push   0x2d
c0016130:	53                   	push   ebx
c0016131:	e8 76 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016136:	83 c4 20             	add    esp,0x20
c0016139:	6a 00                	push   0x0
c001613b:	68 b8 dd 02 c0       	push   0xc002ddb8
c0016140:	6a 2e                	push   0x2e
c0016142:	53                   	push   ebx
c0016143:	e8 64 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016148:	6a 00                	push   0x0
c001614a:	68 c2 dd 02 c0       	push   0xc002ddc2
c001614f:	6a 2f                	push   0x2f
c0016151:	53                   	push   ebx
c0016152:	e8 55 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016157:	83 c4 20             	add    esp,0x20
c001615a:	6a 00                	push   0x0
c001615c:	68 1c df 02 c0       	push   0xc002df1c
c0016161:	6a 30                	push   0x30
c0016163:	53                   	push   ebx
c0016164:	e8 43 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016169:	6a 00                	push   0x0
c001616b:	68 26 df 02 c0       	push   0xc002df26
c0016170:	6a 31                	push   0x31
c0016172:	53                   	push   ebx
c0016173:	e8 34 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016178:	83 c4 20             	add    esp,0x20
c001617b:	6a 00                	push   0x0
c001617d:	68 30 df 02 c0       	push   0xc002df30
c0016182:	6a 32                	push   0x32
c0016184:	53                   	push   ebx
c0016185:	e8 22 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c001618a:	6a 00                	push   0x0
c001618c:	68 3a df 02 c0       	push   0xc002df3a
c0016191:	6a 33                	push   0x33
c0016193:	53                   	push   ebx
c0016194:	e8 13 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c0016199:	83 c4 20             	add    esp,0x20
c001619c:	6a 00                	push   0x0
c001619e:	68 44 df 02 c0       	push   0xc002df44
c00161a3:	6a 34                	push   0x34
c00161a5:	53                   	push   ebx
c00161a6:	e8 01 fd ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00161ab:	6a 00                	push   0x0
c00161ad:	68 4e df 02 c0       	push   0xc002df4e
c00161b2:	6a 35                	push   0x35
c00161b4:	53                   	push   ebx
c00161b5:	e8 f2 fc ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00161ba:	83 c4 20             	add    esp,0x20
c00161bd:	6a 00                	push   0x0
c00161bf:	68 58 df 02 c0       	push   0xc002df58
c00161c4:	6a 36                	push   0x36
c00161c6:	53                   	push   ebx
c00161c7:	e8 e0 fc ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00161cc:	6a 00                	push   0x0
c00161ce:	68 62 df 02 c0       	push   0xc002df62
c00161d3:	6a 37                	push   0x37
c00161d5:	53                   	push   ebx
c00161d6:	e8 d1 fc ff ff       	call   c0015eac <IDT::addEntry(int, void (*)(), bool)>
c00161db:	83 c4 1c             	add    esp,0x1c
c00161de:	6a 03                	push   0x3
c00161e0:	6a 02                	push   0x2
c00161e2:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00161e8:	e8 d5 24 00 00       	call   c00186c2 <VAS::allocatePages(int, int)>
c00161ed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00161f4:	89 c6                	mov    esi,eax
c00161f6:	e8 94 01 00 00       	call   c001638f <malloc>
c00161fb:	81 c6 00 20 00 00    	add    esi,0x2000
c0016201:	89 04 24             	mov    DWORD PTR [esp],eax
c0016204:	89 c7                	mov    edi,eax
c0016206:	e8 dd 15 00 00       	call   c00177e8 <TSS::TSS()>
c001620b:	83 c4 0c             	add    esp,0xc
c001620e:	68 d6 dc 02 c0       	push   0xc002dcd6
c0016213:	56                   	push   esi
c0016214:	57                   	push   edi
c0016215:	e8 12 16 00 00       	call   c001782c <TSS::setup(unsigned long, unsigned long)>
c001621a:	89 c6                	mov    esi,eax
c001621c:	58                   	pop    eax
c001621d:	5a                   	pop    edx
c001621e:	6a 00                	push   0x0
c0016220:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016224:	50                   	push   eax
c0016225:	e8 ce fb ff ff       	call   c0015df8 <IDTEntry::IDTEntry(bool)>
c001622a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001622e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0016233:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c001623a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001623e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016244:	80 ce 05             	or     dh,0x5
c0016247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001624b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001624e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016252:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016255:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016258:	e8 87 fc ff ff       	call   c0015ee4 <IDT::flush()>
c001625d:	83 c4 20             	add    esp,0x20
c0016260:	5b                   	pop    ebx
c0016261:	5e                   	pop    esi
c0016262:	5f                   	pop    edi
c0016263:	c3                   	ret    

c0016264 <sbrk>:
c0016264:	55                   	push   ebp
c0016265:	57                   	push   edi
c0016266:	56                   	push   esi
c0016267:	53                   	push   ebx
c0016268:	83 ec 1c             	sub    esp,0x1c
c001626b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001626f:	85 c0                	test   eax,eax
c0016271:	74 66                	je     c00162d9 <sbrk+0x75>
c0016273:	78 6b                	js     c00162e0 <sbrk+0x7c>
c0016275:	8b 15 94 37 03 c0    	mov    edx,DWORD PTR ds:0xc0033794
c001627b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001627f:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0016285:	05 ff 0f 00 00       	add    eax,0xfff
c001628a:	0f 49 e8             	cmovns ebp,eax
c001628d:	c1 fd 0c             	sar    ebp,0xc
c0016290:	bb 00 00 00 00       	mov    ebx,0x0
c0016295:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001629b:	8b 3d 94 37 03 c0    	mov    edi,DWORD PTR ds:0xc0033794
c00162a1:	e8 f8 03 00 00       	call   c001669e <Phys::allocatePage()>
c00162a6:	68 01 04 00 00       	push   0x401
c00162ab:	57                   	push   edi
c00162ac:	50                   	push   eax
c00162ad:	56                   	push   esi
c00162ae:	e8 07 23 00 00       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00162b3:	81 05 94 37 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033794,0x1000
c00162bd:	83 c3 01             	add    ebx,0x1
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	39 dd                	cmp    ebp,ebx
c00162c5:	75 ce                	jne    c0016295 <sbrk+0x31>
c00162c7:	0f 20 d8             	mov    eax,cr3
c00162ca:	0f 22 d8             	mov    cr3,eax
c00162cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162d1:	83 c4 1c             	add    esp,0x1c
c00162d4:	5b                   	pop    ebx
c00162d5:	5e                   	pop    esi
c00162d6:	5f                   	pop    edi
c00162d7:	5d                   	pop    ebp
c00162d8:	c3                   	ret    
c00162d9:	a1 94 37 03 c0       	mov    eax,ds:0xc0033794
c00162de:	eb f1                	jmp    c00162d1 <sbrk+0x6d>
c00162e0:	83 ec 08             	sub    esp,0x8
c00162e3:	50                   	push   eax
c00162e4:	68 08 0d 03 c0       	push   0xc0030d08
c00162e9:	e8 d8 2e 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f6:	eb d9                	jmp    c00162d1 <sbrk+0x6d>

c00162f8 <mmap>:
c00162f8:	83 ec 18             	sub    esp,0x18
c00162fb:	68 38 0d 03 c0       	push   0xc0030d38
c0016300:	e8 6e 9d 00 00       	call   c0020073 <KePanic(char const*)>
c0016305:	b8 00 00 00 00       	mov    eax,0x0
c001630a:	83 c4 1c             	add    esp,0x1c
c001630d:	c3                   	ret    

c001630e <munmap>:
c001630e:	83 ec 18             	sub    esp,0x18
c0016311:	68 3d 0d 03 c0       	push   0xc0030d3d
c0016316:	e8 58 9d 00 00       	call   c0020073 <KePanic(char const*)>
c001631b:	b8 00 00 00 00       	mov    eax,0x0
c0016320:	83 c4 1c             	add    esp,0x1c
c0016323:	c3                   	ret    

c0016324 <liballoc_lock()>:
c0016324:	fa                   	cli    
c0016325:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001632c:	b8 00 00 00 00       	mov    eax,0x0
c0016331:	c3                   	ret    

c0016332 <liballoc_unlock()>:
c0016332:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016337:	83 e8 01             	sub    eax,0x1
c001633a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001633f:	75 01                	jne    c0016342 <liballoc_unlock()+0x10>
c0016341:	fb                   	sti    
c0016342:	b8 00 00 00 00       	mov    eax,0x0
c0016347:	c3                   	ret    

c0016348 <liballoc_alloc(int)>:
c0016348:	83 ec 10             	sub    esp,0x10
c001634b:	6a 01                	push   0x1
c001634d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016351:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016357:	e8 66 23 00 00       	call   c00186c2 <VAS::allocatePages(int, int)>
c001635c:	83 c4 1c             	add    esp,0x1c
c001635f:	c3                   	ret    

c0016360 <liballoc_free(void*, int)>:
c0016360:	83 ec 14             	sub    esp,0x14
c0016363:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016367:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001636d:	e8 90 1f 00 00       	call   c0018302 <VAS::freeAllocatedPages(unsigned long)>
c0016372:	b8 00 00 00 00       	mov    eax,0x0
c0016377:	83 c4 1c             	add    esp,0x1c
c001637a:	c3                   	ret    

c001637b <realloc>:
c001637b:	83 ec 14             	sub    esp,0x14
c001637e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016386:	e8 49 b3 fe ff       	call   c00016d4 <dlrealloc>
c001638b:	83 c4 1c             	add    esp,0x1c
c001638e:	c3                   	ret    

c001638f <malloc>:
c001638f:	83 ec 18             	sub    esp,0x18
c0016392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016396:	e8 fc ad fe ff       	call   c0001197 <dlmalloc>
c001639b:	83 c4 1c             	add    esp,0x1c
c001639e:	c3                   	ret    

c001639f <free>:
c001639f:	83 ec 18             	sub    esp,0x18
c00163a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a6:	e8 8e aa fe ff       	call   c0000e39 <dlfree>
c00163ab:	83 c4 1c             	add    esp,0x1c
c00163ae:	c3                   	ret    

c00163af <rfree>:
c00163af:	83 ec 18             	sub    esp,0x18
c00163b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b6:	e8 7e aa fe ff       	call   c0000e39 <dlfree>
c00163bb:	83 c4 1c             	add    esp,0x1c
c00163be:	c3                   	ret    

c00163bf <calloc>:
c00163bf:	56                   	push   esi
c00163c0:	53                   	push   ebx
c00163c1:	83 ec 10             	sub    esp,0x10
c00163c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163c8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00163cd:	53                   	push   ebx
c00163ce:	e8 bc ff ff ff       	call   c001638f <malloc>
c00163d3:	89 c6                	mov    esi,eax
c00163d5:	83 c4 0c             	add    esp,0xc
c00163d8:	53                   	push   ebx
c00163d9:	6a 00                	push   0x0
c00163db:	50                   	push   eax
c00163dc:	e8 0f a1 fe ff       	call   c00004f0 <memset>
c00163e1:	89 f0                	mov    eax,esi
c00163e3:	83 c4 14             	add    esp,0x14
c00163e6:	5b                   	pop    ebx
c00163e7:	5e                   	pop    esi
c00163e8:	c3                   	ret    

c00163e9 <KeEntryPoint>:
c00163e9:	57                   	push   edi
c00163ea:	bf f9 03 00 00       	mov    edi,0x3f9
c00163ef:	56                   	push   esi
c00163f0:	31 f6                	xor    esi,esi
c00163f2:	53                   	push   ebx
c00163f3:	89 fa                	mov    edx,edi
c00163f5:	83 ec 2c             	sub    esp,0x2c
c00163f8:	a1 00 05 00 00       	mov    eax,ds:0x500
c00163fd:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016402:	89 f0                	mov    eax,esi
c0016404:	ee                   	out    dx,al
c0016405:	bb fb 03 00 00       	mov    ebx,0x3fb
c001640a:	b0 80                	mov    al,0x80
c001640c:	89 da                	mov    edx,ebx
c001640e:	ee                   	out    dx,al
c001640f:	b1 03                	mov    cl,0x3
c0016411:	ba f8 03 00 00       	mov    edx,0x3f8
c0016416:	88 c8                	mov    al,cl
c0016418:	ee                   	out    dx,al
c0016419:	89 f0                	mov    eax,esi
c001641b:	89 fa                	mov    edx,edi
c001641d:	ee                   	out    dx,al
c001641e:	88 c8                	mov    al,cl
c0016420:	89 da                	mov    edx,ebx
c0016422:	ee                   	out    dx,al
c0016423:	b0 c7                	mov    al,0xc7
c0016425:	ba fa 03 00 00       	mov    edx,0x3fa
c001642a:	ee                   	out    dx,al
c001642b:	b0 0b                	mov    al,0xb
c001642d:	ba fc 03 00 00       	mov    edx,0x3fc
c0016432:	ee                   	out    dx,al
c0016433:	68 44 0d 03 c0       	push   0xc0030d44
c0016438:	e8 89 2d 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001643d:	e8 6f 94 00 00       	call   c001f8b1 <KeDisplaySplashScreen()>
c0016442:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016447:	05 ff 0f 00 00       	add    eax,0xfff
c001644c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016451:	89 04 24             	mov    DWORD PTR [esp],eax
c0016454:	e8 b3 03 00 00       	call   c001680c <Phys::physicalMemorySetup(unsigned int)>
c0016459:	e8 27 1c 00 00       	call   c0018085 <Virt::virtualMemorySetup()>
c001645e:	e8 98 93 00 00       	call   c001f7fb <KeInitialiseAtexit()>
c0016463:	58                   	pop    eax
c0016464:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016468:	53                   	push   ebx
c0016469:	e8 14 1f 00 00       	call   c0018382 <VAS::VAS()>
c001646e:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016474:	e8 a1 80 01 00       	call   c002e51a <_init>
c0016479:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0016480:	e8 0a ff ff ff       	call   c001638f <malloc>
c0016485:	89 04 24             	mov    DWORD PTR [esp],eax
c0016488:	89 c6                	mov    esi,eax
c001648a:	e8 37 f2 ff ff       	call   c00156c6 <Computer::Computer()>
c001648f:	53                   	push   ebx
c0016490:	6a 00                	push   0x0
c0016492:	6a 00                	push   0x0
c0016494:	56                   	push   esi
c0016495:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c001649b:	e8 ec f5 ff ff       	call   c0015a8c <Computer::open(int, int, void*)>
c00164a0:	83 c4 14             	add    esp,0x14
c00164a3:	53                   	push   ebx
c00164a4:	e8 a3 1f 00 00       	call   c001844c <VAS::~VAS()>
c00164a9:	83 c4 30             	add    esp,0x30
c00164ac:	5b                   	pop    ebx
c00164ad:	5e                   	pop    esi
c00164ae:	5f                   	pop    edi
c00164af:	c3                   	ret    

c00164b0 <Phys::allocateDMA(unsigned long)>:
c00164b0:	55                   	push   ebp
c00164b1:	31 ed                	xor    ebp,ebp
c00164b3:	57                   	push   edi
c00164b4:	56                   	push   esi
c00164b5:	31 f6                	xor    esi,esi
c00164b7:	53                   	push   ebx
c00164b8:	31 db                	xor    ebx,ebx
c00164ba:	83 ec 1c             	sub    esp,0x1c
c00164bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164c1:	05 ff 0f 00 00       	add    eax,0xfff
c00164c6:	c1 e8 0c             	shr    eax,0xc
c00164c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164cd:	31 c0                	xor    eax,eax
c00164cf:	eb 1b                	jmp    c00164ec <Phys::allocateDMA(unsigned long)+0x3c>
c00164d1:	8d 78 01             	lea    edi,[eax+0x1]
c00164d4:	85 c0                	test   eax,eax
c00164d6:	0f 44 eb             	cmove  ebp,ebx
c00164d9:	0f 44 f3             	cmove  esi,ebx
c00164dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00164e0:	74 37                	je     c0016519 <Phys::allocateDMA(unsigned long)+0x69>
c00164e2:	89 f8                	mov    eax,edi
c00164e4:	83 c3 01             	add    ebx,0x1
c00164e7:	83 fb 0f             	cmp    ebx,0xf
c00164ea:	7f 13                	jg     c00164ff <Phys::allocateDMA(unsigned long)+0x4f>
c00164ec:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c00164f3:	74 dc                	je     c00164d1 <Phys::allocateDMA(unsigned long)+0x21>
c00164f5:	31 c0                	xor    eax,eax
c00164f7:	83 c3 01             	add    ebx,0x1
c00164fa:	83 fb 0f             	cmp    ebx,0xf
c00164fd:	7e ed                	jle    c00164ec <Phys::allocateDMA(unsigned long)+0x3c>
c00164ff:	83 ec 0c             	sub    esp,0xc
c0016502:	68 5c 0d 03 c0       	push   0xc0030d5c
c0016507:	e8 67 9b 00 00       	call   c0020073 <KePanic(char const*)>
c001650c:	83 c4 10             	add    esp,0x10
c001650f:	31 c0                	xor    eax,eax
c0016511:	83 c4 1c             	add    esp,0x1c
c0016514:	5b                   	pop    ebx
c0016515:	5e                   	pop    esi
c0016516:	5f                   	pop    edi
c0016517:	5d                   	pop    ebp
c0016518:	c3                   	ret    
c0016519:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001651d:	89 f2                	mov    edx,esi
c001651f:	c1 fa 04             	sar    edx,0x4
c0016522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016526:	01 f1                	add    ecx,esi
c0016528:	8d 51 0e             	lea    edx,[ecx+0xe]
c001652b:	83 e9 01             	sub    ecx,0x1
c001652e:	0f 48 ca             	cmovs  ecx,edx
c0016531:	c1 f9 04             	sar    ecx,0x4
c0016534:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016538:	74 06                	je     c0016540 <Phys::allocateDMA(unsigned long)+0x90>
c001653a:	89 eb                	mov    ebx,ebp
c001653c:	31 c0                	xor    eax,eax
c001653e:	eb b7                	jmp    c00164f7 <Phys::allocateDMA(unsigned long)+0x47>
c0016540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016544:	85 d2                	test   edx,edx
c0016546:	74 17                	je     c001655f <Phys::allocateDMA(unsigned long)+0xaf>
c0016548:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c001654e:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c0016555:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016558:	83 c2 01             	add    edx,0x1
c001655b:	39 d0                	cmp    eax,edx
c001655d:	75 f6                	jne    c0016555 <Phys::allocateDMA(unsigned long)+0xa5>
c001655f:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001656d:	01 c2                	add    edx,eax
c001656f:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016575:	85 c9                	test   ecx,ecx
c0016577:	74 17                	je     c0016590 <Phys::allocateDMA(unsigned long)+0xe0>
c0016579:	83 ec 0c             	sub    esp,0xc
c001657c:	68 5c 0d 03 c0       	push   0xc0030d5c
c0016581:	e8 ed 9a 00 00       	call   c0020073 <KePanic(char const*)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	89 f8                	mov    eax,edi
c001658b:	e9 54 ff ff ff       	jmp    c00164e4 <Phys::allocateDMA(unsigned long)+0x34>
c0016590:	c1 e6 0c             	shl    esi,0xc
c0016593:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0016599:	e9 73 ff ff ff       	jmp    c0016511 <Phys::allocateDMA(unsigned long)+0x61>

c001659e <Phys::freeDMA(unsigned long, unsigned long)>:
c001659e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165a2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165a8:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165ad:	c1 ea 0c             	shr    edx,0xc
c00165b0:	29 d0                	sub    eax,edx
c00165b2:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165bb:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00165c0:	c1 e8 0c             	shr    eax,0xc
c00165c3:	85 d2                	test   edx,edx
c00165c5:	74 11                	je     c00165d8 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00165c7:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00165cc:	01 c2                	add    edx,eax
c00165ce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00165d1:	83 c0 01             	add    eax,0x1
c00165d4:	39 d0                	cmp    eax,edx
c00165d6:	75 f6                	jne    c00165ce <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00165d8:	c3                   	ret    

c00165d9 <Phys::setPageState(unsigned long, bool)>:
c00165d9:	57                   	push   edi
c00165da:	56                   	push   esi
c00165db:	8b 35 98 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033798
c00165e1:	53                   	push   ebx
c00165e2:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00165e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00165ef:	89 ca                	mov    edx,ecx
c00165f1:	83 e1 07             	and    ecx,0x7
c00165f4:	c1 ea 03             	shr    edx,0x3
c00165f7:	0f b6 c0             	movzx  eax,al
c00165fa:	d3 c3                	rol    ebx,cl
c00165fc:	01 d6                	add    esi,edx
c00165fe:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016601:	d3 e0                	shl    eax,cl
c0016603:	21 fb                	and    ebx,edi
c0016605:	88 1e                	mov    BYTE PTR [esi],bl
c0016607:	8b 1d 98 37 03 c0    	mov    ebx,DWORD PTR ds:0xc0033798
c001660d:	01 da                	add    edx,ebx
c001660f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016611:	09 c8                	or     eax,ecx
c0016613:	88 02                	mov    BYTE PTR [edx],al
c0016615:	5b                   	pop    ebx
c0016616:	5e                   	pop    esi
c0016617:	5f                   	pop    edi
c0016618:	c3                   	ret    

c0016619 <Phys::getPageState(unsigned long)>:
c0016619:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001661d:	8b 15 98 37 03 c0    	mov    edx,DWORD PTR ds:0xc0033798
c0016623:	89 c8                	mov    eax,ecx
c0016625:	83 e1 07             	and    ecx,0x7
c0016628:	c1 e8 03             	shr    eax,0x3
c001662b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001662f:	d3 f8                	sar    eax,cl
c0016631:	83 e0 01             	and    eax,0x1
c0016634:	c3                   	ret    

c0016635 <Phys::freePage(unsigned long)>:
c0016635:	53                   	push   ebx
c0016636:	83 ec 08             	sub    esp,0x8
c0016639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001663d:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016643:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016649:	76 41                	jbe    c001668c <Phys::freePage(unsigned long)+0x57>
c001664b:	c1 e8 0c             	shr    eax,0xc
c001664e:	50                   	push   eax
c001664f:	89 c3                	mov    ebx,eax
c0016651:	e8 c3 ff ff ff       	call   c0016619 <Phys::getPageState(unsigned long)>
c0016656:	5a                   	pop    edx
c0016657:	84 c0                	test   al,al
c0016659:	74 20                	je     c001667b <Phys::freePage(unsigned long)+0x46>
c001665b:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016660:	83 ec 08             	sub    esp,0x8
c0016663:	6a 00                	push   0x0
c0016665:	53                   	push   ebx
c0016666:	83 e8 01             	sub    eax,0x1
c0016669:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001666e:	e8 66 ff ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016673:	83 c4 10             	add    esp,0x10
c0016676:	83 c4 08             	add    esp,0x8
c0016679:	5b                   	pop    ebx
c001667a:	c3                   	ret    
c001667b:	c7 44 24 10 01 0e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030e01
c0016683:	83 c4 08             	add    esp,0x8
c0016686:	5b                   	pop    ebx
c0016687:	e9 e7 99 00 00       	jmp    c0020073 <KePanic(char const*)>
c001668c:	68 00 10 00 00       	push   0x1000
c0016691:	50                   	push   eax
c0016692:	e8 07 ff ff ff       	call   c001659e <Phys::freeDMA(unsigned long, unsigned long)>
c0016697:	59                   	pop    ecx
c0016698:	5b                   	pop    ebx
c0016699:	83 c4 08             	add    esp,0x8
c001669c:	5b                   	pop    ebx
c001669d:	c3                   	ret    

c001669e <Phys::allocatePage()>:
c001669e:	56                   	push   esi
c001669f:	53                   	push   ebx
c00166a0:	83 ec 14             	sub    esp,0x14
c00166a3:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166a9:	89 f3                	mov    ebx,esi
c00166ab:	eb 0a                	jmp    c00166b7 <Phys::allocatePage()+0x19>
c00166ad:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00166b3:	39 de                	cmp    esi,ebx
c00166b5:	74 26                	je     c00166dd <Phys::allocatePage()+0x3f>
c00166b7:	53                   	push   ebx
c00166b8:	e8 5c ff ff ff       	call   c0016619 <Phys::getPageState(unsigned long)>
c00166bd:	5a                   	pop    edx
c00166be:	84 c0                	test   al,al
c00166c0:	74 67                	je     c0016729 <Phys::allocatePage()+0x8b>
c00166c2:	83 c3 01             	add    ebx,0x1
c00166c5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00166cb:	75 e0                	jne    c00166ad <Phys::allocatePage()+0xf>
c00166cd:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00166d7:	31 db                	xor    ebx,ebx
c00166d9:	39 de                	cmp    esi,ebx
c00166db:	75 da                	jne    c00166b7 <Phys::allocatePage()+0x19>
c00166dd:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c00166e2:	83 ec 0c             	sub    esp,0xc
c00166e5:	83 f0 01             	xor    eax,0x1
c00166e8:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c00166ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00166fb:	50                   	push   eax
c00166fc:	e8 79 27 00 00       	call   c0018e7a <VAS::scanForEviction()>
c0016701:	83 c4 10             	add    esp,0x10
c0016704:	85 c0                	test   eax,eax
c0016706:	75 48                	jne    c0016750 <Phys::allocatePage()+0xb2>
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	68 84 0d 03 c0       	push   0xc0030d84
c0016710:	e8 5e 99 00 00       	call   c0020073 <KePanic(char const*)>
c0016715:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001671b:	83 c4 10             	add    esp,0x10
c001671e:	53                   	push   ebx
c001671f:	e8 f5 fe ff ff       	call   c0016619 <Phys::getPageState(unsigned long)>
c0016724:	5a                   	pop    edx
c0016725:	84 c0                	test   al,al
c0016727:	75 99                	jne    c00166c2 <Phys::allocatePage()+0x24>
c0016729:	6a 01                	push   0x1
c001672b:	53                   	push   ebx
c001672c:	e8 a8 fe ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016731:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016737:	59                   	pop    ecx
c0016738:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c001673d:	5b                   	pop    ebx
c001673e:	83 c2 01             	add    edx,0x1
c0016741:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016747:	c1 e0 0c             	shl    eax,0xc
c001674a:	83 c4 14             	add    esp,0x14
c001674d:	5b                   	pop    ebx
c001674e:	5e                   	pop    esi
c001674f:	c3                   	ret    
c0016750:	83 ec 08             	sub    esp,0x8
c0016753:	89 c2                	mov    edx,eax
c0016755:	6a 01                	push   0x1
c0016757:	c1 ea 0c             	shr    edx,0xc
c001675a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001675e:	52                   	push   edx
c001675f:	e8 75 fe ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016764:	83 c4 10             	add    esp,0x10
c0016767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001676b:	eb dd                	jmp    c001674a <Phys::allocatePage()+0xac>

c001676d <Phys::allocateContiguousPages(int)>:
c001676d:	57                   	push   edi
c001676e:	56                   	push   esi
c001676f:	53                   	push   ebx
c0016770:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016774:	fa                   	cli    
c0016775:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001677a:	31 db                	xor    ebx,ebx
c001677c:	83 c0 01             	add    eax,0x1
c001677f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016784:	85 db                	test   ebx,ebx
c0016786:	75 11                	jne    c0016799 <Phys::allocateContiguousPages(int)+0x2c>
c0016788:	e8 11 ff ff ff       	call   c001669e <Phys::allocatePage()>
c001678d:	83 fe 01             	cmp    esi,0x1
c0016790:	89 c7                	mov    edi,eax
c0016792:	74 21                	je     c00167b5 <Phys::allocateContiguousPages(int)+0x48>
c0016794:	bb 01 00 00 00       	mov    ebx,0x1
c0016799:	e8 00 ff ff ff       	call   c001669e <Phys::allocatePage()>
c001679e:	89 da                	mov    edx,ebx
c00167a0:	c1 e2 0c             	shl    edx,0xc
c00167a3:	01 fa                	add    edx,edi
c00167a5:	39 c2                	cmp    edx,eax
c00167a7:	74 22                	je     c00167cb <Phys::allocateContiguousPages(int)+0x5e>
c00167a9:	83 fe 01             	cmp    esi,0x1
c00167ac:	bb 01 00 00 00       	mov    ebx,0x1
c00167b1:	89 c7                	mov    edi,eax
c00167b3:	75 e4                	jne    c0016799 <Phys::allocateContiguousPages(int)+0x2c>
c00167b5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167ba:	83 e8 01             	sub    eax,0x1
c00167bd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167c2:	75 01                	jne    c00167c5 <Phys::allocateContiguousPages(int)+0x58>
c00167c4:	fb                   	sti    
c00167c5:	5b                   	pop    ebx
c00167c6:	89 f8                	mov    eax,edi
c00167c8:	5e                   	pop    esi
c00167c9:	5f                   	pop    edi
c00167ca:	c3                   	ret    
c00167cb:	83 c3 01             	add    ebx,0x1
c00167ce:	39 f3                	cmp    ebx,esi
c00167d0:	75 b2                	jne    c0016784 <Phys::allocateContiguousPages(int)+0x17>
c00167d2:	eb e1                	jmp    c00167b5 <Phys::allocateContiguousPages(int)+0x48>

c00167d4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00167d4:	56                   	push   esi
c00167d5:	53                   	push   ebx
c00167d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167da:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c00167e0:	73 06                	jae    c00167e8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00167e2:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c00167e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167ec:	c1 eb 0c             	shr    ebx,0xc
c00167ef:	c1 e8 0c             	shr    eax,0xc
c00167f2:	39 d8                	cmp    eax,ebx
c00167f4:	73 13                	jae    c0016809 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00167f6:	6a 00                	push   0x0
c00167f8:	50                   	push   eax
c00167f9:	8d 70 01             	lea    esi,[eax+0x1]
c00167fc:	e8 d8 fd ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016801:	39 f3                	cmp    ebx,esi
c0016803:	89 f0                	mov    eax,esi
c0016805:	5a                   	pop    edx
c0016806:	59                   	pop    ecx
c0016807:	75 ed                	jne    c00167f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016809:	5b                   	pop    ebx
c001680a:	5e                   	pop    esi
c001680b:	c3                   	ret    

c001680c <Phys::physicalMemorySetup(unsigned int)>:
c001680c:	55                   	push   ebp
c001680d:	57                   	push   edi
c001680e:	56                   	push   esi
c001680f:	53                   	push   ebx
c0016810:	31 db                	xor    ebx,ebx
c0016812:	83 ec 40             	sub    esp,0x40
c0016815:	6a 10                	push   0x10
c0016817:	6a 00                	push   0x0
c0016819:	68 f0 a9 03 c0       	push   0xc003a9f0
c001681e:	e8 cd 9c fe ff       	call   c00004f0 <memset>
c0016823:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016827:	25 00 f0 ff ff       	and    eax,0xfffff000
c001682c:	05 00 10 00 00       	add    eax,0x1000
c0016831:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016835:	5a                   	pop    edx
c0016836:	59                   	pop    ecx
c0016837:	50                   	push   eax
c0016838:	68 17 0e 03 c0       	push   0xc0030e17
c001683d:	e8 84 29 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0016842:	83 c4 10             	add    esp,0x10
c0016845:	83 ec 08             	sub    esp,0x8
c0016848:	6a 01                	push   0x1
c001684a:	53                   	push   ebx
c001684b:	83 c3 01             	add    ebx,0x1
c001684e:	e8 86 fd ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016853:	83 c4 10             	add    esp,0x10
c0016856:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001685c:	75 e7                	jne    c0016845 <Phys::physicalMemorySetup(unsigned int)+0x39>
c001685e:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016865:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c001686c:	c1 e0 08             	shl    eax,0x8
c001686f:	09 c2                	or     edx,eax
c0016871:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016875:	0f 84 43 01 00 00    	je     c00169be <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c001687b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016883:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016888:	e9 82 00 00 00       	jmp    c001690f <Phys::physicalMemorySetup(unsigned int)+0x103>
c001688d:	ba 00 00 08 00       	mov    edx,0x80000
c0016892:	89 c1                	mov    ecx,eax
c0016894:	39 f2                	cmp    edx,esi
c0016896:	19 f9                	sbb    ecx,edi
c0016898:	0f 82 c0 00 00 00    	jb     c001695e <Phys::physicalMemorySetup(unsigned int)+0x152>
c001689e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168a2:	89 c5                	mov    ebp,eax
c00168a4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00168a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168ac:	19 cd                	sbb    ebp,ecx
c00168ae:	0f 83 af 00 00 00    	jae    c0016963 <Phys::physicalMemorySetup(unsigned int)+0x157>
c00168b4:	89 d6                	mov    esi,edx
c00168b6:	ba 00 00 0a 00       	mov    edx,0xa0000
c00168bb:	39 f2                	cmp    edx,esi
c00168bd:	89 cf                	mov    edi,ecx
c00168bf:	19 c8                	sbb    eax,ecx
c00168c1:	73 07                	jae    c00168ca <Phys::physicalMemorySetup(unsigned int)+0xbe>
c00168c3:	be 00 00 0a 00       	mov    esi,0xa0000
c00168c8:	31 ff                	xor    edi,edi
c00168ca:	89 f2                	mov    edx,esi
c00168cc:	b8 ff 1f 00 00       	mov    eax,0x1fff
c00168d1:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00168d7:	89 f9                	mov    ecx,edi
c00168d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168dd:	83 d1 ff             	adc    ecx,0xffffffff
c00168e0:	39 d0                	cmp    eax,edx
c00168e2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00168e6:	b8 00 00 00 00       	mov    eax,0x0
c00168eb:	19 c8                	sbb    eax,ecx
c00168ed:	0f 82 9d 01 00 00    	jb     c0016a90 <Phys::physicalMemorySetup(unsigned int)+0x284>
c00168f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168f7:	83 c3 18             	add    ebx,0x18
c00168fa:	83 c6 01             	add    esi,0x1
c00168fd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016905:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016909:	0f 84 bf 00 00 00    	je     c00169ce <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c001690f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016911:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016917:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001691a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001691e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016925:	01 f0                	add    eax,esi
c0016927:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001692b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001692f:	55                   	push   ebp
c0016930:	11 fa                	adc    edx,edi
c0016932:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016936:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001693a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001693e:	50                   	push   eax
c001693f:	56                   	push   esi
c0016940:	68 b4 0d 03 c0       	push   0xc0030db4
c0016945:	e8 7c 28 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001694a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	09 f8                	or     eax,edi
c0016953:	75 79                	jne    c00169ce <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016955:	83 fd 01             	cmp    ebp,0x1
c0016958:	0f 84 2f ff ff ff    	je     c001688d <Phys::physicalMemorySetup(unsigned int)+0x81>
c001695e:	83 fd 01             	cmp    ebp,0x1
c0016961:	75 90                	jne    c00168f3 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016963:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016967:	31 d2                	xor    edx,edx
c0016969:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001696d:	89 c8                	mov    eax,ecx
c001696f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016973:	19 d1                	sbb    ecx,edx
c0016975:	0f 82 78 ff ff ff    	jb     c00168f3 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c001697b:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016980:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016984:	b9 00 00 00 00       	mov    ecx,0x0
c0016989:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c001698d:	0f 83 60 ff ff ff    	jae    c00168f3 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016993:	39 c6                	cmp    esi,eax
c0016995:	19 d7                	sbb    edi,edx
c0016997:	0f 83 ff 00 00 00    	jae    c0016a9c <Phys::physicalMemorySetup(unsigned int)+0x290>
c001699d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00169a1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00169a5:	29 c7                	sub    edi,eax
c00169a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169ab:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00169af:	19 d5                	sbb    ebp,edx
c00169b1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00169b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169b9:	e9 de 00 00 00       	jmp    c0016a9c <Phys::physicalMemorySetup(unsigned int)+0x290>
c00169be:	83 ec 0c             	sub    esp,0xc
c00169c1:	68 2f 0e 03 c0       	push   0xc0030e2f
c00169c6:	e8 a8 96 00 00       	call   c0020073 <KePanic(char const*)>
c00169cb:	83 c4 10             	add    esp,0x10
c00169ce:	83 ec 08             	sub    esp,0x8
c00169d1:	bb 60 00 00 00       	mov    ebx,0x60
c00169d6:	6a 00                	push   0x0
c00169d8:	6a 06                	push   0x6
c00169da:	e8 fa fb ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c00169df:	58                   	pop    eax
c00169e0:	5a                   	pop    edx
c00169e1:	6a 00                	push   0x0
c00169e3:	6a 07                	push   0x7
c00169e5:	e8 ef fb ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c00169ea:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	83 c1 02             	add    ecx,0x2
c00169f6:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c00169fc:	83 ec 08             	sub    esp,0x8
c00169ff:	6a 00                	push   0x0
c0016a01:	53                   	push   ebx
c0016a02:	83 c3 01             	add    ebx,0x1
c0016a05:	e8 cf fb ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016a0a:	83 c4 10             	add    esp,0x10
c0016a0d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016a13:	75 e7                	jne    c00169fc <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016a15:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a1a:	bb 40 01 00 00       	mov    ebx,0x140
c0016a1f:	83 c0 20             	add    eax,0x20
c0016a22:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a27:	eb 26                	jmp    c0016a4f <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016a29:	83 ec 08             	sub    esp,0x8
c0016a2c:	6a 00                	push   0x0
c0016a2e:	53                   	push   ebx
c0016a2f:	83 c3 01             	add    ebx,0x1
c0016a32:	e8 a2 fb ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016a37:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	83 c0 01             	add    eax,0x1
c0016a42:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016a48:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a4d:	74 07                	je     c0016a56 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016a4f:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016a54:	7e d3                	jle    c0016a29 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016a56:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016a5b:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016a60:	7f 26                	jg     c0016a88 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016a62:	83 ec 08             	sub    esp,0x8
c0016a65:	6a 00                	push   0x0
c0016a67:	53                   	push   ebx
c0016a68:	83 c3 01             	add    ebx,0x1
c0016a6b:	e8 69 fb ff ff       	call   c00165d9 <Phys::setPageState(unsigned long, bool)>
c0016a70:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	83 c0 01             	add    eax,0x1
c0016a7b:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016a81:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a86:	75 d3                	jne    c0016a5b <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016a88:	83 c4 3c             	add    esp,0x3c
c0016a8b:	5b                   	pop    ebx
c0016a8c:	5e                   	pop    esi
c0016a8d:	5f                   	pop    edi
c0016a8e:	5d                   	pop    ebp
c0016a8f:	c3                   	ret    
c0016a90:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016a94:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016a9c:	83 ec 04             	sub    esp,0x4
c0016a9f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016aa3:	56                   	push   esi
c0016aa4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016aa8:	57                   	push   edi
c0016aa9:	68 d8 0d 03 c0       	push   0xc0030dd8
c0016aae:	e8 13 27 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0016ab3:	5d                   	pop    ebp
c0016ab4:	58                   	pop    eax
c0016ab5:	56                   	push   esi
c0016ab6:	57                   	push   edi
c0016ab7:	e8 18 fd ff ff       	call   c00167d4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016abc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ac0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ac4:	83 c4 0c             	add    esp,0xc
c0016ac7:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016acd:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016ad1:	01 f0                	add    eax,esi
c0016ad3:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ad8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016adf:	52                   	push   edx
c0016ae0:	50                   	push   eax
c0016ae1:	68 3d 0e 03 c0       	push   0xc0030e3d
c0016ae6:	e8 db 26 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	e9 00 fe ff ff       	jmp    c00168f3 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016af3:	90                   	nop

c0016af4 <Pipe::isAtty()>:
c0016af4:	31 c0                	xor    eax,eax
c0016af6:	c3                   	ret    
c0016af7:	90                   	nop

c0016af8 <Pipe::~Pipe()>:
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	ba 9c 0e 03 c0       	mov    edx,0xc0030e9c
c0016b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b04:	89 10                	mov    DWORD PTR [eax],edx
c0016b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b0a:	83 ec 0c             	sub    esp,0xc
c0016b0d:	50                   	push   eax
c0016b0e:	e8 35 11 00 00       	call   c0017c48 <UnixFile::~UnixFile()>
c0016b13:	83 c4 10             	add    esp,0x10
c0016b16:	90                   	nop
c0016b17:	83 c4 0c             	add    esp,0xc
c0016b1a:	c3                   	ret    
c0016b1b:	90                   	nop

c0016b1c <Pipe::~Pipe()>:
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	83 ec 0c             	sub    esp,0xc
c0016b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b26:	e8 cd ff ff ff       	call   c0016af8 <Pipe::~Pipe()>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	83 ec 08             	sub    esp,0x8
c0016b31:	6a 20                	push   0x20
c0016b33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b37:	e8 8c 25 00 00       	call   c00190c8 <operator delete(void*, unsigned long)>
c0016b3c:	83 c4 10             	add    esp,0x10
c0016b3f:	83 c4 0c             	add    esp,0xc
c0016b42:	c3                   	ret    
c0016b43:	90                   	nop

c0016b44 <Pipe::write(unsigned long long, void*, int*)>:
c0016b44:	55                   	push   ebp
c0016b45:	57                   	push   edi
c0016b46:	56                   	push   esi
c0016b47:	53                   	push   ebx
c0016b48:	83 ec 1c             	sub    esp,0x1c
c0016b4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b57:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016b5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b5e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016b61:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b64:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016b68:	89 d8                	mov    eax,ebx
c0016b6a:	89 d6                	mov    esi,edx
c0016b6c:	89 d7                	mov    edi,edx
c0016b6e:	c1 ff 1f             	sar    edi,0x1f
c0016b71:	03 34 24             	add    esi,DWORD PTR [esp]
c0016b74:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016b78:	c1 f8 1f             	sar    eax,0x1f
c0016b7b:	39 f3                	cmp    ebx,esi
c0016b7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b85:	19 f8                	sbb    eax,edi
c0016b87:	b8 01 00 00 00       	mov    eax,0x1
c0016b8c:	72 72                	jb     c0016c00 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016b8e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016b91:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016b95:	01 d0                	add    eax,edx
c0016b97:	99                   	cdq    
c0016b98:	f7 fb                	idiv   ebx
c0016b9a:	89 d8                	mov    eax,ebx
c0016b9c:	29 d0                	sub    eax,edx
c0016b9e:	89 d6                	mov    esi,edx
c0016ba0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016ba3:	89 c3                	mov    ebx,eax
c0016ba5:	c1 fb 1f             	sar    ebx,0x1f
c0016ba8:	39 c2                	cmp    edx,eax
c0016baa:	19 df                	sbb    edi,ebx
c0016bac:	bb 00 00 00 00       	mov    ebx,0x0
c0016bb1:	72 04                	jb     c0016bb7 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016bb3:	89 d3                	mov    ebx,edx
c0016bb5:	29 c3                	sub    ebx,eax
c0016bb7:	89 d0                	mov    eax,edx
c0016bb9:	29 d8                	sub    eax,ebx
c0016bbb:	74 0d                	je     c0016bca <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016bbd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016bc0:	89 c1                	mov    ecx,eax
c0016bc2:	01 f7                	add    edi,esi
c0016bc4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016bc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bca:	85 db                	test   ebx,ebx
c0016bcc:	74 0d                	je     c0016bdb <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016bce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016bd2:	89 d9                	mov    ecx,ebx
c0016bd4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016bd7:	89 c6                	mov    esi,eax
c0016bd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bdb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016bde:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016be3:	75 10                	jne    c0016bf5 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016be5:	83 ec 0c             	sub    esp,0xc
c0016be8:	68 59 0e 03 c0       	push   0xc0030e59
c0016bed:	e8 81 94 00 00       	call   c0020073 <KePanic(char const*)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bf9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016bfc:	89 08                	mov    DWORD PTR [eax],ecx
c0016bfe:	31 c0                	xor    eax,eax
c0016c00:	83 c4 1c             	add    esp,0x1c
c0016c03:	5b                   	pop    ebx
c0016c04:	5e                   	pop    esi
c0016c05:	5f                   	pop    edi
c0016c06:	5d                   	pop    ebp
c0016c07:	c3                   	ret    

c0016c08 <Pipe::read(unsigned long long, void*, int*)>:
c0016c08:	55                   	push   ebp
c0016c09:	57                   	push   edi
c0016c0a:	56                   	push   esi
c0016c0b:	53                   	push   ebx
c0016c0c:	83 ec 1c             	sub    esp,0x1c
c0016c0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c1b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c1e:	89 c8                	mov    eax,ecx
c0016c20:	99                   	cdq    
c0016c21:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c25:	74 24                	je     c0016c4b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c27:	39 f9                	cmp    ecx,edi
c0016c29:	89 d1                	mov    ecx,edx
c0016c2b:	19 f1                	sbb    ecx,esi
c0016c2d:	73 1c                	jae    c0016c4b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c2f:	fa                   	cli    
c0016c30:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c36:	e8 d1 df 00 00       	call   c0024c0c <schedule()>
c0016c3b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c40:	48                   	dec    eax
c0016c41:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c46:	75 d3                	jne    c0016c1b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c48:	fb                   	sti    
c0016c49:	eb d0                	jmp    c0016c1b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c4b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016c4f:	39 f8                	cmp    eax,edi
c0016c51:	89 d1                	mov    ecx,edx
c0016c53:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016c57:	19 f1                	sbb    ecx,esi
c0016c59:	73 08                	jae    c0016c63 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016c5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c63:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016c66:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016c69:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016c6d:	29 f7                	sub    edi,esi
c0016c6f:	89 f8                	mov    eax,edi
c0016c71:	99                   	cdq    
c0016c72:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016c76:	89 d0                	mov    eax,edx
c0016c78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c7c:	19 c2                	sbb    edx,eax
c0016c7e:	89 f8                	mov    eax,edi
c0016c80:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016c85:	89 ea                	mov    edx,ebp
c0016c87:	29 c2                	sub    edx,eax
c0016c89:	85 c0                	test   eax,eax
c0016c8b:	74 0b                	je     c0016c98 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016c8d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016c90:	89 c1                	mov    ecx,eax
c0016c92:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016c96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c98:	85 d2                	test   edx,edx
c0016c9a:	74 0d                	je     c0016ca9 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016c9c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ca0:	89 d1                	mov    ecx,edx
c0016ca2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016ca5:	89 c7                	mov    edi,eax
c0016ca7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ca9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016cac:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016caf:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016cb2:	99                   	cdq    
c0016cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016cb7:	89 f7                	mov    edi,esi
c0016cb9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016cbd:	c1 ff 1f             	sar    edi,0x1f
c0016cc0:	57                   	push   edi
c0016cc1:	56                   	push   esi
c0016cc2:	52                   	push   edx
c0016cc3:	50                   	push   eax
c0016cc4:	e8 37 77 01 00       	call   c002e400 <__umoddi3>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016cd1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016cd4:	75 10                	jne    c0016ce6 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016cd6:	83 ec 0c             	sub    esp,0xc
c0016cd9:	68 76 0e 03 c0       	push   0xc0030e76
c0016cde:	e8 90 93 00 00       	call   c0020073 <KePanic(char const*)>
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016cee:	89 10                	mov    DWORD PTR [eax],edx
c0016cf0:	83 c4 1c             	add    esp,0x1c
c0016cf3:	31 c0                	xor    eax,eax
c0016cf5:	5b                   	pop    ebx
c0016cf6:	5e                   	pop    esi
c0016cf7:	5f                   	pop    edi
c0016cf8:	5d                   	pop    ebp
c0016cf9:	c3                   	ret    

c0016cfa <Pipe::Pipe(int)>:
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d01:	83 ec 08             	sub    esp,0x8
c0016d04:	6a 00                	push   0x0
c0016d06:	50                   	push   eax
c0016d07:	e8 56 0d 00 00       	call   c0017a62 <UnixFile::UnixFile(int)>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	ba 9c 0e 03 c0       	mov    edx,0xc0030e9c
c0016d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d18:	89 10                	mov    DWORD PTR [eax],edx
c0016d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d29:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d34:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d3f:	83 ec 0c             	sub    esp,0xc
c0016d42:	50                   	push   eax
c0016d43:	e8 47 f6 ff ff       	call   c001638f <malloc>
c0016d48:	83 c4 10             	add    esp,0x10
c0016d4b:	89 c2                	mov    edx,eax
c0016d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016d5c:	90                   	nop
c0016d5d:	83 c4 0c             	add    esp,0xc
c0016d60:	c3                   	ret    
c0016d61:	90                   	nop

c0016d62 <VgaText::isAtty()>:
c0016d62:	b0 01                	mov    al,0x1
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop

c0016d66 <VgaText::~VgaText()>:
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	ba e4 0e 03 c0       	mov    edx,0xc0030ee4
c0016d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d72:	89 10                	mov    DWORD PTR [eax],edx
c0016d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	50                   	push   eax
c0016d7c:	e8 c7 0e 00 00       	call   c0017c48 <UnixFile::~UnixFile()>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	90                   	nop
c0016d85:	83 c4 0c             	add    esp,0xc
c0016d88:	c3                   	ret    
c0016d89:	90                   	nop

c0016d8a <VgaText::~VgaText()>:
c0016d8a:	83 ec 0c             	sub    esp,0xc
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d94:	e8 cd ff ff ff       	call   c0016d66 <VgaText::~VgaText()>
c0016d99:	83 c4 10             	add    esp,0x10
c0016d9c:	83 ec 08             	sub    esp,0x8
c0016d9f:	68 84 01 00 00       	push   0x184
c0016da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da8:	e8 1b 23 00 00       	call   c00190c8 <operator delete(void*, unsigned long)>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	83 c4 0c             	add    esp,0xc
c0016db3:	c3                   	ret    

c0016db4 <VgaText::read(unsigned long long, void*, int*)>:
c0016db4:	83 ec 10             	sub    esp,0x10
c0016db7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016dbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016dbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc3:	e8 82 53 00 00       	call   c001c14a <readKeyboard(VgaText*, char*, unsigned long)>
c0016dc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016dcc:	89 02                	mov    DWORD PTR [edx],eax
c0016dce:	31 c0                	xor    eax,eax
c0016dd0:	83 c4 1c             	add    esp,0x1c
c0016dd3:	c3                   	ret    

c0016dd4 <setTerminalScrollLock(bool)>:
c0016dd4:	c3                   	ret    

c0016dd5 <doTerminalCycle()>:
c0016dd5:	c3                   	ret    

c0016dd6 <addToTerminalCycle(VgaText*)>:
c0016dd6:	c3                   	ret    

c0016dd7 <scrollTerminalScrollLock(int)>:
c0016dd7:	c3                   	ret    

c0016dd8 <VgaText::updateTitle()>:
c0016dd8:	c3                   	ret    
c0016dd9:	90                   	nop

c0016dda <VgaText::load()>:
c0016dda:	c3                   	ret    
c0016ddb:	90                   	nop

c0016ddc <VgaText::updateCursor()>:
c0016ddc:	83 ec 14             	sub    esp,0x14
c0016ddf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016de3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016de6:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016de9:	e8 be 0b 01 00       	call   c00279ac <HalConsoleCursorUpdate(int, int)>
c0016dee:	83 c4 1c             	add    esp,0x1c
c0016df1:	c3                   	ret    

c0016df2 <VgaText::doANSI_SGR(int)>:
c0016df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dfa:	85 d2                	test   edx,edx
c0016dfc:	75 0b                	jne    c0016e09 <VgaText::doANSI_SGR(int)+0x17>
c0016dfe:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e01:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e04:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e07:	eb 59                	jmp    c0016e62 <VgaText::doANSI_SGR(int)+0x70>
c0016e09:	83 fa 07             	cmp    edx,0x7
c0016e0c:	75 0b                	jne    c0016e19 <VgaText::doANSI_SGR(int)+0x27>
c0016e0e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e11:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e14:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e17:	eb 49                	jmp    c0016e62 <VgaText::doANSI_SGR(int)+0x70>
c0016e19:	83 fa 1b             	cmp    edx,0x1b
c0016e1c:	74 e0                	je     c0016dfe <VgaText::doANSI_SGR(int)+0xc>
c0016e1e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e21:	83 f9 07             	cmp    ecx,0x7
c0016e24:	77 09                	ja     c0016e2f <VgaText::doANSI_SGR(int)+0x3d>
c0016e26:	8b 14 8d c0 37 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc840]
c0016e2d:	eb 20                	jmp    c0016e4f <VgaText::doANSI_SGR(int)+0x5d>
c0016e2f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e32:	83 f9 07             	cmp    ecx,0x7
c0016e35:	77 09                	ja     c0016e40 <VgaText::doANSI_SGR(int)+0x4e>
c0016e37:	8b 14 8d c0 37 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc840]
c0016e3e:	eb 22                	jmp    c0016e62 <VgaText::doANSI_SGR(int)+0x70>
c0016e40:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e43:	83 f9 07             	cmp    ecx,0x7
c0016e46:	77 0b                	ja     c0016e53 <VgaText::doANSI_SGR(int)+0x61>
c0016e48:	8b 14 95 78 36 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc988]
c0016e4f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e52:	c3                   	ret    
c0016e53:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016e56:	83 f9 07             	cmp    ecx,0x7
c0016e59:	77 0a                	ja     c0016e65 <VgaText::doANSI_SGR(int)+0x73>
c0016e5b:	8b 14 95 50 36 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc9b0]
c0016e62:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016e65:	c3                   	ret    

c0016e66 <VgaText::setDefaultBgColour(VgaColour)>:
c0016e66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e6e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016e71:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016e74:	c3                   	ret    
c0016e75:	90                   	nop

c0016e76 <VgaText::setDefaultFgColour(VgaColour)>:
c0016e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e7e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016e81:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e84:	c3                   	ret    
c0016e85:	90                   	nop

c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016e86:	53                   	push   ebx
c0016e87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016e8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016e8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e93:	51                   	push   ecx
c0016e94:	e8 cd ff ff ff       	call   c0016e66 <VgaText::setDefaultBgColour(VgaColour)>
c0016e99:	58                   	pop    eax
c0016e9a:	5a                   	pop    edx
c0016e9b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016e9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ea3:	5b                   	pop    ebx
c0016ea4:	eb d0                	jmp    c0016e76 <VgaText::setDefaultFgColour(VgaColour)>

c0016ea6 <VgaText::setTitleTextColour(VgaColour)>:
c0016ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016eb1:	c3                   	ret    

c0016eb2 <VgaText::setTitleColour(VgaColour)>:
c0016eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ebd:	c3                   	ret    

c0016ebe <VgaText::setTitle(char*)>:
c0016ebe:	c3                   	ret    
c0016ebf:	90                   	nop

c0016ec0 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ec4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016ec9:	83 e0 0f             	and    eax,0xf
c0016ecc:	c1 e2 04             	shl    edx,0x4
c0016ecf:	09 d0                	or     eax,edx
c0016ed1:	c3                   	ret    

c0016ed2 <VgaText::scrollScreen()>:
c0016ed2:	55                   	push   ebp
c0016ed3:	57                   	push   edi
c0016ed4:	56                   	push   esi
c0016ed5:	be 01 00 00 00       	mov    esi,0x1
c0016eda:	53                   	push   ebx
c0016edb:	83 ec 0c             	sub    esp,0xc
c0016ede:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ee2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016ee5:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016eeb:	31 ff                	xor    edi,edi
c0016eed:	01 e9                	add    ecx,ebp
c0016eef:	8a 01                	mov    al,BYTE PTR [ecx]
c0016ef1:	83 fe 18             	cmp    esi,0x18
c0016ef4:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016efa:	75 20                	jne    c0016f1c <VgaText::scrollScreen()+0x4a>
c0016efc:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f02:	74 15                	je     c0016f19 <VgaText::scrollScreen()+0x47>
c0016f04:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f08:	50                   	push   eax
c0016f09:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f0d:	50                   	push   eax
c0016f0e:	e8 ad ff ff ff       	call   c0016ec0 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f13:	5a                   	pop    edx
c0016f14:	5a                   	pop    edx
c0016f15:	88 01                	mov    BYTE PTR [ecx],al
c0016f17:	eb 03                	jmp    c0016f1c <VgaText::scrollScreen()+0x4a>
c0016f19:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f1c:	47                   	inc    edi
c0016f1d:	41                   	inc    ecx
c0016f1e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f24:	75 c9                	jne    c0016eef <VgaText::scrollScreen()+0x1d>
c0016f26:	46                   	inc    esi
c0016f27:	83 fe 19             	cmp    esi,0x19
c0016f2a:	75 b9                	jne    c0016ee5 <VgaText::scrollScreen()+0x13>
c0016f2c:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f32:	75 1f                	jne    c0016f53 <VgaText::scrollScreen()+0x81>
c0016f34:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f38:	74 05                	je     c0016f3f <VgaText::scrollScreen()+0x6d>
c0016f3a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f3d:	eb 14                	jmp    c0016f53 <VgaText::scrollScreen()+0x81>
c0016f3f:	50                   	push   eax
c0016f40:	50                   	push   eax
c0016f41:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f45:	50                   	push   eax
c0016f46:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f4a:	50                   	push   eax
c0016f4b:	e8 f0 08 01 00       	call   c0027840 <HalConsoleScroll(int, int)>
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016f57:	83 c4 0c             	add    esp,0xc
c0016f5a:	5b                   	pop    ebx
c0016f5b:	5e                   	pop    esi
c0016f5c:	5f                   	pop    edi
c0016f5d:	5d                   	pop    ebp
c0016f5e:	e9 79 fe ff ff       	jmp    c0016ddc <VgaText::updateCursor()>
c0016f63:	90                   	nop

c0016f64 <VgaText::combineCharAndColour(char, unsigned char)>:
c0016f64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016f69:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016f6e:	c1 e0 08             	shl    eax,0x8
c0016f71:	09 d0                	or     eax,edx
c0016f73:	c3                   	ret    

c0016f74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016f74:	55                   	push   ebp
c0016f75:	57                   	push   edi
c0016f76:	56                   	push   esi
c0016f77:	53                   	push   ebx
c0016f78:	83 ec 1c             	sub    esp,0x1c
c0016f7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f7f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f83:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f87:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f8f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f93:	0f b6 c3             	movzx  eax,bl
c0016f96:	50                   	push   eax
c0016f97:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f9c:	50                   	push   eax
c0016f9d:	e8 1e ff ff ff       	call   c0016ec0 <VgaText::combineColours(unsigned char, unsigned char)>
c0016fa2:	5a                   	pop    edx
c0016fa3:	59                   	pop    ecx
c0016fa4:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016fa9:	0f b6 c0             	movzx  eax,al
c0016fac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fb0:	50                   	push   eax
c0016fb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016fb5:	e8 aa ff ff ff       	call   c0016f64 <VgaText::combineCharAndColour(char, unsigned char)>
c0016fba:	5a                   	pop    edx
c0016fbb:	6b d7 50             	imul   edx,edi,0x50
c0016fbe:	59                   	pop    ecx
c0016fbf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016fc2:	01 f2                	add    edx,esi
c0016fc4:	0f b7 d2             	movzx  edx,dx
c0016fc7:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0016fcb:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0016fd1:	75 28                	jne    c0016ffb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0016fd3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0016fd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fdb:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0016fdf:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0016fe3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016fe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016feb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016fef:	83 c4 1c             	add    esp,0x1c
c0016ff2:	5b                   	pop    ebx
c0016ff3:	5e                   	pop    esi
c0016ff4:	5f                   	pop    edi
c0016ff5:	5d                   	pop    ebp
c0016ff6:	e9 4d 09 01 00       	jmp    c0027948 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0016ffb:	83 c4 1c             	add    esp,0x1c
c0016ffe:	5b                   	pop    ebx
c0016fff:	5e                   	pop    esi
c0017000:	5f                   	pop    edi
c0017001:	5d                   	pop    ebp
c0017002:	c3                   	ret    
c0017003:	90                   	nop

c0017004 <VgaText::getCursorX()>:
c0017004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017008:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001700b:	c3                   	ret    

c001700c <VgaText::getCursorY()>:
c001700c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017010:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017013:	c3                   	ret    

c0017014 <VgaText::setCursor(int, int)>:
c0017014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001701c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001701f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017023:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017026:	e9 b1 fd ff ff       	jmp    c0016ddc <VgaText::updateCursor()>

c001702b <setActiveTerminal(VgaText*)>:
c001702b:	53                   	push   ebx
c001702c:	83 ec 08             	sub    esp,0x8
c001702f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017033:	85 db                	test   ebx,ebx
c0017035:	75 11                	jne    c0017048 <setActiveTerminal(VgaText*)+0x1d>
c0017037:	c7 44 24 10 b0 0e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030eb0
c001703f:	83 c4 08             	add    esp,0x8
c0017042:	5b                   	pop    ebx
c0017043:	e9 2b 90 00 00       	jmp    c0020073 <KePanic(char const*)>
c0017048:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001704d:	85 c0                	test   eax,eax
c001704f:	74 0c                	je     c001705d <setActiveTerminal(VgaText*)+0x32>
c0017051:	83 ec 0c             	sub    esp,0xc
c0017054:	50                   	push   eax
c0017055:	e8 82 fd ff ff       	call   c0016ddc <VgaText::updateCursor()>
c001705a:	83 c4 10             	add    esp,0x10
c001705d:	50                   	push   eax
c001705e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017061:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0017067:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001706a:	53                   	push   ebx
c001706b:	e8 a4 ff ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c0017070:	83 c4 18             	add    esp,0x18
c0017073:	5b                   	pop    ebx
c0017074:	c3                   	ret    
c0017075:	90                   	nop

c0017076 <VgaText::clearScreen()>:
c0017076:	57                   	push   edi
c0017077:	56                   	push   esi
c0017078:	31 f6                	xor    esi,esi
c001707a:	53                   	push   ebx
c001707b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001707f:	52                   	push   edx
c0017080:	6a 00                	push   0x0
c0017082:	6a 00                	push   0x0
c0017084:	53                   	push   ebx
c0017085:	e8 8a ff ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c001708a:	83 c4 10             	add    esp,0x10
c001708d:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017094:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0017097:	7e 20                	jle    c00170b9 <VgaText::clearScreen()+0x43>
c0017099:	31 ff                	xor    edi,edi
c001709b:	50                   	push   eax
c001709c:	50                   	push   eax
c001709d:	56                   	push   esi
c001709e:	57                   	push   edi
c001709f:	47                   	inc    edi
c00170a0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170a3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170a6:	6a 20                	push   0x20
c00170a8:	53                   	push   ebx
c00170a9:	e8 c6 fe ff ff       	call   c0016f74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00170ae:	83 c4 20             	add    esp,0x20
c00170b1:	83 ff 50             	cmp    edi,0x50
c00170b4:	75 e5                	jne    c001709b <VgaText::clearScreen()+0x25>
c00170b6:	46                   	inc    esi
c00170b7:	eb db                	jmp    c0017094 <VgaText::clearScreen()+0x1e>
c00170b9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00170c0:	5b                   	pop    ebx
c00170c1:	5e                   	pop    esi
c00170c2:	5f                   	pop    edi
c00170c3:	c3                   	ret    

c00170c4 <VgaText::setCursorX(int)>:
c00170c4:	83 ec 10             	sub    esp,0x10
c00170c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170cb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00170ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d2:	50                   	push   eax
c00170d3:	e8 3c ff ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c00170d8:	83 c4 1c             	add    esp,0x1c
c00170db:	c3                   	ret    

c00170dc <VgaText::setCursorY(int)>:
c00170dc:	83 ec 10             	sub    esp,0x10
c00170df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00170ea:	50                   	push   eax
c00170eb:	e8 24 ff ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c00170f0:	83 c4 1c             	add    esp,0x1c
c00170f3:	c3                   	ret    

c00170f4 <VgaText::incrementCursor(bool)>:
c00170f4:	56                   	push   esi
c00170f5:	53                   	push   ebx
c00170f6:	51                   	push   ecx
c00170f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00170ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017102:	40                   	inc    eax
c0017103:	83 f8 50             	cmp    eax,0x50
c0017106:	74 05                	je     c001710d <VgaText::incrementCursor(bool)+0x19>
c0017108:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001710b:	eb 24                	jmp    c0017131 <VgaText::incrementCursor(bool)+0x3d>
c001710d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017114:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017117:	8d 50 01             	lea    edx,[eax+0x1]
c001711a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001711d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017120:	75 0f                	jne    c0017131 <VgaText::incrementCursor(bool)+0x3d>
c0017122:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017125:	83 ec 0c             	sub    esp,0xc
c0017128:	53                   	push   ebx
c0017129:	e8 a4 fd ff ff       	call   c0016ed2 <VgaText::scrollScreen()>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	89 f0                	mov    eax,esi
c0017133:	84 c0                	test   al,al
c0017135:	74 0c                	je     c0017143 <VgaText::incrementCursor(bool)+0x4f>
c0017137:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001713b:	5a                   	pop    edx
c001713c:	5b                   	pop    ebx
c001713d:	5e                   	pop    esi
c001713e:	e9 99 fc ff ff       	jmp    c0016ddc <VgaText::updateCursor()>
c0017143:	58                   	pop    eax
c0017144:	5b                   	pop    ebx
c0017145:	5e                   	pop    esi
c0017146:	c3                   	ret    
c0017147:	90                   	nop

c0017148 <VgaText::decrementCursor(bool)>:
c0017148:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001714c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017150:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017153:	85 c0                	test   eax,eax
c0017155:	74 04                	je     c001715b <VgaText::decrementCursor(bool)+0x13>
c0017157:	48                   	dec    eax
c0017158:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001715b:	84 c9                	test   cl,cl
c001715d:	74 09                	je     c0017168 <VgaText::decrementCursor(bool)+0x20>
c001715f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017163:	e9 74 fc ff ff       	jmp    c0016ddc <VgaText::updateCursor()>
c0017168:	c3                   	ret    
c0017169:	90                   	nop

c001716a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001716a:	53                   	push   ebx
c001716b:	83 ec 08             	sub    esp,0x8
c001716e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0017173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017177:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001717b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001717f:	83 f8 07             	cmp    eax,0x7
c0017182:	75 21                	jne    c00171a5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0017184:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001718c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0017194:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001719c:	83 c4 08             	add    esp,0x8
c001719f:	5b                   	pop    ebx
c00171a0:	e9 d6 3a 00 00       	jmp    c001ac7b <Krnl::beep(int, int, bool)>
c00171a5:	83 f8 0d             	cmp    eax,0xd
c00171a8:	75 09                	jne    c00171b3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171b1:	eb 2d                	jmp    c00171e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00171b3:	83 f8 0a             	cmp    eax,0xa
c00171b6:	75 31                	jne    c00171e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00171b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00171c2:	8d 50 01             	lea    edx,[eax+0x1]
c00171c5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00171c8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00171cb:	75 0f                	jne    c00171dc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00171cd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00171d0:	83 ec 0c             	sub    esp,0xc
c00171d3:	53                   	push   ebx
c00171d4:	e8 f9 fc ff ff       	call   c0016ed2 <VgaText::scrollScreen()>
c00171d9:	83 c4 10             	add    esp,0x10
c00171dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00171e0:	83 c4 08             	add    esp,0x8
c00171e3:	5b                   	pop    ebx
c00171e4:	e9 f3 fb ff ff       	jmp    c0016ddc <VgaText::updateCursor()>
c00171e9:	83 f8 08             	cmp    eax,0x8
c00171ec:	75 25                	jne    c0017213 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00171ee:	50                   	push   eax
c00171ef:	50                   	push   eax
c00171f0:	6a 01                	push   0x1
c00171f2:	53                   	push   ebx
c00171f3:	e8 50 ff ff ff       	call   c0017148 <VgaText::decrementCursor(bool)>
c00171f8:	5a                   	pop    edx
c00171f9:	59                   	pop    ecx
c00171fa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00171fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017200:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017203:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017206:	6a 20                	push   0x20
c0017208:	53                   	push   ebx
c0017209:	e8 66 fd ff ff       	call   c0016f74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001720e:	83 c4 28             	add    esp,0x28
c0017211:	5b                   	pop    ebx
c0017212:	c3                   	ret    
c0017213:	83 ec 08             	sub    esp,0x8
c0017216:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017219:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001721c:	51                   	push   ecx
c001721d:	52                   	push   edx
c001721e:	50                   	push   eax
c001721f:	53                   	push   ebx
c0017220:	e8 4f fd ff ff       	call   c0016f74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017225:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017229:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017231:	83 c4 28             	add    esp,0x28
c0017234:	5b                   	pop    ebx
c0017235:	e9 ba fe ff ff       	jmp    c00170f4 <VgaText::incrementCursor(bool)>

c001723a <VgaText::putchar(char)>:
c001723a:	57                   	push   edi
c001723b:	56                   	push   esi
c001723c:	53                   	push   ebx
c001723d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017241:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017245:	0f be c2             	movsx  eax,dl
c0017248:	83 f8 5b             	cmp    eax,0x5b
c001724b:	75 18                	jne    c0017265 <VgaText::putchar(char)+0x2b>
c001724d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017251:	74 20                	je     c0017273 <VgaText::putchar(char)+0x39>
c0017253:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017259:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0017260:	e9 b8 00 00 00       	jmp    c001731d <VgaText::putchar(char)+0xe3>
c0017265:	83 f8 1b             	cmp    eax,0x1b
c0017268:	75 09                	jne    c0017273 <VgaText::putchar(char)+0x39>
c001726a:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001726e:	e9 aa 00 00 00       	jmp    c001731d <VgaText::putchar(char)+0xe3>
c0017273:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0017277:	89 f9                	mov    ecx,edi
c0017279:	84 c9                	test   cl,cl
c001727b:	0f 84 8c 00 00 00    	je     c001730d <VgaText::putchar(char)+0xd3>
c0017281:	8d 4a c0             	lea    ecx,[edx-0x40]
c0017284:	80 f9 3e             	cmp    cl,0x3e
c0017287:	77 70                	ja     c00172f9 <VgaText::putchar(char)+0xbf>
c0017289:	83 f8 6d             	cmp    eax,0x6d
c001728c:	75 3f                	jne    c00172cd <VgaText::putchar(char)+0x93>
c001728e:	31 f6                	xor    esi,esi
c0017290:	31 d2                	xor    edx,edx
c0017292:	31 c0                	xor    eax,eax
c0017294:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0017297:	7e 25                	jle    c00172be <VgaText::putchar(char)+0x84>
c0017299:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001729e:	83 fa 3b             	cmp    edx,0x3b
c00172a1:	75 0f                	jne    c00172b2 <VgaText::putchar(char)+0x78>
c00172a3:	50                   	push   eax
c00172a4:	53                   	push   ebx
c00172a5:	e8 48 fb ff ff       	call   c0016df2 <VgaText::doANSI_SGR(int)>
c00172aa:	31 d2                	xor    edx,edx
c00172ac:	59                   	pop    ecx
c00172ad:	58                   	pop    eax
c00172ae:	31 c0                	xor    eax,eax
c00172b0:	eb 09                	jmp    c00172bb <VgaText::putchar(char)+0x81>
c00172b2:	6b c0 0a             	imul   eax,eax,0xa
c00172b5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00172b9:	89 fa                	mov    edx,edi
c00172bb:	46                   	inc    esi
c00172bc:	eb d6                	jmp    c0017294 <VgaText::putchar(char)+0x5a>
c00172be:	84 d2                	test   dl,dl
c00172c0:	74 2f                	je     c00172f1 <VgaText::putchar(char)+0xb7>
c00172c2:	50                   	push   eax
c00172c3:	53                   	push   ebx
c00172c4:	e8 29 fb ff ff       	call   c0016df2 <VgaText::doANSI_SGR(int)>
c00172c9:	58                   	pop    eax
c00172ca:	5a                   	pop    edx
c00172cb:	eb 24                	jmp    c00172f1 <VgaText::putchar(char)+0xb7>
c00172cd:	83 f8 4a             	cmp    eax,0x4a
c00172d0:	75 1f                	jne    c00172f1 <VgaText::putchar(char)+0xb7>
c00172d2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00172d6:	75 19                	jne    c00172f1 <VgaText::putchar(char)+0xb7>
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	53                   	push   ebx
c00172dc:	e8 95 fd ff ff       	call   c0017076 <VgaText::clearScreen()>
c00172e1:	83 c4 0c             	add    esp,0xc
c00172e4:	6a 00                	push   0x0
c00172e6:	6a 00                	push   0x0
c00172e8:	53                   	push   ebx
c00172e9:	e8 26 fd ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c00172ee:	83 c4 10             	add    esp,0x10
c00172f1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00172f7:	eb 24                	jmp    c001731d <VgaText::putchar(char)+0xe3>
c00172f9:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00172fc:	83 f8 0e             	cmp    eax,0xe
c00172ff:	7f 1c                	jg     c001731d <VgaText::putchar(char)+0xe3>
c0017301:	8d 48 01             	lea    ecx,[eax+0x1]
c0017304:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017307:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001730b:	eb 10                	jmp    c001731d <VgaText::putchar(char)+0xe3>
c001730d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017310:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017313:	50                   	push   eax
c0017314:	53                   	push   ebx
c0017315:	e8 50 fe ff ff       	call   c001716a <VgaText::putchar(char, VgaColour, VgaColour)>
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	5b                   	pop    ebx
c001731e:	5e                   	pop    esi
c001731f:	5f                   	pop    edi
c0017320:	c3                   	ret    
c0017321:	90                   	nop

c0017322 <VgaText::putx(unsigned int)>:
c0017322:	57                   	push   edi
c0017323:	b9 11 00 00 00       	mov    ecx,0x11
c0017328:	56                   	push   esi
c0017329:	be be 0e 03 c0       	mov    esi,0xc0030ebe
c001732e:	53                   	push   ebx
c001732f:	83 ec 20             	sub    esp,0x20
c0017332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017336:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001733a:	fc                   	cld    
c001733b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001733d:	be 08 00 00 00       	mov    esi,0x8
c0017342:	50                   	push   eax
c0017343:	50                   	push   eax
c0017344:	89 d8                	mov    eax,ebx
c0017346:	c1 e8 1c             	shr    eax,0x1c
c0017349:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001734e:	c1 e3 04             	shl    ebx,0x4
c0017351:	50                   	push   eax
c0017352:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017356:	e8 df fe ff ff       	call   c001723a <VgaText::putchar(char)>
c001735b:	83 c4 10             	add    esp,0x10
c001735e:	4e                   	dec    esi
c001735f:	75 e1                	jne    c0017342 <VgaText::putx(unsigned int)+0x20>
c0017361:	83 c4 20             	add    esp,0x20
c0017364:	5b                   	pop    ebx
c0017365:	5e                   	pop    esi
c0017366:	5f                   	pop    edi
c0017367:	c3                   	ret    

c0017368 <VgaText::puts(char const*)>:
c0017368:	53                   	push   ebx
c0017369:	83 ec 08             	sub    esp,0x8
c001736c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017370:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017373:	85 c0                	test   eax,eax
c0017375:	74 12                	je     c0017389 <VgaText::puts(char const*)+0x21>
c0017377:	51                   	push   ecx
c0017378:	43                   	inc    ebx
c0017379:	51                   	push   ecx
c001737a:	50                   	push   eax
c001737b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001737f:	e8 b6 fe ff ff       	call   c001723a <VgaText::putchar(char)>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	eb e7                	jmp    c0017370 <VgaText::puts(char const*)+0x8>
c0017389:	83 c4 08             	add    esp,0x8
c001738c:	5b                   	pop    ebx
c001738d:	c3                   	ret    

c001738e <VgaText::write(unsigned long long, void*, int*)>:
c001738e:	55                   	push   ebp
c001738f:	57                   	push   edi
c0017390:	56                   	push   esi
c0017391:	53                   	push   ebx
c0017392:	83 ec 0c             	sub    esp,0xc
c0017395:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017399:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001739d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173a1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173a8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00173ab:	39 eb                	cmp    ebx,ebp
c00173ad:	74 13                	je     c00173c2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00173af:	50                   	push   eax
c00173b0:	43                   	inc    ebx
c00173b1:	50                   	push   eax
c00173b2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00173b6:	50                   	push   eax
c00173b7:	56                   	push   esi
c00173b8:	e8 7d fe ff ff       	call   c001723a <VgaText::putchar(char)>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	eb e9                	jmp    c00173ab <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00173c2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00173c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173cd:	89 38                	mov    DWORD PTR [eax],edi
c00173cf:	83 c4 0c             	add    esp,0xc
c00173d2:	31 c0                	xor    eax,eax
c00173d4:	5b                   	pop    ebx
c00173d5:	5e                   	pop    esi
c00173d6:	5f                   	pop    edi
c00173d7:	5d                   	pop    ebp
c00173d8:	c3                   	ret    
c00173d9:	90                   	nop

c00173da <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00173da:	55                   	push   ebp
c00173db:	57                   	push   edi
c00173dc:	56                   	push   esi
c00173dd:	53                   	push   ebx
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00173e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00173ea:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00173f1:	50                   	push   eax
c00173f2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00173f7:	50                   	push   eax
c00173f8:	e8 c3 fa ff ff       	call   c0016ec0 <VgaText::combineColours(unsigned char, unsigned char)>
c00173fd:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017401:	5a                   	pop    edx
c0017402:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017405:	59                   	pop    ecx
c0017406:	0f b6 f8             	movzx  edi,al
c0017409:	0f b7 db             	movzx  ebx,bx
c001740c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017410:	01 db                	add    ebx,ebx
c0017412:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017415:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017418:	85 c0                	test   eax,eax
c001741a:	0f 84 ef 00 00 00    	je     c001750f <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017420:	83 f8 0d             	cmp    eax,0xd
c0017423:	75 0c                	jne    c0017431 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017425:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001742c:	e9 d8 00 00 00       	jmp    c0017509 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017431:	83 f8 0a             	cmp    eax,0xa
c0017434:	75 44                	jne    c001747a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017436:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001743d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017440:	8d 48 01             	lea    ecx,[eax+0x1]
c0017443:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0017446:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017449:	75 0f                	jne    c001745a <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c001744b:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001744e:	83 ec 0c             	sub    esp,0xc
c0017451:	55                   	push   ebp
c0017452:	e8 7b fa ff ff       	call   c0016ed2 <VgaText::scrollScreen()>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	83 ec 0c             	sub    esp,0xc
c001745d:	55                   	push   ebp
c001745e:	e8 79 f9 ff ff       	call   c0016ddc <VgaText::updateCursor()>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001746a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001746d:	0f b7 db             	movzx  ebx,bx
c0017470:	01 db                	add    ebx,ebx
c0017472:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017475:	e9 8f 00 00 00       	jmp    c0017509 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001747a:	83 f8 08             	cmp    eax,0x8
c001747d:	75 34                	jne    c00174b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001747f:	51                   	push   ecx
c0017480:	51                   	push   ecx
c0017481:	6a 01                	push   0x1
c0017483:	55                   	push   ebp
c0017484:	e8 bf fc ff ff       	call   c0017148 <VgaText::decrementCursor(bool)>
c0017489:	5b                   	pop    ebx
c001748a:	58                   	pop    eax
c001748b:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001748e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017491:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0017494:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0017497:	6a 20                	push   0x20
c0017499:	55                   	push   ebp
c001749a:	e8 d5 fa ff ff       	call   c0016f74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001749f:	83 c4 20             	add    esp,0x20
c00174a2:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00174a6:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00174a9:	0f b7 db             	movzx  ebx,bx
c00174ac:	01 db                	add    ebx,ebx
c00174ae:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00174b1:	eb 56                	jmp    c0017509 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174b3:	52                   	push   edx
c00174b4:	52                   	push   edx
c00174b5:	57                   	push   edi
c00174b6:	50                   	push   eax
c00174b7:	e8 a8 fa ff ff       	call   c0016f64 <VgaText::combineCharAndColour(char, unsigned char)>
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	66 89 03             	mov    WORD PTR [ebx],ax
c00174c2:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00174c8:	75 1d                	jne    c00174e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00174ca:	83 ec 0c             	sub    esp,0xc
c00174cd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00174d0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00174d3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174d7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174db:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00174de:	50                   	push   eax
c00174df:	e8 64 04 01 00       	call   c0027948 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00174e4:	83 c4 20             	add    esp,0x20
c00174e7:	50                   	push   eax
c00174e8:	83 c3 02             	add    ebx,0x2
c00174eb:	50                   	push   eax
c00174ec:	6a 00                	push   0x0
c00174ee:	55                   	push   ebp
c00174ef:	e8 00 fc ff ff       	call   c00170f4 <VgaText::incrementCursor(bool)>
c00174f4:	83 c4 10             	add    esp,0x10
c00174f7:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c00174fb:	75 0c                	jne    c0017509 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174fd:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017501:	0f b7 db             	movzx  ebx,bx
c0017504:	01 db                	add    ebx,ebx
c0017506:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017509:	46                   	inc    esi
c001750a:	e9 06 ff ff ff       	jmp    c0017415 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001750f:	83 ec 0c             	sub    esp,0xc
c0017512:	55                   	push   ebp
c0017513:	e8 c4 f8 ff ff       	call   c0016ddc <VgaText::updateCursor()>
c0017518:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001751f:	83 c4 1c             	add    esp,0x1c
c0017522:	5b                   	pop    ebx
c0017523:	5e                   	pop    esi
c0017524:	5f                   	pop    edi
c0017525:	5d                   	pop    ebp
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <VgaText::VgaText(char const*)>:
c0017528:	56                   	push   esi
c0017529:	53                   	push   ebx
c001752a:	83 ec 04             	sub    esp,0x4
c001752d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017531:	83 ec 08             	sub    esp,0x8
c0017534:	6a 00                	push   0x0
c0017536:	50                   	push   eax
c0017537:	e8 26 05 00 00       	call   c0017a62 <UnixFile::UnixFile(int)>
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	ba e4 0e 03 c0       	mov    edx,0xc0030ee4
c0017544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017548:	89 10                	mov    DWORD PTR [eax],edx
c001754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0017555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017559:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0017560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017564:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0017570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017574:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001757b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0017586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0017591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017595:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001759c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175a7:	83 ec 0c             	sub    esp,0xc
c00175aa:	6a 01                	push   0x1
c00175ac:	e8 00 09 00 00       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c00175b1:	83 c4 10             	add    esp,0x10
c00175b4:	89 c2                	mov    edx,eax
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00175bd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00175c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00175ca:	89 c6                	mov    esi,eax
c00175cc:	e8 cd f0 ff ff       	call   c001669e <Phys::allocatePage()>
c00175d1:	68 05 0c 00 00       	push   0xc05
c00175d6:	56                   	push   esi
c00175d7:	50                   	push   eax
c00175d8:	53                   	push   ebx
c00175d9:	e8 dc 0f 00 00       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00175e8:	83 ec 04             	sub    esp,0x4
c00175eb:	68 a0 0f 00 00       	push   0xfa0
c00175f0:	6a 00                	push   0x0
c00175f2:	50                   	push   eax
c00175f3:	e8 f8 8e fe ff       	call   c00004f0 <memset>
c00175f8:	83 c4 10             	add    esp,0x10
c00175fb:	83 ec 04             	sub    esp,0x4
c00175fe:	6a 00                	push   0x0
c0017600:	6a 07                	push   0x7
c0017602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017606:	e8 7b f8 ff ff       	call   c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	83 ec 04             	sub    esp,0x4
c0017611:	6a 00                	push   0x0
c0017613:	6a 00                	push   0x0
c0017615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017619:	e8 f6 f9 ff ff       	call   c0017014 <VgaText::setCursor(int, int)>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	83 ec 0c             	sub    esp,0xc
c0017624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017628:	e8 49 fa ff ff       	call   c0017076 <VgaText::clearScreen()>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017634:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763c:	05 82 00 00 00       	add    eax,0x82
c0017641:	83 ec 04             	sub    esp,0x4
c0017644:	68 80 00 00 00       	push   0x80
c0017649:	6a 00                	push   0x0
c001764b:	50                   	push   eax
c001764c:	e8 9f 8e fe ff       	call   c00004f0 <memset>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017658:	05 02 01 00 00       	add    eax,0x102
c001765d:	83 ec 04             	sub    esp,0x4
c0017660:	68 80 00 00 00       	push   0x80
c0017665:	6a 00                	push   0x0
c0017667:	50                   	push   eax
c0017668:	e8 83 8e fe ff       	call   c00004f0 <memset>
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	90                   	nop
c0017671:	83 c4 04             	add    esp,0x4
c0017674:	5b                   	pop    ebx
c0017675:	5e                   	pop    esi
c0017676:	c3                   	ret    
c0017677:	90                   	nop

c0017678 <VgaText::receiveKey(unsigned char)>:
c0017678:	55                   	push   ebp
c0017679:	57                   	push   edi
c001767a:	56                   	push   esi
c001767b:	53                   	push   ebx
c001767c:	83 ec 2c             	sub    esp,0x2c
c001767f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017683:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017687:	89 fd                	mov    ebp,edi
c0017689:	81 e5 ff 00 00 00    	and    ebp,0xff
c001768f:	0f 84 48 01 00 00    	je     c00177dd <VgaText::receiveKey(unsigned char)+0x165>
c0017695:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001769b:	83 fd 08             	cmp    ebp,0x8
c001769e:	75 6a                	jne    c001770a <VgaText::receiveKey(unsigned char)+0x92>
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	56                   	push   esi
c00176a4:	e8 d7 8e fe ff       	call   c0000580 <strlen>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	85 c0                	test   eax,eax
c00176ae:	0f 84 ef 00 00 00    	je     c00177a3 <VgaText::receiveKey(unsigned char)+0x12b>
c00176b4:	50                   	push   eax
c00176b5:	50                   	push   eax
c00176b6:	6a 08                	push   0x8
c00176b8:	53                   	push   ebx
c00176b9:	e8 7c fb ff ff       	call   c001723a <VgaText::putchar(char)>
c00176be:	89 34 24             	mov    DWORD PTR [esp],esi
c00176c1:	e8 ba 8e fe ff       	call   c0000580 <strlen>
c00176c6:	83 c4 10             	add    esp,0x10
c00176c9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00176d1:	83 fa 1f             	cmp    edx,0x1f
c00176d4:	89 d0                	mov    eax,edx
c00176d6:	7f 1c                	jg     c00176f4 <VgaText::receiveKey(unsigned char)+0x7c>
c00176d8:	83 e8 08             	sub    eax,0x8
c00176db:	3c 02                	cmp    al,0x2
c00176dd:	76 15                	jbe    c00176f4 <VgaText::receiveKey(unsigned char)+0x7c>
c00176df:	83 fa 0d             	cmp    edx,0xd
c00176e2:	74 10                	je     c00176f4 <VgaText::receiveKey(unsigned char)+0x7c>
c00176e4:	57                   	push   edi
c00176e5:	57                   	push   edi
c00176e6:	68 cf 0e 03 c0       	push   0xc0030ecf
c00176eb:	53                   	push   ebx
c00176ec:	e8 77 fc ff ff       	call   c0017368 <VgaText::puts(char const*)>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	83 ec 0c             	sub    esp,0xc
c00176f7:	56                   	push   esi
c00176f8:	e8 83 8e fe ff       	call   c0000580 <strlen>
c00176fd:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017705:	e9 96 00 00 00       	jmp    c00177a0 <VgaText::receiveKey(unsigned char)+0x128>
c001770a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017710:	83 ec 0c             	sub    esp,0xc
c0017713:	50                   	push   eax
c0017714:	e8 67 8e fe ff       	call   c0000580 <strlen>
c0017719:	89 34 24             	mov    DWORD PTR [esp],esi
c001771c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017720:	e8 5b 8e fe ff       	call   c0000580 <strlen>
c0017725:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017729:	83 c4 10             	add    esp,0x10
c001772c:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017730:	3d 80 00 00 00       	cmp    eax,0x80
c0017735:	0f 87 a2 00 00 00    	ja     c00177dd <VgaText::receiveKey(unsigned char)+0x165>
c001773b:	8d 47 ff             	lea    eax,[edi-0x1]
c001773e:	3c 1e                	cmp    al,0x1e
c0017740:	77 35                	ja     c0017777 <VgaText::receiveKey(unsigned char)+0xff>
c0017742:	8d 47 f7             	lea    eax,[edi-0x9]
c0017745:	3c 01                	cmp    al,0x1
c0017747:	76 2e                	jbe    c0017777 <VgaText::receiveKey(unsigned char)+0xff>
c0017749:	83 fd 0d             	cmp    ebp,0xd
c001774c:	74 29                	je     c0017777 <VgaText::receiveKey(unsigned char)+0xff>
c001774e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017751:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017754:	68 d5 0e 03 c0       	push   0xc0030ed5
c0017759:	53                   	push   ebx
c001775a:	e8 7b fc ff ff       	call   c00173da <VgaText::puts(char const*, VgaColour, VgaColour)>
c001775f:	8d 47 40             	lea    eax,[edi+0x40]
c0017762:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017765:	0f b6 c0             	movzx  eax,al
c0017768:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001776b:	50                   	push   eax
c001776c:	53                   	push   ebx
c001776d:	e8 f8 f9 ff ff       	call   c001716a <VgaText::putchar(char, VgaColour, VgaColour)>
c0017772:	83 c4 20             	add    esp,0x20
c0017775:	eb 11                	jmp    c0017788 <VgaText::receiveKey(unsigned char)+0x110>
c0017777:	51                   	push   ecx
c0017778:	89 f8                	mov    eax,edi
c001777a:	51                   	push   ecx
c001777b:	0f be c0             	movsx  eax,al
c001777e:	50                   	push   eax
c001777f:	53                   	push   ebx
c0017780:	e8 b5 fa ff ff       	call   c001723a <VgaText::putchar(char)>
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001778d:	89 f8                	mov    eax,edi
c001778f:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017793:	52                   	push   edx
c0017794:	52                   	push   edx
c0017795:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017799:	50                   	push   eax
c001779a:	56                   	push   esi
c001779b:	e8 d0 90 fe ff       	call   c0000870 <strcat>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00177aa:	75 0f                	jne    c00177bb <VgaText::receiveKey(unsigned char)+0x143>
c00177ac:	83 fd 1c             	cmp    ebp,0x1c
c00177af:	77 2c                	ja     c00177dd <VgaText::receiveKey(unsigned char)+0x165>
c00177b1:	b8 08 04 00 10       	mov    eax,0x10000408
c00177b6:	0f a3 e8             	bt     eax,ebp
c00177b9:	73 22                	jae    c00177dd <VgaText::receiveKey(unsigned char)+0x165>
c00177bb:	50                   	push   eax
c00177bc:	81 c3 02 01 00 00    	add    ebx,0x102
c00177c2:	50                   	push   eax
c00177c3:	56                   	push   esi
c00177c4:	53                   	push   ebx
c00177c5:	e8 a6 90 fe ff       	call   c0000870 <strcat>
c00177ca:	83 c4 0c             	add    esp,0xc
c00177cd:	68 80 00 00 00       	push   0x80
c00177d2:	6a 00                	push   0x0
c00177d4:	56                   	push   esi
c00177d5:	e8 16 8d fe ff       	call   c00004f0 <memset>
c00177da:	83 c4 10             	add    esp,0x10
c00177dd:	83 c4 2c             	add    esp,0x2c
c00177e0:	5b                   	pop    ebx
c00177e1:	5e                   	pop    esi
c00177e2:	5f                   	pop    edi
c00177e3:	5d                   	pop    ebp
c00177e4:	c3                   	ret    
c00177e5:	90                   	nop

c00177e6 <VgaText::doUpdate()>:
c00177e6:	c3                   	ret    
c00177e7:	90                   	nop

c00177e8 <TSS::TSS()>:
c00177e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00177f3:	90                   	nop
c00177f4:	c3                   	ret    
c00177f5:	90                   	nop
c00177f6:	66 90                	xchg   ax,ax

c00177f8 <TSS::setESP(unsigned long)>:
c00177f8:	55                   	push   ebp
c00177f9:	89 e5                	mov    ebp,esp
c00177fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017801:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017804:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017807:	90                   	nop
c0017808:	5d                   	pop    ebp
c0017809:	c3                   	ret    
c001780a:	66 90                	xchg   ax,ax

c001780c <TSS::flush()>:
c001780c:	55                   	push   ebp
c001780d:	89 e5                	mov    ebp,esp
c001780f:	83 ec 10             	sub    esp,0x10
c0017812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017815:	8b 00                	mov    eax,DWORD PTR [eax]
c0017817:	83 c8 03             	or     eax,0x3
c001781a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001781e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017822:	66 89 d0             	mov    ax,dx
c0017825:	0f 00 d8             	ltr    ax
c0017828:	90                   	nop
c0017829:	c9                   	leave  
c001782a:	c3                   	ret    
c001782b:	90                   	nop

c001782c <TSS::setup(unsigned long, unsigned long)>:
c001782c:	55                   	push   ebp
c001782d:	89 e5                	mov    ebp,esp
c001782f:	83 ec 18             	sub    esp,0x18
c0017832:	83 ec 0c             	sub    esp,0xc
c0017835:	6a 68                	push   0x68
c0017837:	e8 53 eb ff ff       	call   c001638f <malloc>
c001783c:	83 c4 10             	add    esp,0x10
c001783f:	89 c2                	mov    edx,eax
c0017841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017844:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001784a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784d:	83 ec 04             	sub    esp,0x4
c0017850:	6a 68                	push   0x68
c0017852:	6a 00                	push   0x0
c0017854:	50                   	push   eax
c0017855:	e8 96 8c fe ff       	call   c00004f0 <memset>
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017863:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001786c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001786f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001787b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001787e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017887:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001788d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017890:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017893:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001789c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001789f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00178a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ab:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00178b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00178bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00178c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00178d2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00178d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00178ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178f4:	0f 20 da             	mov    edx,cr3
c00178f7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00178fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00178fd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017903:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	50                   	push   eax
c001790a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001790d:	50                   	push   eax
c001790e:	e8 ed e2 ff ff       	call   c0015c00 <GDTEntry::setBase(unsigned int)>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	83 ec 08             	sub    esp,0x8
c0017919:	6a 68                	push   0x68
c001791b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001791e:	50                   	push   eax
c001791f:	e8 f8 e2 ff ff       	call   c0015c1c <GDTEntry::setLimit(unsigned int)>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001792b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001792e:	83 e0 0f             	and    eax,0xf
c0017931:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017934:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017937:	83 c8 40             	or     eax,0x40
c001793a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001793d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017942:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017948:	05 78 01 00 00       	add    eax,0x178
c001794d:	83 ec 04             	sub    esp,0x4
c0017950:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017953:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017956:	50                   	push   eax
c0017957:	e8 f4 e2 ff ff       	call   c0015c50 <GDT::addEntry(GDTEntry)>
c001795c:	83 c4 10             	add    esp,0x10
c001795f:	89 c2                	mov    edx,eax
c0017961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017964:	89 10                	mov    DWORD PTR [eax],edx
c0017966:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001796b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017971:	05 78 01 00 00       	add    eax,0x178
c0017976:	83 ec 0c             	sub    esp,0xc
c0017979:	50                   	push   eax
c001797a:	e8 fb e2 ff ff       	call   c0015c7a <GDT::flush()>
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017985:	8b 00                	mov    eax,DWORD PTR [eax]
c0017987:	c9                   	leave  
c0017988:	c3                   	ret    
c0017989:	90                   	nop

c001798a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001798a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001798e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017995:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001799a:	75 08                	jne    c00179a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001799c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00179a2:	eb 38                	jmp    c00179dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00179a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00179a9:	75 17                	jne    c00179c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00179ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00179bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00179c2:	89 c1                	mov    ecx,eax
c00179c4:	83 e1 fd             	and    ecx,0xfffffffd
c00179c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00179cd:	74 cd                	je     c001799c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00179cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00179d4:	83 e0 ef             	and    eax,0xffffffef
c00179d7:	83 f8 08             	cmp    eax,0x8
c00179da:	76 c0                	jbe    c001799c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00179dc:	31 c0                	xor    eax,eax
c00179de:	c3                   	ret    
c00179df:	90                   	nop

c00179e0 <ReservedFilename::isAtty()>:
c00179e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179e7:	31 c0                	xor    eax,eax
c00179e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00179ef:	74 09                	je     c00179fa <ReservedFilename::isAtty()+0x1a>
c00179f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00179f7:	0f 94 c0             	sete   al
c00179fa:	c3                   	ret    
c00179fb:	90                   	nop

c00179fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00179fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a0b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a10:	75 08                	jne    c0017a1a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a12:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a18:	eb 3d                	jmp    c0017a57 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a1a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a1f:	75 17                	jne    c0017a38 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a35:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017a38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017a3d:	75 04                	jne    c0017a43 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017a3f:	89 0a                	mov    DWORD PTR [edx],ecx
c0017a41:	eb 14                	jmp    c0017a57 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a43:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017a48:	74 c8                	je     c0017a12 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017a4a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a4f:	83 e0 ef             	and    eax,0xffffffef
c0017a52:	83 f8 08             	cmp    eax,0x8
c0017a55:	76 bb                	jbe    c0017a12 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017a57:	31 c0                	xor    eax,eax
c0017a59:	c3                   	ret    

c0017a5a <UnixFile::getFileDescriptor()>:
c0017a5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a61:	c3                   	ret    

c0017a62 <UnixFile::UnixFile(int)>:
c0017a62:	53                   	push   ebx
c0017a63:	83 ec 28             	sub    esp,0x28
c0017a66:	ba ac 0f 03 c0       	mov    edx,0xc0030fac
c0017a6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a6f:	89 10                	mov    DWORD PTR [eax],edx
c0017a71:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017a79:	0f 8f 90 01 00 00    	jg     c0017c0f <UnixFile::UnixFile(int)+0x1ad>
c0017a7f:	a1 00 38 03 c0       	mov    eax,ds:0xc0033800
c0017a84:	8d 50 01             	lea    edx,[eax+0x1]
c0017a87:	89 15 00 38 03 c0    	mov    DWORD PTR ds:0xc0033800,edx
c0017a8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a91:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a94:	83 ec 08             	sub    esp,0x8
c0017a97:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017a9b:	68 98 aa 03 c0       	push   0xc003aa98
c0017aa0:	e8 43 6b 01 00       	call   c002e5e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017aa5:	83 c4 10             	add    esp,0x10
c0017aa8:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017aad:	83 f0 01             	xor    eax,0x1
c0017ab0:	0f b6 c0             	movzx  eax,al
c0017ab3:	85 c0                	test   eax,eax
c0017ab5:	0f 84 55 01 00 00    	je     c0017c10 <UnixFile::UnixFile(int)+0x1ae>
c0017abb:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017ac2:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ad1:	e8 b9 e8 ff ff       	call   c001638f <malloc>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	89 c3                	mov    ebx,eax
c0017adb:	83 ec 08             	sub    esp,0x8
c0017ade:	68 03 ff ff 0f       	push   0xfffff03
c0017ae3:	53                   	push   ebx
c0017ae4:	e8 2d 01 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017af2:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017afa:	83 ec 0c             	sub    esp,0xc
c0017afd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b01:	e8 89 e8 ff ff       	call   c001638f <malloc>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	89 c3                	mov    ebx,eax
c0017b0b:	83 ec 08             	sub    esp,0x8
c0017b0e:	68 01 ff ff 0f       	push   0xfffff01
c0017b13:	53                   	push   ebx
c0017b14:	e8 fd 00 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017b19:	83 c4 10             	add    esp,0x10
c0017b1c:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b22:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b31:	e8 59 e8 ff ff       	call   c001638f <malloc>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	89 c3                	mov    ebx,eax
c0017b3b:	83 ec 08             	sub    esp,0x8
c0017b3e:	68 00 ff ff 0f       	push   0xfffff00
c0017b43:	53                   	push   ebx
c0017b44:	e8 cd 00 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017b52:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b61:	e8 29 e8 ff ff       	call   c001638f <malloc>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	89 c3                	mov    ebx,eax
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 02 ff ff 0f       	push   0xfffff02
c0017b73:	53                   	push   ebx
c0017b74:	e8 9d 00 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017b82:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b8a:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017b8f:	7f 7f                	jg     c0017c10 <UnixFile::UnixFile(int)+0x1ae>
c0017b91:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017b99:	83 ec 0c             	sub    esp,0xc
c0017b9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ba0:	e8 ea e7 ff ff       	call   c001638f <malloc>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	89 c3                	mov    ebx,eax
c0017baa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bae:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017bb3:	83 ec 08             	sub    esp,0x8
c0017bb6:	50                   	push   eax
c0017bb7:	53                   	push   ebx
c0017bb8:	e8 59 00 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bc4:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017bcb:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017bd3:	83 ec 0c             	sub    esp,0xc
c0017bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bda:	e8 b0 e7 ff ff       	call   c001638f <malloc>
c0017bdf:	83 c4 10             	add    esp,0x10
c0017be2:	89 c3                	mov    ebx,eax
c0017be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017be8:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	50                   	push   eax
c0017bf1:	53                   	push   ebx
c0017bf2:	e8 1f 00 00 00       	call   c0017c16 <ReservedFilename::ReservedFilename(int)>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bfe:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c05:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c0a:	e9 7b ff ff ff       	jmp    c0017b8a <UnixFile::UnixFile(int)+0x128>
c0017c0f:	90                   	nop
c0017c10:	83 c4 28             	add    esp,0x28
c0017c13:	5b                   	pop    ebx
c0017c14:	c3                   	ret    
c0017c15:	90                   	nop

c0017c16 <ReservedFilename::ReservedFilename(int)>:
c0017c16:	83 ec 0c             	sub    esp,0xc
c0017c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1d:	83 ec 08             	sub    esp,0x8
c0017c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c24:	50                   	push   eax
c0017c25:	e8 38 fe ff ff       	call   c0017a62 <UnixFile::UnixFile(int)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	ba c8 0f 03 c0       	mov    edx,0xc0030fc8
c0017c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c36:	89 10                	mov    DWORD PTR [eax],edx
c0017c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c43:	90                   	nop
c0017c44:	83 c4 0c             	add    esp,0xc
c0017c47:	c3                   	ret    

c0017c48 <UnixFile::~UnixFile()>:
c0017c48:	83 ec 1c             	sub    esp,0x1c
c0017c4b:	ba ac 0f 03 c0       	mov    edx,0xc0030fac
c0017c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c54:	89 10                	mov    DWORD PTR [eax],edx
c0017c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c5d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017c62:	7f 76                	jg     c0017cda <UnixFile::~UnixFile()+0x92>
c0017c64:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	68 98 aa 03 c0       	push   0xc003aa98
c0017c74:	e8 43 6a 01 00       	call   c002e6bc <LinkedList<UnixFile>::getFirstElement()>
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	68 98 aa 03 c0       	push   0xc003aa98
c0017c88:	e8 37 6a 01 00       	call   c002e6c4 <LinkedList<UnixFile>::removeFirst()>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c94:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017c98:	74 43                	je     c0017cdd <UnixFile::~UnixFile()+0x95>
c0017c9a:	83 ec 08             	sub    esp,0x8
c0017c9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ca1:	68 98 aa 03 c0       	push   0xc003aa98
c0017ca6:	e8 3d 69 01 00       	call   c002e5e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017cab:	83 c4 10             	add    esp,0x10
c0017cae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cb2:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cb9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017cbe:	0f 94 c0             	sete   al
c0017cc1:	0f b6 c0             	movzx  eax,al
c0017cc4:	85 c0                	test   eax,eax
c0017cc6:	74 a4                	je     c0017c6c <UnixFile::~UnixFile()+0x24>
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	68 84 0f 03 c0       	push   0xc0030f84
c0017cd0:	e8 9e 83 00 00       	call   c0020073 <KePanic(char const*)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	eb 92                	jmp    c0017c6c <UnixFile::~UnixFile()+0x24>
c0017cda:	90                   	nop
c0017cdb:	eb 01                	jmp    c0017cde <UnixFile::~UnixFile()+0x96>
c0017cdd:	90                   	nop
c0017cde:	90                   	nop
c0017cdf:	83 c4 1c             	add    esp,0x1c
c0017ce2:	c3                   	ret    
c0017ce3:	90                   	nop

c0017ce4 <UnixFile::~UnixFile()>:
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	83 ec 0c             	sub    esp,0xc
c0017cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cee:	e8 55 ff ff ff       	call   c0017c48 <UnixFile::~UnixFile()>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	83 ec 08             	sub    esp,0x8
c0017cf9:	6a 0c                	push   0xc
c0017cfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cff:	e8 c4 13 00 00       	call   c00190c8 <operator delete(void*, unsigned long)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	83 c4 0c             	add    esp,0xc
c0017d0a:	c3                   	ret    
c0017d0b:	90                   	nop

c0017d0c <ReservedFilename::~ReservedFilename()>:
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	ba c8 0f 03 c0       	mov    edx,0xc0030fc8
c0017d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d18:	89 10                	mov    DWORD PTR [eax],edx
c0017d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d1e:	83 ec 0c             	sub    esp,0xc
c0017d21:	50                   	push   eax
c0017d22:	e8 21 ff ff ff       	call   c0017c48 <UnixFile::~UnixFile()>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	90                   	nop
c0017d2b:	83 c4 0c             	add    esp,0xc
c0017d2e:	c3                   	ret    
c0017d2f:	90                   	nop

c0017d30 <ReservedFilename::~ReservedFilename()>:
c0017d30:	83 ec 0c             	sub    esp,0xc
c0017d33:	83 ec 0c             	sub    esp,0xc
c0017d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d3a:	e8 cd ff ff ff       	call   c0017d0c <ReservedFilename::~ReservedFilename()>
c0017d3f:	83 c4 10             	add    esp,0x10
c0017d42:	83 ec 08             	sub    esp,0x8
c0017d45:	6a 0c                	push   0xc
c0017d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d4b:	e8 78 13 00 00       	call   c00190c8 <operator delete(void*, unsigned long)>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	83 c4 0c             	add    esp,0xc
c0017d56:	c3                   	ret    

c0017d57 <KeGetFileFromDescriptor(int)>:
c0017d57:	53                   	push   ebx
c0017d58:	83 ec 08             	sub    esp,0x8
c0017d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d5f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017d65:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017d6b:	7f 2c                	jg     c0017d99 <KeGetFileFromDescriptor(int)+0x42>
c0017d6d:	83 ec 0c             	sub    esp,0xc
c0017d70:	68 98 aa 03 c0       	push   0xc003aa98
c0017d75:	e8 42 69 01 00       	call   c002e6bc <LinkedList<UnixFile>::getFirstElement()>
c0017d7a:	83 c4 10             	add    esp,0x10
c0017d7d:	85 c0                	test   eax,eax
c0017d7f:	75 04                	jne    c0017d85 <KeGetFileFromDescriptor(int)+0x2e>
c0017d81:	31 c0                	xor    eax,eax
c0017d83:	eb 6e                	jmp    c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017d85:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017d88:	74 69                	je     c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017d8a:	52                   	push   edx
c0017d8b:	52                   	push   edx
c0017d8c:	50                   	push   eax
c0017d8d:	68 98 aa 03 c0       	push   0xc003aa98
c0017d92:	e8 cf 69 01 00       	call   c002e766 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017d97:	eb e1                	jmp    c0017d7a <KeGetFileFromDescriptor(int)+0x23>
c0017d99:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017d9f:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017da4:	74 4d                	je     c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017da6:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017dac:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017db1:	74 40                	je     c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017db3:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017db9:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017dbe:	74 33                	je     c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017dc0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017dc6:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017dcb:	74 26                	je     c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017dcd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017dd3:	83 f8 08             	cmp    eax,0x8
c0017dd6:	77 09                	ja     c0017de1 <KeGetFileFromDescriptor(int)+0x8a>
c0017dd8:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017ddf:	eb 12                	jmp    c0017df3 <KeGetFileFromDescriptor(int)+0x9c>
c0017de1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017de7:	83 fb 08             	cmp    ebx,0x8
c0017dea:	77 95                	ja     c0017d81 <KeGetFileFromDescriptor(int)+0x2a>
c0017dec:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017df3:	83 c4 08             	add    esp,0x8
c0017df6:	5b                   	pop    ebx
c0017df7:	c3                   	ret    

c0017df8 <__static_initialization_and_destruction_0(int, int)>:
c0017df8:	83 ec 0c             	sub    esp,0xc
c0017dfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e00:	75 34                	jne    c0017e36 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e0a:	75 2a                	jne    c0017e36 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	68 98 aa 03 c0       	push   0xc003aa98
c0017e14:	e8 8d 67 01 00       	call   c002e5a6 <LinkedList<UnixFile>::LinkedList()>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	83 ec 04             	sub    esp,0x4
c0017e1f:	68 88 37 03 c0       	push   0xc0033788
c0017e24:	68 98 aa 03 c0       	push   0xc003aa98
c0017e29:	68 a4 e5 02 c0       	push   0xc002e5a4
c0017e2e:	e8 45 12 00 00       	call   c0019078 <__cxa_atexit>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	90                   	nop
c0017e37:	83 c4 0c             	add    esp,0xc
c0017e3a:	c3                   	ret    

c0017e3b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	83 ec 08             	sub    esp,0x8
c0017e41:	68 ff ff 00 00       	push   0xffff
c0017e46:	6a 01                	push   0x1
c0017e48:	e8 ab ff ff ff       	call   c0017df8 <__static_initialization_and_destruction_0(int, int)>
c0017e4d:	83 c4 10             	add    esp,0x10
c0017e50:	83 c4 0c             	add    esp,0xc
c0017e53:	c3                   	ret    

c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017e54:	53                   	push   ebx
c0017e55:	8b 15 08 38 03 c0    	mov    edx,DWORD PTR ds:0xc0033808
c0017e5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e63:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017e69:	89 d8                	mov    eax,ebx
c0017e6b:	d1 e8                	shr    eax,1
c0017e6d:	01 d0                	add    eax,edx
c0017e6f:	80 e3 01             	and    bl,0x1
c0017e72:	8a 10                	mov    dl,BYTE PTR [eax]
c0017e74:	75 09                	jne    c0017e7f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017e76:	83 e2 f0             	and    edx,0xfffffff0
c0017e79:	09 ca                	or     edx,ecx
c0017e7b:	88 10                	mov    BYTE PTR [eax],dl
c0017e7d:	5b                   	pop    ebx
c0017e7e:	c3                   	ret    
c0017e7f:	0f b6 c9             	movzx  ecx,cl
c0017e82:	83 e2 0f             	and    edx,0xf
c0017e85:	c1 e1 04             	shl    ecx,0x4
c0017e88:	09 ca                	or     edx,ecx
c0017e8a:	88 10                	mov    BYTE PTR [eax],dl
c0017e8c:	5b                   	pop    ebx
c0017e8d:	c3                   	ret    

c0017e8e <Virt::getPageState(unsigned long)>:
c0017e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e92:	8b 0d 08 38 03 c0    	mov    ecx,DWORD PTR ds:0xc0033808
c0017e98:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017e9e:	89 d0                	mov    eax,edx
c0017ea0:	d1 e8                	shr    eax,1
c0017ea2:	80 e2 01             	and    dl,0x1
c0017ea5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017ea8:	74 03                	je     c0017ead <Virt::getPageState(unsigned long)+0x1f>
c0017eaa:	c1 e8 04             	shr    eax,0x4
c0017ead:	83 e0 0f             	and    eax,0xf
c0017eb0:	c3                   	ret    

c0017eb1 <Virt::allocateKernelVirtualPages(int)>:
c0017eb1:	55                   	push   ebp
c0017eb2:	57                   	push   edi
c0017eb3:	56                   	push   esi
c0017eb4:	31 f6                	xor    esi,esi
c0017eb6:	53                   	push   ebx
c0017eb7:	31 db                	xor    ebx,ebx
c0017eb9:	83 ec 1c             	sub    esp,0x1c
c0017ebc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017ec1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017ec5:	8b 2d 04 38 03 c0    	mov    ebp,DWORD PTR ds:0xc0033804
c0017ecb:	55                   	push   ebp
c0017ecc:	e8 bd ff ff ff       	call   c0017e8e <Virt::getPageState(unsigned long)>
c0017ed1:	5a                   	pop    edx
c0017ed2:	84 c0                	test   al,al
c0017ed4:	75 3d                	jne    c0017f13 <Virt::allocateKernelVirtualPages(int)+0x62>
c0017ed6:	85 db                	test   ebx,ebx
c0017ed8:	0f 44 f5             	cmove  esi,ebp
c0017edb:	83 c3 01             	add    ebx,0x1
c0017ede:	39 fb                	cmp    ebx,edi
c0017ee0:	74 5e                	je     c0017f40 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0017ee2:	83 c5 01             	add    ebp,0x1
c0017ee5:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017eeb:	76 33                	jbe    c0017f20 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0017eed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017ef2:	c7 05 04 38 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033804,0xc8000
c0017efc:	75 2a                	jne    c0017f28 <Virt::allocateKernelVirtualPages(int)+0x77>
c0017efe:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017f03:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0017f08:	55                   	push   ebp
c0017f09:	e8 80 ff ff ff       	call   c0017e8e <Virt::getPageState(unsigned long)>
c0017f0e:	5a                   	pop    edx
c0017f0f:	84 c0                	test   al,al
c0017f11:	74 c3                	je     c0017ed6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0017f13:	83 c5 01             	add    ebp,0x1
c0017f16:	31 db                	xor    ebx,ebx
c0017f18:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017f1e:	77 cd                	ja     c0017eed <Virt::allocateKernelVirtualPages(int)+0x3c>
c0017f20:	89 2d 04 38 03 c0    	mov    DWORD PTR ds:0xc0033804,ebp
c0017f26:	eb a3                	jmp    c0017ecb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	68 dc 0f 03 c0       	push   0xc0030fdc
c0017f30:	e8 3e 81 00 00       	call   c0020073 <KePanic(char const*)>
c0017f35:	8b 2d 04 38 03 c0    	mov    ebp,DWORD PTR ds:0xc0033804
c0017f3b:	83 c4 10             	add    esp,0x10
c0017f3e:	eb 8b                	jmp    c0017ecb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f40:	89 35 04 38 03 c0    	mov    DWORD PTR ds:0xc0033804,esi
c0017f46:	83 fb 01             	cmp    ebx,0x1
c0017f49:	74 63                	je     c0017fae <Virt::allocateKernelVirtualPages(int)+0xfd>
c0017f4b:	85 ff                	test   edi,edi
c0017f4d:	74 41                	je     c0017f90 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017f4f:	89 f0                	mov    eax,esi
c0017f51:	31 db                	xor    ebx,ebx
c0017f53:	8d 6f ff             	lea    ebp,[edi-0x1]
c0017f56:	eb 16                	jmp    c0017f6e <Virt::allocateKernelVirtualPages(int)+0xbd>
c0017f58:	6a 01                	push   0x1
c0017f5a:	83 c3 01             	add    ebx,0x1
c0017f5d:	50                   	push   eax
c0017f5e:	e8 f1 fe ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f63:	39 fb                	cmp    ebx,edi
c0017f65:	58                   	pop    eax
c0017f66:	5a                   	pop    edx
c0017f67:	74 27                	je     c0017f90 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017f69:	a1 04 38 03 c0       	mov    eax,ds:0xc0033804
c0017f6e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f71:	85 db                	test   ebx,ebx
c0017f73:	89 15 04 38 03 c0    	mov    DWORD PTR ds:0xc0033804,edx
c0017f79:	74 22                	je     c0017f9d <Virt::allocateKernelVirtualPages(int)+0xec>
c0017f7b:	39 dd                	cmp    ebp,ebx
c0017f7d:	75 d9                	jne    c0017f58 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0017f7f:	6a 03                	push   0x3
c0017f81:	83 c3 01             	add    ebx,0x1
c0017f84:	50                   	push   eax
c0017f85:	e8 ca fe ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f8a:	39 fb                	cmp    ebx,edi
c0017f8c:	59                   	pop    ecx
c0017f8d:	58                   	pop    eax
c0017f8e:	75 d9                	jne    c0017f69 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0017f90:	83 c4 1c             	add    esp,0x1c
c0017f93:	89 f0                	mov    eax,esi
c0017f95:	5b                   	pop    ebx
c0017f96:	c1 e0 0c             	shl    eax,0xc
c0017f99:	5e                   	pop    esi
c0017f9a:	5f                   	pop    edi
c0017f9b:	5d                   	pop    ebp
c0017f9c:	c3                   	ret    
c0017f9d:	6a 02                	push   0x2
c0017f9f:	bb 01 00 00 00       	mov    ebx,0x1
c0017fa4:	50                   	push   eax
c0017fa5:	e8 aa fe ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017faa:	58                   	pop    eax
c0017fab:	5a                   	pop    edx
c0017fac:	eb bb                	jmp    c0017f69 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0017fae:	6a 04                	push   0x4
c0017fb0:	56                   	push   esi
c0017fb1:	8d 46 01             	lea    eax,[esi+0x1]
c0017fb4:	a3 04 38 03 c0       	mov    ds:0xc0033804,eax
c0017fb9:	e8 96 fe ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fbe:	89 f0                	mov    eax,esi
c0017fc0:	59                   	pop    ecx
c0017fc1:	c1 e0 0c             	shl    eax,0xc
c0017fc4:	5b                   	pop    ebx
c0017fc5:	83 c4 1c             	add    esp,0x1c
c0017fc8:	5b                   	pop    ebx
c0017fc9:	5e                   	pop    esi
c0017fca:	5f                   	pop    edi
c0017fcb:	5d                   	pop    ebp
c0017fcc:	c3                   	ret    

c0017fcd <Virt::freeSwapfilePage(unsigned long)>:
c0017fcd:	53                   	push   ebx
c0017fce:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0017fd4:	b8 01 00 00 00       	mov    eax,0x1
c0017fd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017fdd:	d3 e0                	shl    eax,cl
c0017fdf:	89 cb                	mov    ebx,ecx
c0017fe1:	c1 eb 05             	shr    ebx,0x5
c0017fe4:	f7 d0                	not    eax
c0017fe6:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0017fe9:	21 c1                	and    ecx,eax
c0017feb:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0017fee:	5b                   	pop    ebx
c0017fef:	c3                   	ret    

c0017ff0 <Virt::swapIDToSector(unsigned long)>:
c0017ff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ff4:	8b 15 0c 38 03 c0    	mov    edx,DWORD PTR ds:0xc003380c
c0017ffa:	8b 0d 14 38 03 c0    	mov    ecx,DWORD PTR ds:0xc0033814
c0018000:	0f af c2             	imul   eax,edx
c0018003:	01 c8                	add    eax,ecx
c0018005:	c3                   	ret    

c0018006 <Virt::allocateSwapfilePage()>:
c0018006:	55                   	push   ebp
c0018007:	31 d2                	xor    edx,edx
c0018009:	57                   	push   edi
c001800a:	56                   	push   esi
c001800b:	53                   	push   ebx
c001800c:	83 ec 0c             	sub    esp,0xc
c001800f:	8b 1d 10 38 03 c0    	mov    ebx,DWORD PTR ds:0xc0033810
c0018015:	8b 0d 0c 38 03 c0    	mov    ecx,DWORD PTR ds:0xc003380c
c001801b:	89 d8                	mov    eax,ebx
c001801d:	f7 f1                	div    ecx
c001801f:	39 cb                	cmp    ebx,ecx
c0018021:	72 2f                	jb     c0018052 <Virt::allocateSwapfilePage()+0x4c>
c0018023:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018029:	8b 16                	mov    edx,DWORD PTR [esi]
c001802b:	f6 c2 01             	test   dl,0x1
c001802e:	74 3e                	je     c001806e <Virt::allocateSwapfilePage()+0x68>
c0018030:	31 c9                	xor    ecx,ecx
c0018032:	bf 01 00 00 00       	mov    edi,0x1
c0018037:	eb 12                	jmp    c001804b <Virt::allocateSwapfilePage()+0x45>
c0018039:	89 ca                	mov    edx,ecx
c001803b:	89 fd                	mov    ebp,edi
c001803d:	c1 ea 05             	shr    edx,0x5
c0018040:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0018043:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018045:	d3 e5                	shl    ebp,cl
c0018047:	85 ea                	test   edx,ebp
c0018049:	74 2c                	je     c0018077 <Virt::allocateSwapfilePage()+0x71>
c001804b:	83 c1 01             	add    ecx,0x1
c001804e:	39 c8                	cmp    eax,ecx
c0018050:	77 e7                	ja     c0018039 <Virt::allocateSwapfilePage()+0x33>
c0018052:	83 ec 0c             	sub    esp,0xc
c0018055:	68 70 12 03 c0       	push   0xc0031270
c001805a:	e8 14 80 00 00       	call   c0020073 <KePanic(char const*)>
c001805f:	83 c4 10             	add    esp,0x10
c0018062:	31 c9                	xor    ecx,ecx
c0018064:	83 c4 0c             	add    esp,0xc
c0018067:	89 c8                	mov    eax,ecx
c0018069:	5b                   	pop    ebx
c001806a:	5e                   	pop    esi
c001806b:	5f                   	pop    edi
c001806c:	5d                   	pop    ebp
c001806d:	c3                   	ret    
c001806e:	89 f3                	mov    ebx,esi
c0018070:	bd 01 00 00 00       	mov    ebp,0x1
c0018075:	31 c9                	xor    ecx,ecx
c0018077:	09 ea                	or     edx,ebp
c0018079:	89 c8                	mov    eax,ecx
c001807b:	89 13                	mov    DWORD PTR [ebx],edx
c001807d:	83 c4 0c             	add    esp,0xc
c0018080:	5b                   	pop    ebx
c0018081:	5e                   	pop    esi
c0018082:	5f                   	pop    edi
c0018083:	5d                   	pop    ebp
c0018084:	c3                   	ret    

c0018085 <Virt::virtualMemorySetup()>:
c0018085:	53                   	push   ebx
c0018086:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001808b:	6a 0f                	push   0xf
c001808d:	53                   	push   ebx
c001808e:	83 c3 01             	add    ebx,0x1
c0018091:	e8 be fd ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018096:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001809c:	58                   	pop    eax
c001809d:	5a                   	pop    edx
c001809e:	75 eb                	jne    c001808b <Virt::virtualMemorySetup()+0x6>
c00180a0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180a5:	6a 00                	push   0x0
c00180a7:	53                   	push   ebx
c00180a8:	83 c3 01             	add    ebx,0x1
c00180ab:	e8 a4 fd ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180b0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00180b6:	59                   	pop    ecx
c00180b7:	58                   	pop    eax
c00180b8:	75 eb                	jne    c00180a5 <Virt::virtualMemorySetup()+0x20>
c00180ba:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00180bf:	6a 0f                	push   0xf
c00180c1:	53                   	push   ebx
c00180c2:	83 c3 01             	add    ebx,0x1
c00180c5:	e8 8a fd ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180ca:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00180d0:	58                   	pop    eax
c00180d1:	5a                   	pop    edx
c00180d2:	75 eb                	jne    c00180bf <Virt::virtualMemorySetup()+0x3a>
c00180d4:	5b                   	pop    ebx
c00180d5:	c3                   	ret    

c00180d6 <Virt::setupPageSwapping(int)>:
c00180d6:	53                   	push   ebx
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c00180df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00180e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00180e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00180eb:	53                   	push   ebx
c00180ec:	68 87 12 03 c0       	push   0xc0031287
c00180f1:	50                   	push   eax
c00180f2:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00180f5:	c1 e3 0b             	shl    ebx,0xb
c00180f8:	89 1d 10 38 03 c0    	mov    DWORD PTR ds:0xc0033810,ebx
c00180fe:	c1 eb 08             	shr    ebx,0x8
c0018101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018104:	c6 05 18 38 03 c0 43 	mov    BYTE PTR ds:0xc0033818,0x43
c001810b:	c7 05 0c 38 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003380c,0x8
c0018115:	a3 14 38 03 c0       	mov    ds:0xc0033814,eax
c001811a:	e8 70 e2 ff ff       	call   c001638f <malloc>
c001811f:	31 d2                	xor    edx,edx
c0018121:	83 c4 0c             	add    esp,0xc
c0018124:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018129:	89 c1                	mov    ecx,eax
c001812b:	a1 10 38 03 c0       	mov    eax,ds:0xc0033810
c0018130:	f7 35 0c 38 03 c0    	div    DWORD PTR ds:0xc003380c
c0018136:	c1 e8 05             	shr    eax,0x5
c0018139:	50                   	push   eax
c001813a:	6a 00                	push   0x0
c001813c:	51                   	push   ecx
c001813d:	e8 ae 83 fe ff       	call   c00004f0 <memset>
c0018142:	83 c4 18             	add    esp,0x18
c0018145:	5b                   	pop    ebx
c0018146:	c3                   	ret    
c0018147:	90                   	nop

c0018148 <VAS::setCPUSpecific(unsigned long)>:
c0018148:	c3                   	ret    
c0018149:	90                   	nop

c001814a <VAS::VAS(VAS*)>:
c001814a:	83 ec 0c             	sub    esp,0xc
c001814d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018151:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018163:	83 ec 0c             	sub    esp,0xc
c0018166:	68 fc 0f 03 c0       	push   0xc0030ffc
c001816b:	e8 03 7f 00 00       	call   c0020073 <KePanic(char const*)>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	90                   	nop
c0018174:	83 c4 0c             	add    esp,0xc
c0018177:	c3                   	ret    

c0018178 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001817c:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018181:	89 c2                	mov    edx,eax
c0018183:	c1 ea 16             	shr    edx,0x16
c0018186:	c1 e8 0a             	shr    eax,0xa
c0018189:	83 f9 01             	cmp    ecx,0x1
c001818c:	19 c9                	sbb    ecx,ecx
c001818e:	25 fc 0f 00 00       	and    eax,0xffc
c0018193:	c1 e2 0c             	shl    edx,0xc
c0018196:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001819c:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00181a3:	01 d0                	add    eax,edx
c00181a5:	c3                   	ret    

c00181a6 <VAS::getPageTableEntry(unsigned long)>:
c00181a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181aa:	89 ca                	mov    edx,ecx
c00181ac:	c1 ea 16             	shr    edx,0x16
c00181af:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00181b5:	c1 e9 0a             	shr    ecx,0xa
c00181b8:	c1 e0 0c             	shl    eax,0xc
c00181bb:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00181c1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00181c4:	c3                   	ret    

c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00181c5:	55                   	push   ebp
c00181c6:	57                   	push   edi
c00181c7:	bf 01 00 00 00       	mov    edi,0x1
c00181cc:	56                   	push   esi
c00181cd:	53                   	push   ebx
c00181ce:	83 ec 1c             	sub    esp,0x1c
c00181d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00181d5:	c1 ee 0c             	shr    esi,0xc
c00181d8:	eb 48                	jmp    c0018222 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00181da:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00181df:	83 ec 08             	sub    esp,0x8
c00181e2:	55                   	push   ebp
c00181e3:	50                   	push   eax
c00181e4:	e8 bd ff ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c00181e9:	83 c4 10             	add    esp,0x10
c00181ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00181ee:	f6 c6 04             	test   dh,0x4
c00181f1:	75 70                	jne    c0018263 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00181f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00181f9:	83 fb 04             	cmp    ebx,0x4
c00181fc:	0f 84 8a 00 00 00    	je     c001828c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018202:	83 fb 02             	cmp    ebx,0x2
c0018205:	0f 84 9a 00 00 00    	je     c00182a5 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001820b:	83 fb 03             	cmp    ebx,0x3
c001820e:	0f 84 be 00 00 00    	je     c00182d2 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018214:	83 fb 01             	cmp    ebx,0x1
c0018217:	0f 84 a2 00 00 00    	je     c00182bf <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001821d:	83 c6 01             	add    esi,0x1
c0018220:	31 ff                	xor    edi,edi
c0018222:	56                   	push   esi
c0018223:	89 f5                	mov    ebp,esi
c0018225:	e8 64 fc ff ff       	call   c0017e8e <Virt::getPageState(unsigned long)>
c001822a:	c1 e5 0c             	shl    ebp,0xc
c001822d:	5a                   	pop    edx
c001822e:	0f b6 d8             	movzx  ebx,al
c0018231:	85 db                	test   ebx,ebx
c0018233:	75 a5                	jne    c00181da <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018235:	83 ec 0c             	sub    esp,0xc
c0018238:	68 9e 12 03 c0       	push   0xc003129e
c001823d:	e8 31 7e 00 00       	call   c0020073 <KePanic(char const*)>
c0018242:	5a                   	pop    edx
c0018243:	59                   	pop    ecx
c0018244:	55                   	push   ebp
c0018245:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c001824b:	55                   	push   ebp
c001824c:	e8 55 ff ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018251:	83 c4 10             	add    esp,0x10
c0018254:	8b 10                	mov    edx,DWORD PTR [eax]
c0018256:	f6 c6 04             	test   dh,0x4
c0018259:	75 08                	jne    c0018263 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001825b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018261:	eb ba                	jmp    c001821d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018263:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018267:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	52                   	push   edx
c0018271:	e8 bf e3 ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	83 fb 04             	cmp    ebx,0x4
c001827c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018280:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018286:	0f 85 76 ff ff ff    	jne    c0018202 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001828c:	83 e7 01             	and    edi,0x1
c001828f:	75 46                	jne    c00182d7 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018291:	c7 44 24 30 20 10 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031020
c0018299:	83 c4 1c             	add    esp,0x1c
c001829c:	5b                   	pop    ebx
c001829d:	5e                   	pop    esi
c001829e:	5f                   	pop    edi
c001829f:	5d                   	pop    ebp
c00182a0:	e9 ce 7d 00 00       	jmp    c0020073 <KePanic(char const*)>
c00182a5:	83 e7 01             	and    edi,0x1
c00182a8:	75 15                	jne    c00182bf <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00182aa:	83 ec 0c             	sub    esp,0xc
c00182ad:	68 ba 12 03 c0       	push   0xc00312ba
c00182b2:	e8 bc 7d 00 00       	call   c0020073 <KePanic(char const*)>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	e9 5e ff ff ff       	jmp    c001821d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182bf:	83 ec 08             	sub    esp,0x8
c00182c2:	6a 00                	push   0x0
c00182c4:	56                   	push   esi
c00182c5:	e8 8a fb ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	e9 4b ff ff ff       	jmp    c001821d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182d2:	83 e7 01             	and    edi,0x1
c00182d5:	75 16                	jne    c00182ed <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00182d7:	83 ec 08             	sub    esp,0x8
c00182da:	6a 00                	push   0x0
c00182dc:	56                   	push   esi
c00182dd:	e8 72 fb ff ff       	call   c0017e54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	83 c4 1c             	add    esp,0x1c
c00182e8:	5b                   	pop    ebx
c00182e9:	5e                   	pop    esi
c00182ea:	5f                   	pop    edi
c00182eb:	5d                   	pop    ebp
c00182ec:	c3                   	ret    
c00182ed:	c7 44 24 30 d6 12 03 c0 	mov    DWORD PTR [esp+0x30],0xc00312d6
c00182f5:	83 c4 1c             	add    esp,0x1c
c00182f8:	5b                   	pop    ebx
c00182f9:	5e                   	pop    esi
c00182fa:	5f                   	pop    edi
c00182fb:	5d                   	pop    ebp
c00182fc:	e9 72 7d 00 00       	jmp    c0020073 <KePanic(char const*)>
c0018301:	90                   	nop

c0018302 <VAS::freeAllocatedPages(unsigned long)>:
c0018302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018306:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001830a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001830e:	74 09                	je     c0018319 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018310:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018314:	e9 ac fe ff ff       	jmp    c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0018319:	c7 44 24 04 44 10 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031044
c0018321:	e9 a0 0e 00 00       	jmp    c00191c6 <Dbg::kprintf(char const*, ...)>

c0018326 <VAS::virtualToPhysical(unsigned long)>:
c0018326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001832a:	50                   	push   eax
c001832b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001832f:	52                   	push   edx
c0018330:	e8 71 fe ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018335:	59                   	pop    ecx
c0018336:	5a                   	pop    edx
c0018337:	8b 00                	mov    eax,DWORD PTR [eax]
c0018339:	25 00 f0 ff ff       	and    eax,0xfffff000
c001833e:	c3                   	ret    
c001833f:	90                   	nop

c0018340 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0018340:	55                   	push   ebp
c0018341:	57                   	push   edi
c0018342:	56                   	push   esi
c0018343:	53                   	push   ebx
c0018344:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018348:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001834c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018350:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018354:	85 db                	test   ebx,ebx
c0018356:	7e 24                	jle    c001837c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018358:	c1 e3 0c             	shl    ebx,0xc
c001835b:	01 f3                	add    ebx,esi
c001835d:	56                   	push   esi
c001835e:	81 c6 00 10 00 00    	add    esi,0x1000
c0018364:	55                   	push   ebp
c0018365:	e8 3c fe ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c001836a:	5a                   	pop    edx
c001836b:	59                   	pop    ecx
c001836c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001836e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018372:	21 f9                	and    ecx,edi
c0018374:	09 d1                	or     ecx,edx
c0018376:	39 f3                	cmp    ebx,esi
c0018378:	89 08                	mov    DWORD PTR [eax],ecx
c001837a:	75 e1                	jne    c001835d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001837c:	5b                   	pop    ebx
c001837d:	5e                   	pop    esi
c001837e:	5f                   	pop    edi
c001837f:	5d                   	pop    ebp
c0018380:	c3                   	ret    
c0018381:	90                   	nop

c0018382 <VAS::VAS()>:
c0018382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018386:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001838d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018391:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001839c:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00183a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183a5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00183a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183ad:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00183b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183b4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00183bb:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c00183c0:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00183c5:	29 c2                	sub    edx,eax
c00183c7:	89 d0                	mov    eax,edx
c00183c9:	05 ff 0f 00 00       	add    eax,0xfff
c00183ce:	c1 e8 0c             	shr    eax,0xc
c00183d1:	89 c2                	mov    edx,eax
c00183d3:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00183d8:	6a 04                	push   0x4
c00183da:	6a ff                	push   0xffffffff
c00183dc:	52                   	push   edx
c00183dd:	50                   	push   eax
c00183de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00183e2:	e8 59 ff ff ff       	call   c0018340 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00183e7:	83 c4 14             	add    esp,0x14
c00183ea:	90                   	nop
c00183eb:	c3                   	ret    

c00183ec <VAS::setToWriteCombining(unsigned long, int)>:
c00183ec:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00183f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00183f7:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00183fe:	75 01                	jne    c0018401 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018400:	c3                   	ret    
c0018401:	68 80 00 00 00       	push   0x80
c0018406:	6a ff                	push   0xffffffff
c0018408:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001840c:	50                   	push   eax
c001840d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018411:	52                   	push   edx
c0018412:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018416:	51                   	push   ecx
c0018417:	e8 24 ff ff ff       	call   c0018340 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001841c:	83 c4 14             	add    esp,0x14
c001841f:	c3                   	ret    

c0018420 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018424:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018427:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001842b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001842e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018433:	83 f8 01             	cmp    eax,0x1
c0018436:	19 c0                	sbb    eax,eax
c0018438:	83 ca 03             	or     edx,0x3
c001843b:	83 e0 fc             	and    eax,0xfffffffc
c001843e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018445:	0f 20 d8             	mov    eax,cr3
c0018448:	0f 22 d8             	mov    cr3,eax
c001844b:	c3                   	ret    

c001844c <VAS::~VAS()>:
c001844c:	83 ec 2c             	sub    esp,0x2c
c001844f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018457:	fa                   	cli    
c0018458:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001845d:	83 c0 01             	add    eax,0x1
c0018460:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018465:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001846a:	8b 00                	mov    eax,DWORD PTR [eax]
c001846c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001846f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018475:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018479:	6a 01                	push   0x1
c001847b:	50                   	push   eax
c001847c:	e8 9f ff ff ff       	call   c0018420 <VAS::mapOtherVASIn(bool, VAS*)>
c0018481:	83 c4 0c             	add    esp,0xc
c0018484:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001848c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018494:	0f 8f d8 00 00 00    	jg     c0018572 <VAS::~VAS()+0x126>
c001849a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00184a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184a5:	c1 e2 02             	shl    edx,0x2
c00184a8:	01 d0                	add    eax,edx
c00184aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00184b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b4:	83 e0 01             	and    eax,0x1
c00184b7:	0f 84 ab 00 00 00    	je     c0018568 <VAS::~VAS()+0x11c>
c00184bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00184c5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00184cd:	7f 74                	jg     c0018543 <VAS::~VAS()+0xf7>
c00184cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d3:	c1 e0 0a             	shl    eax,0xa
c00184d6:	89 c2                	mov    edx,eax
c00184d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184dc:	01 d0                	add    eax,edx
c00184de:	c1 e0 0c             	shl    eax,0xc
c00184e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184ef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00184f9:	6a 01                	push   0x1
c00184fb:	50                   	push   eax
c00184fc:	e8 77 fc ff ff       	call   c0018178 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018501:	83 c4 0c             	add    esp,0xc
c0018504:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001850c:	8b 00                	mov    eax,DWORD PTR [eax]
c001850e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018516:	25 01 04 00 00       	and    eax,0x401
c001851b:	3d 01 04 00 00       	cmp    eax,0x401
c0018520:	75 1a                	jne    c001853c <VAS::~VAS()+0xf0>
c0018522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018526:	25 00 f0 ff ff       	and    eax,0xfffff000
c001852b:	83 ec 0c             	sub    esp,0xc
c001852e:	50                   	push   eax
c001852f:	e8 01 e1 ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0018534:	83 c4 10             	add    esp,0x10
c0018537:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001853c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0018541:	eb 82                	jmp    c00184c5 <VAS::~VAS()+0x79>
c0018543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018547:	25 00 04 00 00       	and    eax,0x400
c001854c:	74 1a                	je     c0018568 <VAS::~VAS()+0x11c>
c001854e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018552:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018557:	83 ec 0c             	sub    esp,0xc
c001855a:	50                   	push   eax
c001855b:	e8 d5 e0 ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018568:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001856d:	e9 1a ff ff ff       	jmp    c001848c <VAS::~VAS()+0x40>
c0018572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018576:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018579:	83 ec 0c             	sub    esp,0xc
c001857c:	50                   	push   eax
c001857d:	e8 43 fc ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018589:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001858c:	83 ec 0c             	sub    esp,0xc
c001858f:	50                   	push   eax
c0018590:	e8 a0 e0 ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0018595:	83 c4 10             	add    esp,0x10
c0018598:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001859d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00185a2:	83 e8 01             	sub    eax,0x1
c00185a5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00185aa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00185af:	85 c0                	test   eax,eax
c00185b1:	75 01                	jne    c00185b4 <VAS::~VAS()+0x168>
c00185b3:	fb                   	sti    
c00185b4:	90                   	nop
c00185b5:	83 c4 2c             	add    esp,0x2c
c00185b8:	c3                   	ret    
c00185b9:	90                   	nop

c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>:
c00185ba:	55                   	push   ebp
c00185bb:	57                   	push   edi
c00185bc:	56                   	push   esi
c00185bd:	53                   	push   ebx
c00185be:	83 ec 1c             	sub    esp,0x1c
c00185c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00185c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00185c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00185cd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00185d3:	77 08                	ja     c00185dd <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00185d5:	0f 20 d8             	mov    eax,cr3
c00185d8:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00185db:	75 43                	jne    c0018620 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00185dd:	89 d8                	mov    eax,ebx
c00185df:	09 f8                	or     eax,edi
c00185e1:	a9 ff 0f 00 00       	test   eax,0xfff
c00185e6:	75 53                	jne    c001863b <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00185e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00185eb:	89 de                	mov    esi,ebx
c00185ed:	c1 ee 16             	shr    esi,0x16
c00185f0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00185f7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00185fb:	74 50                	je     c001864d <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00185fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018601:	c1 eb 0a             	shr    ebx,0xa
c0018604:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001860a:	c1 e6 0c             	shl    esi,0xc
c001860d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018613:	09 c7                	or     edi,eax
c0018615:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018618:	83 c4 1c             	add    esp,0x1c
c001861b:	5b                   	pop    ebx
c001861c:	5e                   	pop    esi
c001861d:	5f                   	pop    edi
c001861e:	5d                   	pop    ebp
c001861f:	c3                   	ret    
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	68 68 10 03 c0       	push   0xc0031068
c0018628:	e8 99 0b 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001862d:	89 d8                	mov    eax,ebx
c001862f:	83 c4 10             	add    esp,0x10
c0018632:	09 f8                	or     eax,edi
c0018634:	a9 ff 0f 00 00       	test   eax,0xfff
c0018639:	74 ad                	je     c00185e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001863b:	83 ec 0c             	sub    esp,0xc
c001863e:	68 d0 10 03 c0       	push   0xc00310d0
c0018643:	e8 2b 7a 00 00       	call   c0020073 <KePanic(char const*)>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	eb 9b                	jmp    c00185e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001864d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018651:	e8 48 e0 ff ff       	call   c001669e <Phys::allocatePage()>
c0018656:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018663:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018667:	6a 01                	push   0x1
c0018669:	e8 43 f8 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c001866e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018675:	6a 01                	push   0x1
c0018677:	50                   	push   eax
c0018678:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001867c:	52                   	push   edx
c001867d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018681:	51                   	push   ecx
c0018682:	e8 3d 01 00 00       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018687:	83 c4 1c             	add    esp,0x1c
c001868a:	68 00 10 00 00       	push   0x1000
c001868f:	6a 00                	push   0x0
c0018691:	50                   	push   eax
c0018692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018696:	e8 55 7e fe ff       	call   c00004f0 <memset>
c001869b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001869f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00186a2:	e8 1e fb ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00186a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00186b5:	0d 07 04 00 00       	or     eax,0x407
c00186ba:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00186bd:	e9 3b ff ff ff       	jmp    c00185fd <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00186c2 <VAS::allocatePages(int, int)>:
c00186c2:	55                   	push   ebp
c00186c3:	57                   	push   edi
c00186c4:	56                   	push   esi
c00186c5:	53                   	push   ebx
c00186c6:	83 ec 1c             	sub    esp,0x1c
c00186c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00186cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00186d1:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00186d5:	75 75                	jne    c001874c <VAS::allocatePages(int, int)+0x8a>
c00186d7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00186da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186de:	85 c0                	test   eax,eax
c00186e0:	74 49                	je     c001872b <VAS::allocatePages(int, int)+0x69>
c00186e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00186e6:	89 d5                	mov    ebp,edx
c00186e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00186ec:	c1 e5 0c             	shl    ebp,0xc
c00186ef:	01 dd                	add    ebp,ebx
c00186f1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00186f4:	81 cf 00 04 00 00    	or     edi,0x400
c00186fa:	85 d2                	test   edx,edx
c00186fc:	7e 1b                	jle    c0018719 <VAS::allocatePages(int, int)+0x57>
c00186fe:	e8 9b df ff ff       	call   c001669e <Phys::allocatePage()>
c0018703:	57                   	push   edi
c0018704:	53                   	push   ebx
c0018705:	81 c3 00 10 00 00    	add    ebx,0x1000
c001870b:	50                   	push   eax
c001870c:	56                   	push   esi
c001870d:	e8 a8 fe ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018712:	83 c4 10             	add    esp,0x10
c0018715:	39 dd                	cmp    ebp,ebx
c0018717:	75 e5                	jne    c00186fe <VAS::allocatePages(int, int)+0x3c>
c0018719:	0f 20 d8             	mov    eax,cr3
c001871c:	0f 22 d8             	mov    cr3,eax
c001871f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018723:	83 c4 1c             	add    esp,0x1c
c0018726:	5b                   	pop    ebx
c0018727:	5e                   	pop    esi
c0018728:	5f                   	pop    edi
c0018729:	5d                   	pop    ebp
c001872a:	c3                   	ret    
c001872b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	68 f4 10 03 c0       	push   0xc00310f4
c0018737:	e8 37 79 00 00       	call   c0020073 <KePanic(char const*)>
c001873c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001873f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018743:	83 c4 10             	add    esp,0x10
c0018746:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001874a:	eb 96                	jmp    c00186e2 <VAS::allocatePages(int, int)+0x20>
c001874c:	83 ec 0c             	sub    esp,0xc
c001874f:	52                   	push   edx
c0018750:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0018754:	e8 58 f7 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c0018759:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018765:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018769:	77 38                	ja     c00187a3 <VAS::allocatePages(int, int)+0xe1>
c001876b:	85 d2                	test   edx,edx
c001876d:	7e aa                	jle    c0018719 <VAS::allocatePages(int, int)+0x57>
c001876f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018773:	c1 e2 0c             	shl    edx,0xc
c0018776:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001877a:	81 cf 00 04 00 00    	or     edi,0x400
c0018780:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0018783:	e8 16 df ff ff       	call   c001669e <Phys::allocatePage()>
c0018788:	57                   	push   edi
c0018789:	53                   	push   ebx
c001878a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018790:	50                   	push   eax
c0018791:	56                   	push   esi
c0018792:	e8 23 fe ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	39 dd                	cmp    ebp,ebx
c001879c:	75 e5                	jne    c0018783 <VAS::allocatePages(int, int)+0xc1>
c001879e:	e9 76 ff ff ff       	jmp    c0018719 <VAS::allocatePages(int, int)+0x57>
c00187a3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00187a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00187ae:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00187b5:	74 b4                	je     c001876b <VAS::allocatePages(int, int)+0xa9>
c00187b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00187bb:	80 cc 01             	or     ah,0x1
c00187be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00187c2:	eb a7                	jmp    c001876b <VAS::allocatePages(int, int)+0xa9>

c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00187c4:	55                   	push   ebp
c00187c5:	57                   	push   edi
c00187c6:	56                   	push   esi
c00187c7:	53                   	push   ebx
c00187c8:	83 ec 1c             	sub    esp,0x1c
c00187cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00187cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00187d3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00187d7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00187db:	85 db                	test   ebx,ebx
c00187dd:	7e 2c                	jle    c001880b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00187df:	c1 e3 0c             	shl    ebx,0xc
c00187e2:	8d 04 33             	lea    eax,[ebx+esi*1]
c00187e5:	89 f3                	mov    ebx,esi
c00187e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187eb:	55                   	push   ebp
c00187ec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00187f0:	29 f2                	sub    edx,esi
c00187f2:	01 da                	add    edx,ebx
c00187f4:	52                   	push   edx
c00187f5:	53                   	push   ebx
c00187f6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00187fc:	57                   	push   edi
c00187fd:	e8 b8 fd ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018802:	83 c4 10             	add    esp,0x10
c0018805:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018809:	75 e0                	jne    c00187eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001880b:	0f 20 d8             	mov    eax,cr3
c001880e:	0f 22 d8             	mov    cr3,eax
c0018811:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018815:	83 c4 1c             	add    esp,0x1c
c0018818:	5b                   	pop    ebx
c0018819:	5e                   	pop    esi
c001881a:	5f                   	pop    edi
c001881b:	5d                   	pop    ebp
c001881c:	c3                   	ret    
c001881d:	90                   	nop

c001881e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001881e:	55                   	push   ebp
c001881f:	57                   	push   edi
c0018820:	56                   	push   esi
c0018821:	53                   	push   ebx
c0018822:	83 ec 1c             	sub    esp,0x1c
c0018825:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018829:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001882d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018831:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018835:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018839:	09 d8                	or     eax,ebx
c001883b:	a9 ff 0f 00 00       	test   eax,0xfff
c0018840:	75 4b                	jne    c001888d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018842:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018845:	89 de                	mov    esi,ebx
c0018847:	c1 ee 16             	shr    esi,0x16
c001884a:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0018851:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0018855:	74 48                	je     c001889f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0018857:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001885c:	c1 eb 0a             	shr    ebx,0xa
c001885f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018863:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0018867:	83 ff 01             	cmp    edi,0x1
c001886a:	19 c0                	sbb    eax,eax
c001886c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018872:	c1 e6 0c             	shl    esi,0xc
c0018875:	25 00 00 c0 ff       	and    eax,0xffc00000
c001887a:	01 f3                	add    ebx,esi
c001887c:	09 ca                	or     edx,ecx
c001887e:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0018885:	83 c4 1c             	add    esp,0x1c
c0018888:	5b                   	pop    ebx
c0018889:	5e                   	pop    esi
c001888a:	5f                   	pop    edi
c001888b:	5d                   	pop    ebp
c001888c:	c3                   	ret    
c001888d:	83 ec 0c             	sub    esp,0xc
c0018890:	68 20 11 03 c0       	push   0xc0031120
c0018895:	e8 d9 77 00 00       	call   c0020073 <KePanic(char const*)>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	eb a3                	jmp    c0018842 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001889f:	e8 fa dd ff ff       	call   c001669e <Phys::allocatePage()>
c00188a4:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00188aa:	83 ec 0c             	sub    esp,0xc
c00188ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00188b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00188b5:	6a 01                	push   0x1
c00188b7:	e8 f5 f5 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c00188bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00188c3:	6a 01                	push   0x1
c00188c5:	50                   	push   eax
c00188c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ca:	50                   	push   eax
c00188cb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00188cf:	51                   	push   ecx
c00188d0:	e8 ef fe ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00188d5:	83 c4 1c             	add    esp,0x1c
c00188d8:	68 00 10 00 00       	push   0x1000
c00188dd:	6a 00                	push   0x0
c00188df:	50                   	push   eax
c00188e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188e4:	e8 07 7c fe ff       	call   c00004f0 <memset>
c00188e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188ed:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00188f0:	e8 d0 f8 ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00188f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00188ff:	81 ca 07 04 00 00    	or     edx,0x407
c0018905:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018908:	e9 4a ff ff ff       	jmp    c0018857 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c001890d:	90                   	nop

c001890e <VAS::VAS(bool)>:
c001890e:	53                   	push   ebx
c001890f:	83 ec 28             	sub    esp,0x28
c0018912:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018916:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001891a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001891e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018929:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018934:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018938:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001893b:	e8 5e dd ff ff       	call   c001669e <Phys::allocatePage()>
c0018940:	89 c2                	mov    edx,eax
c0018942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018946:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018949:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001894f:	83 ec 0c             	sub    esp,0xc
c0018952:	6a 01                	push   0x1
c0018954:	e8 58 f5 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	89 c2                	mov    edx,eax
c001895e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018962:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018965:	83 ec 0c             	sub    esp,0xc
c0018968:	6a 03                	push   0x3
c001896a:	6a 01                	push   0x1
c001896c:	52                   	push   edx
c001896d:	50                   	push   eax
c001896e:	53                   	push   ebx
c001896f:	e8 50 fe ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018974:	83 c4 20             	add    esp,0x20
c0018977:	89 c2                	mov    edx,eax
c0018979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001897d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018980:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018988:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018990:	7f 1d                	jg     c00189af <VAS::VAS(bool)+0xa1>
c0018992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018996:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018999:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001899d:	c1 e2 02             	shl    edx,0x2
c00189a0:	01 d0                	add    eax,edx
c00189a2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00189a8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00189ad:	eb d9                	jmp    c0018988 <VAS::VAS(bool)+0x7a>
c00189af:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00189b7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00189bf:	7f 7e                	jg     c0018a3f <VAS::VAS(bool)+0x131>
c00189c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189c5:	2d 00 02 00 00       	sub    eax,0x200
c00189ca:	c1 e0 0c             	shl    eax,0xc
c00189cd:	83 c8 05             	or     eax,0x5
c00189d0:	89 c2                	mov    edx,eax
c00189d2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00189d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189dd:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00189e3:	83 e0 10             	and    eax,0x10
c00189e6:	0f b6 c0             	movzx  eax,al
c00189e9:	85 c0                	test   eax,eax
c00189eb:	74 07                	je     c00189f4 <VAS::VAS(bool)+0xe6>
c00189ed:	b8 00 01 00 00       	mov    eax,0x100
c00189f2:	eb 05                	jmp    c00189f9 <VAS::VAS(bool)+0xeb>
c00189f4:	b8 00 00 00 00       	mov    eax,0x0
c00189f9:	09 d0                	or     eax,edx
c00189fb:	89 c1                	mov    ecx,eax
c00189fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a08:	c1 e2 02             	shl    edx,0x2
c0018a0b:	01 d0                	add    eax,edx
c0018a0d:	89 ca                	mov    edx,ecx
c0018a0f:	89 10                	mov    DWORD PTR [eax],edx
c0018a11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a15:	2d 40 03 00 00       	sub    eax,0x340
c0018a1a:	83 f8 7f             	cmp    eax,0x7f
c0018a1d:	77 16                	ja     c0018a35 <VAS::VAS(bool)+0x127>
c0018a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a2a:	c1 e2 02             	shl    edx,0x2
c0018a2d:	01 d0                	add    eax,edx
c0018a2f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a35:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018a3a:	e9 78 ff ff ff       	jmp    c00189b7 <VAS::VAS(bool)+0xa9>
c0018a3f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a4a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a50:	83 e0 10             	and    eax,0x10
c0018a53:	0f b6 c0             	movzx  eax,al
c0018a56:	85 c0                	test   eax,eax
c0018a58:	74 07                	je     c0018a61 <VAS::VAS(bool)+0x153>
c0018a5a:	b8 03 41 00 00       	mov    eax,0x4103
c0018a5f:	eb 05                	jmp    c0018a66 <VAS::VAS(bool)+0x158>
c0018a61:	b8 03 40 00 00       	mov    eax,0x4003
c0018a66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a6a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018a6d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018a73:	89 02                	mov    DWORD PTR [edx],eax
c0018a75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a79:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018a7c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a87:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a8d:	83 e0 10             	and    eax,0x10
c0018a90:	0f b6 c0             	movzx  eax,al
c0018a93:	85 c0                	test   eax,eax
c0018a95:	74 07                	je     c0018a9e <VAS::VAS(bool)+0x190>
c0018a97:	b8 00 01 00 00       	mov    eax,0x100
c0018a9c:	eb 05                	jmp    c0018aa3 <VAS::VAS(bool)+0x195>
c0018a9e:	b8 00 00 00 00       	mov    eax,0x0
c0018aa3:	09 c2                	or     edx,eax
c0018aa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aa9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018aac:	05 fc 0f 00 00       	add    eax,0xffc
c0018ab1:	83 ca 03             	or     edx,0x3
c0018ab4:	89 10                	mov    DWORD PTR [eax],edx
c0018ab6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018abb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ac1:	83 ec 0c             	sub    esp,0xc
c0018ac4:	50                   	push   eax
c0018ac5:	e8 f0 29 00 00       	call   c001b4ba <Device::getName()>
c0018aca:	83 c4 10             	add    esp,0x10
c0018acd:	83 ec 08             	sub    esp,0x8
c0018ad0:	68 f0 12 03 c0       	push   0xc00312f0
c0018ad5:	50                   	push   eax
c0018ad6:	e8 a5 7c fe ff       	call   c0000780 <strcmp>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	85 c0                	test   eax,eax
c0018ae0:	0f 94 c0             	sete   al
c0018ae3:	0f b6 c0             	movzx  eax,al
c0018ae6:	85 c0                	test   eax,eax
c0018ae8:	74 68                	je     c0018b52 <VAS::VAS(bool)+0x244>
c0018aea:	fa                   	cli    
c0018aeb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018af0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018af6:	05 7c 09 00 00       	add    eax,0x97c
c0018afb:	83 ec 0c             	sub    esp,0xc
c0018afe:	50                   	push   eax
c0018aff:	e8 86 d3 ff ff       	call   c0015e8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b04:	83 c4 10             	add    esp,0x10
c0018b07:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b0c:	89 c3                	mov    ebx,eax
c0018b0e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b19:	05 7c 09 00 00       	add    eax,0x97c
c0018b1e:	83 ec 0c             	sub    esp,0xc
c0018b21:	50                   	push   eax
c0018b22:	e8 63 d3 ff ff       	call   c0015e8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	83 ec 08             	sub    esp,0x8
c0018b2d:	50                   	push   eax
c0018b2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b32:	e8 6f f6 ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b41:	6a 11                	push   0x11
c0018b43:	53                   	push   ebx
c0018b44:	50                   	push   eax
c0018b45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b49:	e8 6c fa ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018b4e:	83 c4 10             	add    esp,0x10
c0018b51:	fb                   	sti    
c0018b52:	90                   	nop
c0018b53:	83 c4 28             	add    esp,0x28
c0018b56:	5b                   	pop    ebx
c0018b57:	c3                   	ret    

c0018b58 <VAS::evict(unsigned long)>:
c0018b58:	55                   	push   ebp
c0018b59:	57                   	push   edi
c0018b5a:	56                   	push   esi
c0018b5b:	53                   	push   ebx
c0018b5c:	83 ec 1c             	sub    esp,0x1c
c0018b5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b63:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b6b:	e8 96 f4 ff ff       	call   c0018006 <Virt::allocateSwapfilePage()>
c0018b70:	89 c7                	mov    edi,eax
c0018b72:	a1 0c 38 03 c0       	mov    eax,ds:0xc003380c
c0018b77:	85 c0                	test   eax,eax
c0018b79:	7e 40                	jle    c0018bbb <VAS::evict(unsigned long)+0x63>
c0018b7b:	89 ee                	mov    esi,ebp
c0018b7d:	31 db                	xor    ebx,ebx
c0018b7f:	83 ec 0c             	sub    esp,0xc
c0018b82:	57                   	push   edi
c0018b83:	e8 68 f4 ff ff       	call   c0017ff0 <Virt::swapIDToSector(unsigned long)>
c0018b88:	31 d2                	xor    edx,edx
c0018b8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0018b8d:	81 c6 00 02 00 00    	add    esi,0x200
c0018b93:	6a 01                	push   0x1
c0018b95:	52                   	push   edx
c0018b96:	01 d8                	add    eax,ebx
c0018b98:	83 c3 01             	add    ebx,0x1
c0018b9b:	50                   	push   eax
c0018b9c:	0f be 05 18 38 03 c0 	movsx  eax,BYTE PTR ds:0xc0033818
c0018ba3:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018baa:	50                   	push   eax
c0018bab:	e8 0e 3b 00 00       	call   c001c6be <LogicalDisk::write(unsigned long long, int, void*)>
c0018bb0:	83 c4 20             	add    esp,0x20
c0018bb3:	39 1d 0c 38 03 c0    	cmp    DWORD PTR ds:0xc003380c,ebx
c0018bb9:	7f c4                	jg     c0018b7f <VAS::evict(unsigned long)+0x27>
c0018bbb:	c1 e7 0c             	shl    edi,0xc
c0018bbe:	83 ec 08             	sub    esp,0x8
c0018bc1:	55                   	push   ebp
c0018bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bc6:	50                   	push   eax
c0018bc7:	e8 da f5 ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018bcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0018bce:	89 d3                	mov    ebx,edx
c0018bd0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018bd6:	09 d7                	or     edi,edx
c0018bd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018bde:	89 38                	mov    DWORD PTR [eax],edi
c0018be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018be3:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018be9:	83 c2 01             	add    edx,0x1
c0018bec:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018bf2:	e8 3e da ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0018bf7:	0f 20 d8             	mov    eax,cr3
c0018bfa:	0f 22 d8             	mov    cr3,eax
c0018bfd:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c03:	51                   	push   ecx
c0018c04:	55                   	push   ebp
c0018c05:	53                   	push   ebx
c0018c06:	68 44 11 03 c0       	push   0xc0031144
c0018c0b:	e8 b6 05 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018c10:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c15:	c7 44 24 50 fe 12 03 c0 	mov    DWORD PTR [esp+0x50],0xc00312fe
c0018c1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c21:	8d 50 01             	lea    edx,[eax+0x1]
c0018c24:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c2a:	83 c4 3c             	add    esp,0x3c
c0018c2d:	5b                   	pop    ebx
c0018c2e:	5e                   	pop    esi
c0018c2f:	5f                   	pop    edi
c0018c30:	5d                   	pop    ebp
c0018c31:	e9 90 05 00 00       	jmp    c00191c6 <Dbg::kprintf(char const*, ...)>

c0018c36 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018c36:	55                   	push   ebp
c0018c37:	57                   	push   edi
c0018c38:	56                   	push   esi
c0018c39:	53                   	push   ebx
c0018c3a:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018c40:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018c47:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018c4d:	77 78                	ja     c0018cc7 <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018c4f:	83 ec 08             	sub    esp,0x8
c0018c52:	53                   	push   ebx
c0018c53:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c59:	68 21 13 03 c0       	push   0xc0031321
c0018c5e:	e8 63 05 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018c63:	58                   	pop    eax
c0018c64:	5a                   	pop    edx
c0018c65:	53                   	push   ebx
c0018c66:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018c6d:	51                   	push   ecx
c0018c6e:	e8 33 f5 ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018c73:	83 c4 10             	add    esp,0x10
c0018c76:	85 c0                	test   eax,eax
c0018c78:	89 c5                	mov    ebp,eax
c0018c7a:	0f 95 c0             	setne  al
c0018c7d:	85 db                	test   ebx,ebx
c0018c7f:	0f 95 c2             	setne  dl
c0018c82:	21 d0                	and    eax,edx
c0018c84:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018c88:	a8 01                	test   al,0x1
c0018c8a:	75 0f                	jne    c0018c9b <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018c8c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018c90:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018c96:	5b                   	pop    ebx
c0018c97:	5e                   	pop    esi
c0018c98:	5f                   	pop    edi
c0018c99:	5d                   	pop    ebp
c0018c9a:	c3                   	ret    
c0018c9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c9e:	f6 c4 02             	test   ah,0x2
c0018ca1:	75 39                	jne    c0018cdc <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018ca3:	89 c2                	mov    edx,eax
c0018ca5:	81 e2 01 04 00 00    	and    edx,0x401
c0018cab:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018cb1:	74 73                	je     c0018d26 <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018cb3:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018cb8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018cbc:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018cc2:	5b                   	pop    ebx
c0018cc3:	5e                   	pop    esi
c0018cc4:	5f                   	pop    edi
c0018cc5:	5d                   	pop    ebp
c0018cc6:	c3                   	ret    
c0018cc7:	83 ec 0c             	sub    esp,0xc
c0018cca:	68 0f 13 03 c0       	push   0xc003130f
c0018ccf:	e8 9f 73 00 00       	call   c0020073 <KePanic(char const*)>
c0018cd4:	83 c4 10             	add    esp,0x10
c0018cd7:	e9 73 ff ff ff       	jmp    c0018c4f <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018cdc:	83 ec 0c             	sub    esp,0xc
c0018cdf:	89 de                	mov    esi,ebx
c0018ce1:	68 74 11 03 c0       	push   0xc0031174
c0018ce6:	e8 db 04 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018ceb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018cef:	e8 aa d9 ff ff       	call   c001669e <Phys::allocatePage()>
c0018cf4:	ba 00 10 00 00       	mov    edx,0x1000
c0018cf9:	89 d1                	mov    ecx,edx
c0018cfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cfd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018d00:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d06:	09 c8                	or     eax,ecx
c0018d08:	83 c8 02             	or     eax,0x2
c0018d0b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d0e:	0f 20 d8             	mov    eax,cr3
c0018d11:	0f 22 d8             	mov    cr3,eax
c0018d14:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d18:	89 df                	mov    edi,ebx
c0018d1a:	89 d1                	mov    ecx,edx
c0018d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d1e:	83 c4 10             	add    esp,0x10
c0018d21:	e9 66 ff ff ff       	jmp    c0018c8c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0018d26:	c1 e8 0c             	shr    eax,0xc
c0018d29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d2d:	e8 6c d9 ff ff       	call   c001669e <Phys::allocatePage()>
c0018d32:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d35:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0018d3b:	09 c2                	or     edx,eax
c0018d3d:	81 ca 01 08 00 00    	or     edx,0x801
c0018d43:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0018d46:	a1 0c 38 03 c0       	mov    eax,ds:0xc003380c
c0018d4b:	85 c0                	test   eax,eax
c0018d4d:	7e 44                	jle    c0018d93 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0018d4f:	89 df                	mov    edi,ebx
c0018d51:	31 f6                	xor    esi,esi
c0018d53:	83 ec 0c             	sub    esp,0xc
c0018d56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018d5a:	51                   	push   ecx
c0018d5b:	e8 90 f2 ff ff       	call   c0017ff0 <Virt::swapIDToSector(unsigned long)>
c0018d60:	31 d2                	xor    edx,edx
c0018d62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018d65:	81 c7 00 02 00 00    	add    edi,0x200
c0018d6b:	6a 01                	push   0x1
c0018d6d:	52                   	push   edx
c0018d6e:	01 f0                	add    eax,esi
c0018d70:	83 c6 01             	add    esi,0x1
c0018d73:	50                   	push   eax
c0018d74:	0f be 05 18 38 03 c0 	movsx  eax,BYTE PTR ds:0xc0033818
c0018d7b:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0018d82:	55                   	push   ebp
c0018d83:	e8 ca 38 00 00       	call   c001c652 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d88:	83 c4 20             	add    esp,0x20
c0018d8b:	39 35 0c 38 03 c0    	cmp    DWORD PTR ds:0xc003380c,esi
c0018d91:	7f c0                	jg     c0018d53 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0018d93:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018d98:	83 ec 04             	sub    esp,0x4
c0018d9b:	83 e8 01             	sub    eax,0x1
c0018d9e:	50                   	push   eax
c0018d9f:	53                   	push   ebx
c0018da0:	68 34 13 03 c0       	push   0xc0031334
c0018da5:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018daa:	e8 17 04 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018daf:	58                   	pop    eax
c0018db0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018db4:	52                   	push   edx
c0018db5:	e8 13 f2 ff ff       	call   c0017fcd <Virt::freeSwapfilePage(unsigned long)>
c0018dba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	83 e8 01             	sub    eax,0x1
c0018dc5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018dca:	85 c0                	test   eax,eax
c0018dcc:	75 01                	jne    c0018dcf <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0018dce:	fb                   	sti    
c0018dcf:	0f 20 d8             	mov    eax,cr3
c0018dd2:	0f 22 d8             	mov    cr3,eax
c0018dd5:	e9 b2 fe ff ff       	jmp    c0018c8c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0018dda <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018dda:	55                   	push   ebp
c0018ddb:	57                   	push   edi
c0018ddc:	56                   	push   esi
c0018ddd:	53                   	push   ebx
c0018dde:	83 ec 28             	sub    esp,0x28
c0018de1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018de5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018de9:	50                   	push   eax
c0018dea:	e8 c2 f0 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c0018def:	83 c4 0c             	add    esp,0xc
c0018df2:	6a 07                	push   0x7
c0018df4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018df8:	52                   	push   edx
c0018df9:	89 c5                	mov    ebp,eax
c0018dfb:	53                   	push   ebx
c0018dfc:	e8 c1 f8 ff ff       	call   c00186c2 <VAS::allocatePages(int, int)>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e08:	89 c7                	mov    edi,eax
c0018e0a:	85 c9                	test   ecx,ecx
c0018e0c:	74 2f                	je     c0018e3d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e0e:	31 f6                	xor    esi,esi
c0018e10:	e8 89 d8 ff ff       	call   c001669e <Phys::allocatePage()>
c0018e15:	83 c6 01             	add    esi,0x1
c0018e18:	6a 03                	push   0x3
c0018e1a:	55                   	push   ebp
c0018e1b:	50                   	push   eax
c0018e1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e20:	53                   	push   ebx
c0018e21:	e8 94 f7 ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e26:	6a 07                	push   0x7
c0018e28:	57                   	push   edi
c0018e29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e2d:	50                   	push   eax
c0018e2e:	53                   	push   ebx
c0018e2f:	e8 86 f7 ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e34:	83 c4 20             	add    esp,0x20
c0018e37:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0018e3b:	75 d3                	jne    c0018e10 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018e3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e41:	89 28                	mov    DWORD PTR [eax],ebp
c0018e43:	83 c4 1c             	add    esp,0x1c
c0018e46:	89 f8                	mov    eax,edi
c0018e48:	5b                   	pop    ebx
c0018e49:	5e                   	pop    esi
c0018e4a:	5f                   	pop    edi
c0018e4b:	5d                   	pop    ebp
c0018e4c:	c3                   	ret    
c0018e4d:	90                   	nop

c0018e4e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018e4e:	53                   	push   ebx
c0018e4f:	83 ec 14             	sub    esp,0x14
c0018e52:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018e56:	68 94 11 03 c0       	push   0xc0031194
c0018e5b:	e8 66 03 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018e60:	c7 04 24 f4 11 03 c0 	mov    DWORD PTR [esp],0xc00311f4
c0018e67:	e8 5a 03 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018e6c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018e70:	83 c4 18             	add    esp,0x18
c0018e73:	5b                   	pop    ebx
c0018e74:	e9 4c f3 ff ff       	jmp    c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0018e79:	90                   	nop

c0018e7a <VAS::scanForEviction()>:
c0018e7a:	57                   	push   edi
c0018e7b:	56                   	push   esi
c0018e7c:	31 f6                	xor    esi,esi
c0018e7e:	53                   	push   ebx
c0018e7f:	83 ec 10             	sub    esp,0x10
c0018e82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018e86:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018e89:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e8f:	75 0e                	jne    c0018e9f <VAS::scanForEviction()+0x25>
c0018e91:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e94:	89 da                	mov    edx,ebx
c0018e96:	c1 ea 16             	shr    edx,0x16
c0018e99:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e9d:	74 57                	je     c0018ef6 <VAS::scanForEviction()+0x7c>
c0018e9f:	53                   	push   ebx
c0018ea0:	57                   	push   edi
c0018ea1:	e8 00 f3 ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0018ea6:	5a                   	pop    edx
c0018ea7:	59                   	pop    ecx
c0018ea8:	8b 10                	mov    edx,DWORD PTR [eax]
c0018eaa:	89 d1                	mov    ecx,edx
c0018eac:	c1 e9 0c             	shr    ecx,0xc
c0018eaf:	74 10                	je     c0018ec1 <VAS::scanForEviction()+0x47>
c0018eb1:	89 d1                	mov    ecx,edx
c0018eb3:	81 e1 01 08 00 00    	and    ecx,0x801
c0018eb9:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018ebf:	74 40                	je     c0018f01 <VAS::scanForEviction()+0x87>
c0018ec1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018ec7:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018ecd:	76 2d                	jbe    c0018efc <VAS::scanForEviction()+0x82>
c0018ecf:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018ed6:	83 c6 01             	add    esi,0x1
c0018ed9:	83 fe 03             	cmp    esi,0x3
c0018edc:	74 32                	je     c0018f10 <VAS::scanForEviction()+0x96>
c0018ede:	31 db                	xor    ebx,ebx
c0018ee0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ee6:	75 b7                	jne    c0018e9f <VAS::scanForEviction()+0x25>
c0018ee8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018eeb:	89 da                	mov    edx,ebx
c0018eed:	c1 ea 16             	shr    edx,0x16
c0018ef0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ef4:	75 a9                	jne    c0018e9f <VAS::scanForEviction()+0x25>
c0018ef6:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018efc:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018eff:	eb 88                	jmp    c0018e89 <VAS::scanForEviction()+0xf>
c0018f01:	f6 c2 20             	test   dl,0x20
c0018f04:	74 13                	je     c0018f19 <VAS::scanForEviction()+0x9f>
c0018f06:	83 e2 df             	and    edx,0xffffffdf
c0018f09:	89 10                	mov    DWORD PTR [eax],edx
c0018f0b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f0e:	eb b1                	jmp    c0018ec1 <VAS::scanForEviction()+0x47>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	31 c0                	xor    eax,eax
c0018f15:	5b                   	pop    ebx
c0018f16:	5e                   	pop    esi
c0018f17:	5f                   	pop    edi
c0018f18:	c3                   	ret    
c0018f19:	89 d0                	mov    eax,edx
c0018f1b:	83 ec 08             	sub    esp,0x8
c0018f1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f27:	53                   	push   ebx
c0018f28:	68 49 13 03 c0       	push   0xc0031349
c0018f2d:	e8 94 02 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018f32:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f35:	58                   	pop    eax
c0018f36:	5a                   	pop    edx
c0018f37:	51                   	push   ecx
c0018f38:	57                   	push   edi
c0018f39:	e8 1a fc ff ff       	call   c0018b58 <VAS::evict(unsigned long)>
c0018f3e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018f41:	5b                   	pop    ebx
c0018f42:	5e                   	pop    esi
c0018f43:	50                   	push   eax
c0018f44:	68 5d 13 03 c0       	push   0xc003135d
c0018f49:	e8 78 02 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018f4e:	58                   	pop    eax
c0018f4f:	5a                   	pop    edx
c0018f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f54:	50                   	push   eax
c0018f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f59:	68 70 13 03 c0       	push   0xc0031370
c0018f5e:	e8 63 02 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0018f63:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f66:	83 c4 10             	add    esp,0x10
c0018f69:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018f6f:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	5b                   	pop    ebx
c0018f7a:	5e                   	pop    esi
c0018f7b:	5f                   	pop    edi
c0018f7c:	c3                   	ret    

c0018f7d <mapVASFirstTime>:
c0018f7d:	55                   	push   ebp
c0018f7e:	57                   	push   edi
c0018f7f:	56                   	push   esi
c0018f80:	53                   	push   ebx
c0018f81:	83 ec 0c             	sub    esp,0xc
c0018f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f89:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018f8c:	83 fa 01             	cmp    edx,0x1
c0018f8f:	0f 84 cb 00 00 00    	je     c0019060 <mapVASFirstTime+0xe3>
c0018f95:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018f98:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018f9d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018fa2:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018fa5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018fab:	c1 e5 15             	shl    ebp,0x15
c0018fae:	29 eb                	sub    ebx,ebp
c0018fb0:	29 ef                	sub    edi,ebp
c0018fb2:	e8 e7 d6 ff ff       	call   c001669e <Phys::allocatePage()>
c0018fb7:	83 ec 0c             	sub    esp,0xc
c0018fba:	68 03 04 00 00       	push   0x403
c0018fbf:	6a 01                	push   0x1
c0018fc1:	53                   	push   ebx
c0018fc2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018fc8:	50                   	push   eax
c0018fc9:	56                   	push   esi
c0018fca:	e8 f5 f7 ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018fcf:	83 c4 20             	add    esp,0x20
c0018fd2:	39 fb                	cmp    ebx,edi
c0018fd4:	75 dc                	jne    c0018fb2 <mapVASFirstTime+0x35>
c0018fd6:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0018fdb:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0018fe0:	29 eb                	sub    ebx,ebp
c0018fe2:	29 ef                	sub    edi,ebp
c0018fe4:	e8 b5 d6 ff ff       	call   c001669e <Phys::allocatePage()>
c0018fe9:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0018fed:	83 fa 01             	cmp    edx,0x1
c0018ff0:	19 d2                	sbb    edx,edx
c0018ff2:	83 ec 0c             	sub    esp,0xc
c0018ff5:	83 e2 04             	and    edx,0x4
c0018ff8:	81 c2 03 04 00 00    	add    edx,0x403
c0018ffe:	52                   	push   edx
c0018fff:	6a 01                	push   0x1
c0019001:	53                   	push   ebx
c0019002:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019008:	50                   	push   eax
c0019009:	56                   	push   esi
c001900a:	e8 b5 f7 ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001900f:	83 c4 20             	add    esp,0x20
c0019012:	39 df                	cmp    edi,ebx
c0019014:	75 ce                	jne    c0018fe4 <mapVASFirstTime+0x67>
c0019016:	83 ec 0c             	sub    esp,0xc
c0019019:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c001901e:	6a 04                	push   0x4
c0019020:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019026:	6a ff                	push   0xffffffff
c0019028:	c1 eb 0c             	shr    ebx,0xc
c001902b:	53                   	push   ebx
c001902c:	68 00 50 03 c0       	push   0xc0035000
c0019031:	56                   	push   esi
c0019032:	e8 09 f3 ff ff       	call   c0018340 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019037:	83 c4 14             	add    esp,0x14
c001903a:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001903f:	6a 04                	push   0x4
c0019041:	6a ff                	push   0xffffffff
c0019043:	53                   	push   ebx
c0019044:	68 00 50 03 c0       	push   0xc0035000
c0019049:	50                   	push   eax
c001904a:	e8 f1 f2 ff ff       	call   c0018340 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001904f:	0f 20 d8             	mov    eax,cr3
c0019052:	0f 22 d8             	mov    cr3,eax
c0019055:	83 c4 20             	add    esp,0x20
c0019058:	83 c4 0c             	add    esp,0xc
c001905b:	5b                   	pop    ebx
c001905c:	5e                   	pop    esi
c001905d:	5f                   	pop    edi
c001905e:	5d                   	pop    ebp
c001905f:	c3                   	ret    
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	68 7d 13 03 c0       	push   0xc003137d
c0019068:	e8 59 01 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001906d:	83 c4 10             	add    esp,0x10
c0019070:	83 c4 0c             	add    esp,0xc
c0019073:	5b                   	pop    ebx
c0019074:	5e                   	pop    esi
c0019075:	5f                   	pop    edi
c0019076:	5d                   	pop    ebp
c0019077:	c3                   	ret    

c0019078 <__cxa_atexit>:
c0019078:	31 c0                	xor    eax,eax
c001907a:	c3                   	ret    

c001907b <__cxa_finalize>:
c001907b:	c3                   	ret    

c001907c <__stack_chk_fail>:
c001907c:	55                   	push   ebp
c001907d:	89 e5                	mov    ebp,esp
c001907f:	83 ec 10             	sub    esp,0x10
c0019082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019085:	68 96 13 03 c0       	push   0xc0031396
c001908a:	e8 37 01 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001908f:	58                   	pop    eax
c0019090:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019093:	5a                   	pop    edx
c0019094:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019097:	68 96 13 03 c0       	push   0xc0031396
c001909c:	e8 25 01 00 00       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00190a1:	c7 04 24 9e 13 03 c0 	mov    DWORD PTR [esp],0xc003139e
c00190a8:	e8 c6 6f 00 00       	call   c0020073 <KePanic(char const*)>
c00190ad:	83 c4 10             	add    esp,0x10
c00190b0:	c9                   	leave  
c00190b1:	c3                   	ret    

c00190b2 <__cxa_pure_virtual>:
c00190b2:	83 ec 18             	sub    esp,0x18
c00190b5:	68 b6 13 03 c0       	push   0xc00313b6
c00190ba:	e8 b4 6f 00 00       	call   c0020073 <KePanic(char const*)>
c00190bf:	83 c4 1c             	add    esp,0x1c
c00190c2:	c3                   	ret    

c00190c3 <operator new[](unsigned long)>:
c00190c3:	e9 c7 d2 ff ff       	jmp    c001638f <malloc>

c00190c8 <operator delete(void*, unsigned long)>:
c00190c8:	e9 e2 d2 ff ff       	jmp    c00163af <rfree>

c00190cd <operator delete[](void*)>:
c00190cd:	e9 dd d2 ff ff       	jmp    c00163af <rfree>

c00190d2 <operator delete[](void*, unsigned long)>:
c00190d2:	e9 d8 d2 ff ff       	jmp    c00163af <rfree>

c00190d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00190d7:	55                   	push   ebp
c00190d8:	57                   	push   edi
c00190d9:	56                   	push   esi
c00190da:	53                   	push   ebx
c00190db:	83 ec 20             	sub    esp,0x20
c00190de:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00190e2:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c00190ea:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00190ee:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c00190f6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00190fa:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0019102:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c001910a:	89 f7                	mov    edi,esi
c001910c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019111:	89 eb                	mov    ebx,ebp
c0019113:	eb 02                	jmp    c0019117 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019115:	89 c7                	mov    edi,eax
c0019117:	31 d2                	xor    edx,edx
c0019119:	89 f8                	mov    eax,edi
c001911b:	f7 f1                	div    ecx
c001911d:	83 c3 01             	add    ebx,0x1
c0019120:	39 cf                	cmp    edi,ecx
c0019122:	73 f1                	jae    c0019115 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0019124:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0019127:	eb 02                	jmp    c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019129:	89 c6                	mov    esi,eax
c001912b:	31 d2                	xor    edx,edx
c001912d:	89 f0                	mov    eax,esi
c001912f:	f7 f1                	div    ecx
c0019131:	83 eb 01             	sub    ebx,0x1
c0019134:	39 ce                	cmp    esi,ecx
c0019136:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001913a:	88 13                	mov    BYTE PTR [ebx],dl
c001913c:	73 eb                	jae    c0019129 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c001913e:	83 c4 20             	add    esp,0x20
c0019141:	89 e8                	mov    eax,ebp
c0019143:	5b                   	pop    ebx
c0019144:	5e                   	pop    esi
c0019145:	5f                   	pop    edi
c0019146:	5d                   	pop    ebp
c0019147:	c3                   	ret    

c0019148 <Dbg::logc(char)>:
c0019148:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001914f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019153:	75 12                	jne    c0019167 <Dbg::logc(char)+0x1f>
c0019155:	ba fd 03 00 00       	mov    edx,0x3fd
c001915a:	ec                   	in     al,dx
c001915b:	a8 20                	test   al,0x20
c001915d:	74 fb                	je     c001915a <Dbg::logc(char)+0x12>
c001915f:	ba f8 03 00 00       	mov    edx,0x3f8
c0019164:	88 c8                	mov    al,cl
c0019166:	ee                   	out    dx,al
c0019167:	c3                   	ret    

c0019168 <Dbg::logs(char*)>:
c0019168:	53                   	push   ebx
c0019169:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001916d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019170:	85 c0                	test   eax,eax
c0019172:	74 11                	je     c0019185 <Dbg::logs(char*)+0x1d>
c0019174:	50                   	push   eax
c0019175:	83 c3 01             	add    ebx,0x1
c0019178:	e8 cb ff ff ff       	call   c0019148 <Dbg::logc(char)>
c001917d:	58                   	pop    eax
c001917e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019181:	85 c0                	test   eax,eax
c0019183:	75 ef                	jne    c0019174 <Dbg::logs(char*)+0xc>
c0019185:	5b                   	pop    ebx
c0019186:	c3                   	ret    

c0019187 <Dbg::logWriteInt(unsigned int)>:
c0019187:	83 ec 10             	sub    esp,0x10
c001918a:	6a 0a                	push   0xa
c001918c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019190:	50                   	push   eax
c0019191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019195:	50                   	push   eax
c0019196:	e8 3c ff ff ff       	call   c00190d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001919b:	50                   	push   eax
c001919c:	e8 c7 ff ff ff       	call   c0019168 <Dbg::logs(char*)>
c00191a1:	83 c4 20             	add    esp,0x20
c00191a4:	c3                   	ret    

c00191a5 <Dbg::logWriteIntBase(unsigned int, int)>:
c00191a5:	83 ec 10             	sub    esp,0x10
c00191a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191ac:	50                   	push   eax
c00191ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191b1:	50                   	push   eax
c00191b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191b6:	52                   	push   edx
c00191b7:	e8 1b ff ff ff       	call   c00190d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00191bc:	50                   	push   eax
c00191bd:	e8 a6 ff ff ff       	call   c0019168 <Dbg::logs(char*)>
c00191c2:	83 c4 20             	add    esp,0x20
c00191c5:	c3                   	ret    

c00191c6 <Dbg::kprintf(char const*, ...)>:
c00191c6:	55                   	push   ebp
c00191c7:	57                   	push   edi
c00191c8:	56                   	push   esi
c00191c9:	53                   	push   ebx
c00191ca:	83 ec 0c             	sub    esp,0xc
c00191cd:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00191d8:	74 08                	je     c00191e2 <Dbg::kprintf(char const*, ...)+0x1c>
c00191da:	83 c4 0c             	add    esp,0xc
c00191dd:	5b                   	pop    ebx
c00191de:	5e                   	pop    esi
c00191df:	5f                   	pop    edi
c00191e0:	5d                   	pop    ebp
c00191e1:	c3                   	ret    
c00191e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00191e6:	31 ff                	xor    edi,edi
c00191e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191ef:	85 c0                	test   eax,eax
c00191f1:	74 e7                	je     c00191da <Dbg::kprintf(char const*, ...)+0x14>
c00191f3:	8d 77 01             	lea    esi,[edi+0x1]
c00191f6:	83 f8 25             	cmp    eax,0x25
c00191f9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00191fc:	75 47                	jne    c0019245 <Dbg::kprintf(char const*, ...)+0x7f>
c00191fe:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019201:	83 c7 02             	add    edi,0x2
c0019204:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019207:	83 e8 25             	sub    eax,0x25
c001920a:	0f b6 c0             	movzx  eax,al
c001920d:	83 f8 53             	cmp    eax,0x53
c0019210:	0f 87 ce 00 00 00    	ja     c00192e4 <Dbg::kprintf(char const*, ...)+0x11e>
c0019216:	ff 24 85 cc 13 03 c0 	jmp    DWORD PTR [eax*4-0x3ffcec34]
c001921d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019221:	89 c8                	mov    eax,ecx
c0019223:	83 c1 04             	add    ecx,0x4
c0019226:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001922a:	8b 28                	mov    ebp,DWORD PTR [eax]
c001922c:	55                   	push   ebp
c001922d:	e8 55 ff ff ff       	call   c0019187 <Dbg::logWriteInt(unsigned int)>
c0019232:	58                   	pop    eax
c0019233:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019236:	85 c0                	test   eax,eax
c0019238:	74 a0                	je     c00191da <Dbg::kprintf(char const*, ...)+0x14>
c001923a:	8d 77 01             	lea    esi,[edi+0x1]
c001923d:	83 f8 25             	cmp    eax,0x25
c0019240:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019243:	74 b9                	je     c00191fe <Dbg::kprintf(char const*, ...)+0x38>
c0019245:	50                   	push   eax
c0019246:	89 f7                	mov    edi,esi
c0019248:	e8 fb fe ff ff       	call   c0019148 <Dbg::logc(char)>
c001924d:	89 ee                	mov    esi,ebp
c001924f:	58                   	pop    eax
c0019250:	eb e1                	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c0019252:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019256:	89 c8                	mov    eax,ecx
c0019258:	83 c1 04             	add    ecx,0x4
c001925b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001925f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019261:	50                   	push   eax
c0019262:	e8 01 ff ff ff       	call   c0019168 <Dbg::logs(char*)>
c0019267:	58                   	pop    eax
c0019268:	eb c9                	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c001926a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001926e:	89 d0                	mov    eax,edx
c0019270:	83 c2 04             	add    edx,0x4
c0019273:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019277:	8b 00                	mov    eax,DWORD PTR [eax]
c0019279:	50                   	push   eax
c001927a:	e8 08 ff ff ff       	call   c0019187 <Dbg::logWriteInt(unsigned int)>
c001927f:	58                   	pop    eax
c0019280:	eb b1                	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c0019282:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019286:	89 d0                	mov    eax,edx
c0019288:	83 c2 04             	add    edx,0x4
c001928b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001928f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019292:	50                   	push   eax
c0019293:	e8 b0 fe ff ff       	call   c0019148 <Dbg::logc(char)>
c0019298:	58                   	pop    eax
c0019299:	eb 98                	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c001929b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001929f:	89 c8                	mov    eax,ecx
c00192a1:	83 c1 04             	add    ecx,0x4
c00192a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192a8:	6a 10                	push   0x10
c00192aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00192ac:	51                   	push   ecx
c00192ad:	e8 f3 fe ff ff       	call   c00191a5 <Dbg::logWriteIntBase(unsigned int, int)>
c00192b2:	5d                   	pop    ebp
c00192b3:	58                   	pop    eax
c00192b4:	e9 7a ff ff ff       	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c00192b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192bd:	89 d0                	mov    eax,edx
c00192bf:	83 c2 08             	add    edx,0x8
c00192c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192c6:	6a 10                	push   0x10
c00192c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ca:	50                   	push   eax
c00192cb:	e8 d5 fe ff ff       	call   c00191a5 <Dbg::logWriteIntBase(unsigned int, int)>
c00192d0:	58                   	pop    eax
c00192d1:	5a                   	pop    edx
c00192d2:	e9 5c ff ff ff       	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c00192d7:	6a 25                	push   0x25
c00192d9:	e8 6a fe ff ff       	call   c0019148 <Dbg::logc(char)>
c00192de:	5a                   	pop    edx
c00192df:	e9 4f ff ff ff       	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>
c00192e4:	6a 25                	push   0x25
c00192e6:	e8 5d fe ff ff       	call   c0019148 <Dbg::logc(char)>
c00192eb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00192ef:	50                   	push   eax
c00192f0:	e8 53 fe ff ff       	call   c0019148 <Dbg::logc(char)>
c00192f5:	5a                   	pop    edx
c00192f6:	59                   	pop    ecx
c00192f7:	e9 37 ff ff ff       	jmp    c0019233 <Dbg::kprintf(char const*, ...)+0x6d>

c00192fc <KiUbsanPrintDetails(char const*, void*)>:
c00192fc:	83 ec 1c             	sub    esp,0x1c
c00192ff:	83 ec 08             	sub    esp,0x8
c0019302:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019306:	68 1c 15 03 c0       	push   0xc003151c
c001930b:	e8 b6 fe ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019310:	83 c4 10             	add    esp,0x10
c0019313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019317:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001931b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001931f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019321:	83 ec 08             	sub    esp,0x8
c0019324:	50                   	push   eax
c0019325:	68 30 15 03 c0       	push   0xc0031530
c001932a:	e8 97 fe ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019336:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019339:	83 ec 08             	sub    esp,0x8
c001933c:	50                   	push   eax
c001933d:	68 3a 15 03 c0       	push   0xc003153a
c0019342:	e8 7f fe ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001934e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019351:	83 ec 08             	sub    esp,0x8
c0019354:	50                   	push   eax
c0019355:	68 44 15 03 c0       	push   0xc0031544
c001935a:	e8 67 fe ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	90                   	nop
c0019363:	83 c4 1c             	add    esp,0x1c
c0019366:	c3                   	ret    
c0019367:	90                   	nop

c0019368 <__ubsan_handle_type_mismatch_v1>:
c0019368:	83 ec 0c             	sub    esp,0xc
c001936b:	83 ec 08             	sub    esp,0x8
c001936e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019372:	68 88 16 03 c0       	push   0xc0031688
c0019377:	e8 80 ff ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c001937c:	83 c4 10             	add    esp,0x10
c001937f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019384:	75 16                	jne    c001939c <__ubsan_handle_type_mismatch_v1+0x34>
c0019386:	83 ec 0c             	sub    esp,0xc
c0019389:	68 4e 15 03 c0       	push   0xc003154e
c001938e:	e8 33 fe ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	e9 91 00 00 00       	jmp    c001942c <__ubsan_handle_type_mismatch_v1+0xc4>
c001939b:	90                   	nop
c001939c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00193a3:	85 c0                	test   eax,eax
c00193a5:	74 29                	je     c00193d0 <__ubsan_handle_type_mismatch_v1+0x68>
c00193a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00193ae:	83 e8 01             	sub    eax,0x1
c00193b1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00193b5:	75 19                	jne    c00193d0 <__ubsan_handle_type_mismatch_v1+0x68>
c00193b7:	83 ec 08             	sub    esp,0x8
c00193ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193be:	68 a8 16 03 c0       	push   0xc00316a8
c00193c3:	e8 fe fd ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	eb 5f                	jmp    c001942c <__ubsan_handle_type_mismatch_v1+0xc4>
c00193cd:	8d 76 00             	lea    esi,[esi+0x0]
c00193d0:	83 ec 0c             	sub    esp,0xc
c00193d3:	68 63 15 03 c0       	push   0xc0031563
c00193d8:	e8 e9 fd ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e4:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00193e7:	0f b6 c0             	movzx  eax,al
c00193ea:	83 ec 08             	sub    esp,0x8
c00193ed:	50                   	push   eax
c00193ee:	68 7d 15 03 c0       	push   0xc003157d
c00193f3:	e8 ce fd ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019402:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019405:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001940d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019410:	0f b6 c0             	movzx  eax,al
c0019413:	8b 04 85 20 38 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc7e0]
c001941a:	51                   	push   ecx
c001941b:	52                   	push   edx
c001941c:	50                   	push   eax
c001941d:	68 d0 16 03 c0       	push   0xc00316d0
c0019422:	e8 9f fd ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	66 90                	xchg   ax,ax
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	68 88 16 03 c0       	push   0xc0031688
c0019434:	e8 3a 6c 00 00       	call   c0020073 <KePanic(char const*)>
c0019439:	83 c4 10             	add    esp,0x10
c001943c:	90                   	nop
c001943d:	83 c4 0c             	add    esp,0xc
c0019440:	c3                   	ret    
c0019441:	8d 76 00             	lea    esi,[esi+0x0]

c0019444 <__ubsan_handle_pointer_overflow>:
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	83 ec 08             	sub    esp,0x8
c001944a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001944e:	68 18 17 03 c0       	push   0xc0031718
c0019453:	e8 a4 fe ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c0019458:	83 c4 10             	add    esp,0x10
c001945b:	83 ec 0c             	sub    esp,0xc
c001945e:	68 18 17 03 c0       	push   0xc0031718
c0019463:	e8 0b 6c 00 00       	call   c0020073 <KePanic(char const*)>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	90                   	nop
c001946c:	83 c4 0c             	add    esp,0xc
c001946f:	c3                   	ret    

c0019470 <__ubsan_handle_out_of_bounds>:
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	83 ec 08             	sub    esp,0x8
c0019476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001947a:	68 88 15 03 c0       	push   0xc0031588
c001947f:	e8 78 fe ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	83 ec 0c             	sub    esp,0xc
c001948a:	68 88 15 03 c0       	push   0xc0031588
c001948f:	e8 df 6b 00 00       	call   c0020073 <KePanic(char const*)>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	90                   	nop
c0019498:	83 c4 0c             	add    esp,0xc
c001949b:	c3                   	ret    

c001949c <__ubsan_handle_add_overflow>:
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	83 ec 08             	sub    esp,0x8
c00194a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a6:	68 a5 15 03 c0       	push   0xc00315a5
c00194ab:	e8 4c fe ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c00194b0:	83 c4 10             	add    esp,0x10
c00194b3:	83 ec 0c             	sub    esp,0xc
c00194b6:	68 a5 15 03 c0       	push   0xc00315a5
c00194bb:	e8 b3 6b 00 00       	call   c0020073 <KePanic(char const*)>
c00194c0:	83 c4 10             	add    esp,0x10
c00194c3:	90                   	nop
c00194c4:	83 c4 0c             	add    esp,0xc
c00194c7:	c3                   	ret    

c00194c8 <__ubsan_handle_load_invalid_value>:
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	83 ec 08             	sub    esp,0x8
c00194ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194d2:	68 38 17 03 c0       	push   0xc0031738
c00194d7:	e8 20 fe ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	83 ec 0c             	sub    esp,0xc
c00194e2:	68 38 17 03 c0       	push   0xc0031738
c00194e7:	e8 87 6b 00 00       	call   c0020073 <KePanic(char const*)>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	90                   	nop
c00194f0:	83 c4 0c             	add    esp,0xc
c00194f3:	c3                   	ret    

c00194f4 <__ubsan_handle_divrem_overflow>:
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	83 ec 08             	sub    esp,0x8
c00194fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194fe:	68 5c 17 03 c0       	push   0xc003175c
c0019503:	e8 f4 fd ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	83 ec 0c             	sub    esp,0xc
c001950e:	68 5c 17 03 c0       	push   0xc003175c
c0019513:	e8 5b 6b 00 00       	call   c0020073 <KePanic(char const*)>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	90                   	nop
c001951c:	83 c4 0c             	add    esp,0xc
c001951f:	c3                   	ret    

c0019520 <__ubsan_handle_mul_overflow>:
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	83 ec 08             	sub    esp,0x8
c0019526:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001952a:	68 c1 15 03 c0       	push   0xc00315c1
c001952f:	e8 c8 fd ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	68 c1 15 03 c0       	push   0xc00315c1
c001953f:	e8 2f 6b 00 00       	call   c0020073 <KePanic(char const*)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	90                   	nop
c0019548:	83 c4 0c             	add    esp,0xc
c001954b:	c3                   	ret    

c001954c <__ubsan_handle_sub_overflow>:
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	83 ec 08             	sub    esp,0x8
c0019552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019556:	68 dd 15 03 c0       	push   0xc00315dd
c001955b:	e8 9c fd ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	68 dd 15 03 c0       	push   0xc00315dd
c001956b:	e8 03 6b 00 00       	call   c0020073 <KePanic(char const*)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	90                   	nop
c0019574:	83 c4 0c             	add    esp,0xc
c0019577:	c3                   	ret    

c0019578 <__ubsan_handle_shift_out_of_bounds>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	83 ec 08             	sub    esp,0x8
c001957e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019582:	68 7c 17 03 c0       	push   0xc003177c
c0019587:	e8 70 fd ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	83 ec 0c             	sub    esp,0xc
c0019592:	68 7c 17 03 c0       	push   0xc003177c
c0019597:	e8 d7 6a 00 00       	call   c0020073 <KePanic(char const*)>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	90                   	nop
c00195a0:	83 c4 0c             	add    esp,0xc
c00195a3:	c3                   	ret    

c00195a4 <__ubsan_handle_negate_overflow>:
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	83 ec 08             	sub    esp,0x8
c00195aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ae:	68 a0 17 03 c0       	push   0xc00317a0
c00195b3:	e8 44 fd ff ff       	call   c00192fc <KiUbsanPrintDetails(char const*, void*)>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	83 ec 0c             	sub    esp,0xc
c00195be:	68 a0 17 03 c0       	push   0xc00317a0
c00195c3:	e8 ab 6a 00 00       	call   c0020073 <KePanic(char const*)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	90                   	nop
c00195cc:	83 c4 0c             	add    esp,0xc
c00195cf:	c3                   	ret    

c00195d0 <KiIsHashInTable(unsigned short)>:
c00195d0:	0f b7 d0             	movzx  edx,ax
c00195d3:	83 e0 07             	and    eax,0x7
c00195d6:	c1 fa 03             	sar    edx,0x3
c00195d9:	88 c1                	mov    cl,al
c00195db:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00195e2:	d3 fa                	sar    edx,cl
c00195e4:	89 d0                	mov    eax,edx
c00195e6:	83 e0 01             	and    eax,0x1
c00195e9:	c3                   	ret    

c00195ea <KiSetHashInTable(unsigned short, bool)>:
c00195ea:	56                   	push   esi
c00195eb:	53                   	push   ebx
c00195ec:	0f b7 d8             	movzx  ebx,ax
c00195ef:	c1 fb 03             	sar    ebx,0x3
c00195f2:	83 e0 07             	and    eax,0x7
c00195f5:	89 c1                	mov    ecx,eax
c00195f7:	b8 01 00 00 00       	mov    eax,0x1
c00195fc:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019603:	d3 e0                	shl    eax,cl
c0019605:	84 d2                	test   dl,dl
c0019607:	74 04                	je     c001960d <KiSetHashInTable(unsigned short, bool)+0x23>
c0019609:	09 f0                	or     eax,esi
c001960b:	eb 04                	jmp    c0019611 <KiSetHashInTable(unsigned short, bool)+0x27>
c001960d:	f7 d0                	not    eax
c001960f:	21 f0                	and    eax,esi
c0019611:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019617:	5b                   	pop    ebx
c0019618:	5e                   	pop    esi
c0019619:	c3                   	ret    

c001961a <KiFlushSymlinkChanges()>:
c001961a:	57                   	push   edi
c001961b:	56                   	push   esi
c001961c:	53                   	push   ebx
c001961d:	83 ec 1c             	sub    esp,0x1c
c0019620:	68 14 01 00 00       	push   0x114
c0019625:	e8 65 cd ff ff       	call   c001638f <malloc>
c001962a:	83 c4 0c             	add    esp,0xc
c001962d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019633:	68 bf 17 03 c0       	push   0xc00317bf
c0019638:	50                   	push   eax
c0019639:	89 c3                	mov    ebx,eax
c001963b:	e8 9e 0d 00 00       	call   c001a3de <File::File(char const*, Process*)>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	85 db                	test   ebx,ebx
c0019645:	75 10                	jne    c0019657 <KiFlushSymlinkChanges()+0x3d>
c0019647:	83 ec 0c             	sub    esp,0xc
c001964a:	68 dd 17 03 c0       	push   0xc00317dd
c001964f:	e8 1f 6a 00 00       	call   c0020073 <KePanic(char const*)>
c0019654:	83 c4 10             	add    esp,0x10
c0019657:	50                   	push   eax
c0019658:	50                   	push   eax
c0019659:	6a 06                	push   0x6
c001965b:	53                   	push   ebx
c001965c:	e8 9b 0d 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	85 c0                	test   eax,eax
c0019666:	74 10                	je     c0019678 <KiFlushSymlinkChanges()+0x5e>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	68 f7 17 03 c0       	push   0xc00317f7
c0019670:	e8 fe 69 00 00       	call   c0020073 <KePanic(char const*)>
c0019675:	83 c4 10             	add    esp,0x10
c0019678:	31 f6                	xor    esi,esi
c001967a:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019680:	7e 70                	jle    c00196f2 <KiFlushSymlinkChanges()+0xd8>
c0019682:	83 ec 0c             	sub    esp,0xc
c0019685:	89 f0                	mov    eax,esi
c0019687:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019689:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001968d:	c1 e0 08             	shl    eax,0x8
c0019690:	57                   	push   edi
c0019691:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019696:	50                   	push   eax
c0019697:	6a 00                	push   0x0
c0019699:	68 00 01 00 00       	push   0x100
c001969e:	53                   	push   ebx
c001969f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00196a2:	83 c4 20             	add    esp,0x20
c00196a5:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00196ad:	74 10                	je     c00196bf <KiFlushSymlinkChanges()+0xa5>
c00196af:	83 ec 0c             	sub    esp,0xc
c00196b2:	68 11 18 03 c0       	push   0xc0031811
c00196b7:	e8 b7 69 00 00       	call   c0020073 <KePanic(char const*)>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196c1:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	57                   	push   edi
c00196cc:	52                   	push   edx
c00196cd:	6a 00                	push   0x0
c00196cf:	6a 08                	push   0x8
c00196d1:	53                   	push   ebx
c00196d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00196d5:	83 c4 20             	add    esp,0x20
c00196d8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00196dd:	74 10                	je     c00196ef <KiFlushSymlinkChanges()+0xd5>
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	68 2b 18 03 c0       	push   0xc003182b
c00196e7:	e8 87 69 00 00       	call   c0020073 <KePanic(char const*)>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	46                   	inc    esi
c00196f0:	eb 88                	jmp    c001967a <KiFlushSymlinkChanges()+0x60>
c00196f2:	83 ec 0c             	sub    esp,0xc
c00196f5:	53                   	push   ebx
c00196f6:	e8 5f 0d 00 00       	call   c001a45a <File::close()>
c00196fb:	83 c4 10             	add    esp,0x10
c00196fe:	85 db                	test   ebx,ebx
c0019700:	74 0c                	je     c001970e <KiFlushSymlinkChanges()+0xf4>
c0019702:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	53                   	push   ebx
c0019708:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019718:	83 c4 10             	add    esp,0x10
c001971b:	5b                   	pop    ebx
c001971c:	5e                   	pop    esi
c001971d:	5f                   	pop    edi
c001971e:	c3                   	ret    

c001971f <KiDeinitialiseSymlinks(void*)>:
c001971f:	e9 f6 fe ff ff       	jmp    c001961a <KiFlushSymlinkChanges()>

c0019724 <KiGetSymlinkHash(char const*)>:
c0019724:	53                   	push   ebx
c0019725:	89 c3                	mov    ebx,eax
c0019727:	83 ec 14             	sub    esp,0x14
c001972a:	50                   	push   eax
c001972b:	e8 50 6e fe ff       	call   c0000580 <strlen>
c0019730:	5a                   	pop    edx
c0019731:	59                   	pop    ecx
c0019732:	50                   	push   eax
c0019733:	53                   	push   ebx
c0019734:	e8 bc 62 00 00       	call   c001f9f5 <KeCalculateCRC32(unsigned char*, int)>
c0019739:	83 c4 18             	add    esp,0x18
c001973c:	5b                   	pop    ebx
c001973d:	89 c2                	mov    edx,eax
c001973f:	c1 ea 10             	shr    edx,0x10
c0019742:	31 d0                	xor    eax,edx
c0019744:	c3                   	ret    

c0019745 <KiCreateSymlinkID()>:
c0019745:	55                   	push   ebp
c0019746:	57                   	push   edi
c0019747:	56                   	push   esi
c0019748:	53                   	push   ebx
c0019749:	31 db                	xor    ebx,ebx
c001974b:	83 ec 1c             	sub    esp,0x1c
c001974e:	e8 6e 6a 00 00       	call   c00201c1 <KeRand()>
c0019753:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019759:	31 d2                	xor    edx,edx
c001975b:	43                   	inc    ebx
c001975c:	31 ff                	xor    edi,edi
c001975e:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019761:	89 ee                	mov    esi,ebp
c0019763:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019769:	0f a4 c2 1f          	shld   edx,eax,0x1f
c001976d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019771:	c1 e0 1f             	shl    eax,0x1f
c0019774:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c001977a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001977e:	75 10                	jne    c0019790 <KiCreateSymlinkID()+0x4b>
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	68 45 18 03 c0       	push   0xc0031845
c0019788:	e8 e6 68 00 00       	call   c0020073 <KePanic(char const*)>
c001978d:	83 c4 10             	add    esp,0x10
c0019790:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0019794:	75 06                	jne    c001979c <KiCreateSymlinkID()+0x57>
c0019796:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001979a:	74 b2                	je     c001974e <KiCreateSymlinkID()+0x9>
c001979c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197a4:	83 c4 1c             	add    esp,0x1c
c00197a7:	5b                   	pop    ebx
c00197a8:	31 f0                	xor    eax,esi
c00197aa:	5e                   	pop    esi
c00197ab:	31 fa                	xor    edx,edi
c00197ad:	5f                   	pop    edi
c00197ae:	5d                   	pop    ebp
c00197af:	c3                   	ret    

c00197b0 <KeRegisterSymlink(char const*, unsigned long long)>:
c00197b0:	53                   	push   ebx
c00197b1:	83 ec 0c             	sub    esp,0xc
c00197b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00197bc:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197c5:	68 00 01 00 00       	push   0x100
c00197ca:	6a 00                	push   0x0
c00197cc:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c00197d3:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c00197da:	c1 e0 08             	shl    eax,0x8
c00197dd:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197e2:	50                   	push   eax
c00197e3:	e8 08 6d fe ff       	call   c00004f0 <memset>
c00197e8:	58                   	pop    eax
c00197e9:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197ee:	5a                   	pop    edx
c00197ef:	c1 e0 08             	shl    eax,0x8
c00197f2:	53                   	push   ebx
c00197f3:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197f8:	50                   	push   eax
c00197f9:	e8 52 6e fe ff       	call   c0000650 <strcpy>
c00197fe:	89 d8                	mov    eax,ebx
c0019800:	e8 1f ff ff ff       	call   c0019724 <KiGetSymlinkHash(char const*)>
c0019805:	59                   	pop    ecx
c0019806:	0f b7 d8             	movzx  ebx,ax
c0019809:	58                   	pop    eax
c001980a:	53                   	push   ebx
c001980b:	68 4e 18 03 c0       	push   0xc003184e
c0019810:	e8 b1 f9 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019815:	89 d8                	mov    eax,ebx
c0019817:	ba 01 00 00 00       	mov    edx,0x1
c001981c:	e8 c9 fd ff ff       	call   c00195ea <KiSetHashInTable(unsigned short, bool)>
c0019821:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	40                   	inc    eax
c001982a:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c001982f:	83 f8 03             	cmp    eax,0x3
c0019832:	7e 09                	jle    c001983d <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019834:	83 c4 08             	add    esp,0x8
c0019837:	5b                   	pop    ebx
c0019838:	e9 dd fd ff ff       	jmp    c001961a <KiFlushSymlinkChanges()>
c001983d:	83 c4 08             	add    esp,0x8
c0019840:	5b                   	pop    ebx
c0019841:	c3                   	ret    

c0019842 <KeInitialiseSymlinks()>:
c0019842:	57                   	push   edi
c0019843:	56                   	push   esi
c0019844:	53                   	push   ebx
c0019845:	81 ec 14 01 00 00    	sub    esp,0x114
c001984b:	68 00 20 00 00       	push   0x2000
c0019850:	6a 00                	push   0x0
c0019852:	68 00 af 03 c0       	push   0xc003af00
c0019857:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019861:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c001986b:	e8 80 6c fe ff       	call   c00004f0 <memset>
c0019870:	59                   	pop    ecx
c0019871:	5b                   	pop    ebx
c0019872:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019878:	68 62 18 03 c0       	push   0xc0031862
c001987d:	e8 44 f9 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019882:	5e                   	pop    esi
c0019883:	5f                   	pop    edi
c0019884:	6a 00                	push   0x0
c0019886:	68 1f 97 01 c0       	push   0xc001971f
c001988b:	e8 8a 5f 00 00       	call   c001f81a <KeRegisterAtexit(void (*)(void*), void*)>
c0019890:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019897:	e8 f3 ca ff ff       	call   c001638f <malloc>
c001989c:	83 c4 0c             	add    esp,0xc
c001989f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00198a5:	68 bf 17 03 c0       	push   0xc00317bf
c00198aa:	50                   	push   eax
c00198ab:	89 c3                	mov    ebx,eax
c00198ad:	e8 2c 0b 00 00       	call   c001a3de <File::File(char const*, Process*)>
c00198b2:	83 c4 10             	add    esp,0x10
c00198b5:	85 db                	test   ebx,ebx
c00198b7:	75 10                	jne    c00198c9 <KeInitialiseSymlinks()+0x87>
c00198b9:	83 ec 0c             	sub    esp,0xc
c00198bc:	68 7f 18 03 c0       	push   0xc003187f
c00198c1:	e8 ad 67 00 00       	call   c0020073 <KePanic(char const*)>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	83 ec 0c             	sub    esp,0xc
c00198cc:	53                   	push   ebx
c00198cd:	e8 ee 0d 00 00       	call   c001a6c0 <File::exists()>
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	84 c0                	test   al,al
c00198d7:	75 3a                	jne    c0019913 <KeInitialiseSymlinks()+0xd1>
c00198d9:	52                   	push   edx
c00198da:	52                   	push   edx
c00198db:	6a 12                	push   0x12
c00198dd:	53                   	push   ebx
c00198de:	e8 19 0b 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c00198e3:	83 c4 10             	add    esp,0x10
c00198e6:	85 c0                	test   eax,eax
c00198e8:	74 10                	je     c00198fa <KeInitialiseSymlinks()+0xb8>
c00198ea:	83 ec 0c             	sub    esp,0xc
c00198ed:	68 9c 18 03 c0       	push   0xc003189c
c00198f2:	e8 7c 67 00 00       	call   c0020073 <KePanic(char const*)>
c00198f7:	83 c4 10             	add    esp,0x10
c00198fa:	83 ec 0c             	sub    esp,0xc
c00198fd:	53                   	push   ebx
c00198fe:	e8 57 0b 00 00       	call   c001a45a <File::close()>
c0019903:	83 c4 10             	add    esp,0x10
c0019906:	85 db                	test   ebx,ebx
c0019908:	0f 84 9e 00 00 00    	je     c00199ac <KeInitialiseSymlinks()+0x16a>
c001990e:	e9 8d 00 00 00       	jmp    c00199a0 <KeInitialiseSymlinks()+0x15e>
c0019913:	50                   	push   eax
c0019914:	50                   	push   eax
c0019915:	6a 01                	push   0x1
c0019917:	53                   	push   ebx
c0019918:	e8 df 0a 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c001991d:	83 c4 10             	add    esp,0x10
c0019920:	85 c0                	test   eax,eax
c0019922:	74 10                	je     c0019934 <KeInitialiseSymlinks()+0xf2>
c0019924:	83 ec 0c             	sub    esp,0xc
c0019927:	68 b9 18 03 c0       	push   0xc00318b9
c001992c:	e8 42 67 00 00       	call   c0020073 <KePanic(char const*)>
c0019931:	83 c4 10             	add    esp,0x10
c0019934:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c001993a:	83 ec 0c             	sub    esp,0xc
c001993d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019943:	57                   	push   edi
c0019944:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019948:	56                   	push   esi
c0019949:	6a 00                	push   0x0
c001994b:	68 00 01 00 00       	push   0x100
c0019950:	53                   	push   ebx
c0019951:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019954:	83 c4 20             	add    esp,0x20
c0019957:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c001995f:	75 33                	jne    c0019994 <KeInitialiseSymlinks()+0x152>
c0019961:	83 ec 0c             	sub    esp,0xc
c0019964:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019966:	57                   	push   edi
c0019967:	8d 54 24 18          	lea    edx,[esp+0x18]
c001996b:	52                   	push   edx
c001996c:	6a 00                	push   0x0
c001996e:	6a 08                	push   0x8
c0019970:	53                   	push   ebx
c0019971:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019974:	83 c4 20             	add    esp,0x20
c0019977:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001997c:	75 16                	jne    c0019994 <KeInitialiseSymlinks()+0x152>
c001997e:	89 f0                	mov    eax,esi
c0019980:	e8 9f fd ff ff       	call   c0019724 <KiGetSymlinkHash(char const*)>
c0019985:	ba 01 00 00 00       	mov    edx,0x1
c001998a:	0f b7 c0             	movzx  eax,ax
c001998d:	e8 58 fc ff ff       	call   c00195ea <KiSetHashInTable(unsigned short, bool)>
c0019992:	eb a0                	jmp    c0019934 <KeInitialiseSymlinks()+0xf2>
c0019994:	83 ec 0c             	sub    esp,0xc
c0019997:	53                   	push   ebx
c0019998:	e8 bd 0a 00 00       	call   c001a45a <File::close()>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199a2:	83 ec 0c             	sub    esp,0xc
c00199a5:	53                   	push   ebx
c00199a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199a9:	83 c4 10             	add    esp,0x10
c00199ac:	81 c4 10 01 00 00    	add    esp,0x110
c00199b2:	5b                   	pop    ebx
c00199b3:	5e                   	pop    esi
c00199b4:	5f                   	pop    edi
c00199b5:	c3                   	ret    

c00199b6 <KiIsSymlinkRegistered(char const*)>:
c00199b6:	55                   	push   ebp
c00199b7:	57                   	push   edi
c00199b8:	56                   	push   esi
c00199b9:	53                   	push   ebx
c00199ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199c0:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00199c7:	89 f0                	mov    eax,esi
c00199c9:	e8 56 fd ff ff       	call   c0019724 <KiGetSymlinkHash(char const*)>
c00199ce:	53                   	push   ebx
c00199cf:	56                   	push   esi
c00199d0:	0f b7 c0             	movzx  eax,ax
c00199d3:	50                   	push   eax
c00199d4:	68 d4 18 03 c0       	push   0xc00318d4
c00199d9:	e8 e8 f7 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00199de:	89 f0                	mov    eax,esi
c00199e0:	e8 3f fd ff ff       	call   c0019724 <KiGetSymlinkHash(char const*)>
c00199e5:	0f b7 c0             	movzx  eax,ax
c00199e8:	e8 e3 fb ff ff       	call   c00195d0 <KiIsHashInTable(unsigned short)>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	31 d2                	xor    edx,edx
c00199f2:	88 c1                	mov    cl,al
c00199f4:	31 c0                	xor    eax,eax
c00199f6:	84 c9                	test   cl,cl
c00199f8:	0f 84 31 01 00 00    	je     c0019b2f <KiIsSymlinkRegistered(char const*)+0x179>
c00199fe:	31 db                	xor    ebx,ebx
c0019a00:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019a06:	7e 30                	jle    c0019a38 <KiIsSymlinkRegistered(char const*)+0x82>
c0019a08:	89 d8                	mov    eax,ebx
c0019a0a:	c1 e0 08             	shl    eax,0x8
c0019a0d:	51                   	push   ecx
c0019a0e:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a13:	51                   	push   ecx
c0019a14:	50                   	push   eax
c0019a15:	56                   	push   esi
c0019a16:	e8 65 6d fe ff       	call   c0000780 <strcmp>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	75 13                	jne    c0019a35 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019a22:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019a29:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019a30:	e9 fa 00 00 00       	jmp    c0019b2f <KiIsSymlinkRegistered(char const*)+0x179>
c0019a35:	43                   	inc    ebx
c0019a36:	eb c8                	jmp    c0019a00 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019a38:	83 ec 0c             	sub    esp,0xc
c0019a3b:	68 14 01 00 00       	push   0x114
c0019a40:	e8 4a c9 ff ff       	call   c001638f <malloc>
c0019a45:	83 c4 0c             	add    esp,0xc
c0019a48:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019a4e:	68 bf 17 03 c0       	push   0xc00317bf
c0019a53:	50                   	push   eax
c0019a54:	89 c3                	mov    ebx,eax
c0019a56:	e8 83 09 00 00       	call   c001a3de <File::File(char const*, Process*)>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	85 db                	test   ebx,ebx
c0019a60:	75 12                	jne    c0019a74 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019a62:	83 ec 0c             	sub    esp,0xc
c0019a65:	68 e9 18 03 c0       	push   0xc00318e9
c0019a6a:	e8 04 66 00 00       	call   c0020073 <KePanic(char const*)>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	eb 10                	jmp    c0019a84 <KiIsSymlinkRegistered(char const*)+0xce>
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	53                   	push   ebx
c0019a78:	e8 43 0c 00 00       	call   c001a6c0 <File::exists()>
c0019a7d:	83 c4 10             	add    esp,0x10
c0019a80:	84 c0                	test   al,al
c0019a82:	74 de                	je     c0019a62 <KiIsSymlinkRegistered(char const*)+0xac>
c0019a84:	52                   	push   edx
c0019a85:	52                   	push   edx
c0019a86:	6a 01                	push   0x1
c0019a88:	53                   	push   ebx
c0019a89:	e8 6e 09 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c0019a8e:	83 c4 10             	add    esp,0x10
c0019a91:	85 c0                	test   eax,eax
c0019a93:	74 10                	je     c0019aa5 <KiIsSymlinkRegistered(char const*)+0xef>
c0019a95:	83 ec 0c             	sub    esp,0xc
c0019a98:	68 04 19 03 c0       	push   0xc0031904
c0019a9d:	e8 d1 65 00 00       	call   c0020073 <KePanic(char const*)>
c0019aa2:	83 c4 10             	add    esp,0x10
c0019aa5:	83 ec 0c             	sub    esp,0xc
c0019aa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aaa:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019aae:	55                   	push   ebp
c0019aaf:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019ab3:	57                   	push   edi
c0019ab4:	6a 00                	push   0x0
c0019ab6:	68 00 01 00 00       	push   0x100
c0019abb:	53                   	push   ebx
c0019abc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019abf:	83 c4 20             	add    esp,0x20
c0019ac2:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019aca:	75 4b                	jne    c0019b17 <KiIsSymlinkRegistered(char const*)+0x161>
c0019acc:	83 ec 0c             	sub    esp,0xc
c0019acf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ad1:	55                   	push   ebp
c0019ad2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ad6:	52                   	push   edx
c0019ad7:	6a 00                	push   0x0
c0019ad9:	6a 08                	push   0x8
c0019adb:	53                   	push   ebx
c0019adc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019adf:	83 c4 20             	add    esp,0x20
c0019ae2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ae7:	75 2e                	jne    c0019b17 <KiIsSymlinkRegistered(char const*)+0x161>
c0019ae9:	50                   	push   eax
c0019aea:	50                   	push   eax
c0019aeb:	57                   	push   edi
c0019aec:	56                   	push   esi
c0019aed:	e8 8e 6c fe ff       	call   c0000780 <strcmp>
c0019af2:	83 c4 10             	add    esp,0x10
c0019af5:	85 c0                	test   eax,eax
c0019af7:	75 ac                	jne    c0019aa5 <KiIsSymlinkRegistered(char const*)+0xef>
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	53                   	push   ebx
c0019afd:	e8 58 09 00 00       	call   c001a45a <File::close()>
c0019b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	eb 18                	jmp    c0019b2f <KiIsSymlinkRegistered(char const*)+0x179>
c0019b17:	83 ec 0c             	sub    esp,0xc
c0019b1a:	53                   	push   ebx
c0019b1b:	e8 3a 09 00 00       	call   c001a45a <File::close()>
c0019b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b28:	83 c4 10             	add    esp,0x10
c0019b2b:	31 c0                	xor    eax,eax
c0019b2d:	31 d2                	xor    edx,edx
c0019b2f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b35:	5b                   	pop    ebx
c0019b36:	5e                   	pop    esi
c0019b37:	5f                   	pop    edi
c0019b38:	5d                   	pop    ebp
c0019b39:	c3                   	ret    

c0019b3a <KeDereferenceSymlink(char const*, char*)>:
c0019b3a:	55                   	push   ebp
c0019b3b:	57                   	push   edi
c0019b3c:	56                   	push   esi
c0019b3d:	53                   	push   ebx
c0019b3e:	83 ec 48             	sub    esp,0x48
c0019b41:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019b45:	56                   	push   esi
c0019b46:	e8 6b fe ff ff       	call   c00199b6 <KiIsSymlinkRegistered(char const*)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	89 c7                	mov    edi,eax
c0019b50:	89 d0                	mov    eax,edx
c0019b52:	09 f8                	or     eax,edi
c0019b54:	75 07                	jne    c0019b5d <KeDereferenceSymlink(char const*, char*)+0x23>
c0019b56:	31 c0                	xor    eax,eax
c0019b58:	e9 7c 01 00 00       	jmp    c0019cd9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019b5d:	83 ec 0c             	sub    esp,0xc
c0019b60:	89 d5                	mov    ebp,edx
c0019b62:	68 14 01 00 00       	push   0x114
c0019b67:	e8 23 c8 ff ff       	call   c001638f <malloc>
c0019b6c:	83 c4 0c             	add    esp,0xc
c0019b6f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b75:	56                   	push   esi
c0019b76:	50                   	push   eax
c0019b77:	89 c3                	mov    ebx,eax
c0019b79:	e8 60 08 00 00       	call   c001a3de <File::File(char const*, Process*)>
c0019b7e:	83 c4 10             	add    esp,0x10
c0019b81:	85 db                	test   ebx,ebx
c0019b83:	0f 84 32 01 00 00    	je     c0019cbb <KeDereferenceSymlink(char const*, char*)+0x181>
c0019b89:	56                   	push   esi
c0019b8a:	56                   	push   esi
c0019b8b:	6a 01                	push   0x1
c0019b8d:	53                   	push   ebx
c0019b8e:	e8 69 08 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c0019b93:	83 c4 10             	add    esp,0x10
c0019b96:	85 c0                	test   eax,eax
c0019b98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b9a:	74 09                	je     c0019ba5 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019b9c:	83 ec 0c             	sub    esp,0xc
c0019b9f:	53                   	push   ebx
c0019ba0:	e9 10 01 00 00       	jmp    c0019cb5 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019ba5:	83 ec 0c             	sub    esp,0xc
c0019ba8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019bac:	56                   	push   esi
c0019bad:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019bb1:	52                   	push   edx
c0019bb2:	6a 00                	push   0x0
c0019bb4:	6a 08                	push   0x8
c0019bb6:	53                   	push   ebx
c0019bb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bba:	83 c4 20             	add    esp,0x20
c0019bbd:	85 c0                	test   eax,eax
c0019bbf:	0f 85 e2 00 00 00    	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bc5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019bca:	0f 85 d7 00 00 00    	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bd0:	83 ec 0c             	sub    esp,0xc
c0019bd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bd5:	56                   	push   esi
c0019bd6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019bda:	52                   	push   edx
c0019bdb:	6a 00                	push   0x0
c0019bdd:	6a 08                	push   0x8
c0019bdf:	53                   	push   ebx
c0019be0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019be3:	83 c4 20             	add    esp,0x20
c0019be6:	85 c0                	test   eax,eax
c0019be8:	0f 85 b9 00 00 00    	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bee:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019bf3:	0f 85 ae 00 00 00    	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bf9:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019bfd:	0f 85 53 ff ff ff    	jne    c0019b56 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c03:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019c07:	0f 85 49 ff ff ff    	jne    c0019b56 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c0d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c1d:	51                   	push   ecx
c0019c1e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019c22:	50                   	push   eax
c0019c23:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c27:	50                   	push   eax
c0019c28:	53                   	push   ebx
c0019c29:	e8 d0 0a 00 00       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c36:	75 6f                	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c3c:	31 c9                	xor    ecx,ecx
c0019c3e:	bf 0f 00 00 00       	mov    edi,0xf
c0019c43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c47:	39 c7                	cmp    edi,eax
c0019c49:	89 cf                	mov    edi,ecx
c0019c4b:	19 d7                	sbb    edi,edx
c0019c4d:	73 58                	jae    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c4f:	83 c0 f0             	add    eax,0xfffffff0
c0019c52:	bf ff 00 00 00       	mov    edi,0xff
c0019c57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c5b:	83 d2 ff             	adc    edx,0xffffffff
c0019c5e:	39 c7                	cmp    edi,eax
c0019c60:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c64:	19 d1                	sbb    ecx,edx
c0019c66:	72 53                	jb     c0019cbb <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c68:	40                   	inc    eax
c0019c69:	52                   	push   edx
c0019c6a:	50                   	push   eax
c0019c6b:	6a 00                	push   0x0
c0019c6d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019c71:	e8 7a 68 fe ff       	call   c00004f0 <memset>
c0019c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c78:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c7b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019c7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c87:	53                   	push   ebx
c0019c88:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c8b:	83 c4 20             	add    esp,0x20
c0019c8e:	85 c0                	test   eax,eax
c0019c90:	75 15                	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c96:	89 c7                	mov    edi,eax
c0019c98:	c1 ff 1f             	sar    edi,0x1f
c0019c9b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019c9f:	75 06                	jne    c0019ca7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ca1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019ca5:	74 19                	je     c0019cc0 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019ca7:	83 ec 0c             	sub    esp,0xc
c0019caa:	53                   	push   ebx
c0019cab:	e8 aa 07 00 00       	call   c001a45a <File::close()>
c0019cb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	83 c8 ff             	or     eax,0xffffffff
c0019cbe:	eb 19                	jmp    c0019cd9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	53                   	push   ebx
c0019cc4:	e8 91 07 00 00       	call   c001a45a <File::close()>
c0019cc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ccb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	b8 01 00 00 00       	mov    eax,0x1
c0019cd9:	83 c4 3c             	add    esp,0x3c
c0019cdc:	5b                   	pop    ebx
c0019cdd:	5e                   	pop    esi
c0019cde:	5f                   	pop    edi
c0019cdf:	5d                   	pop    ebp
c0019ce0:	c3                   	ret    

c0019ce1 <KeCreateSymlink(char const*, char const*)>:
c0019ce1:	55                   	push   ebp
c0019ce2:	57                   	push   edi
c0019ce3:	56                   	push   esi
c0019ce4:	53                   	push   ebx
c0019ce5:	83 ec 38             	sub    esp,0x38
c0019ce8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019cec:	68 14 01 00 00       	push   0x114
c0019cf1:	e8 99 c6 ff ff       	call   c001638f <malloc>
c0019cf6:	6a 00                	push   0x0
c0019cf8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019cfe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d02:	89 c3                	mov    ebx,eax
c0019d04:	50                   	push   eax
c0019d05:	e8 f6 05 00 00       	call   c001a300 <File::File(char const*, Process*, bool)>
c0019d0a:	83 c4 20             	add    esp,0x20
c0019d0d:	85 db                	test   ebx,ebx
c0019d0f:	b8 01 00 00 00       	mov    eax,0x1
c0019d14:	0f 84 19 01 00 00    	je     c0019e33 <KeCreateSymlink(char const*, char const*)+0x152>
c0019d1a:	52                   	push   edx
c0019d1b:	52                   	push   edx
c0019d1c:	6a 12                	push   0x12
c0019d1e:	53                   	push   ebx
c0019d1f:	e8 d8 06 00 00       	call   c001a3fc <File::open(FileOpenMode)>
c0019d24:	83 c4 10             	add    esp,0x10
c0019d27:	85 c0                	test   eax,eax
c0019d29:	74 0b                	je     c0019d36 <KeCreateSymlink(char const*, char const*)+0x55>
c0019d2b:	83 ec 0c             	sub    esp,0xc
c0019d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d30:	53                   	push   ebx
c0019d31:	e9 f2 00 00 00       	jmp    c0019e28 <KeCreateSymlink(char const*, char const*)+0x147>
c0019d36:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019d3a:	be 51 19 03 c0       	mov    esi,0xc0031951
c0019d3f:	b9 09 00 00 00       	mov    ecx,0x9
c0019d44:	fc                   	cld    
c0019d45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d47:	83 ec 0c             	sub    esp,0xc
c0019d4a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019d4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d50:	56                   	push   esi
c0019d51:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019d55:	52                   	push   edx
c0019d56:	6a 00                	push   0x0
c0019d58:	6a 08                	push   0x8
c0019d5a:	53                   	push   ebx
c0019d5b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d5e:	83 c4 20             	add    esp,0x20
c0019d61:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d66:	0f 85 ae 00 00 00    	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019d6c:	85 c0                	test   eax,eax
c0019d6e:	0f 85 a6 00 00 00    	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019d74:	e8 cc f9 ff ff       	call   c0019745 <KiCreateSymlinkID()>
c0019d79:	83 ec 0c             	sub    esp,0xc
c0019d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d86:	56                   	push   esi
c0019d87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d8b:	52                   	push   edx
c0019d8c:	6a 00                	push   0x0
c0019d8e:	6a 08                	push   0x8
c0019d90:	53                   	push   ebx
c0019d91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d94:	83 c4 20             	add    esp,0x20
c0019d97:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d9c:	75 7c                	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019d9e:	85 c0                	test   eax,eax
c0019da0:	75 78                	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da4:	83 ec 0c             	sub    esp,0xc
c0019da7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019daa:	55                   	push   ebp
c0019dab:	e8 d0 67 fe ff       	call   c0000580 <strlen>
c0019db0:	31 d2                	xor    edx,edx
c0019db2:	89 34 24             	mov    DWORD PTR [esp],esi
c0019db5:	55                   	push   ebp
c0019db6:	52                   	push   edx
c0019db7:	50                   	push   eax
c0019db8:	53                   	push   ebx
c0019db9:	ff d7                	call   edi
c0019dbb:	83 c4 14             	add    esp,0x14
c0019dbe:	55                   	push   ebp
c0019dbf:	89 c6                	mov    esi,eax
c0019dc1:	e8 ba 67 fe ff       	call   c0000580 <strlen>
c0019dc6:	83 c4 10             	add    esp,0x10
c0019dc9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019dcd:	75 4b                	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019dcf:	85 f6                	test   esi,esi
c0019dd1:	75 47                	jne    c0019e1a <KeCreateSymlink(char const*, char const*)+0x139>
c0019dd3:	50                   	push   eax
c0019dd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dd8:	55                   	push   ebp
c0019dd9:	68 1f 19 03 c0       	push   0xc003191f
c0019dde:	e8 e3 f3 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019de3:	83 c4 0c             	add    esp,0xc
c0019de6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019dea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019dee:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019df2:	e8 b9 f9 ff ff       	call   c00197b0 <KeRegisterSymlink(char const*, unsigned long long)>
c0019df7:	c7 04 24 44 19 03 c0 	mov    DWORD PTR [esp],0xc0031944
c0019dfe:	e8 c3 f3 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0019e03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e06:	e8 4f 06 00 00       	call   c001a45a <File::close()>
c0019e0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	31 c0                	xor    eax,eax
c0019e18:	eb 19                	jmp    c0019e33 <KeCreateSymlink(char const*, char const*)+0x152>
c0019e1a:	83 ec 0c             	sub    esp,0xc
c0019e1d:	53                   	push   ebx
c0019e1e:	e8 37 06 00 00       	call   c001a45a <File::close()>
c0019e23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e2b:	83 c4 10             	add    esp,0x10
c0019e2e:	b8 01 00 00 00       	mov    eax,0x1
c0019e33:	83 c4 2c             	add    esp,0x2c
c0019e36:	5b                   	pop    ebx
c0019e37:	5e                   	pop    esi
c0019e38:	5f                   	pop    edi
c0019e39:	5d                   	pop    ebp
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <File::read(unsigned long long, void*, int*)>:
c0019e3c:	53                   	push   ebx
c0019e3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e45:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e4c:	83 f8 19             	cmp    eax,0x19
c0019e4f:	77 35                	ja     c0019e86 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e51:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e58:	85 c0                	test   eax,eax
c0019e5a:	74 2a                	je     c0019e86 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e5c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e62:	85 c0                	test   eax,eax
c0019e64:	74 20                	je     c0019e86 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e6a:	74 21                	je     c0019e8d <File::read(unsigned long long, void*, int*)+0x51>
c0019e6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e6e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e72:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019e78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e80:	5b                   	pop    ebx
c0019e81:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019e84:	ff e0                	jmp    eax
c0019e86:	b8 0b 00 00 00       	mov    eax,0xb
c0019e8b:	eb 05                	jmp    c0019e92 <File::read(unsigned long long, void*, int*)+0x56>
c0019e8d:	b8 05 00 00 00       	mov    eax,0x5
c0019e92:	5b                   	pop    ebx
c0019e93:	c3                   	ret    

c0019e94 <File::write(unsigned long long, void*, int*)>:
c0019e94:	53                   	push   ebx
c0019e95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e9d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ea4:	83 f8 19             	cmp    eax,0x19
c0019ea7:	77 35                	ja     c0019ede <File::write(unsigned long long, void*, int*)+0x4a>
c0019ea9:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019eb0:	85 c0                	test   eax,eax
c0019eb2:	74 2a                	je     c0019ede <File::write(unsigned long long, void*, int*)+0x4a>
c0019eb4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	74 20                	je     c0019ede <File::write(unsigned long long, void*, int*)+0x4a>
c0019ebe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019ec2:	74 21                	je     c0019ee5 <File::write(unsigned long long, void*, int*)+0x51>
c0019ec4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ec6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019eca:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ed0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ed4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ed8:	5b                   	pop    ebx
c0019ed9:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019edc:	ff e0                	jmp    eax
c0019ede:	b8 0b 00 00 00       	mov    eax,0xb
c0019ee3:	eb 05                	jmp    c0019eea <File::write(unsigned long long, void*, int*)+0x56>
c0019ee5:	b8 05 00 00 00       	mov    eax,0x5
c0019eea:	5b                   	pop    ebx
c0019eeb:	c3                   	ret    

c0019eec <Directory::read(unsigned long long, void*, int*)>:
c0019eec:	53                   	push   ebx
c0019eed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ef1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ef5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019efc:	83 f8 19             	cmp    eax,0x19
c0019eff:	77 35                	ja     c0019f36 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f01:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f08:	85 c0                	test   eax,eax
c0019f0a:	74 2a                	je     c0019f36 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f0c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f12:	85 c0                	test   eax,eax
c0019f14:	74 20                	je     c0019f36 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f1a:	74 21                	je     c0019f3d <Directory::read(unsigned long long, void*, int*)+0x51>
c0019f1c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f1e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f22:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f30:	5b                   	pop    ebx
c0019f31:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019f34:	ff e0                	jmp    eax
c0019f36:	b8 0b 00 00 00       	mov    eax,0xb
c0019f3b:	eb 05                	jmp    c0019f42 <Directory::read(unsigned long long, void*, int*)+0x56>
c0019f3d:	b8 05 00 00 00       	mov    eax,0x5
c0019f42:	5b                   	pop    ebx
c0019f43:	c3                   	ret    

c0019f44 <Directory::write(unsigned long long, void*, int*)>:
c0019f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f48:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019f4f:	b8 0b 00 00 00       	mov    eax,0xb
c0019f54:	83 fa 19             	cmp    edx,0x19
c0019f57:	77 18                	ja     c0019f71 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f59:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019f60:	85 d2                	test   edx,edx
c0019f62:	74 0d                	je     c0019f71 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f64:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019f6b:	19 c0                	sbb    eax,eax
c0019f6d:	83 e0 0a             	and    eax,0xa
c0019f70:	40                   	inc    eax
c0019f71:	c3                   	ret    

c0019f72 <File::isAtty()>:
c0019f72:	31 c0                	xor    eax,eax
c0019f74:	c3                   	ret    
c0019f75:	90                   	nop

c0019f76 <Directory::isAtty()>:
c0019f76:	31 c0                	xor    eax,eax
c0019f78:	c3                   	ret    
c0019f79:	90                   	nop

c0019f7a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019f7a:	b8 0a 00 00 00       	mov    eax,0xa
c0019f7f:	c3                   	ret    

c0019f80 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019f80:	b8 0a 00 00 00       	mov    eax,0xa
c0019f85:	c3                   	ret    

c0019f86 <Filesystem::allocateSwapfile(char const*, int)>:
c0019f86:	31 c0                	xor    eax,eax
c0019f88:	31 d2                	xor    edx,edx
c0019f8a:	c3                   	ret    
c0019f8b:	90                   	nop

c0019f8c <File::~File()>:
c0019f8c:	83 ec 0c             	sub    esp,0xc
c0019f8f:	ba 10 1a 03 c0       	mov    edx,0xc0031a10
c0019f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f98:	89 10                	mov    DWORD PTR [eax],edx
c0019f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9e:	83 ec 0c             	sub    esp,0xc
c0019fa1:	50                   	push   eax
c0019fa2:	e8 a1 dc ff ff       	call   c0017c48 <UnixFile::~UnixFile()>
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	90                   	nop
c0019fab:	83 c4 0c             	add    esp,0xc
c0019fae:	c3                   	ret    
c0019faf:	90                   	nop

c0019fb0 <File::~File()>:
c0019fb0:	83 ec 0c             	sub    esp,0xc
c0019fb3:	83 ec 0c             	sub    esp,0xc
c0019fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fba:	e8 cd ff ff ff       	call   c0019f8c <File::~File()>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	83 ec 08             	sub    esp,0x8
c0019fc5:	68 14 01 00 00       	push   0x114
c0019fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fce:	e8 f5 f0 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c0019fd3:	83 c4 10             	add    esp,0x10
c0019fd6:	83 c4 0c             	add    esp,0xc
c0019fd9:	c3                   	ret    

c0019fda <Directory::~Directory()>:
c0019fda:	83 ec 0c             	sub    esp,0xc
c0019fdd:	ba 2c 1a 03 c0       	mov    edx,0xc0031a2c
c0019fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe6:	89 10                	mov    DWORD PTR [eax],edx
c0019fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fec:	83 ec 0c             	sub    esp,0xc
c0019fef:	50                   	push   eax
c0019ff0:	e8 53 dc ff ff       	call   c0017c48 <UnixFile::~UnixFile()>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	90                   	nop
c0019ff9:	83 c4 0c             	add    esp,0xc
c0019ffc:	c3                   	ret    
c0019ffd:	90                   	nop

c0019ffe <Directory::~Directory()>:
c0019ffe:	83 ec 0c             	sub    esp,0xc
c001a001:	83 ec 0c             	sub    esp,0xc
c001a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a008:	e8 cd ff ff ff       	call   c0019fda <Directory::~Directory()>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	83 ec 08             	sub    esp,0x8
c001a013:	68 14 01 00 00       	push   0x114
c001a018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a01c:	e8 a7 f0 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001a021:	83 c4 10             	add    esp,0x10
c001a024:	83 c4 0c             	add    esp,0xc
c001a027:	c3                   	ret    

c001a028 <Filesystem::Filesystem()>:
c001a028:	ba a4 19 03 c0       	mov    edx,0xc00319a4
c001a02d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a031:	89 10                	mov    DWORD PTR [eax],edx
c001a033:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a03d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a044:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a049:	90                   	nop
c001a04a:	c3                   	ret    
c001a04b:	90                   	nop

c001a04c <Filesystem::~Filesystem()>:
c001a04c:	ba a4 19 03 c0       	mov    edx,0xc00319a4
c001a051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a055:	89 10                	mov    DWORD PTR [eax],edx
c001a057:	90                   	nop
c001a058:	c3                   	ret    
c001a059:	90                   	nop

c001a05a <Filesystem::~Filesystem()>:
c001a05a:	83 ec 0c             	sub    esp,0xc
c001a05d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a061:	e8 e6 ff ff ff       	call   c001a04c <Filesystem::~Filesystem()>
c001a066:	83 c4 04             	add    esp,0x4
c001a069:	83 ec 08             	sub    esp,0x8
c001a06c:	6a 08                	push   0x8
c001a06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a072:	e8 51 f0 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	83 c4 0c             	add    esp,0xc
c001a07d:	c3                   	ret    

c001a07e <Fs::getcwd(Process*, char*, int)>:
c001a07e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a082:	31 c0                	xor    eax,eax
c001a084:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a088:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a08b:	7d 15                	jge    c001a0a2 <Fs::getcwd(Process*, char*, int)+0x24>
c001a08d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a091:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a098:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a09b:	84 c9                	test   cl,cl
c001a09d:	74 06                	je     c001a0a5 <Fs::getcwd(Process*, char*, int)+0x27>
c001a09f:	40                   	inc    eax
c001a0a0:	eb e2                	jmp    c001a084 <Fs::getcwd(Process*, char*, int)+0x6>
c001a0a2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a0a5:	31 c0                	xor    eax,eax
c001a0a7:	c3                   	ret    

c001a0a8 <Fs::initVFS()>:
c001a0a8:	83 ec 18             	sub    esp,0x18
c001a0ab:	6a 08                	push   0x8
c001a0ad:	e8 dd c2 ff ff       	call   c001638f <malloc>
c001a0b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0b5:	e8 c6 e6 00 00       	call   c0028780 <FAT::FAT()>
c001a0ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a0c1:	e8 c9 c2 ff ff       	call   c001638f <malloc>
c001a0c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0c9:	e8 e0 f5 00 00       	call   c00296ae <ISO9660::ISO9660()>
c001a0ce:	83 c4 1c             	add    esp,0x1c
c001a0d1:	c3                   	ret    

c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a0d2:	55                   	push   ebp
c001a0d3:	57                   	push   edi
c001a0d4:	56                   	push   esi
c001a0d5:	53                   	push   ebx
c001a0d6:	81 ec 20 04 00 00    	sub    esp,0x420
c001a0dc:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a0e3:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a0ea:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a0f1:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a0f8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a0fc:	68 00 04 00 00       	push   0x400
c001a101:	6a 00                	push   0x0
c001a103:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a107:	57                   	push   edi
c001a108:	e8 e3 63 fe ff       	call   c00004f0 <memset>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a114:	75 0b                	jne    c001a121 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a116:	50                   	push   eax
c001a117:	50                   	push   eax
c001a118:	56                   	push   esi
c001a119:	57                   	push   edi
c001a11a:	e8 31 65 fe ff       	call   c0000650 <strcpy>
c001a11f:	eb 45                	jmp    c001a166 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a121:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a124:	83 f8 2f             	cmp    eax,0x2f
c001a127:	74 05                	je     c001a12e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a129:	83 f8 5c             	cmp    eax,0x5c
c001a12c:	75 19                	jne    c001a147 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a12e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a131:	3c 60                	cmp    al,0x60
c001a133:	7e 03                	jle    c001a138 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a135:	83 e8 20             	sub    eax,0x20
c001a138:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a13c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a143:	50                   	push   eax
c001a144:	50                   	push   eax
c001a145:	eb 18                	jmp    c001a15f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a147:	50                   	push   eax
c001a148:	50                   	push   eax
c001a149:	55                   	push   ebp
c001a14a:	57                   	push   edi
c001a14b:	e8 00 65 fe ff       	call   c0000650 <strcpy>
c001a150:	58                   	pop    eax
c001a151:	5a                   	pop    edx
c001a152:	68 6d 2a 03 c0       	push   0xc0032a6d
c001a157:	57                   	push   edi
c001a158:	e8 13 67 fe ff       	call   c0000870 <strcat>
c001a15d:	59                   	pop    ecx
c001a15e:	5d                   	pop    ebp
c001a15f:	56                   	push   esi
c001a160:	57                   	push   edi
c001a161:	e8 0a 67 fe ff       	call   c0000870 <strcat>
c001a166:	83 c4 10             	add    esp,0x10
c001a169:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a16d:	3c 60                	cmp    al,0x60
c001a16f:	7e 03                	jle    c001a174 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a171:	83 e8 20             	sub    eax,0x20
c001a174:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a178:	be 03 00 00 00       	mov    esi,0x3
c001a17d:	88 03                	mov    BYTE PTR [ebx],al
c001a17f:	b8 03 00 00 00       	mov    eax,0x3
c001a184:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a18b:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a191:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a195:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a19a:	89 fa                	mov    edx,edi
c001a19c:	0f be ea             	movsx  ebp,dl
c001a19f:	85 ed                	test   ebp,ebp
c001a1a1:	0f 84 a1 00 00 00    	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a1a7:	8d 56 01             	lea    edx,[esi+0x1]
c001a1aa:	83 fd 2f             	cmp    ebp,0x2f
c001a1ad:	74 05                	je     c001a1b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a1af:	83 fd 5c             	cmp    ebp,0x5c
c001a1b2:	75 12                	jne    c001a1c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a1b4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a1b9:	89 c5                	mov    ebp,eax
c001a1bb:	74 09                	je     c001a1c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a1bd:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a1c1:	40                   	inc    eax
c001a1c2:	89 d6                	mov    esi,edx
c001a1c4:	eb cf                	jmp    c001a195 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a1c6:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a1cb:	89 f9                	mov    ecx,edi
c001a1cd:	0f be e9             	movsx  ebp,cl
c001a1d0:	75 61                	jne    c001a233 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a1d2:	83 fd 2e             	cmp    ebp,0x2e
c001a1d5:	75 5c                	jne    c001a233 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a1d7:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a1dc:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a1e1:	74 19                	je     c001a1fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a1e3:	83 fd 2e             	cmp    ebp,0x2e
c001a1e6:	74 55                	je     c001a23d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a1e8:	89 f2                	mov    edx,esi
c001a1ea:	42                   	inc    edx
c001a1eb:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a1f0:	83 f9 2f             	cmp    ecx,0x2f
c001a1f3:	74 f5                	je     c001a1ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a1f5:	83 f9 5c             	cmp    ecx,0x5c
c001a1f8:	74 f0                	je     c001a1ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a1fa:	eb c6                	jmp    c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a1fc:	83 fd 2e             	cmp    ebp,0x2e
c001a1ff:	74 3c                	je     c001a23d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a201:	83 f8 03             	cmp    eax,0x3
c001a204:	74 bc                	je     c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a206:	42                   	inc    edx
c001a207:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a20c:	83 f9 2f             	cmp    ecx,0x2f
c001a20f:	74 f5                	je     c001a206 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a211:	83 f9 5c             	cmp    ecx,0x5c
c001a214:	74 f0                	je     c001a206 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a216:	48                   	dec    eax
c001a217:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a21b:	75 06                	jne    c001a223 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a21d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a221:	eb f3                	jmp    c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a223:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a227:	74 07                	je     c001a230 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a229:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a22d:	48                   	dec    eax
c001a22e:	eb f3                	jmp    c001a223 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a230:	40                   	inc    eax
c001a231:	eb 8f                	jmp    c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a233:	83 fd 2f             	cmp    ebp,0x2f
c001a236:	74 8a                	je     c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a238:	83 fd 5c             	cmp    ebp,0x5c
c001a23b:	74 85                	je     c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a23d:	89 f9                	mov    ecx,edi
c001a23f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a242:	40                   	inc    eax
c001a243:	e9 7a ff ff ff       	jmp    c001a1c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a248:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	53                   	push   ebx
c001a250:	e8 2b 63 fe ff       	call   c0000580 <strlen>
c001a255:	83 c4 10             	add    esp,0x10
c001a258:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a25d:	74 1c                	je     c001a27b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a25f:	83 ec 0c             	sub    esp,0xc
c001a262:	53                   	push   ebx
c001a263:	e8 18 63 fe ff       	call   c0000580 <strlen>
c001a268:	83 c4 10             	add    esp,0x10
c001a26b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a270:	74 09                	je     c001a27b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a272:	31 ff                	xor    edi,edi
c001a274:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a279:	eb 5c                	jmp    c001a2d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a27b:	83 ec 0c             	sub    esp,0xc
c001a27e:	53                   	push   ebx
c001a27f:	e8 fc 62 fe ff       	call   c0000580 <strlen>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a28c:	74 e4                	je     c001a272 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a28e:	83 ec 0c             	sub    esp,0xc
c001a291:	53                   	push   ebx
c001a292:	e8 e9 62 fe ff       	call   c0000580 <strlen>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a29f:	eb ab                	jmp    c001a24c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a2a1:	52                   	push   edx
c001a2a2:	52                   	push   edx
c001a2a3:	53                   	push   ebx
c001a2a4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a2a8:	55                   	push   ebp
c001a2a9:	e8 a2 63 fe ff       	call   c0000650 <strcpy>
c001a2ae:	59                   	pop    ecx
c001a2af:	58                   	pop    eax
c001a2b0:	53                   	push   ebx
c001a2b1:	55                   	push   ebp
c001a2b2:	e8 83 f8 ff ff       	call   c0019b3a <KeDereferenceSymlink(char const*, char*)>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	48                   	dec    eax
c001a2bb:	75 37                	jne    c001a2f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a2bd:	50                   	push   eax
c001a2be:	53                   	push   ebx
c001a2bf:	55                   	push   ebp
c001a2c0:	68 5a 19 03 c0       	push   0xc003195a
c001a2c5:	e8 fc ee ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001a2ca:	8d 47 01             	lea    eax,[edi+0x1]
c001a2cd:	83 c4 10             	add    esp,0x10
c001a2d0:	83 ff 14             	cmp    edi,0x14
c001a2d3:	74 08                	je     c001a2dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a2d5:	89 c7                	mov    edi,eax
c001a2d7:	85 f6                	test   esi,esi
c001a2d9:	75 c6                	jne    c001a2a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a2db:	eb 17                	jmp    c001a2f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a2dd:	83 ec 0c             	sub    esp,0xc
c001a2e0:	bf 15 00 00 00       	mov    edi,0x15
c001a2e5:	68 75 19 03 c0       	push   0xc0031975
c001a2ea:	e8 84 5d 00 00       	call   c0020073 <KePanic(char const*)>
c001a2ef:	83 c4 10             	add    esp,0x10
c001a2f2:	eb e3                	jmp    c001a2d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a2f4:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a2fa:	5b                   	pop    ebx
c001a2fb:	5e                   	pop    esi
c001a2fc:	5f                   	pop    edi
c001a2fd:	5d                   	pop    ebp
c001a2fe:	c3                   	ret    
c001a2ff:	90                   	nop

c001a300 <File::File(char const*, Process*, bool)>:
c001a300:	83 ec 1c             	sub    esp,0x1c
c001a303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a307:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a30f:	83 ec 08             	sub    esp,0x8
c001a312:	6a 00                	push   0x0
c001a314:	50                   	push   eax
c001a315:	e8 48 d7 ff ff       	call   c0017a62 <UnixFile::UnixFile(int)>
c001a31a:	83 c4 10             	add    esp,0x10
c001a31d:	ba 10 1a 03 c0       	mov    edx,0xc0031a10
c001a322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a326:	89 10                	mov    DWORD PTR [eax],edx
c001a328:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a32d:	85 c0                	test   eax,eax
c001a32f:	74 0f                	je     c001a340 <File::File(char const*, Process*, bool)+0x40>
c001a331:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a336:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a33a:	74 04                	je     c001a340 <File::File(char const*, Process*, bool)+0x40>
c001a33c:	b0 01                	mov    al,0x1
c001a33e:	eb 02                	jmp    c001a342 <File::File(char const*, Process*, bool)+0x42>
c001a340:	b0 00                	mov    al,0x0
c001a342:	0f b6 c0             	movzx  eax,al
c001a345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a349:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a34f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a353:	83 c2 0d             	add    edx,0xd
c001a356:	50                   	push   eax
c001a357:	51                   	push   ecx
c001a358:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a35c:	52                   	push   edx
c001a35d:	e8 70 fd ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a369:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a36c:	83 e8 41             	sub    eax,0x41
c001a36f:	88 c2                	mov    dl,al
c001a371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a375:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a37f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a387:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a38d:	0f b6 c0             	movzx  eax,al
c001a390:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a397:	85 c0                	test   eax,eax
c001a399:	74 3e                	je     c001a3d9 <File::File(char const*, Process*, bool)+0xd9>
c001a39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a39f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3a5:	0f b6 c0             	movzx  eax,al
c001a3a8:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a3af:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a3b5:	85 c0                	test   eax,eax
c001a3b7:	75 20                	jne    c001a3d9 <File::File(char const*, Process*, bool)+0xd9>
c001a3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3bd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3c3:	0f b6 c0             	movzx  eax,al
c001a3c6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a3cd:	83 ec 0c             	sub    esp,0xc
c001a3d0:	50                   	push   eax
c001a3d1:	e8 ba 21 00 00       	call   c001c590 <LogicalDisk::mount()>
c001a3d6:	83 c4 10             	add    esp,0x10
c001a3d9:	90                   	nop
c001a3da:	83 c4 1c             	add    esp,0x1c
c001a3dd:	c3                   	ret    

c001a3de <File::File(char const*, Process*)>:
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	6a 01                	push   0x1
c001a3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3ef:	e8 0c ff ff ff       	call   c001a300 <File::File(char const*, Process*, bool)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	90                   	nop
c001a3f8:	83 c4 0c             	add    esp,0xc
c001a3fb:	c3                   	ret    

c001a3fc <File::open(FileOpenMode)>:
c001a3fc:	53                   	push   ebx
c001a3fd:	b8 0b 00 00 00       	mov    eax,0xb
c001a402:	83 ec 08             	sub    esp,0x8
c001a405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a409:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a410:	83 fa 19             	cmp    edx,0x19
c001a413:	77 40                	ja     c001a455 <File::open(FileOpenMode)+0x59>
c001a415:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a41c:	85 d2                	test   edx,edx
c001a41e:	74 35                	je     c001a455 <File::open(FileOpenMode)+0x59>
c001a420:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a426:	85 d2                	test   edx,edx
c001a428:	74 2b                	je     c001a455 <File::open(FileOpenMode)+0x59>
c001a42a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a42e:	b8 06 00 00 00       	mov    eax,0x6
c001a433:	75 20                	jne    c001a455 <File::open(FileOpenMode)+0x59>
c001a435:	8b 02                	mov    eax,DWORD PTR [edx]
c001a437:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a441:	51                   	push   ecx
c001a442:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a445:	51                   	push   ecx
c001a446:	52                   	push   edx
c001a447:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	85 c0                	test   eax,eax
c001a44f:	75 04                	jne    c001a455 <File::open(FileOpenMode)+0x59>
c001a451:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a455:	83 c4 08             	add    esp,0x8
c001a458:	5b                   	pop    ebx
c001a459:	c3                   	ret    

c001a45a <File::close()>:
c001a45a:	53                   	push   ebx
c001a45b:	b8 0b 00 00 00       	mov    eax,0xb
c001a460:	83 ec 08             	sub    esp,0x8
c001a463:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a467:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a46e:	83 f9 19             	cmp    ecx,0x19
c001a471:	77 41                	ja     c001a4b4 <File::close()+0x5a>
c001a473:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a47a:	85 db                	test   ebx,ebx
c001a47c:	74 36                	je     c001a4b4 <File::close()+0x5a>
c001a47e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a485:	74 2d                	je     c001a4b4 <File::close()+0x5a>
c001a487:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a48b:	b8 05 00 00 00       	mov    eax,0x5
c001a490:	74 22                	je     c001a4b4 <File::close()+0x5a>
c001a492:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a496:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a49d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a4a3:	53                   	push   ebx
c001a4a4:	53                   	push   ebx
c001a4a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a4a7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a4ad:	50                   	push   eax
c001a4ae:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a4b1:	83 c4 10             	add    esp,0x10
c001a4b4:	83 c4 08             	add    esp,0x8
c001a4b7:	5b                   	pop    ebx
c001a4b8:	c3                   	ret    
c001a4b9:	90                   	nop

c001a4ba <File::seek(unsigned long long)>:
c001a4ba:	56                   	push   esi
c001a4bb:	b8 0b 00 00 00       	mov    eax,0xb
c001a4c0:	53                   	push   ebx
c001a4c1:	51                   	push   ecx
c001a4c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a4ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a4d5:	83 fa 19             	cmp    edx,0x19
c001a4d8:	77 31                	ja     c001a50b <File::seek(unsigned long long)+0x51>
c001a4da:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4e1:	85 d2                	test   edx,edx
c001a4e3:	74 26                	je     c001a50b <File::seek(unsigned long long)+0x51>
c001a4e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4eb:	85 d2                	test   edx,edx
c001a4ed:	74 1c                	je     c001a50b <File::seek(unsigned long long)+0x51>
c001a4ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a4f3:	b8 05 00 00 00       	mov    eax,0x5
c001a4f8:	74 11                	je     c001a50b <File::seek(unsigned long long)+0x51>
c001a4fa:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4fc:	53                   	push   ebx
c001a4fd:	51                   	push   ecx
c001a4fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a504:	52                   	push   edx
c001a505:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	5a                   	pop    edx
c001a50c:	5b                   	pop    ebx
c001a50d:	5e                   	pop    esi
c001a50e:	c3                   	ret    
c001a50f:	90                   	nop

c001a510 <File::truncate(unsigned long long)>:
c001a510:	56                   	push   esi
c001a511:	b8 0b 00 00 00       	mov    eax,0xb
c001a516:	53                   	push   ebx
c001a517:	51                   	push   ecx
c001a518:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a51c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a520:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a524:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a52b:	83 fa 19             	cmp    edx,0x19
c001a52e:	77 31                	ja     c001a561 <File::truncate(unsigned long long)+0x51>
c001a530:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a537:	85 d2                	test   edx,edx
c001a539:	74 26                	je     c001a561 <File::truncate(unsigned long long)+0x51>
c001a53b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a541:	85 d2                	test   edx,edx
c001a543:	74 1c                	je     c001a561 <File::truncate(unsigned long long)+0x51>
c001a545:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a549:	b8 05 00 00 00       	mov    eax,0x5
c001a54e:	74 11                	je     c001a561 <File::truncate(unsigned long long)+0x51>
c001a550:	8b 02                	mov    eax,DWORD PTR [edx]
c001a552:	53                   	push   ebx
c001a553:	51                   	push   ecx
c001a554:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a55a:	52                   	push   edx
c001a55b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	5a                   	pop    edx
c001a562:	5b                   	pop    ebx
c001a563:	5e                   	pop    esi
c001a564:	c3                   	ret    
c001a565:	90                   	nop

c001a566 <File::tell(unsigned long long*)>:
c001a566:	83 ec 0c             	sub    esp,0xc
c001a569:	b8 0b 00 00 00       	mov    eax,0xb
c001a56e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a572:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a579:	83 fa 19             	cmp    edx,0x19
c001a57c:	77 34                	ja     c001a5b2 <File::tell(unsigned long long*)+0x4c>
c001a57e:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a585:	85 d2                	test   edx,edx
c001a587:	74 29                	je     c001a5b2 <File::tell(unsigned long long*)+0x4c>
c001a589:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a58f:	85 d2                	test   edx,edx
c001a591:	74 1f                	je     c001a5b2 <File::tell(unsigned long long*)+0x4c>
c001a593:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a597:	b8 05 00 00 00       	mov    eax,0x5
c001a59c:	74 14                	je     c001a5b2 <File::tell(unsigned long long*)+0x4c>
c001a59e:	50                   	push   eax
c001a59f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a5ab:	52                   	push   edx
c001a5ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a5af:	83 c4 10             	add    esp,0x10
c001a5b2:	83 c4 0c             	add    esp,0xc
c001a5b5:	c3                   	ret    

c001a5b6 <File::rewind()>:
c001a5b6:	83 ec 10             	sub    esp,0x10
c001a5b9:	6a 00                	push   0x0
c001a5bb:	6a 00                	push   0x0
c001a5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c1:	e8 f4 fe ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c001a5c6:	83 c4 1c             	add    esp,0x1c
c001a5c9:	c3                   	ret    

c001a5ca <File::unlink()>:
c001a5ca:	83 ec 0c             	sub    esp,0xc
c001a5cd:	b8 0b 00 00 00       	mov    eax,0xb
c001a5d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a5dd:	83 f9 19             	cmp    ecx,0x19
c001a5e0:	77 2f                	ja     c001a611 <File::unlink()+0x47>
c001a5e2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5e9:	85 c9                	test   ecx,ecx
c001a5eb:	74 24                	je     c001a611 <File::unlink()+0x47>
c001a5ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5f3:	85 c9                	test   ecx,ecx
c001a5f5:	74 1a                	je     c001a611 <File::unlink()+0x47>
c001a5f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a5fb:	b8 06 00 00 00       	mov    eax,0x6
c001a600:	75 0f                	jne    c001a611 <File::unlink()+0x47>
c001a602:	50                   	push   eax
c001a603:	83 c2 0d             	add    edx,0xd
c001a606:	50                   	push   eax
c001a607:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a609:	52                   	push   edx
c001a60a:	51                   	push   ecx
c001a60b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	83 c4 0c             	add    esp,0xc
c001a614:	c3                   	ret    
c001a615:	90                   	nop

c001a616 <File::rename(char const*)>:
c001a616:	83 ec 0c             	sub    esp,0xc
c001a619:	b8 0b 00 00 00       	mov    eax,0xb
c001a61e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a629:	83 f9 19             	cmp    ecx,0x19
c001a62c:	77 32                	ja     c001a660 <File::rename(char const*)+0x4a>
c001a62e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a635:	85 c9                	test   ecx,ecx
c001a637:	74 27                	je     c001a660 <File::rename(char const*)+0x4a>
c001a639:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a63f:	85 c9                	test   ecx,ecx
c001a641:	74 1d                	je     c001a660 <File::rename(char const*)+0x4a>
c001a643:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a647:	b8 06 00 00 00       	mov    eax,0x6
c001a64c:	75 12                	jne    c001a660 <File::rename(char const*)+0x4a>
c001a64e:	50                   	push   eax
c001a64f:	83 c2 0d             	add    edx,0xd
c001a652:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a658:	52                   	push   edx
c001a659:	51                   	push   ecx
c001a65a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a65d:	83 c4 10             	add    esp,0x10
c001a660:	83 c4 0c             	add    esp,0xc
c001a663:	c3                   	ret    

c001a664 <File::chfatattr(unsigned char, unsigned char)>:
c001a664:	57                   	push   edi
c001a665:	b8 0b 00 00 00       	mov    eax,0xb
c001a66a:	56                   	push   esi
c001a66b:	53                   	push   ebx
c001a66c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a670:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a674:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a678:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a67f:	83 f9 19             	cmp    ecx,0x19
c001a682:	77 37                	ja     c001a6bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a684:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a68b:	85 c9                	test   ecx,ecx
c001a68d:	74 2c                	je     c001a6bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a68f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a695:	85 c9                	test   ecx,ecx
c001a697:	74 22                	je     c001a6bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a699:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a69d:	b8 06 00 00 00       	mov    eax,0x6
c001a6a2:	75 17                	jne    c001a6bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6a4:	89 f0                	mov    eax,esi
c001a6a6:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a6a8:	0f b6 db             	movzx  ebx,bl
c001a6ab:	0f b6 f0             	movzx  esi,al
c001a6ae:	83 c2 0d             	add    edx,0xd
c001a6b1:	56                   	push   esi
c001a6b2:	53                   	push   ebx
c001a6b3:	52                   	push   edx
c001a6b4:	51                   	push   ecx
c001a6b5:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a6b8:	83 c4 10             	add    esp,0x10
c001a6bb:	5b                   	pop    ebx
c001a6bc:	5e                   	pop    esi
c001a6bd:	5f                   	pop    edi
c001a6be:	c3                   	ret    
c001a6bf:	90                   	nop

c001a6c0 <File::exists()>:
c001a6c0:	83 ec 0c             	sub    esp,0xc
c001a6c3:	31 c0                	xor    eax,eax
c001a6c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6d0:	83 f9 19             	cmp    ecx,0x19
c001a6d3:	77 24                	ja     c001a6f9 <File::exists()+0x39>
c001a6d5:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6dc:	85 c9                	test   ecx,ecx
c001a6de:	74 19                	je     c001a6f9 <File::exists()+0x39>
c001a6e0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6e6:	85 c9                	test   ecx,ecx
c001a6e8:	74 0f                	je     c001a6f9 <File::exists()+0x39>
c001a6ea:	50                   	push   eax
c001a6eb:	83 c2 0d             	add    edx,0xd
c001a6ee:	50                   	push   eax
c001a6ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6f1:	52                   	push   edx
c001a6f2:	51                   	push   ecx
c001a6f3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a6f6:	83 c4 10             	add    esp,0x10
c001a6f9:	83 c4 0c             	add    esp,0xc
c001a6fc:	c3                   	ret    
c001a6fd:	90                   	nop

c001a6fe <File::stat(unsigned long long*, bool*)>:
c001a6fe:	56                   	push   esi
c001a6ff:	53                   	push   ebx
c001a700:	50                   	push   eax
c001a701:	b8 0b 00 00 00       	mov    eax,0xb
c001a706:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a70a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a70e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a712:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a719:	83 f9 19             	cmp    ecx,0x19
c001a71c:	77 3d                	ja     c001a75b <File::stat(unsigned long long*, bool*)+0x5d>
c001a71e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a725:	85 c9                	test   ecx,ecx
c001a727:	74 32                	je     c001a75b <File::stat(unsigned long long*, bool*)+0x5d>
c001a729:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a72f:	85 c9                	test   ecx,ecx
c001a731:	74 28                	je     c001a75b <File::stat(unsigned long long*, bool*)+0x5d>
c001a733:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a737:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a739:	74 13                	je     c001a74e <File::stat(unsigned long long*, bool*)+0x50>
c001a73b:	83 ec 04             	sub    esp,0x4
c001a73e:	56                   	push   esi
c001a73f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a745:	51                   	push   ecx
c001a746:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a749:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a74c:	eb 0a                	jmp    c001a758 <File::stat(unsigned long long*, bool*)+0x5a>
c001a74e:	53                   	push   ebx
c001a74f:	83 c2 0d             	add    edx,0xd
c001a752:	56                   	push   esi
c001a753:	52                   	push   edx
c001a754:	51                   	push   ecx
c001a755:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a758:	83 c4 10             	add    esp,0x10
c001a75b:	5a                   	pop    edx
c001a75c:	5b                   	pop    ebx
c001a75d:	5e                   	pop    esi
c001a75e:	c3                   	ret    

c001a75f <Fs::setcwd(Process*, char*)>:
c001a75f:	55                   	push   ebp
c001a760:	57                   	push   edi
c001a761:	56                   	push   esi
c001a762:	53                   	push   ebx
c001a763:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a769:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a770:	6a 00                	push   0x0
c001a772:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a778:	57                   	push   edi
c001a779:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a780:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a784:	56                   	push   esi
c001a785:	e8 48 f9 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a78a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a78d:	e8 ee 5d fe ff       	call   c0000580 <strlen>
c001a792:	83 c4 10             	add    esp,0x10
c001a795:	83 f8 02             	cmp    eax,0x2
c001a798:	77 15                	ja     c001a7af <Fs::setcwd(Process*, char*)+0x50>
c001a79a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a79f:	83 eb 41             	sub    ebx,0x41
c001a7a2:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7a9:	85 c0                	test   eax,eax
c001a7ab:	75 1c                	jne    c001a7c9 <Fs::setcwd(Process*, char*)+0x6a>
c001a7ad:	eb 2f                	jmp    c001a7de <Fs::setcwd(Process*, char*)+0x7f>
c001a7af:	83 ec 0c             	sub    esp,0xc
c001a7b2:	56                   	push   esi
c001a7b3:	e8 c8 5d fe ff       	call   c0000580 <strlen>
c001a7b8:	83 c4 10             	add    esp,0x10
c001a7bb:	83 f8 03             	cmp    eax,0x3
c001a7be:	75 57                	jne    c001a817 <Fs::setcwd(Process*, char*)+0xb8>
c001a7c0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a7c5:	75 50                	jne    c001a817 <Fs::setcwd(Process*, char*)+0xb8>
c001a7c7:	eb d1                	jmp    c001a79a <Fs::setcwd(Process*, char*)+0x3b>
c001a7c9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a7d0:	75 0c                	jne    c001a7de <Fs::setcwd(Process*, char*)+0x7f>
c001a7d2:	83 ec 0c             	sub    esp,0xc
c001a7d5:	50                   	push   eax
c001a7d6:	e8 b5 1d 00 00       	call   c001c590 <LogicalDisk::mount()>
c001a7db:	83 c4 10             	add    esp,0x10
c001a7de:	83 fb 19             	cmp    ebx,0x19
c001a7e1:	b8 03 00 00 00       	mov    eax,0x3
c001a7e6:	0f 87 c6 00 00 00    	ja     c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a7ec:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7f3:	b8 05 00 00 00       	mov    eax,0x5
c001a7f8:	85 d2                	test   edx,edx
c001a7fa:	0f 84 b2 00 00 00    	je     c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a800:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a807:	b8 06 00 00 00       	mov    eax,0x6
c001a80c:	0f 85 92 00 00 00    	jne    c001a8a4 <Fs::setcwd(Process*, char*)+0x145>
c001a812:	e9 9b 00 00 00       	jmp    c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a817:	83 ec 0c             	sub    esp,0xc
c001a81a:	68 14 01 00 00       	push   0x114
c001a81f:	e8 6b bb ff ff       	call   c001638f <malloc>
c001a824:	83 c4 0c             	add    esp,0xc
c001a827:	55                   	push   ebp
c001a828:	56                   	push   esi
c001a829:	50                   	push   eax
c001a82a:	89 c3                	mov    ebx,eax
c001a82c:	e8 ad fb ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001a831:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a836:	83 c4 0c             	add    esp,0xc
c001a839:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a83d:	50                   	push   eax
c001a83e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a842:	50                   	push   eax
c001a843:	53                   	push   ebx
c001a844:	e8 b5 fe ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c001a849:	83 c4 10             	add    esp,0x10
c001a84c:	83 f8 02             	cmp    eax,0x2
c001a84f:	74 27                	je     c001a878 <Fs::setcwd(Process*, char*)+0x119>
c001a851:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a856:	75 1c                	jne    c001a874 <Fs::setcwd(Process*, char*)+0x115>
c001a858:	85 db                	test   ebx,ebx
c001a85a:	b8 02 00 00 00       	mov    eax,0x2
c001a85f:	74 51                	je     c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a861:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a863:	83 ec 0c             	sub    esp,0xc
c001a866:	53                   	push   ebx
c001a867:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a86a:	83 c4 10             	add    esp,0x10
c001a86d:	b8 02 00 00 00       	mov    eax,0x2
c001a872:	eb 3e                	jmp    c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a874:	85 c0                	test   eax,eax
c001a876:	74 1c                	je     c001a894 <Fs::setcwd(Process*, char*)+0x135>
c001a878:	85 db                	test   ebx,ebx
c001a87a:	b8 01 00 00 00       	mov    eax,0x1
c001a87f:	74 31                	je     c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a881:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a883:	83 ec 0c             	sub    esp,0xc
c001a886:	53                   	push   ebx
c001a887:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	b8 01 00 00 00       	mov    eax,0x1
c001a892:	eb 1e                	jmp    c001a8b2 <Fs::setcwd(Process*, char*)+0x153>
c001a894:	85 db                	test   ebx,ebx
c001a896:	74 0c                	je     c001a8a4 <Fs::setcwd(Process*, char*)+0x145>
c001a898:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a89a:	83 ec 0c             	sub    esp,0xc
c001a89d:	53                   	push   ebx
c001a89e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8a1:	83 c4 10             	add    esp,0x10
c001a8a4:	50                   	push   eax
c001a8a5:	50                   	push   eax
c001a8a6:	56                   	push   esi
c001a8a7:	57                   	push   edi
c001a8a8:	e8 a3 5d fe ff       	call   c0000650 <strcpy>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	31 c0                	xor    eax,eax
c001a8b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a8b8:	5b                   	pop    ebx
c001a8b9:	5e                   	pop    esi
c001a8ba:	5f                   	pop    edi
c001a8bb:	5d                   	pop    ebp
c001a8bc:	c3                   	ret    
c001a8bd:	90                   	nop

c001a8be <Directory::Directory(char const*, Process*)>:
c001a8be:	83 ec 0c             	sub    esp,0xc
c001a8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c5:	83 ec 08             	sub    esp,0x8
c001a8c8:	6a 00                	push   0x0
c001a8ca:	50                   	push   eax
c001a8cb:	e8 92 d1 ff ff       	call   c0017a62 <UnixFile::UnixFile(int)>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	ba 2c 1a 03 c0       	mov    edx,0xc0031a2c
c001a8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8dc:	89 10                	mov    DWORD PTR [eax],edx
c001a8de:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a8e3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a8e7:	0f 95 c0             	setne  al
c001a8ea:	0f b6 c0             	movzx  eax,al
c001a8ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8f1:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a8f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8fb:	83 c2 0d             	add    edx,0xd
c001a8fe:	50                   	push   eax
c001a8ff:	51                   	push   ecx
c001a900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a904:	52                   	push   edx
c001a905:	e8 c8 f7 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a90a:	83 c4 10             	add    esp,0x10
c001a90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a911:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a914:	83 e8 41             	sub    eax,0x41
c001a917:	88 c2                	mov    dl,al
c001a919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a927:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a935:	0f b6 c0             	movzx  eax,al
c001a938:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a93f:	85 c0                	test   eax,eax
c001a941:	74 3e                	je     c001a981 <Directory::Directory(char const*, Process*)+0xc3>
c001a943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a947:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a94d:	0f b6 c0             	movzx  eax,al
c001a950:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a957:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a95d:	85 c0                	test   eax,eax
c001a95f:	75 20                	jne    c001a981 <Directory::Directory(char const*, Process*)+0xc3>
c001a961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a965:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a96b:	0f b6 c0             	movzx  eax,al
c001a96e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	50                   	push   eax
c001a979:	e8 12 1c 00 00       	call   c001c590 <LogicalDisk::mount()>
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	90                   	nop
c001a982:	83 c4 0c             	add    esp,0xc
c001a985:	c3                   	ret    

c001a986 <Directory::open()>:
c001a986:	53                   	push   ebx
c001a987:	b8 0b 00 00 00       	mov    eax,0xb
c001a98c:	83 ec 08             	sub    esp,0x8
c001a98f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a993:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a99a:	83 fa 19             	cmp    edx,0x19
c001a99d:	77 3d                	ja     c001a9dc <Directory::open()+0x56>
c001a99f:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a9a6:	85 d2                	test   edx,edx
c001a9a8:	74 32                	je     c001a9dc <Directory::open()+0x56>
c001a9aa:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a9b0:	85 d2                	test   edx,edx
c001a9b2:	74 28                	je     c001a9dc <Directory::open()+0x56>
c001a9b4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a9b8:	b8 06 00 00 00       	mov    eax,0x6
c001a9bd:	75 1d                	jne    c001a9dc <Directory::open()+0x56>
c001a9bf:	50                   	push   eax
c001a9c0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a9c2:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a9c8:	51                   	push   ecx
c001a9c9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a9cc:	51                   	push   ecx
c001a9cd:	52                   	push   edx
c001a9ce:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	85 c0                	test   eax,eax
c001a9d6:	75 04                	jne    c001a9dc <Directory::open()+0x56>
c001a9d8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a9dc:	83 c4 08             	add    esp,0x8
c001a9df:	5b                   	pop    ebx
c001a9e0:	c3                   	ret    
c001a9e1:	90                   	nop

c001a9e2 <Directory::close()>:
c001a9e2:	53                   	push   ebx
c001a9e3:	b8 0b 00 00 00       	mov    eax,0xb
c001a9e8:	83 ec 08             	sub    esp,0x8
c001a9eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9f6:	83 f9 19             	cmp    ecx,0x19
c001a9f9:	77 41                	ja     c001aa3c <Directory::close()+0x5a>
c001a9fb:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa02:	85 db                	test   ebx,ebx
c001aa04:	74 36                	je     c001aa3c <Directory::close()+0x5a>
c001aa06:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa0d:	74 2d                	je     c001aa3c <Directory::close()+0x5a>
c001aa0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa13:	b8 05 00 00 00       	mov    eax,0x5
c001aa18:	74 22                	je     c001aa3c <Directory::close()+0x5a>
c001aa1a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aa1e:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa25:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa2b:	53                   	push   ebx
c001aa2c:	53                   	push   ebx
c001aa2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa2f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa35:	50                   	push   eax
c001aa36:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	83 c4 08             	add    esp,0x8
c001aa3f:	5b                   	pop    ebx
c001aa40:	c3                   	ret    
c001aa41:	90                   	nop

c001aa42 <Directory::unlink()>:
c001aa42:	83 ec 0c             	sub    esp,0xc
c001aa45:	b8 0b 00 00 00       	mov    eax,0xb
c001aa4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa55:	83 f9 19             	cmp    ecx,0x19
c001aa58:	77 2f                	ja     c001aa89 <Directory::unlink()+0x47>
c001aa5a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa61:	85 c9                	test   ecx,ecx
c001aa63:	74 24                	je     c001aa89 <Directory::unlink()+0x47>
c001aa65:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa6b:	85 c9                	test   ecx,ecx
c001aa6d:	74 1a                	je     c001aa89 <Directory::unlink()+0x47>
c001aa6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa73:	b8 06 00 00 00       	mov    eax,0x6
c001aa78:	75 0f                	jne    c001aa89 <Directory::unlink()+0x47>
c001aa7a:	50                   	push   eax
c001aa7b:	83 c2 0d             	add    edx,0xd
c001aa7e:	50                   	push   eax
c001aa7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa81:	52                   	push   edx
c001aa82:	51                   	push   ecx
c001aa83:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	83 c4 0c             	add    esp,0xc
c001aa8c:	c3                   	ret    
c001aa8d:	90                   	nop

c001aa8e <Directory::rename(char const*)>:
c001aa8e:	83 ec 0c             	sub    esp,0xc
c001aa91:	b8 0b 00 00 00       	mov    eax,0xb
c001aa96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaa1:	83 f9 19             	cmp    ecx,0x19
c001aaa4:	77 32                	ja     c001aad8 <Directory::rename(char const*)+0x4a>
c001aaa6:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaad:	85 c9                	test   ecx,ecx
c001aaaf:	74 27                	je     c001aad8 <Directory::rename(char const*)+0x4a>
c001aab1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aab7:	85 c9                	test   ecx,ecx
c001aab9:	74 1d                	je     c001aad8 <Directory::rename(char const*)+0x4a>
c001aabb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aabf:	b8 06 00 00 00       	mov    eax,0x6
c001aac4:	75 12                	jne    c001aad8 <Directory::rename(char const*)+0x4a>
c001aac6:	50                   	push   eax
c001aac7:	83 c2 0d             	add    edx,0xd
c001aaca:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aacc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aad0:	52                   	push   edx
c001aad1:	51                   	push   ecx
c001aad2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001aad5:	83 c4 10             	add    esp,0x10
c001aad8:	83 c4 0c             	add    esp,0xc
c001aadb:	c3                   	ret    

c001aadc <Directory::exists()>:
c001aadc:	83 ec 0c             	sub    esp,0xc
c001aadf:	31 c0                	xor    eax,eax
c001aae1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aae5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaec:	83 f9 19             	cmp    ecx,0x19
c001aaef:	77 24                	ja     c001ab15 <Directory::exists()+0x39>
c001aaf1:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaf8:	85 c9                	test   ecx,ecx
c001aafa:	74 19                	je     c001ab15 <Directory::exists()+0x39>
c001aafc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab02:	85 c9                	test   ecx,ecx
c001ab04:	74 0f                	je     c001ab15 <Directory::exists()+0x39>
c001ab06:	50                   	push   eax
c001ab07:	83 c2 0d             	add    edx,0xd
c001ab0a:	50                   	push   eax
c001ab0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab0d:	52                   	push   edx
c001ab0e:	51                   	push   ecx
c001ab0f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	83 c4 0c             	add    esp,0xc
c001ab18:	c3                   	ret    
c001ab19:	90                   	nop

c001ab1a <Directory::read(dirent*)>:
c001ab1a:	83 ec 1c             	sub    esp,0x1c
c001ab1d:	b8 0b 00 00 00       	mov    eax,0xb
c001ab22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab2d:	83 f9 19             	cmp    ecx,0x19
c001ab30:	77 30                	ja     c001ab62 <Directory::read(dirent*)+0x48>
c001ab32:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab39:	85 c9                	test   ecx,ecx
c001ab3b:	74 25                	je     c001ab62 <Directory::read(dirent*)+0x48>
c001ab3d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ab44:	74 1c                	je     c001ab62 <Directory::read(dirent*)+0x48>
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	8b 02                	mov    eax,DWORD PTR [edx]
c001ab4b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ab4f:	51                   	push   ecx
c001ab50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab54:	6a 00                	push   0x0
c001ab56:	68 10 01 00 00       	push   0x110
c001ab5b:	52                   	push   edx
c001ab5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab5f:	83 c4 20             	add    esp,0x20
c001ab62:	83 c4 1c             	add    esp,0x1c
c001ab65:	c3                   	ret    

c001ab66 <Directory::create()>:
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	b8 0b 00 00 00       	mov    eax,0xb
c001ab6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab79:	83 f9 19             	cmp    ecx,0x19
c001ab7c:	77 2f                	ja     c001abad <Directory::create()+0x47>
c001ab7e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab85:	85 c9                	test   ecx,ecx
c001ab87:	74 24                	je     c001abad <Directory::create()+0x47>
c001ab89:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab8f:	85 c9                	test   ecx,ecx
c001ab91:	74 1a                	je     c001abad <Directory::create()+0x47>
c001ab93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab97:	b8 06 00 00 00       	mov    eax,0x6
c001ab9c:	75 0f                	jne    c001abad <Directory::create()+0x47>
c001ab9e:	50                   	push   eax
c001ab9f:	83 c2 0d             	add    edx,0xd
c001aba2:	50                   	push   eax
c001aba3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aba5:	52                   	push   edx
c001aba6:	51                   	push   ecx
c001aba7:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	83 c4 0c             	add    esp,0xc
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001abb2:	b8 0a 00 00 00       	mov    eax,0xa
c001abb7:	c3                   	ret    

c001abb8 <Bus::Bus(char const*)>:
c001abb8:	83 ec 0c             	sub    esp,0xc
c001abbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbf:	83 ec 08             	sub    esp,0x8
c001abc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abc6:	50                   	push   eax
c001abc7:	e8 f2 07 00 00       	call   c001b3be <Device::Device(char const*)>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	ba 48 1a 03 c0       	mov    edx,0xc0031a48
c001abd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd8:	89 10                	mov    DWORD PTR [eax],edx
c001abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abde:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001abe8:	90                   	nop
c001abe9:	83 c4 0c             	add    esp,0xc
c001abec:	c3                   	ret    
c001abed:	90                   	nop
c001abee:	66 90                	xchg   ax,ax

c001abf0 <Bus::~Bus()>:
c001abf0:	83 ec 0c             	sub    esp,0xc
c001abf3:	ba 48 1a 03 c0       	mov    edx,0xc0031a48
c001abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abfc:	89 10                	mov    DWORD PTR [eax],edx
c001abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	50                   	push   eax
c001ac06:	e8 53 05 00 00       	call   c001b15e <Device::~Device()>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	90                   	nop
c001ac0f:	83 c4 0c             	add    esp,0xc
c001ac12:	c3                   	ret    
c001ac13:	90                   	nop

c001ac14 <Bus::~Bus()>:
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	83 ec 0c             	sub    esp,0xc
c001ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1e:	e8 cd ff ff ff       	call   c001abf0 <Bus::~Bus()>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	83 ec 08             	sub    esp,0x8
c001ac29:	68 58 01 00 00       	push   0x158
c001ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac32:	e8 91 e4 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	83 c4 0c             	add    esp,0xc
c001ac3d:	c3                   	ret    

c001ac3e <beepThread(void*)>:
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ac46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac4a:	48                   	dec    eax
c001ac4b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ac50:	75 01                	jne    c001ac53 <beepThread(void*)+0x15>
c001ac52:	fb                   	sti    
c001ac53:	6b c2 0a             	imul   eax,edx,0xa
c001ac56:	83 ec 0c             	sub    esp,0xc
c001ac59:	50                   	push   eax
c001ac5a:	e8 c9 a2 00 00       	call   c0024f28 <milliTenthSleep(unsigned int)>
c001ac5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac66:	e8 16 c2 00 00       	call   c0026e81 <HalMakeBeep(int)>
c001ac6b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ac73:	83 c4 1c             	add    esp,0x1c
c001ac76:	e9 91 a1 00 00       	jmp    c0024e0c <blockTask(TaskState)>

c001ac7b <Krnl::beep(int, int, bool)>:
c001ac7b:	56                   	push   esi
c001ac7c:	53                   	push   ebx
c001ac7d:	83 ec 10             	sub    esp,0x10
c001ac80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ac84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac8c:	e8 f0 c1 00 00       	call   c0026e81 <HalMakeBeep(int)>
c001ac91:	89 f0                	mov    eax,esi
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	84 c0                	test   al,al
c001ac98:	74 1e                	je     c001acb8 <Krnl::beep(int, int, bool)+0x3d>
c001ac9a:	6b db 0a             	imul   ebx,ebx,0xa
c001ac9d:	83 ec 0c             	sub    esp,0xc
c001aca0:	53                   	push   ebx
c001aca1:	e8 82 a2 00 00       	call   c0024f28 <milliTenthSleep(unsigned int)>
c001aca6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001acae:	83 c4 14             	add    esp,0x14
c001acb1:	5b                   	pop    ebx
c001acb2:	5e                   	pop    esi
c001acb3:	e9 c9 c1 00 00       	jmp    c0026e81 <HalMakeBeep(int)>
c001acb8:	68 e6 00 00 00       	push   0xe6
c001acbd:	53                   	push   ebx
c001acbe:	68 3e ac 01 c0       	push   0xc001ac3e
c001acc3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001acc9:	e8 f2 9c 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c001acce:	83 c4 14             	add    esp,0x14
c001acd1:	5b                   	pop    ebx
c001acd2:	5e                   	pop    esi
c001acd3:	c3                   	ret    

c001acd4 <User::loadClockSettings(int)>:
c001acd4:	53                   	push   ebx
c001acd5:	83 ec 14             	sub    esp,0x14
c001acd8:	68 14 01 00 00       	push   0x114
c001acdd:	e8 ad b6 ff ff       	call   c001638f <malloc>
c001ace2:	83 c4 0c             	add    esp,0xc
c001ace5:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001aceb:	68 6c 1a 03 c0       	push   0xc0031a6c
c001acf0:	50                   	push   eax
c001acf1:	89 c3                	mov    ebx,eax
c001acf3:	e8 e6 f6 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001acf8:	58                   	pop    eax
c001acf9:	5a                   	pop    edx
c001acfa:	6a 01                	push   0x1
c001acfc:	53                   	push   ebx
c001acfd:	e8 fa f6 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c001ad02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad05:	e8 50 f7 ff ff       	call   c001a45a <File::close()>
c001ad0a:	83 c4 10             	add    esp,0x10
c001ad0d:	85 db                	test   ebx,ebx
c001ad0f:	74 0f                	je     c001ad20 <User::loadClockSettings(int)+0x4c>
c001ad11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ad1a:	83 c4 08             	add    esp,0x8
c001ad1d:	5b                   	pop    ebx
c001ad1e:	ff e0                	jmp    eax
c001ad20:	83 c4 08             	add    esp,0x8
c001ad23:	5b                   	pop    ebx
c001ad24:	c3                   	ret    
c001ad25:	90                   	nop

c001ad26 <Clock::Clock(char const*)>:
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2d:	83 ec 08             	sub    esp,0x8
c001ad30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad34:	50                   	push   eax
c001ad35:	e8 84 06 00 00       	call   c001b3be <Device::Device(char const*)>
c001ad3a:	83 c4 10             	add    esp,0x10
c001ad3d:	ba 94 1a 03 c0       	mov    edx,0xc0031a94
c001ad42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad46:	89 10                	mov    DWORD PTR [eax],edx
c001ad48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ad56:	90                   	nop
c001ad57:	83 c4 0c             	add    esp,0xc
c001ad5a:	c3                   	ret    
c001ad5b:	90                   	nop

c001ad5c <Clock::~Clock()>:
c001ad5c:	83 ec 0c             	sub    esp,0xc
c001ad5f:	ba 94 1a 03 c0       	mov    edx,0xc0031a94
c001ad64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad68:	89 10                	mov    DWORD PTR [eax],edx
c001ad6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6e:	83 ec 0c             	sub    esp,0xc
c001ad71:	50                   	push   eax
c001ad72:	e8 e7 03 00 00       	call   c001b15e <Device::~Device()>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	90                   	nop
c001ad7b:	83 c4 0c             	add    esp,0xc
c001ad7e:	c3                   	ret    
c001ad7f:	90                   	nop

c001ad80 <Clock::~Clock()>:
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	83 ec 0c             	sub    esp,0xc
c001ad86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad8a:	e8 cd ff ff ff       	call   c001ad5c <Clock::~Clock()>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	83 ec 08             	sub    esp,0x8
c001ad95:	68 58 01 00 00       	push   0x158
c001ad9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad9e:	e8 25 e3 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	83 c4 0c             	add    esp,0xc
c001ada9:	c3                   	ret    

c001adaa <Clock::timeInSecondsLocal()>:
c001adaa:	53                   	push   ebx
c001adab:	83 ec 14             	sub    esp,0x14
c001adae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adb2:	8b 10                	mov    edx,DWORD PTR [eax]
c001adb4:	50                   	push   eax
c001adb5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001adb8:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001adbf:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001adc5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001adcb:	89 cb                	mov    ebx,ecx
c001adcd:	c1 fb 1f             	sar    ebx,0x1f
c001add0:	01 c8                	add    eax,ecx
c001add2:	11 da                	adc    edx,ebx
c001add4:	83 c4 10             	add    esp,0x10
c001add7:	31 c9                	xor    ecx,ecx
c001add9:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ade0:	74 05                	je     c001ade7 <Clock::timeInSecondsLocal()+0x3d>
c001ade2:	b9 08 07 00 00       	mov    ecx,0x708
c001ade7:	31 db                	xor    ebx,ebx
c001ade9:	01 c8                	add    eax,ecx
c001adeb:	11 da                	adc    edx,ebx
c001aded:	83 c4 08             	add    esp,0x8
c001adf0:	5b                   	pop    ebx
c001adf1:	c3                   	ret    

c001adf2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001adf2:	57                   	push   edi
c001adf3:	56                   	push   esi
c001adf4:	53                   	push   ebx
c001adf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adfd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae01:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae03:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae06:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae0d:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae13:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ae19:	99                   	cdq    
c001ae1a:	29 c6                	sub    esi,eax
c001ae1c:	19 d7                	sbb    edi,edx
c001ae1e:	89 f0                	mov    eax,esi
c001ae20:	31 f6                	xor    esi,esi
c001ae22:	89 fa                	mov    edx,edi
c001ae24:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae2b:	74 05                	je     c001ae32 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001ae2d:	be 08 07 00 00       	mov    esi,0x708
c001ae32:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ae36:	31 ff                	xor    edi,edi
c001ae38:	29 f0                	sub    eax,esi
c001ae3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae3e:	19 fa                	sbb    edx,edi
c001ae40:	89 d8                	mov    eax,ebx
c001ae42:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae46:	5b                   	pop    ebx
c001ae47:	5e                   	pop    esi
c001ae48:	5f                   	pop    edi
c001ae49:	ff e0                	jmp    eax

c001ae4b <datetimeToSeconds(datetime_t)>:
c001ae4b:	55                   	push   ebp
c001ae4c:	57                   	push   edi
c001ae4d:	56                   	push   esi
c001ae4e:	53                   	push   ebx
c001ae4f:	83 ec 0c             	sub    esp,0xc
c001ae52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae5a:	89 f7                	mov    edi,esi
c001ae5c:	89 f0                	mov    eax,esi
c001ae5e:	0f b6 cf             	movzx  ecx,bh
c001ae61:	0f b6 c4             	movzx  eax,ah
c001ae64:	c1 ef 10             	shr    edi,0x10
c001ae67:	89 da                	mov    edx,ebx
c001ae69:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001ae6c:	89 f9                	mov    ecx,edi
c001ae6e:	0f b6 f9             	movzx  edi,cl
c001ae71:	89 f1                	mov    ecx,esi
c001ae73:	6b c0 3c             	imul   eax,eax,0x3c
c001ae76:	0f b6 f1             	movzx  esi,cl
c001ae79:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001ae7f:	0f b6 db             	movzx  ebx,bl
c001ae82:	c1 ea 10             	shr    edx,0x10
c001ae85:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001ae8b:	01 f8                	add    eax,edi
c001ae8d:	01 f0                	add    eax,esi
c001ae8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae92:	c1 f8 1f             	sar    eax,0x1f
c001ae95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae99:	89 e8                	mov    eax,ebp
c001ae9b:	0f b6 c0             	movzx  eax,al
c001ae9e:	8b 0c 85 e0 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce520]
c001aea5:	83 f8 01             	cmp    eax,0x1
c001aea8:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001aeac:	0f b7 da             	movzx  ebx,dx
c001aeaf:	76 27                	jbe    c001aed8 <datetimeToSeconds(datetime_t)+0x8d>
c001aeb1:	80 e2 03             	and    dl,0x3
c001aeb4:	75 22                	jne    c001aed8 <datetimeToSeconds(datetime_t)+0x8d>
c001aeb6:	31 d2                	xor    edx,edx
c001aeb8:	be 64 00 00 00       	mov    esi,0x64
c001aebd:	89 d8                	mov    eax,ebx
c001aebf:	f7 f6                	div    esi
c001aec1:	85 d2                	test   edx,edx
c001aec3:	75 12                	jne    c001aed7 <datetimeToSeconds(datetime_t)+0x8c>
c001aec5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001aecb:	be 90 01 00 00       	mov    esi,0x190
c001aed0:	99                   	cdq    
c001aed1:	f7 fe                	idiv   esi
c001aed3:	85 d2                	test   edx,edx
c001aed5:	75 01                	jne    c001aed8 <datetimeToSeconds(datetime_t)+0x8d>
c001aed7:	41                   	inc    ecx
c001aed8:	83 fb 46             	cmp    ebx,0x46
c001aedb:	76 48                	jbe    c001af25 <datetimeToSeconds(datetime_t)+0xda>
c001aedd:	be 46 00 00 00       	mov    esi,0x46
c001aee2:	bf 64 00 00 00       	mov    edi,0x64
c001aee7:	bd 90 01 00 00       	mov    ebp,0x190
c001aeec:	f7 c6 03 00 00 00    	test   esi,0x3
c001aef2:	b8 6d 01 00 00       	mov    eax,0x16d
c001aef7:	75 23                	jne    c001af1c <datetimeToSeconds(datetime_t)+0xd1>
c001aef9:	89 f0                	mov    eax,esi
c001aefb:	99                   	cdq    
c001aefc:	f7 ff                	idiv   edi
c001aefe:	b8 6e 01 00 00       	mov    eax,0x16e
c001af03:	85 d2                	test   edx,edx
c001af05:	75 15                	jne    c001af1c <datetimeToSeconds(datetime_t)+0xd1>
c001af07:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af0d:	99                   	cdq    
c001af0e:	f7 fd                	idiv   ebp
c001af10:	83 fa 01             	cmp    edx,0x1
c001af13:	19 c0                	sbb    eax,eax
c001af15:	f7 d0                	not    eax
c001af17:	05 6e 01 00 00       	add    eax,0x16e
c001af1c:	46                   	inc    esi
c001af1d:	01 c1                	add    ecx,eax
c001af1f:	39 de                	cmp    esi,ebx
c001af21:	7c c9                	jl     c001aeec <datetimeToSeconds(datetime_t)+0xa1>
c001af23:	eb 34                	jmp    c001af59 <datetimeToSeconds(datetime_t)+0x10e>
c001af25:	74 32                	je     c001af59 <datetimeToSeconds(datetime_t)+0x10e>
c001af27:	b8 45 00 00 00       	mov    eax,0x45
c001af2c:	89 c2                	mov    edx,eax
c001af2e:	83 e2 03             	and    edx,0x3
c001af31:	39 d8                	cmp    eax,ebx
c001af33:	7e 0f                	jle    c001af44 <datetimeToSeconds(datetime_t)+0xf9>
c001af35:	83 fa 01             	cmp    edx,0x1
c001af38:	19 d2                	sbb    edx,edx
c001af3a:	48                   	dec    eax
c001af3b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001af42:	eb e8                	jmp    c001af2c <datetimeToSeconds(datetime_t)+0xe1>
c001af44:	85 d2                	test   edx,edx
c001af46:	b8 6d 01 00 00       	mov    eax,0x16d
c001af4b:	75 0a                	jne    c001af57 <datetimeToSeconds(datetime_t)+0x10c>
c001af4d:	83 fb 01             	cmp    ebx,0x1
c001af50:	19 c0                	sbb    eax,eax
c001af52:	05 6e 01 00 00       	add    eax,0x16e
c001af57:	29 c1                	sub    ecx,eax
c001af59:	b8 80 51 01 00       	mov    eax,0x15180
c001af5e:	f7 e9                	imul   ecx
c001af60:	03 04 24             	add    eax,DWORD PTR [esp]
c001af63:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001af67:	83 c4 0c             	add    esp,0xc
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	5f                   	pop    edi
c001af6d:	5d                   	pop    ebp
c001af6e:	c3                   	ret    
c001af6f:	90                   	nop

c001af70 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001af70:	57                   	push   edi
c001af71:	56                   	push   esi
c001af72:	53                   	push   ebx
c001af73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af77:	8b 06                	mov    eax,DWORD PTR [esi]
c001af79:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001af7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af84:	e8 c2 fe ff ff       	call   c001ae4b <datetimeToSeconds(datetime_t)>
c001af89:	59                   	pop    ecx
c001af8a:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001af91:	5b                   	pop    ebx
c001af92:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001af98:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001af9e:	89 cb                	mov    ebx,ecx
c001afa0:	c1 fb 1f             	sar    ebx,0x1f
c001afa3:	29 c8                	sub    eax,ecx
c001afa5:	19 da                	sbb    edx,ebx
c001afa7:	31 c9                	xor    ecx,ecx
c001afa9:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001afb0:	74 05                	je     c001afb7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001afb2:	b9 08 07 00 00       	mov    ecx,0x708
c001afb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001afbb:	31 db                	xor    ebx,ebx
c001afbd:	29 c8                	sub    eax,ecx
c001afbf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afc3:	19 da                	sbb    edx,ebx
c001afc5:	89 f8                	mov    eax,edi
c001afc7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001afcb:	5b                   	pop    ebx
c001afcc:	5e                   	pop    esi
c001afcd:	5f                   	pop    edi
c001afce:	ff e0                	jmp    eax

c001afd0 <secondsToDatetime(unsigned long long)>:
c001afd0:	55                   	push   ebp
c001afd1:	57                   	push   edi
c001afd2:	56                   	push   esi
c001afd3:	53                   	push   ebx
c001afd4:	83 ec 1c             	sub    esp,0x1c
c001afd7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001afdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001afdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afe3:	6a 00                	push   0x0
c001afe5:	68 80 51 01 00       	push   0x15180
c001afea:	55                   	push   ebp
c001afeb:	57                   	push   edi
c001afec:	e8 0f 33 01 00       	call   c002e300 <__udivdi3>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aff8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001affe:	6a 00                	push   0x0
c001b000:	68 80 51 01 00       	push   0x15180
c001b005:	55                   	push   ebp
c001b006:	57                   	push   edi
c001b007:	bf 10 0e 00 00       	mov    edi,0xe10
c001b00c:	e8 ef 33 01 00       	call   c002e400 <__umoddi3>
c001b011:	83 c4 10             	add    esp,0x10
c001b014:	99                   	cdq    
c001b015:	f7 ff                	idiv   edi
c001b017:	bf 3c 00 00 00       	mov    edi,0x3c
c001b01c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b01f:	89 d0                	mov    eax,edx
c001b021:	99                   	cdq    
c001b022:	f7 ff                	idiv   edi
c001b024:	85 db                	test   ebx,ebx
c001b026:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b029:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b02c:	79 11                	jns    c001b03f <secondsToDatetime(unsigned long long)+0x6f>
c001b02e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b032:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b038:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b03d:	eb 07                	jmp    c001b046 <secondsToDatetime(unsigned long long)+0x76>
c001b03f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b044:	89 d8                	mov    eax,ebx
c001b046:	99                   	cdq    
c001b047:	bf b4 05 00 00       	mov    edi,0x5b4
c001b04c:	f7 f9                	idiv   ecx
c001b04e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b053:	31 d2                	xor    edx,edx
c001b055:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b05a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b05e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b066:	01 c3                	add    ebx,eax
c001b068:	89 d8                	mov    eax,ebx
c001b06a:	f7 f1                	div    ecx
c001b06c:	31 d2                	xor    edx,edx
c001b06e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b071:	89 d8                	mov    eax,ebx
c001b073:	f7 f7                	div    edi
c001b075:	31 d2                	xor    edx,edx
c001b077:	29 c1                	sub    ecx,eax
c001b079:	89 d8                	mov    eax,ebx
c001b07b:	f7 f5                	div    ebp
c001b07d:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b082:	31 d2                	xor    edx,edx
c001b084:	29 c1                	sub    ecx,eax
c001b086:	89 c8                	mov    eax,ecx
c001b088:	f7 f5                	div    ebp
c001b08a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b08f:	31 d2                	xor    edx,edx
c001b091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b095:	89 c8                	mov    eax,ecx
c001b097:	f7 f5                	div    ebp
c001b099:	31 d2                	xor    edx,edx
c001b09b:	01 c3                	add    ebx,eax
c001b09d:	89 c8                	mov    eax,ecx
c001b09f:	f7 f7                	div    edi
c001b0a1:	bf 99 00 00 00       	mov    edi,0x99
c001b0a6:	31 d2                	xor    edx,edx
c001b0a8:	29 c3                	sub    ebx,eax
c001b0aa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b0b2:	29 c3                	sub    ebx,eax
c001b0b4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b0b7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b0ba:	83 c1 02             	add    ecx,0x2
c001b0bd:	89 c8                	mov    eax,ecx
c001b0bf:	bb 05 00 00 00       	mov    ebx,0x5
c001b0c4:	f7 f7                	div    edi
c001b0c6:	31 d2                	xor    edx,edx
c001b0c8:	89 c7                	mov    edi,eax
c001b0ca:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b0d0:	83 c0 02             	add    eax,0x2
c001b0d3:	f7 f3                	div    ebx
c001b0d5:	89 eb                	mov    ebx,ebp
c001b0d7:	29 c3                	sub    ebx,eax
c001b0d9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b0df:	88 1e                	mov    BYTE PTR [esi],bl
c001b0e1:	19 c0                	sbb    eax,eax
c001b0e3:	31 d2                	xor    edx,edx
c001b0e5:	83 e0 0c             	and    eax,0xc
c001b0e8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b0ec:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b0f4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b0f8:	83 f9 01             	cmp    ecx,0x1
c001b0fb:	0f 96 c2             	setbe  dl
c001b0fe:	41                   	inc    ecx
c001b0ff:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b102:	01 d0                	add    eax,edx
c001b104:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b108:	83 c4 1c             	add    esp,0x1c
c001b10b:	89 f0                	mov    eax,esi
c001b10d:	5b                   	pop    ebx
c001b10e:	5e                   	pop    esi
c001b10f:	5f                   	pop    edi
c001b110:	5d                   	pop    ebp
c001b111:	c2 04 00             	ret    0x4

c001b114 <Clock::timeInDatetimeLocal()>:
c001b114:	53                   	push   ebx
c001b115:	83 ec 14             	sub    esp,0x14
c001b118:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b11c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b120:	e8 85 fc ff ff       	call   c001adaa <Clock::timeInSecondsLocal()>
c001b125:	83 c4 0c             	add    esp,0xc
c001b128:	52                   	push   edx
c001b129:	50                   	push   eax
c001b12a:	53                   	push   ebx
c001b12b:	e8 a0 fe ff ff       	call   c001afd0 <secondsToDatetime(unsigned long long)>
c001b130:	89 d8                	mov    eax,ebx
c001b132:	83 c4 14             	add    esp,0x14
c001b135:	5b                   	pop    ebx
c001b136:	c2 04 00             	ret    0x4
c001b139:	90                   	nop

c001b13a <Device::hibernate()>:
c001b13a:	c3                   	ret    
c001b13b:	90                   	nop

c001b13c <Device::wake()>:
c001b13c:	c3                   	ret    
c001b13d:	90                   	nop

c001b13e <Device::detect()>:
c001b13e:	c3                   	ret    
c001b13f:	90                   	nop

c001b140 <Device::disableLegacy()>:
c001b140:	c3                   	ret    
c001b141:	90                   	nop

c001b142 <Device::powerSaving(PowerSavingLevel)>:
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <DriverlessDevice::close(int, int, void*)>:
c001b144:	31 c0                	xor    eax,eax
c001b146:	c3                   	ret    
c001b147:	90                   	nop

c001b148 <DriverlessDevice::detect()>:
c001b148:	c3                   	ret    
c001b149:	90                   	nop

c001b14a <DriverlessDevice::open(int, int, void*)>:
c001b14a:	83 ec 18             	sub    esp,0x18
c001b14d:	68 10 1b 03 c0       	push   0xc0031b10
c001b152:	e8 1c 4f 00 00       	call   c0020073 <KePanic(char const*)>
c001b157:	83 c8 ff             	or     eax,0xffffffff
c001b15a:	83 c4 1c             	add    esp,0x1c
c001b15d:	c3                   	ret    

c001b15e <Device::~Device()>:
c001b15e:	ba 7c 1b 03 c0       	mov    edx,0xc0031b7c
c001b163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b167:	89 10                	mov    DWORD PTR [eax],edx
c001b169:	90                   	nop
c001b16a:	c3                   	ret    
c001b16b:	90                   	nop

c001b16c <Device::~Device()>:
c001b16c:	83 ec 0c             	sub    esp,0xc
c001b16f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b173:	e8 e6 ff ff ff       	call   c001b15e <Device::~Device()>
c001b178:	83 c4 04             	add    esp,0x4
c001b17b:	83 ec 08             	sub    esp,0x8
c001b17e:	68 58 01 00 00       	push   0x158
c001b183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b187:	e8 3c df ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001b18c:	83 c4 10             	add    esp,0x10
c001b18f:	83 c4 0c             	add    esp,0xc
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <Device::findAndLoadDriver()>:
c001b194:	c7 44 24 04 2e 1b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031b2e
c001b19c:	e9 25 e0 ff ff       	jmp    c00191c6 <Dbg::kprintf(char const*, ...)>
c001b1a1:	90                   	nop

c001b1a2 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b1a2:	57                   	push   edi
c001b1a3:	b9 09 00 00 00       	mov    ecx,0x9
c001b1a8:	56                   	push   esi
c001b1a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1ad:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b1b1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b1bb:	81 c7 18 01 00 00    	add    edi,0x118
c001b1c1:	fc                   	cld    
c001b1c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1c4:	5e                   	pop    esi
c001b1c5:	5f                   	pop    edi
c001b1c6:	c3                   	ret    
c001b1c7:	90                   	nop

c001b1c8 <Device::preOpenACPI(void*, char*, char*)>:
c001b1c8:	57                   	push   edi
c001b1c9:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b1ce:	56                   	push   esi
c001b1cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1db:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b1e5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b1eb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b1f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f3:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b1fd:	b9 0e 00 00 00       	mov    ecx,0xe
c001b202:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b204:	5e                   	pop    esi
c001b205:	5f                   	pop    edi
c001b206:	c3                   	ret    
c001b207:	90                   	nop

c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b208:	53                   	push   ebx
c001b209:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b20d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b211:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b215:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b219:	0f b6 c0             	movzx  eax,al
c001b21c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b220:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b224:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b228:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b22c:	5b                   	pop    ebx
c001b22d:	e9 be 05 00 00       	jmp    c001b7f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b232 <Device::getParent()>:
c001b232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b236:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b23c:	c3                   	ret    
c001b23d:	90                   	nop

c001b23e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b23e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b246:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b24b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b24f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b253:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b257:	e9 0b 07 00 00       	jmp    c001b967 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b25c <Device::addChild(Device*)>:
c001b25c:	53                   	push   ebx
c001b25d:	83 ec 08             	sub    esp,0x8
c001b260:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b264:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b268:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b26e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b274:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b276:	85 d2                	test   edx,edx
c001b278:	74 04                	je     c001b27e <Device::addChild(Device*)+0x22>
c001b27a:	89 d3                	mov    ebx,edx
c001b27c:	eb f6                	jmp    c001b274 <Device::addChild(Device*)+0x18>
c001b27e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b281:	83 ec 0c             	sub    esp,0xc
c001b284:	6a 08                	push   0x8
c001b286:	e8 04 b1 ff ff       	call   c001638f <malloc>
c001b28b:	89 03                	mov    DWORD PTR [ebx],eax
c001b28d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b293:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b29a:	83 c4 18             	add    esp,0x18
c001b29d:	5b                   	pop    ebx
c001b29e:	c3                   	ret    
c001b29f:	90                   	nop

c001b2a0 <Device::removeAllChildren()>:
c001b2a0:	56                   	push   esi
c001b2a1:	53                   	push   ebx
c001b2a2:	52                   	push   edx
c001b2a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b2ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2b0:	74 17                	je     c001b2c9 <Device::removeAllChildren()+0x29>
c001b2b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b2b5:	85 c0                	test   eax,eax
c001b2b7:	74 0c                	je     c001b2c5 <Device::removeAllChildren()+0x25>
c001b2b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2bb:	83 ec 0c             	sub    esp,0xc
c001b2be:	50                   	push   eax
c001b2bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b2c2:	83 c4 10             	add    esp,0x10
c001b2c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2c7:	eb e4                	jmp    c001b2ad <Device::removeAllChildren()+0xd>
c001b2c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b2cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b2db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2e2:	58                   	pop    eax
c001b2e3:	5b                   	pop    ebx
c001b2e4:	5e                   	pop    esi
c001b2e5:	c3                   	ret    

c001b2e6 <Device::hibernateAll()>:
c001b2e6:	53                   	push   ebx
c001b2e7:	83 ec 14             	sub    esp,0x14
c001b2ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2f0:	53                   	push   ebx
c001b2f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b2f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b300:	74 0f                	je     c001b311 <Device::hibernateAll()+0x2b>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b308:	e8 d9 ff ff ff       	call   c001b2e6 <Device::hibernateAll()>
c001b30d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b30f:	eb e9                	jmp    c001b2fa <Device::hibernateAll()+0x14>
c001b311:	83 c4 08             	add    esp,0x8
c001b314:	5b                   	pop    ebx
c001b315:	c3                   	ret    

c001b316 <Device::wakeAll()>:
c001b316:	53                   	push   ebx
c001b317:	83 ec 14             	sub    esp,0x14
c001b31a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b31e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b320:	53                   	push   ebx
c001b321:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b324:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b330:	74 0f                	je     c001b341 <Device::wakeAll()+0x2b>
c001b332:	83 ec 0c             	sub    esp,0xc
c001b335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b338:	e8 d9 ff ff ff       	call   c001b316 <Device::wakeAll()>
c001b33d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b33f:	eb e9                	jmp    c001b32a <Device::wakeAll()+0x14>
c001b341:	83 c4 08             	add    esp,0x8
c001b344:	5b                   	pop    ebx
c001b345:	c3                   	ret    

c001b346 <Device::detectAll()>:
c001b346:	53                   	push   ebx
c001b347:	83 ec 14             	sub    esp,0x14
c001b34a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b34e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b350:	53                   	push   ebx
c001b351:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b354:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b360:	74 0f                	je     c001b371 <Device::detectAll()+0x2b>
c001b362:	83 ec 0c             	sub    esp,0xc
c001b365:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b368:	e8 d9 ff ff ff       	call   c001b346 <Device::detectAll()>
c001b36d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b36f:	eb e9                	jmp    c001b35a <Device::detectAll()+0x14>
c001b371:	83 c4 08             	add    esp,0x8
c001b374:	5b                   	pop    ebx
c001b375:	c3                   	ret    

c001b376 <Device::disableLegacyAll()>:
c001b376:	c3                   	ret    
c001b377:	90                   	nop

c001b378 <Device::loadDriversForAll()>:
c001b378:	c3                   	ret    
c001b379:	90                   	nop

c001b37a <Device::powerSavingAll(PowerSavingLevel)>:
c001b37a:	56                   	push   esi
c001b37b:	53                   	push   ebx
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b383:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b387:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b389:	56                   	push   esi
c001b38a:	53                   	push   ebx
c001b38b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b38e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b394:	83 c4 10             	add    esp,0x10
c001b397:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b39a:	74 0f                	je     c001b3ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b39c:	52                   	push   edx
c001b39d:	52                   	push   edx
c001b39e:	56                   	push   esi
c001b39f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3a2:	e8 d3 ff ff ff       	call   c001b37a <Device::powerSavingAll(PowerSavingLevel)>
c001b3a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3a9:	eb e9                	jmp    c001b394 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b3ab:	58                   	pop    eax
c001b3ac:	5b                   	pop    ebx
c001b3ad:	5e                   	pop    esi
c001b3ae:	c3                   	ret    
c001b3af:	90                   	nop

c001b3b0 <Device::setName(char const*)>:
c001b3b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b3b8:	e9 93 52 fe ff       	jmp    c0000650 <strcpy>
c001b3bd:	90                   	nop

c001b3be <Device::Device(char const*)>:
c001b3be:	83 ec 1c             	sub    esp,0x1c
c001b3c1:	ba 7c 1b 03 c0       	mov    edx,0xc0031b7c
c001b3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3ca:	89 10                	mov    DWORD PTR [eax],edx
c001b3cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b404:	83 ec 08             	sub    esp,0x8
c001b407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40f:	e8 9c ff ff ff       	call   c001b3b0 <Device::setName(char const*)>
c001b414:	83 c4 10             	add    esp,0x10
c001b417:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b41f:	83 ec 0c             	sub    esp,0xc
c001b422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b426:	e8 64 af ff ff       	call   c001638f <malloc>
c001b42b:	83 c4 10             	add    esp,0x10
c001b42e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b43b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b43f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b449:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b44f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b459:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b45f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b46a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b475:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b47c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b480:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b48a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b48e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b49c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4aa:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b4b4:	90                   	nop
c001b4b5:	83 c4 1c             	add    esp,0x1c
c001b4b8:	c3                   	ret    
c001b4b9:	90                   	nop

c001b4ba <Device::getName()>:
c001b4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4be:	05 d0 00 00 00       	add    eax,0xd0
c001b4c3:	c3                   	ret    

c001b4c4 <Device::closeAll()>:
c001b4c4:	53                   	push   ebx
c001b4c5:	83 ec 08             	sub    esp,0x8
c001b4c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4cc:	53                   	push   ebx
c001b4cd:	e8 e8 ff ff ff       	call   c001b4ba <Device::getName()>
c001b4d2:	52                   	push   edx
c001b4d3:	50                   	push   eax
c001b4d4:	68 68 1b 03 c0       	push   0xc0031b68
c001b4d9:	e8 e8 dc ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001b4de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4e0:	6a 00                	push   0x0
c001b4e2:	6a 00                	push   0x0
c001b4e4:	6a 00                	push   0x0
c001b4e6:	53                   	push   ebx
c001b4e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b4f0:	83 c4 20             	add    esp,0x20
c001b4f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4f6:	74 12                	je     c001b50a <Device::closeAll()+0x46>
c001b4f8:	83 ec 0c             	sub    esp,0xc
c001b4fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4fe:	e8 c1 ff ff ff       	call   c001b4c4 <Device::closeAll()>
c001b503:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	eb e9                	jmp    c001b4f3 <Device::closeAll()+0x2f>
c001b50a:	83 c4 08             	add    esp,0x8
c001b50d:	5b                   	pop    ebx
c001b50e:	c3                   	ret    
c001b50f:	90                   	nop

c001b510 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b517:	83 ec 08             	sub    esp,0x8
c001b51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b51e:	50                   	push   eax
c001b51f:	e8 9a fe ff ff       	call   c001b3be <Device::Device(char const*)>
c001b524:	83 c4 10             	add    esp,0x10
c001b527:	ba a8 1b 03 c0       	mov    edx,0xc0031ba8
c001b52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b530:	89 10                	mov    DWORD PTR [eax],edx
c001b532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b536:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b540:	90                   	nop
c001b541:	83 c4 0c             	add    esp,0xc
c001b544:	c3                   	ret    
c001b545:	90                   	nop

c001b546 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b546:	57                   	push   edi
c001b547:	56                   	push   esi
c001b548:	53                   	push   ebx
c001b549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b54d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b551:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b555:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b55b:	75 0c                	jne    c001b569 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b55d:	52                   	push   edx
c001b55e:	52                   	push   edx
c001b55f:	53                   	push   ebx
c001b560:	56                   	push   esi
c001b561:	e8 4c 32 01 00       	call   c002e7b2 <LinkedList<Device>::addElement(Device*)>
c001b566:	83 c4 10             	add    esp,0x10
c001b569:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b56f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b572:	74 12                	je     c001b586 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b574:	50                   	push   eax
c001b575:	57                   	push   edi
c001b576:	56                   	push   esi
c001b577:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b57a:	e8 c7 ff ff ff       	call   c001b546 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b57f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b581:	83 c4 10             	add    esp,0x10
c001b584:	eb e9                	jmp    c001b56f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b586:	5b                   	pop    ebx
c001b587:	5e                   	pop    esi
c001b588:	5f                   	pop    edi
c001b589:	c3                   	ret    

c001b58a <getDevicesOfType(DeviceType)>:
c001b58a:	53                   	push   ebx
c001b58b:	83 ec 14             	sub    esp,0x14
c001b58e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b592:	53                   	push   ebx
c001b593:	e8 f6 32 01 00       	call   c002e88e <LinkedList<Device>::LinkedList()>
c001b598:	83 c4 0c             	add    esp,0xc
c001b59b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b59f:	53                   	push   ebx
c001b5a0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b5a6:	e8 9b ff ff ff       	call   c001b546 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5ab:	83 c4 18             	add    esp,0x18
c001b5ae:	89 d8                	mov    eax,ebx
c001b5b0:	5b                   	pop    ebx
c001b5b1:	c2 04 00             	ret    0x4

c001b5b4 <HardDiskController::HardDiskController(char const*)>:
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5bb:	83 ec 08             	sub    esp,0x8
c001b5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5c2:	50                   	push   eax
c001b5c3:	e8 f6 fd ff ff       	call   c001b3be <Device::Device(char const*)>
c001b5c8:	83 c4 10             	add    esp,0x10
c001b5cb:	ba d4 1b 03 c0       	mov    edx,0xc0031bd4
c001b5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d4:	89 10                	mov    DWORD PTR [eax],edx
c001b5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5da:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b5e4:	90                   	nop
c001b5e5:	83 c4 0c             	add    esp,0xc
c001b5e8:	c3                   	ret    
c001b5e9:	90                   	nop
c001b5ea:	66 90                	xchg   ax,ax

c001b5ec <HardDiskController::~HardDiskController()>:
c001b5ec:	83 ec 0c             	sub    esp,0xc
c001b5ef:	ba d4 1b 03 c0       	mov    edx,0xc0031bd4
c001b5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f8:	89 10                	mov    DWORD PTR [eax],edx
c001b5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fe:	83 ec 0c             	sub    esp,0xc
c001b601:	50                   	push   eax
c001b602:	e8 57 fb ff ff       	call   c001b15e <Device::~Device()>
c001b607:	83 c4 10             	add    esp,0x10
c001b60a:	90                   	nop
c001b60b:	83 c4 0c             	add    esp,0xc
c001b60e:	c3                   	ret    
c001b60f:	90                   	nop

c001b610 <HardDiskController::~HardDiskController()>:
c001b610:	83 ec 0c             	sub    esp,0xc
c001b613:	83 ec 0c             	sub    esp,0xc
c001b616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b61a:	e8 cd ff ff ff       	call   c001b5ec <HardDiskController::~HardDiskController()>
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	83 ec 08             	sub    esp,0x8
c001b625:	68 58 01 00 00       	push   0x158
c001b62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b62e:	e8 95 da ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001b633:	83 c4 10             	add    esp,0x10
c001b636:	83 c4 0c             	add    esp,0xc
c001b639:	c3                   	ret    

c001b63a <PhysicalDisk::eject()>:
c001b63a:	83 c8 ff             	or     eax,0xffffffff
c001b63d:	c3                   	ret    

c001b63e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b63e:	83 ec 0c             	sub    esp,0xc
c001b641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b645:	83 ec 08             	sub    esp,0x8
c001b648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b64c:	50                   	push   eax
c001b64d:	e8 6c fd ff ff       	call   c001b3be <Device::Device(char const*)>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	ba 00 1c 03 c0       	mov    edx,0xc0031c00
c001b65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65e:	89 10                	mov    DWORD PTR [eax],edx
c001b660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b664:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b688:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b68c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b696:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b6a0:	90                   	nop
c001b6a1:	83 c4 0c             	add    esp,0xc
c001b6a4:	c3                   	ret    
c001b6a5:	90                   	nop

c001b6a6 <PhysicalDisk::startCache()>:
c001b6a6:	56                   	push   esi
c001b6a7:	53                   	push   ebx
c001b6a8:	83 ec 10             	sub    esp,0x10
c001b6ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6af:	6a 44                	push   0x44
c001b6b1:	e8 d9 ac ff ff       	call   c001638f <malloc>
c001b6b6:	89 c6                	mov    esi,eax
c001b6b8:	58                   	pop    eax
c001b6b9:	5a                   	pop    edx
c001b6ba:	53                   	push   ebx
c001b6bb:	56                   	push   esi
c001b6bc:	e8 77 17 00 00       	call   c001ce38 <VCache::VCache(PhysicalDisk*)>
c001b6c1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b6c7:	83 c4 14             	add    esp,0x14
c001b6ca:	5b                   	pop    ebx
c001b6cb:	5e                   	pop    esi
c001b6cc:	c3                   	ret    
c001b6cd:	90                   	nop

c001b6ce <PhysicalDisk::~PhysicalDisk()>:
c001b6ce:	83 ec 0c             	sub    esp,0xc
c001b6d1:	ba 00 1c 03 c0       	mov    edx,0xc0031c00
c001b6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6da:	89 10                	mov    DWORD PTR [eax],edx
c001b6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e0:	83 ec 0c             	sub    esp,0xc
c001b6e3:	50                   	push   eax
c001b6e4:	e8 75 fa ff ff       	call   c001b15e <Device::~Device()>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	90                   	nop
c001b6ed:	83 c4 0c             	add    esp,0xc
c001b6f0:	c3                   	ret    
c001b6f1:	90                   	nop

c001b6f2 <PhysicalDisk::~PhysicalDisk()>:
c001b6f2:	83 ec 0c             	sub    esp,0xc
c001b6f5:	83 ec 0c             	sub    esp,0xc
c001b6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6fc:	e8 cd ff ff ff       	call   c001b6ce <PhysicalDisk::~PhysicalDisk()>
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	83 ec 08             	sub    esp,0x8
c001b707:	68 6c 01 00 00       	push   0x16c
c001b70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b710:	e8 b3 d9 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	83 c4 0c             	add    esp,0xc
c001b71b:	c3                   	ret    

c001b71c <int_handler>:
c001b71c:	55                   	push   ebp
c001b71d:	57                   	push   edi
c001b71e:	56                   	push   esi
c001b71f:	53                   	push   ebx
c001b720:	83 ec 0c             	sub    esp,0xc
c001b723:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b72a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b72e:	74 0b                	je     c001b73b <int_handler+0x1f>
c001b730:	fa                   	cli    
c001b731:	f4                   	hlt    
c001b732:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b739:	75 f5                	jne    c001b730 <int_handler+0x14>
c001b73b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b73e:	8d 46 e0             	lea    eax,[esi-0x20]
c001b741:	83 f8 17             	cmp    eax,0x17
c001b744:	76 40                	jbe    c001b786 <int_handler+0x6a>
c001b746:	c1 e6 04             	shl    esi,0x4
c001b749:	31 db                	xor    ebx,ebx
c001b74b:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b751:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b757:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b75b:	85 c0                	test   eax,eax
c001b75d:	74 13                	je     c001b772 <int_handler+0x56>
c001b75f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b763:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b766:	74 2c                	je     c001b794 <int_handler+0x78>
c001b768:	83 ec 08             	sub    esp,0x8
c001b76b:	52                   	push   edx
c001b76c:	57                   	push   edi
c001b76d:	ff d0                	call   eax
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	83 c3 01             	add    ebx,0x1
c001b775:	83 fb 04             	cmp    ebx,0x4
c001b778:	75 dd                	jne    c001b757 <int_handler+0x3b>
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	31 c0                	xor    eax,eax
c001b77f:	5b                   	pop    ebx
c001b780:	31 d2                	xor    edx,edx
c001b782:	5e                   	pop    esi
c001b783:	5f                   	pop    edi
c001b784:	5d                   	pop    ebp
c001b785:	c3                   	ret    
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	50                   	push   eax
c001b78a:	e8 2f b7 00 00       	call   c0026ebe <HalEndOfInterrupt(int)>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	eb b2                	jmp    c001b746 <int_handler+0x2a>
c001b794:	83 ec 08             	sub    esp,0x8
c001b797:	52                   	push   edx
c001b798:	57                   	push   edi
c001b799:	ff d0                	call   eax
c001b79b:	83 c4 10             	add    esp,0x10
c001b79e:	83 c4 0c             	add    esp,0xc
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	5f                   	pop    edi
c001b7a4:	5d                   	pop    ebp
c001b7a5:	c3                   	ret    

c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b7a6:	56                   	push   esi
c001b7a7:	31 c0                	xor    eax,eax
c001b7a9:	53                   	push   ebx
c001b7aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b7ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b7b6:	89 ca                	mov    edx,ecx
c001b7b8:	c1 e2 04             	shl    edx,0x4
c001b7bb:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b7c3:	74 17                	je     c001b7dc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b7c5:	83 c0 01             	add    eax,0x1
c001b7c8:	83 f8 04             	cmp    eax,0x4
c001b7cb:	75 ee                	jne    c001b7bb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b7cd:	c7 44 24 0c 30 1c 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031c30
c001b7d5:	5b                   	pop    ebx
c001b7d6:	5e                   	pop    esi
c001b7d7:	e9 97 48 00 00       	jmp    c0020073 <KePanic(char const*)>
c001b7dc:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b7df:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b7e6:	5b                   	pop    ebx
c001b7e7:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b7ee:	5e                   	pop    esi
c001b7ef:	c3                   	ret    

c001b7f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b7f0:	55                   	push   ebp
c001b7f1:	57                   	push   edi
c001b7f2:	56                   	push   esi
c001b7f3:	53                   	push   ebx
c001b7f4:	83 ec 0c             	sub    esp,0xc
c001b7f7:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b7fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b801:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b805:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b80c:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b80f:	74 57                	je     c001b868 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b811:	84 c0                	test   al,al
c001b813:	89 c7                	mov    edi,eax
c001b815:	74 1d                	je     c001b834 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b817:	83 fe 0f             	cmp    esi,0xf
c001b81a:	0f 8f d9 00 00 00    	jg     c001b8f9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001b820:	0f b6 b6 48 38 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc7b8]
c001b827:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b82f:	d1 ef                	shr    edi,1
c001b831:	83 e7 01             	and    edi,0x1
c001b834:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b839:	83 ec 08             	sub    esp,0x8
c001b83c:	31 db                	xor    ebx,ebx
c001b83e:	50                   	push   eax
c001b83f:	68 3d 1c 03 c0       	push   0xc0031c3d
c001b844:	e8 7d d9 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001b849:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b84e:	83 c4 10             	add    esp,0x10
c001b851:	85 c0                	test   eax,eax
c001b853:	7f 59                	jg     c001b8ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001b855:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b858:	83 ec 0c             	sub    esp,0xc
c001b85b:	68 54 1c 03 c0       	push   0xc0031c54
c001b860:	e8 0e 48 00 00       	call   c0020073 <KePanic(char const*)>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	89 e8                	mov    eax,ebp
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	c1 e0 04             	shl    eax,0x4
c001b86f:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b876:	85 c9                	test   ecx,ecx
c001b878:	0f 84 92 00 00 00    	je     c001b910 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001b87e:	83 c2 01             	add    edx,0x1
c001b881:	83 fa 04             	cmp    edx,0x4
c001b884:	75 e9                	jne    c001b86f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001b886:	83 ec 0c             	sub    esp,0xc
c001b889:	68 a8 1c 03 c0       	push   0xc0031ca8
c001b88e:	e8 e0 47 00 00       	call   c0020073 <KePanic(char const*)>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b89b:	83 c4 0c             	add    esp,0xc
c001b89e:	5b                   	pop    ebx
c001b89f:	5e                   	pop    esi
c001b8a0:	5f                   	pop    edi
c001b8a1:	5d                   	pop    ebp
c001b8a2:	c3                   	ret    
c001b8a3:	83 c3 01             	add    ebx,0x1
c001b8a6:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b8ac:	7e a7                	jle    c001b855 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001b8ae:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001b8b5:	83 ec 08             	sub    esp,0x8
c001b8b8:	56                   	push   esi
c001b8b9:	55                   	push   ebp
c001b8ba:	e8 3f 1e 01 00       	call   c002d6fe <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b8bf:	83 c4 10             	add    esp,0x10
c001b8c2:	84 c0                	test   al,al
c001b8c4:	74 dd                	je     c001b8a3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b8c6:	89 f8                	mov    eax,edi
c001b8c8:	83 ec 04             	sub    esp,0x4
c001b8cb:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b8d2:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b8d5:	0f b6 f8             	movzx  edi,al
c001b8d8:	57                   	push   edi
c001b8d9:	89 e8                	mov    eax,ebp
c001b8db:	6a 00                	push   0x0
c001b8dd:	0f b6 c0             	movzx  eax,al
c001b8e0:	50                   	push   eax
c001b8e1:	89 f0                	mov    eax,esi
c001b8e3:	6a 00                	push   0x0
c001b8e5:	0f b6 c0             	movzx  eax,al
c001b8e8:	6a 00                	push   0x0
c001b8ea:	50                   	push   eax
c001b8eb:	53                   	push   ebx
c001b8ec:	e8 79 1f 01 00       	call   c002d86a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b8f1:	83 c4 20             	add    esp,0x20
c001b8f4:	e9 6f ff ff ff       	jmp    c001b868 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b8f9:	83 ec 0c             	sub    esp,0xc
c001b8fc:	31 ff                	xor    edi,edi
c001b8fe:	68 70 1c 03 c0       	push   0xc0031c70
c001b903:	e8 6b 47 00 00       	call   c0020073 <KePanic(char const*)>
c001b908:	83 c4 10             	add    esp,0x10
c001b90b:	e9 24 ff ff ff       	jmp    c001b834 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b910:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b913:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b917:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b91e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b922:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b929:	83 c4 0c             	add    esp,0xc
c001b92c:	89 f0                	mov    eax,esi
c001b92e:	5b                   	pop    ebx
c001b92f:	5e                   	pop    esi
c001b930:	5f                   	pop    edi
c001b931:	5d                   	pop    ebp
c001b932:	c3                   	ret    

c001b933 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b937:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b93b:	c1 e0 04             	shl    eax,0x4
c001b93e:	8d 50 10             	lea    edx,[eax+0x10]
c001b941:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b947:	74 08                	je     c001b951 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b949:	83 c0 04             	add    eax,0x4
c001b94c:	39 d0                	cmp    eax,edx
c001b94e:	75 f1                	jne    c001b941 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b950:	c3                   	ret    
c001b951:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b95b:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b965:	eb e2                	jmp    c001b949 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b967 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b967:	56                   	push   esi
c001b968:	53                   	push   ebx
c001b969:	83 ec 04             	sub    esp,0x4
c001b96c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b979:	74 0e                	je     c001b989 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001b97b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b980:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b987:	75 34                	jne    c001b9bd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001b989:	8d 43 20             	lea    eax,[ebx+0x20]
c001b98c:	c1 e0 04             	shl    eax,0x4
c001b98f:	8d 50 10             	lea    edx,[eax+0x10]
c001b992:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001b998:	74 0d                	je     c001b9a7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001b99a:	83 c0 04             	add    eax,0x4
c001b99d:	39 d0                	cmp    eax,edx
c001b99f:	75 f1                	jne    c001b992 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001b9a1:	83 c4 04             	add    esp,0x4
c001b9a4:	5b                   	pop    ebx
c001b9a5:	5e                   	pop    esi
c001b9a6:	c3                   	ret    
c001b9a7:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9b1:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9bb:	eb dd                	jmp    c001b99a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001b9bd:	83 fb 0f             	cmp    ebx,0xf
c001b9c0:	7f 09                	jg     c001b9cb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001b9c2:	0f b6 9b 48 38 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc7b8]
c001b9c9:	eb be                	jmp    c001b989 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	68 61 1c 03 c0       	push   0xc0031c61
c001b9d3:	e8 9b 46 00 00       	call   c0020073 <KePanic(char const*)>
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	eb ac                	jmp    c001b989 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001b9dd <setupINTS()>:
c001b9dd:	31 c0                	xor    eax,eax
c001b9df:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9e9:	83 c0 10             	add    eax,0x10
c001b9ec:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001b9f6:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001ba00:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001ba0a:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001ba14:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001ba1e:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001ba28:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001ba32:	3d 00 10 00 00       	cmp    eax,0x1000
c001ba37:	75 a6                	jne    c001b9df <setupINTS()+0x2>
c001ba39:	c3                   	ret    

c001ba3a <convertLegacyIRQNumber(int)>:
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001ba4e:	74 0c                	je     c001ba5c <convertLegacyIRQNumber(int)+0x22>
c001ba50:	83 f8 0f             	cmp    eax,0xf
c001ba53:	7f 0b                	jg     c001ba60 <convertLegacyIRQNumber(int)+0x26>
c001ba55:	0f b6 80 48 38 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc7b8]
c001ba5c:	83 c4 0c             	add    esp,0xc
c001ba5f:	c3                   	ret    
c001ba60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba64:	83 ec 0c             	sub    esp,0xc
c001ba67:	68 70 1c 03 c0       	push   0xc0031c70
c001ba6c:	e8 02 46 00 00       	call   c0020073 <KePanic(char const*)>
c001ba71:	83 c4 10             	add    esp,0x10
c001ba74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba78:	83 c4 0c             	add    esp,0xc
c001ba7b:	c3                   	ret    

c001ba7c <startGUI(void*)>:
c001ba7c:	55                   	push   ebp
c001ba7d:	89 e5                	mov    ebp,esp
c001ba7f:	53                   	push   ebx
c001ba80:	83 ec 04             	sub    esp,0x4
c001ba83:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba88:	83 e8 01             	sub    eax,0x1
c001ba8b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ba90:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba95:	85 c0                	test   eax,eax
c001ba97:	75 01                	jne    c001ba9a <startGUI(void*)+0x1e>
c001ba99:	fb                   	sti    
c001ba9a:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001baa0:	83 ec 08             	sub    esp,0x8
c001baa3:	6a 01                	push   0x1
c001baa5:	68 cd 1c 03 c0       	push   0xc0031ccd
c001baaa:	e8 88 86 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001baaf:	83 c4 10             	add    esp,0x10
c001bab2:	83 ec 08             	sub    esp,0x8
c001bab5:	53                   	push   ebx
c001bab6:	50                   	push   eax
c001bab7:	e8 dc 88 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001babc:	83 c4 10             	add    esp,0x10
c001babf:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bac5:	83 ec 08             	sub    esp,0x8
c001bac8:	6a 01                	push   0x1
c001baca:	68 e7 1c 03 c0       	push   0xc0031ce7
c001bacf:	e8 63 86 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	83 ec 08             	sub    esp,0x8
c001bada:	53                   	push   ebx
c001badb:	50                   	push   eax
c001badc:	e8 b7 88 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001bae1:	83 c4 10             	add    esp,0x10
c001bae4:	eb fe                	jmp    c001bae4 <startGUI(void*)+0x68>

c001bae6 <startGUIVESA(void*)>:
c001bae6:	55                   	push   ebp
c001bae7:	89 e5                	mov    ebp,esp
c001bae9:	53                   	push   ebx
c001baea:	83 ec 04             	sub    esp,0x4
c001baed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baf2:	83 e8 01             	sub    eax,0x1
c001baf5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bafa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baff:	85 c0                	test   eax,eax
c001bb01:	75 01                	jne    c001bb04 <startGUIVESA(void*)+0x1e>
c001bb03:	fb                   	sti    
c001bb04:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb0a:	83 ec 08             	sub    esp,0x8
c001bb0d:	6a 01                	push   0x1
c001bb0f:	68 05 1d 03 c0       	push   0xc0031d05
c001bb14:	e8 1e 86 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	83 ec 08             	sub    esp,0x8
c001bb1f:	53                   	push   ebx
c001bb20:	50                   	push   eax
c001bb21:	e8 72 88 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb2f:	83 ec 08             	sub    esp,0x8
c001bb32:	6a 01                	push   0x1
c001bb34:	68 e7 1c 03 c0       	push   0xc0031ce7
c001bb39:	e8 f9 85 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	83 ec 08             	sub    esp,0x8
c001bb44:	53                   	push   ebx
c001bb45:	50                   	push   eax
c001bb46:	e8 4d 88 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	eb fe                	jmp    c001bb4e <startGUIVESA(void*)+0x68>

c001bb50 <sendKeyToTerminal(unsigned char)>:
c001bb50:	55                   	push   ebp
c001bb51:	89 e5                	mov    ebp,esp
c001bb53:	83 ec 28             	sub    esp,0x28
c001bb56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bb5c:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bb61:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bb65:	83 ec 08             	sub    esp,0x8
c001bb68:	52                   	push   edx
c001bb69:	50                   	push   eax
c001bb6a:	e8 09 bb ff ff       	call   c0017678 <VgaText::receiveKey(unsigned char)>
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb76:	83 f8 0a             	cmp    eax,0xa
c001bb79:	74 16                	je     c001bb91 <sendKeyToTerminal(unsigned char)+0x41>
c001bb7b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb7f:	83 f8 03             	cmp    eax,0x3
c001bb82:	74 0d                	je     c001bb91 <sendKeyToTerminal(unsigned char)+0x41>
c001bb84:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb88:	83 f8 1c             	cmp    eax,0x1c
c001bb8b:	0f 85 97 00 00 00    	jne    c001bc28 <sendKeyToTerminal(unsigned char)+0xd8>
c001bb91:	fa                   	cli    
c001bb92:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb97:	83 c0 01             	add    eax,0x1
c001bb9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb9f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bba4:	83 c0 01             	add    eax,0x1
c001bba7:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bbac:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bbb1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bbb4:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bbbe:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bbc2:	74 1f                	je     c001bbe3 <sendKeyToTerminal(unsigned char)+0x93>
c001bbc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bbc7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bbca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bbcd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbd0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bbd3:	83 ec 0c             	sub    esp,0xc
c001bbd6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bbd9:	e8 26 95 00 00       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	eb db                	jmp    c001bbbe <sendKeyToTerminal(unsigned char)+0x6e>
c001bbe3:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bbe8:	83 e8 01             	sub    eax,0x1
c001bbeb:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bbf0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bbf5:	85 c0                	test   eax,eax
c001bbf7:	75 18                	jne    c001bc11 <sendKeyToTerminal(unsigned char)+0xc1>
c001bbf9:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bbfe:	85 c0                	test   eax,eax
c001bc00:	74 0f                	je     c001bc11 <sendKeyToTerminal(unsigned char)+0xc1>
c001bc02:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc0c:	e8 fb 8f 00 00       	call   c0024c0c <schedule()>
c001bc11:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc16:	83 e8 01             	sub    eax,0x1
c001bc19:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc1e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc23:	85 c0                	test   eax,eax
c001bc25:	75 01                	jne    c001bc28 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc27:	fb                   	sti    
c001bc28:	90                   	nop
c001bc29:	c9                   	leave  
c001bc2a:	c3                   	ret    

c001bc2b <sendKeyboardToken(KeyboardToken)>:
c001bc2b:	55                   	push   ebp
c001bc2c:	89 e5                	mov    ebp,esp
c001bc2e:	83 ec 18             	sub    esp,0x18
c001bc31:	e8 8d 44 00 00       	call   c00200c3 <KeUserIOReceived()>
c001bc36:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bc39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc3c:	0f b7 c0             	movzx  eax,ax
c001bc3f:	83 f2 01             	xor    edx,0x1
c001bc42:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bc48:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bc4d:	85 c0                	test   eax,eax
c001bc4f:	74 24                	je     c001bc75 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bc51:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bc57:	83 ec 04             	sub    esp,0x4
c001bc5a:	68 40 ef 03 c0       	push   0xc003ef40
c001bc5f:	83 ec 08             	sub    esp,0x8
c001bc62:	89 e0                	mov    eax,esp
c001bc64:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bc67:	89 08                	mov    DWORD PTR [eax],ecx
c001bc69:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bc6c:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bc70:	ff d2                	call   edx
c001bc72:	83 c4 10             	add    esp,0x10
c001bc75:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc79:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bc7c:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc81:	0f b6 d2             	movzx  edx,dl
c001bc84:	0f b6 c0             	movzx  eax,al
c001bc87:	39 c2                	cmp    edx,eax
c001bc89:	74 1c                	je     c001bca7 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bc8b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bc8e:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bc93:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc98:	0f b6 c0             	movzx  eax,al
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	50                   	push   eax
c001bc9f:	e8 30 b1 ff ff       	call   c0016dd4 <setTerminalScrollLock(bool)>
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bcaa:	0f b6 c0             	movzx  eax,al
c001bcad:	85 c0                	test   eax,eax
c001bcaf:	0f 84 da 00 00 00    	je     c001bd8f <sendKeyboardToken(KeyboardToken)+0x164>
c001bcb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcb8:	0f b7 c0             	movzx  eax,ax
c001bcbb:	3d 18 03 00 00       	cmp    eax,0x318
c001bcc0:	75 06                	jne    c001bcc8 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bcc2:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bcc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bccb:	0f b7 c0             	movzx  eax,ax
c001bcce:	3d 19 03 00 00       	cmp    eax,0x319
c001bcd3:	75 06                	jne    c001bcdb <sendKeyboardToken(KeyboardToken)+0xb0>
c001bcd5:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bcdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcde:	0f b7 c0             	movzx  eax,ax
c001bce1:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bce6:	75 06                	jne    c001bcee <sendKeyboardToken(KeyboardToken)+0xc3>
c001bce8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bcee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcf1:	0f b7 c0             	movzx  eax,ax
c001bcf4:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bcf9:	75 06                	jne    c001bd01 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bcfb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd04:	0f b7 c0             	movzx  eax,ax
c001bd07:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd0c:	75 06                	jne    c001bd14 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd0e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd17:	0f b7 c0             	movzx  eax,ax
c001bd1a:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd1f:	75 06                	jne    c001bd27 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd21:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd2a:	0f b7 c0             	movzx  eax,ax
c001bd2d:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bd32:	75 06                	jne    c001bd3a <sendKeyboardToken(KeyboardToken)+0x10f>
c001bd34:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bd3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd3d:	0f b7 c0             	movzx  eax,ax
c001bd40:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bd45:	75 06                	jne    c001bd4d <sendKeyboardToken(KeyboardToken)+0x122>
c001bd47:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd50:	0f b7 c0             	movzx  eax,ax
c001bd53:	3d 20 03 00 00       	cmp    eax,0x320
c001bd58:	75 06                	jne    c001bd60 <sendKeyboardToken(KeyboardToken)+0x135>
c001bd5a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bd60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd63:	0f b7 c0             	movzx  eax,ax
c001bd66:	3d 21 03 00 00       	cmp    eax,0x321
c001bd6b:	75 06                	jne    c001bd73 <sendKeyboardToken(KeyboardToken)+0x148>
c001bd6d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bd73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd76:	0f b7 c0             	movzx  eax,ax
c001bd79:	3d 22 03 00 00       	cmp    eax,0x322
c001bd7e:	0f 85 f1 00 00 00    	jne    c001be75 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd84:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bd8a:	e9 e6 00 00 00       	jmp    c001be75 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd92:	0f b7 c0             	movzx  eax,ax
c001bd95:	3d 18 03 00 00       	cmp    eax,0x318
c001bd9a:	75 0a                	jne    c001bda6 <sendKeyboardToken(KeyboardToken)+0x17b>
c001bd9c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bda2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bda6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda9:	0f b7 c0             	movzx  eax,ax
c001bdac:	3d 19 03 00 00       	cmp    eax,0x319
c001bdb1:	75 0a                	jne    c001bdbd <sendKeyboardToken(KeyboardToken)+0x192>
c001bdb3:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bdb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc0:	0f b7 c0             	movzx  eax,ax
c001bdc3:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bdc8:	75 0a                	jne    c001bdd4 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bdca:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001bdd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd7:	0f b7 c0             	movzx  eax,ax
c001bdda:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bddf:	75 0a                	jne    c001bdeb <sendKeyboardToken(KeyboardToken)+0x1c0>
c001bde1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001bde7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdee:	0f b7 c0             	movzx  eax,ax
c001bdf1:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bdf6:	75 0a                	jne    c001be02 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bdf8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bdfe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be05:	0f b7 c0             	movzx  eax,ax
c001be08:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be0d:	75 0a                	jne    c001be19 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be0f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be1c:	0f b7 c0             	movzx  eax,ax
c001be1f:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be24:	75 0a                	jne    c001be30 <sendKeyboardToken(KeyboardToken)+0x205>
c001be26:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001be2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be33:	0f b7 c0             	movzx  eax,ax
c001be36:	3d 1f 03 00 00       	cmp    eax,0x31f
c001be3b:	75 0a                	jne    c001be47 <sendKeyboardToken(KeyboardToken)+0x21c>
c001be3d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001be43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be4a:	0f b7 c0             	movzx  eax,ax
c001be4d:	3d 20 03 00 00       	cmp    eax,0x320
c001be52:	75 0a                	jne    c001be5e <sendKeyboardToken(KeyboardToken)+0x233>
c001be54:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001be5a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be61:	0f b7 c0             	movzx  eax,ax
c001be64:	3d 21 03 00 00       	cmp    eax,0x321
c001be69:	75 0a                	jne    c001be75 <sendKeyboardToken(KeyboardToken)+0x24a>
c001be6b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001be71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be78:	0f b7 c0             	movzx  eax,ax
c001be7b:	3d 00 02 00 00       	cmp    eax,0x200
c001be80:	75 2f                	jne    c001beb1 <sendKeyboardToken(KeyboardToken)+0x286>
c001be82:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be87:	83 f0 01             	xor    eax,0x1
c001be8a:	0f b6 c0             	movzx  eax,al
c001be8d:	85 c0                	test   eax,eax
c001be8f:	74 20                	je     c001beb1 <sendKeyboardToken(KeyboardToken)+0x286>
c001be91:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be96:	6a 01                	push   0x1
c001be98:	6a 00                	push   0x0
c001be9a:	68 7c ba 01 c0       	push   0xc001ba7c
c001be9f:	50                   	push   eax
c001bea0:	e8 1b 8b 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001beaf:	eb 3a                	jmp    c001beeb <sendKeyboardToken(KeyboardToken)+0x2c0>
c001beb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb4:	0f b7 c0             	movzx  eax,ax
c001beb7:	3d 01 02 00 00       	cmp    eax,0x201
c001bebc:	75 2d                	jne    c001beeb <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bebe:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bec3:	83 f0 01             	xor    eax,0x1
c001bec6:	0f b6 c0             	movzx  eax,al
c001bec9:	85 c0                	test   eax,eax
c001becb:	74 1e                	je     c001beeb <sendKeyboardToken(KeyboardToken)+0x2c0>
c001becd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bed2:	6a 01                	push   0x1
c001bed4:	6a 00                	push   0x0
c001bed6:	68 e6 ba 01 c0       	push   0xc001bae6
c001bedb:	50                   	push   eax
c001bedc:	e8 df 8a 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001beeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beee:	0f b7 c0             	movzx  eax,ax
c001bef1:	3d 25 03 00 00       	cmp    eax,0x325
c001bef6:	75 06                	jne    c001befe <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bef8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001befe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf01:	0f b7 c0             	movzx  eax,ax
c001bf04:	3d 24 03 00 00       	cmp    eax,0x324
c001bf09:	75 06                	jne    c001bf11 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf0b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf14:	0f b7 c0             	movzx  eax,ax
c001bf17:	3d 23 03 00 00       	cmp    eax,0x323
c001bf1c:	75 06                	jne    c001bf24 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf1e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bf24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf27:	0f b7 c0             	movzx  eax,ax
c001bf2a:	3d 26 03 00 00       	cmp    eax,0x326
c001bf2f:	75 06                	jne    c001bf37 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bf31:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bf37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf3a:	0f b7 c0             	movzx  eax,ax
c001bf3d:	3d 27 03 00 00       	cmp    eax,0x327
c001bf42:	75 06                	jne    c001bf4a <sendKeyboardToken(KeyboardToken)+0x31f>
c001bf44:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bf4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4d:	0f b7 c0             	movzx  eax,ax
c001bf50:	3d 22 03 00 00       	cmp    eax,0x322
c001bf55:	75 06                	jne    c001bf5d <sendKeyboardToken(KeyboardToken)+0x332>
c001bf57:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bf5d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bf61:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bf64:	83 f0 01             	xor    eax,0x1
c001bf67:	0f b6 c0             	movzx  eax,al
c001bf6a:	85 c0                	test   eax,eax
c001bf6c:	74 7c                	je     c001bfea <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bf6e:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bf73:	0f b6 c0             	movzx  eax,al
c001bf76:	85 c0                	test   eax,eax
c001bf78:	74 43                	je     c001bfbd <sendKeyboardToken(KeyboardToken)+0x392>
c001bf7a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf7e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bf82:	85 c0                	test   eax,eax
c001bf84:	74 2b                	je     c001bfb1 <sendKeyboardToken(KeyboardToken)+0x386>
c001bf86:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bf8c:	89 d0                	mov    eax,edx
c001bf8e:	c1 e0 02             	shl    eax,0x2
c001bf91:	01 d0                	add    eax,edx
c001bf93:	d1 e0                	shl    eax,1
c001bf95:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf9d:	0f b7 c0             	movzx  eax,ax
c001bfa0:	8d 50 d0             	lea    edx,[eax-0x30]
c001bfa3:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfa8:	01 d0                	add    eax,edx
c001bfaa:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bfaf:	eb 71                	jmp    c001c022 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfb1:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bfbb:	eb 65                	jmp    c001c022 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfbd:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfc2:	85 c0                	test   eax,eax
c001bfc4:	74 18                	je     c001bfde <sendKeyboardToken(KeyboardToken)+0x3b3>
c001bfc6:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfcb:	0f b6 c0             	movzx  eax,al
c001bfce:	83 ec 0c             	sub    esp,0xc
c001bfd1:	50                   	push   eax
c001bfd2:	e8 79 fb ff ff       	call   c001bb50 <sendKeyToTerminal(unsigned char)>
c001bfd7:	83 c4 10             	add    esp,0x10
c001bfda:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfde:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bfe8:	eb 38                	jmp    c001c022 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfed:	0f b7 c0             	movzx  eax,ax
c001bff0:	3d 01 01 00 00       	cmp    eax,0x101
c001bff5:	75 2b                	jne    c001c022 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bff7:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bffc:	85 c0                	test   eax,eax
c001bffe:	74 18                	je     c001c018 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c000:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c005:	0f b6 c0             	movzx  eax,al
c001c008:	83 ec 0c             	sub    esp,0xc
c001c00b:	50                   	push   eax
c001c00c:	e8 3f fb ff ff       	call   c001bb50 <sendKeyToTerminal(unsigned char)>
c001c011:	83 c4 10             	add    esp,0x10
c001c014:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c018:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c022:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c025:	83 f0 01             	xor    eax,0x1
c001c028:	0f b6 c0             	movzx  eax,al
c001c02b:	85 c0                	test   eax,eax
c001c02d:	74 5a                	je     c001c089 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c02f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c032:	83 f0 01             	xor    eax,0x1
c001c035:	0f b6 c0             	movzx  eax,al
c001c038:	85 c0                	test   eax,eax
c001c03a:	74 4d                	je     c001c089 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c03c:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c041:	83 f0 01             	xor    eax,0x1
c001c044:	0f b6 c0             	movzx  eax,al
c001c047:	85 c0                	test   eax,eax
c001c049:	74 3e                	je     c001c089 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c04b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c04e:	0f b7 c0             	movzx  eax,ax
c001c051:	83 f8 1f             	cmp    eax,0x1f
c001c054:	76 0b                	jbe    c001c061 <sendKeyboardToken(KeyboardToken)+0x436>
c001c056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c059:	0f b7 c0             	movzx  eax,ax
c001c05c:	83 f8 7e             	cmp    eax,0x7e
c001c05f:	76 16                	jbe    c001c077 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c064:	0f b7 c0             	movzx  eax,ax
c001c067:	83 f8 0a             	cmp    eax,0xa
c001c06a:	74 0b                	je     c001c077 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c06c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c06f:	0f b7 c0             	movzx  eax,ax
c001c072:	83 f8 08             	cmp    eax,0x8
c001c075:	75 12                	jne    c001c089 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07a:	0f b6 c0             	movzx  eax,al
c001c07d:	83 ec 0c             	sub    esp,0xc
c001c080:	50                   	push   eax
c001c081:	e8 ca fa ff ff       	call   c001bb50 <sendKeyToTerminal(unsigned char)>
c001c086:	83 c4 10             	add    esp,0x10
c001c089:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c08c:	83 f0 01             	xor    eax,0x1
c001c08f:	0f b6 c0             	movzx  eax,al
c001c092:	85 c0                	test   eax,eax
c001c094:	74 5d                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c096:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c099:	83 f0 01             	xor    eax,0x1
c001c09c:	0f b6 c0             	movzx  eax,al
c001c09f:	85 c0                	test   eax,eax
c001c0a1:	74 50                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0a3:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0a8:	0f b6 c0             	movzx  eax,al
c001c0ab:	85 c0                	test   eax,eax
c001c0ad:	74 44                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b2:	0f b7 c0             	movzx  eax,ax
c001c0b5:	83 f8 3f             	cmp    eax,0x3f
c001c0b8:	76 39                	jbe    c001c0f3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0bd:	0f b7 c0             	movzx  eax,ax
c001c0c0:	83 f8 7f             	cmp    eax,0x7f
c001c0c3:	77 2e                	ja     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c8:	88 c2                	mov    dl,al
c001c0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0cd:	0f b7 c0             	movzx  eax,ax
c001c0d0:	83 f8 5f             	cmp    eax,0x5f
c001c0d3:	76 04                	jbe    c001c0d9 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c0d5:	b0 20                	mov    al,0x20
c001c0d7:	eb 02                	jmp    c001c0db <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c0d9:	b0 00                	mov    al,0x0
c001c0db:	89 d1                	mov    ecx,edx
c001c0dd:	29 c1                	sub    ecx,eax
c001c0df:	89 c8                	mov    eax,ecx
c001c0e1:	83 e8 40             	sub    eax,0x40
c001c0e4:	0f b6 c0             	movzx  eax,al
c001c0e7:	83 ec 0c             	sub    esp,0xc
c001c0ea:	50                   	push   eax
c001c0eb:	e8 60 fa ff ff       	call   c001bb50 <sendKeyToTerminal(unsigned char)>
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f6:	0f b7 c0             	movzx  eax,ax
c001c0f9:	3d 00 03 00 00       	cmp    eax,0x300
c001c0fe:	75 12                	jne    c001c112 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c100:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c103:	83 f0 01             	xor    eax,0x1
c001c106:	0f b6 c0             	movzx  eax,al
c001c109:	85 c0                	test   eax,eax
c001c10b:	74 05                	je     c001c112 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c10d:	e8 c3 ac ff ff       	call   c0016dd5 <doTerminalCycle()>
c001c112:	90                   	nop
c001c113:	c9                   	leave  
c001c114:	c3                   	ret    

c001c115 <clearInternalKeybuffer(VgaText*)>:
c001c115:	55                   	push   ebp
c001c116:	89 e5                	mov    ebp,esp
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c11e:	05 02 01 00 00       	add    eax,0x102
c001c123:	83 ec 0c             	sub    esp,0xc
c001c126:	50                   	push   eax
c001c127:	e8 54 44 fe ff       	call   c0000580 <strlen>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c132:	81 c2 02 01 00 00    	add    edx,0x102
c001c138:	83 ec 04             	sub    esp,0x4
c001c13b:	50                   	push   eax
c001c13c:	6a 00                	push   0x0
c001c13e:	52                   	push   edx
c001c13f:	e8 ac 43 fe ff       	call   c00004f0 <memset>
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	90                   	nop
c001c148:	c9                   	leave  
c001c149:	c3                   	ret    

c001c14a <readKeyboard(VgaText*, char*, unsigned long)>:
c001c14a:	55                   	push   ebp
c001c14b:	89 e5                	mov    ebp,esp
c001c14d:	83 ec 18             	sub    esp,0x18
c001c150:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c155:	85 c0                	test   eax,eax
c001c157:	74 2a                	je     c001c183 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c159:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c15f:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c165:	83 ec 04             	sub    esp,0x4
c001c168:	68 40 ef 03 c0       	push   0xc003ef40
c001c16d:	83 ec 08             	sub    esp,0x8
c001c170:	89 e0                	mov    eax,esp
c001c172:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c175:	89 08                	mov    DWORD PTR [eax],ecx
c001c177:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c17a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c17e:	ff d2                	call   edx
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	fb                   	sti    
c001c184:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c18b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c18f:	0f 84 0d 01 00 00    	je     c001c2a2 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c198:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c19e:	0f be c0             	movsx  eax,al
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	75 2c                	jne    c001c1d1 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c1a5:	fa                   	cli    
c001c1a6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c1ab:	83 c0 01             	add    eax,0x1
c001c1ae:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c1b3:	e8 54 8a 00 00       	call   c0024c0c <schedule()>
c001c1b8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c1bd:	83 e8 01             	sub    eax,0x1
c001c1c0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c1c5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c1ca:	85 c0                	test   eax,eax
c001c1cc:	75 c7                	jne    c001c195 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c1ce:	fb                   	sti    
c001c1cf:	eb c4                	jmp    c001c195 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c1d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c1d4:	8d 50 01             	lea    edx,[eax+0x1]
c001c1d7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c1da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c1dd:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c1e3:	88 10                	mov    BYTE PTR [eax],dl
c001c1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c1ee:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c1f1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1f5:	83 f8 03             	cmp    eax,0x3
c001c1f8:	75 1e                	jne    c001c218 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c1fa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c1ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001c201:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c204:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c20a:	83 ec 08             	sub    esp,0x8
c001c20d:	6a 02                	push   0x2
c001c20f:	50                   	push   eax
c001c210:	e8 fa 42 00 00       	call   c002050f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c215:	83 c4 10             	add    esp,0x10
c001c218:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c21c:	83 f8 1c             	cmp    eax,0x1c
c001c21f:	75 1e                	jne    c001c23f <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c221:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c226:	8b 00                	mov    eax,DWORD PTR [eax]
c001c228:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c22b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c231:	83 ec 08             	sub    esp,0x8
c001c234:	6a 09                	push   0x9
c001c236:	50                   	push   eax
c001c237:	e8 d3 42 00 00       	call   c002050f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c242:	05 02 01 00 00       	add    eax,0x102
c001c247:	83 ec 0c             	sub    esp,0xc
c001c24a:	50                   	push   eax
c001c24b:	e8 30 43 fe ff       	call   c0000580 <strlen>
c001c250:	83 c4 10             	add    esp,0x10
c001c253:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c256:	81 c2 02 01 00 00    	add    edx,0x102
c001c25c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c25f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c262:	81 c2 02 01 00 00    	add    edx,0x102
c001c268:	83 ec 04             	sub    esp,0x4
c001c26b:	50                   	push   eax
c001c26c:	51                   	push   ecx
c001c26d:	52                   	push   edx
c001c26e:	e8 5d 41 fe ff       	call   c00003d0 <memmove>
c001c273:	83 c4 10             	add    esp,0x10
c001c276:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c27a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c27e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c282:	83 f8 0a             	cmp    eax,0xa
c001c285:	74 16                	je     c001c29d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c287:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c28b:	83 f8 03             	cmp    eax,0x3
c001c28e:	74 0d                	je     c001c29d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c290:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c294:	83 f8 1c             	cmp    eax,0x1c
c001c297:	0f 85 ee fe ff ff    	jne    c001c18b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c29d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2a0:	eb 03                	jmp    c001c2a5 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c2a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2a5:	c9                   	leave  
c001c2a6:	c3                   	ret    
c001c2a7:	90                   	nop

c001c2a8 <Keyboard::Keyboard(char const*)>:
c001c2a8:	83 ec 0c             	sub    esp,0xc
c001c2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2af:	83 ec 08             	sub    esp,0x8
c001c2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2b6:	50                   	push   eax
c001c2b7:	e8 02 f1 ff ff       	call   c001b3be <Device::Device(char const*)>
c001c2bc:	83 c4 10             	add    esp,0x10
c001c2bf:	ba 28 1d 03 c0       	mov    edx,0xc0031d28
c001c2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c8:	89 10                	mov    DWORD PTR [eax],edx
c001c2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ce:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c2d8:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c2df:	90                   	nop
c001c2e0:	83 c4 0c             	add    esp,0xc
c001c2e3:	c3                   	ret    

c001c2e4 <Keyboard::~Keyboard()>:
c001c2e4:	83 ec 0c             	sub    esp,0xc
c001c2e7:	ba 28 1d 03 c0       	mov    edx,0xc0031d28
c001c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f0:	89 10                	mov    DWORD PTR [eax],edx
c001c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	50                   	push   eax
c001c2fa:	e8 5f ee ff ff       	call   c001b15e <Device::~Device()>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	90                   	nop
c001c303:	83 c4 0c             	add    esp,0xc
c001c306:	c3                   	ret    
c001c307:	90                   	nop

c001c308 <Keyboard::~Keyboard()>:
c001c308:	83 ec 0c             	sub    esp,0xc
c001c30b:	83 ec 0c             	sub    esp,0xc
c001c30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c312:	e8 cd ff ff ff       	call   c001c2e4 <Keyboard::~Keyboard()>
c001c317:	83 c4 10             	add    esp,0x10
c001c31a:	83 ec 08             	sub    esp,0x8
c001c31d:	68 5c 01 00 00       	push   0x15c
c001c322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c326:	e8 9d cd ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001c32b:	83 c4 10             	add    esp,0x10
c001c32e:	83 c4 0c             	add    esp,0xc
c001c331:	c3                   	ret    

c001c332 <LogicalDisk::close(int, int, void*)>:
c001c332:	83 c8 ff             	or     eax,0xffffffff
c001c335:	c3                   	ret    

c001c336 <LogicalDisk::~LogicalDisk()>:
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	ba a0 1d 03 c0       	mov    edx,0xc0031da0
c001c33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c342:	89 10                	mov    DWORD PTR [eax],edx
c001c344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	50                   	push   eax
c001c34c:	e8 0d ee ff ff       	call   c001b15e <Device::~Device()>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	90                   	nop
c001c355:	83 c4 0c             	add    esp,0xc
c001c358:	c3                   	ret    
c001c359:	90                   	nop

c001c35a <LogicalDisk::~LogicalDisk()>:
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	83 ec 0c             	sub    esp,0xc
c001c360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c364:	e8 cd ff ff ff       	call   c001c336 <LogicalDisk::~LogicalDisk()>
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	83 ec 08             	sub    esp,0x8
c001c36f:	68 78 01 00 00       	push   0x178
c001c374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c378:	e8 4b cd ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	83 c4 0c             	add    esp,0xc
c001c383:	c3                   	ret    

c001c384 <LogicalDisk::open(int, int, void*)>:
c001c384:	83 ec 18             	sub    esp,0x18
c001c387:	68 54 1d 03 c0       	push   0xc0031d54
c001c38c:	e8 e2 3c 00 00       	call   c0020073 <KePanic(char const*)>
c001c391:	83 c8 ff             	or     eax,0xffffffff
c001c394:	83 c4 1c             	add    esp,0x1c
c001c397:	c3                   	ret    

c001c398 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c398:	53                   	push   ebx
c001c399:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3a5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c3ab:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c3b1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c3b7:	77 10                	ja     c001c3c9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c3b9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c3bf:	89 d3                	mov    ebx,edx
c001c3c1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c3c7:	72 05                	jb     c001c3ce <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c3c9:	83 c8 ff             	or     eax,0xffffffff
c001c3cc:	89 c2                	mov    edx,eax
c001c3ce:	5b                   	pop    ebx
c001c3cf:	c3                   	ret    

c001c3d0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c3d0:	56                   	push   esi
c001c3d1:	83 c8 ff             	or     eax,0xffffffff
c001c3d4:	53                   	push   ebx
c001c3d5:	89 c2                	mov    edx,eax
c001c3d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c3db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c3df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c3e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c3e9:	77 27                	ja     c001c412 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c3eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c3f1:	89 d8                	mov    eax,ebx
c001c3f3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c3f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3fe:	89 c2                	mov    edx,eax
c001c400:	73 10                	jae    c001c412 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c402:	89 c8                	mov    eax,ecx
c001c404:	89 da                	mov    edx,ebx
c001c406:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c40c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c412:	5b                   	pop    ebx
c001c413:	5e                   	pop    esi
c001c414:	c3                   	ret    
c001c415:	90                   	nop

c001c416 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c416:	83 ec 1c             	sub    esp,0x1c
c001c419:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c41d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c429:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c42d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c430:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c43c:	83 ec 08             	sub    esp,0x8
c001c43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c443:	50                   	push   eax
c001c444:	e8 75 ef ff ff       	call   c001b3be <Device::Device(char const*)>
c001c449:	83 c4 10             	add    esp,0x10
c001c44c:	ba a0 1d 03 c0       	mov    edx,0xc0031da0
c001c451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c455:	89 10                	mov    DWORD PTR [eax],edx
c001c457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c45b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c466:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c471:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c486:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c48a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c48e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c492:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c498:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c49e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c4a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4a9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c4af:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4bd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c4d1:	90                   	nop
c001c4d2:	83 c4 1c             	add    esp,0x1c
c001c4d5:	c3                   	ret    

c001c4d6 <LogicalDisk::assignDriveLetter()>:
c001c4d6:	55                   	push   ebp
c001c4d7:	57                   	push   edi
c001c4d8:	56                   	push   esi
c001c4d9:	53                   	push   ebx
c001c4da:	83 ec 14             	sub    esp,0x14
c001c4dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c4e1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c4e7:	b0 41                	mov    al,0x41
c001c4e9:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c4ef:	84 d2                	test   dl,dl
c001c4f1:	75 02                	jne    c001c4f5 <LogicalDisk::assignDriveLetter()+0x1f>
c001c4f3:	b0 43                	mov    al,0x43
c001c4f5:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c4fb:	0f b6 ca             	movzx  ecx,dl
c001c4fe:	0f be e8             	movsx  ebp,al
c001c501:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c505:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c509:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c50f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c513:	3c 43                	cmp    al,0x43
c001c515:	75 10                	jne    c001c527 <LogicalDisk::assignDriveLetter()+0x51>
c001c517:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c51e:	75 5a                	jne    c001c57a <LogicalDisk::assignDriveLetter()+0xa4>
c001c520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c525:	75 53                	jne    c001c57a <LogicalDisk::assignDriveLetter()+0xa4>
c001c527:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c52a:	ba 01 00 00 00       	mov    edx,0x1
c001c52f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c532:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c535:	d3 e2                	shl    edx,cl
c001c537:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c53b:	89 d7                	mov    edi,edx
c001c53d:	89 d6                	mov    esi,edx
c001c53f:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c543:	c1 ff 1f             	sar    edi,0x1f
c001c546:	21 f9                	and    ecx,edi
c001c548:	09 d1                	or     ecx,edx
c001c54a:	75 2e                	jne    c001c57a <LogicalDisk::assignDriveLetter()+0xa4>
c001c54c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c550:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c554:	09 f2                	or     edx,esi
c001c556:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c559:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c55f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c563:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c569:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c570:	09 fa                	or     edx,edi
c001c572:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c578:	eb 0d                	jmp    c001c587 <LogicalDisk::assignDriveLetter()+0xb1>
c001c57a:	8d 50 01             	lea    edx,[eax+0x1]
c001c57d:	45                   	inc    ebp
c001c57e:	80 fa 5b             	cmp    dl,0x5b
c001c581:	88 d0                	mov    al,dl
c001c583:	75 8e                	jne    c001c513 <LogicalDisk::assignDriveLetter()+0x3d>
c001c585:	31 c0                	xor    eax,eax
c001c587:	83 c4 14             	add    esp,0x14
c001c58a:	5b                   	pop    ebx
c001c58b:	5e                   	pop    esi
c001c58c:	5f                   	pop    edi
c001c58d:	5d                   	pop    ebp
c001c58e:	c3                   	ret    
c001c58f:	90                   	nop

c001c590 <LogicalDisk::mount()>:
c001c590:	56                   	push   esi
c001c591:	53                   	push   ebx
c001c592:	53                   	push   ebx
c001c593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c597:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c59d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c5a7:	85 db                	test   ebx,ebx
c001c5a9:	74 27                	je     c001c5d2 <LogicalDisk::mount()+0x42>
c001c5ab:	51                   	push   ecx
c001c5ac:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c5b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5b5:	83 e8 41             	sub    eax,0x41
c001c5b8:	50                   	push   eax
c001c5b9:	56                   	push   esi
c001c5ba:	53                   	push   ebx
c001c5bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c5be:	83 c4 10             	add    esp,0x10
c001c5c1:	84 c0                	test   al,al
c001c5c3:	74 08                	je     c001c5cd <LogicalDisk::mount()+0x3d>
c001c5c5:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c5cb:	eb 07                	jmp    c001c5d4 <LogicalDisk::mount()+0x44>
c001c5cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c5d0:	eb d5                	jmp    c001c5a7 <LogicalDisk::mount()+0x17>
c001c5d2:	31 c0                	xor    eax,eax
c001c5d4:	5a                   	pop    edx
c001c5d5:	5b                   	pop    ebx
c001c5d6:	5e                   	pop    esi
c001c5d7:	c3                   	ret    

c001c5d8 <LogicalDisk::unmount()>:
c001c5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5dc:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c5e6:	c3                   	ret    
c001c5e7:	90                   	nop

c001c5e8 <LogicalDisk::eject()>:
c001c5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c5f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5f8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c5fb:	90                   	nop

c001c5fc <LogicalDisk::unassignDriveLetter()>:
c001c5fc:	57                   	push   edi
c001c5fd:	56                   	push   esi
c001c5fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c602:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c609:	85 c9                	test   ecx,ecx
c001c60b:	75 0f                	jne    c001c61c <LogicalDisk::unassignDriveLetter()+0x20>
c001c60d:	c7 44 24 0c 78 1d 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031d78
c001c615:	5e                   	pop    esi
c001c616:	5f                   	pop    edi
c001c617:	e9 57 3a 00 00       	jmp    c0020073 <KePanic(char const*)>
c001c61c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c623:	83 e9 41             	sub    ecx,0x41
c001c626:	b8 01 00 00 00       	mov    eax,0x1
c001c62b:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c636:	d3 e0                	shl    eax,cl
c001c638:	89 c7                	mov    edi,eax
c001c63a:	f7 d0                	not    eax
c001c63c:	c1 ff 1f             	sar    edi,0x1f
c001c63f:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c645:	89 fe                	mov    esi,edi
c001c647:	f7 d6                	not    esi
c001c649:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c64f:	5e                   	pop    esi
c001c650:	5f                   	pop    edi
c001c651:	c3                   	ret    

c001c652 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c652:	57                   	push   edi
c001c653:	56                   	push   esi
c001c654:	53                   	push   ebx
c001c655:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c659:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c65d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c665:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c66b:	77 41                	ja     c001c6ae <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c66d:	99                   	cdq    
c001c66e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c674:	01 c8                	add    eax,ecx
c001c676:	11 da                	adc    edx,ebx
c001c678:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c67e:	19 d7                	sbb    edi,edx
c001c680:	72 33                	jb     c001c6b5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c682:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c688:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c68e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c692:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c696:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c69c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6a6:	5b                   	pop    ebx
c001c6a7:	5e                   	pop    esi
c001c6a8:	5f                   	pop    edi
c001c6a9:	e9 c6 0a 00 00       	jmp    c001d174 <VCache::read(unsigned long long, int, void*)>
c001c6ae:	b8 05 00 00 00       	mov    eax,0x5
c001c6b3:	eb 05                	jmp    c001c6ba <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c6b5:	b8 07 00 00 00       	mov    eax,0x7
c001c6ba:	5b                   	pop    ebx
c001c6bb:	5e                   	pop    esi
c001c6bc:	5f                   	pop    edi
c001c6bd:	c3                   	ret    

c001c6be <LogicalDisk::write(unsigned long long, int, void*)>:
c001c6be:	57                   	push   edi
c001c6bf:	56                   	push   esi
c001c6c0:	53                   	push   ebx
c001c6c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6d7:	77 41                	ja     c001c71a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c6d9:	99                   	cdq    
c001c6da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6e0:	01 c8                	add    eax,ecx
c001c6e2:	11 da                	adc    edx,ebx
c001c6e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6ea:	19 d7                	sbb    edi,edx
c001c6ec:	72 33                	jb     c001c721 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c6ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c702:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c708:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c712:	5b                   	pop    ebx
c001c713:	5e                   	pop    esi
c001c714:	5f                   	pop    edi
c001c715:	e9 6a 09 00 00       	jmp    c001d084 <VCache::write(unsigned long long, int, void*)>
c001c71a:	b8 05 00 00 00       	mov    eax,0x5
c001c71f:	eb 05                	jmp    c001c726 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c721:	b8 07 00 00 00       	mov    eax,0x7
c001c726:	5b                   	pop    ebx
c001c727:	5e                   	pop    esi
c001c728:	5f                   	pop    edi
c001c729:	c3                   	ret    
c001c72a:	66 90                	xchg   ax,ax

c001c72c <Mouse::Mouse(char const*)>:
c001c72c:	83 ec 0c             	sub    esp,0xc
c001c72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c733:	83 ec 08             	sub    esp,0x8
c001c736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c73a:	50                   	push   eax
c001c73b:	e8 7e ec ff ff       	call   c001b3be <Device::Device(char const*)>
c001c740:	83 c4 10             	add    esp,0x10
c001c743:	ba cc 1d 03 c0       	mov    edx,0xc0031dcc
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	89 10                	mov    DWORD PTR [eax],edx
c001c74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c752:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c75c:	90                   	nop
c001c75d:	83 c4 0c             	add    esp,0xc
c001c760:	c3                   	ret    
c001c761:	90                   	nop
c001c762:	66 90                	xchg   ax,ax

c001c764 <Mouse::~Mouse()>:
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	ba cc 1d 03 c0       	mov    edx,0xc0031dcc
c001c76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c770:	89 10                	mov    DWORD PTR [eax],edx
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	83 ec 0c             	sub    esp,0xc
c001c779:	50                   	push   eax
c001c77a:	e8 df e9 ff ff       	call   c001b15e <Device::~Device()>
c001c77f:	83 c4 10             	add    esp,0x10
c001c782:	90                   	nop
c001c783:	83 c4 0c             	add    esp,0xc
c001c786:	c3                   	ret    
c001c787:	90                   	nop

c001c788 <Mouse::~Mouse()>:
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c792:	e8 cd ff ff ff       	call   c001c764 <Mouse::~Mouse()>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	83 ec 08             	sub    esp,0x8
c001c79d:	68 58 01 00 00       	push   0x158
c001c7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a6:	e8 1d c9 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001c7ab:	83 c4 10             	add    esp,0x10
c001c7ae:	83 c4 0c             	add    esp,0xc
c001c7b1:	c3                   	ret    

c001c7b2 <NIC::getMAC()>:
c001c7b2:	31 c0                	xor    eax,eax
c001c7b4:	31 d2                	xor    edx,edx
c001c7b6:	c3                   	ret    
c001c7b7:	90                   	nop

c001c7b8 <NIC::write(int, unsigned char*, int*)>:
c001c7b8:	b8 01 00 00 00       	mov    eax,0x1
c001c7bd:	c3                   	ret    

c001c7be <NIC::NIC(char const*)>:
c001c7be:	83 ec 0c             	sub    esp,0xc
c001c7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c5:	83 ec 08             	sub    esp,0x8
c001c7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7cc:	50                   	push   eax
c001c7cd:	e8 ec eb ff ff       	call   c001b3be <Device::Device(char const*)>
c001c7d2:	83 c4 10             	add    esp,0x10
c001c7d5:	ba f8 1d 03 c0       	mov    edx,0xc0031df8
c001c7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7de:	89 10                	mov    DWORD PTR [eax],edx
c001c7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c7ee:	90                   	nop
c001c7ef:	83 c4 0c             	add    esp,0xc
c001c7f2:	c3                   	ret    
c001c7f3:	90                   	nop

c001c7f4 <NIC::~NIC()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	ba f8 1d 03 c0       	mov    edx,0xc0031df8
c001c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c800:	89 10                	mov    DWORD PTR [eax],edx
c001c802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	50                   	push   eax
c001c80a:	e8 4f e9 ff ff       	call   c001b15e <Device::~Device()>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	90                   	nop
c001c813:	83 c4 0c             	add    esp,0xc
c001c816:	c3                   	ret    
c001c817:	90                   	nop

c001c818 <NIC::~NIC()>:
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	83 ec 0c             	sub    esp,0xc
c001c81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c822:	e8 cd ff ff ff       	call   c001c7f4 <NIC::~NIC()>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	83 ec 08             	sub    esp,0x8
c001c82d:	68 58 01 00 00       	push   0x158
c001c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c836:	e8 8d c8 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	83 c4 0c             	add    esp,0xc
c001c841:	c3                   	ret    

c001c842 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c842:	55                   	push   ebp
c001c843:	57                   	push   edi
c001c844:	56                   	push   esi
c001c845:	53                   	push   ebx
c001c846:	81 ec 28 01 00 00    	sub    esp,0x128
c001c84c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c853:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001c85a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001c861:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001c868:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c86c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c870:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c877:	e8 3e ec ff ff       	call   c001b4ba <Device::getName()>
c001c87c:	5a                   	pop    edx
c001c87d:	59                   	pop    ecx
c001c87e:	50                   	push   eax
c001c87f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c883:	55                   	push   ebp
c001c884:	e8 c7 3d fe ff       	call   c0000650 <strcpy>
c001c889:	5b                   	pop    ebx
c001c88a:	58                   	pop    eax
c001c88b:	68 24 1e 03 c0       	push   0xc0031e24
c001c890:	55                   	push   ebp
c001c891:	e8 da 3f fe ff       	call   c0000870 <strcat>
c001c896:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c89d:	e8 ed 9a ff ff       	call   c001638f <malloc>
c001c8a2:	83 c4 0c             	add    esp,0xc
c001c8a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8ad:	89 c3                	mov    ebx,eax
c001c8af:	57                   	push   edi
c001c8b0:	56                   	push   esi
c001c8b1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c8b8:	55                   	push   ebp
c001c8b9:	50                   	push   eax
c001c8ba:	e8 57 fb ff ff       	call   c001c416 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c8bf:	83 c4 14             	add    esp,0x14
c001c8c2:	53                   	push   ebx
c001c8c3:	e8 0e fc ff ff       	call   c001c4d6 <LogicalDisk::assignDriveLetter()>
c001c8c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8cb:	e8 c0 fc ff ff       	call   c001c590 <LogicalDisk::mount()>
c001c8d0:	58                   	pop    eax
c001c8d1:	5a                   	pop    edx
c001c8d2:	53                   	push   ebx
c001c8d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8da:	e8 7d e9 ff ff       	call   c001b25c <Device::addChild(Device*)>
c001c8df:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8e5:	5b                   	pop    ebx
c001c8e6:	5e                   	pop    esi
c001c8e7:	5f                   	pop    edi
c001c8e8:	5d                   	pop    ebp
c001c8e9:	c3                   	ret    

c001c8ea <createPartitionsForDisk(PhysicalDisk*)>:
c001c8ea:	55                   	push   ebp
c001c8eb:	57                   	push   edi
c001c8ec:	56                   	push   esi
c001c8ed:	53                   	push   ebx
c001c8ee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c8f4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c8fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c901:	3d 00 02 00 00       	cmp    eax,0x200
c001c906:	74 27                	je     c001c92f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c908:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c90e:	83 ec 10             	sub    esp,0x10
c001c911:	99                   	cdq    
c001c912:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c918:	52                   	push   edx
c001c919:	50                   	push   eax
c001c91a:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c91e:	c1 e6 0a             	shl    esi,0xa
c001c921:	89 fd                	mov    ebp,edi
c001c923:	55                   	push   ebp
c001c924:	56                   	push   esi
c001c925:	e8 d6 19 01 00       	call   c002e300 <__udivdi3>
c001c92a:	e9 b9 00 00 00       	jmp    c001c9e8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c92f:	83 ec 0c             	sub    esp,0xc
c001c932:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c934:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c938:	56                   	push   esi
c001c939:	6a 01                	push   0x1
c001c93b:	6a 00                	push   0x0
c001c93d:	6a 00                	push   0x0
c001c93f:	53                   	push   ebx
c001c940:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c943:	83 c4 20             	add    esp,0x20
c001c946:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c94e:	75 0a                	jne    c001c95a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c950:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c958:	74 2c                	je     c001c986 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c95a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c960:	83 ec 10             	sub    esp,0x10
c001c963:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c969:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c96f:	89 f7                	mov    edi,esi
c001c971:	c1 ff 1f             	sar    edi,0x1f
c001c974:	57                   	push   edi
c001c975:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c979:	56                   	push   esi
c001c97a:	c1 e0 0a             	shl    eax,0xa
c001c97d:	52                   	push   edx
c001c97e:	50                   	push   eax
c001c97f:	e8 7c 19 01 00       	call   c002e300 <__udivdi3>
c001c984:	eb 62                	jmp    c001c9e8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c986:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c98d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c994:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c99b:	89 cf                	mov    edi,ecx
c001c99d:	83 e2 7f             	and    edx,0x7f
c001c9a0:	83 e7 7f             	and    edi,0x7f
c001c9a3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c9a6:	83 e0 7f             	and    eax,0x7f
c001c9a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c001c9ac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001c9b3:	83 e0 7f             	and    eax,0x7f
c001c9b6:	01 d0                	add    eax,edx
c001c9b8:	84 c0                	test   al,al
c001c9ba:	89 c5                	mov    ebp,eax
c001c9bc:	74 41                	je     c001c9ff <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001c9be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9c4:	83 ec 10             	sub    esp,0x10
c001c9c7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9cd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9d3:	89 f7                	mov    edi,esi
c001c9d5:	c1 ff 1f             	sar    edi,0x1f
c001c9d8:	57                   	push   edi
c001c9d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9dd:	56                   	push   esi
c001c9de:	c1 e0 0a             	shl    eax,0xa
c001c9e1:	52                   	push   edx
c001c9e2:	50                   	push   eax
c001c9e3:	e8 18 19 01 00       	call   c002e300 <__udivdi3>
c001c9e8:	83 c4 14             	add    esp,0x14
c001c9eb:	52                   	push   edx
c001c9ec:	50                   	push   eax
c001c9ed:	6a 00                	push   0x0
c001c9ef:	6a 00                	push   0x0
c001c9f1:	53                   	push   ebx
c001c9f2:	e8 4b fe ff ff       	call   c001c842 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9f7:	83 c4 20             	add    esp,0x20
c001c9fa:	e9 73 01 00 00       	jmp    c001cb72 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001c9ff:	89 f0                	mov    eax,esi
c001ca01:	31 c9                	xor    ecx,ecx
c001ca03:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca0a:	75 02                	jne    c001ca0e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca0c:	89 cd                	mov    ebp,ecx
c001ca0e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ca16:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca1d:	83 c0 10             	add    eax,0x10
c001ca20:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ca28:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001ca2f:	c1 e2 08             	shl    edx,0x8
c001ca32:	c1 e6 10             	shl    esi,0x10
c001ca35:	09 f2                	or     edx,esi
c001ca37:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001ca3e:	09 f2                	or     edx,esi
c001ca40:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001ca47:	c1 e6 18             	shl    esi,0x18
c001ca4a:	09 f2                	or     edx,esi
c001ca4c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ca53:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ca57:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ca5e:	c1 e6 10             	shl    esi,0x10
c001ca61:	c1 e2 08             	shl    edx,0x8
c001ca64:	09 f2                	or     edx,esi
c001ca66:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ca6d:	09 f2                	or     edx,esi
c001ca6f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ca76:	c1 e6 18             	shl    esi,0x18
c001ca79:	09 f2                	or     edx,esi
c001ca7b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ca7f:	41                   	inc    ecx
c001ca80:	83 f9 04             	cmp    ecx,0x4
c001ca83:	0f 85 7a ff ff ff    	jne    c001ca03 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ca89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8d:	83 f0 01             	xor    eax,0x1
c001ca90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ca94:	75 4f                	jne    c001cae5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca9a:	83 f0 01             	xor    eax,0x1
c001ca9d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001caa1:	75 42                	jne    c001cae5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001caa3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001caa9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cab1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cab7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cabf:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cac5:	89 f7                	mov    edi,esi
c001cac7:	c1 ff 1f             	sar    edi,0x1f
c001caca:	57                   	push   edi
c001cacb:	56                   	push   esi
c001cacc:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cad0:	52                   	push   edx
c001cad1:	c1 e0 0a             	shl    eax,0xa
c001cad4:	50                   	push   eax
c001cad5:	e8 26 18 01 00       	call   c002e300 <__udivdi3>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cae1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cae5:	89 e8                	mov    eax,ebp
c001cae7:	0f b6 e8             	movzx  ebp,al
c001caea:	85 ed                	test   ebp,ebp
c001caec:	74 50                	je     c001cb3e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001caee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001caf2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001caf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cafa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cafe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb0a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb1e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb22:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb26:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb2a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb2e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cb32:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cb36:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cb3a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cb3e:	31 ed                	xor    ebp,ebp
c001cb40:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb44:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb48:	89 f8                	mov    eax,edi
c001cb4a:	09 f0                	or     eax,esi
c001cb4c:	74 1e                	je     c001cb6c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb4e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb52:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb56:	89 d1                	mov    ecx,edx
c001cb58:	09 c1                	or     ecx,eax
c001cb5a:	74 10                	je     c001cb6c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb5c:	83 ec 0c             	sub    esp,0xc
c001cb5f:	57                   	push   edi
c001cb60:	56                   	push   esi
c001cb61:	52                   	push   edx
c001cb62:	50                   	push   eax
c001cb63:	53                   	push   ebx
c001cb64:	e8 d9 fc ff ff       	call   c001c842 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb69:	83 c4 20             	add    esp,0x20
c001cb6c:	45                   	inc    ebp
c001cb6d:	83 fd 04             	cmp    ebp,0x4
c001cb70:	75 ce                	jne    c001cb40 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cb72:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cb78:	5b                   	pop    ebx
c001cb79:	5e                   	pop    esi
c001cb7a:	5f                   	pop    edi
c001cb7b:	5d                   	pop    ebp
c001cb7c:	c3                   	ret    
c001cb7d:	66 90                	xchg   ax,ax
c001cb7f:	90                   	nop

c001cb80 <Serial::Serial(char const*)>:
c001cb80:	83 ec 0c             	sub    esp,0xc
c001cb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb87:	83 ec 08             	sub    esp,0x8
c001cb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb8e:	50                   	push   eax
c001cb8f:	e8 2a e8 ff ff       	call   c001b3be <Device::Device(char const*)>
c001cb94:	83 c4 10             	add    esp,0x10
c001cb97:	ba 38 1e 03 c0       	mov    edx,0xc0031e38
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	89 10                	mov    DWORD PTR [eax],edx
c001cba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cbb0:	90                   	nop
c001cbb1:	83 c4 0c             	add    esp,0xc
c001cbb4:	c3                   	ret    
c001cbb5:	90                   	nop
c001cbb6:	66 90                	xchg   ax,ax

c001cbb8 <Serial::~Serial()>:
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	ba 38 1e 03 c0       	mov    edx,0xc0031e38
c001cbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc4:	89 10                	mov    DWORD PTR [eax],edx
c001cbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbca:	83 ec 0c             	sub    esp,0xc
c001cbcd:	50                   	push   eax
c001cbce:	e8 8b e5 ff ff       	call   c001b15e <Device::~Device()>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	90                   	nop
c001cbd7:	83 c4 0c             	add    esp,0xc
c001cbda:	c3                   	ret    
c001cbdb:	90                   	nop

c001cbdc <Serial::~Serial()>:
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 cd ff ff ff       	call   c001cbb8 <Serial::~Serial()>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 ec 08             	sub    esp,0x8
c001cbf1:	68 58 01 00 00       	push   0x158
c001cbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfa:	e8 c9 c4 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	83 c4 0c             	add    esp,0xc
c001cc05:	c3                   	ret    
c001cc06:	66 90                	xchg   ax,ax

c001cc08 <Timer::Timer(char const*)>:
c001cc08:	83 ec 0c             	sub    esp,0xc
c001cc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0f:	83 ec 08             	sub    esp,0x8
c001cc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc16:	50                   	push   eax
c001cc17:	e8 a2 e7 ff ff       	call   c001b3be <Device::Device(char const*)>
c001cc1c:	83 c4 10             	add    esp,0x10
c001cc1f:	ba 7c 1e 03 c0       	mov    edx,0xc0031e7c
c001cc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc28:	89 10                	mov    DWORD PTR [eax],edx
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cc38:	90                   	nop
c001cc39:	83 c4 0c             	add    esp,0xc
c001cc3c:	c3                   	ret    
c001cc3d:	90                   	nop
c001cc3e:	66 90                	xchg   ax,ax

c001cc40 <Timer::~Timer()>:
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	ba 7c 1e 03 c0       	mov    edx,0xc0031e7c
c001cc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4c:	89 10                	mov    DWORD PTR [eax],edx
c001cc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	50                   	push   eax
c001cc56:	e8 03 e5 ff ff       	call   c001b15e <Device::~Device()>
c001cc5b:	83 c4 10             	add    esp,0x10
c001cc5e:	90                   	nop
c001cc5f:	83 c4 0c             	add    esp,0xc
c001cc62:	c3                   	ret    
c001cc63:	90                   	nop

c001cc64 <Timer::~Timer()>:
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6e:	e8 cd ff ff ff       	call   c001cc40 <Timer::~Timer()>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	83 ec 08             	sub    esp,0x8
c001cc79:	68 5c 01 00 00       	push   0x15c
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	e8 41 c4 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001cc87:	83 c4 10             	add    esp,0x10
c001cc8a:	83 c4 0c             	add    esp,0xc
c001cc8d:	c3                   	ret    

c001cc8e <Timer::read()>:
c001cc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc98:	c3                   	ret    

c001cc99 <setupTimer(int)>:
c001cc99:	53                   	push   ebx
c001cc9a:	83 ec 14             	sub    esp,0x14
c001cc9d:	68 5c 01 00 00       	push   0x15c
c001cca2:	e8 e8 96 ff ff       	call   c001638f <malloc>
c001cca7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccaa:	89 c3                	mov    ebx,eax
c001ccac:	e8 d7 0e 01 00       	call   c002db88 <PIT::PIT()>
c001ccb1:	58                   	pop    eax
c001ccb2:	5a                   	pop    edx
c001ccb3:	53                   	push   ebx
c001ccb4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001ccba:	e8 9d e5 ff ff       	call   c001b25c <Device::addChild(Device*)>
c001ccbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccc1:	6a 00                	push   0x0
c001ccc3:	6a 00                	push   0x0
c001ccc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ccc9:	53                   	push   ebx
c001ccca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cccd:	83 c4 28             	add    esp,0x28
c001ccd0:	89 d8                	mov    eax,ebx
c001ccd2:	5b                   	pop    ebx
c001ccd3:	c3                   	ret    

c001ccd4 <timerHandler(unsigned int)>:
c001ccd4:	57                   	push   edi
c001ccd5:	56                   	push   esi
c001ccd6:	53                   	push   ebx
c001ccd7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ccdb:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cce1:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cce8:	0f 84 46 01 00 00    	je     c001ce34 <timerHandler(unsigned int)+0x160>
c001ccee:	fa                   	cli    
c001ccef:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	68 e0 01 04 c0       	push   0xc00401e0
c001ccfd:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd03:	e8 c8 1b 01 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd08:	83 c4 10             	add    esp,0x10
c001cd0b:	84 c0                	test   al,al
c001cd0d:	0f 85 a1 00 00 00    	jne    c001cdb4 <timerHandler(unsigned int)+0xe0>
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	68 e0 01 04 c0       	push   0xc00401e0
c001cd1b:	e8 cc 1b 01 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	89 c6                	mov    esi,eax
c001cd25:	8d 76 00             	lea    esi,[esi+0x0]
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	68 e0 01 04 c0       	push   0xc00401e0
c001cd30:	e8 b7 1b 01 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd35:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cd3c:	89 c3                	mov    ebx,eax
c001cd3e:	e8 b1 1b 01 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cd43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd46:	83 c4 10             	add    esp,0x10
c001cd49:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cd4f:	77 23                	ja     c001cd74 <timerHandler(unsigned int)+0xa0>
c001cd51:	83 ec 0c             	sub    esp,0xc
c001cd54:	53                   	push   ebx
c001cd55:	e8 aa 83 00 00       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c001cd5a:	83 c4 10             	add    esp,0x10
c001cd5d:	39 de                	cmp    esi,ebx
c001cd5f:	75 27                	jne    c001cd88 <timerHandler(unsigned int)+0xb4>
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	68 e0 01 04 c0       	push   0xc00401e0
c001cd69:	e8 7e 1b 01 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd6e:	89 c6                	mov    esi,eax
c001cd70:	eb 12                	jmp    c001cd84 <timerHandler(unsigned int)+0xb0>
c001cd72:	66 90                	xchg   ax,ax
c001cd74:	50                   	push   eax
c001cd75:	50                   	push   eax
c001cd76:	53                   	push   ebx
c001cd77:	68 e0 01 04 c0       	push   0xc00401e0
c001cd7c:	e8 2f 1c 01 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cd81:	8d 76 00             	lea    esi,[esi+0x0]
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	90                   	nop
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	68 e0 01 04 c0       	push   0xc00401e0
c001cd90:	e8 3b 1b 01 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd95:	83 c4 10             	add    esp,0x10
c001cd98:	84 c0                	test   al,al
c001cd9a:	75 18                	jne    c001cdb4 <timerHandler(unsigned int)+0xe0>
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	68 e0 01 04 c0       	push   0xc00401e0
c001cda4:	e8 43 1b 01 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	39 f0                	cmp    eax,esi
c001cdae:	0f 85 74 ff ff ff    	jne    c001cd28 <timerHandler(unsigned int)+0x54>
c001cdb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdb9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001cdbd:	74 3d                	je     c001cdfc <timerHandler(unsigned int)+0x128>
c001cdbf:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cdc6:	74 34                	je     c001cdfc <timerHandler(unsigned int)+0x128>
c001cdc8:	fa                   	cli    
c001cdc9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cdcf:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cdd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdda:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cde2:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001cde5:	77 05                	ja     c001cdec <timerHandler(unsigned int)+0x118>
c001cde7:	e8 20 7e 00 00       	call   c0024c0c <schedule()>
c001cdec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cdf1:	48                   	dec    eax
c001cdf2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cdf7:	75 03                	jne    c001cdfc <timerHandler(unsigned int)+0x128>
c001cdf9:	fb                   	sti    
c001cdfa:	66 90                	xchg   ax,ax
c001cdfc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce01:	48                   	dec    eax
c001ce02:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce07:	75 1b                	jne    c001ce24 <timerHandler(unsigned int)+0x150>
c001ce09:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce10:	74 12                	je     c001ce24 <timerHandler(unsigned int)+0x150>
c001ce12:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce1c:	e8 eb 7d 00 00       	call   c0024c0c <schedule()>
c001ce21:	8d 76 00             	lea    esi,[esi+0x0]
c001ce24:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce29:	48                   	dec    eax
c001ce2a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce2f:	75 03                	jne    c001ce34 <timerHandler(unsigned int)+0x160>
c001ce31:	fb                   	sti    
c001ce32:	66 90                	xchg   ax,ax
c001ce34:	5b                   	pop    ebx
c001ce35:	5e                   	pop    esi
c001ce36:	5f                   	pop    edi
c001ce37:	c3                   	ret    

c001ce38 <VCache::VCache(PhysicalDisk*)>:
c001ce38:	53                   	push   ebx
c001ce39:	83 ec 18             	sub    esp,0x18
c001ce3c:	ba ac 1e 03 c0       	mov    edx,0xc0031eac
c001ce41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce45:	89 10                	mov    DWORD PTR [eax],edx
c001ce47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce4b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001ce52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce56:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001ce5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce61:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ce68:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ce6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce73:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ce7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ce81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce85:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ce8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce90:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001ce94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce98:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001ce9f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceaa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ceae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001ceb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cec9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001ced1:	83 ec 0c             	sub    esp,0xc
c001ced4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ced8:	e8 b2 94 ff ff       	call   c001638f <malloc>
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	89 c3                	mov    ebx,eax
c001cee2:	83 ec 0c             	sub    esp,0xc
c001cee5:	53                   	push   ebx
c001cee6:	e8 79 7a 00 00       	call   c0024964 <Mutex::Mutex()>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cefd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf04:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf0f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf20:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cf26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf30:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cf33:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cf36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cf48:	05 00 02 00 00       	add    eax,0x200
c001cf4d:	c1 e0 03             	shl    eax,0x3
c001cf50:	83 ec 0c             	sub    esp,0xc
c001cf53:	50                   	push   eax
c001cf54:	e8 36 94 ff ff       	call   c001638f <malloc>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	89 c2                	mov    edx,eax
c001cf5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cf65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf69:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf74:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf82:	89 d0                	mov    eax,edx
c001cf84:	c1 e0 02             	shl    eax,0x2
c001cf87:	01 d0                	add    eax,edx
c001cf89:	c1 e0 04             	shl    eax,0x4
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	50                   	push   eax
c001cf90:	e8 fa 93 ff ff       	call   c001638f <malloc>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	89 c2                	mov    edx,eax
c001cf9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf9e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cfa1:	90                   	nop
c001cfa2:	83 c4 18             	add    esp,0x18
c001cfa5:	5b                   	pop    ebx
c001cfa6:	c3                   	ret    
c001cfa7:	90                   	nop

c001cfa8 <VCache::invalidateReadBuffer()>:
c001cfa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfac:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001cfb2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cfb6:	c3                   	ret    
c001cfb7:	90                   	nop

c001cfb8 <VCache::writeWriteBuffer()>:
c001cfb8:	53                   	push   ebx
c001cfb9:	83 ec 08             	sub    esp,0x8
c001cfbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cfc0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001cfc4:	74 1e                	je     c001cfe4 <VCache::writeWriteBuffer()+0x2c>
c001cfc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfce:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001cfd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cfd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001cfd7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001cfda:	50                   	push   eax
c001cfdb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001cfde:	83 c4 20             	add    esp,0x20
c001cfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfe4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001cfeb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001cff2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001cff6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001cffd:	83 c4 08             	add    esp,0x8
c001d000:	5b                   	pop    ebx
c001d001:	c3                   	ret    
c001d002:	66 90                	xchg   ax,ax

c001d004 <VCache::~VCache()>:
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	ba ac 1e 03 c0       	mov    edx,0xc0031eac
c001d00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d010:	89 10                	mov    DWORD PTR [eax],edx
c001d012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d016:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d019:	0f b6 c0             	movzx  eax,al
c001d01c:	85 c0                	test   eax,eax
c001d01e:	74 10                	je     c001d030 <VCache::~VCache()+0x2c>
c001d020:	83 ec 0c             	sub    esp,0xc
c001d023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d027:	e8 8c ff ff ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	90                   	nop
c001d030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d034:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d037:	83 ec 0c             	sub    esp,0xc
c001d03a:	50                   	push   eax
c001d03b:	e8 5f 93 ff ff       	call   c001639f <free>
c001d040:	83 c4 10             	add    esp,0x10
c001d043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d047:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d04a:	83 ec 0c             	sub    esp,0xc
c001d04d:	50                   	push   eax
c001d04e:	e8 4c 93 ff ff       	call   c001639f <free>
c001d053:	83 c4 10             	add    esp,0x10
c001d056:	90                   	nop
c001d057:	83 c4 0c             	add    esp,0xc
c001d05a:	c3                   	ret    
c001d05b:	90                   	nop

c001d05c <VCache::~VCache()>:
c001d05c:	83 ec 0c             	sub    esp,0xc
c001d05f:	83 ec 0c             	sub    esp,0xc
c001d062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d066:	e8 99 ff ff ff       	call   c001d004 <VCache::~VCache()>
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	83 ec 08             	sub    esp,0x8
c001d071:	6a 44                	push   0x44
c001d073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d077:	e8 4c c0 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	83 c4 0c             	add    esp,0xc
c001d082:	c3                   	ret    
c001d083:	90                   	nop

c001d084 <VCache::write(unsigned long long, int, void*)>:
c001d084:	55                   	push   ebp
c001d085:	57                   	push   edi
c001d086:	56                   	push   esi
c001d087:	53                   	push   ebx
c001d088:	83 ec 1c             	sub    esp,0x1c
c001d08b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d08f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d093:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d097:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d09b:	e8 d8 78 00 00       	call   c0024978 <KeDisablePreemption()>
c001d0a0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d0a4:	74 0e                	je     c001d0b4 <VCache::write(unsigned long long, int, void*)+0x30>
c001d0a6:	83 ec 0c             	sub    esp,0xc
c001d0a9:	53                   	push   ebx
c001d0aa:	e8 f9 fe ff ff       	call   c001cfa8 <VCache::invalidateReadBuffer()>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	66 90                	xchg   ax,ax
c001d0b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d0b8:	74 5e                	je     c001d118 <VCache::write(unsigned long long, int, void*)+0x94>
c001d0ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d0bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0c1:	99                   	cdq    
c001d0c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d0c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d0c8:	89 c1                	mov    ecx,eax
c001d0ca:	31 f1                	xor    ecx,esi
c001d0cc:	89 d0                	mov    eax,edx
c001d0ce:	31 f8                	xor    eax,edi
c001d0d0:	09 c1                	or     ecx,eax
c001d0d2:	75 38                	jne    c001d10c <VCache::write(unsigned long long, int, void*)+0x88>
c001d0d4:	83 fd 01             	cmp    ebp,0x1
c001d0d7:	75 33                	jne    c001d10c <VCache::write(unsigned long long, int, void*)+0x88>
c001d0d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d0e0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d0e4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d0ea:	0f af f9             	imul   edi,ecx
c001d0ed:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d0f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d0f5:	40                   	inc    eax
c001d0f6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d0f9:	83 f8 50             	cmp    eax,0x50
c001d0fc:	75 66                	jne    c001d164 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d0fe:	83 ec 0c             	sub    esp,0xc
c001d101:	53                   	push   ebx
c001d102:	e8 b1 fe ff ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c001d107:	83 c4 10             	add    esp,0x10
c001d10a:	eb 58                	jmp    c001d164 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	53                   	push   ebx
c001d110:	e8 a3 fe ff ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	83 fd 4f             	cmp    ebp,0x4f
c001d11b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d11e:	7f 20                	jg     c001d140 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d120:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d123:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d127:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d12a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d12d:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d130:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d134:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d13a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d13c:	eb 26                	jmp    c001d164 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d13e:	66 90                	xchg   ax,ax
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	8b 10                	mov    edx,DWORD PTR [eax]
c001d145:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d149:	55                   	push   ebp
c001d14a:	57                   	push   edi
c001d14b:	56                   	push   esi
c001d14c:	50                   	push   eax
c001d14d:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d150:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d154:	83 c4 20             	add    esp,0x20
c001d157:	e8 44 78 00 00       	call   c00249a0 <KeRestorePreemption()>
c001d15c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d160:	eb 0a                	jmp    c001d16c <VCache::write(unsigned long long, int, void*)+0xe8>
c001d162:	66 90                	xchg   ax,ax
c001d164:	e8 37 78 00 00       	call   c00249a0 <KeRestorePreemption()>
c001d169:	31 c0                	xor    eax,eax
c001d16b:	90                   	nop
c001d16c:	83 c4 1c             	add    esp,0x1c
c001d16f:	5b                   	pop    ebx
c001d170:	5e                   	pop    esi
c001d171:	5f                   	pop    edi
c001d172:	5d                   	pop    ebp
c001d173:	c3                   	ret    

c001d174 <VCache::read(unsigned long long, int, void*)>:
c001d174:	55                   	push   ebp
c001d175:	57                   	push   edi
c001d176:	56                   	push   esi
c001d177:	53                   	push   ebx
c001d178:	83 ec 1c             	sub    esp,0x1c
c001d17b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d17f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d183:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d187:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d18b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d18f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d192:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d196:	e8 dd 77 00 00       	call   c0024978 <KeDisablePreemption()>
c001d19b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d19f:	74 0f                	je     c001d1b0 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	53                   	push   ebx
c001d1a5:	e8 0e fe ff ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d1b0:	83 fe 01             	cmp    esi,0x1
c001d1b3:	0f 85 8b 00 00 00    	jne    c001d244 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d1b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1bc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d1c3:	75 7f                	jne    c001d244 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d1c5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d1c8:	89 d1                	mov    ecx,edx
c001d1ca:	f7 d9                	neg    ecx
c001d1cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d1d0:	89 cf                	mov    edi,ecx
c001d1d2:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d1d5:	c1 ff 1f             	sar    edi,0x1f
c001d1d8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d1dc:	89 ce                	mov    esi,ecx
c001d1de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d1e6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d1ea:	89 cf                	mov    edi,ecx
c001d1ec:	74 32                	je     c001d220 <VCache::read(unsigned long long, int, void*)+0xac>
c001d1ee:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d1f1:	75 2d                	jne    c001d220 <VCache::read(unsigned long long, int, void*)+0xac>
c001d1f3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d1f6:	75 28                	jne    c001d220 <VCache::read(unsigned long long, int, void*)+0xac>
c001d1f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1fb:	89 ef                	mov    edi,ebp
c001d1fd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d203:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d206:	8d 70 ff             	lea    esi,[eax-0x1]
c001d209:	23 34 24             	and    esi,DWORD PTR [esp]
c001d20c:	0f af f1             	imul   esi,ecx
c001d20f:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d212:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d214:	e8 87 77 00 00       	call   c00249a0 <KeRestorePreemption()>
c001d219:	31 c0                	xor    eax,eax
c001d21b:	eb 57                	jmp    c001d274 <VCache::read(unsigned long long, int, void*)+0x100>
c001d21d:	8d 76 00             	lea    esi,[esi+0x0]
c001d220:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d224:	83 ec 0c             	sub    esp,0xc
c001d227:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d22a:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d22d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d22f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d232:	52                   	push   edx
c001d233:	57                   	push   edi
c001d234:	56                   	push   esi
c001d235:	50                   	push   eax
c001d236:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d239:	83 c4 20             	add    esp,0x20
c001d23c:	85 c0                	test   eax,eax
c001d23e:	75 34                	jne    c001d274 <VCache::read(unsigned long long, int, void*)+0x100>
c001d240:	eb b6                	jmp    c001d1f8 <VCache::read(unsigned long long, int, void*)+0x84>
c001d242:	66 90                	xchg   ax,ax
c001d244:	83 ec 0c             	sub    esp,0xc
c001d247:	53                   	push   ebx
c001d248:	e8 5b fd ff ff       	call   c001cfa8 <VCache::invalidateReadBuffer()>
c001d24d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d250:	8b 10                	mov    edx,DWORD PTR [eax]
c001d252:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d255:	56                   	push   esi
c001d256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d25a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d25e:	50                   	push   eax
c001d25f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d262:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d266:	83 c4 20             	add    esp,0x20
c001d269:	e8 32 77 00 00       	call   c00249a0 <KeRestorePreemption()>
c001d26e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d271:	8d 76 00             	lea    esi,[esi+0x0]
c001d274:	83 c4 1c             	add    esp,0x1c
c001d277:	5b                   	pop    ebx
c001d278:	5e                   	pop    esi
c001d279:	5f                   	pop    edi
c001d27a:	5d                   	pop    ebp
c001d27b:	c3                   	ret    

c001d27c <Video::putrect(int, int, int, int, unsigned int)>:
c001d27c:	55                   	push   ebp
c001d27d:	57                   	push   edi
c001d27e:	56                   	push   esi
c001d27f:	53                   	push   ebx
c001d280:	83 ec 1c             	sub    esp,0x1c
c001d283:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d28b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d28f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d293:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d29b:	01 df                	add    edi,ebx
c001d29d:	39 fb                	cmp    ebx,edi
c001d29f:	7d 1f                	jge    c001d2c0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d2a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2a5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d2a9:	7d 12                	jge    c001d2bd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d2ab:	8b 16                	mov    edx,DWORD PTR [esi]
c001d2ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2b1:	53                   	push   ebx
c001d2b2:	55                   	push   ebp
c001d2b3:	45                   	inc    ebp
c001d2b4:	56                   	push   esi
c001d2b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d2b8:	83 c4 10             	add    esp,0x10
c001d2bb:	eb e8                	jmp    c001d2a5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d2bd:	43                   	inc    ebx
c001d2be:	eb dd                	jmp    c001d29d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d2c0:	83 c4 1c             	add    esp,0x1c
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	5d                   	pop    ebp
c001d2c7:	c3                   	ret    

c001d2c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d2c8:	55                   	push   ebp
c001d2c9:	57                   	push   edi
c001d2ca:	31 ff                	xor    edi,edi
c001d2cc:	56                   	push   esi
c001d2cd:	53                   	push   ebx
c001d2ce:	83 ec 1c             	sub    esp,0x1c
c001d2d1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d2d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d2d9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d2e0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d2e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d2e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d2ed:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d2f1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d2f4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d2f8:	01 f9                	add    ecx,edi
c001d2fa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d2fe:	7d 2f                	jge    c001d32f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d300:	31 f6                	xor    esi,esi
c001d302:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d306:	01 f2                	add    edx,esi
c001d308:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d30c:	7d 1a                	jge    c001d328 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d30e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d311:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d314:	46                   	inc    esi
c001d315:	51                   	push   ecx
c001d316:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d31a:	52                   	push   edx
c001d31b:	55                   	push   ebp
c001d31c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d326:	eb da                	jmp    c001d302 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d328:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d32c:	47                   	inc    edi
c001d32d:	eb c5                	jmp    c001d2f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d32f:	83 c4 1c             	add    esp,0x1c
c001d332:	5b                   	pop    ebx
c001d333:	5e                   	pop    esi
c001d334:	5f                   	pop    edi
c001d335:	5d                   	pop    ebp
c001d336:	c3                   	ret    
c001d337:	90                   	nop

c001d338 <Video::blit(unsigned int*, int, int, int, int)>:
c001d338:	55                   	push   ebp
c001d339:	ba 00 00 00 00       	mov    edx,0x0
c001d33e:	57                   	push   edi
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	83 ec 1c             	sub    esp,0x1c
c001d344:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d348:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d34c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d350:	85 c0                	test   eax,eax
c001d352:	0f 49 d0             	cmovns edx,eax
c001d355:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d35c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d360:	89 eb                	mov    ebx,ebp
c001d362:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d366:	01 ea                	add    edx,ebp
c001d368:	39 da                	cmp    edx,ebx
c001d36a:	7e 54                	jle    c001d3c0 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d36c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d372:	7c 4c                	jl     c001d3c0 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d374:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d378:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d37c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d380:	01 c1                	add    ecx,eax
c001d382:	39 f9                	cmp    ecx,edi
c001d384:	7e 2f                	jle    c001d3b5 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d386:	83 c2 04             	add    edx,0x4
c001d389:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d38f:	7c 21                	jl     c001d3b2 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d391:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d395:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d397:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d39a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d39e:	55                   	push   ebp
c001d39f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d3a3:	56                   	push   esi
c001d3a4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d3ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3b2:	47                   	inc    edi
c001d3b3:	eb c7                	jmp    c001d37c <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d3b5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d3b9:	43                   	inc    ebx
c001d3ba:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d3be:	eb a2                	jmp    c001d362 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d3c0:	83 c4 1c             	add    esp,0x1c
c001d3c3:	5b                   	pop    ebx
c001d3c4:	5e                   	pop    esi
c001d3c5:	5f                   	pop    edi
c001d3c6:	5d                   	pop    ebp
c001d3c7:	c3                   	ret    

c001d3c8 <Video::clearScreen(unsigned int)>:
c001d3c8:	57                   	push   edi
c001d3c9:	56                   	push   esi
c001d3ca:	53                   	push   ebx
c001d3cb:	31 db                	xor    ebx,ebx
c001d3cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3d1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3d7:	7e 1f                	jle    c001d3f8 <Video::clearScreen(unsigned int)+0x30>
c001d3d9:	31 ff                	xor    edi,edi
c001d3db:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d3e1:	7e 12                	jle    c001d3f5 <Video::clearScreen(unsigned int)+0x2d>
c001d3e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3e9:	53                   	push   ebx
c001d3ea:	57                   	push   edi
c001d3eb:	47                   	inc    edi
c001d3ec:	56                   	push   esi
c001d3ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	eb e6                	jmp    c001d3db <Video::clearScreen(unsigned int)+0x13>
c001d3f5:	43                   	inc    ebx
c001d3f6:	eb d9                	jmp    c001d3d1 <Video::clearScreen(unsigned int)+0x9>
c001d3f8:	5b                   	pop    ebx
c001d3f9:	5e                   	pop    esi
c001d3fa:	5f                   	pop    edi
c001d3fb:	c3                   	ret    

c001d3fc <Video::putpixel(int, int, unsigned int)>:
c001d3fc:	c7 44 24 04 b4 1e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031eb4
c001d404:	e9 6a 2c 00 00       	jmp    c0020073 <KePanic(char const*)>
c001d409:	90                   	nop

c001d40a <Video::readPixelApprox(int, int)>:
c001d40a:	83 ec 18             	sub    esp,0x18
c001d40d:	68 d5 1e 03 c0       	push   0xc0031ed5
c001d412:	e8 5c 2c 00 00       	call   c0020073 <KePanic(char const*)>
c001d417:	31 c0                	xor    eax,eax
c001d419:	83 c4 1c             	add    esp,0x1c
c001d41c:	c3                   	ret    
c001d41d:	90                   	nop

c001d41e <Video::Video(char const*)>:
c001d41e:	83 ec 0c             	sub    esp,0xc
c001d421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d425:	83 ec 08             	sub    esp,0x8
c001d428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d42c:	50                   	push   eax
c001d42d:	e8 8c df ff ff       	call   c001b3be <Device::Device(char const*)>
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	ba 68 1f 03 c0       	mov    edx,0xc0031f68
c001d43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43e:	89 10                	mov    DWORD PTR [eax],edx
c001d440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d444:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d44e:	90                   	nop
c001d44f:	83 c4 0c             	add    esp,0xc
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <Video::~Video()>:
c001d454:	83 ec 0c             	sub    esp,0xc
c001d457:	ba 68 1f 03 c0       	mov    edx,0xc0031f68
c001d45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d460:	89 10                	mov    DWORD PTR [eax],edx
c001d462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d466:	83 ec 0c             	sub    esp,0xc
c001d469:	50                   	push   eax
c001d46a:	e8 ef dc ff ff       	call   c001b15e <Device::~Device()>
c001d46f:	83 c4 10             	add    esp,0x10
c001d472:	90                   	nop
c001d473:	83 c4 0c             	add    esp,0xc
c001d476:	c3                   	ret    
c001d477:	90                   	nop

c001d478 <Video::~Video()>:
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	83 ec 0c             	sub    esp,0xc
c001d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d482:	e8 cd ff ff ff       	call   c001d454 <Video::~Video()>
c001d487:	83 c4 10             	add    esp,0x10
c001d48a:	83 ec 08             	sub    esp,0x8
c001d48d:	68 64 01 00 00       	push   0x164
c001d492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d496:	e8 2d bc ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	83 c4 0c             	add    esp,0xc
c001d4a1:	c3                   	ret    

c001d4a2 <Video::isMonochrome()>:
c001d4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4a6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d4ac:	c3                   	ret    
c001d4ad:	90                   	nop

c001d4ae <Video::getWidth()>:
c001d4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4b8:	c3                   	ret    
c001d4b9:	90                   	nop

c001d4ba <Video::getHeight()>:
c001d4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d4c4:	c3                   	ret    
c001d4c5:	90                   	nop

c001d4c6 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d4c6:	55                   	push   ebp
c001d4c7:	57                   	push   edi
c001d4c8:	56                   	push   esi
c001d4c9:	53                   	push   ebx
c001d4ca:	83 ec 2c             	sub    esp,0x2c
c001d4cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d4d1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d4d5:	83 f8 01             	cmp    eax,0x1
c001d4d8:	19 c9                	sbb    ecx,ecx
c001d4da:	31 db                	xor    ebx,ebx
c001d4dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d4e0:	89 ce                	mov    esi,ecx
c001d4e2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d4ea:	f7 d6                	not    esi
c001d4ec:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d4f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d4f6:	01 d8                	add    eax,ebx
c001d4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fc:	57                   	push   edi
c001d4fd:	e8 b8 ff ff ff       	call   c001d4ba <Video::getHeight()>
c001d502:	59                   	pop    ecx
c001d503:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d507:	7e 70                	jle    c001d579 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d509:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d50d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d511:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d518:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d51c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d523:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d527:	89 e8                	mov    eax,ebp
c001d529:	83 c0 20             	add    eax,0x20
c001d52c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d530:	57                   	push   edi
c001d531:	e8 78 ff ff ff       	call   c001d4ae <Video::getWidth()>
c001d536:	5a                   	pop    edx
c001d537:	39 c5                	cmp    ebp,eax
c001d539:	7d 34                	jge    c001d56f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d53b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d540:	74 05                	je     c001d547 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d542:	8b 07                	mov    eax,DWORD PTR [edi]
c001d544:	56                   	push   esi
c001d545:	eb 0d                	jmp    c001d554 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d547:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d54c:	74 12                	je     c001d560 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d54e:	8b 07                	mov    eax,DWORD PTR [edi]
c001d550:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d554:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d558:	55                   	push   ebp
c001d559:	57                   	push   edi
c001d55a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d564:	45                   	inc    ebp
c001d565:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d569:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d56d:	75 c1                	jne    c001d530 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d56f:	43                   	inc    ebx
c001d570:	83 fb 20             	cmp    ebx,0x20
c001d573:	0f 85 79 ff ff ff    	jne    c001d4f2 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d579:	83 c4 2c             	add    esp,0x2c
c001d57c:	5b                   	pop    ebx
c001d57d:	5e                   	pop    esi
c001d57e:	5f                   	pop    edi
c001d57f:	5d                   	pop    ebp
c001d580:	c3                   	ret    
c001d581:	90                   	nop

c001d582 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d582:	55                   	push   ebp
c001d583:	57                   	push   edi
c001d584:	56                   	push   esi
c001d585:	53                   	push   ebx
c001d586:	83 ec 38             	sub    esp,0x38
c001d589:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d58d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d591:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d595:	c1 e0 08             	shl    eax,0x8
c001d598:	01 d0                	add    eax,edx
c001d59a:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d59e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d5a2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d5a6:	c1 e0 08             	shl    eax,0x8
c001d5a9:	01 d0                	add    eax,edx
c001d5ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b3:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d5b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d5bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5c0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d5c7:	50                   	push   eax
c001d5c8:	e8 c2 8d ff ff       	call   c001638f <malloc>
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	85 c0                	test   eax,eax
c001d5d2:	89 c5                	mov    ebp,eax
c001d5d4:	75 10                	jne    c001d5e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d5d6:	83 ec 0c             	sub    esp,0xc
c001d5d9:	68 00 1f 03 c0       	push   0xc0031f00
c001d5de:	e8 90 2a 00 00       	call   c0020073 <KePanic(char const*)>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	52                   	push   edx
c001d5e7:	52                   	push   edx
c001d5e8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d5ec:	50                   	push   eax
c001d5ed:	68 10 1f 03 c0       	push   0xc0031f10
c001d5f2:	e8 cf bb ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d5f7:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	b8 12 00 00 00       	mov    eax,0x12
c001d603:	85 d2                	test   edx,edx
c001d605:	89 d1                	mov    ecx,edx
c001d607:	74 11                	je     c001d61a <Video::tgaParse(unsigned char*, int, int*, int*)+0x98>
c001d609:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c001d60d:	0f b7 73 05          	movzx  esi,WORD PTR [ebx+0x5]
c001d611:	c1 f8 03             	sar    eax,0x3
c001d614:	0f af c6             	imul   eax,esi
c001d617:	83 c0 12             	add    eax,0x12
c001d61a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d61f:	74 07                	je     c001d628 <Video::tgaParse(unsigned char*, int, int*, int*)+0xa6>
c001d621:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d626:	75 12                	jne    c001d63a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb8>
c001d628:	83 ec 0c             	sub    esp,0xc
c001d62b:	68 1a 1f 03 c0       	push   0xc0031f1a
c001d630:	e8 91 bb ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d635:	e9 09 02 00 00       	jmp    c001d843 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c1>
c001d63a:	0f b6 73 02          	movzx  esi,BYTE PTR [ebx+0x2]
c001d63e:	83 fe 02             	cmp    esi,0x2
c001d641:	74 0e                	je     c001d651 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001d643:	83 fe 0a             	cmp    esi,0xa
c001d646:	0f 84 97 00 00 00    	je     c001d6e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001d64c:	e9 dd 01 00 00       	jmp    c001d82e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2ac>
c001d651:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d656:	75 0f                	jne    c001d667 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001d658:	84 c9                	test   cl,cl
c001d65a:	75 0b                	jne    c001d667 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001d65c:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c001d65f:	83 ea 18             	sub    edx,0x18
c001d662:	80 e2 f7             	and    dl,0xf7
c001d665:	74 0d                	je     c001d674 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf2>
c001d667:	83 ec 0c             	sub    esp,0xc
c001d66a:	68 2f 1f 03 c0       	push   0xc0031f2f
c001d66f:	e9 c2 01 00 00       	jmp    c001d836 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b4>
c001d674:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d67c:	31 ff                	xor    edi,edi
c001d67e:	89 f9                	mov    ecx,edi
c001d680:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d684:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d68b:	75 0b                	jne    c001d698 <Video::tgaParse(unsigned char*, int, int*, int*)+0x116>
c001d68d:	0f b6 74 03 03       	movzx  esi,BYTE PTR [ebx+eax*1+0x3]
c001d692:	c1 e6 18             	shl    esi,0x18
c001d695:	89 34 24             	mov    DWORD PTR [esp],esi
c001d698:	0f b6 54 03 02       	movzx  edx,BYTE PTR [ebx+eax*1+0x2]
c001d69d:	41                   	inc    ecx
c001d69e:	c1 e2 10             	shl    edx,0x10
c001d6a1:	89 d6                	mov    esi,edx
c001d6a3:	0f b6 54 03 01       	movzx  edx,BYTE PTR [ebx+eax*1+0x1]
c001d6a8:	c1 e2 08             	shl    edx,0x8
c001d6ab:	09 f2                	or     edx,esi
c001d6ad:	0f b6 34 03          	movzx  esi,BYTE PTR [ebx+eax*1]
c001d6b1:	09 f2                	or     edx,esi
c001d6b3:	0b 14 24             	or     edx,DWORD PTR [esp]
c001d6b6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001d6ba:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d6be:	c1 fa 03             	sar    edx,0x3
c001d6c1:	01 d0                	add    eax,edx
c001d6c3:	89 ca                	mov    edx,ecx
c001d6c5:	29 fa                	sub    edx,edi
c001d6c7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001d6cb:	7f b3                	jg     c001d680 <Video::tgaParse(unsigned char*, int, int*, int*)+0xfe>
c001d6cd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d6d1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d6d5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d6d9:	0f 8e 6b 01 00 00    	jle    c001d84a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c8>
c001d6df:	89 cf                	mov    edi,ecx
c001d6e1:	eb 9b                	jmp    c001d67e <Video::tgaParse(unsigned char*, int, int*, int*)+0xfc>
c001d6e3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6e8:	75 0f                	jne    c001d6f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001d6ea:	85 d2                	test   edx,edx
c001d6ec:	75 0b                	jne    c001d6f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001d6ee:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c001d6f1:	83 ea 18             	sub    edx,0x18
c001d6f4:	80 e2 f7             	and    dl,0xf7
c001d6f7:	74 0d                	je     c001d706 <Video::tgaParse(unsigned char*, int, int*, int*)+0x184>
c001d6f9:	83 ec 0c             	sub    esp,0xc
c001d6fc:	68 3d 1f 03 c0       	push   0xc0031f3d
c001d701:	e9 30 01 00 00       	jmp    c001d836 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b4>
c001d706:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d70e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d715:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d719:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c001d71d:	0f 8e 27 01 00 00    	jle    c001d84a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c8>
c001d723:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c001d727:	0f 8d 1d 01 00 00    	jge    c001d84a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c8>
c001d72d:	0f b6 34 03          	movzx  esi,BYTE PTR [ebx+eax*1]
c001d731:	8d 50 01             	lea    edx,[eax+0x1]
c001d734:	89 f1                	mov    ecx,esi
c001d736:	0f b6 c9             	movzx  ecx,cl
c001d739:	83 f9 7f             	cmp    ecx,0x7f
c001d73c:	7e 72                	jle    c001d7b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x22e>
c001d73e:	83 e6 7f             	and    esi,0x7f
c001d741:	8d 7e 01             	lea    edi,[esi+0x1]
c001d744:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001d748:	31 ff                	xor    edi,edi
c001d74a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d74e:	75 08                	jne    c001d758 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d6>
c001d750:	0f b6 7c 03 04       	movzx  edi,BYTE PTR [ebx+eax*1+0x4]
c001d755:	c1 e7 18             	shl    edi,0x18
c001d758:	0f b6 4c 03 03       	movzx  ecx,BYTE PTR [ebx+eax*1+0x3]
c001d75d:	c1 e1 10             	shl    ecx,0x10
c001d760:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d764:	0f b6 4c 03 02       	movzx  ecx,BYTE PTR [ebx+eax*1+0x2]
c001d769:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001d76d:	c1 e1 08             	shl    ecx,0x8
c001d770:	0b 4c 24 18          	or     ecx,DWORD PTR [esp+0x18]
c001d774:	09 c8                	or     eax,ecx
c001d776:	09 f8                	or     eax,edi
c001d778:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d77b:	8d 4c bd 00          	lea    ecx,[ebp+edi*4+0x0]
c001d77f:	01 f7                	add    edi,esi
c001d781:	8d 7c bd 04          	lea    edi,[ebp+edi*4+0x4]
c001d785:	89 01                	mov    DWORD PTR [ecx],eax
c001d787:	83 c1 04             	add    ecx,0x4
c001d78a:	39 cf                	cmp    edi,ecx
c001d78c:	75 f7                	jne    c001d785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x203>
c001d78e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d791:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c001d795:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d799:	89 04 24             	mov    DWORD PTR [esp],eax
c001d79c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d7a0:	01 74 24 0c          	add    DWORD PTR [esp+0xc],esi
c001d7a4:	c1 f8 03             	sar    eax,0x3
c001d7a7:	01 c2                	add    edx,eax
c001d7a9:	89 d0                	mov    eax,edx
c001d7ab:	e9 65 ff ff ff       	jmp    c001d715 <Video::tgaParse(unsigned char*, int, int*, int*)+0x193>
c001d7b0:	8d 41 01             	lea    eax,[ecx+0x1]
c001d7b3:	31 f6                	xor    esi,esi
c001d7b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d7bc:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c001d7c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7c4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d7c8:	c7 44 24 14 00 00 00 ff 	mov    DWORD PTR [esp+0x14],0xff000000
c001d7d0:	75 0c                	jne    c001d7de <Video::tgaParse(unsigned char*, int, int*, int*)+0x25c>
c001d7d2:	0f b6 7c 13 03       	movzx  edi,BYTE PTR [ebx+edx*1+0x3]
c001d7d7:	c1 e7 18             	shl    edi,0x18
c001d7da:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001d7de:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c001d7e3:	c1 e0 10             	shl    eax,0x10
c001d7e6:	89 c7                	mov    edi,eax
c001d7e8:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c001d7ed:	c1 e0 08             	shl    eax,0x8
c001d7f0:	09 f8                	or     eax,edi
c001d7f2:	0f b6 3c 13          	movzx  edi,BYTE PTR [ebx+edx*1]
c001d7f6:	09 f8                	or     eax,edi
c001d7f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d7fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001d800:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c001d803:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d807:	c1 f8 03             	sar    eax,0x3
c001d80a:	01 c2                	add    edx,eax
c001d80c:	39 f1                	cmp    ecx,esi
c001d80e:	8d 46 01             	lea    eax,[esi+0x1]
c001d811:	7e 04                	jle    c001d817 <Video::tgaParse(unsigned char*, int, int*, int*)+0x295>
c001d813:	89 c6                	mov    esi,eax
c001d815:	eb ad                	jmp    c001d7c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x242>
c001d817:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d81a:	8d 44 08 01          	lea    eax,[eax+ecx*1+0x1]
c001d81e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d822:	89 04 24             	mov    DWORD PTR [esp],eax
c001d825:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c001d829:	e9 7b ff ff ff       	jmp    c001d7a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x227>
c001d82e:	50                   	push   eax
c001d82f:	50                   	push   eax
c001d830:	56                   	push   esi
c001d831:	68 4c 1f 03 c0       	push   0xc0031f4c
c001d836:	e8 8b b9 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d83b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d83e:	e8 5c 8b ff ff       	call   c001639f <free>
c001d843:	83 c4 10             	add    esp,0x10
c001d846:	31 ed                	xor    ebp,ebp
c001d848:	eb 14                	jmp    c001d85e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2dc>
c001d84a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d84e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001d852:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d856:	89 30                	mov    DWORD PTR [eax],esi
c001d858:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d85c:	89 18                	mov    DWORD PTR [eax],ebx
c001d85e:	83 c4 2c             	add    esp,0x2c
c001d861:	89 e8                	mov    eax,ebp
c001d863:	5b                   	pop    ebx
c001d864:	5e                   	pop    esi
c001d865:	5f                   	pop    edi
c001d866:	5d                   	pop    ebp
c001d867:	c3                   	ret    

c001d868 <Video::putTGA(int, int, unsigned char*, int)>:
c001d868:	55                   	push   ebp
c001d869:	57                   	push   edi
c001d86a:	56                   	push   esi
c001d86b:	53                   	push   ebx
c001d86c:	83 ec 28             	sub    esp,0x28
c001d86f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d873:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d877:	50                   	push   eax
c001d878:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d87c:	50                   	push   eax
c001d87d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d881:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d885:	55                   	push   ebp
c001d886:	e8 f7 fc ff ff       	call   c001d582 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d88b:	83 c4 20             	add    esp,0x20
c001d88e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d892:	85 c0                	test   eax,eax
c001d894:	74 3b                	je     c001d8d1 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d896:	89 c6                	mov    esi,eax
c001d898:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d89c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d8a0:	39 d8                	cmp    eax,ebx
c001d8a2:	7e 2d                	jle    c001d8d1 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d8a4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d8a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d8ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d8b0:	39 f8                	cmp    eax,edi
c001d8b2:	7e 1a                	jle    c001d8ce <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001d8b4:	83 c6 04             	add    esi,0x4
c001d8b7:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d8ba:	85 c0                	test   eax,eax
c001d8bc:	79 0d                	jns    c001d8cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001d8be:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8c1:	50                   	push   eax
c001d8c2:	53                   	push   ebx
c001d8c3:	57                   	push   edi
c001d8c4:	55                   	push   ebp
c001d8c5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d8c8:	83 c4 10             	add    esp,0x10
c001d8cb:	47                   	inc    edi
c001d8cc:	eb da                	jmp    c001d8a8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d8ce:	43                   	inc    ebx
c001d8cf:	eb c7                	jmp    c001d898 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d8d1:	83 c4 1c             	add    esp,0x1c
c001d8d4:	5b                   	pop    ebx
c001d8d5:	5e                   	pop    esi
c001d8d6:	5f                   	pop    edi
c001d8d7:	5d                   	pop    ebp
c001d8d8:	c3                   	ret    
c001d8d9:	66 90                	xchg   ax,ax
c001d8db:	90                   	nop

c001d8dc <ACPI::close(int, int, void*)>:
c001d8dc:	83 ec 1c             	sub    esp,0x1c
c001d8df:	83 ec 0c             	sub    esp,0xc
c001d8e2:	68 ac 1f 03 c0       	push   0xc0031fac
c001d8e7:	e8 da b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d8ec:	83 c4 10             	add    esp,0x10
c001d8ef:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001d8f7:	74 1b                	je     c001d914 <ACPI::close(int, int, void*)+0x38>
c001d8f9:	83 ec 0c             	sub    esp,0xc
c001d8fc:	68 bb 1f 03 c0       	push   0xc0031fbb
c001d901:	e8 c0 b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	b8 00 00 00 00       	mov    eax,0x0
c001d90e:	e9 01 01 00 00       	jmp    c001da14 <ACPI::close(int, int, void*)+0x138>
c001d913:	90                   	nop
c001d914:	83 ec 0c             	sub    esp,0xc
c001d917:	68 cc 1f 03 c0       	push   0xc0031fcc
c001d91c:	e8 a5 b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d929:	75 45                	jne    c001d970 <ACPI::close(int, int, void*)+0x94>
c001d92b:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d930:	83 ec 08             	sub    esp,0x8
c001d933:	50                   	push   eax
c001d934:	68 db 1f 03 c0       	push   0xc0031fdb
c001d939:	e8 88 b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d946:	85 c0                	test   eax,eax
c001d948:	74 0a                	je     c001d954 <ACPI::close(int, int, void*)+0x78>
c001d94a:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d94f:	ff d0                	call   eax
c001d951:	8d 76 00             	lea    esi,[esi+0x0]
c001d954:	83 ec 0c             	sub    esp,0xc
c001d957:	68 ac 21 03 c0       	push   0xc00321ac
c001d95c:	e8 12 27 00 00       	call   c0020073 <KePanic(char const*)>
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d969:	e9 a6 00 00 00       	jmp    c001da14 <ACPI::close(int, int, void*)+0x138>
c001d96e:	66 90                	xchg   ax,ax
c001d970:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001d975:	0f 85 81 00 00 00    	jne    c001d9fc <ACPI::close(int, int, void*)+0x120>
c001d97b:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d980:	83 ec 08             	sub    esp,0x8
c001d983:	50                   	push   eax
c001d984:	68 f9 1f 03 c0       	push   0xc0031ff9
c001d989:	e8 38 b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d98e:	83 c4 10             	add    esp,0x10
c001d991:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d996:	85 c0                	test   eax,eax
c001d998:	74 0a                	je     c001d9a4 <ACPI::close(int, int, void*)+0xc8>
c001d99a:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d99f:	ff d0                	call   eax
c001d9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d9a4:	83 ec 0c             	sub    esp,0xc
c001d9a7:	68 14 20 03 c0       	push   0xc0032014
c001d9ac:	e8 15 b8 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001d9b1:	83 c4 10             	add    esp,0x10
c001d9b4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001d9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d9bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d9c1:	83 e0 02             	and    eax,0x2
c001d9c4:	74 1e                	je     c001d9e4 <ACPI::close(int, int, void*)+0x108>
c001d9c6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001d9cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9d1:	89 c2                	mov    edx,eax
c001d9d3:	ec                   	in     al,dx
c001d9d4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d9d8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001d9dc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9e0:	eb da                	jmp    c001d9bc <ACPI::close(int, int, void*)+0xe0>
c001d9e2:	66 90                	xchg   ax,ax
c001d9e4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001d9eb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001d9f0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d9f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9f8:	ee                   	out    dx,al
c001d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d9fc:	83 ec 0c             	sub    esp,0xc
c001d9ff:	68 26 20 03 c0       	push   0xc0032026
c001da04:	e8 bd b7 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001da09:	83 c4 10             	add    esp,0x10
c001da0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da11:	8d 76 00             	lea    esi,[esi+0x0]
c001da14:	83 c4 1c             	add    esp,0x1c
c001da17:	c3                   	ret    

c001da18 <findRSDP()>:
c001da18:	83 ec 1c             	sub    esp,0x1c
c001da1b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001da20:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001da26:	83 e0 04             	and    eax,0x4
c001da29:	0f b6 c0             	movzx  eax,al
c001da2c:	85 c0                	test   eax,eax
c001da2e:	75 08                	jne    c001da38 <findRSDP()+0x20>
c001da30:	b8 00 00 00 00       	mov    eax,0x0
c001da35:	eb 75                	jmp    c001daac <findRSDP()+0x94>
c001da37:	90                   	nop
c001da38:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001da3d:	3d ff 07 00 00       	cmp    eax,0x7ff
c001da42:	7f 1c                	jg     c001da60 <findRSDP()+0x48>
c001da44:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001da49:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001da4f:	83 e2 fb             	and    edx,0xfffffffb
c001da52:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001da58:	b8 00 00 00 00       	mov    eax,0x0
c001da5d:	eb 4d                	jmp    c001daac <findRSDP()+0x94>
c001da5f:	90                   	nop
c001da60:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001da68:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001da70:	77 32                	ja     c001daa4 <findRSDP()+0x8c>
c001da72:	83 ec 04             	sub    esp,0x4
c001da75:	6a 08                	push   0x8
c001da77:	68 35 20 03 c0       	push   0xc0032035
c001da7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da80:	e8 fb 28 fe ff       	call   c0000380 <memcmp>
c001da85:	83 c4 10             	add    esp,0x10
c001da88:	85 c0                	test   eax,eax
c001da8a:	0f 94 c0             	sete   al
c001da8d:	0f b6 c0             	movzx  eax,al
c001da90:	85 c0                	test   eax,eax
c001da92:	74 08                	je     c001da9c <findRSDP()+0x84>
c001da94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da98:	eb 12                	jmp    c001daac <findRSDP()+0x94>
c001da9a:	66 90                	xchg   ax,ax
c001da9c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001daa1:	eb c5                	jmp    c001da68 <findRSDP()+0x50>
c001daa3:	90                   	nop
c001daa4:	b8 00 00 00 00       	mov    eax,0x0
c001daa9:	8d 76 00             	lea    esi,[esi+0x0]
c001daac:	83 c4 1c             	add    esp,0x1c
c001daaf:	c3                   	ret    

c001dab0 <loadACPITables(unsigned char*)>:
c001dab0:	57                   	push   edi
c001dab1:	56                   	push   esi
c001dab2:	53                   	push   ebx
c001dab3:	83 ec 60             	sub    esp,0x60
c001dab6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dabb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dac1:	83 e0 04             	and    eax,0x4
c001dac4:	0f b6 c0             	movzx  eax,al
c001dac7:	85 c0                	test   eax,eax
c001dac9:	0f 84 41 02 00 00    	je     c001dd10 <loadACPITables(unsigned char*)+0x260>
c001dacf:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dad4:	0f b6 c0             	movzx  eax,al
c001dad7:	85 c0                	test   eax,eax
c001dad9:	74 79                	je     c001db54 <loadACPITables(unsigned char*)+0xa4>
c001dadb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dadf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dae3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001daea:	83 e8 24             	sub    eax,0x24
c001daed:	c1 e8 03             	shr    eax,0x3
c001daf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001daf4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dafc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db00:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001db04:	0f 8d ba 00 00 00    	jge    c001dbc4 <loadACPITables(unsigned char*)+0x114>
c001db0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db0e:	83 c0 24             	add    eax,0x24
c001db11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001db15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001db19:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001db1d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db21:	c1 e0 03             	shl    eax,0x3
c001db24:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001db28:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001db2c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001db2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001db31:	89 c1                	mov    ecx,eax
c001db33:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001db38:	8d 50 01             	lea    edx,[eax+0x1]
c001db3b:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001db41:	89 ca                	mov    edx,ecx
c001db43:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001db4a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001db4f:	eb ab                	jmp    c001dafc <loadACPITables(unsigned char*)+0x4c>
c001db51:	8d 76 00             	lea    esi,[esi+0x0]
c001db54:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db58:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001db5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001db60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db63:	83 e8 24             	sub    eax,0x24
c001db66:	c1 e8 02             	shr    eax,0x2
c001db69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001db6d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001db75:	8d 76 00             	lea    esi,[esi+0x0]
c001db78:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001db7c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001db80:	7d 42                	jge    c001dbc4 <loadACPITables(unsigned char*)+0x114>
c001db82:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db86:	83 c0 24             	add    eax,0x24
c001db89:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001db8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001db91:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001db95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001db99:	c1 e0 02             	shl    eax,0x2
c001db9c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dba0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dba4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dba6:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dbab:	8d 50 01             	lea    edx,[eax+0x1]
c001dbae:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dbb4:	89 ca                	mov    edx,ecx
c001dbb6:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dbbd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dbc2:	eb b4                	jmp    c001db78 <loadACPITables(unsigned char*)+0xc8>
c001dbc4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dbcc:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dbd1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dbd5:	0f 8d 39 01 00 00    	jge    c001dd14 <loadACPITables(unsigned char*)+0x264>
c001dbdb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dbdf:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dbe6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dbea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dbf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf6:	25 ff 0f 00 00       	and    eax,0xfff
c001dbfb:	89 c6                	mov    esi,eax
c001dbfd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dc03:	83 ec 0c             	sub    esp,0xc
c001dc06:	6a 01                	push   0x1
c001dc08:	e8 a4 a2 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c001dc0d:	83 c4 10             	add    esp,0x10
c001dc10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dc14:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dc1a:	83 ec 0c             	sub    esp,0xc
c001dc1d:	6a 01                	push   0x1
c001dc1f:	6a 01                	push   0x1
c001dc21:	50                   	push   eax
c001dc22:	52                   	push   edx
c001dc23:	53                   	push   ebx
c001dc24:	e8 9b ab ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dc29:	83 c4 20             	add    esp,0x20
c001dc2c:	09 f0                	or     eax,esi
c001dc2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc32:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc36:	c1 e0 03             	shl    eax,0x3
c001dc39:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dc3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc4a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dc52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dc66:	89 c6                	mov    esi,eax
c001dc68:	89 d7                	mov    edi,edx
c001dc6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc6c:	89 c8                	mov    eax,ecx
c001dc6e:	89 fa                	mov    edx,edi
c001dc70:	89 f3                	mov    ebx,esi
c001dc72:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dc76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dc7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dc89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dc8d:	05 00 10 00 00       	add    eax,0x1000
c001dc92:	c1 e8 0c             	shr    eax,0xc
c001dc95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dc99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca5:	25 ff 0f 00 00       	and    eax,0xfff
c001dcaa:	89 c6                	mov    esi,eax
c001dcac:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dcb2:	83 ec 0c             	sub    esp,0xc
c001dcb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dcb9:	e8 f3 a1 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dcc5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dccb:	83 ec 0c             	sub    esp,0xc
c001dcce:	6a 01                	push   0x1
c001dcd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcd4:	50                   	push   eax
c001dcd5:	52                   	push   edx
c001dcd6:	53                   	push   ebx
c001dcd7:	e8 e8 aa ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dcdc:	83 c4 20             	add    esp,0x20
c001dcdf:	09 f0                	or     eax,esi
c001dce1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dce9:	83 ec 0c             	sub    esp,0xc
c001dcec:	50                   	push   eax
c001dced:	e8 d3 a4 ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcfd:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd04:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001dd09:	e9 be fe ff ff       	jmp    c001dbcc <loadACPITables(unsigned char*)+0x11c>
c001dd0e:	66 90                	xchg   ax,ax
c001dd10:	90                   	nop
c001dd11:	8d 76 00             	lea    esi,[esi+0x0]
c001dd14:	83 c4 60             	add    esp,0x60
c001dd17:	5b                   	pop    ebx
c001dd18:	5e                   	pop    esi
c001dd19:	5f                   	pop    edi
c001dd1a:	c3                   	ret    
c001dd1b:	90                   	nop

c001dd1c <findRSDT(unsigned char*)>:
c001dd1c:	57                   	push   edi
c001dd1d:	56                   	push   esi
c001dd1e:	53                   	push   ebx
c001dd1f:	83 ec 50             	sub    esp,0x50
c001dd22:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd27:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd2d:	83 e0 04             	and    eax,0x4
c001dd30:	0f b6 c0             	movzx  eax,al
c001dd33:	85 c0                	test   eax,eax
c001dd35:	75 0d                	jne    c001dd44 <findRSDT(unsigned char*)+0x28>
c001dd37:	b8 00 00 00 00       	mov    eax,0x0
c001dd3c:	e9 2b 01 00 00       	jmp    c001de6c <findRSDT(unsigned char*)+0x150>
c001dd41:	8d 76 00             	lea    esi,[esi+0x0]
c001dd44:	89 e0                	mov    eax,esp
c001dd46:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dd4a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dd4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dd52:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001dd5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dd5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd66:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd6a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dd6e:	89 c6                	mov    esi,eax
c001dd70:	89 d7                	mov    edi,edx
c001dd72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd74:	89 c8                	mov    eax,ecx
c001dd76:	89 fa                	mov    edx,edi
c001dd78:	89 f3                	mov    ebx,esi
c001dd7a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001dd7e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dd82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dd86:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dd8a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001dd8e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001dd96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd9e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001ddaa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ddae:	25 ff 0f 00 00       	and    eax,0xfff
c001ddb3:	89 c6                	mov    esi,eax
c001ddb5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddbb:	83 ec 0c             	sub    esp,0xc
c001ddbe:	6a 02                	push   0x2
c001ddc0:	e8 ec a0 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c001ddc5:	83 c4 10             	add    esp,0x10
c001ddc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ddcc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ddd2:	83 ec 0c             	sub    esp,0xc
c001ddd5:	6a 01                	push   0x1
c001ddd7:	6a 02                	push   0x2
c001ddd9:	50                   	push   eax
c001ddda:	52                   	push   edx
c001dddb:	53                   	push   ebx
c001dddc:	e8 e3 a9 ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dde1:	83 c4 20             	add    esp,0x20
c001dde4:	09 f0                	or     eax,esi
c001dde6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ddea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ddee:	25 ff 0f 00 00       	and    eax,0xfff
c001ddf3:	89 c6                	mov    esi,eax
c001ddf5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddfb:	83 ec 0c             	sub    esp,0xc
c001ddfe:	6a 02                	push   0x2
c001de00:	e8 ac a0 ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de0c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de12:	83 ec 0c             	sub    esp,0xc
c001de15:	6a 01                	push   0x1
c001de17:	6a 02                	push   0x2
c001de19:	50                   	push   eax
c001de1a:	52                   	push   edx
c001de1b:	53                   	push   ebx
c001de1c:	e8 a3 a9 ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de21:	83 c4 20             	add    esp,0x20
c001de24:	09 f0                	or     eax,esi
c001de26:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de2a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001de2f:	85 c0                	test   eax,eax
c001de31:	75 11                	jne    c001de44 <findRSDT(unsigned char*)+0x128>
c001de33:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001de3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de42:	eb 24                	jmp    c001de68 <findRSDT(unsigned char*)+0x14c>
c001de44:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001de49:	83 f8 02             	cmp    eax,0x2
c001de4c:	75 12                	jne    c001de60 <findRSDT(unsigned char*)+0x144>
c001de4e:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001de55:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001de59:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de5d:	eb 09                	jmp    c001de68 <findRSDT(unsigned char*)+0x14c>
c001de5f:	90                   	nop
c001de60:	b8 00 00 00 00       	mov    eax,0x0
c001de65:	eb 05                	jmp    c001de6c <findRSDT(unsigned char*)+0x150>
c001de67:	90                   	nop
c001de68:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de6c:	83 c4 50             	add    esp,0x50
c001de6f:	5b                   	pop    ebx
c001de70:	5e                   	pop    esi
c001de71:	5f                   	pop    edi
c001de72:	c3                   	ret    
c001de73:	90                   	nop

c001de74 <findDataTable(unsigned char*, char*)>:
c001de74:	83 ec 1c             	sub    esp,0x1c
c001de77:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de7c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de82:	83 e0 04             	and    eax,0x4
c001de85:	0f b6 c0             	movzx  eax,al
c001de88:	85 c0                	test   eax,eax
c001de8a:	75 08                	jne    c001de94 <findDataTable(unsigned char*, char*)+0x20>
c001de8c:	b8 00 00 00 00       	mov    eax,0x0
c001de91:	eb 5d                	jmp    c001def0 <findDataTable(unsigned char*, char*)+0x7c>
c001de93:	90                   	nop
c001de94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001de9c:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dea1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dea5:	7d 41                	jge    c001dee8 <findDataTable(unsigned char*, char*)+0x74>
c001dea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001deab:	c1 e0 03             	shl    eax,0x3
c001deae:	05 20 f4 03 c0       	add    eax,0xc003f420
c001deb3:	83 ec 04             	sub    esp,0x4
c001deb6:	6a 04                	push   0x4
c001deb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001debc:	50                   	push   eax
c001debd:	e8 be 24 fe ff       	call   c0000380 <memcmp>
c001dec2:	83 c4 10             	add    esp,0x10
c001dec5:	85 c0                	test   eax,eax
c001dec7:	0f 94 c0             	sete   al
c001deca:	0f b6 c0             	movzx  eax,al
c001decd:	85 c0                	test   eax,eax
c001decf:	74 0f                	je     c001dee0 <findDataTable(unsigned char*, char*)+0x6c>
c001ded1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ded5:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dedc:	eb 12                	jmp    c001def0 <findDataTable(unsigned char*, char*)+0x7c>
c001dede:	66 90                	xchg   ax,ax
c001dee0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dee5:	eb b5                	jmp    c001de9c <findDataTable(unsigned char*, char*)+0x28>
c001dee7:	90                   	nop
c001dee8:	b8 00 00 00 00       	mov    eax,0x0
c001deed:	8d 76 00             	lea    esi,[esi+0x0]
c001def0:	83 c4 1c             	add    esp,0x1c
c001def3:	c3                   	ret    

c001def4 <scanMADT()>:
c001def4:	53                   	push   ebx
c001def5:	83 ec 38             	sub    esp,0x38
c001def8:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001defd:	25 00 04 00 00       	and    eax,0x400
c001df02:	74 14                	je     c001df18 <scanMADT()+0x24>
c001df04:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df09:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df0f:	83 e2 fb             	and    edx,0xfffffffb
c001df12:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df18:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df1d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df23:	83 e0 04             	and    eax,0x4
c001df26:	0f b6 c0             	movzx  eax,al
c001df29:	85 c0                	test   eax,eax
c001df2b:	0f 84 6b 04 00 00    	je     c001e39c <scanMADT()+0x4a8>
c001df31:	e8 e2 fa ff ff       	call   c001da18 <findRSDP()>
c001df36:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001df3b:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001df40:	85 c0                	test   eax,eax
c001df42:	75 1c                	jne    c001df60 <scanMADT()+0x6c>
c001df44:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df49:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df4f:	83 e2 fb             	and    edx,0xfffffffb
c001df52:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df58:	e9 47 04 00 00       	jmp    c001e3a4 <scanMADT()+0x4b0>
c001df5d:	8d 76 00             	lea    esi,[esi+0x0]
c001df60:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001df65:	83 ec 0c             	sub    esp,0xc
c001df68:	50                   	push   eax
c001df69:	e8 ae fd ff ff       	call   c001dd1c <findRSDT(unsigned char*)>
c001df6e:	83 c4 10             	add    esp,0x10
c001df71:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001df76:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001df7b:	85 c0                	test   eax,eax
c001df7d:	75 19                	jne    c001df98 <scanMADT()+0xa4>
c001df7f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df84:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df8a:	83 e2 fb             	and    edx,0xfffffffb
c001df8d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df93:	e9 0c 04 00 00       	jmp    c001e3a4 <scanMADT()+0x4b0>
c001df98:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001df9d:	83 ec 0c             	sub    esp,0xc
c001dfa0:	50                   	push   eax
c001dfa1:	e8 0a fb ff ff       	call   c001dab0 <loadACPITables(unsigned char*)>
c001dfa6:	83 c4 10             	add    esp,0x10
c001dfa9:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001dfae:	83 ec 08             	sub    esp,0x8
c001dfb1:	68 3e 20 03 c0       	push   0xc003203e
c001dfb6:	50                   	push   eax
c001dfb7:	e8 b8 fe ff ff       	call   c001de74 <findDataTable(unsigned char*, char*)>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dfc3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001dfc8:	75 1a                	jne    c001dfe4 <scanMADT()+0xf0>
c001dfca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfcf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dfd5:	83 e2 fe             	and    edx,0xfffffffe
c001dfd8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dfde:	e9 c1 03 00 00       	jmp    c001e3a4 <scanMADT()+0x4b0>
c001dfe3:	90                   	nop
c001dfe4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001dfec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dff3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001dff7:	0f 87 a7 03 00 00    	ja     c001e3a4 <scanMADT()+0x4b0>
c001dffd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e005:	0f 87 99 03 00 00    	ja     c001e3a4 <scanMADT()+0x4b0>
c001e00b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e00f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e017:	8d 50 01             	lea    edx,[eax+0x1]
c001e01a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e01e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e022:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e026:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e02a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e02e:	8d 50 01             	lea    edx,[eax+0x1]
c001e031:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e039:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e03d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e041:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e046:	83 f8 02             	cmp    eax,0x2
c001e049:	0f 86 51 03 00 00    	jbe    c001e3a0 <scanMADT()+0x4ac>
c001e04f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e054:	85 c0                	test   eax,eax
c001e056:	75 58                	jne    c001e0b0 <scanMADT()+0x1bc>
c001e058:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e05c:	8d 50 01             	lea    edx,[eax+0x1]
c001e05f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e063:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e069:	0f b6 d2             	movzx  edx,dl
c001e06c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e070:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e074:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e07a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e07e:	8d 50 01             	lea    edx,[eax+0x1]
c001e081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e085:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e08b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e08e:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e094:	0f b6 d2             	movzx  edx,dl
c001e097:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e09b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e09f:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e0a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e0aa:	e9 d9 02 00 00       	jmp    c001e388 <scanMADT()+0x494>
c001e0af:	90                   	nop
c001e0b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e0b5:	83 f8 01             	cmp    eax,0x1
c001e0b8:	0f 85 1a 01 00 00    	jne    c001e1d8 <scanMADT()+0x2e4>
c001e0be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0c2:	8d 50 01             	lea    edx,[eax+0x1]
c001e0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0c9:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e0cf:	0f b6 d2             	movzx  edx,dl
c001e0d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e0da:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e0e0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e0e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e0e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0ed:	01 d0                	add    eax,edx
c001e0ef:	83 c0 2c             	add    eax,0x2c
c001e0f2:	8a 00                	mov    al,BYTE PTR [eax]
c001e0f4:	0f b6 d0             	movzx  edx,al
c001e0f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0fb:	8d 48 01             	lea    ecx,[eax+0x1]
c001e0fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e102:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e106:	0f b6 c0             	movzx  eax,al
c001e109:	c1 e0 08             	shl    eax,0x8
c001e10c:	89 d1                	mov    ecx,edx
c001e10e:	09 c1                	or     ecx,eax
c001e110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e114:	8d 50 02             	lea    edx,[eax+0x2]
c001e117:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e11b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e11f:	0f b6 c0             	movzx  eax,al
c001e122:	c1 e0 10             	shl    eax,0x10
c001e125:	09 c1                	or     ecx,eax
c001e127:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e12b:	8d 50 03             	lea    edx,[eax+0x3]
c001e12e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e132:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e136:	0f b6 c0             	movzx  eax,al
c001e139:	c1 e0 18             	shl    eax,0x18
c001e13c:	09 c1                	or     ecx,eax
c001e13e:	89 ca                	mov    edx,ecx
c001e140:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e145:	0f b6 c0             	movzx  eax,al
c001e148:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e14f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e154:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e158:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15c:	01 d0                	add    eax,edx
c001e15e:	83 c0 2c             	add    eax,0x2c
c001e161:	8a 00                	mov    al,BYTE PTR [eax]
c001e163:	0f b6 d0             	movzx  edx,al
c001e166:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e16a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e171:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e175:	0f b6 c0             	movzx  eax,al
c001e178:	c1 e0 08             	shl    eax,0x8
c001e17b:	89 d1                	mov    ecx,edx
c001e17d:	09 c1                	or     ecx,eax
c001e17f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e183:	8d 50 02             	lea    edx,[eax+0x2]
c001e186:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e18a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e18e:	0f b6 c0             	movzx  eax,al
c001e191:	c1 e0 10             	shl    eax,0x10
c001e194:	09 c1                	or     ecx,eax
c001e196:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e19a:	8d 50 03             	lea    edx,[eax+0x3]
c001e19d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e1a5:	0f b6 c0             	movzx  eax,al
c001e1a8:	c1 e0 18             	shl    eax,0x18
c001e1ab:	09 c1                	or     ecx,eax
c001e1ad:	89 ca                	mov    edx,ecx
c001e1af:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e1b4:	0f b6 c0             	movzx  eax,al
c001e1b7:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e1be:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1c3:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e1c8:	83 c0 01             	add    eax,0x1
c001e1cb:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e1d0:	e9 b3 01 00 00       	jmp    c001e388 <scanMADT()+0x494>
c001e1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e1d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1dd:	83 f8 02             	cmp    eax,0x2
c001e1e0:	0f 85 ea 00 00 00    	jne    c001e2d0 <scanMADT()+0x3dc>
c001e1e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1ea:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e1f9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e1fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e201:	8d 50 01             	lea    edx,[eax+0x1]
c001e204:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e20c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e210:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e214:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e218:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e21c:	01 d0                	add    eax,edx
c001e21e:	83 c0 2c             	add    eax,0x2c
c001e221:	8a 00                	mov    al,BYTE PTR [eax]
c001e223:	0f b6 d0             	movzx  edx,al
c001e226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e22a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e22d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e231:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e235:	0f b6 c0             	movzx  eax,al
c001e238:	c1 e0 08             	shl    eax,0x8
c001e23b:	89 d1                	mov    ecx,edx
c001e23d:	09 c1                	or     ecx,eax
c001e23f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e243:	8d 50 02             	lea    edx,[eax+0x2]
c001e246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e24a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e24e:	0f b6 c0             	movzx  eax,al
c001e251:	c1 e0 10             	shl    eax,0x10
c001e254:	09 c1                	or     ecx,eax
c001e256:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e25a:	8d 50 03             	lea    edx,[eax+0x3]
c001e25d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e261:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e265:	0f b6 c0             	movzx  eax,al
c001e268:	c1 e0 18             	shl    eax,0x18
c001e26b:	09 c8                	or     eax,ecx
c001e26d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e271:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e276:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e27a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e27e:	01 d0                	add    eax,edx
c001e280:	83 c0 2c             	add    eax,0x2c
c001e283:	8a 00                	mov    al,BYTE PTR [eax]
c001e285:	0f b6 d0             	movzx  edx,al
c001e288:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e28c:	8d 48 01             	lea    ecx,[eax+0x1]
c001e28f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e293:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e297:	0f b6 c0             	movzx  eax,al
c001e29a:	c1 e0 08             	shl    eax,0x8
c001e29d:	09 d0                	or     eax,edx
c001e29f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e2a4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e2a9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e2ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2b2:	88 90 48 38 03 c0    	mov    BYTE PTR [eax-0x3ffcc7b8],dl
c001e2b8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e2bd:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e2c2:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e2ca:	e9 b9 00 00 00       	jmp    c001e388 <scanMADT()+0x494>
c001e2cf:	90                   	nop
c001e2d0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e2d5:	83 f8 04             	cmp    eax,0x4
c001e2d8:	0f 85 9a 00 00 00    	jne    c001e378 <scanMADT()+0x484>
c001e2de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2e2:	8d 50 01             	lea    edx,[eax+0x1]
c001e2e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e2e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e2f1:	0f b6 c0             	movzx  eax,al
c001e2f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e300:	01 d0                	add    eax,edx
c001e302:	83 c0 2c             	add    eax,0x2c
c001e305:	8a 00                	mov    al,BYTE PTR [eax]
c001e307:	0f b6 d0             	movzx  edx,al
c001e30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e30e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e311:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e315:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e319:	0f b6 c0             	movzx  eax,al
c001e31c:	c1 e0 08             	shl    eax,0x8
c001e31f:	09 d0                	or     eax,edx
c001e321:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e325:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e32a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e32e:	8d 50 01             	lea    edx,[eax+0x1]
c001e331:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e335:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e339:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e33d:	0f b6 c0             	movzx  eax,al
c001e340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e348:	c1 e0 08             	shl    eax,0x8
c001e34b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e34f:	89 c1                	mov    ecx,eax
c001e351:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e355:	c1 e0 18             	shl    eax,0x18
c001e358:	89 c3                	mov    ebx,eax
c001e35a:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e35f:	8d 50 01             	lea    edx,[eax+0x1]
c001e362:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e368:	09 d9                	or     ecx,ebx
c001e36a:	89 ca                	mov    edx,ecx
c001e36c:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e373:	eb 13                	jmp    c001e388 <scanMADT()+0x494>
c001e375:	8d 76 00             	lea    esi,[esi+0x0]
c001e378:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e37d:	83 f8 05             	cmp    eax,0x5
c001e380:	75 06                	jne    c001e388 <scanMADT()+0x494>
c001e382:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e387:	90                   	nop
c001e388:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e38d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e391:	01 d0                	add    eax,edx
c001e393:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e397:	e9 50 fc ff ff       	jmp    c001dfec <scanMADT()+0xf8>
c001e39c:	90                   	nop
c001e39d:	eb 05                	jmp    c001e3a4 <scanMADT()+0x4b0>
c001e39f:	90                   	nop
c001e3a0:	90                   	nop
c001e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3a4:	83 c4 38             	add    esp,0x38
c001e3a7:	5b                   	pop    ebx
c001e3a8:	c3                   	ret    
c001e3a9:	90                   	nop
c001e3aa:	66 90                	xchg   ax,ax

c001e3ac <ACPI::ACPI()>:
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b3:	83 ec 08             	sub    esp,0x8
c001e3b6:	68 43 20 03 c0       	push   0xc0032043
c001e3bb:	50                   	push   eax
c001e3bc:	e8 fd cf ff ff       	call   c001b3be <Device::Device(char const*)>
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	ba 50 22 03 c0       	mov    edx,0xc0032250
c001e3c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cd:	89 10                	mov    DWORD PTR [eax],edx
c001e3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3de:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e3f6:	e8 f9 fa ff ff       	call   c001def4 <scanMADT()>
c001e3fb:	90                   	nop
c001e3fc:	83 c4 0c             	add    esp,0xc
c001e3ff:	c3                   	ret    

c001e400 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e400:	83 ec 2c             	sub    esp,0x2c
c001e403:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e407:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e40b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e40f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e413:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e418:	88 c8                	mov    al,cl
c001e41a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e41e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e423:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e42b:	90                   	nop
c001e42c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e430:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e436:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e43a:	0f 8d b0 00 00 00    	jge    c001e4f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e440:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e444:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e448:	83 c2 2a             	add    edx,0x2a
c001e44b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e44f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e454:	0f b7 c0             	movzx  eax,ax
c001e457:	39 c2                	cmp    edx,eax
c001e459:	0f 85 85 00 00 00    	jne    c001e4e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e45f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e463:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e467:	83 c2 2a             	add    edx,0x2a
c001e46a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e46e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e473:	0f b6 c0             	movzx  eax,al
c001e476:	39 c2                	cmp    edx,eax
c001e478:	75 6a                	jne    c001e4e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e47a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e47f:	85 c0                	test   eax,eax
c001e481:	74 3d                	je     c001e4c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e483:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e487:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e48b:	83 c2 2a             	add    edx,0x2a
c001e48e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e492:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e499:	39 c2                	cmp    edx,eax
c001e49b:	74 13                	je     c001e4b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e49d:	83 ec 0c             	sub    esp,0xc
c001e4a0:	68 d0 21 03 c0       	push   0xc00321d0
c001e4a5:	e8 c9 1b 00 00       	call   c0020073 <KePanic(char const*)>
c001e4aa:	83 c4 10             	add    esp,0x10
c001e4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e4b0:	83 ec 0c             	sub    esp,0xc
c001e4b3:	68 48 20 03 c0       	push   0xc0032048
c001e4b8:	e8 b6 1b 00 00       	call   c0020073 <KePanic(char const*)>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e4c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4cc:	83 c2 2a             	add    edx,0x2a
c001e4cf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e4d3:	8b 02                	mov    eax,DWORD PTR [edx]
c001e4d5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e4d8:	89 01                	mov    DWORD PTR [ecx],eax
c001e4da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e4dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e4e2:	66 90                	xchg   ax,ax
c001e4e4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e4e9:	e9 3e ff ff ff       	jmp    c001e42c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e4ee:	66 90                	xchg   ax,ax
c001e4f0:	90                   	nop
c001e4f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e4f5:	83 c4 2c             	add    esp,0x2c
c001e4f8:	c2 04 00             	ret    0x4
c001e4fb:	90                   	nop

c001e4fc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e4fc:	83 ec 1c             	sub    esp,0x1c
c001e4ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e503:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e507:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e50b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e510:	88 c8                	mov    al,cl
c001e512:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e516:	88 d0                	mov    al,dl
c001e518:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e520:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e52a:	83 c2 2a             	add    edx,0x2a
c001e52d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e531:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e539:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e53f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e543:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e546:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e54a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e553:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e559:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e55d:	83 c0 01             	add    eax,0x1
c001e560:	88 c1                	mov    cl,al
c001e562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e566:	83 c2 2a             	add    edx,0x2a
c001e569:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e571:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e57b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e57e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e582:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e58a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e590:	8d 50 01             	lea    edx,[eax+0x1]
c001e593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e597:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5a1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e5a7:	3d 00 02 00 00       	cmp    eax,0x200
c001e5ac:	75 12                	jne    c001e5c0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e5ae:	83 ec 0c             	sub    esp,0xc
c001e5b1:	68 57 20 03 c0       	push   0xc0032057
c001e5b6:	e8 b8 1a 00 00       	call   c0020073 <KePanic(char const*)>
c001e5bb:	83 c4 10             	add    esp,0x10
c001e5be:	66 90                	xchg   ax,ax
c001e5c0:	90                   	nop
c001e5c1:	83 c4 1c             	add    esp,0x1c
c001e5c4:	c3                   	ret    
c001e5c5:	90                   	nop
c001e5c6:	66 90                	xchg   ax,ax

c001e5c8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e5c8:	b8 00 00 00 00       	mov    eax,0x0
c001e5cd:	c3                   	ret    
c001e5ce:	66 90                	xchg   ax,ax

c001e5d0 <ACPI::detectPCI()>:
c001e5d0:	53                   	push   ebx
c001e5d1:	83 ec 28             	sub    esp,0x28
c001e5d4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e5d9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e5de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e5e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e5e9:	83 e0 04             	and    eax,0x4
c001e5ec:	0f b6 c0             	movzx  eax,al
c001e5ef:	85 c0                	test   eax,eax
c001e5f1:	74 2d                	je     c001e620 <ACPI::detectPCI()+0x50>
c001e5f3:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e5f8:	83 ec 08             	sub    esp,0x8
c001e5fb:	68 74 20 03 c0       	push   0xc0032074
c001e600:	50                   	push   eax
c001e601:	e8 6e f8 ff ff       	call   c001de74 <findDataTable(unsigned char*, char*)>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e60d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e612:	74 0c                	je     c001e620 <ACPI::detectPCI()+0x50>
c001e614:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e619:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e61e:	66 90                	xchg   ax,ax
c001e620:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e62c:	8a 00                	mov    al,BYTE PTR [eax]
c001e62e:	0f b6 c0             	movzx  eax,al
c001e631:	83 f8 01             	cmp    eax,0x1
c001e634:	75 0e                	jne    c001e644 <ACPI::detectPCI()+0x74>
c001e636:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e63b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e640:	eb 2e                	jmp    c001e670 <ACPI::detectPCI()+0xa0>
c001e642:	66 90                	xchg   ax,ax
c001e644:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e648:	8a 00                	mov    al,BYTE PTR [eax]
c001e64a:	0f b6 c0             	movzx  eax,al
c001e64d:	83 f8 02             	cmp    eax,0x2
c001e650:	75 1e                	jne    c001e670 <ACPI::detectPCI()+0xa0>
c001e652:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e657:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e65c:	85 c0                	test   eax,eax
c001e65e:	74 10                	je     c001e670 <ACPI::detectPCI()+0xa0>
c001e660:	83 ec 0c             	sub    esp,0xc
c001e663:	68 00 22 03 c0       	push   0xc0032200
c001e668:	e8 06 1a 00 00       	call   c0020073 <KePanic(char const*)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e674:	83 f0 01             	xor    eax,0x1
c001e677:	0f b6 c0             	movzx  eax,al
c001e67a:	85 c0                	test   eax,eax
c001e67c:	74 46                	je     c001e6c4 <ACPI::detectPCI()+0xf4>
c001e67e:	e8 ad 1a fe ff       	call   c0000130 <manualPCIProbe>
c001e683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e687:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e68c:	75 0e                	jne    c001e69c <ACPI::detectPCI()+0xcc>
c001e68e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e693:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e698:	eb 2a                	jmp    c001e6c4 <ACPI::detectPCI()+0xf4>
c001e69a:	66 90                	xchg   ax,ax
c001e69c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e6a1:	75 21                	jne    c001e6c4 <ACPI::detectPCI()+0xf4>
c001e6a3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6a8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e6ad:	85 c0                	test   eax,eax
c001e6af:	74 13                	je     c001e6c4 <ACPI::detectPCI()+0xf4>
c001e6b1:	83 ec 0c             	sub    esp,0xc
c001e6b4:	68 00 22 03 c0       	push   0xc0032200
c001e6b9:	e8 b5 19 00 00       	call   c0020073 <KePanic(char const*)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6c4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e6c9:	85 c0                	test   eax,eax
c001e6cb:	0f 84 87 00 00 00    	je     c001e758 <ACPI::detectPCI()+0x188>
c001e6d1:	83 ec 0c             	sub    esp,0xc
c001e6d4:	68 79 20 03 c0       	push   0xc0032079
c001e6d9:	e8 4f 12 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001e6de:	83 c4 10             	add    esp,0x10
c001e6e1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e6e9:	83 ec 0c             	sub    esp,0xc
c001e6ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6f0:	e8 9a 7c ff ff       	call   c001638f <malloc>
c001e6f5:	83 c4 10             	add    esp,0x10
c001e6f8:	89 c3                	mov    ebx,eax
c001e6fa:	83 ec 0c             	sub    esp,0xc
c001e6fd:	53                   	push   ebx
c001e6fe:	e8 f7 b5 00 00       	call   c0029cfa <PCI::PCI()>
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e70a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e70e:	83 ec 08             	sub    esp,0x8
c001e711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e715:	50                   	push   eax
c001e716:	e8 41 cb ff ff       	call   c001b25c <Device::addChild(Device*)>
c001e71b:	83 c4 10             	add    esp,0x10
c001e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e722:	8b 00                	mov    eax,DWORD PTR [eax]
c001e724:	83 c0 08             	add    eax,0x8
c001e727:	8b 00                	mov    eax,DWORD PTR [eax]
c001e729:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e72e:	85 d2                	test   edx,edx
c001e730:	74 0a                	je     c001e73c <ACPI::detectPCI()+0x16c>
c001e732:	ba 01 00 00 00       	mov    edx,0x1
c001e737:	eb 0b                	jmp    c001e744 <ACPI::detectPCI()+0x174>
c001e739:	8d 76 00             	lea    esi,[esi+0x0]
c001e73c:	ba 02 00 00 00       	mov    edx,0x2
c001e741:	8d 76 00             	lea    esi,[esi+0x0]
c001e744:	6a 00                	push   0x0
c001e746:	6a 00                	push   0x0
c001e748:	52                   	push   edx
c001e749:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e74d:	ff d0                	call   eax
c001e74f:	83 c4 10             	add    esp,0x10
c001e752:	e9 91 00 00 00       	jmp    c001e7e8 <ACPI::detectPCI()+0x218>
c001e757:	90                   	nop
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	68 91 20 03 c0       	push   0xc0032091
c001e760:	e8 c8 11 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e76f:	83 ec 0c             	sub    esp,0xc
c001e772:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e776:	e8 14 7c ff ff       	call   c001638f <malloc>
c001e77b:	83 c4 10             	add    esp,0x10
c001e77e:	89 c3                	mov    ebx,eax
c001e780:	83 ec 0c             	sub    esp,0xc
c001e783:	53                   	push   ebx
c001e784:	e8 19 c1 00 00       	call   c002a8a2 <IDE::IDE()>
c001e789:	83 c4 10             	add    esp,0x10
c001e78c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e794:	83 ec 08             	sub    esp,0x8
c001e797:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e79b:	50                   	push   eax
c001e79c:	e8 bb ca ff ff       	call   c001b25c <Device::addChild(Device*)>
c001e7a1:	83 c4 10             	add    esp,0x10
c001e7a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7a8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e7b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7b6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e7bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7c3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e7cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7d2:	83 c0 08             	add    eax,0x8
c001e7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7d7:	6a 00                	push   0x0
c001e7d9:	6a 00                	push   0x0
c001e7db:	6a 00                	push   0x0
c001e7dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e7e1:	ff d0                	call   eax
c001e7e3:	83 c4 10             	add    esp,0x10
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	90                   	nop
c001e7e9:	83 c4 28             	add    esp,0x28
c001e7ec:	5b                   	pop    ebx
c001e7ed:	c3                   	ret    
c001e7ee:	66 90                	xchg   ax,ax

c001e7f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e7f0:	83 ec 1c             	sub    esp,0x1c
c001e7f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e7f7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e7fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e7fe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e803:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e808:	83 ec 08             	sub    esp,0x8
c001e80b:	52                   	push   edx
c001e80c:	50                   	push   eax
c001e80d:	e8 46 72 ff ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e819:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e81e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e823:	83 ec 04             	sub    esp,0x4
c001e826:	6a 01                	push   0x1
c001e828:	52                   	push   edx
c001e829:	50                   	push   eax
c001e82a:	e8 41 73 ff ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c001e82f:	83 c4 10             	add    esp,0x10
c001e832:	90                   	nop
c001e833:	83 c4 1c             	add    esp,0x1c
c001e836:	c3                   	ret    
c001e837:	90                   	nop

c001e838 <ACPI::sleep()>:
c001e838:	83 ec 0c             	sub    esp,0xc
c001e83b:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e840:	85 c0                	test   eax,eax
c001e842:	74 08                	je     c001e84c <ACPI::sleep()+0x14>
c001e844:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e849:	ff d0                	call   eax
c001e84b:	90                   	nop
c001e84c:	90                   	nop
c001e84d:	83 c4 0c             	add    esp,0xc
c001e850:	c3                   	ret    
c001e851:	90                   	nop
c001e852:	66 90                	xchg   ax,ax

c001e854 <ACPI::open(int, int, void*)>:
c001e854:	55                   	push   ebp
c001e855:	89 e5                	mov    ebp,esp
c001e857:	53                   	push   ebx
c001e858:	81 ec 74 01 00 00    	sub    esp,0x174
c001e85e:	83 ec 0c             	sub    esp,0xc
c001e861:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e864:	e8 67 fd ff ff       	call   c001e5d0 <ACPI::detectPCI()>
c001e869:	83 c4 10             	add    esp,0x10
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	68 28 22 03 c0       	push   0xc0032228
c001e874:	e8 b4 10 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	b8 4c 05 00 00       	mov    eax,0x54c
c001e881:	8a 00                	mov    al,BYTE PTR [eax]
c001e883:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001e886:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e88a:	83 f8 01             	cmp    eax,0x1
c001e88d:	75 15                	jne    c001e8a4 <ACPI::open(int, int, void*)+0x50>
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	68 a6 20 03 c0       	push   0xc00320a6
c001e897:	e8 19 4e 00 00       	call   c00236b5 <Thr::loadKernelSymbolTable(char const*)>
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	eb 33                	jmp    c001e8d4 <ACPI::open(int, int, void*)+0x80>
c001e8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8a4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e8a8:	3d bb 00 00 00       	cmp    eax,0xbb
c001e8ad:	75 15                	jne    c001e8c4 <ACPI::open(int, int, void*)+0x70>
c001e8af:	83 ec 0c             	sub    esp,0xc
c001e8b2:	68 c4 20 03 c0       	push   0xc00320c4
c001e8b7:	e8 f9 4d 00 00       	call   c00236b5 <Thr::loadKernelSymbolTable(char const*)>
c001e8bc:	83 c4 10             	add    esp,0x10
c001e8bf:	eb 13                	jmp    c001e8d4 <ACPI::open(int, int, void*)+0x80>
c001e8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	68 e2 20 03 c0       	push   0xc00320e2
c001e8cc:	e8 a2 17 00 00       	call   c0020073 <KePanic(char const*)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e8d8:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001e8df:	83 ec 0c             	sub    esp,0xc
c001e8e2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001e8e5:	e8 a5 7a ff ff       	call   c001638f <malloc>
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	89 c3                	mov    ebx,eax
c001e8ef:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001e8f4:	83 ec 04             	sub    esp,0x4
c001e8f7:	50                   	push   eax
c001e8f8:	68 fc 20 03 c0       	push   0xc00320fc
c001e8fd:	53                   	push   ebx
c001e8fe:	e8 db ba ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001e909:	83 ec 08             	sub    esp,0x8
c001e90c:	6a 01                	push   0x1
c001e90e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001e911:	e8 e6 ba ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e91c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001e920:	75 12                	jne    c001e934 <ACPI::open(int, int, void*)+0xe0>
c001e922:	83 ec 0c             	sub    esp,0xc
c001e925:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001e928:	e8 2d bb ff ff       	call   c001a45a <File::close()>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	eb 06                	jmp    c001e938 <ACPI::open(int, int, void*)+0xe4>
c001e932:	66 90                	xchg   ax,ax
c001e934:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e938:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001e93c:	74 16                	je     c001e954 <ACPI::open(int, int, void*)+0x100>
c001e93e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e941:	8b 00                	mov    eax,DWORD PTR [eax]
c001e943:	83 c0 08             	add    eax,0x8
c001e946:	8b 00                	mov    eax,DWORD PTR [eax]
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001e94e:	ff d0                	call   eax
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	90                   	nop
c001e954:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e957:	83 f0 01             	xor    eax,0x1
c001e95a:	0f b6 c0             	movzx  eax,al
c001e95d:	85 c0                	test   eax,eax
c001e95f:	74 3b                	je     c001e99c <ACPI::open(int, int, void*)+0x148>
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	68 1a 21 03 c0       	push   0xc003211a
c001e969:	e8 bf 0f 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	83 ec 04             	sub    esp,0x4
c001e974:	6a 0c                	push   0xc
c001e976:	68 35 21 03 c0       	push   0xc0032135
c001e97b:	68 46 21 03 c0       	push   0xc0032146
c001e980:	e8 69 3f 00 00       	call   c00228ee <Reg::readIntWithDefault(char*, char*, int)>
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e98b:	83 ec 0c             	sub    esp,0xc
c001e98e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001e991:	e8 40 97 ff ff       	call   c00180d6 <Virt::setupPageSwapping(int)>
c001e996:	83 c4 10             	add    esp,0x10
c001e999:	8d 76 00             	lea    esi,[esi+0x0]
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	68 84 0b 03 c0       	push   0xc0030b84
c001e9a4:	e8 84 0f 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	8d 45 b8             	lea    eax,[ebp-0x48]
c001e9af:	83 ec 08             	sub    esp,0x8
c001e9b2:	6a 13                	push   0x13
c001e9b4:	50                   	push   eax
c001e9b5:	e8 d0 cb ff ff       	call   c001b58a <getDevicesOfType(DeviceType)>
c001e9ba:	83 c4 0c             	add    esp,0xc
c001e9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	8d 45 b8             	lea    eax,[ebp-0x48]
c001e9c6:	50                   	push   eax
c001e9c7:	e8 14 01 01 00       	call   c002eae0 <LinkedList<Device>::isEmpty()>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	83 f0 01             	xor    eax,0x1
c001e9d2:	0f b6 c0             	movzx  eax,al
c001e9d5:	85 c0                	test   eax,eax
c001e9d7:	0f 84 1f 01 00 00    	je     c001eafc <ACPI::open(int, int, void*)+0x2a8>
c001e9dd:	83 ec 0c             	sub    esp,0xc
c001e9e0:	8d 45 b8             	lea    eax,[ebp-0x48]
c001e9e3:	50                   	push   eax
c001e9e4:	e8 13 01 01 00       	call   c002eafc <LinkedList<Device>::getFirstElement()>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e9ef:	83 ec 0c             	sub    esp,0xc
c001e9f2:	8d 45 b8             	lea    eax,[ebp-0x48]
c001e9f5:	50                   	push   eax
c001e9f6:	e8 09 01 01 00       	call   c002eb04 <LinkedList<Device>::removeFirst()>
c001e9fb:	83 c4 10             	add    esp,0x10
c001e9fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ea01:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ea04:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ea07:	b8 24 00 00 00       	mov    eax,0x24
c001ea0c:	83 e0 fc             	and    eax,0xfffffffc
c001ea0f:	89 c3                	mov    ebx,eax
c001ea11:	b8 00 00 00 00       	mov    eax,0x0
c001ea16:	66 90                	xchg   ax,ax
c001ea18:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ea1f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ea26:	83 c0 04             	add    eax,0x4
c001ea29:	39 d8                	cmp    eax,ebx
c001ea2b:	72 eb                	jb     c001ea18 <ACPI::open(int, int, void*)+0x1c4>
c001ea2d:	83 ec 08             	sub    esp,0x8
c001ea30:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001ea36:	50                   	push   eax
c001ea37:	83 ec 24             	sub    esp,0x24
c001ea3a:	89 e1                	mov    ecx,esp
c001ea3c:	b8 24 00 00 00       	mov    eax,0x24
c001ea41:	83 e0 fc             	and    eax,0xfffffffc
c001ea44:	89 c3                	mov    ebx,eax
c001ea46:	b8 00 00 00 00       	mov    eax,0x0
c001ea4b:	90                   	nop
c001ea4c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001ea53:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001ea56:	83 c0 04             	add    eax,0x4
c001ea59:	39 d8                	cmp    eax,ebx
c001ea5b:	72 ef                	jb     c001ea4c <ACPI::open(int, int, void*)+0x1f8>
c001ea5d:	e8 80 b7 00 00       	call   c002a1e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ea62:	83 c4 30             	add    esp,0x30
c001ea65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ea68:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001ea6c:	0f 84 4e ff ff ff    	je     c001e9c0 <ACPI::open(int, int, void*)+0x16c>
c001ea72:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001ea7f:	e8 0b 79 ff ff       	call   c001638f <malloc>
c001ea84:	83 c4 10             	add    esp,0x10
c001ea87:	89 c3                	mov    ebx,eax
c001ea89:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea8e:	83 ec 04             	sub    esp,0x4
c001ea91:	50                   	push   eax
c001ea92:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ea95:	53                   	push   ebx
c001ea96:	e8 43 b9 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001ea9b:	83 c4 10             	add    esp,0x10
c001ea9e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001eaa1:	83 ec 0c             	sub    esp,0xc
c001eaa4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001eaa7:	e8 14 bc ff ff       	call   c001a6c0 <File::exists()>
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	0f b6 c0             	movzx  eax,al
c001eab2:	85 c0                	test   eax,eax
c001eab4:	74 22                	je     c001ead8 <ACPI::open(int, int, void*)+0x284>
c001eab6:	83 ec 08             	sub    esp,0x8
c001eab9:	6a 01                	push   0x1
c001eabb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001eabe:	e8 74 56 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001eac3:	83 c4 10             	add    esp,0x10
c001eac6:	83 ec 08             	sub    esp,0x8
c001eac9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001eacc:	50                   	push   eax
c001eacd:	e8 c6 58 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001ead2:	83 c4 10             	add    esp,0x10
c001ead5:	8d 76 00             	lea    esi,[esi+0x0]
c001ead8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001eadc:	0f 84 de fe ff ff    	je     c001e9c0 <ACPI::open(int, int, void*)+0x16c>
c001eae2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eae5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae7:	83 c0 08             	add    eax,0x8
c001eaea:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaec:	83 ec 0c             	sub    esp,0xc
c001eaef:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001eaf2:	ff d0                	call   eax
c001eaf4:	83 c4 10             	add    esp,0x10
c001eaf7:	e9 c4 fe ff ff       	jmp    c001e9c0 <ACPI::open(int, int, void*)+0x16c>
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb02:	50                   	push   eax
c001eb03:	e8 d4 ff 00 00       	call   c002eadc <LinkedList<Device>::~LinkedList()>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eb11:	83 ec 08             	sub    esp,0x8
c001eb14:	6a 01                	push   0x1
c001eb16:	68 4d 21 03 c0       	push   0xc003214d
c001eb1b:	e8 17 56 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	83 ec 08             	sub    esp,0x8
c001eb26:	53                   	push   ebx
c001eb27:	50                   	push   eax
c001eb28:	e8 6b 58 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001eb2d:	83 c4 10             	add    esp,0x10
c001eb30:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eb35:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001eb3b:	83 e0 04             	and    eax,0x4
c001eb3e:	0f b6 c0             	movzx  eax,al
c001eb41:	85 c0                	test   eax,eax
c001eb43:	0f 84 e3 00 00 00    	je     c001ec2c <ACPI::open(int, int, void*)+0x3d8>
c001eb49:	83 ec 0c             	sub    esp,0xc
c001eb4c:	68 6a 21 03 c0       	push   0xc003216a
c001eb51:	e8 d7 0d 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001eb56:	83 c4 10             	add    esp,0x10
c001eb59:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001eb60:	83 ec 0c             	sub    esp,0xc
c001eb63:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001eb66:	e8 24 78 ff ff       	call   c001638f <malloc>
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	89 c3                	mov    ebx,eax
c001eb70:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eb75:	83 ec 04             	sub    esp,0x4
c001eb78:	50                   	push   eax
c001eb79:	68 87 21 03 c0       	push   0xc0032187
c001eb7e:	53                   	push   ebx
c001eb7f:	e8 5a b8 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001eb84:	83 c4 10             	add    esp,0x10
c001eb87:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001eb8a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001eb8e:	74 1c                	je     c001ebac <ACPI::open(int, int, void*)+0x358>
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001eb96:	e8 25 bb ff ff       	call   c001a6c0 <File::exists()>
c001eb9b:	83 c4 10             	add    esp,0x10
c001eb9e:	0f b6 c0             	movzx  eax,al
c001eba1:	85 c0                	test   eax,eax
c001eba3:	74 07                	je     c001ebac <ACPI::open(int, int, void*)+0x358>
c001eba5:	b0 01                	mov    al,0x1
c001eba7:	eb 07                	jmp    c001ebb0 <ACPI::open(int, int, void*)+0x35c>
c001eba9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebac:	b0 00                	mov    al,0x0
c001ebae:	66 90                	xchg   ax,ax
c001ebb0:	0f b6 c0             	movzx  eax,al
c001ebb3:	85 c0                	test   eax,eax
c001ebb5:	74 21                	je     c001ebd8 <ACPI::open(int, int, void*)+0x384>
c001ebb7:	83 ec 08             	sub    esp,0x8
c001ebba:	6a 01                	push   0x1
c001ebbc:	68 87 21 03 c0       	push   0xc0032187
c001ebc1:	e8 71 55 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c001ebc6:	83 c4 10             	add    esp,0x10
c001ebc9:	83 ec 08             	sub    esp,0x8
c001ebcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebcf:	50                   	push   eax
c001ebd0:	e8 c3 57 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c001ebd5:	83 c4 10             	add    esp,0x10
c001ebd8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ebdc:	74 1e                	je     c001ebfc <ACPI::open(int, int, void*)+0x3a8>
c001ebde:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ebe2:	74 18                	je     c001ebfc <ACPI::open(int, int, void*)+0x3a8>
c001ebe4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001ebe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe9:	83 c0 08             	add    eax,0x8
c001ebec:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebee:	83 ec 0c             	sub    esp,0xc
c001ebf1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ebf4:	ff d0                	call   eax
c001ebf6:	83 c4 10             	add    esp,0x10
c001ebf9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebfc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ec01:	83 ec 08             	sub    esp,0x8
c001ec04:	68 a4 21 03 c0       	push   0xc00321a4
c001ec09:	50                   	push   eax
c001ec0a:	e8 65 f2 ff ff       	call   c001de74 <findDataTable(unsigned char*, char*)>
c001ec0f:	83 c4 10             	add    esp,0x10
c001ec12:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001ec15:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001ec19:	74 11                	je     c001ec2c <ACPI::open(int, int, void*)+0x3d8>
c001ec1b:	83 ec 08             	sub    esp,0x8
c001ec1e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ec21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec24:	e8 c7 fb ff ff       	call   c001e7f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ec29:	83 c4 10             	add    esp,0x10
c001ec2c:	b8 00 00 00 00       	mov    eax,0x0
c001ec31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ec34:	c9                   	leave  
c001ec35:	c3                   	ret    

c001ec36 <CPU::close(int, int, void*)>:
c001ec36:	31 c0                	xor    eax,eax
c001ec38:	c3                   	ret    
c001ec39:	90                   	nop

c001ec3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ec3a:	60                   	pusha  
c001ec3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ec47:	9c                   	pushf  
c001ec48:	fa                   	cli    
c001ec49:	0f 09                	wbinvd 
c001ec4b:	0f 30                	wrmsr  
c001ec4d:	9d                   	popf   
c001ec4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec52:	89 02                	mov    DWORD PTR [edx],eax
c001ec54:	61                   	popa   
c001ec55:	c3                   	ret    

c001ec56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ec56:	60                   	pusha  
c001ec57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec5b:	9c                   	pushf  
c001ec5c:	fa                   	cli    
c001ec5d:	0f 09                	wbinvd 
c001ec5f:	31 c0                	xor    eax,eax
c001ec61:	31 d2                	xor    edx,edx
c001ec63:	0f 32                	rdmsr  
c001ec65:	9d                   	popf   
c001ec66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec6a:	89 02                	mov    DWORD PTR [edx],eax
c001ec6c:	61                   	popa   
c001ec6d:	c3                   	ret    

c001ec6e <CPU::AMD_K6_writeback(int, int, int)>:
c001ec6e:	56                   	push   esi
c001ec6f:	53                   	push   ebx
c001ec70:	83 ec 10             	sub    esp,0x10
c001ec73:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ec78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec7c:	75 5d                	jne    c001ecdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec7e:	83 f8 08             	cmp    eax,0x8
c001ec81:	75 09                	jne    c001ec8c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ec83:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ec88:	7e 13                	jle    c001ec9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ec8a:	eb 30                	jmp    c001ecbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ec8c:	83 f8 06             	cmp    eax,0x6
c001ec8f:	7c 4a                	jl     c001ecdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec91:	83 f8 07             	cmp    eax,0x7
c001ec94:	7e 07                	jle    c001ec9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ec96:	83 f8 09             	cmp    eax,0x9
c001ec99:	74 21                	je     c001ecbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ec9b:	eb 3e                	jmp    c001ecdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec9d:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001eca3:	89 e6                	mov    esi,esp
c001eca5:	56                   	push   esi
c001eca6:	68 82 00 00 c0       	push   0xc0000082
c001ecab:	e8 a6 ff ff ff       	call   c001ec56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ecb0:	c1 eb 15             	shr    ebx,0x15
c001ecb3:	56                   	push   esi
c001ecb4:	83 e3 7e             	and    ebx,0x7e
c001ecb7:	6a 00                	push   0x0
c001ecb9:	53                   	push   ebx
c001ecba:	eb 12                	jmp    c001ecce <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ecbc:	89 e3                	mov    ebx,esp
c001ecbe:	53                   	push   ebx
c001ecbf:	68 82 00 00 c0       	push   0xc0000082
c001ecc4:	e8 8d ff ff ff       	call   c001ec56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ecc9:	53                   	push   ebx
c001ecca:	6a 00                	push   0x0
c001eccc:	6a 00                	push   0x0
c001ecce:	68 82 00 00 c0       	push   0xc0000082
c001ecd3:	e8 62 ff ff ff       	call   c001ec3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001ecd8:	83 c4 18             	add    esp,0x18
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	5b                   	pop    ebx
c001ecdf:	5e                   	pop    esi
c001ece0:	c3                   	ret    
c001ece1:	90                   	nop

c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001ece2:	55                   	push   ebp
c001ece3:	57                   	push   edi
c001ece4:	56                   	push   esi
c001ece5:	53                   	push   ebx
c001ece6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecea:	39 05 58 38 03 c0    	cmp    DWORD PTR ds:0xc0033858,eax
c001ecf0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ecf4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ecf8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ecfc:	75 23                	jne    c001ed21 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ecfe:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ed03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed07:	89 06                	mov    DWORD PTR [esi],eax
c001ed09:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ed0e:	89 07                	mov    DWORD PTR [edi],eax
c001ed10:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001ed15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ed18:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ed1d:	89 02                	mov    DWORD PTR [edx],eax
c001ed1f:	eb 3f                	jmp    c001ed60 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ed21:	31 c9                	xor    ecx,ecx
c001ed23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed27:	0f a2                	cpuid  
c001ed29:	89 06                	mov    DWORD PTR [esi],eax
c001ed2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ed2f:	89 1f                	mov    DWORD PTR [edi],ebx
c001ed31:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ed34:	89 10                	mov    DWORD PTR [eax],edx
c001ed36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed3a:	a3 58 38 03 c0       	mov    ds:0xc0033858,eax
c001ed3f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ed41:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ed46:	8b 07                	mov    eax,DWORD PTR [edi]
c001ed48:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ed4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ed50:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ed55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ed59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed5b:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ed60:	5b                   	pop    ebx
c001ed61:	5e                   	pop    esi
c001ed62:	5f                   	pop    edi
c001ed63:	5d                   	pop    ebp
c001ed64:	c3                   	ret    
c001ed65:	90                   	nop

c001ed66 <CPU::cpuidCheckEDX(unsigned int)>:
c001ed66:	83 ec 10             	sub    esp,0x10
c001ed69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed6d:	50                   	push   eax
c001ed6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed72:	50                   	push   eax
c001ed73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed77:	50                   	push   eax
c001ed78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed7c:	50                   	push   eax
c001ed7d:	6a 01                	push   0x1
c001ed7f:	e8 5e ff ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ed84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ed88:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ed8c:	0f 95 c0             	setne  al
c001ed8f:	83 c4 24             	add    esp,0x24
c001ed92:	c3                   	ret    
c001ed93:	90                   	nop

c001ed94 <CPU::cpuidCheckECX(unsigned int)>:
c001ed94:	83 ec 10             	sub    esp,0x10
c001ed97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed9b:	50                   	push   eax
c001ed9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eda0:	50                   	push   eax
c001eda1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eda5:	50                   	push   eax
c001eda6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edaa:	50                   	push   eax
c001edab:	6a 01                	push   0x1
c001edad:	e8 30 ff ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001edb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001edb6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001edba:	0f 95 c0             	setne  al
c001edbd:	83 c4 24             	add    esp,0x24
c001edc0:	c3                   	ret    
c001edc1:	90                   	nop

c001edc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001edc2:	83 ec 10             	sub    esp,0x10
c001edc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edc9:	50                   	push   eax
c001edca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edce:	50                   	push   eax
c001edcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edd3:	50                   	push   eax
c001edd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edd8:	50                   	push   eax
c001edd9:	6a 07                	push   0x7
c001eddb:	e8 02 ff ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ede0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ede4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001ede8:	0f 95 c0             	setne  al
c001edeb:	83 c4 24             	add    esp,0x24
c001edee:	c3                   	ret    
c001edef:	90                   	nop

c001edf0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001edf0:	83 ec 10             	sub    esp,0x10
c001edf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edf7:	50                   	push   eax
c001edf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edfc:	50                   	push   eax
c001edfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee01:	50                   	push   eax
c001ee02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee06:	50                   	push   eax
c001ee07:	6a 07                	push   0x7
c001ee09:	e8 d4 fe ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ee0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee12:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ee16:	0f 95 c0             	setne  al
c001ee19:	83 c4 24             	add    esp,0x24
c001ee1c:	c3                   	ret    
c001ee1d:	90                   	nop

c001ee1e <CPU::CPU()>:
c001ee1e:	83 ec 0c             	sub    esp,0xc
c001ee21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee25:	83 ec 08             	sub    esp,0x8
c001ee28:	68 65 23 03 c0       	push   0xc0032365
c001ee2d:	50                   	push   eax
c001ee2e:	e8 8b c5 ff ff       	call   c001b3be <Device::Device(char const*)>
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	ba f8 23 03 c0       	mov    edx,0xc00323f8
c001ee3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3f:	89 10                	mov    DWORD PTR [eax],edx
c001ee41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee45:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ee4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee53:	05 78 01 00 00       	add    eax,0x178
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	50                   	push   eax
c001ee5c:	e8 d9 6d ff ff       	call   c0015c3a <GDT::GDT()>
c001ee61:	83 c4 10             	add    esp,0x10
c001ee64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee68:	05 7c 09 00 00       	add    eax,0x97c
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	50                   	push   eax
c001ee71:	e8 12 70 ff ff       	call   c0015e88 <IDT::IDT()>
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7d:	05 7c 11 00 00       	add    eax,0x117c
c001ee82:	83 ec 0c             	sub    esp,0xc
c001ee85:	50                   	push   eax
c001ee86:	e8 5d 89 ff ff       	call   c00177e8 <TSS::TSS()>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee92:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001ee99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001eea7:	90                   	nop
c001eea8:	83 c4 0c             	add    esp,0xc
c001eeab:	c3                   	ret    

c001eeac <CPU::displayFeatures()>:
c001eeac:	c3                   	ret    
c001eead:	90                   	nop

c001eeae <CPU::detectFeatures()>:
c001eeae:	55                   	push   ebp
c001eeaf:	57                   	push   edi
c001eeb0:	56                   	push   esi
c001eeb1:	53                   	push   ebx
c001eeb2:	83 ec 30             	sub    esp,0x30
c001eeb5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001eeb9:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001eec3:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001eec9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001eed0:	6a 0d                	push   0xd
c001eed2:	6a 00                	push   0x0
c001eed4:	55                   	push   ebp
c001eed5:	e8 16 16 fe ff       	call   c00004f0 <memset>
c001eeda:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001eee9:	0f 84 db 05 00 00    	je     c001f4ca <CPU::detectFeatures()+0x61c>
c001eeef:	83 ec 0c             	sub    esp,0xc
c001eef2:	89 ef                	mov    edi,ebp
c001eef4:	6a 10                	push   0x10
c001eef6:	e8 6b fe ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001eefb:	83 e0 01             	and    eax,0x1
c001eefe:	8d 14 00             	lea    edx,[eax+eax*1]
c001ef01:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef07:	83 e0 fd             	and    eax,0xfffffffd
c001ef0a:	09 d0                	or     eax,edx
c001ef0c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef12:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001ef19:	e8 48 fe ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001ef1e:	83 e0 01             	and    eax,0x1
c001ef21:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001ef28:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef2e:	83 e0 fb             	and    eax,0xfffffffb
c001ef31:	09 d0                	or     eax,edx
c001ef33:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ef40:	e8 21 fe ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001ef45:	83 e0 01             	and    eax,0x1
c001ef48:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001ef4f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef55:	83 e0 f7             	and    eax,0xfffffff7
c001ef58:	09 d0                	or     eax,edx
c001ef5a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef60:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001ef67:	e8 fa fd ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001ef6c:	83 e0 01             	and    eax,0x1
c001ef6f:	c1 e0 04             	shl    eax,0x4
c001ef72:	89 c2                	mov    edx,eax
c001ef74:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef7a:	83 e0 ef             	and    eax,0xffffffef
c001ef7d:	09 d0                	or     eax,edx
c001ef7f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef85:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001ef8c:	e8 d5 fd ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001ef91:	83 e0 01             	and    eax,0x1
c001ef94:	c1 e0 05             	shl    eax,0x5
c001ef97:	89 c2                	mov    edx,eax
c001ef99:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef9f:	83 e0 df             	and    eax,0xffffffdf
c001efa2:	09 d0                	or     eax,edx
c001efa4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001efaa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001efb1:	e8 b0 fd ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001efb6:	83 e0 01             	and    eax,0x1
c001efb9:	8d 14 00             	lea    edx,[eax+eax*1]
c001efbc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001efc2:	83 e0 fd             	and    eax,0xfffffffd
c001efc5:	09 d0                	or     eax,edx
c001efc7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001efcd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001efd4:	e8 8d fd ff ff       	call   c001ed66 <CPU::cpuidCheckEDX(unsigned int)>
c001efd9:	83 e0 01             	and    eax,0x1
c001efdc:	c1 e0 06             	shl    eax,0x6
c001efdf:	89 c2                	mov    edx,eax
c001efe1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001efe7:	83 e0 bf             	and    eax,0xffffffbf
c001efea:	09 d0                	or     eax,edx
c001efec:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001eff2:	58                   	pop    eax
c001eff3:	8d 44 24 28          	lea    eax,[esp+0x28]
c001eff7:	50                   	push   eax
c001eff8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001effc:	50                   	push   eax
c001effd:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f001:	56                   	push   esi
c001f002:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f006:	50                   	push   eax
c001f007:	6a 00                	push   0x0
c001f009:	e8 d4 fc ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f00e:	b8 04 00 00 00       	mov    eax,0x4
c001f013:	89 c1                	mov    ecx,eax
c001f015:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f017:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f01d:	89 c1                	mov    ecx,eax
c001f01f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f023:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f025:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f02b:	89 c1                	mov    ecx,eax
c001f02d:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f033:	83 c4 18             	add    esp,0x18
c001f036:	68 74 22 03 c0       	push   0xc0032274
c001f03b:	55                   	push   ebp
c001f03c:	e8 3f 17 fe ff       	call   c0000780 <strcmp>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	85 c0                	test   eax,eax
c001f046:	75 0f                	jne    c001f057 <CPU::detectFeatures()+0x1a9>
c001f048:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f052:	e9 22 02 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f057:	50                   	push   eax
c001f058:	50                   	push   eax
c001f059:	68 81 22 03 c0       	push   0xc0032281
c001f05e:	55                   	push   ebp
c001f05f:	e8 1c 17 fe ff       	call   c0000780 <strcmp>
c001f064:	83 c4 10             	add    esp,0x10
c001f067:	85 c0                	test   eax,eax
c001f069:	74 dd                	je     c001f048 <CPU::detectFeatures()+0x19a>
c001f06b:	50                   	push   eax
c001f06c:	50                   	push   eax
c001f06d:	68 8e 22 03 c0       	push   0xc003228e
c001f072:	55                   	push   ebp
c001f073:	e8 08 17 fe ff       	call   c0000780 <strcmp>
c001f078:	83 c4 10             	add    esp,0x10
c001f07b:	85 c0                	test   eax,eax
c001f07d:	74 2a                	je     c001f0a9 <CPU::detectFeatures()+0x1fb>
c001f07f:	50                   	push   eax
c001f080:	50                   	push   eax
c001f081:	68 9b 22 03 c0       	push   0xc003229b
c001f086:	55                   	push   ebp
c001f087:	e8 f4 16 fe ff       	call   c0000780 <strcmp>
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	85 c0                	test   eax,eax
c001f091:	74 16                	je     c001f0a9 <CPU::detectFeatures()+0x1fb>
c001f093:	50                   	push   eax
c001f094:	50                   	push   eax
c001f095:	68 a8 22 03 c0       	push   0xc00322a8
c001f09a:	55                   	push   ebp
c001f09b:	e8 e0 16 fe ff       	call   c0000780 <strcmp>
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	85 c0                	test   eax,eax
c001f0a5:	74 48                	je     c001f0ef <CPU::detectFeatures()+0x241>
c001f0a7:	eb 0f                	jmp    c001f0b8 <CPU::detectFeatures()+0x20a>
c001f0a9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f0b3:	e9 c1 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f0b8:	50                   	push   eax
c001f0b9:	50                   	push   eax
c001f0ba:	68 b5 22 03 c0       	push   0xc00322b5
c001f0bf:	55                   	push   ebp
c001f0c0:	e8 bb 16 fe ff       	call   c0000780 <strcmp>
c001f0c5:	83 c4 10             	add    esp,0x10
c001f0c8:	85 c0                	test   eax,eax
c001f0ca:	74 23                	je     c001f0ef <CPU::detectFeatures()+0x241>
c001f0cc:	57                   	push   edi
c001f0cd:	57                   	push   edi
c001f0ce:	68 c2 22 03 c0       	push   0xc00322c2
c001f0d3:	55                   	push   ebp
c001f0d4:	e8 a7 16 fe ff       	call   c0000780 <strcmp>
c001f0d9:	83 c4 10             	add    esp,0x10
c001f0dc:	85 c0                	test   eax,eax
c001f0de:	75 1e                	jne    c001f0fe <CPU::detectFeatures()+0x250>
c001f0e0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f0ea:	e9 8a 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f0ef:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f0f9:	e9 7b 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f0fe:	56                   	push   esi
c001f0ff:	56                   	push   esi
c001f100:	68 cf 22 03 c0       	push   0xc00322cf
c001f105:	55                   	push   ebp
c001f106:	e8 75 16 fe ff       	call   c0000780 <strcmp>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	85 c0                	test   eax,eax
c001f110:	75 0f                	jne    c001f121 <CPU::detectFeatures()+0x273>
c001f112:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f11c:	e9 58 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f121:	51                   	push   ecx
c001f122:	51                   	push   ecx
c001f123:	68 8e 22 03 c0       	push   0xc003228e
c001f128:	55                   	push   ebp
c001f129:	e8 52 16 fe ff       	call   c0000780 <strcmp>
c001f12e:	83 c4 10             	add    esp,0x10
c001f131:	85 c0                	test   eax,eax
c001f133:	75 0f                	jne    c001f144 <CPU::detectFeatures()+0x296>
c001f135:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f13f:	e9 35 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f144:	52                   	push   edx
c001f145:	52                   	push   edx
c001f146:	68 dc 22 03 c0       	push   0xc00322dc
c001f14b:	55                   	push   ebp
c001f14c:	e8 2f 16 fe ff       	call   c0000780 <strcmp>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	85 c0                	test   eax,eax
c001f156:	75 0f                	jne    c001f167 <CPU::detectFeatures()+0x2b9>
c001f158:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f162:	e9 12 01 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f167:	50                   	push   eax
c001f168:	50                   	push   eax
c001f169:	68 e9 22 03 c0       	push   0xc00322e9
c001f16e:	55                   	push   ebp
c001f16f:	e8 0c 16 fe ff       	call   c0000780 <strcmp>
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	85 c0                	test   eax,eax
c001f179:	75 0f                	jne    c001f18a <CPU::detectFeatures()+0x2dc>
c001f17b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f185:	e9 ef 00 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f18a:	50                   	push   eax
c001f18b:	50                   	push   eax
c001f18c:	68 f6 22 03 c0       	push   0xc00322f6
c001f191:	55                   	push   ebp
c001f192:	e8 e9 15 fe ff       	call   c0000780 <strcmp>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	85 c0                	test   eax,eax
c001f19c:	75 0f                	jne    c001f1ad <CPU::detectFeatures()+0x2ff>
c001f19e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f1a8:	e9 cc 00 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f1ad:	50                   	push   eax
c001f1ae:	50                   	push   eax
c001f1af:	68 03 23 03 c0       	push   0xc0032303
c001f1b4:	55                   	push   ebp
c001f1b5:	e8 c6 15 fe ff       	call   c0000780 <strcmp>
c001f1ba:	83 c4 10             	add    esp,0x10
c001f1bd:	85 c0                	test   eax,eax
c001f1bf:	75 0f                	jne    c001f1d0 <CPU::detectFeatures()+0x322>
c001f1c1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f1cb:	e9 a9 00 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f1d0:	50                   	push   eax
c001f1d1:	50                   	push   eax
c001f1d2:	68 10 23 03 c0       	push   0xc0032310
c001f1d7:	55                   	push   ebp
c001f1d8:	e8 a3 15 fe ff       	call   c0000780 <strcmp>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	85 c0                	test   eax,eax
c001f1e2:	75 0f                	jne    c001f1f3 <CPU::detectFeatures()+0x345>
c001f1e4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f1ee:	e9 86 00 00 00       	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f1f3:	50                   	push   eax
c001f1f4:	50                   	push   eax
c001f1f5:	68 1d 23 03 c0       	push   0xc003231d
c001f1fa:	55                   	push   ebp
c001f1fb:	e8 80 15 fe ff       	call   c0000780 <strcmp>
c001f200:	83 c4 10             	add    esp,0x10
c001f203:	85 c0                	test   eax,eax
c001f205:	75 0c                	jne    c001f213 <CPU::detectFeatures()+0x365>
c001f207:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f211:	eb 66                	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f213:	50                   	push   eax
c001f214:	50                   	push   eax
c001f215:	68 2a 23 03 c0       	push   0xc003232a
c001f21a:	55                   	push   ebp
c001f21b:	e8 60 15 fe ff       	call   c0000780 <strcmp>
c001f220:	83 c4 10             	add    esp,0x10
c001f223:	85 c0                	test   eax,eax
c001f225:	75 0c                	jne    c001f233 <CPU::detectFeatures()+0x385>
c001f227:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f231:	eb 46                	jmp    c001f279 <CPU::detectFeatures()+0x3cb>
c001f233:	57                   	push   edi
c001f234:	57                   	push   edi
c001f235:	68 37 23 03 c0       	push   0xc0032337
c001f23a:	55                   	push   ebp
c001f23b:	e8 40 15 fe ff       	call   c0000780 <strcmp>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	85 c0                	test   eax,eax
c001f245:	74 e0                	je     c001f227 <CPU::detectFeatures()+0x379>
c001f247:	56                   	push   esi
c001f248:	56                   	push   esi
c001f249:	68 44 23 03 c0       	push   0xc0032344
c001f24e:	55                   	push   ebp
c001f24f:	e8 2c 15 fe ff       	call   c0000780 <strcmp>
c001f254:	83 c4 10             	add    esp,0x10
c001f257:	85 c0                	test   eax,eax
c001f259:	74 cc                	je     c001f227 <CPU::detectFeatures()+0x379>
c001f25b:	51                   	push   ecx
c001f25c:	51                   	push   ecx
c001f25d:	68 51 23 03 c0       	push   0xc0032351
c001f262:	55                   	push   ebp
c001f263:	e8 18 15 fe ff       	call   c0000780 <strcmp>
c001f268:	83 c4 10             	add    esp,0x10
c001f26b:	85 c0                	test   eax,eax
c001f26d:	74 b8                	je     c001f227 <CPU::detectFeatures()+0x379>
c001f26f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f279:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f27e:	0f 86 be 00 00 00    	jbe    c001f342 <CPU::detectFeatures()+0x494>
c001f284:	83 ec 0c             	sub    esp,0xc
c001f287:	68 80 00 00 00       	push   0x80
c001f28c:	e8 31 fb ff ff       	call   c001edc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f291:	83 e0 01             	and    eax,0x1
c001f294:	c1 e0 06             	shl    eax,0x6
c001f297:	89 c2                	mov    edx,eax
c001f299:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f29f:	83 e0 bf             	and    eax,0xffffffbf
c001f2a2:	09 d0                	or     eax,edx
c001f2a4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f2aa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f2b1:	e8 0c fb ff ff       	call   c001edc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f2b6:	83 e0 01             	and    eax,0x1
c001f2b9:	c1 e0 04             	shl    eax,0x4
c001f2bc:	89 c2                	mov    edx,eax
c001f2be:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f2c4:	83 e0 ef             	and    eax,0xffffffef
c001f2c7:	09 d0                	or     eax,edx
c001f2c9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f2cf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f2d6:	e8 e7 fa ff ff       	call   c001edc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f2db:	89 c2                	mov    edx,eax
c001f2dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f2e3:	c1 e2 07             	shl    edx,0x7
c001f2e6:	83 e0 7f             	and    eax,0x7f
c001f2e9:	09 d0                	or     eax,edx
c001f2eb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f2f1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f2f8:	e8 f3 fa ff ff       	call   c001edf0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f2fd:	83 e0 01             	and    eax,0x1
c001f300:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f307:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f30d:	83 e0 f7             	and    eax,0xfffffff7
c001f310:	09 d0                	or     eax,edx
c001f312:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f318:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f31f:	e8 cc fa ff ff       	call   c001edf0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	83 e0 01             	and    eax,0x1
c001f32a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f331:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f337:	83 e0 fb             	and    eax,0xfffffffb
c001f33a:	09 d0                	or     eax,edx
c001f33c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f342:	83 ec 0c             	sub    esp,0xc
c001f345:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f349:	50                   	push   eax
c001f34a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f34e:	50                   	push   eax
c001f34f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f353:	57                   	push   edi
c001f354:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f358:	56                   	push   esi
c001f359:	6a 01                	push   0x1
c001f35b:	e8 82 f9 ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f364:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f36a:	89 c1                	mov    ecx,eax
c001f36c:	83 e1 0f             	and    ecx,0xf
c001f36f:	83 e2 f0             	and    edx,0xfffffff0
c001f372:	09 ca                	or     edx,ecx
c001f374:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f37a:	89 c2                	mov    edx,eax
c001f37c:	c1 ea 04             	shr    edx,0x4
c001f37f:	83 e2 0f             	and    edx,0xf
c001f382:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f386:	89 d1                	mov    ecx,edx
c001f388:	83 c4 20             	add    esp,0x20
c001f38b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f391:	c1 e1 06             	shl    ecx,0x6
c001f394:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f39a:	09 ca                	or     edx,ecx
c001f39c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f3a3:	89 c2                	mov    edx,eax
c001f3a5:	c1 ea 08             	shr    edx,0x8
c001f3a8:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f3ae:	83 e2 0f             	and    edx,0xf
c001f3b1:	89 d5                	mov    ebp,edx
c001f3b3:	83 e5 03             	and    ebp,0x3
c001f3b6:	c1 e5 06             	shl    ebp,0x6
c001f3b9:	83 e1 3f             	and    ecx,0x3f
c001f3bc:	09 e9                	or     ecx,ebp
c001f3be:	89 d5                	mov    ebp,edx
c001f3c0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f3c6:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f3cc:	c1 ed 02             	shr    ebp,0x2
c001f3cf:	83 e1 c0             	and    ecx,0xffffffc0
c001f3d2:	09 e9                	or     ecx,ebp
c001f3d4:	89 c5                	mov    ebp,eax
c001f3d6:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f3dc:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f3e2:	c1 ed 08             	shr    ebp,0x8
c001f3e5:	83 e5 30             	and    ebp,0x30
c001f3e8:	83 e1 cf             	and    ecx,0xffffffcf
c001f3eb:	09 e9                	or     ecx,ebp
c001f3ed:	83 fa 06             	cmp    edx,0x6
c001f3f0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f3f6:	74 05                	je     c001f3fd <CPU::detectFeatures()+0x54f>
c001f3f8:	83 fa 0f             	cmp    edx,0xf
c001f3fb:	75 64                	jne    c001f461 <CPU::detectFeatures()+0x5b3>
c001f3fd:	89 c1                	mov    ecx,eax
c001f3ff:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f405:	c1 e9 10             	shr    ecx,0x10
c001f408:	c1 e1 04             	shl    ecx,0x4
c001f40b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f40f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f415:	0f b6 c9             	movzx  ecx,cl
c001f418:	c1 e1 06             	shl    ecx,0x6
c001f41b:	09 e9                	or     ecx,ebp
c001f41d:	83 fa 0f             	cmp    edx,0xf
c001f420:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f427:	75 38                	jne    c001f461 <CPU::detectFeatures()+0x5b3>
c001f429:	c1 e8 14             	shr    eax,0x14
c001f42c:	83 c0 0f             	add    eax,0xf
c001f42f:	0f b6 c0             	movzx  eax,al
c001f432:	89 c2                	mov    edx,eax
c001f434:	c1 e8 02             	shr    eax,0x2
c001f437:	83 e2 03             	and    edx,0x3
c001f43a:	89 d1                	mov    ecx,edx
c001f43c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f442:	c1 e1 06             	shl    ecx,0x6
c001f445:	83 e2 3f             	and    edx,0x3f
c001f448:	09 ca                	or     edx,ecx
c001f44a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f450:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f456:	83 e2 c0             	and    edx,0xffffffc0
c001f459:	09 d0                	or     eax,edx
c001f45b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f461:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f467:	83 ec 0c             	sub    esp,0xc
c001f46a:	83 c8 07             	or     eax,0x7
c001f46d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f473:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f477:	50                   	push   eax
c001f478:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f47c:	55                   	push   ebp
c001f47d:	57                   	push   edi
c001f47e:	56                   	push   esi
c001f47f:	68 00 00 00 80       	push   0x80000000
c001f484:	e8 59 f8 ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f489:	83 c4 20             	add    esp,0x20
c001f48c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f494:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f498:	76 1e                	jbe    c001f4b8 <CPU::detectFeatures()+0x60a>
c001f49a:	83 ec 0c             	sub    esp,0xc
c001f49d:	50                   	push   eax
c001f49e:	55                   	push   ebp
c001f49f:	57                   	push   edi
c001f4a0:	56                   	push   esi
c001f4a1:	68 01 00 00 80       	push   0x80000001
c001f4a6:	e8 37 f8 ff ff       	call   c001ece2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f4ab:	83 c4 20             	add    esp,0x20
c001f4ae:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f4b8:	52                   	push   edx
c001f4b9:	52                   	push   edx
c001f4ba:	68 5d 23 03 c0       	push   0xc003235d
c001f4bf:	53                   	push   ebx
c001f4c0:	e8 eb be ff ff       	call   c001b3b0 <Device::setName(char const*)>
c001f4c5:	83 c4 10             	add    esp,0x10
c001f4c8:	eb 69                	jmp    c001f533 <CPU::detectFeatures()+0x685>
c001f4ca:	50                   	push   eax
c001f4cb:	50                   	push   eax
c001f4cc:	68 c2 22 03 c0       	push   0xc00322c2
c001f4d1:	55                   	push   ebp
c001f4d2:	e8 79 11 fe ff       	call   c0000650 <strcpy>
c001f4d7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f4e1:	e8 dd 0c fe ff       	call   c00001c3 <is486>
c001f4e6:	83 c4 10             	add    esp,0x10
c001f4e9:	85 c0                	test   eax,eax
c001f4eb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4f1:	74 1f                	je     c001f512 <CPU::detectFeatures()+0x664>
c001f4f3:	83 c8 07             	or     eax,0x7
c001f4f6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4fc:	0f 20 c0             	mov    eax,cr0
c001f4ff:	83 e0 14             	and    eax,0x14
c001f502:	83 f8 04             	cmp    eax,0x4
c001f505:	75 10                	jne    c001f517 <CPU::detectFeatures()+0x669>
c001f507:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f50d:	83 e0 fd             	and    eax,0xfffffffd
c001f510:	eb 1b                	jmp    c001f52d <CPU::detectFeatures()+0x67f>
c001f512:	83 e0 f8             	and    eax,0xfffffff8
c001f515:	eb df                	jmp    c001f4f6 <CPU::detectFeatures()+0x648>
c001f517:	e8 82 0c fe ff       	call   c000019e <hasLegacyFPU>
c001f51c:	83 e0 01             	and    eax,0x1
c001f51f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f522:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f528:	83 e0 fd             	and    eax,0xfffffffd
c001f52b:	09 d0                	or     eax,edx
c001f52d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f533:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f53a:	74 17                	je     c001f553 <CPU::detectFeatures()+0x6a5>
c001f53c:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f542:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f548:	83 c8 10             	or     eax,0x10
c001f54b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f551:	eb 20                	jmp    c001f573 <CPU::detectFeatures()+0x6c5>
c001f553:	e8 46 0c fe ff       	call   c000019e <hasLegacyFPU>
c001f558:	83 e0 01             	and    eax,0x1
c001f55b:	8d 14 00             	lea    edx,[eax+eax*1]
c001f55e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f564:	83 e0 fd             	and    eax,0xfffffffd
c001f567:	09 d0                	or     eax,edx
c001f569:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f56f:	a8 02                	test   al,0x2
c001f571:	75 c9                	jne    c001f53c <CPU::detectFeatures()+0x68e>
c001f573:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f57a:	83 c4 2c             	add    esp,0x2c
c001f57d:	5b                   	pop    ebx
c001f57e:	5e                   	pop    esi
c001f57f:	5f                   	pop    edi
c001f580:	5d                   	pop    ebp
c001f581:	c3                   	ret    

c001f582 <CPU::setupSMEP()>:
c001f582:	0f 20 e0             	mov    eax,cr4
c001f585:	0d 00 00 10 00       	or     eax,0x100000
c001f58a:	0f 22 e0             	mov    cr4,eax
c001f58d:	c3                   	ret    

c001f58e <CPU::setupUMIP()>:
c001f58e:	0f 20 e0             	mov    eax,cr4
c001f591:	80 cc 08             	or     ah,0x8
c001f594:	0f 22 e0             	mov    cr4,eax
c001f597:	c3                   	ret    

c001f598 <CPU::setupTSC()>:
c001f598:	0f 20 e0             	mov    eax,cr4
c001f59b:	83 c8 04             	or     eax,0x4
c001f59e:	0f 22 e0             	mov    cr4,eax
c001f5a1:	c3                   	ret    

c001f5a2 <CPU::setupLargePages()>:
c001f5a2:	0f 20 e0             	mov    eax,cr4
c001f5a5:	83 c8 10             	or     eax,0x10
c001f5a8:	0f 22 e0             	mov    cr4,eax
c001f5ab:	c3                   	ret    

c001f5ac <CPU::setupPAT()>:
c001f5ac:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f5b1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f5b8:	74 2c                	je     c001f5e6 <CPU::setupPAT()+0x3a>
c001f5ba:	53                   	push   ebx
c001f5bb:	83 ec 10             	sub    esp,0x10
c001f5be:	68 77 02 00 00       	push   0x277
c001f5c3:	50                   	push   eax
c001f5c4:	e8 d7 63 ff ff       	call   c00159a0 <Computer::rdmsr(unsigned int)>
c001f5c9:	83 e2 f8             	and    edx,0xfffffff8
c001f5cc:	83 ca 01             	or     edx,0x1
c001f5cf:	52                   	push   edx
c001f5d0:	50                   	push   eax
c001f5d1:	68 77 02 00 00       	push   0x277
c001f5d6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f5dc:	e8 eb 63 ff ff       	call   c00159cc <Computer::wrmsr(unsigned int, unsigned long long)>
c001f5e1:	83 c4 28             	add    esp,0x28
c001f5e4:	5b                   	pop    ebx
c001f5e5:	c3                   	ret    
c001f5e6:	c3                   	ret    
c001f5e7:	90                   	nop

c001f5e8 <CPU::setupMTRR()>:
c001f5e8:	c3                   	ret    
c001f5e9:	90                   	nop

c001f5ea <CPU::setupGlobalPages()>:
c001f5ea:	0f 20 e0             	mov    eax,cr4
c001f5ed:	0c 80                	or     al,0x80
c001f5ef:	0f 22 e0             	mov    cr4,eax
c001f5f2:	c3                   	ret    
c001f5f3:	90                   	nop

c001f5f4 <CPU::allowUsermodeDataAccess()>:
c001f5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5f8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f5ff:	74 03                	je     c001f604 <CPU::allowUsermodeDataAccess()+0x10>
c001f601:	0f 01 cb             	stac   
c001f604:	c3                   	ret    
c001f605:	90                   	nop

c001f606 <CPU::prohibitUsermodeDataAccess()>:
c001f606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f60a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f611:	74 03                	je     c001f616 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f613:	0f 01 ca             	clac   
c001f616:	c3                   	ret    
c001f617:	90                   	nop

c001f618 <CPU::setupSMAP()>:
c001f618:	0f 20 e0             	mov    eax,cr4
c001f61b:	0d 00 00 20 00       	or     eax,0x200000
c001f620:	0f 22 e0             	mov    cr4,eax
c001f623:	eb e1                	jmp    c001f606 <CPU::prohibitUsermodeDataAccess()>
c001f625:	90                   	nop

c001f626 <CPU::setupFeatures()>:
c001f626:	53                   	push   ebx
c001f627:	83 ec 08             	sub    esp,0x8
c001f62a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f62e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f635:	74 18                	je     c001f64f <CPU::setupFeatures()+0x29>
c001f637:	83 ec 0c             	sub    esp,0xc
c001f63a:	68 69 23 03 c0       	push   0xc0032369
c001f63f:	e8 82 9b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f647:	e8 42 ff ff ff       	call   c001f58e <CPU::setupUMIP()>
c001f64c:	83 c4 10             	add    esp,0x10
c001f64f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f656:	74 18                	je     c001f670 <CPU::setupFeatures()+0x4a>
c001f658:	83 ec 0c             	sub    esp,0xc
c001f65b:	68 73 23 03 c0       	push   0xc0032373
c001f660:	e8 61 9b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f668:	e8 2b ff ff ff       	call   c001f598 <CPU::setupTSC()>
c001f66d:	83 c4 10             	add    esp,0x10
c001f670:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f677:	74 18                	je     c001f691 <CPU::setupFeatures()+0x6b>
c001f679:	83 ec 0c             	sub    esp,0xc
c001f67c:	68 7c 23 03 c0       	push   0xc003237c
c001f681:	e8 40 9b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f689:	e8 14 ff ff ff       	call   c001f5a2 <CPU::setupLargePages()>
c001f68e:	83 c4 10             	add    esp,0x10
c001f691:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f698:	74 18                	je     c001f6b2 <CPU::setupFeatures()+0x8c>
c001f69a:	83 ec 0c             	sub    esp,0xc
c001f69d:	68 85 23 03 c0       	push   0xc0032385
c001f6a2:	e8 1f 9b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f6a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f6aa:	e8 3b ff ff ff       	call   c001f5ea <CPU::setupGlobalPages()>
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f6b9:	74 18                	je     c001f6d3 <CPU::setupFeatures()+0xad>
c001f6bb:	83 ec 0c             	sub    esp,0xc
c001f6be:	68 97 23 03 c0       	push   0xc0032397
c001f6c3:	e8 fe 9a ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f6c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f6cb:	e8 dc fe ff ff       	call   c001f5ac <CPU::setupPAT()>
c001f6d0:	83 c4 10             	add    esp,0x10
c001f6d3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f6da:	74 11                	je     c001f6ed <CPU::setupFeatures()+0xc7>
c001f6dc:	c7 44 24 10 a0 23 03 c0 	mov    DWORD PTR [esp+0x10],0xc00323a0
c001f6e4:	83 c4 08             	add    esp,0x8
c001f6e7:	5b                   	pop    ebx
c001f6e8:	e9 d9 9a ff ff       	jmp    c00191c6 <Dbg::kprintf(char const*, ...)>
c001f6ed:	83 c4 08             	add    esp,0x8
c001f6f0:	5b                   	pop    ebx
c001f6f1:	c3                   	ret    

c001f6f2 <CPU::open(int, int, void*)>:
c001f6f2:	55                   	push   ebp
c001f6f3:	57                   	push   edi
c001f6f4:	56                   	push   esi
c001f6f5:	53                   	push   ebx
c001f6f6:	83 ec 18             	sub    esp,0x18
c001f6f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f6fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f701:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f705:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f70b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f711:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f717:	50                   	push   eax
c001f718:	e8 7f 65 ff ff       	call   c0015c9c <GDT::setup()>
c001f71d:	83 c4 0c             	add    esp,0xc
c001f720:	6a 00                	push   0x0
c001f722:	68 ef be ad de       	push   0xdeadbeef
c001f727:	55                   	push   ebp
c001f728:	e8 ff 80 ff ff       	call   c001782c <TSS::setup(unsigned long, unsigned long)>
c001f72d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f730:	e8 d7 80 ff ff       	call   c001780c <TSS::flush()>
c001f735:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f73b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73e:	e8 bb 67 ff ff       	call   c0015efe <IDT::setup()>
c001f743:	b8 00 04 00 00       	mov    eax,0x400
c001f748:	0f 23 f8             	mov    db7,eax
c001f74b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f755:	e8 44 6f ff ff       	call   c001669e <Phys::allocatePage()>
c001f75a:	83 c4 10             	add    esp,0x10
c001f75d:	85 f6                	test   esi,esi
c001f75f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f765:	89 38                	mov    DWORD PTR [eax],edi
c001f767:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f76d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f770:	74 10                	je     c001f782 <CPU::open(int, int, void*)+0x90>
c001f772:	50                   	push   eax
c001f773:	50                   	push   eax
c001f774:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f77a:	56                   	push   esi
c001f77b:	e8 c8 89 ff ff       	call   c0018148 <VAS::setCPUSpecific(unsigned long)>
c001f780:	eb 0d                	jmp    c001f78f <CPU::open(int, int, void*)+0x9d>
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	68 aa 23 03 c0       	push   0xc00323aa
c001f78a:	e8 e4 08 00 00       	call   c0020073 <KePanic(char const*)>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	83 ec 0c             	sub    esp,0xc
c001f795:	68 b8 23 03 c0       	push   0xc00323b8
c001f79a:	e8 8e 01 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001f79f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7a2:	e8 07 f7 ff ff       	call   c001eeae <CPU::detectFeatures()>
c001f7a7:	c7 04 24 db 23 03 c0 	mov    DWORD PTR [esp],0xc00323db
c001f7ae:	e8 7a 01 00 00       	call   c001f92d <KeSetBootMessage(char const*)>
c001f7b3:	e8 13 75 00 00       	call   c0026ccb <HalInitialise()>
c001f7b8:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f7bd:	83 e0 10             	and    eax,0x10
c001f7c0:	83 f8 01             	cmp    eax,0x1
c001f7c3:	19 c0                	sbb    eax,eax
c001f7c5:	83 e0 46             	and    eax,0x46
c001f7c8:	83 c0 1e             	add    eax,0x1e
c001f7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7ce:	e8 c6 d4 ff ff       	call   c001cc99 <setupTimer(int)>
c001f7d3:	83 c4 10             	add    esp,0x10
c001f7d6:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f7dd:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f7e3:	74 0c                	je     c001f7f1 <CPU::open(int, int, void*)+0xff>
c001f7e5:	83 ec 0c             	sub    esp,0xc
c001f7e8:	53                   	push   ebx
c001f7e9:	e8 38 fe ff ff       	call   c001f626 <CPU::setupFeatures()>
c001f7ee:	83 c4 10             	add    esp,0x10
c001f7f1:	83 c4 0c             	add    esp,0xc
c001f7f4:	31 c0                	xor    eax,eax
c001f7f6:	5b                   	pop    ebx
c001f7f7:	5e                   	pop    esi
c001f7f8:	5f                   	pop    edi
c001f7f9:	5d                   	pop    ebp
c001f7fa:	c3                   	ret    

c001f7fb <KeInitialiseAtexit()>:
c001f7fb:	83 ec 10             	sub    esp,0x10
c001f7fe:	6a 60                	push   0x60
c001f800:	6a 00                	push   0x0
c001f802:	68 20 f9 03 c0       	push   0xc003f920
c001f807:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f811:	e8 da 0c fe ff       	call   c00004f0 <memset>
c001f816:	83 c4 1c             	add    esp,0x1c
c001f819:	c3                   	ret    

c001f81a <KeRegisterAtexit(void (*)(void*), void*)>:
c001f81a:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f81f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f823:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f82a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f82e:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f835:	40                   	inc    eax
c001f836:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f83b:	83 f8 17             	cmp    eax,0x17
c001f83e:	7e 0d                	jle    c001f84d <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f840:	c7 44 24 04 1c 24 03 c0 	mov    DWORD PTR [esp+0x4],0xc003241c
c001f848:	e9 26 08 00 00       	jmp    c0020073 <KePanic(char const*)>
c001f84d:	c3                   	ret    

c001f84e <KeExecuteAtexit()>:
c001f84e:	53                   	push   ebx
c001f84f:	31 db                	xor    ebx,ebx
c001f851:	83 ec 08             	sub    esp,0x8
c001f854:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f85a:	7e 50                	jle    c001f8ac <KeExecuteAtexit()+0x5e>
c001f85c:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f863:	85 c0                	test   eax,eax
c001f865:	74 42                	je     c001f8a9 <KeExecuteAtexit()+0x5b>
c001f867:	51                   	push   ecx
c001f868:	50                   	push   eax
c001f869:	53                   	push   ebx
c001f86a:	68 35 24 03 c0       	push   0xc0032435
c001f86f:	e8 52 99 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f874:	58                   	pop    eax
c001f875:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f87c:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f883:	c7 04 24 57 24 03 c0 	mov    DWORD PTR [esp],0xc0032457
c001f88a:	e8 37 99 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f88f:	c7 04 24 03 36 03 c0 	mov    DWORD PTR [esp],0xc0033603
c001f896:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f8a1:	e8 20 99 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f8a6:	83 c4 10             	add    esp,0x10
c001f8a9:	43                   	inc    ebx
c001f8aa:	eb a8                	jmp    c001f854 <KeExecuteAtexit()+0x6>
c001f8ac:	83 c4 08             	add    esp,0x8
c001f8af:	5b                   	pop    ebx
c001f8b0:	c3                   	ret    

c001f8b1 <KeDisplaySplashScreen()>:
c001f8b1:	55                   	push   ebp
c001f8b2:	bd 05 00 00 00       	mov    ebp,0x5
c001f8b7:	57                   	push   edi
c001f8b8:	bf 0a 00 00 00       	mov    edi,0xa
c001f8bd:	56                   	push   esi
c001f8be:	31 f6                	xor    esi,esi
c001f8c0:	53                   	push   ebx
c001f8c1:	31 db                	xor    ebx,ebx
c001f8c3:	83 ec 0c             	sub    esp,0xc
c001f8c6:	0f b6 96 60 38 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc7a0]
c001f8cd:	85 d2                	test   edx,edx
c001f8cf:	89 d0                	mov    eax,edx
c001f8d1:	74 52                	je     c001f925 <KeDisplaySplashScreen()+0x74>
c001f8d3:	80 bb 96 38 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc76a],0xdb
c001f8da:	75 13                	jne    c001f8ef <KeDisplaySplashScreen()+0x3e>
c001f8dc:	0f b6 8b 95 38 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc76b]
c001f8e3:	83 e1 fe             	and    ecx,0xfffffffe
c001f8e6:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001f8ec:	75 01                	jne    c001f8ef <KeDisplaySplashScreen()+0x3e>
c001f8ee:	47                   	inc    edi
c001f8ef:	83 fa 0d             	cmp    edx,0xd
c001f8f2:	74 28                	je     c001f91c <KeDisplaySplashScreen()+0x6b>
c001f8f4:	83 fa 0a             	cmp    edx,0xa
c001f8f7:	75 0a                	jne    c001f903 <KeDisplaySplashScreen()+0x52>
c001f8f9:	45                   	inc    ebp
c001f8fa:	bf 0a 00 00 00       	mov    edi,0xa
c001f8ff:	31 db                	xor    ebx,ebx
c001f901:	eb 19                	jmp    c001f91c <KeDisplaySplashScreen()+0x6b>
c001f903:	83 ec 0c             	sub    esp,0xc
c001f906:	0f be c0             	movsx  eax,al
c001f909:	55                   	push   ebp
c001f90a:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001f90d:	43                   	inc    ebx
c001f90e:	52                   	push   edx
c001f90f:	6a 00                	push   0x0
c001f911:	6a 0e                	push   0xe
c001f913:	50                   	push   eax
c001f914:	e8 2f 80 00 00       	call   c0027948 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001f919:	83 c4 20             	add    esp,0x20
c001f91c:	46                   	inc    esi
c001f91d:	81 fe 42 01 00 00    	cmp    esi,0x142
c001f923:	75 a1                	jne    c001f8c6 <KeDisplaySplashScreen()+0x15>
c001f925:	83 c4 0c             	add    esp,0xc
c001f928:	5b                   	pop    ebx
c001f929:	5e                   	pop    esi
c001f92a:	5f                   	pop    edi
c001f92b:	5d                   	pop    ebp
c001f92c:	c3                   	ret    

c001f92d <KeSetBootMessage(char const*)>:
c001f92d:	57                   	push   edi
c001f92e:	56                   	push   esi
c001f92f:	53                   	push   ebx
c001f930:	81 ec a4 00 00 00    	sub    esp,0xa4
c001f936:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001f93d:	68 9e 00 00 00       	push   0x9e
c001f942:	6a 00                	push   0x0
c001f944:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f948:	56                   	push   esi
c001f949:	e8 a2 0b fe ff       	call   c00004f0 <memset>
c001f94e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f951:	e8 2a 0c fe ff       	call   c0000580 <strlen>
c001f956:	ba 50 00 00 00       	mov    edx,0x50
c001f95b:	83 c4 10             	add    esp,0x10
c001f95e:	31 c9                	xor    ecx,ecx
c001f960:	29 c2                	sub    edx,eax
c001f962:	83 e2 fe             	and    edx,0xfffffffe
c001f965:	01 f2                	add    edx,esi
c001f967:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001f96c:	84 c0                	test   al,al
c001f96e:	74 0a                	je     c001f97a <KeSetBootMessage(char const*)+0x4d>
c001f970:	80 cc 0f             	or     ah,0xf
c001f973:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001f977:	41                   	inc    ecx
c001f978:	eb ed                	jmp    c001f967 <KeSetBootMessage(char const*)+0x3a>
c001f97a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001f97f:	b9 9e 00 00 00       	mov    ecx,0x9e
c001f984:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f986:	81 c4 a0 00 00 00    	add    esp,0xa0
c001f98c:	5b                   	pop    ebx
c001f98d:	5e                   	pop    esi
c001f98e:	5f                   	pop    edi
c001f98f:	c3                   	ret    

c001f990 <CUnlockScheduler>:
c001f990:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f995:	83 e8 01             	sub    eax,0x1
c001f998:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001f99d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	75 02                	jne    c001f9a8 <CUnlockScheduler+0x18>
c001f9a6:	fb                   	sti    
c001f9a7:	90                   	nop
c001f9a8:	90                   	nop
c001f9a9:	c3                   	ret    
c001f9aa:	66 90                	xchg   ax,ax

c001f9ac <CLockScheduler>:
c001f9ac:	fa                   	cli    
c001f9ad:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f9b2:	83 c0 01             	add    eax,0x1
c001f9b5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001f9ba:	90                   	nop
c001f9bb:	c3                   	ret    

c001f9bc <CPrintf>:
c001f9bc:	83 ec 0c             	sub    esp,0xc
c001f9bf:	83 ec 08             	sub    esp,0x8
c001f9c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f9c6:	68 f0 f6 02 c0       	push   0xc002f6f0
c001f9cb:	e8 f6 97 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c001f9d0:	83 c4 10             	add    esp,0x10
c001f9d3:	90                   	nop
c001f9d4:	83 c4 0c             	add    esp,0xc
c001f9d7:	c3                   	ret    

c001f9d8 <Krnl::handlePowerButton()>:
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	e8 ee 06 00 00       	call   c00200ce <KeHandlePowerButton()>
c001f9e0:	90                   	nop
c001f9e1:	83 c4 0c             	add    esp,0xc
c001f9e4:	c3                   	ret    
c001f9e5:	8d 76 00             	lea    esi,[esi+0x0]

c001f9e8 <Krnl::handleSleepButton()>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	e8 13 07 00 00       	call   c0020103 <KeHandleSleepButton()>
c001f9f0:	90                   	nop
c001f9f1:	83 c4 0c             	add    esp,0xc
c001f9f4:	c3                   	ret    

c001f9f5 <KeCalculateCRC32(unsigned char*, int)>:
c001f9f5:	53                   	push   ebx
c001f9f6:	83 c8 ff             	or     eax,0xffffffff
c001f9f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa01:	01 cb                	add    ebx,ecx
c001fa03:	39 d9                	cmp    ecx,ebx
c001fa05:	74 15                	je     c001fa1c <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fa07:	41                   	inc    ecx
c001fa08:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fa0b:	31 c2                	xor    edx,eax
c001fa0d:	c1 e8 08             	shr    eax,0x8
c001fa10:	0f b6 d2             	movzx  edx,dl
c001fa13:	33 04 95 c0 39 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc640]
c001fa1a:	eb e7                	jmp    c001fa03 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fa1c:	5b                   	pop    ebx
c001fa1d:	f7 d0                	not    eax
c001fa1f:	c3                   	ret    

c001fa20 <EnvVarContainer::getEnv(char const*)>:
c001fa20:	57                   	push   edi
c001fa21:	56                   	push   esi
c001fa22:	53                   	push   ebx
c001fa23:	31 db                	xor    ebx,ebx
c001fa25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fa29:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fa2b:	7e 2b                	jle    c001fa58 <EnvVarContainer::getEnv(char const*)+0x38>
c001fa2d:	50                   	push   eax
c001fa2e:	50                   	push   eax
c001fa2f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fa32:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fa39:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fa3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa40:	e8 3b 0d fe ff       	call   c0000780 <strcmp>
c001fa45:	83 c4 10             	add    esp,0x10
c001fa48:	85 c0                	test   eax,eax
c001fa4a:	75 09                	jne    c001fa55 <EnvVarContainer::getEnv(char const*)+0x35>
c001fa4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fa4f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fa53:	eb 05                	jmp    c001fa5a <EnvVarContainer::getEnv(char const*)+0x3a>
c001fa55:	43                   	inc    ebx
c001fa56:	eb d1                	jmp    c001fa29 <EnvVarContainer::getEnv(char const*)+0x9>
c001fa58:	31 c0                	xor    eax,eax
c001fa5a:	5b                   	pop    ebx
c001fa5b:	5e                   	pop    esi
c001fa5c:	5f                   	pop    edi
c001fa5d:	c3                   	ret    

c001fa5e <EnvVarContainer::setEnv(char const*, char const*)>:
c001fa5e:	55                   	push   ebp
c001fa5f:	57                   	push   edi
c001fa60:	56                   	push   esi
c001fa61:	53                   	push   ebx
c001fa62:	83 ec 28             	sub    esp,0x28
c001fa65:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fa69:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fa6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fa71:	56                   	push   esi
c001fa72:	e8 09 0b fe ff       	call   c0000580 <strlen>
c001fa77:	40                   	inc    eax
c001fa78:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa7b:	e8 0f 69 ff ff       	call   c001638f <malloc>
c001fa80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa87:	e8 f4 0a fe ff       	call   c0000580 <strlen>
c001fa8c:	40                   	inc    eax
c001fa8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa90:	e8 fa 68 ff ff       	call   c001638f <malloc>
c001fa95:	89 34 24             	mov    DWORD PTR [esp],esi
c001fa98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa9c:	e8 df 0a fe ff       	call   c0000580 <strlen>
c001faa1:	83 c4 0c             	add    esp,0xc
c001faa4:	40                   	inc    eax
c001faa5:	50                   	push   eax
c001faa6:	6a 00                	push   0x0
c001faa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001faac:	e8 3f 0a fe ff       	call   c00004f0 <memset>
c001fab1:	89 34 24             	mov    DWORD PTR [esp],esi
c001fab4:	e8 c7 0a fe ff       	call   c0000580 <strlen>
c001fab9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fabd:	8d 48 01             	lea    ecx,[eax+0x1]
c001fac0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fac2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fac5:	89 de                	mov    esi,ebx
c001fac7:	e8 b4 0a fe ff       	call   c0000580 <strlen>
c001facc:	83 c4 0c             	add    esp,0xc
c001facf:	40                   	inc    eax
c001fad0:	50                   	push   eax
c001fad1:	6a 00                	push   0x0
c001fad3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fad7:	e8 14 0a fe ff       	call   c00004f0 <memset>
c001fadc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fadf:	e8 9c 0a fe ff       	call   c0000580 <strlen>
c001fae4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fae8:	8d 48 01             	lea    ecx,[eax+0x1]
c001faeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001faed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001faf0:	40                   	inc    eax
c001faf1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001faf4:	c1 e0 03             	shl    eax,0x3
c001faf7:	5a                   	pop    edx
c001faf8:	59                   	pop    ecx
c001faf9:	50                   	push   eax
c001fafa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fafd:	e8 79 68 ff ff       	call   c001637b <realloc>
c001fb02:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fb05:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fb09:	b9 08 00 00 00       	mov    ecx,0x8
c001fb0e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fb11:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fb15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb17:	83 c4 2c             	add    esp,0x2c
c001fb1a:	5b                   	pop    ebx
c001fb1b:	5e                   	pop    esi
c001fb1c:	5f                   	pop    edi
c001fb1d:	5d                   	pop    ebp
c001fb1e:	c3                   	ret    
c001fb1f:	90                   	nop

c001fb20 <EnvVarContainer::deleteEnv(char const*)>:
c001fb20:	c3                   	ret    
c001fb21:	90                   	nop

c001fb22 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fb22:	55                   	push   ebp
c001fb23:	57                   	push   edi
c001fb24:	56                   	push   esi
c001fb25:	53                   	push   ebx
c001fb26:	81 ec 38 01 00 00    	sub    esp,0x138
c001fb2c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fb33:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fb3a:	68 14 01 00 00       	push   0x114
c001fb3f:	e8 4b 68 ff ff       	call   c001638f <malloc>
c001fb44:	83 c4 0c             	add    esp,0xc
c001fb47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fb4a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fb51:	89 c3                	mov    ebx,eax
c001fb53:	50                   	push   eax
c001fb54:	e8 85 a8 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c001fb59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb5c:	e8 5f ab ff ff       	call   c001a6c0 <File::exists()>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	84 c0                	test   al,al
c001fb66:	75 31                	jne    c001fb99 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fb68:	50                   	push   eax
c001fb69:	50                   	push   eax
c001fb6a:	6a 12                	push   0x12
c001fb6c:	53                   	push   ebx
c001fb6d:	e8 8a a8 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c001fb72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fb74:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fb77:	89 34 24             	mov    DWORD PTR [esp],esi
c001fb7a:	e8 01 0a fe ff       	call   c0000580 <strlen>
c001fb7f:	5a                   	pop    edx
c001fb80:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fb84:	52                   	push   edx
c001fb85:	31 d2                	xor    edx,edx
c001fb87:	56                   	push   esi
c001fb88:	52                   	push   edx
c001fb89:	50                   	push   eax
c001fb8a:	53                   	push   ebx
c001fb8b:	ff d7                	call   edi
c001fb8d:	83 c4 14             	add    esp,0x14
c001fb90:	53                   	push   ebx
c001fb91:	e8 c4 a8 ff ff       	call   c001a45a <File::close()>
c001fb96:	83 c4 10             	add    esp,0x10
c001fb99:	56                   	push   esi
c001fb9a:	31 f6                	xor    esi,esi
c001fb9c:	68 00 01 00 00       	push   0x100
c001fba1:	6a 00                	push   0x0
c001fba3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fba7:	50                   	push   eax
c001fba8:	e8 43 09 fe ff       	call   c00004f0 <memset>
c001fbad:	5f                   	pop    edi
c001fbae:	58                   	pop    eax
c001fbaf:	6a 01                	push   0x1
c001fbb1:	53                   	push   ebx
c001fbb2:	e8 45 a8 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fbc2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fbca:	83 ec 0c             	sub    esp,0xc
c001fbcd:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fbd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fbd3:	52                   	push   edx
c001fbd4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001fbd8:	51                   	push   ecx
c001fbd9:	6a 00                	push   0x0
c001fbdb:	6a 01                	push   0x1
c001fbdd:	53                   	push   ebx
c001fbde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fbe1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fbe6:	83 c4 20             	add    esp,0x20
c001fbe9:	85 c0                	test   eax,eax
c001fbeb:	89 c1                	mov    ecx,eax
c001fbed:	0f 84 36 01 00 00    	je     c001fd29 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fbf3:	83 f8 0d             	cmp    eax,0xd
c001fbf6:	0f 84 22 01 00 00    	je     c001fd1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fbfc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc01:	0f 84 f0 00 00 00    	je     c001fcf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fc07:	83 f8 0a             	cmp    eax,0xa
c001fc0a:	74 13                	je     c001fc1f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fc0c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc11:	74 0c                	je     c001fc1f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fc13:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fc19:	0f 8e f6 00 00 00    	jle    c001fd15 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc23:	83 ec 0c             	sub    esp,0xc
c001fc26:	8d 78 01             	lea    edi,[eax+0x1]
c001fc29:	57                   	push   edi
c001fc2a:	e8 60 67 ff ff       	call   c001638f <malloc>
c001fc2f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fc33:	8d 56 04             	lea    edx,[esi+0x4]
c001fc36:	89 14 24             	mov    DWORD PTR [esp],edx
c001fc39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fc41:	e8 49 67 ff ff       	call   c001638f <malloc>
c001fc46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fc4a:	83 c4 0c             	add    esp,0xc
c001fc4d:	57                   	push   edi
c001fc4e:	6a 00                	push   0x0
c001fc50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fc54:	e8 97 08 fe ff       	call   c00004f0 <memset>
c001fc59:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fc5d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fc61:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fc65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc67:	83 c4 0c             	add    esp,0xc
c001fc6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fc6e:	52                   	push   edx
c001fc6f:	6a 00                	push   0x0
c001fc71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fc75:	e8 76 08 fe ff       	call   c00004f0 <memset>
c001fc7a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fc7e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fc82:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc85:	e8 f6 08 fe ff       	call   c0000580 <strlen>
c001fc8a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fc8e:	89 c1                	mov    ecx,eax
c001fc90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fc95:	83 c4 10             	add    esp,0x10
c001fc98:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fc9b:	40                   	inc    eax
c001fc9c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc9f:	85 d2                	test   edx,edx
c001fca1:	75 0c                	jne    c001fcaf <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fca3:	83 ec 0c             	sub    esp,0xc
c001fca6:	6a 08                	push   0x8
c001fca8:	e8 e2 66 ff ff       	call   c001638f <malloc>
c001fcad:	eb 0c                	jmp    c001fcbb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fcaf:	51                   	push   ecx
c001fcb0:	51                   	push   ecx
c001fcb1:	c1 e0 03             	shl    eax,0x3
c001fcb4:	50                   	push   eax
c001fcb5:	52                   	push   edx
c001fcb6:	e8 c0 66 ff ff       	call   c001637b <realloc>
c001fcbb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fcbe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fcc1:	83 c4 10             	add    esp,0x10
c001fcc4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fcc7:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fccb:	b9 08 00 00 00       	mov    ecx,0x8
c001fcd0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fcd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcd6:	50                   	push   eax
c001fcd7:	31 f6                	xor    esi,esi
c001fcd9:	68 00 01 00 00       	push   0x100
c001fcde:	6a 00                	push   0x0
c001fce0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fce4:	50                   	push   eax
c001fce5:	e8 06 08 fe ff       	call   c00004f0 <memset>
c001fcea:	83 c4 10             	add    esp,0x10
c001fced:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fcf5:	eb 27                	jmp    c001fd1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fcf7:	83 f8 3d             	cmp    eax,0x3d
c001fcfa:	74 1e                	je     c001fd1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fcfc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fd02:	7f 07                	jg     c001fd0b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fd04:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001fd08:	46                   	inc    esi
c001fd09:	eb 13                	jmp    c001fd1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd0b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fd13:	eb 09                	jmp    c001fd1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd15:	83 f8 3d             	cmp    eax,0x3d
c001fd18:	75 ea                	jne    c001fd04 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fd1a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fd1e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd23:	0f 85 99 fe ff ff    	jne    c001fbc2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	53                   	push   ebx
c001fd2d:	e8 28 a7 ff ff       	call   c001a45a <File::close()>
c001fd32:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fd3a:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fd40:	5b                   	pop    ebx
c001fd41:	5e                   	pop    esi
c001fd42:	5f                   	pop    edi
c001fd43:	5d                   	pop    ebp
c001fd44:	c3                   	ret    
c001fd45:	90                   	nop

c001fd46 <EnvVarContainer::__loadSystem()>:
c001fd46:	83 ec 10             	sub    esp,0x10
c001fd49:	68 c0 3d 03 c0       	push   0xc0033dc0
c001fd4e:	68 5c 24 03 c0       	push   0xc003245c
c001fd53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd57:	e8 c6 fd ff ff       	call   c001fb22 <EnvVarContainer::loadFrom(char const*, char const*)>
c001fd5c:	83 c4 1c             	add    esp,0x1c
c001fd5f:	c3                   	ret    

c001fd60 <EnvVarContainer::__loadUser()>:
c001fd60:	c3                   	ret    
c001fd61:	90                   	nop

c001fd62 <EnvVarContainer::EnvVarContainer(Process*)>:
c001fd62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd74:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd82:	90                   	nop
c001fd83:	c3                   	ret    

c001fd84 <EnvVarContainer::~EnvVarContainer()>:
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd8e:	85 c0                	test   eax,eax
c001fd90:	74 1d                	je     c001fdaf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd96:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd98:	85 c0                	test   eax,eax
c001fd9a:	74 13                	je     c001fdaf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fda3:	83 ec 0c             	sub    esp,0xc
c001fda6:	50                   	push   eax
c001fda7:	e8 f3 65 ff ff       	call   c001639f <free>
c001fdac:	83 c4 10             	add    esp,0x10
c001fdaf:	90                   	nop
c001fdb0:	83 c4 0c             	add    esp,0xc
c001fdb3:	c3                   	ret    

c001fdb4 <KeGetEnv(Process*, char const*)>:
c001fdb4:	53                   	push   ebx
c001fdb5:	83 ec 08             	sub    esp,0x8
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fdc2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fdc6:	74 04                	je     c001fdcc <KeGetEnv(Process*, char const*)+0x18>
c001fdc8:	85 c0                	test   eax,eax
c001fdca:	75 0b                	jne    c001fdd7 <KeGetEnv(Process*, char const*)+0x23>
c001fdcc:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fdd1:	85 c0                	test   eax,eax
c001fdd3:	75 19                	jne    c001fdee <KeGetEnv(Process*, char const*)+0x3a>
c001fdd5:	eb 27                	jmp    c001fdfe <KeGetEnv(Process*, char const*)+0x4a>
c001fdd7:	52                   	push   edx
c001fdd8:	52                   	push   edx
c001fdd9:	53                   	push   ebx
c001fdda:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001fde0:	e8 3b fc ff ff       	call   c001fa20 <EnvVarContainer::getEnv(char const*)>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	85 c0                	test   eax,eax
c001fdea:	75 28                	jne    c001fe14 <KeGetEnv(Process*, char const*)+0x60>
c001fdec:	eb de                	jmp    c001fdcc <KeGetEnv(Process*, char const*)+0x18>
c001fdee:	52                   	push   edx
c001fdef:	52                   	push   edx
c001fdf0:	53                   	push   ebx
c001fdf1:	50                   	push   eax
c001fdf2:	e8 29 fc ff ff       	call   c001fa20 <EnvVarContainer::getEnv(char const*)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	85 c0                	test   eax,eax
c001fdfc:	75 16                	jne    c001fe14 <KeGetEnv(Process*, char const*)+0x60>
c001fdfe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fe02:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001fe07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fe0b:	83 c4 08             	add    esp,0x8
c001fe0e:	5b                   	pop    ebx
c001fe0f:	e9 0c fc ff ff       	jmp    c001fa20 <EnvVarContainer::getEnv(char const*)>
c001fe14:	83 c4 08             	add    esp,0x8
c001fe17:	5b                   	pop    ebx
c001fe18:	c3                   	ret    

c001fe19 <KeSetEnvSystem(char const*, char const*)>:
c001fe19:	83 ec 10             	sub    esp,0x10
c001fe1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe24:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001fe2a:	e8 2f fc ff ff       	call   c001fa5e <EnvVarContainer::setEnv(char const*, char const*)>
c001fe2f:	83 c4 1c             	add    esp,0x1c
c001fe32:	c3                   	ret    

c001fe33 <KeSetEnvUser(char const*, char const*)>:
c001fe33:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fe38:	85 c0                	test   eax,eax
c001fe3a:	74 15                	je     c001fe51 <KeSetEnvUser(char const*, char const*)+0x1e>
c001fe3c:	83 ec 10             	sub    esp,0x10
c001fe3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe47:	50                   	push   eax
c001fe48:	e8 11 fc ff ff       	call   c001fa5e <EnvVarContainer::setEnv(char const*, char const*)>
c001fe4d:	83 c4 1c             	add    esp,0x1c
c001fe50:	c3                   	ret    
c001fe51:	c3                   	ret    

c001fe52 <KeSetEnvProcess(Process*, char const*, char const*)>:
c001fe52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe56:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001fe5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe60:	e9 f9 fb ff ff       	jmp    c001fa5e <EnvVarContainer::setEnv(char const*, char const*)>

c001fe65 <KeDeleteEnvSystem(char const*)>:
c001fe65:	c3                   	ret    

c001fe66 <KeDeleteEnvUser(char const*)>:
c001fe66:	c3                   	ret    

c001fe67 <KeDeleteEnvProcess(Process*, char const*)>:
c001fe67:	c3                   	ret    

c001fe68 <KeNewProcessEnv(Process*)>:
c001fe68:	83 ec 28             	sub    esp,0x28
c001fe6b:	6a 0c                	push   0xc
c001fe6d:	e8 1d 65 ff ff       	call   c001638f <malloc>
c001fe72:	5a                   	pop    edx
c001fe73:	59                   	pop    ecx
c001fe74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe78:	50                   	push   eax
c001fe79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe7d:	e8 e0 fe ff ff       	call   c001fd62 <EnvVarContainer::EnvVarContainer(Process*)>
c001fe82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe86:	83 c4 2c             	add    esp,0x2c
c001fe89:	c3                   	ret    

c001fe8a <KeCopyProcessEnv(Process*, Process*)>:
c001fe8a:	57                   	push   edi
c001fe8b:	56                   	push   esi
c001fe8c:	53                   	push   ebx
c001fe8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe91:	83 ec 0c             	sub    esp,0xc
c001fe94:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001fe9a:	6a 0c                	push   0xc
c001fe9c:	e8 ee 64 ff ff       	call   c001638f <malloc>
c001fea1:	89 c3                	mov    ebx,eax
c001fea3:	58                   	pop    eax
c001fea4:	5a                   	pop    edx
c001fea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea9:	53                   	push   ebx
c001feaa:	e8 b3 fe ff ff       	call   c001fd62 <EnvVarContainer::EnvVarContainer(Process*)>
c001feaf:	8b 07                	mov    eax,DWORD PTR [edi]
c001feb1:	89 03                	mov    DWORD PTR [ebx],eax
c001feb3:	c1 e0 03             	shl    eax,0x3
c001feb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb9:	e8 d1 64 ff ff       	call   c001638f <malloc>
c001febe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001fec1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001fec3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001fec6:	89 c7                	mov    edi,eax
c001fec8:	c1 e1 03             	shl    ecx,0x3
c001fecb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	89 d8                	mov    eax,ebx
c001fed2:	5b                   	pop    ebx
c001fed3:	5e                   	pop    esi
c001fed4:	5f                   	pop    edi
c001fed5:	c3                   	ret    

c001fed6 <KeLoadSystemEnv()>:
c001fed6:	53                   	push   ebx
c001fed7:	83 ec 14             	sub    esp,0x14
c001feda:	6a 0c                	push   0xc
c001fedc:	e8 ae 64 ff ff       	call   c001638f <malloc>
c001fee1:	89 c3                	mov    ebx,eax
c001fee3:	58                   	pop    eax
c001fee4:	5a                   	pop    edx
c001fee5:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001feeb:	53                   	push   ebx
c001feec:	e8 71 fe ff ff       	call   c001fd62 <EnvVarContainer::EnvVarContainer(Process*)>
c001fef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fef4:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c001fefa:	e8 47 fe ff ff       	call   c001fd46 <EnvVarContainer::__loadSystem()>
c001feff:	83 c4 18             	add    esp,0x18
c001ff02:	5b                   	pop    ebx
c001ff03:	c3                   	ret    

c001ff04 <KeLoadUserEnv()>:
c001ff04:	53                   	push   ebx
c001ff05:	83 ec 14             	sub    esp,0x14
c001ff08:	6a 0c                	push   0xc
c001ff0a:	e8 80 64 ff ff       	call   c001638f <malloc>
c001ff0f:	89 c3                	mov    ebx,eax
c001ff11:	58                   	pop    eax
c001ff12:	5a                   	pop    edx
c001ff13:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ff19:	53                   	push   ebx
c001ff1a:	e8 43 fe ff ff       	call   c001fd62 <EnvVarContainer::EnvVarContainer(Process*)>
c001ff1f:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c001ff25:	83 c4 18             	add    esp,0x18
c001ff28:	5b                   	pop    ebx
c001ff29:	c3                   	ret    

c001ff2a <KeFlushEnv()>:
c001ff2a:	c3                   	ret    

c001ff2b <KeGetProcessTotalEnvCount(Process*)>:
c001ff2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff2f:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c001ff35:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001ff3b:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff42:	03 01                	add    eax,DWORD PTR [ecx]
c001ff44:	85 d2                	test   edx,edx
c001ff46:	74 02                	je     c001ff4a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001ff48:	03 02                	add    eax,DWORD PTR [edx]
c001ff4a:	c3                   	ret    

c001ff4b <KeGetProcessEnvPair(Process*, int)>:
c001ff4b:	57                   	push   edi
c001ff4c:	56                   	push   esi
c001ff4d:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c001ff53:	53                   	push   ebx
c001ff54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff5c:	85 f6                	test   esi,esi
c001ff5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ff62:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001ff68:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ff6a:	75 16                	jne    c001ff82 <KeGetProcessEnvPair(Process*, int)+0x37>
c001ff6c:	39 c2                	cmp    edx,eax
c001ff6e:	7c 16                	jl     c001ff86 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001ff70:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c001ff76:	8b 31                	mov    esi,DWORD PTR [ecx]
c001ff78:	01 c6                	add    esi,eax
c001ff7a:	39 d6                	cmp    esi,edx
c001ff7c:	7e 3c                	jle    c001ffba <KeGetProcessEnvPair(Process*, int)+0x6f>
c001ff7e:	29 c2                	sub    edx,eax
c001ff80:	eb 04                	jmp    c001ff86 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001ff82:	39 c2                	cmp    edx,eax
c001ff84:	7d 05                	jge    c001ff8b <KeGetProcessEnvPair(Process*, int)+0x40>
c001ff86:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001ff89:	eb 20                	jmp    c001ffab <KeGetProcessEnvPair(Process*, int)+0x60>
c001ff8b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ff8d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001ff90:	39 d1                	cmp    ecx,edx
c001ff92:	7e 04                	jle    c001ff98 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001ff94:	29 c2                	sub    edx,eax
c001ff96:	eb 10                	jmp    c001ffa8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c001ff98:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c001ff9e:	03 0e                	add    ecx,DWORD PTR [esi]
c001ffa0:	39 d1                	cmp    ecx,edx
c001ffa2:	7e 16                	jle    c001ffba <KeGetProcessEnvPair(Process*, int)+0x6f>
c001ffa4:	29 c2                	sub    edx,eax
c001ffa6:	29 fa                	sub    edx,edi
c001ffa8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ffab:	8d 14 d0             	lea    edx,[eax+edx*8]
c001ffae:	8b 02                	mov    eax,DWORD PTR [edx]
c001ffb0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001ffb3:	89 03                	mov    DWORD PTR [ebx],eax
c001ffb5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ffb8:	eb 1d                	jmp    c001ffd7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	68 7e 24 03 c0       	push   0xc003247e
c001ffc2:	e8 ac 00 00 00       	call   c0020073 <KePanic(char const*)>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ffd0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ffd7:	89 d8                	mov    eax,ebx
c001ffd9:	5b                   	pop    ebx
c001ffda:	5e                   	pop    esi
c001ffdb:	5f                   	pop    edi
c001ffdc:	c2 04 00             	ret    0x4

c001ffdf <CPU::current()>:
c001ffdf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ffe4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffea:	c3                   	ret    

c001ffeb <operator new(unsigned long)>:
c001ffeb:	e9 9f 63 ff ff       	jmp    c001638f <malloc>

c001fff0 <operator delete(void*)>:
c001fff0:	e9 ba 63 ff ff       	jmp    c00163af <rfree>

c001fff5 <disableIRQs()>:
c001fff5:	fa                   	cli    
c001fff6:	c3                   	ret    

c001fff7 <enableIRQs()>:
c001fff7:	fb                   	sti    
c001fff8:	c3                   	ret    

c001fff9 <lockScheduler()>:
c001fff9:	fa                   	cli    
c001fffa:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020000:	c3                   	ret    

c0020001 <unlockScheduler()>:
c0020001:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020006:	48                   	dec    eax
c0020007:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002000c:	75 01                	jne    c002000f <unlockScheduler()+0xe>
c002000e:	fb                   	sti    
c002000f:	c3                   	ret    

c0020010 <lockStuff()>:
c0020010:	fa                   	cli    
c0020011:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020017:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c002001d:	c3                   	ret    

c002001e <unlockStuff()>:
c002001e:	83 ec 0c             	sub    esp,0xc
c0020021:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020026:	48                   	dec    eax
c0020027:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002002c:	75 18                	jne    c0020046 <unlockStuff()+0x28>
c002002e:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020035:	74 0f                	je     c0020046 <unlockStuff()+0x28>
c0020037:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020041:	e8 c6 4b 00 00       	call   c0024c0c <schedule()>
c0020046:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002004b:	48                   	dec    eax
c002004c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020051:	75 01                	jne    c0020054 <unlockStuff()+0x36>
c0020053:	fb                   	sti    
c0020054:	83 c4 0c             	add    esp,0xc
c0020057:	c3                   	ret    

c0020058 <Virt::getAKernelVAS()>:
c0020058:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002005d:	c3                   	ret    

c002005e <__not_memcpy>:
c002005e:	57                   	push   edi
c002005f:	56                   	push   esi
c0020060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020064:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020068:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002006c:	89 c7                	mov    edi,eax
c002006e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020070:	5e                   	pop    esi
c0020071:	5f                   	pop    edi
c0020072:	c3                   	ret    

c0020073 <KePanic(char const*)>:
c0020073:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c002007a:	e9 1d 6b 00 00       	jmp    c0026b9c <HalPanic(char const*)>

c002007f <KePowerThread(void*)>:
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020087:	48                   	dec    eax
c0020088:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002008d:	75 01                	jne    c0020090 <KePowerThread(void*)+0x11>
c002008f:	fb                   	sti    
c0020090:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020097:	83 ec 0c             	sub    esp,0xc
c002009a:	6a 0a                	push   0xa
c002009c:	e8 9b 4e 00 00       	call   c0024f3c <sleep(unsigned int)>
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00200ab:	eb e3                	jmp    c0020090 <KePowerThread(void*)+0x11>

c00200ad <KeChangePowerSettings(PowerSettings)>:
c00200ad:	57                   	push   edi
c00200ae:	b9 09 00 00 00       	mov    ecx,0x9
c00200b3:	56                   	push   esi
c00200b4:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00200b9:	fc                   	cld    
c00200ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00200be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00200c0:	5e                   	pop    esi
c00200c1:	5f                   	pop    edi
c00200c2:	c3                   	ret    

c00200c3 <KeUserIOReceived()>:
c00200c3:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00200cd:	c3                   	ret    

c00200ce <KeHandlePowerButton()>:
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00200d6:	83 f8 02             	cmp    eax,0x2
c00200d9:	75 10                	jne    c00200eb <KeHandlePowerButton()+0x1d>
c00200db:	83 ec 0c             	sub    esp,0xc
c00200de:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00200e4:	e8 1f 59 ff ff       	call   c0015a08 <Computer::shutdown()>
c00200e9:	eb 11                	jmp    c00200fc <KeHandlePowerButton()+0x2e>
c00200eb:	48                   	dec    eax
c00200ec:	75 11                	jne    c00200ff <KeHandlePowerButton()+0x31>
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00200f7:	e8 3c 59 ff ff       	call   c0015a38 <Computer::sleep()>
c00200fc:	83 c4 10             	add    esp,0x10
c00200ff:	83 c4 0c             	add    esp,0xc
c0020102:	c3                   	ret    

c0020103 <KeHandleSleepButton()>:
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002010b:	83 f8 02             	cmp    eax,0x2
c002010e:	75 10                	jne    c0020120 <KeHandleSleepButton()+0x1d>
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020119:	e8 ea 58 ff ff       	call   c0015a08 <Computer::shutdown()>
c002011e:	eb 11                	jmp    c0020131 <KeHandleSleepButton()+0x2e>
c0020120:	48                   	dec    eax
c0020121:	75 11                	jne    c0020134 <KeHandleSleepButton()+0x31>
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002012c:	e8 07 59 ff ff       	call   c0015a38 <Computer::sleep()>
c0020131:	83 c4 10             	add    esp,0x10
c0020134:	83 c4 0c             	add    esp,0xc
c0020137:	c3                   	ret    

c0020138 <KeSetupPowerManager()>:
c0020138:	83 ec 0c             	sub    esp,0xc
c002013b:	68 f0 00 00 00       	push   0xf0
c0020140:	6a 00                	push   0x0
c0020142:	68 7f 00 02 c0       	push   0xc002007f
c0020147:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002014d:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020157:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002015e:	e8 5d 48 00 00       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c0020163:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c002016d:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c0020177:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020181:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c002018b:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c0020195:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c002019f:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00201a9:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00201b3:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00201bd:	83 c4 1c             	add    esp,0x1c
c00201c0:	c3                   	ret    

c00201c1 <KeRand()>:
c00201c1:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00201cb:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00201d5:	53                   	push   ebx
c00201d6:	01 c1                	add    ecx,eax
c00201d8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00201dd:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00201e3:	01 ca                	add    edx,ecx
c00201e5:	05 ef 04 b5 00       	add    eax,0xb504ef
c00201ea:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00201ef:	83 d2 00             	adc    edx,0x0
c00201f2:	0f b7 da             	movzx  ebx,dx
c00201f5:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00201fb:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00201ff:	5b                   	pop    ebx
c0020200:	c3                   	ret    

c0020201 <KeSeedRand(unsigned int)>:
c0020201:	53                   	push   ebx
c0020202:	83 ec 08             	sub    esp,0x8
c0020205:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020209:	e8 ad 6c 00 00       	call   c0026ebb <HalGetRand()>
c002020e:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020218:	31 d8                	xor    eax,ebx
c002021a:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002021f:	e8 9d ff ff ff       	call   c00201c1 <KeRand()>
c0020224:	83 c4 08             	add    esp,0x8
c0020227:	5b                   	pop    ebx
c0020228:	eb 97                	jmp    c00201c1 <KeRand()>

c002022a <KeInitRand()>:
c002022a:	83 ec 0c             	sub    esp,0xc
c002022d:	e8 7e 6a 00 00       	call   c0026cb0 <HalQueryPerformanceCounter()>
c0020232:	0f 20 da             	mov    edx,cr3
c0020235:	0f 22 da             	mov    cr3,edx
c0020238:	0f 20 da             	mov    edx,cr3
c002023b:	0f 22 da             	mov    cr3,edx
c002023e:	0f 20 da             	mov    edx,cr3
c0020241:	0f 22 da             	mov    cr3,edx
c0020244:	0f 20 da             	mov    edx,cr3
c0020247:	0f 22 da             	mov    cr3,edx
c002024a:	83 ec 0c             	sub    esp,0xc
c002024d:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020252:	50                   	push   eax
c0020253:	e8 a9 ff ff ff       	call   c0020201 <KeSeedRand(unsigned int)>
c0020258:	83 c4 1c             	add    esp,0x1c
c002025b:	c3                   	ret    

c002025c <KeResolveCompatibilitySymbol(char*)>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	83 ec 08             	sub    esp,0x8
c0020262:	68 98 24 03 c0       	push   0xc0032498
c0020267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026b:	e8 10 05 fe ff       	call   c0000780 <strcmp>
c0020270:	83 c4 10             	add    esp,0x10
c0020273:	85 c0                	test   eax,eax
c0020275:	0f 94 c0             	sete   al
c0020278:	0f b6 c0             	movzx  eax,al
c002027b:	85 c0                	test   eax,eax
c002027d:	74 0d                	je     c002028c <KeResolveCompatibilitySymbol(char*)+0x30>
c002027f:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020284:	e9 8b 01 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020289:	8d 76 00             	lea    esi,[esi+0x0]
c002028c:	83 ec 08             	sub    esp,0x8
c002028f:	68 a1 24 03 c0       	push   0xc00324a1
c0020294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020298:	e8 e3 04 fe ff       	call   c0000780 <strcmp>
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	85 c0                	test   eax,eax
c00202a2:	0f 94 c0             	sete   al
c00202a5:	0f b6 c0             	movzx  eax,al
c00202a8:	85 c0                	test   eax,eax
c00202aa:	74 0c                	je     c00202b8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00202ac:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c00202b1:	e9 5e 01 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00202b6:	66 90                	xchg   ax,ax
c00202b8:	83 ec 08             	sub    esp,0x8
c00202bb:	68 ab 24 03 c0       	push   0xc00324ab
c00202c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c4:	e8 b7 04 fe ff       	call   c0000780 <strcmp>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	85 c0                	test   eax,eax
c00202ce:	0f 94 c0             	sete   al
c00202d1:	0f b6 c0             	movzx  eax,al
c00202d4:	85 c0                	test   eax,eax
c00202d6:	74 0c                	je     c00202e4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00202d8:	b8 34 e0 02 c0       	mov    eax,0xc002e034
c00202dd:	e9 32 01 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00202e2:	66 90                	xchg   ax,ax
c00202e4:	83 ec 08             	sub    esp,0x8
c00202e7:	68 b4 24 03 c0       	push   0xc00324b4
c00202ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f0:	e8 8b 04 fe ff       	call   c0000780 <strcmp>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	85 c0                	test   eax,eax
c00202fa:	0f 94 c0             	sete   al
c00202fd:	0f b6 c0             	movzx  eax,al
c0020300:	85 c0                	test   eax,eax
c0020302:	74 0c                	je     c0020310 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020304:	b8 73 00 02 c0       	mov    eax,0xc0020073
c0020309:	e9 06 01 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002030e:	66 90                	xchg   ax,ax
c0020310:	83 ec 08             	sub    esp,0x8
c0020313:	68 c7 24 03 c0       	push   0xc00324c7
c0020318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031c:	e8 5f 04 fe ff       	call   c0000780 <strcmp>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	85 c0                	test   eax,eax
c0020326:	0f 94 c0             	sete   al
c0020329:	0f b6 c0             	movzx  eax,al
c002032c:	85 c0                	test   eax,eax
c002032e:	74 0c                	je     c002033c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020330:	b8 2d f9 01 c0       	mov    eax,0xc001f92d
c0020335:	e9 da 00 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002033a:	66 90                	xchg   ax,ax
c002033c:	83 ec 08             	sub    esp,0x8
c002033f:	68 e4 24 03 c0       	push   0xc00324e4
c0020344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020348:	e8 33 04 fe ff       	call   c0000780 <strcmp>
c002034d:	83 c4 10             	add    esp,0x10
c0020350:	85 c0                	test   eax,eax
c0020352:	0f 94 c0             	sete   al
c0020355:	0f b6 c0             	movzx  eax,al
c0020358:	85 c0                	test   eax,eax
c002035a:	74 0c                	je     c0020368 <KeResolveCompatibilitySymbol(char*)+0x10c>
c002035c:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0020361:	e9 ae 00 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020366:	66 90                	xchg   ax,ax
c0020368:	83 ec 08             	sub    esp,0x8
c002036b:	68 ee 24 03 c0       	push   0xc00324ee
c0020370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020374:	e8 07 04 fe ff       	call   c0000780 <strcmp>
c0020379:	83 c4 10             	add    esp,0x10
c002037c:	85 c0                	test   eax,eax
c002037e:	0f 94 c0             	sete   al
c0020381:	0f b6 c0             	movzx  eax,al
c0020384:	85 c0                	test   eax,eax
c0020386:	74 0c                	je     c0020394 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020388:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c002038d:	e9 82 00 00 00       	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020392:	66 90                	xchg   ax,ax
c0020394:	83 ec 08             	sub    esp,0x8
c0020397:	68 f7 24 03 c0       	push   0xc00324f7
c002039c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a0:	e8 db 03 fe ff       	call   c0000780 <strcmp>
c00203a5:	83 c4 10             	add    esp,0x10
c00203a8:	85 c0                	test   eax,eax
c00203aa:	0f 94 c0             	sete   al
c00203ad:	0f b6 c0             	movzx  eax,al
c00203b0:	85 c0                	test   eax,eax
c00203b2:	74 08                	je     c00203bc <KeResolveCompatibilitySymbol(char*)+0x160>
c00203b4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00203b9:	eb 59                	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203bb:	90                   	nop
c00203bc:	83 ec 08             	sub    esp,0x8
c00203bf:	68 0f 25 03 c0       	push   0xc003250f
c00203c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c8:	e8 b3 03 fe ff       	call   c0000780 <strcmp>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	85 c0                	test   eax,eax
c00203d2:	0f 94 c0             	sete   al
c00203d5:	0f b6 c0             	movzx  eax,al
c00203d8:	85 c0                	test   eax,eax
c00203da:	74 08                	je     c00203e4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00203dc:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00203e1:	eb 31                	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203e3:	90                   	nop
c00203e4:	83 ec 08             	sub    esp,0x8
c00203e7:	68 1c 25 03 c0       	push   0xc003251c
c00203ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f0:	e8 8b 03 fe ff       	call   c0000780 <strcmp>
c00203f5:	83 c4 10             	add    esp,0x10
c00203f8:	85 c0                	test   eax,eax
c00203fa:	0f 94 c0             	sete   al
c00203fd:	0f b6 c0             	movzx  eax,al
c0020400:	85 c0                	test   eax,eax
c0020402:	74 08                	je     c002040c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020404:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020409:	eb 09                	jmp    c0020414 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002040b:	90                   	nop
c002040c:	b8 00 00 00 00       	mov    eax,0x0
c0020411:	8d 76 00             	lea    esi,[esi+0x0]
c0020414:	83 c4 0c             	add    esp,0xc
c0020417:	c3                   	ret    

c0020418 <KiSigKill(int)>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	6a 00                	push   0x0
c002041d:	6a 00                	push   0x0
c002041f:	6a ff                	push   0xffffffff
c0020421:	6a 01                	push   0x1
c0020423:	e8 2a 4c 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020428:	83 c4 1c             	add    esp,0x1c
c002042b:	c3                   	ret    

c002042c <KiDefaultSignalHandlerIgnore(int)>:
c002042c:	c3                   	ret    

c002042d <KiDefaultSignalHandlerPause(int)>:
c002042d:	57                   	push   edi
c002042e:	b9 07 00 00 00       	mov    ecx,0x7
c0020433:	56                   	push   esi
c0020434:	be 65 25 03 c0       	mov    esi,0xc0032565
c0020439:	83 ec 24             	sub    esp,0x24
c002043c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020440:	fc                   	cld    
c0020441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020443:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020447:	50                   	push   eax
c0020448:	6a 00                	push   0x0
c002044a:	6a 00                	push   0x0
c002044c:	6a 27                	push   0x27
c002044e:	e8 ff 4b 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020453:	83 c4 34             	add    esp,0x34
c0020456:	5e                   	pop    esi
c0020457:	5f                   	pop    edi
c0020458:	c3                   	ret    

c0020459 <KiDefaultSignalHandlerResume(int)>:
c0020459:	57                   	push   edi
c002045a:	b9 1d 00 00 00       	mov    ecx,0x1d
c002045f:	56                   	push   esi
c0020460:	be 81 25 03 c0       	mov    esi,0xc0032581
c0020465:	83 ec 24             	sub    esp,0x24
c0020468:	8d 7c 24 03          	lea    edi,[esp+0x3]
c002046c:	fc                   	cld    
c002046d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002046f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020473:	50                   	push   eax
c0020474:	6a 00                	push   0x0
c0020476:	6a 00                	push   0x0
c0020478:	6a 27                	push   0x27
c002047a:	e8 d3 4b 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002047f:	83 c4 34             	add    esp,0x34
c0020482:	5e                   	pop    esi
c0020483:	5f                   	pop    edi
c0020484:	c3                   	ret    

c0020485 <KeDeinitSignals(SigHandlerBlock*)>:
c0020485:	e9 15 5f ff ff       	jmp    c001639f <free>

c002048a <KeInitSignals()>:
c002048a:	53                   	push   ebx
c002048b:	83 ec 14             	sub    esp,0x14
c002048e:	68 c8 00 00 00       	push   0xc8
c0020493:	e8 f7 5e ff ff       	call   c001638f <malloc>
c0020498:	83 c4 0c             	add    esp,0xc
c002049b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00204a5:	89 c3                	mov    ebx,eax
c00204a7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00204b1:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00204b7:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00204bb:	6a 20                	push   0x20
c00204bd:	6a 00                	push   0x0
c00204bf:	50                   	push   eax
c00204c0:	e8 2b 00 fe ff       	call   c00004f0 <memset>
c00204c5:	83 c4 0c             	add    esp,0xc
c00204c8:	6a 44                	push   0x44
c00204ca:	6a 00                	push   0x0
c00204cc:	53                   	push   ebx
c00204cd:	e8 1e 00 fe ff       	call   c00004f0 <memset>
c00204d2:	83 c4 18             	add    esp,0x18
c00204d5:	89 d8                	mov    eax,ebx
c00204d7:	5b                   	pop    ebx
c00204d8:	c3                   	ret    

c00204d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00204d9:	53                   	push   ebx
c00204da:	b8 01 00 00 00       	mov    eax,0x1
c00204df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204e7:	83 f9 10             	cmp    ecx,0x10
c00204ea:	7f 21                	jg     c002050d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00204ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00204f3:	89 03                	mov    DWORD PTR [ebx],eax
c00204f5:	b8 01 00 00 00       	mov    eax,0x1
c00204fa:	d3 e0                	shl    eax,cl
c00204fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020500:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020503:	31 c0                	xor    eax,eax
c0020505:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c002050d:	5b                   	pop    ebx
c002050e:	c3                   	ret    

c002050f <KeRaiseSignal(SigHandlerBlock*, int)>:
c002050f:	55                   	push   ebp
c0020510:	57                   	push   edi
c0020511:	bf 08 00 00 00       	mov    edi,0x8
c0020516:	56                   	push   esi
c0020517:	53                   	push   ebx
c0020518:	83 ec 18             	sub    esp,0x18
c002051b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002051f:	68 9e 25 03 c0       	push   0xc003259e
c0020524:	e8 9d 8c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0020529:	83 c4 10             	add    esp,0x10
c002052c:	31 c9                	xor    ecx,ecx
c002052e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020535:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c002053b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002053f:	99                   	cdq    
c0020540:	f7 ff                	idiv   edi
c0020542:	8d 42 24             	lea    eax,[edx+0x24]
c0020545:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020549:	85 f6                	test   esi,esi
c002054b:	75 1a                	jne    c0020567 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c002054d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020551:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020555:	50                   	push   eax
c0020556:	50                   	push   eax
c0020557:	52                   	push   edx
c0020558:	68 af 25 03 c0       	push   0xc00325af
c002055d:	e8 64 8c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0020562:	83 c4 10             	add    esp,0x10
c0020565:	eb 1b                	jmp    c0020582 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020567:	41                   	inc    ecx
c0020568:	83 f9 08             	cmp    ecx,0x8
c002056b:	75 ce                	jne    c002053b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c002056d:	83 ec 0c             	sub    esp,0xc
c0020570:	be 01 00 00 00       	mov    esi,0x1
c0020575:	68 d0 25 03 c0       	push   0xc00325d0
c002057a:	e8 47 8c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002057f:	83 c4 10             	add    esp,0x10
c0020582:	83 c4 0c             	add    esp,0xc
c0020585:	89 f0                	mov    eax,esi
c0020587:	5b                   	pop    ebx
c0020588:	5e                   	pop    esi
c0020589:	5f                   	pop    edi
c002058a:	5d                   	pop    ebp
c002058b:	c3                   	ret    

c002058c <KeCheckSignal(SigHandlerBlock*, int*)>:
c002058c:	55                   	push   ebp
c002058d:	57                   	push   edi
c002058e:	56                   	push   esi
c002058f:	53                   	push   ebx
c0020590:	51                   	push   ecx
c0020591:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020595:	85 db                	test   ebx,ebx
c0020597:	0f 84 bc 00 00 00    	je     c0020659 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002059d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00205a4:	0f 84 af 00 00 00    	je     c0020659 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00205aa:	31 c9                	xor    ecx,ecx
c00205ac:	bf 08 00 00 00       	mov    edi,0x8
c00205b1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00205b7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00205ba:	99                   	cdq    
c00205bb:	f7 ff                	idiv   edi
c00205bd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00205c4:	85 ed                	test   ebp,ebp
c00205c6:	0f 84 9e 00 00 00    	je     c002066a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00205cc:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00205d2:	89 e9                	mov    ecx,ebp
c00205d4:	bf 01 00 00 00       	mov    edi,0x1
c00205d9:	d3 e7                	shl    edi,cl
c00205db:	31 c9                	xor    ecx,ecx
c00205dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00205e0:	b8 01 00 00 00       	mov    eax,0x1
c00205e5:	d3 e0                	shl    eax,cl
c00205e7:	85 04 24             	test   DWORD PTR [esp],eax
c00205ea:	74 06                	je     c00205f2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00205ec:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00205f0:	75 67                	jne    c0020659 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00205f2:	41                   	inc    ecx
c00205f3:	83 f9 11             	cmp    ecx,0x11
c00205f6:	75 e8                	jne    c00205e0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00205f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00205fb:	46                   	inc    esi
c00205fc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020602:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c002060d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020614:	09 f8                	or     eax,edi
c0020616:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c002061c:	31 c0                	xor    eax,eax
c002061e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020626:	74 09                	je     c0020631 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020628:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c002062f:	eb 06                	jmp    c0020637 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020631:	40                   	inc    eax
c0020632:	83 f8 08             	cmp    eax,0x8
c0020635:	75 e7                	jne    c002061e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002063b:	83 fd 09             	cmp    ebp,0x9
c002063e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020641:	89 2a                	mov    DWORD PTR [edx],ebp
c0020643:	75 07                	jne    c002064c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020645:	b8 18 04 02 c0       	mov    eax,0xc0020418
c002064a:	eb 31                	jmp    c002067d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002064c:	83 f8 01             	cmp    eax,0x1
c002064f:	75 0c                	jne    c002065d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020651:	f7 d7                	not    edi
c0020653:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020659:	31 c0                	xor    eax,eax
c002065b:	eb 20                	jmp    c002067d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002065d:	85 c0                	test   eax,eax
c002065f:	75 1c                	jne    c002067d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020661:	8b 04 ad 20 3e 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcc1e0]
c0020668:	eb 13                	jmp    c002067d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002066a:	41                   	inc    ecx
c002066b:	46                   	inc    esi
c002066c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020672:	83 f9 08             	cmp    ecx,0x8
c0020675:	0f 85 36 ff ff ff    	jne    c00205b1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c002067b:	eb dc                	jmp    c0020659 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002067d:	5a                   	pop    edx
c002067e:	5b                   	pop    ebx
c002067f:	5e                   	pop    esi
c0020680:	5f                   	pop    edi
c0020681:	5d                   	pop    ebp
c0020682:	c3                   	ret    

c0020683 <KiCheckSignalZ>:
c0020683:	83 ec 10             	sub    esp,0x10
c0020686:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002068a:	50                   	push   eax
c002068b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020690:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020693:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020699:	e8 ee fe ff ff       	call   c002058c <KeCheckSignal(SigHandlerBlock*, int*)>
c002069e:	5a                   	pop    edx
c002069f:	31 d2                	xor    edx,edx
c00206a1:	59                   	pop    ecx
c00206a2:	85 c0                	test   eax,eax
c00206a4:	74 19                	je     c00206bf <KiCheckSignalZ+0x3c>
c00206a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00206ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00206af:	89 02                	mov    DWORD PTR [edx],eax
c00206b1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00206b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00206bf:	89 d0                	mov    eax,edx
c00206c1:	83 c4 10             	add    esp,0x10
c00206c4:	c3                   	ret    

c00206c5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00206c5:	56                   	push   esi
c00206c6:	53                   	push   ebx
c00206c7:	bb 01 00 00 00       	mov    ebx,0x1
c00206cc:	52                   	push   edx
c00206cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00206d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00206d5:	d3 e3                	shl    ebx,cl
c00206d7:	83 f9 10             	cmp    ecx,0x10
c00206da:	7f 08                	jg     c00206e4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00206dc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00206e2:	75 10                	jne    c00206f4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00206e4:	83 ec 0c             	sub    esp,0xc
c00206e7:	68 e1 25 03 c0       	push   0xc00325e1
c00206ec:	e8 82 f9 ff ff       	call   c0020073 <KePanic(char const*)>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	f7 d3                	not    ebx
c00206f6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00206fc:	58                   	pop    eax
c00206fd:	5b                   	pop    ebx
c00206fe:	5e                   	pop    esi
c00206ff:	c3                   	ret    

c0020700 <KiFinishSignalZ>:
c0020700:	53                   	push   ebx
c0020701:	83 ec 10             	sub    esp,0x10
c0020704:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020708:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c002070b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020710:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020713:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020719:	e8 a7 ff ff ff       	call   c00206c5 <KeCompleteSignal(SigHandlerBlock*, int)>
c002071e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020724:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002072b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020732:	83 c4 18             	add    esp,0x18
c0020735:	5b                   	pop    ebx
c0020736:	c3                   	ret    

c0020737 <SysSeekDir(regs*)>:
c0020737:	31 c0                	xor    eax,eax
c0020739:	31 d2                	xor    edx,edx
c002073b:	c3                   	ret    

c002073c <SysTellDir(regs*)>:
c002073c:	31 c0                	xor    eax,eax
c002073e:	31 d2                	xor    edx,edx
c0020740:	c3                   	ret    

c0020741 <SysVerify(regs*)>:
c0020741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020745:	31 d2                	xor    edx,edx
c0020747:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002074a:	c3                   	ret    

c002074b <SysGetArgc(regs*)>:
c002074b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020750:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020753:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020759:	89 c2                	mov    edx,eax
c002075b:	c1 fa 1f             	sar    edx,0x1f
c002075e:	c3                   	ret    

c002075f <SysTTYName(regs*)>:
c002075f:	b8 01 00 00 00       	mov    eax,0x1
c0020764:	31 d2                	xor    edx,edx
c0020766:	c3                   	ret    

c0020767 <SysFormatDisk(regs*)>:
c0020767:	56                   	push   esi
c0020768:	53                   	push   ebx
c0020769:	83 ec 04             	sub    esp,0x4
c002076c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020770:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020776:	eb 2a                	jmp    c00207a2 <SysFormatDisk(regs*)+0x3b>
c0020778:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c002077b:	83 ec 0c             	sub    esp,0xc
c002077e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020781:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020783:	51                   	push   ecx
c0020784:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020787:	51                   	push   ecx
c0020788:	50                   	push   eax
c0020789:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020790:	50                   	push   eax
c0020791:	53                   	push   ebx
c0020792:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020795:	83 c4 20             	add    esp,0x20
c0020798:	83 f8 08             	cmp    eax,0x8
c002079b:	89 c1                	mov    ecx,eax
c002079d:	75 14                	jne    c00207b3 <SysFormatDisk(regs*)+0x4c>
c002079f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00207a2:	85 db                	test   ebx,ebx
c00207a4:	75 d2                	jne    c0020778 <SysFormatDisk(regs*)+0x11>
c00207a6:	b8 03 00 00 00       	mov    eax,0x3
c00207ab:	31 d2                	xor    edx,edx
c00207ad:	83 c4 04             	add    esp,0x4
c00207b0:	5b                   	pop    ebx
c00207b1:	5e                   	pop    esi
c00207b2:	c3                   	ret    
c00207b3:	85 c0                	test   eax,eax
c00207b5:	74 13                	je     c00207ca <SysFormatDisk(regs*)+0x63>
c00207b7:	31 d2                	xor    edx,edx
c00207b9:	83 f9 09             	cmp    ecx,0x9
c00207bc:	b8 01 00 00 00       	mov    eax,0x1
c00207c1:	74 ea                	je     c00207ad <SysFormatDisk(regs*)+0x46>
c00207c3:	b8 02 00 00 00       	mov    eax,0x2
c00207c8:	eb e1                	jmp    c00207ab <SysFormatDisk(regs*)+0x44>
c00207ca:	31 c0                	xor    eax,eax
c00207cc:	eb dd                	jmp    c00207ab <SysFormatDisk(regs*)+0x44>

c00207ce <SysSetDiskVolumeLabel(regs*)>:
c00207ce:	56                   	push   esi
c00207cf:	53                   	push   ebx
c00207d0:	83 ec 04             	sub    esp,0x4
c00207d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00207d7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00207da:	83 f8 19             	cmp    eax,0x19
c00207dd:	77 33                	ja     c0020812 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207df:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00207e6:	85 c9                	test   ecx,ecx
c00207e8:	74 28                	je     c0020812 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207ea:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00207ed:	85 db                	test   ebx,ebx
c00207ef:	74 21                	je     c0020812 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207f1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00207f7:	85 d2                	test   edx,edx
c00207f9:	74 17                	je     c0020812 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207fb:	8b 32                	mov    esi,DWORD PTR [edx]
c00207fd:	53                   	push   ebx
c00207fe:	50                   	push   eax
c00207ff:	51                   	push   ecx
c0020800:	52                   	push   edx
c0020801:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020804:	83 c4 10             	add    esp,0x10
c0020807:	83 c4 04             	add    esp,0x4
c002080a:	5b                   	pop    ebx
c002080b:	5e                   	pop    esi
c002080c:	89 c2                	mov    edx,eax
c002080e:	c1 fa 1f             	sar    edx,0x1f
c0020811:	c3                   	ret    
c0020812:	83 c4 04             	add    esp,0x4
c0020815:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002081a:	5b                   	pop    ebx
c002081b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020820:	5e                   	pop    esi
c0020821:	c3                   	ret    

c0020822 <SysGetDiskVolumeLabel(regs*)>:
c0020822:	57                   	push   edi
c0020823:	56                   	push   esi
c0020824:	53                   	push   ebx
c0020825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020829:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002082c:	83 fa 19             	cmp    edx,0x19
c002082f:	77 3c                	ja     c002086d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020831:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020838:	85 c9                	test   ecx,ecx
c002083a:	74 31                	je     c002086d <SysGetDiskVolumeLabel(regs*)+0x4b>
c002083c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c002083f:	85 db                	test   ebx,ebx
c0020841:	74 2a                	je     c002086d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020843:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020846:	85 f6                	test   esi,esi
c0020848:	74 23                	je     c002086d <SysGetDiskVolumeLabel(regs*)+0x4b>
c002084a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020850:	85 c0                	test   eax,eax
c0020852:	74 19                	je     c002086d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020854:	83 ec 0c             	sub    esp,0xc
c0020857:	8b 38                	mov    edi,DWORD PTR [eax]
c0020859:	56                   	push   esi
c002085a:	53                   	push   ebx
c002085b:	52                   	push   edx
c002085c:	51                   	push   ecx
c002085d:	50                   	push   eax
c002085e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020861:	83 c4 20             	add    esp,0x20
c0020864:	5b                   	pop    ebx
c0020865:	5e                   	pop    esi
c0020866:	89 c2                	mov    edx,eax
c0020868:	c1 fa 1f             	sar    edx,0x1f
c002086b:	5f                   	pop    edi
c002086c:	c3                   	ret    
c002086d:	5b                   	pop    ebx
c002086e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020873:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020878:	5e                   	pop    esi
c0020879:	5f                   	pop    edi
c002087a:	c3                   	ret    

c002087b <SysShutdown(regs*)>:
c002087b:	57                   	push   edi
c002087c:	56                   	push   esi
c002087d:	83 ec 04             	sub    esp,0x4
c0020880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020887:	85 c0                	test   eax,eax
c0020889:	74 1e                	je     c00208a9 <SysShutdown(regs*)+0x2e>
c002088b:	83 f8 01             	cmp    eax,0x1
c002088e:	74 5f                	je     c00208ef <SysShutdown(regs*)+0x74>
c0020890:	83 f8 02             	cmp    eax,0x2
c0020893:	be ff ff ff ff       	mov    esi,0xffffffff
c0020898:	bf ff ff ff ff       	mov    edi,0xffffffff
c002089d:	74 32                	je     c00208d1 <SysShutdown(regs*)+0x56>
c002089f:	83 c4 04             	add    esp,0x4
c00208a2:	89 f0                	mov    eax,esi
c00208a4:	5e                   	pop    esi
c00208a5:	89 fa                	mov    edx,edi
c00208a7:	5f                   	pop    edi
c00208a8:	c3                   	ret    
c00208a9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00208ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00208b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00208b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00208ba:	6a 00                	push   0x0
c00208bc:	6a 00                	push   0x0
c00208be:	6a 00                	push   0x0
c00208c0:	50                   	push   eax
c00208c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00208c4:	83 c4 10             	add    esp,0x10
c00208c7:	89 f0                	mov    eax,esi
c00208c9:	83 c4 04             	add    esp,0x4
c00208cc:	89 fa                	mov    edx,edi
c00208ce:	5e                   	pop    esi
c00208cf:	5f                   	pop    edi
c00208d0:	c3                   	ret    
c00208d1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00208d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00208d8:	6a 00                	push   0x0
c00208da:	6a 00                	push   0x0
c00208dc:	6a 01                	push   0x1
c00208de:	50                   	push   eax
c00208df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00208e2:	83 c4 10             	add    esp,0x10
c00208e5:	89 f0                	mov    eax,esi
c00208e7:	83 c4 04             	add    esp,0x4
c00208ea:	89 fa                	mov    edx,edi
c00208ec:	5e                   	pop    esi
c00208ed:	5f                   	pop    edi
c00208ee:	c3                   	ret    
c00208ef:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c00208f4:	85 c0                	test   eax,eax
c00208f6:	74 02                	je     c00208fa <SysShutdown(regs*)+0x7f>
c00208f8:	ff d0                	call   eax
c00208fa:	31 f6                	xor    esi,esi
c00208fc:	83 c4 04             	add    esp,0x4
c00208ff:	89 f0                	mov    eax,esi
c0020901:	31 ff                	xor    edi,edi
c0020903:	5e                   	pop    esi
c0020904:	89 fa                	mov    edx,edi
c0020906:	5f                   	pop    edi
c0020907:	c3                   	ret    

c0020908 <SysRealpath(regs*)>:
c0020908:	53                   	push   ebx
c0020909:	83 ec 08             	sub    esp,0x8
c002090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020910:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0020913:	85 c9                	test   ecx,ecx
c0020915:	74 36                	je     c002094d <SysRealpath(regs*)+0x45>
c0020917:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c002091a:	31 d2                	xor    edx,edx
c002091c:	b8 01 00 00 00       	mov    eax,0x1
c0020921:	85 db                	test   ebx,ebx
c0020923:	75 05                	jne    c002092a <SysRealpath(regs*)+0x22>
c0020925:	83 c4 08             	add    esp,0x8
c0020928:	5b                   	pop    ebx
c0020929:	c3                   	ret    
c002092a:	6a 00                	push   0x0
c002092c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020931:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020934:	05 0c 01 00 00       	add    eax,0x10c
c0020939:	50                   	push   eax
c002093a:	51                   	push   ecx
c002093b:	53                   	push   ebx
c002093c:	e8 91 97 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020941:	83 c4 10             	add    esp,0x10
c0020944:	31 c0                	xor    eax,eax
c0020946:	31 d2                	xor    edx,edx
c0020948:	83 c4 08             	add    esp,0x8
c002094b:	5b                   	pop    ebx
c002094c:	c3                   	ret    
c002094d:	b8 01 00 00 00       	mov    eax,0x1
c0020952:	31 d2                	xor    edx,edx
c0020954:	eb f2                	jmp    c0020948 <SysRealpath(regs*)+0x40>

c0020956 <SysReadDir(regs*)>:
c0020956:	53                   	push   ebx
c0020957:	83 ec 18             	sub    esp,0x18
c002095a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002095e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020961:	83 f8 02             	cmp    eax,0x2
c0020964:	76 4f                	jbe    c00209b5 <SysReadDir(regs*)+0x5f>
c0020966:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c002096d:	77 52                	ja     c00209c1 <SysReadDir(regs*)+0x6b>
c002096f:	83 ec 0c             	sub    esp,0xc
c0020972:	50                   	push   eax
c0020973:	e8 df 73 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020978:	83 c4 10             	add    esp,0x10
c002097b:	85 c0                	test   eax,eax
c002097d:	74 42                	je     c00209c1 <SysReadDir(regs*)+0x6b>
c002097f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020987:	83 ec 0c             	sub    esp,0xc
c002098a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002098e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020990:	51                   	push   ecx
c0020991:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020994:	51                   	push   ecx
c0020995:	6a 00                	push   0x0
c0020997:	68 10 01 00 00       	push   0x110
c002099c:	50                   	push   eax
c002099d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00209a0:	83 c4 20             	add    esp,0x20
c00209a3:	85 c0                	test   eax,eax
c00209a5:	89 c1                	mov    ecx,eax
c00209a7:	74 27                	je     c00209d0 <SysReadDir(regs*)+0x7a>
c00209a9:	31 d2                	xor    edx,edx
c00209ab:	83 f9 07             	cmp    ecx,0x7
c00209ae:	b8 02 00 00 00       	mov    eax,0x2
c00209b3:	75 16                	jne    c00209cb <SysReadDir(regs*)+0x75>
c00209b5:	b8 01 00 00 00       	mov    eax,0x1
c00209ba:	31 d2                	xor    edx,edx
c00209bc:	83 c4 18             	add    esp,0x18
c00209bf:	5b                   	pop    ebx
c00209c0:	c3                   	ret    
c00209c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00209c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00209cb:	83 c4 18             	add    esp,0x18
c00209ce:	5b                   	pop    ebx
c00209cf:	c3                   	ret    
c00209d0:	31 c0                	xor    eax,eax
c00209d2:	31 d2                	xor    edx,edx
c00209d4:	eb e6                	jmp    c00209bc <SysReadDir(regs*)+0x66>

c00209d6 <SysIsATTY(regs*)>:
c00209d6:	83 ec 0c             	sub    esp,0xc
c00209d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00209e0:	83 f8 02             	cmp    eax,0x2
c00209e3:	76 07                	jbe    c00209ec <SysIsATTY(regs*)+0x16>
c00209e5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00209ea:	75 26                	jne    c0020a12 <SysIsATTY(regs*)+0x3c>
c00209ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00209f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00209f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00209fa:	85 c0                	test   eax,eax
c00209fc:	74 24                	je     c0020a22 <SysIsATTY(regs*)+0x4c>
c00209fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a00:	83 ec 0c             	sub    esp,0xc
c0020a03:	50                   	push   eax
c0020a04:	ff 12                	call   DWORD PTR [edx]
c0020a06:	83 c4 10             	add    esp,0x10
c0020a09:	31 d2                	xor    edx,edx
c0020a0b:	83 c4 0c             	add    esp,0xc
c0020a0e:	0f b6 c0             	movzx  eax,al
c0020a11:	c3                   	ret    
c0020a12:	83 ec 0c             	sub    esp,0xc
c0020a15:	50                   	push   eax
c0020a16:	e8 3c 73 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	85 c0                	test   eax,eax
c0020a20:	75 dc                	jne    c00209fe <SysIsATTY(regs*)+0x28>
c0020a22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020a27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020a2c:	83 c4 0c             	add    esp,0xc
c0020a2f:	c3                   	ret    

c0020a30 <SysSeek(regs*)>:
c0020a30:	56                   	push   esi
c0020a31:	53                   	push   ebx
c0020a32:	83 ec 04             	sub    esp,0x4
c0020a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a39:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0020a3c:	8d 71 fd             	lea    esi,[ecx-0x3]
c0020a3f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0020a45:	77 33                	ja     c0020a7a <SysSeek(regs*)+0x4a>
c0020a47:	83 ec 0c             	sub    esp,0xc
c0020a4a:	51                   	push   ecx
c0020a4b:	e8 07 73 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020a50:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020a53:	83 c4 0c             	add    esp,0xc
c0020a56:	31 db                	xor    ebx,ebx
c0020a58:	53                   	push   ebx
c0020a59:	51                   	push   ecx
c0020a5a:	50                   	push   eax
c0020a5b:	e8 5a 9a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0020a60:	83 c4 10             	add    esp,0x10
c0020a63:	85 c0                	test   eax,eax
c0020a65:	0f 95 c0             	setne  al
c0020a68:	31 d2                	xor    edx,edx
c0020a6a:	0f b6 c0             	movzx  eax,al
c0020a6d:	f7 d8                	neg    eax
c0020a6f:	83 d2 00             	adc    edx,0x0
c0020a72:	83 c4 04             	add    esp,0x4
c0020a75:	5b                   	pop    ebx
c0020a76:	f7 da                	neg    edx
c0020a78:	5e                   	pop    esi
c0020a79:	c3                   	ret    
c0020a7a:	83 c4 04             	add    esp,0x4
c0020a7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020a82:	5b                   	pop    ebx
c0020a83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020a88:	5e                   	pop    esi
c0020a89:	c3                   	ret    

c0020a8a <SysTell(regs*)>:
c0020a8a:	53                   	push   ebx
c0020a8b:	83 ec 08             	sub    esp,0x8
c0020a8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020a95:	83 f8 02             	cmp    eax,0x2
c0020a98:	76 4e                	jbe    c0020ae8 <SysTell(regs*)+0x5e>
c0020a9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020a9f:	76 19                	jbe    c0020aba <SysTell(regs*)+0x30>
c0020aa1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020aa4:	31 d2                	xor    edx,edx
c0020aa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020aac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ab3:	83 c4 08             	add    esp,0x8
c0020ab6:	31 c0                	xor    eax,eax
c0020ab8:	5b                   	pop    ebx
c0020ab9:	c3                   	ret    
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	50                   	push   eax
c0020abe:	e8 94 72 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020ac3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020ac6:	5a                   	pop    edx
c0020ac7:	59                   	pop    ecx
c0020ac8:	53                   	push   ebx
c0020ac9:	50                   	push   eax
c0020aca:	e8 97 9a ff ff       	call   c001a566 <File::tell(unsigned long long*)>
c0020acf:	83 c4 10             	add    esp,0x10
c0020ad2:	85 c0                	test   eax,eax
c0020ad4:	0f 95 c0             	setne  al
c0020ad7:	31 d2                	xor    edx,edx
c0020ad9:	0f b6 c0             	movzx  eax,al
c0020adc:	f7 d8                	neg    eax
c0020ade:	83 d2 00             	adc    edx,0x0
c0020ae1:	83 c4 08             	add    esp,0x8
c0020ae4:	5b                   	pop    ebx
c0020ae5:	f7 da                	neg    edx
c0020ae7:	c3                   	ret    
c0020ae8:	83 c4 08             	add    esp,0x8
c0020aeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020af0:	5b                   	pop    ebx
c0020af1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020af6:	c3                   	ret    

c0020af7 <SysSize(regs*)>:
c0020af7:	53                   	push   ebx
c0020af8:	83 ec 18             	sub    esp,0x18
c0020afb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020aff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020b02:	83 f8 02             	cmp    eax,0x2
c0020b05:	76 54                	jbe    c0020b5b <SysSize(regs*)+0x64>
c0020b07:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020b0c:	76 19                	jbe    c0020b27 <SysSize(regs*)+0x30>
c0020b0e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020b11:	31 d2                	xor    edx,edx
c0020b13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020b19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020b20:	83 c4 18             	add    esp,0x18
c0020b23:	31 c0                	xor    eax,eax
c0020b25:	5b                   	pop    ebx
c0020b26:	c3                   	ret    
c0020b27:	83 ec 0c             	sub    esp,0xc
c0020b2a:	50                   	push   eax
c0020b2b:	e8 27 72 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020b30:	83 c4 0c             	add    esp,0xc
c0020b33:	8d 54 24 13          	lea    edx,[esp+0x13]
c0020b37:	52                   	push   edx
c0020b38:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0020b3b:	52                   	push   edx
c0020b3c:	50                   	push   eax
c0020b3d:	e8 bc 9b ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c0020b42:	83 c4 10             	add    esp,0x10
c0020b45:	85 c0                	test   eax,eax
c0020b47:	0f 95 c0             	setne  al
c0020b4a:	31 d2                	xor    edx,edx
c0020b4c:	0f b6 c0             	movzx  eax,al
c0020b4f:	f7 d8                	neg    eax
c0020b51:	83 d2 00             	adc    edx,0x0
c0020b54:	83 c4 18             	add    esp,0x18
c0020b57:	5b                   	pop    ebx
c0020b58:	f7 da                	neg    edx
c0020b5a:	c3                   	ret    
c0020b5b:	83 c4 18             	add    esp,0x18
c0020b5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020b63:	5b                   	pop    ebx
c0020b64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020b69:	c3                   	ret    

c0020b6a <SysSizeFromFilename(regs*)>:
c0020b6a:	55                   	push   ebp
c0020b6b:	57                   	push   edi
c0020b6c:	56                   	push   esi
c0020b6d:	53                   	push   ebx
c0020b6e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0020b74:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0020b7b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0020b7e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0020b81:	85 f6                	test   esi,esi
c0020b83:	89 f8                	mov    eax,edi
c0020b85:	74 09                	je     c0020b90 <SysSizeFromFilename(regs*)+0x26>
c0020b87:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020b8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020b90:	83 f8 02             	cmp    eax,0x2
c0020b93:	0f 86 ca 00 00 00    	jbe    c0020c63 <SysSizeFromFilename(regs*)+0xf9>
c0020b99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020b9e:	76 1f                	jbe    c0020bbf <SysSizeFromFilename(regs*)+0x55>
c0020ba0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020ba3:	31 d2                	xor    edx,edx
c0020ba5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020bab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020bb2:	31 c0                	xor    eax,eax
c0020bb4:	81 c4 4c 02 00 00    	add    esp,0x24c
c0020bba:	5b                   	pop    ebx
c0020bbb:	5e                   	pop    esi
c0020bbc:	5f                   	pop    edi
c0020bbd:	5d                   	pop    ebp
c0020bbe:	c3                   	ret    
c0020bbf:	83 ec 0c             	sub    esp,0xc
c0020bc2:	68 14 01 00 00       	push   0x114
c0020bc7:	e8 c3 57 ff ff       	call   c001638f <malloc>
c0020bcc:	6a 01                	push   0x1
c0020bce:	89 c5                	mov    ebp,eax
c0020bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020bd5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0020bd8:	51                   	push   ecx
c0020bd9:	57                   	push   edi
c0020bda:	55                   	push   ebp
c0020bdb:	e8 20 97 ff ff       	call   c001a300 <File::File(char const*, Process*, bool)>
c0020be0:	83 c4 1c             	add    esp,0x1c
c0020be3:	8d 44 24 13          	lea    eax,[esp+0x13]
c0020be7:	50                   	push   eax
c0020be8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020beb:	53                   	push   ebx
c0020bec:	55                   	push   ebp
c0020bed:	e8 0c 9b ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c0020bf2:	83 c4 10             	add    esp,0x10
c0020bf5:	85 ed                	test   ebp,ebp
c0020bf7:	89 c3                	mov    ebx,eax
c0020bf9:	74 0d                	je     c0020c08 <SysSizeFromFilename(regs*)+0x9e>
c0020bfb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020bfe:	83 ec 0c             	sub    esp,0xc
c0020c01:	55                   	push   ebp
c0020c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	85 db                	test   ebx,ebx
c0020c0a:	75 57                	jne    c0020c63 <SysSizeFromFilename(regs*)+0xf9>
c0020c0c:	6a 00                	push   0x0
c0020c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c16:	05 0c 01 00 00       	add    eax,0x10c
c0020c1b:	50                   	push   eax
c0020c1c:	57                   	push   edi
c0020c1d:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0020c24:	53                   	push   ebx
c0020c25:	e8 a8 94 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020c2a:	58                   	pop    eax
c0020c2b:	5a                   	pop    edx
c0020c2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c30:	50                   	push   eax
c0020c31:	53                   	push   ebx
c0020c32:	e8 03 8f ff ff       	call   c0019b3a <KeDereferenceSymlink(char const*, char*)>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	ba 00 00 00 00       	mov    edx,0x0
c0020c3f:	83 f8 01             	cmp    eax,0x1
c0020c42:	b8 00 00 00 00       	mov    eax,0x0
c0020c47:	74 2f                	je     c0020c78 <SysSizeFromFilename(regs*)+0x10e>
c0020c49:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020c4e:	74 3b                	je     c0020c8b <SysSizeFromFilename(regs*)+0x121>
c0020c50:	85 f6                	test   esi,esi
c0020c52:	0f 84 5c ff ff ff    	je     c0020bb4 <SysSizeFromFilename(regs*)+0x4a>
c0020c58:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0020c5e:	e9 51 ff ff ff       	jmp    c0020bb4 <SysSizeFromFilename(regs*)+0x4a>
c0020c63:	81 c4 4c 02 00 00    	add    esp,0x24c
c0020c69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020c6e:	5b                   	pop    ebx
c0020c6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020c74:	5e                   	pop    esi
c0020c75:	5f                   	pop    edi
c0020c76:	5d                   	pop    ebp
c0020c77:	c3                   	ret    
c0020c78:	85 f6                	test   esi,esi
c0020c7a:	0f 84 34 ff ff ff    	je     c0020bb4 <SysSizeFromFilename(regs*)+0x4a>
c0020c80:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0020c86:	e9 29 ff ff ff       	jmp    c0020bb4 <SysSizeFromFilename(regs*)+0x4a>
c0020c8b:	85 f6                	test   esi,esi
c0020c8d:	0f 84 21 ff ff ff    	je     c0020bb4 <SysSizeFromFilename(regs*)+0x4a>
c0020c93:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020c99:	e9 16 ff ff ff       	jmp    c0020bb4 <SysSizeFromFilename(regs*)+0x4a>

c0020c9e <SysSizeFromFilenameNoSymlink(regs*)>:
c0020c9e:	55                   	push   ebp
c0020c9f:	57                   	push   edi
c0020ca0:	56                   	push   esi
c0020ca1:	53                   	push   ebx
c0020ca2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0020ca8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0020caf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0020cb2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0020cb5:	85 f6                	test   esi,esi
c0020cb7:	89 f8                	mov    eax,edi
c0020cb9:	74 09                	je     c0020cc4 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0020cbb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020cc1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020cc4:	83 f8 02             	cmp    eax,0x2
c0020cc7:	0f 86 ca 00 00 00    	jbe    c0020d97 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0020ccd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020cd2:	76 1f                	jbe    c0020cf3 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0020cd4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020cd7:	31 d2                	xor    edx,edx
c0020cd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020cdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ce6:	31 c0                	xor    eax,eax
c0020ce8:	81 c4 4c 02 00 00    	add    esp,0x24c
c0020cee:	5b                   	pop    ebx
c0020cef:	5e                   	pop    esi
c0020cf0:	5f                   	pop    edi
c0020cf1:	5d                   	pop    ebp
c0020cf2:	c3                   	ret    
c0020cf3:	83 ec 0c             	sub    esp,0xc
c0020cf6:	68 14 01 00 00       	push   0x114
c0020cfb:	e8 8f 56 ff ff       	call   c001638f <malloc>
c0020d00:	6a 00                	push   0x0
c0020d02:	89 c5                	mov    ebp,eax
c0020d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d09:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0020d0c:	51                   	push   ecx
c0020d0d:	57                   	push   edi
c0020d0e:	55                   	push   ebp
c0020d0f:	e8 ec 95 ff ff       	call   c001a300 <File::File(char const*, Process*, bool)>
c0020d14:	83 c4 1c             	add    esp,0x1c
c0020d17:	8d 44 24 13          	lea    eax,[esp+0x13]
c0020d1b:	50                   	push   eax
c0020d1c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020d1f:	53                   	push   ebx
c0020d20:	55                   	push   ebp
c0020d21:	e8 d8 99 ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	85 ed                	test   ebp,ebp
c0020d2b:	89 c3                	mov    ebx,eax
c0020d2d:	74 0d                	je     c0020d3c <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0020d2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d32:	83 ec 0c             	sub    esp,0xc
c0020d35:	55                   	push   ebp
c0020d36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020d39:	83 c4 10             	add    esp,0x10
c0020d3c:	85 db                	test   ebx,ebx
c0020d3e:	75 57                	jne    c0020d97 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0020d40:	6a 00                	push   0x0
c0020d42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d4a:	05 0c 01 00 00       	add    eax,0x10c
c0020d4f:	50                   	push   eax
c0020d50:	57                   	push   edi
c0020d51:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0020d58:	53                   	push   ebx
c0020d59:	e8 74 93 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020d5e:	58                   	pop    eax
c0020d5f:	5a                   	pop    edx
c0020d60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d64:	50                   	push   eax
c0020d65:	53                   	push   ebx
c0020d66:	e8 cf 8d ff ff       	call   c0019b3a <KeDereferenceSymlink(char const*, char*)>
c0020d6b:	83 c4 10             	add    esp,0x10
c0020d6e:	ba 00 00 00 00       	mov    edx,0x0
c0020d73:	83 f8 01             	cmp    eax,0x1
c0020d76:	b8 00 00 00 00       	mov    eax,0x0
c0020d7b:	74 2f                	je     c0020dac <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0020d7d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020d82:	74 3b                	je     c0020dbf <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0020d84:	85 f6                	test   esi,esi
c0020d86:	0f 84 5c ff ff ff    	je     c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0020d8c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0020d92:	e9 51 ff ff ff       	jmp    c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0020d97:	81 c4 4c 02 00 00    	add    esp,0x24c
c0020d9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020da2:	5b                   	pop    ebx
c0020da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020da8:	5e                   	pop    esi
c0020da9:	5f                   	pop    edi
c0020daa:	5d                   	pop    ebp
c0020dab:	c3                   	ret    
c0020dac:	85 f6                	test   esi,esi
c0020dae:	0f 84 34 ff ff ff    	je     c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0020db4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0020dba:	e9 29 ff ff ff       	jmp    c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0020dbf:	85 f6                	test   esi,esi
c0020dc1:	0f 84 21 ff ff ff    	je     c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0020dc7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020dcd:	e9 16 ff ff ff       	jmp    c0020ce8 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0020dd2 <SysClose(regs*)>:
c0020dd2:	53                   	push   ebx
c0020dd3:	83 ec 08             	sub    esp,0x8
c0020dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ddd:	83 f8 02             	cmp    eax,0x2
c0020de0:	76 41                	jbe    c0020e23 <SysClose(regs*)+0x51>
c0020de2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0020de8:	83 fa 01             	cmp    edx,0x1
c0020deb:	76 2d                	jbe    c0020e1a <SysClose(regs*)+0x48>
c0020ded:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020df2:	77 2f                	ja     c0020e23 <SysClose(regs*)+0x51>
c0020df4:	83 ec 0c             	sub    esp,0xc
c0020df7:	50                   	push   eax
c0020df8:	e8 5a 6f ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020dfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e00:	89 c3                	mov    ebx,eax
c0020e02:	e8 53 96 ff ff       	call   c001a45a <File::close()>
c0020e07:	83 c4 10             	add    esp,0x10
c0020e0a:	85 db                	test   ebx,ebx
c0020e0c:	74 0c                	je     c0020e1a <SysClose(regs*)+0x48>
c0020e0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020e10:	83 ec 0c             	sub    esp,0xc
c0020e13:	53                   	push   ebx
c0020e14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020e17:	83 c4 10             	add    esp,0x10
c0020e1a:	83 c4 08             	add    esp,0x8
c0020e1d:	31 c0                	xor    eax,eax
c0020e1f:	5b                   	pop    ebx
c0020e20:	31 d2                	xor    edx,edx
c0020e22:	c3                   	ret    
c0020e23:	83 c4 08             	add    esp,0x8
c0020e26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020e2b:	5b                   	pop    ebx
c0020e2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e31:	c3                   	ret    

c0020e32 <SysOpenDir(regs*)>:
c0020e32:	56                   	push   esi
c0020e33:	53                   	push   ebx
c0020e34:	83 ec 04             	sub    esp,0x4
c0020e37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e3b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0020e3e:	85 c9                	test   ecx,ecx
c0020e40:	74 5d                	je     c0020e9f <SysOpenDir(regs*)+0x6d>
c0020e42:	83 ec 0c             	sub    esp,0xc
c0020e45:	68 14 01 00 00       	push   0x114
c0020e4a:	e8 40 55 ff ff       	call   c001638f <malloc>
c0020e4f:	83 c4 0c             	add    esp,0xc
c0020e52:	89 c6                	mov    esi,eax
c0020e54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e5c:	50                   	push   eax
c0020e5d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0020e60:	52                   	push   edx
c0020e61:	56                   	push   esi
c0020e62:	e8 57 9a ff ff       	call   c001a8be <Directory::Directory(char const*, Process*)>
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	85 f6                	test   esi,esi
c0020e6c:	74 31                	je     c0020e9f <SysOpenDir(regs*)+0x6d>
c0020e6e:	83 ec 0c             	sub    esp,0xc
c0020e71:	56                   	push   esi
c0020e72:	e8 0f 9b ff ff       	call   c001a986 <Directory::open()>
c0020e77:	83 c4 10             	add    esp,0x10
c0020e7a:	85 c0                	test   eax,eax
c0020e7c:	75 21                	jne    c0020e9f <SysOpenDir(regs*)+0x6d>
c0020e7e:	83 ec 0c             	sub    esp,0xc
c0020e81:	56                   	push   esi
c0020e82:	e8 d3 6b ff ff       	call   c0017a5a <UnixFile::getFileDescriptor()>
c0020e87:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0020e8a:	83 c4 10             	add    esp,0x10
c0020e8d:	89 02                	mov    DWORD PTR [edx],eax
c0020e8f:	c1 f8 1f             	sar    eax,0x1f
c0020e92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0020e95:	83 c4 04             	add    esp,0x4
c0020e98:	31 c0                	xor    eax,eax
c0020e9a:	5b                   	pop    ebx
c0020e9b:	31 d2                	xor    edx,edx
c0020e9d:	5e                   	pop    esi
c0020e9e:	c3                   	ret    
c0020e9f:	83 c4 04             	add    esp,0x4
c0020ea2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020ea7:	5b                   	pop    ebx
c0020ea8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ead:	5e                   	pop    esi
c0020eae:	c3                   	ret    

c0020eaf <SysMakeDir(regs*)>:
c0020eaf:	56                   	push   esi
c0020eb0:	53                   	push   ebx
c0020eb1:	83 ec 10             	sub    esp,0x10
c0020eb4:	68 14 01 00 00       	push   0x114
c0020eb9:	e8 d1 54 ff ff       	call   c001638f <malloc>
c0020ebe:	83 c4 0c             	add    esp,0xc
c0020ec1:	89 c3                	mov    ebx,eax
c0020ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020ecb:	50                   	push   eax
c0020ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ed0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0020ed3:	52                   	push   edx
c0020ed4:	53                   	push   ebx
c0020ed5:	e8 e4 99 ff ff       	call   c001a8be <Directory::Directory(char const*, Process*)>
c0020eda:	83 c4 10             	add    esp,0x10
c0020edd:	85 db                	test   ebx,ebx
c0020edf:	74 2c                	je     c0020f0d <SysMakeDir(regs*)+0x5e>
c0020ee1:	83 ec 0c             	sub    esp,0xc
c0020ee4:	53                   	push   ebx
c0020ee5:	e8 7c 9c ff ff       	call   c001ab66 <Directory::create()>
c0020eea:	89 c6                	mov    esi,eax
c0020eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020eee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020ef1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020ef4:	83 c4 10             	add    esp,0x10
c0020ef7:	31 c0                	xor    eax,eax
c0020ef9:	85 f6                	test   esi,esi
c0020efb:	0f 95 c0             	setne  al
c0020efe:	31 d2                	xor    edx,edx
c0020f00:	f7 d8                	neg    eax
c0020f02:	83 d2 00             	adc    edx,0x0
c0020f05:	83 c4 04             	add    esp,0x4
c0020f08:	5b                   	pop    ebx
c0020f09:	f7 da                	neg    edx
c0020f0b:	5e                   	pop    esi
c0020f0c:	c3                   	ret    
c0020f0d:	83 c4 04             	add    esp,0x4
c0020f10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f15:	5b                   	pop    ebx
c0020f16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f1b:	5e                   	pop    esi
c0020f1c:	c3                   	ret    

c0020f1d <SysCloseDir(regs*)>:
c0020f1d:	53                   	push   ebx
c0020f1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f23:	83 ec 08             	sub    esp,0x8
c0020f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f2a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0020f2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f32:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0020f35:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0020f3b:	77 2a                	ja     c0020f67 <SysCloseDir(regs*)+0x4a>
c0020f3d:	83 ec 0c             	sub    esp,0xc
c0020f40:	51                   	push   ecx
c0020f41:	e8 11 6e ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0020f46:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f49:	89 c3                	mov    ebx,eax
c0020f4b:	e8 92 9a ff ff       	call   c001a9e2 <Directory::close()>
c0020f50:	83 c4 10             	add    esp,0x10
c0020f53:	85 db                	test   ebx,ebx
c0020f55:	74 0c                	je     c0020f63 <SysCloseDir(regs*)+0x46>
c0020f57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020f59:	83 ec 0c             	sub    esp,0xc
c0020f5c:	53                   	push   ebx
c0020f5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020f60:	83 c4 10             	add    esp,0x10
c0020f63:	31 c0                	xor    eax,eax
c0020f65:	31 d2                	xor    edx,edx
c0020f67:	83 c4 08             	add    esp,0x8
c0020f6a:	5b                   	pop    ebx
c0020f6b:	c3                   	ret    

c0020f6c <SysWait(regs*)>:
c0020f6c:	83 ec 10             	sub    esp,0x10
c0020f6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f73:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020f76:	52                   	push   edx
c0020f77:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0020f7a:	51                   	push   ecx
c0020f7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f7e:	50                   	push   eax
c0020f7f:	e8 c0 3e 00 00       	call   c0024e44 <waitTask(int, int*, int)>
c0020f84:	83 c4 1c             	add    esp,0x1c
c0020f87:	89 c2                	mov    edx,eax
c0020f89:	c1 fa 1f             	sar    edx,0x1f
c0020f8c:	c3                   	ret    

c0020f8d <SysNotImpl(regs*)>:
c0020f8d:	83 ec 18             	sub    esp,0x18
c0020f90:	68 f2 25 03 c0       	push   0xc00325f2
c0020f95:	e8 d9 f0 ff ff       	call   c0020073 <KePanic(char const*)>
c0020f9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fa4:	83 c4 1c             	add    esp,0x1c
c0020fa7:	c3                   	ret    

c0020fa8 <SysPanic(regs*)>:
c0020fa8:	83 ec 18             	sub    esp,0x18
c0020fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020faf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020fb2:	50                   	push   eax
c0020fb3:	e8 bb f0 ff ff       	call   c0020073 <KePanic(char const*)>
c0020fb8:	b8 01 00 00 00       	mov    eax,0x1
c0020fbd:	31 d2                	xor    edx,edx
c0020fbf:	83 c4 1c             	add    esp,0x1c
c0020fc2:	c3                   	ret    

c0020fc3 <SysRmdir(regs*)>:
c0020fc3:	56                   	push   esi
c0020fc4:	53                   	push   ebx
c0020fc5:	83 ec 10             	sub    esp,0x10
c0020fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fcc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0020fcf:	68 14 01 00 00       	push   0x114
c0020fd4:	e8 b6 53 ff ff       	call   c001638f <malloc>
c0020fd9:	6a 00                	push   0x0
c0020fdb:	89 c3                	mov    ebx,eax
c0020fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fe5:	50                   	push   eax
c0020fe6:	56                   	push   esi
c0020fe7:	53                   	push   ebx
c0020fe8:	e8 13 93 ff ff       	call   c001a300 <File::File(char const*, Process*, bool)>
c0020fed:	83 c4 14             	add    esp,0x14
c0020ff0:	53                   	push   ebx
c0020ff1:	e8 d4 95 ff ff       	call   c001a5ca <File::unlink()>
c0020ff6:	83 c4 10             	add    esp,0x10
c0020ff9:	85 db                	test   ebx,ebx
c0020ffb:	89 c6                	mov    esi,eax
c0020ffd:	74 0c                	je     c002100b <SysRmdir(regs*)+0x48>
c0020fff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021001:	83 ec 0c             	sub    esp,0xc
c0021004:	53                   	push   ebx
c0021005:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021008:	83 c4 10             	add    esp,0x10
c002100b:	31 c0                	xor    eax,eax
c002100d:	85 f6                	test   esi,esi
c002100f:	0f 95 c0             	setne  al
c0021012:	31 d2                	xor    edx,edx
c0021014:	f7 d8                	neg    eax
c0021016:	83 d2 00             	adc    edx,0x0
c0021019:	83 c4 04             	add    esp,0x4
c002101c:	5b                   	pop    ebx
c002101d:	f7 da                	neg    edx
c002101f:	5e                   	pop    esi
c0021020:	c3                   	ret    

c0021021 <SysUnlink(regs*)>:
c0021021:	56                   	push   esi
c0021022:	53                   	push   ebx
c0021023:	83 ec 10             	sub    esp,0x10
c0021026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002102a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002102d:	68 14 01 00 00       	push   0x114
c0021032:	e8 58 53 ff ff       	call   c001638f <malloc>
c0021037:	6a 00                	push   0x0
c0021039:	89 c3                	mov    ebx,eax
c002103b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021043:	50                   	push   eax
c0021044:	56                   	push   esi
c0021045:	53                   	push   ebx
c0021046:	e8 b5 92 ff ff       	call   c001a300 <File::File(char const*, Process*, bool)>
c002104b:	83 c4 14             	add    esp,0x14
c002104e:	53                   	push   ebx
c002104f:	e8 76 95 ff ff       	call   c001a5ca <File::unlink()>
c0021054:	83 c4 10             	add    esp,0x10
c0021057:	85 db                	test   ebx,ebx
c0021059:	89 c6                	mov    esi,eax
c002105b:	74 0c                	je     c0021069 <SysUnlink(regs*)+0x48>
c002105d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002105f:	83 ec 0c             	sub    esp,0xc
c0021062:	53                   	push   ebx
c0021063:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	31 c0                	xor    eax,eax
c002106b:	85 f6                	test   esi,esi
c002106d:	0f 95 c0             	setne  al
c0021070:	31 d2                	xor    edx,edx
c0021072:	f7 d8                	neg    eax
c0021074:	83 d2 00             	adc    edx,0x0
c0021077:	83 c4 04             	add    esp,0x4
c002107a:	5b                   	pop    ebx
c002107b:	f7 da                	neg    edx
c002107d:	5e                   	pop    esi
c002107e:	c3                   	ret    

c002107f <SysGetArgv(regs*)>:
c002107f:	83 ec 0c             	sub    esp,0xc
c0021082:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021086:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021089:	85 c0                	test   eax,eax
c002108b:	78 2c                	js     c00210b9 <SysGetArgv(regs*)+0x3a>
c002108d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021093:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021096:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c002109c:	7d 1b                	jge    c00210b9 <SysGetArgv(regs*)+0x3a>
c002109e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00210a5:	85 c0                	test   eax,eax
c00210a7:	74 18                	je     c00210c1 <SysGetArgv(regs*)+0x42>
c00210a9:	83 ec 08             	sub    esp,0x8
c00210ac:	50                   	push   eax
c00210ad:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00210b0:	50                   	push   eax
c00210b1:	e8 9a f5 fd ff       	call   c0000650 <strcpy>
c00210b6:	83 c4 10             	add    esp,0x10
c00210b9:	31 c0                	xor    eax,eax
c00210bb:	31 d2                	xor    edx,edx
c00210bd:	83 c4 0c             	add    esp,0xc
c00210c0:	c3                   	ret    
c00210c1:	b8 01 00 00 00       	mov    eax,0x1
c00210c6:	31 d2                	xor    edx,edx
c00210c8:	83 c4 0c             	add    esp,0xc
c00210cb:	c3                   	ret    

c00210cc <SysUSleep(regs*)>:
c00210cc:	83 ec 1c             	sub    esp,0x1c
c00210cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00210d3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00210d6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00210d9:	6a 00                	push   0x0
c00210db:	6a 64                	push   0x64
c00210dd:	52                   	push   edx
c00210de:	50                   	push   eax
c00210df:	e8 1c d2 00 00       	call   c002e300 <__udivdi3>
c00210e4:	83 c4 14             	add    esp,0x14
c00210e7:	50                   	push   eax
c00210e8:	e8 3b 3e 00 00       	call   c0024f28 <milliTenthSleep(unsigned int)>
c00210ed:	31 c0                	xor    eax,eax
c00210ef:	31 d2                	xor    edx,edx
c00210f1:	83 c4 1c             	add    esp,0x1c
c00210f4:	c3                   	ret    

c00210f5 <SysSpawn(regs*)>:
c00210f5:	56                   	push   esi
c00210f6:	53                   	push   ebx
c00210f7:	83 ec 04             	sub    esp,0x4
c00210fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210fe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021101:	85 f6                	test   esi,esi
c0021103:	75 0a                	jne    c002110f <SysSpawn(regs*)+0x1a>
c0021105:	83 c4 04             	add    esp,0x4
c0021108:	31 c0                	xor    eax,eax
c002110a:	5b                   	pop    ebx
c002110b:	31 d2                	xor    edx,edx
c002110d:	5e                   	pop    esi
c002110e:	c3                   	ret    
c002110f:	83 ec 0c             	sub    esp,0xc
c0021112:	68 24 07 00 00       	push   0x724
c0021117:	e8 73 52 ff ff       	call   c001638f <malloc>
c002111c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021125:	89 c6                	mov    esi,eax
c0021127:	31 c0                	xor    eax,eax
c0021129:	85 c9                	test   ecx,ecx
c002112b:	75 08                	jne    c0021135 <SysSpawn(regs*)+0x40>
c002112d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021132:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021135:	52                   	push   edx
c0021136:	50                   	push   eax
c0021137:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002113a:	50                   	push   eax
c002113b:	56                   	push   esi
c002113c:	e8 07 34 00 00       	call   c0024548 <Process::Process(char const*, Process*, char**)>
c0021141:	83 c4 10             	add    esp,0x10
c0021144:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c002114b:	75 b8                	jne    c0021105 <SysSpawn(regs*)+0x10>
c002114d:	83 ec 0c             	sub    esp,0xc
c0021150:	56                   	push   esi
c0021151:	e8 72 39 00 00       	call   c0024ac8 <Process::createUserThread()>
c0021156:	8b 06                	mov    eax,DWORD PTR [esi]
c0021158:	83 c4 10             	add    esp,0x10
c002115b:	83 c4 04             	add    esp,0x4
c002115e:	5b                   	pop    ebx
c002115f:	89 c2                	mov    edx,eax
c0021161:	c1 fa 1f             	sar    edx,0x1f
c0021164:	5e                   	pop    esi
c0021165:	c3                   	ret    

c0021166 <SysGetEnv(regs*)>:
c0021166:	57                   	push   edi
c0021167:	56                   	push   esi
c0021168:	53                   	push   ebx
c0021169:	83 ec 1c             	sub    esp,0x1c
c002116c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021171:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021175:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021178:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002117b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002117e:	51                   	push   ecx
c002117f:	e8 a7 ed ff ff       	call   c001ff2b <KeGetProcessTotalEnvCount(Process*)>
c0021184:	83 c4 10             	add    esp,0x10
c0021187:	39 c7                	cmp    edi,eax
c0021189:	7c 12                	jl     c002119d <SysGetEnv(regs*)+0x37>
c002118b:	31 c0                	xor    eax,eax
c002118d:	31 d2                	xor    edx,edx
c002118f:	85 f6                	test   esi,esi
c0021191:	74 03                	je     c0021196 <SysGetEnv(regs*)+0x30>
c0021193:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	5b                   	pop    ebx
c002119a:	5e                   	pop    esi
c002119b:	5f                   	pop    edi
c002119c:	c3                   	ret    
c002119d:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211a1:	83 ec 04             	sub    esp,0x4
c00211a4:	57                   	push   edi
c00211a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00211ab:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00211ae:	57                   	push   edi
c00211af:	50                   	push   eax
c00211b0:	e8 96 ed ff ff       	call   c001ff4b <KeGetProcessEnvPair(Process*, int)>
c00211b5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00211b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00211c0:	83 c4 0c             	add    esp,0xc
c00211c3:	85 d2                	test   edx,edx
c00211c5:	75 23                	jne    c00211ea <SysGetEnv(regs*)+0x84>
c00211c7:	83 ec 0c             	sub    esp,0xc
c00211ca:	50                   	push   eax
c00211cb:	e8 b0 f3 fd ff       	call   c0000580 <strlen>
c00211d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00211d3:	89 c3                	mov    ebx,eax
c00211d5:	e8 a6 f3 fd ff       	call   c0000580 <strlen>
c00211da:	83 c4 10             	add    esp,0x10
c00211dd:	31 d2                	xor    edx,edx
c00211df:	83 c4 10             	add    esp,0x10
c00211e2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00211e6:	5b                   	pop    ebx
c00211e7:	5e                   	pop    esi
c00211e8:	5f                   	pop    edi
c00211e9:	c3                   	ret    
c00211ea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00211ed:	83 ec 08             	sub    esp,0x8
c00211f0:	50                   	push   eax
c00211f1:	56                   	push   esi
c00211f2:	e8 59 f4 fd ff       	call   c0000650 <strcpy>
c00211f7:	58                   	pop    eax
c00211f8:	5a                   	pop    edx
c00211f9:	68 0c 26 03 c0       	push   0xc003260c
c00211fe:	56                   	push   esi
c00211ff:	e8 6c f6 fd ff       	call   c0000870 <strcat>
c0021204:	59                   	pop    ecx
c0021205:	5b                   	pop    ebx
c0021206:	57                   	push   edi
c0021207:	56                   	push   esi
c0021208:	e8 63 f6 fd ff       	call   c0000870 <strcat>
c002120d:	83 c4 10             	add    esp,0x10
c0021210:	31 c0                	xor    eax,eax
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	31 d2                	xor    edx,edx
c0021217:	5b                   	pop    ebx
c0021218:	5e                   	pop    esi
c0021219:	5f                   	pop    edi
c002121a:	c3                   	ret    

c002121b <SysSetFatAttrib(regs*)>:
c002121b:	57                   	push   edi
c002121c:	56                   	push   esi
c002121d:	53                   	push   ebx
c002121e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021222:	83 ec 0c             	sub    esp,0xc
c0021225:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021228:	68 14 01 00 00       	push   0x114
c002122d:	e8 5d 51 ff ff       	call   c001638f <malloc>
c0021232:	83 c4 0c             	add    esp,0xc
c0021235:	89 c3                	mov    ebx,eax
c0021237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002123c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002123f:	50                   	push   eax
c0021240:	57                   	push   edi
c0021241:	53                   	push   ebx
c0021242:	e8 97 91 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0021247:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c002124a:	83 c4 0c             	add    esp,0xc
c002124d:	0f b6 d4             	movzx  edx,ah
c0021250:	0f b6 c0             	movzx  eax,al
c0021253:	52                   	push   edx
c0021254:	50                   	push   eax
c0021255:	53                   	push   ebx
c0021256:	e8 09 94 ff ff       	call   c001a664 <File::chfatattr(unsigned char, unsigned char)>
c002125b:	83 c4 10             	add    esp,0x10
c002125e:	85 db                	test   ebx,ebx
c0021260:	89 c6                	mov    esi,eax
c0021262:	74 0c                	je     c0021270 <SysSetFatAttrib(regs*)+0x55>
c0021264:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021266:	83 ec 0c             	sub    esp,0xc
c0021269:	53                   	push   ebx
c002126a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002126d:	83 c4 10             	add    esp,0x10
c0021270:	5b                   	pop    ebx
c0021271:	31 c0                	xor    eax,eax
c0021273:	85 f6                	test   esi,esi
c0021275:	0f 95 c0             	setne  al
c0021278:	31 d2                	xor    edx,edx
c002127a:	5e                   	pop    esi
c002127b:	f7 d8                	neg    eax
c002127d:	83 d2 00             	adc    edx,0x0
c0021280:	f7 da                	neg    edx
c0021282:	5f                   	pop    edi
c0021283:	c3                   	ret    

c0021284 <SysPipe(regs*)>:
c0021284:	57                   	push   edi
c0021285:	56                   	push   esi
c0021286:	53                   	push   ebx
c0021287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128b:	83 ec 0c             	sub    esp,0xc
c002128e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021291:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021294:	6a 20                	push   0x20
c0021296:	e8 f4 50 ff ff       	call   c001638f <malloc>
c002129b:	89 c3                	mov    ebx,eax
c002129d:	58                   	pop    eax
c002129e:	5a                   	pop    edx
c002129f:	68 00 50 00 00       	push   0x5000
c00212a4:	53                   	push   ebx
c00212a5:	e8 50 5a ff ff       	call   c0016cfa <Pipe::Pipe(int)>
c00212aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212ad:	e8 a8 67 ff ff       	call   c0017a5a <UnixFile::getFileDescriptor()>
c00212b2:	89 07                	mov    DWORD PTR [edi],eax
c00212b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212b7:	e8 9e 67 ff ff       	call   c0017a5a <UnixFile::getFileDescriptor()>
c00212bc:	83 c4 10             	add    esp,0x10
c00212bf:	31 d2                	xor    edx,edx
c00212c1:	89 06                	mov    DWORD PTR [esi],eax
c00212c3:	31 c0                	xor    eax,eax
c00212c5:	5b                   	pop    ebx
c00212c6:	5e                   	pop    esi
c00212c7:	5f                   	pop    edi
c00212c8:	c3                   	ret    

c00212c9 <SysGetUnixTime(regs*)>:
c00212c9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00212ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00212d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212d8:	e9 cd 9a ff ff       	jmp    c001adaa <Clock::timeInSecondsLocal()>

c00212dd <string_ends_with(char const*, char const*)>:
c00212dd:	57                   	push   edi
c00212de:	56                   	push   esi
c00212df:	53                   	push   ebx
c00212e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212e4:	83 ec 0c             	sub    esp,0xc
c00212e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00212eb:	53                   	push   ebx
c00212ec:	e8 8f f2 fd ff       	call   c0000580 <strlen>
c00212f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00212f4:	89 c6                	mov    esi,eax
c00212f6:	e8 85 f2 fd ff       	call   c0000580 <strlen>
c00212fb:	83 c4 10             	add    esp,0x10
c00212fe:	31 d2                	xor    edx,edx
c0021300:	39 c6                	cmp    esi,eax
c0021302:	7d 06                	jge    c002130a <string_ends_with(char const*, char const*)+0x2d>
c0021304:	5b                   	pop    ebx
c0021305:	89 d0                	mov    eax,edx
c0021307:	5e                   	pop    esi
c0021308:	5f                   	pop    edi
c0021309:	c3                   	ret    
c002130a:	83 ec 08             	sub    esp,0x8
c002130d:	29 c6                	sub    esi,eax
c002130f:	57                   	push   edi
c0021310:	01 f3                	add    ebx,esi
c0021312:	53                   	push   ebx
c0021313:	e8 68 f4 fd ff       	call   c0000780 <strcmp>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	31 d2                	xor    edx,edx
c002131d:	5b                   	pop    ebx
c002131e:	5e                   	pop    esi
c002131f:	85 c0                	test   eax,eax
c0021321:	5f                   	pop    edi
c0021322:	0f 94 c2             	sete   dl
c0021325:	89 d0                	mov    eax,edx
c0021327:	c3                   	ret    

c0021328 <SysOpen(regs*)>:
c0021328:	56                   	push   esi
c0021329:	53                   	push   ebx
c002132a:	81 ec 04 01 00 00    	sub    esp,0x104
c0021330:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021337:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002133a:	85 c0                	test   eax,eax
c002133c:	0f 84 c4 01 00 00    	je     c0021506 <SysOpen(regs*)+0x1de>
c0021342:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021345:	85 c0                	test   eax,eax
c0021347:	0f 84 b9 01 00 00    	je     c0021506 <SysOpen(regs*)+0x1de>
c002134d:	6a 00                	push   0x0
c002134f:	68 0e 26 03 c0       	push   0xc003260e
c0021354:	50                   	push   eax
c0021355:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021359:	56                   	push   esi
c002135a:	e8 73 8d ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002135f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021362:	e8 19 f2 fd ff       	call   c0000580 <strlen>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	83 e8 01             	sub    eax,0x1
c002136d:	74 29                	je     c0021398 <SysOpen(regs*)+0x70>
c002136f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021373:	83 fa 2e             	cmp    edx,0x2e
c0021376:	74 1c                	je     c0021394 <SysOpen(regs*)+0x6c>
c0021378:	83 fa 3a             	cmp    edx,0x3a
c002137b:	74 17                	je     c0021394 <SysOpen(regs*)+0x6c>
c002137d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021381:	83 e8 01             	sub    eax,0x1
c0021384:	74 12                	je     c0021398 <SysOpen(regs*)+0x70>
c0021386:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c002138a:	83 fa 3a             	cmp    edx,0x3a
c002138d:	74 05                	je     c0021394 <SysOpen(regs*)+0x6c>
c002138f:	83 fa 2e             	cmp    edx,0x2e
c0021392:	75 e9                	jne    c002137d <SysOpen(regs*)+0x55>
c0021394:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021398:	83 ec 08             	sub    esp,0x8
c002139b:	68 12 26 03 c0       	push   0xc0032612
c00213a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213a3:	50                   	push   eax
c00213a4:	e8 34 ff ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c00213a9:	83 c4 10             	add    esp,0x10
c00213ac:	85 c0                	test   eax,eax
c00213ae:	74 1d                	je     c00213cd <SysOpen(regs*)+0xa5>
c00213b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00213b3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00213b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213c0:	81 c4 04 01 00 00    	add    esp,0x104
c00213c6:	31 c0                	xor    eax,eax
c00213c8:	5b                   	pop    ebx
c00213c9:	31 d2                	xor    edx,edx
c00213cb:	5e                   	pop    esi
c00213cc:	c3                   	ret    
c00213cd:	83 ec 08             	sub    esp,0x8
c00213d0:	68 17 26 03 c0       	push   0xc0032617
c00213d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213d8:	50                   	push   eax
c00213d9:	e8 ff fe ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c00213de:	83 c4 10             	add    esp,0x10
c00213e1:	85 c0                	test   eax,eax
c00213e3:	75 cb                	jne    c00213b0 <SysOpen(regs*)+0x88>
c00213e5:	83 ec 08             	sub    esp,0x8
c00213e8:	68 13 26 03 c0       	push   0xc0032613
c00213ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213f0:	50                   	push   eax
c00213f1:	e8 8a f3 fd ff       	call   c0000780 <strcmp>
c00213f6:	83 c4 10             	add    esp,0x10
c00213f9:	85 c0                	test   eax,eax
c00213fb:	74 b3                	je     c00213b0 <SysOpen(regs*)+0x88>
c00213fd:	83 ec 08             	sub    esp,0x8
c0021400:	68 12 26 03 c0       	push   0xc0032612
c0021405:	56                   	push   esi
c0021406:	e8 d2 fe ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c002140b:	83 c4 10             	add    esp,0x10
c002140e:	85 c0                	test   eax,eax
c0021410:	75 9e                	jne    c00213b0 <SysOpen(regs*)+0x88>
c0021412:	83 ec 08             	sub    esp,0x8
c0021415:	68 1c 26 03 c0       	push   0xc003261c
c002141a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002141d:	50                   	push   eax
c002141e:	e8 ba fe ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c0021423:	83 c4 10             	add    esp,0x10
c0021426:	85 c0                	test   eax,eax
c0021428:	0f 85 eb 00 00 00    	jne    c0021519 <SysOpen(regs*)+0x1f1>
c002142e:	83 ec 08             	sub    esp,0x8
c0021431:	68 21 26 03 c0       	push   0xc0032621
c0021436:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021439:	50                   	push   eax
c002143a:	e8 9e fe ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	85 c0                	test   eax,eax
c0021444:	0f 85 cf 00 00 00    	jne    c0021519 <SysOpen(regs*)+0x1f1>
c002144a:	83 ec 08             	sub    esp,0x8
c002144d:	68 1d 26 03 c0       	push   0xc003261d
c0021452:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021455:	51                   	push   ecx
c0021456:	e8 25 f3 fd ff       	call   c0000780 <strcmp>
c002145b:	83 c4 10             	add    esp,0x10
c002145e:	85 c0                	test   eax,eax
c0021460:	0f 84 b3 00 00 00    	je     c0021519 <SysOpen(regs*)+0x1f1>
c0021466:	83 ec 08             	sub    esp,0x8
c0021469:	68 1c 26 03 c0       	push   0xc003261c
c002146e:	56                   	push   esi
c002146f:	e8 69 fe ff ff       	call   c00212dd <string_ends_with(char const*, char const*)>
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	85 c0                	test   eax,eax
c0021479:	0f 85 9a 00 00 00    	jne    c0021519 <SysOpen(regs*)+0x1f1>
c002147f:	83 ec 0c             	sub    esp,0xc
c0021482:	68 14 01 00 00       	push   0x114
c0021487:	e8 03 4f ff ff       	call   c001638f <malloc>
c002148c:	83 c4 0c             	add    esp,0xc
c002148f:	89 c6                	mov    esi,eax
c0021491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021499:	50                   	push   eax
c002149a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002149d:	52                   	push   edx
c002149e:	56                   	push   esi
c002149f:	e8 3a 8f ff ff       	call   c001a3de <File::File(char const*, Process*)>
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	85 f6                	test   esi,esi
c00214a9:	74 5b                	je     c0021506 <SysOpen(regs*)+0x1de>
c00214ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00214ae:	0f b6 c2             	movzx  eax,dl
c00214b1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00214b4:	89 d0                	mov    eax,edx
c00214b6:	83 e0 01             	and    eax,0x1
c00214b9:	f6 c2 02             	test   dl,0x2
c00214bc:	74 03                	je     c00214c1 <SysOpen(regs*)+0x199>
c00214be:	83 c8 02             	or     eax,0x2
c00214c1:	f6 c2 04             	test   dl,0x4
c00214c4:	74 03                	je     c00214c9 <SysOpen(regs*)+0x1a1>
c00214c6:	83 c8 04             	or     eax,0x4
c00214c9:	f6 c2 08             	test   dl,0x8
c00214cc:	74 03                	je     c00214d1 <SysOpen(regs*)+0x1a9>
c00214ce:	83 c8 0a             	or     eax,0xa
c00214d1:	80 e2 10             	and    dl,0x10
c00214d4:	74 03                	je     c00214d9 <SysOpen(regs*)+0x1b1>
c00214d6:	83 c8 12             	or     eax,0x12
c00214d9:	83 ec 08             	sub    esp,0x8
c00214dc:	50                   	push   eax
c00214dd:	56                   	push   esi
c00214de:	e8 19 8f ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c00214e3:	83 c4 10             	add    esp,0x10
c00214e6:	85 c0                	test   eax,eax
c00214e8:	75 1c                	jne    c0021506 <SysOpen(regs*)+0x1de>
c00214ea:	83 ec 0c             	sub    esp,0xc
c00214ed:	56                   	push   esi
c00214ee:	e8 67 65 ff ff       	call   c0017a5a <UnixFile::getFileDescriptor()>
c00214f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00214f6:	83 c4 10             	add    esp,0x10
c00214f9:	89 02                	mov    DWORD PTR [edx],eax
c00214fb:	c1 f8 1f             	sar    eax,0x1f
c00214fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021501:	e9 ba fe ff ff       	jmp    c00213c0 <SysOpen(regs*)+0x98>
c0021506:	81 c4 04 01 00 00    	add    esp,0x104
c002150c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021511:	5b                   	pop    ebx
c0021512:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021517:	5e                   	pop    esi
c0021518:	c3                   	ret    
c0021519:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002151c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021522:	e9 92 fe ff ff       	jmp    c00213b9 <SysOpen(regs*)+0x91>

c0021527 <KeSystemCall(regs*, void*)>:
c0021527:	53                   	push   ebx
c0021528:	83 ec 08             	sub    esp,0x8
c002152b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002152f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021532:	83 f8 3e             	cmp    eax,0x3e
c0021535:	77 16                	ja     c002154d <KeSystemCall(regs*, void*)+0x26>
c0021537:	8b 14 85 80 3e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcc180]
c002153e:	85 d2                	test   edx,edx
c0021540:	74 0b                	je     c002154d <KeSystemCall(regs*, void*)+0x26>
c0021542:	83 ec 0c             	sub    esp,0xc
c0021545:	53                   	push   ebx
c0021546:	ff d2                	call   edx
c0021548:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002154b:	eb 0d                	jmp    c002155a <KeSystemCall(regs*, void*)+0x33>
c002154d:	52                   	push   edx
c002154e:	52                   	push   edx
c002154f:	50                   	push   eax
c0021550:	68 26 26 03 c0       	push   0xc0032626
c0021555:	e8 6c 7c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002155a:	83 c4 10             	add    esp,0x10
c002155d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021562:	83 c4 08             	add    esp,0x8
c0021565:	31 d2                	xor    edx,edx
c0021567:	5b                   	pop    ebx
c0021568:	c3                   	ret    
c0021569:	66 90                	xchg   ax,ax
c002156b:	90                   	nop

c002156c <KeSwitchEndian16(unsigned short)>:
c002156c:	83 ec 04             	sub    esp,0x4
c002156f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021573:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021577:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c002157b:	c1 f8 08             	sar    eax,0x8
c002157e:	89 c2                	mov    edx,eax
c0021580:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021584:	c1 e0 08             	shl    eax,0x8
c0021587:	09 d0                	or     eax,edx
c0021589:	83 c4 04             	add    esp,0x4
c002158c:	c3                   	ret    
c002158d:	8d 76 00             	lea    esi,[esi+0x0]

c0021590 <KeSwitchEndian32(unsigned int)>:
c0021590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021594:	c1 e8 18             	shr    eax,0x18
c0021597:	89 c2                	mov    edx,eax
c0021599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002159d:	c1 e0 08             	shl    eax,0x8
c00215a0:	25 00 00 ff 00       	and    eax,0xff0000
c00215a5:	09 c2                	or     edx,eax
c00215a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ab:	c1 e8 08             	shr    eax,0x8
c00215ae:	25 00 ff 00 00       	and    eax,0xff00
c00215b3:	09 c2                	or     edx,eax
c00215b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215b9:	c1 e0 18             	shl    eax,0x18
c00215bc:	09 d0                	or     eax,edx
c00215be:	c3                   	ret    
c00215bf:	90                   	nop

c00215c0 <EthernetCRC32(unsigned char*, int)>:
c00215c0:	83 ec 10             	sub    esp,0x10
c00215c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215c8:	75 0a                	jne    c00215d4 <EthernetCRC32(unsigned char*, int)+0x14>
c00215ca:	b8 00 00 00 00       	mov    eax,0x0
c00215cf:	e9 8c 00 00 00       	jmp    c0021660 <EthernetCRC32(unsigned char*, int)+0xa0>
c00215d4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00215d9:	7f 09                	jg     c00215e4 <EthernetCRC32(unsigned char*, int)+0x24>
c00215db:	b8 00 00 00 00       	mov    eax,0x0
c00215e0:	eb 7e                	jmp    c0021660 <EthernetCRC32(unsigned char*, int)+0xa0>
c00215e2:	66 90                	xchg   ax,ax
c00215e4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00215ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00215f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215f8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00215fc:	7d 5a                	jge    c0021658 <EthernetCRC32(unsigned char*, int)+0x98>
c00215fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021602:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021606:	01 d0                	add    eax,edx
c0021608:	8a 00                	mov    al,BYTE PTR [eax]
c002160a:	0f b6 c0             	movzx  eax,al
c002160d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021611:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021619:	8d 76 00             	lea    esi,[esi+0x0]
c002161c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021621:	7f 2d                	jg     c0021650 <EthernetCRC32(unsigned char*, int)+0x90>
c0021623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021627:	83 e0 01             	and    eax,0x1
c002162a:	74 10                	je     c002163c <EthernetCRC32(unsigned char*, int)+0x7c>
c002162c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021630:	d1 e8                	shr    eax,1
c0021632:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021637:	eb 0b                	jmp    c0021644 <EthernetCRC32(unsigned char*, int)+0x84>
c0021639:	8d 76 00             	lea    esi,[esi+0x0]
c002163c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021640:	d1 e8                	shr    eax,1
c0021642:	66 90                	xchg   ax,ax
c0021644:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021648:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002164d:	eb cd                	jmp    c002161c <EthernetCRC32(unsigned char*, int)+0x5c>
c002164f:	90                   	nop
c0021650:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021655:	eb 9d                	jmp    c00215f4 <EthernetCRC32(unsigned char*, int)+0x34>
c0021657:	90                   	nop
c0021658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002165c:	f7 d0                	not    eax
c002165e:	66 90                	xchg   ax,ax
c0021660:	83 c4 10             	add    esp,0x10
c0021663:	c3                   	ret    

c0021664 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021664:	83 ec 2c             	sub    esp,0x2c
c0021667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002166b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021674:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002167c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002167f:	0f b7 c0             	movzx  eax,ax
c0021682:	3d 06 08 00 00       	cmp    eax,0x806
c0021687:	75 13                	jne    c002169c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021689:	83 ec 0c             	sub    esp,0xc
c002168c:	68 3a 26 03 c0       	push   0xc003263a
c0021691:	e8 30 7b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0021696:	83 c4 10             	add    esp,0x10
c0021699:	eb 25                	jmp    c00216c0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c002169b:	90                   	nop
c002169c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00216a3:	0f b7 c0             	movzx  eax,ax
c00216a6:	3d 00 08 00 00       	cmp    eax,0x800
c00216ab:	75 13                	jne    c00216c0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00216ad:	83 ec 0c             	sub    esp,0xc
c00216b0:	68 50 26 03 c0       	push   0xc0032650
c00216b5:	e8 0c 7b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00216ba:	83 c4 10             	add    esp,0x10
c00216bd:	8d 76 00             	lea    esi,[esi+0x0]
c00216c0:	90                   	nop
c00216c1:	83 c4 2c             	add    esp,0x2c
c00216c4:	c3                   	ret    

c00216c5 <CmOpen(char const*)>:
c00216c5:	57                   	push   edi
c00216c6:	56                   	push   esi
c00216c7:	53                   	push   ebx
c00216c8:	83 ec 1c             	sub    esp,0x1c
c00216cb:	6a 30                	push   0x30
c00216cd:	e8 bd 4c ff ff       	call   c001638f <malloc>
c00216d2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00216d9:	89 c3                	mov    ebx,eax
c00216db:	e8 af 4c ff ff       	call   c001638f <malloc>
c00216e0:	83 c4 0c             	add    esp,0xc
c00216e3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00216e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00216ed:	89 c6                	mov    esi,eax
c00216ef:	50                   	push   eax
c00216f0:	e8 e9 8c ff ff       	call   c001a3de <File::File(char const*, Process*)>
c00216f5:	83 c4 0c             	add    esp,0xc
c00216f8:	89 33                	mov    DWORD PTR [ebx],esi
c00216fa:	8d 44 24 07          	lea    eax,[esp+0x7]
c00216fe:	50                   	push   eax
c00216ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021703:	50                   	push   eax
c0021704:	56                   	push   esi
c0021705:	e8 f4 8f ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c002170a:	5a                   	pop    edx
c002170b:	59                   	pop    ecx
c002170c:	6a 01                	push   0x1
c002170e:	ff 33                	push   DWORD PTR [ebx]
c0021710:	e8 e7 8c ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c0021715:	5e                   	pop    esi
c0021716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002171a:	e8 70 4c ff ff       	call   c001638f <malloc>
c002171f:	5a                   	pop    edx
c0021720:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021724:	89 c7                	mov    edi,eax
c0021726:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021728:	8b 10                	mov    edx,DWORD PTR [eax]
c002172a:	56                   	push   esi
c002172b:	57                   	push   edi
c002172c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021730:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021734:	50                   	push   eax
c0021735:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021738:	83 c4 14             	add    esp,0x14
c002173b:	ff 33                	push   DWORD PTR [ebx]
c002173d:	e8 18 8d ff ff       	call   c001a45a <File::close()>
c0021742:	59                   	pop    ecx
c0021743:	58                   	pop    eax
c0021744:	6a 13                	push   0x13
c0021746:	ff 33                	push   DWORD PTR [ebx]
c0021748:	e8 af 8c ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c002174d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002174f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021751:	89 34 24             	mov    DWORD PTR [esp],esi
c0021754:	57                   	push   edi
c0021755:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021759:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002175d:	50                   	push   eax
c002175e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021761:	83 c4 14             	add    esp,0x14
c0021764:	57                   	push   edi
c0021765:	e8 35 4c ff ff       	call   c001639f <free>
c002176a:	83 c4 10             	add    esp,0x10
c002176d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021770:	75 10                	jne    c0021782 <CmOpen(char const*)+0xbd>
c0021772:	83 ec 0c             	sub    esp,0xc
c0021775:	68 65 26 03 c0       	push   0xc0032665
c002177a:	e8 f4 e8 ff ff       	call   c0020073 <KePanic(char const*)>
c002177f:	83 c4 10             	add    esp,0x10
c0021782:	50                   	push   eax
c0021783:	6a 00                	push   0x0
c0021785:	6a 00                	push   0x0
c0021787:	ff 33                	push   DWORD PTR [ebx]
c0021789:	8d 7b 05             	lea    edi,[ebx+0x5]
c002178c:	e8 29 8d ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0021791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021793:	8b 10                	mov    edx,DWORD PTR [eax]
c0021795:	89 34 24             	mov    DWORD PTR [esp],esi
c0021798:	57                   	push   edi
c0021799:	6a 00                	push   0x0
c002179b:	6a 2b                	push   0x2b
c002179d:	50                   	push   eax
c002179e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00217a1:	83 c4 1c             	add    esp,0x1c
c00217a4:	6a 00                	push   0x0
c00217a6:	6a 00                	push   0x0
c00217a8:	ff 33                	push   DWORD PTR [ebx]
c00217aa:	e8 0b 8d ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c00217af:	83 c4 0c             	add    esp,0xc
c00217b2:	6a 08                	push   0x8
c00217b4:	68 76 26 03 c0       	push   0xc0032676
c00217b9:	57                   	push   edi
c00217ba:	e8 c1 eb fd ff       	call   c0000380 <memcmp>
c00217bf:	83 c4 10             	add    esp,0x10
c00217c2:	85 c0                	test   eax,eax
c00217c4:	74 10                	je     c00217d6 <CmOpen(char const*)+0x111>
c00217c6:	83 ec 0c             	sub    esp,0xc
c00217c9:	68 7f 26 03 c0       	push   0xc003267f
c00217ce:	e8 a0 e8 ff ff       	call   c0020073 <KePanic(char const*)>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00217da:	83 c4 10             	add    esp,0x10
c00217dd:	89 d8                	mov    eax,ebx
c00217df:	5b                   	pop    ebx
c00217e0:	5e                   	pop    esi
c00217e1:	5f                   	pop    edi
c00217e2:	c3                   	ret    

c00217e3 <CmClose(Reghive_Tag*)>:
c00217e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00217eb:	74 0b                	je     c00217f8 <CmClose(Reghive_Tag*)+0x15>
c00217ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00217ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217f3:	e9 62 8c ff ff       	jmp    c001a45a <File::close()>
c00217f8:	c3                   	ret    

c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00217f9:	53                   	push   ebx
c00217fa:	83 ec 18             	sub    esp,0x18
c00217fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021801:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021805:	74 29                	je     c0021830 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021807:	50                   	push   eax
c0021808:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002180d:	99                   	cdq    
c002180e:	52                   	push   edx
c002180f:	50                   	push   eax
c0021810:	ff 33                	push   DWORD PTR [ebx]
c0021812:	e8 a3 8c ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0021817:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021819:	5a                   	pop    edx
c002181a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002181e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021820:	51                   	push   ecx
c0021821:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021825:	6a 00                	push   0x0
c0021827:	6a 2b                	push   0x2b
c0021829:	50                   	push   eax
c002182a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002182d:	83 c4 20             	add    esp,0x20
c0021830:	83 c4 18             	add    esp,0x18
c0021833:	5b                   	pop    ebx
c0021834:	c3                   	ret    

c0021835 <CmGetString(Reghive_Tag*, int, char*)>:
c0021835:	55                   	push   ebp
c0021836:	57                   	push   edi
c0021837:	56                   	push   esi
c0021838:	53                   	push   ebx
c0021839:	31 db                	xor    ebx,ebx
c002183b:	83 ec 70             	sub    esp,0x70
c002183e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021842:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021849:	50                   	push   eax
c002184a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021851:	55                   	push   ebp
c0021852:	e8 a2 ff ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002185f:	c1 e0 08             	shl    eax,0x8
c0021862:	89 c2                	mov    edx,eax
c0021864:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021869:	09 d0                	or     eax,edx
c002186b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021870:	c1 e0 08             	shl    eax,0x8
c0021873:	09 d0                	or     eax,edx
c0021875:	74 25                	je     c002189c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021877:	52                   	push   edx
c0021878:	8d 54 24 39          	lea    edx,[esp+0x39]
c002187c:	52                   	push   edx
c002187d:	6b fb 0d             	imul   edi,ebx,0xd
c0021880:	50                   	push   eax
c0021881:	55                   	push   ebp
c0021882:	e8 72 ff ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021887:	8d 74 24 49          	lea    esi,[esp+0x49]
c002188b:	b9 27 00 00 00       	mov    ecx,0x27
c0021890:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021897:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021899:	83 c4 10             	add    esp,0x10
c002189c:	83 c3 03             	add    ebx,0x3
c002189f:	83 fb 15             	cmp    ebx,0x15
c00218a2:	75 b6                	jne    c002185a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00218a4:	83 c4 6c             	add    esp,0x6c
c00218a7:	5b                   	pop    ebx
c00218a8:	5e                   	pop    esi
c00218a9:	5f                   	pop    edi
c00218aa:	5d                   	pop    ebp
c00218ab:	c3                   	ret    

c00218ac <CmEnterDirectory(Reghive_Tag*, int)>:
c00218ac:	83 ec 40             	sub    esp,0x40
c00218af:	8d 44 24 09          	lea    eax,[esp+0x9]
c00218b3:	50                   	push   eax
c00218b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218bc:	e8 38 ff ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00218c1:	83 c4 10             	add    esp,0x10
c00218c4:	83 c8 ff             	or     eax,0xffffffff
c00218c7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00218cc:	75 19                	jne    c00218e7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00218ce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00218d3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00218d8:	c1 e0 08             	shl    eax,0x8
c00218db:	09 c2                	or     edx,eax
c00218dd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00218e2:	c1 e0 10             	shl    eax,0x10
c00218e5:	09 d0                	or     eax,edx
c00218e7:	83 c4 3c             	add    esp,0x3c
c00218ea:	c3                   	ret    

c00218eb <CmGetNext(Reghive_Tag*, int)>:
c00218eb:	83 ec 40             	sub    esp,0x40
c00218ee:	8d 44 24 09          	lea    eax,[esp+0x9]
c00218f2:	50                   	push   eax
c00218f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218fb:	e8 f9 fe ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021900:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021905:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c002190a:	c1 e0 08             	shl    eax,0x8
c002190d:	09 c2                	or     edx,eax
c002190f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021914:	83 c4 4c             	add    esp,0x4c
c0021917:	c1 e0 10             	shl    eax,0x10
c002191a:	09 d0                	or     eax,edx
c002191c:	c3                   	ret    

c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c002191d:	53                   	push   ebx
c002191e:	83 ec 18             	sub    esp,0x18
c0021921:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021925:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021929:	74 29                	je     c0021954 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c002192b:	50                   	push   eax
c002192c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021931:	99                   	cdq    
c0021932:	52                   	push   edx
c0021933:	50                   	push   eax
c0021934:	ff 33                	push   DWORD PTR [ebx]
c0021936:	e8 7f 8b ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c002193b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002193d:	5a                   	pop    edx
c002193e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021942:	8b 10                	mov    edx,DWORD PTR [eax]
c0021944:	51                   	push   ecx
c0021945:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021949:	6a 00                	push   0x0
c002194b:	6a 2b                	push   0x2b
c002194d:	50                   	push   eax
c002194e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021951:	83 c4 20             	add    esp,0x20
c0021954:	83 c4 18             	add    esp,0x18
c0021957:	5b                   	pop    ebx
c0021958:	c3                   	ret    

c0021959 <CmFreeExtent(Reghive_Tag*, int)>:
c0021959:	53                   	push   ebx
c002195a:	83 ec 3c             	sub    esp,0x3c
c002195d:	6a 2b                	push   0x2b
c002195f:	6a 00                	push   0x0
c0021961:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021965:	53                   	push   ebx
c0021966:	e8 85 eb fd ff       	call   c00004f0 <memset>
c002196b:	83 c4 0c             	add    esp,0xc
c002196e:	53                   	push   ebx
c002196f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021973:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021977:	e8 a1 ff ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002197c:	83 c4 48             	add    esp,0x48
c002197f:	5b                   	pop    ebx
c0021980:	c3                   	ret    

c0021981 <CmUpdateHeader(Reghive_Tag*)>:
c0021981:	83 ec 0c             	sub    esp,0xc
c0021984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021988:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002198c:	74 10                	je     c002199e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c002198e:	52                   	push   edx
c002198f:	8d 50 05             	lea    edx,[eax+0x5]
c0021992:	52                   	push   edx
c0021993:	6a 00                	push   0x0
c0021995:	50                   	push   eax
c0021996:	e8 82 ff ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002199b:	83 c4 10             	add    esp,0x10
c002199e:	83 c4 0c             	add    esp,0xc
c00219a1:	c3                   	ret    

c00219a2 <CmExpand(Reghive_Tag*, int)>:
c00219a2:	55                   	push   ebp
c00219a3:	57                   	push   edi
c00219a4:	83 cf ff             	or     edi,0xffffffff
c00219a7:	56                   	push   esi
c00219a8:	53                   	push   ebx
c00219a9:	83 ec 3c             	sub    esp,0x3c
c00219ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00219b0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00219b4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00219b8:	74 59                	je     c0021a13 <CmExpand(Reghive_Tag*, int)+0x71>
c00219ba:	50                   	push   eax
c00219bb:	31 d2                	xor    edx,edx
c00219bd:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00219c1:	31 ff                	xor    edi,edi
c00219c3:	52                   	push   edx
c00219c4:	50                   	push   eax
c00219c5:	ff 33                	push   DWORD PTR [ebx]
c00219c7:	e8 ee 8a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c00219cc:	83 c4 0c             	add    esp,0xc
c00219cf:	6a 2b                	push   0x2b
c00219d1:	6a 00                	push   0x0
c00219d3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00219d7:	55                   	push   ebp
c00219d8:	e8 13 eb fd ff       	call   c00004f0 <memset>
c00219dd:	83 c4 10             	add    esp,0x10
c00219e0:	39 f7                	cmp    edi,esi
c00219e2:	7d 1b                	jge    c00219ff <CmExpand(Reghive_Tag*, int)+0x5d>
c00219e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219e6:	83 ec 0c             	sub    esp,0xc
c00219e9:	47                   	inc    edi
c00219ea:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00219ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00219f0:	51                   	push   ecx
c00219f1:	55                   	push   ebp
c00219f2:	6a 00                	push   0x0
c00219f4:	6a 2b                	push   0x2b
c00219f6:	50                   	push   eax
c00219f7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00219fa:	83 c4 20             	add    esp,0x20
c00219fd:	eb e1                	jmp    c00219e0 <CmExpand(Reghive_Tag*, int)+0x3e>
c00219ff:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0021a02:	83 ec 0c             	sub    esp,0xc
c0021a05:	01 fe                	add    esi,edi
c0021a07:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0021a0a:	53                   	push   ebx
c0021a0b:	e8 71 ff ff ff       	call   c0021981 <CmUpdateHeader(Reghive_Tag*)>
c0021a10:	83 c4 10             	add    esp,0x10
c0021a13:	83 c4 3c             	add    esp,0x3c
c0021a16:	89 f8                	mov    eax,edi
c0021a18:	5b                   	pop    ebx
c0021a19:	5e                   	pop    esi
c0021a1a:	5f                   	pop    edi
c0021a1b:	5d                   	pop    ebp
c0021a1c:	c3                   	ret    

c0021a1d <CmFindUnusedExtent(Reghive_Tag*)>:
c0021a1d:	55                   	push   ebp
c0021a1e:	57                   	push   edi
c0021a1f:	56                   	push   esi
c0021a20:	53                   	push   ebx
c0021a21:	83 cb ff             	or     ebx,0xffffffff
c0021a24:	83 ec 1c             	sub    esp,0x1c
c0021a27:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021a2b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0021a2f:	74 68                	je     c0021a99 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0021a31:	51                   	push   ecx
c0021a32:	be 2b 00 00 00       	mov    esi,0x2b
c0021a37:	6a 00                	push   0x0
c0021a39:	31 ff                	xor    edi,edi
c0021a3b:	6a 00                	push   0x0
c0021a3d:	31 db                	xor    ebx,ebx
c0021a3f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0021a42:	e8 73 8a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0021a47:	83 c4 10             	add    esp,0x10
c0021a4a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0021a4d:	76 3b                	jbe    c0021a8a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0021a4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a52:	83 ec 0c             	sub    esp,0xc
c0021a55:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021a59:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a5b:	51                   	push   ecx
c0021a5c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0021a60:	51                   	push   ecx
c0021a61:	6a 00                	push   0x0
c0021a63:	6a 01                	push   0x1
c0021a65:	50                   	push   eax
c0021a66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021a69:	83 c4 20             	add    esp,0x20
c0021a6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021a71:	74 26                	je     c0021a99 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0021a73:	52                   	push   edx
c0021a74:	43                   	inc    ebx
c0021a75:	57                   	push   edi
c0021a76:	56                   	push   esi
c0021a77:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0021a7a:	e8 3b 8a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0021a7f:	83 c6 2b             	add    esi,0x2b
c0021a82:	83 d7 00             	adc    edi,0x0
c0021a85:	83 c4 10             	add    esp,0x10
c0021a88:	eb c0                	jmp    c0021a4a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0021a8a:	50                   	push   eax
c0021a8b:	50                   	push   eax
c0021a8c:	6a 40                	push   0x40
c0021a8e:	55                   	push   ebp
c0021a8f:	e8 0e ff ff ff       	call   c00219a2 <CmExpand(Reghive_Tag*, int)>
c0021a94:	83 c4 10             	add    esp,0x10
c0021a97:	89 c3                	mov    ebx,eax
c0021a99:	83 c4 1c             	add    esp,0x1c
c0021a9c:	89 d8                	mov    eax,ebx
c0021a9e:	5b                   	pop    ebx
c0021a9f:	5e                   	pop    esi
c0021aa0:	5f                   	pop    edi
c0021aa1:	5d                   	pop    ebp
c0021aa2:	c3                   	ret    

c0021aa3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0021aa3:	55                   	push   ebp
c0021aa4:	57                   	push   edi
c0021aa5:	56                   	push   esi
c0021aa6:	53                   	push   ebx
c0021aa7:	81 ec 88 00 00 00    	sub    esp,0x88
c0021aad:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0021ab4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021abb:	e8 5d ff ff ff       	call   c0021a1d <CmFindUnusedExtent(Reghive_Tag*)>
c0021ac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ac4:	83 c4 0c             	add    esp,0xc
c0021ac7:	6a 2b                	push   0x2b
c0021ac9:	6a 00                	push   0x0
c0021acb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0021acf:	55                   	push   ebp
c0021ad0:	e8 1b ea fd ff       	call   c00004f0 <memset>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	85 db                	test   ebx,ebx
c0021ada:	74 12                	je     c0021aee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0021adc:	51                   	push   ecx
c0021add:	55                   	push   ebp
c0021ade:	53                   	push   ebx
c0021adf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021ae6:	e8 0e fd ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021aeb:	83 c4 10             	add    esp,0x10
c0021aee:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0021af2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0021af9:	b9 2b 00 00 00       	mov    ecx,0x2b
c0021afe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021b00:	85 db                	test   ebx,ebx
c0021b02:	74 49                	je     c0021b4d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0021b04:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0021b09:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0021b0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b12:	c1 e0 08             	shl    eax,0x8
c0021b15:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0021b1b:	09 c8                	or     eax,ecx
c0021b1d:	74 11                	je     c0021b30 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0021b1f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0021b23:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0021b27:	c1 e8 10             	shr    eax,0x10
c0021b2a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0021b2e:	eb 0f                	jmp    c0021b3f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0021b30:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0021b35:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0021b3a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0021b3f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0021b43:	c1 ea 08             	shr    edx,0x8
c0021b46:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0021b4b:	eb 0f                	jmp    c0021b5c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0021b4d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0021b52:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0021b57:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0021b5c:	52                   	push   edx
c0021b5d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0021b61:	50                   	push   eax
c0021b62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b66:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021b6d:	e8 ab fd ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021b72:	83 c4 10             	add    esp,0x10
c0021b75:	85 db                	test   ebx,ebx
c0021b77:	74 12                	je     c0021b8b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0021b79:	50                   	push   eax
c0021b7a:	55                   	push   ebp
c0021b7b:	53                   	push   ebx
c0021b7c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021b83:	e8 95 fd ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021b88:	83 c4 10             	add    esp,0x10
c0021b8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b8f:	83 c4 7c             	add    esp,0x7c
c0021b92:	5b                   	pop    ebx
c0021b93:	5e                   	pop    esi
c0021b94:	5f                   	pop    edi
c0021b95:	5d                   	pop    ebp
c0021b96:	c3                   	ret    

c0021b97 <CmSetString(Reghive_Tag*, int, char const*)>:
c0021b97:	55                   	push   ebp
c0021b98:	57                   	push   edi
c0021b99:	56                   	push   esi
c0021b9a:	53                   	push   ebx
c0021b9b:	bb 27 00 00 00       	mov    ebx,0x27
c0021ba0:	81 ec 88 00 00 00    	sub    esp,0x88
c0021ba6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0021bad:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0021bb4:	e8 c7 e9 fd ff       	call   c0000580 <strlen>
c0021bb9:	8d 48 26             	lea    ecx,[eax+0x26]
c0021bbc:	89 c8                	mov    eax,ecx
c0021bbe:	99                   	cdq    
c0021bbf:	f7 fb                	idiv   ebx
c0021bc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0021bce:	7e 10                	jle    c0021be0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0021bd0:	83 ec 0c             	sub    esp,0xc
c0021bd3:	68 90 26 03 c0       	push   0xc0032690
c0021bd8:	e8 96 e4 ff ff       	call   c0020073 <KePanic(char const*)>
c0021bdd:	83 c4 10             	add    esp,0x10
c0021be0:	53                   	push   ebx
c0021be1:	31 ed                	xor    ebp,ebp
c0021be3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0021be7:	53                   	push   ebx
c0021be8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021bef:	57                   	push   edi
c0021bf0:	e8 04 fc ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021bf5:	83 c4 10             	add    esp,0x10
c0021bf8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0021bfc:	89 f0                	mov    eax,esi
c0021bfe:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0021c02:	c1 e0 08             	shl    eax,0x8
c0021c05:	09 c6                	or     esi,eax
c0021c07:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0021c0b:	c1 e6 08             	shl    esi,0x8
c0021c0e:	09 c6                	or     esi,eax
c0021c10:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0021c14:	7e 72                	jle    c0021c88 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0021c16:	85 f6                	test   esi,esi
c0021c18:	75 25                	jne    c0021c3f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0021c1a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0021c1f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0021c23:	50                   	push   eax
c0021c24:	6a 00                	push   0x0
c0021c26:	6a 00                	push   0x0
c0021c28:	57                   	push   edi
c0021c29:	e8 75 fe ff ff       	call   c0021aa3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0021c2e:	83 c4 10             	add    esp,0x10
c0021c31:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0021c34:	89 c6                	mov    esi,eax
c0021c36:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0021c39:	c1 f8 10             	sar    eax,0x10
c0021c3c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0021c3f:	51                   	push   ecx
c0021c40:	8d 54 24 49          	lea    edx,[esp+0x49]
c0021c44:	52                   	push   edx
c0021c45:	56                   	push   esi
c0021c46:	57                   	push   edi
c0021c47:	e8 ad fb ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021c4c:	83 c4 0c             	add    esp,0xc
c0021c4f:	6a 27                	push   0x27
c0021c51:	6a 00                	push   0x0
c0021c53:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0021c57:	51                   	push   ecx
c0021c58:	e8 93 e8 fd ff       	call   c00004f0 <memset>
c0021c5d:	6b c5 27             	imul   eax,ebp,0x27
c0021c60:	83 c4 0c             	add    esp,0xc
c0021c63:	6a 27                	push   0x27
c0021c65:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0021c6c:	50                   	push   eax
c0021c6d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0021c71:	51                   	push   ecx
c0021c72:	e8 19 ea fd ff       	call   c0000690 <strncpy>
c0021c77:	83 c4 0c             	add    esp,0xc
c0021c7a:	8d 54 24 49          	lea    edx,[esp+0x49]
c0021c7e:	52                   	push   edx
c0021c7f:	56                   	push   esi
c0021c80:	57                   	push   edi
c0021c81:	e8 97 fc ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021c86:	eb 19                	jmp    c0021ca1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0021c88:	85 f6                	test   esi,esi
c0021c8a:	74 18                	je     c0021ca4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0021c8c:	52                   	push   edx
c0021c8d:	52                   	push   edx
c0021c8e:	56                   	push   esi
c0021c8f:	57                   	push   edi
c0021c90:	e8 c4 fc ff ff       	call   c0021959 <CmFreeExtent(Reghive_Tag*, int)>
c0021c95:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0021c99:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0021c9d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ca1:	83 c4 10             	add    esp,0x10
c0021ca4:	45                   	inc    ebp
c0021ca5:	83 c3 03             	add    ebx,0x3
c0021ca8:	83 fd 07             	cmp    ebp,0x7
c0021cab:	0f 85 47 ff ff ff    	jne    c0021bf8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0021cb1:	50                   	push   eax
c0021cb2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0021cb6:	50                   	push   eax
c0021cb7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021cbe:	57                   	push   edi
c0021cbf:	e8 59 fc ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021cc4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021cca:	5b                   	pop    ebx
c0021ccb:	5e                   	pop    esi
c0021ccc:	5f                   	pop    edi
c0021ccd:	5d                   	pop    ebp
c0021cce:	c3                   	ret    

c0021ccf <CmGetMatch(char*, char*, bool, bool*)>:
c0021ccf:	56                   	push   esi
c0021cd0:	53                   	push   ebx
c0021cd1:	50                   	push   eax
c0021cd2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021cd7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021cdb:	74 25                	je     c0021d02 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0021cdd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0021ce0:	31 db                	xor    ebx,ebx
c0021ce2:	50                   	push   eax
c0021ce3:	50                   	push   eax
c0021ce4:	8d 04 9d 80 3f 03 c0 	lea    eax,[ebx*4-0x3ffcc080]
c0021ceb:	50                   	push   eax
c0021cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cf0:	e8 8b ea fd ff       	call   c0000780 <strcmp>
c0021cf5:	83 c4 10             	add    esp,0x10
c0021cf8:	85 c0                	test   eax,eax
c0021cfa:	74 2e                	je     c0021d2a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0021cfc:	43                   	inc    ebx
c0021cfd:	83 fb 3f             	cmp    ebx,0x3f
c0021d00:	75 e0                	jne    c0021ce2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0021d02:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d05:	31 db                	xor    ebx,ebx
c0021d07:	51                   	push   ecx
c0021d08:	51                   	push   ecx
c0021d09:	8d 04 9d 80 3f 03 c0 	lea    eax,[ebx*4-0x3ffcc080]
c0021d10:	50                   	push   eax
c0021d11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d15:	e8 66 ea fd ff       	call   c0000780 <strcmp>
c0021d1a:	83 c4 10             	add    esp,0x10
c0021d1d:	85 c0                	test   eax,eax
c0021d1f:	74 09                	je     c0021d2a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0021d21:	43                   	inc    ebx
c0021d22:	83 fb 3f             	cmp    ebx,0x3f
c0021d25:	75 e0                	jne    c0021d07 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0021d27:	83 cb ff             	or     ebx,0xffffffff
c0021d2a:	5a                   	pop    edx
c0021d2b:	89 d8                	mov    eax,ebx
c0021d2d:	5b                   	pop    ebx
c0021d2e:	5e                   	pop    esi
c0021d2f:	c3                   	ret    

c0021d30 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0021d30:	55                   	push   ebp
c0021d31:	31 c0                	xor    eax,eax
c0021d33:	57                   	push   edi
c0021d34:	56                   	push   esi
c0021d35:	53                   	push   ebx
c0021d36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021d3a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021d3e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021d42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d46:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0021d48:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0021d4b:	83 fd 1f             	cmp    ebp,0x1f
c0021d4e:	7f 0b                	jg     c0021d5b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0021d50:	0f b6 c2             	movzx  eax,dl
c0021d53:	d3 e0                	shl    eax,cl
c0021d55:	09 07                	or     DWORD PTR [edi],eax
c0021d57:	b0 01                	mov    al,0x1
c0021d59:	01 33                	add    DWORD PTR [ebx],esi
c0021d5b:	5b                   	pop    ebx
c0021d5c:	5e                   	pop    esi
c0021d5d:	5f                   	pop    edi
c0021d5e:	5d                   	pop    ebp
c0021d5f:	c3                   	ret    

c0021d60 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0021d60:	57                   	push   edi
c0021d61:	56                   	push   esi
c0021d62:	53                   	push   ebx
c0021d63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021d67:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021d6b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021d6f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021d73:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0021d75:	7c 17                	jl     c0021d8e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0021d77:	8b 17                	mov    edx,DWORD PTR [edi]
c0021d79:	b8 01 00 00 00       	mov    eax,0x1
c0021d7e:	d3 e0                	shl    eax,cl
c0021d80:	48                   	dec    eax
c0021d81:	21 d0                	and    eax,edx
c0021d83:	d3 ea                	shr    edx,cl
c0021d85:	89 17                	mov    DWORD PTR [edi],edx
c0021d87:	29 0b                	sub    DWORD PTR [ebx],ecx
c0021d89:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0021d8c:	eb 05                	jmp    c0021d93 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0021d8e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d91:	31 c0                	xor    eax,eax
c0021d93:	5b                   	pop    ebx
c0021d94:	5e                   	pop    esi
c0021d95:	5f                   	pop    edi
c0021d96:	c3                   	ret    

c0021d97 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0021d97:	83 ec 40             	sub    esp,0x40
c0021d9a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021d9e:	50                   	push   eax
c0021d9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021da3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021da7:	e8 4d fa ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021dac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021db0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0021db4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0021db8:	89 10                	mov    DWORD PTR [eax],edx
c0021dba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021dbd:	83 c4 4c             	add    esp,0x4c
c0021dc0:	c3                   	ret    

c0021dc1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0021dc1:	55                   	push   ebp
c0021dc2:	57                   	push   edi
c0021dc3:	56                   	push   esi
c0021dc4:	53                   	push   ebx
c0021dc5:	83 ec 40             	sub    esp,0x40
c0021dc8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0021dcc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0021dd0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0021dd4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0021dd8:	53                   	push   ebx
c0021dd9:	56                   	push   esi
c0021dda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0021dde:	e8 16 fa ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021de3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0021de7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0021deb:	83 c4 0c             	add    esp,0xc
c0021dee:	53                   	push   ebx
c0021def:	56                   	push   esi
c0021df0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0021df4:	e8 24 fb ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021df9:	83 c4 4c             	add    esp,0x4c
c0021dfc:	5b                   	pop    ebx
c0021dfd:	5e                   	pop    esi
c0021dfe:	5f                   	pop    edi
c0021dff:	5d                   	pop    ebp
c0021e00:	c3                   	ret    

c0021e01 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0021e01:	55                   	push   ebp
c0021e02:	57                   	push   edi
c0021e03:	56                   	push   esi
c0021e04:	31 f6                	xor    esi,esi
c0021e06:	53                   	push   ebx
c0021e07:	31 db                	xor    ebx,ebx
c0021e09:	83 ec 40             	sub    esp,0x40
c0021e0c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0021e14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0021e1c:	6a 12                	push   0x12
c0021e1e:	68 ee 00 00 00       	push   0xee
c0021e23:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0021e27:	e8 c4 e6 fd ff       	call   c00004f0 <memset>
c0021e2c:	83 c4 10             	add    esp,0x10
c0021e2f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021e33:	6a 08                	push   0x8
c0021e35:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021e39:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0021e3d:	50                   	push   eax
c0021e3e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0021e42:	55                   	push   ebp
c0021e43:	57                   	push   edi
c0021e44:	e8 e7 fe ff ff       	call   c0021d30 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0021e49:	83 c4 10             	add    esp,0x10
c0021e4c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0021e50:	50                   	push   eax
c0021e51:	6a 06                	push   0x6
c0021e53:	55                   	push   ebp
c0021e54:	57                   	push   edi
c0021e55:	e8 06 ff ff ff       	call   c0021d60 <CmGetShift(unsigned int*, int*, int, bool*)>
c0021e5a:	83 c4 10             	add    esp,0x10
c0021e5d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021e62:	74 07                	je     c0021e6b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0021e64:	46                   	inc    esi
c0021e65:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0021e69:	eb e1                	jmp    c0021e4c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0021e6b:	43                   	inc    ebx
c0021e6c:	83 fb 12             	cmp    ebx,0x12
c0021e6f:	75 c2                	jne    c0021e33 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0021e71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021e75:	31 f6                	xor    esi,esi
c0021e77:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0021e7a:	50                   	push   eax
c0021e7b:	50                   	push   eax
c0021e7c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0021e81:	46                   	inc    esi
c0021e82:	8d 04 85 80 3f 03 c0 	lea    eax,[eax*4-0x3ffcc080]
c0021e89:	50                   	push   eax
c0021e8a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0021e8e:	e8 dd e9 fd ff       	call   c0000870 <strcat>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	83 fe 18             	cmp    esi,0x18
c0021e99:	75 df                	jne    c0021e7a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0021e9b:	83 c4 3c             	add    esp,0x3c
c0021e9e:	31 c0                	xor    eax,eax
c0021ea0:	5b                   	pop    ebx
c0021ea1:	5e                   	pop    esi
c0021ea2:	5f                   	pop    edi
c0021ea3:	5d                   	pop    ebp
c0021ea4:	c3                   	ret    

c0021ea5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0021ea5:	83 ec 40             	sub    esp,0x40
c0021ea8:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021eac:	50                   	push   eax
c0021ead:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eb1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eb5:	e8 3f f9 ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021eba:	58                   	pop    eax
c0021ebb:	5a                   	pop    edx
c0021ebc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021ec0:	8d 44 24 15          	lea    eax,[esp+0x15]
c0021ec4:	50                   	push   eax
c0021ec5:	e8 37 ff ff ff       	call   c0021e01 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0021eca:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0021ecf:	83 c4 4c             	add    esp,0x4c
c0021ed2:	c3                   	ret    

c0021ed3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0021ed3:	55                   	push   ebp
c0021ed4:	57                   	push   edi
c0021ed5:	56                   	push   esi
c0021ed6:	53                   	push   ebx
c0021ed7:	31 db                	xor    ebx,ebx
c0021ed9:	83 ec 70             	sub    esp,0x70
c0021edc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0021ee3:	6a 30                	push   0x30
c0021ee5:	6a 00                	push   0x0
c0021ee7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0021eeb:	56                   	push   esi
c0021eec:	e8 ff e5 fd ff       	call   c00004f0 <memset>
c0021ef1:	83 c4 10             	add    esp,0x10
c0021ef4:	83 ec 0c             	sub    esp,0xc
c0021ef7:	57                   	push   edi
c0021ef8:	e8 83 e6 fd ff       	call   c0000580 <strlen>
c0021efd:	83 c4 10             	add    esp,0x10
c0021f00:	39 d8                	cmp    eax,ebx
c0021f02:	76 16                	jbe    c0021f1a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0021f04:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	50                   	push   eax
c0021f0c:	e8 4f ea fd ff       	call   c0000960 <toupper>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021f17:	43                   	inc    ebx
c0021f18:	eb da                	jmp    c0021ef4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0021f1a:	52                   	push   edx
c0021f1b:	31 db                	xor    ebx,ebx
c0021f1d:	6a 18                	push   0x18
c0021f1f:	31 ff                	xor    edi,edi
c0021f21:	6a 3f                	push   0x3f
c0021f23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021f27:	50                   	push   eax
c0021f28:	e8 c3 e5 fd ff       	call   c00004f0 <memset>
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0021f34:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021f38:	84 c0                	test   al,al
c0021f3a:	0f 84 af 00 00 00    	je     c0021fef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0021f40:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0021f44:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0021f47:	83 ec 0c             	sub    esp,0xc
c0021f4a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0021f4f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0021f53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021f57:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0021f5c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0021f60:	56                   	push   esi
c0021f61:	e8 1a e6 fd ff       	call   c0000580 <strlen>
c0021f66:	83 c4 10             	add    esp,0x10
c0021f69:	85 c0                	test   eax,eax
c0021f6b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0021f6f:	74 0b                	je     c0021f7c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0021f71:	50                   	push   eax
c0021f72:	6a 01                	push   0x1
c0021f74:	56                   	push   esi
c0021f75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021f79:	50                   	push   eax
c0021f7a:	eb 0a                	jmp    c0021f86 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0021f7c:	50                   	push   eax
c0021f7d:	6a 00                	push   0x0
c0021f7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f83:	50                   	push   eax
c0021f84:	6a 00                	push   0x0
c0021f86:	e8 44 fd ff ff       	call   c0021ccf <CmGetMatch(char*, char*, bool, bool*)>
c0021f8b:	83 c4 10             	add    esp,0x10
c0021f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0021f91:	75 1a                	jne    c0021fad <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0021f93:	83 ec 0c             	sub    esp,0xc
c0021f96:	68 a5 26 03 c0       	push   0xc00326a5
c0021f9b:	e8 d3 e0 ff ff       	call   c0020073 <KePanic(char const*)>
c0021fa0:	83 c4 10             	add    esp,0x10
c0021fa3:	b8 02 00 00 00       	mov    eax,0x2
c0021fa8:	e9 bb 00 00 00       	jmp    c0022068 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0021fad:	83 ff 18             	cmp    edi,0x18
c0021fb0:	75 1a                	jne    c0021fcc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0021fb2:	83 ec 0c             	sub    esp,0xc
c0021fb5:	68 ba 26 03 c0       	push   0xc00326ba
c0021fba:	e8 b4 e0 ff ff       	call   c0020073 <KePanic(char const*)>
c0021fbf:	83 c4 10             	add    esp,0x10
c0021fc2:	b8 01 00 00 00       	mov    eax,0x1
c0021fc7:	e9 9c 00 00 00       	jmp    c0022068 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0021fcc:	47                   	inc    edi
c0021fcd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021fd2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0021fd6:	0f 45 dd             	cmovne ebx,ebp
c0021fd9:	83 ec 0c             	sub    esp,0xc
c0021fdc:	56                   	push   esi
c0021fdd:	e8 9e e5 fd ff       	call   c0000580 <strlen>
c0021fe2:	83 c4 10             	add    esp,0x10
c0021fe5:	85 c0                	test   eax,eax
c0021fe7:	74 06                	je     c0021fef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0021fe9:	43                   	inc    ebx
c0021fea:	e9 41 ff ff ff       	jmp    c0021f30 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0021fef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ff7:	31 db                	xor    ebx,ebx
c0021ff9:	31 ff                	xor    edi,edi
c0021ffb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022003:	50                   	push   eax
c0022004:	6a 12                	push   0x12
c0022006:	68 ee 00 00 00       	push   0xee
c002200b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022012:	e8 d9 e4 fd ff       	call   c00004f0 <memset>
c0022017:	83 c4 10             	add    esp,0x10
c002201a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c002201e:	83 fb 17             	cmp    ebx,0x17
c0022021:	7e 26                	jle    c0022049 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0022023:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022027:	50                   	push   eax
c0022028:	6a 08                	push   0x8
c002202a:	55                   	push   ebp
c002202b:	56                   	push   esi
c002202c:	e8 2f fd ff ff       	call   c0021d60 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022031:	83 c4 10             	add    esp,0x10
c0022034:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022039:	74 26                	je     c0022061 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c002203b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022042:	4b                   	dec    ebx
c0022043:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022046:	47                   	inc    edi
c0022047:	eb 1c                	jmp    c0022065 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022049:	6a 06                	push   0x6
c002204b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022050:	50                   	push   eax
c0022051:	55                   	push   ebp
c0022052:	56                   	push   esi
c0022053:	e8 d8 fc ff ff       	call   c0021d30 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022058:	83 c4 10             	add    esp,0x10
c002205b:	84 c0                	test   al,al
c002205d:	75 06                	jne    c0022065 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c002205f:	eb c2                	jmp    c0022023 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022061:	31 c0                	xor    eax,eax
c0022063:	eb 03                	jmp    c0022068 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022065:	43                   	inc    ebx
c0022066:	eb b2                	jmp    c002201a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0022068:	83 c4 6c             	add    esp,0x6c
c002206b:	5b                   	pop    ebx
c002206c:	5e                   	pop    esi
c002206d:	5f                   	pop    edi
c002206e:	5d                   	pop    ebp
c002206f:	c3                   	ret    

c0022070 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022070:	53                   	push   ebx
c0022071:	83 ec 3c             	sub    esp,0x3c
c0022074:	6a 2b                	push   0x2b
c0022076:	6a 00                	push   0x0
c0022078:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002207c:	53                   	push   ebx
c002207d:	e8 6e e4 fd ff       	call   c00004f0 <memset>
c0022082:	58                   	pop    eax
c0022083:	5a                   	pop    edx
c0022084:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022088:	50                   	push   eax
c0022089:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002208d:	e8 41 fe ff ff       	call   c0021ed3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022092:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022097:	83 c4 0c             	add    esp,0xc
c002209a:	6a 15                	push   0x15
c002209c:	6a 00                	push   0x0
c002209e:	8d 44 24 27          	lea    eax,[esp+0x27]
c00220a2:	50                   	push   eax
c00220a3:	e8 48 e4 fd ff       	call   c00004f0 <memset>
c00220a8:	53                   	push   ebx
c00220a9:	6a 00                	push   0x0
c00220ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00220af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00220b3:	e8 eb f9 ff ff       	call   c0021aa3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00220b8:	83 c4 58             	add    esp,0x58
c00220bb:	5b                   	pop    ebx
c00220bc:	c3                   	ret    

c00220bd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00220bd:	56                   	push   esi
c00220be:	53                   	push   ebx
c00220bf:	83 ec 48             	sub    esp,0x48
c00220c2:	6a 12                	push   0x12
c00220c4:	68 ff 00 00 00       	push   0xff
c00220c9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00220cd:	56                   	push   esi
c00220ce:	e8 1d e4 fd ff       	call   c00004f0 <memset>
c00220d3:	5a                   	pop    edx
c00220d4:	59                   	pop    ecx
c00220d5:	56                   	push   esi
c00220d6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00220da:	e8 f4 fd ff ff       	call   c0021ed3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00220df:	83 c4 10             	add    esp,0x10
c00220e2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00220e6:	85 db                	test   ebx,ebx
c00220e8:	74 42                	je     c002212c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00220ea:	50                   	push   eax
c00220eb:	8d 44 24 19          	lea    eax,[esp+0x19]
c00220ef:	50                   	push   eax
c00220f0:	53                   	push   ebx
c00220f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00220f5:	e8 ff f6 ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220fa:	83 c4 0c             	add    esp,0xc
c00220fd:	6a 12                	push   0x12
c00220ff:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022103:	50                   	push   eax
c0022104:	56                   	push   esi
c0022105:	e8 76 e2 fd ff       	call   c0000380 <memcmp>
c002210a:	83 c4 10             	add    esp,0x10
c002210d:	85 c0                	test   eax,eax
c002210f:	74 1e                	je     c002212f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022111:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022116:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002211b:	c1 e3 08             	shl    ebx,0x8
c002211e:	09 d8                	or     eax,ebx
c0022120:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022125:	c1 e3 10             	shl    ebx,0x10
c0022128:	09 c3                	or     ebx,eax
c002212a:	eb ba                	jmp    c00220e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c002212c:	83 cb ff             	or     ebx,0xffffffff
c002212f:	83 c4 44             	add    esp,0x44
c0022132:	89 d8                	mov    eax,ebx
c0022134:	5b                   	pop    ebx
c0022135:	5e                   	pop    esi
c0022136:	c3                   	ret    

c0022137 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022137:	57                   	push   edi
c0022138:	56                   	push   esi
c0022139:	53                   	push   ebx
c002213a:	83 ec 34             	sub    esp,0x34
c002213d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022141:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022145:	6a 2b                	push   0x2b
c0022147:	6a 00                	push   0x0
c0022149:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002214d:	53                   	push   ebx
c002214e:	e8 9d e3 fd ff       	call   c00004f0 <memset>
c0022153:	58                   	pop    eax
c0022154:	5a                   	pop    edx
c0022155:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022159:	50                   	push   eax
c002215a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002215e:	e8 70 fd ff ff       	call   c0021ed3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022163:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022167:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002216b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c002216f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022173:	53                   	push   ebx
c0022174:	6a 00                	push   0x0
c0022176:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002217a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002217e:	e8 20 f9 ff ff       	call   c0021aa3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022183:	83 c4 50             	add    esp,0x50
c0022186:	5b                   	pop    ebx
c0022187:	5e                   	pop    esi
c0022188:	5f                   	pop    edi
c0022189:	c3                   	ret    

c002218a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002218a:	55                   	push   ebp
c002218b:	57                   	push   edi
c002218c:	56                   	push   esi
c002218d:	53                   	push   ebx
c002218e:	83 ec 40             	sub    esp,0x40
c0022191:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022195:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022199:	6a 2b                	push   0x2b
c002219b:	6a 00                	push   0x0
c002219d:	8d 74 24 11          	lea    esi,[esp+0x11]
c00221a1:	56                   	push   esi
c00221a2:	e8 49 e3 fd ff       	call   c00004f0 <memset>
c00221a7:	5f                   	pop    edi
c00221a8:	89 ef                	mov    edi,ebp
c00221aa:	58                   	pop    eax
c00221ab:	8d 44 24 11          	lea    eax,[esp+0x11]
c00221af:	50                   	push   eax
c00221b0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00221b4:	e8 1a fd ff ff       	call   c0021ed3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00221b9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00221be:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00221c3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00221c8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00221cd:	83 c4 10             	add    esp,0x10
c00221d0:	85 ed                	test   ebp,ebp
c00221d2:	74 14                	je     c00221e8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00221d4:	51                   	push   ecx
c00221d5:	51                   	push   ecx
c00221d6:	57                   	push   edi
c00221d7:	53                   	push   ebx
c00221d8:	e8 0e f7 ff ff       	call   c00218eb <CmGetNext(Reghive_Tag*, int)>
c00221dd:	83 c4 10             	add    esp,0x10
c00221e0:	85 c0                	test   eax,eax
c00221e2:	74 04                	je     c00221e8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00221e4:	89 c7                	mov    edi,eax
c00221e6:	eb e8                	jmp    c00221d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00221e8:	56                   	push   esi
c00221e9:	6a 00                	push   0x0
c00221eb:	57                   	push   edi
c00221ec:	53                   	push   ebx
c00221ed:	e8 b1 f8 ff ff       	call   c0021aa3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00221f2:	83 c4 0c             	add    esp,0xc
c00221f5:	56                   	push   esi
c00221f6:	50                   	push   eax
c00221f7:	89 c7                	mov    edi,eax
c00221f9:	53                   	push   ebx
c00221fa:	e8 fa f5 ff ff       	call   c00217f9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221ff:	58                   	pop    eax
c0022200:	5a                   	pop    edx
c0022201:	6a 6c                	push   0x6c
c0022203:	6a 00                	push   0x0
c0022205:	6a 00                	push   0x0
c0022207:	68 cb 26 03 c0       	push   0xc00326cb
c002220c:	57                   	push   edi
c002220d:	53                   	push   ebx
c002220e:	e8 24 ff ff ff       	call   c0022137 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022213:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022217:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c002221b:	c1 e8 10             	shr    eax,0x10
c002221e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022222:	83 c4 1c             	add    esp,0x1c
c0022225:	56                   	push   esi
c0022226:	57                   	push   edi
c0022227:	53                   	push   ebx
c0022228:	e8 f0 f6 ff ff       	call   c002191d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002222d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022232:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022237:	c1 e0 08             	shl    eax,0x8
c002223a:	09 c2                	or     edx,eax
c002223c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022241:	83 c4 4c             	add    esp,0x4c
c0022244:	5b                   	pop    ebx
c0022245:	5e                   	pop    esi
c0022246:	c1 e0 10             	shl    eax,0x10
c0022249:	09 d0                	or     eax,edx
c002224b:	5f                   	pop    edi
c002224c:	5d                   	pop    ebp
c002224d:	c3                   	ret    

c002224e <zStrtok(char*, char const*)>:
c002224e:	55                   	push   ebp
c002224f:	57                   	push   edi
c0022250:	56                   	push   esi
c0022251:	53                   	push   ebx
c0022252:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022256:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002225a:	85 db                	test   ebx,ebx
c002225c:	74 2f                	je     c002228d <zStrtok(char*, char const*)+0x3f>
c002225e:	85 c0                	test   eax,eax
c0022260:	75 09                	jne    c002226b <zStrtok(char*, char const*)+0x1d>
c0022262:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022267:	85 c0                	test   eax,eax
c0022269:	74 50                	je     c00222bb <zStrtok(char*, char const*)+0x6d>
c002226b:	31 c9                	xor    ecx,ecx
c002226d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022271:	74 03                	je     c0022276 <zStrtok(char*, char const*)+0x28>
c0022273:	41                   	inc    ecx
c0022274:	eb f7                	jmp    c002226d <zStrtok(char*, char const*)+0x1f>
c0022276:	31 d2                	xor    edx,edx
c0022278:	39 ca                	cmp    edx,ecx
c002227a:	74 15                	je     c0022291 <zStrtok(char*, char const*)+0x43>
c002227c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022280:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022283:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022286:	39 ee                	cmp    esi,ebp
c0022288:	74 13                	je     c002229d <zStrtok(char*, char const*)+0x4f>
c002228a:	42                   	inc    edx
c002228b:	eb eb                	jmp    c0022278 <zStrtok(char*, char const*)+0x2a>
c002228d:	31 c0                	xor    eax,eax
c002228f:	eb 2a                	jmp    c00222bb <zStrtok(char*, char const*)+0x6d>
c0022291:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002229b:	eb 1e                	jmp    c00222bb <zStrtok(char*, char const*)+0x6d>
c002229d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00222a0:	39 ce                	cmp    esi,ecx
c00222a2:	75 0a                	jne    c00222ae <zStrtok(char*, char const*)+0x60>
c00222a4:	40                   	inc    eax
c00222a5:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c00222aa:	89 d8                	mov    eax,ebx
c00222ac:	eb 0d                	jmp    c00222bb <zStrtok(char*, char const*)+0x6d>
c00222ae:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00222b1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00222b5:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c00222bb:	5b                   	pop    ebx
c00222bc:	5e                   	pop    esi
c00222bd:	5f                   	pop    edi
c00222be:	5d                   	pop    ebp
c00222bf:	c3                   	ret    

c00222c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00222c0:	57                   	push   edi
c00222c1:	56                   	push   esi
c00222c2:	53                   	push   ebx
c00222c3:	81 ec 08 01 00 00    	sub    esp,0x108
c00222c9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00222d0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00222d7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00222db:	53                   	push   ebx
c00222dc:	e8 6f e3 fd ff       	call   c0000650 <strcpy>
c00222e1:	59                   	pop    ecx
c00222e2:	5e                   	pop    esi
c00222e3:	68 6d 2a 03 c0       	push   0xc0032a6d
c00222e8:	53                   	push   ebx
c00222e9:	bb 01 00 00 00       	mov    ebx,0x1
c00222ee:	e8 5b ff ff ff       	call   c002224e <zStrtok(char*, char const*)>
c00222f3:	83 c4 10             	add    esp,0x10
c00222f6:	85 c0                	test   eax,eax
c00222f8:	74 3b                	je     c0022335 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00222fa:	52                   	push   edx
c00222fb:	50                   	push   eax
c00222fc:	6a 01                	push   0x1
c00222fe:	57                   	push   edi
c00222ff:	e8 b9 fd ff ff       	call   c00220bd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022304:	59                   	pop    ecx
c0022305:	5e                   	pop    esi
c0022306:	89 c3                	mov    ebx,eax
c0022308:	68 6d 2a 03 c0       	push   0xc0032a6d
c002230d:	6a 00                	push   0x0
c002230f:	e8 3a ff ff ff       	call   c002224e <zStrtok(char*, char const*)>
c0022314:	83 c4 10             	add    esp,0x10
c0022317:	85 c0                	test   eax,eax
c0022319:	89 c6                	mov    esi,eax
c002231b:	74 18                	je     c0022335 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c002231d:	52                   	push   edx
c002231e:	52                   	push   edx
c002231f:	53                   	push   ebx
c0022320:	57                   	push   edi
c0022321:	e8 86 f5 ff ff       	call   c00218ac <CmEnterDirectory(Reghive_Tag*, int)>
c0022326:	83 c4 10             	add    esp,0x10
c0022329:	83 f8 ff             	cmp    eax,0xffffffff
c002232c:	89 c3                	mov    ebx,eax
c002232e:	74 05                	je     c0022335 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022330:	50                   	push   eax
c0022331:	56                   	push   esi
c0022332:	53                   	push   ebx
c0022333:	eb c9                	jmp    c00222fe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022335:	81 c4 00 01 00 00    	add    esp,0x100
c002233b:	89 d8                	mov    eax,ebx
c002233d:	5b                   	pop    ebx
c002233e:	5e                   	pop    esi
c002233f:	5f                   	pop    edi
c0022340:	c3                   	ret    

c0022341 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022341:	55                   	push   ebp
c0022342:	57                   	push   edi
c0022343:	56                   	push   esi
c0022344:	53                   	push   ebx
c0022345:	83 ec 5c             	sub    esp,0x5c
c0022348:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c002234c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022350:	85 db                	test   ebx,ebx
c0022352:	0f 8e 84 00 00 00    	jle    c00223dc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022358:	57                   	push   edi
c0022359:	31 ed                	xor    ebp,ebp
c002235b:	6a 32                	push   0x32
c002235d:	6a 00                	push   0x0
c002235f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022363:	57                   	push   edi
c0022364:	e8 87 e1 fd ff       	call   c00004f0 <memset>
c0022369:	83 c4 0c             	add    esp,0xc
c002236c:	57                   	push   edi
c002236d:	53                   	push   ebx
c002236e:	56                   	push   esi
c002236f:	e8 31 fb ff ff       	call   c0021ea5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022374:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022378:	83 c4 10             	add    esp,0x10
c002237b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c002237f:	7d 13                	jge    c0022394 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022381:	83 ec 0c             	sub    esp,0xc
c0022384:	45                   	inc    ebp
c0022385:	68 13 2e 03 c0       	push   0xc0032e13
c002238a:	e8 37 6e ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	eb e7                	jmp    c002237b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022394:	51                   	push   ecx
c0022395:	57                   	push   edi
c0022396:	53                   	push   ebx
c0022397:	68 d1 26 03 c0       	push   0xc00326d1
c002239c:	e8 25 6e ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00223a1:	83 c4 10             	add    esp,0x10
c00223a4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00223a9:	75 1e                	jne    c00223c9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00223ab:	52                   	push   edx
c00223ac:	52                   	push   edx
c00223ad:	53                   	push   ebx
c00223ae:	56                   	push   esi
c00223af:	e8 f8 f4 ff ff       	call   c00218ac <CmEnterDirectory(Reghive_Tag*, int)>
c00223b4:	83 c4 0c             	add    esp,0xc
c00223b7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00223bb:	8d 51 04             	lea    edx,[ecx+0x4]
c00223be:	52                   	push   edx
c00223bf:	50                   	push   eax
c00223c0:	56                   	push   esi
c00223c1:	e8 7b ff ff ff       	call   c0022341 <CmDisplayTree(Reghive_Tag*, int, int)>
c00223c6:	83 c4 10             	add    esp,0x10
c00223c9:	50                   	push   eax
c00223ca:	50                   	push   eax
c00223cb:	53                   	push   ebx
c00223cc:	56                   	push   esi
c00223cd:	e8 19 f5 ff ff       	call   c00218eb <CmGetNext(Reghive_Tag*, int)>
c00223d2:	83 c4 10             	add    esp,0x10
c00223d5:	89 c3                	mov    ebx,eax
c00223d7:	e9 74 ff ff ff       	jmp    c0022350 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00223dc:	83 c4 5c             	add    esp,0x5c
c00223df:	5b                   	pop    ebx
c00223e0:	5e                   	pop    esi
c00223e1:	5f                   	pop    edi
c00223e2:	5d                   	pop    ebp
c00223e3:	c3                   	ret    

c00223e4 <CmSplitFinalSlashInPlace(char*)>:
c00223e4:	53                   	push   ebx
c00223e5:	83 ec 14             	sub    esp,0x14
c00223e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00223ec:	53                   	push   ebx
c00223ed:	e8 8e e1 fd ff       	call   c0000580 <strlen>
c00223f2:	83 c4 10             	add    esp,0x10
c00223f5:	48                   	dec    eax
c00223f6:	85 c0                	test   eax,eax
c00223f8:	74 15                	je     c002240f <CmSplitFinalSlashInPlace(char*)+0x2b>
c00223fa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00223fe:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022401:	75 09                	jne    c002240c <CmSplitFinalSlashInPlace(char*)+0x28>
c0022403:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022406:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c002240a:	eb 05                	jmp    c0022411 <CmSplitFinalSlashInPlace(char*)+0x2d>
c002240c:	48                   	dec    eax
c002240d:	eb e7                	jmp    c00223f6 <CmSplitFinalSlashInPlace(char*)+0x12>
c002240f:	31 c0                	xor    eax,eax
c0022411:	83 c4 08             	add    esp,0x8
c0022414:	5b                   	pop    ebx
c0022415:	c3                   	ret    

c0022416 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022416:	55                   	push   ebp
c0022417:	57                   	push   edi
c0022418:	56                   	push   esi
c0022419:	53                   	push   ebx
c002241a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022420:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022427:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c002242a:	8d 43 01             	lea    eax,[ebx+0x1]
c002242d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022431:	89 f0                	mov    eax,esi
c0022433:	3c 40                	cmp    al,0x40
c0022435:	75 1b                	jne    c0022452 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022437:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002243a:	85 c0                	test   eax,eax
c002243c:	74 08                	je     c0022446 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c002243e:	83 f8 3a             	cmp    eax,0x3a
c0022441:	74 03                	je     c0022446 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022443:	43                   	inc    ebx
c0022444:	eb f1                	jmp    c0022437 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022446:	85 c0                	test   eax,eax
c0022448:	0f 84 45 01 00 00    	je     c0022593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c002244e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022451:	43                   	inc    ebx
c0022452:	50                   	push   eax
c0022453:	6a 40                	push   0x40
c0022455:	6a 00                	push   0x0
c0022457:	8d 44 24 24          	lea    eax,[esp+0x24]
c002245b:	50                   	push   eax
c002245c:	e8 8f e0 fd ff       	call   c00004f0 <memset>
c0022461:	89 f1                	mov    ecx,esi
c0022463:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c002246a:	31 c0                	xor    eax,eax
c002246c:	83 c4 10             	add    esp,0x10
c002246f:	0f be f1             	movsx  esi,cl
c0022472:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022475:	85 d2                	test   edx,edx
c0022477:	89 d1                	mov    ecx,edx
c0022479:	0f 84 14 01 00 00    	je     c0022593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c002247f:	3d c7 00 00 00       	cmp    eax,0xc7
c0022484:	0f 8f 09 01 00 00    	jg     c0022593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c002248a:	83 fa 0a             	cmp    edx,0xa
c002248d:	0f 85 f1 00 00 00    	jne    c0022584 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022493:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022498:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c002249d:	89 c8                	mov    eax,ecx
c002249f:	a8 df                	test   al,0xdf
c00224a1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00224a6:	83 f9 23             	cmp    ecx,0x23
c00224a9:	0f 94 c2             	sete   dl
c00224ac:	89 d5                	mov    ebp,edx
c00224ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224b2:	09 ea                	or     edx,ebp
c00224b4:	80 e2 01             	and    dl,0x1
c00224b7:	75 47                	jne    c0022500 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00224b9:	83 e8 09             	sub    eax,0x9
c00224bc:	3c 01                	cmp    al,0x1
c00224be:	76 40                	jbe    c0022500 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00224c0:	83 f9 5b             	cmp    ecx,0x5b
c00224c3:	75 42                	jne    c0022507 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00224c5:	83 fe 40             	cmp    esi,0x40
c00224c8:	75 36                	jne    c0022500 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00224ca:	83 ec 0c             	sub    esp,0xc
c00224cd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00224d1:	55                   	push   ebp
c00224d2:	e8 a9 e0 fd ff       	call   c0000580 <strlen>
c00224d7:	83 c4 10             	add    esp,0x10
c00224da:	83 f8 3f             	cmp    eax,0x3f
c00224dd:	0f 87 b0 00 00 00    	ja     c0022593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00224e3:	50                   	push   eax
c00224e4:	50                   	push   eax
c00224e5:	55                   	push   ebp
c00224e6:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00224ea:	55                   	push   ebp
c00224eb:	e8 60 e1 fd ff       	call   c0000650 <strcpy>
c00224f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00224f3:	e8 88 e0 fd ff       	call   c0000580 <strlen>
c00224f8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00224fd:	83 c4 10             	add    esp,0x10
c0022500:	31 d2                	xor    edx,edx
c0022502:	e9 84 00 00 00       	jmp    c002258b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022507:	83 fe 40             	cmp    esi,0x40
c002250a:	74 06                	je     c0022512 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c002250c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022510:	eb 19                	jmp    c002252b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022512:	51                   	push   ecx
c0022513:	51                   	push   ecx
c0022514:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022518:	8d 44 24 24          	lea    eax,[esp+0x24]
c002251c:	50                   	push   eax
c002251d:	e8 5e e2 fd ff       	call   c0000780 <strcmp>
c0022522:	83 c4 10             	add    esp,0x10
c0022525:	85 c0                	test   eax,eax
c0022527:	75 d7                	jne    c0022500 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022529:	eb e1                	jmp    c002250c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c002252b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c002252e:	85 c9                	test   ecx,ecx
c0022530:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022535:	83 f9 3d             	cmp    ecx,0x3d
c0022538:	0f 94 c0             	sete   al
c002253b:	89 c5                	mov    ebp,eax
c002253d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022541:	09 e8                	or     eax,ebp
c0022543:	a8 01                	test   al,0x1
c0022545:	89 c5                	mov    ebp,eax
c0022547:	75 03                	jne    c002254c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022549:	42                   	inc    edx
c002254a:	eb df                	jmp    c002252b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c002254c:	85 c9                	test   ecx,ecx
c002254e:	74 43                	je     c0022593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022550:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022554:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022557:	52                   	push   edx
c0022558:	52                   	push   edx
c0022559:	8d 44 24 60          	lea    eax,[esp+0x60]
c002255d:	50                   	push   eax
c002255e:	53                   	push   ebx
c002255f:	e8 1c e2 fd ff       	call   c0000780 <strcmp>
c0022564:	83 c4 10             	add    esp,0x10
c0022567:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002256b:	85 c0                	test   eax,eax
c002256d:	75 91                	jne    c0022500 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c002256f:	50                   	push   eax
c0022570:	42                   	inc    edx
c0022571:	50                   	push   eax
c0022572:	52                   	push   edx
c0022573:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c002257a:	e8 d1 e0 fd ff       	call   c0000650 <strcpy>
c002257f:	83 c4 10             	add    esp,0x10
c0022582:	eb 11                	jmp    c0022595 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022584:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022588:	8d 50 01             	lea    edx,[eax+0x1]
c002258b:	47                   	inc    edi
c002258c:	89 d0                	mov    eax,edx
c002258e:	e9 df fe ff ff       	jmp    c0022472 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022593:	31 ed                	xor    ebp,ebp
c0022595:	81 c4 2c 01 00 00    	add    esp,0x12c
c002259b:	89 e8                	mov    eax,ebp
c002259d:	5b                   	pop    ebx
c002259e:	5e                   	pop    esi
c002259f:	5f                   	pop    edi
c00225a0:	5d                   	pop    ebp
c00225a1:	c3                   	ret    

c00225a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00225a2:	57                   	push   edi
c00225a3:	56                   	push   esi
c00225a4:	53                   	push   ebx
c00225a5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00225ab:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00225b2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00225b9:	53                   	push   ebx
c00225ba:	e8 c1 df fd ff       	call   c0000580 <strlen>
c00225bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00225c2:	89 c7                	mov    edi,eax
c00225c4:	e8 b7 df fd ff       	call   c0000580 <strlen>
c00225c9:	83 c4 10             	add    esp,0x10
c00225cc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00225d0:	3d ff 00 00 00       	cmp    eax,0xff
c00225d5:	0f 87 d3 00 00 00    	ja     c00226ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00225db:	57                   	push   edi
c00225dc:	57                   	push   edi
c00225dd:	56                   	push   esi
c00225de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00225e2:	56                   	push   esi
c00225e3:	e8 68 e0 fd ff       	call   c0000650 <strcpy>
c00225e8:	58                   	pop    eax
c00225e9:	5a                   	pop    edx
c00225ea:	68 6d 2a 03 c0       	push   0xc0032a6d
c00225ef:	56                   	push   esi
c00225f0:	e8 7b e2 fd ff       	call   c0000870 <strcat>
c00225f5:	59                   	pop    ecx
c00225f6:	5f                   	pop    edi
c00225f7:	53                   	push   ebx
c00225f8:	56                   	push   esi
c00225f9:	e8 72 e2 fd ff       	call   c0000870 <strcat>
c00225fe:	58                   	pop    eax
c00225ff:	5a                   	pop    edx
c0022600:	68 db 26 03 c0       	push   0xc00326db
c0022605:	56                   	push   esi
c0022606:	e8 65 e2 fd ff       	call   c0000870 <strcat>
c002260b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022612:	e8 78 3d ff ff       	call   c001638f <malloc>
c0022617:	83 c4 0c             	add    esp,0xc
c002261a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022620:	56                   	push   esi
c0022621:	50                   	push   eax
c0022622:	89 c3                	mov    ebx,eax
c0022624:	e8 b5 7d ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0022629:	83 c4 10             	add    esp,0x10
c002262c:	85 db                	test   ebx,ebx
c002262e:	74 7e                	je     c00226ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022630:	51                   	push   ecx
c0022631:	51                   	push   ecx
c0022632:	6a 01                	push   0x1
c0022634:	53                   	push   ebx
c0022635:	e8 c2 7d ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c002263a:	83 c4 10             	add    esp,0x10
c002263d:	85 c0                	test   eax,eax
c002263f:	74 08                	je     c0022649 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022641:	83 ec 0c             	sub    esp,0xc
c0022644:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022646:	53                   	push   ebx
c0022647:	eb 5f                	jmp    c00226a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022649:	52                   	push   edx
c002264a:	8d 44 24 17          	lea    eax,[esp+0x17]
c002264e:	50                   	push   eax
c002264f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022653:	50                   	push   eax
c0022654:	53                   	push   ebx
c0022655:	e8 a4 80 ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c002265a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002265e:	83 c4 10             	add    esp,0x10
c0022661:	89 c1                	mov    ecx,eax
c0022663:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022667:	74 31                	je     c002269a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022669:	83 ec 0c             	sub    esp,0xc
c002266c:	50                   	push   eax
c002266d:	e8 1d 3d ff ff       	call   c001638f <malloc>
c0022672:	89 c6                	mov    esi,eax
c0022674:	58                   	pop    eax
c0022675:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022677:	8d 54 24 20          	lea    edx,[esp+0x20]
c002267b:	52                   	push   edx
c002267c:	56                   	push   esi
c002267d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022681:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022685:	53                   	push   ebx
c0022686:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022689:	83 c4 20             	add    esp,0x20
c002268c:	85 c0                	test   eax,eax
c002268e:	75 0a                	jne    c002269a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022690:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022694:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022698:	74 18                	je     c00226b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c002269a:	83 ec 0c             	sub    esp,0xc
c002269d:	53                   	push   ebx
c002269e:	e8 b7 7d ff ff       	call   c001a45a <File::close()>
c00226a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00226a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00226a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	31 c0                	xor    eax,eax
c00226b0:	eb 3b                	jmp    c00226ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00226b2:	83 ec 0c             	sub    esp,0xc
c00226b5:	53                   	push   ebx
c00226b6:	e8 9f 7d ff ff       	call   c001a45a <File::close()>
c00226bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00226bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00226c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00226c3:	83 c4 0c             	add    esp,0xc
c00226c6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00226cd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00226d4:	56                   	push   esi
c00226d5:	e8 3c fd ff ff       	call   c0022416 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00226da:	89 34 24             	mov    DWORD PTR [esp],esi
c00226dd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00226e1:	e8 b9 3c ff ff       	call   c001639f <free>
c00226e6:	83 c4 10             	add    esp,0x10
c00226e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00226ed:	81 c4 20 01 00 00    	add    esp,0x120
c00226f3:	5b                   	pop    ebx
c00226f4:	5e                   	pop    esi
c00226f5:	5f                   	pop    edi
c00226f6:	c3                   	ret    

c00226f7 <Reg::getLine(char*, char*, char*)>:
c00226f7:	57                   	push   edi
c00226f8:	56                   	push   esi
c00226f9:	53                   	push   ebx
c00226fa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00226fe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022706:	57                   	push   edi
c0022707:	56                   	push   esi
c0022708:	53                   	push   ebx
c0022709:	68 e0 26 03 c0       	push   0xc00326e0
c002270e:	e8 8f fe ff ff       	call   c00225a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022713:	83 c4 10             	add    esp,0x10
c0022716:	84 c0                	test   al,al
c0022718:	75 10                	jne    c002272a <Reg::getLine(char*, char*, char*)+0x33>
c002271a:	57                   	push   edi
c002271b:	56                   	push   esi
c002271c:	53                   	push   ebx
c002271d:	68 05 27 03 c0       	push   0xc0032705
c0022722:	e8 7b fe ff ff       	call   c00225a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	5b                   	pop    ebx
c002272b:	5e                   	pop    esi
c002272c:	5f                   	pop    edi
c002272d:	c3                   	ret    

c002272e <Reg::readInt(char*, char*, int*)>:
c002272e:	55                   	push   ebp
c002272f:	57                   	push   edi
c0022730:	56                   	push   esi
c0022731:	53                   	push   ebx
c0022732:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022738:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002273c:	55                   	push   ebp
c002273d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022744:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c002274b:	e8 a7 ff ff ff       	call   c00226f7 <Reg::getLine(char*, char*, char*)>
c0022750:	83 c4 10             	add    esp,0x10
c0022753:	84 c0                	test   al,al
c0022755:	0f 84 b6 00 00 00    	je     c0022811 <Reg::readInt(char*, char*, int*)+0xe3>
c002275b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022760:	83 fa 2b             	cmp    edx,0x2b
c0022763:	74 0c                	je     c0022771 <Reg::readInt(char*, char*, int*)+0x43>
c0022765:	83 fa 2d             	cmp    edx,0x2d
c0022768:	75 0e                	jne    c0022778 <Reg::readInt(char*, char*, int*)+0x4a>
c002276a:	ba 01 00 00 00       	mov    edx,0x1
c002276f:	eb 0b                	jmp    c002277c <Reg::readInt(char*, char*, int*)+0x4e>
c0022771:	ba 01 00 00 00       	mov    edx,0x1
c0022776:	eb 02                	jmp    c002277a <Reg::readInt(char*, char*, int*)+0x4c>
c0022778:	31 d2                	xor    edx,edx
c002277a:	31 c0                	xor    eax,eax
c002277c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022781:	be 0a 00 00 00       	mov    esi,0xa
c0022786:	75 21                	jne    c00227a9 <Reg::readInt(char*, char*, int*)+0x7b>
c0022788:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c002278d:	83 f9 78             	cmp    ecx,0x78
c0022790:	75 0a                	jne    c002279c <Reg::readInt(char*, char*, int*)+0x6e>
c0022792:	83 c2 02             	add    edx,0x2
c0022795:	be 10 00 00 00       	mov    esi,0x10
c002279a:	eb 0d                	jmp    c00227a9 <Reg::readInt(char*, char*, int*)+0x7b>
c002279c:	83 f9 62             	cmp    ecx,0x62
c002279f:	75 08                	jne    c00227a9 <Reg::readInt(char*, char*, int*)+0x7b>
c00227a1:	83 c2 02             	add    edx,0x2
c00227a4:	be 02 00 00 00       	mov    esi,0x2
c00227a9:	01 d5                	add    ebp,edx
c00227ab:	31 d2                	xor    edx,edx
c00227ad:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00227b1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00227b5:	85 c9                	test   ecx,ecx
c00227b7:	0f 94 c3             	sete   bl
c00227ba:	83 f9 0d             	cmp    ecx,0xd
c00227bd:	89 df                	mov    edi,ebx
c00227bf:	0f 94 c3             	sete   bl
c00227c2:	09 df                	or     edi,ebx
c00227c4:	89 fb                	mov    ebx,edi
c00227c6:	83 e7 01             	and    edi,0x1
c00227c9:	75 35                	jne    c0022800 <Reg::readInt(char*, char*, int*)+0xd2>
c00227cb:	0f af d6             	imul   edx,esi
c00227ce:	83 fe 10             	cmp    esi,0x10
c00227d1:	75 26                	jne    c00227f9 <Reg::readInt(char*, char*, int*)+0xcb>
c00227d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00227d7:	83 ef 41             	sub    edi,0x41
c00227da:	89 fb                	mov    ebx,edi
c00227dc:	80 fb 05             	cmp    bl,0x5
c00227df:	77 06                	ja     c00227e7 <Reg::readInt(char*, char*, int*)+0xb9>
c00227e1:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00227e5:	eb 16                	jmp    c00227fd <Reg::readInt(char*, char*, int*)+0xcf>
c00227e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00227eb:	83 eb 61             	sub    ebx,0x61
c00227ee:	80 fb 05             	cmp    bl,0x5
c00227f1:	77 06                	ja     c00227f9 <Reg::readInt(char*, char*, int*)+0xcb>
c00227f3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00227f7:	eb 04                	jmp    c00227fd <Reg::readInt(char*, char*, int*)+0xcf>
c00227f9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00227fd:	45                   	inc    ebp
c00227fe:	eb ad                	jmp    c00227ad <Reg::readInt(char*, char*, int*)+0x7f>
c0022800:	84 c0                	test   al,al
c0022802:	74 02                	je     c0022806 <Reg::readInt(char*, char*, int*)+0xd8>
c0022804:	f7 da                	neg    edx
c0022806:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c002280d:	89 10                	mov    DWORD PTR [eax],edx
c002280f:	88 d8                	mov    al,bl
c0022811:	81 c4 ec 00 00 00    	add    esp,0xec
c0022817:	5b                   	pop    ebx
c0022818:	5e                   	pop    esi
c0022819:	5f                   	pop    edi
c002281a:	5d                   	pop    ebp
c002281b:	c3                   	ret    

c002281c <Reg::readString(char*, char*, char*, int)>:
c002281c:	57                   	push   edi
c002281d:	56                   	push   esi
c002281e:	53                   	push   ebx
c002281f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022825:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022829:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022830:	57                   	push   edi
c0022831:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022838:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c002283f:	e8 b3 fe ff ff       	call   c00226f7 <Reg::getLine(char*, char*, char*)>
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	84 c0                	test   al,al
c0022849:	89 c6                	mov    esi,eax
c002284b:	74 44                	je     c0022891 <Reg::readString(char*, char*, char*, int)+0x75>
c002284d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022854:	31 c0                	xor    eax,eax
c0022856:	4a                   	dec    edx
c0022857:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c002285a:	84 c9                	test   cl,cl
c002285c:	74 0f                	je     c002286d <Reg::readString(char*, char*, char*, int)+0x51>
c002285e:	39 c2                	cmp    edx,eax
c0022860:	7e 0b                	jle    c002286d <Reg::readString(char*, char*, char*, int)+0x51>
c0022862:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022865:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c002286a:	40                   	inc    eax
c002286b:	eb ea                	jmp    c0022857 <Reg::readString(char*, char*, char*, int)+0x3b>
c002286d:	83 ec 0c             	sub    esp,0xc
c0022870:	53                   	push   ebx
c0022871:	e8 0a dd fd ff       	call   c0000580 <strlen>
c0022876:	83 c4 10             	add    esp,0x10
c0022879:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c002287e:	75 11                	jne    c0022891 <Reg::readString(char*, char*, char*, int)+0x75>
c0022880:	83 ec 0c             	sub    esp,0xc
c0022883:	53                   	push   ebx
c0022884:	e8 f7 dc fd ff       	call   c0000580 <strlen>
c0022889:	83 c4 10             	add    esp,0x10
c002288c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022891:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022897:	89 f0                	mov    eax,esi
c0022899:	5b                   	pop    ebx
c002289a:	5e                   	pop    esi
c002289b:	5f                   	pop    edi
c002289c:	c3                   	ret    

c002289d <Reg::readBool(char*, char*, bool*)>:
c002289d:	83 ec 20             	sub    esp,0x20
c00228a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00228a4:	50                   	push   eax
c00228a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228ad:	e8 7c fe ff ff       	call   c002272e <Reg::readInt(char*, char*, int*)>
c00228b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00228b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00228bb:	0f 95 02             	setne  BYTE PTR [edx]
c00228be:	83 c4 2c             	add    esp,0x2c
c00228c1:	c3                   	ret    

c00228c2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00228c2:	53                   	push   ebx
c00228c3:	83 ec 1c             	sub    esp,0x1c
c00228c6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00228ca:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00228ce:	50                   	push   eax
c00228cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228d7:	e8 c1 ff ff ff       	call   c002289d <Reg::readBool(char*, char*, bool*)>
c00228dc:	83 c4 10             	add    esp,0x10
c00228df:	84 c0                	test   al,al
c00228e1:	74 04                	je     c00228e7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00228e3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00228e7:	83 c4 18             	add    esp,0x18
c00228ea:	88 d8                	mov    al,bl
c00228ec:	5b                   	pop    ebx
c00228ed:	c3                   	ret    

c00228ee <Reg::readIntWithDefault(char*, char*, int)>:
c00228ee:	53                   	push   ebx
c00228ef:	83 ec 1c             	sub    esp,0x1c
c00228f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00228f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00228fa:	50                   	push   eax
c00228fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022903:	e8 26 fe ff ff       	call   c002272e <Reg::readInt(char*, char*, int*)>
c0022908:	83 c4 10             	add    esp,0x10
c002290b:	84 c0                	test   al,al
c002290d:	74 04                	je     c0022913 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c002290f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022913:	83 c4 18             	add    esp,0x18
c0022916:	89 d8                	mov    eax,ebx
c0022918:	5b                   	pop    ebx
c0022919:	c3                   	ret    

c002291a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c002291a:	57                   	push   edi
c002291b:	56                   	push   esi
c002291c:	53                   	push   ebx
c002291d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022921:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022925:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022929:	56                   	push   esi
c002292a:	57                   	push   edi
c002292b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002292f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022933:	e8 e4 fe ff ff       	call   c002281c <Reg::readString(char*, char*, char*, int)>
c0022938:	83 c4 10             	add    esp,0x10
c002293b:	84 c0                	test   al,al
c002293d:	75 16                	jne    c0022955 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c002293f:	50                   	push   eax
c0022940:	56                   	push   esi
c0022941:	6a 00                	push   0x0
c0022943:	57                   	push   edi
c0022944:	e8 a7 db fd ff       	call   c00004f0 <memset>
c0022949:	8d 4e ff             	lea    ecx,[esi-0x1]
c002294c:	89 de                	mov    esi,ebx
c002294e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022950:	83 c4 10             	add    esp,0x10
c0022953:	89 df                	mov    edi,ebx
c0022955:	5b                   	pop    ebx
c0022956:	89 f8                	mov    eax,edi
c0022958:	5e                   	pop    esi
c0022959:	5f                   	pop    edi
c002295a:	c3                   	ret    

c002295b <SysEject(regs*)>:
c002295b:	83 ec 0c             	sub    esp,0xc
c002295e:	83 ca ff             	or     edx,0xffffffff
c0022961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022965:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022968:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002296d:	83 e9 41             	sub    ecx,0x41
c0022970:	83 f9 19             	cmp    ecx,0x19
c0022973:	77 18                	ja     c002298d <SysEject(regs*)+0x32>
c0022975:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002297c:	85 c9                	test   ecx,ecx
c002297e:	74 0d                	je     c002298d <SysEject(regs*)+0x32>
c0022980:	83 ec 0c             	sub    esp,0xc
c0022983:	51                   	push   ecx
c0022984:	e8 5f 9c ff ff       	call   c001c5e8 <LogicalDisk::eject()>
c0022989:	83 c4 10             	add    esp,0x10
c002298c:	99                   	cdq    
c002298d:	83 c4 0c             	add    esp,0xc
c0022990:	c3                   	ret    

c0022991 <SysExit(regs*)>:
c0022991:	83 ec 18             	sub    esp,0x18
c0022994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022998:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002299b:	e8 ec 2b 00 00       	call   c002558c <terminateTask(int)>
c00229a0:	83 c8 ff             	or     eax,0xffffffff
c00229a3:	83 c4 1c             	add    esp,0x1c
c00229a6:	89 c2                	mov    edx,eax
c00229a8:	c3                   	ret    

c00229a9 <SysGetCwd(regs*)>:
c00229a9:	83 ec 10             	sub    esp,0x10
c00229ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229b0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00229b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00229b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00229bb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00229be:	e8 bb 76 ff ff       	call   c001a07e <Fs::getcwd(Process*, char*, int)>
c00229c3:	83 c4 1c             	add    esp,0x1c
c00229c6:	99                   	cdq    
c00229c7:	c3                   	ret    

c00229c8 <SysGetPID(regs*)>:
c00229c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00229cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00229d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00229d2:	99                   	cdq    
c00229d3:	c3                   	ret    

c00229d4 <SysGetRAMData(regs*)>:
c00229d4:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00229de:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00229e4:	99                   	cdq    
c00229e5:	f7 f9                	idiv   ecx
c00229e7:	c1 e0 18             	shl    eax,0x18
c00229ea:	09 c8                	or     eax,ecx
c00229ec:	99                   	cdq    
c00229ed:	c3                   	ret    

c00229ee <SysGetVGAPtr(regs*)>:
c00229ee:	55                   	push   ebp
c00229ef:	57                   	push   edi
c00229f0:	56                   	push   esi
c00229f1:	53                   	push   ebx
c00229f2:	83 ec 18             	sub    esp,0x18
c00229f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00229f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00229fc:	e8 57 26 00 00       	call   c0025058 <Thr::processFromPID(int)>
c0022a01:	83 c4 10             	add    esp,0x10
c0022a04:	89 c1                	mov    ecx,eax
c0022a06:	b8 01 00 00 00       	mov    eax,0x1
c0022a0b:	85 c9                	test   ecx,ecx
c0022a0d:	74 57                	je     c0022a66 <SysGetVGAPtr(regs*)+0x78>
c0022a0f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0022a13:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0022a19:	74 0c                	je     c0022a27 <SysGetVGAPtr(regs*)+0x39>
c0022a1b:	83 ec 0c             	sub    esp,0xc
c0022a1e:	55                   	push   ebp
c0022a1f:	e8 07 46 ff ff       	call   c001702b <setActiveTerminal(VgaText*)>
c0022a24:	83 c4 10             	add    esp,0x10
c0022a27:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0022a2a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0022a2f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0022a32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022a34:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022a37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022a3a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0022a40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022a43:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022a46:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0022a4c:	50                   	push   eax
c0022a4d:	50                   	push   eax
c0022a4e:	68 20 27 03 c0       	push   0xc0032720
c0022a53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022a56:	05 a8 0f 00 00       	add    eax,0xfa8
c0022a5b:	50                   	push   eax
c0022a5c:	e8 ef db fd ff       	call   c0000650 <strcpy>
c0022a61:	83 c4 10             	add    esp,0x10
c0022a64:	31 c0                	xor    eax,eax
c0022a66:	83 c4 0c             	add    esp,0xc
c0022a69:	31 d2                	xor    edx,edx
c0022a6b:	5b                   	pop    ebx
c0022a6c:	5e                   	pop    esi
c0022a6d:	5f                   	pop    edi
c0022a6e:	5d                   	pop    ebp
c0022a6f:	c3                   	ret    

c0022a70 <SysKill(regs*)>:
c0022a70:	53                   	push   ebx
c0022a71:	83 ec 08             	sub    esp,0x8
c0022a74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a78:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0022a7c:	75 16                	jne    c0022a94 <SysKill(regs*)+0x24>
c0022a7e:	83 ec 0c             	sub    esp,0xc
c0022a81:	68 2a 27 03 c0       	push   0xc003272a
c0022a86:	e8 e8 d5 ff ff       	call   c0020073 <KePanic(char const*)>
c0022a8b:	83 c4 10             	add    esp,0x10
c0022a8e:	e9 89 00 00 00       	jmp    c0022b1c <SysKill(regs*)+0xac>
c0022a93:	90                   	nop
c0022a94:	83 ec 0c             	sub    esp,0xc
c0022a97:	68 ec 01 04 c0       	push   0xc00401ec
c0022a9c:	e8 4b be 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0022aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0022aa4:	83 c4 10             	add    esp,0x10
c0022aa7:	85 c0                	test   eax,eax
c0022aa9:	74 19                	je     c0022ac4 <SysKill(regs*)+0x54>
c0022aab:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0022aae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0022ab1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0022ab3:	74 33                	je     c0022ae8 <SysKill(regs*)+0x78>
c0022ab5:	52                   	push   edx
c0022ab6:	52                   	push   edx
c0022ab7:	50                   	push   eax
c0022ab8:	68 ec 01 04 c0       	push   0xc00401ec
c0022abd:	e8 4a c1 00 00       	call   c002ec0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0022ac2:	eb e0                	jmp    c0022aa4 <SysKill(regs*)+0x34>
c0022ac4:	83 ec 0c             	sub    esp,0xc
c0022ac7:	68 e0 01 04 c0       	push   0xc00401e0
c0022acc:	e8 1b be 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0022ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ad4:	83 c4 10             	add    esp,0x10
c0022ad7:	85 c0                	test   eax,eax
c0022ad9:	74 41                	je     c0022b1c <SysKill(regs*)+0xac>
c0022adb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0022ade:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0022ae1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0022ae3:	75 27                	jne    c0022b0c <SysKill(regs*)+0x9c>
c0022ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ae8:	51                   	push   ecx
c0022ae9:	51                   	push   ecx
c0022aea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022aed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022af2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022af5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0022afb:	e8 0f da ff ff       	call   c002050f <KeRaiseSignal(SigHandlerBlock*, int)>
c0022b00:	83 c4 10             	add    esp,0x10
c0022b03:	31 c0                	xor    eax,eax
c0022b05:	31 d2                	xor    edx,edx
c0022b07:	eb 1b                	jmp    c0022b24 <SysKill(regs*)+0xb4>
c0022b09:	8d 76 00             	lea    esi,[esi+0x0]
c0022b0c:	52                   	push   edx
c0022b0d:	52                   	push   edx
c0022b0e:	50                   	push   eax
c0022b0f:	68 e0 01 04 c0       	push   0xc00401e0
c0022b14:	e8 f3 c0 00 00       	call   c002ec0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0022b19:	eb b9                	jmp    c0022ad4 <SysKill(regs*)+0x64>
c0022b1b:	90                   	nop
c0022b1c:	83 c8 ff             	or     eax,0xffffffff
c0022b1f:	89 c2                	mov    edx,eax
c0022b21:	8d 76 00             	lea    esi,[esi+0x0]
c0022b24:	83 c4 08             	add    esp,0x8
c0022b27:	5b                   	pop    ebx
c0022b28:	c3                   	ret    

c0022b29 <SysLoadDLL(regs*)>:
c0022b29:	56                   	push   esi
c0022b2a:	31 d2                	xor    edx,edx
c0022b2c:	53                   	push   ebx
c0022b2d:	b8 01 00 00 00       	mov    eax,0x1
c0022b32:	51                   	push   ecx
c0022b33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b37:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0022b3b:	0f 84 8c 00 00 00    	je     c0022bcd <SysLoadDLL(regs*)+0xa4>
c0022b41:	83 ec 0c             	sub    esp,0xc
c0022b44:	68 14 01 00 00       	push   0x114
c0022b49:	e8 41 38 ff ff       	call   c001638f <malloc>
c0022b4e:	83 c4 0c             	add    esp,0xc
c0022b51:	89 c3                	mov    ebx,eax
c0022b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022b58:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022b5b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022b5e:	53                   	push   ebx
c0022b5f:	e8 7a 78 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0022b64:	83 c4 10             	add    esp,0x10
c0022b67:	31 d2                	xor    edx,edx
c0022b69:	85 db                	test   ebx,ebx
c0022b6b:	b8 02 00 00 00       	mov    eax,0x2
c0022b70:	74 5b                	je     c0022bcd <SysLoadDLL(regs*)+0xa4>
c0022b72:	83 ec 0c             	sub    esp,0xc
c0022b75:	53                   	push   ebx
c0022b76:	e8 45 7b ff ff       	call   c001a6c0 <File::exists()>
c0022b7b:	83 c4 10             	add    esp,0x10
c0022b7e:	84 c0                	test   al,al
c0022b80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022b82:	75 11                	jne    c0022b95 <SysLoadDLL(regs*)+0x6c>
c0022b84:	83 ec 0c             	sub    esp,0xc
c0022b87:	53                   	push   ebx
c0022b88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022b8b:	83 c4 10             	add    esp,0x10
c0022b8e:	b8 03 00 00 00       	mov    eax,0x3
c0022b93:	eb 36                	jmp    c0022bcb <SysLoadDLL(regs*)+0xa2>
c0022b95:	83 ec 0c             	sub    esp,0xc
c0022b98:	53                   	push   ebx
c0022b99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022b9c:	58                   	pop    eax
c0022b9d:	5a                   	pop    edx
c0022b9e:	6a 00                	push   0x0
c0022ba0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022ba3:	e8 8f 15 00 00       	call   c0024137 <Thr::loadDLL(char const*, bool)>
c0022ba8:	83 c4 10             	add    esp,0x10
c0022bab:	31 d2                	xor    edx,edx
c0022bad:	89 c1                	mov    ecx,eax
c0022baf:	b8 04 00 00 00       	mov    eax,0x4
c0022bb4:	85 c9                	test   ecx,ecx
c0022bb6:	74 15                	je     c0022bcd <SysLoadDLL(regs*)+0xa4>
c0022bb8:	53                   	push   ebx
c0022bb9:	53                   	push   ebx
c0022bba:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0022bc0:	51                   	push   ecx
c0022bc1:	e8 d2 17 00 00       	call   c0024398 <Thr::executeDLL(unsigned long, void*)>
c0022bc6:	83 c4 10             	add    esp,0x10
c0022bc9:	31 c0                	xor    eax,eax
c0022bcb:	31 d2                	xor    edx,edx
c0022bcd:	59                   	pop    ecx
c0022bce:	5b                   	pop    ebx
c0022bcf:	5e                   	pop    esi
c0022bd0:	c3                   	ret    

c0022bd1 <SysRead(regs*)>:
c0022bd1:	57                   	push   edi
c0022bd2:	56                   	push   esi
c0022bd3:	53                   	push   ebx
c0022bd4:	83 ec 10             	sub    esp,0x10
c0022bd7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022bdb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022bde:	83 f8 02             	cmp    eax,0x2
c0022be1:	77 10                	ja     c0022bf3 <SysRead(regs*)+0x22>
c0022be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022be8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022beb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0022bf1:	eb 0e                	jmp    c0022c01 <SysRead(regs*)+0x30>
c0022bf3:	83 ec 0c             	sub    esp,0xc
c0022bf6:	50                   	push   eax
c0022bf7:	e8 5b 51 ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0022bfc:	83 c4 10             	add    esp,0x10
c0022bff:	89 c1                	mov    ecx,eax
c0022c01:	83 c8 ff             	or     eax,0xffffffff
c0022c04:	85 c9                	test   ecx,ecx
c0022c06:	89 c2                	mov    edx,eax
c0022c08:	74 28                	je     c0022c32 <SysRead(regs*)+0x61>
c0022c0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c12:	83 ec 0c             	sub    esp,0xc
c0022c15:	31 ff                	xor    edi,edi
c0022c17:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022c1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0022c1d:	52                   	push   edx
c0022c1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022c21:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0022c24:	57                   	push   edi
c0022c25:	56                   	push   esi
c0022c26:	51                   	push   ecx
c0022c27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022c2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0022c2e:	83 c4 20             	add    esp,0x20
c0022c31:	99                   	cdq    
c0022c32:	83 c4 10             	add    esp,0x10
c0022c35:	5b                   	pop    ebx
c0022c36:	5e                   	pop    esi
c0022c37:	5f                   	pop    edi
c0022c38:	c3                   	ret    

c0022c39 <SysRegisterSignal(regs*)>:
c0022c39:	83 ec 18             	sub    esp,0x18
c0022c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c40:	6a 00                	push   0x0
c0022c42:	6a 00                	push   0x0
c0022c44:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0022c47:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022c4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022c4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022c52:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0022c58:	e8 7c d8 ff ff       	call   c00204d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0022c5d:	83 c4 2c             	add    esp,0x2c
c0022c60:	99                   	cdq    
c0022c61:	c3                   	ret    

c0022c62 <SysRegistryGetTypeFromPath(regs*)>:
c0022c62:	57                   	push   edi
c0022c63:	56                   	push   esi
c0022c64:	53                   	push   ebx
c0022c65:	81 ec 38 01 00 00    	sub    esp,0x138
c0022c6b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0022c72:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022c75:	68 4b 27 03 c0       	push   0xc003274b
c0022c7a:	e8 47 65 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022c7f:	5a                   	pop    edx
c0022c80:	59                   	pop    ecx
c0022c81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022c84:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022c87:	e8 34 f6 ff ff       	call   c00222c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0022c8c:	5f                   	pop    edi
c0022c8d:	5a                   	pop    edx
c0022c8e:	89 c6                	mov    esi,eax
c0022c90:	50                   	push   eax
c0022c91:	68 6b 27 03 c0       	push   0xc003276b
c0022c96:	e8 2b 65 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022c9b:	83 c4 10             	add    esp,0x10
c0022c9e:	85 f6                	test   esi,esi
c0022ca0:	74 28                	je     c0022cca <SysRegistryGetTypeFromPath(regs*)+0x68>
c0022ca2:	50                   	push   eax
c0022ca3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0022ca7:	57                   	push   edi
c0022ca8:	56                   	push   esi
c0022ca9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022cac:	e8 f4 f1 ff ff       	call   c0021ea5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022cb1:	83 c4 0c             	add    esp,0xc
c0022cb4:	57                   	push   edi
c0022cb5:	50                   	push   eax
c0022cb6:	89 c3                	mov    ebx,eax
c0022cb8:	68 73 27 03 c0       	push   0xc0032773
c0022cbd:	e8 04 65 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022cc2:	89 d8                	mov    eax,ebx
c0022cc4:	83 c4 10             	add    esp,0x10
c0022cc7:	99                   	cdq    
c0022cc8:	eb 05                	jmp    c0022ccf <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0022cca:	83 c8 ff             	or     eax,0xffffffff
c0022ccd:	89 c2                	mov    edx,eax
c0022ccf:	81 c4 30 01 00 00    	add    esp,0x130
c0022cd5:	5b                   	pop    ebx
c0022cd6:	5e                   	pop    esi
c0022cd7:	5f                   	pop    edi
c0022cd8:	c3                   	ret    

c0022cd9 <SysRegistryReadExtent(regs*)>:
c0022cd9:	83 ec 1c             	sub    esp,0x1c
c0022cdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022ce0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0022ce3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0022ce6:	85 c0                	test   eax,eax
c0022ce8:	79 1f                	jns    c0022d09 <SysRegistryReadExtent(regs*)+0x30>
c0022cea:	52                   	push   edx
c0022ceb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022cf0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0022cf4:	52                   	push   edx
c0022cf5:	50                   	push   eax
c0022cf6:	51                   	push   ecx
c0022cf7:	e8 9b f0 ff ff       	call   c0021d97 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0022cfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d04:	83 c4 10             	add    esp,0x10
c0022d07:	eb 14                	jmp    c0022d1d <SysRegistryReadExtent(regs*)+0x44>
c0022d09:	83 ec 04             	sub    esp,0x4
c0022d0c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0022d0f:	50                   	push   eax
c0022d10:	51                   	push   ecx
c0022d11:	e8 1f eb ff ff       	call   c0021835 <CmGetString(Reghive_Tag*, int, char*)>
c0022d16:	83 c4 10             	add    esp,0x10
c0022d19:	31 c0                	xor    eax,eax
c0022d1b:	31 d2                	xor    edx,edx
c0022d1d:	83 c4 1c             	add    esp,0x1c
c0022d20:	c3                   	ret    

c0022d21 <SysRegistryPathToExtentLookup(regs*)>:
c0022d21:	53                   	push   ebx
c0022d22:	83 ec 10             	sub    esp,0x10
c0022d25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022d2c:	68 89 27 03 c0       	push   0xc0032789
c0022d31:	e8 90 64 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022d36:	58                   	pop    eax
c0022d37:	5a                   	pop    edx
c0022d38:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022d3b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022d3e:	e8 7d f5 ff ff       	call   c00222c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0022d43:	83 c4 18             	add    esp,0x18
c0022d46:	5b                   	pop    ebx
c0022d47:	99                   	cdq    
c0022d48:	c3                   	ret    

c0022d49 <SysRegistryEnterDirectory(regs*)>:
c0022d49:	53                   	push   ebx
c0022d4a:	83 ec 10             	sub    esp,0x10
c0022d4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d54:	68 ac 27 03 c0       	push   0xc00327ac
c0022d59:	e8 68 64 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022d5e:	58                   	pop    eax
c0022d5f:	5a                   	pop    edx
c0022d60:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d63:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022d66:	e8 41 eb ff ff       	call   c00218ac <CmEnterDirectory(Reghive_Tag*, int)>
c0022d6b:	83 c4 18             	add    esp,0x18
c0022d6e:	5b                   	pop    ebx
c0022d6f:	99                   	cdq    
c0022d70:	c3                   	ret    

c0022d71 <SysRegistryGetNext(regs*)>:
c0022d71:	53                   	push   ebx
c0022d72:	83 ec 10             	sub    esp,0x10
c0022d75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d79:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d7c:	68 ca 27 03 c0       	push   0xc00327ca
c0022d81:	e8 40 64 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022d86:	58                   	pop    eax
c0022d87:	5a                   	pop    edx
c0022d88:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d8b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022d8e:	e8 58 eb ff ff       	call   c00218eb <CmGetNext(Reghive_Tag*, int)>
c0022d93:	83 c4 18             	add    esp,0x18
c0022d96:	5b                   	pop    ebx
c0022d97:	99                   	cdq    
c0022d98:	c3                   	ret    

c0022d99 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0022d99:	57                   	push   edi
c0022d9a:	56                   	push   esi
c0022d9b:	53                   	push   ebx
c0022d9c:	81 ec 34 01 00 00    	sub    esp,0x134
c0022da2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0022da9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0022dad:	57                   	push   edi
c0022dae:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0022db1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022db4:	e8 ec f0 ff ff       	call   c0021ea5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022db9:	89 c3                	mov    ebx,eax
c0022dbb:	58                   	pop    eax
c0022dbc:	5a                   	pop    edx
c0022dbd:	57                   	push   edi
c0022dbe:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0022dc1:	e8 8a d8 fd ff       	call   c0000650 <strcpy>
c0022dc6:	81 c4 40 01 00 00    	add    esp,0x140
c0022dcc:	89 d8                	mov    eax,ebx
c0022dce:	5b                   	pop    ebx
c0022dcf:	99                   	cdq    
c0022dd0:	5e                   	pop    esi
c0022dd1:	5f                   	pop    edi
c0022dd2:	c3                   	ret    

c0022dd3 <SysRegistryOpen(regs*)>:
c0022dd3:	83 ec 18             	sub    esp,0x18
c0022dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dda:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0022ddd:	e8 e3 e8 ff ff       	call   c00216c5 <CmOpen(char const*)>
c0022de2:	83 c4 1c             	add    esp,0x1c
c0022de5:	99                   	cdq    
c0022de6:	c3                   	ret    

c0022de7 <SysRegistryClose(regs*)>:
c0022de7:	83 ec 18             	sub    esp,0x18
c0022dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022df1:	e8 ed e9 ff ff       	call   c00217e3 <CmClose(Reghive_Tag*)>
c0022df6:	31 c0                	xor    eax,eax
c0022df8:	31 d2                	xor    edx,edx
c0022dfa:	83 c4 1c             	add    esp,0x1c
c0022dfd:	c3                   	ret    

c0022dfe <SysSbrk(regs*)>:
c0022dfe:	56                   	push   esi
c0022dff:	53                   	push   ebx
c0022e00:	50                   	push   eax
c0022e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022e06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022e0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022e0d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0022e10:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0022e16:	85 db                	test   ebx,ebx
c0022e18:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0022e1b:	74 02                	je     c0022e1f <SysSbrk(regs*)+0x21>
c0022e1d:	79 06                	jns    c0022e25 <SysSbrk(regs*)+0x27>
c0022e1f:	89 f0                	mov    eax,esi
c0022e21:	31 d2                	xor    edx,edx
c0022e23:	eb 2a                	jmp    c0022e4f <SysSbrk(regs*)+0x51>
c0022e25:	83 c8 ff             	or     eax,0xffffffff
c0022e28:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0022e2e:	89 c2                	mov    edx,eax
c0022e30:	77 1d                	ja     c0022e4f <SysSbrk(regs*)+0x51>
c0022e32:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0022e38:	50                   	push   eax
c0022e39:	68 07 0c 00 00       	push   0xc07
c0022e3e:	c1 ea 0c             	shr    edx,0xc
c0022e41:	52                   	push   edx
c0022e42:	51                   	push   ecx
c0022e43:	e8 7a 58 ff ff       	call   c00186c2 <VAS::allocatePages(int, int)>
c0022e48:	89 f0                	mov    eax,esi
c0022e4a:	31 d2                	xor    edx,edx
c0022e4c:	83 c4 10             	add    esp,0x10
c0022e4f:	59                   	pop    ecx
c0022e50:	5b                   	pop    ebx
c0022e51:	5e                   	pop    esi
c0022e52:	c3                   	ret    

c0022e53 <SysSetCwd(regs*)>:
c0022e53:	83 ec 14             	sub    esp,0x14
c0022e56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022e5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022e62:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022e65:	e8 f5 78 ff ff       	call   c001a75f <Fs::setcwd(Process*, char*)>
c0022e6a:	83 c4 1c             	add    esp,0x1c
c0022e6d:	99                   	cdq    
c0022e6e:	c3                   	ret    

c0022e6f <SysSetTime(regs*)>:
c0022e6f:	55                   	push   ebp
c0022e70:	31 c9                	xor    ecx,ecx
c0022e72:	57                   	push   edi
c0022e73:	bd 0c 00 00 00       	mov    ebp,0xc
c0022e78:	56                   	push   esi
c0022e79:	53                   	push   ebx
c0022e7a:	31 db                	xor    ebx,ebx
c0022e7c:	83 ec 10             	sub    esp,0x10
c0022e7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e83:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0022e86:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0022e89:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0022e8c:	89 c2                	mov    edx,eax
c0022e8e:	c1 e8 05             	shr    eax,0x5
c0022e91:	83 e2 1f             	and    edx,0x1f
c0022e94:	42                   	inc    edx
c0022e95:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0022e9b:	c1 e7 10             	shl    edi,0x10
c0022e9e:	88 d1                	mov    cl,dl
c0022ea0:	31 d2                	xor    edx,edx
c0022ea2:	f7 f5                	div    ebp
c0022ea4:	89 dd                	mov    ebp,ebx
c0022ea6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0022eac:	88 d5                	mov    ch,dl
c0022eae:	31 d2                	xor    edx,edx
c0022eb0:	0f b7 c1             	movzx  eax,cx
c0022eb3:	09 f8                	or     eax,edi
c0022eb5:	bf 3c 00 00 00       	mov    edi,0x3c
c0022eba:	89 c1                	mov    ecx,eax
c0022ebc:	89 f0                	mov    eax,esi
c0022ebe:	f7 f7                	div    edi
c0022ec0:	c1 e2 10             	shl    edx,0x10
c0022ec3:	09 d5                	or     ebp,edx
c0022ec5:	31 d2                	xor    edx,edx
c0022ec7:	f7 f7                	div    edi
c0022ec9:	89 eb                	mov    ebx,ebp
c0022ecb:	bf 10 0e 00 00       	mov    edi,0xe10
c0022ed0:	89 f0                	mov    eax,esi
c0022ed2:	88 d7                	mov    bh,dl
c0022ed4:	31 d2                	xor    edx,edx
c0022ed6:	f7 f7                	div    edi
c0022ed8:	bf 18 00 00 00       	mov    edi,0x18
c0022edd:	31 d2                	xor    edx,edx
c0022edf:	f7 f7                	div    edi
c0022ee1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0022ee6:	88 d3                	mov    bl,dl
c0022ee8:	53                   	push   ebx
c0022ee9:	51                   	push   ecx
c0022eea:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0022ef0:	e8 7b 80 ff ff       	call   c001af70 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0022ef5:	83 c4 1c             	add    esp,0x1c
c0022ef8:	31 d2                	xor    edx,edx
c0022efa:	5b                   	pop    ebx
c0022efb:	5e                   	pop    esi
c0022efc:	83 f0 01             	xor    eax,0x1
c0022eff:	5f                   	pop    edi
c0022f00:	0f b6 c0             	movzx  eax,al
c0022f03:	5d                   	pop    ebp
c0022f04:	c3                   	ret    

c0022f05 <SysSymlink(regs*)>:
c0022f05:	56                   	push   esi
c0022f06:	83 c8 ff             	or     eax,0xffffffff
c0022f09:	53                   	push   ebx
c0022f0a:	89 c2                	mov    edx,eax
c0022f0c:	81 ec 34 02 00 00    	sub    esp,0x234
c0022f12:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0022f19:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0022f1d:	74 50                	je     c0022f6f <SysSymlink(regs*)+0x6a>
c0022f1f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0022f22:	85 c9                	test   ecx,ecx
c0022f24:	74 49                	je     c0022f6f <SysSymlink(regs*)+0x6a>
c0022f26:	6a 01                	push   0x1
c0022f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022f30:	05 0c 01 00 00       	add    eax,0x10c
c0022f35:	50                   	push   eax
c0022f36:	51                   	push   ecx
c0022f37:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0022f3b:	56                   	push   esi
c0022f3c:	e8 91 71 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0022f41:	6a 01                	push   0x1
c0022f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022f4b:	05 0c 01 00 00       	add    eax,0x10c
c0022f50:	50                   	push   eax
c0022f51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022f54:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0022f5b:	53                   	push   ebx
c0022f5c:	e8 71 71 ff ff       	call   c001a0d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0022f61:	83 c4 18             	add    esp,0x18
c0022f64:	56                   	push   esi
c0022f65:	53                   	push   ebx
c0022f66:	e8 76 6d ff ff       	call   c0019ce1 <KeCreateSymlink(char const*, char const*)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	99                   	cdq    
c0022f6f:	81 c4 34 02 00 00    	add    esp,0x234
c0022f75:	5b                   	pop    ebx
c0022f76:	5e                   	pop    esi
c0022f77:	c3                   	ret    

c0022f78 <SysTimezone(regs*)>:
c0022f78:	53                   	push   ebx
c0022f79:	83 ec 08             	sub    esp,0x8
c0022f7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f80:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0022f84:	75 17                	jne    c0022f9d <SysTimezone(regs*)+0x25>
c0022f86:	83 ec 0c             	sub    esp,0xc
c0022f89:	68 e1 27 03 c0       	push   0xc00327e1
c0022f8e:	e8 33 62 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022f93:	83 c8 ff             	or     eax,0xffffffff
c0022f96:	83 c4 10             	add    esp,0x10
c0022f99:	89 c2                	mov    edx,eax
c0022f9b:	eb 20                	jmp    c0022fbd <SysTimezone(regs*)+0x45>
c0022f9d:	83 ec 0c             	sub    esp,0xc
c0022fa0:	68 f6 27 03 c0       	push   0xc00327f6
c0022fa5:	e8 1c 62 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0022faa:	58                   	pop    eax
c0022fab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022fae:	e8 21 7d ff ff       	call   c001acd4 <User::loadClockSettings(int)>
c0022fb3:	83 c4 10             	add    esp,0x10
c0022fb6:	b8 01 00 00 00       	mov    eax,0x1
c0022fbb:	31 d2                	xor    edx,edx
c0022fbd:	83 c4 08             	add    esp,0x8
c0022fc0:	5b                   	pop    ebx
c0022fc1:	c3                   	ret    

c0022fc2 <SysTruncate(regs*)>:
c0022fc2:	55                   	push   ebp
c0022fc3:	57                   	push   edi
c0022fc4:	31 ff                	xor    edi,edi
c0022fc6:	56                   	push   esi
c0022fc7:	53                   	push   ebx
c0022fc8:	83 ec 0c             	sub    esp,0xc
c0022fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fcf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022fd2:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0022fd6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0022fd9:	89 ce                	mov    esi,ecx
c0022fdb:	0f 84 9a 00 00 00    	je     c002307b <SysTruncate(regs*)+0xb9>
c0022fe1:	83 ec 0c             	sub    esp,0xc
c0022fe4:	68 14 01 00 00       	push   0x114
c0022fe9:	e8 a1 33 ff ff       	call   c001638f <malloc>
c0022fee:	83 c4 0c             	add    esp,0xc
c0022ff1:	89 c3                	mov    ebx,eax
c0022ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022ff8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022ffb:	55                   	push   ebp
c0022ffc:	53                   	push   ebx
c0022ffd:	e8 dc 73 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0023002:	83 c4 10             	add    esp,0x10
c0023005:	31 d2                	xor    edx,edx
c0023007:	85 db                	test   ebx,ebx
c0023009:	b8 03 00 00 00       	mov    eax,0x3
c002300e:	0f 84 a2 00 00 00    	je     c00230b6 <SysTruncate(regs*)+0xf4>
c0023014:	51                   	push   ecx
c0023015:	51                   	push   ecx
c0023016:	6a 02                	push   0x2
c0023018:	53                   	push   ebx
c0023019:	e8 de 73 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c002301e:	83 c4 10             	add    esp,0x10
c0023021:	85 c0                	test   eax,eax
c0023023:	74 13                	je     c0023038 <SysTruncate(regs*)+0x76>
c0023025:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023027:	83 ec 0c             	sub    esp,0xc
c002302a:	53                   	push   ebx
c002302b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002302e:	83 c4 10             	add    esp,0x10
c0023031:	b8 04 00 00 00       	mov    eax,0x4
c0023036:	eb 7c                	jmp    c00230b4 <SysTruncate(regs*)+0xf2>
c0023038:	52                   	push   edx
c0023039:	57                   	push   edi
c002303a:	56                   	push   esi
c002303b:	53                   	push   ebx
c002303c:	e8 cf 74 ff ff       	call   c001a510 <File::truncate(unsigned long long)>
c0023041:	83 c4 10             	add    esp,0x10
c0023044:	85 c0                	test   eax,eax
c0023046:	74 1b                	je     c0023063 <SysTruncate(regs*)+0xa1>
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	53                   	push   ebx
c002304c:	e8 09 74 ff ff       	call   c001a45a <File::close()>
c0023051:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023053:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023056:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	b8 05 00 00 00       	mov    eax,0x5
c0023061:	eb 51                	jmp    c00230b4 <SysTruncate(regs*)+0xf2>
c0023063:	83 ec 0c             	sub    esp,0xc
c0023066:	53                   	push   ebx
c0023067:	e8 ee 73 ff ff       	call   c001a45a <File::close()>
c002306c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002306e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023071:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023074:	83 c4 10             	add    esp,0x10
c0023077:	31 c0                	xor    eax,eax
c0023079:	eb 39                	jmp    c00230b4 <SysTruncate(regs*)+0xf2>
c002307b:	31 d2                	xor    edx,edx
c002307d:	83 fd 02             	cmp    ebp,0x2
c0023080:	b8 01 00 00 00       	mov    eax,0x1
c0023085:	7e 2f                	jle    c00230b6 <SysTruncate(regs*)+0xf4>
c0023087:	83 ec 0c             	sub    esp,0xc
c002308a:	51                   	push   ecx
c002308b:	e8 c7 4c ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c0023090:	83 c4 10             	add    esp,0x10
c0023093:	31 d2                	xor    edx,edx
c0023095:	89 c1                	mov    ecx,eax
c0023097:	b8 02 00 00 00       	mov    eax,0x2
c002309c:	85 c9                	test   ecx,ecx
c002309e:	74 16                	je     c00230b6 <SysTruncate(regs*)+0xf4>
c00230a0:	50                   	push   eax
c00230a1:	57                   	push   edi
c00230a2:	56                   	push   esi
c00230a3:	51                   	push   ecx
c00230a4:	e8 67 74 ff ff       	call   c001a510 <File::truncate(unsigned long long)>
c00230a9:	83 c4 10             	add    esp,0x10
c00230ac:	85 c0                	test   eax,eax
c00230ae:	0f 95 c0             	setne  al
c00230b1:	0f b6 c0             	movzx  eax,al
c00230b4:	31 d2                	xor    edx,edx
c00230b6:	83 c4 0c             	add    esp,0xc
c00230b9:	5b                   	pop    ebx
c00230ba:	5e                   	pop    esi
c00230bb:	5f                   	pop    edi
c00230bc:	5d                   	pop    ebp
c00230bd:	c3                   	ret    

c00230be <SysWrite(regs*)>:
c00230be:	57                   	push   edi
c00230bf:	56                   	push   esi
c00230c0:	53                   	push   ebx
c00230c1:	83 ec 10             	sub    esp,0x10
c00230c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00230c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00230cb:	83 f8 02             	cmp    eax,0x2
c00230ce:	77 10                	ja     c00230e0 <SysWrite(regs*)+0x22>
c00230d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230d8:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00230de:	eb 0e                	jmp    c00230ee <SysWrite(regs*)+0x30>
c00230e0:	83 ec 0c             	sub    esp,0xc
c00230e3:	50                   	push   eax
c00230e4:	e8 6e 4c ff ff       	call   c0017d57 <KeGetFileFromDescriptor(int)>
c00230e9:	83 c4 10             	add    esp,0x10
c00230ec:	89 c1                	mov    ecx,eax
c00230ee:	83 c8 ff             	or     eax,0xffffffff
c00230f1:	85 c9                	test   ecx,ecx
c00230f3:	89 c2                	mov    edx,eax
c00230f5:	74 28                	je     c002311f <SysWrite(regs*)+0x61>
c00230f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00230ff:	83 ec 0c             	sub    esp,0xc
c0023102:	31 ff                	xor    edi,edi
c0023104:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023108:	8b 01                	mov    eax,DWORD PTR [ecx]
c002310a:	52                   	push   edx
c002310b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002310e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023111:	57                   	push   edi
c0023112:	56                   	push   esi
c0023113:	51                   	push   ecx
c0023114:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002311b:	83 c4 20             	add    esp,0x20
c002311e:	99                   	cdq    
c002311f:	83 c4 10             	add    esp,0x10
c0023122:	5b                   	pop    ebx
c0023123:	5e                   	pop    esi
c0023124:	5f                   	pop    edi
c0023125:	c3                   	ret    

c0023126 <SysWsbe(regs*)>:
c0023126:	57                   	push   edi
c0023127:	b9 0b 00 00 00       	mov    ecx,0xb
c002312c:	56                   	push   esi
c002312d:	be 35 28 03 c0       	mov    esi,0xc0032835
c0023132:	53                   	push   ebx
c0023133:	83 ec 30             	sub    esp,0x30
c0023136:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002313a:	fc                   	cld    
c002313b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002313d:	83 ec 0c             	sub    esp,0xc
c0023140:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023149:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002314c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023152:	8b 06                	mov    eax,DWORD PTR [esi]
c0023154:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023157:	57                   	push   edi
c0023158:	e8 23 d4 fd ff       	call   c0000580 <strlen>
c002315d:	5a                   	pop    edx
c002315e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023162:	52                   	push   edx
c0023163:	31 d2                	xor    edx,edx
c0023165:	57                   	push   edi
c0023166:	52                   	push   edx
c0023167:	50                   	push   eax
c0023168:	56                   	push   esi
c0023169:	ff d3                	call   ebx
c002316b:	83 c4 14             	add    esp,0x14
c002316e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023172:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023175:	e8 12 24 00 00       	call   c002558c <terminateTask(int)>
c002317a:	83 c4 40             	add    esp,0x40
c002317d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023182:	5b                   	pop    ebx
c0023183:	31 d2                	xor    edx,edx
c0023185:	5e                   	pop    esi
c0023186:	5f                   	pop    edi
c0023187:	c3                   	ret    

c0023188 <SysYield(regs*)>:
c0023188:	83 ec 0c             	sub    esp,0xc
c002318b:	fa                   	cli    
c002318c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023192:	e8 75 1a 00 00       	call   c0024c0c <schedule()>
c0023197:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002319c:	48                   	dec    eax
c002319d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00231a2:	75 01                	jne    c00231a5 <SysYield(regs*)+0x1d>
c00231a4:	fb                   	sti    
c00231a5:	31 c0                	xor    eax,eax
c00231a7:	31 d2                	xor    edx,edx
c00231a9:	83 c4 0c             	add    esp,0xc
c00231ac:	c3                   	ret    

c00231ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00231ad:	55                   	push   ebp
c00231ae:	57                   	push   edi
c00231af:	56                   	push   esi
c00231b0:	53                   	push   ebx
c00231b1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00231b7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00231c2:	74 3b                	je     c00231ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00231c4:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00231cc:	74 31                	je     c00231ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00231ce:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00231d6:	75 27                	jne    c00231ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00231d8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00231df:	05 00 10 00 00       	add    eax,0x1000
c00231e4:	89 c2                	mov    edx,eax
c00231e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00231eb:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00231f2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00231f8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00231ff:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023206:	83 ec 0c             	sub    esp,0xc
c0023209:	6a 01                	push   0x1
c002320b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023211:	e8 9b 4c ff ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c0023216:	83 c4 10             	add    esp,0x10
c0023219:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c002321f:	89 c3                	mov    ebx,eax
c0023221:	0f 86 26 01 00 00    	jbe    c002334d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0023227:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002322f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023236:	c1 ee 0c             	shr    esi,0xc
c0023239:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002323d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023244:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c002324b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002324f:	29 ef                	sub    edi,ebp
c0023251:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023255:	0f 83 f9 00 00 00    	jae    c0023354 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c002325b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023261:	b8 00 10 00 00       	mov    eax,0x1000
c0023266:	0f 47 f8             	cmova  edi,eax
c0023269:	83 ec 0c             	sub    esp,0xc
c002326c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023273:	31 d2                	xor    edx,edx
c0023275:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023277:	8d 44 24 28          	lea    eax,[esp+0x28]
c002327b:	50                   	push   eax
c002327c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023280:	56                   	push   esi
c0023281:	52                   	push   edx
c0023282:	57                   	push   edi
c0023283:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c002328a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002328d:	83 c4 20             	add    esp,0x20
c0023290:	85 c0                	test   eax,eax
c0023292:	75 06                	jne    c002329a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023294:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023298:	74 13                	je     c00232ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c002329a:	83 ec 0c             	sub    esp,0xc
c002329d:	53                   	push   ebx
c002329e:	e8 22 4f ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00232a3:	83 c4 10             	add    esp,0x10
c00232a6:	31 c0                	xor    eax,eax
c00232a8:	e9 7c 01 00 00       	jmp    c0023429 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00232ad:	fa                   	cli    
c00232ae:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00232b4:	e8 e5 33 ff ff       	call   c001669e <Phys::allocatePage()>
c00232b9:	6a 07                	push   0x7
c00232bb:	53                   	push   ebx
c00232bc:	50                   	push   eax
c00232bd:	89 c7                	mov    edi,eax
c00232bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232cd:	e8 e8 52 ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00232d2:	83 c4 0c             	add    esp,0xc
c00232d5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00232dc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232e2:	6a 00                	push   0x0
c00232e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232f2:	e8 29 51 ff ff       	call   c0018420 <VAS::mapOtherVASIn(bool, VAS*)>
c00232f7:	58                   	pop    eax
c00232f8:	5a                   	pop    edx
c00232f9:	68 07 0c 00 00       	push   0xc07
c00232fe:	55                   	push   ebp
c00232ff:	57                   	push   edi
c0023300:	89 df                	mov    edi,ebx
c0023302:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023309:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002330f:	6a 00                	push   0x0
c0023311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023316:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023319:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002331f:	e8 fa 54 ff ff       	call   c001881e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023324:	b9 00 10 00 00       	mov    ecx,0x1000
c0023329:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002332b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023330:	83 c4 20             	add    esp,0x20
c0023333:	48                   	dec    eax
c0023334:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023339:	85 c0                	test   eax,eax
c002333b:	75 01                	jne    c002333e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c002333d:	fb                   	sti    
c002333e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023342:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023348:	e9 f0 fe ff ff       	jmp    c002323d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c002334d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023354:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002335b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023361:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023367:	0f 86 ae 00 00 00    	jbe    c002341b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c002336d:	fa                   	cli    
c002336e:	51                   	push   ecx
c002336f:	31 ff                	xor    edi,edi
c0023371:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023378:	c1 ee 0c             	shr    esi,0xc
c002337b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023381:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023387:	6a 00                	push   0x0
c0023389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002338e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023391:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023397:	e8 84 50 ff ff       	call   c0018420 <VAS::mapOtherVASIn(bool, VAS*)>
c002339c:	83 c4 10             	add    esp,0x10
c002339f:	e8 fa 32 ff ff       	call   c001669e <Phys::allocatePage()>
c00233a4:	47                   	inc    edi
c00233a5:	6a 07                	push   0x7
c00233a7:	53                   	push   ebx
c00233a8:	50                   	push   eax
c00233a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00233ad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00233b3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00233b6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00233bc:	e8 f9 51 ff ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00233c1:	58                   	pop    eax
c00233c2:	5a                   	pop    edx
c00233c3:	68 07 0c 00 00       	push   0xc07
c00233c8:	55                   	push   ebp
c00233c9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00233cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233d3:	50                   	push   eax
c00233d4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00233db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00233e1:	6a 00                	push   0x0
c00233e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233eb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00233f1:	e8 28 54 ff ff       	call   c001881e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00233f6:	83 c4 1c             	add    esp,0x1c
c00233f9:	68 00 10 00 00       	push   0x1000
c00233fe:	6a 00                	push   0x0
c0023400:	53                   	push   ebx
c0023401:	e8 ea d0 fd ff       	call   c00004f0 <memset>
c0023406:	83 c4 10             	add    esp,0x10
c0023409:	39 fe                	cmp    esi,edi
c002340b:	77 92                	ja     c002339f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c002340d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023412:	48                   	dec    eax
c0023413:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023418:	75 01                	jne    c002341b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c002341a:	fb                   	sti    
c002341b:	83 ec 0c             	sub    esp,0xc
c002341e:	53                   	push   ebx
c002341f:	e8 a1 4d ff ff       	call   c00181c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0023424:	83 c4 10             	add    esp,0x10
c0023427:	b0 01                	mov    al,0x1
c0023429:	81 c4 2c 10 00 00    	add    esp,0x102c
c002342f:	5b                   	pop    ebx
c0023430:	5e                   	pop    esi
c0023431:	5f                   	pop    edi
c0023432:	5d                   	pop    ebp
c0023433:	c3                   	ret    

c0023434 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023434:	55                   	push   ebp
c0023435:	57                   	push   edi
c0023436:	56                   	push   esi
c0023437:	53                   	push   ebx
c0023438:	83 ec 48             	sub    esp,0x48
c002343b:	68 14 01 00 00       	push   0x114
c0023440:	e8 4a 2f ff ff       	call   c001638f <malloc>
c0023445:	83 c4 0c             	add    esp,0xc
c0023448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002344c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023450:	89 c7                	mov    edi,eax
c0023452:	50                   	push   eax
c0023453:	e8 86 6f ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0023458:	58                   	pop    eax
c0023459:	5a                   	pop    edx
c002345a:	6a 01                	push   0x1
c002345c:	57                   	push   edi
c002345d:	e8 9a 6f ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c0023462:	83 c4 10             	add    esp,0x10
c0023465:	85 c0                	test   eax,eax
c0023467:	0f 85 4c 01 00 00    	jne    c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c002346d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023475:	83 ec 0c             	sub    esp,0xc
c0023478:	6a 34                	push   0x34
c002347a:	e8 10 2f ff ff       	call   c001638f <malloc>
c002347f:	89 c3                	mov    ebx,eax
c0023481:	58                   	pop    eax
c0023482:	8b 07                	mov    eax,DWORD PTR [edi]
c0023484:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023488:	56                   	push   esi
c0023489:	53                   	push   ebx
c002348a:	6a 00                	push   0x0
c002348c:	6a 34                	push   0x34
c002348e:	57                   	push   edi
c002348f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023492:	83 c4 20             	add    esp,0x20
c0023495:	85 c0                	test   eax,eax
c0023497:	0f 85 1c 01 00 00    	jne    c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c002349d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00234a3:	0f 85 10 01 00 00    	jne    c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00234a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00234ac:	85 c0                	test   eax,eax
c00234ae:	0f 84 05 01 00 00    	je     c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00234b4:	31 d2                	xor    edx,edx
c00234b6:	55                   	push   ebp
c00234b7:	52                   	push   edx
c00234b8:	50                   	push   eax
c00234b9:	57                   	push   edi
c00234ba:	e8 fb 6f ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c00234bf:	83 c4 10             	add    esp,0x10
c00234c2:	85 c0                	test   eax,eax
c00234c4:	0f 85 ef 00 00 00    	jne    c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00234ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00234cd:	83 ec 0c             	sub    esp,0xc
c00234d0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00234d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00234d8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00234dc:	0f af c2             	imul   eax,edx
c00234df:	50                   	push   eax
c00234e0:	e8 aa 2e ff ff       	call   c001638f <malloc>
c00234e5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00234e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00234ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00234ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00234f2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00234f6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00234fa:	0f af c2             	imul   eax,edx
c00234fd:	99                   	cdq    
c00234fe:	52                   	push   edx
c00234ff:	50                   	push   eax
c0023500:	57                   	push   edi
c0023501:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023504:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023507:	83 c4 20             	add    esp,0x20
c002350a:	85 c0                	test   eax,eax
c002350c:	0f 84 a7 00 00 00    	je     c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023512:	31 d2                	xor    edx,edx
c0023514:	51                   	push   ecx
c0023515:	52                   	push   edx
c0023516:	50                   	push   eax
c0023517:	57                   	push   edi
c0023518:	e8 9d 6f ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c002351d:	83 c4 10             	add    esp,0x10
c0023520:	85 c0                	test   eax,eax
c0023522:	0f 85 91 00 00 00    	jne    c00235b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023528:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c002352c:	83 ec 0c             	sub    esp,0xc
c002352f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023533:	0f af c2             	imul   eax,edx
c0023536:	50                   	push   eax
c0023537:	e8 53 2e ff ff       	call   c001638f <malloc>
c002353c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002353e:	89 34 24             	mov    DWORD PTR [esp],esi
c0023541:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023549:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c002354d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023551:	0f af c2             	imul   eax,edx
c0023554:	99                   	cdq    
c0023555:	52                   	push   edx
c0023556:	50                   	push   eax
c0023557:	57                   	push   edi
c0023558:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002355b:	83 c4 20             	add    esp,0x20
c002355e:	31 c9                	xor    ecx,ecx
c0023560:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023568:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c002356c:	0f b7 e9             	movzx  ebp,cx
c002356f:	0f 83 86 00 00 00    	jae    c00235fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023575:	c1 e5 05             	shl    ebp,0x5
c0023578:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c002357c:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023580:	75 73                	jne    c00235f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023582:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023589:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002358c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023590:	52                   	push   edx
c0023591:	31 d2                	xor    edx,edx
c0023593:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023596:	52                   	push   edx
c0023597:	50                   	push   eax
c0023598:	57                   	push   edi
c0023599:	e8 1c 6f ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c002359e:	83 c4 10             	add    esp,0x10
c00235a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235a5:	85 c0                	test   eax,eax
c00235a7:	74 17                	je     c00235c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00235a9:	83 ec 0c             	sub    esp,0xc
c00235ac:	68 61 28 03 c0       	push   0xc0032861
c00235b1:	e8 10 5c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00235b6:	83 c4 10             	add    esp,0x10
c00235b9:	31 c0                	xor    eax,eax
c00235bb:	e9 8b 00 00 00       	jmp    c002364b <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00235c0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00235c4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00235c7:	83 ec 0c             	sub    esp,0xc
c00235ca:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00235cd:	50                   	push   eax
c00235ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00235d2:	56                   	push   esi
c00235d3:	57                   	push   edi
c00235d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00235d8:	e8 d0 fb ff ff       	call   c00231ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00235dd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00235e1:	83 c4 20             	add    esp,0x20
c00235e4:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00235e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235ec:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00235f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00235f5:	41                   	inc    ecx
c00235f6:	e9 6d ff ff ff       	jmp    c0023568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00235fb:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00235ff:	83 ec 0c             	sub    esp,0xc
c0023602:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002360a:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023610:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023616:	25 00 f0 ff ff       	and    eax,0xfffff000
c002361b:	05 00 10 00 00       	add    eax,0x1000
c0023620:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023627:	e8 73 2d ff ff       	call   c001639f <free>
c002362c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002362f:	e8 6b 2d ff ff       	call   c001639f <free>
c0023634:	58                   	pop    eax
c0023635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023639:	e8 61 2d ff ff       	call   c001639f <free>
c002363e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023641:	e8 14 6e ff ff       	call   c001a45a <File::close()>
c0023646:	83 c4 10             	add    esp,0x10
c0023649:	b0 01                	mov    al,0x1
c002364b:	83 c4 3c             	add    esp,0x3c
c002364e:	5b                   	pop    ebx
c002364f:	5e                   	pop    esi
c0023650:	5f                   	pop    edi
c0023651:	5d                   	pop    ebp
c0023652:	c3                   	ret    

c0023653 <Thr::runtimeReferenceHelper()>:
c0023653:	83 ec 18             	sub    esp,0x18
c0023656:	68 69 28 03 c0       	push   0xc0032869
c002365b:	e8 66 5b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0023660:	fa                   	cli    
c0023661:	83 c4 10             	add    esp,0x10
c0023664:	eb fe                	jmp    c0023664 <Thr::runtimeReferenceHelper()+0x11>

c0023666 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023666:	57                   	push   edi
c0023667:	56                   	push   esi
c0023668:	53                   	push   ebx
c0023669:	31 db                	xor    ebx,ebx
c002366b:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023671:	7e 3c                	jle    c00236af <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023673:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c002367a:	31 ff                	xor    edi,edi
c002367c:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023683:	7e 27                	jle    c00236ac <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023685:	50                   	push   eax
c0023686:	50                   	push   eax
c0023687:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002368b:	8b 06                	mov    eax,DWORD PTR [esi]
c002368d:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023694:	50                   	push   eax
c0023695:	e8 e6 d0 fd ff       	call   c0000780 <strcmp>
c002369a:	83 c4 10             	add    esp,0x10
c002369d:	85 c0                	test   eax,eax
c002369f:	75 05                	jne    c00236a6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00236a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00236a4:	eb 0b                	jmp    c00236b1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00236a6:	83 c6 10             	add    esi,0x10
c00236a9:	47                   	inc    edi
c00236aa:	eb d0                	jmp    c002367c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00236ac:	43                   	inc    ebx
c00236ad:	eb bc                	jmp    c002366b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00236af:	31 c0                	xor    eax,eax
c00236b1:	5b                   	pop    ebx
c00236b2:	5e                   	pop    esi
c00236b3:	5f                   	pop    edi
c00236b4:	c3                   	ret    

c00236b5 <Thr::loadKernelSymbolTable(char const*)>:
c00236b5:	55                   	push   ebp
c00236b6:	57                   	push   edi
c00236b7:	56                   	push   esi
c00236b8:	53                   	push   ebx
c00236b9:	83 ec 68             	sub    esp,0x68
c00236bc:	68 14 01 00 00       	push   0x114
c00236c1:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c00236c7:	e8 c3 2c ff ff       	call   c001638f <malloc>
c00236cc:	83 c4 0c             	add    esp,0xc
c00236cf:	56                   	push   esi
c00236d0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00236d4:	89 c3                	mov    ebx,eax
c00236d6:	50                   	push   eax
c00236d7:	e8 02 6d ff ff       	call   c001a3de <File::File(char const*, Process*)>
c00236dc:	5e                   	pop    esi
c00236dd:	5f                   	pop    edi
c00236de:	6a 01                	push   0x1
c00236e0:	53                   	push   ebx
c00236e1:	e8 16 6d ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c00236e6:	83 c4 10             	add    esp,0x10
c00236e9:	85 c0                	test   eax,eax
c00236eb:	74 0a                	je     c00236f7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00236ed:	83 ec 0c             	sub    esp,0xc
c00236f0:	68 8b 28 03 c0       	push   0xc003288b
c00236f5:	eb 34                	jmp    c002372b <Thr::loadKernelSymbolTable(char const*)+0x76>
c00236f7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00236ff:	83 ec 0c             	sub    esp,0xc
c0023702:	6a 34                	push   0x34
c0023704:	e8 86 2c ff ff       	call   c001638f <malloc>
c0023709:	59                   	pop    ecx
c002370a:	8d 74 24 34          	lea    esi,[esp+0x34]
c002370e:	89 c7                	mov    edi,eax
c0023710:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023712:	56                   	push   esi
c0023713:	57                   	push   edi
c0023714:	6a 00                	push   0x0
c0023716:	6a 34                	push   0x34
c0023718:	53                   	push   ebx
c0023719:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002371c:	83 c4 20             	add    esp,0x20
c002371f:	85 c0                	test   eax,eax
c0023721:	74 17                	je     c002373a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023723:	83 ec 0c             	sub    esp,0xc
c0023726:	68 a2 28 03 c0       	push   0xc00328a2
c002372b:	e8 43 c9 ff ff       	call   c0020073 <KePanic(char const*)>
c0023730:	83 c4 10             	add    esp,0x10
c0023733:	31 c0                	xor    eax,eax
c0023735:	e9 31 02 00 00       	jmp    c002396b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c002373a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023740:	75 e1                	jne    c0023723 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023742:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023745:	85 c0                	test   eax,eax
c0023747:	74 da                	je     c0023723 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023749:	52                   	push   edx
c002374a:	31 d2                	xor    edx,edx
c002374c:	52                   	push   edx
c002374d:	50                   	push   eax
c002374e:	53                   	push   ebx
c002374f:	e8 66 6d ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023754:	83 c4 10             	add    esp,0x10
c0023757:	85 c0                	test   eax,eax
c0023759:	75 c8                	jne    c0023723 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c002375b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c002375f:	83 ec 0c             	sub    esp,0xc
c0023762:	31 ed                	xor    ebp,ebp
c0023764:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023768:	0f af c2             	imul   eax,edx
c002376b:	50                   	push   eax
c002376c:	e8 1e 2c ff ff       	call   c001638f <malloc>
c0023771:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023773:	89 34 24             	mov    DWORD PTR [esp],esi
c0023776:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002377a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002377e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023782:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023786:	0f af c2             	imul   eax,edx
c0023789:	99                   	cdq    
c002378a:	52                   	push   edx
c002378b:	50                   	push   eax
c002378c:	53                   	push   ebx
c002378d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023790:	83 c4 20             	add    esp,0x20
c0023793:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002379b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00237a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237b3:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00237b7:	0f b7 f5             	movzx  esi,bp
c00237ba:	0f 83 a7 00 00 00    	jae    c0023867 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00237c0:	6b f6 28             	imul   esi,esi,0x28
c00237c3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00237c7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00237ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00237ce:	50                   	push   eax
c00237cf:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00237d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00237d7:	8b 16                	mov    edx,DWORD PTR [esi]
c00237d9:	6b c0 28             	imul   eax,eax,0x28
c00237dc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00237e0:	89 d0                	mov    eax,edx
c00237e2:	31 d2                	xor    edx,edx
c00237e4:	52                   	push   edx
c00237e5:	50                   	push   eax
c00237e6:	53                   	push   ebx
c00237e7:	e8 ce 6c ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c00237ec:	83 c4 0c             	add    esp,0xc
c00237ef:	6a 20                	push   0x20
c00237f1:	6a 00                	push   0x0
c00237f3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00237f7:	52                   	push   edx
c00237f8:	e8 f3 cc fd ff       	call   c00004f0 <memset>
c00237fd:	58                   	pop    eax
c00237fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023800:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023804:	51                   	push   ecx
c0023805:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023809:	52                   	push   edx
c002380a:	6a 00                	push   0x0
c002380c:	6a 1f                	push   0x1f
c002380e:	53                   	push   ebx
c002380f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023812:	83 c4 18             	add    esp,0x18
c0023815:	68 b9 28 03 c0       	push   0xc00328b9
c002381a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c002381e:	52                   	push   edx
c002381f:	e8 5c cf fd ff       	call   c0000780 <strcmp>
c0023824:	83 c4 10             	add    esp,0x10
c0023827:	85 c0                	test   eax,eax
c0023829:	75 0f                	jne    c002383a <Thr::loadKernelSymbolTable(char const*)+0x185>
c002382b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002382e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023836:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002383a:	50                   	push   eax
c002383b:	50                   	push   eax
c002383c:	68 c1 28 03 c0       	push   0xc00328c1
c0023841:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023845:	50                   	push   eax
c0023846:	e8 35 cf fd ff       	call   c0000780 <strcmp>
c002384b:	83 c4 10             	add    esp,0x10
c002384e:	85 c0                	test   eax,eax
c0023850:	75 0f                	jne    c0023861 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023852:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023855:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002385d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023861:	45                   	inc    ebp
c0023862:	e9 4c ff ff ff       	jmp    c00237b3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023867:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002386c:	75 10                	jne    c002387e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c002386e:	83 ec 0c             	sub    esp,0xc
c0023871:	68 c9 28 03 c0       	push   0xc00328c9
c0023876:	e8 f8 c7 ff ff       	call   c0020073 <KePanic(char const*)>
c002387b:	83 c4 10             	add    esp,0x10
c002387e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023883:	75 10                	jne    c0023895 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023885:	83 ec 0c             	sub    esp,0xc
c0023888:	68 c9 28 03 c0       	push   0xc00328c9
c002388d:	e8 e1 c7 ff ff       	call   c0020073 <KePanic(char const*)>
c0023892:	83 c4 10             	add    esp,0x10
c0023895:	50                   	push   eax
c0023896:	31 d2                	xor    edx,edx
c0023898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002389c:	52                   	push   edx
c002389d:	50                   	push   eax
c002389e:	53                   	push   ebx
c002389f:	e8 16 6c ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c00238a4:	5a                   	pop    edx
c00238a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00238a9:	e8 e1 2a ff ff       	call   c001638f <malloc>
c00238ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00238b2:	31 c9                	xor    ecx,ecx
c00238b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00238b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00238ba:	5e                   	pop    esi
c00238bb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00238bf:	55                   	push   ebp
c00238c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238c4:	51                   	push   ecx
c00238c5:	52                   	push   edx
c00238c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00238ca:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00238ce:	53                   	push   ebx
c00238cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00238d2:	83 c4 14             	add    esp,0x14
c00238d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00238d9:	e8 b1 2a ff ff       	call   c001638f <malloc>
c00238de:	89 c6                	mov    esi,eax
c00238e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00238e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00238e5:	56                   	push   esi
c00238e6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00238ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00238ee:	51                   	push   ecx
c00238ef:	52                   	push   edx
c00238f0:	53                   	push   ebx
c00238f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00238f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238f8:	83 c4 1c             	add    esp,0x1c
c00238fb:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023901:	c1 e8 04             	shr    eax,0x4
c0023904:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c002390b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002390f:	31 d2                	xor    edx,edx
c0023911:	52                   	push   edx
c0023912:	50                   	push   eax
c0023913:	53                   	push   ebx
c0023914:	e8 a1 6b ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023919:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002391b:	31 d2                	xor    edx,edx
c002391d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023920:	56                   	push   esi
c0023921:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023925:	52                   	push   edx
c0023926:	50                   	push   eax
c0023927:	53                   	push   ebx
c0023928:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002392b:	83 c4 14             	add    esp,0x14
c002392e:	53                   	push   ebx
c002392f:	e8 26 6b ff ff       	call   c001a45a <File::close()>
c0023934:	5d                   	pop    ebp
c0023935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023939:	e8 61 2a ff ff       	call   c001639f <free>
c002393e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023941:	e8 59 2a ff ff       	call   c001639f <free>
c0023946:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c002394b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002394f:	83 c4 10             	add    esp,0x10
c0023952:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023959:	8d 50 01             	lea    edx,[eax+0x1]
c002395c:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023963:	b0 01                	mov    al,0x1
c0023965:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c002396b:	83 c4 5c             	add    esp,0x5c
c002396e:	5b                   	pop    ebx
c002396f:	5e                   	pop    esi
c0023970:	5f                   	pop    edi
c0023971:	5d                   	pop    ebp
c0023972:	c3                   	ret    

c0023973 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023973:	55                   	push   ebp
c0023974:	57                   	push   edi
c0023975:	56                   	push   esi
c0023976:	53                   	push   ebx
c0023977:	81 ec 68 03 00 00    	sub    esp,0x368
c002397d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023984:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c002398a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002398e:	68 14 01 00 00       	push   0x114
c0023993:	e8 f7 29 ff ff       	call   c001638f <malloc>
c0023998:	83 c4 0c             	add    esp,0xc
c002399b:	56                   	push   esi
c002399c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00239a3:	50                   	push   eax
c00239a4:	89 c3                	mov    ebx,eax
c00239a6:	e8 33 6a ff ff       	call   c001a3de <File::File(char const*, Process*)>
c00239ab:	5f                   	pop    edi
c00239ac:	5d                   	pop    ebp
c00239ad:	6a 01                	push   0x1
c00239af:	53                   	push   ebx
c00239b0:	e8 47 6a ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c00239b5:	83 c4 10             	add    esp,0x10
c00239b8:	85 c0                	test   eax,eax
c00239ba:	0f 85 b3 06 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00239c0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00239c8:	83 ec 0c             	sub    esp,0xc
c00239cb:	6a 34                	push   0x34
c00239cd:	e8 bd 29 ff ff       	call   c001638f <malloc>
c00239d2:	5e                   	pop    esi
c00239d3:	8d 74 24 54          	lea    esi,[esp+0x54]
c00239d7:	89 c5                	mov    ebp,eax
c00239d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239db:	56                   	push   esi
c00239dc:	55                   	push   ebp
c00239dd:	6a 00                	push   0x0
c00239df:	6a 34                	push   0x34
c00239e1:	53                   	push   ebx
c00239e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00239e5:	83 c4 20             	add    esp,0x20
c00239e8:	85 c0                	test   eax,eax
c00239ea:	0f 85 83 06 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00239f0:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00239f7:	0f 85 76 06 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00239fd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0023a00:	85 c0                	test   eax,eax
c0023a02:	0f 84 6b 06 00 00    	je     c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023a08:	31 d2                	xor    edx,edx
c0023a0a:	51                   	push   ecx
c0023a0b:	52                   	push   edx
c0023a0c:	50                   	push   eax
c0023a0d:	53                   	push   ebx
c0023a0e:	e8 a7 6a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023a13:	83 c4 10             	add    esp,0x10
c0023a16:	85 c0                	test   eax,eax
c0023a18:	0f 85 55 06 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023a1e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0023a21:	83 ec 0c             	sub    esp,0xc
c0023a24:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0023a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023a2c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0023a30:	0f af c2             	imul   eax,edx
c0023a33:	50                   	push   eax
c0023a34:	e8 56 29 ff ff       	call   c001638f <malloc>
c0023a39:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0023a3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023a46:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0023a4a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0023a4e:	0f af c2             	imul   eax,edx
c0023a51:	99                   	cdq    
c0023a52:	52                   	push   edx
c0023a53:	50                   	push   eax
c0023a54:	53                   	push   ebx
c0023a55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023a58:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0023a5b:	83 c4 20             	add    esp,0x20
c0023a5e:	85 c0                	test   eax,eax
c0023a60:	0f 84 0d 06 00 00    	je     c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023a66:	52                   	push   edx
c0023a67:	31 d2                	xor    edx,edx
c0023a69:	52                   	push   edx
c0023a6a:	50                   	push   eax
c0023a6b:	53                   	push   ebx
c0023a6c:	e8 49 6a ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023a71:	83 c4 10             	add    esp,0x10
c0023a74:	85 c0                	test   eax,eax
c0023a76:	0f 85 f7 05 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023a7c:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0023a80:	83 ec 0c             	sub    esp,0xc
c0023a83:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0023a87:	0f af c2             	imul   eax,edx
c0023a8a:	50                   	push   eax
c0023a8b:	e8 ff 28 ff ff       	call   c001638f <malloc>
c0023a90:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023a92:	89 34 24             	mov    DWORD PTR [esp],esi
c0023a95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023a99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a9d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0023aa1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0023aa5:	0f af c2             	imul   eax,edx
c0023aa8:	99                   	cdq    
c0023aa9:	52                   	push   edx
c0023aaa:	50                   	push   eax
c0023aab:	53                   	push   ebx
c0023aac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023aaf:	83 c4 20             	add    esp,0x20
c0023ab2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0023ab8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023abb:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0023abf:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0023ac3:	73 78                	jae    c0023b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0023ac5:	c1 e7 05             	shl    edi,0x5
c0023ac8:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0023acc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023acf:	75 63                	jne    c0023b34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0023ad1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023ad4:	31 d2                	xor    edx,edx
c0023ad6:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0023ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023add:	50                   	push   eax
c0023ade:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023ae1:	52                   	push   edx
c0023ae2:	50                   	push   eax
c0023ae3:	53                   	push   ebx
c0023ae4:	e8 d1 69 ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023ae9:	83 c4 10             	add    esp,0x10
c0023aec:	85 c0                	test   eax,eax
c0023aee:	0f 85 7f 05 00 00    	jne    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023af4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0023afb:	83 ec 0c             	sub    esp,0xc
c0023afe:	31 d2                	xor    edx,edx
c0023b00:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0023b04:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023b06:	01 c6                	add    esi,eax
c0023b08:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023b0f:	50                   	push   eax
c0023b10:	56                   	push   esi
c0023b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b15:	52                   	push   edx
c0023b16:	50                   	push   eax
c0023b17:	53                   	push   ebx
c0023b18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b1b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023b1e:	83 c4 1c             	add    esp,0x1c
c0023b21:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023b24:	50                   	push   eax
c0023b25:	6a 00                	push   0x0
c0023b27:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0023b2b:	56                   	push   esi
c0023b2c:	e8 bf c9 fd ff       	call   c00004f0 <memset>
c0023b31:	83 c4 10             	add    esp,0x10
c0023b34:	66 ff 04 24          	inc    WORD PTR [esp]
c0023b38:	e9 7b ff ff ff       	jmp    c0023ab8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0023b3d:	50                   	push   eax
c0023b3e:	68 00 01 00 00       	push   0x100
c0023b43:	6a 00                	push   0x0
c0023b45:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0023b49:	50                   	push   eax
c0023b4a:	e8 a1 c9 fd ff       	call   c00004f0 <memset>
c0023b4f:	83 c4 0c             	add    esp,0xc
c0023b52:	68 00 01 00 00       	push   0x100
c0023b57:	6a 00                	push   0x0
c0023b59:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0023b60:	50                   	push   eax
c0023b61:	e8 8a c9 fd ff       	call   c00004f0 <memset>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0023b70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0023b77:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023b7f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0023b87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023b8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0023b97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b9b:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0023b9f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0023ba4:	0f 83 16 01 00 00    	jae    c0023cc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0023baa:	6b ff 28             	imul   edi,edi,0x28
c0023bad:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0023bb1:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0023bb4:	51                   	push   ecx
c0023bb5:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0023bb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bbd:	8b 07                	mov    eax,DWORD PTR [edi]
c0023bbf:	6b d2 28             	imul   edx,edx,0x28
c0023bc2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0023bc6:	31 d2                	xor    edx,edx
c0023bc8:	52                   	push   edx
c0023bc9:	50                   	push   eax
c0023bca:	53                   	push   ebx
c0023bcb:	e8 ea 68 ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023bd0:	83 c4 0c             	add    esp,0xc
c0023bd3:	6a 20                	push   0x20
c0023bd5:	6a 00                	push   0x0
c0023bd7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023bde:	51                   	push   ecx
c0023bdf:	e8 0c c9 fd ff       	call   c00004f0 <memset>
c0023be4:	58                   	pop    eax
c0023be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023be7:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023beb:	52                   	push   edx
c0023bec:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0023bf3:	51                   	push   ecx
c0023bf4:	6a 00                	push   0x0
c0023bf6:	6a 1f                	push   0x1f
c0023bf8:	53                   	push   ebx
c0023bf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023bfc:	83 c4 1c             	add    esp,0x1c
c0023bff:	6a 09                	push   0x9
c0023c01:	68 e3 28 03 c0       	push   0xc00328e3
c0023c06:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023c0d:	51                   	push   ecx
c0023c0e:	e8 6d c7 fd ff       	call   c0000380 <memcmp>
c0023c13:	83 c4 10             	add    esp,0x10
c0023c16:	85 c0                	test   eax,eax
c0023c18:	75 1a                	jne    c0023c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0023c1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023c1d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023c20:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0023c24:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023c27:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0023c2e:	89 d0                	mov    eax,edx
c0023c30:	40                   	inc    eax
c0023c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c34:	52                   	push   edx
c0023c35:	6a 09                	push   0x9
c0023c37:	68 ed 28 03 c0       	push   0xc00328ed
c0023c3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023c43:	50                   	push   eax
c0023c44:	e8 37 c7 fd ff       	call   c0000380 <memcmp>
c0023c49:	83 c4 10             	add    esp,0x10
c0023c4c:	85 c0                	test   eax,eax
c0023c4e:	75 1a                	jne    c0023c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0023c50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023c53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0023c56:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0023c5a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023c5d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0023c64:	89 c8                	mov    eax,ecx
c0023c66:	40                   	inc    eax
c0023c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c6a:	50                   	push   eax
c0023c6b:	50                   	push   eax
c0023c6c:	68 b9 28 03 c0       	push   0xc00328b9
c0023c71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023c78:	50                   	push   eax
c0023c79:	e8 02 cb fd ff       	call   c0000780 <strcmp>
c0023c7e:	83 c4 10             	add    esp,0x10
c0023c81:	85 c0                	test   eax,eax
c0023c83:	75 0b                	jne    c0023c90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0023c85:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0023c89:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c90:	50                   	push   eax
c0023c91:	50                   	push   eax
c0023c92:	68 c1 28 03 c0       	push   0xc00328c1
c0023c97:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023c9e:	50                   	push   eax
c0023c9f:	e8 dc ca fd ff       	call   c0000780 <strcmp>
c0023ca4:	83 c4 10             	add    esp,0x10
c0023ca7:	85 c0                	test   eax,eax
c0023ca9:	75 0b                	jne    c0023cb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0023cab:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0023caf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023cb6:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0023cbb:	e9 d7 fe ff ff       	jmp    c0023b97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0023cc0:	50                   	push   eax
c0023cc1:	31 d2                	xor    edx,edx
c0023cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023cc7:	52                   	push   edx
c0023cc8:	50                   	push   eax
c0023cc9:	53                   	push   ebx
c0023cca:	e8 eb 67 ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023ccf:	58                   	pop    eax
c0023cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023cd4:	e8 b6 26 ff ff       	call   c001638f <malloc>
c0023cd9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023cdb:	31 d2                	xor    edx,edx
c0023cdd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0023ce1:	58                   	pop    eax
c0023ce2:	8d 74 24 54          	lea    esi,[esp+0x54]
c0023ce6:	56                   	push   esi
c0023ce7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0023ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023cef:	52                   	push   edx
c0023cf0:	50                   	push   eax
c0023cf1:	53                   	push   ebx
c0023cf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023cf5:	83 c4 14             	add    esp,0x14
c0023cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cfc:	e8 8e 26 ff ff       	call   c001638f <malloc>
c0023d01:	31 d2                	xor    edx,edx
c0023d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023d07:	83 c4 0c             	add    esp,0xc
c0023d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d0e:	52                   	push   edx
c0023d0f:	50                   	push   eax
c0023d10:	53                   	push   ebx
c0023d11:	e8 a4 67 ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023d16:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d18:	31 d2                	xor    edx,edx
c0023d1a:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023d21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d25:	52                   	push   edx
c0023d26:	50                   	push   eax
c0023d27:	53                   	push   ebx
c0023d28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d2b:	83 c4 20             	add    esp,0x20
c0023d2e:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0023d33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023d3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023d3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023d43:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023d46:	0f 84 2b 03 00 00    	je     c0024077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0023d4c:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0023d53:	31 d2                	xor    edx,edx
c0023d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023d59:	c1 e8 03             	shr    eax,0x3
c0023d5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0023d60:	51                   	push   ecx
c0023d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d65:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0023d69:	52                   	push   edx
c0023d6a:	50                   	push   eax
c0023d6b:	53                   	push   ebx
c0023d6c:	e8 49 67 ff ff       	call   c001a4ba <File::seek(unsigned long long)>
c0023d71:	5e                   	pop    esi
c0023d72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d76:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0023d7d:	e8 0d 26 ff ff       	call   c001638f <malloc>
c0023d82:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d84:	31 d2                	xor    edx,edx
c0023d86:	89 c7                	mov    edi,eax
c0023d88:	58                   	pop    eax
c0023d89:	8d 44 24 58          	lea    eax,[esp+0x58]
c0023d8d:	50                   	push   eax
c0023d8e:	57                   	push   edi
c0023d8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d93:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0023d9a:	52                   	push   edx
c0023d9b:	50                   	push   eax
c0023d9c:	53                   	push   ebx
c0023d9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023da0:	83 c4 20             	add    esp,0x20
c0023da3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0023dab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0023daf:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0023db3:	0f 8d a5 02 00 00    	jge    c002405e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0023db9:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0023dbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dc2:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0023dc5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dcd:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0023dd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023dd5:	c1 e8 08             	shr    eax,0x8
c0023dd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023ddc:	89 c2                	mov    edx,eax
c0023dde:	c1 e2 04             	shl    edx,0x4
c0023de1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0023de5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0023de8:	85 f6                	test   esi,esi
c0023dea:	0f 85 cf 00 00 00    	jne    c0023ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0023df0:	83 ec 0c             	sub    esp,0xc
c0023df3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0023df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023dfb:	03 02                	add    eax,DWORD PTR [edx]
c0023dfd:	50                   	push   eax
c0023dfe:	e8 63 f8 ff ff       	call   c0023666 <Thr::getAddressOfKernelSymbol(char const*)>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023e0a:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0023e0f:	85 c0                	test   eax,eax
c0023e11:	89 c6                	mov    esi,eax
c0023e13:	0f 85 a6 00 00 00    	jne    c0023ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0023e19:	83 ec 0c             	sub    esp,0xc
c0023e1c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0023e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023e24:	03 02                	add    eax,DWORD PTR [edx]
c0023e26:	50                   	push   eax
c0023e27:	e8 30 c4 ff ff       	call   c002025c <KeResolveCompatibilitySymbol(char*)>
c0023e2c:	83 c4 10             	add    esp,0x10
c0023e2f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023e33:	85 c0                	test   eax,eax
c0023e35:	89 c6                	mov    esi,eax
c0023e37:	0f 85 82 00 00 00    	jne    c0023ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0023e3d:	50                   	push   eax
c0023e3e:	50                   	push   eax
c0023e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e43:	03 02                	add    eax,DWORD PTR [edx]
c0023e45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023e49:	50                   	push   eax
c0023e4a:	68 f7 28 03 c0       	push   0xc00328f7
c0023e4f:	e8 72 53 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0023e54:	58                   	pop    eax
c0023e55:	5a                   	pop    edx
c0023e56:	68 11 29 03 c0       	push   0xc0032911
c0023e5b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023e62:	51                   	push   ecx
c0023e63:	e8 e8 c7 fd ff       	call   c0000650 <strcpy>
c0023e68:	59                   	pop    ecx
c0023e69:	58                   	pop    eax
c0023e6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e72:	03 02                	add    eax,DWORD PTR [edx]
c0023e74:	50                   	push   eax
c0023e75:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023e7c:	51                   	push   ecx
c0023e7d:	e8 ee c9 fd ff       	call   c0000870 <strcat>
c0023e82:	58                   	pop    eax
c0023e83:	5a                   	pop    edx
c0023e84:	68 ab 29 03 c0       	push   0xc00329ab
c0023e89:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023e90:	51                   	push   ecx
c0023e91:	e8 da c9 fd ff       	call   c0000870 <strcat>
c0023e96:	83 c4 10             	add    esp,0x10
c0023e99:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0023e9e:	0f 84 77 01 00 00    	je     c002401b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0023ea4:	83 ec 0c             	sub    esp,0xc
c0023ea7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023eae:	51                   	push   ecx
c0023eaf:	e8 bf c1 ff ff       	call   c0020073 <KePanic(char const*)>
c0023eb4:	83 c4 10             	add    esp,0x10
c0023eb7:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0023ebb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ebf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023ec4:	83 f8 01             	cmp    eax,0x1
c0023ec7:	0f 85 9b 00 00 00    	jne    c0023f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0023ecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ed1:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0023ed8:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0023edc:	01 d0                	add    eax,edx
c0023ede:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0023ee6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023eea:	0f 94 c0             	sete   al
c0023eed:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0023ef5:	0f 94 c1             	sete   cl
c0023ef8:	09 c1                	or     ecx,eax
c0023efa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023efe:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0023f03:	0f b6 c9             	movzx  ecx,cl
c0023f06:	8b 00                	mov    eax,DWORD PTR [eax]
c0023f08:	74 41                	je     c0023f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0023f0a:	8d 14 06             	lea    edx,[esi+eax*1]
c0023f0d:	85 c9                	test   ecx,ecx
c0023f0f:	75 15                	jne    c0023f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0023f11:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0023f15:	66 83 f8 0c          	cmp    ax,0xc
c0023f19:	76 05                	jbe    c0023f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0023f1b:	b8 0c 00 00 00       	mov    eax,0xc
c0023f20:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0023f24:	76 37                	jbe    c0023f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0023f26:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0023f2b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023f2f:	0f 84 e6 00 00 00    	je     c002401b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0023f35:	83 ec 0c             	sub    esp,0xc
c0023f38:	68 28 29 03 c0       	push   0xc0032928
c0023f3d:	e8 31 c1 ff ff       	call   c0020073 <KePanic(char const*)>
c0023f42:	83 c4 10             	add    esp,0x10
c0023f45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f49:	eb 12                	jmp    c0023f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0023f4b:	01 c2                	add    edx,eax
c0023f4d:	85 c9                	test   ecx,ecx
c0023f4f:	75 0c                	jne    c0023f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0023f51:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0023f55:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0023f59:	77 02                	ja     c0023f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0023f5b:	01 f2                	add    edx,esi
c0023f5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f61:	89 10                	mov    DWORD PTR [eax],edx
c0023f63:	e9 ed 00 00 00       	jmp    c0024055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0023f68:	83 f8 02             	cmp    eax,0x2
c0023f6b:	0f 85 81 00 00 00    	jne    c0023ff2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0023f71:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0023f78:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0023f7c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0023f80:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0023f88:	74 21                	je     c0023fab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0023f8a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0023f92:	74 17                	je     c0023fab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0023f94:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0023f98:	ba 0a 00 00 00       	mov    edx,0xa
c0023f9d:	83 f9 0e             	cmp    ecx,0xe
c0023fa0:	77 03                	ja     c0023fa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0023fa2:	8d 51 fc             	lea    edx,[ecx-0x4]
c0023fa5:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0023fa9:	76 1f                	jbe    c0023fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0023fab:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0023fb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023fb4:	74 65                	je     c002401b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0023fb6:	83 ec 0c             	sub    esp,0xc
c0023fb9:	68 44 29 03 c0       	push   0xc0032944
c0023fbe:	e8 b0 c0 ff ff       	call   c0020073 <KePanic(char const*)>
c0023fc3:	83 c4 10             	add    esp,0x10
c0023fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fca:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0023fcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fd1:	74 15                	je     c0023fe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0023fd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0023fd7:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0023fde:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0023fe2:	01 d1                	add    ecx,edx
c0023fe4:	01 ce                	add    esi,ecx
c0023fe6:	eb 06                	jmp    c0023fee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0023fe8:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0023fec:	01 d6                	add    esi,edx
c0023fee:	89 30                	mov    DWORD PTR [eax],esi
c0023ff0:	eb 63                	jmp    c0024055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0023ff2:	56                   	push   esi
c0023ff3:	56                   	push   esi
c0023ff4:	50                   	push   eax
c0023ff5:	68 60 29 03 c0       	push   0xc0032960
c0023ffa:	e8 c7 51 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0023fff:	83 c4 10             	add    esp,0x10
c0024002:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024007:	74 12                	je     c002401b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024009:	83 ec 0c             	sub    esp,0xc
c002400c:	68 6b 29 03 c0       	push   0xc003296b
c0024011:	e8 5d c0 ff ff       	call   c0020073 <KePanic(char const*)>
c0024016:	83 c4 10             	add    esp,0x10
c0024019:	eb 3a                	jmp    c0024055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002401b:	83 ec 0c             	sub    esp,0xc
c002401e:	53                   	push   ebx
c002401f:	e8 36 64 ff ff       	call   c001a45a <File::close()>
c0024024:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024029:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002402c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002402f:	e8 6b 23 ff ff       	call   c001639f <free>
c0024034:	59                   	pop    ecx
c0024035:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024039:	e8 61 23 ff ff       	call   c001639f <free>
c002403e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024041:	e8 59 23 ff ff       	call   c001639f <free>
c0024046:	5b                   	pop    ebx
c0024047:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002404b:	e8 4f 23 ff ff       	call   c001639f <free>
c0024050:	83 c4 10             	add    esp,0x10
c0024053:	eb 1e                	jmp    c0024073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024055:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0024059:	e9 4d fd ff ff       	jmp    c0023dab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c002405e:	83 ec 0c             	sub    esp,0xc
c0024061:	57                   	push   edi
c0024062:	e8 38 23 ff ff       	call   c001639f <free>
c0024067:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c002406b:	83 c4 10             	add    esp,0x10
c002406e:	e9 cc fc ff ff       	jmp    c0023d3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024073:	31 c0                	xor    eax,eax
c0024075:	eb 32                	jmp    c00240a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0024077:	83 ec 0c             	sub    esp,0xc
c002407a:	53                   	push   ebx
c002407b:	e8 da 63 ff ff       	call   c001a45a <File::close()>
c0024080:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024082:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024085:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024088:	58                   	pop    eax
c0024089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002408d:	e8 0d 23 ff ff       	call   c001639f <free>
c0024092:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024095:	e8 05 23 ff ff       	call   c001639f <free>
c002409a:	5a                   	pop    edx
c002409b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002409f:	e8 fb 22 ff ff       	call   c001639f <free>
c00240a4:	83 c4 10             	add    esp,0x10
c00240a7:	b0 01                	mov    al,0x1
c00240a9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00240af:	5b                   	pop    ebx
c00240b0:	5e                   	pop    esi
c00240b1:	5f                   	pop    edi
c00240b2:	5d                   	pop    ebp
c00240b3:	c3                   	ret    

c00240b4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00240b4:	56                   	push   esi
c00240b5:	31 d2                	xor    edx,edx
c00240b7:	53                   	push   ebx
c00240b8:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00240be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00240c2:	39 d3                	cmp    ebx,edx
c00240c4:	7e 1b                	jle    c00240e1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00240c6:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c00240cd:	39 c8                	cmp    eax,ecx
c00240cf:	77 0d                	ja     c00240de <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00240d1:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00240d8:	01 c6                	add    esi,eax
c00240da:	39 ce                	cmp    esi,ecx
c00240dc:	77 05                	ja     c00240e3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00240de:	42                   	inc    edx
c00240df:	eb e1                	jmp    c00240c2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00240e1:	31 c0                	xor    eax,eax
c00240e3:	5b                   	pop    ebx
c00240e4:	5e                   	pop    esi
c00240e5:	c3                   	ret    

c00240e6 <Thr::getDriverNameFromAddress(unsigned long)>:
c00240e6:	53                   	push   ebx
c00240e7:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00240ed:	31 c0                	xor    eax,eax
c00240ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240f3:	39 c3                	cmp    ebx,eax
c00240f5:	7e 22                	jle    c0024119 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00240f7:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00240fe:	39 ca                	cmp    edx,ecx
c0024100:	77 14                	ja     c0024116 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024102:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c0024109:	39 ca                	cmp    edx,ecx
c002410b:	76 09                	jbe    c0024116 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c002410d:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024114:	eb 05                	jmp    c002411b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024116:	40                   	inc    eax
c0024117:	eb da                	jmp    c00240f3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024119:	31 c0                	xor    eax,eax
c002411b:	5b                   	pop    ebx
c002411c:	c3                   	ret    

c002411d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c002411d:	53                   	push   ebx
c002411e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024122:	53                   	push   ebx
c0024123:	e8 8c ff ff ff       	call   c00240b4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024128:	5a                   	pop    edx
c0024129:	31 d2                	xor    edx,edx
c002412b:	85 c0                	test   eax,eax
c002412d:	74 04                	je     c0024133 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c002412f:	89 da                	mov    edx,ebx
c0024131:	29 c2                	sub    edx,eax
c0024133:	5b                   	pop    ebx
c0024134:	89 d0                	mov    eax,edx
c0024136:	c3                   	ret    

c0024137 <Thr::loadDLL(char const*, bool)>:
c0024137:	55                   	push   ebp
c0024138:	57                   	push   edi
c0024139:	56                   	push   esi
c002413a:	53                   	push   ebx
c002413b:	81 ec 34 01 00 00    	sub    esp,0x134
c0024141:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024148:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c002414f:	56                   	push   esi
c0024150:	68 83 29 03 c0       	push   0xc0032983
c0024155:	e8 6c 50 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002415a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024161:	e8 29 22 ff ff       	call   c001638f <malloc>
c0024166:	83 c4 0c             	add    esp,0xc
c0024169:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002416f:	56                   	push   esi
c0024170:	50                   	push   eax
c0024171:	89 c3                	mov    ebx,eax
c0024173:	e8 66 62 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0024178:	83 c4 10             	add    esp,0x10
c002417b:	85 db                	test   ebx,ebx
c002417d:	75 3c                	jne    c00241bb <Thr::loadDLL(char const*, bool)+0x84>
c002417f:	89 e8                	mov    eax,ebp
c0024181:	84 c0                	test   al,al
c0024183:	0f 84 02 02 00 00    	je     c002438b <Thr::loadDLL(char const*, bool)+0x254>
c0024189:	50                   	push   eax
c002418a:	50                   	push   eax
c002418b:	68 94 29 03 c0       	push   0xc0032994
c0024190:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024194:	57                   	push   edi
c0024195:	e8 b6 c4 fd ff       	call   c0000650 <strcpy>
c002419a:	58                   	pop    eax
c002419b:	5a                   	pop    edx
c002419c:	56                   	push   esi
c002419d:	57                   	push   edi
c002419e:	e8 cd c6 fd ff       	call   c0000870 <strcat>
c00241a3:	59                   	pop    ecx
c00241a4:	58                   	pop    eax
c00241a5:	68 ab 29 03 c0       	push   0xc00329ab
c00241aa:	57                   	push   edi
c00241ab:	e8 c0 c6 fd ff       	call   c0000870 <strcat>
c00241b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00241b3:	e8 bb be ff ff       	call   c0020073 <KePanic(char const*)>
c00241b8:	83 c4 10             	add    esp,0x10
c00241bb:	50                   	push   eax
c00241bc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00241c0:	50                   	push   eax
c00241c1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00241c5:	50                   	push   eax
c00241c6:	53                   	push   ebx
c00241c7:	e8 32 65 ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c00241cc:	83 c4 10             	add    esp,0x10
c00241cf:	85 db                	test   ebx,ebx
c00241d1:	89 c7                	mov    edi,eax
c00241d3:	74 0c                	je     c00241e1 <Thr::loadDLL(char const*, bool)+0xaa>
c00241d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241d7:	83 ec 0c             	sub    esp,0xc
c00241da:	53                   	push   ebx
c00241db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00241de:	83 c4 10             	add    esp,0x10
c00241e1:	83 ec 0c             	sub    esp,0xc
c00241e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00241e9:	50                   	push   eax
c00241ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241f2:	57                   	push   edi
c00241f3:	68 ad 29 03 c0       	push   0xc00329ad
c00241f8:	e8 c9 4f ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00241fd:	83 c4 20             	add    esp,0x20
c0024200:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024205:	75 0a                	jne    c0024211 <Thr::loadDLL(char const*, bool)+0xda>
c0024207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002420b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c002420f:	75 3e                	jne    c002424f <Thr::loadDLL(char const*, bool)+0x118>
c0024211:	89 e8                	mov    eax,ebp
c0024213:	31 db                	xor    ebx,ebx
c0024215:	84 c0                	test   al,al
c0024217:	0f 84 6e 01 00 00    	je     c002438b <Thr::loadDLL(char const*, bool)+0x254>
c002421d:	50                   	push   eax
c002421e:	50                   	push   eax
c002421f:	68 ce 29 03 c0       	push   0xc00329ce
c0024224:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024228:	53                   	push   ebx
c0024229:	e8 22 c4 fd ff       	call   c0000650 <strcpy>
c002422e:	58                   	pop    eax
c002422f:	5a                   	pop    edx
c0024230:	56                   	push   esi
c0024231:	53                   	push   ebx
c0024232:	e8 39 c6 fd ff       	call   c0000870 <strcat>
c0024237:	59                   	pop    ecx
c0024238:	5f                   	pop    edi
c0024239:	68 ab 29 03 c0       	push   0xc00329ab
c002423e:	53                   	push   ebx
c002423f:	e8 2c c6 fd ff       	call   c0000870 <strcat>
c0024244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024247:	e8 27 be ff ff       	call   c0020073 <KePanic(char const*)>
c002424c:	83 c4 10             	add    esp,0x10
c002424f:	53                   	push   ebx
c0024250:	6a 03                	push   0x3
c0024252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024256:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002425a:	05 ff 0f 00 00       	add    eax,0xfff
c002425f:	83 d2 00             	adc    edx,0x0
c0024262:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024266:	50                   	push   eax
c0024267:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002426d:	e8 50 44 ff ff       	call   c00186c2 <VAS::allocatePages(int, int)>
c0024272:	89 c3                	mov    ebx,eax
c0024274:	58                   	pop    eax
c0024275:	5a                   	pop    edx
c0024276:	53                   	push   ebx
c0024277:	68 22 0e 03 c0       	push   0xc0030e22
c002427c:	e8 45 4f ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0024281:	89 34 24             	mov    DWORD PTR [esp],esi
c0024284:	e8 f7 c2 fd ff       	call   c0000580 <strlen>
c0024289:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c002428f:	40                   	inc    eax
c0024290:	89 04 24             	mov    DWORD PTR [esp],eax
c0024293:	e8 f7 20 ff ff       	call   c001638f <malloc>
c0024298:	59                   	pop    ecx
c0024299:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c00242a0:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c00242a5:	5f                   	pop    edi
c00242a6:	56                   	push   esi
c00242a7:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c00242ae:	e8 9d c3 fd ff       	call   c0000650 <strcpy>
c00242b3:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c00242b8:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c00242bf:	8d 50 01             	lea    edx,[eax+0x1]
c00242c2:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c00242c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00242cc:	83 c4 0c             	add    esp,0xc
c00242cf:	6a 01                	push   0x1
c00242d1:	53                   	push   ebx
c00242d2:	56                   	push   esi
c00242d3:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00242da:	e8 94 f6 ff ff       	call   c0023973 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00242df:	83 c4 10             	add    esp,0x10
c00242e2:	89 c7                	mov    edi,eax
c00242e4:	89 f8                	mov    eax,edi
c00242e6:	83 f0 01             	xor    eax,0x1
c00242e9:	84 c0                	test   al,al
c00242eb:	74 18                	je     c0024305 <Thr::loadDLL(char const*, bool)+0x1ce>
c00242ed:	89 e8                	mov    eax,ebp
c00242ef:	84 c0                	test   al,al
c00242f1:	74 12                	je     c0024305 <Thr::loadDLL(char const*, bool)+0x1ce>
c00242f3:	83 ec 0c             	sub    esp,0xc
c00242f6:	68 e7 29 03 c0       	push   0xc00329e7
c00242fb:	e8 73 bd ff ff       	call   c0020073 <KePanic(char const*)>
c0024300:	83 c4 10             	add    esp,0x10
c0024303:	eb 06                	jmp    c002430b <Thr::loadDLL(char const*, bool)+0x1d4>
c0024305:	89 f8                	mov    eax,edi
c0024307:	84 c0                	test   al,al
c0024309:	75 10                	jne    c002431b <Thr::loadDLL(char const*, bool)+0x1e4>
c002430b:	83 ec 0c             	sub    esp,0xc
c002430e:	68 06 2a 03 c0       	push   0xc0032a06
c0024313:	e8 5b bd ff ff       	call   c0020073 <KePanic(char const*)>
c0024318:	83 c4 10             	add    esp,0x10
c002431b:	31 f6                	xor    esi,esi
c002431d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024321:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024325:	05 ff 0f 00 00       	add    eax,0xfff
c002432a:	83 d2 00             	adc    edx,0x0
c002432d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024335:	c1 ea 0c             	shr    edx,0xc
c0024338:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002433c:	ba 00 00 00 00       	mov    edx,0x0
c0024341:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024345:	89 d0                	mov    eax,edx
c0024347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c002434b:	73 32                	jae    c002437f <Thr::loadDLL(char const*, bool)+0x248>
c002434d:	50                   	push   eax
c002434e:	50                   	push   eax
c002434f:	89 f0                	mov    eax,esi
c0024351:	c1 e0 0c             	shl    eax,0xc
c0024354:	01 d8                	add    eax,ebx
c0024356:	50                   	push   eax
c0024357:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002435d:	e8 44 3e ff ff       	call   c00181a6 <VAS::getPageTableEntry(unsigned long)>
c0024362:	83 c4 10             	add    esp,0x10
c0024365:	8b 00                	mov    eax,DWORD PTR [eax]
c0024367:	a8 60                	test   al,0x60
c0024369:	75 11                	jne    c002437c <Thr::loadDLL(char const*, bool)+0x245>
c002436b:	83 ec 0c             	sub    esp,0xc
c002436e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024373:	50                   	push   eax
c0024374:	e8 bc 22 ff ff       	call   c0016635 <Phys::freePage(unsigned long)>
c0024379:	83 c4 10             	add    esp,0x10
c002437c:	46                   	inc    esi
c002437d:	eb 9e                	jmp    c002431d <Thr::loadDLL(char const*, bool)+0x1e6>
c002437f:	89 f8                	mov    eax,edi
c0024381:	84 c0                	test   al,al
c0024383:	b8 00 00 00 00       	mov    eax,0x0
c0024388:	0f 44 d8             	cmove  ebx,eax
c002438b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024391:	89 d8                	mov    eax,ebx
c0024393:	5b                   	pop    ebx
c0024394:	5e                   	pop    esi
c0024395:	5f                   	pop    edi
c0024396:	5d                   	pop    ebp
c0024397:	c3                   	ret    

c0024398 <Thr::executeDLL(unsigned long, void*)>:
c0024398:	56                   	push   esi
c0024399:	53                   	push   ebx
c002439a:	52                   	push   edx
c002439b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002439f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00243a3:	85 db                	test   ebx,ebx
c00243a5:	75 10                	jne    c00243b7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00243a7:	83 ec 0c             	sub    esp,0xc
c00243aa:	68 22 2a 03 c0       	push   0xc0032a22
c00243af:	e8 bf bc ff ff       	call   c0020073 <KePanic(char const*)>
c00243b4:	83 c4 10             	add    esp,0x10
c00243b7:	50                   	push   eax
c00243b8:	50                   	push   eax
c00243b9:	53                   	push   ebx
c00243ba:	68 4c 2a 03 c0       	push   0xc0032a4c
c00243bf:	e8 02 4e ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00243c4:	89 d8                	mov    eax,ebx
c00243c6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00243ca:	83 c4 14             	add    esp,0x14
c00243cd:	5b                   	pop    ebx
c00243ce:	5e                   	pop    esi
c00243cf:	ff e0                	jmp    eax
c00243d1:	66 90                	xchg   ax,ax
c00243d3:	90                   	nop

c00243d4 <userModeEntryPoint(void*)>:
c00243d4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00243d9:	83 e8 01             	sub    eax,0x1
c00243dc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00243e1:	75 01                	jne    c00243e4 <userModeEntryPoint(void*)+0x10>
c00243e3:	fb                   	sti    
c00243e4:	fb                   	sti    
c00243e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00243ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00243ed:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00243f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00243f7:	e9 43 be fd ff       	jmp    c000023f <goToUsermode>

c00243fc <changeTSS>:
c00243fc:	83 ec 14             	sub    esp,0x14
c00243ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024404:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024407:	b8 00 00 e8 01       	mov    eax,0x1e80000
c002440c:	c1 e2 15             	shl    edx,0x15
c002440f:	29 d0                	sub    eax,edx
c0024411:	50                   	push   eax
c0024412:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024417:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002441d:	05 7c 11 00 00       	add    eax,0x117c
c0024422:	50                   	push   eax
c0024423:	e8 d0 33 ff ff       	call   c00177f8 <TSS::setESP(unsigned long)>
c0024428:	83 c4 1c             	add    esp,0x1c
c002442b:	c3                   	ret    

c002442c <switchToThread(ThreadControlBlock*)>:
c002442c:	57                   	push   edi
c002442d:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024433:	56                   	push   esi
c0024434:	53                   	push   ebx
c0024435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024439:	85 c9                	test   ecx,ecx
c002443b:	0f 85 8b 00 00 00    	jne    c00244cc <switchToThread(ThreadControlBlock*)+0xa0>
c0024441:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024445:	81 fa ff 00 00 00    	cmp    edx,0xff
c002444b:	74 7b                	je     c00244c8 <switchToThread(ThreadControlBlock*)+0x9c>
c002444d:	b8 00 04 00 00       	mov    eax,0x400
c0024452:	29 d0                	sub    eax,edx
c0024454:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024457:	d1 f8                	sar    eax,1
c0024459:	01 d0                	add    eax,edx
c002445b:	90                   	nop
c002445c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c002445f:	e8 4c 28 00 00       	call   c0026cb0 <HalQueryPerformanceCounter()>
c0024464:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024469:	89 c6                	mov    esi,eax
c002446b:	89 d7                	mov    edi,edx
c002446d:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024473:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024478:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c002447e:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024484:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c002448a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024490:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024496:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c002449c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c002449f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00244a2:	01 c6                	add    esi,eax
c00244a4:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00244a7:	11 d7                	adc    edi,edx
c00244a9:	83 ec 0c             	sub    esp,0xc
c00244ac:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00244af:	53                   	push   ebx
c00244b0:	e8 c2 bd fd ff       	call   c0000277 <switchToThreadASM>
c00244b5:	0f 20 c0             	mov    eax,cr0
c00244b8:	83 c8 08             	or     eax,0x8
c00244bb:	0f 22 c0             	mov    cr0,eax
c00244be:	83 c4 10             	add    esp,0x10
c00244c1:	5b                   	pop    ebx
c00244c2:	5e                   	pop    esi
c00244c3:	5f                   	pop    edi
c00244c4:	c3                   	ret    
c00244c5:	8d 76 00             	lea    esi,[esi+0x0]
c00244c8:	31 c0                	xor    eax,eax
c00244ca:	eb 90                	jmp    c002445c <switchToThread(ThreadControlBlock*)+0x30>
c00244cc:	5b                   	pop    ebx
c00244cd:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00244d7:	5e                   	pop    esi
c00244d8:	5f                   	pop    edi
c00244d9:	c3                   	ret    
c00244da:	66 90                	xchg   ax,ax

c00244dc <Process::addArgs(char**)>:
c00244dc:	57                   	push   edi
c00244dd:	56                   	push   esi
c00244de:	53                   	push   ebx
c00244df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00244e3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00244e7:	85 f6                	test   esi,esi
c00244e9:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00244f3:	74 4f                	je     c0024544 <Process::addArgs(char**)+0x68>
c00244f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00244f7:	85 c0                	test   eax,eax
c00244f9:	74 49                	je     c0024544 <Process::addArgs(char**)+0x68>
c00244fb:	31 db                	xor    ebx,ebx
c00244fd:	8d 76 00             	lea    esi,[esi+0x0]
c0024500:	83 ec 0c             	sub    esp,0xc
c0024503:	50                   	push   eax
c0024504:	e8 77 c0 fd ff       	call   c0000580 <strlen>
c0024509:	83 c0 01             	add    eax,0x1
c002450c:	89 04 24             	mov    DWORD PTR [esp],eax
c002450f:	e8 7b 1e ff ff       	call   c001638f <malloc>
c0024514:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c002451b:	5a                   	pop    edx
c002451c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c002451f:	83 c3 01             	add    ebx,0x1
c0024522:	59                   	pop    ecx
c0024523:	52                   	push   edx
c0024524:	50                   	push   eax
c0024525:	e8 26 c1 fd ff       	call   c0000650 <strcpy>
c002452a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024530:	83 c4 10             	add    esp,0x10
c0024533:	83 c1 01             	add    ecx,0x1
c0024536:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c002453c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c002453f:	85 c0                	test   eax,eax
c0024541:	75 bd                	jne    c0024500 <Process::addArgs(char**)+0x24>
c0024543:	90                   	nop
c0024544:	5b                   	pop    ebx
c0024545:	5e                   	pop    esi
c0024546:	5f                   	pop    edi
c0024547:	c3                   	ret    

c0024548 <Process::Process(char const*, Process*, char**)>:
c0024548:	56                   	push   esi
c0024549:	53                   	push   ebx
c002454a:	83 ec 14             	sub    esp,0x14
c002454d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024551:	05 0c 02 00 00       	add    eax,0x20c
c0024556:	bb 07 00 00 00       	mov    ebx,0x7
c002455b:	89 c6                	mov    esi,eax
c002455d:	8d 76 00             	lea    esi,[esi+0x0]
c0024560:	85 db                	test   ebx,ebx
c0024562:	78 14                	js     c0024578 <Process::Process(char const*, Process*, char**)+0x30>
c0024564:	83 ec 0c             	sub    esp,0xc
c0024567:	56                   	push   esi
c0024568:	e8 ab a6 00 00       	call   c002ec18 <ThreadControlBlock::ThreadControlBlock()>
c002456d:	83 c4 10             	add    esp,0x10
c0024570:	83 c6 5f             	add    esi,0x5f
c0024573:	83 eb 01             	sub    ebx,0x1
c0024576:	eb e8                	jmp    c0024560 <Process::Process(char const*, Process*, char**)+0x18>
c0024578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002457c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024587:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002458e:	83 ec 0c             	sub    esp,0xc
c0024591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024595:	e8 ce b8 ff ff       	call   c001fe68 <KeNewProcessEnv(Process*)>
c002459a:	83 c4 10             	add    esp,0x10
c002459d:	89 c2                	mov    edx,eax
c002459f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245a3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00245a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245ad:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00245b6:	a1 80 40 03 c0       	mov    eax,ds:0xc0034080
c00245bb:	8d 50 01             	lea    edx,[eax+0x1]
c00245be:	89 15 80 40 03 c0    	mov    DWORD PTR ds:0xc0034080,edx
c00245c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00245c8:	89 02                	mov    DWORD PTR [edx],eax
c00245ca:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00245d2:	83 ec 0c             	sub    esp,0xc
c00245d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245d9:	e8 b1 1d ff ff       	call   c001638f <malloc>
c00245de:	83 c4 10             	add    esp,0x10
c00245e1:	89 c3                	mov    ebx,eax
c00245e3:	83 ec 08             	sub    esp,0x8
c00245e6:	6a 00                	push   0x0
c00245e8:	53                   	push   ebx
c00245e9:	e8 20 43 ff ff       	call   c001890e <VAS::VAS(bool)>
c00245ee:	83 c4 10             	add    esp,0x10
c00245f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245f5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00245fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245ff:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002460d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024611:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024617:	e8 6e be ff ff       	call   c002048a <KeInitSignals()>
c002461c:	89 c2                	mov    edx,eax
c002461e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024622:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002462c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024632:	85 c0                	test   eax,eax
c0024634:	74 42                	je     c0024678 <Process::Process(char const*, Process*, char**)+0x130>
c0024636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002463a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024640:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002464a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024654:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002465a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024664:	05 0c 01 00 00       	add    eax,0x10c
c0024669:	83 ec 08             	sub    esp,0x8
c002466c:	52                   	push   edx
c002466d:	50                   	push   eax
c002466e:	e8 dd bf fd ff       	call   c0000650 <strcpy>
c0024673:	83 c4 10             	add    esp,0x10
c0024676:	eb 64                	jmp    c00246dc <Process::Process(char const*, Process*, char**)+0x194>
c0024678:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024680:	83 ec 0c             	sub    esp,0xc
c0024683:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024687:	e8 03 1d ff ff       	call   c001638f <malloc>
c002468c:	83 c4 10             	add    esp,0x10
c002468f:	89 c3                	mov    ebx,eax
c0024691:	83 ec 08             	sub    esp,0x8
c0024694:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024698:	53                   	push   ebx
c0024699:	e8 8a 2e ff ff       	call   c0017528 <VgaText::VgaText(char const*)>
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00246ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00246b5:	83 ec 0c             	sub    esp,0xc
c00246b8:	50                   	push   eax
c00246b9:	e8 18 27 ff ff       	call   c0016dd6 <addToTerminalCycle(VgaText*)>
c00246be:	83 c4 10             	add    esp,0x10
c00246c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246c5:	05 0c 01 00 00       	add    eax,0x10c
c00246ca:	83 ec 08             	sub    esp,0x8
c00246cd:	68 6b 2a 03 c0       	push   0xc0032a6b
c00246d2:	50                   	push   eax
c00246d3:	e8 78 bf fd ff       	call   c0000650 <strcpy>
c00246d8:	83 c4 10             	add    esp,0x10
c00246db:	90                   	nop
c00246dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246e0:	83 c0 0c             	add    eax,0xc
c00246e3:	83 ec 08             	sub    esp,0x8
c00246e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00246ea:	50                   	push   eax
c00246eb:	e8 60 bf fd ff       	call   c0000650 <strcpy>
c00246f0:	83 c4 10             	add    esp,0x10
c00246f3:	83 ec 08             	sub    esp,0x8
c00246f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00246fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00246fe:	e8 d9 fd ff ff       	call   c00244dc <Process::addArgs(char**)>
c0024703:	83 c4 10             	add    esp,0x10
c0024706:	83 ec 08             	sub    esp,0x8
c0024709:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002470d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024711:	e8 1e ed ff ff       	call   c0023434 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024716:	83 c4 10             	add    esp,0x10
c0024719:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002471d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024721:	83 f0 01             	xor    eax,0x1
c0024724:	88 c2                	mov    dl,al
c0024726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002472a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024730:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024735:	83 ec 04             	sub    esp,0x4
c0024738:	50                   	push   eax
c0024739:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002473d:	68 c4 2a 03 c0       	push   0xc0032ac4
c0024742:	e8 7f 4a ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0024747:	83 c4 10             	add    esp,0x10
c002474a:	90                   	nop
c002474b:	83 c4 14             	add    esp,0x14
c002474e:	5b                   	pop    ebx
c002474f:	5e                   	pop    esi
c0024750:	c3                   	ret    
c0024751:	90                   	nop
c0024752:	66 90                	xchg   ax,ax

c0024754 <Process::Process(bool, char const*, Process*, char**)>:
c0024754:	56                   	push   esi
c0024755:	53                   	push   ebx
c0024756:	83 ec 24             	sub    esp,0x24
c0024759:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002475d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024765:	05 0c 02 00 00       	add    eax,0x20c
c002476a:	bb 07 00 00 00       	mov    ebx,0x7
c002476f:	89 c6                	mov    esi,eax
c0024771:	8d 76 00             	lea    esi,[esi+0x0]
c0024774:	85 db                	test   ebx,ebx
c0024776:	78 14                	js     c002478c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024778:	83 ec 0c             	sub    esp,0xc
c002477b:	56                   	push   esi
c002477c:	e8 97 a4 00 00       	call   c002ec18 <ThreadControlBlock::ThreadControlBlock()>
c0024781:	83 c4 10             	add    esp,0x10
c0024784:	83 c6 5f             	add    esi,0x5f
c0024787:	83 eb 01             	sub    ebx,0x1
c002478a:	eb e8                	jmp    c0024774 <Process::Process(bool, char const*, Process*, char**)+0x20>
c002478c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024790:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002479b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00247a2:	83 ec 0c             	sub    esp,0xc
c00247a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00247a9:	e8 ba b6 ff ff       	call   c001fe68 <KeNewProcessEnv(Process*)>
c00247ae:	83 c4 10             	add    esp,0x10
c00247b1:	89 c2                	mov    edx,eax
c00247b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247b7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00247bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247c1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00247ca:	a1 80 40 03 c0       	mov    eax,ds:0xc0034080
c00247cf:	8d 50 01             	lea    edx,[eax+0x1]
c00247d2:	89 15 80 40 03 c0    	mov    DWORD PTR ds:0xc0034080,edx
c00247d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00247dc:	89 02                	mov    DWORD PTR [edx],eax
c00247de:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00247e6:	83 ec 0c             	sub    esp,0xc
c00247e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00247ed:	e8 9d 1b ff ff       	call   c001638f <malloc>
c00247f2:	83 c4 10             	add    esp,0x10
c00247f5:	89 c3                	mov    ebx,eax
c00247f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00247fc:	83 ec 08             	sub    esp,0x8
c00247ff:	50                   	push   eax
c0024800:	53                   	push   ebx
c0024801:	e8 08 41 ff ff       	call   c001890e <VAS::VAS(bool)>
c0024806:	83 c4 10             	add    esp,0x10
c0024809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002480d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024817:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024825:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024829:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c002482f:	e8 56 bc ff ff       	call   c002048a <KeInitSignals()>
c0024834:	89 c2                	mov    edx,eax
c0024836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002483a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024844:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002484a:	85 c0                	test   eax,eax
c002484c:	74 42                	je     c0024890 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c002484e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024852:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024858:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c002485e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024862:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002486c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024872:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024878:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002487c:	05 0c 01 00 00       	add    eax,0x10c
c0024881:	83 ec 08             	sub    esp,0x8
c0024884:	52                   	push   edx
c0024885:	50                   	push   eax
c0024886:	e8 c5 bd fd ff       	call   c0000650 <strcpy>
c002488b:	83 c4 10             	add    esp,0x10
c002488e:	eb 64                	jmp    c00248f4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024890:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024898:	83 ec 0c             	sub    esp,0xc
c002489b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002489f:	e8 eb 1a ff ff       	call   c001638f <malloc>
c00248a4:	83 c4 10             	add    esp,0x10
c00248a7:	89 c3                	mov    ebx,eax
c00248a9:	83 ec 08             	sub    esp,0x8
c00248ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00248b0:	53                   	push   ebx
c00248b1:	e8 72 2c ff ff       	call   c0017528 <VgaText::VgaText(char const*)>
c00248b6:	83 c4 10             	add    esp,0x10
c00248b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00248bd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00248c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00248c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00248cd:	83 ec 0c             	sub    esp,0xc
c00248d0:	50                   	push   eax
c00248d1:	e8 00 25 ff ff       	call   c0016dd6 <addToTerminalCycle(VgaText*)>
c00248d6:	83 c4 10             	add    esp,0x10
c00248d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00248dd:	05 0c 01 00 00       	add    eax,0x10c
c00248e2:	83 ec 08             	sub    esp,0x8
c00248e5:	68 6b 2a 03 c0       	push   0xc0032a6b
c00248ea:	50                   	push   eax
c00248eb:	e8 60 bd fd ff       	call   c0000650 <strcpy>
c00248f0:	83 c4 10             	add    esp,0x10
c00248f3:	90                   	nop
c00248f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00248f8:	83 c0 0c             	add    eax,0xc
c00248fb:	83 ec 08             	sub    esp,0x8
c00248fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024902:	50                   	push   eax
c0024903:	e8 48 bd fd ff       	call   c0000650 <strcpy>
c0024908:	83 c4 10             	add    esp,0x10
c002490b:	83 ec 08             	sub    esp,0x8
c002490e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024912:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024916:	e8 c1 fb ff ff       	call   c00244dc <Process::addArgs(char**)>
c002491b:	83 c4 10             	add    esp,0x10
c002491e:	90                   	nop
c002491f:	83 c4 24             	add    esp,0x24
c0024922:	5b                   	pop    ebx
c0024923:	5e                   	pop    esi
c0024924:	c3                   	ret    
c0024925:	8d 76 00             	lea    esi,[esi+0x0]

c0024928 <taskStartupFunction>:
c0024928:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002492d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024930:	c3                   	ret    
c0024931:	90                   	nop
c0024932:	66 90                	xchg   ax,ax

c0024934 <Semaphore::Semaphore(int)>:
c0024934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024938:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002493c:	89 10                	mov    DWORD PTR [eax],edx
c002493e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024942:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0024949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002494d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0024954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024958:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002495f:	90                   	nop
c0024960:	c3                   	ret    
c0024961:	90                   	nop
c0024962:	66 90                	xchg   ax,ax

c0024964 <Mutex::Mutex()>:
c0024964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024968:	6a 01                	push   0x1
c002496a:	50                   	push   eax
c002496b:	e8 c4 ff ff ff       	call   c0024934 <Semaphore::Semaphore(int)>
c0024970:	83 c4 08             	add    esp,0x8
c0024973:	90                   	nop
c0024974:	c3                   	ret    
c0024975:	8d 76 00             	lea    esi,[esi+0x0]

c0024978 <KeDisablePreemption()>:
c0024978:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002497d:	85 c0                	test   eax,eax
c002497f:	75 13                	jne    c0024994 <KeDisablePreemption()+0x1c>
c0024981:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024987:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002498e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024994:	83 c0 01             	add    eax,0x1
c0024997:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002499c:	c3                   	ret    
c002499d:	8d 76 00             	lea    esi,[esi+0x0]

c00249a0 <KeRestorePreemption()>:
c00249a0:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c00249a5:	83 e8 01             	sub    eax,0x1
c00249a8:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c00249ad:	75 0d                	jne    c00249bc <KeRestorePreemption()+0x1c>
c00249af:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c00249b4:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c00249b9:	8d 76 00             	lea    esi,[esi+0x0]
c00249bc:	c3                   	ret    
c00249bd:	90                   	nop
c00249be:	66 90                	xchg   ax,ax

c00249c0 <Process::createThread(void (*)(void*), void*, int)>:
c00249c0:	57                   	push   edi
c00249c1:	31 c9                	xor    ecx,ecx
c00249c3:	56                   	push   esi
c00249c4:	53                   	push   ebx
c00249c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249c9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00249d0:	89 f2                	mov    edx,esi
c00249d2:	66 90                	xchg   ax,ax
c00249d4:	0f b7 c2             	movzx  eax,dx
c00249d7:	80 e2 01             	and    dl,0x1
c00249da:	74 14                	je     c00249f0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00249dc:	d1 f8                	sar    eax,1
c00249de:	83 c1 01             	add    ecx,0x1
c00249e1:	83 f9 10             	cmp    ecx,0x10
c00249e4:	89 c2                	mov    edx,eax
c00249e6:	75 ec                	jne    c00249d4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00249e8:	31 db                	xor    ebx,ebx
c00249ea:	89 d8                	mov    eax,ebx
c00249ec:	5b                   	pop    ebx
c00249ed:	5e                   	pop    esi
c00249ee:	5f                   	pop    edi
c00249ef:	c3                   	ret    
c00249f0:	b8 01 00 00 00       	mov    eax,0x1
c00249f5:	d3 e0                	shl    eax,cl
c00249f7:	09 c6                	or     esi,eax
c00249f9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0024a00:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0024a03:	c1 e0 05             	shl    eax,0x5
c0024a06:	29 c8                	sub    eax,ecx
c0024a08:	01 d8                	add    eax,ebx
c0024a0a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0024a11:	75 0d                	jne    c0024a20 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0024a13:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0024a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0024a20:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024a26:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0024a29:	83 ec 0c             	sub    esp,0xc
c0024a2c:	c1 e6 05             	shl    esi,0x5
c0024a2f:	29 ce                	sub    esi,ecx
c0024a31:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0024a34:	8d 04 33             	lea    eax,[ebx+esi*1]
c0024a37:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0024a3d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0024a43:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0024a49:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0024a50:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0024a56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024a5a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0024a60:	89 ca                	mov    edx,ecx
c0024a62:	f7 da                	neg    edx
c0024a64:	c1 e2 15             	shl    edx,0x15
c0024a67:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0024a6d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0024a73:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024a77:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0024a81:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0024a87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024a8b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0024a91:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0024a9b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0024aa5:	68 00 01 00 00       	push   0x100
c0024aaa:	e8 e0 18 ff ff       	call   c001638f <malloc>
c0024aaf:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0024ab2:	58                   	pop    eax
c0024ab3:	5a                   	pop    edx
c0024ab4:	53                   	push   ebx
c0024ab5:	68 ec 01 04 c0       	push   0xc00401ec
c0024aba:	e8 f1 9e 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024abf:	83 c4 10             	add    esp,0x10
c0024ac2:	89 d8                	mov    eax,ebx
c0024ac4:	5b                   	pop    ebx
c0024ac5:	5e                   	pop    esi
c0024ac6:	5f                   	pop    edi
c0024ac7:	c3                   	ret    

c0024ac8 <Process::createUserThread()>:
c0024ac8:	83 ec 0c             	sub    esp,0xc
c0024acb:	68 80 00 00 00       	push   0x80
c0024ad0:	6a 00                	push   0x0
c0024ad2:	68 d4 43 02 c0       	push   0xc00243d4
c0024ad7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024adb:	50                   	push   eax
c0024adc:	e8 df fe ff ff       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c0024ae1:	83 c4 1c             	add    esp,0x1c
c0024ae4:	c3                   	ret    
c0024ae5:	8d 76 00             	lea    esi,[esi+0x0]

c0024ae8 <setupMultitasking(void (*)())>:
c0024ae8:	56                   	push   esi
c0024ae9:	53                   	push   ebx
c0024aea:	83 ec 04             	sub    esp,0x4
c0024aed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024af1:	eb 11                	jmp    c0024b04 <setupMultitasking(void (*)())+0x1c>
c0024af3:	90                   	nop
c0024af4:	83 ec 0c             	sub    esp,0xc
c0024af7:	68 ec 01 04 c0       	push   0xc00401ec
c0024afc:	e8 f3 9d 00 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0024b01:	83 c4 10             	add    esp,0x10
c0024b04:	83 ec 0c             	sub    esp,0xc
c0024b07:	68 ec 01 04 c0       	push   0xc00401ec
c0024b0c:	e8 bf 9d 00 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0024b11:	83 c4 10             	add    esp,0x10
c0024b14:	84 c0                	test   al,al
c0024b16:	74 dc                	je     c0024af4 <setupMultitasking(void (*)())+0xc>
c0024b18:	83 ec 0c             	sub    esp,0xc
c0024b1b:	68 24 07 00 00       	push   0x724
c0024b20:	e8 6a 18 ff ff       	call   c001638f <malloc>
c0024b25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024b2c:	6a 00                	push   0x0
c0024b2e:	68 6f 2a 03 c0       	push   0xc0032a6f
c0024b33:	6a 01                	push   0x1
c0024b35:	50                   	push   eax
c0024b36:	89 c3                	mov    ebx,eax
c0024b38:	e8 17 fc ff ff       	call   c0024754 <Process::Process(bool, char const*, Process*, char**)>
c0024b3d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0024b43:	83 c4 14             	add    esp,0x14
c0024b46:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c0024b4c:	50                   	push   eax
c0024b4d:	e8 d9 24 ff ff       	call   c001702b <setActiveTerminal(VgaText*)>
c0024b52:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0024b59:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0024b63:	83 c8 01             	or     eax,0x1
c0024b66:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0024b6d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024b73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0024b76:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0024b80:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0024b86:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0024b90:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0024b96:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0024ba0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0024baa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0024bb0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0024bb6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0024bc0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0024bca:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0024bd1:	e8 b9 17 ff ff       	call   c001638f <malloc>
c0024bd6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0024bdc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0024be2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0024be8:	5a                   	pop    edx
c0024be9:	59                   	pop    ecx
c0024bea:	68 6b 2a 03 c0       	push   0xc0032a6b
c0024bef:	50                   	push   eax
c0024bf0:	e8 5b ba fd ff       	call   c0000650 <strcpy>
c0024bf5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0024bfc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024c00:	83 c4 14             	add    esp,0x14
c0024c03:	5b                   	pop    ebx
c0024c04:	5e                   	pop    esi
c0024c05:	e9 5f b6 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0024c0a:	66 90                	xchg   ax,ax

c0024c0c <schedule()>:
c0024c0c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0024c12:	85 d2                	test   edx,edx
c0024c14:	74 0e                	je     c0024c24 <schedule()+0x18>
c0024c16:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024c20:	c3                   	ret    
c0024c21:	8d 76 00             	lea    esi,[esi+0x0]
c0024c24:	53                   	push   ebx
c0024c25:	83 ec 14             	sub    esp,0x14
c0024c28:	68 ec 01 04 c0       	push   0xc00401ec
c0024c2d:	e8 9e 9c 00 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0024c32:	83 c4 10             	add    esp,0x10
c0024c35:	84 c0                	test   al,al
c0024c37:	75 3f                	jne    c0024c78 <schedule()+0x6c>
c0024c39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024c3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024c41:	83 fa 01             	cmp    edx,0x1
c0024c44:	74 3a                	je     c0024c80 <schedule()+0x74>
c0024c46:	66 90                	xchg   ax,ax
c0024c48:	83 ec 0c             	sub    esp,0xc
c0024c4b:	68 ec 01 04 c0       	push   0xc00401ec
c0024c50:	e8 97 9c 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0024c55:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0024c5c:	89 c3                	mov    ebx,eax
c0024c5e:	e8 91 9c 00 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0024c63:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0024c6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c6d:	e8 ba f7 ff ff       	call   c002442c <switchToThread(ThreadControlBlock*)>
c0024c72:	83 c4 10             	add    esp,0x10
c0024c75:	8d 76 00             	lea    esi,[esi+0x0]
c0024c78:	83 c4 08             	add    esp,0x8
c0024c7b:	5b                   	pop    ebx
c0024c7c:	c3                   	ret    
c0024c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0024c80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0024c87:	83 ec 08             	sub    esp,0x8
c0024c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024c8f:	50                   	push   eax
c0024c90:	68 ec 01 04 c0       	push   0xc00401ec
c0024c95:	e8 16 9d 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024c9a:	83 c4 10             	add    esp,0x10
c0024c9d:	eb a9                	jmp    c0024c48 <schedule()+0x3c>
c0024c9f:	90                   	nop

c0024ca0 <Semaphore::tryAcquire()>:
c0024ca0:	53                   	push   ebx
c0024ca1:	83 ec 08             	sub    esp,0x8
c0024ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ca8:	fa                   	cli    
c0024ca9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0024caf:	8d 42 01             	lea    eax,[edx+0x1]
c0024cb2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024cb7:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024cbc:	8d 58 01             	lea    ebx,[eax+0x1]
c0024cbf:	89 1d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ebx
c0024cc5:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0024cc8:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0024cca:	7c 2c                	jl     c0024cf8 <Semaphore::tryAcquire()+0x58>
c0024ccc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024cd1:	85 c0                	test   eax,eax
c0024cd3:	75 0b                	jne    c0024ce0 <Semaphore::tryAcquire()+0x40>
c0024cd5:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024cda:	85 c0                	test   eax,eax
c0024cdc:	75 5a                	jne    c0024d38 <Semaphore::tryAcquire()+0x98>
c0024cde:	66 90                	xchg   ax,ax
c0024ce0:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024ce6:	31 c0                	xor    eax,eax
c0024ce8:	85 d2                	test   edx,edx
c0024cea:	75 04                	jne    c0024cf0 <Semaphore::tryAcquire()+0x50>
c0024cec:	fb                   	sti    
c0024ced:	8d 76 00             	lea    esi,[esi+0x0]
c0024cf0:	83 c4 08             	add    esp,0x8
c0024cf3:	5b                   	pop    ebx
c0024cf4:	c3                   	ret    
c0024cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0024cf8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024cfd:	83 c3 01             	add    ebx,0x1
c0024d00:	85 c0                	test   eax,eax
c0024d02:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0024d05:	75 21                	jne    c0024d28 <Semaphore::tryAcquire()+0x88>
c0024d07:	8b 0d c8 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401c8
c0024d0d:	85 c9                	test   ecx,ecx
c0024d0f:	74 17                	je     c0024d28 <Semaphore::tryAcquire()+0x88>
c0024d11:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024d1b:	e8 ec fe ff ff       	call   c0024c0c <schedule()>
c0024d20:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d25:	8d 50 ff             	lea    edx,[eax-0x1]
c0024d28:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024d2e:	85 d2                	test   edx,edx
c0024d30:	b0 01                	mov    al,0x1
c0024d32:	75 bc                	jne    c0024cf0 <Semaphore::tryAcquire()+0x50>
c0024d34:	eb b6                	jmp    c0024cec <Semaphore::tryAcquire()+0x4c>
c0024d36:	66 90                	xchg   ax,ax
c0024d38:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024d42:	e8 c5 fe ff ff       	call   c0024c0c <schedule()>
c0024d47:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d4c:	8d 50 ff             	lea    edx,[eax-0x1]
c0024d4f:	31 c0                	xor    eax,eax
c0024d51:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024d57:	85 d2                	test   edx,edx
c0024d59:	75 95                	jne    c0024cf0 <Semaphore::tryAcquire()+0x50>
c0024d5b:	eb 8f                	jmp    c0024cec <Semaphore::tryAcquire()+0x4c>
c0024d5d:	90                   	nop
c0024d5e:	66 90                	xchg   ax,ax

c0024d60 <Semaphore::assertLocked(char const*)>:
c0024d60:	83 ec 0c             	sub    esp,0xc
c0024d63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d67:	fa                   	cli    
c0024d68:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c0024d6e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024d73:	83 c1 01             	add    ecx,0x1
c0024d76:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c0024d7c:	8d 48 01             	lea    ecx,[eax+0x1]
c0024d7f:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024d85:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0024d87:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0024d8a:	7c 28                	jl     c0024db4 <Semaphore::assertLocked(char const*)+0x54>
c0024d8c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024d91:	85 c0                	test   eax,eax
c0024d93:	75 0b                	jne    c0024da0 <Semaphore::assertLocked(char const*)+0x40>
c0024d95:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024d9a:	85 c0                	test   eax,eax
c0024d9c:	75 32                	jne    c0024dd0 <Semaphore::assertLocked(char const*)+0x70>
c0024d9e:	66 90                	xchg   ax,ax
c0024da0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024da5:	83 e8 01             	sub    eax,0x1
c0024da8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024dad:	75 01                	jne    c0024db0 <Semaphore::assertLocked(char const*)+0x50>
c0024daf:	fb                   	sti    
c0024db0:	83 c4 0c             	add    esp,0xc
c0024db3:	c3                   	ret    
c0024db4:	83 ec 0c             	sub    esp,0xc
c0024db7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024dbb:	52                   	push   edx
c0024dbc:	e8 b2 b2 ff ff       	call   c0020073 <KePanic(char const*)>
c0024dc1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024dc6:	83 c4 10             	add    esp,0x10
c0024dc9:	83 e8 01             	sub    eax,0x1
c0024dcc:	eb be                	jmp    c0024d8c <Semaphore::assertLocked(char const*)+0x2c>
c0024dce:	66 90                	xchg   ax,ax
c0024dd0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024dda:	e8 2d fe ff ff       	call   c0024c0c <schedule()>
c0024ddf:	eb bf                	jmp    c0024da0 <Semaphore::assertLocked(char const*)+0x40>
c0024de1:	8d 76 00             	lea    esi,[esi+0x0]

c0024de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0024de4:	83 ec 0c             	sub    esp,0xc
c0024de7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024dec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024df0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024df3:	e8 14 fe ff ff       	call   c0024c0c <schedule()>
c0024df8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024dfd:	83 e8 01             	sub    eax,0x1
c0024e00:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024e05:	75 01                	jne    c0024e08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0024e07:	fb                   	sti    
c0024e08:	83 c4 0c             	add    esp,0xc
c0024e0b:	c3                   	ret    

c0024e0c <blockTask(TaskState)>:
c0024e0c:	83 ec 0c             	sub    esp,0xc
c0024e0f:	fa                   	cli    
c0024e10:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e19:	83 c0 01             	add    eax,0x1
c0024e1c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024e21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024e29:	e8 de fd ff ff       	call   c0024c0c <schedule()>
c0024e2e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024e33:	83 e8 01             	sub    eax,0x1
c0024e36:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024e3b:	75 03                	jne    c0024e40 <blockTask(TaskState)+0x34>
c0024e3d:	fb                   	sti    
c0024e3e:	66 90                	xchg   ax,ax
c0024e40:	83 c4 0c             	add    esp,0xc
c0024e43:	c3                   	ret    

c0024e44 <waitTask(int, int*, int)>:
c0024e44:	83 ec 18             	sub    esp,0x18
c0024e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e50:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0024e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e5c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0024e5f:	6a 07                	push   0x7
c0024e61:	e8 a6 ff ff ff       	call   c0024e0c <blockTask(TaskState)>
c0024e66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e6b:	83 c4 10             	add    esp,0x10
c0024e6e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0024e71:	85 d2                	test   edx,edx
c0024e73:	74 0b                	je     c0024e80 <waitTask(int, int*, int)+0x3c>
c0024e75:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0024e78:	89 02                	mov    DWORD PTR [edx],eax
c0024e7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e7f:	90                   	nop
c0024e80:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0024e83:	83 c4 0c             	add    esp,0xc
c0024e86:	c3                   	ret    
c0024e87:	90                   	nop

c0024e88 <milliTenthSleepUntil(unsigned int)>:
c0024e88:	83 ec 0c             	sub    esp,0xc
c0024e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e8f:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0024e95:	76 05                	jbe    c0024e9c <milliTenthSleepUntil(unsigned int)+0x14>
c0024e97:	90                   	nop
c0024e98:	83 c4 0c             	add    esp,0xc
c0024e9b:	c3                   	ret    
c0024e9c:	fa                   	cli    
c0024e9d:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0024ea3:	83 ec 08             	sub    esp,0x8
c0024ea6:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024eac:	83 c2 01             	add    edx,0x1
c0024eaf:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024eb5:	83 c1 01             	add    ecx,0x1
c0024eb8:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024ebe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0024ec4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0024ec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ecc:	50                   	push   eax
c0024ecd:	68 e0 01 04 c0       	push   0xc00401e0
c0024ed2:	e8 d9 9a 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024ed7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0024ede:	e8 29 ff ff ff       	call   c0024e0c <blockTask(TaskState)>
c0024ee3:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024ee8:	83 c4 10             	add    esp,0x10
c0024eeb:	83 e8 01             	sub    eax,0x1
c0024eee:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024ef3:	85 c0                	test   eax,eax
c0024ef5:	75 09                	jne    c0024f00 <milliTenthSleepUntil(unsigned int)+0x78>
c0024ef7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024efc:	85 c0                	test   eax,eax
c0024efe:	75 14                	jne    c0024f14 <milliTenthSleepUntil(unsigned int)+0x8c>
c0024f00:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024f05:	83 e8 01             	sub    eax,0x1
c0024f08:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024f0d:	75 89                	jne    c0024e98 <milliTenthSleepUntil(unsigned int)+0x10>
c0024f0f:	fb                   	sti    
c0024f10:	83 c4 0c             	add    esp,0xc
c0024f13:	c3                   	ret    
c0024f14:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024f1e:	e8 e9 fc ff ff       	call   c0024c0c <schedule()>
c0024f23:	eb db                	jmp    c0024f00 <milliTenthSleepUntil(unsigned int)+0x78>
c0024f25:	8d 76 00             	lea    esi,[esi+0x0]

c0024f28 <milliTenthSleep(unsigned int)>:
c0024f28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024f2c:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0024f31:	01 c2                	add    edx,eax
c0024f33:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024f37:	e9 4c ff ff ff       	jmp    c0024e88 <milliTenthSleepUntil(unsigned int)>

c0024f3c <sleep(unsigned int)>:
c0024f3c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0024f44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024f48:	eb de                	jmp    c0024f28 <milliTenthSleep(unsigned int)>
c0024f4a:	66 90                	xchg   ax,ax

c0024f4c <Semaphore::acquire()>:
c0024f4c:	83 ec 0c             	sub    esp,0xc
c0024f4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024f53:	fa                   	cli    
c0024f54:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024f59:	83 c0 01             	add    eax,0x1
c0024f5c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024f61:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024f66:	8d 48 01             	lea    ecx,[eax+0x1]
c0024f69:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024f6f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0024f72:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0024f74:	7d 2e                	jge    c0024fa4 <Semaphore::acquire()+0x58>
c0024f76:	83 c1 01             	add    ecx,0x1
c0024f79:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0024f7c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024f81:	85 c0                	test   eax,eax
c0024f83:	75 0b                	jne    c0024f90 <Semaphore::acquire()+0x44>
c0024f85:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024f8a:	85 c0                	test   eax,eax
c0024f8c:	75 66                	jne    c0024ff4 <Semaphore::acquire()+0xa8>
c0024f8e:	66 90                	xchg   ax,ax
c0024f90:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024f95:	83 e8 01             	sub    eax,0x1
c0024f98:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024f9d:	75 01                	jne    c0024fa0 <Semaphore::acquire()+0x54>
c0024f9f:	fb                   	sti    
c0024fa0:	83 c4 0c             	add    esp,0xc
c0024fa3:	c3                   	ret    
c0024fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fa9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0024fb0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0024fb3:	85 c9                	test   ecx,ecx
c0024fb5:	74 51                	je     c0025008 <Semaphore::acquire()+0xbc>
c0024fb7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0024fba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024fc0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0024fc3:	90                   	nop
c0024fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fc9:	83 ec 0c             	sub    esp,0xc
c0024fcc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0024fcf:	68 f0 2a 03 c0       	push   0xc0032af0
c0024fd4:	e8 ed 41 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0024fd9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0024fe0:	e8 27 fe ff ff       	call   c0024e0c <blockTask(TaskState)>
c0024fe5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024fea:	83 c4 10             	add    esp,0x10
c0024fed:	83 e8 01             	sub    eax,0x1
c0024ff0:	eb 8a                	jmp    c0024f7c <Semaphore::acquire()+0x30>
c0024ff2:	66 90                	xchg   ax,ax
c0024ff4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024ffe:	e8 09 fc ff ff       	call   c0024c0c <schedule()>
c0025003:	eb 8b                	jmp    c0024f90 <Semaphore::acquire()+0x44>
c0025005:	8d 76 00             	lea    esi,[esi+0x0]
c0025008:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002500d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0025010:	eb b2                	jmp    c0024fc4 <Semaphore::acquire()+0x78>
c0025012:	66 90                	xchg   ax,ax

c0025014 <taskReturned>:
c0025014:	83 ec 18             	sub    esp,0x18
c0025017:	68 10 2b 03 c0       	push   0xc0032b10
c002501c:	e8 52 b0 ff ff       	call   c0020073 <KePanic(char const*)>
c0025021:	83 c4 10             	add    esp,0x10
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	6a 02                	push   0x2
c0025029:	e8 de fd ff ff       	call   c0024e0c <blockTask(TaskState)>
c002502e:	fa                   	cli    
c002502f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025034:	83 c0 01             	add    eax,0x1
c0025037:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002503c:	e8 cb fb ff ff       	call   c0024c0c <schedule()>
c0025041:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025046:	83 c4 10             	add    esp,0x10
c0025049:	83 e8 01             	sub    eax,0x1
c002504c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025051:	85 c0                	test   eax,eax
c0025053:	75 cf                	jne    c0025024 <taskReturned+0x10>
c0025055:	fb                   	sti    
c0025056:	eb cc                	jmp    c0025024 <taskReturned+0x10>

c0025058 <Thr::processFromPID(int)>:
c0025058:	57                   	push   edi
c0025059:	56                   	push   esi
c002505a:	53                   	push   ebx
c002505b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002505f:	fa                   	cli    
c0025060:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c0025066:	83 ec 0c             	sub    esp,0xc
c0025069:	68 ec 01 04 c0       	push   0xc00401ec
c002506e:	83 c1 01             	add    ecx,0x1
c0025071:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c0025077:	e8 70 98 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002507c:	83 c4 10             	add    esp,0x10
c002507f:	89 c7                	mov    edi,eax
c0025081:	eb 15                	jmp    c0025098 <Thr::processFromPID(int)+0x40>
c0025083:	90                   	nop
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	68 ec 01 04 c0       	push   0xc00401ec
c002508c:	e8 5b 98 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025091:	83 c4 10             	add    esp,0x10
c0025094:	39 f8                	cmp    eax,edi
c0025096:	74 50                	je     c00250e8 <Thr::processFromPID(int)+0x90>
c0025098:	83 ec 0c             	sub    esp,0xc
c002509b:	68 ec 01 04 c0       	push   0xc00401ec
c00250a0:	e8 47 98 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00250a5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00250ac:	89 c3                	mov    ebx,eax
c00250ae:	e8 41 98 00 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00250b3:	58                   	pop    eax
c00250b4:	5a                   	pop    edx
c00250b5:	53                   	push   ebx
c00250b6:	68 ec 01 04 c0       	push   0xc00401ec
c00250bb:	e8 f0 98 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00250c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00250c3:	83 c4 10             	add    esp,0x10
c00250c6:	39 30                	cmp    DWORD PTR [eax],esi
c00250c8:	75 ba                	jne    c0025084 <Thr::processFromPID(int)+0x2c>
c00250ca:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00250cf:	83 e8 01             	sub    eax,0x1
c00250d2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00250d7:	74 0b                	je     c00250e4 <Thr::processFromPID(int)+0x8c>
c00250d9:	8d 76 00             	lea    esi,[esi+0x0]
c00250dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00250df:	90                   	nop
c00250e0:	5b                   	pop    ebx
c00250e1:	5e                   	pop    esi
c00250e2:	5f                   	pop    edi
c00250e3:	c3                   	ret    
c00250e4:	fb                   	sti    
c00250e5:	eb f5                	jmp    c00250dc <Thr::processFromPID(int)+0x84>
c00250e7:	90                   	nop
c00250e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00250ed:	8d 50 ff             	lea    edx,[eax-0x1]
c00250f0:	31 c0                	xor    eax,eax
c00250f2:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00250f8:	85 d2                	test   edx,edx
c00250fa:	75 e4                	jne    c00250e0 <Thr::processFromPID(int)+0x88>
c00250fc:	fb                   	sti    
c00250fd:	5b                   	pop    ebx
c00250fe:	5e                   	pop    esi
c00250ff:	5f                   	pop    edi
c0025100:	c3                   	ret    
c0025101:	8d 76 00             	lea    esi,[esi+0x0]

c0025104 <unblockTask(ThreadControlBlock*)>:
c0025104:	53                   	push   ebx
c0025105:	83 ec 08             	sub    esp,0x8
c0025108:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002510c:	fa                   	cli    
c002510d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025112:	83 c0 01             	add    eax,0x1
c0025115:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002511a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002511d:	85 c0                	test   eax,eax
c002511f:	74 67                	je     c0025188 <unblockTask(ThreadControlBlock*)+0x84>
c0025121:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025124:	83 f8 01             	cmp    eax,0x1
c0025127:	74 37                	je     c0025160 <unblockTask(ThreadControlBlock*)+0x5c>
c0025129:	83 ec 0c             	sub    esp,0xc
c002512c:	68 ec 01 04 c0       	push   0xc00401ec
c0025131:	e8 b6 97 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025136:	83 c4 10             	add    esp,0x10
c0025139:	85 c0                	test   eax,eax
c002513b:	75 1b                	jne    c0025158 <unblockTask(ThreadControlBlock*)+0x54>
c002513d:	eb 5d                	jmp    c002519c <unblockTask(ThreadControlBlock*)+0x98>
c002513f:	90                   	nop
c0025140:	83 ec 08             	sub    esp,0x8
c0025143:	50                   	push   eax
c0025144:	68 ec 01 04 c0       	push   0xc00401ec
c0025149:	e8 be 9a 00 00       	call   c002ec0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002514e:	83 c4 10             	add    esp,0x10
c0025151:	85 c0                	test   eax,eax
c0025153:	74 47                	je     c002519c <unblockTask(ThreadControlBlock*)+0x98>
c0025155:	8d 76 00             	lea    esi,[esi+0x0]
c0025158:	39 c3                	cmp    ebx,eax
c002515a:	75 e4                	jne    c0025140 <unblockTask(ThreadControlBlock*)+0x3c>
c002515c:	eb 12                	jmp    c0025170 <unblockTask(ThreadControlBlock*)+0x6c>
c002515e:	66 90                	xchg   ax,ax
c0025160:	83 ec 0c             	sub    esp,0xc
c0025163:	68 8d 2a 03 c0       	push   0xc0032a8d
c0025168:	e8 59 40 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002516d:	83 c4 10             	add    esp,0x10
c0025170:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025175:	83 e8 01             	sub    eax,0x1
c0025178:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002517d:	75 01                	jne    c0025180 <unblockTask(ThreadControlBlock*)+0x7c>
c002517f:	fb                   	sti    
c0025180:	83 c4 08             	add    esp,0x8
c0025183:	5b                   	pop    ebx
c0025184:	c3                   	ret    
c0025185:	8d 76 00             	lea    esi,[esi+0x0]
c0025188:	83 ec 0c             	sub    esp,0xc
c002518b:	68 76 2a 03 c0       	push   0xc0032a76
c0025190:	e8 31 40 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0025195:	83 c4 10             	add    esp,0x10
c0025198:	eb d6                	jmp    c0025170 <unblockTask(ThreadControlBlock*)+0x6c>
c002519a:	66 90                	xchg   ax,ax
c002519c:	83 ec 08             	sub    esp,0x8
c002519f:	53                   	push   ebx
c00251a0:	68 ec 01 04 c0       	push   0xc00401ec
c00251a5:	e8 06 98 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00251aa:	83 c4 10             	add    esp,0x10
c00251ad:	eb c1                	jmp    c0025170 <unblockTask(ThreadControlBlock*)+0x6c>
c00251af:	90                   	nop

c00251b0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00251b0:	55                   	push   ebp
c00251b1:	57                   	push   edi
c00251b2:	56                   	push   esi
c00251b3:	53                   	push   ebx
c00251b4:	83 ec 1c             	sub    esp,0x1c
c00251b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00251bb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00251be:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00251c4:	85 ed                	test   ebp,ebp
c00251c6:	7e 28                	jle    c00251f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00251c8:	31 f6                	xor    esi,esi
c00251ca:	66 90                	xchg   ax,ax
c00251cc:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00251d3:	83 ec 0c             	sub    esp,0xc
c00251d6:	83 c6 01             	add    esi,0x1
c00251d9:	57                   	push   edi
c00251da:	e8 c0 11 ff ff       	call   c001639f <free>
c00251df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00251e2:	83 c4 10             	add    esp,0x10
c00251e5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00251eb:	7f df                	jg     c00251cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00251ed:	8d 76 00             	lea    esi,[esi+0x0]
c00251f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00251fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00251ff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025202:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025205:	d3 c0                	rol    eax,cl
c0025207:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002520e:	21 c8                	and    eax,ecx
c0025210:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025217:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002521a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025222:	89 f7                	mov    edi,esi
c0025224:	0f 85 72 01 00 00    	jne    c002539c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002522a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025230:	85 ed                	test   ebp,ebp
c0025232:	74 1c                	je     c0025250 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	55                   	push   ebp
c0025238:	e8 47 ab ff ff       	call   c001fd84 <EnvVarContainer::~EnvVarContainer()>
c002523d:	59                   	pop    ecx
c002523e:	5e                   	pop    esi
c002523f:	6a 0c                	push   0xc
c0025241:	55                   	push   ebp
c0025242:	e8 81 3e ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c0025247:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002524a:	83 c4 10             	add    esp,0x10
c002524d:	89 f7                	mov    edi,esi
c002524f:	90                   	nop
c0025250:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025256:	85 c0                	test   eax,eax
c0025258:	0f 84 b2 00 00 00    	je     c0025310 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c002525e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025261:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025265:	31 c9                	xor    ecx,ecx
c0025267:	eb 17                	jmp    c0025280 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025269:	8d 76 00             	lea    esi,[esi+0x0]
c002526c:	83 c1 01             	add    ecx,0x1
c002526f:	83 f9 10             	cmp    ecx,0x10
c0025272:	0f 84 98 00 00 00    	je     c0025310 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025278:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002527e:	66 90                	xchg   ax,ax
c0025280:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025287:	d3 fa                	sar    edx,cl
c0025289:	80 e2 01             	and    dl,0x1
c002528c:	74 de                	je     c002526c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002528e:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025291:	c1 e2 05             	shl    edx,0x5
c0025294:	29 ca                	sub    edx,ecx
c0025296:	01 d0                	add    eax,edx
c0025298:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c002529e:	83 fd 07             	cmp    ebp,0x7
c00252a1:	75 c9                	jne    c002526c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00252a3:	05 40 02 00 00       	add    eax,0x240
c00252a8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00252ab:	83 fd ff             	cmp    ebp,0xffffffff
c00252ae:	0f 8c f0 00 00 00    	jl     c00253a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00252b4:	0f 84 ae 01 00 00    	je     c0025468 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00252ba:	85 ed                	test   ebp,ebp
c00252bc:	0f 84 92 01 00 00    	je     c0025454 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00252c2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00252c4:	75 a6                	jne    c002526c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00252c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00252ca:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00252d0:	01 d0                	add    eax,edx
c00252d2:	66 90                	xchg   ax,ax
c00252d4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00252e1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00252e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00252ea:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00252f1:	50                   	push   eax
c00252f2:	e8 0d fe ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c00252f7:	83 c4 10             	add    esp,0x10
c00252fa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00252fd:	89 f7                	mov    edi,esi
c00252ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025303:	83 c1 01             	add    ecx,0x1
c0025306:	83 f9 10             	cmp    ecx,0x10
c0025309:	0f 85 69 ff ff ff    	jne    c0025278 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002530f:	90                   	nop
c0025310:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025316:	85 c0                	test   eax,eax
c0025318:	74 62                	je     c002537c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002531a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025320:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025326:	74 54                	je     c002537c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025328:	83 ec 0c             	sub    esp,0xc
c002532b:	68 ec 01 04 c0       	push   0xc00401ec
c0025330:	e8 b7 95 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025335:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002533c:	89 c7                	mov    edi,eax
c002533e:	e8 8d 95 00 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025343:	83 c4 10             	add    esp,0x10
c0025346:	84 c0                	test   al,al
c0025348:	0f 84 ce 00 00 00    	je     c002541c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c002534e:	66 90                	xchg   ax,ax
c0025350:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025353:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025359:	85 d2                	test   edx,edx
c002535b:	74 0f                	je     c002536c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c002535d:	8b 02                	mov    eax,DWORD PTR [edx]
c002535f:	83 ec 0c             	sub    esp,0xc
c0025362:	52                   	push   edx
c0025363:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025366:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025369:	83 c4 10             	add    esp,0x10
c002536c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025376:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025379:	8d 76 00             	lea    esi,[esi+0x0]
c002537c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025382:	85 db                	test   ebx,ebx
c0025384:	74 16                	je     c002539c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025386:	83 ec 0c             	sub    esp,0xc
c0025389:	53                   	push   ebx
c002538a:	e8 bd 30 ff ff       	call   c001844c <VAS::~VAS()>
c002538f:	58                   	pop    eax
c0025390:	5a                   	pop    edx
c0025391:	6a 14                	push   0x14
c0025393:	53                   	push   ebx
c0025394:	e8 2f 3d ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c0025399:	83 c4 10             	add    esp,0x10
c002539c:	83 c4 1c             	add    esp,0x1c
c002539f:	5b                   	pop    ebx
c00253a0:	5e                   	pop    esi
c00253a1:	5f                   	pop    edi
c00253a2:	5d                   	pop    ebp
c00253a3:	c3                   	ret    
c00253a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00253a8:	83 ec 0c             	sub    esp,0xc
c00253ab:	68 44 2b 03 c0       	push   0xc0032b44
c00253b0:	e8 be ac ff ff       	call   c0020073 <KePanic(char const*)>
c00253b5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00253b8:	83 c4 10             	add    esp,0x10
c00253bb:	89 f7                	mov    edi,esi
c00253bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00253c1:	e9 a6 fe ff ff       	jmp    c002526c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00253c6:	66 90                	xchg   ax,ax
c00253c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00253ce:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00253d4:	75 1e                	jne    c00253f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00253d6:	83 ec 0c             	sub    esp,0xc
c00253d9:	68 ac 2b 03 c0       	push   0xc0032bac
c00253de:	e8 e3 3d ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00253e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00253ea:	e8 1d fa ff ff       	call   c0024e0c <blockTask(TaskState)>
c00253ef:	83 c4 10             	add    esp,0x10
c00253f2:	66 90                	xchg   ax,ax
c00253f4:	83 ec 08             	sub    esp,0x8
c00253f7:	56                   	push   esi
c00253f8:	68 ec 01 04 c0       	push   0xc00401ec
c00253fd:	e8 ae 95 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025402:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025409:	e8 de 94 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002540e:	83 c4 10             	add    esp,0x10
c0025411:	39 f8                	cmp    eax,edi
c0025413:	0f 84 37 ff ff ff    	je     c0025350 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025419:	8d 76 00             	lea    esi,[esi+0x0]
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	68 ec 01 04 c0       	push   0xc00401ec
c0025424:	e8 c3 94 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025429:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025430:	89 c6                	mov    esi,eax
c0025432:	e8 bd 94 00 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025437:	83 c4 10             	add    esp,0x10
c002543a:	39 f3                	cmp    ebx,esi
c002543c:	74 b6                	je     c00253f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002543e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025441:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025444:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c002544a:	75 a8                	jne    c00253f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002544c:	e9 77 ff ff ff       	jmp    c00253c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025451:	8d 76 00             	lea    esi,[esi+0x0]
c0025454:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025458:	83 ec 0c             	sub    esp,0xc
c002545b:	68 78 2b 03 c0       	push   0xc0032b78
c0025460:	e9 4b ff ff ff       	jmp    c00253b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025465:	8d 76 00             	lea    esi,[esi+0x0]
c0025468:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002546c:	8b 36                	mov    esi,DWORD PTR [esi]
c002546e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025471:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025474:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c002547a:	01 d7                	add    edi,edx
c002547c:	89 f8                	mov    eax,edi
c002547e:	e9 51 fe ff ff       	jmp    c00252d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025483:	90                   	nop

c0025484 <cleanerTaskFunction(void*)>:
c0025484:	53                   	push   ebx
c0025485:	83 ec 08             	sub    esp,0x8
c0025488:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002548d:	83 e8 01             	sub    eax,0x1
c0025490:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025495:	75 01                	jne    c0025498 <cleanerTaskFunction(void*)+0x14>
c0025497:	fb                   	sti    
c0025498:	fa                   	cli    
c0025499:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002549e:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c00254a5:	8d 50 01             	lea    edx,[eax+0x1]
c00254a8:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00254ae:	0f 84 c4 00 00 00    	je     c0025578 <cleanerTaskFunction(void*)+0xf4>
c00254b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254b9:	85 c0                	test   eax,eax
c00254bb:	75 03                	jne    c00254c0 <cleanerTaskFunction(void*)+0x3c>
c00254bd:	fb                   	sti    
c00254be:	66 90                	xchg   ax,ax
c00254c0:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c00254c7:	fa                   	cli    
c00254c8:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00254ce:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00254d4:	83 c2 01             	add    edx,0x1
c00254d7:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00254dd:	83 c1 01             	add    ecx,0x1
c00254e0:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00254e6:	fa                   	cli    
c00254e7:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c00254ed:	83 c3 01             	add    ebx,0x1
c00254f0:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c00254f6:	eb 28                	jmp    c0025520 <cleanerTaskFunction(void*)+0x9c>
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	68 d4 01 04 c0       	push   0xc00401d4
c0025500:	e8 e7 93 00 00       	call   c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025505:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c002550c:	89 c3                	mov    ebx,eax
c002550e:	e8 e1 93 00 00       	call   c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025516:	e8 95 fc ff ff       	call   c00251b0 <cleanupTerminatedTask(ThreadControlBlock*)>
c002551b:	83 c4 10             	add    esp,0x10
c002551e:	66 90                	xchg   ax,ax
c0025520:	83 ec 0c             	sub    esp,0xc
c0025523:	68 d4 01 04 c0       	push   0xc00401d4
c0025528:	e8 a3 93 00 00       	call   c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002552d:	83 c4 10             	add    esp,0x10
c0025530:	84 c0                	test   al,al
c0025532:	74 c4                	je     c00254f8 <cleanerTaskFunction(void*)+0x74>
c0025534:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025539:	83 e8 01             	sub    eax,0x1
c002553c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025541:	75 01                	jne    c0025544 <cleanerTaskFunction(void*)+0xc0>
c0025543:	fb                   	sti    
c0025544:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025549:	83 e8 01             	sub    eax,0x1
c002554c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025551:	0f 85 31 ff ff ff    	jne    c0025488 <cleanerTaskFunction(void*)+0x4>
c0025557:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002555c:	85 c0                	test   eax,eax
c002555e:	0f 84 24 ff ff ff    	je     c0025488 <cleanerTaskFunction(void*)+0x4>
c0025564:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002556e:	e8 99 f6 ff ff       	call   c0024c0c <schedule()>
c0025573:	e9 10 ff ff ff       	jmp    c0025488 <cleanerTaskFunction(void*)+0x4>
c0025578:	83 ec 0c             	sub    esp,0xc
c002557b:	6a 02                	push   0x2
c002557d:	e8 62 f8 ff ff       	call   c0024de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	e9 36 ff ff ff       	jmp    c00254c0 <cleanerTaskFunction(void*)+0x3c>
c002558a:	66 90                	xchg   ax,ax

c002558c <terminateTask(int)>:
c002558c:	83 ec 14             	sub    esp,0x14
c002558f:	fa                   	cli    
c0025590:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025596:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c002559c:	83 c2 01             	add    edx,0x1
c002559f:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00255a5:	83 c1 01             	add    ecx,0x1
c00255a8:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00255ae:	fa                   	cli    
c00255af:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00255b8:	83 c0 01             	add    eax,0x1
c00255bb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255c5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00255c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255cd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00255d0:	50                   	push   eax
c00255d1:	68 d4 01 04 c0       	push   0xc00401d4
c00255d6:	e8 d5 93 00 00       	call   c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00255db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255e0:	83 c4 10             	add    esp,0x10
c00255e3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00255ea:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c00255ef:	85 c0                	test   eax,eax
c00255f1:	74 65                	je     c0025658 <terminateTask(int)+0xcc>
c00255f3:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	50                   	push   eax
c00255fe:	e8 01 fb ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c0025603:	83 c4 10             	add    esp,0x10
c0025606:	66 90                	xchg   ax,ax
c0025608:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002560d:	83 e8 01             	sub    eax,0x1
c0025610:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025615:	75 01                	jne    c0025618 <terminateTask(int)+0x8c>
c0025617:	fb                   	sti    
c0025618:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002561d:	83 e8 01             	sub    eax,0x1
c0025620:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025625:	75 09                	jne    c0025630 <terminateTask(int)+0xa4>
c0025627:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002562e:	75 3c                	jne    c002566c <terminateTask(int)+0xe0>
c0025630:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025635:	83 e8 01             	sub    eax,0x1
c0025638:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002563d:	75 01                	jne    c0025640 <terminateTask(int)+0xb4>
c002563f:	fb                   	sti    
c0025640:	fa                   	cli    
c0025641:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025646:	83 c0 01             	add    eax,0x1
c0025649:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002564e:	66 90                	xchg   ax,ax
c0025650:	e8 b7 f5 ff ff       	call   c0024c0c <schedule()>
c0025655:	eb d9                	jmp    c0025630 <terminateTask(int)+0xa4>
c0025657:	90                   	nop
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	68 a4 2a 03 c0       	push   0xc0032aa4
c0025660:	e8 61 3b ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0025665:	83 c4 10             	add    esp,0x10
c0025668:	eb 9e                	jmp    c0025608 <terminateTask(int)+0x7c>
c002566a:	66 90                	xchg   ax,ax
c002566c:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025676:	eb d8                	jmp    c0025650 <terminateTask(int)+0xc4>

c0025678 <Thr::terminateFromIRQ(int)>:
c0025678:	83 ec 18             	sub    esp,0x18
c002567b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002567f:	50                   	push   eax
c0025680:	e8 07 ff ff ff       	call   c002558c <terminateTask(int)>
c0025685:	90                   	nop
c0025686:	66 90                	xchg   ax,ax

c0025688 <Semaphore::release()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002568f:	fa                   	cli    
c0025690:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025695:	83 c0 01             	add    eax,0x1
c0025698:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002569d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00256a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00256a5:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00256ab:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00256ae:	85 c9                	test   ecx,ecx
c00256b0:	74 42                	je     c00256f4 <Semaphore::release()+0x6c>
c00256b2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00256b5:	83 ec 0c             	sub    esp,0xc
c00256b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00256bb:	51                   	push   ecx
c00256bc:	e8 43 fa ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c00256c1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00256c6:	83 c4 10             	add    esp,0x10
c00256c9:	83 e8 01             	sub    eax,0x1
c00256cc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00256d1:	85 c0                	test   eax,eax
c00256d3:	75 0b                	jne    c00256e0 <Semaphore::release()+0x58>
c00256d5:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00256da:	85 c0                	test   eax,eax
c00256dc:	75 22                	jne    c0025700 <Semaphore::release()+0x78>
c00256de:	66 90                	xchg   ax,ax
c00256e0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256e5:	83 e8 01             	sub    eax,0x1
c00256e8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256ed:	75 01                	jne    c00256f0 <Semaphore::release()+0x68>
c00256ef:	fb                   	sti    
c00256f0:	83 c4 0c             	add    esp,0xc
c00256f3:	c3                   	ret    
c00256f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00256f7:	83 e9 01             	sub    ecx,0x1
c00256fa:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00256fd:	eb cd                	jmp    c00256cc <Semaphore::release()+0x44>
c00256ff:	90                   	nop
c0025700:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002570a:	e8 fd f4 ff ff       	call   c0024c0c <schedule()>
c002570f:	eb cf                	jmp    c00256e0 <Semaphore::release()+0x58>
c0025711:	8d 76 00             	lea    esi,[esi+0x0]

c0025714 <__static_initialization_and_destruction_0(int, int)>:
c0025714:	83 ec 0c             	sub    esp,0xc
c0025717:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002571c:	0f 85 8e 00 00 00    	jne    c00257b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025722:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002572a:	0f 85 80 00 00 00    	jne    c00257b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025730:	83 ec 0c             	sub    esp,0xc
c0025733:	68 ec 01 04 c0       	push   0xc00401ec
c0025738:	e8 27 95 00 00       	call   c002ec64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c002573d:	83 c4 10             	add    esp,0x10
c0025740:	83 ec 04             	sub    esp,0x4
c0025743:	68 88 37 03 c0       	push   0xc0033788
c0025748:	68 ec 01 04 c0       	push   0xc00401ec
c002574d:	68 14 ec 02 c0       	push   0xc002ec14
c0025752:	e8 21 39 ff ff       	call   c0019078 <__cxa_atexit>
c0025757:	83 c4 10             	add    esp,0x10
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	68 e0 01 04 c0       	push   0xc00401e0
c0025762:	e8 fd 94 00 00       	call   c002ec64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025767:	83 c4 10             	add    esp,0x10
c002576a:	83 ec 04             	sub    esp,0x4
c002576d:	68 88 37 03 c0       	push   0xc0033788
c0025772:	68 e0 01 04 c0       	push   0xc00401e0
c0025777:	68 14 ec 02 c0       	push   0xc002ec14
c002577c:	e8 f7 38 ff ff       	call   c0019078 <__cxa_atexit>
c0025781:	83 c4 10             	add    esp,0x10
c0025784:	83 ec 0c             	sub    esp,0xc
c0025787:	68 d4 01 04 c0       	push   0xc00401d4
c002578c:	e8 d3 94 00 00       	call   c002ec64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025791:	83 c4 10             	add    esp,0x10
c0025794:	83 ec 04             	sub    esp,0x4
c0025797:	68 88 37 03 c0       	push   0xc0033788
c002579c:	68 d4 01 04 c0       	push   0xc00401d4
c00257a1:	68 14 ec 02 c0       	push   0xc002ec14
c00257a6:	e8 cd 38 ff ff       	call   c0019078 <__cxa_atexit>
c00257ab:	83 c4 10             	add    esp,0x10
c00257ae:	66 90                	xchg   ax,ax
c00257b0:	90                   	nop
c00257b1:	83 c4 0c             	add    esp,0xc
c00257b4:	c3                   	ret    
c00257b5:	8d 76 00             	lea    esi,[esi+0x0]

c00257b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00257b8:	83 ec 0c             	sub    esp,0xc
c00257bb:	83 ec 08             	sub    esp,0x8
c00257be:	68 ff ff 00 00       	push   0xffff
c00257c3:	6a 01                	push   0x1
c00257c5:	e8 4a ff ff ff       	call   c0025714 <__static_initialization_and_destruction_0(int, int)>
c00257ca:	83 c4 10             	add    esp,0x10
c00257cd:	83 c4 0c             	add    esp,0xc
c00257d0:	c3                   	ret    

c00257d1 <Vm::inbv(unsigned short)>:
c00257d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00257d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00257da:	75 06                	jne    c00257e2 <Vm::inbv(unsigned short)+0x11>
c00257dc:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c00257e1:	c3                   	ret    
c00257e2:	ec                   	in     al,dx
c00257e3:	c3                   	ret    

c00257e4 <Vm::outbv(unsigned short, unsigned char)>:
c00257e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00257e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c00257f1:	75 25                	jne    c0025818 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00257f3:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c00257f9:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c00257ff:	8d 51 01             	lea    edx,[ecx+0x1]
c0025802:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025808:	83 fa 20             	cmp    edx,0x20
c002580b:	75 0c                	jne    c0025819 <Vm::outbv(unsigned short, unsigned char)+0x35>
c002580d:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025817:	c3                   	ret    
c0025818:	ee                   	out    dx,al
c0025819:	c3                   	ret    

c002581a <Vm::realToLinear(unsigned short, unsigned short)>:
c002581a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002581f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025824:	c1 e0 04             	shl    eax,0x4
c0025827:	01 d0                	add    eax,edx
c0025829:	c3                   	ret    

c002582a <Vm::getSegment(unsigned int)>:
c002582a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002582e:	c1 e8 10             	shr    eax,0x10
c0025831:	c3                   	ret    

c0025832 <Vm::getOffset(unsigned int)>:
c0025832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025836:	c3                   	ret    

c0025837 <Vm::mainloop2()>:
c0025837:	83 ec 18             	sub    esp,0x18
c002583a:	fa                   	cli    
c002583b:	6a 02                	push   0x2
c002583d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025843:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c002584a:	e8 95 f5 ff ff       	call   c0024de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c002584f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025854:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025858:	52                   	push   edx
c0025859:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c002585d:	52                   	push   edx
c002585e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025862:	52                   	push   edx
c0025863:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025867:	50                   	push   eax
c0025868:	e8 a2 a9 fd ff       	call   c000020f <goToVM86>
c002586d:	83 c4 2c             	add    esp,0x2c
c0025870:	c3                   	ret    

c0025871 <Vm::mainVm8086Loop(void*)>:
c0025871:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025876:	48                   	dec    eax
c0025877:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002587c:	75 01                	jne    c002587f <Vm::mainVm8086Loop(void*)+0xe>
c002587e:	fb                   	sti    
c002587f:	eb b6                	jmp    c0025837 <Vm::mainloop2()>

c0025881 <Vm::mainloop3(unsigned long)>:
c0025881:	83 ec 18             	sub    esp,0x18
c0025884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025888:	fa                   	cli    
c0025889:	6a 02                	push   0x2
c002588b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025891:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025898:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c002589d:	e8 42 f5 ff ff       	call   c0024de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00258a2:	83 c4 1c             	add    esp,0x1c
c00258a5:	eb 90                	jmp    c0025837 <Vm::mainloop2()>

c00258a7 <Vm::initialise8086()>:
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	68 80 00 00 00       	push   0x80
c00258af:	6a 00                	push   0x0
c00258b1:	68 71 58 02 c0       	push   0xc0025871
c00258b6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00258bc:	e8 ff f0 ff ff       	call   c00249c0 <Process::createThread(void (*)(void*), void*, int)>
c00258c1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00258c8:	68 00 01 00 00       	push   0x100
c00258cd:	6a 00                	push   0x0
c00258cf:	6a 00                	push   0x0
c00258d1:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c00258d6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00258db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00258e1:	e8 de 2e ff ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00258e6:	83 c4 2c             	add    esp,0x2c
c00258e9:	c3                   	ret    

c00258ea <Vm::finish8086()>:
c00258ea:	53                   	push   ebx
c00258eb:	83 ec 08             	sub    esp,0x8
c00258ee:	fa                   	cli    
c00258ef:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00258f5:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c00258fc:	75 15                	jne    c0025913 <Vm::finish8086()+0x29>
c00258fe:	e8 09 f3 ff ff       	call   c0024c0c <schedule()>
c0025903:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025908:	48                   	dec    eax
c0025909:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002590e:	75 de                	jne    c00258ee <Vm::finish8086()+0x4>
c0025910:	fb                   	sti    
c0025911:	eb db                	jmp    c00258ee <Vm::finish8086()+0x4>
c0025913:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c002591a:	83 ec 0c             	sub    esp,0xc
c002591d:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025923:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025929:	e8 d6 f7 ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c002592e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025933:	83 c4 10             	add    esp,0x10
c0025936:	8d 50 ff             	lea    edx,[eax-0x1]
c0025939:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002593f:	85 d2                	test   edx,edx
c0025941:	75 01                	jne    c0025944 <Vm::finish8086()+0x5a>
c0025943:	fb                   	sti    
c0025944:	83 c4 08             	add    esp,0x8
c0025947:	89 d8                	mov    eax,ebx
c0025949:	5b                   	pop    ebx
c002594a:	c3                   	ret    

c002594b <Vm::getOutput8086(unsigned char*)>:
c002594b:	57                   	push   edi
c002594c:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025952:	56                   	push   esi
c0025953:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025958:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002595c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002595e:	5e                   	pop    esi
c002595f:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025964:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c002596e:	5f                   	pop    edi
c002596f:	c3                   	ret    

c0025970 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025970:	55                   	push   ebp
c0025971:	57                   	push   edi
c0025972:	56                   	push   esi
c0025973:	53                   	push   ebx
c0025974:	83 ec 0c             	sub    esp,0xc
c0025977:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002597b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002597f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025983:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025987:	fa                   	cli    
c0025988:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002598e:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025995:	75 15                	jne    c00259ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025997:	e8 70 f2 ff ff       	call   c0024c0c <schedule()>
c002599c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259a1:	48                   	dec    eax
c00259a2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259a7:	75 de                	jne    c0025987 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00259a9:	fb                   	sti    
c00259aa:	eb db                	jmp    c0025987 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00259ac:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c00259b6:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c00259bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00259bf:	0f b7 ff             	movzx  edi,di
c00259c2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00259c6:	0f b7 f6             	movzx  esi,si
c00259c9:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00259cd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00259d1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00259d5:	50                   	push   eax
c00259d6:	6a 20                	push   0x20
c00259d8:	6a 00                	push   0x0
c00259da:	68 40 02 04 c0       	push   0xc0040240
c00259df:	e8 0c ab fd ff       	call   c00004f0 <memset>
c00259e4:	5a                   	pop    edx
c00259e5:	59                   	pop    ecx
c00259e6:	57                   	push   edi
c00259e7:	56                   	push   esi
c00259e8:	e8 2d fe ff ff       	call   c002581a <Vm::realToLinear(unsigned short, unsigned short)>
c00259ed:	83 c4 10             	add    esp,0x10
c00259f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00259f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00259f8:	89 c7                	mov    edi,eax
c00259fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00259fc:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025a03:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a08:	48                   	dec    eax
c0025a09:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a0e:	75 01                	jne    c0025a11 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025a10:	fb                   	sti    
c0025a11:	83 ec 0c             	sub    esp,0xc
c0025a14:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025a1a:	e8 e5 f6 ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c0025a1f:	83 c4 1c             	add    esp,0x1c
c0025a22:	b0 01                	mov    al,0x1
c0025a24:	5b                   	pop    ebx
c0025a25:	5e                   	pop    esi
c0025a26:	5f                   	pop    edi
c0025a27:	5d                   	pop    ebp
c0025a28:	c3                   	ret    

c0025a29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025a29:	55                   	push   ebp
c0025a2a:	57                   	push   edi
c0025a2b:	56                   	push   esi
c0025a2c:	53                   	push   ebx
c0025a2d:	83 ec 34             	sub    esp,0x34
c0025a30:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a34:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025a38:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025a3c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025a40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025a44:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025a48:	68 d4 2b 03 c0       	push   0xc0032bd4
c0025a4d:	e8 74 37 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0025a52:	83 c4 10             	add    esp,0x10
c0025a55:	fa                   	cli    
c0025a56:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025a5c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025a62:	84 db                	test   bl,bl
c0025a64:	75 15                	jne    c0025a7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025a66:	e8 a1 f1 ff ff       	call   c0024c0c <schedule()>
c0025a6b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a70:	48                   	dec    eax
c0025a71:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a76:	75 dd                	jne    c0025a55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025a78:	fb                   	sti    
c0025a79:	eb da                	jmp    c0025a55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025a7b:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025a85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025a89:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025a8e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025a92:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025a96:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025a9a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025a9e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025aa2:	50                   	push   eax
c0025aa3:	6a 20                	push   0x20
c0025aa5:	6a 00                	push   0x0
c0025aa7:	68 40 02 04 c0       	push   0xc0040240
c0025aac:	e8 3f aa fd ff       	call   c00004f0 <memset>
c0025ab1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025ab8:	e8 d2 08 ff ff       	call   c001638f <malloc>
c0025abd:	83 c4 0c             	add    esp,0xc
c0025ac0:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ac6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025aca:	89 c5                	mov    ebp,eax
c0025acc:	50                   	push   eax
c0025acd:	e8 0c 49 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c0025ad2:	83 c4 10             	add    esp,0x10
c0025ad5:	85 ed                	test   ebp,ebp
c0025ad7:	75 0a                	jne    c0025ae3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025ad9:	83 ec 0c             	sub    esp,0xc
c0025adc:	68 f6 2b 03 c0       	push   0xc0032bf6
c0025ae1:	eb 2b                	jmp    c0025b0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025ae3:	50                   	push   eax
c0025ae4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025ae8:	50                   	push   eax
c0025ae9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025aed:	50                   	push   eax
c0025aee:	55                   	push   ebp
c0025aef:	e8 0a 4c ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c0025af4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025af8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025afc:	83 c4 10             	add    esp,0x10
c0025aff:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025b04:	74 27                	je     c0025b2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025b06:	83 ec 0c             	sub    esp,0xc
c0025b09:	68 0a 2c 03 c0       	push   0xc0032c0a
c0025b0e:	e8 60 a5 ff ff       	call   c0020073 <KePanic(char const*)>
c0025b13:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b18:	83 c4 10             	add    esp,0x10
c0025b1b:	48                   	dec    eax
c0025b1c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b21:	85 c0                	test   eax,eax
c0025b23:	75 01                	jne    c0025b26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025b25:	fb                   	sti    
c0025b26:	31 db                	xor    ebx,ebx
c0025b28:	e9 90 00 00 00       	jmp    c0025bbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025b2d:	51                   	push   ecx
c0025b2e:	51                   	push   ecx
c0025b2f:	6a 01                	push   0x1
c0025b31:	55                   	push   ebp
c0025b32:	e8 c5 48 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	85 c0                	test   eax,eax
c0025b3c:	74 26                	je     c0025b64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025b3e:	83 ec 0c             	sub    esp,0xc
c0025b41:	68 23 2c 03 c0       	push   0xc0032c23
c0025b46:	e8 28 a5 ff ff       	call   c0020073 <KePanic(char const*)>
c0025b4b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b50:	83 c4 10             	add    esp,0x10
c0025b53:	48                   	dec    eax
c0025b54:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b59:	85 c0                	test   eax,eax
c0025b5b:	75 c9                	jne    c0025b26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025b5d:	fb                   	sti    
c0025b5e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025b62:	eb 59                	jmp    c0025bbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025b64:	50                   	push   eax
c0025b65:	0f b7 ff             	movzx  edi,di
c0025b68:	50                   	push   eax
c0025b69:	0f b7 f6             	movzx  esi,si
c0025b6c:	57                   	push   edi
c0025b6d:	56                   	push   esi
c0025b6e:	e8 a7 fc ff ff       	call   c002581a <Vm::realToLinear(unsigned short, unsigned short)>
c0025b73:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0025b76:	5a                   	pop    edx
c0025b77:	8d 74 24 20          	lea    esi,[esp+0x20]
c0025b7b:	56                   	push   esi
c0025b7c:	50                   	push   eax
c0025b7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025b81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025b85:	55                   	push   ebp
c0025b86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0025b89:	83 c4 14             	add    esp,0x14
c0025b8c:	55                   	push   ebp
c0025b8d:	e8 c8 48 ff ff       	call   c001a45a <File::close()>
c0025b92:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b97:	83 c4 10             	add    esp,0x10
c0025b9a:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025ba1:	48                   	dec    eax
c0025ba2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ba7:	85 c0                	test   eax,eax
c0025ba9:	75 01                	jne    c0025bac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025bab:	fb                   	sti    
c0025bac:	83 ec 0c             	sub    esp,0xc
c0025baf:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025bb5:	e8 4a f5 ff ff       	call   c0025104 <unblockTask(ThreadControlBlock*)>
c0025bba:	83 c4 10             	add    esp,0x10
c0025bbd:	83 c4 2c             	add    esp,0x2c
c0025bc0:	88 d8                	mov    al,bl
c0025bc2:	5b                   	pop    ebx
c0025bc3:	5e                   	pop    esi
c0025bc4:	5f                   	pop    edi
c0025bc5:	5d                   	pop    ebp
c0025bc6:	c3                   	ret    

c0025bc7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025bc7:	57                   	push   edi
c0025bc8:	56                   	push   esi
c0025bc9:	53                   	push   ebx
c0025bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025bce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bd2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025bd6:	83 e8 06             	sub    eax,0x6
c0025bd9:	0f b7 c0             	movzx  eax,ax
c0025bdc:	50                   	push   eax
c0025bdd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025be2:	50                   	push   eax
c0025be3:	e8 32 fc ff ff       	call   c002581a <Vm::realToLinear(unsigned short, unsigned short)>
c0025be8:	5a                   	pop    edx
c0025be9:	59                   	pop    ecx
c0025bea:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025bed:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025bf0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025bf3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025bf9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025bfc:	8d 51 02             	lea    edx,[ecx+0x2]
c0025bff:	66 89 10             	mov    WORD PTR [eax],dx
c0025c02:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025c06:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025c0a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025c0e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0025c11:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025c15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025c1b:	89 f1                	mov    ecx,esi
c0025c1d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025c21:	89 f2                	mov    edx,esi
c0025c23:	0f b6 d6             	movzx  edx,dh
c0025c26:	0f b6 f1             	movzx  esi,cl
c0025c29:	74 0a                	je     c0025c35 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0025c2b:	c1 e2 08             	shl    edx,0x8
c0025c2e:	09 f2                	or     edx,esi
c0025c30:	80 ce 02             	or     dh,0x2
c0025c33:	eb 08                	jmp    c0025c3d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0025c35:	c1 e2 08             	shl    edx,0x8
c0025c38:	09 f2                	or     edx,esi
c0025c3a:	80 e6 fd             	and    dh,0xfd
c0025c3d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025c41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c46:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025c4a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025c52:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025c55:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025c5d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025c60:	5b                   	pop    ebx
c0025c61:	5e                   	pop    esi
c0025c62:	5f                   	pop    edi
c0025c63:	c3                   	ret    

c0025c64 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025c64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c6e:	c1 e0 04             	shl    eax,0x4
c0025c71:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025c74:	c3                   	ret    

c0025c75 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025c75:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c7a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c7f:	c1 e0 04             	shl    eax,0x4
c0025c82:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025c86:	c3                   	ret    

c0025c87 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025c87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c8c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c91:	c1 e0 04             	shl    eax,0x4
c0025c94:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025c97:	c3                   	ret    

c0025c98 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025c98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025ca2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025ca6:	c1 e0 04             	shl    eax,0x4
c0025ca9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025cac:	c3                   	ret    

c0025cad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025cad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025cb2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025cbb:	c1 e0 04             	shl    eax,0x4
c0025cbe:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025cc2:	c3                   	ret    

c0025cc3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025cc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025cc8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025ccd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025cd1:	c1 e0 04             	shl    eax,0x4
c0025cd4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025cd7:	c3                   	ret    

c0025cd8 <Vm::faultHandler(regs*)>:
c0025cd8:	55                   	push   ebp
c0025cd9:	57                   	push   edi
c0025cda:	56                   	push   esi
c0025cdb:	53                   	push   ebx
c0025cdc:	83 ec 2c             	sub    esp,0x2c
c0025cdf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025ce3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ce6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025cea:	0f b7 f8             	movzx  edi,ax
c0025ced:	0f b7 c0             	movzx  eax,ax
c0025cf0:	52                   	push   edx
c0025cf1:	50                   	push   eax
c0025cf2:	e8 23 fb ff ff       	call   c002581a <Vm::realToLinear(unsigned short, unsigned short)>
c0025cf7:	5a                   	pop    edx
c0025cf8:	59                   	pop    ecx
c0025cf9:	89 c1                	mov    ecx,eax
c0025cfb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025cfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025d02:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025d07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025d0b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0025d0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d12:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0025d17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025d1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0025d1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0025d23:	e8 f2 fa ff ff       	call   c002581a <Vm::realToLinear(unsigned short, unsigned short)>
c0025d28:	5e                   	pop    esi
c0025d29:	be 06 00 00 00       	mov    esi,0x6
c0025d2e:	5d                   	pop    ebp
c0025d2f:	31 ed                	xor    ebp,ebp
c0025d31:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025d36:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0025d39:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0025d3f:	0f 84 74 02 00 00    	je     c0025fb9 <Vm::faultHandler(regs*)+0x2e1>
c0025d45:	0f 87 94 00 00 00    	ja     c0025ddf <Vm::faultHandler(regs*)+0x107>
c0025d4b:	83 fa 66             	cmp    edx,0x66
c0025d4e:	0f 84 e2 01 00 00    	je     c0025f36 <Vm::faultHandler(regs*)+0x25e>
c0025d54:	77 47                	ja     c0025d9d <Vm::faultHandler(regs*)+0xc5>
c0025d56:	83 fa 36             	cmp    edx,0x36
c0025d59:	0f 84 ca 01 00 00    	je     c0025f29 <Vm::faultHandler(regs*)+0x251>
c0025d5f:	77 1a                	ja     c0025d7b <Vm::faultHandler(regs*)+0xa3>
c0025d61:	83 fa 26             	cmp    edx,0x26
c0025d64:	0f 84 98 01 00 00    	je     c0025f02 <Vm::faultHandler(regs*)+0x22a>
c0025d6a:	83 fa 2e             	cmp    edx,0x2e
c0025d6d:	0f 85 27 06 00 00    	jne    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025d73:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025d76:	31 f6                	xor    esi,esi
c0025d78:	41                   	inc    ecx
c0025d79:	eb bb                	jmp    c0025d36 <Vm::faultHandler(regs*)+0x5e>
c0025d7b:	83 fa 64             	cmp    edx,0x64
c0025d7e:	0f 84 8b 01 00 00    	je     c0025f0f <Vm::faultHandler(regs*)+0x237>
c0025d84:	0f 87 92 01 00 00    	ja     c0025f1c <Vm::faultHandler(regs*)+0x244>
c0025d8a:	83 fa 3e             	cmp    edx,0x3e
c0025d8d:	0f 85 07 06 00 00    	jne    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025d93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025d96:	be 01 00 00 00       	mov    esi,0x1
c0025d9b:	eb db                	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025d9d:	83 fa 6d             	cmp    edx,0x6d
c0025da0:	0f 84 34 03 00 00    	je     c00260da <Vm::faultHandler(regs*)+0x402>
c0025da6:	77 17                	ja     c0025dbf <Vm::faultHandler(regs*)+0xe7>
c0025da8:	83 fa 67             	cmp    edx,0x67
c0025dab:	0f 84 92 01 00 00    	je     c0025f43 <Vm::faultHandler(regs*)+0x26b>
c0025db1:	83 fa 6c             	cmp    edx,0x6c
c0025db4:	0f 84 b1 02 00 00    	je     c002606b <Vm::faultHandler(regs*)+0x393>
c0025dba:	e9 db 05 00 00       	jmp    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025dbf:	83 fa 6f             	cmp    edx,0x6f
c0025dc2:	0f 84 40 04 00 00    	je     c0026208 <Vm::faultHandler(regs*)+0x530>
c0025dc8:	0f 82 a2 03 00 00    	jb     c0026170 <Vm::faultHandler(regs*)+0x498>
c0025dce:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0025dd4:	0f 84 76 01 00 00    	je     c0025f50 <Vm::faultHandler(regs*)+0x278>
c0025dda:	e9 bb 05 00 00       	jmp    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025ddf:	81 fa ec 00 00 00    	cmp    edx,0xec
c0025de5:	0f 84 57 05 00 00    	je     c0026342 <Vm::faultHandler(regs*)+0x66a>
c0025deb:	0f 87 a9 00 00 00    	ja     c0025e9a <Vm::faultHandler(regs*)+0x1c2>
c0025df1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0025df7:	0f 84 d6 04 00 00    	je     c00262d3 <Vm::faultHandler(regs*)+0x5fb>
c0025dfd:	77 78                	ja     c0025e77 <Vm::faultHandler(regs*)+0x19f>
c0025dff:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0025e05:	0f 84 0e 02 00 00    	je     c0026019 <Vm::faultHandler(regs*)+0x341>
c0025e0b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0025e11:	0f 85 83 05 00 00    	jne    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025e17:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0025e1b:	89 d1                	mov    ecx,edx
c0025e1d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0025e20:	c1 e1 08             	shl    ecx,0x8
c0025e23:	09 ca                	or     edx,ecx
c0025e25:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0025e28:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0025e2c:	89 d1                	mov    ecx,edx
c0025e2e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0025e32:	c1 e1 08             	shl    ecx,0x8
c0025e35:	09 ca                	or     edx,ecx
c0025e37:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0025e3a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0025e3e:	89 d1                	mov    ecx,edx
c0025e40:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0025e44:	c1 e1 08             	shl    ecx,0x8
c0025e47:	09 ca                	or     edx,ecx
c0025e49:	81 ca 00 02 02 00    	or     edx,0x20200
c0025e4f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025e52:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0025e56:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025e5c:	d1 e8                	shr    eax,1
c0025e5e:	83 e0 01             	and    eax,0x1
c0025e61:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0025e64:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025e67:	83 c0 06             	add    eax,0x6
c0025e6a:	25 ff ff 00 00       	and    eax,0xffff
c0025e6f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0025e72:	e9 1f 05 00 00       	jmp    c0026396 <Vm::faultHandler(regs*)+0x6be>
c0025e77:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0025e7d:	0f 84 95 04 00 00    	je     c0026318 <Vm::faultHandler(regs*)+0x640>
c0025e83:	0f 82 66 04 00 00    	jb     c00262ef <Vm::faultHandler(regs*)+0x617>
c0025e89:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0025e8f:	0f 84 9a 04 00 00    	je     c002632f <Vm::faultHandler(regs*)+0x657>
c0025e95:	e9 00 05 00 00       	jmp    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025e9a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0025ea0:	0f 84 dd 04 00 00    	je     c0026383 <Vm::faultHandler(regs*)+0x6ab>
c0025ea6:	77 2e                	ja     c0025ed6 <Vm::faultHandler(regs*)+0x1fe>
c0025ea8:	81 fa ed 00 00 00    	cmp    edx,0xed
c0025eae:	0f 84 aa 04 00 00    	je     c002635e <Vm::faultHandler(regs*)+0x686>
c0025eb4:	81 fa ee 00 00 00    	cmp    edx,0xee
c0025eba:	0f 85 da 04 00 00    	jne    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025ec0:	50                   	push   eax
c0025ec1:	50                   	push   eax
c0025ec2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0025ec6:	50                   	push   eax
c0025ec7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0025ecb:	50                   	push   eax
c0025ecc:	e8 13 f9 ff ff       	call   c00257e4 <Vm::outbv(unsigned short, unsigned char)>
c0025ed1:	e9 a5 04 00 00       	jmp    c002637b <Vm::faultHandler(regs*)+0x6a3>
c0025ed6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0025edc:	0f 84 6d 01 00 00    	je     c002604f <Vm::faultHandler(regs*)+0x377>
c0025ee2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0025ee8:	0f 84 6f 01 00 00    	je     c002605d <Vm::faultHandler(regs*)+0x385>
c0025eee:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0025ef4:	0f 85 a0 04 00 00    	jne    c002639a <Vm::faultHandler(regs*)+0x6c2>
c0025efa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025efd:	e9 76 fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f05:	be 02 00 00 00       	mov    esi,0x2
c0025f0a:	e9 69 fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f12:	be 03 00 00 00       	mov    esi,0x3
c0025f17:	e9 5c fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f1c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f1f:	be 04 00 00 00       	mov    esi,0x4
c0025f24:	e9 4f fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f2c:	be 05 00 00 00       	mov    esi,0x5
c0025f31:	e9 42 fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f36:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f39:	bd 01 00 00 00       	mov    ebp,0x1
c0025f3e:	e9 35 fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025f46:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0025f4b:	e9 28 fe ff ff       	jmp    c0025d78 <Vm::faultHandler(regs*)+0xa0>
c0025f50:	83 e5 01             	and    ebp,0x1
c0025f53:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0025f56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f5a:	74 30                	je     c0025f8c <Vm::faultHandler(regs*)+0x2b4>
c0025f5c:	83 e9 04             	sub    ecx,0x4
c0025f5f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0025f65:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0025f6b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0025f6e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025f71:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025f77:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0025f7b:	0f 84 12 04 00 00    	je     c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0025f81:	80 ce 02             	or     dh,0x2
c0025f84:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025f87:	e9 07 04 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0025f8c:	83 e9 02             	sub    ecx,0x2
c0025f8f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0025f95:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0025f98:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0025f9c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025fa2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0025fa6:	74 05                	je     c0025fad <Vm::faultHandler(regs*)+0x2d5>
c0025fa8:	80 ce 02             	or     dh,0x2
c0025fab:	eb 03                	jmp    c0025fb0 <Vm::faultHandler(regs*)+0x2d8>
c0025fad:	80 e6 fd             	and    dh,0xfd
c0025fb0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0025fb4:	e9 da 03 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0025fb9:	83 e5 01             	and    ebp,0x1
c0025fbc:	74 2a                	je     c0025fe8 <Vm::faultHandler(regs*)+0x310>
c0025fbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0025fc0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0025fc6:	81 ca 00 02 02 00    	or     edx,0x20200
c0025fcc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025fd7:	c1 e8 09             	shr    eax,0x9
c0025fda:	83 e0 01             	and    eax,0x1
c0025fdd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0025fe0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025fe3:	83 c0 04             	add    eax,0x4
c0025fe6:	eb 24                	jmp    c002600c <Vm::faultHandler(regs*)+0x334>
c0025fe8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0025feb:	81 ca 00 02 02 00    	or     edx,0x20200
c0025ff1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025ff4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0025ff7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025ffd:	c1 e8 09             	shr    eax,0x9
c0026000:	83 e0 01             	and    eax,0x1
c0026003:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026006:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026009:	83 c0 02             	add    eax,0x2
c002600c:	25 ff ff 00 00       	and    eax,0xffff
c0026011:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026014:	e9 7a 03 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0026019:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002601d:	3d ee 00 00 00       	cmp    eax,0xee
c0026022:	75 10                	jne    c0026034 <Vm::faultHandler(regs*)+0x35c>
c0026024:	83 ec 0c             	sub    esp,0xc
c0026027:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c002602a:	e8 52 f8 ff ff       	call   c0025881 <Vm::mainloop3(unsigned long)>
c002602f:	e9 4a 03 00 00       	jmp    c002637e <Vm::faultHandler(regs*)+0x6a6>
c0026034:	83 ec 0c             	sub    esp,0xc
c0026037:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002603b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002603f:	51                   	push   ecx
c0026040:	50                   	push   eax
c0026041:	53                   	push   ebx
c0026042:	e8 80 fb ff ff       	call   c0025bc7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026047:	83 c4 20             	add    esp,0x20
c002604a:	e9 47 03 00 00       	jmp    c0026396 <Vm::faultHandler(regs*)+0x6be>
c002604f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026054:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026058:	e9 36 03 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c002605d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026062:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026066:	e9 28 03 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c002606b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026070:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026073:	74 2b                	je     c00260a0 <Vm::faultHandler(regs*)+0x3c8>
c0026075:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002607c:	76 22                	jbe    c00260a0 <Vm::faultHandler(regs*)+0x3c8>
c002607e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026082:	50                   	push   eax
c0026083:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026087:	50                   	push   eax
c0026088:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002608c:	50                   	push   eax
c002608d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026091:	50                   	push   eax
c0026092:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026096:	50                   	push   eax
c0026097:	6a 6c                	push   0x6c
c0026099:	6a 6c                	push   0x6c
c002609b:	e9 c0 01 00 00       	jmp    c0026260 <Vm::faultHandler(regs*)+0x588>
c00260a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00260a4:	83 ec 0c             	sub    esp,0xc
c00260a7:	0f b7 f6             	movzx  esi,si
c00260aa:	50                   	push   eax
c00260ab:	e8 21 f7 ff ff       	call   c00257d1 <Vm::inbv(unsigned short)>
c00260b0:	83 c4 0c             	add    esp,0xc
c00260b3:	0f b6 c0             	movzx  eax,al
c00260b6:	50                   	push   eax
c00260b7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00260bb:	50                   	push   eax
c00260bc:	56                   	push   esi
c00260bd:	e8 d6 fb ff ff       	call   c0025c98 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00260c2:	83 c4 10             	add    esp,0x10
c00260c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00260c8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00260cc:	74 03                	je     c00260d1 <Vm::faultHandler(regs*)+0x3f9>
c00260ce:	48                   	dec    eax
c00260cf:	eb 01                	jmp    c00260d2 <Vm::faultHandler(regs*)+0x3fa>
c00260d1:	40                   	inc    eax
c00260d2:	0f b7 c0             	movzx  eax,ax
c00260d5:	e9 8e 00 00 00       	jmp    c0026168 <Vm::faultHandler(regs*)+0x490>
c00260da:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00260df:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00260e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00260e5:	74 29                	je     c0026110 <Vm::faultHandler(regs*)+0x438>
c00260e7:	3d ff ff 00 00       	cmp    eax,0xffff
c00260ec:	76 22                	jbe    c0026110 <Vm::faultHandler(regs*)+0x438>
c00260ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00260f2:	50                   	push   eax
c00260f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00260f7:	50                   	push   eax
c00260f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00260fc:	50                   	push   eax
c00260fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026101:	50                   	push   eax
c0026102:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026106:	50                   	push   eax
c0026107:	6a 6d                	push   0x6d
c0026109:	6a 6d                	push   0x6d
c002610b:	e9 50 01 00 00       	jmp    c0026260 <Vm::faultHandler(regs*)+0x588>
c0026110:	83 e5 01             	and    ebp,0x1
c0026113:	0f b7 c8             	movzx  ecx,ax
c0026116:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026119:	0f b7 f6             	movzx  esi,si
c002611c:	74 1e                	je     c002613c <Vm::faultHandler(regs*)+0x464>
c002611e:	ed                   	in     eax,dx
c002611f:	55                   	push   ebp
c0026120:	50                   	push   eax
c0026121:	51                   	push   ecx
c0026122:	56                   	push   esi
c0026123:	e8 9b fb ff ff       	call   c0025cc3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026128:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002612b:	83 c4 10             	add    esp,0x10
c002612e:	8d 50 04             	lea    edx,[eax+0x4]
c0026131:	83 e8 04             	sub    eax,0x4
c0026134:	81 e2 ff ff 00 00    	and    edx,0xffff
c002613a:	eb 20                	jmp    c002615c <Vm::faultHandler(regs*)+0x484>
c002613c:	66 ed                	in     ax,dx
c002613e:	57                   	push   edi
c002613f:	0f b7 c0             	movzx  eax,ax
c0026142:	50                   	push   eax
c0026143:	51                   	push   ecx
c0026144:	56                   	push   esi
c0026145:	e8 63 fb ff ff       	call   c0025cad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c002614a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002614d:	83 c4 10             	add    esp,0x10
c0026150:	8d 50 02             	lea    edx,[eax+0x2]
c0026153:	83 e8 02             	sub    eax,0x2
c0026156:	81 e2 ff ff 00 00    	and    edx,0xffff
c002615c:	25 ff ff 00 00       	and    eax,0xffff
c0026161:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026165:	0f 44 c2             	cmove  eax,edx
c0026168:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c002616b:	e9 23 02 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0026170:	8d 46 ff             	lea    eax,[esi-0x1]
c0026173:	0f b6 f0             	movzx  esi,al
c0026176:	83 fe 05             	cmp    esi,0x5
c0026179:	77 23                	ja     c002619e <Vm::faultHandler(regs*)+0x4c6>
c002617b:	ff 24 b5 98 2c 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd368]
c0026182:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026187:	eb 15                	jmp    c002619e <Vm::faultHandler(regs*)+0x4c6>
c0026189:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002618d:	eb 0f                	jmp    c002619e <Vm::faultHandler(regs*)+0x4c6>
c002618f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026193:	eb 09                	jmp    c002619e <Vm::faultHandler(regs*)+0x4c6>
c0026195:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026199:	eb 03                	jmp    c002619e <Vm::faultHandler(regs*)+0x4c6>
c002619b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002619e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00261a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00261a6:	74 29                	je     c00261d1 <Vm::faultHandler(regs*)+0x4f9>
c00261a8:	3d ff ff 00 00       	cmp    eax,0xffff
c00261ad:	76 22                	jbe    c00261d1 <Vm::faultHandler(regs*)+0x4f9>
c00261af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00261b3:	50                   	push   eax
c00261b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00261b8:	50                   	push   eax
c00261b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00261bd:	50                   	push   eax
c00261be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00261c2:	50                   	push   eax
c00261c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00261c7:	50                   	push   eax
c00261c8:	6a 6e                	push   0x6e
c00261ca:	6a 6e                	push   0x6e
c00261cc:	e9 8f 00 00 00       	jmp    c0026260 <Vm::faultHandler(regs*)+0x588>
c00261d1:	52                   	push   edx
c00261d2:	0f b7 c0             	movzx  eax,ax
c00261d5:	52                   	push   edx
c00261d6:	50                   	push   eax
c00261d7:	57                   	push   edi
c00261d8:	e8 87 fa ff ff       	call   c0025c64 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00261dd:	59                   	pop    ecx
c00261de:	5e                   	pop    esi
c00261df:	0f b6 c0             	movzx  eax,al
c00261e2:	50                   	push   eax
c00261e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00261e7:	50                   	push   eax
c00261e8:	e8 f7 f5 ff ff       	call   c00257e4 <Vm::outbv(unsigned short, unsigned char)>
c00261ed:	83 c4 10             	add    esp,0x10
c00261f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00261f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00261f7:	74 03                	je     c00261fc <Vm::faultHandler(regs*)+0x524>
c00261f9:	48                   	dec    eax
c00261fa:	eb 01                	jmp    c00261fd <Vm::faultHandler(regs*)+0x525>
c00261fc:	40                   	inc    eax
c00261fd:	0f b7 c0             	movzx  eax,ax
c0026200:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026203:	e9 8b 01 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0026208:	8d 46 ff             	lea    eax,[esi-0x1]
c002620b:	0f b6 f0             	movzx  esi,al
c002620e:	83 fe 05             	cmp    esi,0x5
c0026211:	77 1e                	ja     c0026231 <Vm::faultHandler(regs*)+0x559>
c0026213:	ff 24 b5 b0 2c 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd350]
c002621a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002621e:	eb 11                	jmp    c0026231 <Vm::faultHandler(regs*)+0x559>
c0026220:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026223:	eb 0c                	jmp    c0026231 <Vm::faultHandler(regs*)+0x559>
c0026225:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026228:	eb 07                	jmp    c0026231 <Vm::faultHandler(regs*)+0x559>
c002622a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c002622d:	eb 02                	jmp    c0026231 <Vm::faultHandler(regs*)+0x559>
c002622f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026231:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026236:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026239:	74 37                	je     c0026272 <Vm::faultHandler(regs*)+0x59a>
c002623b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026241:	76 2f                	jbe    c0026272 <Vm::faultHandler(regs*)+0x59a>
c0026243:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026247:	50                   	push   eax
c0026248:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002624c:	50                   	push   eax
c002624d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026251:	50                   	push   eax
c0026252:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026256:	50                   	push   eax
c0026257:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002625b:	50                   	push   eax
c002625c:	6a 6f                	push   0x6f
c002625e:	6a 6f                	push   0x6f
c0026260:	68 3c 2c 03 c0       	push   0xc0032c3c
c0026265:	e8 5c 2f ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002626a:	83 c4 20             	add    esp,0x20
c002626d:	e9 86 01 00 00       	jmp    c00263f8 <Vm::faultHandler(regs*)+0x720>
c0026272:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026275:	0f b7 d7             	movzx  edx,di
c0026278:	0f b7 c6             	movzx  eax,si
c002627b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c002627e:	81 e1 00 04 00 00    	and    ecx,0x400
c0026284:	83 e5 01             	and    ebp,0x1
c0026287:	74 1c                	je     c00262a5 <Vm::faultHandler(regs*)+0x5cd>
c0026289:	55                   	push   ebp
c002628a:	55                   	push   ebp
c002628b:	50                   	push   eax
c002628c:	52                   	push   edx
c002628d:	e8 f5 f9 ff ff       	call   c0025c87 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026292:	83 c4 10             	add    esp,0x10
c0026295:	89 fa                	mov    edx,edi
c0026297:	ef                   	out    dx,eax
c0026298:	8d 46 04             	lea    eax,[esi+0x4]
c002629b:	83 ee 04             	sub    esi,0x4
c002629e:	25 ff ff 00 00       	and    eax,0xffff
c00262a3:	eb 1b                	jmp    c00262c0 <Vm::faultHandler(regs*)+0x5e8>
c00262a5:	55                   	push   ebp
c00262a6:	55                   	push   ebp
c00262a7:	50                   	push   eax
c00262a8:	52                   	push   edx
c00262a9:	e8 c7 f9 ff ff       	call   c0025c75 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00262ae:	83 c4 10             	add    esp,0x10
c00262b1:	89 fa                	mov    edx,edi
c00262b3:	66 ef                	out    dx,ax
c00262b5:	8d 46 02             	lea    eax,[esi+0x2]
c00262b8:	83 ee 02             	sub    esi,0x2
c00262bb:	25 ff ff 00 00       	and    eax,0xffff
c00262c0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00262c6:	85 c9                	test   ecx,ecx
c00262c8:	0f 44 f0             	cmove  esi,eax
c00262cb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00262ce:	e9 c0 00 00 00       	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c00262d3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00262da:	83 ec 0c             	sub    esp,0xc
c00262dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00262e1:	50                   	push   eax
c00262e2:	e8 ea f4 ff ff       	call   c00257d1 <Vm::inbv(unsigned short)>
c00262e7:	0f b6 c0             	movzx  eax,al
c00262ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00262ed:	eb 3a                	jmp    c0026329 <Vm::faultHandler(regs*)+0x651>
c00262ef:	83 e5 01             	and    ebp,0x1
c00262f2:	74 07                	je     c00262fb <Vm::faultHandler(regs*)+0x623>
c00262f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00262f8:	ed                   	in     eax,dx
c00262f9:	eb 14                	jmp    c002630f <Vm::faultHandler(regs*)+0x637>
c00262fb:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00262fe:	66 31 f6             	xor    si,si
c0026301:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026304:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026308:	66 ed                	in     ax,dx
c002630a:	0f b7 c0             	movzx  eax,ax
c002630d:	09 f0                	or     eax,esi
c002630f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026312:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026316:	eb 7e                	jmp    c0026396 <Vm::faultHandler(regs*)+0x6be>
c0026318:	52                   	push   edx
c0026319:	52                   	push   edx
c002631a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002631e:	50                   	push   eax
c002631f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026323:	50                   	push   eax
c0026324:	e8 bb f4 ff ff       	call   c00257e4 <Vm::outbv(unsigned short, unsigned char)>
c0026329:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002632d:	eb 4f                	jmp    c002637e <Vm::faultHandler(regs*)+0x6a6>
c002632f:	83 e5 01             	and    ebp,0x1
c0026332:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026335:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026339:	74 03                	je     c002633e <Vm::faultHandler(regs*)+0x666>
c002633b:	ef                   	out    dx,eax
c002633c:	eb d4                	jmp    c0026312 <Vm::faultHandler(regs*)+0x63a>
c002633e:	66 ef                	out    dx,ax
c0026340:	eb d0                	jmp    c0026312 <Vm::faultHandler(regs*)+0x63a>
c0026342:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026346:	83 ec 0c             	sub    esp,0xc
c0026349:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026350:	50                   	push   eax
c0026351:	e8 7b f4 ff ff       	call   c00257d1 <Vm::inbv(unsigned short)>
c0026356:	0f b6 c0             	movzx  eax,al
c0026359:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002635c:	eb 1d                	jmp    c002637b <Vm::faultHandler(regs*)+0x6a3>
c002635e:	83 e5 01             	and    ebp,0x1
c0026361:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026364:	74 03                	je     c0026369 <Vm::faultHandler(regs*)+0x691>
c0026366:	ed                   	in     eax,dx
c0026367:	eb 0d                	jmp    c0026376 <Vm::faultHandler(regs*)+0x69e>
c0026369:	66 ed                	in     ax,dx
c002636b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c002636e:	0f b7 c0             	movzx  eax,ax
c0026371:	66 31 d2             	xor    dx,dx
c0026374:	09 d0                	or     eax,edx
c0026376:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026379:	eb 18                	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c002637b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002637e:	83 c4 10             	add    esp,0x10
c0026381:	eb 13                	jmp    c0026396 <Vm::faultHandler(regs*)+0x6be>
c0026383:	83 e5 01             	and    ebp,0x1
c0026386:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026389:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002638c:	74 03                	je     c0026391 <Vm::faultHandler(regs*)+0x6b9>
c002638e:	ef                   	out    dx,eax
c002638f:	eb 02                	jmp    c0026393 <Vm::faultHandler(regs*)+0x6bb>
c0026391:	66 ef                	out    dx,ax
c0026393:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026396:	b0 01                	mov    al,0x1
c0026398:	eb 60                	jmp    c00263fa <Vm::faultHandler(regs*)+0x722>
c002639a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002639e:	50                   	push   eax
c002639f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00263a3:	50                   	push   eax
c00263a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00263a8:	50                   	push   eax
c00263a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00263ad:	50                   	push   eax
c00263ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263b2:	50                   	push   eax
c00263b3:	52                   	push   edx
c00263b4:	52                   	push   edx
c00263b5:	68 69 2c 03 c0       	push   0xc0032c69
c00263ba:	e8 07 2e ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00263bf:	83 c4 20             	add    esp,0x20
c00263c2:	83 ec 0c             	sub    esp,0xc
c00263c5:	6a 60                	push   0x60
c00263c7:	e8 05 f4 ff ff       	call   c00257d1 <Vm::inbv(unsigned short)>
c00263cc:	83 c4 10             	add    esp,0x10
c00263cf:	0f b6 d0             	movzx  edx,al
c00263d2:	83 fa 1c             	cmp    edx,0x1c
c00263d5:	74 05                	je     c00263dc <Vm::faultHandler(regs*)+0x704>
c00263d7:	83 fa 5a             	cmp    edx,0x5a
c00263da:	75 e6                	jne    c00263c2 <Vm::faultHandler(regs*)+0x6ea>
c00263dc:	0f b6 c0             	movzx  eax,al
c00263df:	83 f8 1c             	cmp    eax,0x1c
c00263e2:	74 05                	je     c00263e9 <Vm::faultHandler(regs*)+0x711>
c00263e4:	83 f8 5a             	cmp    eax,0x5a
c00263e7:	75 0f                	jne    c00263f8 <Vm::faultHandler(regs*)+0x720>
c00263e9:	83 ec 0c             	sub    esp,0xc
c00263ec:	6a 60                	push   0x60
c00263ee:	e8 de f3 ff ff       	call   c00257d1 <Vm::inbv(unsigned short)>
c00263f3:	83 c4 10             	add    esp,0x10
c00263f6:	eb e4                	jmp    c00263dc <Vm::faultHandler(regs*)+0x704>
c00263f8:	31 c0                	xor    eax,eax
c00263fa:	83 c4 2c             	add    esp,0x2c
c00263fd:	5b                   	pop    ebx
c00263fe:	5e                   	pop    esi
c00263ff:	5f                   	pop    edi
c0026400:	5d                   	pop    ebp
c0026401:	c3                   	ret    

c0026402 <noCopro(unsigned long)>:
c0026402:	c3                   	ret    

c0026403 <nmiHandler(regs*, void*)>:
c0026403:	83 ec 0c             	sub    esp,0xc
c0026406:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002640b:	83 ec 0c             	sub    esp,0xc
c002640e:	50                   	push   eax
c002640f:	e8 80 f7 fe ff       	call   c0015b94 <Computer::handleNMI()>
c0026414:	83 c4 10             	add    esp,0x10
c0026417:	90                   	nop
c0026418:	83 c4 0c             	add    esp,0xc
c002641b:	c3                   	ret    

c002641c <doubleFault(regs*, void*)>:
c002641c:	55                   	push   ebp
c002641d:	89 e5                	mov    ebp,esp
c002641f:	83 ec 08             	sub    esp,0x8
c0026422:	83 ec 0c             	sub    esp,0xc
c0026425:	68 c8 2c 03 c0       	push   0xc0032cc8
c002642a:	e8 44 9c ff ff       	call   c0020073 <KePanic(char const*)>
c002642f:	83 c4 10             	add    esp,0x10
c0026432:	90                   	nop
c0026433:	c9                   	leave  
c0026434:	c3                   	ret    

c0026435 <displayDebugInfo(regs*)>:
c0026435:	83 ec 1c             	sub    esp,0x1c
c0026438:	0f 20 c0             	mov    eax,cr0
c002643b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002643f:	0f 20 d0             	mov    eax,cr2
c0026442:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026446:	0f 20 d8             	mov    eax,cr3
c0026449:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002644d:	0f 20 e0             	mov    eax,cr4
c0026450:	89 04 24             	mov    DWORD PTR [esp],eax
c0026453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026457:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002645a:	83 ec 08             	sub    esp,0x8
c002645d:	50                   	push   eax
c002645e:	68 e4 2c 03 c0       	push   0xc0032ce4
c0026463:	e8 5e 2d ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026468:	83 c4 10             	add    esp,0x10
c002646b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002646f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026472:	83 ec 08             	sub    esp,0x8
c0026475:	50                   	push   eax
c0026476:	68 d5 2c 03 c0       	push   0xc0032cd5
c002647b:	e8 46 2d ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026480:	83 c4 10             	add    esp,0x10
c0026483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026487:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c002648a:	83 ec 08             	sub    esp,0x8
c002648d:	50                   	push   eax
c002648e:	68 e0 2c 03 c0       	push   0xc0032ce0
c0026493:	e8 2e 2d ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026498:	83 c4 10             	add    esp,0x10
c002649b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002649f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00264a2:	83 ec 08             	sub    esp,0x8
c00264a5:	50                   	push   eax
c00264a6:	68 ef 2c 03 c0       	push   0xc0032cef
c00264ab:	e8 16 2d ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00264b0:	83 c4 10             	add    esp,0x10
c00264b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264b7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00264ba:	83 ec 08             	sub    esp,0x8
c00264bd:	50                   	push   eax
c00264be:	68 fa 2c 03 c0       	push   0xc0032cfa
c00264c3:	e8 fe 2c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00264c8:	83 c4 10             	add    esp,0x10
c00264cb:	83 ec 08             	sub    esp,0x8
c00264ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00264d2:	68 05 2d 03 c0       	push   0xc0032d05
c00264d7:	e8 ea 2c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00264dc:	83 c4 10             	add    esp,0x10
c00264df:	83 ec 08             	sub    esp,0x8
c00264e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00264e6:	68 10 2d 03 c0       	push   0xc0032d10
c00264eb:	e8 d6 2c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00264f0:	83 c4 10             	add    esp,0x10
c00264f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264f7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00264fa:	c1 e0 05             	shl    eax,0x5
c00264fd:	8d 90 a0 40 03 c0    	lea    edx,[eax-0x3ffcbf60]
c0026503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026507:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c002650a:	83 ec 04             	sub    esp,0x4
c002650d:	52                   	push   edx
c002650e:	50                   	push   eax
c002650f:	68 1b 2d 03 c0       	push   0xc0032d1b
c0026514:	e8 ad 2c ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026519:	83 c4 10             	add    esp,0x10
c002651c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026521:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026527:	83 ec 0c             	sub    esp,0xc
c002652a:	50                   	push   eax
c002652b:	e8 fb 0a ff ff       	call   c001702b <setActiveTerminal(VgaText*)>
c0026530:	83 c4 10             	add    esp,0x10
c0026533:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026538:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002653e:	83 ec 08             	sub    esp,0x8
c0026541:	68 2a 2d 03 c0       	push   0xc0032d2a
c0026546:	50                   	push   eax
c0026547:	e8 1c 0e ff ff       	call   c0017368 <VgaText::puts(char const*)>
c002654c:	83 c4 10             	add    esp,0x10
c002654f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026554:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002655a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002655e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026561:	83 ec 08             	sub    esp,0x8
c0026564:	52                   	push   edx
c0026565:	50                   	push   eax
c0026566:	e8 b7 0d ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c002656b:	83 c4 10             	add    esp,0x10
c002656e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026573:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026579:	83 ec 08             	sub    esp,0x8
c002657c:	68 38 2d 03 c0       	push   0xc0032d38
c0026581:	50                   	push   eax
c0026582:	e8 e1 0d ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026587:	83 c4 10             	add    esp,0x10
c002658a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002658f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026595:	ba 00 20 00 c2       	mov    edx,0xc2002000
c002659a:	8b 12                	mov    edx,DWORD PTR [edx]
c002659c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002659f:	83 c2 0c             	add    edx,0xc
c00265a2:	83 ec 08             	sub    esp,0x8
c00265a5:	52                   	push   edx
c00265a6:	50                   	push   eax
c00265a7:	e8 bc 0d ff ff       	call   c0017368 <VgaText::puts(char const*)>
c00265ac:	83 c4 10             	add    esp,0x10
c00265af:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265ba:	83 ec 08             	sub    esp,0x8
c00265bd:	68 41 2d 03 c0       	push   0xc0032d41
c00265c2:	50                   	push   eax
c00265c3:	e8 a0 0d ff ff       	call   c0017368 <VgaText::puts(char const*)>
c00265c8:	83 c4 10             	add    esp,0x10
c00265cb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00265da:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00265dd:	83 ec 08             	sub    esp,0x8
c00265e0:	52                   	push   edx
c00265e1:	50                   	push   eax
c00265e2:	e8 3b 0d ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c00265e7:	83 c4 10             	add    esp,0x10
c00265ea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265f5:	83 ec 08             	sub    esp,0x8
c00265f8:	68 49 2d 03 c0       	push   0xc0032d49
c00265fd:	50                   	push   eax
c00265fe:	e8 65 0d ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026603:	83 c4 10             	add    esp,0x10
c0026606:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002660b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026611:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026615:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026618:	83 ec 08             	sub    esp,0x8
c002661b:	52                   	push   edx
c002661c:	50                   	push   eax
c002661d:	e8 00 0d ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c0026622:	83 c4 10             	add    esp,0x10
c0026625:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002662a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026630:	83 ec 08             	sub    esp,0x8
c0026633:	68 51 2d 03 c0       	push   0xc0032d51
c0026638:	50                   	push   eax
c0026639:	e8 2a 0d ff ff       	call   c0017368 <VgaText::puts(char const*)>
c002663e:	83 c4 10             	add    esp,0x10
c0026641:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026646:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002664c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026650:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026653:	83 ec 08             	sub    esp,0x8
c0026656:	52                   	push   edx
c0026657:	50                   	push   eax
c0026658:	e8 c5 0c ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c002665d:	83 c4 10             	add    esp,0x10
c0026660:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026665:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002666b:	83 ec 08             	sub    esp,0x8
c002666e:	68 59 2d 03 c0       	push   0xc0032d59
c0026673:	50                   	push   eax
c0026674:	e8 ef 0c ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026679:	83 c4 10             	add    esp,0x10
c002667c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026681:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026687:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002668b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002668e:	83 ec 08             	sub    esp,0x8
c0026691:	52                   	push   edx
c0026692:	50                   	push   eax
c0026693:	e8 8a 0c ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c0026698:	83 c4 10             	add    esp,0x10
c002669b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266a6:	83 ec 08             	sub    esp,0x8
c00266a9:	68 61 2d 03 c0       	push   0xc0032d61
c00266ae:	50                   	push   eax
c00266af:	e8 b4 0c ff ff       	call   c0017368 <VgaText::puts(char const*)>
c00266b4:	83 c4 10             	add    esp,0x10
c00266b7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00266c6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00266c9:	83 ec 08             	sub    esp,0x8
c00266cc:	52                   	push   edx
c00266cd:	50                   	push   eax
c00266ce:	e8 4f 0c ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c00266d3:	83 c4 10             	add    esp,0x10
c00266d6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266e1:	83 ec 08             	sub    esp,0x8
c00266e4:	68 69 2d 03 c0       	push   0xc0032d69
c00266e9:	50                   	push   eax
c00266ea:	e8 79 0c ff ff       	call   c0017368 <VgaText::puts(char const*)>
c00266ef:	83 c4 10             	add    esp,0x10
c00266f2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026701:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026704:	83 ec 08             	sub    esp,0x8
c0026707:	52                   	push   edx
c0026708:	50                   	push   eax
c0026709:	e8 14 0c ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c002670e:	83 c4 10             	add    esp,0x10
c0026711:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026716:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002671c:	83 ec 08             	sub    esp,0x8
c002671f:	68 71 2d 03 c0       	push   0xc0032d71
c0026724:	50                   	push   eax
c0026725:	e8 3e 0c ff ff       	call   c0017368 <VgaText::puts(char const*)>
c002672a:	83 c4 10             	add    esp,0x10
c002672d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026732:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026738:	83 ec 08             	sub    esp,0x8
c002673b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002673f:	50                   	push   eax
c0026740:	e8 dd 0b ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c0026745:	83 c4 10             	add    esp,0x10
c0026748:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002674d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026753:	83 ec 08             	sub    esp,0x8
c0026756:	68 7a 2d 03 c0       	push   0xc0032d7a
c002675b:	50                   	push   eax
c002675c:	e8 07 0c ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026761:	83 c4 10             	add    esp,0x10
c0026764:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026769:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002676f:	83 ec 08             	sub    esp,0x8
c0026772:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026776:	50                   	push   eax
c0026777:	e8 a6 0b ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c002677c:	83 c4 10             	add    esp,0x10
c002677f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026784:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002678a:	83 ec 08             	sub    esp,0x8
c002678d:	68 82 2d 03 c0       	push   0xc0032d82
c0026792:	50                   	push   eax
c0026793:	e8 d0 0b ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026798:	83 c4 10             	add    esp,0x10
c002679b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00267a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00267a6:	83 ec 08             	sub    esp,0x8
c00267a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00267ad:	50                   	push   eax
c00267ae:	e8 6f 0b ff ff       	call   c0017322 <VgaText::putx(unsigned int)>
c00267b3:	83 c4 10             	add    esp,0x10
c00267b6:	fa                   	cli    
c00267b7:	f4                   	hlt    
c00267b8:	eb fe                	jmp    c00267b8 <displayDebugInfo(regs*)+0x383>

c00267ba <HalSystemIdle()>:
c00267ba:	56                   	push   esi
c00267bb:	53                   	push   ebx
c00267bc:	83 ec 14             	sub    esp,0x14
c00267bf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00267ca:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00267d0:	83 e0 04             	and    eax,0x4
c00267d3:	0f b6 c0             	movzx  eax,al
c00267d6:	85 c0                	test   eax,eax
c00267d8:	0f 95 c0             	setne  al
c00267db:	0f b6 c0             	movzx  eax,al
c00267de:	85 c0                	test   eax,eax
c00267e0:	74 4c                	je     c002682e <HalSystemIdle()+0x74>
c00267e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267e7:	83 ec 08             	sub    esp,0x8
c00267ea:	68 e1 00 00 00       	push   0xe1
c00267ef:	50                   	push   eax
c00267f0:	e8 ab f1 fe ff       	call   c00159a0 <Computer::rdmsr(unsigned int)>
c00267f5:	83 c4 10             	add    esp,0x10
c00267f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026800:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026805:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026809:	83 e2 02             	and    edx,0x2
c002680c:	89 d3                	mov    ebx,edx
c002680e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026812:	83 e2 00             	and    edx,0x0
c0026815:	89 d6                	mov    esi,edx
c0026817:	56                   	push   esi
c0026818:	53                   	push   ebx
c0026819:	68 e1 00 00 00       	push   0xe1
c002681e:	50                   	push   eax
c002681f:	e8 a8 f1 fe ff       	call   c00159cc <Computer::wrmsr(unsigned int, unsigned long long)>
c0026824:	83 c4 10             	add    esp,0x10
c0026827:	e8 68 99 fd ff       	call   c0000194 <doTPAUSE>
c002682c:	eb 01                	jmp    c002682f <HalSystemIdle()+0x75>
c002682e:	f4                   	hlt    
c002682f:	90                   	nop
c0026830:	83 c4 14             	add    esp,0x14
c0026833:	5b                   	pop    ebx
c0026834:	5e                   	pop    esi
c0026835:	c3                   	ret    

c0026836 <displayProgramFault(char const*)>:
c0026836:	83 ec 0c             	sub    esp,0xc
c0026839:	83 ec 0c             	sub    esp,0xc
c002683c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026840:	e8 81 29 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026845:	83 c4 10             	add    esp,0x10
c0026848:	b8 00 20 00 c2       	mov    eax,0xc2002000
c002684d:	8b 00                	mov    eax,DWORD PTR [eax]
c002684f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026852:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026858:	85 c0                	test   eax,eax
c002685a:	74 21                	je     c002687d <displayProgramFault(char const*)+0x47>
c002685c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026861:	8b 00                	mov    eax,DWORD PTR [eax]
c0026863:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026866:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002686c:	6a 04                	push   0x4
c002686e:	6a 0f                	push   0xf
c0026870:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026874:	50                   	push   eax
c0026875:	e8 60 0b ff ff       	call   c00173da <VgaText::puts(char const*, VgaColour, VgaColour)>
c002687a:	83 c4 10             	add    esp,0x10
c002687d:	90                   	nop
c002687e:	83 c4 0c             	add    esp,0xc
c0026881:	c3                   	ret    

c0026882 <gpFault(regs*, void*)>:
c0026882:	83 ec 1c             	sub    esp,0x1c
c0026885:	c7 05 74 02 04 c0 d8 5c 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025cd8
c002688f:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026894:	85 c0                	test   eax,eax
c0026896:	74 1e                	je     c00268b6 <gpFault(regs*, void*)+0x34>
c0026898:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c002689d:	83 ec 0c             	sub    esp,0xc
c00268a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00268a4:	ff d0                	call   eax
c00268a6:	83 c4 10             	add    esp,0x10
c00268a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00268ad:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00268b2:	85 c0                	test   eax,eax
c00268b4:	75 2e                	jne    c00268e4 <gpFault(regs*, void*)+0x62>
c00268b6:	83 ec 0c             	sub    esp,0xc
c00268b9:	68 8a 2d 03 c0       	push   0xc0032d8a
c00268be:	e8 73 ff ff ff       	call   c0026836 <displayProgramFault(char const*)>
c00268c3:	83 c4 10             	add    esp,0x10
c00268c6:	83 ec 0c             	sub    esp,0xc
c00268c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00268cd:	e8 63 fb ff ff       	call   c0026435 <displayDebugInfo(regs*)>
c00268d2:	83 c4 10             	add    esp,0x10
c00268d5:	83 ec 0c             	sub    esp,0xc
c00268d8:	6a 00                	push   0x0
c00268da:	e8 99 ed ff ff       	call   c0025678 <Thr::terminateFromIRQ(int)>
c00268df:	83 c4 10             	add    esp,0x10
c00268e2:	eb 01                	jmp    c00268e5 <gpFault(regs*, void*)+0x63>
c00268e4:	90                   	nop
c00268e5:	83 c4 1c             	add    esp,0x1c
c00268e8:	c3                   	ret    

c00268e9 <pgFault(regs*, void*)>:
c00268e9:	83 ec 1c             	sub    esp,0x1c
c00268ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00268f3:	0f 20 d0             	mov    eax,cr2
c00268f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00268fe:	83 ec 04             	sub    esp,0x4
c0026901:	52                   	push   edx
c0026902:	50                   	push   eax
c0026903:	68 68 2e 03 c0       	push   0xc0032e68
c0026908:	e8 b9 28 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002690d:	83 c4 10             	add    esp,0x10
c0026910:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026915:	8b 00                	mov    eax,DWORD PTR [eax]
c0026917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002691a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026920:	0f 20 d2             	mov    edx,cr2
c0026923:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026927:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002692b:	83 ec 08             	sub    esp,0x8
c002692e:	52                   	push   edx
c002692f:	50                   	push   eax
c0026930:	e8 01 23 ff ff       	call   c0018c36 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026935:	83 c4 10             	add    esp,0x10
c0026938:	0f b6 c0             	movzx  eax,al
c002693b:	85 c0                	test   eax,eax
c002693d:	75 2e                	jne    c002696d <pgFault(regs*, void*)+0x84>
c002693f:	83 ec 0c             	sub    esp,0xc
c0026942:	68 a3 2d 03 c0       	push   0xc0032da3
c0026947:	e8 ea fe ff ff       	call   c0026836 <displayProgramFault(char const*)>
c002694c:	83 c4 10             	add    esp,0x10
c002694f:	83 ec 0c             	sub    esp,0xc
c0026952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026956:	e8 da fa ff ff       	call   c0026435 <displayDebugInfo(regs*)>
c002695b:	83 c4 10             	add    esp,0x10
c002695e:	83 ec 0c             	sub    esp,0xc
c0026961:	6a 00                	push   0x0
c0026963:	e8 10 ed ff ff       	call   c0025678 <Thr::terminateFromIRQ(int)>
c0026968:	83 c4 10             	add    esp,0x10
c002696b:	eb 01                	jmp    c002696e <pgFault(regs*, void*)+0x85>
c002696d:	90                   	nop
c002696e:	83 c4 1c             	add    esp,0x1c
c0026971:	c3                   	ret    

c0026972 <otherISRHandler(regs*, void*)>:
c0026972:	83 ec 0c             	sub    esp,0xc
c0026975:	83 ec 0c             	sub    esp,0xc
c0026978:	68 90 2e 03 c0       	push   0xc0032e90
c002697d:	e8 b4 fe ff ff       	call   c0026836 <displayProgramFault(char const*)>
c0026982:	83 c4 10             	add    esp,0x10
c0026985:	83 ec 0c             	sub    esp,0xc
c0026988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002698c:	e8 a4 fa ff ff       	call   c0026435 <displayDebugInfo(regs*)>
c0026991:	83 c4 10             	add    esp,0x10
c0026994:	83 ec 0c             	sub    esp,0xc
c0026997:	6a 00                	push   0x0
c0026999:	e8 da ec ff ff       	call   c0025678 <Thr::terminateFromIRQ(int)>
c002699e:	83 c4 10             	add    esp,0x10
c00269a1:	90                   	nop
c00269a2:	83 c4 0c             	add    esp,0xc
c00269a5:	c3                   	ret    

c00269a6 <opcodeFault(regs*, void*)>:
c00269a6:	55                   	push   ebp
c00269a7:	89 e5                	mov    ebp,esp
c00269a9:	83 ec 08             	sub    esp,0x8
c00269ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00269b2:	83 ec 08             	sub    esp,0x8
c00269b5:	50                   	push   eax
c00269b6:	68 ae 2d 03 c0       	push   0xc0032dae
c00269bb:	e8 06 28 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00269c0:	83 c4 10             	add    esp,0x10
c00269c3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00269c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00269ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00269d4:	0f b6 c0             	movzx  eax,al
c00269d7:	85 c0                	test   eax,eax
c00269d9:	74 21                	je     c00269fc <opcodeFault(regs*, void*)+0x56>
c00269db:	83 ec 0c             	sub    esp,0xc
c00269de:	68 b8 2e 03 c0       	push   0xc0032eb8
c00269e3:	e8 de 27 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00269e8:	83 c4 10             	add    esp,0x10
c00269eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00269f1:	8d 50 19             	lea    edx,[eax+0x19]
c00269f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00269fa:	eb 2b                	jmp    c0026a27 <opcodeFault(regs*, void*)+0x81>
c00269fc:	83 ec 0c             	sub    esp,0xc
c00269ff:	68 bc 2d 03 c0       	push   0xc0032dbc
c0026a04:	e8 2d fe ff ff       	call   c0026836 <displayProgramFault(char const*)>
c0026a09:	83 c4 10             	add    esp,0x10
c0026a0c:	83 ec 0c             	sub    esp,0xc
c0026a0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a12:	e8 1e fa ff ff       	call   c0026435 <displayDebugInfo(regs*)>
c0026a17:	83 c4 10             	add    esp,0x10
c0026a1a:	83 ec 0c             	sub    esp,0xc
c0026a1d:	6a 00                	push   0x0
c0026a1f:	e8 54 ec ff ff       	call   c0025678 <Thr::terminateFromIRQ(int)>
c0026a24:	83 c4 10             	add    esp,0x10
c0026a27:	c9                   	leave  
c0026a28:	c3                   	ret    

c0026a29 <i386SaveCoprocessor(void*)>:
c0026a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a2d:	83 c0 3f             	add    eax,0x3f
c0026a30:	83 e0 c0             	and    eax,0xffffffc0
c0026a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026a37:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026a3d <i386LoadCoprocessor(void*)>:
c0026a3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a41:	83 c0 3f             	add    eax,0x3f
c0026a44:	83 e0 c0             	and    eax,0xffffffc0
c0026a47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026a4b:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026a51 <x87EmulHandler(regs*, void*)>:
c0026a51:	53                   	push   ebx
c0026a52:	83 ec 08             	sub    esp,0x8
c0026a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a5a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026a5e:	74 10                	je     c0026a70 <x87EmulHandler(regs*, void*)+0x1f>
c0026a60:	83 ec 0c             	sub    esp,0xc
c0026a63:	68 c9 2d 03 c0       	push   0xc0032dc9
c0026a68:	e8 06 96 ff ff       	call   c0020073 <KePanic(char const*)>
c0026a6d:	83 c4 10             	add    esp,0x10
c0026a70:	0f 20 c0             	mov    eax,cr0
c0026a73:	a8 08                	test   al,0x8
c0026a75:	74 59                	je     c0026ad0 <x87EmulHandler(regs*, void*)+0x7f>
c0026a77:	0f 06                	clts   
c0026a79:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026a7e:	85 c0                	test   eax,eax
c0026a80:	74 0e                	je     c0026a90 <x87EmulHandler(regs*, void*)+0x3f>
c0026a82:	83 ec 0c             	sub    esp,0xc
c0026a85:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026a88:	e8 9c ff ff ff       	call   c0026a29 <i386SaveCoprocessor(void*)>
c0026a8d:	83 c4 10             	add    esp,0x10
c0026a90:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026a96:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026a9a:	75 12                	jne    c0026aae <x87EmulHandler(regs*, void*)+0x5d>
c0026a9c:	83 ec 0c             	sub    esp,0xc
c0026a9f:	68 40 02 00 00       	push   0x240
c0026aa4:	e8 e6 f8 fe ff       	call   c001638f <malloc>
c0026aa9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026aac:	eb 10                	jmp    c0026abe <x87EmulHandler(regs*, void*)+0x6d>
c0026aae:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026ab3:	83 ec 0c             	sub    esp,0xc
c0026ab6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026ab9:	e8 7f ff ff ff       	call   c0026a3d <i386LoadCoprocessor(void*)>
c0026abe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026ac3:	83 c4 10             	add    esp,0x10
c0026ac6:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026acb:	83 c4 08             	add    esp,0x8
c0026ace:	5b                   	pop    ebx
c0026acf:	c3                   	ret    
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	68 dd 2d 03 c0       	push   0xc0032ddd
c0026ad8:	e8 e9 26 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026add:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026ae5:	83 c4 18             	add    esp,0x18
c0026ae8:	5b                   	pop    ebx
c0026ae9:	e9 8a eb ff ff       	jmp    c0025678 <Thr::terminateFromIRQ(int)>

c0026aee <HalInitialiseCoprocessor()>:
c0026aee:	83 ec 10             	sub    esp,0x10
c0026af1:	6a 00                	push   0x0
c0026af3:	68 51 6a 02 c0       	push   0xc0026a51
c0026af8:	6a 07                	push   0x7
c0026afa:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026b04:	e8 9d 4c ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026b09:	e8 02 71 00 00       	call   c002dc10 <avxDetect>
c0026b0e:	83 c4 10             	add    esp,0x10
c0026b11:	85 c0                	test   eax,eax
c0026b13:	74 1c                	je     c0026b31 <HalInitialiseCoprocessor()+0x43>
c0026b15:	c7 05 70 02 04 c0 3a dc 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002dc3a
c0026b1f:	c7 05 6c 02 04 c0 4b dc 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dc4b
c0026b29:	83 c4 0c             	add    esp,0xc
c0026b2c:	e9 2b 71 00 00       	jmp    c002dc5c <avxInit>
c0026b31:	e8 4a 74 00 00       	call   c002df80 <sseDetect>
c0026b36:	85 c0                	test   eax,eax
c0026b38:	74 1c                	je     c0026b56 <HalInitialiseCoprocessor()+0x68>
c0026b3a:	c7 05 70 02 04 c0 98 df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df98
c0026b44:	c7 05 6c 02 04 c0 a0 df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dfa0
c0026b4e:	83 c4 0c             	add    esp,0xc
c0026b51:	e9 52 74 00 00       	jmp    c002dfa8 <sseInit>
c0026b56:	e8 6b 74 00 00       	call   c002dfc6 <x87Detect>
c0026b5b:	85 c0                	test   eax,eax
c0026b5d:	74 1c                	je     c0026b7b <HalInitialiseCoprocessor()+0x8d>
c0026b5f:	c7 05 70 02 04 c0 e1 df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002dfe1
c0026b69:	c7 05 6c 02 04 c0 e8 df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dfe8
c0026b73:	83 c4 0c             	add    esp,0xc
c0026b76:	e9 74 74 00 00       	jmp    c002dfef <x87Init>
c0026b7b:	c7 05 70 02 04 c0 02 64 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc0026402
c0026b85:	c7 05 6c 02 04 c0 02 64 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc0026402
c0026b8f:	0f 20 c0             	mov    eax,cr0
c0026b92:	83 c8 04             	or     eax,0x4
c0026b95:	0f 22 c0             	mov    cr0,eax
c0026b98:	83 c4 0c             	add    esp,0xc
c0026b9b:	c3                   	ret    

c0026b9c <HalPanic(char const*)>:
c0026b9c:	53                   	push   ebx
c0026b9d:	83 ec 10             	sub    esp,0x10
c0026ba0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026ba4:	fa                   	cli    
c0026ba5:	53                   	push   ebx
c0026ba6:	68 f3 2d 03 c0       	push   0xc0032df3
c0026bab:	e8 16 26 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0026bb0:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026bb5:	83 c4 10             	add    esp,0x10
c0026bb8:	85 c0                	test   eax,eax
c0026bba:	74 09                	je     c0026bc5 <HalPanic(char const*)+0x29>
c0026bbc:	83 ec 0c             	sub    esp,0xc
c0026bbf:	53                   	push   ebx
c0026bc0:	ff d0                	call   eax
c0026bc2:	83 c4 10             	add    esp,0x10
c0026bc5:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026bca:	85 c0                	test   eax,eax
c0026bcc:	0f 84 dc 00 00 00    	je     c0026cae <HalPanic(char const*)+0x112>
c0026bd2:	52                   	push   edx
c0026bd3:	6a 01                	push   0x1
c0026bd5:	6a 0f                	push   0xf
c0026bd7:	50                   	push   eax
c0026bd8:	e8 a9 02 ff ff       	call   c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026bdd:	59                   	pop    ecx
c0026bde:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026be4:	e8 8d 04 ff ff       	call   c0017076 <VgaText::clearScreen()>
c0026be9:	58                   	pop    eax
c0026bea:	5a                   	pop    edx
c0026beb:	68 d4 0e 03 c0       	push   0xc0030ed4
c0026bf0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026bf6:	e8 c3 02 ff ff       	call   c0016ebe <VgaText::setTitle(char*)>
c0026bfb:	83 c4 0c             	add    esp,0xc
c0026bfe:	6a 01                	push   0x1
c0026c00:	6a 0f                	push   0xf
c0026c02:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c08:	e8 79 02 ff ff       	call   c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026c0d:	59                   	pop    ecx
c0026c0e:	58                   	pop    eax
c0026c0f:	68 0c 2e 03 c0       	push   0xc0032e0c
c0026c14:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c1a:	e8 49 07 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c1f:	83 c4 0c             	add    esp,0xc
c0026c22:	6a 0f                	push   0xf
c0026c24:	6a 01                	push   0x1
c0026c26:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c2c:	e8 55 02 ff ff       	call   c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026c31:	58                   	pop    eax
c0026c32:	5a                   	pop    edx
c0026c33:	68 15 2e 03 c0       	push   0xc0032e15
c0026c38:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c3e:	e8 25 07 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c43:	83 c4 0c             	add    esp,0xc
c0026c46:	6a 01                	push   0x1
c0026c48:	6a 0f                	push   0xf
c0026c4a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c50:	e8 31 02 ff ff       	call   c0016e86 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026c55:	59                   	pop    ecx
c0026c56:	58                   	pop    eax
c0026c57:	68 59 2e 03 c0       	push   0xc0032e59
c0026c5c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c62:	e8 01 07 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c67:	58                   	pop    eax
c0026c68:	5a                   	pop    edx
c0026c69:	68 22 2e 03 c0       	push   0xc0032e22
c0026c6e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c74:	e8 ef 06 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c79:	59                   	pop    ecx
c0026c7a:	58                   	pop    eax
c0026c7b:	68 5c 2e 03 c0       	push   0xc0032e5c
c0026c80:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c86:	e8 dd 06 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c8b:	58                   	pop    eax
c0026c8c:	5a                   	pop    edx
c0026c8d:	53                   	push   ebx
c0026c8e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c94:	e8 cf 06 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026c99:	59                   	pop    ecx
c0026c9a:	5b                   	pop    ebx
c0026c9b:	68 59 2e 03 c0       	push   0xc0032e59
c0026ca0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ca6:	e8 bd 06 ff ff       	call   c0017368 <VgaText::puts(char const*)>
c0026cab:	83 c4 10             	add    esp,0x10
c0026cae:	eb fe                	jmp    c0026cae <HalPanic(char const*)+0x112>

c0026cb0 <HalQueryPerformanceCounter()>:
c0026cb0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026cb5:	31 d2                	xor    edx,edx
c0026cb7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026cbd:	31 c0                	xor    eax,eax
c0026cbf:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026cc6:	74 02                	je     c0026cca <HalQueryPerformanceCounter()+0x1a>
c0026cc8:	0f 31                	rdtsc  
c0026cca:	c3                   	ret    

c0026ccb <HalInitialise()>:
c0026ccb:	53                   	push   ebx
c0026ccc:	83 ec 08             	sub    esp,0x8
c0026ccf:	e8 09 4d ff ff       	call   c001b9dd <setupINTS()>
c0026cd4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026cd9:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026ce0:	75 0f                	jne    c0026cf1 <HalInitialise()+0x26>
c0026ce2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026ce8:	83 e2 fe             	and    edx,0xfffffffe
c0026ceb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026cf1:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026cf8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026cfe:	83 e2 fe             	and    edx,0xfffffffe
c0026d01:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026d07:	e8 a0 02 00 00       	call   c0026fac <picOpen()>
c0026d0c:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026d13:	74 0a                	je     c0026d1f <HalInitialise()+0x54>
c0026d15:	e8 e2 01 00 00       	call   c0026efc <picDisable()>
c0026d1a:	e8 63 68 00 00       	call   c002d582 <apicOpen()>
c0026d1f:	50                   	push   eax
c0026d20:	bb 0f 00 00 00       	mov    ebx,0xf
c0026d25:	6a 00                	push   0x0
c0026d27:	68 72 69 02 c0       	push   0xc0026972
c0026d2c:	6a 00                	push   0x0
c0026d2e:	e8 73 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d33:	83 c4 0c             	add    esp,0xc
c0026d36:	6a 00                	push   0x0
c0026d38:	68 72 69 02 c0       	push   0xc0026972
c0026d3d:	6a 01                	push   0x1
c0026d3f:	e8 62 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d44:	83 c4 0c             	add    esp,0xc
c0026d47:	6a 00                	push   0x0
c0026d49:	68 03 64 02 c0       	push   0xc0026403
c0026d4e:	6a 02                	push   0x2
c0026d50:	e8 51 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d55:	83 c4 0c             	add    esp,0xc
c0026d58:	6a 00                	push   0x0
c0026d5a:	68 72 69 02 c0       	push   0xc0026972
c0026d5f:	6a 03                	push   0x3
c0026d61:	e8 40 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d66:	83 c4 0c             	add    esp,0xc
c0026d69:	6a 00                	push   0x0
c0026d6b:	68 72 69 02 c0       	push   0xc0026972
c0026d70:	6a 04                	push   0x4
c0026d72:	e8 2f 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d77:	83 c4 0c             	add    esp,0xc
c0026d7a:	6a 00                	push   0x0
c0026d7c:	68 72 69 02 c0       	push   0xc0026972
c0026d81:	6a 05                	push   0x5
c0026d83:	e8 1e 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d88:	83 c4 0c             	add    esp,0xc
c0026d8b:	6a 00                	push   0x0
c0026d8d:	68 a6 69 02 c0       	push   0xc00269a6
c0026d92:	6a 06                	push   0x6
c0026d94:	e8 0d 4a ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d99:	83 c4 0c             	add    esp,0xc
c0026d9c:	6a 00                	push   0x0
c0026d9e:	68 1c 64 02 c0       	push   0xc002641c
c0026da3:	6a 08                	push   0x8
c0026da5:	e8 fc 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026daa:	83 c4 0c             	add    esp,0xc
c0026dad:	6a 00                	push   0x0
c0026daf:	68 72 69 02 c0       	push   0xc0026972
c0026db4:	6a 09                	push   0x9
c0026db6:	e8 eb 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dbb:	83 c4 0c             	add    esp,0xc
c0026dbe:	6a 00                	push   0x0
c0026dc0:	68 72 69 02 c0       	push   0xc0026972
c0026dc5:	6a 0a                	push   0xa
c0026dc7:	e8 da 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dcc:	83 c4 0c             	add    esp,0xc
c0026dcf:	6a 00                	push   0x0
c0026dd1:	68 72 69 02 c0       	push   0xc0026972
c0026dd6:	6a 0b                	push   0xb
c0026dd8:	e8 c9 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ddd:	83 c4 0c             	add    esp,0xc
c0026de0:	6a 00                	push   0x0
c0026de2:	68 82 68 02 c0       	push   0xc0026882
c0026de7:	6a 0d                	push   0xd
c0026de9:	e8 b8 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dee:	83 c4 0c             	add    esp,0xc
c0026df1:	6a 00                	push   0x0
c0026df3:	68 e9 68 02 c0       	push   0xc00268e9
c0026df8:	6a 0e                	push   0xe
c0026dfa:	e8 a7 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dff:	83 c4 10             	add    esp,0x10
c0026e02:	50                   	push   eax
c0026e03:	6a 00                	push   0x0
c0026e05:	68 72 69 02 c0       	push   0xc0026972
c0026e0a:	53                   	push   ebx
c0026e0b:	43                   	inc    ebx
c0026e0c:	e8 95 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026e11:	83 c4 10             	add    esp,0x10
c0026e14:	83 fb 1e             	cmp    ebx,0x1e
c0026e17:	75 e9                	jne    c0026e02 <HalInitialise()+0x137>
c0026e19:	50                   	push   eax
c0026e1a:	6a 00                	push   0x0
c0026e1c:	68 27 15 02 c0       	push   0xc0021527
c0026e21:	6a 60                	push   0x60
c0026e23:	e8 7e 49 ff ff       	call   c001b7a6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026e28:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e2d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0026e37:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0026e3e:	e8 4c f5 fe ff       	call   c001638f <malloc>
c0026e43:	89 04 24             	mov    DWORD PTR [esp],eax
c0026e46:	89 c3                	mov    ebx,eax
c0026e48:	e8 37 09 00 00       	call   c0027784 <RTC::RTC()>
c0026e4d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0026e57:	5a                   	pop    edx
c0026e58:	59                   	pop    ecx
c0026e59:	53                   	push   ebx
c0026e5a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0026e60:	e8 f7 43 ff ff       	call   c001b25c <Device::addChild(Device*)>
c0026e65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026e67:	6a 00                	push   0x0
c0026e69:	6a 00                	push   0x0
c0026e6b:	6a 00                	push   0x0
c0026e6d:	53                   	push   ebx
c0026e6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026e71:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e76:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0026e7c:	83 c4 28             	add    esp,0x28
c0026e7f:	5b                   	pop    ebx
c0026e80:	c3                   	ret    

c0026e81 <HalMakeBeep(int)>:
c0026e81:	53                   	push   ebx
c0026e82:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0026e86:	85 db                	test   ebx,ebx
c0026e88:	75 07                	jne    c0026e91 <HalMakeBeep(int)+0x10>
c0026e8a:	e4 61                	in     al,0x61
c0026e8c:	83 e0 fc             	and    eax,0xfffffffc
c0026e8f:	eb 26                	jmp    c0026eb7 <HalMakeBeep(int)+0x36>
c0026e91:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026e96:	99                   	cdq    
c0026e97:	f7 fb                	idiv   ebx
c0026e99:	89 c1                	mov    ecx,eax
c0026e9b:	b0 b6                	mov    al,0xb6
c0026e9d:	e6 43                	out    0x43,al
c0026e9f:	88 c8                	mov    al,cl
c0026ea1:	e6 42                	out    0x42,al
c0026ea3:	89 c8                	mov    eax,ecx
c0026ea5:	c1 e8 08             	shr    eax,0x8
c0026ea8:	e6 42                	out    0x42,al
c0026eaa:	e4 61                	in     al,0x61
c0026eac:	89 c2                	mov    edx,eax
c0026eae:	83 ca 03             	or     edx,0x3
c0026eb1:	38 d0                	cmp    al,dl
c0026eb3:	74 04                	je     c0026eb9 <HalMakeBeep(int)+0x38>
c0026eb5:	88 d0                	mov    al,dl
c0026eb7:	e6 61                	out    0x61,al
c0026eb9:	5b                   	pop    ebx
c0026eba:	c3                   	ret    

c0026ebb <HalGetRand()>:
c0026ebb:	31 c0                	xor    eax,eax
c0026ebd:	c3                   	ret    

c0026ebe <HalEndOfInterrupt(int)>:
c0026ebe:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026ec5:	74 23                	je     c0026eea <HalEndOfInterrupt(int)+0x2c>
c0026ec7:	83 ec 14             	sub    esp,0x14
c0026eca:	6a 1b                	push   0x1b
c0026ecc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0026ed2:	e8 c9 ea fe ff       	call   c00159a0 <Computer::rdmsr(unsigned int)>
c0026ed7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026edc:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0026ee6:	83 c4 1c             	add    esp,0x1c
c0026ee9:	c3                   	ret    
c0026eea:	e9 41 02 00 00       	jmp    c0027130 <picEOI(int)>

c0026eef <HalRestart()>:
c0026eef:	c3                   	ret    

c0026ef0 <HalShutdown()>:
c0026ef0:	c3                   	ret    

c0026ef1 <HalSleep()>:
c0026ef1:	c3                   	ret    
c0026ef2:	66 90                	xchg   ax,ax

c0026ef4 <picIoWait()>:
c0026ef4:	eb 00                	jmp    c0026ef6 <picIoWait()+0x2>
c0026ef6:	eb 00                	jmp    c0026ef8 <picIoWait()+0x4>
c0026ef8:	90                   	nop
c0026ef9:	c3                   	ret    
c0026efa:	66 90                	xchg   ax,ax

c0026efc <picDisable()>:
c0026efc:	83 ec 10             	sub    esp,0x10
c0026eff:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0026f06:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0026f0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f0f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026f14:	ee                   	out    dx,al
c0026f15:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0026f1c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0026f21:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0026f25:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0026f2a:	ee                   	out    dx,al
c0026f2b:	90                   	nop
c0026f2c:	83 c4 10             	add    esp,0x10
c0026f2f:	c3                   	ret    

c0026f30 <picGetIRQReg(int)>:
c0026f30:	83 ec 10             	sub    esp,0x10
c0026f33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f37:	0f b6 c0             	movzx  eax,al
c0026f3a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0026f41:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0026f45:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026f49:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026f4e:	ee                   	out    dx,al
c0026f4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f53:	0f b6 c0             	movzx  eax,al
c0026f56:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0026f5d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f61:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f65:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f6a:	ee                   	out    dx,al
c0026f6b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0026f72:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0026f77:	89 c2                	mov    edx,eax
c0026f79:	ec                   	in     al,dx
c0026f7a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f7e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f82:	0f b6 c0             	movzx  eax,al
c0026f85:	c1 e0 08             	shl    eax,0x8
c0026f88:	89 c1                	mov    ecx,eax
c0026f8a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0026f91:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0026f96:	89 c2                	mov    edx,eax
c0026f98:	ec                   	in     al,dx
c0026f99:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0026f9d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0026fa1:	0f b6 c0             	movzx  eax,al
c0026fa4:	09 c8                	or     eax,ecx
c0026fa6:	83 c4 10             	add    esp,0x10
c0026fa9:	c3                   	ret    
c0026faa:	66 90                	xchg   ax,ax

c0026fac <picOpen()>:
c0026fac:	83 ec 50             	sub    esp,0x50
c0026faf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0026fb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026fbb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0026fbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026fc3:	ee                   	out    dx,al
c0026fc4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0026fcb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0026fd0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0026fd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026fd8:	ee                   	out    dx,al
c0026fd9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0026fe1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0026fe9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0026ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026ff4:	89 c2                	mov    edx,eax
c0026ff6:	ec                   	in     al,dx
c0026ff7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0026ffb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0026fff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0027003:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c002700a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002700e:	89 c2                	mov    edx,eax
c0027010:	ec                   	in     al,dx
c0027011:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027015:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027019:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002701d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027024:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027029:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c002702d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027031:	ee                   	out    dx,al
c0027032:	e8 bd fe ff ff       	call   c0026ef4 <picIoWait()>
c0027037:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002703e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027043:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027047:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002704b:	ee                   	out    dx,al
c002704c:	e8 a3 fe ff ff       	call   c0026ef4 <picIoWait()>
c0027051:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027055:	0f b6 c0             	movzx  eax,al
c0027058:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002705f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027063:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027067:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002706b:	ee                   	out    dx,al
c002706c:	e8 83 fe ff ff       	call   c0026ef4 <picIoWait()>
c0027071:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027075:	0f b6 c0             	movzx  eax,al
c0027078:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002707f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027083:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027087:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002708b:	ee                   	out    dx,al
c002708c:	e8 63 fe ff ff       	call   c0026ef4 <picIoWait()>
c0027091:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027098:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c002709d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00270a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00270a5:	ee                   	out    dx,al
c00270a6:	e8 49 fe ff ff       	call   c0026ef4 <picIoWait()>
c00270ab:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00270b2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00270b7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00270bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00270bf:	ee                   	out    dx,al
c00270c0:	e8 2f fe ff ff       	call   c0026ef4 <picIoWait()>
c00270c5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00270cc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00270d1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00270d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00270d9:	ee                   	out    dx,al
c00270da:	e8 15 fe ff ff       	call   c0026ef4 <picIoWait()>
c00270df:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00270e6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00270eb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00270ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00270f3:	ee                   	out    dx,al
c00270f4:	e8 fb fd ff ff       	call   c0026ef4 <picIoWait()>
c00270f9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00270fe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027105:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027109:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c002710d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027111:	ee                   	out    dx,al
c0027112:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027117:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c002711e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027122:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027126:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002712a:	ee                   	out    dx,al
c002712b:	90                   	nop
c002712c:	83 c4 50             	add    esp,0x50
c002712f:	c3                   	ret    

c0027130 <picEOI(int)>:
c0027130:	83 ec 10             	sub    esp,0x10
c0027133:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027138:	75 1e                	jne    c0027158 <picEOI(int)+0x28>
c002713a:	6a 0b                	push   0xb
c002713c:	e8 ef fd ff ff       	call   c0026f30 <picGetIRQReg(int)>
c0027141:	83 c4 04             	add    esp,0x4
c0027144:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027149:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002714e:	25 80 00 00 00       	and    eax,0x80
c0027153:	74 73                	je     c00271c8 <picEOI(int)+0x98>
c0027155:	8d 76 00             	lea    esi,[esi+0x0]
c0027158:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c002715d:	75 31                	jne    c0027190 <picEOI(int)+0x60>
c002715f:	6a 0b                	push   0xb
c0027161:	e8 ca fd ff ff       	call   c0026f30 <picGetIRQReg(int)>
c0027166:	83 c4 04             	add    esp,0x4
c0027169:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002716e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027172:	98                   	cwde   
c0027173:	85 c0                	test   eax,eax
c0027175:	78 19                	js     c0027190 <picEOI(int)+0x60>
c0027177:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002717e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027183:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027187:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002718c:	ee                   	out    dx,al
c002718d:	eb 3d                	jmp    c00271cc <picEOI(int)+0x9c>
c002718f:	90                   	nop
c0027190:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027195:	7e 19                	jle    c00271b0 <picEOI(int)+0x80>
c0027197:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002719e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00271a3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00271a7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00271ac:	ee                   	out    dx,al
c00271ad:	8d 76 00             	lea    esi,[esi+0x0]
c00271b0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00271b7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00271bc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00271c0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00271c5:	ee                   	out    dx,al
c00271c6:	eb 04                	jmp    c00271cc <picEOI(int)+0x9c>
c00271c8:	90                   	nop
c00271c9:	8d 76 00             	lea    esi,[esi+0x0]
c00271cc:	83 c4 10             	add    esp,0x10
c00271cf:	c3                   	ret    

c00271d0 <RTC::open(int, int, void*)>:
c00271d0:	31 c0                	xor    eax,eax
c00271d2:	c3                   	ret    
c00271d3:	90                   	nop

c00271d4 <RTC::close(int, int, void*)>:
c00271d4:	31 c0                	xor    eax,eax
c00271d6:	c3                   	ret    
c00271d7:	90                   	nop

c00271d8 <RTC::timeInSecondsUTC()>:
c00271d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271dc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00271e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00271e8:	c3                   	ret    
c00271e9:	90                   	nop

c00271ea <RTC::timeInDatetimeUTC()>:
c00271ea:	53                   	push   ebx
c00271eb:	83 ec 14             	sub    esp,0x14
c00271ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00271f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00271f8:	50                   	push   eax
c00271f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00271fc:	83 c4 0c             	add    esp,0xc
c00271ff:	52                   	push   edx
c0027200:	50                   	push   eax
c0027201:	53                   	push   ebx
c0027202:	e8 c9 3d ff ff       	call   c001afd0 <secondsToDatetime(unsigned long long)>
c0027207:	89 d8                	mov    eax,ebx
c0027209:	83 c4 14             	add    esp,0x14
c002720c:	5b                   	pop    ebx
c002720d:	c2 04 00             	ret    0x4

c0027210 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027210:	56                   	push   esi
c0027211:	53                   	push   ebx
c0027212:	83 ec 14             	sub    esp,0x14
c0027215:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027219:	8b 03                	mov    eax,DWORD PTR [ebx]
c002721b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c002721e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027222:	52                   	push   edx
c0027223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002722b:	50                   	push   eax
c002722c:	e8 9f 3d ff ff       	call   c001afd0 <secondsToDatetime(unsigned long long)>
c0027231:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027239:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002723d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027241:	89 f0                	mov    eax,esi
c0027243:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027247:	83 c4 20             	add    esp,0x20
c002724a:	5b                   	pop    ebx
c002724b:	5e                   	pop    esi
c002724c:	ff e0                	jmp    eax

c002724e <RTC::~RTC()>:
c002724e:	83 ec 0c             	sub    esp,0xc
c0027251:	ba f8 2e 03 c0       	mov    edx,0xc0032ef8
c0027256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725a:	89 10                	mov    DWORD PTR [eax],edx
c002725c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	50                   	push   eax
c0027264:	e8 f3 3a ff ff       	call   c001ad5c <Clock::~Clock()>
c0027269:	83 c4 10             	add    esp,0x10
c002726c:	90                   	nop
c002726d:	83 c4 0c             	add    esp,0xc
c0027270:	c3                   	ret    
c0027271:	90                   	nop

c0027272 <RTC::~RTC()>:
c0027272:	83 ec 0c             	sub    esp,0xc
c0027275:	83 ec 0c             	sub    esp,0xc
c0027278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002727c:	e8 cd ff ff ff       	call   c002724e <RTC::~RTC()>
c0027281:	83 c4 10             	add    esp,0x10
c0027284:	83 ec 08             	sub    esp,0x8
c0027287:	68 60 01 00 00       	push   0x160
c002728c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027290:	e8 33 1e ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c0027295:	83 c4 10             	add    esp,0x10
c0027298:	83 c4 0c             	add    esp,0xc
c002729b:	c3                   	ret    

c002729c <RTC::get_update_in_progress_flag()>:
c002729c:	83 ec 14             	sub    esp,0x14
c002729f:	6a 0a                	push   0xa
c00272a1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272a7:	e8 ac e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00272ac:	83 c4 1c             	add    esp,0x1c
c00272af:	0f b6 c0             	movzx  eax,al
c00272b2:	c1 e8 07             	shr    eax,0x7
c00272b5:	c3                   	ret    

c00272b6 <RTC::completeRTCRefresh()>:
c00272b6:	55                   	push   ebp
c00272b7:	57                   	push   edi
c00272b8:	56                   	push   esi
c00272b9:	53                   	push   ebx
c00272ba:	83 ec 3c             	sub    esp,0x3c
c00272bd:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00272c3:	83 ec 0c             	sub    esp,0xc
c00272c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00272ca:	e8 cd ff ff ff       	call   c002729c <RTC::get_update_in_progress_flag()>
c00272cf:	83 c4 10             	add    esp,0x10
c00272d2:	84 c0                	test   al,al
c00272d4:	74 0e                	je     c00272e4 <RTC::completeRTCRefresh()+0x2e>
c00272d6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00272dc:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00272e2:	73 df                	jae    c00272c3 <RTC::completeRTCRefresh()+0xd>
c00272e4:	50                   	push   eax
c00272e5:	50                   	push   eax
c00272e6:	6a 00                	push   0x0
c00272e8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272ee:	e8 65 e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00272f3:	89 c7                	mov    edi,eax
c00272f5:	58                   	pop    eax
c00272f6:	5a                   	pop    edx
c00272f7:	6a 02                	push   0x2
c00272f9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272ff:	e8 54 e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027304:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027308:	59                   	pop    ecx
c0027309:	5b                   	pop    ebx
c002730a:	6a 04                	push   0x4
c002730c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027312:	e8 41 e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027317:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c002731b:	5e                   	pop    esi
c002731c:	5d                   	pop    ebp
c002731d:	6a 07                	push   0x7
c002731f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027325:	e8 2e e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c002732a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002732e:	58                   	pop    eax
c002732f:	5a                   	pop    edx
c0027330:	6a 08                	push   0x8
c0027332:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027338:	e8 1b e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c002733d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027341:	59                   	pop    ecx
c0027342:	5b                   	pop    ebx
c0027343:	6a 09                	push   0x9
c0027345:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002734b:	e8 08 e7 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027350:	0f b6 c0             	movzx  eax,al
c0027353:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027357:	83 c4 10             	add    esp,0x10
c002735a:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027360:	83 ec 0c             	sub    esp,0xc
c0027363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027367:	e8 30 ff ff ff       	call   c002729c <RTC::get_update_in_progress_flag()>
c002736c:	83 c4 10             	add    esp,0x10
c002736f:	84 c0                	test   al,al
c0027371:	74 0e                	je     c0027381 <RTC::completeRTCRefresh()+0xcb>
c0027373:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027379:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002737f:	73 df                	jae    c0027360 <RTC::completeRTCRefresh()+0xaa>
c0027381:	51                   	push   ecx
c0027382:	51                   	push   ecx
c0027383:	6a 00                	push   0x0
c0027385:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002738b:	e8 c8 e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027390:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027394:	5b                   	pop    ebx
c0027395:	5e                   	pop    esi
c0027396:	6a 02                	push   0x2
c0027398:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002739e:	e8 b5 e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00273a3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00273a7:	5d                   	pop    ebp
c00273a8:	58                   	pop    eax
c00273a9:	6a 04                	push   0x4
c00273ab:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00273b1:	e8 a2 e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00273b6:	88 c3                	mov    bl,al
c00273b8:	58                   	pop    eax
c00273b9:	5a                   	pop    edx
c00273ba:	6a 07                	push   0x7
c00273bc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00273c2:	e8 91 e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00273c7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00273cb:	59                   	pop    ecx
c00273cc:	5e                   	pop    esi
c00273cd:	6a 08                	push   0x8
c00273cf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00273d5:	e8 7e e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00273da:	5d                   	pop    ebp
c00273db:	89 c6                	mov    esi,eax
c00273dd:	58                   	pop    eax
c00273de:	6a 09                	push   0x9
c00273e0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00273e6:	e8 6d e6 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00273eb:	89 f9                	mov    ecx,edi
c00273ed:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00273f1:	83 c4 10             	add    esp,0x10
c00273f4:	0f b6 e8             	movzx  ebp,al
c00273f7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00273fc:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027404:	74 27                	je     c002742d <RTC::completeRTCRefresh()+0x177>
c0027406:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c002740a:	89 f0                	mov    eax,esi
c002740c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027410:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027414:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027418:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002741c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027420:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027424:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027428:	e9 2d ff ff ff       	jmp    c002735a <RTC::completeRTCRefresh()+0xa4>
c002742d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027432:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027436:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002743a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c002743e:	75 c6                	jne    c0027406 <RTC::completeRTCRefresh()+0x150>
c0027440:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0027445:	89 f1                	mov    ecx,esi
c0027447:	0f b6 fb             	movzx  edi,bl
c002744a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c002744e:	0f b6 c9             	movzx  ecx,cl
c0027451:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027455:	89 f1                	mov    ecx,esi
c0027457:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002745b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002745f:	0f 94 c2             	sete   dl
c0027462:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027466:	0f 94 c0             	sete   al
c0027469:	21 d0                	and    eax,edx
c002746b:	31 d2                	xor    edx,edx
c002746d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027471:	0f 94 c2             	sete   dl
c0027474:	85 c2                	test   edx,eax
c0027476:	74 8e                	je     c0027406 <RTC::completeRTCRefresh()+0x150>
c0027478:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c002747c:	75 88                	jne    c0027406 <RTC::completeRTCRefresh()+0x150>
c002747e:	52                   	push   edx
c002747f:	52                   	push   edx
c0027480:	6a 0b                	push   0xb
c0027482:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027488:	e8 cb e5 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c002748d:	83 c4 10             	add    esp,0x10
c0027490:	a8 04                	test   al,0x4
c0027492:	75 7a                	jne    c002750e <RTC::completeRTCRefresh()+0x258>
c0027494:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027498:	c1 ef 04             	shr    edi,0x4
c002749b:	83 e6 0f             	and    esi,0xf
c002749e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00274a2:	c1 ed 04             	shr    ebp,0x4
c00274a5:	6b ed 0a             	imul   ebp,ebp,0xa
c00274a8:	c1 ea 04             	shr    edx,0x4
c00274ab:	6b d2 0a             	imul   edx,edx,0xa
c00274ae:	83 e1 0f             	and    ecx,0xf
c00274b1:	01 d1                	add    ecx,edx
c00274b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00274b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00274bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00274bf:	c1 ea 04             	shr    edx,0x4
c00274c2:	6b d2 0a             	imul   edx,edx,0xa
c00274c5:	83 e1 0f             	and    ecx,0xf
c00274c8:	01 d1                	add    ecx,edx
c00274ca:	89 fa                	mov    edx,edi
c00274cc:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00274d0:	83 e2 07             	and    edx,0x7
c00274d3:	89 d9                	mov    ecx,ebx
c00274d5:	6b d2 0a             	imul   edx,edx,0xa
c00274d8:	83 e1 0f             	and    ecx,0xf
c00274db:	83 e3 80             	and    ebx,0xffffff80
c00274de:	01 d1                	add    ecx,edx
c00274e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00274e4:	09 cb                	or     ebx,ecx
c00274e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00274ea:	c1 ea 04             	shr    edx,0x4
c00274ed:	6b d2 0a             	imul   edx,edx,0xa
c00274f0:	83 e1 0f             	and    ecx,0xf
c00274f3:	01 d1                	add    ecx,edx
c00274f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00274f9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00274fd:	c1 ea 04             	shr    edx,0x4
c0027500:	6b d2 0a             	imul   edx,edx,0xa
c0027503:	01 d6                	add    esi,edx
c0027505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027509:	83 e2 0f             	and    edx,0xf
c002750c:	01 d5                	add    ebp,edx
c002750e:	a8 02                	test   al,0x2
c0027510:	75 15                	jne    c0027527 <RTC::completeRTCRefresh()+0x271>
c0027512:	f6 c3 80             	test   bl,0x80
c0027515:	74 10                	je     c0027527 <RTC::completeRTCRefresh()+0x271>
c0027517:	83 e3 7f             	and    ebx,0x7f
c002751a:	b9 18 00 00 00       	mov    ecx,0x18
c002751f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027522:	99                   	cdq    
c0027523:	f7 f9                	idiv   ecx
c0027525:	88 d3                	mov    bl,dl
c0027527:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c002752d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027533:	77 06                	ja     c002753b <RTC::completeRTCRefresh()+0x285>
c0027535:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c002753b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027540:	31 c9                	xor    ecx,ecx
c0027542:	31 d2                	xor    edx,edx
c0027544:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027548:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c002754c:	89 cd                	mov    ebp,ecx
c002754e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0027552:	c1 e7 10             	shl    edi,0x10
c0027555:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002755b:	c1 e0 10             	shl    eax,0x10
c002755e:	09 c5                	or     ebp,eax
c0027560:	89 e9                	mov    ecx,ebp
c0027562:	0f b7 c2             	movzx  eax,dx
c0027565:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027569:	09 f8                	or     eax,edi
c002756b:	89 c2                	mov    edx,eax
c002756d:	50                   	push   eax
c002756e:	50                   	push   eax
c002756f:	88 d9                	mov    cl,bl
c0027571:	51                   	push   ecx
c0027572:	52                   	push   edx
c0027573:	e8 d3 38 ff ff       	call   c001ae4b <datetimeToSeconds(datetime_t)>
c0027578:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c002757c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027582:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027588:	83 c4 4c             	add    esp,0x4c
c002758b:	5b                   	pop    ebx
c002758c:	5e                   	pop    esi
c002758d:	5f                   	pop    edi
c002758e:	5d                   	pop    ebp
c002758f:	c3                   	ret    

c0027590 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027590:	55                   	push   ebp
c0027591:	57                   	push   edi
c0027592:	56                   	push   esi
c0027593:	53                   	push   ebx
c0027594:	83 ec 30             	sub    esp,0x30
c0027597:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c002759b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002759f:	6a 00                	push   0x0
c00275a1:	6a 00                	push   0x0
c00275a3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275a9:	e8 c2 e5 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00275ae:	83 c4 0c             	add    esp,0xc
c00275b1:	6a 00                	push   0x0
c00275b3:	6a 02                	push   0x2
c00275b5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275bb:	e8 b0 e5 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00275c0:	89 f8                	mov    eax,edi
c00275c2:	89 f9                	mov    ecx,edi
c00275c4:	0f b6 c4             	movzx  eax,ah
c00275c7:	31 d2                	xor    edx,edx
c00275c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00275cd:	c1 e9 10             	shr    ecx,0x10
c00275d0:	89 f0                	mov    eax,esi
c00275d2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00275d6:	89 f0                	mov    eax,esi
c00275d8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00275dc:	0f b6 c4             	movzx  eax,ah
c00275df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00275e3:	89 f0                	mov    eax,esi
c00275e5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00275e9:	c1 e8 10             	shr    eax,0x10
c00275ec:	b9 64 00 00 00       	mov    ecx,0x64
c00275f1:	f7 f1                	div    ecx
c00275f3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00275f7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00275fb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00275ff:	59                   	pop    ecx
c0027600:	5b                   	pop    ebx
c0027601:	89 fb                	mov    ebx,edi
c0027603:	6a 0b                	push   0xb
c0027605:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002760b:	e8 48 e4 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027610:	83 c4 10             	add    esp,0x10
c0027613:	a8 04                	test   al,0x4
c0027615:	89 c5                	mov    ebp,eax
c0027617:	75 6e                	jne    c0027687 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027619:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002761d:	31 d2                	xor    edx,edx
c002761f:	0f b6 c1             	movzx  eax,cl
c0027622:	b9 0a 00 00 00       	mov    ecx,0xa
c0027627:	f7 f1                	div    ecx
c0027629:	c1 e0 04             	shl    eax,0x4
c002762c:	09 d0                	or     eax,edx
c002762e:	31 d2                	xor    edx,edx
c0027630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027634:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027639:	f7 f1                	div    ecx
c002763b:	c1 e0 04             	shl    eax,0x4
c002763e:	09 d0                	or     eax,edx
c0027640:	31 d2                	xor    edx,edx
c0027642:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027646:	0f b6 c3             	movzx  eax,bl
c0027649:	f7 f1                	div    ecx
c002764b:	c1 e0 04             	shl    eax,0x4
c002764e:	09 d0                	or     eax,edx
c0027650:	31 d2                	xor    edx,edx
c0027652:	89 c3                	mov    ebx,eax
c0027654:	89 f0                	mov    eax,esi
c0027656:	0f b6 c0             	movzx  eax,al
c0027659:	f7 f1                	div    ecx
c002765b:	c1 e0 04             	shl    eax,0x4
c002765e:	09 d0                	or     eax,edx
c0027660:	31 d2                	xor    edx,edx
c0027662:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027666:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002766b:	f7 f1                	div    ecx
c002766d:	c1 e0 04             	shl    eax,0x4
c0027670:	09 d0                	or     eax,edx
c0027672:	31 d2                	xor    edx,edx
c0027674:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002767c:	f7 f1                	div    ecx
c002767e:	c1 e0 04             	shl    eax,0x4
c0027681:	09 d0                	or     eax,edx
c0027683:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027687:	83 e5 02             	and    ebp,0x2
c002768a:	75 1e                	jne    c00276aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002768c:	0f b6 c3             	movzx  eax,bl
c002768f:	83 f8 0b             	cmp    eax,0xb
c0027692:	76 10                	jbe    c00276a4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027694:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027697:	84 d2                	test   dl,dl
c0027699:	88 d3                	mov    bl,dl
c002769b:	75 02                	jne    c002769f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c002769d:	b3 0c                	mov    bl,0xc
c002769f:	83 cb 80             	or     ebx,0xffffff80
c00276a2:	eb 06                	jmp    c00276aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00276a4:	85 c0                	test   eax,eax
c00276a6:	75 02                	jne    c00276aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00276a8:	b3 0c                	mov    bl,0xc
c00276aa:	50                   	push   eax
c00276ab:	0f b6 db             	movzx  ebx,bl
c00276ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00276b3:	52                   	push   edx
c00276b4:	6a 00                	push   0x0
c00276b6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276bc:	e8 af e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00276c1:	83 c4 0c             	add    esp,0xc
c00276c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00276c9:	50                   	push   eax
c00276ca:	6a 02                	push   0x2
c00276cc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276d2:	e8 99 e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00276d7:	83 c4 0c             	add    esp,0xc
c00276da:	53                   	push   ebx
c00276db:	6a 04                	push   0x4
c00276dd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276e3:	e8 88 e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00276e8:	83 c4 0c             	add    esp,0xc
c00276eb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00276f0:	52                   	push   edx
c00276f1:	6a 07                	push   0x7
c00276f3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276f9:	e8 72 e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c00276fe:	83 c4 0c             	add    esp,0xc
c0027701:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027706:	50                   	push   eax
c0027707:	6a 08                	push   0x8
c0027709:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002770f:	e8 5c e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027714:	83 c4 0c             	add    esp,0xc
c0027717:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002771c:	55                   	push   ebp
c002771d:	6a 09                	push   0x9
c002771f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027725:	e8 46 e4 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c002772a:	5a                   	pop    edx
c002772b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002772f:	e8 82 fb ff ff       	call   c00272b6 <RTC::completeRTCRefresh()>
c0027734:	83 c4 3c             	add    esp,0x3c
c0027737:	b0 01                	mov    al,0x1
c0027739:	5b                   	pop    ebx
c002773a:	5e                   	pop    esi
c002773b:	5f                   	pop    edi
c002773c:	5d                   	pop    ebp
c002773d:	c3                   	ret    

c002773e <rtcIRQHandler(regs*, void*)>:
c002773e:	53                   	push   ebx
c002773f:	83 ec 10             	sub    esp,0x10
c0027742:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027746:	6a 0c                	push   0xc
c0027748:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002774e:	e8 05 e3 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c0027753:	83 c4 10             	add    esp,0x10
c0027756:	a8 80                	test   al,0x80
c0027758:	74 24                	je     c002777e <rtcIRQHandler(regs*, void*)+0x40>
c002775a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027761:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027768:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c002776f:	75 0d                	jne    c002777e <rtcIRQHandler(regs*, void*)+0x40>
c0027771:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027775:	83 c4 08             	add    esp,0x8
c0027778:	5b                   	pop    ebx
c0027779:	e9 38 fb ff ff       	jmp    c00272b6 <RTC::completeRTCRefresh()>
c002777e:	83 c4 08             	add    esp,0x8
c0027781:	5b                   	pop    ebx
c0027782:	c3                   	ret    
c0027783:	90                   	nop

c0027784 <RTC::RTC()>:
c0027784:	83 ec 1c             	sub    esp,0x1c
c0027787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002778b:	83 ec 08             	sub    esp,0x8
c002778e:	68 db 2e 03 c0       	push   0xc0032edb
c0027793:	50                   	push   eax
c0027794:	e8 8d 35 ff ff       	call   c001ad26 <Clock::Clock(char const*)>
c0027799:	83 c4 10             	add    esp,0x10
c002779c:	ba f8 2e 03 c0       	mov    edx,0xc0032ef8
c00277a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00277a5:	89 10                	mov    DWORD PTR [eax],edx
c00277a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00277ab:	83 ec 0c             	sub    esp,0xc
c00277ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00277b2:	6a 01                	push   0x1
c00277b4:	68 3e 77 02 c0       	push   0xc002773e
c00277b9:	6a 08                	push   0x8
c00277bb:	50                   	push   eax
c00277bc:	e8 47 3a ff ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00277c1:	83 c4 20             	add    esp,0x20
c00277c4:	89 c2                	mov    edx,eax
c00277c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00277ca:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00277d0:	fa                   	cli    
c00277d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00277d6:	83 c0 01             	add    eax,0x1
c00277d9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00277de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00277e3:	83 ec 08             	sub    esp,0x8
c00277e6:	6a 0b                	push   0xb
c00277e8:	50                   	push   eax
c00277e9:	e8 6a e2 fe ff       	call   c0015a58 <Computer::readCMOS(unsigned char)>
c00277ee:	83 c4 10             	add    esp,0x10
c00277f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00277f5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00277fa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00277fe:	83 ca 10             	or     edx,0x10
c0027801:	0f b6 d2             	movzx  edx,dl
c0027804:	83 ec 04             	sub    esp,0x4
c0027807:	52                   	push   edx
c0027808:	6a 0b                	push   0xb
c002780a:	50                   	push   eax
c002780b:	e8 60 e3 fe ff       	call   c0015b70 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027810:	83 c4 10             	add    esp,0x10
c0027813:	83 ec 0c             	sub    esp,0xc
c0027816:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002781a:	e8 97 fa ff ff       	call   c00272b6 <RTC::completeRTCRefresh()>
c002781f:	83 c4 10             	add    esp,0x10
c0027822:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027827:	83 e8 01             	sub    eax,0x1
c002782a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002782f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027834:	85 c0                	test   eax,eax
c0027836:	75 01                	jne    c0027839 <RTC::RTC()+0xb5>
c0027838:	fb                   	sti    
c0027839:	90                   	nop
c002783a:	83 c4 1c             	add    esp,0x1c
c002783d:	c3                   	ret    
c002783e:	66 90                	xchg   ax,ax

c0027840 <HalConsoleScroll(int, int)>:
c0027840:	83 ec 10             	sub    esp,0x10
c0027843:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c002784b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027853:	90                   	nop
c0027854:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027859:	0f 8f e1 00 00 00    	jg     c0027940 <HalConsoleScroll(int, int)+0x100>
c002785f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027867:	90                   	nop
c0027868:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027870:	0f 8f be 00 00 00    	jg     c0027934 <HalConsoleScroll(int, int)+0xf4>
c0027876:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002787a:	89 d0                	mov    eax,edx
c002787c:	c1 e0 02             	shl    eax,0x2
c002787f:	01 d0                	add    eax,edx
c0027881:	c1 e0 05             	shl    eax,0x5
c0027884:	89 c2                	mov    edx,eax
c0027886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002788a:	01 d0                	add    eax,edx
c002788c:	89 c2                	mov    edx,eax
c002788e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027892:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027899:	89 d0                	mov    eax,edx
c002789b:	c1 e0 02             	shl    eax,0x2
c002789e:	01 d0                	add    eax,edx
c00278a0:	c1 e0 05             	shl    eax,0x5
c00278a3:	89 c2                	mov    edx,eax
c00278a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00278a9:	01 d0                	add    eax,edx
c00278ab:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00278b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278b5:	01 d0                	add    eax,edx
c00278b7:	8a 11                	mov    dl,BYTE PTR [ecx]
c00278b9:	88 10                	mov    BYTE PTR [eax],dl
c00278bb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00278c0:	75 66                	jne    c0027928 <HalConsoleScroll(int, int)+0xe8>
c00278c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00278c6:	83 e0 01             	and    eax,0x1
c00278c9:	74 39                	je     c0027904 <HalConsoleScroll(int, int)+0xc4>
c00278cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00278cf:	83 e0 0f             	and    eax,0xf
c00278d2:	88 c2                	mov    dl,al
c00278d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00278d8:	c1 e0 04             	shl    eax,0x4
c00278db:	09 d0                	or     eax,edx
c00278dd:	88 c1                	mov    cl,al
c00278df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00278e3:	89 d0                	mov    eax,edx
c00278e5:	c1 e0 02             	shl    eax,0x2
c00278e8:	01 d0                	add    eax,edx
c00278ea:	c1 e0 05             	shl    eax,0x5
c00278ed:	89 c2                	mov    edx,eax
c00278ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00278f3:	01 d0                	add    eax,edx
c00278f5:	89 c2                	mov    edx,eax
c00278f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278fb:	01 d0                	add    eax,edx
c00278fd:	88 ca                	mov    dl,cl
c00278ff:	88 10                	mov    BYTE PTR [eax],dl
c0027901:	eb 25                	jmp    c0027928 <HalConsoleScroll(int, int)+0xe8>
c0027903:	90                   	nop
c0027904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027908:	89 d0                	mov    eax,edx
c002790a:	c1 e0 02             	shl    eax,0x2
c002790d:	01 d0                	add    eax,edx
c002790f:	c1 e0 05             	shl    eax,0x5
c0027912:	89 c2                	mov    edx,eax
c0027914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027918:	01 d0                	add    eax,edx
c002791a:	89 c2                	mov    edx,eax
c002791c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027920:	01 d0                	add    eax,edx
c0027922:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027925:	8d 76 00             	lea    esi,[esi+0x0]
c0027928:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c002792d:	e9 36 ff ff ff       	jmp    c0027868 <HalConsoleScroll(int, int)+0x28>
c0027932:	66 90                	xchg   ax,ax
c0027934:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027939:	e9 16 ff ff ff       	jmp    c0027854 <HalConsoleScroll(int, int)+0x14>
c002793e:	66 90                	xchg   ax,ax
c0027940:	90                   	nop
c0027941:	83 c4 10             	add    esp,0x10
c0027944:	c3                   	ret    
c0027945:	8d 76 00             	lea    esi,[esi+0x0]

c0027948 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027948:	83 ec 14             	sub    esp,0x14
c002794b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002794f:	88 04 24             	mov    BYTE PTR [esp],al
c0027952:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027955:	0f b6 c0             	movzx  eax,al
c0027958:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002795c:	89 d1                	mov    ecx,edx
c002795e:	83 e1 0f             	and    ecx,0xf
c0027961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027965:	c1 e2 04             	shl    edx,0x4
c0027968:	0f b6 d2             	movzx  edx,dl
c002796b:	09 ca                	or     edx,ecx
c002796d:	c1 e2 08             	shl    edx,0x8
c0027970:	09 d0                	or     eax,edx
c0027972:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027977:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c002797f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027983:	89 d0                	mov    eax,edx
c0027985:	c1 e0 02             	shl    eax,0x2
c0027988:	01 d0                	add    eax,edx
c002798a:	c1 e0 04             	shl    eax,0x4
c002798d:	89 c2                	mov    edx,eax
c002798f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027993:	01 d0                	add    eax,edx
c0027995:	d1 e0                	shl    eax,1
c0027997:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002799b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002799f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00279a4:	66 89 10             	mov    WORD PTR [eax],dx
c00279a7:	90                   	nop
c00279a8:	83 c4 14             	add    esp,0x14
c00279ab:	c3                   	ret    

c00279ac <HalConsoleCursorUpdate(int, int)>:
c00279ac:	83 ec 20             	sub    esp,0x20
c00279af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00279b3:	89 c2                	mov    edx,eax
c00279b5:	c1 e2 02             	shl    edx,0x2
c00279b8:	01 d0                	add    eax,edx
c00279ba:	c1 e0 04             	shl    eax,0x4
c00279bd:	89 c2                	mov    edx,eax
c00279bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00279c3:	01 d0                	add    eax,edx
c00279c5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00279ca:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00279d1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00279d6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00279da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00279de:	ee                   	out    dx,al
c00279df:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00279e4:	0f b6 c0             	movzx  eax,al
c00279e7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00279ee:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00279f2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00279f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00279fa:	ee                   	out    dx,al
c00279fb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027a02:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027a07:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027a0f:	ee                   	out    dx,al
c0027a10:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027a15:	c1 e8 08             	shr    eax,0x8
c0027a18:	0f b6 c0             	movzx  eax,al
c0027a1b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027a22:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027a26:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027a2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027a2e:	ee                   	out    dx,al
c0027a2f:	90                   	nop
c0027a30:	83 c4 20             	add    esp,0x20
c0027a33:	c3                   	ret    

c0027a34 <FAT::getName()>:
c0027a34:	b8 2c 2f 03 c0       	mov    eax,0xc0032f2c
c0027a39:	c3                   	ret    
c0027a3a:	66 90                	xchg   ax,ax

c0027a3c <FAT::tell(void*, unsigned long long*)>:
c0027a3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027a41:	75 09                	jne    c0027a4c <FAT::tell(void*, unsigned long long*)+0x10>
c0027a43:	b8 04 00 00 00       	mov    eax,0x4
c0027a48:	c3                   	ret    
c0027a49:	8d 76 00             	lea    esi,[esi+0x0]
c0027a4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027a51:	75 09                	jne    c0027a5c <FAT::tell(void*, unsigned long long*)+0x20>
c0027a53:	b8 04 00 00 00       	mov    eax,0x4
c0027a58:	c3                   	ret    
c0027a59:	8d 76 00             	lea    esi,[esi+0x0]
c0027a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027a60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027a63:	ba 00 00 00 00       	mov    edx,0x0
c0027a68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027a6c:	89 01                	mov    DWORD PTR [ecx],eax
c0027a6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027a71:	b8 00 00 00 00       	mov    eax,0x0
c0027a76:	c3                   	ret    
c0027a77:	90                   	nop

c0027a78 <FAT::stat(void*, unsigned long long*)>:
c0027a78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027a7d:	75 09                	jne    c0027a88 <FAT::stat(void*, unsigned long long*)+0x10>
c0027a7f:	b8 04 00 00 00       	mov    eax,0x4
c0027a84:	c3                   	ret    
c0027a85:	8d 76 00             	lea    esi,[esi+0x0]
c0027a88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027a8d:	75 09                	jne    c0027a98 <FAT::stat(void*, unsigned long long*)+0x20>
c0027a8f:	b8 04 00 00 00       	mov    eax,0x4
c0027a94:	c3                   	ret    
c0027a95:	8d 76 00             	lea    esi,[esi+0x0]
c0027a98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027a9f:	ba 00 00 00 00       	mov    edx,0x0
c0027aa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027aa8:	89 01                	mov    DWORD PTR [ecx],eax
c0027aaa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027aad:	b8 00 00 00 00       	mov    eax,0x0
c0027ab2:	c3                   	ret    
c0027ab3:	90                   	nop

c0027ab4 <FAT::~FAT()>:
c0027ab4:	83 ec 0c             	sub    esp,0xc
c0027ab7:	ba 78 2f 03 c0       	mov    edx,0xc0032f78
c0027abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac0:	89 10                	mov    DWORD PTR [eax],edx
c0027ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac6:	83 ec 0c             	sub    esp,0xc
c0027ac9:	50                   	push   eax
c0027aca:	e8 7d 25 ff ff       	call   c001a04c <Filesystem::~Filesystem()>
c0027acf:	83 c4 10             	add    esp,0x10
c0027ad2:	90                   	nop
c0027ad3:	83 c4 0c             	add    esp,0xc
c0027ad6:	c3                   	ret    
c0027ad7:	90                   	nop

c0027ad8 <FAT::~FAT()>:
c0027ad8:	83 ec 0c             	sub    esp,0xc
c0027adb:	83 ec 0c             	sub    esp,0xc
c0027ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ae2:	e8 cd ff ff ff       	call   c0027ab4 <FAT::~FAT()>
c0027ae7:	83 c4 10             	add    esp,0x10
c0027aea:	83 ec 08             	sub    esp,0x8
c0027aed:	6a 08                	push   0x8
c0027aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027af3:	e8 d0 15 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c0027af8:	83 c4 10             	add    esp,0x10
c0027afb:	83 c4 0c             	add    esp,0xc
c0027afe:	c3                   	ret    
c0027aff:	90                   	nop

c0027b00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027b00:	83 ec 1c             	sub    esp,0x1c
c0027b03:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027b0a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027b0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027b13:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027b1a:	83 f8 ff             	cmp    eax,0xffffffff
c0027b1d:	75 35                	jne    c0027b54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027b1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027b23:	88 c2                	mov    dl,al
c0027b25:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027b2a:	01 d0                	add    eax,edx
c0027b2c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027b30:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027b36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027b3a:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027b41:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027b46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027b4a:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027b51:	eb 19                	jmp    c0027b6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027b53:	90                   	nop
c0027b54:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027b58:	88 c2                	mov    dl,al
c0027b5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027b5e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027b65:	01 d0                	add    eax,edx
c0027b67:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027b6b:	90                   	nop
c0027b6c:	83 ec 04             	sub    esp,0x4
c0027b6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027b73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027b77:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027b7b:	50                   	push   eax
c0027b7c:	e8 26 d5 fd ff       	call   c00050a7 <f_getlabel>
c0027b81:	83 c4 10             	add    esp,0x10
c0027b84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027b88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027b8d:	75 09                	jne    c0027b98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027b8f:	b8 00 00 00 00       	mov    eax,0x0
c0027b94:	eb 0a                	jmp    c0027ba0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027b96:	66 90                	xchg   ax,ax
c0027b98:	b8 01 00 00 00       	mov    eax,0x1
c0027b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0027ba0:	83 c4 1c             	add    esp,0x1c
c0027ba3:	c3                   	ret    

c0027ba4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027ba4:	53                   	push   ebx
c0027ba5:	83 ec 58             	sub    esp,0x58
c0027ba8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027bb0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027bb4:	b9 00 00 00 00       	mov    ecx,0x0
c0027bb9:	b8 3c 00 00 00       	mov    eax,0x3c
c0027bbe:	83 e0 f8             	and    eax,0xfffffff8
c0027bc1:	89 c3                	mov    ebx,eax
c0027bc3:	b8 00 00 00 00       	mov    eax,0x0
c0027bc8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0027bcc:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0027bd0:	83 c0 08             	add    eax,0x8
c0027bd3:	39 d8                	cmp    eax,ebx
c0027bd5:	72 f1                	jb     c0027bc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0027bd7:	01 c2                	add    edx,eax
c0027bd9:	89 0a                	mov    DWORD PTR [edx],ecx
c0027bdb:	83 c2 04             	add    edx,0x4
c0027bde:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027be2:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027be9:	83 f8 ff             	cmp    eax,0xffffffff
c0027bec:	75 36                	jne    c0027c24 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0027bee:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027bf2:	88 c2                	mov    dl,al
c0027bf4:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027bf9:	01 d0                	add    eax,edx
c0027bfb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027bff:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027c05:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027c09:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027c10:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027c15:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027c19:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027c20:	eb 1a                	jmp    c0027c3c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0027c22:	66 90                	xchg   ax,ax
c0027c24:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027c28:	88 c2                	mov    dl,al
c0027c2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027c2e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027c35:	01 d0                	add    eax,edx
c0027c37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027c3b:	90                   	nop
c0027c3c:	83 ec 08             	sub    esp,0x8
c0027c3f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027c43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027c47:	50                   	push   eax
c0027c48:	e8 23 8c fd ff       	call   c0000870 <strcat>
c0027c4d:	83 c4 10             	add    esp,0x10
c0027c50:	83 ec 0c             	sub    esp,0xc
c0027c53:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027c57:	50                   	push   eax
c0027c58:	e8 9e d5 fd ff       	call   c00051fb <f_setlabel>
c0027c5d:	83 c4 10             	add    esp,0x10
c0027c60:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027c64:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027c69:	75 09                	jne    c0027c74 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0027c6b:	b8 00 00 00 00       	mov    eax,0x0
c0027c70:	eb 0a                	jmp    c0027c7c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0027c72:	66 90                	xchg   ax,ax
c0027c74:	b8 01 00 00 00       	mov    eax,0x1
c0027c79:	8d 76 00             	lea    esi,[esi+0x0]
c0027c7c:	83 c4 58             	add    esp,0x58
c0027c7f:	5b                   	pop    ebx
c0027c80:	c3                   	ret    
c0027c81:	90                   	nop
c0027c82:	66 90                	xchg   ax,ax

c0027c84 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027c84:	83 ec 2c             	sub    esp,0x2c
c0027c87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027c8f:	83 ec 08             	sub    esp,0x8
c0027c92:	68 50 2f 03 c0       	push   0xc0032f50
c0027c97:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027c9b:	e8 e0 8a fd ff       	call   c0000780 <strcmp>
c0027ca0:	83 c4 10             	add    esp,0x10
c0027ca3:	85 c0                	test   eax,eax
c0027ca5:	0f 94 c0             	sete   al
c0027ca8:	0f b6 c0             	movzx  eax,al
c0027cab:	85 c0                	test   eax,eax
c0027cad:	74 0d                	je     c0027cbc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027caf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027cb7:	e9 c0 00 00 00       	jmp    c0027d7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027cbc:	83 ec 08             	sub    esp,0x8
c0027cbf:	68 42 2f 03 c0       	push   0xc0032f42
c0027cc4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027cc8:	e8 b3 8a fd ff       	call   c0000780 <strcmp>
c0027ccd:	83 c4 10             	add    esp,0x10
c0027cd0:	85 c0                	test   eax,eax
c0027cd2:	0f 94 c0             	sete   al
c0027cd5:	0f b6 c0             	movzx  eax,al
c0027cd8:	85 c0                	test   eax,eax
c0027cda:	74 10                	je     c0027cec <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027cdc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027ce4:	e9 93 00 00 00       	jmp    c0027d7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0027cec:	83 ec 08             	sub    esp,0x8
c0027cef:	68 48 2f 03 c0       	push   0xc0032f48
c0027cf4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027cf8:	e8 83 8a fd ff       	call   c0000780 <strcmp>
c0027cfd:	83 c4 10             	add    esp,0x10
c0027d00:	85 c0                	test   eax,eax
c0027d02:	0f 94 c0             	sete   al
c0027d05:	0f b6 c0             	movzx  eax,al
c0027d08:	85 c0                	test   eax,eax
c0027d0a:	74 0c                	je     c0027d18 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0027d0c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027d14:	eb 66                	jmp    c0027d7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027d16:	66 90                	xchg   ax,ax
c0027d18:	83 ec 08             	sub    esp,0x8
c0027d1b:	68 fc f0 02 c0       	push   0xc002f0fc
c0027d20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027d24:	e8 57 8a fd ff       	call   c0000780 <strcmp>
c0027d29:	83 c4 10             	add    esp,0x10
c0027d2c:	85 c0                	test   eax,eax
c0027d2e:	0f 94 c0             	sete   al
c0027d31:	0f b6 c0             	movzx  eax,al
c0027d34:	85 c0                	test   eax,eax
c0027d36:	74 0c                	je     c0027d44 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0027d38:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0027d40:	eb 3a                	jmp    c0027d7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027d42:	66 90                	xchg   ax,ax
c0027d44:	83 ec 08             	sub    esp,0x8
c0027d47:	68 4e 2f 03 c0       	push   0xc0032f4e
c0027d4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027d50:	e8 2b 8a fd ff       	call   c0000780 <strcmp>
c0027d55:	83 c4 10             	add    esp,0x10
c0027d58:	85 c0                	test   eax,eax
c0027d5a:	0f 94 c0             	sete   al
c0027d5d:	0f b6 c0             	movzx  eax,al
c0027d60:	85 c0                	test   eax,eax
c0027d62:	74 0c                	je     c0027d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0027d64:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0027d6c:	eb 0e                	jmp    c0027d7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027d6e:	66 90                	xchg   ax,ax
c0027d70:	b8 08 00 00 00       	mov    eax,0x8
c0027d75:	e9 ea 00 00 00       	jmp    c0027e64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027d7a:	66 90                	xchg   ax,ax
c0027d7c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0027d83:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027d88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027d8c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027d93:	83 f8 ff             	cmp    eax,0xffffffff
c0027d96:	75 34                	jne    c0027dcc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0027d98:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0027d9c:	88 c2                	mov    dl,al
c0027d9e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027da3:	01 d0                	add    eax,edx
c0027da5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0027da9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027daf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027db3:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027dba:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027dbf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027dc3:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027dca:	eb 18                	jmp    c0027de4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0027dcc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0027dd0:	88 c2                	mov    dl,al
c0027dd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027dd6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ddd:	01 d0                	add    eax,edx
c0027ddf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0027de3:	90                   	nop
c0027de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027de8:	88 04 24             	mov    BYTE PTR [esp],al
c0027deb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0027def:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027df3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0027dfb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0027e00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027e08:	83 ec 0c             	sub    esp,0xc
c0027e0b:	68 00 20 00 00       	push   0x2000
c0027e10:	e8 7a e5 fe ff       	call   c001638f <malloc>
c0027e15:	83 c4 10             	add    esp,0x10
c0027e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027e1c:	68 00 20 00 00       	push   0x2000
c0027e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027e29:	50                   	push   eax
c0027e2a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0027e2e:	50                   	push   eax
c0027e2f:	e8 c4 d6 fd ff       	call   c00054f8 <f_mkfs>
c0027e34:	83 c4 10             	add    esp,0x10
c0027e37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027e3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027e40:	75 0a                	jne    c0027e4c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0027e42:	b8 00 00 00 00       	mov    eax,0x0
c0027e47:	eb 1b                	jmp    c0027e64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027e49:	8d 76 00             	lea    esi,[esi+0x0]
c0027e4c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0027e51:	75 09                	jne    c0027e5c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0027e53:	b8 09 00 00 00       	mov    eax,0x9
c0027e58:	eb 0a                	jmp    c0027e64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027e5a:	66 90                	xchg   ax,ax
c0027e5c:	b8 01 00 00 00       	mov    eax,0x1
c0027e61:	8d 76 00             	lea    esi,[esi+0x0]
c0027e64:	83 c4 2c             	add    esp,0x2c
c0027e67:	c3                   	ret    

c0027e68 <FAT::tryMount(LogicalDisk*, int)>:
c0027e68:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0027e6e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e73:	83 f8 14             	cmp    eax,0x14
c0027e76:	75 18                	jne    c0027e90 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0027e78:	83 ec 0c             	sub    esp,0xc
c0027e7b:	68 54 2f 03 c0       	push   0xc0032f54
c0027e80:	e8 ee 81 ff ff       	call   c0020073 <KePanic(char const*)>
c0027e85:	83 c4 10             	add    esp,0x10
c0027e88:	b0 00                	mov    al,0x0
c0027e8a:	e9 ed 01 00 00       	jmp    c002807c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027e8f:	90                   	nop
c0027e90:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0027e97:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0027e9d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0027ea3:	3d 00 02 00 00       	cmp    eax,0x200
c0027ea8:	74 0a                	je     c0027eb4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0027eaa:	b0 00                	mov    al,0x0
c0027eac:	e9 cb 01 00 00       	jmp    c002807c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0027eb4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0027ebc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0027ec3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027eca:	83 f8 ff             	cmp    eax,0xffffffff
c0027ecd:	74 09                	je     c0027ed8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0027ecf:	b0 01                	mov    al,0x1
c0027ed1:	e9 a6 01 00 00       	jmp    c002807c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027ed6:	66 90                	xchg   ax,ax
c0027ed8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0027ee2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0027eea:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0027ef1:	88 c2                	mov    dl,al
c0027ef3:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ef8:	01 d0                	add    eax,edx
c0027efa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0027f01:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027f07:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0027f0e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f15:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f1a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0027f21:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f28:	83 ec 0c             	sub    esp,0xc
c0027f2b:	68 34 02 00 00       	push   0x234
c0027f30:	e8 5a e4 fe ff       	call   c001638f <malloc>
c0027f35:	83 c4 10             	add    esp,0x10
c0027f38:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0027f3f:	83 ec 04             	sub    esp,0x4
c0027f42:	6a 00                	push   0x0
c0027f44:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0027f4b:	50                   	push   eax
c0027f4c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0027f53:	e8 9a bd fd ff       	call   c0003cf2 <f_mount>
c0027f58:	83 c4 10             	add    esp,0x10
c0027f5b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0027f62:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0027f6a:	74 1c                	je     c0027f88 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0027f6c:	83 ec 0c             	sub    esp,0xc
c0027f6f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0027f76:	e8 34 e4 fe ff       	call   c00163af <rfree>
c0027f7b:	83 c4 10             	add    esp,0x10
c0027f7e:	b0 00                	mov    al,0x0
c0027f80:	e9 f7 00 00 00       	jmp    c002807c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027f85:	8d 76 00             	lea    esi,[esi+0x0]
c0027f88:	83 ec 04             	sub    esp,0x4
c0027f8b:	68 00 01 00 00       	push   0x100
c0027f90:	6a 00                	push   0x0
c0027f92:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027f99:	50                   	push   eax
c0027f9a:	e8 51 85 fd ff       	call   c00004f0 <memset>
c0027f9f:	83 c4 10             	add    esp,0x10
c0027fa2:	83 ec 08             	sub    esp,0x8
c0027fa5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0027fac:	50                   	push   eax
c0027fad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027fb4:	50                   	push   eax
c0027fb5:	e8 b6 88 fd ff       	call   c0000870 <strcat>
c0027fba:	83 c4 10             	add    esp,0x10
c0027fbd:	83 ec 08             	sub    esp,0x8
c0027fc0:	68 62 2f 03 c0       	push   0xc0032f62
c0027fc5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027fcc:	50                   	push   eax
c0027fcd:	e8 9e 88 fd ff       	call   c0000870 <strcat>
c0027fd2:	83 c4 10             	add    esp,0x10
c0027fd5:	83 ec 04             	sub    esp,0x4
c0027fd8:	6a 01                	push   0x1
c0027fda:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0027fe1:	50                   	push   eax
c0027fe2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027fe6:	50                   	push   eax
c0027fe7:	e8 68 bd fd ff       	call   c0003d54 <f_open>
c0027fec:	83 c4 10             	add    esp,0x10
c0027fef:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0027ff6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0027ffd:	85 c0                	test   eax,eax
c0027fff:	74 0b                	je     c002800c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0028001:	78 31                	js     c0028034 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028003:	83 e8 04             	sub    eax,0x4
c0028006:	83 f8 01             	cmp    eax,0x1
c0028009:	77 29                	ja     c0028034 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002800b:	90                   	nop
c002800c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0028014:	83 ec 0c             	sub    esp,0xc
c0028017:	8d 44 24 14          	lea    eax,[esp+0x14]
c002801b:	50                   	push   eax
c002801c:	e8 e3 c4 fd ff       	call   c0004504 <f_close>
c0028021:	83 c4 10             	add    esp,0x10
c0028024:	90                   	nop
c0028025:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c002802d:	85 c0                	test   eax,eax
c002802f:	74 43                	je     c0028074 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028031:	eb 31                	jmp    c0028064 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0028033:	90                   	nop
c0028034:	83 ec 0c             	sub    esp,0xc
c0028037:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002803e:	e8 6c e3 fe ff       	call   c00163af <rfree>
c0028043:	83 c4 10             	add    esp,0x10
c0028046:	83 ec 04             	sub    esp,0x4
c0028049:	6a 00                	push   0x0
c002804b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028052:	50                   	push   eax
c0028053:	6a 00                	push   0x0
c0028055:	e8 98 bc fd ff       	call   c0003cf2 <f_mount>
c002805a:	83 c4 10             	add    esp,0x10
c002805d:	b0 00                	mov    al,0x0
c002805f:	eb 1b                	jmp    c002807c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028061:	8d 76 00             	lea    esi,[esi+0x0]
c0028064:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028069:	83 c0 01             	add    eax,0x1
c002806c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028071:	8d 76 00             	lea    esi,[esi+0x0]
c0028074:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002807b:	90                   	nop
c002807c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028082:	c3                   	ret    
c0028083:	90                   	nop

c0028084 <FAT::allocateSwapfile(char const*, int)>:
c0028084:	55                   	push   ebp
c0028085:	57                   	push   edi
c0028086:	56                   	push   esi
c0028087:	53                   	push   ebx
c0028088:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002808e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028099:	83 ec 0c             	sub    esp,0xc
c002809c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00280a3:	e8 e7 e2 fe ff       	call   c001638f <malloc>
c00280a8:	83 c4 10             	add    esp,0x10
c00280ab:	89 c7                	mov    edi,eax
c00280ad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00280b2:	83 ec 04             	sub    esp,0x4
c00280b5:	50                   	push   eax
c00280b6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00280bd:	57                   	push   edi
c00280be:	e8 1b 23 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c00280c3:	83 c4 10             	add    esp,0x10
c00280c6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00280cd:	83 ec 04             	sub    esp,0x4
c00280d0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00280d4:	50                   	push   eax
c00280d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00280d9:	50                   	push   eax
c00280da:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00280e1:	e8 18 26 ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c00280e6:	83 c4 10             	add    esp,0x10
c00280e9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00280f0:	c1 e0 14             	shl    eax,0x14
c00280f3:	89 c7                	mov    edi,eax
c00280f5:	89 c5                	mov    ebp,eax
c00280f7:	c1 fd 1f             	sar    ebp,0x1f
c00280fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028102:	89 f9                	mov    ecx,edi
c0028104:	31 c1                	xor    ecx,eax
c0028106:	89 cb                	mov    ebx,ecx
c0028108:	89 e9                	mov    ecx,ebp
c002810a:	31 d1                	xor    ecx,edx
c002810c:	89 ce                	mov    esi,ecx
c002810e:	89 f0                	mov    eax,esi
c0028110:	09 d8                	or     eax,ebx
c0028112:	0f 84 9c 00 00 00    	je     c00281b4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0028118:	83 ec 0c             	sub    esp,0xc
c002811b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028122:	e8 a3 24 ff ff       	call   c001a5ca <File::unlink()>
c0028127:	83 c4 10             	add    esp,0x10
c002812a:	83 ec 08             	sub    esp,0x8
c002812d:	6a 12                	push   0x12
c002812f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028136:	e8 c1 22 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c002813b:	83 c4 10             	add    esp,0x10
c002813e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028145:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002814b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028152:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028159:	c1 e0 14             	shl    eax,0x14
c002815c:	83 ec 04             	sub    esp,0x4
c002815f:	6a 01                	push   0x1
c0028161:	50                   	push   eax
c0028162:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028169:	e8 1d d2 fd ff       	call   c000538b <f_expand>
c002816e:	83 c4 10             	add    esp,0x10
c0028171:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028178:	8b 00                	mov    eax,DWORD PTR [eax]
c002817a:	83 c0 10             	add    eax,0x10
c002817d:	8b 00                	mov    eax,DWORD PTR [eax]
c002817f:	83 ec 0c             	sub    esp,0xc
c0028182:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028186:	52                   	push   edx
c0028187:	8d 54 24 30          	lea    edx,[esp+0x30]
c002818b:	52                   	push   edx
c002818c:	6a 00                	push   0x0
c002818e:	68 00 04 00 00       	push   0x400
c0028193:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002819a:	ff d0                	call   eax
c002819c:	83 c4 20             	add    esp,0x20
c002819f:	83 ec 0c             	sub    esp,0xc
c00281a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00281a9:	e8 ac 22 ff ff       	call   c001a45a <File::close()>
c00281ae:	83 c4 10             	add    esp,0x10
c00281b1:	8d 76 00             	lea    esi,[esi+0x0]
c00281b4:	83 ec 08             	sub    esp,0x8
c00281b7:	6a 01                	push   0x1
c00281b9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00281c0:	e8 37 22 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c00281c5:	83 c4 10             	add    esp,0x10
c00281c8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00281cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00281d1:	83 c0 0c             	add    eax,0xc
c00281d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00281d6:	83 ec 0c             	sub    esp,0xc
c00281d9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00281dd:	52                   	push   edx
c00281de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00281e2:	52                   	push   edx
c00281e3:	6a 00                	push   0x0
c00281e5:	6a 04                	push   0x4
c00281e7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00281ee:	ff d0                	call   eax
c00281f0:	83 c4 20             	add    esp,0x20
c00281f3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00281fa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028200:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028207:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c002820e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028211:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028218:	83 ec 0c             	sub    esp,0xc
c002821b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028222:	e8 33 22 ff ff       	call   c001a45a <File::close()>
c0028227:	83 c4 10             	add    esp,0x10
c002822a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028231:	ba 00 00 00 00       	mov    edx,0x0
c0028236:	81 c4 3c 04 00 00    	add    esp,0x43c
c002823c:	5b                   	pop    ebx
c002823d:	5e                   	pop    esi
c002823e:	5f                   	pop    edi
c002823f:	5d                   	pop    ebp
c0028240:	c3                   	ret    
c0028241:	90                   	nop
c0028242:	66 90                	xchg   ax,ax

c0028244 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028244:	57                   	push   edi
c0028245:	56                   	push   esi
c0028246:	53                   	push   ebx
c0028247:	81 ec 50 02 00 00    	sub    esp,0x250
c002824d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028255:	74 0d                	je     c0028264 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028257:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002825f:	75 0f                	jne    c0028270 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028261:	8d 76 00             	lea    esi,[esi+0x0]
c0028264:	b8 04 00 00 00       	mov    eax,0x4
c0028269:	e9 3a 01 00 00       	jmp    c00283a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002826e:	66 90                	xchg   ax,ax
c0028270:	83 ec 08             	sub    esp,0x8
c0028273:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002827a:	50                   	push   eax
c002827b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028282:	e8 49 c5 fd ff       	call   c00047d0 <f_readdir>
c0028287:	83 c4 10             	add    esp,0x10
c002828a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028291:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028298:	83 ec 0c             	sub    esp,0xc
c002829b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00282a2:	83 c0 16             	add    eax,0x16
c00282a5:	50                   	push   eax
c00282a6:	e8 d5 82 fd ff       	call   c0000580 <strlen>
c00282ab:	83 c4 10             	add    esp,0x10
c00282ae:	ba 00 00 00 00       	mov    edx,0x0
c00282b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00282b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00282bb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00282c2:	0f b6 c0             	movzx  eax,al
c00282c5:	83 e0 10             	and    eax,0x10
c00282c8:	74 0a                	je     c00282d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00282ca:	b8 02 00 00 00       	mov    eax,0x2
c00282cf:	eb 0b                	jmp    c00282dc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00282d1:	8d 76 00             	lea    esi,[esi+0x0]
c00282d4:	b8 01 00 00 00       	mov    eax,0x1
c00282d9:	8d 76 00             	lea    esi,[esi+0x0]
c00282dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00282e0:	83 ec 08             	sub    esp,0x8
c00282e3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00282ea:	83 c0 16             	add    eax,0x16
c00282ed:	50                   	push   eax
c00282ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282f2:	83 c0 10             	add    eax,0x10
c00282f5:	50                   	push   eax
c00282f6:	e8 55 83 fd ff       	call   c0000650 <strcpy>
c00282fb:	83 c4 10             	add    esp,0x10
c00282fe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028305:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002830c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028310:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028317:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002831e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028325:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002832c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028333:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002833a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028341:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028348:	89 c6                	mov    esi,eax
c002834a:	89 d7                	mov    edi,edx
c002834c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002834e:	89 c8                	mov    eax,ecx
c0028350:	89 fa                	mov    edx,edi
c0028352:	89 f3                	mov    ebx,esi
c0028354:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002835b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028362:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028369:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028370:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028376:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002837d:	0f be c0             	movsx  eax,al
c0028380:	85 c0                	test   eax,eax
c0028382:	75 08                	jne    c002838c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028384:	b8 07 00 00 00       	mov    eax,0x7
c0028389:	eb 1d                	jmp    c00283a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002838b:	90                   	nop
c002838c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028393:	85 c0                	test   eax,eax
c0028395:	75 09                	jne    c00283a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028397:	b8 00 00 00 00       	mov    eax,0x0
c002839c:	eb 0a                	jmp    c00283a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002839e:	66 90                	xchg   ax,ax
c00283a0:	b8 01 00 00 00       	mov    eax,0x1
c00283a5:	8d 76 00             	lea    esi,[esi+0x0]
c00283a8:	81 c4 50 02 00 00    	add    esp,0x250
c00283ae:	5b                   	pop    ebx
c00283af:	5e                   	pop    esi
c00283b0:	5f                   	pop    edi
c00283b1:	c3                   	ret    
c00283b2:	66 90                	xchg   ax,ax

c00283b4 <FAT::read(void*, unsigned long, void*, int*)>:
c00283b4:	83 ec 1c             	sub    esp,0x1c
c00283b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00283bc:	74 0a                	je     c00283c8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00283be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00283c3:	75 0b                	jne    c00283d0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00283c5:	8d 76 00             	lea    esi,[esi+0x0]
c00283c8:	b8 04 00 00 00       	mov    eax,0x4
c00283cd:	eb 41                	jmp    c0028410 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00283cf:	90                   	nop
c00283d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00283d4:	50                   	push   eax
c00283d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00283d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00283dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00283e1:	e8 31 bc fd ff       	call   c0004017 <f_read>
c00283e6:	83 c4 10             	add    esp,0x10
c00283e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00283ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00283f1:	89 c2                	mov    edx,eax
c00283f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00283f7:	89 10                	mov    DWORD PTR [eax],edx
c00283f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00283fd:	85 c0                	test   eax,eax
c00283ff:	75 07                	jne    c0028408 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028401:	b8 00 00 00 00       	mov    eax,0x0
c0028406:	eb 08                	jmp    c0028410 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028408:	b8 01 00 00 00       	mov    eax,0x1
c002840d:	8d 76 00             	lea    esi,[esi+0x0]
c0028410:	83 c4 1c             	add    esp,0x1c
c0028413:	c3                   	ret    

c0028414 <FAT::write(void*, unsigned long, void*, int*)>:
c0028414:	83 ec 1c             	sub    esp,0x1c
c0028417:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002841c:	74 0a                	je     c0028428 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c002841e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028423:	75 0b                	jne    c0028430 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028425:	8d 76 00             	lea    esi,[esi+0x0]
c0028428:	b8 04 00 00 00       	mov    eax,0x4
c002842d:	eb 41                	jmp    c0028470 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c002842f:	90                   	nop
c0028430:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028434:	50                   	push   eax
c0028435:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002843d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028441:	e8 b2 bd fd ff       	call   c00041f8 <f_write>
c0028446:	83 c4 10             	add    esp,0x10
c0028449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002844d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028451:	89 c2                	mov    edx,eax
c0028453:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028457:	89 10                	mov    DWORD PTR [eax],edx
c0028459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002845d:	85 c0                	test   eax,eax
c002845f:	75 07                	jne    c0028468 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028461:	b8 00 00 00 00       	mov    eax,0x0
c0028466:	eb 08                	jmp    c0028470 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028468:	b8 01 00 00 00       	mov    eax,0x1
c002846d:	8d 76 00             	lea    esi,[esi+0x0]
c0028470:	83 c4 1c             	add    esp,0x1c
c0028473:	c3                   	ret    

c0028474 <FAT::close(void*)>:
c0028474:	83 ec 1c             	sub    esp,0x1c
c0028477:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002847c:	75 0a                	jne    c0028488 <FAT::close(void*)+0x14>
c002847e:	b8 04 00 00 00       	mov    eax,0x4
c0028483:	eb 3f                	jmp    c00284c4 <FAT::close(void*)+0x50>
c0028485:	8d 76 00             	lea    esi,[esi+0x0]
c0028488:	83 ec 0c             	sub    esp,0xc
c002848b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002848f:	e8 70 c0 fd ff       	call   c0004504 <f_close>
c0028494:	83 c4 10             	add    esp,0x10
c0028497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002849b:	83 ec 0c             	sub    esp,0xc
c002849e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00284a2:	e8 f8 de fe ff       	call   c001639f <free>
c00284a7:	83 c4 10             	add    esp,0x10
c00284aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00284ae:	85 c0                	test   eax,eax
c00284b0:	75 0a                	jne    c00284bc <FAT::close(void*)+0x48>
c00284b2:	b8 00 00 00 00       	mov    eax,0x0
c00284b7:	eb 0b                	jmp    c00284c4 <FAT::close(void*)+0x50>
c00284b9:	8d 76 00             	lea    esi,[esi+0x0]
c00284bc:	b8 01 00 00 00       	mov    eax,0x1
c00284c1:	8d 76 00             	lea    esi,[esi+0x0]
c00284c4:	83 c4 1c             	add    esp,0x1c
c00284c7:	c3                   	ret    

c00284c8 <FAT::closeDir(void*)>:
c00284c8:	83 ec 1c             	sub    esp,0x1c
c00284cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00284d0:	75 0a                	jne    c00284dc <FAT::closeDir(void*)+0x14>
c00284d2:	b8 04 00 00 00       	mov    eax,0x4
c00284d7:	eb 3f                	jmp    c0028518 <FAT::closeDir(void*)+0x50>
c00284d9:	8d 76 00             	lea    esi,[esi+0x0]
c00284dc:	83 ec 0c             	sub    esp,0xc
c00284df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00284e3:	e8 c6 c2 fd ff       	call   c00047ae <f_closedir>
c00284e8:	83 c4 10             	add    esp,0x10
c00284eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00284ef:	83 ec 0c             	sub    esp,0xc
c00284f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00284f6:	e8 a4 de fe ff       	call   c001639f <free>
c00284fb:	83 c4 10             	add    esp,0x10
c00284fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028502:	85 c0                	test   eax,eax
c0028504:	75 0a                	jne    c0028510 <FAT::closeDir(void*)+0x48>
c0028506:	b8 00 00 00 00       	mov    eax,0x0
c002850b:	eb 0b                	jmp    c0028518 <FAT::closeDir(void*)+0x50>
c002850d:	8d 76 00             	lea    esi,[esi+0x0]
c0028510:	b8 01 00 00 00       	mov    eax,0x1
c0028515:	8d 76 00             	lea    esi,[esi+0x0]
c0028518:	83 c4 1c             	add    esp,0x1c
c002851b:	c3                   	ret    

c002851c <FAT::truncate(void*, unsigned long long)>:
c002851c:	83 ec 2c             	sub    esp,0x2c
c002851f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028527:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002852b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002852f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028534:	75 0a                	jne    c0028540 <FAT::truncate(void*, unsigned long long)+0x24>
c0028536:	b8 04 00 00 00       	mov    eax,0x4
c002853b:	eb 47                	jmp    c0028584 <FAT::truncate(void*, unsigned long long)+0x68>
c002853d:	8d 76 00             	lea    esi,[esi+0x0]
c0028540:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028544:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028547:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002854b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028557:	83 ec 08             	sub    esp,0x8
c002855a:	50                   	push   eax
c002855b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002855f:	e8 cf bf fd ff       	call   c0004533 <f_lseek>
c0028564:	83 c4 10             	add    esp,0x10
c0028567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002856b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002856f:	85 c0                	test   eax,eax
c0028571:	75 09                	jne    c002857c <FAT::truncate(void*, unsigned long long)+0x60>
c0028573:	b8 00 00 00 00       	mov    eax,0x0
c0028578:	eb 0a                	jmp    c0028584 <FAT::truncate(void*, unsigned long long)+0x68>
c002857a:	66 90                	xchg   ax,ax
c002857c:	b8 01 00 00 00       	mov    eax,0x1
c0028581:	8d 76 00             	lea    esi,[esi+0x0]
c0028584:	83 c4 2c             	add    esp,0x2c
c0028587:	c3                   	ret    

c0028588 <FAT::seek(void*, unsigned long long)>:
c0028588:	83 ec 2c             	sub    esp,0x2c
c002858b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002858f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028593:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002859b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00285a0:	75 0a                	jne    c00285ac <FAT::seek(void*, unsigned long long)+0x24>
c00285a2:	b8 04 00 00 00       	mov    eax,0x4
c00285a7:	eb 33                	jmp    c00285dc <FAT::seek(void*, unsigned long long)+0x54>
c00285a9:	8d 76 00             	lea    esi,[esi+0x0]
c00285ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285b0:	83 ec 08             	sub    esp,0x8
c00285b3:	50                   	push   eax
c00285b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00285b8:	e8 76 bf fd ff       	call   c0004533 <f_lseek>
c00285bd:	83 c4 10             	add    esp,0x10
c00285c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00285c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00285c8:	85 c0                	test   eax,eax
c00285ca:	75 08                	jne    c00285d4 <FAT::seek(void*, unsigned long long)+0x4c>
c00285cc:	b8 00 00 00 00       	mov    eax,0x0
c00285d1:	eb 09                	jmp    c00285dc <FAT::seek(void*, unsigned long long)+0x54>
c00285d3:	90                   	nop
c00285d4:	b8 01 00 00 00       	mov    eax,0x1
c00285d9:	8d 76 00             	lea    esi,[esi+0x0]
c00285dc:	83 c4 2c             	add    esp,0x2c
c00285df:	c3                   	ret    

c00285e0 <fatWrapperReadDisk>:
c00285e0:	53                   	push   ebx
c00285e1:	83 ec 18             	sub    esp,0x18
c00285e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00285e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00285f1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00285f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00285fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028600:	ba 00 00 00 00       	mov    edx,0x0
c0028605:	83 ec 0c             	sub    esp,0xc
c0028608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002860c:	53                   	push   ebx
c002860d:	52                   	push   edx
c002860e:	50                   	push   eax
c002860f:	51                   	push   ecx
c0028610:	e8 3d 40 ff ff       	call   c001c652 <LogicalDisk::read(unsigned long long, int, void*)>
c0028615:	83 c4 20             	add    esp,0x20
c0028618:	83 c4 18             	add    esp,0x18
c002861b:	5b                   	pop    ebx
c002861c:	c3                   	ret    
c002861d:	8d 76 00             	lea    esi,[esi+0x0]

c0028620 <fatWrapperWriteDisk>:
c0028620:	53                   	push   ebx
c0028621:	83 ec 18             	sub    esp,0x18
c0028624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028628:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002862c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028631:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028638:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002863c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028640:	ba 00 00 00 00       	mov    edx,0x0
c0028645:	83 ec 0c             	sub    esp,0xc
c0028648:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002864c:	53                   	push   ebx
c002864d:	52                   	push   edx
c002864e:	50                   	push   eax
c002864f:	51                   	push   ecx
c0028650:	e8 69 40 ff ff       	call   c001c6be <LogicalDisk::write(unsigned long long, int, void*)>
c0028655:	83 c4 20             	add    esp,0x20
c0028658:	83 c4 18             	add    esp,0x18
c002865b:	5b                   	pop    ebx
c002865c:	c3                   	ret    
c002865d:	8d 76 00             	lea    esi,[esi+0x0]

c0028660 <fatWrapperIoctl>:
c0028660:	53                   	push   ebx
c0028661:	83 ec 28             	sub    esp,0x28
c0028664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028668:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002866c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028670:	88 d0                	mov    al,dl
c0028672:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028676:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002867b:	83 f8 02             	cmp    eax,0x2
c002867e:	75 34                	jne    c00286b4 <fatWrapperIoctl+0x54>
c0028680:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028688:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002868d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028694:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002869a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00286a0:	89 c2                	mov    edx,eax
c00286a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00286a6:	66 89 10             	mov    WORD PTR [eax],dx
c00286a9:	b8 00 00 00 00       	mov    eax,0x0
c00286ae:	e9 c5 00 00 00       	jmp    c0028778 <fatWrapperIoctl+0x118>
c00286b3:	90                   	nop
c00286b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00286b9:	83 f8 01             	cmp    eax,0x1
c00286bc:	75 6a                	jne    c0028728 <fatWrapperIoctl+0xc8>
c00286be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00286c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00286c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00286cb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c00286d2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00286d8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00286de:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00286e4:	89 c8                	mov    eax,ecx
c00286e6:	89 da                	mov    edx,ebx
c00286e8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00286ec:	c1 e0 0a             	shl    eax,0xa
c00286ef:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00286f4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00286fb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028701:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028707:	89 cb                	mov    ebx,ecx
c0028709:	c1 fb 1f             	sar    ebx,0x1f
c002870c:	53                   	push   ebx
c002870d:	51                   	push   ecx
c002870e:	52                   	push   edx
c002870f:	50                   	push   eax
c0028710:	e8 eb 5b 00 00       	call   c002e300 <__udivdi3>
c0028715:	83 c4 10             	add    esp,0x10
c0028718:	89 c2                	mov    edx,eax
c002871a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002871e:	89 10                	mov    DWORD PTR [eax],edx
c0028720:	b8 00 00 00 00       	mov    eax,0x0
c0028725:	eb 51                	jmp    c0028778 <fatWrapperIoctl+0x118>
c0028727:	90                   	nop
c0028728:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002872d:	85 c0                	test   eax,eax
c002872f:	75 07                	jne    c0028738 <fatWrapperIoctl+0xd8>
c0028731:	b8 00 00 00 00       	mov    eax,0x0
c0028736:	eb 40                	jmp    c0028778 <fatWrapperIoctl+0x118>
c0028738:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002873d:	83 f8 03             	cmp    eax,0x3
c0028740:	75 1a                	jne    c002875c <fatWrapperIoctl+0xfc>
c0028742:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028746:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002874a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002874e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028754:	b8 00 00 00 00       	mov    eax,0x0
c0028759:	eb 1d                	jmp    c0028778 <fatWrapperIoctl+0x118>
c002875b:	90                   	nop
c002875c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028761:	83 f8 04             	cmp    eax,0x4
c0028764:	75 0a                	jne    c0028770 <fatWrapperIoctl+0x110>
c0028766:	b8 00 00 00 00       	mov    eax,0x0
c002876b:	eb 0b                	jmp    c0028778 <fatWrapperIoctl+0x118>
c002876d:	8d 76 00             	lea    esi,[esi+0x0]
c0028770:	b8 04 00 00 00       	mov    eax,0x4
c0028775:	8d 76 00             	lea    esi,[esi+0x0]
c0028778:	83 c4 28             	add    esp,0x28
c002877b:	5b                   	pop    ebx
c002877c:	c3                   	ret    
c002877d:	90                   	nop
c002877e:	66 90                	xchg   ax,ax

c0028780 <FAT::FAT()>:
c0028780:	83 ec 1c             	sub    esp,0x1c
c0028783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028787:	83 ec 0c             	sub    esp,0xc
c002878a:	50                   	push   eax
c002878b:	e8 98 18 ff ff       	call   c001a028 <Filesystem::Filesystem()>
c0028790:	83 c4 10             	add    esp,0x10
c0028793:	ba 78 2f 03 c0       	mov    edx,0xc0032f78
c0028798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002879c:	89 10                	mov    DWORD PTR [eax],edx
c002879e:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c00287a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00287b0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00287b5:	7f 19                	jg     c00287d0 <FAT::FAT()+0x50>
c00287b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287bb:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c00287c6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00287cb:	eb e3                	jmp    c00287b0 <FAT::FAT()+0x30>
c00287cd:	8d 76 00             	lea    esi,[esi+0x0]
c00287d0:	90                   	nop
c00287d1:	83 c4 1c             	add    esp,0x1c
c00287d4:	c3                   	ret    
c00287d5:	90                   	nop
c00287d6:	66 90                	xchg   ax,ax

c00287d8 <FAT::fixFilepath(char*)>:
c00287d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287dc:	8a 00                	mov    al,BYTE PTR [eax]
c00287de:	0f be c0             	movsx  eax,al
c00287e1:	83 f8 40             	cmp    eax,0x40
c00287e4:	7e 2e                	jle    c0028814 <FAT::fixFilepath(char*)+0x3c>
c00287e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287ea:	8a 00                	mov    al,BYTE PTR [eax]
c00287ec:	83 e8 41             	sub    eax,0x41
c00287ef:	88 c2                	mov    dl,al
c00287f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287f5:	88 10                	mov    BYTE PTR [eax],dl
c00287f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287fb:	8a 00                	mov    al,BYTE PTR [eax]
c00287fd:	0f be c0             	movsx  eax,al
c0028800:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028807:	83 c0 30             	add    eax,0x30
c002880a:	88 c2                	mov    dl,al
c002880c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028810:	88 10                	mov    BYTE PTR [eax],dl
c0028812:	66 90                	xchg   ax,ax
c0028814:	90                   	nop
c0028815:	c3                   	ret    
c0028816:	66 90                	xchg   ax,ax

c0028818 <FAT::open(char const*, void**, FileOpenMode)>:
c0028818:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002881e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028826:	74 0c                	je     c0028834 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028828:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028830:	75 0e                	jne    c0028840 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028832:	66 90                	xchg   ax,ax
c0028834:	b8 04 00 00 00       	mov    eax,0x4
c0028839:	e9 46 01 00 00       	jmp    c0028984 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c002883e:	66 90                	xchg   ax,ax
c0028840:	83 ec 08             	sub    esp,0x8
c0028843:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002884a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002884e:	50                   	push   eax
c002884f:	e8 fc 7d fd ff       	call   c0000650 <strcpy>
c0028854:	83 c4 10             	add    esp,0x10
c0028857:	83 ec 08             	sub    esp,0x8
c002885a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002885e:	50                   	push   eax
c002885f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028866:	e8 6d ff ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c002886b:	83 c4 10             	add    esp,0x10
c002886e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028876:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002887d:	83 e0 01             	and    eax,0x1
c0028880:	74 12                	je     c0028894 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028882:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028889:	83 c8 01             	or     eax,0x1
c002888c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028893:	90                   	nop
c0028894:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002889b:	83 e0 04             	and    eax,0x4
c002889e:	74 24                	je     c00288c4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00288a0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00288a7:	83 c8 30             	or     eax,0x30
c00288aa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00288b1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00288b8:	83 c8 02             	or     eax,0x2
c00288bb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00288c2:	66 90                	xchg   ax,ax
c00288c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00288cb:	83 e0 02             	and    eax,0x2
c00288ce:	74 14                	je     c00288e4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00288d0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00288d7:	83 c8 02             	or     eax,0x2
c00288da:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00288e1:	8d 76 00             	lea    esi,[esi+0x0]
c00288e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00288eb:	83 e0 08             	and    eax,0x8
c00288ee:	74 14                	je     c0028904 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00288f0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00288f7:	83 c8 04             	or     eax,0x4
c00288fa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028901:	8d 76 00             	lea    esi,[esi+0x0]
c0028904:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002890b:	83 e0 10             	and    eax,0x10
c002890e:	74 14                	je     c0028924 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028910:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028917:	83 c8 08             	or     eax,0x8
c002891a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028921:	8d 76 00             	lea    esi,[esi+0x0]
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	68 28 02 00 00       	push   0x228
c002892c:	e8 5e da fe ff       	call   c001638f <malloc>
c0028931:	83 c4 10             	add    esp,0x10
c0028934:	89 c2                	mov    edx,eax
c0028936:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002893d:	89 10                	mov    DWORD PTR [eax],edx
c002893f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028947:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002894e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028950:	83 ec 04             	sub    esp,0x4
c0028953:	52                   	push   edx
c0028954:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028958:	52                   	push   edx
c0028959:	50                   	push   eax
c002895a:	e8 f5 b3 fd ff       	call   c0003d54 <f_open>
c002895f:	83 c4 10             	add    esp,0x10
c0028962:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028969:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028971:	74 09                	je     c002897c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028973:	b8 01 00 00 00       	mov    eax,0x1
c0028978:	eb 0a                	jmp    c0028984 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c002897a:	66 90                	xchg   ax,ax
c002897c:	b8 00 00 00 00       	mov    eax,0x0
c0028981:	8d 76 00             	lea    esi,[esi+0x0]
c0028984:	81 c4 1c 01 00 00    	add    esp,0x11c
c002898a:	c3                   	ret    
c002898b:	90                   	nop

c002898c <FAT::openDir(char const*, void**)>:
c002898c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028992:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002899a:	74 0c                	je     c00289a8 <FAT::openDir(char const*, void**)+0x1c>
c002899c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00289a4:	75 0e                	jne    c00289b4 <FAT::openDir(char const*, void**)+0x28>
c00289a6:	66 90                	xchg   ax,ax
c00289a8:	b8 04 00 00 00       	mov    eax,0x4
c00289ad:	e9 82 00 00 00       	jmp    c0028a34 <FAT::openDir(char const*, void**)+0xa8>
c00289b2:	66 90                	xchg   ax,ax
c00289b4:	83 ec 08             	sub    esp,0x8
c00289b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00289be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00289c2:	50                   	push   eax
c00289c3:	e8 88 7c fd ff       	call   c0000650 <strcpy>
c00289c8:	83 c4 10             	add    esp,0x10
c00289cb:	83 ec 08             	sub    esp,0x8
c00289ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00289d2:	50                   	push   eax
c00289d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00289da:	e8 f9 fd ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c00289df:	83 c4 10             	add    esp,0x10
c00289e2:	83 ec 0c             	sub    esp,0xc
c00289e5:	6a 30                	push   0x30
c00289e7:	e8 a3 d9 fe ff       	call   c001638f <malloc>
c00289ec:	83 c4 10             	add    esp,0x10
c00289ef:	89 c2                	mov    edx,eax
c00289f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00289f8:	89 10                	mov    DWORD PTR [eax],edx
c00289fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a03:	83 ec 08             	sub    esp,0x8
c0028a06:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028a0a:	52                   	push   edx
c0028a0b:	50                   	push   eax
c0028a0c:	e8 d2 bc fd ff       	call   c00046e3 <f_opendir>
c0028a11:	83 c4 10             	add    esp,0x10
c0028a14:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028a1b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028a23:	74 07                	je     c0028a2c <FAT::openDir(char const*, void**)+0xa0>
c0028a25:	b8 01 00 00 00       	mov    eax,0x1
c0028a2a:	eb 08                	jmp    c0028a34 <FAT::openDir(char const*, void**)+0xa8>
c0028a2c:	b8 00 00 00 00       	mov    eax,0x0
c0028a31:	8d 76 00             	lea    esi,[esi+0x0]
c0028a34:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028a3a:	c3                   	ret    
c0028a3b:	90                   	nop

c0028a3c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028a3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028a42:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028a4a:	75 0c                	jne    c0028a58 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028a4c:	b8 04 00 00 00       	mov    eax,0x4
c0028a51:	e9 d6 00 00 00       	jmp    c0028b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028a56:	66 90                	xchg   ax,ax
c0028a58:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028a60:	75 0a                	jne    c0028a6c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028a62:	b8 04 00 00 00       	mov    eax,0x4
c0028a67:	e9 c0 00 00 00       	jmp    c0028b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028a6c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028a74:	75 0a                	jne    c0028a80 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028a76:	b8 04 00 00 00       	mov    eax,0x4
c0028a7b:	e9 ac 00 00 00       	jmp    c0028b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028a80:	83 ec 08             	sub    esp,0x8
c0028a83:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028a8a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028a91:	50                   	push   eax
c0028a92:	e8 b9 7b fd ff       	call   c0000650 <strcpy>
c0028a97:	83 c4 10             	add    esp,0x10
c0028a9a:	83 ec 08             	sub    esp,0x8
c0028a9d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028aa4:	50                   	push   eax
c0028aa5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028aac:	e8 27 fd ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028ab1:	83 c4 10             	add    esp,0x10
c0028ab4:	83 ec 08             	sub    esp,0x8
c0028ab7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028abb:	50                   	push   eax
c0028abc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028ac3:	50                   	push   eax
c0028ac4:	e8 99 bd fd ff       	call   c0004862 <f_stat>
c0028ac9:	83 c4 10             	add    esp,0x10
c0028acc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028ad3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028ada:	85 c0                	test   eax,eax
c0028adc:	74 0a                	je     c0028ae8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028ade:	83 f8 04             	cmp    eax,0x4
c0028ae1:	74 39                	je     c0028b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028ae3:	eb 3f                	jmp    c0028b24 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ae8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028aec:	0f b6 c0             	movzx  eax,al
c0028aef:	83 e0 10             	and    eax,0x10
c0028af2:	0f 95 c2             	setne  dl
c0028af5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028afc:	88 10                	mov    BYTE PTR [eax],dl
c0028afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b02:	ba 00 00 00 00       	mov    edx,0x0
c0028b07:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028b0e:	89 01                	mov    DWORD PTR [ecx],eax
c0028b10:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028b13:	b8 00 00 00 00       	mov    eax,0x0
c0028b18:	eb 12                	jmp    c0028b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028b1a:	66 90                	xchg   ax,ax
c0028b1c:	b8 02 00 00 00       	mov    eax,0x2
c0028b21:	eb 09                	jmp    c0028b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028b23:	90                   	nop
c0028b24:	b8 01 00 00 00       	mov    eax,0x1
c0028b29:	8d 76 00             	lea    esi,[esi+0x0]
c0028b2c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028b32:	c3                   	ret    
c0028b33:	90                   	nop

c0028b34 <FAT::unlink(char const*)>:
c0028b34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028b3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028b42:	75 08                	jne    c0028b4c <FAT::unlink(char const*)+0x18>
c0028b44:	b8 04 00 00 00       	mov    eax,0x4
c0028b49:	eb 61                	jmp    c0028bac <FAT::unlink(char const*)+0x78>
c0028b4b:	90                   	nop
c0028b4c:	83 ec 08             	sub    esp,0x8
c0028b4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028b5a:	50                   	push   eax
c0028b5b:	e8 f0 7a fd ff       	call   c0000650 <strcpy>
c0028b60:	83 c4 10             	add    esp,0x10
c0028b63:	83 ec 08             	sub    esp,0x8
c0028b66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b6a:	50                   	push   eax
c0028b6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b72:	e8 61 fc ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028b77:	83 c4 10             	add    esp,0x10
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028b81:	50                   	push   eax
c0028b82:	e8 4d bf fd ff       	call   c0004ad4 <f_unlink>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028b91:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028b98:	85 c0                	test   eax,eax
c0028b9a:	75 08                	jne    c0028ba4 <FAT::unlink(char const*)+0x70>
c0028b9c:	b8 00 00 00 00       	mov    eax,0x0
c0028ba1:	eb 09                	jmp    c0028bac <FAT::unlink(char const*)+0x78>
c0028ba3:	90                   	nop
c0028ba4:	b8 01 00 00 00       	mov    eax,0x1
c0028ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0028bac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028bb2:	c3                   	ret    
c0028bb3:	90                   	nop

c0028bb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028bb4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028bba:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0028bc1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0028bc8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028bcc:	88 d0                	mov    al,dl
c0028bce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028bd2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028bda:	75 0c                	jne    c0028be8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0028bdc:	b8 04 00 00 00       	mov    eax,0x4
c0028be1:	e9 7e 01 00 00       	jmp    c0028d64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0028be6:	66 90                	xchg   ax,ax
c0028be8:	83 ec 08             	sub    esp,0x8
c0028beb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028bf2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028bf6:	50                   	push   eax
c0028bf7:	e8 54 7a fd ff       	call   c0000650 <strcpy>
c0028bfc:	83 c4 10             	add    esp,0x10
c0028bff:	83 ec 08             	sub    esp,0x8
c0028c02:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028c06:	50                   	push   eax
c0028c07:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028c0e:	e8 c5 fb ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028c13:	83 c4 10             	add    esp,0x10
c0028c16:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028c1e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028c26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c2b:	83 e0 01             	and    eax,0x1
c0028c2e:	74 14                	je     c0028c44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0028c30:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c37:	83 c8 01             	or     eax,0x1
c0028c3a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028c41:	8d 76 00             	lea    esi,[esi+0x0]
c0028c44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c49:	83 e0 02             	and    eax,0x2
c0028c4c:	74 12                	je     c0028c60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0028c4e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c55:	83 c8 20             	or     eax,0x20
c0028c58:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028c5f:	90                   	nop
c0028c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c65:	83 e0 04             	and    eax,0x4
c0028c68:	74 12                	je     c0028c7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0028c6a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c71:	83 c8 04             	or     eax,0x4
c0028c74:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028c7b:	90                   	nop
c0028c7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c81:	83 e0 08             	and    eax,0x8
c0028c84:	74 12                	je     c0028c98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0028c86:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c8d:	83 c8 02             	or     eax,0x2
c0028c90:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028c97:	90                   	nop
c0028c98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c9d:	83 e0 01             	and    eax,0x1
c0028ca0:	74 12                	je     c0028cb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0028ca2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028ca9:	83 c8 01             	or     eax,0x1
c0028cac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028cb3:	90                   	nop
c0028cb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028cb9:	83 e0 02             	and    eax,0x2
c0028cbc:	74 12                	je     c0028cd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0028cbe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028cc5:	83 c8 20             	or     eax,0x20
c0028cc8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028ccf:	90                   	nop
c0028cd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028cd5:	83 e0 04             	and    eax,0x4
c0028cd8:	74 12                	je     c0028cec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0028cda:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028ce1:	83 c8 04             	or     eax,0x4
c0028ce4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028ceb:	90                   	nop
c0028cec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028cf1:	83 e0 08             	and    eax,0x8
c0028cf4:	74 12                	je     c0028d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0028cf6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028cfd:	83 c8 02             	or     eax,0x2
c0028d00:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028d07:	90                   	nop
c0028d08:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0028d0f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028d16:	09 d0                	or     eax,edx
c0028d18:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028d1f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0028d27:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0028d2f:	83 ec 04             	sub    esp,0x4
c0028d32:	52                   	push   edx
c0028d33:	50                   	push   eax
c0028d34:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028d38:	50                   	push   eax
c0028d39:	e8 09 c2 fd ff       	call   c0004f47 <f_chmod>
c0028d3e:	83 c4 10             	add    esp,0x10
c0028d41:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0028d48:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0028d4f:	85 c0                	test   eax,eax
c0028d51:	75 09                	jne    c0028d5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0028d53:	b8 00 00 00 00       	mov    eax,0x0
c0028d58:	eb 0a                	jmp    c0028d64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0028d5a:	66 90                	xchg   ax,ax
c0028d5c:	b8 01 00 00 00       	mov    eax,0x1
c0028d61:	8d 76 00             	lea    esi,[esi+0x0]
c0028d64:	81 c4 2c 01 00 00    	add    esp,0x12c
c0028d6a:	c3                   	ret    
c0028d6b:	90                   	nop

c0028d6c <FAT::rename(char const*, char const*)>:
c0028d6c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0028d72:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0028d7a:	74 0c                	je     c0028d88 <FAT::rename(char const*, char const*)+0x1c>
c0028d7c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0028d84:	75 0e                	jne    c0028d94 <FAT::rename(char const*, char const*)+0x28>
c0028d86:	66 90                	xchg   ax,ax
c0028d88:	b8 04 00 00 00       	mov    eax,0x4
c0028d8d:	e9 9e 00 00 00       	jmp    c0028e30 <FAT::rename(char const*, char const*)+0xc4>
c0028d92:	66 90                	xchg   ax,ax
c0028d94:	83 ec 08             	sub    esp,0x8
c0028d97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028d9e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0028da5:	50                   	push   eax
c0028da6:	e8 a5 78 fd ff       	call   c0000650 <strcpy>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 ec 08             	sub    esp,0x8
c0028db1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0028db8:	50                   	push   eax
c0028db9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028dc0:	e8 13 fa ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028dc5:	83 c4 10             	add    esp,0x10
c0028dc8:	83 ec 08             	sub    esp,0x8
c0028dcb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0028dd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028dd6:	50                   	push   eax
c0028dd7:	e8 74 78 fd ff       	call   c0000650 <strcpy>
c0028ddc:	83 c4 10             	add    esp,0x10
c0028ddf:	83 ec 08             	sub    esp,0x8
c0028de2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028de6:	50                   	push   eax
c0028de7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028dee:	e8 e5 f9 ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 ec 08             	sub    esp,0x8
c0028df9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028dfd:	50                   	push   eax
c0028dfe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0028e05:	50                   	push   eax
c0028e06:	e8 84 bf fd ff       	call   c0004d8f <f_rename>
c0028e0b:	83 c4 10             	add    esp,0x10
c0028e0e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0028e15:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0028e1c:	85 c0                	test   eax,eax
c0028e1e:	75 08                	jne    c0028e28 <FAT::rename(char const*, char const*)+0xbc>
c0028e20:	b8 00 00 00 00       	mov    eax,0x0
c0028e25:	eb 09                	jmp    c0028e30 <FAT::rename(char const*, char const*)+0xc4>
c0028e27:	90                   	nop
c0028e28:	b8 01 00 00 00       	mov    eax,0x1
c0028e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e30:	81 c4 1c 02 00 00    	add    esp,0x21c
c0028e36:	c3                   	ret    
c0028e37:	90                   	nop

c0028e38 <FAT::mkdir(char const*)>:
c0028e38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028e3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e46:	75 08                	jne    c0028e50 <FAT::mkdir(char const*)+0x18>
c0028e48:	b8 04 00 00 00       	mov    eax,0x4
c0028e4d:	eb 61                	jmp    c0028eb0 <FAT::mkdir(char const*)+0x78>
c0028e4f:	90                   	nop
c0028e50:	83 ec 08             	sub    esp,0x8
c0028e53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e5e:	50                   	push   eax
c0028e5f:	e8 ec 77 fd ff       	call   c0000650 <strcpy>
c0028e64:	83 c4 10             	add    esp,0x10
c0028e67:	83 ec 08             	sub    esp,0x8
c0028e6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e6e:	50                   	push   eax
c0028e6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e76:	e8 5d f9 ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e85:	50                   	push   eax
c0028e86:	e8 69 bd fd ff       	call   c0004bf4 <f_mkdir>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e95:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e9c:	85 c0                	test   eax,eax
c0028e9e:	75 08                	jne    c0028ea8 <FAT::mkdir(char const*)+0x70>
c0028ea0:	b8 00 00 00 00       	mov    eax,0x0
c0028ea5:	eb 09                	jmp    c0028eb0 <FAT::mkdir(char const*)+0x78>
c0028ea7:	90                   	nop
c0028ea8:	b8 01 00 00 00       	mov    eax,0x1
c0028ead:	8d 76 00             	lea    esi,[esi+0x0]
c0028eb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028eb6:	c3                   	ret    
c0028eb7:	90                   	nop

c0028eb8 <FAT::exists(char const*)>:
c0028eb8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028ebe:	83 ec 08             	sub    esp,0x8
c0028ec1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028ec8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028ecc:	50                   	push   eax
c0028ecd:	e8 7e 77 fd ff       	call   c0000650 <strcpy>
c0028ed2:	83 c4 10             	add    esp,0x10
c0028ed5:	83 ec 08             	sub    esp,0x8
c0028ed8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028edc:	50                   	push   eax
c0028edd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028ee4:	e8 ef f8 ff ff       	call   c00287d8 <FAT::fixFilepath(char*)>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	83 ec 08             	sub    esp,0x8
c0028eef:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0028ef6:	50                   	push   eax
c0028ef7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028efb:	50                   	push   eax
c0028efc:	e8 61 b9 fd ff       	call   c0004862 <f_stat>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028f0b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028f12:	85 c0                	test   eax,eax
c0028f14:	75 06                	jne    c0028f1c <FAT::exists(char const*)+0x64>
c0028f16:	b0 01                	mov    al,0x1
c0028f18:	eb 06                	jmp    c0028f20 <FAT::exists(char const*)+0x68>
c0028f1a:	66 90                	xchg   ax,ax
c0028f1c:	b0 00                	mov    al,0x0
c0028f1e:	66 90                	xchg   ax,ax
c0028f20:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028f26:	c3                   	ret    
c0028f27:	90                   	nop

c0028f28 <isoReadDiscSectorHelper>:
c0028f28:	83 ec 2c             	sub    esp,0x2c
c0028f2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028f2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028f33:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0028f38:	83 e8 41             	sub    eax,0x41
c0028f3b:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028f42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028f46:	ba 00 00 00 00       	mov    edx,0x0
c0028f4b:	83 ec 0c             	sub    esp,0xc
c0028f4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028f52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028f56:	52                   	push   edx
c0028f57:	50                   	push   eax
c0028f58:	51                   	push   ecx
c0028f59:	e8 f4 36 ff ff       	call   c001c652 <LogicalDisk::read(unsigned long long, int, void*)>
c0028f5e:	83 c4 20             	add    esp,0x20
c0028f61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028f65:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0028f6a:	74 0c                	je     c0028f78 <isoReadDiscSectorHelper+0x50>
c0028f6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f70:	c1 e0 0b             	shl    eax,0xb
c0028f73:	eb 0b                	jmp    c0028f80 <isoReadDiscSectorHelper+0x58>
c0028f75:	8d 76 00             	lea    esi,[esi+0x0]
c0028f78:	b8 00 00 00 00       	mov    eax,0x0
c0028f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028f80:	83 c4 2c             	add    esp,0x2c
c0028f83:	c3                   	ret    

c0028f84 <iso_kprintf>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	83 ec 08             	sub    esp,0x8
c0028f8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0028f8e:	68 26 2d 03 c0       	push   0xc0032d26
c0028f93:	e8 2e 02 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0028f98:	83 c4 10             	add    esp,0x10
c0028f9b:	90                   	nop
c0028f9c:	83 c4 0c             	add    esp,0xc
c0028f9f:	c3                   	ret    

c0028fa0 <iso_kprintfd>:
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	83 ec 08             	sub    esp,0x8
c0028fa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0028faa:	68 6a 13 03 c0       	push   0xc003136a
c0028faf:	e8 12 02 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0028fb4:	83 c4 10             	add    esp,0x10
c0028fb7:	90                   	nop
c0028fb8:	83 c4 0c             	add    esp,0xc
c0028fbb:	c3                   	ret    

c0028fbc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0028fbc:	b8 08 00 00 00       	mov    eax,0x8
c0028fc1:	c3                   	ret    

c0028fc2 <ISO9660::truncate(void*, unsigned long long)>:
c0028fc2:	b8 01 00 00 00       	mov    eax,0x1
c0028fc7:	c3                   	ret    

c0028fc8 <ISO9660::getName()>:
c0028fc8:	b8 dc 2f 03 c0       	mov    eax,0xc0032fdc
c0028fcd:	c3                   	ret    

c0028fce <ISO9660::closeDir(void*)>:
c0028fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fd4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0028fd7:	90                   	nop

c0028fd8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0028fd8:	b8 01 00 00 00       	mov    eax,0x1
c0028fdd:	c3                   	ret    

c0028fde <ISO9660::unlink(char const*)>:
c0028fde:	b8 01 00 00 00       	mov    eax,0x1
c0028fe3:	c3                   	ret    

c0028fe4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0028fe4:	b8 03 00 00 00       	mov    eax,0x3
c0028fe9:	c3                   	ret    

c0028fea <ISO9660::rename(char const*, char const*)>:
c0028fea:	b8 01 00 00 00       	mov    eax,0x1
c0028fef:	c3                   	ret    

c0028ff0 <ISO9660::mkdir(char const*)>:
c0028ff0:	b8 01 00 00 00       	mov    eax,0x1
c0028ff5:	c3                   	ret    

c0028ff6 <ISO9660::~ISO9660()>:
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	ba 1c 31 03 c0       	mov    edx,0xc003311c
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	89 10                	mov    DWORD PTR [eax],edx
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	50                   	push   eax
c002900c:	e8 3b 10 ff ff       	call   c001a04c <Filesystem::~Filesystem()>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	90                   	nop
c0029015:	83 c4 0c             	add    esp,0xc
c0029018:	c3                   	ret    
c0029019:	90                   	nop

c002901a <ISO9660::~ISO9660()>:
c002901a:	83 ec 0c             	sub    esp,0xc
c002901d:	83 ec 0c             	sub    esp,0xc
c0029020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029024:	e8 cd ff ff ff       	call   c0028ff6 <ISO9660::~ISO9660()>
c0029029:	83 c4 10             	add    esp,0x10
c002902c:	83 ec 08             	sub    esp,0x8
c002902f:	6a 08                	push   0x8
c0029031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029035:	e8 8e 00 ff ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002903a:	83 c4 10             	add    esp,0x10
c002903d:	83 c4 0c             	add    esp,0xc
c0029040:	c3                   	ret    
c0029041:	90                   	nop

c0029042 <ISO9660::exists(char const*)>:
c0029042:	83 ec 18             	sub    esp,0x18
c0029045:	68 f7 2f 03 c0       	push   0xc0032ff7
c002904a:	e8 24 70 ff ff       	call   c0020073 <KePanic(char const*)>
c002904f:	31 c0                	xor    eax,eax
c0029051:	83 c4 1c             	add    esp,0x1c
c0029054:	c3                   	ret    
c0029055:	90                   	nop

c0029056 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029056:	56                   	push   esi
c0029057:	53                   	push   ebx
c0029058:	53                   	push   ebx
c0029059:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002905d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029061:	85 db                	test   ebx,ebx
c0029063:	0f 84 ca 00 00 00    	je     c0029133 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029069:	85 f6                	test   esi,esi
c002906b:	0f 84 c2 00 00 00    	je     c0029133 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029071:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029076:	b8 03 00 00 00       	mov    eax,0x3
c002907b:	0f 85 b7 00 00 00    	jne    c0029138 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029081:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029083:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029089:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029090:	74 1b                	je     c00290ad <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029092:	85 c0                	test   eax,eax
c0029094:	74 10                	je     c00290a6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029096:	83 ec 0c             	sub    esp,0xc
c0029099:	68 15 30 03 c0       	push   0xc0033015
c002909e:	e8 d0 6f ff ff       	call   c0020073 <KePanic(char const*)>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	8a 03                	mov    al,BYTE PTR [ebx]
c00290a8:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00290ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00290b0:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00290b7:	85 c0                	test   eax,eax
c00290b9:	74 09                	je     c00290c4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00290bb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00290c2:	74 48                	je     c002910c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	68 25 30 03 c0       	push   0xc0033025
c00290cc:	e8 f5 00 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00290d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00290d4:	83 c4 10             	add    esp,0x10
c00290d7:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00290de:	85 c0                	test   eax,eax
c00290e0:	74 17                	je     c00290f9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00290e2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00290e9:	83 ec 0c             	sub    esp,0xc
c00290ec:	68 45 30 03 c0       	push   0xc0033045
c00290f1:	e8 d0 00 ff ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00290f6:	83 c4 10             	add    esp,0x10
c00290f9:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	50                   	push   eax
c0029104:	e8 12 da fd ff       	call   c0006b1b <init_percd>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	51                   	push   ecx
c002910d:	83 c3 03             	add    ebx,0x3
c0029110:	51                   	push   ecx
c0029111:	6a 00                	push   0x0
c0029113:	53                   	push   ebx
c0029114:	e8 c5 d4 fd ff       	call   c00065de <iso_open>
c0029119:	83 c4 10             	add    esp,0x10
c002911c:	89 c2                	mov    edx,eax
c002911e:	b8 01 00 00 00       	mov    eax,0x1
c0029123:	83 fa ff             	cmp    edx,0xffffffff
c0029126:	74 10                	je     c0029138 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029128:	83 c2 32             	add    edx,0x32
c002912b:	31 c0                	xor    eax,eax
c002912d:	01 d2                	add    edx,edx
c002912f:	89 16                	mov    DWORD PTR [esi],edx
c0029131:	eb 05                	jmp    c0029138 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029133:	b8 04 00 00 00       	mov    eax,0x4
c0029138:	5a                   	pop    edx
c0029139:	5b                   	pop    ebx
c002913a:	5e                   	pop    esi
c002913b:	c3                   	ret    

c002913c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002913c:	53                   	push   ebx
c002913d:	83 ec 08             	sub    esp,0x8
c0029140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029144:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029148:	85 c0                	test   eax,eax
c002914a:	74 2d                	je     c0029179 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002914c:	85 db                	test   ebx,ebx
c002914e:	74 29                	je     c0029179 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029150:	52                   	push   edx
c0029151:	b9 02 00 00 00       	mov    ecx,0x2
c0029156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915a:	99                   	cdq    
c002915b:	f7 f9                	idiv   ecx
c002915d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029161:	83 e8 32             	sub    eax,0x32
c0029164:	50                   	push   eax
c0029165:	e8 1c d5 fd ff       	call   c0006686 <iso_read>
c002916a:	83 c4 10             	add    esp,0x10
c002916d:	89 03                	mov    DWORD PTR [ebx],eax
c002916f:	09 d0                	or     eax,edx
c0029171:	0f 94 c0             	sete   al
c0029174:	0f b6 c0             	movzx  eax,al
c0029177:	eb 05                	jmp    c002917e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029179:	b8 04 00 00 00       	mov    eax,0x4
c002917e:	83 c4 08             	add    esp,0x8
c0029181:	5b                   	pop    ebx
c0029182:	c3                   	ret    
c0029183:	90                   	nop

c0029184 <ISO9660::seek(void*, unsigned long long)>:
c0029184:	57                   	push   edi
c0029185:	b8 04 00 00 00       	mov    eax,0x4
c002918a:	56                   	push   esi
c002918b:	51                   	push   ecx
c002918c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029190:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029194:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029198:	85 d2                	test   edx,edx
c002919a:	74 26                	je     c00291c2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002919c:	89 d0                	mov    eax,edx
c002919e:	b9 02 00 00 00       	mov    ecx,0x2
c00291a3:	6a 00                	push   0x0
c00291a5:	99                   	cdq    
c00291a6:	f7 f9                	idiv   ecx
c00291a8:	57                   	push   edi
c00291a9:	56                   	push   esi
c00291aa:	83 e8 32             	sub    eax,0x32
c00291ad:	50                   	push   eax
c00291ae:	e8 e9 d5 fd ff       	call   c000679c <iso_seek>
c00291b3:	83 c4 10             	add    esp,0x10
c00291b6:	31 f0                	xor    eax,esi
c00291b8:	31 fa                	xor    edx,edi
c00291ba:	09 d0                	or     eax,edx
c00291bc:	0f 95 c0             	setne  al
c00291bf:	0f b6 c0             	movzx  eax,al
c00291c2:	5a                   	pop    edx
c00291c3:	5e                   	pop    esi
c00291c4:	5f                   	pop    edi
c00291c5:	c3                   	ret    

c00291c6 <ISO9660::tell(void*, unsigned long long*)>:
c00291c6:	53                   	push   ebx
c00291c7:	83 ec 08             	sub    esp,0x8
c00291ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00291ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00291d2:	85 c0                	test   eax,eax
c00291d4:	74 24                	je     c00291fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c00291d6:	85 db                	test   ebx,ebx
c00291d8:	74 20                	je     c00291fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c00291da:	b9 02 00 00 00       	mov    ecx,0x2
c00291df:	99                   	cdq    
c00291e0:	f7 f9                	idiv   ecx
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	83 e8 32             	sub    eax,0x32
c00291e8:	50                   	push   eax
c00291e9:	e8 32 d6 fd ff       	call   c0006820 <iso_tell>
c00291ee:	83 c4 10             	add    esp,0x10
c00291f1:	89 03                	mov    DWORD PTR [ebx],eax
c00291f3:	31 c0                	xor    eax,eax
c00291f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00291f8:	eb 05                	jmp    c00291ff <ISO9660::tell(void*, unsigned long long*)+0x39>
c00291fa:	b8 04 00 00 00       	mov    eax,0x4
c00291ff:	83 c4 08             	add    esp,0x8
c0029202:	5b                   	pop    ebx
c0029203:	c3                   	ret    

c0029204 <ISO9660::stat(void*, unsigned long long*)>:
c0029204:	56                   	push   esi
c0029205:	53                   	push   ebx
c0029206:	83 ec 10             	sub    esp,0x10
c0029209:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002920d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029211:	68 69 30 03 c0       	push   0xc0033069
c0029216:	e8 ab ff fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	85 db                	test   ebx,ebx
c0029220:	74 2a                	je     c002924c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029222:	85 f6                	test   esi,esi
c0029224:	74 26                	je     c002924c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029226:	89 d8                	mov    eax,ebx
c0029228:	b9 02 00 00 00       	mov    ecx,0x2
c002922d:	99                   	cdq    
c002922e:	83 ec 0c             	sub    esp,0xc
c0029231:	f7 f9                	idiv   ecx
c0029233:	83 e8 32             	sub    eax,0x32
c0029236:	50                   	push   eax
c0029237:	e8 15 d6 fd ff       	call   c0006851 <iso_total>
c002923c:	83 c4 10             	add    esp,0x10
c002923f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0029246:	89 06                	mov    DWORD PTR [esi],eax
c0029248:	31 c0                	xor    eax,eax
c002924a:	eb 05                	jmp    c0029251 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c002924c:	b8 04 00 00 00       	mov    eax,0x4
c0029251:	5a                   	pop    edx
c0029252:	5b                   	pop    ebx
c0029253:	5e                   	pop    esi
c0029254:	c3                   	ret    
c0029255:	90                   	nop

c0029256 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029256:	55                   	push   ebp
c0029257:	57                   	push   edi
c0029258:	56                   	push   esi
c0029259:	53                   	push   ebx
c002925a:	83 ec 18             	sub    esp,0x18
c002925d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029261:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029265:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029269:	68 71 30 03 c0       	push   0xc0033071
c002926e:	e8 53 ff fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c0029273:	83 c4 10             	add    esp,0x10
c0029276:	85 ff                	test   edi,edi
c0029278:	0f 94 c0             	sete   al
c002927b:	85 f6                	test   esi,esi
c002927d:	0f 94 c2             	sete   dl
c0029280:	09 d0                	or     eax,edx
c0029282:	a8 01                	test   al,0x1
c0029284:	0f 85 dd 00 00 00    	jne    c0029367 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002928a:	85 db                	test   ebx,ebx
c002928c:	0f 84 d5 00 00 00    	je     c0029367 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029292:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029295:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002929b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00292a2:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00292a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00292ab:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00292b1:	74 1b                	je     c00292ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00292b3:	85 c0                	test   eax,eax
c00292b5:	74 10                	je     c00292c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00292b7:	83 ec 0c             	sub    esp,0xc
c00292ba:	68 15 30 03 c0       	push   0xc0033015
c00292bf:	e8 af 6d ff ff       	call   c0020073 <KePanic(char const*)>
c00292c4:	83 c4 10             	add    esp,0x10
c00292c7:	8a 03                	mov    al,BYTE PTR [ebx]
c00292c9:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00292ce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00292d1:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00292d8:	85 c0                	test   eax,eax
c00292da:	74 09                	je     c00292e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00292dc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00292e3:	74 51                	je     c0029336 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00292e5:	83 ec 0c             	sub    esp,0xc
c00292e8:	68 79 30 03 c0       	push   0xc0033079
c00292ed:	e8 d4 fe fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00292f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00292f5:	83 c4 10             	add    esp,0x10
c00292f8:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029300:	74 21                	je     c0029323 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029302:	83 ec 0c             	sub    esp,0xc
c0029305:	68 99 30 03 c0       	push   0xc0033099
c002930a:	e8 b7 fe fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002930f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029312:	83 c4 10             	add    esp,0x10
c0029315:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002931c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029323:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002932a:	83 ec 0c             	sub    esp,0xc
c002932d:	50                   	push   eax
c002932e:	e8 e8 d7 fd ff       	call   c0006b1b <init_percd>
c0029333:	83 c4 10             	add    esp,0x10
c0029336:	52                   	push   edx
c0029337:	83 c3 03             	add    ebx,0x3
c002933a:	52                   	push   edx
c002933b:	6a 00                	push   0x0
c002933d:	53                   	push   ebx
c002933e:	e8 9b d2 fd ff       	call   c00065de <iso_open>
c0029343:	83 c4 10             	add    esp,0x10
c0029346:	83 f8 ff             	cmp    eax,0xffffffff
c0029349:	89 c5                	mov    ebp,eax
c002934b:	75 21                	jne    c002936e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c002934d:	50                   	push   eax
c002934e:	50                   	push   eax
c002934f:	6a 01                	push   0x1
c0029351:	53                   	push   ebx
c0029352:	e8 87 d2 fd ff       	call   c00065de <iso_open>
c0029357:	83 c4 10             	add    esp,0x10
c002935a:	ba 02 00 00 00       	mov    edx,0x2
c002935f:	40                   	inc    eax
c0029360:	74 2b                	je     c002938d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029362:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029365:	eb 24                	jmp    c002938b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029367:	ba 04 00 00 00       	mov    edx,0x4
c002936c:	eb 1f                	jmp    c002938d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002936e:	83 ec 0c             	sub    esp,0xc
c0029371:	50                   	push   eax
c0029372:	e8 da d4 fd ff       	call   c0006851 <iso_total>
c0029377:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002937e:	89 07                	mov    DWORD PTR [edi],eax
c0029380:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029383:	e8 e0 d2 fd ff       	call   c0006668 <iso_close>
c0029388:	83 c4 10             	add    esp,0x10
c002938b:	31 d2                	xor    edx,edx
c002938d:	83 c4 0c             	add    esp,0xc
c0029390:	89 d0                	mov    eax,edx
c0029392:	5b                   	pop    ebx
c0029393:	5e                   	pop    esi
c0029394:	5f                   	pop    edi
c0029395:	5d                   	pop    ebp
c0029396:	c3                   	ret    
c0029397:	90                   	nop

c0029398 <ISO9660::close(void*)>:
c0029398:	83 ec 0c             	sub    esp,0xc
c002939b:	b8 04 00 00 00       	mov    eax,0x4
c00293a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293a4:	85 d2                	test   edx,edx
c00293a6:	74 1b                	je     c00293c3 <ISO9660::close(void*)+0x2b>
c00293a8:	89 d0                	mov    eax,edx
c00293aa:	b9 02 00 00 00       	mov    ecx,0x2
c00293af:	99                   	cdq    
c00293b0:	83 ec 0c             	sub    esp,0xc
c00293b3:	f7 f9                	idiv   ecx
c00293b5:	83 e8 32             	sub    eax,0x32
c00293b8:	50                   	push   eax
c00293b9:	e8 aa d2 fd ff       	call   c0006668 <iso_close>
c00293be:	83 c4 10             	add    esp,0x10
c00293c1:	31 c0                	xor    eax,eax
c00293c3:	83 c4 0c             	add    esp,0xc
c00293c6:	c3                   	ret    
c00293c7:	90                   	nop

c00293c8 <ISO9660::openDir(char const*, void**)>:
c00293c8:	56                   	push   esi
c00293c9:	53                   	push   ebx
c00293ca:	50                   	push   eax
c00293cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00293cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00293d3:	85 db                	test   ebx,ebx
c00293d5:	0f 84 bd 00 00 00    	je     c0029498 <ISO9660::openDir(char const*, void**)+0xd0>
c00293db:	85 f6                	test   esi,esi
c00293dd:	0f 84 b5 00 00 00    	je     c0029498 <ISO9660::openDir(char const*, void**)+0xd0>
c00293e3:	8a 13                	mov    dl,BYTE PTR [ebx]
c00293e5:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00293eb:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00293f2:	74 1b                	je     c002940f <ISO9660::openDir(char const*, void**)+0x47>
c00293f4:	85 c0                	test   eax,eax
c00293f6:	74 10                	je     c0029408 <ISO9660::openDir(char const*, void**)+0x40>
c00293f8:	83 ec 0c             	sub    esp,0xc
c00293fb:	68 15 30 03 c0       	push   0xc0033015
c0029400:	e8 6e 6c ff ff       	call   c0020073 <KePanic(char const*)>
c0029405:	83 c4 10             	add    esp,0x10
c0029408:	8a 03                	mov    al,BYTE PTR [ebx]
c002940a:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002940f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029412:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029419:	85 c0                	test   eax,eax
c002941b:	74 10                	je     c002942d <ISO9660::openDir(char const*, void**)+0x65>
c002941d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029424:	74 1a                	je     c0029440 <ISO9660::openDir(char const*, void**)+0x78>
c0029426:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002942d:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	50                   	push   eax
c0029438:	e8 de d6 fd ff       	call   c0006b1b <init_percd>
c002943d:	83 c4 10             	add    esp,0x10
c0029440:	50                   	push   eax
c0029441:	83 c3 03             	add    ebx,0x3
c0029444:	50                   	push   eax
c0029445:	6a 01                	push   0x1
c0029447:	53                   	push   ebx
c0029448:	e8 91 d1 fd ff       	call   c00065de <iso_open>
c002944d:	83 c4 10             	add    esp,0x10
c0029450:	83 f8 ff             	cmp    eax,0xffffffff
c0029453:	89 c3                	mov    ebx,eax
c0029455:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002945a:	75 1c                	jne    c0029478 <ISO9660::openDir(char const*, void**)+0xb0>
c002945c:	53                   	push   ebx
c002945d:	53                   	push   ebx
c002945e:	68 bd 30 03 c0       	push   0xc00330bd
c0029463:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029469:	e8 fa de fe ff       	call   c0017368 <VgaText::puts(char const*)>
c002946e:	83 c4 10             	add    esp,0x10
c0029471:	b8 01 00 00 00       	mov    eax,0x1
c0029476:	eb 25                	jmp    c002949d <ISO9660::openDir(char const*, void**)+0xd5>
c0029478:	51                   	push   ecx
c0029479:	01 db                	add    ebx,ebx
c002947b:	51                   	push   ecx
c002947c:	83 c3 65             	add    ebx,0x65
c002947f:	68 d0 30 03 c0       	push   0xc00330d0
c0029484:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002948a:	e8 d9 de fe ff       	call   c0017368 <VgaText::puts(char const*)>
c002948f:	83 c4 10             	add    esp,0x10
c0029492:	31 c0                	xor    eax,eax
c0029494:	89 1e                	mov    DWORD PTR [esi],ebx
c0029496:	eb 05                	jmp    c002949d <ISO9660::openDir(char const*, void**)+0xd5>
c0029498:	b8 04 00 00 00       	mov    eax,0x4
c002949d:	5a                   	pop    edx
c002949e:	5b                   	pop    ebx
c002949f:	5e                   	pop    esi
c00294a0:	c3                   	ret    
c00294a1:	90                   	nop

c00294a2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00294a2:	55                   	push   ebp
c00294a3:	57                   	push   edi
c00294a4:	56                   	push   esi
c00294a5:	53                   	push   ebx
c00294a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00294ac:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00294b3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00294ba:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00294c1:	85 db                	test   ebx,ebx
c00294c3:	0f 84 e4 00 00 00    	je     c00295ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00294c9:	85 ed                	test   ebp,ebp
c00294cb:	0f 84 dc 00 00 00    	je     c00295ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00294d1:	83 ec 0c             	sub    esp,0xc
c00294d4:	68 e3 30 03 c0       	push   0xc00330e3
c00294d9:	e8 e8 fc fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c00294de:	89 d8                	mov    eax,ebx
c00294e0:	b9 02 00 00 00       	mov    ecx,0x2
c00294e5:	99                   	cdq    
c00294e6:	f7 f9                	idiv   ecx
c00294e8:	83 e8 32             	sub    eax,0x32
c00294eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00294ee:	e8 b0 d3 fd ff       	call   c00068a3 <iso_readdir>
c00294f3:	83 c4 10             	add    esp,0x10
c00294f6:	85 c0                	test   eax,eax
c00294f8:	89 c3                	mov    ebx,eax
c00294fa:	75 38                	jne    c0029534 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00294fc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029501:	53                   	push   ebx
c0029502:	53                   	push   ebx
c0029503:	68 ee 30 03 c0       	push   0xc00330ee
c0029508:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002950e:	e8 55 de fe ff       	call   c0017368 <VgaText::puts(char const*)>
c0029513:	83 c4 0c             	add    esp,0xc
c0029516:	68 10 01 00 00       	push   0x110
c002951b:	6a 00                	push   0x0
c002951d:	57                   	push   edi
c002951e:	e8 cd 6f fd ff       	call   c00004f0 <memset>
c0029523:	83 c4 10             	add    esp,0x10
c0029526:	b8 01 00 00 00       	mov    eax,0x1
c002952b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0029532:	eb 7e                	jmp    c00295b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029534:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002953a:	8d 70 08             	lea    esi,[eax+0x8]
c002953d:	83 ec 0c             	sub    esp,0xc
c0029540:	56                   	push   esi
c0029541:	e8 3a 70 fd ff       	call   c0000580 <strlen>
c0029546:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002954e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029552:	83 c4 10             	add    esp,0x10
c0029555:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029559:	75 0a                	jne    c0029565 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c002955b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c002955e:	b8 02 00 00 00       	mov    eax,0x2
c0029563:	74 05                	je     c002956a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0029565:	b8 01 00 00 00       	mov    eax,0x1
c002956a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002956e:	50                   	push   eax
c002956f:	50                   	push   eax
c0029570:	56                   	push   esi
c0029571:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029575:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029579:	50                   	push   eax
c002957a:	e8 d1 70 fd ff       	call   c0000650 <strcpy>
c002957f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029588:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c002958f:	5a                   	pop    edx
c0029590:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029595:	59                   	pop    ecx
c0029596:	68 01 31 03 c0       	push   0xc0033101
c002959b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00295a1:	e8 c2 dd fe ff       	call   c0017368 <VgaText::puts(char const*)>
c00295a6:	83 c4 10             	add    esp,0x10
c00295a9:	31 c0                	xor    eax,eax
c00295ab:	eb 05                	jmp    c00295b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00295ad:	b8 04 00 00 00       	mov    eax,0x4
c00295b2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00295b8:	5b                   	pop    ebx
c00295b9:	5e                   	pop    esi
c00295ba:	5f                   	pop    edi
c00295bb:	5d                   	pop    ebp
c00295bc:	c3                   	ret    

c00295bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00295bd:	57                   	push   edi
c00295be:	56                   	push   esi
c00295bf:	53                   	push   ebx
c00295c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00295c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00295c8:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c00295ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00295d2:	0f be cb             	movsx  ecx,bl
c00295d5:	75 0b                	jne    c00295e2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00295d7:	0f be 05 40 43 03 c0 	movsx  eax,BYTE PTR ds:0xc0034340
c00295de:	39 c8                	cmp    eax,ecx
c00295e0:	74 47                	je     c0029629 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00295e2:	83 ec 0c             	sub    esp,0xc
c00295e5:	31 d2                	xor    edx,edx
c00295e7:	68 a0 03 04 c0       	push   0xc00403a0
c00295ec:	6a 01                	push   0x1
c00295ee:	52                   	push   edx
c00295ef:	56                   	push   esi
c00295f0:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00295f7:	e8 56 30 ff ff       	call   c001c652 <LogicalDisk::read(unsigned long long, int, void*)>
c00295fc:	83 c4 20             	add    esp,0x20
c00295ff:	85 c0                	test   eax,eax
c0029601:	75 0e                	jne    c0029611 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029603:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029609:	88 1d 40 43 03 c0    	mov    BYTE PTR ds:0xc0034340,bl
c002960f:	eb 18                	jmp    c0029629 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029611:	50                   	push   eax
c0029612:	68 00 08 00 00       	push   0x800
c0029617:	6a 00                	push   0x0
c0029619:	57                   	push   edi
c002961a:	e8 d1 6e fd ff       	call   c00004f0 <memset>
c002961f:	83 c4 10             	add    esp,0x10
c0029622:	b8 01 00 00 00       	mov    eax,0x1
c0029627:	eb 0e                	jmp    c0029637 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029629:	be a0 03 04 c0       	mov    esi,0xc00403a0
c002962e:	b9 00 08 00 00       	mov    ecx,0x800
c0029633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029635:	31 c0                	xor    eax,eax
c0029637:	5b                   	pop    ebx
c0029638:	5e                   	pop    esi
c0029639:	5f                   	pop    edi
c002963a:	c3                   	ret    
c002963b:	90                   	nop

c002963c <ISO9660::tryMount(LogicalDisk*, int)>:
c002963c:	53                   	push   ebx
c002963d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029643:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c002964d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029654:	8d 58 41             	lea    ebx,[eax+0x41]
c0029657:	0f be db             	movsx  ebx,bl
c002965a:	53                   	push   ebx
c002965b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002965f:	50                   	push   eax
c0029660:	6a 10                	push   0x10
c0029662:	e8 56 ff ff ff       	call   c00295bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029667:	83 c4 10             	add    esp,0x10
c002966a:	31 d2                	xor    edx,edx
c002966c:	85 c0                	test   eax,eax
c002966e:	75 33                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029670:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029675:	75 2c                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029677:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002967c:	75 25                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002967e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029683:	75 1e                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029685:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002968a:	75 17                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002968c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029691:	75 10                	jne    c00296a3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029693:	83 ec 0c             	sub    esp,0xc
c0029696:	53                   	push   ebx
c0029697:	e8 7f d4 fd ff       	call   c0006b1b <init_percd>
c002969c:	83 c4 10             	add    esp,0x10
c002969f:	40                   	inc    eax
c00296a0:	0f 95 c2             	setne  dl
c00296a3:	81 c4 08 08 00 00    	add    esp,0x808
c00296a9:	88 d0                	mov    al,dl
c00296ab:	5b                   	pop    ebx
c00296ac:	c3                   	ret    
c00296ad:	90                   	nop

c00296ae <ISO9660::ISO9660()>:
c00296ae:	83 ec 0c             	sub    esp,0xc
c00296b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b5:	83 ec 0c             	sub    esp,0xc
c00296b8:	50                   	push   eax
c00296b9:	e8 6a 09 ff ff       	call   c001a028 <Filesystem::Filesystem()>
c00296be:	83 c4 10             	add    esp,0x10
c00296c1:	ba 1c 31 03 c0       	mov    edx,0xc003311c
c00296c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ca:	89 10                	mov    DWORD PTR [eax],edx
c00296cc:	e8 5c d5 fd ff       	call   c0006c2d <fs_iso9660_init>
c00296d1:	90                   	nop
c00296d2:	83 c4 0c             	add    esp,0xc
c00296d5:	c3                   	ret    

c00296d6 <SoundCard::beginPlayback()>:
c00296d6:	c7 44 24 04 80 31 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033180
c00296de:	e9 90 69 ff ff       	jmp    c0020073 <KePanic(char const*)>
c00296e3:	90                   	nop

c00296e4 <SoundCard::stopPlayback()>:
c00296e4:	c7 44 24 04 80 31 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033180
c00296ec:	e9 82 69 ff ff       	jmp    c0020073 <KePanic(char const*)>
c00296f1:	90                   	nop

c00296f2 <SoundCard::SoundCard(char const*)>:
c00296f2:	83 ec 1c             	sub    esp,0x1c
c00296f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296f9:	83 ec 08             	sub    esp,0x8
c00296fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029700:	50                   	push   eax
c0029701:	e8 b8 1c ff ff       	call   c001b3be <Device::Device(char const*)>
c0029706:	83 c4 10             	add    esp,0x10
c0029709:	ba cc 31 03 c0       	mov    edx,0xc00331cc
c002970e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029712:	89 10                	mov    DWORD PTR [eax],edx
c0029714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029718:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002971f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029723:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c002972d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029731:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c002973b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002973f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002974d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029757:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002975f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029764:	7f 1a                	jg     c0029780 <SoundCard::SoundCard(char const*)+0x8e>
c0029766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002976a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002976e:	83 c2 54             	add    edx,0x54
c0029771:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029779:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002977e:	eb df                	jmp    c002975f <SoundCard::SoundCard(char const*)+0x6d>
c0029780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029784:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002978b:	90                   	nop
c002978c:	83 c4 1c             	add    esp,0x1c
c002978f:	c3                   	ret    

c0029790 <SoundCard::~SoundCard()>:
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	ba cc 31 03 c0       	mov    edx,0xc00331cc
c0029798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979c:	89 10                	mov    DWORD PTR [eax],edx
c002979e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a2:	83 ec 0c             	sub    esp,0xc
c00297a5:	50                   	push   eax
c00297a6:	e8 b3 19 ff ff       	call   c001b15e <Device::~Device()>
c00297ab:	83 c4 10             	add    esp,0x10
c00297ae:	90                   	nop
c00297af:	83 c4 0c             	add    esp,0xc
c00297b2:	c3                   	ret    
c00297b3:	90                   	nop

c00297b4 <SoundCard::~SoundCard()>:
c00297b4:	83 ec 0c             	sub    esp,0xc
c00297b7:	83 ec 0c             	sub    esp,0xc
c00297ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297be:	e8 cd ff ff ff       	call   c0029790 <SoundCard::~SoundCard()>
c00297c3:	83 c4 10             	add    esp,0x10
c00297c6:	83 ec 08             	sub    esp,0x8
c00297c9:	68 e8 01 00 00       	push   0x1e8
c00297ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d2:	e8 f1 f8 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c00297d7:	83 c4 10             	add    esp,0x10
c00297da:	83 c4 0c             	add    esp,0xc
c00297dd:	c3                   	ret    

c00297de <SoundCard::configureRates(int, int, int)>:
c00297de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00297e2:	31 c0                	xor    eax,eax
c00297e4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00297eb:	75 20                	jne    c002980d <SoundCard::configureRates(int, int, int)+0x2f>
c00297ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00297f1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00297f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00297fb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029805:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002980b:	b0 01                	mov    al,0x1
c002980d:	c3                   	ret    

c002980e <SoundCard::getSamples16(int, short*)>:
c002980e:	55                   	push   ebp
c002980f:	57                   	push   edi
c0029810:	31 ff                	xor    edi,edi
c0029812:	56                   	push   esi
c0029813:	53                   	push   ebx
c0029814:	31 db                	xor    ebx,ebx
c0029816:	83 ec 10             	sub    esp,0x10
c0029819:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002981d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029821:	8d 04 36             	lea    eax,[esi+esi*1]
c0029824:	50                   	push   eax
c0029825:	6a 00                	push   0x0
c0029827:	55                   	push   ebp
c0029828:	e8 c3 6c fd ff       	call   c00004f0 <memset>
c002982d:	83 c4 10             	add    esp,0x10
c0029830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029834:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c002983b:	85 c0                	test   eax,eax
c002983d:	74 1a                	je     c0029859 <SoundCard::getSamples16(int, short*)+0x4b>
c002983f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029843:	75 14                	jne    c0029859 <SoundCard::getSamples16(int, short*)+0x4b>
c0029845:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029849:	55                   	push   ebp
c002984a:	56                   	push   esi
c002984b:	50                   	push   eax
c002984c:	e8 f3 02 00 00       	call   c0029b44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029851:	83 c4 10             	add    esp,0x10
c0029854:	39 c3                	cmp    ebx,eax
c0029856:	0f 4c d8             	cmovl  ebx,eax
c0029859:	47                   	inc    edi
c002985a:	83 ff 20             	cmp    edi,0x20
c002985d:	75 d1                	jne    c0029830 <SoundCard::getSamples16(int, short*)+0x22>
c002985f:	83 c4 0c             	add    esp,0xc
c0029862:	89 d8                	mov    eax,ebx
c0029864:	5b                   	pop    ebx
c0029865:	5e                   	pop    esi
c0029866:	5f                   	pop    edi
c0029867:	5d                   	pop    ebp
c0029868:	c3                   	ret    
c0029869:	90                   	nop

c002986a <SoundCard::getSamples32(int, int*)>:
c002986a:	55                   	push   ebp
c002986b:	57                   	push   edi
c002986c:	31 ff                	xor    edi,edi
c002986e:	56                   	push   esi
c002986f:	31 f6                	xor    esi,esi
c0029871:	53                   	push   ebx
c0029872:	83 ec 10             	sub    esp,0x10
c0029875:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029879:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002987d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029881:	c1 e0 02             	shl    eax,0x2
c0029884:	50                   	push   eax
c0029885:	6a 00                	push   0x0
c0029887:	55                   	push   ebp
c0029888:	e8 63 6c fd ff       	call   c00004f0 <memset>
c002988d:	83 c4 10             	add    esp,0x10
c0029890:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029897:	85 c0                	test   eax,eax
c0029899:	74 1a                	je     c00298b5 <SoundCard::getSamples32(int, int*)+0x4b>
c002989b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002989f:	75 14                	jne    c00298b5 <SoundCard::getSamples32(int, int*)+0x4b>
c00298a1:	53                   	push   ebx
c00298a2:	55                   	push   ebp
c00298a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00298a7:	50                   	push   eax
c00298a8:	e8 67 03 00 00       	call   c0029c14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00298ad:	83 c4 10             	add    esp,0x10
c00298b0:	39 c6                	cmp    esi,eax
c00298b2:	0f 4c f0             	cmovl  esi,eax
c00298b5:	47                   	inc    edi
c00298b6:	83 ff 20             	cmp    edi,0x20
c00298b9:	75 d5                	jne    c0029890 <SoundCard::getSamples32(int, int*)+0x26>
c00298bb:	85 f6                	test   esi,esi
c00298bd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c00298c4:	75 0f                	jne    c00298d5 <SoundCard::getSamples32(int, int*)+0x6b>
c00298c6:	85 c0                	test   eax,eax
c00298c8:	74 1b                	je     c00298e5 <SoundCard::getSamples32(int, int*)+0x7b>
c00298ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00298cc:	83 ec 0c             	sub    esp,0xc
c00298cf:	53                   	push   ebx
c00298d0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00298d3:	eb 0d                	jmp    c00298e2 <SoundCard::getSamples32(int, int*)+0x78>
c00298d5:	85 c0                	test   eax,eax
c00298d7:	75 0c                	jne    c00298e5 <SoundCard::getSamples32(int, int*)+0x7b>
c00298d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00298db:	83 ec 0c             	sub    esp,0xc
c00298de:	53                   	push   ebx
c00298df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00298e2:	83 c4 10             	add    esp,0x10
c00298e5:	83 c4 0c             	add    esp,0xc
c00298e8:	89 f0                	mov    eax,esi
c00298ea:	5b                   	pop    ebx
c00298eb:	5e                   	pop    esi
c00298ec:	5f                   	pop    edi
c00298ed:	5d                   	pop    ebp
c00298ee:	c3                   	ret    
c00298ef:	90                   	nop

c00298f0 <SoundCard::addChannel(SoundPort*)>:
c00298f0:	83 ec 0c             	sub    esp,0xc
c00298f3:	31 c0                	xor    eax,eax
c00298f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00298f9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029901:	74 1b                	je     c002991e <SoundCard::addChannel(SoundPort*)+0x2e>
c0029903:	40                   	inc    eax
c0029904:	83 f8 20             	cmp    eax,0x20
c0029907:	75 f0                	jne    c00298f9 <SoundCard::addChannel(SoundPort*)+0x9>
c0029909:	83 ec 0c             	sub    esp,0xc
c002990c:	68 a5 31 03 c0       	push   0xc00331a5
c0029911:	e8 5d 67 ff ff       	call   c0020073 <KePanic(char const*)>
c0029916:	83 c4 10             	add    esp,0x10
c0029919:	83 c8 ff             	or     eax,0xffffffff
c002991c:	eb 0b                	jmp    c0029929 <SoundCard::addChannel(SoundPort*)+0x39>
c002991e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029922:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029929:	83 c4 0c             	add    esp,0xc
c002992c:	c3                   	ret    
c002992d:	90                   	nop

c002992e <SoundCard::removeChannel(int)>:
c002992e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029936:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029941:	c3                   	ret    
c0029942:	66 90                	xchg   ax,ax

c0029944 <SoundPort::SoundPort(int, int, int, int)>:
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002994b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029956:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002995a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029962:	89 10                	mov    DWORD PTR [eax],edx
c0029964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002996c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002996f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029973:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029977:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002997a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002997f:	75 13                	jne    c0029994 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029985:	8b 00                	mov    eax,DWORD PTR [eax]
c0029987:	05 a0 0f 00 00       	add    eax,0xfa0
c002998c:	d1 e0                	shl    eax,1
c002998e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029992:	66 90                	xchg   ax,ax
c0029994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029998:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002999c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002999f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00299aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00299b1:	c1 e0 02             	shl    eax,0x2
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	50                   	push   eax
c00299b8:	e8 d2 c9 fe ff       	call   c001638f <malloc>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	89 c2                	mov    edx,eax
c00299c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00299c9:	90                   	nop
c00299ca:	83 c4 0c             	add    esp,0xc
c00299cd:	c3                   	ret    
c00299ce:	66 90                	xchg   ax,ax

c00299d0 <SoundPort::~SoundPort()>:
c00299d0:	83 ec 0c             	sub    esp,0xc
c00299d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00299da:	85 c0                	test   eax,eax
c00299dc:	74 1e                	je     c00299fc <SoundPort::~SoundPort()+0x2c>
c00299de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00299e5:	83 ec 0c             	sub    esp,0xc
c00299e8:	50                   	push   eax
c00299e9:	e8 b1 c9 fe ff       	call   c001639f <free>
c00299ee:	83 c4 10             	add    esp,0x10
c00299f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00299fc:	90                   	nop
c00299fd:	83 c4 0c             	add    esp,0xc
c0029a00:	c3                   	ret    
c0029a01:	90                   	nop
c0029a02:	66 90                	xchg   ax,ax

c0029a04 <SoundPort::unpause()>:
c0029a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a08:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029a0c:	c3                   	ret    
c0029a0d:	90                   	nop
c0029a0e:	66 90                	xchg   ax,ax

c0029a10 <SoundPort::pause()>:
c0029a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a14:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029a18:	c3                   	ret    
c0029a19:	90                   	nop
c0029a1a:	66 90                	xchg   ax,ax

c0029a1c <SoundPort::getBufferUsed()>:
c0029a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029a23:	c3                   	ret    

c0029a24 <SoundPort::getBufferSize()>:
c0029a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a28:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029a2b:	c3                   	ret    

c0029a2c <SoundPort::buffer16(short*, int)>:
c0029a2c:	55                   	push   ebp
c0029a2d:	57                   	push   edi
c0029a2e:	56                   	push   esi
c0029a2f:	53                   	push   ebx
c0029a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029a34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029a38:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029a3b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029a3e:	74 68                	je     c0029aa8 <SoundPort::buffer16(short*, int)+0x7c>
c0029a40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029a44:	85 c9                	test   ecx,ecx
c0029a46:	7e 60                	jle    c0029aa8 <SoundPort::buffer16(short*, int)+0x7c>
c0029a48:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029a4c:	8d 70 01             	lea    esi,[eax+0x1]
c0029a4f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029a52:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029a55:	c1 e1 0f             	shl    ecx,0xf
c0029a58:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029a5b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029a5e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a61:	74 4d                	je     c0029ab0 <SoundPort::buffer16(short*, int)+0x84>
c0029a63:	31 f6                	xor    esi,esi
c0029a65:	eb 21                	jmp    c0029a88 <SoundPort::buffer16(short*, int)+0x5c>
c0029a67:	90                   	nop
c0029a68:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029a6d:	8d 79 01             	lea    edi,[ecx+0x1]
c0029a70:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029a73:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029a76:	c1 e3 0f             	shl    ebx,0xf
c0029a79:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029a7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029a7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a82:	74 1c                	je     c0029aa0 <SoundPort::buffer16(short*, int)+0x74>
c0029a84:	89 c6                	mov    esi,eax
c0029a86:	66 90                	xchg   ax,ax
c0029a88:	8d 46 01             	lea    eax,[esi+0x1]
c0029a8b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029a8f:	75 d7                	jne    c0029a68 <SoundPort::buffer16(short*, int)+0x3c>
c0029a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029a95:	8d 76 00             	lea    esi,[esi+0x0]
c0029a98:	5b                   	pop    ebx
c0029a99:	5e                   	pop    esi
c0029a9a:	5f                   	pop    edi
c0029a9b:	5d                   	pop    ebp
c0029a9c:	c3                   	ret    
c0029a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0029aa0:	5b                   	pop    ebx
c0029aa1:	8d 46 02             	lea    eax,[esi+0x2]
c0029aa4:	5e                   	pop    esi
c0029aa5:	5f                   	pop    edi
c0029aa6:	5d                   	pop    ebp
c0029aa7:	c3                   	ret    
c0029aa8:	5b                   	pop    ebx
c0029aa9:	31 c0                	xor    eax,eax
c0029aab:	5e                   	pop    esi
c0029aac:	5f                   	pop    edi
c0029aad:	5d                   	pop    ebp
c0029aae:	c3                   	ret    
c0029aaf:	90                   	nop
c0029ab0:	b8 01 00 00 00       	mov    eax,0x1
c0029ab5:	eb e1                	jmp    c0029a98 <SoundPort::buffer16(short*, int)+0x6c>
c0029ab7:	90                   	nop

c0029ab8 <SoundPort::buffer32(int*, int)>:
c0029ab8:	55                   	push   ebp
c0029ab9:	57                   	push   edi
c0029aba:	56                   	push   esi
c0029abb:	53                   	push   ebx
c0029abc:	83 ec 04             	sub    esp,0x4
c0029abf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ac7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029acb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ace:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0029ad4:	74 5a                	je     c0029b30 <SoundPort::buffer32(int*, int)+0x78>
c0029ad6:	85 c0                	test   eax,eax
c0029ad8:	7e 56                	jle    c0029b30 <SoundPort::buffer32(int*, int)+0x78>
c0029ada:	8d 71 01             	lea    esi,[ecx+0x1]
c0029add:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029ae0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029ae3:	8b 37                	mov    esi,DWORD PTR [edi]
c0029ae5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029ae8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029aeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029aee:	74 4c                	je     c0029b3c <SoundPort::buffer32(int*, int)+0x84>
c0029af0:	31 f6                	xor    esi,esi
c0029af2:	eb 1c                	jmp    c0029b10 <SoundPort::buffer32(int*, int)+0x58>
c0029af4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029af7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029afa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029afd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029b00:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029b04:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029b07:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029b0a:	74 18                	je     c0029b24 <SoundPort::buffer32(int*, int)+0x6c>
c0029b0c:	89 de                	mov    esi,ebx
c0029b0e:	66 90                	xchg   ax,ax
c0029b10:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029b13:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029b16:	75 dc                	jne    c0029af4 <SoundPort::buffer32(int*, int)+0x3c>
c0029b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029b1b:	90                   	nop
c0029b1c:	83 c4 04             	add    esp,0x4
c0029b1f:	5b                   	pop    ebx
c0029b20:	5e                   	pop    esi
c0029b21:	5f                   	pop    edi
c0029b22:	5d                   	pop    ebp
c0029b23:	c3                   	ret    
c0029b24:	8d 46 02             	lea    eax,[esi+0x2]
c0029b27:	83 c4 04             	add    esp,0x4
c0029b2a:	5b                   	pop    ebx
c0029b2b:	5e                   	pop    esi
c0029b2c:	5f                   	pop    edi
c0029b2d:	5d                   	pop    ebp
c0029b2e:	c3                   	ret    
c0029b2f:	90                   	nop
c0029b30:	83 c4 04             	add    esp,0x4
c0029b33:	31 c0                	xor    eax,eax
c0029b35:	5b                   	pop    ebx
c0029b36:	5e                   	pop    esi
c0029b37:	5f                   	pop    edi
c0029b38:	5d                   	pop    ebp
c0029b39:	c3                   	ret    
c0029b3a:	66 90                	xchg   ax,ax
c0029b3c:	b8 01 00 00 00       	mov    eax,0x1
c0029b41:	eb d9                	jmp    c0029b1c <SoundPort::buffer32(int*, int)+0x64>
c0029b43:	90                   	nop

c0029b44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029b44:	55                   	push   ebp
c0029b45:	57                   	push   edi
c0029b46:	56                   	push   esi
c0029b47:	53                   	push   ebx
c0029b48:	83 ec 0c             	sub    esp,0xc
c0029b4b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029b53:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029b57:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0029b5b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029b61:	39 03                	cmp    DWORD PTR [ebx],eax
c0029b63:	74 13                	je     c0029b78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0029b65:	83 ec 0c             	sub    esp,0xc
c0029b68:	68 f8 31 03 c0       	push   0xc00331f8
c0029b6d:	e8 01 65 ff ff       	call   c0020073 <KePanic(char const*)>
c0029b72:	83 c4 10             	add    esp,0x10
c0029b75:	8d 76 00             	lea    esi,[esi+0x0]
c0029b78:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029b7e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029b81:	74 11                	je     c0029b94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0029b83:	83 ec 0c             	sub    esp,0xc
c0029b86:	68 37 32 03 c0       	push   0xc0033237
c0029b8b:	e8 e3 64 ff ff       	call   c0020073 <KePanic(char const*)>
c0029b90:	83 c4 10             	add    esp,0x10
c0029b93:	90                   	nop
c0029b94:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029b9a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029b9d:	74 11                	je     c0029bb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0029b9f:	83 ec 0c             	sub    esp,0xc
c0029ba2:	68 37 32 03 c0       	push   0xc0033237
c0029ba7:	e8 c7 64 ff ff       	call   c0020073 <KePanic(char const*)>
c0029bac:	83 c4 10             	add    esp,0x10
c0029baf:	90                   	nop
c0029bb0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0029bb3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0029bb7:	85 f6                	test   esi,esi
c0029bb9:	7e 2d                	jle    c0029be8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0029bbb:	31 c0                	xor    eax,eax
c0029bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0029bc0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029bc3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0029bc6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0029bcc:	85 c9                	test   ecx,ecx
c0029bce:	0f 49 d1             	cmovns edx,ecx
c0029bd1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0029bd5:	c1 fa 0f             	sar    edx,0xf
c0029bd8:	01 d1                	add    ecx,edx
c0029bda:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0029bde:	83 c0 01             	add    eax,0x1
c0029be1:	39 f0                	cmp    eax,esi
c0029be3:	75 db                	jne    c0029bc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0029be5:	8d 76 00             	lea    esi,[esi+0x0]
c0029be8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029beb:	83 ec 04             	sub    esp,0x4
c0029bee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029bf1:	29 f0                	sub    eax,esi
c0029bf3:	c1 e0 02             	shl    eax,0x2
c0029bf6:	50                   	push   eax
c0029bf7:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029bfa:	50                   	push   eax
c0029bfb:	52                   	push   edx
c0029bfc:	e8 cf 67 fd ff       	call   c00003d0 <memmove>
c0029c01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029c04:	29 f0                	sub    eax,esi
c0029c06:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029c09:	83 c4 1c             	add    esp,0x1c
c0029c0c:	89 f0                	mov    eax,esi
c0029c0e:	5b                   	pop    ebx
c0029c0f:	5e                   	pop    esi
c0029c10:	5f                   	pop    edi
c0029c11:	5d                   	pop    ebp
c0029c12:	c3                   	ret    
c0029c13:	90                   	nop

c0029c14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029c14:	55                   	push   ebp
c0029c15:	57                   	push   edi
c0029c16:	56                   	push   esi
c0029c17:	53                   	push   ebx
c0029c18:	83 ec 0c             	sub    esp,0xc
c0029c1b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029c23:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0029c27:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029c2b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029c31:	39 03                	cmp    DWORD PTR [ebx],eax
c0029c33:	74 13                	je     c0029c48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0029c35:	83 ec 0c             	sub    esp,0xc
c0029c38:	68 18 32 03 c0       	push   0xc0033218
c0029c3d:	e8 31 64 ff ff       	call   c0020073 <KePanic(char const*)>
c0029c42:	83 c4 10             	add    esp,0x10
c0029c45:	8d 76 00             	lea    esi,[esi+0x0]
c0029c48:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029c4e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029c51:	74 11                	je     c0029c64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0029c53:	83 ec 0c             	sub    esp,0xc
c0029c56:	68 53 32 03 c0       	push   0xc0033253
c0029c5b:	e8 13 64 ff ff       	call   c0020073 <KePanic(char const*)>
c0029c60:	83 c4 10             	add    esp,0x10
c0029c63:	90                   	nop
c0029c64:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029c6a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029c6d:	74 11                	je     c0029c80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0029c6f:	83 ec 0c             	sub    esp,0xc
c0029c72:	68 53 32 03 c0       	push   0xc0033253
c0029c77:	e8 f7 63 ff ff       	call   c0020073 <KePanic(char const*)>
c0029c7c:	83 c4 10             	add    esp,0x10
c0029c7f:	90                   	nop
c0029c80:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0029c83:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0029c87:	85 ff                	test   edi,edi
c0029c89:	7e 21                	jle    c0029cac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0029c8b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029c92:	31 c0                	xor    eax,eax
c0029c94:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029c97:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0029c9a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029c9d:	01 d5                	add    ebp,edx
c0029c9f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0029ca2:	83 c0 04             	add    eax,0x4
c0029ca5:	39 c1                	cmp    ecx,eax
c0029ca7:	75 eb                	jne    c0029c94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0029ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0029cac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029caf:	83 ec 04             	sub    esp,0x4
c0029cb2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029cb5:	29 f8                	sub    eax,edi
c0029cb7:	c1 e0 02             	shl    eax,0x2
c0029cba:	50                   	push   eax
c0029cbb:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029cbe:	50                   	push   eax
c0029cbf:	52                   	push   edx
c0029cc0:	e8 0b 67 fd ff       	call   c00003d0 <memmove>
c0029cc5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029cc8:	29 f8                	sub    eax,edi
c0029cca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029ccd:	83 c4 1c             	add    esp,0x1c
c0029cd0:	89 f8                	mov    eax,edi
c0029cd2:	5b                   	pop    ebx
c0029cd3:	5e                   	pop    esi
c0029cd4:	5f                   	pop    edi
c0029cd5:	5d                   	pop    ebp
c0029cd6:	c3                   	ret    
c0029cd7:	90                   	nop

c0029cd8 <PCI::open(int, int, void*)>:
c0029cd8:	83 ec 18             	sub    esp,0x18
c0029cdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029cdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029ce3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0029ceb:	50                   	push   eax
c0029cec:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029cef:	31 c0                	xor    eax,eax
c0029cf1:	83 c4 1c             	add    esp,0x1c
c0029cf4:	c3                   	ret    
c0029cf5:	90                   	nop

c0029cf6 <PCI::close(int, int, void*)>:
c0029cf6:	31 c0                	xor    eax,eax
c0029cf8:	c3                   	ret    
c0029cf9:	90                   	nop

c0029cfa <PCI::PCI()>:
c0029cfa:	83 ec 0c             	sub    esp,0xc
c0029cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d01:	83 ec 08             	sub    esp,0x8
c0029d04:	68 6f 32 03 c0       	push   0xc003326f
c0029d09:	50                   	push   eax
c0029d0a:	e8 a9 0e ff ff       	call   c001abb8 <Bus::Bus(char const*)>
c0029d0f:	83 c4 10             	add    esp,0x10
c0029d12:	ba 18 33 03 c0       	mov    edx,0xc0033318
c0029d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1b:	89 10                	mov    DWORD PTR [eax],edx
c0029d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d21:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0029d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d2f:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c0029d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029d3e:	0f b6 d0             	movzx  edx,al
c0029d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d45:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0029d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029d56:	0f b6 d0             	movzx  edx,al
c0029d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d5d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0029d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029d6c:	8d 50 01             	lea    edx,[eax+0x1]
c0029d6f:	88 d1                	mov    cl,dl
c0029d71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029d75:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0029d7b:	0f b6 d0             	movzx  edx,al
c0029d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0029d86:	83 c9 c0             	or     ecx,0xffffffc0
c0029d89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0029d8d:	90                   	nop
c0029d8e:	83 c4 0c             	add    esp,0xc
c0029d91:	c3                   	ret    

c0029d92 <PCI::readBAR8(unsigned int, int)>:
c0029d92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d9a:	f6 c2 01             	test   dl,0x1
c0029d9d:	74 07                	je     c0029da6 <PCI::readBAR8(unsigned int, int)+0x14>
c0029d9f:	83 e2 fc             	and    edx,0xfffffffc
c0029da2:	01 c2                	add    edx,eax
c0029da4:	ec                   	in     al,dx
c0029da5:	c3                   	ret    
c0029da6:	83 e2 f0             	and    edx,0xfffffff0
c0029da9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0029dac:	c3                   	ret    
c0029dad:	90                   	nop

c0029dae <PCI::readBAR16(unsigned int, int)>:
c0029dae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029db6:	f6 c2 01             	test   dl,0x1
c0029db9:	74 08                	je     c0029dc3 <PCI::readBAR16(unsigned int, int)+0x15>
c0029dbb:	83 e2 fc             	and    edx,0xfffffffc
c0029dbe:	01 c2                	add    edx,eax
c0029dc0:	66 ed                	in     ax,dx
c0029dc2:	c3                   	ret    
c0029dc3:	83 e2 f0             	and    edx,0xfffffff0
c0029dc6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0029dca:	c3                   	ret    
c0029dcb:	90                   	nop

c0029dcc <PCI::readBAR32(unsigned int, int)>:
c0029dcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029dd4:	f6 c2 01             	test   dl,0x1
c0029dd7:	74 07                	je     c0029de0 <PCI::readBAR32(unsigned int, int)+0x14>
c0029dd9:	83 e2 fc             	and    edx,0xfffffffc
c0029ddc:	01 c2                	add    edx,eax
c0029dde:	ed                   	in     eax,dx
c0029ddf:	c3                   	ret    
c0029de0:	83 e2 f0             	and    edx,0xfffffff0
c0029de3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0029de6:	c3                   	ret    
c0029de7:	90                   	nop

c0029de8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0029de8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029dec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029df0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029df4:	f6 c2 01             	test   dl,0x1
c0029df7:	74 07                	je     c0029e00 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0029df9:	83 e2 fc             	and    edx,0xfffffffc
c0029dfc:	01 ca                	add    edx,ecx
c0029dfe:	ee                   	out    dx,al
c0029dff:	c3                   	ret    
c0029e00:	83 e2 f0             	and    edx,0xfffffff0
c0029e03:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0029e06:	c3                   	ret    
c0029e07:	90                   	nop

c0029e08 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0029e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029e0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029e10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029e14:	f6 c2 01             	test   dl,0x1
c0029e17:	74 08                	je     c0029e21 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0029e19:	83 e2 fc             	and    edx,0xfffffffc
c0029e1c:	01 ca                	add    edx,ecx
c0029e1e:	66 ef                	out    dx,ax
c0029e20:	c3                   	ret    
c0029e21:	83 e2 f0             	and    edx,0xfffffff0
c0029e24:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0029e28:	c3                   	ret    
c0029e29:	90                   	nop

c0029e2a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0029e2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029e32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029e36:	f6 c2 01             	test   dl,0x1
c0029e39:	74 07                	je     c0029e42 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0029e3b:	83 e2 fc             	and    edx,0xfffffffc
c0029e3e:	01 ca                	add    edx,ecx
c0029e40:	ef                   	out    dx,eax
c0029e41:	c3                   	ret    
c0029e42:	83 e2 f0             	and    edx,0xfffffff0
c0029e45:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0029e48:	c3                   	ret    
c0029e49:	90                   	nop

c0029e4a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0029e4a:	55                   	push   ebp
c0029e4b:	57                   	push   edi
c0029e4c:	56                   	push   esi
c0029e4d:	53                   	push   ebx
c0029e4e:	83 ec 0c             	sub    esp,0xc
c0029e51:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c0029e56:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0029e5a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0029e5e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0029e62:	83 fe 07             	cmp    esi,0x7
c0029e65:	76 10                	jbe    c0029e77 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0029e67:	83 ec 0c             	sub    esp,0xc
c0029e6a:	68 77 32 03 c0       	push   0xc0033277
c0029e6f:	e8 ff 61 ff ff       	call   c0020073 <KePanic(char const*)>
c0029e74:	83 c4 10             	add    esp,0x10
c0029e77:	0f b6 db             	movzx  ebx,bl
c0029e7a:	83 fb 0f             	cmp    ebx,0xf
c0029e7d:	76 10                	jbe    c0029e8f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c0029e7f:	83 ec 0c             	sub    esp,0xc
c0029e82:	68 a7 32 03 c0       	push   0xc00332a7
c0029e87:	e8 e7 61 ff ff       	call   c0020073 <KePanic(char const*)>
c0029e8c:	83 c4 10             	add    esp,0x10
c0029e8f:	8d 04 36             	lea    eax,[esi+esi*1]
c0029e92:	ba f8 0c 00 00       	mov    edx,0xcf8
c0029e97:	83 c8 f0             	or     eax,0xfffffff0
c0029e9a:	ee                   	out    dx,al
c0029e9b:	ba fa 0c 00 00       	mov    edx,0xcfa
c0029ea0:	89 e8                	mov    eax,ebp
c0029ea2:	ee                   	out    dx,al
c0029ea3:	89 f9                	mov    ecx,edi
c0029ea5:	89 d8                	mov    eax,ebx
c0029ea7:	0f b6 d9             	movzx  ebx,cl
c0029eaa:	83 c4 0c             	add    esp,0xc
c0029ead:	c1 e0 08             	shl    eax,0x8
c0029eb0:	83 e3 fc             	and    ebx,0xfffffffc
c0029eb3:	09 d8                	or     eax,ebx
c0029eb5:	5b                   	pop    ebx
c0029eb6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0029ebb:	5e                   	pop    esi
c0029ebc:	5f                   	pop    edi
c0029ebd:	5d                   	pop    ebp
c0029ebe:	c3                   	ret    
c0029ebf:	90                   	nop

c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0029ec0:	57                   	push   edi
c0029ec1:	56                   	push   esi
c0029ec2:	53                   	push   ebx
c0029ec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029ec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029ecb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029ecf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029ed3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0029ed9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029edd:	83 ff 01             	cmp    edi,0x1
c0029ee0:	75 3f                	jne    c0029f21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c0029ee2:	89 de                	mov    esi,ebx
c0029ee4:	0f b6 c0             	movzx  eax,al
c0029ee7:	c1 e0 10             	shl    eax,0x10
c0029eea:	81 e6 fc 00 00 00    	and    esi,0xfc
c0029ef0:	0f b6 c9             	movzx  ecx,cl
c0029ef3:	09 f0                	or     eax,esi
c0029ef5:	c1 e1 08             	shl    ecx,0x8
c0029ef8:	0f b6 d2             	movzx  edx,dl
c0029efb:	c1 e2 0b             	shl    edx,0xb
c0029efe:	09 c8                	or     eax,ecx
c0029f00:	09 d0                	or     eax,edx
c0029f02:	ba f8 0c 00 00       	mov    edx,0xcf8
c0029f07:	0d 00 00 00 80       	or     eax,0x80000000
c0029f0c:	ef                   	out    dx,eax
c0029f0d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0029f12:	ed                   	in     eax,dx
c0029f13:	83 e3 02             	and    ebx,0x2
c0029f16:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0029f1d:	d3 e8                	shr    eax,cl
c0029f1f:	eb 44                	jmp    c0029f65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0029f21:	83 ff 02             	cmp    edi,0x2
c0029f24:	75 2d                	jne    c0029f53 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c0029f26:	83 ec 0c             	sub    esp,0xc
c0029f29:	0f b6 fb             	movzx  edi,bl
c0029f2c:	57                   	push   edi
c0029f2d:	0f b6 c9             	movzx  ecx,cl
c0029f30:	51                   	push   ecx
c0029f31:	0f b6 d2             	movzx  edx,dl
c0029f34:	52                   	push   edx
c0029f35:	0f b6 c0             	movzx  eax,al
c0029f38:	50                   	push   eax
c0029f39:	56                   	push   esi
c0029f3a:	e8 0b ff ff ff       	call   c0029e4a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f3f:	89 c2                	mov    edx,eax
c0029f41:	ed                   	in     eax,dx
c0029f42:	83 e3 02             	and    ebx,0x2
c0029f45:	83 c4 20             	add    esp,0x20
c0029f48:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0029f4f:	d3 e8                	shr    eax,cl
c0029f51:	eb 12                	jmp    c0029f65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0029f53:	83 ec 0c             	sub    esp,0xc
c0029f56:	68 d7 32 03 c0       	push   0xc00332d7
c0029f5b:	e8 13 61 ff ff       	call   c0020073 <KePanic(char const*)>
c0029f60:	83 c4 10             	add    esp,0x10
c0029f63:	31 c0                	xor    eax,eax
c0029f65:	5b                   	pop    ebx
c0029f66:	5e                   	pop    esi
c0029f67:	5f                   	pop    edi
c0029f68:	c3                   	ret    
c0029f69:	90                   	nop

c0029f6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0029f6a:	83 ec 18             	sub    esp,0x18
c0029f6d:	6a 00                	push   0x0
c0029f6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f74:	50                   	push   eax
c0029f75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f7a:	50                   	push   eax
c0029f7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f80:	50                   	push   eax
c0029f81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f85:	e8 36 ff ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f8a:	83 c4 2c             	add    esp,0x2c
c0029f8d:	c3                   	ret    

c0029f8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0029f8e:	83 ec 18             	sub    esp,0x18
c0029f91:	6a 0e                	push   0xe
c0029f93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f98:	50                   	push   eax
c0029f99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f9e:	50                   	push   eax
c0029f9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fa4:	50                   	push   eax
c0029fa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029fa9:	e8 12 ff ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029fae:	83 c4 2c             	add    esp,0x2c
c0029fb1:	0f b6 c0             	movzx  eax,al
c0029fb4:	c3                   	ret    
c0029fb5:	90                   	nop

c0029fb6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0029fb6:	55                   	push   ebp
c0029fb7:	57                   	push   edi
c0029fb8:	56                   	push   esi
c0029fb9:	53                   	push   ebx
c0029fba:	83 ec 18             	sub    esp,0x18
c0029fbd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0029fc2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0029fc7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0029fcc:	6a 0a                	push   0xa
c0029fce:	56                   	push   esi
c0029fcf:	55                   	push   ebp
c0029fd0:	57                   	push   edi
c0029fd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029fd5:	e8 e6 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029fda:	83 c4 14             	add    esp,0x14
c0029fdd:	6a 0a                	push   0xa
c0029fdf:	56                   	push   esi
c0029fe0:	55                   	push   ebp
c0029fe1:	57                   	push   edi
c0029fe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029fe6:	89 c3                	mov    ebx,eax
c0029fe8:	0f b6 db             	movzx  ebx,bl
c0029feb:	e8 d0 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029ff0:	83 c4 2c             	add    esp,0x2c
c0029ff3:	25 00 ff 00 00       	and    eax,0xff00
c0029ff8:	09 d8                	or     eax,ebx
c0029ffa:	5b                   	pop    ebx
c0029ffb:	5e                   	pop    esi
c0029ffc:	5f                   	pop    edi
c0029ffd:	5d                   	pop    ebp
c0029ffe:	c3                   	ret    
c0029fff:	90                   	nop

c002a000 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a000:	83 ec 18             	sub    esp,0x18
c002a003:	6a 08                	push   0x8
c002a005:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a00a:	50                   	push   eax
c002a00b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a010:	50                   	push   eax
c002a011:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a016:	50                   	push   eax
c002a017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a01b:	e8 a0 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a020:	83 c4 2c             	add    esp,0x2c
c002a023:	0f b6 c4             	movzx  eax,ah
c002a026:	c3                   	ret    
c002a027:	90                   	nop

c002a028 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a028:	83 ec 18             	sub    esp,0x18
c002a02b:	6a 08                	push   0x8
c002a02d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a032:	50                   	push   eax
c002a033:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a038:	50                   	push   eax
c002a039:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a03e:	50                   	push   eax
c002a03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a043:	e8 78 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a048:	83 c4 2c             	add    esp,0x2c
c002a04b:	c3                   	ret    

c002a04c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a04c:	83 ec 18             	sub    esp,0x18
c002a04f:	6a 3c                	push   0x3c
c002a051:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a056:	50                   	push   eax
c002a057:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a05c:	50                   	push   eax
c002a05d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a062:	50                   	push   eax
c002a063:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a067:	e8 54 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a06c:	83 c4 2c             	add    esp,0x2c
c002a06f:	c3                   	ret    

c002a070 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a070:	83 ec 18             	sub    esp,0x18
c002a073:	6a 18                	push   0x18
c002a075:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a07a:	50                   	push   eax
c002a07b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a080:	50                   	push   eax
c002a081:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a086:	50                   	push   eax
c002a087:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a08b:	e8 30 fe ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a090:	83 c4 2c             	add    esp,0x2c
c002a093:	0f b6 c4             	movzx  eax,ah
c002a096:	c3                   	ret    
c002a097:	90                   	nop

c002a098 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a098:	55                   	push   ebp
c002a099:	57                   	push   edi
c002a09a:	56                   	push   esi
c002a09b:	53                   	push   ebx
c002a09c:	83 ec 28             	sub    esp,0x28
c002a09f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a0a3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a0a8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a0ad:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a0b2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a0b9:	8d 43 12             	lea    eax,[ebx+0x12]
c002a0bc:	83 c3 10             	add    ebx,0x10
c002a0bf:	0f b6 c0             	movzx  eax,al
c002a0c2:	0f b6 db             	movzx  ebx,bl
c002a0c5:	50                   	push   eax
c002a0c6:	51                   	push   ecx
c002a0c7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a0cb:	57                   	push   edi
c002a0cc:	55                   	push   ebp
c002a0cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a0d1:	e8 ea fd ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a0d6:	83 c4 14             	add    esp,0x14
c002a0d9:	53                   	push   ebx
c002a0da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a0de:	51                   	push   ecx
c002a0df:	89 c6                	mov    esi,eax
c002a0e1:	57                   	push   edi
c002a0e2:	55                   	push   ebp
c002a0e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a0e7:	c1 e6 10             	shl    esi,0x10
c002a0ea:	e8 d1 fd ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a0ef:	83 c4 3c             	add    esp,0x3c
c002a0f2:	5b                   	pop    ebx
c002a0f3:	0f b7 c0             	movzx  eax,ax
c002a0f6:	09 f0                	or     eax,esi
c002a0f8:	5e                   	pop    esi
c002a0f9:	5f                   	pop    edi
c002a0fa:	5d                   	pop    ebp
c002a0fb:	c3                   	ret    

c002a0fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a0fc:	55                   	push   ebp
c002a0fd:	57                   	push   edi
c002a0fe:	56                   	push   esi
c002a0ff:	53                   	push   ebx
c002a100:	83 ec 0c             	sub    esp,0xc
c002a103:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a10b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a10f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a113:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a119:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a11d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a121:	83 f9 01             	cmp    ecx,0x1
c002a124:	75 5d                	jne    c002a183 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a126:	0f b6 c8             	movzx  ecx,al
c002a129:	89 f0                	mov    eax,esi
c002a12b:	25 fc 00 00 00       	and    eax,0xfc
c002a130:	0f b6 d2             	movzx  edx,dl
c002a133:	c1 e1 10             	shl    ecx,0x10
c002a136:	c1 e2 0b             	shl    edx,0xb
c002a139:	09 c1                	or     ecx,eax
c002a13b:	89 f8                	mov    eax,edi
c002a13d:	0f b6 f8             	movzx  edi,al
c002a140:	c1 e7 08             	shl    edi,0x8
c002a143:	09 f9                	or     ecx,edi
c002a145:	09 d1                	or     ecx,edx
c002a147:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a14c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a152:	89 c8                	mov    eax,ecx
c002a154:	ef                   	out    dx,eax
c002a155:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a15a:	ed                   	in     eax,dx
c002a15b:	83 e6 02             	and    esi,0x2
c002a15e:	0f b7 db             	movzx  ebx,bx
c002a161:	74 0a                	je     c002a16d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a163:	c1 e3 10             	shl    ebx,0x10
c002a166:	0f b7 d0             	movzx  edx,ax
c002a169:	09 d3                	or     ebx,edx
c002a16b:	eb 05                	jmp    c002a172 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a16d:	66 31 c0             	xor    ax,ax
c002a170:	09 c3                	or     ebx,eax
c002a172:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a177:	89 c8                	mov    eax,ecx
c002a179:	ef                   	out    dx,eax
c002a17a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a17f:	89 d8                	mov    eax,ebx
c002a181:	eb 41                	jmp    c002a1c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a183:	83 f9 02             	cmp    ecx,0x2
c002a186:	75 45                	jne    c002a1cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a188:	89 f1                	mov    ecx,esi
c002a18a:	83 ec 0c             	sub    esp,0xc
c002a18d:	0f b6 f1             	movzx  esi,cl
c002a190:	89 f9                	mov    ecx,edi
c002a192:	56                   	push   esi
c002a193:	0f b6 f9             	movzx  edi,cl
c002a196:	57                   	push   edi
c002a197:	0f b6 d2             	movzx  edx,dl
c002a19a:	52                   	push   edx
c002a19b:	0f b6 c0             	movzx  eax,al
c002a19e:	50                   	push   eax
c002a19f:	55                   	push   ebp
c002a1a0:	e8 a5 fc ff ff       	call   c0029e4a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a1a5:	89 c2                	mov    edx,eax
c002a1a7:	ed                   	in     eax,dx
c002a1a8:	83 c4 20             	add    esp,0x20
c002a1ab:	f6 c2 02             	test   dl,0x2
c002a1ae:	0f b7 db             	movzx  ebx,bx
c002a1b1:	74 0c                	je     c002a1bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a1b3:	0f b7 c8             	movzx  ecx,ax
c002a1b6:	89 d8                	mov    eax,ebx
c002a1b8:	c1 e0 10             	shl    eax,0x10
c002a1bb:	09 c8                	or     eax,ecx
c002a1bd:	eb 05                	jmp    c002a1c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a1bf:	66 31 c0             	xor    ax,ax
c002a1c2:	09 d8                	or     eax,ebx
c002a1c4:	ef                   	out    dx,eax
c002a1c5:	83 c4 0c             	add    esp,0xc
c002a1c8:	5b                   	pop    ebx
c002a1c9:	5e                   	pop    esi
c002a1ca:	5f                   	pop    edi
c002a1cb:	5d                   	pop    ebp
c002a1cc:	c3                   	ret    
c002a1cd:	c7 44 24 20 d7 32 03 c0 	mov    DWORD PTR [esp+0x20],0xc00332d7
c002a1d5:	83 c4 0c             	add    esp,0xc
c002a1d8:	5b                   	pop    ebx
c002a1d9:	5e                   	pop    esi
c002a1da:	5f                   	pop    edi
c002a1db:	5d                   	pop    ebp
c002a1dc:	e9 92 5e ff ff       	jmp    c0020073 <KePanic(char const*)>
c002a1e1:	90                   	nop

c002a1e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a1e2:	55                   	push   ebp
c002a1e3:	57                   	push   edi
c002a1e4:	56                   	push   esi
c002a1e5:	53                   	push   ebx
c002a1e6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a1ec:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a1f3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a1fa:	0f 85 bd 00 00 00    	jne    c002a2bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a200:	83 ec 0c             	sub    esp,0xc
c002a203:	68 14 01 00 00       	push   0x114
c002a208:	e8 82 c1 fe ff       	call   c001638f <malloc>
c002a20d:	83 c4 0c             	add    esp,0xc
c002a210:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a216:	68 dd 32 03 c0       	push   0xc00332dd
c002a21b:	50                   	push   eax
c002a21c:	89 c3                	mov    ebx,eax
c002a21e:	e8 bb 01 ff ff       	call   c001a3de <File::File(char const*, Process*)>
c002a223:	83 c4 10             	add    esp,0x10
c002a226:	85 db                	test   ebx,ebx
c002a228:	0f 84 6b 02 00 00    	je     c002a499 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a22e:	57                   	push   edi
c002a22f:	57                   	push   edi
c002a230:	6a 01                	push   0x1
c002a232:	53                   	push   ebx
c002a233:	e8 c4 01 ff ff       	call   c001a3fc <File::open(FileOpenMode)>
c002a238:	83 c4 10             	add    esp,0x10
c002a23b:	85 c0                	test   eax,eax
c002a23d:	0f 85 56 02 00 00    	jne    c002a499 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a243:	52                   	push   edx
c002a244:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a248:	50                   	push   eax
c002a249:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a24d:	50                   	push   eax
c002a24e:	53                   	push   ebx
c002a24f:	e8 aa 04 ff ff       	call   c001a6fe <File::stat(unsigned long long*, bool*)>
c002a254:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a258:	40                   	inc    eax
c002a259:	89 04 24             	mov    DWORD PTR [esp],eax
c002a25c:	e8 2e c1 fe ff       	call   c001638f <malloc>
c002a261:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a265:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a269:	59                   	pop    ecx
c002a26a:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a26f:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a271:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a275:	51                   	push   ecx
c002a276:	50                   	push   eax
c002a277:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a27b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a27f:	53                   	push   ebx
c002a280:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a283:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a287:	83 c4 20             	add    esp,0x20
c002a28a:	89 c8                	mov    eax,ecx
c002a28c:	99                   	cdq    
c002a28d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a291:	0f 85 02 02 00 00    	jne    c002a499 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a297:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a29b:	0f 85 f8 01 00 00    	jne    c002a499 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a2a1:	83 ec 0c             	sub    esp,0xc
c002a2a4:	53                   	push   ebx
c002a2a5:	e8 b0 01 ff ff       	call   c001a45a <File::close()>
c002a2aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a2ae:	83 c4 10             	add    esp,0x10
c002a2b1:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a2b8:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a2bd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a2c5:	31 c9                	xor    ecx,ecx
c002a2c7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a2ce:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a2d4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a2db:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a2e1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a2e6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a2ee:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a2f3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a2fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a2ff:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a307:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a30b:	39 cd                	cmp    ebp,ecx
c002a30d:	0f 8e 86 01 00 00    	jle    c002a499 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a313:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a316:	d4 40                	aam    0x40
c002a318:	d5 39                	aad    0x39
c002a31a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a31e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a322:	d4 40                	aam    0x40
c002a324:	d5 39                	aad    0x39
c002a326:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a32a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a32e:	d4 40                	aam    0x40
c002a330:	d5 39                	aad    0x39
c002a332:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a336:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a33a:	d4 40                	aam    0x40
c002a33c:	d5 39                	aad    0x39
c002a33e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a342:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a346:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a34a:	3c 56                	cmp    al,0x56
c002a34c:	74 47                	je     c002a395 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a34e:	d4 40                	aam    0x40
c002a350:	d5 39                	aad    0x39
c002a352:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a355:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a359:	0f b6 db             	movzx  ebx,bl
c002a35c:	c1 e3 04             	shl    ebx,0x4
c002a35f:	d4 40                	aam    0x40
c002a361:	d5 39                	aad    0x39
c002a363:	83 e8 30             	sub    eax,0x30
c002a366:	0f b6 c0             	movzx  eax,al
c002a369:	09 c3                	or     ebx,eax
c002a36b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a36f:	c1 e3 04             	shl    ebx,0x4
c002a372:	d4 40                	aam    0x40
c002a374:	d5 39                	aad    0x39
c002a376:	83 e8 30             	sub    eax,0x30
c002a379:	0f b6 c0             	movzx  eax,al
c002a37c:	09 c3                	or     ebx,eax
c002a37e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002a382:	c1 e3 04             	shl    ebx,0x4
c002a385:	d4 40                	aam    0x40
c002a387:	d5 39                	aad    0x39
c002a389:	83 e8 30             	sub    eax,0x30
c002a38c:	0f b6 c0             	movzx  eax,al
c002a38f:	09 c3                	or     ebx,eax
c002a391:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002a395:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002a399:	80 fb 58             	cmp    bl,0x58
c002a39c:	74 49                	je     c002a3e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002a39e:	88 d8                	mov    al,bl
c002a3a0:	d4 40                	aam    0x40
c002a3a2:	d5 39                	aad    0x39
c002a3a4:	83 e8 30             	sub    eax,0x30
c002a3a7:	0f b6 f8             	movzx  edi,al
c002a3aa:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002a3ae:	c1 e7 04             	shl    edi,0x4
c002a3b1:	d4 40                	aam    0x40
c002a3b3:	d5 39                	aad    0x39
c002a3b5:	83 e8 30             	sub    eax,0x30
c002a3b8:	0f b6 c0             	movzx  eax,al
c002a3bb:	09 c7                	or     edi,eax
c002a3bd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002a3c1:	c1 e7 04             	shl    edi,0x4
c002a3c4:	d4 40                	aam    0x40
c002a3c6:	d5 39                	aad    0x39
c002a3c8:	83 e8 30             	sub    eax,0x30
c002a3cb:	0f b6 c0             	movzx  eax,al
c002a3ce:	09 c7                	or     edi,eax
c002a3d0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002a3d4:	c1 e7 04             	shl    edi,0x4
c002a3d7:	d4 40                	aam    0x40
c002a3d9:	d5 39                	aad    0x39
c002a3db:	83 e8 30             	sub    eax,0x30
c002a3de:	0f b6 c0             	movzx  eax,al
c002a3e1:	09 c7                	or     edi,eax
c002a3e3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002a3e7:	8d 41 10             	lea    eax,[ecx+0x10]
c002a3ea:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a3ee:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002a3f2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a3f6:	83 f9 0a             	cmp    ecx,0xa
c002a3f9:	74 07                	je     c002a402 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002a3fb:	47                   	inc    edi
c002a3fc:	39 c5                	cmp    ebp,eax
c002a3fe:	75 16                	jne    c002a416 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002a400:	89 e8                	mov    eax,ebp
c002a402:	83 f9 0a             	cmp    ecx,0xa
c002a405:	0f 94 c1             	sete   cl
c002a408:	0f b6 c9             	movzx  ecx,cl
c002a40b:	01 c1                	add    ecx,eax
c002a40d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a412:	75 0f                	jne    c002a423 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002a414:	eb 1c                	jmp    c002a432 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002a416:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a419:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002a41d:	40                   	inc    eax
c002a41e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002a421:	eb cb                	jmp    c002a3ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002a423:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a427:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a42c:	0f 85 d9 fe ff ff    	jne    c002a30b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a432:	80 fb 58             	cmp    bl,0x58
c002a435:	74 10                	je     c002a447 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002a437:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a43c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002a441:	0f 85 c4 fe ff ff    	jne    c002a30b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a44b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002a44f:	83 e8 30             	sub    eax,0x30
c002a452:	c1 e0 04             	shl    eax,0x4
c002a455:	83 eb 30             	sub    ebx,0x30
c002a458:	09 d8                	or     eax,ebx
c002a45a:	0f b6 c0             	movzx  eax,al
c002a45d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a461:	0f 85 a4 fe ff ff    	jne    c002a30b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a46b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a46f:	83 e8 30             	sub    eax,0x30
c002a472:	c1 e0 04             	shl    eax,0x4
c002a475:	83 eb 30             	sub    ebx,0x30
c002a478:	09 d8                	or     eax,ebx
c002a47a:	0f b6 c0             	movzx  eax,al
c002a47d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a481:	0f 85 84 fe ff ff    	jne    c002a30b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a487:	50                   	push   eax
c002a488:	50                   	push   eax
c002a489:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a48d:	50                   	push   eax
c002a48e:	56                   	push   esi
c002a48f:	e8 bc 61 fd ff       	call   c0000650 <strcpy>
c002a494:	83 c4 10             	add    esp,0x10
c002a497:	eb 05                	jmp    c002a49e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002a499:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002a49c:	31 f6                	xor    esi,esi
c002a49e:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a4a4:	89 f0                	mov    eax,esi
c002a4a6:	5b                   	pop    ebx
c002a4a7:	5e                   	pop    esi
c002a4a8:	5f                   	pop    edi
c002a4a9:	5d                   	pop    ebp
c002a4aa:	c3                   	ret    
c002a4ab:	90                   	nop

c002a4ac <PCI::checkBus(unsigned char)>:
c002a4ac:	56                   	push   esi
c002a4ad:	53                   	push   ebx
c002a4ae:	31 db                	xor    ebx,ebx
c002a4b0:	51                   	push   ecx
c002a4b1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a4b6:	52                   	push   edx
c002a4b7:	53                   	push   ebx
c002a4b8:	43                   	inc    ebx
c002a4b9:	56                   	push   esi
c002a4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a4be:	e8 0f 03 00 00       	call   c002a7d2 <PCI::checkDevice(unsigned char, unsigned char)>
c002a4c3:	83 c4 10             	add    esp,0x10
c002a4c6:	83 fb 20             	cmp    ebx,0x20
c002a4c9:	75 eb                	jne    c002a4b6 <PCI::checkBus(unsigned char)+0xa>
c002a4cb:	58                   	pop    eax
c002a4cc:	5b                   	pop    ebx
c002a4cd:	5e                   	pop    esi
c002a4ce:	c3                   	ret    
c002a4cf:	90                   	nop

c002a4d0 <PCI::foundDevice(PCIDeviceInfo)>:
c002a4d0:	55                   	push   ebp
c002a4d1:	57                   	push   edi
c002a4d2:	56                   	push   esi
c002a4d3:	53                   	push   ebx
c002a4d4:	83 ec 1c             	sub    esp,0x1c
c002a4d7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a4dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a4e0:	3d ff ff 00 00       	cmp    eax,0xffff
c002a4e5:	0f 84 63 01 00 00    	je     c002a64e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a4eb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a4f0:	66 3d 06 04          	cmp    ax,0x406
c002a4f4:	75 2c                	jne    c002a522 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a4f6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a4fb:	50                   	push   eax
c002a4fc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a501:	50                   	push   eax
c002a502:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a507:	50                   	push   eax
c002a508:	53                   	push   ebx
c002a509:	e8 62 fb ff ff       	call   c002a070 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a50e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a512:	0f b6 c0             	movzx  eax,al
c002a515:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a519:	83 c4 2c             	add    esp,0x2c
c002a51c:	5b                   	pop    ebx
c002a51d:	5e                   	pop    esi
c002a51e:	5f                   	pop    edi
c002a51f:	5d                   	pop    ebp
c002a520:	eb 8a                	jmp    c002a4ac <PCI::checkBus(unsigned char)>
c002a522:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002a527:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a52d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002a531:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a535:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002a539:	85 d2                	test   edx,edx
c002a53b:	74 34                	je     c002a571 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002a53d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a540:	85 c9                	test   ecx,ecx
c002a542:	74 29                	je     c002a56d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a544:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002a54a:	31 f5                	xor    ebp,esi
c002a54c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002a552:	75 19                	jne    c002a56d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a554:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002a55a:	75 11                	jne    c002a56d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a55c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a563:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002a567:	0f 84 e1 00 00 00    	je     c002a64e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a56d:	8b 12                	mov    edx,DWORD PTR [edx]
c002a56f:	eb c8                	jmp    c002a539 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a571:	3d 01 06 00 00       	cmp    eax,0x601
c002a576:	75 19                	jne    c002a591 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002a578:	83 ec 0c             	sub    esp,0xc
c002a57b:	68 64 01 00 00       	push   0x164
c002a580:	e8 0a be fe ff       	call   c001638f <malloc>
c002a585:	89 04 24             	mov    DWORD PTR [esp],eax
c002a588:	89 c5                	mov    ebp,eax
c002a58a:	e8 ab 0e 00 00       	call   c002b43a <SATABus::SATABus()>
c002a58f:	eb 1e                	jmp    c002a5af <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002a591:	3d 01 01 00 00       	cmp    eax,0x101
c002a596:	75 62                	jne    c002a5fa <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002a598:	83 ec 0c             	sub    esp,0xc
c002a59b:	68 70 02 00 00       	push   0x270
c002a5a0:	e8 ea bd fe ff       	call   c001638f <malloc>
c002a5a5:	89 04 24             	mov    DWORD PTR [esp],eax
c002a5a8:	89 c5                	mov    ebp,eax
c002a5aa:	e8 f3 02 00 00       	call   c002a8a2 <IDE::IDE()>
c002a5af:	58                   	pop    eax
c002a5b0:	5a                   	pop    edx
c002a5b1:	55                   	push   ebp
c002a5b2:	53                   	push   ebx
c002a5b3:	e8 a4 0c ff ff       	call   c001b25c <Device::addChild(Device*)>
c002a5b8:	83 ec 1c             	sub    esp,0x1c
c002a5bb:	b9 09 00 00 00       	mov    ecx,0x9
c002a5c0:	fc                   	cld    
c002a5c1:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a5c5:	89 e7                	mov    edi,esp
c002a5c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a5c9:	55                   	push   ebp
c002a5ca:	e8 d3 0b ff ff       	call   c001b1a2 <Device::preOpenPCI(PCIDeviceInfo)>
c002a5cf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a5d2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a5d6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a5de:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a5e6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a5ee:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a5f1:	83 c4 4c             	add    esp,0x4c
c002a5f4:	5b                   	pop    ebx
c002a5f5:	5e                   	pop    esi
c002a5f6:	5f                   	pop    edi
c002a5f7:	5d                   	pop    ebp
c002a5f8:	ff e0                	jmp    eax
c002a5fa:	83 ec 0c             	sub    esp,0xc
c002a5fd:	68 58 01 00 00       	push   0x158
c002a602:	e8 88 bd fe ff       	call   c001638f <malloc>
c002a607:	5a                   	pop    edx
c002a608:	59                   	pop    ecx
c002a609:	68 f6 32 03 c0       	push   0xc00332f6
c002a60e:	50                   	push   eax
c002a60f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002a613:	e8 f8 0e ff ff       	call   c001b510 <DriverlessDevice::DriverlessDevice(char const*)>
c002a618:	5e                   	pop    esi
c002a619:	5f                   	pop    edi
c002a61a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a61e:	50                   	push   eax
c002a61f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002a623:	53                   	push   ebx
c002a624:	e8 33 0c ff ff       	call   c001b25c <Device::addChild(Device*)>
c002a629:	83 c4 10             	add    esp,0x10
c002a62c:	b9 09 00 00 00       	mov    ecx,0x9
c002a631:	fc                   	cld    
c002a632:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a636:	89 fe                	mov    esi,edi
c002a638:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a63a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a63e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a642:	83 c4 1c             	add    esp,0x1c
c002a645:	5b                   	pop    ebx
c002a646:	5e                   	pop    esi
c002a647:	5f                   	pop    edi
c002a648:	5d                   	pop    ebp
c002a649:	e9 54 0b ff ff       	jmp    c001b1a2 <Device::preOpenPCI(PCIDeviceInfo)>
c002a64e:	83 c4 1c             	add    esp,0x1c
c002a651:	5b                   	pop    ebx
c002a652:	5e                   	pop    esi
c002a653:	5f                   	pop    edi
c002a654:	5d                   	pop    ebp
c002a655:	c3                   	ret    

c002a656 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a656:	55                   	push   ebp
c002a657:	57                   	push   edi
c002a658:	56                   	push   esi
c002a659:	53                   	push   ebx
c002a65a:	83 ec 68             	sub    esp,0x68
c002a65d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a664:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a668:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a66c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a673:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a678:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a67c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a683:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a688:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a68c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a691:	6a 0c                	push   0xc
c002a693:	57                   	push   edi
c002a694:	53                   	push   ebx
c002a695:	56                   	push   esi
c002a696:	55                   	push   ebp
c002a697:	e8 24 f8 ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a69c:	83 c4 20             	add    esp,0x20
c002a69f:	57                   	push   edi
c002a6a0:	53                   	push   ebx
c002a6a1:	56                   	push   esi
c002a6a2:	55                   	push   ebp
c002a6a3:	e8 0e f9 ff ff       	call   c0029fb6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a6a8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a6ad:	57                   	push   edi
c002a6ae:	53                   	push   ebx
c002a6af:	56                   	push   esi
c002a6b0:	55                   	push   ebp
c002a6b1:	e8 96 f9 ff ff       	call   c002a04c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a6b6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a6ba:	83 c4 14             	add    esp,0x14
c002a6bd:	6a 3c                	push   0x3c
c002a6bf:	57                   	push   edi
c002a6c0:	53                   	push   ebx
c002a6c1:	56                   	push   esi
c002a6c2:	55                   	push   ebp
c002a6c3:	e8 f8 f7 ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6c8:	0f b6 c4             	movzx  eax,ah
c002a6cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a6cf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a6d3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a6d7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a6dc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a6e2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a6e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a6ec:	83 c4 20             	add    esp,0x20
c002a6ef:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a6f4:	74 30                	je     c002a726 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a6f6:	31 c0                	xor    eax,eax
c002a6f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a6fc:	7e 28                	jle    c002a726 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a6fe:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a706:	39 cb                	cmp    ebx,ecx
c002a708:	75 19                	jne    c002a723 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a70a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002a712:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002a716:	75 0b                	jne    c002a723 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a718:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002a71f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a723:	40                   	inc    eax
c002a724:	eb d2                	jmp    c002a6f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002a726:	31 d2                	xor    edx,edx
c002a728:	83 ec 0c             	sub    esp,0xc
c002a72b:	57                   	push   edi
c002a72c:	53                   	push   ebx
c002a72d:	56                   	push   esi
c002a72e:	52                   	push   edx
c002a72f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002a733:	55                   	push   ebp
c002a734:	e8 5f f9 ff ff       	call   c002a098 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a739:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002a73d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002a741:	42                   	inc    edx
c002a742:	83 c4 20             	add    esp,0x20
c002a745:	83 fa 06             	cmp    edx,0x6
c002a748:	75 de                	jne    c002a728 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002a74a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a74e:	83 ec 0c             	sub    esp,0xc
c002a751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a755:	c1 e2 08             	shl    edx,0x8
c002a758:	0f b6 c4             	movzx  eax,ah
c002a75b:	09 d0                	or     eax,edx
c002a75d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002a762:	6a 02                	push   0x2
c002a764:	57                   	push   edi
c002a765:	53                   	push   ebx
c002a766:	56                   	push   esi
c002a767:	55                   	push   ebp
c002a768:	e8 53 f7 ff ff       	call   c0029ec0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a76d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002a772:	83 c4 20             	add    esp,0x20
c002a775:	57                   	push   edi
c002a776:	53                   	push   ebx
c002a777:	56                   	push   esi
c002a778:	55                   	push   ebp
c002a779:	e8 82 f8 ff ff       	call   c002a000 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002a77e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002a782:	57                   	push   edi
c002a783:	53                   	push   ebx
c002a784:	56                   	push   esi
c002a785:	55                   	push   ebp
c002a786:	e8 df f7 ff ff       	call   c0029f6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a78b:	b9 09 00 00 00       	mov    ecx,0x9
c002a790:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002a795:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002a799:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002a79d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002a7a1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002a7a5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002a7a9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002a7ad:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002a7b1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002a7b5:	83 ec 0c             	sub    esp,0xc
c002a7b8:	fc                   	cld    
c002a7b9:	8d 74 24 58          	lea    esi,[esp+0x58]
c002a7bd:	89 e7                	mov    edi,esp
c002a7bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a7c1:	55                   	push   ebp
c002a7c2:	e8 09 fd ff ff       	call   c002a4d0 <PCI::foundDevice(PCIDeviceInfo)>
c002a7c7:	81 c4 8c 00 00 00    	add    esp,0x8c
c002a7cd:	5b                   	pop    ebx
c002a7ce:	5e                   	pop    esi
c002a7cf:	5f                   	pop    edi
c002a7d0:	5d                   	pop    ebp
c002a7d1:	c3                   	ret    

c002a7d2 <PCI::checkDevice(unsigned char, unsigned char)>:
c002a7d2:	55                   	push   ebp
c002a7d3:	57                   	push   edi
c002a7d4:	56                   	push   esi
c002a7d5:	53                   	push   ebx
c002a7d6:	83 ec 0c             	sub    esp,0xc
c002a7d9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002a7de:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002a7e3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a7e7:	6a 00                	push   0x0
c002a7e9:	56                   	push   esi
c002a7ea:	57                   	push   edi
c002a7eb:	55                   	push   ebp
c002a7ec:	e8 79 f7 ff ff       	call   c0029f6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a7f1:	6a 00                	push   0x0
c002a7f3:	56                   	push   esi
c002a7f4:	57                   	push   edi
c002a7f5:	55                   	push   ebp
c002a7f6:	e8 5b fe ff ff       	call   c002a656 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002a7fb:	83 c4 20             	add    esp,0x20
c002a7fe:	6a 00                	push   0x0
c002a800:	56                   	push   esi
c002a801:	57                   	push   edi
c002a802:	55                   	push   ebp
c002a803:	e8 86 f7 ff ff       	call   c0029f8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002a808:	83 c4 10             	add    esp,0x10
c002a80b:	a8 80                	test   al,0x80
c002a80d:	74 2d                	je     c002a83c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002a80f:	bb 01 00 00 00       	mov    ebx,0x1
c002a814:	53                   	push   ebx
c002a815:	56                   	push   esi
c002a816:	57                   	push   edi
c002a817:	55                   	push   ebp
c002a818:	e8 4d f7 ff ff       	call   c0029f6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a81d:	83 c4 10             	add    esp,0x10
c002a820:	0f b7 c0             	movzx  eax,ax
c002a823:	3d ff ff 00 00       	cmp    eax,0xffff
c002a828:	74 0c                	je     c002a836 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002a82a:	53                   	push   ebx
c002a82b:	56                   	push   esi
c002a82c:	57                   	push   edi
c002a82d:	55                   	push   ebp
c002a82e:	e8 23 fe ff ff       	call   c002a656 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002a833:	83 c4 10             	add    esp,0x10
c002a836:	43                   	inc    ebx
c002a837:	83 fb 08             	cmp    ebx,0x8
c002a83a:	75 d8                	jne    c002a814 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002a83c:	83 c4 0c             	add    esp,0xc
c002a83f:	5b                   	pop    ebx
c002a840:	5e                   	pop    esi
c002a841:	5f                   	pop    edi
c002a842:	5d                   	pop    ebp
c002a843:	c3                   	ret    

c002a844 <PCI::detect()>:
c002a844:	56                   	push   esi
c002a845:	53                   	push   ebx
c002a846:	53                   	push   ebx
c002a847:	31 db                	xor    ebx,ebx
c002a849:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a84d:	6a 00                	push   0x0
c002a84f:	6a 00                	push   0x0
c002a851:	6a 00                	push   0x0
c002a853:	56                   	push   esi
c002a854:	e8 35 f7 ff ff       	call   c0029f8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002a859:	83 c4 10             	add    esp,0x10
c002a85c:	a8 80                	test   al,0x80
c002a85e:	75 21                	jne    c002a881 <PCI::detect()+0x3d>
c002a860:	51                   	push   ecx
c002a861:	51                   	push   ecx
c002a862:	6a 00                	push   0x0
c002a864:	56                   	push   esi
c002a865:	e8 42 fc ff ff       	call   c002a4ac <PCI::checkBus(unsigned char)>
c002a86a:	83 c4 10             	add    esp,0x10
c002a86d:	eb 2a                	jmp    c002a899 <PCI::detect()+0x55>
c002a86f:	52                   	push   edx
c002a870:	52                   	push   edx
c002a871:	53                   	push   ebx
c002a872:	43                   	inc    ebx
c002a873:	56                   	push   esi
c002a874:	e8 33 fc ff ff       	call   c002a4ac <PCI::checkBus(unsigned char)>
c002a879:	83 c4 10             	add    esp,0x10
c002a87c:	83 fb 08             	cmp    ebx,0x8
c002a87f:	74 18                	je     c002a899 <PCI::detect()+0x55>
c002a881:	53                   	push   ebx
c002a882:	6a 00                	push   0x0
c002a884:	6a 00                	push   0x0
c002a886:	56                   	push   esi
c002a887:	e8 de f6 ff ff       	call   c0029f6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a88c:	83 c4 10             	add    esp,0x10
c002a88f:	0f b7 c0             	movzx  eax,ax
c002a892:	3d ff ff 00 00       	cmp    eax,0xffff
c002a897:	74 d6                	je     c002a86f <PCI::detect()+0x2b>
c002a899:	58                   	pop    eax
c002a89a:	5b                   	pop    ebx
c002a89b:	5e                   	pop    esi
c002a89c:	c3                   	ret    
c002a89d:	90                   	nop

c002a89e <IDE::close(int, int, void*)>:
c002a89e:	83 c8 ff             	or     eax,0xffffffff
c002a8a1:	c3                   	ret    

c002a8a2 <IDE::IDE()>:
c002a8a2:	83 ec 0c             	sub    esp,0xc
c002a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a8a9:	83 ec 08             	sub    esp,0x8
c002a8ac:	68 3c 33 03 c0       	push   0xc003333c
c002a8b1:	50                   	push   eax
c002a8b2:	e8 fd 0c ff ff       	call   c001b5b4 <HardDiskController::HardDiskController(char const*)>
c002a8b7:	83 c4 10             	add    esp,0x10
c002a8ba:	ba cc 33 03 c0       	mov    edx,0xc00333cc
c002a8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a8c3:	89 10                	mov    DWORD PTR [eax],edx
c002a8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a8c9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002a8d0:	90                   	nop
c002a8d1:	83 c4 0c             	add    esp,0xc
c002a8d4:	c3                   	ret    
c002a8d5:	90                   	nop

c002a8d6 <IDE::prepareInterrupt(unsigned char)>:
c002a8d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002a8db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a8df:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002a8e7:	c3                   	ret    

c002a8e8 <selectDrive(unsigned char, unsigned char)>:
c002a8e8:	c3                   	ret    
c002a8e9:	90                   	nop

c002a8ea <IDE::getBase(unsigned char)>:
c002a8ea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002a8ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a8f3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002a8fb:	c3                   	ret    

c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002a8fc:	55                   	push   ebp
c002a8fd:	57                   	push   edi
c002a8fe:	56                   	push   esi
c002a8ff:	53                   	push   ebx
c002a900:	83 ec 1c             	sub    esp,0x1c
c002a903:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002a907:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a90b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002a90f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002a913:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002a916:	80 f9 03             	cmp    cl,0x3
c002a919:	77 4f                	ja     c002a96a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002a91b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002a91f:	0f b6 f2             	movzx  esi,dl
c002a922:	0f b6 db             	movzx  ebx,bl
c002a925:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002a928:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002a92d:	80 ca 80             	or     dl,0x80
c002a930:	52                   	push   edx
c002a931:	6a 0c                	push   0xc
c002a933:	56                   	push   esi
c002a934:	57                   	push   edi
c002a935:	e8 c2 ff ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a93a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002a93f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a943:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002a947:	ee                   	out    dx,al
c002a948:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002a94d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002a951:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002a955:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002a95d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002a961:	83 c4 2c             	add    esp,0x2c
c002a964:	5b                   	pop    ebx
c002a965:	5e                   	pop    esi
c002a966:	5f                   	pop    edi
c002a967:	5d                   	pop    ebp
c002a968:	eb 92                	jmp    c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a96a:	0f b6 cb             	movzx  ecx,bl
c002a96d:	83 f9 07             	cmp    ecx,0x7
c002a970:	77 12                	ja     c002a984 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002a972:	0f b6 d2             	movzx  edx,dl
c002a975:	0f b6 db             	movzx  ebx,bl
c002a978:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002a980:	01 da                	add    edx,ebx
c002a982:	eb 2f                	jmp    c002a9b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002a984:	83 f9 0d             	cmp    ecx,0xd
c002a987:	77 13                	ja     c002a99c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002a989:	0f b6 d2             	movzx  edx,dl
c002a98c:	0f b6 db             	movzx  ebx,bl
c002a98f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002a996:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002a99a:	eb 17                	jmp    c002a9b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002a99c:	83 f9 15             	cmp    ecx,0x15
c002a99f:	77 13                	ja     c002a9b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002a9a1:	0f b6 d2             	movzx  edx,dl
c002a9a4:	0f b6 db             	movzx  ebx,bl
c002a9a7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002a9af:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002a9b3:	ee                   	out    dx,al
c002a9b4:	83 c4 1c             	add    esp,0x1c
c002a9b7:	5b                   	pop    ebx
c002a9b8:	5e                   	pop    esi
c002a9b9:	5f                   	pop    edi
c002a9ba:	5d                   	pop    ebp
c002a9bb:	c3                   	ret    

c002a9bc <IDE::read(unsigned char, unsigned char)>:
c002a9bc:	57                   	push   edi
c002a9bd:	56                   	push   esi
c002a9be:	53                   	push   ebx
c002a9bf:	83 ec 10             	sub    esp,0x10
c002a9c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a9c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a9ca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002a9ce:	8d 42 f8             	lea    eax,[edx-0x8]
c002a9d1:	3c 03                	cmp    al,0x3
c002a9d3:	77 48                	ja     c002aa1d <IDE::read(unsigned char, unsigned char)+0x61>
c002a9d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a9d9:	0f b6 f1             	movzx  esi,cl
c002a9dc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002a9df:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002a9e4:	0c 80                	or     al,0x80
c002a9e6:	50                   	push   eax
c002a9e7:	6a 0c                	push   0xc
c002a9e9:	56                   	push   esi
c002a9ea:	53                   	push   ebx
c002a9eb:	e8 0c ff ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a9f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a9f4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002a9f9:	0f b6 d2             	movzx  edx,dl
c002a9fc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002aa00:	ec                   	in     al,dx
c002aa01:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002aa05:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002aa0a:	52                   	push   edx
c002aa0b:	6a 0c                	push   0xc
c002aa0d:	56                   	push   esi
c002aa0e:	53                   	push   ebx
c002aa0f:	e8 e8 fe ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aa14:	83 c4 20             	add    esp,0x20
c002aa17:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002aa1b:	eb 4c                	jmp    c002aa69 <IDE::read(unsigned char, unsigned char)+0xad>
c002aa1d:	0f b6 f2             	movzx  esi,dl
c002aa20:	83 fe 07             	cmp    esi,0x7
c002aa23:	77 12                	ja     c002aa37 <IDE::read(unsigned char, unsigned char)+0x7b>
c002aa25:	0f b6 c9             	movzx  ecx,cl
c002aa28:	0f b6 d2             	movzx  edx,dl
c002aa2b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002aa33:	01 c2                	add    edx,eax
c002aa35:	eb 31                	jmp    c002aa68 <IDE::read(unsigned char, unsigned char)+0xac>
c002aa37:	83 fe 0d             	cmp    esi,0xd
c002aa3a:	77 13                	ja     c002aa4f <IDE::read(unsigned char, unsigned char)+0x93>
c002aa3c:	0f b6 c9             	movzx  ecx,cl
c002aa3f:	0f b6 d2             	movzx  edx,dl
c002aa42:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002aa49:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002aa4d:	eb 19                	jmp    c002aa68 <IDE::read(unsigned char, unsigned char)+0xac>
c002aa4f:	31 c0                	xor    eax,eax
c002aa51:	83 fe 15             	cmp    esi,0x15
c002aa54:	77 13                	ja     c002aa69 <IDE::read(unsigned char, unsigned char)+0xad>
c002aa56:	0f b6 c9             	movzx  ecx,cl
c002aa59:	0f b6 d2             	movzx  edx,dl
c002aa5c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002aa64:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002aa68:	ec                   	in     al,dx
c002aa69:	83 c4 10             	add    esp,0x10
c002aa6c:	5b                   	pop    ebx
c002aa6d:	5e                   	pop    esi
c002aa6e:	5f                   	pop    edi
c002aa6f:	c3                   	ret    

c002aa70 <IDE::waitInterrupt(unsigned char)>:
c002aa70:	55                   	push   ebp
c002aa71:	57                   	push   edi
c002aa72:	56                   	push   esi
c002aa73:	53                   	push   ebx
c002aa74:	31 db                	xor    ebx,ebx
c002aa76:	83 ec 0c             	sub    esp,0xc
c002aa79:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002aa7d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002aa82:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002aa8a:	89 e8                	mov    eax,ebp
c002aa8c:	84 c0                	test   al,al
c002aa8e:	75 30                	jne    c002aac0 <IDE::waitInterrupt(unsigned char)+0x50>
c002aa90:	50                   	push   eax
c002aa91:	6a 0c                	push   0xc
c002aa93:	56                   	push   esi
c002aa94:	57                   	push   edi
c002aa95:	e8 22 ff ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002aa9a:	83 c4 10             	add    esp,0x10
c002aa9d:	a8 01                	test   al,0x1
c002aa9f:	75 27                	jne    c002aac8 <IDE::waitInterrupt(unsigned char)+0x58>
c002aaa1:	f6 c3 04             	test   bl,0x4
c002aaa4:	75 12                	jne    c002aab8 <IDE::waitInterrupt(unsigned char)+0x48>
c002aaa6:	83 fb 32             	cmp    ebx,0x32
c002aaa9:	7e 0d                	jle    c002aab8 <IDE::waitInterrupt(unsigned char)+0x48>
c002aaab:	83 ec 0c             	sub    esp,0xc
c002aaae:	6a 64                	push   0x64
c002aab0:	e8 73 a4 ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002aab5:	83 c4 10             	add    esp,0x10
c002aab8:	83 fb 3c             	cmp    ebx,0x3c
c002aabb:	74 0b                	je     c002aac8 <IDE::waitInterrupt(unsigned char)+0x58>
c002aabd:	43                   	inc    ebx
c002aabe:	eb c2                	jmp    c002aa82 <IDE::waitInterrupt(unsigned char)+0x12>
c002aac0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002aac8:	83 c4 0c             	add    esp,0xc
c002aacb:	89 e8                	mov    eax,ebp
c002aacd:	5b                   	pop    ebx
c002aace:	5e                   	pop    esi
c002aacf:	5f                   	pop    edi
c002aad0:	5d                   	pop    ebp
c002aad1:	c3                   	ret    

c002aad2 <ideChannel0IRQHandler(regs*, void*)>:
c002aad2:	83 ec 10             	sub    esp,0x10
c002aad5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aad9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002aae0:	6a 07                	push   0x7
c002aae2:	6a 00                	push   0x0
c002aae4:	50                   	push   eax
c002aae5:	e8 d2 fe ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002aaea:	83 c4 1c             	add    esp,0x1c
c002aaed:	c3                   	ret    

c002aaee <ideChannel1IRQHandler(regs*, void*)>:
c002aaee:	83 ec 10             	sub    esp,0x10
c002aaf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aaf5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002aafc:	6a 07                	push   0x7
c002aafe:	6a 01                	push   0x1
c002ab00:	50                   	push   eax
c002ab01:	e8 b6 fe ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002ab06:	83 c4 1c             	add    esp,0x1c
c002ab09:	c3                   	ret    

c002ab0a <IDE::enableIRQs(unsigned char, bool)>:
c002ab0a:	57                   	push   edi
c002ab0b:	b8 02 00 00 00       	mov    eax,0x2
c002ab10:	56                   	push   esi
c002ab11:	53                   	push   ebx
c002ab12:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ab17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ab1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ab1f:	74 02                	je     c002ab23 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ab21:	31 c0                	xor    eax,eax
c002ab23:	0f b6 db             	movzx  ebx,bl
c002ab26:	bf 04 00 00 00       	mov    edi,0x4
c002ab2b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002ab32:	50                   	push   eax
c002ab33:	6a 0c                	push   0xc
c002ab35:	53                   	push   ebx
c002ab36:	56                   	push   esi
c002ab37:	e8 c0 fd ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ab3c:	83 c4 10             	add    esp,0x10
c002ab3f:	50                   	push   eax
c002ab40:	6a 0c                	push   0xc
c002ab42:	53                   	push   ebx
c002ab43:	56                   	push   esi
c002ab44:	e8 73 fe ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002ab49:	83 c4 10             	add    esp,0x10
c002ab4c:	4f                   	dec    edi
c002ab4d:	75 f0                	jne    c002ab3f <IDE::enableIRQs(unsigned char, bool)+0x35>
c002ab4f:	5b                   	pop    ebx
c002ab50:	5e                   	pop    esi
c002ab51:	5f                   	pop    edi
c002ab52:	c3                   	ret    
c002ab53:	90                   	nop

c002ab54 <IDE::open(int, int, void*)>:
c002ab54:	55                   	push   ebp
c002ab55:	57                   	push   edi
c002ab56:	56                   	push   esi
c002ab57:	53                   	push   ebx
c002ab58:	83 ec 1c             	sub    esp,0x1c
c002ab5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ab5f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002ab66:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002ab6f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002ab78:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002ab7f:	0f 85 da 02 00 00    	jne    c002ae5f <IDE::open(int, int, void*)+0x30b>
c002ab85:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002ab8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002ab8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ab93:	83 e0 7f             	and    eax,0x7f
c002ab96:	83 f8 05             	cmp    eax,0x5
c002ab99:	74 05                	je     c002aba0 <IDE::open(int, int, void*)+0x4c>
c002ab9b:	83 f8 0f             	cmp    eax,0xf
c002ab9e:	75 32                	jne    c002abd2 <IDE::open(int, int, void*)+0x7e>
c002aba0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002aba6:	83 e0 fc             	and    eax,0xfffffffc
c002aba9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002abb0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002abb6:	83 e0 fc             	and    eax,0xfffffffc
c002abb9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002abc0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002abc6:	83 e0 fc             	and    eax,0xfffffffc
c002abc9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002abd0:	eb 14                	jmp    c002abe6 <IDE::open(int, int, void*)+0x92>
c002abd2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002abdc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002abe6:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002abed:	bf f8 0c 00 00       	mov    edi,0xcf8
c002abf2:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002abf9:	89 fa                	mov    edx,edi
c002abfb:	89 f1                	mov    ecx,esi
c002abfd:	c1 e1 10             	shl    ecx,0x10
c002ac00:	89 e8                	mov    eax,ebp
c002ac02:	c1 e0 0b             	shl    eax,0xb
c002ac05:	09 c1                	or     ecx,eax
c002ac07:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002ac0e:	c1 e0 08             	shl    eax,0x8
c002ac11:	09 c1                	or     ecx,eax
c002ac13:	89 c8                	mov    eax,ecx
c002ac15:	0d 08 00 00 80       	or     eax,0x80000008
c002ac1a:	ef                   	out    dx,eax
c002ac1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ac20:	ed                   	in     eax,dx
c002ac21:	c1 e8 10             	shr    eax,0x10
c002ac24:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac29:	0f 84 f9 00 00 00    	je     c002ad28 <IDE::open(int, int, void*)+0x1d4>
c002ac2f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002ac35:	89 fa                	mov    edx,edi
c002ac37:	89 c8                	mov    eax,ecx
c002ac39:	ef                   	out    dx,eax
c002ac3a:	b0 fe                	mov    al,0xfe
c002ac3c:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ac41:	ee                   	out    dx,al
c002ac42:	89 c8                	mov    eax,ecx
c002ac44:	89 fa                	mov    edx,edi
c002ac46:	ef                   	out    dx,eax
c002ac47:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ac4c:	ed                   	in     eax,dx
c002ac4d:	3c fe                	cmp    al,0xfe
c002ac4f:	0f 85 a4 00 00 00    	jne    c002acf9 <IDE::open(int, int, void*)+0x1a5>
c002ac55:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002ac5b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002ac62:	74 30                	je     c002ac94 <IDE::open(int, int, void*)+0x140>
c002ac64:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002ac6a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002ac6e:	83 ec 0c             	sub    esp,0xc
c002ac71:	40                   	inc    eax
c002ac72:	0f b6 c0             	movzx  eax,al
c002ac75:	50                   	push   eax
c002ac76:	55                   	push   ebp
c002ac77:	56                   	push   esi
c002ac78:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002ac7e:	51                   	push   ecx
c002ac7f:	e8 7c 37 ff ff       	call   c001e400 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002ac84:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002ac89:	83 c4 1c             	add    esp,0x1c
c002ac8c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002ac92:	eb 0a                	jmp    c002ac9e <IDE::open(int, int, void*)+0x14a>
c002ac94:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002ac9e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002aca5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002acaa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002acb1:	89 ea                	mov    edx,ebp
c002acb3:	c1 e1 10             	shl    ecx,0x10
c002acb6:	c1 e0 08             	shl    eax,0x8
c002acb9:	09 c1                	or     ecx,eax
c002acbb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002acc2:	c1 e0 0b             	shl    eax,0xb
c002acc5:	09 c1                	or     ecx,eax
c002acc7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002accd:	89 c8                	mov    eax,ecx
c002accf:	ef                   	out    dx,eax
c002acd0:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002acd6:	be fc 0c 00 00       	mov    esi,0xcfc
c002acdb:	89 f2                	mov    edx,esi
c002acdd:	89 f8                	mov    eax,edi
c002acdf:	ee                   	out    dx,al
c002ace0:	89 c8                	mov    eax,ecx
c002ace2:	89 ea                	mov    edx,ebp
c002ace4:	ef                   	out    dx,eax
c002ace5:	89 f2                	mov    edx,esi
c002ace7:	ed                   	in     eax,dx
c002ace8:	0f b6 c0             	movzx  eax,al
c002aceb:	39 f8                	cmp    eax,edi
c002aced:	74 49                	je     c002ad38 <IDE::open(int, int, void*)+0x1e4>
c002acef:	83 ec 0c             	sub    esp,0xc
c002acf2:	68 54 33 03 c0       	push   0xc0033354
c002acf7:	eb 37                	jmp    c002ad30 <IDE::open(int, int, void*)+0x1dc>
c002acf9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002ad02:	75 1a                	jne    c002ad1e <IDE::open(int, int, void*)+0x1ca>
c002ad04:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002ad09:	3d 8a 00 00 00       	cmp    eax,0x8a
c002ad0e:	74 05                	je     c002ad15 <IDE::open(int, int, void*)+0x1c1>
c002ad10:	83 c0 80             	add    eax,0xffffff80
c002ad13:	75 09                	jne    c002ad1e <IDE::open(int, int, void*)+0x1ca>
c002ad15:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002ad1c:	eb 1a                	jmp    c002ad38 <IDE::open(int, int, void*)+0x1e4>
c002ad1e:	83 ec 0c             	sub    esp,0xc
c002ad21:	68 5c 33 03 c0       	push   0xc003335c
c002ad26:	eb 08                	jmp    c002ad30 <IDE::open(int, int, void*)+0x1dc>
c002ad28:	83 ec 0c             	sub    esp,0xc
c002ad2b:	68 8d 33 03 c0       	push   0xc003338d
c002ad30:	e8 3e 53 ff ff       	call   c0020073 <KePanic(char const*)>
c002ad35:	83 c4 10             	add    esp,0x10
c002ad38:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002ad3f:	74 1a                	je     c002ad5b <IDE::open(int, int, void*)+0x207>
c002ad41:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002ad47:	83 e0 fc             	and    eax,0xfffffffc
c002ad4a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002ad51:	83 c0 08             	add    eax,0x8
c002ad54:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002ad5b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002ad61:	89 c2                	mov    edx,eax
c002ad63:	83 e2 0f             	and    edx,0xf
c002ad66:	83 fa 08             	cmp    edx,0x8
c002ad69:	75 0a                	jne    c002ad75 <IDE::open(int, int, void*)+0x221>
c002ad6b:	83 e8 02             	sub    eax,0x2
c002ad6e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ad75:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002ad7b:	89 c2                	mov    edx,eax
c002ad7d:	83 e2 0f             	and    edx,0xf
c002ad80:	83 fa 08             	cmp    edx,0x8
c002ad83:	75 0a                	jne    c002ad8f <IDE::open(int, int, void*)+0x23b>
c002ad85:	83 e8 02             	sub    eax,0x2
c002ad88:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002ad8f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002ad96:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002ad9d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002ada0:	89 d0                	mov    eax,edx
c002ada2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002ada6:	8d 7a 01             	lea    edi,[edx+0x1]
c002ada9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002adad:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002adb1:	83 e1 3f             	and    ecx,0x3f
c002adb4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002adb8:	89 f9                	mov    ecx,edi
c002adba:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002adc1:	8d 78 02             	lea    edi,[eax+0x2]
c002adc4:	0f b6 c9             	movzx  ecx,cl
c002adc7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002adca:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002adce:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002add2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002add6:	83 e2 3f             	and    edx,0x3f
c002add9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002addd:	89 f9                	mov    ecx,edi
c002addf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002ade5:	8d 78 03             	lea    edi,[eax+0x3]
c002ade8:	0f b6 d1             	movzx  edx,cl
c002adeb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002adee:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002adf2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002adf6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002adfa:	83 e1 3f             	and    ecx,0x3f
c002adfd:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002ae01:	89 f9                	mov    ecx,edi
c002ae03:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002ae09:	8d 78 04             	lea    edi,[eax+0x4]
c002ae0c:	0f b6 c9             	movzx  ecx,cl
c002ae0f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002ae12:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002ae16:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002ae1a:	89 fa                	mov    edx,edi
c002ae1c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002ae22:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002ae26:	83 e2 3f             	and    edx,0x3f
c002ae29:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002ae2d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002ae34:	66 85 f6             	test   si,si
c002ae37:	74 65                	je     c002ae9e <IDE::open(int, int, void*)+0x34a>
c002ae39:	89 f9                	mov    ecx,edi
c002ae3b:	83 c0 05             	add    eax,0x5
c002ae3e:	0f b6 d1             	movzx  edx,cl
c002ae41:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002ae44:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002ae48:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002ae4c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002ae52:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002ae56:	83 e0 3f             	and    eax,0x3f
c002ae59:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002ae5d:	eb 3f                	jmp    c002ae9e <IDE::open(int, int, void*)+0x34a>
c002ae5f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002ae66:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002ae6c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002ae73:	05 06 02 00 00       	add    eax,0x206
c002ae78:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ae7f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002ae86:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002ae8d:	05 06 02 00 00       	add    eax,0x206
c002ae92:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002ae99:	e9 bd fe ff ff       	jmp    c002ad5b <IDE::open(int, int, void*)+0x207>
c002ae9e:	50                   	push   eax
c002ae9f:	50                   	push   eax
c002aea0:	6a 00                	push   0x0
c002aea2:	53                   	push   ebx
c002aea3:	e8 2e fa ff ff       	call   c002a8d6 <IDE::prepareInterrupt(unsigned char)>
c002aea8:	5a                   	pop    edx
c002aea9:	59                   	pop    ecx
c002aeaa:	6a 01                	push   0x1
c002aeac:	53                   	push   ebx
c002aead:	e8 24 fa ff ff       	call   c002a8d6 <IDE::prepareInterrupt(unsigned char)>
c002aeb2:	83 c4 0c             	add    esp,0xc
c002aeb5:	6a 00                	push   0x0
c002aeb7:	6a 00                	push   0x0
c002aeb9:	53                   	push   ebx
c002aeba:	e8 4b fc ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002aebf:	83 c4 0c             	add    esp,0xc
c002aec2:	6a 00                	push   0x0
c002aec4:	6a 01                	push   0x1
c002aec6:	53                   	push   ebx
c002aec7:	e8 3e fc ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002aecc:	83 c4 10             	add    esp,0x10
c002aecf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002aed6:	74 34                	je     c002af0c <IDE::open(int, int, void*)+0x3b8>
c002aed8:	83 ec 0c             	sub    esp,0xc
c002aedb:	53                   	push   ebx
c002aedc:	6a 01                	push   0x1
c002aede:	68 d2 aa 02 c0       	push   0xc002aad2
c002aee3:	6a 0e                	push   0xe
c002aee5:	53                   	push   ebx
c002aee6:	e8 1d 03 ff ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002aeeb:	83 c4 14             	add    esp,0x14
c002aeee:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002aef4:	53                   	push   ebx
c002aef5:	6a 01                	push   0x1
c002aef7:	68 ee aa 02 c0       	push   0xc002aaee
c002aefc:	6a 0f                	push   0xf
c002aefe:	53                   	push   ebx
c002aeff:	e8 04 03 ff ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002af04:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002af0a:	eb 38                	jmp    c002af44 <IDE::open(int, int, void*)+0x3f0>
c002af0c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002af16:	83 ec 0c             	sub    esp,0xc
c002af19:	53                   	push   ebx
c002af1a:	6a 00                	push   0x0
c002af1c:	68 d2 aa 02 c0       	push   0xc002aad2
c002af21:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002af27:	53                   	push   ebx
c002af28:	e8 db 02 ff ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002af2d:	83 c4 14             	add    esp,0x14
c002af30:	53                   	push   ebx
c002af31:	6a 00                	push   0x0
c002af33:	68 ee aa 02 c0       	push   0xc002aaee
c002af38:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002af3e:	53                   	push   ebx
c002af3f:	e8 c4 02 ff ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002af44:	8b 03                	mov    eax,DWORD PTR [ebx]
c002af46:	83 c4 20             	add    esp,0x20
c002af49:	83 ec 0c             	sub    esp,0xc
c002af4c:	53                   	push   ebx
c002af4d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002af50:	83 c4 0c             	add    esp,0xc
c002af53:	6a 07                	push   0x7
c002af55:	6a 00                	push   0x0
c002af57:	53                   	push   ebx
c002af58:	e8 5f fa ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002af5d:	83 c4 0c             	add    esp,0xc
c002af60:	6a 07                	push   0x7
c002af62:	6a 01                	push   0x1
c002af64:	53                   	push   ebx
c002af65:	e8 52 fa ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002af6a:	83 c4 0c             	add    esp,0xc
c002af6d:	6a 01                	push   0x1
c002af6f:	6a 00                	push   0x0
c002af71:	53                   	push   ebx
c002af72:	e8 93 fb ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002af77:	83 c4 0c             	add    esp,0xc
c002af7a:	6a 01                	push   0x1
c002af7c:	6a 01                	push   0x1
c002af7e:	53                   	push   ebx
c002af7f:	e8 86 fb ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002af84:	83 c4 2c             	add    esp,0x2c
c002af87:	31 c0                	xor    eax,eax
c002af89:	5b                   	pop    ebx
c002af8a:	5e                   	pop    esi
c002af8b:	5f                   	pop    edi
c002af8c:	5d                   	pop    ebp
c002af8d:	c3                   	ret    

c002af8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002af8e:	55                   	push   ebp
c002af8f:	57                   	push   edi
c002af90:	56                   	push   esi
c002af91:	53                   	push   ebx
c002af92:	83 ec 1c             	sub    esp,0x1c
c002af95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002af99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002af9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002afa1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002afa5:	8d 42 f8             	lea    eax,[edx-0x8]
c002afa8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002afac:	3c 03                	cmp    al,0x3
c002afae:	77 5a                	ja     c002b00a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002afb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002afb4:	0f b6 db             	movzx  ebx,bl
c002afb7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002afbb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002afbe:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002afc3:	0c 80                	or     al,0x80
c002afc5:	50                   	push   eax
c002afc6:	6a 0c                	push   0xc
c002afc8:	53                   	push   ebx
c002afc9:	56                   	push   esi
c002afca:	e8 2d f9 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002afcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002afd3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002afd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002afdc:	0f b6 d2             	movzx  edx,dl
c002afdf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002afe3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002afe5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002afea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002afee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002aff2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002affa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002affe:	83 c4 2c             	add    esp,0x2c
c002b001:	5b                   	pop    ebx
c002b002:	5e                   	pop    esi
c002b003:	5f                   	pop    edi
c002b004:	5d                   	pop    ebp
c002b005:	e9 f2 f8 ff ff       	jmp    c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b00a:	0f b6 c2             	movzx  eax,dl
c002b00d:	83 f8 07             	cmp    eax,0x7
c002b010:	77 12                	ja     c002b024 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b012:	0f b6 db             	movzx  ebx,bl
c002b015:	0f b6 c2             	movzx  eax,dl
c002b018:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b020:	01 c2                	add    edx,eax
c002b022:	eb 2f                	jmp    c002b053 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b024:	83 f8 0d             	cmp    eax,0xd
c002b027:	77 13                	ja     c002b03c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b029:	0f b6 db             	movzx  ebx,bl
c002b02c:	0f b6 d2             	movzx  edx,dl
c002b02f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b036:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b03a:	eb 17                	jmp    c002b053 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b03c:	83 f8 15             	cmp    eax,0x15
c002b03f:	77 14                	ja     c002b055 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b041:	0f b6 db             	movzx  ebx,bl
c002b044:	0f b6 d2             	movzx  edx,dl
c002b047:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b04f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b053:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b055:	83 c4 1c             	add    esp,0x1c
c002b058:	5b                   	pop    ebx
c002b059:	5e                   	pop    esi
c002b05a:	5f                   	pop    edi
c002b05b:	5d                   	pop    ebp
c002b05c:	c3                   	ret    
c002b05d:	90                   	nop

c002b05e <IDE::detect()>:
c002b05e:	55                   	push   ebp
c002b05f:	57                   	push   edi
c002b060:	56                   	push   esi
c002b061:	53                   	push   ebx
c002b062:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b068:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b06f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b076:	0f 85 9e 02 00 00    	jne    c002b31a <IDE::detect()+0x2bc>
c002b07c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b083:	31 f6                	xor    esi,esi
c002b085:	31 ff                	xor    edi,edi
c002b087:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b08f:	89 f8                	mov    eax,edi
c002b091:	c1 e0 06             	shl    eax,0x6
c002b094:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b09c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b0a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b0a8:	c1 e0 04             	shl    eax,0x4
c002b0ab:	83 c8 a0             	or     eax,0xffffffa0
c002b0ae:	0f b6 c0             	movzx  eax,al
c002b0b1:	50                   	push   eax
c002b0b2:	6a 06                	push   0x6
c002b0b4:	56                   	push   esi
c002b0b5:	53                   	push   ebx
c002b0b6:	e8 41 f8 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b0bb:	83 c4 0c             	add    esp,0xc
c002b0be:	6a 0c                	push   0xc
c002b0c0:	56                   	push   esi
c002b0c1:	53                   	push   ebx
c002b0c2:	e8 f5 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b0c7:	83 c4 0c             	add    esp,0xc
c002b0ca:	6a 0c                	push   0xc
c002b0cc:	56                   	push   esi
c002b0cd:	53                   	push   ebx
c002b0ce:	e8 e9 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b0d3:	83 c4 0c             	add    esp,0xc
c002b0d6:	6a 0c                	push   0xc
c002b0d8:	56                   	push   esi
c002b0d9:	53                   	push   ebx
c002b0da:	e8 dd f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b0df:	83 c4 0c             	add    esp,0xc
c002b0e2:	6a 0c                	push   0xc
c002b0e4:	56                   	push   esi
c002b0e5:	53                   	push   ebx
c002b0e6:	e8 d1 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b0eb:	68 ec 00 00 00       	push   0xec
c002b0f0:	6a 07                	push   0x7
c002b0f2:	56                   	push   esi
c002b0f3:	53                   	push   ebx
c002b0f4:	e8 03 f8 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b0f9:	83 c4 1c             	add    esp,0x1c
c002b0fc:	6a 0c                	push   0xc
c002b0fe:	56                   	push   esi
c002b0ff:	53                   	push   ebx
c002b100:	e8 b7 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b105:	83 c4 0c             	add    esp,0xc
c002b108:	6a 0c                	push   0xc
c002b10a:	56                   	push   esi
c002b10b:	53                   	push   ebx
c002b10c:	e8 ab f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b111:	83 c4 0c             	add    esp,0xc
c002b114:	6a 0c                	push   0xc
c002b116:	56                   	push   esi
c002b117:	53                   	push   ebx
c002b118:	e8 9f f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b11d:	83 c4 0c             	add    esp,0xc
c002b120:	6a 0c                	push   0xc
c002b122:	56                   	push   esi
c002b123:	53                   	push   ebx
c002b124:	e8 93 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b129:	83 c4 0c             	add    esp,0xc
c002b12c:	6a 0c                	push   0xc
c002b12e:	56                   	push   esi
c002b12f:	53                   	push   ebx
c002b130:	e8 87 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b135:	83 c4 10             	add    esp,0x10
c002b138:	84 c0                	test   al,al
c002b13a:	0f 84 61 01 00 00    	je     c002b2a1 <IDE::detect()+0x243>
c002b140:	31 ed                	xor    ebp,ebp
c002b142:	50                   	push   eax
c002b143:	6a 0c                	push   0xc
c002b145:	56                   	push   esi
c002b146:	53                   	push   ebx
c002b147:	e8 70 f8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b14c:	83 c4 10             	add    esp,0x10
c002b14f:	a8 01                	test   al,0x1
c002b151:	0f 85 6b 01 00 00    	jne    c002b2c2 <IDE::detect()+0x264>
c002b157:	a8 80                	test   al,0x80
c002b159:	75 04                	jne    c002b15f <IDE::detect()+0x101>
c002b15b:	a8 08                	test   al,0x8
c002b15d:	75 23                	jne    c002b182 <IDE::detect()+0x124>
c002b15f:	45                   	inc    ebp
c002b160:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b166:	7e da                	jle    c002b142 <IDE::detect()+0xe4>
c002b168:	83 ec 0c             	sub    esp,0xc
c002b16b:	6a 32                	push   0x32
c002b16d:	e8 b6 9d ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002b172:	83 c4 10             	add    esp,0x10
c002b175:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b17b:	75 c5                	jne    c002b142 <IDE::detect()+0xe4>
c002b17d:	e9 40 01 00 00       	jmp    c002b2c2 <IDE::detect()+0x264>
c002b182:	31 c9                	xor    ecx,ecx
c002b184:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b188:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b18c:	83 ec 0c             	sub    esp,0xc
c002b18f:	68 80 00 00 00       	push   0x80
c002b194:	55                   	push   ebp
c002b195:	6a 00                	push   0x0
c002b197:	56                   	push   esi
c002b198:	53                   	push   ebx
c002b199:	e8 f0 fd ff ff       	call   c002af8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b19e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b1a3:	89 f8                	mov    eax,edi
c002b1a5:	c1 e0 06             	shl    eax,0x6
c002b1a8:	01 d8                	add    eax,ebx
c002b1aa:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b1b1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b1b8:	89 d1                	mov    ecx,edx
c002b1ba:	89 f2                	mov    edx,esi
c002b1bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b1c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b1c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b1cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b1d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b1d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b1df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b1e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b1ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b1f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b1fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b201:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b205:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b209:	83 c4 20             	add    esp,0x20
c002b20c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b20f:	83 c5 02             	add    ebp,0x2
c002b212:	83 c0 02             	add    eax,0x2
c002b215:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b21b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b21e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b224:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b228:	75 e2                	jne    c002b20c <IDE::detect()+0x1ae>
c002b22a:	89 f8                	mov    eax,edi
c002b22c:	c1 e0 06             	shl    eax,0x6
c002b22f:	01 d8                	add    eax,ebx
c002b231:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b238:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b23f:	c1 ea 09             	shr    edx,0x9
c002b242:	83 e2 01             	and    edx,0x1
c002b245:	80 e1 01             	and    cl,0x1
c002b248:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b24e:	75 22                	jne    c002b272 <IDE::detect()+0x214>
c002b250:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b257:	74 47                	je     c002b2a0 <IDE::detect()+0x242>
c002b259:	83 ec 0c             	sub    esp,0xc
c002b25c:	68 7c 01 00 00       	push   0x17c
c002b261:	e8 29 b1 fe ff       	call   c001638f <malloc>
c002b266:	89 04 24             	mov    DWORD PTR [esp],eax
c002b269:	89 c5                	mov    ebp,eax
c002b26b:	e8 2a 05 00 00       	call   c002b79a <ATA::ATA()>
c002b270:	eb 17                	jmp    c002b289 <IDE::detect()+0x22b>
c002b272:	83 ec 0c             	sub    esp,0xc
c002b275:	68 84 01 00 00       	push   0x184
c002b27a:	e8 10 b1 fe ff       	call   c001638f <malloc>
c002b27f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b282:	89 c5                	mov    ebp,eax
c002b284:	e8 83 0e 00 00       	call   c002c10c <ATAPI::ATAPI()>
c002b289:	5a                   	pop    edx
c002b28a:	59                   	pop    ecx
c002b28b:	55                   	push   ebp
c002b28c:	53                   	push   ebx
c002b28d:	e8 ca ff fe ff       	call   c001b25c <Device::addChild(Device*)>
c002b292:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b295:	53                   	push   ebx
c002b296:	57                   	push   edi
c002b297:	6a 00                	push   0x0
c002b299:	55                   	push   ebp
c002b29a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b29d:	83 c4 20             	add    esp,0x20
c002b2a0:	47                   	inc    edi
c002b2a1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b2a6:	74 0d                	je     c002b2b5 <IDE::detect()+0x257>
c002b2a8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b2b0:	e9 da fd ff ff       	jmp    c002b08f <IDE::detect()+0x31>
c002b2b5:	4e                   	dec    esi
c002b2b6:	74 62                	je     c002b31a <IDE::detect()+0x2bc>
c002b2b8:	be 01 00 00 00       	mov    esi,0x1
c002b2bd:	e9 c5 fd ff ff       	jmp    c002b087 <IDE::detect()+0x29>
c002b2c2:	50                   	push   eax
c002b2c3:	6a 04                	push   0x4
c002b2c5:	56                   	push   esi
c002b2c6:	53                   	push   ebx
c002b2c7:	e8 f0 f6 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b2cc:	83 c4 0c             	add    esp,0xc
c002b2cf:	6a 05                	push   0x5
c002b2d1:	56                   	push   esi
c002b2d2:	53                   	push   ebx
c002b2d3:	89 c5                	mov    ebp,eax
c002b2d5:	e8 e2 f6 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b2da:	89 e9                	mov    ecx,ebp
c002b2dc:	83 c4 10             	add    esp,0x10
c002b2df:	0f b6 e9             	movzx  ebp,cl
c002b2e2:	83 fd 14             	cmp    ebp,0x14
c002b2e5:	74 2d                	je     c002b314 <IDE::detect()+0x2b6>
c002b2e7:	83 fd 69             	cmp    ebp,0x69
c002b2ea:	75 b5                	jne    c002b2a1 <IDE::detect()+0x243>
c002b2ec:	3c 96                	cmp    al,0x96
c002b2ee:	75 b1                	jne    c002b2a1 <IDE::detect()+0x243>
c002b2f0:	68 a1 00 00 00       	push   0xa1
c002b2f5:	6a 07                	push   0x7
c002b2f7:	56                   	push   esi
c002b2f8:	53                   	push   ebx
c002b2f9:	e8 fe f5 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2fe:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b305:	e8 1e 9c ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002b30a:	83 c4 10             	add    esp,0x10
c002b30d:	b1 01                	mov    cl,0x1
c002b30f:	e9 70 fe ff ff       	jmp    c002b184 <IDE::detect()+0x126>
c002b314:	3c eb                	cmp    al,0xeb
c002b316:	75 cf                	jne    c002b2e7 <IDE::detect()+0x289>
c002b318:	eb d6                	jmp    c002b2f0 <IDE::detect()+0x292>
c002b31a:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b320:	5b                   	pop    ebx
c002b321:	5e                   	pop    esi
c002b322:	5f                   	pop    edi
c002b323:	5d                   	pop    ebp
c002b324:	c3                   	ret    
c002b325:	90                   	nop

c002b326 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b326:	55                   	push   ebp
c002b327:	57                   	push   edi
c002b328:	56                   	push   esi
c002b329:	53                   	push   ebx
c002b32a:	83 ec 1c             	sub    esp,0x1c
c002b32d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b331:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b335:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b339:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b33d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b341:	88 c3                	mov    bl,al
c002b343:	25 ff 00 00 00       	and    eax,0xff
c002b348:	0f 84 88 00 00 00    	je     c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b34e:	83 ec 0c             	sub    esp,0xc
c002b351:	89 c7                	mov    edi,eax
c002b353:	68 b7 33 03 c0       	push   0xc00333b7
c002b358:	e8 69 de fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002b35d:	83 c4 10             	add    esp,0x10
c002b360:	83 ff 01             	cmp    edi,0x1
c002b363:	74 6b                	je     c002b3d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b365:	83 ff 02             	cmp    edi,0x2
c002b368:	75 58                	jne    c002b3c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b36a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b36f:	50                   	push   eax
c002b370:	6a 01                	push   0x1
c002b372:	01 ff                	add    edi,edi
c002b374:	09 fe                	or     esi,edi
c002b376:	89 f0                	mov    eax,esi
c002b378:	0f b6 f0             	movzx  esi,al
c002b37b:	c1 e6 06             	shl    esi,0x6
c002b37e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b386:	50                   	push   eax
c002b387:	55                   	push   ebp
c002b388:	e8 2f f6 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b38d:	83 c4 10             	add    esp,0x10
c002b390:	a8 01                	test   al,0x1
c002b392:	74 02                	je     c002b396 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b394:	b3 07                	mov    bl,0x7
c002b396:	a8 02                	test   al,0x2
c002b398:	74 02                	je     c002b39c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b39a:	b3 03                	mov    bl,0x3
c002b39c:	a8 04                	test   al,0x4
c002b39e:	74 02                	je     c002b3a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b3a0:	b3 14                	mov    bl,0x14
c002b3a2:	a8 08                	test   al,0x8
c002b3a4:	74 02                	je     c002b3a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b3a6:	b3 03                	mov    bl,0x3
c002b3a8:	a8 10                	test   al,0x10
c002b3aa:	74 02                	je     c002b3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b3ac:	b3 15                	mov    bl,0x15
c002b3ae:	a8 20                	test   al,0x20
c002b3b0:	74 02                	je     c002b3b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b3b2:	b3 03                	mov    bl,0x3
c002b3b4:	a8 40                	test   al,0x40
c002b3b6:	74 02                	je     c002b3ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b3b8:	b3 16                	mov    bl,0x16
c002b3ba:	a8 80                	test   al,0x80
c002b3bc:	74 18                	je     c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b3be:	b3 0d                	mov    bl,0xd
c002b3c0:	eb 14                	jmp    c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b3c2:	83 ff 03             	cmp    edi,0x3
c002b3c5:	74 0d                	je     c002b3d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b3c7:	83 ff 04             	cmp    edi,0x4
c002b3ca:	75 0a                	jne    c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b3cc:	b3 08                	mov    bl,0x8
c002b3ce:	eb 06                	jmp    c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b3d0:	b3 13                	mov    bl,0x13
c002b3d2:	eb 02                	jmp    c002b3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b3d4:	b3 17                	mov    bl,0x17
c002b3d6:	83 c4 1c             	add    esp,0x1c
c002b3d9:	88 d8                	mov    al,bl
c002b3db:	5b                   	pop    ebx
c002b3dc:	5e                   	pop    esi
c002b3dd:	5f                   	pop    edi
c002b3de:	5d                   	pop    ebp
c002b3df:	c3                   	ret    

c002b3e0 <IDE::polling(unsigned char, unsigned int)>:
c002b3e0:	57                   	push   edi
c002b3e1:	56                   	push   esi
c002b3e2:	53                   	push   ebx
c002b3e3:	bb 04 00 00 00       	mov    ebx,0x4
c002b3e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b3ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b3f1:	52                   	push   edx
c002b3f2:	6a 0c                	push   0xc
c002b3f4:	56                   	push   esi
c002b3f5:	57                   	push   edi
c002b3f6:	e8 c1 f5 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b3fb:	83 c4 10             	add    esp,0x10
c002b3fe:	4b                   	dec    ebx
c002b3ff:	75 f0                	jne    c002b3f1 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b401:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b406:	50                   	push   eax
c002b407:	6a 0c                	push   0xc
c002b409:	56                   	push   esi
c002b40a:	57                   	push   edi
c002b40b:	e8 ac f5 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b410:	83 c4 10             	add    esp,0x10
c002b413:	a8 01                	test   al,0x1
c002b415:	75 17                	jne    c002b42e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b417:	a8 20                	test   al,0x20
c002b419:	75 0f                	jne    c002b42a <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b41b:	4b                   	dec    ebx
c002b41c:	74 10                	je     c002b42e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b41e:	a8 80                	test   al,0x80
c002b420:	75 e4                	jne    c002b406 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b422:	a8 08                	test   al,0x8
c002b424:	74 e0                	je     c002b406 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b426:	31 c0                	xor    eax,eax
c002b428:	eb 06                	jmp    c002b430 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b42a:	b0 01                	mov    al,0x1
c002b42c:	eb 02                	jmp    c002b430 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b42e:	b0 02                	mov    al,0x2
c002b430:	5b                   	pop    ebx
c002b431:	5e                   	pop    esi
c002b432:	5f                   	pop    edi
c002b433:	c3                   	ret    

c002b434 <SATABus::close(int, int, void*)>:
c002b434:	31 c0                	xor    eax,eax
c002b436:	c3                   	ret    
c002b437:	90                   	nop

c002b438 <SATABus::detect()>:
c002b438:	c3                   	ret    
c002b439:	90                   	nop

c002b43a <SATABus::SATABus()>:
c002b43a:	83 ec 0c             	sub    esp,0xc
c002b43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b441:	83 ec 08             	sub    esp,0x8
c002b444:	68 f0 33 03 c0       	push   0xc00333f0
c002b449:	50                   	push   eax
c002b44a:	e8 65 01 ff ff       	call   c001b5b4 <HardDiskController::HardDiskController(char const*)>
c002b44f:	83 c4 10             	add    esp,0x10
c002b452:	ba 1c 34 03 c0       	mov    edx,0xc003341c
c002b457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b45b:	89 10                	mov    DWORD PTR [eax],edx
c002b45d:	83 ec 0c             	sub    esp,0xc
c002b460:	6a 50                	push   0x50
c002b462:	e8 06 b3 fe ff       	call   c001676d <Phys::allocateContiguousPages(int)>
c002b467:	83 c4 10             	add    esp,0x10
c002b46a:	89 c2                	mov    edx,eax
c002b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b470:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b476:	83 ec 0c             	sub    esp,0xc
c002b479:	6a 50                	push   0x50
c002b47b:	e8 31 ca fe ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c002b480:	83 c4 10             	add    esp,0x10
c002b483:	89 c2                	mov    edx,eax
c002b485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b489:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b48f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b494:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b498:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b49e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b4a2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b4a8:	83 ec 0c             	sub    esp,0xc
c002b4ab:	6a 03                	push   0x3
c002b4ad:	6a 50                	push   0x50
c002b4af:	51                   	push   ecx
c002b4b0:	52                   	push   edx
c002b4b1:	50                   	push   eax
c002b4b2:	e8 0d d3 fe ff       	call   c00187c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b4b7:	83 c4 20             	add    esp,0x20
c002b4ba:	90                   	nop
c002b4bb:	83 c4 0c             	add    esp,0xc
c002b4be:	c3                   	ret    
c002b4bf:	90                   	nop

c002b4c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b4c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b4c4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b4c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b4ca:	09 c2                	or     edx,eax
c002b4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b4d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b4d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b4d8:	31 c0                	xor    eax,eax
c002b4da:	c1 e9 08             	shr    ecx,0x8
c002b4dd:	83 e1 0f             	and    ecx,0xf
c002b4e0:	39 c8                	cmp    eax,ecx
c002b4e2:	74 0a                	je     c002b4ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b4e4:	f6 c2 01             	test   dl,0x1
c002b4e7:	74 08                	je     c002b4f1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b4e9:	d1 ea                	shr    edx,1
c002b4eb:	40                   	inc    eax
c002b4ec:	eb f2                	jmp    c002b4e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b4ee:	83 c8 ff             	or     eax,0xffffffff
c002b4f1:	c3                   	ret    

c002b4f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b4f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b4f6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b4f9:	89 c2                	mov    edx,eax
c002b4fb:	c1 ea 08             	shr    edx,0x8
c002b4fe:	83 e2 0f             	and    edx,0xf
c002b501:	4a                   	dec    edx
c002b502:	75 32                	jne    c002b536 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b504:	83 e0 0f             	and    eax,0xf
c002b507:	83 f8 03             	cmp    eax,0x3
c002b50a:	75 2a                	jne    c002b536 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b50c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b50f:	b8 02 00 00 00       	mov    eax,0x2
c002b514:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b51a:	74 1c                	je     c002b538 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b51c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b522:	b8 04 00 00 00       	mov    eax,0x4
c002b527:	74 0f                	je     c002b538 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b529:	31 c0                	xor    eax,eax
c002b52b:	83 fa 03             	cmp    edx,0x3
c002b52e:	0f 94 c0             	sete   al
c002b531:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b535:	c3                   	ret    
c002b536:	31 c0                	xor    eax,eax
c002b538:	c3                   	ret    
c002b539:	90                   	nop

c002b53a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b53a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b53e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b541:	0f ba e2 0f          	bt     edx,0xf
c002b545:	72 f7                	jb     c002b53e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b547:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b54a:	83 ca 10             	or     edx,0x10
c002b54d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b550:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b553:	83 ca 01             	or     edx,0x1
c002b556:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b559:	c3                   	ret    

c002b55a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b55a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b55e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b561:	83 e2 fe             	and    edx,0xfffffffe
c002b564:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b567:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b56a:	83 e2 ef             	and    edx,0xffffffef
c002b56d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b570:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b573:	0f ba e2 0e          	bt     edx,0xe
c002b577:	72 f7                	jb     c002b570 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b579:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b57c:	0f ba e2 0f          	bt     edx,0xf
c002b580:	72 ee                	jb     c002b570 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b582:	c3                   	ret    
c002b583:	90                   	nop

c002b584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b584:	55                   	push   ebp
c002b585:	57                   	push   edi
c002b586:	56                   	push   esi
c002b587:	53                   	push   ebx
c002b588:	83 ec 1c             	sub    esp,0x1c
c002b58b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b58f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b593:	53                   	push   ebx
c002b594:	57                   	push   edi
c002b595:	e8 c0 ff ff ff       	call   c002b55a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b59a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b59e:	83 ec 0c             	sub    esp,0xc
c002b5a1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b5a7:	c1 e5 0a             	shl    ebp,0xa
c002b5aa:	01 e8                	add    eax,ebp
c002b5ac:	89 03                	mov    DWORD PTR [ebx],eax
c002b5ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b5b0:	68 00 04 00 00       	push   0x400
c002b5b5:	6a 00                	push   0x0
c002b5b7:	50                   	push   eax
c002b5b8:	e8 33 4f fd ff       	call   c00004f0 <memset>
c002b5bd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b5c3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002b5c7:	83 c4 1c             	add    esp,0x1c
c002b5ca:	01 e8                	add    eax,ebp
c002b5cc:	89 03                	mov    DWORD PTR [ebx],eax
c002b5ce:	c1 e6 08             	shl    esi,0x8
c002b5d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b5d8:	81 c6 00 80 00 00    	add    esi,0x8000
c002b5de:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b5e4:	01 f0                	add    eax,esi
c002b5e6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b5e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b5ec:	68 00 01 00 00       	push   0x100
c002b5f1:	6a 00                	push   0x0
c002b5f3:	50                   	push   eax
c002b5f4:	e8 f7 4e fd ff       	call   c00004f0 <memset>
c002b5f9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b5ff:	31 d2                	xor    edx,edx
c002b601:	01 f0                	add    eax,esi
c002b603:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b606:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b60d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002b613:	01 ee                	add    esi,ebp
c002b615:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002b619:	83 c4 10             	add    esp,0x10
c002b61c:	c1 e5 0d             	shl    ebp,0xd
c002b61f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002b625:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002b62b:	83 c6 20             	add    esi,0x20
c002b62e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b632:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b638:	01 e8                	add    eax,ebp
c002b63a:	01 d0                	add    eax,edx
c002b63c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b63f:	52                   	push   edx
c002b640:	68 00 01 00 00       	push   0x100
c002b645:	6a 00                	push   0x0
c002b647:	50                   	push   eax
c002b648:	e8 a3 4e fd ff       	call   c00004f0 <memset>
c002b64d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b653:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002b65a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b65e:	83 c4 10             	add    esp,0x10
c002b661:	01 e8                	add    eax,ebp
c002b663:	01 d0                	add    eax,edx
c002b665:	81 c2 00 01 00 00    	add    edx,0x100
c002b66b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b66e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002b674:	75 af                	jne    c002b625 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002b676:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b67d:	50                   	push   eax
c002b67e:	50                   	push   eax
c002b67f:	53                   	push   ebx
c002b680:	57                   	push   edi
c002b681:	e8 b4 fe ff ff       	call   c002b53a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b686:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b68d:	83 c4 2c             	add    esp,0x2c
c002b690:	5b                   	pop    ebx
c002b691:	5e                   	pop    esi
c002b692:	5f                   	pop    edi
c002b693:	5d                   	pop    ebp
c002b694:	c3                   	ret    
c002b695:	90                   	nop

c002b696 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b696:	55                   	push   ebp
c002b697:	57                   	push   edi
c002b698:	56                   	push   esi
c002b699:	53                   	push   ebx
c002b69a:	31 db                	xor    ebx,ebx
c002b69c:	83 ec 0c             	sub    esp,0xc
c002b69f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b6a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b6a7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b6aa:	f7 c7 01 00 00 00    	test   edi,0x1
c002b6b0:	74 7a                	je     c002b72c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b6b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b6b6:	89 d8                	mov    eax,ebx
c002b6b8:	c1 e0 07             	shl    eax,0x7
c002b6bb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b6c2:	55                   	push   ebp
c002b6c3:	56                   	push   esi
c002b6c4:	e8 29 fe ff ff       	call   c002b4f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b6c9:	5a                   	pop    edx
c002b6ca:	59                   	pop    ecx
c002b6cb:	83 f8 01             	cmp    eax,0x1
c002b6ce:	75 21                	jne    c002b6f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b6d0:	50                   	push   eax
c002b6d1:	53                   	push   ebx
c002b6d2:	55                   	push   ebp
c002b6d3:	56                   	push   esi
c002b6d4:	e8 ab fe ff ff       	call   c002b584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b6d9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b6e0:	e8 aa ac fe ff       	call   c001638f <malloc>
c002b6e5:	89 04 24             	mov    DWORD PTR [esp],eax
c002b6e8:	89 c5                	mov    ebp,eax
c002b6ea:	e8 e3 10 00 00       	call   c002c7d2 <SATA::SATA()>
c002b6ef:	eb 24                	jmp    c002b715 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b6f1:	83 f8 04             	cmp    eax,0x4
c002b6f4:	75 36                	jne    c002b72c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b6f6:	51                   	push   ecx
c002b6f7:	53                   	push   ebx
c002b6f8:	55                   	push   ebp
c002b6f9:	56                   	push   esi
c002b6fa:	e8 85 fe ff ff       	call   c002b584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b6ff:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b706:	e8 84 ac fe ff       	call   c001638f <malloc>
c002b70b:	89 04 24             	mov    DWORD PTR [esp],eax
c002b70e:	89 c5                	mov    ebp,eax
c002b710:	e8 4b 18 00 00       	call   c002cf60 <SATAPI::SATAPI()>
c002b715:	58                   	pop    eax
c002b716:	5a                   	pop    edx
c002b717:	55                   	push   ebp
c002b718:	56                   	push   esi
c002b719:	e8 3e fb fe ff       	call   c001b25c <Device::addChild(Device*)>
c002b71e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002b721:	56                   	push   esi
c002b722:	6a 00                	push   0x0
c002b724:	53                   	push   ebx
c002b725:	55                   	push   ebp
c002b726:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002b729:	83 c4 20             	add    esp,0x20
c002b72c:	d1 ef                	shr    edi,1
c002b72e:	43                   	inc    ebx
c002b72f:	83 fb 20             	cmp    ebx,0x20
c002b732:	0f 85 72 ff ff ff    	jne    c002b6aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002b738:	83 c4 0c             	add    esp,0xc
c002b73b:	5b                   	pop    ebx
c002b73c:	5e                   	pop    esi
c002b73d:	5f                   	pop    edi
c002b73e:	5d                   	pop    ebp
c002b73f:	c3                   	ret    

c002b740 <SATABus::open(int, int, void*)>:
c002b740:	53                   	push   ebx
c002b741:	83 ec 08             	sub    esp,0x8
c002b744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b748:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002b74e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002b754:	e8 1f 92 ff ff       	call   c0024978 <KeDisablePreemption()>
c002b759:	52                   	push   edx
c002b75a:	52                   	push   edx
c002b75b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002b761:	53                   	push   ebx
c002b762:	e8 2f ff ff ff       	call   c002b696 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002b767:	e8 34 92 ff ff       	call   c00249a0 <KeRestorePreemption()>
c002b76c:	83 c4 18             	add    esp,0x18
c002b76f:	31 c0                	xor    eax,eax
c002b771:	5b                   	pop    ebx
c002b772:	c3                   	ret    
c002b773:	90                   	nop

c002b774 <ATA::close(int, int, void*)>:
c002b774:	83 ec 0c             	sub    esp,0xc
c002b777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b77b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002b781:	85 c0                	test   eax,eax
c002b783:	74 0c                	je     c002b791 <ATA::close(int, int, void*)+0x1d>
c002b785:	8b 10                	mov    edx,DWORD PTR [eax]
c002b787:	83 ec 0c             	sub    esp,0xc
c002b78a:	50                   	push   eax
c002b78b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002b78e:	83 c4 10             	add    esp,0x10
c002b791:	31 c0                	xor    eax,eax
c002b793:	83 c4 0c             	add    esp,0xc
c002b796:	c3                   	ret    
c002b797:	90                   	nop

c002b798 <ATA::powerSaving(PowerSavingLevel)>:
c002b798:	c3                   	ret    
c002b799:	90                   	nop

c002b79a <ATA::ATA()>:
c002b79a:	83 ec 0c             	sub    esp,0xc
c002b79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7a1:	83 ec 04             	sub    esp,0x4
c002b7a4:	68 00 02 00 00       	push   0x200
c002b7a9:	68 f5 34 03 c0       	push   0xc00334f5
c002b7ae:	50                   	push   eax
c002b7af:	e8 8a fe fe ff       	call   c001b63e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002b7b4:	83 c4 10             	add    esp,0x10
c002b7b7:	ba 5c 34 03 c0       	mov    edx,0xc003345c
c002b7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7c0:	89 10                	mov    DWORD PTR [eax],edx
c002b7c2:	90                   	nop
c002b7c3:	83 c4 0c             	add    esp,0xc
c002b7c6:	c3                   	ret    
c002b7c7:	90                   	nop

c002b7c8 <ATA::flush(bool)>:
c002b7c8:	53                   	push   ebx
c002b7c9:	83 ec 08             	sub    esp,0x8
c002b7cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002b7d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b7d5:	83 f8 01             	cmp    eax,0x1
c002b7d8:	19 c0                	sbb    eax,eax
c002b7da:	83 e0 fd             	and    eax,0xfffffffd
c002b7dd:	05 ea 00 00 00       	add    eax,0xea
c002b7e2:	50                   	push   eax
c002b7e3:	6a 07                	push   0x7
c002b7e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b7ec:	50                   	push   eax
c002b7ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b7f3:	e8 04 f1 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b7f8:	83 c4 0c             	add    esp,0xc
c002b7fb:	6a 00                	push   0x0
c002b7fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b804:	50                   	push   eax
c002b805:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b80b:	e8 d0 fb ff ff       	call   c002b3e0 <IDE::polling(unsigned char, unsigned int)>
c002b810:	83 c4 18             	add    esp,0x18
c002b813:	5b                   	pop    ebx
c002b814:	c3                   	ret    
c002b815:	90                   	nop

c002b816 <ATA::readyForCommand()>:
c002b816:	56                   	push   esi
c002b817:	53                   	push   ebx
c002b818:	53                   	push   ebx
c002b819:	31 db                	xor    ebx,ebx
c002b81b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b81f:	51                   	push   ecx
c002b820:	6a 0c                	push   0xc
c002b822:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002b829:	50                   	push   eax
c002b82a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002b830:	e8 87 f1 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002b835:	83 c4 10             	add    esp,0x10
c002b838:	a8 88                	test   al,0x88
c002b83a:	74 1f                	je     c002b85b <ATA::readyForCommand()+0x45>
c002b83c:	43                   	inc    ebx
c002b83d:	83 fb 63             	cmp    ebx,0x63
c002b840:	7e dd                	jle    c002b81f <ATA::readyForCommand()+0x9>
c002b842:	83 ec 0c             	sub    esp,0xc
c002b845:	6a 0a                	push   0xa
c002b847:	e8 dc 96 ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002b84c:	83 c4 10             	add    esp,0x10
c002b84f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002b855:	75 c8                	jne    c002b81f <ATA::readyForCommand()+0x9>
c002b857:	31 c0                	xor    eax,eax
c002b859:	eb 02                	jmp    c002b85d <ATA::readyForCommand()+0x47>
c002b85b:	b0 01                	mov    al,0x1
c002b85d:	5a                   	pop    edx
c002b85e:	5b                   	pop    ebx
c002b85f:	5e                   	pop    esi
c002b860:	c3                   	ret    
c002b861:	90                   	nop

c002b862 <ATA::access(unsigned long long, int, void*, bool)>:
c002b862:	55                   	push   ebp
c002b863:	57                   	push   edi
c002b864:	56                   	push   esi
c002b865:	53                   	push   ebx
c002b866:	83 ec 2c             	sub    esp,0x2c
c002b869:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002b86d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002b871:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002b875:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b879:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b87d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b881:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002b885:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002b88b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002b88f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002b895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b899:	c1 e0 06             	shl    eax,0x6
c002b89c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002b8a4:	74 5b                	je     c002b901 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002b8a6:	89 fa                	mov    edx,edi
c002b8a8:	89 f0                	mov    eax,esi
c002b8aa:	c1 ea 1c             	shr    edx,0x1c
c002b8ad:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002b8b1:	89 d1                	mov    ecx,edx
c002b8b3:	09 c1                	or     ecx,eax
c002b8b5:	74 25                	je     c002b8dc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002b8b7:	31 ed                	xor    ebp,ebp
c002b8b9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002b8c0:	89 fa                	mov    edx,edi
c002b8c2:	89 f0                	mov    eax,esi
c002b8c4:	0f ad d0             	shrd   eax,edx,cl
c002b8c7:	d3 ea                	shr    edx,cl
c002b8c9:	f6 c1 20             	test   cl,0x20
c002b8cc:	74 02                	je     c002b8d0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002b8ce:	89 d0                	mov    eax,edx
c002b8d0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002b8d4:	45                   	inc    ebp
c002b8d5:	83 fd 06             	cmp    ebp,0x6
c002b8d8:	75 df                	jne    c002b8b9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002b8da:	eb 71                	jmp    c002b94d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002b8dc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002b8e1:	89 f0                	mov    eax,esi
c002b8e3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002b8ea:	0f ac f8 10          	shrd   eax,edi,0x10
c002b8ee:	bf 01 00 00 00       	mov    edi,0x1
c002b8f3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002b8f7:	c1 ee 18             	shr    esi,0x18
c002b8fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002b8ff:	eb 53                	jmp    c002b954 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002b901:	6a 00                	push   0x0
c002b903:	6a 3f                	push   0x3f
c002b905:	57                   	push   edi
c002b906:	56                   	push   esi
c002b907:	e8 f4 2a 00 00       	call   c002e400 <__umoddi3>
c002b90c:	83 c4 10             	add    esp,0x10
c002b90f:	40                   	inc    eax
c002b910:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002b914:	6a 00                	push   0x0
c002b916:	68 f0 03 00 00       	push   0x3f0
c002b91b:	57                   	push   edi
c002b91c:	56                   	push   esi
c002b91d:	e8 de 29 00 00       	call   c002e300 <__udivdi3>
c002b922:	83 c4 10             	add    esp,0x10
c002b925:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002b92a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002b931:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002b936:	6a 00                	push   0x0
c002b938:	6a 3f                	push   0x3f
c002b93a:	57                   	push   edi
c002b93b:	31 ff                	xor    edi,edi
c002b93d:	56                   	push   esi
c002b93e:	e8 bd 29 00 00       	call   c002e300 <__udivdi3>
c002b943:	83 c4 10             	add    esp,0x10
c002b946:	83 e0 0f             	and    eax,0xf
c002b949:	89 c6                	mov    esi,eax
c002b94b:	eb 07                	jmp    c002b954 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002b94d:	31 f6                	xor    esi,esi
c002b94f:	bf 02 00 00 00       	mov    edi,0x2
c002b954:	50                   	push   eax
c002b955:	6a 00                	push   0x0
c002b957:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b95e:	50                   	push   eax
c002b95f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002b963:	e8 a2 f1 ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002b968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002b96b:	e8 a6 fe ff ff       	call   c002b816 <ATA::readyForCommand()>
c002b970:	83 c4 10             	add    esp,0x10
c002b973:	84 c0                	test   al,al
c002b975:	75 0a                	jne    c002b981 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002b977:	be 01 00 00 00       	mov    esi,0x1
c002b97c:	e9 9b 02 00 00       	jmp    c002bc1c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002b981:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002b987:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002b98d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002b994:	c1 e0 04             	shl    eax,0x4
c002b997:	09 c6                	or     esi,eax
c002b999:	f7 c7 03 00 00 00    	test   edi,0x3
c002b99f:	75 05                	jne    c002b9a6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002b9a1:	83 ce a0             	or     esi,0xffffffa0
c002b9a4:	eb 03                	jmp    c002b9a9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002b9a6:	83 ce e0             	or     esi,0xffffffe0
c002b9a9:	89 f0                	mov    eax,esi
c002b9ab:	0f b6 f0             	movzx  esi,al
c002b9ae:	56                   	push   esi
c002b9af:	6a 06                	push   0x6
c002b9b1:	51                   	push   ecx
c002b9b2:	52                   	push   edx
c002b9b3:	e8 44 ef ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9b8:	83 c4 10             	add    esp,0x10
c002b9bb:	6a 00                	push   0x0
c002b9bd:	6a 01                	push   0x1
c002b9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b9c6:	50                   	push   eax
c002b9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b9cd:	e8 2a ef ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9d2:	89 f8                	mov    eax,edi
c002b9d4:	83 c4 10             	add    esp,0x10
c002b9d7:	0f b6 f0             	movzx  esi,al
c002b9da:	83 fe 02             	cmp    esi,0x2
c002b9dd:	75 6e                	jne    c002ba4d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002b9df:	6a 00                	push   0x0
c002b9e1:	6a 08                	push   0x8
c002b9e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b9ea:	50                   	push   eax
c002b9eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b9f1:	e8 06 ef ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9f6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002b9fb:	50                   	push   eax
c002b9fc:	6a 09                	push   0x9
c002b9fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba05:	50                   	push   eax
c002ba06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba0c:	e8 eb ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba11:	83 c4 20             	add    esp,0x20
c002ba14:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002ba19:	50                   	push   eax
c002ba1a:	6a 0a                	push   0xa
c002ba1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba23:	50                   	push   eax
c002ba24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba2a:	e8 cd ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba2f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002ba34:	50                   	push   eax
c002ba35:	6a 0b                	push   0xb
c002ba37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba3e:	50                   	push   eax
c002ba3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba45:	e8 b2 ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba4a:	83 c4 20             	add    esp,0x20
c002ba4d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002ba52:	50                   	push   eax
c002ba53:	6a 02                	push   0x2
c002ba55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba5c:	50                   	push   eax
c002ba5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba63:	e8 94 ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba68:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002ba6d:	50                   	push   eax
c002ba6e:	6a 03                	push   0x3
c002ba70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba77:	50                   	push   eax
c002ba78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba7e:	e8 79 ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba83:	83 c4 20             	add    esp,0x20
c002ba86:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002ba8b:	50                   	push   eax
c002ba8c:	6a 04                	push   0x4
c002ba8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba95:	50                   	push   eax
c002ba96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba9c:	e8 5b ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baa1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002baa6:	50                   	push   eax
c002baa7:	6a 05                	push   0x5
c002baa9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bab0:	50                   	push   eax
c002bab1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bab7:	e8 40 ee ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002babc:	83 c4 20             	add    esp,0x20
c002babf:	83 fe 02             	cmp    esi,0x2
c002bac2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002bac7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002bacc:	85 c9                	test   ecx,ecx
c002bace:	74 07                	je     c002bad7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002bad0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bad5:	75 47                	jne    c002bb1e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002bad7:	89 f8                	mov    eax,edi
c002bad9:	0f b6 f8             	movzx  edi,al
c002badc:	31 c0                	xor    eax,eax
c002bade:	83 ff 02             	cmp    edi,0x2
c002bae1:	0f 95 c0             	setne  al
c002bae4:	89 c6                	mov    esi,eax
c002bae6:	74 0c                	je     c002baf4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002bae8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002baed:	b8 30 00 00 00       	mov    eax,0x30
c002baf2:	75 2f                	jne    c002bb23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002baf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002baf8:	83 f2 01             	xor    edx,0x1
c002bafb:	85 c9                	test   ecx,ecx
c002bafd:	74 09                	je     c002bb08 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002baff:	84 d2                	test   dl,dl
c002bb01:	b8 24 00 00 00       	mov    eax,0x24
c002bb06:	75 1b                	jne    c002bb23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bb08:	85 f6                	test   esi,esi
c002bb0a:	0f 84 67 fe ff ff    	je     c002b977 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bb10:	84 d2                	test   dl,dl
c002bb12:	b8 20 00 00 00       	mov    eax,0x20
c002bb17:	75 0a                	jne    c002bb23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bb19:	e9 59 fe ff ff       	jmp    c002b977 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bb1e:	b8 34 00 00 00       	mov    eax,0x34
c002bb23:	50                   	push   eax
c002bb24:	6a 07                	push   0x7
c002bb26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb2d:	50                   	push   eax
c002bb2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb34:	e8 c3 ed ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bb39:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002bb3d:	83 c4 10             	add    esp,0x10
c002bb40:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002bb45:	85 f6                	test   esi,esi
c002bb47:	0f 84 b5 00 00 00    	je     c002bc02 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002bb4d:	50                   	push   eax
c002bb4e:	6a 01                	push   0x1
c002bb50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb57:	50                   	push   eax
c002bb58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb5e:	e8 7d f8 ff ff       	call   c002b3e0 <IDE::polling(unsigned char, unsigned int)>
c002bb63:	83 c4 10             	add    esp,0x10
c002bb66:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bb6c:	0f b6 c0             	movzx  eax,al
c002bb6f:	85 c0                	test   eax,eax
c002bb71:	74 1f                	je     c002bb92 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002bb73:	50                   	push   eax
c002bb74:	89 c6                	mov    esi,eax
c002bb76:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bb7d:	0f b6 d2             	movzx  edx,dl
c002bb80:	50                   	push   eax
c002bb81:	52                   	push   edx
c002bb82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb88:	e8 99 f7 ff ff       	call   c002b326 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bb8d:	e9 87 00 00 00       	jmp    c002bc19 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002bb92:	85 ed                	test   ebp,ebp
c002bb94:	74 3b                	je     c002bbd1 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002bb96:	31 ff                	xor    edi,edi
c002bb98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bb9c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002bba0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002bba5:	50                   	push   eax
c002bba6:	50                   	push   eax
c002bba7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bbae:	50                   	push   eax
c002bbaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bbb5:	e8 30 ed ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002bbba:	89 c2                	mov    edx,eax
c002bbbc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002bbc1:	66 ef                	out    dx,ax
c002bbc3:	47                   	inc    edi
c002bbc4:	83 c4 10             	add    esp,0x10
c002bbc7:	81 ff 00 01 00 00    	cmp    edi,0x100
c002bbcd:	75 c9                	jne    c002bb98 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002bbcf:	eb 23                	jmp    c002bbf4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002bbd1:	51                   	push   ecx
c002bbd2:	0f b6 d2             	movzx  edx,dl
c002bbd5:	51                   	push   ecx
c002bbd6:	52                   	push   edx
c002bbd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bbdd:	e8 08 ed ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002bbe2:	b9 00 01 00 00       	mov    ecx,0x100
c002bbe7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bbeb:	89 c2                	mov    edx,eax
c002bbed:	fc                   	cld    
c002bbee:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bbf1:	83 c4 10             	add    esp,0x10
c002bbf4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bbfc:	4e                   	dec    esi
c002bbfd:	e9 43 ff ff ff       	jmp    c002bb45 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002bc02:	31 f6                	xor    esi,esi
c002bc04:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bc09:	74 11                	je     c002bc1c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bc0b:	50                   	push   eax
c002bc0c:	50                   	push   eax
c002bc0d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002bc12:	50                   	push   eax
c002bc13:	53                   	push   ebx
c002bc14:	e8 af fb ff ff       	call   c002b7c8 <ATA::flush(bool)>
c002bc19:	83 c4 10             	add    esp,0x10
c002bc1c:	83 c4 2c             	add    esp,0x2c
c002bc1f:	89 f0                	mov    eax,esi
c002bc21:	5b                   	pop    ebx
c002bc22:	5e                   	pop    esi
c002bc23:	5f                   	pop    edi
c002bc24:	5d                   	pop    ebp
c002bc25:	c3                   	ret    

c002bc26 <ATA::detectCHS()>:
c002bc26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bc2a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bc30:	c1 e0 06             	shl    eax,0x6
c002bc33:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bc39:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bc43:	c7 44 24 04 40 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033440
c002bc4b:	e9 23 44 ff ff       	jmp    c0020073 <KePanic(char const*)>

c002bc50 <ATA::open(int, int, void*)>:
c002bc50:	53                   	push   ebx
c002bc51:	83 ec 08             	sub    esp,0x8
c002bc54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bc58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bc5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bc60:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bc66:	c1 e0 06             	shl    eax,0x6
c002bc69:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bc6f:	01 d0                	add    eax,edx
c002bc71:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bc78:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bc7e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bc85:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bc8f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bc96:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bc9c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bca3:	75 0c                	jne    c002bcb1 <ATA::open(int, int, void*)+0x61>
c002bca5:	83 ec 0c             	sub    esp,0xc
c002bca8:	53                   	push   ebx
c002bca9:	e8 78 ff ff ff       	call   c002bc26 <ATA::detectCHS()>
c002bcae:	83 c4 10             	add    esp,0x10
c002bcb1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bcb7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bcbd:	c1 e0 06             	shl    eax,0x6
c002bcc0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bcc7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bcd1:	d1 e8                	shr    eax,1
c002bcd3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bcd9:	6a 04                	push   0x4
c002bcdb:	6a 0c                	push   0xc
c002bcdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bce4:	50                   	push   eax
c002bce5:	52                   	push   edx
c002bce6:	e8 11 ec ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bceb:	90                   	nop
c002bcec:	90                   	nop
c002bced:	6a 00                	push   0x0
c002bcef:	6a 0c                	push   0xc
c002bcf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcf8:	50                   	push   eax
c002bcf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcff:	e8 f8 eb ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd04:	83 c4 14             	add    esp,0x14
c002bd07:	53                   	push   ebx
c002bd08:	e8 99 f9 fe ff       	call   c001b6a6 <PhysicalDisk::startCache()>
c002bd0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bd10:	e8 d5 0b ff ff       	call   c001c8ea <createPartitionsForDisk(PhysicalDisk*)>
c002bd15:	83 c4 18             	add    esp,0x18
c002bd18:	31 c0                	xor    eax,eax
c002bd1a:	5b                   	pop    ebx
c002bd1b:	c3                   	ret    

c002bd1c <combineCharAndColour(char, unsigned char)>:
c002bd1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bd21:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002bd27:	c1 e0 08             	shl    eax,0x8
c002bd2a:	09 d0                	or     eax,edx
c002bd2c:	c3                   	ret    

c002bd2d <combineColours(unsigned char, unsigned char)>:
c002bd2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bd32:	c1 e0 04             	shl    eax,0x4
c002bd35:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002bd39:	c3                   	ret    

c002bd3a <ATA::read(unsigned long long, int, void*)>:
c002bd3a:	55                   	push   ebp
c002bd3b:	57                   	push   edi
c002bd3c:	56                   	push   esi
c002bd3d:	be 04 00 00 00       	mov    esi,0x4
c002bd42:	53                   	push   ebx
c002bd43:	83 ec 0c             	sub    esp,0xc
c002bd46:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002bd4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bd4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002bd52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002bd56:	8d 7b ff             	lea    edi,[ebx-0x1]
c002bd59:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002bd5f:	0f 87 a1 01 00 00    	ja     c002bf06 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bd65:	85 c9                	test   ecx,ecx
c002bd67:	be 06 00 00 00       	mov    esi,0x6
c002bd6c:	0f 84 94 01 00 00    	je     c002bf06 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bd72:	55                   	push   ebp
c002bd73:	55                   	push   ebp
c002bd74:	6a 00                	push   0x0
c002bd76:	51                   	push   ecx
c002bd77:	53                   	push   ebx
c002bd78:	52                   	push   edx
c002bd79:	50                   	push   eax
c002bd7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002bd7e:	e8 df fa ff ff       	call   c002b862 <ATA::access(unsigned long long, int, void*, bool)>
c002bd83:	83 c4 20             	add    esp,0x20
c002bd86:	85 c0                	test   eax,eax
c002bd88:	89 c6                	mov    esi,eax
c002bd8a:	0f 85 71 01 00 00    	jne    c002bf01 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002bd90:	50                   	push   eax
c002bd91:	bd 10 27 00 00       	mov    ebp,0x2710
c002bd96:	50                   	push   eax
c002bd97:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002bd9d:	6a 0f                	push   0xf
c002bd9f:	6a 00                	push   0x0
c002bda1:	89 da                	mov    edx,ebx
c002bda3:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002bda9:	e8 7f ff ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002bdae:	59                   	pop    ecx
c002bdaf:	b9 0a 00 00 00       	mov    ecx,0xa
c002bdb4:	5b                   	pop    ebx
c002bdb5:	0f b6 d8             	movzx  ebx,al
c002bdb8:	89 d0                	mov    eax,edx
c002bdba:	53                   	push   ebx
c002bdbb:	99                   	cdq    
c002bdbc:	f7 fd                	idiv   ebp
c002bdbe:	99                   	cdq    
c002bdbf:	f7 f9                	idiv   ecx
c002bdc1:	83 c2 30             	add    edx,0x30
c002bdc4:	0f b6 d2             	movzx  edx,dl
c002bdc7:	52                   	push   edx
c002bdc8:	e8 4f ff ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bdcd:	5f                   	pop    edi
c002bdce:	bf e8 03 00 00       	mov    edi,0x3e8
c002bdd3:	5a                   	pop    edx
c002bdd4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002bdda:	53                   	push   ebx
c002bddb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bde0:	99                   	cdq    
c002bde1:	f7 ff                	idiv   edi
c002bde3:	99                   	cdq    
c002bde4:	f7 f9                	idiv   ecx
c002bde6:	8d 42 30             	lea    eax,[edx+0x30]
c002bde9:	0f b6 c0             	movzx  eax,al
c002bdec:	50                   	push   eax
c002bded:	e8 2a ff ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bdf2:	5f                   	pop    edi
c002bdf3:	bf 64 00 00 00       	mov    edi,0x64
c002bdf8:	5a                   	pop    edx
c002bdf9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002bdff:	53                   	push   ebx
c002be00:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002be05:	99                   	cdq    
c002be06:	f7 ff                	idiv   edi
c002be08:	99                   	cdq    
c002be09:	f7 f9                	idiv   ecx
c002be0b:	8d 42 30             	lea    eax,[edx+0x30]
c002be0e:	0f b6 c0             	movzx  eax,al
c002be11:	50                   	push   eax
c002be12:	e8 05 ff ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002be17:	5a                   	pop    edx
c002be18:	5a                   	pop    edx
c002be19:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002be1f:	53                   	push   ebx
c002be20:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002be25:	99                   	cdq    
c002be26:	f7 f9                	idiv   ecx
c002be28:	99                   	cdq    
c002be29:	f7 f9                	idiv   ecx
c002be2b:	8d 42 30             	lea    eax,[edx+0x30]
c002be2e:	0f b6 c0             	movzx  eax,al
c002be31:	50                   	push   eax
c002be32:	e8 e5 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002be37:	5a                   	pop    edx
c002be38:	5a                   	pop    edx
c002be39:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002be3f:	53                   	push   ebx
c002be40:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002be45:	99                   	cdq    
c002be46:	f7 f9                	idiv   ecx
c002be48:	83 c2 30             	add    edx,0x30
c002be4b:	0f b6 d2             	movzx  edx,dl
c002be4e:	52                   	push   edx
c002be4f:	e8 c8 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002be54:	5a                   	pop    edx
c002be55:	5a                   	pop    edx
c002be56:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002be5c:	53                   	push   ebx
c002be5d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002be62:	99                   	cdq    
c002be63:	f7 fd                	idiv   ebp
c002be65:	99                   	cdq    
c002be66:	f7 f9                	idiv   ecx
c002be68:	8d 42 30             	lea    eax,[edx+0x30]
c002be6b:	0f b6 c0             	movzx  eax,al
c002be6e:	50                   	push   eax
c002be6f:	e8 a8 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002be74:	5d                   	pop    ebp
c002be75:	bd e8 03 00 00       	mov    ebp,0x3e8
c002be7a:	5a                   	pop    edx
c002be7b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002be81:	53                   	push   ebx
c002be82:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002be87:	99                   	cdq    
c002be88:	f7 fd                	idiv   ebp
c002be8a:	99                   	cdq    
c002be8b:	f7 f9                	idiv   ecx
c002be8d:	8d 42 30             	lea    eax,[edx+0x30]
c002be90:	0f b6 c0             	movzx  eax,al
c002be93:	50                   	push   eax
c002be94:	e8 83 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002be99:	5d                   	pop    ebp
c002be9a:	5a                   	pop    edx
c002be9b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002bea1:	53                   	push   ebx
c002bea2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bea7:	99                   	cdq    
c002bea8:	f7 ff                	idiv   edi
c002beaa:	99                   	cdq    
c002beab:	f7 f9                	idiv   ecx
c002bead:	8d 42 30             	lea    eax,[edx+0x30]
c002beb0:	0f b6 c0             	movzx  eax,al
c002beb3:	50                   	push   eax
c002beb4:	e8 63 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002beb9:	5f                   	pop    edi
c002beba:	5d                   	pop    ebp
c002bebb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002bec1:	53                   	push   ebx
c002bec2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bec7:	99                   	cdq    
c002bec8:	f7 f9                	idiv   ecx
c002beca:	99                   	cdq    
c002becb:	f7 f9                	idiv   ecx
c002becd:	8d 42 30             	lea    eax,[edx+0x30]
c002bed0:	0f b6 c0             	movzx  eax,al
c002bed3:	50                   	push   eax
c002bed4:	e8 43 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bed9:	5a                   	pop    edx
c002beda:	5f                   	pop    edi
c002bedb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002bee1:	53                   	push   ebx
c002bee2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bee7:	99                   	cdq    
c002bee8:	f7 f9                	idiv   ecx
c002beea:	83 c2 30             	add    edx,0x30
c002beed:	0f b6 d2             	movzx  edx,dl
c002bef0:	52                   	push   edx
c002bef1:	e8 26 fe ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bef6:	83 c4 10             	add    esp,0x10
c002bef9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002beff:	eb 05                	jmp    c002bf06 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bf01:	be 01 00 00 00       	mov    esi,0x1
c002bf06:	83 c4 0c             	add    esp,0xc
c002bf09:	89 f0                	mov    eax,esi
c002bf0b:	5b                   	pop    ebx
c002bf0c:	5e                   	pop    esi
c002bf0d:	5f                   	pop    edi
c002bf0e:	5d                   	pop    ebp
c002bf0f:	c3                   	ret    

c002bf10 <ATA::write(unsigned long long, int, void*)>:
c002bf10:	55                   	push   ebp
c002bf11:	57                   	push   edi
c002bf12:	56                   	push   esi
c002bf13:	be 04 00 00 00       	mov    esi,0x4
c002bf18:	53                   	push   ebx
c002bf19:	83 ec 0c             	sub    esp,0xc
c002bf1c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002bf20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bf24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002bf28:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002bf2c:	8d 7b ff             	lea    edi,[ebx-0x1]
c002bf2f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002bf35:	0f 87 9c 01 00 00    	ja     c002c0d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002bf3b:	85 c9                	test   ecx,ecx
c002bf3d:	be 06 00 00 00       	mov    esi,0x6
c002bf42:	0f 84 8f 01 00 00    	je     c002c0d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002bf48:	55                   	push   ebp
c002bf49:	55                   	push   ebp
c002bf4a:	6a 01                	push   0x1
c002bf4c:	51                   	push   ecx
c002bf4d:	53                   	push   ebx
c002bf4e:	52                   	push   edx
c002bf4f:	50                   	push   eax
c002bf50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002bf54:	e8 09 f9 ff ff       	call   c002b862 <ATA::access(unsigned long long, int, void*, bool)>
c002bf59:	83 c4 20             	add    esp,0x20
c002bf5c:	85 c0                	test   eax,eax
c002bf5e:	89 c6                	mov    esi,eax
c002bf60:	0f 85 6c 01 00 00    	jne    c002c0d2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002bf66:	50                   	push   eax
c002bf67:	bd 10 27 00 00       	mov    ebp,0x2710
c002bf6c:	50                   	push   eax
c002bf6d:	6a 0f                	push   0xf
c002bf6f:	6a 00                	push   0x0
c002bf71:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002bf77:	e8 b1 fd ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002bf7c:	5a                   	pop    edx
c002bf7d:	59                   	pop    ecx
c002bf7e:	b9 0a 00 00 00       	mov    ecx,0xa
c002bf83:	0f b6 d8             	movzx  ebx,al
c002bf86:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bf8b:	53                   	push   ebx
c002bf8c:	99                   	cdq    
c002bf8d:	f7 fd                	idiv   ebp
c002bf8f:	99                   	cdq    
c002bf90:	f7 f9                	idiv   ecx
c002bf92:	8d 42 30             	lea    eax,[edx+0x30]
c002bf95:	0f b6 c0             	movzx  eax,al
c002bf98:	50                   	push   eax
c002bf99:	e8 7e fd ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bf9e:	5f                   	pop    edi
c002bf9f:	bf e8 03 00 00       	mov    edi,0x3e8
c002bfa4:	5a                   	pop    edx
c002bfa5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002bfab:	53                   	push   ebx
c002bfac:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bfb1:	99                   	cdq    
c002bfb2:	f7 ff                	idiv   edi
c002bfb4:	99                   	cdq    
c002bfb5:	f7 f9                	idiv   ecx
c002bfb7:	8d 42 30             	lea    eax,[edx+0x30]
c002bfba:	0f b6 c0             	movzx  eax,al
c002bfbd:	50                   	push   eax
c002bfbe:	e8 59 fd ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bfc3:	5f                   	pop    edi
c002bfc4:	bf 64 00 00 00       	mov    edi,0x64
c002bfc9:	5a                   	pop    edx
c002bfca:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002bfd0:	53                   	push   ebx
c002bfd1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bfd6:	99                   	cdq    
c002bfd7:	f7 ff                	idiv   edi
c002bfd9:	99                   	cdq    
c002bfda:	f7 f9                	idiv   ecx
c002bfdc:	8d 42 30             	lea    eax,[edx+0x30]
c002bfdf:	0f b6 c0             	movzx  eax,al
c002bfe2:	50                   	push   eax
c002bfe3:	e8 34 fd ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002bfe8:	5a                   	pop    edx
c002bfe9:	5a                   	pop    edx
c002bfea:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002bff0:	53                   	push   ebx
c002bff1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bff6:	99                   	cdq    
c002bff7:	f7 f9                	idiv   ecx
c002bff9:	99                   	cdq    
c002bffa:	f7 f9                	idiv   ecx
c002bffc:	8d 42 30             	lea    eax,[edx+0x30]
c002bfff:	0f b6 c0             	movzx  eax,al
c002c002:	50                   	push   eax
c002c003:	e8 14 fd ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c008:	5a                   	pop    edx
c002c009:	5a                   	pop    edx
c002c00a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c010:	53                   	push   ebx
c002c011:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c016:	99                   	cdq    
c002c017:	f7 f9                	idiv   ecx
c002c019:	83 c2 30             	add    edx,0x30
c002c01c:	0f b6 d2             	movzx  edx,dl
c002c01f:	52                   	push   edx
c002c020:	e8 f7 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c025:	5a                   	pop    edx
c002c026:	5a                   	pop    edx
c002c027:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c02d:	53                   	push   ebx
c002c02e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c033:	99                   	cdq    
c002c034:	f7 fd                	idiv   ebp
c002c036:	99                   	cdq    
c002c037:	f7 f9                	idiv   ecx
c002c039:	8d 42 30             	lea    eax,[edx+0x30]
c002c03c:	0f b6 c0             	movzx  eax,al
c002c03f:	50                   	push   eax
c002c040:	e8 d7 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c045:	5d                   	pop    ebp
c002c046:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c04b:	5a                   	pop    edx
c002c04c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c052:	53                   	push   ebx
c002c053:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c058:	99                   	cdq    
c002c059:	f7 fd                	idiv   ebp
c002c05b:	99                   	cdq    
c002c05c:	f7 f9                	idiv   ecx
c002c05e:	8d 42 30             	lea    eax,[edx+0x30]
c002c061:	0f b6 c0             	movzx  eax,al
c002c064:	50                   	push   eax
c002c065:	e8 b2 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c06a:	5d                   	pop    ebp
c002c06b:	5a                   	pop    edx
c002c06c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c072:	53                   	push   ebx
c002c073:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c078:	99                   	cdq    
c002c079:	f7 ff                	idiv   edi
c002c07b:	99                   	cdq    
c002c07c:	f7 f9                	idiv   ecx
c002c07e:	8d 42 30             	lea    eax,[edx+0x30]
c002c081:	0f b6 c0             	movzx  eax,al
c002c084:	50                   	push   eax
c002c085:	e8 92 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c08a:	5f                   	pop    edi
c002c08b:	5d                   	pop    ebp
c002c08c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c092:	53                   	push   ebx
c002c093:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c098:	99                   	cdq    
c002c099:	f7 f9                	idiv   ecx
c002c09b:	99                   	cdq    
c002c09c:	f7 f9                	idiv   ecx
c002c09e:	8d 42 30             	lea    eax,[edx+0x30]
c002c0a1:	0f b6 c0             	movzx  eax,al
c002c0a4:	50                   	push   eax
c002c0a5:	e8 72 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c0aa:	5a                   	pop    edx
c002c0ab:	5f                   	pop    edi
c002c0ac:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c0b2:	53                   	push   ebx
c002c0b3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c0b8:	99                   	cdq    
c002c0b9:	f7 f9                	idiv   ecx
c002c0bb:	83 c2 30             	add    edx,0x30
c002c0be:	0f b6 d2             	movzx  edx,dl
c002c0c1:	52                   	push   edx
c002c0c2:	e8 55 fc ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002c0c7:	83 c4 10             	add    esp,0x10
c002c0ca:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c0d0:	eb 05                	jmp    c002c0d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c0d2:	be 01 00 00 00       	mov    esi,0x1
c002c0d7:	83 c4 0c             	add    esp,0xc
c002c0da:	89 f0                	mov    eax,esi
c002c0dc:	5b                   	pop    ebx
c002c0dd:	5e                   	pop    esi
c002c0de:	5f                   	pop    edi
c002c0df:	5d                   	pop    ebp
c002c0e0:	c3                   	ret    
c002c0e1:	90                   	nop

c002c0e2 <ATAPI::write(unsigned long long, int, void*)>:
c002c0e2:	b8 03 00 00 00       	mov    eax,0x3
c002c0e7:	c3                   	ret    

c002c0e8 <ATAPI::close(int, int, void*)>:
c002c0e8:	83 ec 0c             	sub    esp,0xc
c002c0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c0ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c0f5:	85 c0                	test   eax,eax
c002c0f7:	74 0c                	je     c002c105 <ATAPI::close(int, int, void*)+0x1d>
c002c0f9:	8b 10                	mov    edx,DWORD PTR [eax]
c002c0fb:	83 ec 0c             	sub    esp,0xc
c002c0fe:	50                   	push   eax
c002c0ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c102:	83 c4 10             	add    esp,0x10
c002c105:	31 c0                	xor    eax,eax
c002c107:	83 c4 0c             	add    esp,0xc
c002c10a:	c3                   	ret    
c002c10b:	90                   	nop

c002c10c <ATAPI::ATAPI()>:
c002c10c:	83 ec 0c             	sub    esp,0xc
c002c10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c113:	83 ec 04             	sub    esp,0x4
c002c116:	68 00 08 00 00       	push   0x800
c002c11b:	68 95 35 03 c0       	push   0xc0033595
c002c120:	50                   	push   eax
c002c121:	e8 18 f5 fe ff       	call   c001b63e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c126:	83 c4 10             	add    esp,0x10
c002c129:	ba a4 34 03 c0       	mov    edx,0xc00334a4
c002c12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c132:	89 10                	mov    DWORD PTR [eax],edx
c002c134:	90                   	nop
c002c135:	83 c4 0c             	add    esp,0xc
c002c138:	c3                   	ret    
c002c139:	90                   	nop

c002c13a <ATAPI::readyForCommand()>:
c002c13a:	56                   	push   esi
c002c13b:	53                   	push   ebx
c002c13c:	53                   	push   ebx
c002c13d:	31 db                	xor    ebx,ebx
c002c13f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c143:	51                   	push   ecx
c002c144:	6a 0c                	push   0xc
c002c146:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c14d:	50                   	push   eax
c002c14e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c154:	e8 63 e8 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002c159:	83 c4 10             	add    esp,0x10
c002c15c:	a8 88                	test   al,0x88
c002c15e:	74 25                	je     c002c185 <ATAPI::readyForCommand()+0x4b>
c002c160:	43                   	inc    ebx
c002c161:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c167:	7e da                	jle    c002c143 <ATAPI::readyForCommand()+0x9>
c002c169:	83 ec 0c             	sub    esp,0xc
c002c16c:	68 5e 01 00 00       	push   0x15e
c002c171:	e8 b2 8d ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002c176:	83 c4 10             	add    esp,0x10
c002c179:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c17f:	75 c2                	jne    c002c143 <ATAPI::readyForCommand()+0x9>
c002c181:	31 c0                	xor    eax,eax
c002c183:	eb 02                	jmp    c002c187 <ATAPI::readyForCommand()+0x4d>
c002c185:	b0 01                	mov    al,0x1
c002c187:	5a                   	pop    edx
c002c188:	5b                   	pop    ebx
c002c189:	5e                   	pop    esi
c002c18a:	c3                   	ret    
c002c18b:	90                   	nop

c002c18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c18c:	55                   	push   ebp
c002c18d:	57                   	push   edi
c002c18e:	56                   	push   esi
c002c18f:	53                   	push   ebx
c002c190:	83 ec 20             	sub    esp,0x20
c002c193:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c197:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c19b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c19f:	6a 01                	push   0x1
c002c1a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c1a8:	50                   	push   eax
c002c1a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1af:	e8 56 e9 ff ff       	call   c002ab0a <IDE::enableIRQs(unsigned char, bool)>
c002c1b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c1bb:	59                   	pop    ecx
c002c1bc:	5e                   	pop    esi
c002c1bd:	50                   	push   eax
c002c1be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1c4:	e8 0d e7 ff ff       	call   c002a8d6 <IDE::prepareInterrupt(unsigned char)>
c002c1c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c1cc:	e8 69 ff ff ff       	call   c002c13a <ATAPI::readyForCommand()>
c002c1d1:	83 c4 10             	add    esp,0x10
c002c1d4:	84 c0                	test   al,al
c002c1d6:	75 0a                	jne    c002c1e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c1d8:	bb 01 00 00 00       	mov    ebx,0x1
c002c1dd:	e9 5f 02 00 00       	jmp    c002c441 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c1e2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c1e8:	c1 e0 04             	shl    eax,0x4
c002c1eb:	0f b6 c0             	movzx  eax,al
c002c1ee:	50                   	push   eax
c002c1ef:	6a 06                	push   0x6
c002c1f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c1f8:	50                   	push   eax
c002c1f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1ff:	e8 f8 e6 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c204:	6a 00                	push   0x0
c002c206:	6a 01                	push   0x1
c002c208:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c20f:	50                   	push   eax
c002c210:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c216:	e8 e1 e6 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c21b:	83 c4 20             	add    esp,0x20
c002c21e:	0f b6 c3             	movzx  eax,bl
c002c221:	50                   	push   eax
c002c222:	0f b6 df             	movzx  ebx,bh
c002c225:	6a 04                	push   0x4
c002c227:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c22e:	50                   	push   eax
c002c22f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c235:	e8 c2 e6 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c23a:	53                   	push   ebx
c002c23b:	6a 05                	push   0x5
c002c23d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c244:	50                   	push   eax
c002c245:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c24b:	e8 ac e6 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c250:	83 c4 20             	add    esp,0x20
c002c253:	68 a0 00 00 00       	push   0xa0
c002c258:	6a 07                	push   0x7
c002c25a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c261:	50                   	push   eax
c002c262:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c268:	e8 8f e6 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c26d:	83 c4 0c             	add    esp,0xc
c002c270:	6a 01                	push   0x1
c002c272:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c279:	50                   	push   eax
c002c27a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c280:	e8 5b f1 ff ff       	call   c002b3e0 <IDE::polling(unsigned char, unsigned int)>
c002c285:	83 c4 10             	add    esp,0x10
c002c288:	0f b6 d8             	movzx  ebx,al
c002c28b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c291:	85 db                	test   ebx,ebx
c002c293:	74 20                	je     c002c2b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c295:	53                   	push   ebx
c002c296:	0f b6 c0             	movzx  eax,al
c002c299:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c2a0:	52                   	push   edx
c002c2a1:	50                   	push   eax
c002c2a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c2a8:	e8 79 f0 ff ff       	call   c002b326 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c2ad:	83 c4 10             	add    esp,0x10
c002c2b0:	e9 8c 01 00 00       	jmp    c002c441 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c2b5:	52                   	push   edx
c002c2b6:	0f b6 c0             	movzx  eax,al
c002c2b9:	52                   	push   edx
c002c2ba:	50                   	push   eax
c002c2bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c2c1:	e8 24 e6 ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002c2c6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c2ca:	b9 06 00 00 00       	mov    ecx,0x6
c002c2cf:	89 c2                	mov    edx,eax
c002c2d1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c2d4:	89 e8                	mov    eax,ebp
c002c2d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c2da:	83 c4 10             	add    esp,0x10
c002c2dd:	0f b6 c0             	movzx  eax,al
c002c2e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c2e4:	85 db                	test   ebx,ebx
c002c2e6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c2ec:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c2f3:	0f 84 eb 00 00 00    	je     c002c3e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c2f9:	55                   	push   ebp
c002c2fa:	55                   	push   ebp
c002c2fb:	52                   	push   edx
c002c2fc:	50                   	push   eax
c002c2fd:	e8 6e e7 ff ff       	call   c002aa70 <IDE::waitInterrupt(unsigned char)>
c002c302:	83 c4 10             	add    esp,0x10
c002c305:	84 c0                	test   al,al
c002c307:	0f 84 cb fe ff ff    	je     c002c1d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c30d:	56                   	push   esi
c002c30e:	56                   	push   esi
c002c30f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c316:	50                   	push   eax
c002c317:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c31d:	e8 b4 e5 ff ff       	call   c002a8d6 <IDE::prepareInterrupt(unsigned char)>
c002c322:	83 c4 0c             	add    esp,0xc
c002c325:	6a 04                	push   0x4
c002c327:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c32e:	50                   	push   eax
c002c32f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c335:	e8 82 e6 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002c33a:	83 c4 0c             	add    esp,0xc
c002c33d:	6a 05                	push   0x5
c002c33f:	89 c6                	mov    esi,eax
c002c341:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c348:	50                   	push   eax
c002c349:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c34f:	e8 68 e6 ff ff       	call   c002a9bc <IDE::read(unsigned char, unsigned char)>
c002c354:	83 c4 10             	add    esp,0x10
c002c357:	0f b6 e8             	movzx  ebp,al
c002c35a:	89 f0                	mov    eax,esi
c002c35c:	c1 e5 08             	shl    ebp,0x8
c002c35f:	0f b6 f0             	movzx  esi,al
c002c362:	09 f5                	or     ebp,esi
c002c364:	31 f6                	xor    esi,esi
c002c366:	d1 fd                	sar    ebp,1
c002c368:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c36d:	74 5c                	je     c002c3cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c36f:	39 ee                	cmp    esi,ebp
c002c371:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c377:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c37e:	75 0d                	jne    c002c38d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002c380:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002c383:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002c387:	4b                   	dec    ebx
c002c388:	e9 57 ff ff ff       	jmp    c002c2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002c38d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002c391:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002c395:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002c39a:	51                   	push   ecx
c002c39b:	51                   	push   ecx
c002c39c:	52                   	push   edx
c002c39d:	50                   	push   eax
c002c39e:	e8 47 e5 ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002c3a3:	89 c2                	mov    edx,eax
c002c3a5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002c3aa:	66 ef                	out    dx,ax
c002c3ac:	46                   	inc    esi
c002c3ad:	83 c4 10             	add    esp,0x10
c002c3b0:	eb bd                	jmp    c002c36f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002c3b2:	51                   	push   ecx
c002c3b3:	51                   	push   ecx
c002c3b4:	52                   	push   edx
c002c3b5:	50                   	push   eax
c002c3b6:	e8 2f e5 ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002c3bb:	89 c2                	mov    edx,eax
c002c3bd:	66 ed                	in     ax,dx
c002c3bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002c3c3:	83 c4 10             	add    esp,0x10
c002c3c6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002c3ca:	46                   	inc    esi
c002c3cb:	39 ee                	cmp    esi,ebp
c002c3cd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c3d3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c3da:	75 d6                	jne    c002c3b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002c3dc:	01 f6                	add    esi,esi
c002c3de:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002c3e2:	eb a3                	jmp    c002c387 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002c3e4:	51                   	push   ecx
c002c3e5:	51                   	push   ecx
c002c3e6:	52                   	push   edx
c002c3e7:	50                   	push   eax
c002c3e8:	e8 83 e6 ff ff       	call   c002aa70 <IDE::waitInterrupt(unsigned char)>
c002c3ed:	83 c4 10             	add    esp,0x10
c002c3f0:	84 c0                	test   al,al
c002c3f2:	0f 84 e0 fd ff ff    	je     c002c1d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c3f8:	52                   	push   edx
c002c3f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c3fe:	52                   	push   edx
c002c3ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c406:	50                   	push   eax
c002c407:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c40d:	e8 c4 e4 ff ff       	call   c002a8d6 <IDE::prepareInterrupt(unsigned char)>
c002c412:	83 c4 10             	add    esp,0x10
c002c415:	50                   	push   eax
c002c416:	50                   	push   eax
c002c417:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c41e:	50                   	push   eax
c002c41f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c425:	e8 c0 e4 ff ff       	call   c002a8ea <IDE::getBase(unsigned char)>
c002c42a:	8d 50 07             	lea    edx,[eax+0x7]
c002c42d:	ec                   	in     al,dx
c002c42e:	83 c4 10             	add    esp,0x10
c002c431:	a8 88                	test   al,0x88
c002c433:	74 0a                	je     c002c43f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002c435:	4b                   	dec    ebx
c002c436:	75 dd                	jne    c002c415 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002c438:	bb 02 00 00 00       	mov    ebx,0x2
c002c43d:	eb 02                	jmp    c002c441 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c43f:	31 db                	xor    ebx,ebx
c002c441:	83 c4 1c             	add    esp,0x1c
c002c444:	89 d8                	mov    eax,ebx
c002c446:	5b                   	pop    ebx
c002c447:	5e                   	pop    esi
c002c448:	5f                   	pop    edi
c002c449:	5d                   	pop    ebp
c002c44a:	c3                   	ret    
c002c44b:	90                   	nop

c002c44c <ATAPI::diskRemoved()>:
c002c44c:	53                   	push   ebx
c002c44d:	83 ec 14             	sub    esp,0x14
c002c450:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c454:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c45b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c461:	e8 72 01 ff ff       	call   c001c5d8 <LogicalDisk::unmount()>
c002c466:	58                   	pop    eax
c002c467:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c46d:	e8 46 0b ff ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c002c472:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c478:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c47c:	83 c4 18             	add    esp,0x18
c002c47f:	5b                   	pop    ebx
c002c480:	e9 23 0b ff ff       	jmp    c001cfa8 <VCache::invalidateReadBuffer()>
c002c485:	90                   	nop

c002c486 <ATAPI::eject()>:
c002c486:	57                   	push   edi
c002c487:	b9 03 00 00 00       	mov    ecx,0x3
c002c48c:	53                   	push   ebx
c002c48d:	83 ec 14             	sub    esp,0x14
c002c490:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c494:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c498:	fc                   	cld    
c002c499:	31 c0                	xor    eax,eax
c002c49b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c49d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c4a2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c4a7:	50                   	push   eax
c002c4a8:	50                   	push   eax
c002c4a9:	6a 00                	push   0x0
c002c4ab:	6a 00                	push   0x0
c002c4ad:	6a 00                	push   0x0
c002c4af:	6a 02                	push   0x2
c002c4b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c4b5:	50                   	push   eax
c002c4b6:	53                   	push   ebx
c002c4b7:	e8 d0 fc ff ff       	call   c002c18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c4bc:	83 c4 14             	add    esp,0x14
c002c4bf:	53                   	push   ebx
c002c4c0:	e8 87 ff ff ff       	call   c002c44c <ATAPI::diskRemoved()>
c002c4c5:	83 c4 24             	add    esp,0x24
c002c4c8:	31 c0                	xor    eax,eax
c002c4ca:	5b                   	pop    ebx
c002c4cb:	5f                   	pop    edi
c002c4cc:	c3                   	ret    
c002c4cd:	90                   	nop

c002c4ce <ATAPI::diskInserted()>:
c002c4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c4d2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c4d9:	c3                   	ret    

c002c4da <ATAPI::detectMedia()>:
c002c4da:	56                   	push   esi
c002c4db:	53                   	push   ebx
c002c4dc:	83 ec 28             	sub    esp,0x28
c002c4df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c4e3:	6a 0c                	push   0xc
c002c4e5:	6a 00                	push   0x0
c002c4e7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c4eb:	56                   	push   esi
c002c4ec:	e8 ff 3f fd ff       	call   c00004f0 <memset>
c002c4f1:	58                   	pop    eax
c002c4f2:	5a                   	pop    edx
c002c4f3:	6a 00                	push   0x0
c002c4f5:	6a 00                	push   0x0
c002c4f7:	6a 00                	push   0x0
c002c4f9:	6a 00                	push   0x0
c002c4fb:	56                   	push   esi
c002c4fc:	53                   	push   ebx
c002c4fd:	e8 8a fc ff ff       	call   c002c18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c502:	83 c4 1c             	add    esp,0x1c
c002c505:	6a 0c                	push   0xc
c002c507:	6a 00                	push   0x0
c002c509:	56                   	push   esi
c002c50a:	e8 e1 3f fd ff       	call   c00004f0 <memset>
c002c50f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c514:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c519:	59                   	pop    ecx
c002c51a:	58                   	pop    eax
c002c51b:	6a 01                	push   0x1
c002c51d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c521:	50                   	push   eax
c002c522:	6a 00                	push   0x0
c002c524:	6a 12                	push   0x12
c002c526:	56                   	push   esi
c002c527:	53                   	push   ebx
c002c528:	e8 5f fc ff ff       	call   c002c18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c52d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c531:	83 c4 20             	add    esp,0x20
c002c534:	83 e0 7f             	and    eax,0x7f
c002c537:	83 f8 70             	cmp    eax,0x70
c002c53a:	74 15                	je     c002c551 <ATAPI::detectMedia()+0x77>
c002c53c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c543:	75 0c                	jne    c002c551 <ATAPI::detectMedia()+0x77>
c002c545:	83 ec 0c             	sub    esp,0xc
c002c548:	53                   	push   ebx
c002c549:	e8 80 ff ff ff       	call   c002c4ce <ATAPI::diskInserted()>
c002c54e:	83 c4 10             	add    esp,0x10
c002c551:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c555:	83 e0 0f             	and    eax,0xf
c002c558:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c55d:	0f b6 c0             	movzx  eax,al
c002c560:	75 19                	jne    c002c57b <ATAPI::detectMedia()+0xa1>
c002c562:	83 f8 02             	cmp    eax,0x2
c002c565:	75 14                	jne    c002c57b <ATAPI::detectMedia()+0xa1>
c002c567:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c56e:	74 24                	je     c002c594 <ATAPI::detectMedia()+0xba>
c002c570:	83 ec 0c             	sub    esp,0xc
c002c573:	53                   	push   ebx
c002c574:	e8 d3 fe ff ff       	call   c002c44c <ATAPI::diskRemoved()>
c002c579:	eb 16                	jmp    c002c591 <ATAPI::detectMedia()+0xb7>
c002c57b:	85 c0                	test   eax,eax
c002c57d:	75 15                	jne    c002c594 <ATAPI::detectMedia()+0xba>
c002c57f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c586:	75 0c                	jne    c002c594 <ATAPI::detectMedia()+0xba>
c002c588:	83 ec 0c             	sub    esp,0xc
c002c58b:	53                   	push   ebx
c002c58c:	e8 3d ff ff ff       	call   c002c4ce <ATAPI::diskInserted()>
c002c591:	83 c4 10             	add    esp,0x10
c002c594:	83 c4 24             	add    esp,0x24
c002c597:	5b                   	pop    ebx
c002c598:	5e                   	pop    esi
c002c599:	c3                   	ret    

c002c59a <ATAPI::open(int, int, void*)>:
c002c59a:	56                   	push   esi
c002c59b:	53                   	push   ebx
c002c59c:	50                   	push   eax
c002c59d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c5a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c5a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c5a9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c5af:	c1 e0 06             	shl    eax,0x6
c002c5b2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c5b8:	01 d0                	add    eax,edx
c002c5ba:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c5c1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c5c7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c5ce:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c5d8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c5df:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c5e5:	6a 04                	push   0x4
c002c5e7:	6a 0c                	push   0xc
c002c5e9:	51                   	push   ecx
c002c5ea:	52                   	push   edx
c002c5eb:	e8 0c e3 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5f0:	90                   	nop
c002c5f1:	90                   	nop
c002c5f2:	6a 00                	push   0x0
c002c5f4:	6a 0c                	push   0xc
c002c5f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c5fd:	50                   	push   eax
c002c5fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c604:	e8 f3 e2 ff ff       	call   c002a8fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c609:	83 c4 14             	add    esp,0x14
c002c60c:	68 78 01 00 00       	push   0x178
c002c611:	e8 79 9d fe ff       	call   c001638f <malloc>
c002c616:	83 c4 0c             	add    esp,0xc
c002c619:	6a 00                	push   0x0
c002c61b:	68 ff ff ff 7f       	push   0x7fffffff
c002c620:	6a 00                	push   0x0
c002c622:	6a 00                	push   0x0
c002c624:	53                   	push   ebx
c002c625:	68 47 36 03 c0       	push   0xc0033647
c002c62a:	89 c6                	mov    esi,eax
c002c62c:	50                   	push   eax
c002c62d:	e8 e4 fd fe ff       	call   c001c416 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c632:	83 c4 14             	add    esp,0x14
c002c635:	56                   	push   esi
c002c636:	e8 9b fe fe ff       	call   c001c4d6 <LogicalDisk::assignDriveLetter()>
c002c63b:	5a                   	pop    edx
c002c63c:	59                   	pop    ecx
c002c63d:	0f be c0             	movsx  eax,al
c002c640:	50                   	push   eax
c002c641:	68 8c 34 03 c0       	push   0xc003348c
c002c646:	e8 7b cb fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002c64b:	58                   	pop    eax
c002c64c:	5a                   	pop    edx
c002c64d:	56                   	push   esi
c002c64e:	53                   	push   ebx
c002c64f:	e8 08 ec fe ff       	call   c001b25c <Device::addChild(Device*)>
c002c654:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c65a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c65d:	e8 44 f0 fe ff       	call   c001b6a6 <PhysicalDisk::startCache()>
c002c662:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c66c:	e8 69 fe ff ff       	call   c002c4da <ATAPI::detectMedia()>
c002c671:	83 c4 14             	add    esp,0x14
c002c674:	31 c0                	xor    eax,eax
c002c676:	5b                   	pop    ebx
c002c677:	5e                   	pop    esi
c002c678:	c3                   	ret    
c002c679:	90                   	nop

c002c67a <ATAPI::read(unsigned long long, int, void*)>:
c002c67a:	55                   	push   ebp
c002c67b:	57                   	push   edi
c002c67c:	56                   	push   esi
c002c67d:	53                   	push   ebx
c002c67e:	83 ec 1c             	sub    esp,0x1c
c002c681:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c685:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c689:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c68d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c694:	74 3c                	je     c002c6d2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c696:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c69a:	b9 03 00 00 00       	mov    ecx,0x3
c002c69f:	fc                   	cld    
c002c6a0:	31 c0                	xor    eax,eax
c002c6a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c6a4:	89 e8                	mov    eax,ebp
c002c6a6:	0f ce                	bswap  esi
c002c6a8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c6ac:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c6b1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c6b5:	50                   	push   eax
c002c6b6:	50                   	push   eax
c002c6b7:	55                   	push   ebp
c002c6b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c6bc:	c1 e5 0b             	shl    ebp,0xb
c002c6bf:	6a 00                	push   0x0
c002c6c1:	55                   	push   ebp
c002c6c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c6c6:	50                   	push   eax
c002c6c7:	53                   	push   ebx
c002c6c8:	e8 bf fa ff ff       	call   c002c18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c6cd:	83 c4 20             	add    esp,0x20
c002c6d0:	eb 1a                	jmp    c002c6ec <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c6d2:	83 ec 0c             	sub    esp,0xc
c002c6d5:	53                   	push   ebx
c002c6d6:	e8 ff fd ff ff       	call   c002c4da <ATAPI::detectMedia()>
c002c6db:	83 c4 10             	add    esp,0x10
c002c6de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c6e5:	75 af                	jne    c002c696 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c6e7:	b8 02 00 00 00       	mov    eax,0x2
c002c6ec:	83 c4 1c             	add    esp,0x1c
c002c6ef:	5b                   	pop    ebx
c002c6f0:	5e                   	pop    esi
c002c6f1:	5f                   	pop    edi
c002c6f2:	5d                   	pop    ebp
c002c6f3:	c3                   	ret    

c002c6f4 <SATA::close(int, int, void*)>:
c002c6f4:	83 ec 0c             	sub    esp,0xc
c002c6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c6fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c701:	85 c0                	test   eax,eax
c002c703:	74 0c                	je     c002c711 <SATA::close(int, int, void*)+0x1d>
c002c705:	8b 10                	mov    edx,DWORD PTR [eax]
c002c707:	83 ec 0c             	sub    esp,0xc
c002c70a:	50                   	push   eax
c002c70b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c70e:	83 c4 10             	add    esp,0x10
c002c711:	31 c0                	xor    eax,eax
c002c713:	83 c4 0c             	add    esp,0xc
c002c716:	c3                   	ret    
c002c717:	90                   	nop

c002c718 <SATA::powerSaving(PowerSavingLevel)>:
c002c718:	c3                   	ret    
c002c719:	90                   	nop

c002c71a <SATA::open(int, int, void*)>:
c002c71a:	56                   	push   esi
c002c71b:	53                   	push   ebx
c002c71c:	83 ec 10             	sub    esp,0x10
c002c71f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c723:	68 d4 34 03 c0       	push   0xc00334d4
c002c728:	e8 99 ca fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002c72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002c731:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c73b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002c745:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002c74b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c74f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c759:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c760:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002c766:	e8 33 9f fe ff       	call   c001669e <Phys::allocatePage()>
c002c76b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c771:	89 c6                	mov    esi,eax
c002c773:	e8 26 9f fe ff       	call   c001669e <Phys::allocatePage()>
c002c778:	81 c6 00 10 00 00    	add    esi,0x1000
c002c77e:	83 c4 10             	add    esp,0x10
c002c781:	39 c6                	cmp    esi,eax
c002c783:	74 10                	je     c002c795 <SATA::open(int, int, void*)+0x7b>
c002c785:	83 ec 0c             	sub    esp,0xc
c002c788:	68 e0 34 03 c0       	push   0xc00334e0
c002c78d:	e8 e1 38 ff ff       	call   c0020073 <KePanic(char const*)>
c002c792:	83 c4 10             	add    esp,0x10
c002c795:	83 ec 0c             	sub    esp,0xc
c002c798:	6a 02                	push   0x2
c002c79a:	e8 12 b7 fe ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c002c79f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c7a5:	6a 03                	push   0x3
c002c7a7:	50                   	push   eax
c002c7a8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002c7ae:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002c7b4:	e8 01 be fe ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c002c7b9:	83 c4 14             	add    esp,0x14
c002c7bc:	53                   	push   ebx
c002c7bd:	e8 e4 ee fe ff       	call   c001b6a6 <PhysicalDisk::startCache()>
c002c7c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c7c5:	e8 20 01 ff ff       	call   c001c8ea <createPartitionsForDisk(PhysicalDisk*)>
c002c7ca:	83 c4 14             	add    esp,0x14
c002c7cd:	31 c0                	xor    eax,eax
c002c7cf:	5b                   	pop    ebx
c002c7d0:	5e                   	pop    esi
c002c7d1:	c3                   	ret    

c002c7d2 <SATA::SATA()>:
c002c7d2:	83 ec 0c             	sub    esp,0xc
c002c7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c7d9:	83 ec 04             	sub    esp,0x4
c002c7dc:	68 00 02 00 00       	push   0x200
c002c7e1:	68 f4 34 03 c0       	push   0xc00334f4
c002c7e6:	50                   	push   eax
c002c7e7:	e8 52 ee fe ff       	call   c001b63e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c7ec:	83 c4 10             	add    esp,0x10
c002c7ef:	ba 64 35 03 c0       	mov    edx,0xc0033564
c002c7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c7f8:	89 10                	mov    DWORD PTR [eax],edx
c002c7fa:	90                   	nop
c002c7fb:	83 c4 0c             	add    esp,0xc
c002c7fe:	c3                   	ret    
c002c7ff:	90                   	nop

c002c800 <SATA::access(unsigned long long, int, void*, bool)>:
c002c800:	55                   	push   ebp
c002c801:	57                   	push   edi
c002c802:	56                   	push   esi
c002c803:	53                   	push   ebx
c002c804:	83 ec 2c             	sub    esp,0x2c
c002c807:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002c80b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c80f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002c813:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002c817:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002c81b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c81f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c823:	fa                   	cli    
c002c824:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002c82a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002c82f:	7e 10                	jle    c002c841 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002c831:	83 ec 0c             	sub    esp,0xc
c002c834:	68 04 35 03 c0       	push   0xc0033504
c002c839:	e8 35 38 ff ff       	call   c0020073 <KePanic(char const*)>
c002c83e:	83 c4 10             	add    esp,0x10
c002c841:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002c847:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002c84d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002c853:	89 e8                	mov    eax,ebp
c002c855:	c1 e0 07             	shl    eax,0x7
c002c858:	01 d0                	add    eax,edx
c002c85a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002c864:	8d 45 02             	lea    eax,[ebp+0x2]
c002c867:	51                   	push   ecx
c002c868:	c1 e0 07             	shl    eax,0x7
c002c86b:	51                   	push   ecx
c002c86c:	01 d0                	add    eax,edx
c002c86e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002c872:	50                   	push   eax
c002c873:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002c879:	e8 42 ec ff ff       	call   c002b4c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002c87e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002c882:	83 c4 10             	add    esp,0x10
c002c885:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002c88a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002c88e:	0f 84 ac 01 00 00    	je     c002ca40 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002c894:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002c898:	c1 e0 09             	shl    eax,0x9
c002c89b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002c8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002c8a4:	74 0e                	je     c002c8b4 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002c8a6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002c8ac:	89 c1                	mov    ecx,eax
c002c8ae:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002c8b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002c8b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002c8b8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002c8be:	8d 45 02             	lea    eax,[ebp+0x2]
c002c8c1:	c1 e0 07             	shl    eax,0x7
c002c8c4:	01 d0                	add    eax,edx
c002c8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c002c8c8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002c8ce:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002c8d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002c8d8:	c1 e1 05             	shl    ecx,0x5
c002c8db:	01 c8                	add    eax,ecx
c002c8dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c8e1:	83 e1 01             	and    ecx,0x1
c002c8e4:	89 ce                	mov    esi,ecx
c002c8e6:	8a 08                	mov    cl,BYTE PTR [eax]
c002c8e8:	c1 e6 06             	shl    esi,0x6
c002c8eb:	83 e1 bf             	and    ecx,0xffffffbf
c002c8ee:	09 f1                	or     ecx,esi
c002c8f0:	88 08                	mov    BYTE PTR [eax],cl
c002c8f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c002c8f4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002c8fa:	81 c9 05 00 01 00    	or     ecx,0x10005
c002c900:	89 08                	mov    DWORD PTR [eax],ecx
c002c902:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002c908:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002c90e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002c914:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002c917:	50                   	push   eax
c002c918:	68 90 00 00 00       	push   0x90
c002c91d:	6a 00                	push   0x0
c002c91f:	56                   	push   esi
c002c920:	e8 cb 3b fd ff       	call   c00004f0 <memset>
c002c925:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c92b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002c931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002c935:	83 c4 10             	add    esp,0x10
c002c938:	48                   	dec    eax
c002c939:	25 ff ff 3f 00       	and    eax,0x3fffff
c002c93e:	89 c1                	mov    ecx,eax
c002c940:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002c946:	25 00 00 c0 ff       	and    eax,0xffc00000
c002c94b:	09 c8                	or     eax,ecx
c002c94d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002c953:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002c959:	83 c8 80             	or     eax,0xffffff80
c002c95c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002c962:	66 8b 06             	mov    ax,WORD PTR [esi]
c002c965:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c969:	25 00 7f 00 00       	and    eax,0x7f00
c002c96e:	0d 27 80 ff ff       	or     eax,0xffff8027
c002c973:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002c978:	66 89 06             	mov    WORD PTR [esi],ax
c002c97b:	b0 35                	mov    al,0x35
c002c97d:	75 02                	jne    c002c981 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002c97f:	b0 25                	mov    al,0x25
c002c981:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002c984:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002c988:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002c98c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002c990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002c994:	c1 e8 10             	shr    eax,0x10
c002c997:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002c99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002c99e:	c1 e8 18             	shr    eax,0x18
c002c9a1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002c9a4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002c9a8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002c9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c9af:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002c9b2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002c9b6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002c9ba:	89 ee                	mov    esi,ebp
c002c9bc:	31 c0                	xor    eax,eax
c002c9be:	c1 e6 07             	shl    esi,0x7
c002c9c1:	01 d6                	add    esi,edx
c002c9c3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002c9c9:	80 e1 88             	and    cl,0x88
c002c9cc:	74 0a                	je     c002c9d8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002c9ce:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002c9d3:	74 0a                	je     c002c9df <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002c9d5:	40                   	inc    eax
c002c9d6:	eb eb                	jmp    c002c9c3 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002c9d8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002c9dd:	75 0a                	jne    c002c9e9 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002c9df:	83 ec 0c             	sub    esp,0xc
c002c9e2:	68 3d 35 03 c0       	push   0xc003353d
c002c9e7:	eb 34                	jmp    c002ca1d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002c9e9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002c9ed:	c1 e5 07             	shl    ebp,0x7
c002c9f0:	b8 01 00 00 00       	mov    eax,0x1
c002c9f5:	01 ea                	add    edx,ebp
c002c9f7:	d3 e0                	shl    eax,cl
c002c9f9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002c9ff:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002ca05:	85 c8                	test   eax,ecx
c002ca07:	74 2b                	je     c002ca34 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002ca09:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002ca0f:	0f ba e1 1e          	bt     ecx,0x1e
c002ca13:	73 ea                	jae    c002c9ff <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002ca15:	83 ec 0c             	sub    esp,0xc
c002ca18:	68 4b 35 03 c0       	push   0xc003354b
c002ca1d:	e8 a4 c7 fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002ca22:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ca27:	83 c4 10             	add    esp,0x10
c002ca2a:	48                   	dec    eax
c002ca2b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ca30:	85 c0                	test   eax,eax
c002ca32:	eb 17                	jmp    c002ca4b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002ca34:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002ca3a:	0f ba e0 1e          	bt     eax,0x1e
c002ca3e:	73 15                	jae    c002ca55 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002ca40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ca45:	48                   	dec    eax
c002ca46:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ca4b:	75 01                	jne    c002ca4e <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002ca4d:	fb                   	sti    
c002ca4e:	b8 01 00 00 00       	mov    eax,0x1
c002ca53:	eb 29                	jmp    c002ca7e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ca55:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002ca5a:	75 10                	jne    c002ca6c <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002ca5c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002ca62:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002ca66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ca6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ca6c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ca71:	48                   	dec    eax
c002ca72:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ca77:	75 03                	jne    c002ca7c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002ca79:	fb                   	sti    
c002ca7a:	eb 02                	jmp    c002ca7e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ca7c:	31 c0                	xor    eax,eax
c002ca7e:	83 c4 2c             	add    esp,0x2c
c002ca81:	5b                   	pop    ebx
c002ca82:	5e                   	pop    esi
c002ca83:	5f                   	pop    edi
c002ca84:	5d                   	pop    ebp
c002ca85:	c3                   	ret    

c002ca86 <SATA::read(unsigned long long, int, void*)>:
c002ca86:	55                   	push   ebp
c002ca87:	57                   	push   edi
c002ca88:	56                   	push   esi
c002ca89:	be 04 00 00 00       	mov    esi,0x4
c002ca8e:	53                   	push   ebx
c002ca8f:	83 ec 0c             	sub    esp,0xc
c002ca92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002ca96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ca9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002ca9e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002caa2:	8d 7b ff             	lea    edi,[ebx-0x1]
c002caa5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002caab:	0f 87 1a 02 00 00    	ja     c002cccb <SATA::read(unsigned long long, int, void*)+0x245>
c002cab1:	85 c9                	test   ecx,ecx
c002cab3:	be 06 00 00 00       	mov    esi,0x6
c002cab8:	0f 84 0d 02 00 00    	je     c002cccb <SATA::read(unsigned long long, int, void*)+0x245>
c002cabe:	56                   	push   esi
c002cabf:	56                   	push   esi
c002cac0:	6a 00                	push   0x0
c002cac2:	51                   	push   ecx
c002cac3:	53                   	push   ebx
c002cac4:	52                   	push   edx
c002cac5:	50                   	push   eax
c002cac6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002caca:	e8 31 fd ff ff       	call   c002c800 <SATA::access(unsigned long long, int, void*, bool)>
c002cacf:	83 c4 20             	add    esp,0x20
c002cad2:	85 c0                	test   eax,eax
c002cad4:	89 c6                	mov    esi,eax
c002cad6:	0f 85 ea 01 00 00    	jne    c002ccc6 <SATA::read(unsigned long long, int, void*)+0x240>
c002cadc:	50                   	push   eax
c002cadd:	50                   	push   eax
c002cade:	6a 0f                	push   0xf
c002cae0:	6a 00                	push   0x0
c002cae2:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cae8:	bb 0a 00 00 00       	mov    ebx,0xa
c002caed:	e8 3b f2 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002caf2:	5a                   	pop    edx
c002caf3:	59                   	pop    ecx
c002caf4:	b9 10 27 00 00       	mov    ecx,0x2710
c002caf9:	0f b6 c0             	movzx  eax,al
c002cafc:	50                   	push   eax
c002cafd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cb02:	99                   	cdq    
c002cb03:	f7 f9                	idiv   ecx
c002cb05:	99                   	cdq    
c002cb06:	f7 fb                	idiv   ebx
c002cb08:	8d 42 30             	lea    eax,[edx+0x30]
c002cb0b:	0f b6 c0             	movzx  eax,al
c002cb0e:	50                   	push   eax
c002cb0f:	e8 08 f2 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cb14:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cb1a:	5f                   	pop    edi
c002cb1b:	5d                   	pop    ebp
c002cb1c:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cb21:	6a 0f                	push   0xf
c002cb23:	6a 00                	push   0x0
c002cb25:	e8 03 f2 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cb2a:	5a                   	pop    edx
c002cb2b:	59                   	pop    ecx
c002cb2c:	0f b6 c0             	movzx  eax,al
c002cb2f:	50                   	push   eax
c002cb30:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cb35:	99                   	cdq    
c002cb36:	f7 fd                	idiv   ebp
c002cb38:	99                   	cdq    
c002cb39:	f7 fb                	idiv   ebx
c002cb3b:	8d 42 30             	lea    eax,[edx+0x30]
c002cb3e:	0f b6 c0             	movzx  eax,al
c002cb41:	50                   	push   eax
c002cb42:	e8 d5 f1 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cb47:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cb4d:	5f                   	pop    edi
c002cb4e:	bf 64 00 00 00       	mov    edi,0x64
c002cb53:	58                   	pop    eax
c002cb54:	6a 0f                	push   0xf
c002cb56:	6a 00                	push   0x0
c002cb58:	e8 d0 f1 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cb5d:	5a                   	pop    edx
c002cb5e:	59                   	pop    ecx
c002cb5f:	0f b6 c0             	movzx  eax,al
c002cb62:	50                   	push   eax
c002cb63:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cb68:	99                   	cdq    
c002cb69:	f7 ff                	idiv   edi
c002cb6b:	99                   	cdq    
c002cb6c:	f7 fb                	idiv   ebx
c002cb6e:	8d 42 30             	lea    eax,[edx+0x30]
c002cb71:	0f b6 c0             	movzx  eax,al
c002cb74:	50                   	push   eax
c002cb75:	e8 a2 f1 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cb7a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cb80:	58                   	pop    eax
c002cb81:	5a                   	pop    edx
c002cb82:	6a 0f                	push   0xf
c002cb84:	6a 00                	push   0x0
c002cb86:	e8 a2 f1 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cb8b:	59                   	pop    ecx
c002cb8c:	5a                   	pop    edx
c002cb8d:	0f b6 c0             	movzx  eax,al
c002cb90:	50                   	push   eax
c002cb91:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cb96:	99                   	cdq    
c002cb97:	f7 fb                	idiv   ebx
c002cb99:	99                   	cdq    
c002cb9a:	f7 fb                	idiv   ebx
c002cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c002cb9f:	0f b6 c0             	movzx  eax,al
c002cba2:	50                   	push   eax
c002cba3:	e8 74 f1 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cba8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cbae:	59                   	pop    ecx
c002cbaf:	58                   	pop    eax
c002cbb0:	6a 0f                	push   0xf
c002cbb2:	6a 00                	push   0x0
c002cbb4:	e8 74 f1 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cbb9:	5a                   	pop    edx
c002cbba:	59                   	pop    ecx
c002cbbb:	0f b6 c0             	movzx  eax,al
c002cbbe:	50                   	push   eax
c002cbbf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cbc4:	99                   	cdq    
c002cbc5:	f7 fb                	idiv   ebx
c002cbc7:	83 c2 30             	add    edx,0x30
c002cbca:	0f b6 d2             	movzx  edx,dl
c002cbcd:	52                   	push   edx
c002cbce:	e8 49 f1 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cbd3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cbd9:	58                   	pop    eax
c002cbda:	5a                   	pop    edx
c002cbdb:	6a 0f                	push   0xf
c002cbdd:	6a 00                	push   0x0
c002cbdf:	e8 49 f1 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cbe4:	59                   	pop    ecx
c002cbe5:	b9 10 27 00 00       	mov    ecx,0x2710
c002cbea:	5a                   	pop    edx
c002cbeb:	0f b6 c0             	movzx  eax,al
c002cbee:	50                   	push   eax
c002cbef:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cbf4:	99                   	cdq    
c002cbf5:	f7 f9                	idiv   ecx
c002cbf7:	99                   	cdq    
c002cbf8:	f7 fb                	idiv   ebx
c002cbfa:	8d 42 30             	lea    eax,[edx+0x30]
c002cbfd:	0f b6 c0             	movzx  eax,al
c002cc00:	50                   	push   eax
c002cc01:	e8 16 f1 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cc06:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cc0c:	59                   	pop    ecx
c002cc0d:	58                   	pop    eax
c002cc0e:	6a 0f                	push   0xf
c002cc10:	6a 00                	push   0x0
c002cc12:	e8 16 f1 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cc17:	5a                   	pop    edx
c002cc18:	59                   	pop    ecx
c002cc19:	0f b6 c0             	movzx  eax,al
c002cc1c:	50                   	push   eax
c002cc1d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cc22:	99                   	cdq    
c002cc23:	f7 fd                	idiv   ebp
c002cc25:	99                   	cdq    
c002cc26:	f7 fb                	idiv   ebx
c002cc28:	8d 42 30             	lea    eax,[edx+0x30]
c002cc2b:	0f b6 c0             	movzx  eax,al
c002cc2e:	50                   	push   eax
c002cc2f:	e8 e8 f0 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cc34:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cc3a:	5d                   	pop    ebp
c002cc3b:	58                   	pop    eax
c002cc3c:	6a 0f                	push   0xf
c002cc3e:	6a 00                	push   0x0
c002cc40:	e8 e8 f0 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cc45:	5a                   	pop    edx
c002cc46:	59                   	pop    ecx
c002cc47:	0f b6 c0             	movzx  eax,al
c002cc4a:	50                   	push   eax
c002cc4b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cc50:	99                   	cdq    
c002cc51:	f7 ff                	idiv   edi
c002cc53:	99                   	cdq    
c002cc54:	f7 fb                	idiv   ebx
c002cc56:	8d 42 30             	lea    eax,[edx+0x30]
c002cc59:	0f b6 c0             	movzx  eax,al
c002cc5c:	50                   	push   eax
c002cc5d:	e8 ba f0 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cc62:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cc68:	5f                   	pop    edi
c002cc69:	5d                   	pop    ebp
c002cc6a:	6a 0f                	push   0xf
c002cc6c:	6a 00                	push   0x0
c002cc6e:	e8 ba f0 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cc73:	5a                   	pop    edx
c002cc74:	59                   	pop    ecx
c002cc75:	0f b6 c0             	movzx  eax,al
c002cc78:	50                   	push   eax
c002cc79:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cc7e:	99                   	cdq    
c002cc7f:	f7 fb                	idiv   ebx
c002cc81:	99                   	cdq    
c002cc82:	f7 fb                	idiv   ebx
c002cc84:	8d 42 30             	lea    eax,[edx+0x30]
c002cc87:	0f b6 c0             	movzx  eax,al
c002cc8a:	50                   	push   eax
c002cc8b:	e8 8c f0 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cc90:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cc96:	5f                   	pop    edi
c002cc97:	5d                   	pop    ebp
c002cc98:	6a 0f                	push   0xf
c002cc9a:	6a 00                	push   0x0
c002cc9c:	e8 8c f0 ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cca1:	5a                   	pop    edx
c002cca2:	59                   	pop    ecx
c002cca3:	0f b6 c0             	movzx  eax,al
c002cca6:	50                   	push   eax
c002cca7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ccac:	99                   	cdq    
c002ccad:	f7 fb                	idiv   ebx
c002ccaf:	83 c2 30             	add    edx,0x30
c002ccb2:	0f b6 d2             	movzx  edx,dl
c002ccb5:	52                   	push   edx
c002ccb6:	e8 61 f0 ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002ccbb:	83 c4 10             	add    esp,0x10
c002ccbe:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002ccc4:	eb 05                	jmp    c002cccb <SATA::read(unsigned long long, int, void*)+0x245>
c002ccc6:	be 01 00 00 00       	mov    esi,0x1
c002cccb:	83 c4 0c             	add    esp,0xc
c002ccce:	89 f0                	mov    eax,esi
c002ccd0:	5b                   	pop    ebx
c002ccd1:	5e                   	pop    esi
c002ccd2:	5f                   	pop    edi
c002ccd3:	5d                   	pop    ebp
c002ccd4:	c3                   	ret    
c002ccd5:	90                   	nop

c002ccd6 <SATA::write(unsigned long long, int, void*)>:
c002ccd6:	55                   	push   ebp
c002ccd7:	57                   	push   edi
c002ccd8:	56                   	push   esi
c002ccd9:	53                   	push   ebx
c002ccda:	83 ec 0c             	sub    esp,0xc
c002ccdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cce1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002cce5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cce9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cced:	8d 70 ff             	lea    esi,[eax-0x1]
c002ccf0:	b8 04 00 00 00       	mov    eax,0x4
c002ccf5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002ccfb:	0f 87 2c 02 00 00    	ja     c002cf2d <SATA::write(unsigned long long, int, void*)+0x257>
c002cd01:	85 db                	test   ebx,ebx
c002cd03:	b8 06 00 00 00       	mov    eax,0x6
c002cd08:	0f 84 1f 02 00 00    	je     c002cf2d <SATA::write(unsigned long long, int, void*)+0x257>
c002cd0e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002cd12:	c1 e6 09             	shl    esi,0x9
c002cd15:	01 de                	add    esi,ebx
c002cd17:	50                   	push   eax
c002cd18:	89 d7                	mov    edi,edx
c002cd1a:	50                   	push   eax
c002cd1b:	83 c7 01             	add    edi,0x1
c002cd1e:	6a 01                	push   0x1
c002cd20:	89 cd                	mov    ebp,ecx
c002cd22:	53                   	push   ebx
c002cd23:	83 d5 00             	adc    ebp,0x0
c002cd26:	6a 01                	push   0x1
c002cd28:	81 c3 00 02 00 00    	add    ebx,0x200
c002cd2e:	51                   	push   ecx
c002cd2f:	52                   	push   edx
c002cd30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cd34:	e8 c7 fa ff ff       	call   c002c800 <SATA::access(unsigned long long, int, void*, bool)>
c002cd39:	83 c4 20             	add    esp,0x20
c002cd3c:	39 f3                	cmp    ebx,esi
c002cd3e:	89 fa                	mov    edx,edi
c002cd40:	89 e9                	mov    ecx,ebp
c002cd42:	75 d3                	jne    c002cd17 <SATA::write(unsigned long long, int, void*)+0x41>
c002cd44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cd48:	bd 10 27 00 00       	mov    ebp,0x2710
c002cd4d:	bb 0a 00 00 00       	mov    ebx,0xa
c002cd52:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002cd58:	50                   	push   eax
c002cd59:	50                   	push   eax
c002cd5a:	6a 0f                	push   0xf
c002cd5c:	6a 00                	push   0x0
c002cd5e:	e8 ca ef ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cd63:	5a                   	pop    edx
c002cd64:	59                   	pop    ecx
c002cd65:	0f b6 c0             	movzx  eax,al
c002cd68:	50                   	push   eax
c002cd69:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd6e:	99                   	cdq    
c002cd6f:	f7 fd                	idiv   ebp
c002cd71:	99                   	cdq    
c002cd72:	f7 fb                	idiv   ebx
c002cd74:	8d 42 30             	lea    eax,[edx+0x30]
c002cd77:	0f b6 c0             	movzx  eax,al
c002cd7a:	50                   	push   eax
c002cd7b:	e8 9c ef ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cd80:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cd86:	5e                   	pop    esi
c002cd87:	5f                   	pop    edi
c002cd88:	bf e8 03 00 00       	mov    edi,0x3e8
c002cd8d:	6a 0f                	push   0xf
c002cd8f:	6a 00                	push   0x0
c002cd91:	e8 97 ef ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cd96:	5a                   	pop    edx
c002cd97:	59                   	pop    ecx
c002cd98:	0f b6 c0             	movzx  eax,al
c002cd9b:	50                   	push   eax
c002cd9c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cda1:	99                   	cdq    
c002cda2:	f7 ff                	idiv   edi
c002cda4:	99                   	cdq    
c002cda5:	f7 fb                	idiv   ebx
c002cda7:	8d 42 30             	lea    eax,[edx+0x30]
c002cdaa:	0f b6 c0             	movzx  eax,al
c002cdad:	50                   	push   eax
c002cdae:	e8 69 ef ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cdb3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cdb9:	5e                   	pop    esi
c002cdba:	be 64 00 00 00       	mov    esi,0x64
c002cdbf:	58                   	pop    eax
c002cdc0:	6a 0f                	push   0xf
c002cdc2:	6a 00                	push   0x0
c002cdc4:	e8 64 ef ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cdc9:	5a                   	pop    edx
c002cdca:	59                   	pop    ecx
c002cdcb:	0f b6 c0             	movzx  eax,al
c002cdce:	50                   	push   eax
c002cdcf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdd4:	99                   	cdq    
c002cdd5:	f7 fe                	idiv   esi
c002cdd7:	99                   	cdq    
c002cdd8:	f7 fb                	idiv   ebx
c002cdda:	8d 42 30             	lea    eax,[edx+0x30]
c002cddd:	0f b6 c0             	movzx  eax,al
c002cde0:	50                   	push   eax
c002cde1:	e8 36 ef ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cde6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cdec:	58                   	pop    eax
c002cded:	5a                   	pop    edx
c002cdee:	6a 0f                	push   0xf
c002cdf0:	6a 00                	push   0x0
c002cdf2:	e8 36 ef ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cdf7:	59                   	pop    ecx
c002cdf8:	5a                   	pop    edx
c002cdf9:	0f b6 c0             	movzx  eax,al
c002cdfc:	50                   	push   eax
c002cdfd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce02:	99                   	cdq    
c002ce03:	f7 fb                	idiv   ebx
c002ce05:	99                   	cdq    
c002ce06:	f7 fb                	idiv   ebx
c002ce08:	8d 42 30             	lea    eax,[edx+0x30]
c002ce0b:	0f b6 c0             	movzx  eax,al
c002ce0e:	50                   	push   eax
c002ce0f:	e8 08 ef ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002ce14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002ce1a:	59                   	pop    ecx
c002ce1b:	58                   	pop    eax
c002ce1c:	6a 0f                	push   0xf
c002ce1e:	6a 00                	push   0x0
c002ce20:	e8 08 ef ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002ce25:	5a                   	pop    edx
c002ce26:	59                   	pop    ecx
c002ce27:	0f b6 c0             	movzx  eax,al
c002ce2a:	50                   	push   eax
c002ce2b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce30:	99                   	cdq    
c002ce31:	f7 fb                	idiv   ebx
c002ce33:	83 c2 30             	add    edx,0x30
c002ce36:	0f b6 d2             	movzx  edx,dl
c002ce39:	52                   	push   edx
c002ce3a:	e8 dd ee ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002ce3f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ce45:	58                   	pop    eax
c002ce46:	5a                   	pop    edx
c002ce47:	6a 0f                	push   0xf
c002ce49:	6a 00                	push   0x0
c002ce4b:	e8 dd ee ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002ce50:	59                   	pop    ecx
c002ce51:	5a                   	pop    edx
c002ce52:	0f b6 c0             	movzx  eax,al
c002ce55:	50                   	push   eax
c002ce56:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce5b:	99                   	cdq    
c002ce5c:	f7 fd                	idiv   ebp
c002ce5e:	99                   	cdq    
c002ce5f:	f7 fb                	idiv   ebx
c002ce61:	8d 42 30             	lea    eax,[edx+0x30]
c002ce64:	0f b6 c0             	movzx  eax,al
c002ce67:	50                   	push   eax
c002ce68:	e8 af ee ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002ce6d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ce73:	59                   	pop    ecx
c002ce74:	5d                   	pop    ebp
c002ce75:	6a 0f                	push   0xf
c002ce77:	6a 00                	push   0x0
c002ce79:	e8 af ee ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002ce7e:	5a                   	pop    edx
c002ce7f:	59                   	pop    ecx
c002ce80:	0f b6 c0             	movzx  eax,al
c002ce83:	50                   	push   eax
c002ce84:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce89:	99                   	cdq    
c002ce8a:	f7 ff                	idiv   edi
c002ce8c:	99                   	cdq    
c002ce8d:	f7 fb                	idiv   ebx
c002ce8f:	8d 42 30             	lea    eax,[edx+0x30]
c002ce92:	0f b6 c0             	movzx  eax,al
c002ce95:	50                   	push   eax
c002ce96:	e8 81 ee ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002ce9b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cea1:	5f                   	pop    edi
c002cea2:	5d                   	pop    ebp
c002cea3:	6a 0f                	push   0xf
c002cea5:	6a 00                	push   0x0
c002cea7:	e8 81 ee ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002ceac:	5a                   	pop    edx
c002cead:	59                   	pop    ecx
c002ceae:	0f b6 c0             	movzx  eax,al
c002ceb1:	50                   	push   eax
c002ceb2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ceb7:	99                   	cdq    
c002ceb8:	f7 fe                	idiv   esi
c002ceba:	99                   	cdq    
c002cebb:	f7 fb                	idiv   ebx
c002cebd:	8d 42 30             	lea    eax,[edx+0x30]
c002cec0:	0f b6 c0             	movzx  eax,al
c002cec3:	50                   	push   eax
c002cec4:	e8 53 ee ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cec9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cecf:	5e                   	pop    esi
c002ced0:	5f                   	pop    edi
c002ced1:	6a 0f                	push   0xf
c002ced3:	6a 00                	push   0x0
c002ced5:	e8 53 ee ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002ceda:	5d                   	pop    ebp
c002cedb:	5a                   	pop    edx
c002cedc:	0f b6 c0             	movzx  eax,al
c002cedf:	50                   	push   eax
c002cee0:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cee5:	99                   	cdq    
c002cee6:	f7 fb                	idiv   ebx
c002cee8:	99                   	cdq    
c002cee9:	f7 fb                	idiv   ebx
c002ceeb:	8d 42 30             	lea    eax,[edx+0x30]
c002ceee:	0f b6 c0             	movzx  eax,al
c002cef1:	50                   	push   eax
c002cef2:	e8 25 ee ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cef7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cefd:	59                   	pop    ecx
c002cefe:	5e                   	pop    esi
c002ceff:	6a 0f                	push   0xf
c002cf01:	6a 00                	push   0x0
c002cf03:	e8 25 ee ff ff       	call   c002bd2d <combineColours(unsigned char, unsigned char)>
c002cf08:	5f                   	pop    edi
c002cf09:	5d                   	pop    ebp
c002cf0a:	0f b6 c0             	movzx  eax,al
c002cf0d:	50                   	push   eax
c002cf0e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf13:	99                   	cdq    
c002cf14:	f7 fb                	idiv   ebx
c002cf16:	83 c2 30             	add    edx,0x30
c002cf19:	0f b6 d2             	movzx  edx,dl
c002cf1c:	52                   	push   edx
c002cf1d:	e8 fa ed ff ff       	call   c002bd1c <combineCharAndColour(char, unsigned char)>
c002cf22:	83 c4 10             	add    esp,0x10
c002cf25:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cf2b:	31 c0                	xor    eax,eax
c002cf2d:	83 c4 0c             	add    esp,0xc
c002cf30:	5b                   	pop    ebx
c002cf31:	5e                   	pop    esi
c002cf32:	5f                   	pop    edi
c002cf33:	5d                   	pop    ebp
c002cf34:	c3                   	ret    
c002cf35:	90                   	nop

c002cf36 <SATAPI::write(unsigned long long, int, void*)>:
c002cf36:	b8 03 00 00 00       	mov    eax,0x3
c002cf3b:	c3                   	ret    

c002cf3c <SATAPI::close(int, int, void*)>:
c002cf3c:	83 ec 0c             	sub    esp,0xc
c002cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cf43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cf49:	85 c0                	test   eax,eax
c002cf4b:	74 0c                	je     c002cf59 <SATAPI::close(int, int, void*)+0x1d>
c002cf4d:	8b 10                	mov    edx,DWORD PTR [eax]
c002cf4f:	83 ec 0c             	sub    esp,0xc
c002cf52:	50                   	push   eax
c002cf53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cf56:	83 c4 10             	add    esp,0x10
c002cf59:	31 c0                	xor    eax,eax
c002cf5b:	83 c4 0c             	add    esp,0xc
c002cf5e:	c3                   	ret    
c002cf5f:	90                   	nop

c002cf60 <SATAPI::SATAPI()>:
c002cf60:	83 ec 0c             	sub    esp,0xc
c002cf63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cf67:	83 ec 04             	sub    esp,0x4
c002cf6a:	68 00 08 00 00       	push   0x800
c002cf6f:	68 94 35 03 c0       	push   0xc0033594
c002cf74:	50                   	push   eax
c002cf75:	e8 c4 e6 fe ff       	call   c001b63e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cf7a:	83 c4 10             	add    esp,0x10
c002cf7d:	ba 88 36 03 c0       	mov    edx,0xc0033688
c002cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cf86:	89 10                	mov    DWORD PTR [eax],edx
c002cf88:	90                   	nop
c002cf89:	83 c4 0c             	add    esp,0xc
c002cf8c:	c3                   	ret    
c002cf8d:	90                   	nop

c002cf8e <SATAPI::diskRemoved()>:
c002cf8e:	c3                   	ret    
c002cf8f:	90                   	nop

c002cf90 <SATAPI::diskInserted()>:
c002cf90:	83 ec 18             	sub    esp,0x18
c002cf93:	68 a0 35 03 c0       	push   0xc00335a0
c002cf98:	e8 29 c2 fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002cf9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cfa1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002cfa8:	83 c4 1c             	add    esp,0x1c
c002cfab:	c3                   	ret    

c002cfac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002cfac:	55                   	push   ebp
c002cfad:	57                   	push   edi
c002cfae:	56                   	push   esi
c002cfaf:	53                   	push   ebx
c002cfb0:	83 ec 34             	sub    esp,0x34
c002cfb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cfb7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002cfbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cfbf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cfc7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002cfcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cfd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cfd7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002cfdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cfe1:	83 c0 02             	add    eax,0x2
c002cfe4:	c1 e0 07             	shl    eax,0x7
c002cfe7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cfeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cfef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cff3:	c1 e0 07             	shl    eax,0x7
c002cff6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cffe:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d00c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d012:	e8 a9 e4 ff ff       	call   c002b4c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d017:	83 c4 10             	add    esp,0x10
c002d01a:	89 c2                	mov    edx,eax
c002d01c:	b8 01 00 00 00       	mov    eax,0x1
c002d021:	83 fa ff             	cmp    edx,0xffffffff
c002d024:	0f 84 5f 02 00 00    	je     c002d289 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d02a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d032:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d038:	8b 00                	mov    eax,DWORD PTR [eax]
c002d03a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d040:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d046:	89 d1                	mov    ecx,edx
c002d048:	c1 e1 05             	shl    ecx,0x5
c002d04b:	01 c8                	add    eax,ecx
c002d04d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d04f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d055:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d05b:	89 08                	mov    DWORD PTR [eax],ecx
c002d05d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d063:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d069:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d06f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d072:	50                   	push   eax
c002d073:	68 90 00 00 00       	push   0x90
c002d078:	6a 00                	push   0x0
c002d07a:	53                   	push   ebx
c002d07b:	e8 70 34 fd ff       	call   c00004f0 <memset>
c002d080:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d083:	b9 0c 00 00 00       	mov    ecx,0xc
c002d088:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d08c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d08e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d094:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d098:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d09c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d0a2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d0a6:	48                   	dec    eax
c002d0a7:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d0ac:	89 c1                	mov    ecx,eax
c002d0ae:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d0b4:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d0b9:	09 c8                	or     eax,ecx
c002d0bb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d0c1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d0c7:	83 c8 80             	or     eax,0xffffff80
c002d0ca:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d0d0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d0d3:	25 00 7f 00 00       	and    eax,0x7f00
c002d0d8:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d0dd:	66 89 03             	mov    WORD PTR [ebx],ax
c002d0e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d0e4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d0e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d0ec:	c1 e8 10             	shr    eax,0x10
c002d0ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d0f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d0f6:	c1 e8 18             	shr    eax,0x18
c002d0f9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d0fc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d100:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d103:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d107:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d10a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d10e:	83 c4 10             	add    esp,0x10
c002d111:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d115:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d119:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d11d:	31 c0                	xor    eax,eax
c002d11f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d125:	80 e1 88             	and    cl,0x88
c002d128:	74 0a                	je     c002d134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d12a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d12f:	74 0a                	je     c002d13b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d131:	40                   	inc    eax
c002d132:	eb eb                	jmp    c002d11f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d134:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d139:	75 43                	jne    c002d17e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d13b:	83 ec 0c             	sub    esp,0xc
c002d13e:	68 b8 35 03 c0       	push   0xc00335b8
c002d143:	e8 7e c0 fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002d148:	58                   	pop    eax
c002d149:	5a                   	pop    edx
c002d14a:	68 cd 35 03 c0       	push   0xc00335cd
c002d14f:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d155:	e8 0e a2 fe ff       	call   c0017368 <VgaText::puts(char const*)>
c002d15a:	59                   	pop    ecx
c002d15b:	5b                   	pop    ebx
c002d15c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d160:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d166:	e8 ef e3 ff ff       	call   c002b55a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d16b:	5e                   	pop    esi
c002d16c:	5f                   	pop    edi
c002d16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d171:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d177:	e8 be e3 ff ff       	call   c002b53a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d17c:	eb 48                	jmp    c002d1c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d17e:	b8 01 00 00 00       	mov    eax,0x1
c002d183:	88 d1                	mov    cl,dl
c002d185:	d3 e0                	shl    eax,cl
c002d187:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d18c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d192:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d196:	89 c7                	mov    edi,eax
c002d198:	c1 e3 07             	shl    ebx,0x7
c002d19b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d19f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d1a5:	85 c7                	test   edi,eax
c002d1a7:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d1ad:	0f 84 a3 00 00 00    	je     c002d256 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d1b3:	0f ba e0 1e          	bt     eax,0x1e
c002d1b7:	73 1a                	jae    c002d1d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d1b9:	83 ec 0c             	sub    esp,0xc
c002d1bc:	68 df 35 03 c0       	push   0xc00335df
c002d1c1:	e8 00 c0 fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002d1c6:	83 c4 10             	add    esp,0x10
c002d1c9:	b8 01 00 00 00       	mov    eax,0x1
c002d1ce:	e9 b6 00 00 00       	jmp    c002d289 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d1d3:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d1d9:	83 f8 0d             	cmp    eax,0xd
c002d1dc:	77 0a                	ja     c002d1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d1de:	83 ec 0c             	sub    esp,0xc
c002d1e1:	68 c8 00 00 00       	push   0xc8
c002d1e6:	eb 28                	jmp    c002d210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d1e8:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d1ee:	83 f8 0d             	cmp    eax,0xd
c002d1f1:	77 0a                	ja     c002d1fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d1f3:	83 ec 0c             	sub    esp,0xc
c002d1f6:	68 58 02 00 00       	push   0x258
c002d1fb:	eb 13                	jmp    c002d210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d1fd:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d203:	83 f8 06             	cmp    eax,0x6
c002d206:	77 10                	ja     c002d218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d208:	83 ec 0c             	sub    esp,0xc
c002d20b:	68 dc 05 00 00       	push   0x5dc
c002d210:	e8 13 7d ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002d215:	83 c4 10             	add    esp,0x10
c002d218:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d21c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d21f:	75 06                	jne    c002d227 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d221:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d225:	74 15                	je     c002d23c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d227:	83 fe 06             	cmp    esi,0x6
c002d22a:	77 10                	ja     c002d23c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d22c:	83 ec 0c             	sub    esp,0xc
c002d22f:	68 c4 09 00 00       	push   0x9c4
c002d234:	e8 ef 7c ff ff       	call   c0024f28 <milliTenthSleep(unsigned int)>
c002d239:	83 c4 10             	add    esp,0x10
c002d23c:	46                   	inc    esi
c002d23d:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d243:	0f 85 56 ff ff ff    	jne    c002d19f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d249:	83 ec 0c             	sub    esp,0xc
c002d24c:	68 f2 35 03 c0       	push   0xc00335f2
c002d251:	e9 6b ff ff ff       	jmp    c002d1c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d256:	0f ba e0 1e          	bt     eax,0x1e
c002d25a:	73 0d                	jae    c002d269 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d25c:	83 ec 0c             	sub    esp,0xc
c002d25f:	68 06 36 03 c0       	push   0xc0033606
c002d264:	e9 58 ff ff ff       	jmp    c002d1c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d269:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d26e:	74 17                	je     c002d287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d270:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d275:	74 10                	je     c002d287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d277:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d27d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d281:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d287:	31 c0                	xor    eax,eax
c002d289:	83 c4 2c             	add    esp,0x2c
c002d28c:	5b                   	pop    ebx
c002d28d:	5e                   	pop    esi
c002d28e:	5f                   	pop    edi
c002d28f:	5d                   	pop    ebp
c002d290:	c3                   	ret    
c002d291:	90                   	nop

c002d292 <SATAPI::eject()>:
c002d292:	57                   	push   edi
c002d293:	b9 03 00 00 00       	mov    ecx,0x3
c002d298:	83 ec 18             	sub    esp,0x18
c002d29b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d29f:	fc                   	cld    
c002d2a0:	31 c0                	xor    eax,eax
c002d2a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d2a4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d2a9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d2ae:	50                   	push   eax
c002d2af:	6a 00                	push   0x0
c002d2b1:	6a 00                	push   0x0
c002d2b3:	6a 00                	push   0x0
c002d2b5:	6a 00                	push   0x0
c002d2b7:	6a 02                	push   0x2
c002d2b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d2bd:	50                   	push   eax
c002d2be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d2c2:	e8 e5 fc ff ff       	call   c002cfac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d2c7:	83 c4 38             	add    esp,0x38
c002d2ca:	31 c0                	xor    eax,eax
c002d2cc:	5f                   	pop    edi
c002d2cd:	c3                   	ret    

c002d2ce <SATAPI::detectMedia()>:
c002d2ce:	53                   	push   ebx
c002d2cf:	83 ec 14             	sub    esp,0x14
c002d2d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d2d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d2dc:	e8 d7 fc fe ff       	call   c001cfb8 <VCache::writeWriteBuffer()>
c002d2e1:	59                   	pop    ecx
c002d2e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d2e8:	e8 bb fc fe ff       	call   c001cfa8 <VCache::invalidateReadBuffer()>
c002d2ed:	c7 04 24 1b 36 03 c0 	mov    DWORD PTR [esp],0xc003361b
c002d2f4:	e8 cd be fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002d2f9:	83 c4 10             	add    esp,0x10
c002d2fc:	31 c0                	xor    eax,eax
c002d2fe:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d305:	85 d2                	test   edx,edx
c002d307:	74 0f                	je     c002d318 <SATAPI::detectMedia()+0x4a>
c002d309:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d30f:	75 07                	jne    c002d318 <SATAPI::detectMedia()+0x4a>
c002d311:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d318:	40                   	inc    eax
c002d319:	83 f8 1a             	cmp    eax,0x1a
c002d31c:	75 e0                	jne    c002d2fe <SATAPI::detectMedia()+0x30>
c002d31e:	83 c4 08             	add    esp,0x8
c002d321:	5b                   	pop    ebx
c002d322:	c3                   	ret    
c002d323:	90                   	nop

c002d324 <SATAPI::open(int, int, void*)>:
c002d324:	56                   	push   esi
c002d325:	53                   	push   ebx
c002d326:	51                   	push   ecx
c002d327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d32b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d32f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d339:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d33f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d343:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d34d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d357:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d35e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d364:	e8 35 93 fe ff       	call   c001669e <Phys::allocatePage()>
c002d369:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d36f:	89 c6                	mov    esi,eax
c002d371:	e8 28 93 fe ff       	call   c001669e <Phys::allocatePage()>
c002d376:	81 c6 00 10 00 00    	add    esi,0x1000
c002d37c:	39 c6                	cmp    esi,eax
c002d37e:	74 10                	je     c002d390 <SATAPI::open(int, int, void*)+0x6c>
c002d380:	83 ec 0c             	sub    esp,0xc
c002d383:	68 30 36 03 c0       	push   0xc0033630
c002d388:	e8 e6 2c ff ff       	call   c0020073 <KePanic(char const*)>
c002d38d:	83 c4 10             	add    esp,0x10
c002d390:	83 ec 0c             	sub    esp,0xc
c002d393:	6a 02                	push   0x2
c002d395:	e8 17 ab fe ff       	call   c0017eb1 <Virt::allocateKernelVirtualPages(int)>
c002d39a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d3a0:	6a 03                	push   0x3
c002d3a2:	50                   	push   eax
c002d3a3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d3a9:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d3af:	e8 06 b2 fe ff       	call   c00185ba <VAS::mapPage(unsigned long, unsigned long, int)>
c002d3b4:	83 c4 14             	add    esp,0x14
c002d3b7:	68 78 01 00 00       	push   0x178
c002d3bc:	e8 ce 8f fe ff       	call   c001638f <malloc>
c002d3c1:	83 c4 0c             	add    esp,0xc
c002d3c4:	6a 00                	push   0x0
c002d3c6:	68 ff ff ff 7f       	push   0x7fffffff
c002d3cb:	6a 00                	push   0x0
c002d3cd:	6a 00                	push   0x0
c002d3cf:	53                   	push   ebx
c002d3d0:	68 46 36 03 c0       	push   0xc0033646
c002d3d5:	89 c6                	mov    esi,eax
c002d3d7:	50                   	push   eax
c002d3d8:	e8 39 f0 fe ff       	call   c001c416 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d3dd:	83 c4 14             	add    esp,0x14
c002d3e0:	56                   	push   esi
c002d3e1:	e8 f0 f0 fe ff       	call   c001c4d6 <LogicalDisk::assignDriveLetter()>
c002d3e6:	5a                   	pop    edx
c002d3e7:	59                   	pop    ecx
c002d3e8:	0f be c0             	movsx  eax,al
c002d3eb:	50                   	push   eax
c002d3ec:	68 8c 34 03 c0       	push   0xc003348c
c002d3f1:	e8 d0 bd fe ff       	call   c00191c6 <Dbg::kprintf(char const*, ...)>
c002d3f6:	58                   	pop    eax
c002d3f7:	5a                   	pop    edx
c002d3f8:	56                   	push   esi
c002d3f9:	53                   	push   ebx
c002d3fa:	e8 5d de fe ff       	call   c001b25c <Device::addChild(Device*)>
c002d3ff:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d405:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d408:	e8 99 e2 fe ff       	call   c001b6a6 <PhysicalDisk::startCache()>
c002d40d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d417:	e8 b2 fe ff ff       	call   c002d2ce <SATAPI::detectMedia()>
c002d41c:	83 c4 14             	add    esp,0x14
c002d41f:	31 c0                	xor    eax,eax
c002d421:	5b                   	pop    ebx
c002d422:	5e                   	pop    esi
c002d423:	c3                   	ret    

c002d424 <SATAPI::read(unsigned long long, int, void*)>:
c002d424:	55                   	push   ebp
c002d425:	57                   	push   edi
c002d426:	56                   	push   esi
c002d427:	53                   	push   ebx
c002d428:	83 ec 3c             	sub    esp,0x3c
c002d42b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002d42f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d433:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002d437:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002d43b:	83 fd 04             	cmp    ebp,0x4
c002d43e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d442:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d446:	7e 10                	jle    c002d458 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002d448:	83 ec 0c             	sub    esp,0xc
c002d44b:	68 54 36 03 c0       	push   0xc0033654
c002d450:	e8 1e 2c ff ff       	call   c0020073 <KePanic(char const*)>
c002d455:	83 c4 10             	add    esp,0x10
c002d458:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d45e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d464:	51                   	push   ecx
c002d465:	50                   	push   eax
c002d466:	83 c0 02             	add    eax,0x2
c002d469:	c1 e0 07             	shl    eax,0x7
c002d46c:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d472:	50                   	push   eax
c002d473:	52                   	push   edx
c002d474:	e8 0b e1 ff ff       	call   c002b584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d479:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d47d:	b9 03 00 00 00       	mov    ecx,0x3
c002d482:	fc                   	cld    
c002d483:	31 c0                	xor    eax,eax
c002d485:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d487:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d48c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d491:	83 c4 0c             	add    esp,0xc
c002d494:	6a 00                	push   0x0
c002d496:	6a 00                	push   0x0
c002d498:	6a 00                	push   0x0
c002d49a:	6a 00                	push   0x0
c002d49c:	6a 02                	push   0x2
c002d49e:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d4a2:	50                   	push   eax
c002d4a3:	53                   	push   ebx
c002d4a4:	e8 03 fb ff ff       	call   c002cfac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d4a9:	83 c4 20             	add    esp,0x20
c002d4ac:	85 c0                	test   eax,eax
c002d4ae:	89 c6                	mov    esi,eax
c002d4b0:	75 46                	jne    c002d4f8 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002d4b2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d4b6:	b9 03 00 00 00       	mov    ecx,0x3
c002d4bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d4bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d4c1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d4c6:	0f c8                	bswap  eax
c002d4c8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d4cc:	89 e8                	mov    eax,ebp
c002d4ce:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d4d2:	50                   	push   eax
c002d4d3:	55                   	push   ebp
c002d4d4:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002d4d8:	c1 e5 0b             	shl    ebp,0xb
c002d4db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d4df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d4e3:	55                   	push   ebp
c002d4e4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d4e8:	50                   	push   eax
c002d4e9:	53                   	push   ebx
c002d4ea:	e8 bd fa ff ff       	call   c002cfac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d4ef:	83 c4 20             	add    esp,0x20
c002d4f2:	85 c0                	test   eax,eax
c002d4f4:	89 c6                	mov    esi,eax
c002d4f6:	74 0c                	je     c002d504 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002d4f8:	83 ec 0c             	sub    esp,0xc
c002d4fb:	53                   	push   ebx
c002d4fc:	e8 cd fd ff ff       	call   c002d2ce <SATAPI::detectMedia()>
c002d501:	83 c4 10             	add    esp,0x10
c002d504:	83 c4 3c             	add    esp,0x3c
c002d507:	89 f0                	mov    eax,esi
c002d509:	5b                   	pop    ebx
c002d50a:	5e                   	pop    esi
c002d50b:	5f                   	pop    edi
c002d50c:	5d                   	pop    ebp
c002d50d:	c3                   	ret    

c002d50e <IOAPIC::close(int, int, void*)>:
c002d50e:	b8 00 00 00 00       	mov    eax,0x0
c002d513:	c3                   	ret    

c002d514 <apicGetBase()>:
c002d514:	55                   	push   ebp
c002d515:	89 e5                	mov    ebp,esp
c002d517:	83 ec 18             	sub    esp,0x18
c002d51a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d51f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d525:	83 e0 08             	and    eax,0x8
c002d528:	0f b6 c0             	movzx  eax,al
c002d52b:	85 c0                	test   eax,eax
c002d52d:	75 07                	jne    c002d536 <apicGetBase()+0x22>
c002d52f:	b8 00 00 00 00       	mov    eax,0x0
c002d534:	eb 21                	jmp    c002d557 <apicGetBase()+0x43>
c002d536:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d53b:	83 ec 08             	sub    esp,0x8
c002d53e:	6a 1b                	push   0x1b
c002d540:	50                   	push   eax
c002d541:	e8 5a 84 fe ff       	call   c00159a0 <Computer::rdmsr(unsigned int)>
c002d546:	83 c4 10             	add    esp,0x10
c002d549:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d54c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d54f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d552:	25 00 00 ff ff       	and    eax,0xffff0000
c002d557:	c9                   	leave  
c002d558:	c3                   	ret    
c002d559:	90                   	nop

c002d55a <IOAPIC::IOAPIC()>:
c002d55a:	83 ec 0c             	sub    esp,0xc
c002d55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d561:	83 ec 08             	sub    esp,0x8
c002d564:	68 b8 36 03 c0       	push   0xc00336b8
c002d569:	50                   	push   eax
c002d56a:	e8 4f de fe ff       	call   c001b3be <Device::Device(char const*)>
c002d56f:	83 c4 10             	add    esp,0x10
c002d572:	ba c8 36 03 c0       	mov    edx,0xc00336c8
c002d577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d57b:	89 10                	mov    DWORD PTR [eax],edx
c002d57d:	90                   	nop
c002d57e:	83 c4 0c             	add    esp,0xc
c002d581:	c3                   	ret    

c002d582 <apicOpen()>:
c002d582:	55                   	push   ebp
c002d583:	89 e5                	mov    ebp,esp
c002d585:	53                   	push   ebx
c002d586:	83 ec 34             	sub    esp,0x34
c002d589:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d58e:	83 f0 01             	xor    eax,0x1
c002d591:	0f b6 c0             	movzx  eax,al
c002d594:	85 c0                	test   eax,eax
c002d596:	0f 84 a3 00 00 00    	je     c002d63f <apicOpen()+0xbd>
c002d59c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d5a0:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d5a5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d5a9:	0f b6 c0             	movzx  eax,al
c002d5ac:	39 c2                	cmp    edx,eax
c002d5ae:	0f 83 84 00 00 00    	jae    c002d638 <apicOpen()+0xb6>
c002d5b4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d5bb:	83 ec 0c             	sub    esp,0xc
c002d5be:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d5c1:	e8 c9 8d fe ff       	call   c001638f <malloc>
c002d5c6:	83 c4 10             	add    esp,0x10
c002d5c9:	89 c3                	mov    ebx,eax
c002d5cb:	83 ec 0c             	sub    esp,0xc
c002d5ce:	53                   	push   ebx
c002d5cf:	e8 86 ff ff ff       	call   c002d55a <IOAPIC::IOAPIC()>
c002d5d4:	83 c4 10             	add    esp,0x10
c002d5d7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d5da:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d5de:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d5e1:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d5e8:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d5ed:	83 c0 01             	add    eax,0x1
c002d5f0:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d5f5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d5fa:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d600:	83 ec 08             	sub    esp,0x8
c002d603:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d606:	50                   	push   eax
c002d607:	e8 50 dc fe ff       	call   c001b25c <Device::addChild(Device*)>
c002d60c:	83 c4 10             	add    esp,0x10
c002d60f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d612:	8b 00                	mov    eax,DWORD PTR [eax]
c002d614:	83 c0 08             	add    eax,0x8
c002d617:	8b 00                	mov    eax,DWORD PTR [eax]
c002d619:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d61d:	6a 00                	push   0x0
c002d61f:	6a 00                	push   0x0
c002d621:	52                   	push   edx
c002d622:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d625:	ff d0                	call   eax
c002d627:	83 c4 10             	add    esp,0x10
c002d62a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d62d:	83 c0 01             	add    eax,0x1
c002d630:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d633:	e9 68 ff ff ff       	jmp    c002d5a0 <apicOpen()+0x1e>
c002d638:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d63f:	e8 d0 fe ff ff       	call   c002d514 <apicGetBase()>
c002d644:	05 f0 00 00 00       	add    eax,0xf0
c002d649:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d64c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d64f:	8b 00                	mov    eax,DWORD PTR [eax]
c002d651:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d654:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d65b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d662:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d665:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d668:	89 10                	mov    DWORD PTR [eax],edx
c002d66a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d671:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d676:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d679:	7d 7c                	jge    c002d6f7 <apicOpen()+0x175>
c002d67b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d67e:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d685:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d688:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d68b:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d692:	c1 e8 08             	shr    eax,0x8
c002d695:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d699:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d69c:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d6a3:	c1 e8 18             	shr    eax,0x18
c002d6a6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d6a9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d6ad:	3d ff 00 00 00       	cmp    eax,0xff
c002d6b2:	75 3a                	jne    c002d6ee <apicOpen()+0x16c>
c002d6b4:	e8 5b fe ff ff       	call   c002d514 <apicGetBase()>
c002d6b9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d6bd:	83 fa 01             	cmp    edx,0x1
c002d6c0:	75 07                	jne    c002d6c9 <apicOpen()+0x147>
c002d6c2:	ba 60 03 00 00       	mov    edx,0x360
c002d6c7:	eb 05                	jmp    c002d6ce <apicOpen()+0x14c>
c002d6c9:	ba 50 03 00 00       	mov    edx,0x350
c002d6ce:	01 d0                	add    eax,edx
c002d6d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d6d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d6d6:	8b 00                	mov    eax,DWORD PTR [eax]
c002d6d8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d6db:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d6e2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d6e6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d6e9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d6ec:	89 10                	mov    DWORD PTR [eax],edx
c002d6ee:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d6f2:	e9 7a ff ff ff       	jmp    c002d671 <apicOpen()+0xef>
c002d6f7:	90                   	nop
c002d6f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d6fb:	c9                   	leave  
c002d6fc:	c3                   	ret    
c002d6fd:	90                   	nop

c002d6fe <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d6fe:	55                   	push   ebp
c002d6ff:	89 e5                	mov    ebp,esp
c002d701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d704:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d70a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d70d:	72 1d                	jb     c002d72c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d712:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d71b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002d721:	01 d0                	add    eax,edx
c002d723:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d726:	73 04                	jae    c002d72c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d728:	b0 01                	mov    al,0x1
c002d72a:	eb 02                	jmp    c002d72e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002d72c:	b0 00                	mov    al,0x0
c002d72e:	5d                   	pop    ebp
c002d72f:	c3                   	ret    

c002d730 <IOAPIC::read(int)>:
c002d730:	55                   	push   ebp
c002d731:	89 e5                	mov    ebp,esp
c002d733:	83 ec 10             	sub    esp,0x10
c002d736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d739:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d73f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d742:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d745:	0f b6 d0             	movzx  edx,al
c002d748:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d74b:	89 10                	mov    DWORD PTR [eax],edx
c002d74d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d750:	83 c0 10             	add    eax,0x10
c002d753:	8b 00                	mov    eax,DWORD PTR [eax]
c002d755:	c9                   	leave  
c002d756:	c3                   	ret    
c002d757:	90                   	nop

c002d758 <IOAPIC::open(int, int, void*)>:
c002d758:	55                   	push   ebp
c002d759:	89 e5                	mov    ebp,esp
c002d75b:	57                   	push   edi
c002d75c:	56                   	push   esi
c002d75d:	53                   	push   ebx
c002d75e:	83 ec 04             	sub    esp,0x4
c002d761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d764:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002d767:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d770:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d776:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002d77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d780:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002d786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d789:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d78f:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002d796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d799:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002d79f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d7a2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002d7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d7ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002d7b1:	0f b6 f0             	movzx  esi,al
c002d7b4:	89 d0                	mov    eax,edx
c002d7b6:	ba 00 00 00 00       	mov    edx,0x0
c002d7bb:	89 c7                	mov    edi,eax
c002d7bd:	83 e7 ff             	and    edi,0xffffffff
c002d7c0:	89 f9                	mov    ecx,edi
c002d7c2:	0f b6 da             	movzx  ebx,dl
c002d7c5:	89 c8                	mov    eax,ecx
c002d7c7:	89 da                	mov    edx,ebx
c002d7c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002d7cc:	8d 5e 08             	lea    ebx,[esi+0x8]
c002d7cf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002d7d3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002d7d7:	83 e0 00             	and    eax,0x0
c002d7da:	09 d0                	or     eax,edx
c002d7dc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002d7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d7e3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002d7e9:	8d 50 01             	lea    edx,[eax+0x1]
c002d7ec:	88 d1                	mov    cl,dl
c002d7ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002d7f1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002d7f7:	0f b6 d0             	movzx  edx,al
c002d7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d7fd:	83 c2 08             	add    edx,0x8
c002d800:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002d804:	0f b6 c9             	movzx  ecx,cl
c002d807:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002d80d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002d811:	6a 01                	push   0x1
c002d813:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d816:	e8 15 ff ff ff       	call   c002d730 <IOAPIC::read(int)>
c002d81b:	83 c4 08             	add    esp,0x8
c002d81e:	c1 f8 10             	sar    eax,0x10
c002d821:	0f b6 c0             	movzx  eax,al
c002d824:	8d 50 01             	lea    edx,[eax+0x1]
c002d827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d82a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002d830:	b8 00 00 00 00       	mov    eax,0x0
c002d835:	8d 65 f4             	lea    esp,[ebp-0xc]
c002d838:	5b                   	pop    ebx
c002d839:	5e                   	pop    esi
c002d83a:	5f                   	pop    edi
c002d83b:	5d                   	pop    ebp
c002d83c:	c3                   	ret    
c002d83d:	90                   	nop

c002d83e <IOAPIC::write(int, int)>:
c002d83e:	55                   	push   ebp
c002d83f:	89 e5                	mov    ebp,esp
c002d841:	83 ec 10             	sub    esp,0x10
c002d844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d847:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d84d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d853:	0f b6 d0             	movzx  edx,al
c002d856:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d859:	89 10                	mov    DWORD PTR [eax],edx
c002d85b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d85e:	8d 50 10             	lea    edx,[eax+0x10]
c002d861:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002d864:	89 02                	mov    DWORD PTR [edx],eax
c002d866:	90                   	nop
c002d867:	c9                   	leave  
c002d868:	c3                   	ret    
c002d869:	90                   	nop

c002d86a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002d86a:	55                   	push   ebp
c002d86b:	89 e5                	mov    ebp,esp
c002d86d:	53                   	push   ebx
c002d86e:	83 ec 2c             	sub    esp,0x2c
c002d871:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d874:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002d877:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002d87a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002d87d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002d880:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002d883:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d886:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002d889:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002d88c:	88 d8                	mov    al,bl
c002d88e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002d891:	88 c8                	mov    al,cl
c002d893:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002d896:	88 d0                	mov    al,dl
c002d898:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002d89b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002d89f:	83 c0 08             	add    eax,0x8
c002d8a2:	d1 e0                	shl    eax,1
c002d8a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d8a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002d8ab:	83 c0 08             	add    eax,0x8
c002d8ae:	d1 e0                	shl    eax,1
c002d8b0:	83 c0 01             	add    eax,0x1
c002d8b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002d8b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d8b9:	50                   	push   eax
c002d8ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d8bd:	e8 6e fe ff ff       	call   c002d730 <IOAPIC::read(int)>
c002d8c2:	83 c4 08             	add    esp,0x8
c002d8c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d8c8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002d8cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d8d2:	c1 e0 18             	shl    eax,0x18
c002d8d5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002d8d8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002d8db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d8de:	52                   	push   edx
c002d8df:	50                   	push   eax
c002d8e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d8e3:	e8 56 ff ff ff       	call   c002d83e <IOAPIC::write(int, int)>
c002d8e8:	83 c4 0c             	add    esp,0xc
c002d8eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8ee:	50                   	push   eax
c002d8ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d8f2:	e8 39 fe ff ff       	call   c002d730 <IOAPIC::read(int)>
c002d8f7:	83 c4 08             	add    esp,0x8
c002d8fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002d8fd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002d904:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002d90b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002d912:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002d916:	85 c0                	test   eax,eax
c002d918:	74 09                	je     c002d923 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002d91a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002d921:	eb 07                	jmp    c002d92a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002d923:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002d92a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002d92e:	85 c0                	test   eax,eax
c002d930:	74 09                	je     c002d93b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002d932:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002d939:	eb 07                	jmp    c002d942 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002d93b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002d942:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002d949:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002d94d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002d950:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002d953:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d956:	52                   	push   edx
c002d957:	50                   	push   eax
c002d958:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d95b:	e8 de fe ff ff       	call   c002d83e <IOAPIC::write(int, int)>
c002d960:	83 c4 0c             	add    esp,0xc
c002d963:	90                   	nop
c002d964:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d967:	c9                   	leave  
c002d968:	c3                   	ret    
c002d969:	66 90                	xchg   ax,ax
c002d96b:	90                   	nop

c002d96c <APICTimer::close(int, int, void*)>:
c002d96c:	b8 00 00 00 00       	mov    eax,0x0
c002d971:	c3                   	ret    
c002d972:	66 90                	xchg   ax,ax

c002d974 <apicTimerHandler(regs*, void*)>:
c002d974:	83 ec 0c             	sub    esp,0xc
c002d977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d97b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d97d:	b8 10 27 00 00       	mov    eax,0x2710
c002d982:	ba 00 00 00 00       	mov    edx,0x0
c002d987:	f7 f1                	div    ecx
c002d989:	83 ec 0c             	sub    esp,0xc
c002d98c:	50                   	push   eax
c002d98d:	e8 42 f3 fe ff       	call   c001ccd4 <timerHandler(unsigned int)>
c002d992:	83 c4 10             	add    esp,0x10
c002d995:	90                   	nop
c002d996:	83 c4 0c             	add    esp,0xc
c002d999:	c3                   	ret    
c002d99a:	66 90                	xchg   ax,ax

c002d99c <APICTimer::open(int, int, void*)>:
c002d99c:	83 ec 0c             	sub    esp,0xc
c002d99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9a5:	83 c0 24             	add    eax,0x24
c002d9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9aa:	83 ec 08             	sub    esp,0x8
c002d9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002d9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002d9b5:	ff d0                	call   eax
c002d9b7:	83 c4 10             	add    esp,0x10
c002d9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002d9c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002d9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d9cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d9d0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002d9d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d9da:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002d9e0:	83 ec 0c             	sub    esp,0xc
c002d9e3:	51                   	push   ecx
c002d9e4:	6a 01                	push   0x1
c002d9e6:	68 74 d9 02 c0       	push   0xc002d974
c002d9eb:	52                   	push   edx
c002d9ec:	50                   	push   eax
c002d9ed:	e8 16 d8 fe ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002d9f2:	83 c4 20             	add    esp,0x20
c002d9f5:	89 c2                	mov    edx,eax
c002d9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d9fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002da01:	b8 00 00 00 00       	mov    eax,0x0
c002da06:	83 c4 0c             	add    esp,0xc
c002da09:	c3                   	ret    
c002da0a:	66 90                	xchg   ax,ax

c002da0c <APICTimer::write(int)>:
c002da0c:	83 ec 0c             	sub    esp,0xc
c002da0f:	83 ec 0c             	sub    esp,0xc
c002da12:	68 ec 36 03 c0       	push   0xc00336ec
c002da17:	e8 57 26 ff ff       	call   c0020073 <KePanic(char const*)>
c002da1c:	83 c4 10             	add    esp,0x10
c002da1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002da27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002da2d:	90                   	nop
c002da2e:	83 c4 0c             	add    esp,0xc
c002da31:	c3                   	ret    
c002da32:	66 90                	xchg   ax,ax

c002da34 <APICTimer::APICTimer()>:
c002da34:	83 ec 0c             	sub    esp,0xc
c002da37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da3b:	83 ec 08             	sub    esp,0x8
c002da3e:	68 fc 36 03 c0       	push   0xc00336fc
c002da43:	50                   	push   eax
c002da44:	e8 bf f1 fe ff       	call   c001cc08 <Timer::Timer(char const*)>
c002da49:	83 c4 10             	add    esp,0x10
c002da4c:	ba 10 37 03 c0       	mov    edx,0xc0033710
c002da51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da55:	89 10                	mov    DWORD PTR [eax],edx
c002da57:	90                   	nop
c002da58:	83 c4 0c             	add    esp,0xc
c002da5b:	c3                   	ret    

c002da5c <PIT::write(int)>:
c002da5c:	83 ec 10             	sub    esp,0x10
c002da5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002da63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002da67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002da6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002da71:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002da76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002da7b:	89 c2                	mov    edx,eax
c002da7d:	c1 fa 1f             	sar    edx,0x1f
c002da80:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002da84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002da88:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002da8f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002da94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002da98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002da9d:	ee                   	out    dx,al
c002da9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002daa2:	0f b6 c0             	movzx  eax,al
c002daa5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002daac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dab0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002dab4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002dab9:	ee                   	out    dx,al
c002daba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dabe:	c1 f8 08             	sar    eax,0x8
c002dac1:	0f b6 c0             	movzx  eax,al
c002dac4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002dacb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002dacf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002dad3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002dad8:	ee                   	out    dx,al
c002dad9:	90                   	nop
c002dada:	83 c4 10             	add    esp,0x10
c002dadd:	c3                   	ret    
c002dade:	66 90                	xchg   ax,ax

c002dae0 <pitHandler(regs*, void*)>:
c002dae0:	83 ec 0c             	sub    esp,0xc
c002dae3:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002dae9:	b8 10 27 00 00       	mov    eax,0x2710
c002daee:	89 c2                	mov    edx,eax
c002daf0:	c1 fa 1f             	sar    edx,0x1f
c002daf3:	f7 f9                	idiv   ecx
c002daf5:	83 ec 0c             	sub    esp,0xc
c002daf8:	50                   	push   eax
c002daf9:	e8 d6 f1 fe ff       	call   c001ccd4 <timerHandler(unsigned int)>
c002dafe:	83 c4 10             	add    esp,0x10
c002db01:	90                   	nop
c002db02:	83 c4 0c             	add    esp,0xc
c002db05:	c3                   	ret    
c002db06:	66 90                	xchg   ax,ax

c002db08 <PIT::open(int, int, void*)>:
c002db08:	83 ec 0c             	sub    esp,0xc
c002db0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db0f:	8b 00                	mov    eax,DWORD PTR [eax]
c002db11:	83 c0 24             	add    eax,0x24
c002db14:	8b 00                	mov    eax,DWORD PTR [eax]
c002db16:	83 ec 08             	sub    esp,0x8
c002db19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002db1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002db21:	ff d0                	call   eax
c002db23:	83 c4 10             	add    esp,0x10
c002db26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db2a:	83 ec 0c             	sub    esp,0xc
c002db2d:	6a 00                	push   0x0
c002db2f:	6a 01                	push   0x1
c002db31:	68 e0 da 02 c0       	push   0xc002dae0
c002db36:	6a 00                	push   0x0
c002db38:	50                   	push   eax
c002db39:	e8 ca d6 fe ff       	call   c001b208 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002db3e:	83 c4 20             	add    esp,0x20
c002db41:	89 c2                	mov    edx,eax
c002db43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002db4d:	b8 00 00 00 00       	mov    eax,0x0
c002db52:	83 c4 0c             	add    esp,0xc
c002db55:	c3                   	ret    
c002db56:	66 90                	xchg   ax,ax

c002db58 <PIT::close(int, int, void*)>:
c002db58:	83 ec 0c             	sub    esp,0xc
c002db5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db5f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002db69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db6d:	6a 01                	push   0x1
c002db6f:	68 e0 da 02 c0       	push   0xc002dae0
c002db74:	6a 00                	push   0x0
c002db76:	50                   	push   eax
c002db77:	e8 c2 d6 fe ff       	call   c001b23e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002db7c:	83 c4 10             	add    esp,0x10
c002db7f:	b8 00 00 00 00       	mov    eax,0x0
c002db84:	83 c4 0c             	add    esp,0xc
c002db87:	c3                   	ret    

c002db88 <PIT::PIT()>:
c002db88:	83 ec 0c             	sub    esp,0xc
c002db8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db8f:	83 ec 08             	sub    esp,0x8
c002db92:	68 38 37 03 c0       	push   0xc0033738
c002db97:	50                   	push   eax
c002db98:	e8 6b f0 fe ff       	call   c001cc08 <Timer::Timer(char const*)>
c002db9d:	83 c4 10             	add    esp,0x10
c002dba0:	ba 60 37 03 c0       	mov    edx,0xc0033760
c002dba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dba9:	89 10                	mov    DWORD PTR [eax],edx
c002dbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dbb5:	0f b6 d0             	movzx  edx,al
c002dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbbc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002dbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dbcd:	0f b6 d0             	movzx  edx,al
c002dbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbd4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002dbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbdd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dbe3:	8d 50 01             	lea    edx,[eax+0x1]
c002dbe6:	88 d1                	mov    cl,dl
c002dbe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dbec:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002dbf2:	0f b6 d0             	movzx  edx,al
c002dbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbf9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002dbfd:	83 e1 3f             	and    ecx,0x3f
c002dc00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002dc04:	90                   	nop
c002dc05:	83 c4 0c             	add    esp,0xc
c002dc08:	c3                   	ret    
c002dc09:	66 90                	xchg   ax,ax
c002dc0b:	66 90                	xchg   ax,ax
c002dc0d:	66 90                	xchg   ax,ax
c002dc0f:	90                   	nop

c002dc10 <avxDetect>:
c002dc10:	b8 01 00 00 00       	mov    eax,0x1
c002dc15:	0f a2                	cpuid  
c002dc17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002dc1d:	74 15                	je     c002dc34 <avxDetect.noAVX>
c002dc1f:	b8 01 00 00 00       	mov    eax,0x1
c002dc24:	0f a2                	cpuid  
c002dc26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002dc2c:	74 06                	je     c002dc34 <avxDetect.noAVX>
c002dc2e:	b8 01 00 00 00       	mov    eax,0x1
c002dc33:	c3                   	ret    

c002dc34 <avxDetect.noAVX>:
c002dc34:	b8 00 00 00 00       	mov    eax,0x0
c002dc39:	c3                   	ret    

c002dc3a <avxSave>:
c002dc3a:	53                   	push   ebx
c002dc3b:	52                   	push   edx
c002dc3c:	31 c0                	xor    eax,eax
c002dc3e:	48                   	dec    eax
c002dc3f:	89 c2                	mov    edx,eax
c002dc41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dc45:	0f ae 23             	xsave  [ebx]
c002dc48:	5a                   	pop    edx
c002dc49:	5b                   	pop    ebx
c002dc4a:	c3                   	ret    

c002dc4b <avxLoad>:
c002dc4b:	53                   	push   ebx
c002dc4c:	52                   	push   edx
c002dc4d:	31 c0                	xor    eax,eax
c002dc4f:	48                   	dec    eax
c002dc50:	89 c2                	mov    edx,eax
c002dc52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dc56:	0f ae 2b             	xrstor [ebx]
c002dc59:	5a                   	pop    edx
c002dc5a:	5b                   	pop    ebx
c002dc5b:	c3                   	ret    

c002dc5c <avxInit>:
c002dc5c:	e8 47 03 00 00       	call   c002dfa8 <sseInit>
c002dc61:	50                   	push   eax
c002dc62:	51                   	push   ecx
c002dc63:	0f 20 e0             	mov    eax,cr4
c002dc66:	0d 00 00 04 00       	or     eax,0x40000
c002dc6b:	0f 22 e0             	mov    cr4,eax
c002dc6e:	31 c9                	xor    ecx,ecx
c002dc70:	0f 01 d0             	xgetbv 
c002dc73:	0d 07 00 00 00       	or     eax,0x7
c002dc78:	0f 01 d1             	xsetbv 
c002dc7b:	59                   	pop    ecx
c002dc7c:	58                   	pop    eax
c002dc7d:	c3                   	ret    

c002dc7e <avxClose>:
c002dc7e:	c3                   	ret    
c002dc7f:	90                   	nop

c002dc80 <isr0>:
c002dc80:	fa                   	cli    
c002dc81:	68 00 00 00 00       	push   0x0
c002dc86:	68 00 00 00 00       	push   0x0
c002dc8b:	e9 56 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dc90 <isr1>:
c002dc90:	fa                   	cli    
c002dc91:	6a 00                	push   0x0
c002dc93:	6a 01                	push   0x1
c002dc95:	e9 4c 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dc9a <isr2>:
c002dc9a:	fa                   	cli    
c002dc9b:	6a 00                	push   0x0
c002dc9d:	6a 02                	push   0x2
c002dc9f:	e9 42 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dca4 <isr3>:
c002dca4:	fa                   	cli    
c002dca5:	6a 00                	push   0x0
c002dca7:	6a 03                	push   0x3
c002dca9:	e9 38 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dcae <isr4>:
c002dcae:	fa                   	cli    
c002dcaf:	6a 00                	push   0x0
c002dcb1:	6a 04                	push   0x4
c002dcb3:	e9 2e 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dcb8 <isr5>:
c002dcb8:	fa                   	cli    
c002dcb9:	6a 00                	push   0x0
c002dcbb:	6a 05                	push   0x5
c002dcbd:	e9 24 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dcc2 <isr6>:
c002dcc2:	fa                   	cli    
c002dcc3:	6a 00                	push   0x0
c002dcc5:	6a 06                	push   0x6
c002dcc7:	e9 1a 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dccc <isr7>:
c002dccc:	fa                   	cli    
c002dccd:	6a 00                	push   0x0
c002dccf:	6a 07                	push   0x7
c002dcd1:	e9 10 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dcd6 <isr8>:
c002dcd6:	fa                   	cli    
c002dcd7:	6a 08                	push   0x8
c002dcd9:	e9 08 01 00 00       	jmp    c002dde6 <int_common_stub>

c002dcde <isr9>:
c002dcde:	fa                   	cli    
c002dcdf:	6a 00                	push   0x0
c002dce1:	6a 09                	push   0x9
c002dce3:	e9 fe 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dce8 <isr10>:
c002dce8:	fa                   	cli    
c002dce9:	6a 0a                	push   0xa
c002dceb:	e9 f6 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dcf0 <isr11>:
c002dcf0:	fa                   	cli    
c002dcf1:	6a 0b                	push   0xb
c002dcf3:	e9 ee 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dcf8 <isr12>:
c002dcf8:	fa                   	cli    
c002dcf9:	6a 0c                	push   0xc
c002dcfb:	e9 e6 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd00 <isr13>:
c002dd00:	fa                   	cli    
c002dd01:	6a 0d                	push   0xd
c002dd03:	53                   	push   ebx
c002dd04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dd08:	81 fb d6 de 02 c0    	cmp    ebx,0xc002ded6
c002dd0e:	5b                   	pop    ebx
c002dd0f:	0f 84 c3 01 00 00    	je     c002ded8 <finishSignal2>
c002dd15:	e9 cc 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd1a <isr14>:
c002dd1a:	fa                   	cli    
c002dd1b:	6a 0e                	push   0xe
c002dd1d:	e9 c4 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd22 <isr15>:
c002dd22:	fa                   	cli    
c002dd23:	6a 00                	push   0x0
c002dd25:	6a 0f                	push   0xf
c002dd27:	e9 ba 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd2c <isr16>:
c002dd2c:	fa                   	cli    
c002dd2d:	6a 00                	push   0x0
c002dd2f:	6a 10                	push   0x10
c002dd31:	e9 b0 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd36 <isr17>:
c002dd36:	fa                   	cli    
c002dd37:	6a 00                	push   0x0
c002dd39:	6a 11                	push   0x11
c002dd3b:	e9 a6 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd40 <isr18>:
c002dd40:	fa                   	cli    
c002dd41:	6a 00                	push   0x0
c002dd43:	6a 12                	push   0x12
c002dd45:	e9 9c 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd4a <irq3>:
c002dd4a:	fa                   	cli    
c002dd4b:	6a 00                	push   0x0
c002dd4d:	6a 23                	push   0x23
c002dd4f:	e9 92 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd54 <irq4>:
c002dd54:	fa                   	cli    
c002dd55:	6a 00                	push   0x0
c002dd57:	6a 24                	push   0x24
c002dd59:	e9 88 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd5e <irq5>:
c002dd5e:	fa                   	cli    
c002dd5f:	6a 00                	push   0x0
c002dd61:	6a 25                	push   0x25
c002dd63:	e9 7e 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd68 <irq6>:
c002dd68:	fa                   	cli    
c002dd69:	6a 00                	push   0x0
c002dd6b:	6a 26                	push   0x26
c002dd6d:	e9 74 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd72 <irq7>:
c002dd72:	fa                   	cli    
c002dd73:	6a 00                	push   0x0
c002dd75:	6a 27                	push   0x27
c002dd77:	e9 6a 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd7c <irq8>:
c002dd7c:	fa                   	cli    
c002dd7d:	6a 00                	push   0x0
c002dd7f:	6a 28                	push   0x28
c002dd81:	e9 60 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd86 <irq9>:
c002dd86:	fa                   	cli    
c002dd87:	6a 00                	push   0x0
c002dd89:	6a 29                	push   0x29
c002dd8b:	e9 56 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd90 <irq10>:
c002dd90:	fa                   	cli    
c002dd91:	6a 00                	push   0x0
c002dd93:	6a 2a                	push   0x2a
c002dd95:	e9 4c 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dd9a <irq11>:
c002dd9a:	fa                   	cli    
c002dd9b:	6a 00                	push   0x0
c002dd9d:	6a 2b                	push   0x2b
c002dd9f:	e9 42 00 00 00       	jmp    c002dde6 <int_common_stub>

c002dda4 <irq12>:
c002dda4:	fa                   	cli    
c002dda5:	6a 00                	push   0x0
c002dda7:	6a 2c                	push   0x2c
c002dda9:	e9 38 00 00 00       	jmp    c002dde6 <int_common_stub>

c002ddae <irq13>:
c002ddae:	fa                   	cli    
c002ddaf:	6a 00                	push   0x0
c002ddb1:	6a 2d                	push   0x2d
c002ddb3:	e9 2e 00 00 00       	jmp    c002dde6 <int_common_stub>

c002ddb8 <irq14>:
c002ddb8:	fa                   	cli    
c002ddb9:	6a 00                	push   0x0
c002ddbb:	6a 2e                	push   0x2e
c002ddbd:	e9 24 00 00 00       	jmp    c002dde6 <int_common_stub>

c002ddc2 <irq15>:
c002ddc2:	fa                   	cli    
c002ddc3:	6a 00                	push   0x0
c002ddc5:	6a 2f                	push   0x2f
c002ddc7:	e9 1a 00 00 00       	jmp    c002dde6 <int_common_stub>

c002ddcc <irq1>:
c002ddcc:	fa                   	cli    
c002ddcd:	6a 00                	push   0x0
c002ddcf:	6a 21                	push   0x21
c002ddd1:	eb 13                	jmp    c002dde6 <int_common_stub>

c002ddd3 <irq2>:
c002ddd3:	fa                   	cli    
c002ddd4:	6a 00                	push   0x0
c002ddd6:	6a 22                	push   0x22
c002ddd8:	eb 0c                	jmp    c002dde6 <int_common_stub>

c002ddda <isr96>:
c002ddda:	6a 00                	push   0x0
c002dddc:	6a 60                	push   0x60
c002ddde:	fb                   	sti    
c002dddf:	eb 37                	jmp    c002de18 <syscall_common_stub>

c002dde1 <irq0>:
c002dde1:	fa                   	cli    
c002dde2:	6a 00                	push   0x0
c002dde4:	6a 20                	push   0x20

c002dde6 <int_common_stub>:
c002dde6:	60                   	pusha  
c002dde7:	1e                   	push   ds
c002dde8:	06                   	push   es
c002dde9:	0f a0                	push   fs
c002ddeb:	0f a8                	push   gs
c002dded:	66 b8 10 00          	mov    ax,0x10
c002ddf1:	66 8e d8             	mov    ds,ax
c002ddf4:	66 8e c0             	mov    es,ax
c002ddf7:	66 8e e0             	mov    fs,ax
c002ddfa:	66 8e e8             	mov    gs,ax
c002ddfd:	54                   	push   esp
c002ddfe:	fc                   	cld    
c002ddff:	e8 18 d9 fe ff       	call   c001b71c <int_handler>
c002de04:	81 c4 04 00 00 00    	add    esp,0x4
c002de0a:	0f a9                	pop    gs
c002de0c:	0f a1                	pop    fs
c002de0e:	07                   	pop    es
c002de0f:	1f                   	pop    ds
c002de10:	61                   	popa   
c002de11:	81 c4 08 00 00 00    	add    esp,0x8
c002de17:	cf                   	iret   

c002de18 <syscall_common_stub>:
c002de18:	60                   	pusha  
c002de19:	1e                   	push   ds
c002de1a:	06                   	push   es
c002de1b:	0f a0                	push   fs
c002de1d:	0f a8                	push   gs
c002de1f:	66 b8 10 00          	mov    ax,0x10
c002de23:	66 8e d8             	mov    ds,ax
c002de26:	66 8e c0             	mov    es,ax
c002de29:	66 8e e0             	mov    fs,ax
c002de2c:	66 8e e8             	mov    gs,ax
c002de2f:	54                   	push   esp
c002de30:	fc                   	cld    
c002de31:	e8 e6 d8 fe ff       	call   c001b71c <int_handler>
c002de36:	81 c4 04 00 00 00    	add    esp,0x4
c002de3c:	0f a9                	pop    gs
c002de3e:	0f a1                	pop    fs
c002de40:	07                   	pop    es
c002de41:	1f                   	pop    ds
c002de42:	e8 3c 28 ff ff       	call   c0020683 <KiCheckSignalZ>
c002de47:	3d 00 00 00 00       	cmp    eax,0x0
c002de4c:	0f 84 c0 00 00 00    	je     c002df12 <skipSignals>
c002de52:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002de57:	61                   	popa   
c002de58:	53                   	push   ebx
c002de59:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002de5f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002de62:	5b                   	pop    ebx
c002de63:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002de68:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002de6b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002de6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002de71:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002de74:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002de77:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002de7a:	81 c4 08 00 00 00    	add    esp,0x8
c002de80:	5e                   	pop    esi
c002de81:	5b                   	pop    ebx
c002de82:	59                   	pop    ecx
c002de83:	5a                   	pop    edx
c002de84:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002de87:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002de8a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002de8d:	52                   	push   edx
c002de8e:	51                   	push   ecx
c002de8f:	53                   	push   ebx
c002de90:	56                   	push   esi
c002de91:	81 ec 08 00 00 00    	sub    esp,0x8
c002de97:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002de9a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002de9d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002dea0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002dea3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002dea6:	60                   	pusha  
c002dea7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002dead:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002deb0:	89 e3                	mov    ebx,esp
c002deb2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002deb5:	52                   	push   edx
c002deb6:	68 d6 de 02 c0       	push   0xc002ded6
c002debb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002debe:	89 dc                	mov    esp,ebx
c002dec0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002dec3:	68 23 00 00 00       	push   0x23
c002dec8:	51                   	push   ecx
c002dec9:	68 02 02 00 00       	push   0x202
c002dece:	68 1b 00 00 00       	push   0x1b
c002ded3:	ff 36                	push   DWORD PTR [esi]
c002ded5:	cf                   	iret   

c002ded6 <finishSignal>:
c002ded6:	cd 0f                	int    0xf

c002ded8 <finishSignal2>:
c002ded8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002dede:	e8 1d 28 ff ff       	call   c0020700 <KiFinishSignalZ>
c002dee3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002dee9:	68 23 00 00 00       	push   0x23
c002deee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002def1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002def4:	68 1b 00 00 00       	push   0x1b
c002def9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002defc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002deff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002df02:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002df05:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002df08:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002df0b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002df0e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002df11:	cf                   	iret   

c002df12 <skipSignals>:
c002df12:	61                   	popa   
c002df13:	81 c4 08 00 00 00    	add    esp,0x8
c002df19:	cf                   	iret   
c002df1a:	90                   	nop
c002df1b:	90                   	nop

c002df1c <irq16>:
c002df1c:	fa                   	cli    
c002df1d:	6a 00                	push   0x0
c002df1f:	6a 30                	push   0x30
c002df21:	e9 c0 fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df26 <irq17>:
c002df26:	fa                   	cli    
c002df27:	6a 00                	push   0x0
c002df29:	6a 31                	push   0x31
c002df2b:	e9 b6 fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df30 <irq18>:
c002df30:	fa                   	cli    
c002df31:	6a 00                	push   0x0
c002df33:	6a 32                	push   0x32
c002df35:	e9 ac fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df3a <irq19>:
c002df3a:	fa                   	cli    
c002df3b:	6a 00                	push   0x0
c002df3d:	6a 33                	push   0x33
c002df3f:	e9 a2 fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df44 <irq20>:
c002df44:	fa                   	cli    
c002df45:	6a 00                	push   0x0
c002df47:	6a 34                	push   0x34
c002df49:	e9 98 fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df4e <irq21>:
c002df4e:	fa                   	cli    
c002df4f:	6a 00                	push   0x0
c002df51:	6a 35                	push   0x35
c002df53:	e9 8e fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df58 <irq22>:
c002df58:	fa                   	cli    
c002df59:	6a 00                	push   0x0
c002df5b:	6a 36                	push   0x36
c002df5d:	e9 84 fe ff ff       	jmp    c002dde6 <int_common_stub>

c002df62 <irq23>:
c002df62:	fa                   	cli    
c002df63:	6a 00                	push   0x0
c002df65:	6a 37                	push   0x37
c002df67:	e9 7a fe ff ff       	jmp    c002dde6 <int_common_stub>
c002df6c:	66 90                	xchg   ax,ax
c002df6e:	66 90                	xchg   ax,ax

c002df70 <i386GetRDRAND>:
c002df70:	b9 64 00 00 00       	mov    ecx,0x64

c002df75 <retry>:
c002df75:	0f c7 f0             	rdrand eax
c002df78:	72 05                	jb     c002df7f <retry.done>
c002df7a:	e2 f9                	loop   c002df75 <retry>

c002df7c <retry.fail>:
c002df7c:	31 c0                	xor    eax,eax
c002df7e:	c3                   	ret    

c002df7f <retry.done>:
c002df7f:	c3                   	ret    

c002df80 <sseDetect>:
c002df80:	b8 01 00 00 00       	mov    eax,0x1
c002df85:	0f a2                	cpuid  
c002df87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002df8d:	74 06                	je     c002df95 <sseDetect.noSSE>
c002df8f:	b8 01 00 00 00       	mov    eax,0x1
c002df94:	c3                   	ret    

c002df95 <sseDetect.noSSE>:
c002df95:	31 c0                	xor    eax,eax
c002df97:	c3                   	ret    

c002df98 <sseSave>:
c002df98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002df9c:	0f ae 00             	fxsave [eax]
c002df9f:	c3                   	ret    

c002dfa0 <sseLoad>:
c002dfa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dfa4:	0f ae 08             	fxrstor [eax]
c002dfa7:	c3                   	ret    

c002dfa8 <sseInit>:
c002dfa8:	e8 42 00 00 00       	call   c002dfef <x87Init>
c002dfad:	0f 20 e0             	mov    eax,cr4
c002dfb0:	66 0d 00 06          	or     ax,0x600
c002dfb4:	0f 22 e0             	mov    cr4,eax
c002dfb7:	c3                   	ret    

c002dfb8 <sseClose>:
c002dfb8:	c3                   	ret    
c002dfb9:	66 90                	xchg   ax,ax
c002dfbb:	66 90                	xchg   ax,ax
c002dfbd:	66 90                	xchg   ax,ax
c002dfbf:	90                   	nop

c002dfc0 <value_37F>:
c002dfc0:	7f 03                	jg     c002dfc5 <value_37A+0x1>

c002dfc2 <value_37E>:
c002dfc2:	7e 03                	jle    c002dfc7 <x87Detect+0x1>

c002dfc4 <value_37A>:
c002dfc4:	7a 03                	jp     c002dfc9 <x87Detect+0x3>

c002dfc6 <x87Detect>:
c002dfc6:	b8 01 00 00 00       	mov    eax,0x1
c002dfcb:	0f a2                	cpuid  
c002dfcd:	f7 c2 01 00 00 00    	test   edx,0x1
c002dfd3:	74 06                	je     c002dfdb <x87Detect.nox87>
c002dfd5:	b8 01 00 00 00       	mov    eax,0x1
c002dfda:	c3                   	ret    

c002dfdb <x87Detect.nox87>:
c002dfdb:	b8 00 00 00 00       	mov    eax,0x0
c002dfe0:	c3                   	ret    

c002dfe1 <x87Save>:
c002dfe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dfe5:	dd 30                	fnsave [eax]
c002dfe7:	c3                   	ret    

c002dfe8 <x87Load>:
c002dfe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dfec:	dd 20                	frstor [eax]
c002dfee:	c3                   	ret    

c002dfef <x87Init>:
c002dfef:	0f 20 c0             	mov    eax,cr0
c002dff2:	66 25 fb ff          	and    ax,0xfffb
c002dff6:	66 0d 22 00          	or     ax,0x22
c002dffa:	0f 22 c0             	mov    cr0,eax
c002dffd:	db e3                	fninit 
c002dfff:	0f 06                	clts   
c002e001:	d9 2d c4 df 02 c0    	fldcw  WORD PTR ds:0xc002dfc4
c002e007:	c3                   	ret    

c002e008 <x87Close>:
c002e008:	c3                   	ret    
c002e009:	66 90                	xchg   ax,ax
c002e00b:	90                   	nop

c002e00c <__do_global_ctors_aux>:
c002e00c:	a1 c0 ef 02 c0       	mov    eax,ds:0xc002efc0
c002e011:	83 f8 ff             	cmp    eax,0xffffffff
c002e014:	74 1a                	je     c002e030 <__do_global_ctors_aux+0x24>
c002e016:	55                   	push   ebp
c002e017:	89 e5                	mov    ebp,esp
c002e019:	53                   	push   ebx
c002e01a:	52                   	push   edx
c002e01b:	bb c0 ef 02 c0       	mov    ebx,0xc002efc0
c002e020:	ff d0                	call   eax
c002e022:	83 eb 04             	sub    ebx,0x4
c002e025:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e027:	83 f8 ff             	cmp    eax,0xffffffff
c002e02a:	75 f4                	jne    c002e020 <__do_global_ctors_aux+0x14>
c002e02c:	58                   	pop    eax
c002e02d:	5b                   	pop    ebx
c002e02e:	5d                   	pop    ebp
c002e02f:	c3                   	ret    
c002e030:	c3                   	ret    
c002e031:	66 90                	xchg   ax,ax
c002e033:	90                   	nop

c002e034 <__divdi3>:
c002e034:	55                   	push   ebp
c002e035:	57                   	push   edi
c002e036:	56                   	push   esi
c002e037:	53                   	push   ebx
c002e038:	83 ec 1c             	sub    esp,0x1c
c002e03b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e03f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e043:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e046:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e04a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e04e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e052:	85 db                	test   ebx,ebx
c002e054:	0f 88 8e 00 00 00    	js     c002e0e8 <__divdi3+0xb4>
c002e05a:	89 dd                	mov    ebp,ebx
c002e05c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e064:	89 d3                	mov    ebx,edx
c002e066:	85 d2                	test   edx,edx
c002e068:	79 0d                	jns    c002e077 <__divdi3+0x43>
c002e06a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e06e:	f7 d8                	neg    eax
c002e070:	83 d2 00             	adc    edx,0x0
c002e073:	f7 da                	neg    edx
c002e075:	89 d3                	mov    ebx,edx
c002e077:	89 c7                	mov    edi,eax
c002e079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e07c:	85 db                	test   ebx,ebx
c002e07e:	75 48                	jne    c002e0c8 <__divdi3+0x94>
c002e080:	39 ef                	cmp    edi,ebp
c002e082:	76 24                	jbe    c002e0a8 <__divdi3+0x74>
c002e084:	89 ea                	mov    edx,ebp
c002e086:	f7 f7                	div    edi
c002e088:	89 c1                	mov    ecx,eax
c002e08a:	31 f6                	xor    esi,esi
c002e08c:	89 c8                	mov    eax,ecx
c002e08e:	89 f2                	mov    edx,esi
c002e090:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e094:	85 c9                	test   ecx,ecx
c002e096:	74 07                	je     c002e09f <__divdi3+0x6b>
c002e098:	f7 d8                	neg    eax
c002e09a:	83 d2 00             	adc    edx,0x0
c002e09d:	f7 da                	neg    edx
c002e09f:	83 c4 1c             	add    esp,0x1c
c002e0a2:	5b                   	pop    ebx
c002e0a3:	5e                   	pop    esi
c002e0a4:	5f                   	pop    edi
c002e0a5:	5d                   	pop    ebp
c002e0a6:	c3                   	ret    
c002e0a7:	90                   	nop
c002e0a8:	85 ff                	test   edi,edi
c002e0aa:	75 0b                	jne    c002e0b7 <__divdi3+0x83>
c002e0ac:	b8 01 00 00 00       	mov    eax,0x1
c002e0b1:	31 d2                	xor    edx,edx
c002e0b3:	f7 f3                	div    ebx
c002e0b5:	89 c7                	mov    edi,eax
c002e0b7:	31 d2                	xor    edx,edx
c002e0b9:	89 e8                	mov    eax,ebp
c002e0bb:	f7 f7                	div    edi
c002e0bd:	89 c6                	mov    esi,eax
c002e0bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e0c2:	f7 f7                	div    edi
c002e0c4:	89 c1                	mov    ecx,eax
c002e0c6:	eb c4                	jmp    c002e08c <__divdi3+0x58>
c002e0c8:	39 eb                	cmp    ebx,ebp
c002e0ca:	77 3c                	ja     c002e108 <__divdi3+0xd4>
c002e0cc:	0f bd f3             	bsr    esi,ebx
c002e0cf:	83 f6 1f             	xor    esi,0x1f
c002e0d2:	75 40                	jne    c002e114 <__divdi3+0xe0>
c002e0d4:	39 eb                	cmp    ebx,ebp
c002e0d6:	72 09                	jb     c002e0e1 <__divdi3+0xad>
c002e0d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e0db:	0f 87 97 00 00 00    	ja     c002e178 <__divdi3+0x144>
c002e0e1:	b9 01 00 00 00       	mov    ecx,0x1
c002e0e6:	eb a4                	jmp    c002e08c <__divdi3+0x58>
c002e0e8:	f7 d9                	neg    ecx
c002e0ea:	83 d3 00             	adc    ebx,0x0
c002e0ed:	f7 db                	neg    ebx
c002e0ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e0f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e0f6:	89 dd                	mov    ebp,ebx
c002e0f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e100:	e9 5f ff ff ff       	jmp    c002e064 <__divdi3+0x30>
c002e105:	8d 76 00             	lea    esi,[esi+0x0]
c002e108:	31 f6                	xor    esi,esi
c002e10a:	31 c9                	xor    ecx,ecx
c002e10c:	e9 7b ff ff ff       	jmp    c002e08c <__divdi3+0x58>
c002e111:	8d 76 00             	lea    esi,[esi+0x0]
c002e114:	b8 20 00 00 00       	mov    eax,0x20
c002e119:	29 f0                	sub    eax,esi
c002e11b:	89 f1                	mov    ecx,esi
c002e11d:	d3 e3                	shl    ebx,cl
c002e11f:	89 fa                	mov    edx,edi
c002e121:	88 c1                	mov    cl,al
c002e123:	d3 ea                	shr    edx,cl
c002e125:	09 da                	or     edx,ebx
c002e127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e12b:	89 f1                	mov    ecx,esi
c002e12d:	d3 e7                	shl    edi,cl
c002e12f:	89 eb                	mov    ebx,ebp
c002e131:	88 c1                	mov    cl,al
c002e133:	d3 eb                	shr    ebx,cl
c002e135:	89 f1                	mov    ecx,esi
c002e137:	d3 e5                	shl    ebp,cl
c002e139:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e13c:	88 c1                	mov    cl,al
c002e13e:	d3 ea                	shr    edx,cl
c002e140:	09 d5                	or     ebp,edx
c002e142:	89 e8                	mov    eax,ebp
c002e144:	89 da                	mov    edx,ebx
c002e146:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e14a:	89 d3                	mov    ebx,edx
c002e14c:	89 c5                	mov    ebp,eax
c002e14e:	f7 e7                	mul    edi
c002e150:	39 d3                	cmp    ebx,edx
c002e152:	72 18                	jb     c002e16c <__divdi3+0x138>
c002e154:	74 0a                	je     c002e160 <__divdi3+0x12c>
c002e156:	89 e9                	mov    ecx,ebp
c002e158:	31 f6                	xor    esi,esi
c002e15a:	e9 2d ff ff ff       	jmp    c002e08c <__divdi3+0x58>
c002e15f:	90                   	nop
c002e160:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e163:	89 f1                	mov    ecx,esi
c002e165:	d3 e7                	shl    edi,cl
c002e167:	39 c7                	cmp    edi,eax
c002e169:	73 eb                	jae    c002e156 <__divdi3+0x122>
c002e16b:	90                   	nop
c002e16c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e16f:	31 f6                	xor    esi,esi
c002e171:	e9 16 ff ff ff       	jmp    c002e08c <__divdi3+0x58>
c002e176:	66 90                	xchg   ax,ax
c002e178:	31 c9                	xor    ecx,ecx
c002e17a:	e9 0d ff ff ff       	jmp    c002e08c <__divdi3+0x58>
c002e17f:	90                   	nop

c002e180 <__moddi3>:
c002e180:	55                   	push   ebp
c002e181:	57                   	push   edi
c002e182:	56                   	push   esi
c002e183:	53                   	push   ebx
c002e184:	83 ec 2c             	sub    esp,0x2c
c002e187:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e18b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e18f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e193:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e197:	85 db                	test   ebx,ebx
c002e199:	0f 88 85 00 00 00    	js     c002e224 <__moddi3+0xa4>
c002e19f:	89 de                	mov    esi,ebx
c002e1a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e1a9:	89 d7                	mov    edi,edx
c002e1ab:	85 d2                	test   edx,edx
c002e1ad:	79 09                	jns    c002e1b8 <__moddi3+0x38>
c002e1af:	f7 d8                	neg    eax
c002e1b1:	83 d2 00             	adc    edx,0x0
c002e1b4:	f7 da                	neg    edx
c002e1b6:	89 d7                	mov    edi,edx
c002e1b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e1bc:	89 cd                	mov    ebp,ecx
c002e1be:	85 ff                	test   edi,edi
c002e1c0:	75 52                	jne    c002e214 <__moddi3+0x94>
c002e1c2:	89 c3                	mov    ebx,eax
c002e1c4:	39 f0                	cmp    eax,esi
c002e1c6:	76 24                	jbe    c002e1ec <__moddi3+0x6c>
c002e1c8:	89 c8                	mov    eax,ecx
c002e1ca:	89 f2                	mov    edx,esi
c002e1cc:	f7 f3                	div    ebx
c002e1ce:	89 d6                	mov    esi,edx
c002e1d0:	89 f0                	mov    eax,esi
c002e1d2:	31 d2                	xor    edx,edx
c002e1d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e1d8:	85 c9                	test   ecx,ecx
c002e1da:	74 07                	je     c002e1e3 <__moddi3+0x63>
c002e1dc:	f7 d8                	neg    eax
c002e1de:	83 d2 00             	adc    edx,0x0
c002e1e1:	f7 da                	neg    edx
c002e1e3:	83 c4 2c             	add    esp,0x2c
c002e1e6:	5b                   	pop    ebx
c002e1e7:	5e                   	pop    esi
c002e1e8:	5f                   	pop    edi
c002e1e9:	5d                   	pop    ebp
c002e1ea:	c3                   	ret    
c002e1eb:	90                   	nop
c002e1ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e1f0:	85 db                	test   ebx,ebx
c002e1f2:	75 0d                	jne    c002e201 <__moddi3+0x81>
c002e1f4:	b8 01 00 00 00       	mov    eax,0x1
c002e1f9:	31 d2                	xor    edx,edx
c002e1fb:	f7 f7                	div    edi
c002e1fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e201:	89 f0                	mov    eax,esi
c002e203:	31 d2                	xor    edx,edx
c002e205:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e209:	f7 f7                	div    edi
c002e20b:	89 e8                	mov    eax,ebp
c002e20d:	f7 f7                	div    edi
c002e20f:	89 d6                	mov    esi,edx
c002e211:	eb bd                	jmp    c002e1d0 <__moddi3+0x50>
c002e213:	90                   	nop
c002e214:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e218:	39 f7                	cmp    edi,esi
c002e21a:	76 20                	jbe    c002e23c <__moddi3+0xbc>
c002e21c:	89 c8                	mov    eax,ecx
c002e21e:	89 f2                	mov    edx,esi
c002e220:	eb b2                	jmp    c002e1d4 <__moddi3+0x54>
c002e222:	66 90                	xchg   ax,ax
c002e224:	f7 d9                	neg    ecx
c002e226:	83 d3 00             	adc    ebx,0x0
c002e229:	f7 db                	neg    ebx
c002e22b:	89 de                	mov    esi,ebx
c002e22d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e235:	e9 6f ff ff ff       	jmp    c002e1a9 <__moddi3+0x29>
c002e23a:	66 90                	xchg   ax,ax
c002e23c:	0f bd c7             	bsr    eax,edi
c002e23f:	83 f0 1f             	xor    eax,0x1f
c002e242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e246:	75 24                	jne    c002e26c <__moddi3+0xec>
c002e248:	39 f7                	cmp    edi,esi
c002e24a:	72 06                	jb     c002e252 <__moddi3+0xd2>
c002e24c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e250:	77 0c                	ja     c002e25e <__moddi3+0xde>
c002e252:	89 e9                	mov    ecx,ebp
c002e254:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e258:	19 fe                	sbb    esi,edi
c002e25a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e25e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e262:	89 f2                	mov    edx,esi
c002e264:	e9 6b ff ff ff       	jmp    c002e1d4 <__moddi3+0x54>
c002e269:	8d 76 00             	lea    esi,[esi+0x0]
c002e26c:	b8 20 00 00 00       	mov    eax,0x20
c002e271:	89 c2                	mov    edx,eax
c002e273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e277:	29 da                	sub    edx,ebx
c002e279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e27d:	88 d9                	mov    cl,bl
c002e27f:	d3 e7                	shl    edi,cl
c002e281:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e285:	88 d1                	mov    cl,dl
c002e287:	d3 e8                	shr    eax,cl
c002e289:	09 c7                	or     edi,eax
c002e28b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e28f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e293:	89 d8                	mov    eax,ebx
c002e295:	88 d9                	mov    cl,bl
c002e297:	d3 e7                	shl    edi,cl
c002e299:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e29d:	89 f3                	mov    ebx,esi
c002e29f:	88 d1                	mov    cl,dl
c002e2a1:	d3 eb                	shr    ebx,cl
c002e2a3:	89 c7                	mov    edi,eax
c002e2a5:	88 c1                	mov    cl,al
c002e2a7:	d3 e6                	shl    esi,cl
c002e2a9:	89 e8                	mov    eax,ebp
c002e2ab:	88 d1                	mov    cl,dl
c002e2ad:	d3 e8                	shr    eax,cl
c002e2af:	09 f0                	or     eax,esi
c002e2b1:	89 f9                	mov    ecx,edi
c002e2b3:	d3 e5                	shl    ebp,cl
c002e2b5:	89 da                	mov    edx,ebx
c002e2b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e2bb:	89 d3                	mov    ebx,edx
c002e2bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e2c1:	89 c6                	mov    esi,eax
c002e2c3:	89 d1                	mov    ecx,edx
c002e2c5:	39 d3                	cmp    ebx,edx
c002e2c7:	72 27                	jb     c002e2f0 <__moddi3+0x170>
c002e2c9:	74 21                	je     c002e2ec <__moddi3+0x16c>
c002e2cb:	29 f5                	sub    ebp,esi
c002e2cd:	19 cb                	sbb    ebx,ecx
c002e2cf:	89 de                	mov    esi,ebx
c002e2d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e2d5:	d3 e6                	shl    esi,cl
c002e2d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e2db:	89 f9                	mov    ecx,edi
c002e2dd:	d3 ed                	shr    ebp,cl
c002e2df:	09 ee                	or     esi,ebp
c002e2e1:	89 f0                	mov    eax,esi
c002e2e3:	d3 eb                	shr    ebx,cl
c002e2e5:	89 da                	mov    edx,ebx
c002e2e7:	e9 e8 fe ff ff       	jmp    c002e1d4 <__moddi3+0x54>
c002e2ec:	39 c5                	cmp    ebp,eax
c002e2ee:	73 db                	jae    c002e2cb <__moddi3+0x14b>
c002e2f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e2f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e2f8:	89 d1                	mov    ecx,edx
c002e2fa:	89 c6                	mov    esi,eax
c002e2fc:	eb cd                	jmp    c002e2cb <__moddi3+0x14b>
c002e2fe:	66 90                	xchg   ax,ax

c002e300 <__udivdi3>:
c002e300:	55                   	push   ebp
c002e301:	57                   	push   edi
c002e302:	56                   	push   esi
c002e303:	53                   	push   ebx
c002e304:	83 ec 1c             	sub    esp,0x1c
c002e307:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e30b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e30f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e317:	85 d2                	test   edx,edx
c002e319:	75 41                	jne    c002e35c <__udivdi3+0x5c>
c002e31b:	39 f7                	cmp    edi,esi
c002e31d:	76 15                	jbe    c002e334 <__udivdi3+0x34>
c002e31f:	89 e8                	mov    eax,ebp
c002e321:	89 f2                	mov    edx,esi
c002e323:	f7 f7                	div    edi
c002e325:	31 db                	xor    ebx,ebx
c002e327:	89 da                	mov    edx,ebx
c002e329:	83 c4 1c             	add    esp,0x1c
c002e32c:	5b                   	pop    ebx
c002e32d:	5e                   	pop    esi
c002e32e:	5f                   	pop    edi
c002e32f:	5d                   	pop    ebp
c002e330:	c3                   	ret    
c002e331:	8d 76 00             	lea    esi,[esi+0x0]
c002e334:	89 f9                	mov    ecx,edi
c002e336:	85 ff                	test   edi,edi
c002e338:	75 0b                	jne    c002e345 <__udivdi3+0x45>
c002e33a:	b8 01 00 00 00       	mov    eax,0x1
c002e33f:	31 d2                	xor    edx,edx
c002e341:	f7 f7                	div    edi
c002e343:	89 c1                	mov    ecx,eax
c002e345:	31 d2                	xor    edx,edx
c002e347:	89 f0                	mov    eax,esi
c002e349:	f7 f1                	div    ecx
c002e34b:	89 c3                	mov    ebx,eax
c002e34d:	89 e8                	mov    eax,ebp
c002e34f:	f7 f1                	div    ecx
c002e351:	89 da                	mov    edx,ebx
c002e353:	83 c4 1c             	add    esp,0x1c
c002e356:	5b                   	pop    ebx
c002e357:	5e                   	pop    esi
c002e358:	5f                   	pop    edi
c002e359:	5d                   	pop    ebp
c002e35a:	c3                   	ret    
c002e35b:	90                   	nop
c002e35c:	39 f2                	cmp    edx,esi
c002e35e:	77 1c                	ja     c002e37c <__udivdi3+0x7c>
c002e360:	0f bd da             	bsr    ebx,edx
c002e363:	83 f3 1f             	xor    ebx,0x1f
c002e366:	75 24                	jne    c002e38c <__udivdi3+0x8c>
c002e368:	39 f2                	cmp    edx,esi
c002e36a:	72 08                	jb     c002e374 <__udivdi3+0x74>
c002e36c:	39 ef                	cmp    edi,ebp
c002e36e:	0f 87 84 00 00 00    	ja     c002e3f8 <__udivdi3+0xf8>
c002e374:	b8 01 00 00 00       	mov    eax,0x1
c002e379:	eb ac                	jmp    c002e327 <__udivdi3+0x27>
c002e37b:	90                   	nop
c002e37c:	31 db                	xor    ebx,ebx
c002e37e:	31 c0                	xor    eax,eax
c002e380:	89 da                	mov    edx,ebx
c002e382:	83 c4 1c             	add    esp,0x1c
c002e385:	5b                   	pop    ebx
c002e386:	5e                   	pop    esi
c002e387:	5f                   	pop    edi
c002e388:	5d                   	pop    ebp
c002e389:	c3                   	ret    
c002e38a:	66 90                	xchg   ax,ax
c002e38c:	b8 20 00 00 00       	mov    eax,0x20
c002e391:	29 d8                	sub    eax,ebx
c002e393:	88 d9                	mov    cl,bl
c002e395:	d3 e2                	shl    edx,cl
c002e397:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e39b:	89 fa                	mov    edx,edi
c002e39d:	88 c1                	mov    cl,al
c002e39f:	d3 ea                	shr    edx,cl
c002e3a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e3a5:	09 d1                	or     ecx,edx
c002e3a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e3ab:	88 d9                	mov    cl,bl
c002e3ad:	d3 e7                	shl    edi,cl
c002e3af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e3b3:	89 f7                	mov    edi,esi
c002e3b5:	88 c1                	mov    cl,al
c002e3b7:	d3 ef                	shr    edi,cl
c002e3b9:	88 d9                	mov    cl,bl
c002e3bb:	d3 e6                	shl    esi,cl
c002e3bd:	89 ea                	mov    edx,ebp
c002e3bf:	88 c1                	mov    cl,al
c002e3c1:	d3 ea                	shr    edx,cl
c002e3c3:	09 d6                	or     esi,edx
c002e3c5:	89 f0                	mov    eax,esi
c002e3c7:	89 fa                	mov    edx,edi
c002e3c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e3cd:	89 d7                	mov    edi,edx
c002e3cf:	89 c6                	mov    esi,eax
c002e3d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e3d5:	39 d7                	cmp    edi,edx
c002e3d7:	72 13                	jb     c002e3ec <__udivdi3+0xec>
c002e3d9:	74 09                	je     c002e3e4 <__udivdi3+0xe4>
c002e3db:	89 f0                	mov    eax,esi
c002e3dd:	31 db                	xor    ebx,ebx
c002e3df:	e9 43 ff ff ff       	jmp    c002e327 <__udivdi3+0x27>
c002e3e4:	88 d9                	mov    cl,bl
c002e3e6:	d3 e5                	shl    ebp,cl
c002e3e8:	39 c5                	cmp    ebp,eax
c002e3ea:	73 ef                	jae    c002e3db <__udivdi3+0xdb>
c002e3ec:	8d 46 ff             	lea    eax,[esi-0x1]
c002e3ef:	31 db                	xor    ebx,ebx
c002e3f1:	e9 31 ff ff ff       	jmp    c002e327 <__udivdi3+0x27>
c002e3f6:	66 90                	xchg   ax,ax
c002e3f8:	31 c0                	xor    eax,eax
c002e3fa:	e9 28 ff ff ff       	jmp    c002e327 <__udivdi3+0x27>
c002e3ff:	90                   	nop

c002e400 <__umoddi3>:
c002e400:	55                   	push   ebp
c002e401:	57                   	push   edi
c002e402:	56                   	push   esi
c002e403:	53                   	push   ebx
c002e404:	83 ec 1c             	sub    esp,0x1c
c002e407:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e40b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e40f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e417:	89 da                	mov    edx,ebx
c002e419:	85 c0                	test   eax,eax
c002e41b:	75 37                	jne    c002e454 <__umoddi3+0x54>
c002e41d:	39 df                	cmp    edi,ebx
c002e41f:	76 13                	jbe    c002e434 <__umoddi3+0x34>
c002e421:	89 f0                	mov    eax,esi
c002e423:	f7 f7                	div    edi
c002e425:	89 d0                	mov    eax,edx
c002e427:	31 d2                	xor    edx,edx
c002e429:	83 c4 1c             	add    esp,0x1c
c002e42c:	5b                   	pop    ebx
c002e42d:	5e                   	pop    esi
c002e42e:	5f                   	pop    edi
c002e42f:	5d                   	pop    ebp
c002e430:	c3                   	ret    
c002e431:	8d 76 00             	lea    esi,[esi+0x0]
c002e434:	89 fd                	mov    ebp,edi
c002e436:	85 ff                	test   edi,edi
c002e438:	75 0b                	jne    c002e445 <__umoddi3+0x45>
c002e43a:	b8 01 00 00 00       	mov    eax,0x1
c002e43f:	31 d2                	xor    edx,edx
c002e441:	f7 f7                	div    edi
c002e443:	89 c5                	mov    ebp,eax
c002e445:	89 d8                	mov    eax,ebx
c002e447:	31 d2                	xor    edx,edx
c002e449:	f7 f5                	div    ebp
c002e44b:	89 f0                	mov    eax,esi
c002e44d:	f7 f5                	div    ebp
c002e44f:	89 d0                	mov    eax,edx
c002e451:	eb d4                	jmp    c002e427 <__umoddi3+0x27>
c002e453:	90                   	nop
c002e454:	89 f1                	mov    ecx,esi
c002e456:	39 d8                	cmp    eax,ebx
c002e458:	76 0a                	jbe    c002e464 <__umoddi3+0x64>
c002e45a:	89 f0                	mov    eax,esi
c002e45c:	83 c4 1c             	add    esp,0x1c
c002e45f:	5b                   	pop    ebx
c002e460:	5e                   	pop    esi
c002e461:	5f                   	pop    edi
c002e462:	5d                   	pop    ebp
c002e463:	c3                   	ret    
c002e464:	0f bd e8             	bsr    ebp,eax
c002e467:	83 f5 1f             	xor    ebp,0x1f
c002e46a:	75 1c                	jne    c002e488 <__umoddi3+0x88>
c002e46c:	39 d8                	cmp    eax,ebx
c002e46e:	72 04                	jb     c002e474 <__umoddi3+0x74>
c002e470:	39 f7                	cmp    edi,esi
c002e472:	77 08                	ja     c002e47c <__umoddi3+0x7c>
c002e474:	89 da                	mov    edx,ebx
c002e476:	29 fe                	sub    esi,edi
c002e478:	19 c2                	sbb    edx,eax
c002e47a:	89 f1                	mov    ecx,esi
c002e47c:	89 c8                	mov    eax,ecx
c002e47e:	83 c4 1c             	add    esp,0x1c
c002e481:	5b                   	pop    ebx
c002e482:	5e                   	pop    esi
c002e483:	5f                   	pop    edi
c002e484:	5d                   	pop    ebp
c002e485:	c3                   	ret    
c002e486:	66 90                	xchg   ax,ax
c002e488:	ba 20 00 00 00       	mov    edx,0x20
c002e48d:	29 ea                	sub    edx,ebp
c002e48f:	89 e9                	mov    ecx,ebp
c002e491:	d3 e0                	shl    eax,cl
c002e493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e497:	89 f8                	mov    eax,edi
c002e499:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e49d:	88 d1                	mov    cl,dl
c002e49f:	d3 e8                	shr    eax,cl
c002e4a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e4a5:	09 c1                	or     ecx,eax
c002e4a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e4ab:	89 e9                	mov    ecx,ebp
c002e4ad:	d3 e7                	shl    edi,cl
c002e4af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e4b3:	89 d8                	mov    eax,ebx
c002e4b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e4b9:	88 d1                	mov    cl,dl
c002e4bb:	d3 e8                	shr    eax,cl
c002e4bd:	89 c7                	mov    edi,eax
c002e4bf:	89 e9                	mov    ecx,ebp
c002e4c1:	d3 e3                	shl    ebx,cl
c002e4c3:	89 f0                	mov    eax,esi
c002e4c5:	88 d1                	mov    cl,dl
c002e4c7:	d3 e8                	shr    eax,cl
c002e4c9:	09 d8                	or     eax,ebx
c002e4cb:	89 e9                	mov    ecx,ebp
c002e4cd:	d3 e6                	shl    esi,cl
c002e4cf:	89 f3                	mov    ebx,esi
c002e4d1:	89 fa                	mov    edx,edi
c002e4d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e4d7:	89 d1                	mov    ecx,edx
c002e4d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e4dd:	89 c6                	mov    esi,eax
c002e4df:	89 d7                	mov    edi,edx
c002e4e1:	39 d1                	cmp    ecx,edx
c002e4e3:	72 27                	jb     c002e50c <__umoddi3+0x10c>
c002e4e5:	74 21                	je     c002e508 <__umoddi3+0x108>
c002e4e7:	89 ca                	mov    edx,ecx
c002e4e9:	29 f3                	sub    ebx,esi
c002e4eb:	19 fa                	sbb    edx,edi
c002e4ed:	89 d0                	mov    eax,edx
c002e4ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e4f3:	d3 e0                	shl    eax,cl
c002e4f5:	89 e9                	mov    ecx,ebp
c002e4f7:	d3 eb                	shr    ebx,cl
c002e4f9:	09 d8                	or     eax,ebx
c002e4fb:	d3 ea                	shr    edx,cl
c002e4fd:	83 c4 1c             	add    esp,0x1c
c002e500:	5b                   	pop    ebx
c002e501:	5e                   	pop    esi
c002e502:	5f                   	pop    edi
c002e503:	5d                   	pop    ebp
c002e504:	c3                   	ret    
c002e505:	8d 76 00             	lea    esi,[esi+0x0]
c002e508:	39 c3                	cmp    ebx,eax
c002e50a:	73 db                	jae    c002e4e7 <__umoddi3+0xe7>
c002e50c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e510:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e514:	89 d7                	mov    edi,edx
c002e516:	89 c6                	mov    esi,eax
c002e518:	eb cd                	jmp    c002e4e7 <__umoddi3+0xe7>

Disassembly of section .init:

c002e51a <_init>:
c002e51a:	55                   	push   ebp
c002e51b:	89 e5                	mov    ebp,esp
c002e51d:	e8 d2 1b fd ff       	call   c00000f4 <frame_dummy>
c002e522:	e8 e5 fa ff ff       	call   c002e00c <__do_global_ctors_aux>
c002e527:	5d                   	pop    ebp
c002e528:	c3                   	ret    

Disassembly of section .fini:

c002e529 <_fini>:
c002e529:	55                   	push   ebp
c002e52a:	89 e5                	mov    ebp,esp
c002e52c:	e8 53 1b fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e531:	5d                   	pop    ebp
c002e532:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e534 <Computer::~Computer()>:
c002e534:	83 ec 0c             	sub    esp,0xc
c002e537:	ba e4 0c 03 c0       	mov    edx,0xc0030ce4
c002e53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e540:	89 10                	mov    DWORD PTR [eax],edx
c002e542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e546:	83 ec 0c             	sub    esp,0xc
c002e549:	50                   	push   eax
c002e54a:	e8 0f cc fe ff       	call   c001b15e <Device::~Device()>
c002e54f:	83 c4 10             	add    esp,0x10
c002e552:	90                   	nop
c002e553:	83 c4 0c             	add    esp,0xc
c002e556:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e558 <Computer::~Computer()>:
c002e558:	83 ec 0c             	sub    esp,0xc
c002e55b:	83 ec 0c             	sub    esp,0xc
c002e55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e562:	e8 cd ff ff ff       	call   c002e534 <Computer::~Computer()>
c002e567:	83 c4 10             	add    esp,0x10
c002e56a:	83 ec 08             	sub    esp,0x8
c002e56d:	68 70 01 00 00       	push   0x170
c002e572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e576:	e8 4d ab fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002e57b:	83 c4 10             	add    esp,0x10
c002e57e:	83 c4 0c             	add    esp,0xc
c002e581:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e582 <idleCommon()>:
c002e582:	83 ec 0c             	sub    esp,0xc
c002e585:	fa                   	cli    
c002e586:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e58c:	e8 7b 66 ff ff       	call   c0024c0c <schedule()>
c002e591:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e596:	48                   	dec    eax
c002e597:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e59c:	75 01                	jne    c002e59f <idleCommon()+0x1d>
c002e59e:	fb                   	sti    
c002e59f:	83 c4 0c             	add    esp,0xc
c002e5a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e5a4 <LinkedList<UnixFile>::~LinkedList()>:
c002e5a4:	90                   	nop
c002e5a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e5a6 <LinkedList<UnixFile>::LinkedList()>:
c002e5a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e5bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e5c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e5d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e5db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e5e6:	90                   	nop
c002e5e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e5e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e5e8:	83 ec 0c             	sub    esp,0xc
c002e5eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e5f0:	75 10                	jne    c002e602 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e5f2:	83 ec 0c             	sub    esp,0xc
c002e5f5:	68 f8 0e 03 c0       	push   0xc0030ef8
c002e5fa:	e8 74 1a ff ff       	call   c0020073 <KePanic(char const*)>
c002e5ff:	83 c4 10             	add    esp,0x10
c002e602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e606:	8b 00                	mov    eax,DWORD PTR [eax]
c002e608:	85 c0                	test   eax,eax
c002e60a:	74 34                	je     c002e640 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e613:	85 c0                	test   eax,eax
c002e615:	74 29                	je     c002e640 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e61b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e61e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e622:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e62d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e637:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e63e:	eb 65                	jmp    c002e6a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e644:	8b 00                	mov    eax,DWORD PTR [eax]
c002e646:	85 c0                	test   eax,eax
c002e648:	75 4b                	jne    c002e695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e64e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e651:	85 c0                	test   eax,eax
c002e653:	75 40                	jne    c002e695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e659:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e65d:	89 10                	mov    DWORD PTR [eax],edx
c002e65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e663:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e667:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e671:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e67c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e67f:	85 c0                	test   eax,eax
c002e681:	74 22                	je     c002e6a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e683:	83 ec 0c             	sub    esp,0xc
c002e686:	68 1a 0f 03 c0       	push   0xc0030f1a
c002e68b:	e8 e3 19 ff ff       	call   c0020073 <KePanic(char const*)>
c002e690:	83 c4 10             	add    esp,0x10
c002e693:	eb 10                	jmp    c002e6a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e695:	83 ec 0c             	sub    esp,0xc
c002e698:	68 24 0f 03 c0       	push   0xc0030f24
c002e69d:	e8 d1 19 ff ff       	call   c0020073 <KePanic(char const*)>
c002e6a2:	83 c4 10             	add    esp,0x10
c002e6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e6ac:	8d 50 01             	lea    edx,[eax+0x1]
c002e6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e6b6:	90                   	nop
c002e6b7:	83 c4 0c             	add    esp,0xc
c002e6ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e6bc <LinkedList<UnixFile>::getFirstElement()>:
c002e6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e6c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e6c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e6c4 <LinkedList<UnixFile>::removeFirst()>:
c002e6c4:	83 ec 0c             	sub    esp,0xc
c002e6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6cb:	8b 00                	mov    eax,DWORD PTR [eax]
c002e6cd:	85 c0                	test   eax,eax
c002e6cf:	75 12                	jne    c002e6e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e6d1:	83 ec 0c             	sub    esp,0xc
c002e6d4:	68 30 0f 03 c0       	push   0xc0030f30
c002e6d9:	e8 95 19 ff ff       	call   c0020073 <KePanic(char const*)>
c002e6de:	83 c4 10             	add    esp,0x10
c002e6e1:	eb 7e                	jmp    c002e761 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e6ed:	85 c0                	test   eax,eax
c002e6ef:	74 10                	je     c002e701 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e6f1:	83 ec 0c             	sub    esp,0xc
c002e6f4:	68 7b 0f 03 c0       	push   0xc0030f7b
c002e6f9:	e8 75 19 ff ff       	call   c0020073 <KePanic(char const*)>
c002e6fe:	83 c4 10             	add    esp,0x10
c002e701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e705:	8b 00                	mov    eax,DWORD PTR [eax]
c002e707:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e70a:	85 c0                	test   eax,eax
c002e70c:	75 33                	jne    c002e741 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e712:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e71c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e727:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e72a:	83 f8 01             	cmp    eax,0x1
c002e72d:	74 21                	je     c002e750 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e72f:	83 ec 0c             	sub    esp,0xc
c002e732:	68 54 0f 03 c0       	push   0xc0030f54
c002e737:	e8 37 19 ff ff       	call   c0020073 <KePanic(char const*)>
c002e73c:	83 c4 10             	add    esp,0x10
c002e73f:	eb 0f                	jmp    c002e750 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e745:	8b 00                	mov    eax,DWORD PTR [eax]
c002e747:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002e74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e74e:	89 10                	mov    DWORD PTR [eax],edx
c002e750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e754:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e757:	8d 50 ff             	lea    edx,[eax-0x1]
c002e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e75e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e761:	83 c4 0c             	add    esp,0xc
c002e764:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002e766 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002e766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e76a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e76d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002e76e <DriverlessDevice::~DriverlessDevice()>:
c002e76e:	ba a8 1b 03 c0       	mov    edx,0xc0031ba8
c002e773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e777:	89 10                	mov    DWORD PTR [eax],edx
c002e779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e77d:	50                   	push   eax
c002e77e:	e8 db c9 fe ff       	call   c001b15e <Device::~Device()>
c002e783:	83 c4 04             	add    esp,0x4
c002e786:	90                   	nop
c002e787:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002e788 <DriverlessDevice::~DriverlessDevice()>:
c002e788:	83 ec 0c             	sub    esp,0xc
c002e78b:	83 ec 0c             	sub    esp,0xc
c002e78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e792:	e8 d7 ff ff ff       	call   c002e76e <DriverlessDevice::~DriverlessDevice()>
c002e797:	83 c4 10             	add    esp,0x10
c002e79a:	83 ec 08             	sub    esp,0x8
c002e79d:	68 58 01 00 00       	push   0x158
c002e7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e7a6:	e8 1d a9 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002e7ab:	83 c4 10             	add    esp,0x10
c002e7ae:	83 c4 0c             	add    esp,0xc
c002e7b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002e7b2 <LinkedList<Device>::addElement(Device*)>:
c002e7b2:	83 ec 0c             	sub    esp,0xc
c002e7b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e7ba:	75 10                	jne    c002e7cc <LinkedList<Device>::addElement(Device*)+0x1a>
c002e7bc:	83 ec 0c             	sub    esp,0xc
c002e7bf:	68 f8 0e 03 c0       	push   0xc0030ef8
c002e7c4:	e8 aa 18 ff ff       	call   c0020073 <KePanic(char const*)>
c002e7c9:	83 c4 10             	add    esp,0x10
c002e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7d0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e7d2:	85 c0                	test   eax,eax
c002e7d4:	74 3a                	je     c002e810 <LinkedList<Device>::addElement(Device*)+0x5e>
c002e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e7dd:	85 c0                	test   eax,eax
c002e7df:	74 2f                	je     c002e810 <LinkedList<Device>::addElement(Device*)+0x5e>
c002e7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e7e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e7ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e7fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e801:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e804:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002e80e:	eb 68                	jmp    c002e878 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e814:	8b 00                	mov    eax,DWORD PTR [eax]
c002e816:	85 c0                	test   eax,eax
c002e818:	75 4e                	jne    c002e868 <LinkedList<Device>::addElement(Device*)+0xb6>
c002e81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e821:	85 c0                	test   eax,eax
c002e823:	75 43                	jne    c002e868 <LinkedList<Device>::addElement(Device*)+0xb6>
c002e825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e829:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e82d:	89 10                	mov    DWORD PTR [eax],edx
c002e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e833:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e837:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e83e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e841:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e84f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e852:	85 c0                	test   eax,eax
c002e854:	74 22                	je     c002e878 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e856:	83 ec 0c             	sub    esp,0xc
c002e859:	68 1a 0f 03 c0       	push   0xc0030f1a
c002e85e:	e8 10 18 ff ff       	call   c0020073 <KePanic(char const*)>
c002e863:	83 c4 10             	add    esp,0x10
c002e866:	eb 10                	jmp    c002e878 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e868:	83 ec 0c             	sub    esp,0xc
c002e86b:	68 24 0f 03 c0       	push   0xc0030f24
c002e870:	e8 fe 17 ff ff       	call   c0020073 <KePanic(char const*)>
c002e875:	83 c4 10             	add    esp,0x10
c002e878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e87c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e87f:	8d 50 01             	lea    edx,[eax+0x1]
c002e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e886:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e889:	90                   	nop
c002e88a:	83 c4 0c             	add    esp,0xc
c002e88d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002e88e <LinkedList<Device>::LinkedList()>:
c002e88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e892:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e89c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8ce:	90                   	nop
c002e8cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002e8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8d6:	85 c0                	test   eax,eax
c002e8d8:	75 0e                	jne    c002e8e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002e8da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8e1:	85 c0                	test   eax,eax
c002e8e3:	75 03                	jne    c002e8e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002e8e5:	b0 01                	mov    al,0x1
c002e8e7:	c3                   	ret    
c002e8e8:	b0 00                	mov    al,0x0
c002e8ea:	90                   	nop
c002e8eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002e8ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002e8ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002e8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002e8f4:	83 ec 0c             	sub    esp,0xc
c002e8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8fd:	85 c0                	test   eax,eax
c002e8ff:	75 17                	jne    c002e918 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002e901:	83 ec 0c             	sub    esp,0xc
c002e904:	68 30 0f 03 c0       	push   0xc0030f30
c002e909:	e8 65 17 ff ff       	call   c0020073 <KePanic(char const*)>
c002e90e:	83 c4 10             	add    esp,0x10
c002e911:	e9 96 00 00 00       	jmp    c002e9ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002e916:	66 90                	xchg   ax,ax
c002e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e91c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e91f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002e922:	85 c0                	test   eax,eax
c002e924:	0f 95 c0             	setne  al
c002e927:	0f b6 c0             	movzx  eax,al
c002e92a:	85 c0                	test   eax,eax
c002e92c:	74 12                	je     c002e940 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002e92e:	83 ec 0c             	sub    esp,0xc
c002e931:	68 7b 0f 03 c0       	push   0xc0030f7b
c002e936:	e8 38 17 ff ff       	call   c0020073 <KePanic(char const*)>
c002e93b:	83 c4 10             	add    esp,0x10
c002e93e:	66 90                	xchg   ax,ax
c002e940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e944:	8b 00                	mov    eax,DWORD PTR [eax]
c002e946:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002e949:	85 c0                	test   eax,eax
c002e94b:	0f 94 c0             	sete   al
c002e94e:	0f b6 c0             	movzx  eax,al
c002e951:	85 c0                	test   eax,eax
c002e953:	74 33                	je     c002e988 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e963:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e96e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e971:	83 f8 01             	cmp    eax,0x1
c002e974:	74 22                	je     c002e998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002e976:	83 ec 0c             	sub    esp,0xc
c002e979:	68 54 0f 03 c0       	push   0xc0030f54
c002e97e:	e8 f0 16 ff ff       	call   c0020073 <KePanic(char const*)>
c002e983:	83 c4 10             	add    esp,0x10
c002e986:	eb 10                	jmp    c002e998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002e988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e98c:	8b 00                	mov    eax,DWORD PTR [eax]
c002e98e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e995:	89 10                	mov    DWORD PTR [eax],edx
c002e997:	90                   	nop
c002e998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e99c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e99f:	8d 50 ff             	lea    edx,[eax-0x1]
c002e9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9a9:	8d 76 00             	lea    esi,[esi+0x0]
c002e9ac:	83 c4 0c             	add    esp,0xc
c002e9af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002e9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002e9b0:	83 ec 0c             	sub    esp,0xc
c002e9b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e9b8:	75 12                	jne    c002e9cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002e9ba:	83 ec 0c             	sub    esp,0xc
c002e9bd:	68 f8 0e 03 c0       	push   0xc0030ef8
c002e9c2:	e8 ac 16 ff ff       	call   c0020073 <KePanic(char const*)>
c002e9c7:	83 c4 10             	add    esp,0x10
c002e9ca:	66 90                	xchg   ax,ax
c002e9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9d2:	85 c0                	test   eax,eax
c002e9d4:	74 36                	je     c002ea0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002e9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9dd:	85 c0                	test   eax,eax
c002e9df:	74 2b                	je     c002ea0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9ec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ea08:	eb 6a                	jmp    c002ea74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ea0a:	66 90                	xchg   ax,ax
c002ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea10:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea12:	85 c0                	test   eax,eax
c002ea14:	75 4e                	jne    c002ea64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ea16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea1d:	85 c0                	test   eax,eax
c002ea1f:	75 43                	jne    c002ea64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ea21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea29:	89 10                	mov    DWORD PTR [eax],edx
c002ea2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ea44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea4b:	85 c0                	test   eax,eax
c002ea4d:	74 25                	je     c002ea74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ea4f:	83 ec 0c             	sub    esp,0xc
c002ea52:	68 1a 0f 03 c0       	push   0xc0030f1a
c002ea57:	e8 17 16 ff ff       	call   c0020073 <KePanic(char const*)>
c002ea5c:	83 c4 10             	add    esp,0x10
c002ea5f:	eb 13                	jmp    c002ea74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ea61:	8d 76 00             	lea    esi,[esi+0x0]
c002ea64:	83 ec 0c             	sub    esp,0xc
c002ea67:	68 24 0f 03 c0       	push   0xc0030f24
c002ea6c:	e8 02 16 ff ff       	call   c0020073 <KePanic(char const*)>
c002ea71:	83 c4 10             	add    esp,0x10
c002ea74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea7b:	8d 50 01             	lea    edx,[eax+0x1]
c002ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea85:	90                   	nop
c002ea86:	83 c4 0c             	add    esp,0xc
c002ea89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ea8c <ACPI::~ACPI()>:
c002ea8c:	83 ec 0c             	sub    esp,0xc
c002ea8f:	ba 50 22 03 c0       	mov    edx,0xc0032250
c002ea94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea98:	89 10                	mov    DWORD PTR [eax],edx
c002ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea9e:	83 ec 0c             	sub    esp,0xc
c002eaa1:	50                   	push   eax
c002eaa2:	e8 b7 c6 fe ff       	call   c001b15e <Device::~Device()>
c002eaa7:	83 c4 10             	add    esp,0x10
c002eaaa:	90                   	nop
c002eaab:	83 c4 0c             	add    esp,0xc
c002eaae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002eab0 <ACPI::~ACPI()>:
c002eab0:	83 ec 0c             	sub    esp,0xc
c002eab3:	83 ec 0c             	sub    esp,0xc
c002eab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eaba:	e8 cd ff ff ff       	call   c002ea8c <ACPI::~ACPI()>
c002eabf:	83 c4 10             	add    esp,0x10
c002eac2:	83 ec 08             	sub    esp,0x8
c002eac5:	68 64 12 00 00       	push   0x1264
c002eaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eace:	e8 f5 a5 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ead3:	83 c4 10             	add    esp,0x10
c002ead6:	83 c4 0c             	add    esp,0xc
c002ead9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002eadc <LinkedList<Device>::~LinkedList()>:
c002eadc:	90                   	nop
c002eadd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002eae0 <LinkedList<Device>::isEmpty()>:
c002eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eae4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eae6:	85 c0                	test   eax,eax
c002eae8:	75 0e                	jne    c002eaf8 <LinkedList<Device>::isEmpty()+0x18>
c002eaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eaee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaf1:	85 c0                	test   eax,eax
c002eaf3:	75 03                	jne    c002eaf8 <LinkedList<Device>::isEmpty()+0x18>
c002eaf5:	b0 01                	mov    al,0x1
c002eaf7:	c3                   	ret    
c002eaf8:	b0 00                	mov    al,0x0
c002eafa:	90                   	nop
c002eafb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002eafc <LinkedList<Device>::getFirstElement()>:
c002eafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb00:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002eb04 <LinkedList<Device>::removeFirst()>:
c002eb04:	83 ec 0c             	sub    esp,0xc
c002eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb0b:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb0d:	85 c0                	test   eax,eax
c002eb0f:	75 17                	jne    c002eb28 <LinkedList<Device>::removeFirst()+0x24>
c002eb11:	83 ec 0c             	sub    esp,0xc
c002eb14:	68 30 0f 03 c0       	push   0xc0030f30
c002eb19:	e8 55 15 ff ff       	call   c0020073 <KePanic(char const*)>
c002eb1e:	83 c4 10             	add    esp,0x10
c002eb21:	e9 92 00 00 00       	jmp    c002ebb8 <LinkedList<Device>::removeFirst()+0xb4>
c002eb26:	66 90                	xchg   ax,ax
c002eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eb35:	85 c0                	test   eax,eax
c002eb37:	74 13                	je     c002eb4c <LinkedList<Device>::removeFirst()+0x48>
c002eb39:	83 ec 0c             	sub    esp,0xc
c002eb3c:	68 7b 0f 03 c0       	push   0xc0030f7b
c002eb41:	e8 2d 15 ff ff       	call   c0020073 <KePanic(char const*)>
c002eb46:	83 c4 10             	add    esp,0x10
c002eb49:	8d 76 00             	lea    esi,[esi+0x0]
c002eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb50:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eb58:	85 c0                	test   eax,eax
c002eb5a:	75 34                	jne    c002eb90 <LinkedList<Device>::removeFirst()+0x8c>
c002eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb78:	83 f8 01             	cmp    eax,0x1
c002eb7b:	74 27                	je     c002eba4 <LinkedList<Device>::removeFirst()+0xa0>
c002eb7d:	83 ec 0c             	sub    esp,0xc
c002eb80:	68 54 0f 03 c0       	push   0xc0030f54
c002eb85:	e8 e9 14 ff ff       	call   c0020073 <KePanic(char const*)>
c002eb8a:	83 c4 10             	add    esp,0x10
c002eb8d:	eb 15                	jmp    c002eba4 <LinkedList<Device>::removeFirst()+0xa0>
c002eb8f:	90                   	nop
c002eb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb94:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002eb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eba0:	89 10                	mov    DWORD PTR [eax],edx
c002eba2:	66 90                	xchg   ax,ax
c002eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eba8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebab:	8d 50 ff             	lea    edx,[eax-0x1]
c002ebae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ebb5:	8d 76 00             	lea    esi,[esi+0x0]
c002ebb8:	83 c4 0c             	add    esp,0xc
c002ebbb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ebbc <CPU::~CPU()>:
c002ebbc:	83 ec 0c             	sub    esp,0xc
c002ebbf:	ba f8 23 03 c0       	mov    edx,0xc00323f8
c002ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc8:	89 10                	mov    DWORD PTR [eax],edx
c002ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebce:	83 ec 0c             	sub    esp,0xc
c002ebd1:	50                   	push   eax
c002ebd2:	e8 87 c5 fe ff       	call   c001b15e <Device::~Device()>
c002ebd7:	83 c4 10             	add    esp,0x10
c002ebda:	90                   	nop
c002ebdb:	83 c4 0c             	add    esp,0xc
c002ebde:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ebe0 <CPU::~CPU()>:
c002ebe0:	83 ec 0c             	sub    esp,0xc
c002ebe3:	83 ec 0c             	sub    esp,0xc
c002ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ebea:	e8 cd ff ff ff       	call   c002ebbc <CPU::~CPU()>
c002ebef:	83 c4 10             	add    esp,0x10
c002ebf2:	83 ec 08             	sub    esp,0x8
c002ebf5:	68 94 11 00 00       	push   0x1194
c002ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ebfe:	e8 c5 a4 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ec03:	83 c4 10             	add    esp,0x10
c002ec06:	83 c4 0c             	add    esp,0xc
c002ec09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ec0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ec0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ec10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ec14 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ec14:	90                   	nop
c002ec15:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ec18 <ThreadControlBlock::ThreadControlBlock()>:
c002ec18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec1c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ec23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec27:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ec2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec32:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ec39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec3d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002ec44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec48:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002ec4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec53:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002ec57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec5b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002ec5f:	90                   	nop
c002ec60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002ec64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002ec64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eca4:	90                   	nop
c002eca5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002eca6 <PCI::~PCI()>:
c002eca6:	83 ec 0c             	sub    esp,0xc
c002eca9:	ba 18 33 03 c0       	mov    edx,0xc0033318
c002ecae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb2:	89 10                	mov    DWORD PTR [eax],edx
c002ecb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb8:	83 ec 0c             	sub    esp,0xc
c002ecbb:	50                   	push   eax
c002ecbc:	e8 2f bf fe ff       	call   c001abf0 <Bus::~Bus()>
c002ecc1:	83 c4 10             	add    esp,0x10
c002ecc4:	90                   	nop
c002ecc5:	83 c4 0c             	add    esp,0xc
c002ecc8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002ecca <PCI::~PCI()>:
c002ecca:	83 ec 0c             	sub    esp,0xc
c002eccd:	83 ec 0c             	sub    esp,0xc
c002ecd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ecd4:	e8 cd ff ff ff       	call   c002eca6 <PCI::~PCI()>
c002ecd9:	83 c4 10             	add    esp,0x10
c002ecdc:	83 ec 08             	sub    esp,0x8
c002ecdf:	68 5c 01 00 00       	push   0x15c
c002ece4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ece8:	e8 db a3 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002eced:	83 c4 10             	add    esp,0x10
c002ecf0:	83 c4 0c             	add    esp,0xc
c002ecf3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002ecf4 <IDE::~IDE()>:
c002ecf4:	83 ec 0c             	sub    esp,0xc
c002ecf7:	ba cc 33 03 c0       	mov    edx,0xc00333cc
c002ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed00:	89 10                	mov    DWORD PTR [eax],edx
c002ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed06:	83 ec 0c             	sub    esp,0xc
c002ed09:	50                   	push   eax
c002ed0a:	e8 dd c8 fe ff       	call   c001b5ec <HardDiskController::~HardDiskController()>
c002ed0f:	83 c4 10             	add    esp,0x10
c002ed12:	90                   	nop
c002ed13:	83 c4 0c             	add    esp,0xc
c002ed16:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002ed18 <IDE::~IDE()>:
c002ed18:	83 ec 0c             	sub    esp,0xc
c002ed1b:	83 ec 0c             	sub    esp,0xc
c002ed1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed22:	e8 cd ff ff ff       	call   c002ecf4 <IDE::~IDE()>
c002ed27:	83 c4 10             	add    esp,0x10
c002ed2a:	83 ec 08             	sub    esp,0x8
c002ed2d:	68 70 02 00 00       	push   0x270
c002ed32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed36:	e8 8d a3 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ed3b:	83 c4 10             	add    esp,0x10
c002ed3e:	83 c4 0c             	add    esp,0xc
c002ed41:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002ed42 <SATABus::~SATABus()>:
c002ed42:	83 ec 0c             	sub    esp,0xc
c002ed45:	ba 1c 34 03 c0       	mov    edx,0xc003341c
c002ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed4e:	89 10                	mov    DWORD PTR [eax],edx
c002ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed54:	83 ec 0c             	sub    esp,0xc
c002ed57:	50                   	push   eax
c002ed58:	e8 8f c8 fe ff       	call   c001b5ec <HardDiskController::~HardDiskController()>
c002ed5d:	83 c4 10             	add    esp,0x10
c002ed60:	90                   	nop
c002ed61:	83 c4 0c             	add    esp,0xc
c002ed64:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002ed66 <SATABus::~SATABus()>:
c002ed66:	83 ec 0c             	sub    esp,0xc
c002ed69:	83 ec 0c             	sub    esp,0xc
c002ed6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed70:	e8 cd ff ff ff       	call   c002ed42 <SATABus::~SATABus()>
c002ed75:	83 c4 10             	add    esp,0x10
c002ed78:	83 ec 08             	sub    esp,0x8
c002ed7b:	68 64 01 00 00       	push   0x164
c002ed80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed84:	e8 3f a3 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ed89:	83 c4 10             	add    esp,0x10
c002ed8c:	83 c4 0c             	add    esp,0xc
c002ed8f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002ed90 <ATA::~ATA()>:
c002ed90:	83 ec 0c             	sub    esp,0xc
c002ed93:	ba 5c 34 03 c0       	mov    edx,0xc003345c
c002ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed9c:	89 10                	mov    DWORD PTR [eax],edx
c002ed9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda2:	83 ec 0c             	sub    esp,0xc
c002eda5:	50                   	push   eax
c002eda6:	e8 23 c9 fe ff       	call   c001b6ce <PhysicalDisk::~PhysicalDisk()>
c002edab:	83 c4 10             	add    esp,0x10
c002edae:	90                   	nop
c002edaf:	83 c4 0c             	add    esp,0xc
c002edb2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002edb4 <ATA::~ATA()>:
c002edb4:	83 ec 0c             	sub    esp,0xc
c002edb7:	83 ec 0c             	sub    esp,0xc
c002edba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edbe:	e8 cd ff ff ff       	call   c002ed90 <ATA::~ATA()>
c002edc3:	83 c4 10             	add    esp,0x10
c002edc6:	83 ec 08             	sub    esp,0x8
c002edc9:	68 7c 01 00 00       	push   0x17c
c002edce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edd2:	e8 f1 a2 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002edd7:	83 c4 10             	add    esp,0x10
c002edda:	83 c4 0c             	add    esp,0xc
c002eddd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002edde <ATAPI::~ATAPI()>:
c002edde:	83 ec 0c             	sub    esp,0xc
c002ede1:	ba a4 34 03 c0       	mov    edx,0xc00334a4
c002ede6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edea:	89 10                	mov    DWORD PTR [eax],edx
c002edec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf0:	83 ec 0c             	sub    esp,0xc
c002edf3:	50                   	push   eax
c002edf4:	e8 d5 c8 fe ff       	call   c001b6ce <PhysicalDisk::~PhysicalDisk()>
c002edf9:	83 c4 10             	add    esp,0x10
c002edfc:	90                   	nop
c002edfd:	83 c4 0c             	add    esp,0xc
c002ee00:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002ee02 <ATAPI::~ATAPI()>:
c002ee02:	83 ec 0c             	sub    esp,0xc
c002ee05:	83 ec 0c             	sub    esp,0xc
c002ee08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee0c:	e8 cd ff ff ff       	call   c002edde <ATAPI::~ATAPI()>
c002ee11:	83 c4 10             	add    esp,0x10
c002ee14:	83 ec 08             	sub    esp,0x8
c002ee17:	68 84 01 00 00       	push   0x184
c002ee1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee20:	e8 a3 a2 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ee25:	83 c4 10             	add    esp,0x10
c002ee28:	83 c4 0c             	add    esp,0xc
c002ee2b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002ee2c <SATA::~SATA()>:
c002ee2c:	83 ec 0c             	sub    esp,0xc
c002ee2f:	ba 64 35 03 c0       	mov    edx,0xc0033564
c002ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee38:	89 10                	mov    DWORD PTR [eax],edx
c002ee3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee3e:	83 ec 0c             	sub    esp,0xc
c002ee41:	50                   	push   eax
c002ee42:	e8 87 c8 fe ff       	call   c001b6ce <PhysicalDisk::~PhysicalDisk()>
c002ee47:	83 c4 10             	add    esp,0x10
c002ee4a:	90                   	nop
c002ee4b:	83 c4 0c             	add    esp,0xc
c002ee4e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002ee50 <SATA::~SATA()>:
c002ee50:	83 ec 0c             	sub    esp,0xc
c002ee53:	83 ec 0c             	sub    esp,0xc
c002ee56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee5a:	e8 cd ff ff ff       	call   c002ee2c <SATA::~SATA()>
c002ee5f:	83 c4 10             	add    esp,0x10
c002ee62:	83 ec 08             	sub    esp,0x8
c002ee65:	68 7c 01 00 00       	push   0x17c
c002ee6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee6e:	e8 55 a2 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ee73:	83 c4 10             	add    esp,0x10
c002ee76:	83 c4 0c             	add    esp,0xc
c002ee79:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002ee7a <SATAPI::~SATAPI()>:
c002ee7a:	83 ec 0c             	sub    esp,0xc
c002ee7d:	ba 88 36 03 c0       	mov    edx,0xc0033688
c002ee82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee86:	89 10                	mov    DWORD PTR [eax],edx
c002ee88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee8c:	83 ec 0c             	sub    esp,0xc
c002ee8f:	50                   	push   eax
c002ee90:	e8 39 c8 fe ff       	call   c001b6ce <PhysicalDisk::~PhysicalDisk()>
c002ee95:	83 c4 10             	add    esp,0x10
c002ee98:	90                   	nop
c002ee99:	83 c4 0c             	add    esp,0xc
c002ee9c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002ee9e <SATAPI::~SATAPI()>:
c002ee9e:	83 ec 0c             	sub    esp,0xc
c002eea1:	83 ec 0c             	sub    esp,0xc
c002eea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eea8:	e8 cd ff ff ff       	call   c002ee7a <SATAPI::~SATAPI()>
c002eead:	83 c4 10             	add    esp,0x10
c002eeb0:	83 ec 08             	sub    esp,0x8
c002eeb3:	68 84 01 00 00       	push   0x184
c002eeb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eebc:	e8 07 a2 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002eec1:	83 c4 10             	add    esp,0x10
c002eec4:	83 c4 0c             	add    esp,0xc
c002eec7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002eec8 <IOAPIC::~IOAPIC()>:
c002eec8:	83 ec 0c             	sub    esp,0xc
c002eecb:	ba c8 36 03 c0       	mov    edx,0xc00336c8
c002eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eed4:	89 10                	mov    DWORD PTR [eax],edx
c002eed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeda:	83 ec 0c             	sub    esp,0xc
c002eedd:	50                   	push   eax
c002eede:	e8 7b c2 fe ff       	call   c001b15e <Device::~Device()>
c002eee3:	83 c4 10             	add    esp,0x10
c002eee6:	90                   	nop
c002eee7:	83 c4 0c             	add    esp,0xc
c002eeea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002eeec <IOAPIC::~IOAPIC()>:
c002eeec:	83 ec 0c             	sub    esp,0xc
c002eeef:	83 ec 0c             	sub    esp,0xc
c002eef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eef6:	e8 cd ff ff ff       	call   c002eec8 <IOAPIC::~IOAPIC()>
c002eefb:	83 c4 10             	add    esp,0x10
c002eefe:	83 ec 08             	sub    esp,0x8
c002ef01:	68 68 01 00 00       	push   0x168
c002ef06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef0a:	e8 b9 a1 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ef0f:	83 c4 10             	add    esp,0x10
c002ef12:	83 c4 0c             	add    esp,0xc
c002ef15:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002ef18 <APICTimer::~APICTimer()>:
c002ef18:	83 ec 0c             	sub    esp,0xc
c002ef1b:	ba 10 37 03 c0       	mov    edx,0xc0033710
c002ef20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef24:	89 10                	mov    DWORD PTR [eax],edx
c002ef26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef2a:	83 ec 0c             	sub    esp,0xc
c002ef2d:	50                   	push   eax
c002ef2e:	e8 0d dd fe ff       	call   c001cc40 <Timer::~Timer()>
c002ef33:	83 c4 10             	add    esp,0x10
c002ef36:	90                   	nop
c002ef37:	83 c4 0c             	add    esp,0xc
c002ef3a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002ef3c <APICTimer::~APICTimer()>:
c002ef3c:	83 ec 0c             	sub    esp,0xc
c002ef3f:	83 ec 0c             	sub    esp,0xc
c002ef42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef46:	e8 cd ff ff ff       	call   c002ef18 <APICTimer::~APICTimer()>
c002ef4b:	83 c4 10             	add    esp,0x10
c002ef4e:	83 ec 08             	sub    esp,0x8
c002ef51:	68 60 01 00 00       	push   0x160
c002ef56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef5a:	e8 69 a1 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002ef5f:	83 c4 10             	add    esp,0x10
c002ef62:	83 c4 0c             	add    esp,0xc
c002ef65:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002ef68 <PIT::~PIT()>:
c002ef68:	83 ec 0c             	sub    esp,0xc
c002ef6b:	ba 60 37 03 c0       	mov    edx,0xc0033760
c002ef70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef74:	89 10                	mov    DWORD PTR [eax],edx
c002ef76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef7a:	83 ec 0c             	sub    esp,0xc
c002ef7d:	50                   	push   eax
c002ef7e:	e8 bd dc fe ff       	call   c001cc40 <Timer::~Timer()>
c002ef83:	83 c4 10             	add    esp,0x10
c002ef86:	90                   	nop
c002ef87:	83 c4 0c             	add    esp,0xc
c002ef8a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002ef8c <PIT::~PIT()>:
c002ef8c:	83 ec 0c             	sub    esp,0xc
c002ef8f:	83 ec 0c             	sub    esp,0xc
c002ef92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef96:	e8 cd ff ff ff       	call   c002ef68 <PIT::~PIT()>
c002ef9b:	83 c4 10             	add    esp,0x10
c002ef9e:	83 ec 08             	sub    esp,0x8
c002efa1:	68 5c 01 00 00       	push   0x15c
c002efa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efaa:	e8 19 a1 fe ff       	call   c00190c8 <operator delete(void*, unsigned long)>
c002efaf:	83 c4 10             	add    esp,0x10
c002efb2:	83 c4 0c             	add    esp,0xc
c002efb5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 29 25 03 c0       	mov    esi,0xc0032529
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 45 25 03 c0       	mov    esi,0xc0032545
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
