
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d1 64 01 00       	call   c00164f1 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 47 03 c0       	mov    eax,0xc00347e4
c0000025:	3d e4 47 03 c0       	cmp    eax,0xc00347e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 47 03 c0       	push   0xc00347e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 47 03 c0       	mov    eax,0xc00347e4
c0000051:	2d e4 47 03 c0       	sub    eax,0xc00347e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 47 03 c0       	push   0xc00347e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc f3 02 c0       	mov    ebx,0xc002f3cc
c0000097:	81 eb c8 f3 02 c0    	sub    ebx,0xc002f3c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 f3 02 c0       	mov    esi,0xc002f3c8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 47 03 c0       	push   0xc00347e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 e4 47 03 c0       	push   0xc00347e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 23 48 02 00       	call   c0024ad0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 c0 8d 01 00       	call   c0019085 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 01 48 02 00       	call   c0024ad0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 4d 02 00       	call   c0024ffc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a1 51 02 00       	call   c0025498 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a7 fe 01 00       	jmp    c0020226 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 f3 02 c0 02 	test   BYTE PTR [edx-0x3ffd0c20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0c20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 f3 02 c0 08 	test   BYTE PTR [edx-0x3ffd0c20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 f3 02 c0 08 	test   BYTE PTR [edx-0x3ffd0c20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 f3 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0c20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0c20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	83 ec 0c             	sub    esp,0xc
c0000c73:	83 ec 0c             	sub    esp,0xc
c0000c76:	68 e1 f4 02 c0       	push   0xc002f4e1
c0000c7b:	e8 00 11 02 00       	call   c0021d80 <KeCPanic>
c0000c80:	83 c4 10             	add    esp,0x10
c0000c83:	90                   	nop
c0000c84:	83 c4 0c             	add    esp,0xc
c0000c87:	c3                   	ret    

c0000c88 <tcpip_callback_with_block>:
c0000c88:	83 ec 0c             	sub    esp,0xc
c0000c8b:	83 ec 0c             	sub    esp,0xc
c0000c8e:	68 f2 f4 02 c0       	push   0xc002f4f2
c0000c93:	e8 e8 10 02 00       	call   c0021d80 <KeCPanic>
c0000c98:	83 c4 10             	add    esp,0x10
c0000c9b:	90                   	nop
c0000c9c:	83 c4 0c             	add    esp,0xc
c0000c9f:	c3                   	ret    

c0000ca0 <sys_sem_new>:
c0000ca0:	83 ec 1c             	sub    esp,0x1c
c0000ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000cb0:	83 ec 08             	sub    esp,0x8
c0000cb3:	50                   	push   eax
c0000cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000cb8:	e8 03 10 02 00       	call   c0021cc0 <KeNetCreateSemaphore>
c0000cbd:	83 c4 10             	add    esp,0x10
c0000cc0:	b0 00                	mov    al,0x0
c0000cc2:	83 c4 1c             	add    esp,0x1c
c0000cc5:	c3                   	ret    
c0000cc6:	66 90                	xchg   ax,ax

c0000cc8 <sys_sem_free>:
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd2:	e8 2d 10 02 00       	call   c0021d04 <KeNetFreeSemaphore>
c0000cd7:	83 c4 10             	add    esp,0x10
c0000cda:	90                   	nop
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_sem_signal>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cea:	e8 31 10 02 00       	call   c0021d20 <KeNetSignalSemaphore>
c0000cef:	83 c4 10             	add    esp,0x10
c0000cf2:	90                   	nop
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_arch_sem_wait>:
c0000cf8:	83 ec 0c             	sub    esp,0xc
c0000cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cff:	83 ec 08             	sub    esp,0x8
c0000d02:	50                   	push   eax
c0000d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000d07:	e8 30 10 02 00       	call   c0021d3c <KeNetWaitSemaphore>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	83 c4 0c             	add    esp,0xc
c0000d12:	c3                   	ret    
c0000d13:	90                   	nop

c0000d14 <sys_mbox_new>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 0c f5 02 c0       	push   0xc002f50c
c0000d1f:	e8 5c 10 02 00       	call   c0021d80 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	b0 00                	mov    al,0x0
c0000d29:	83 c4 0c             	add    esp,0xc
c0000d2c:	c3                   	ret    
c0000d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0000d30 <sys_mbox_free>:
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	83 ec 0c             	sub    esp,0xc
c0000d36:	68 19 f5 02 c0       	push   0xc002f519
c0000d3b:	e8 40 10 02 00       	call   c0021d80 <KeCPanic>
c0000d40:	83 c4 10             	add    esp,0x10
c0000d43:	90                   	nop
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_mbox_post>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 27 f5 02 c0       	push   0xc002f527
c0000d53:	e8 28 10 02 00       	call   c0021d80 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	90                   	nop
c0000d5c:	83 c4 0c             	add    esp,0xc
c0000d5f:	c3                   	ret    

c0000d60 <sys_arch_mbox_fetch>:
c0000d60:	83 ec 0c             	sub    esp,0xc
c0000d63:	83 ec 0c             	sub    esp,0xc
c0000d66:	68 35 f5 02 c0       	push   0xc002f535
c0000d6b:	e8 10 10 02 00       	call   c0021d80 <KeCPanic>
c0000d70:	83 c4 10             	add    esp,0x10
c0000d73:	b8 00 00 00 00       	mov    eax,0x0
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_arch_mbox_tryfetch>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 0c             	sub    esp,0xc
c0000d82:	68 49 f5 02 c0       	push   0xc002f549
c0000d87:	e8 f4 0f 02 00       	call   c0021d80 <KeCPanic>
c0000d8c:	83 c4 10             	add    esp,0x10
c0000d8f:	b8 00 00 00 00       	mov    eax,0x0
c0000d94:	83 c4 0c             	add    esp,0xc
c0000d97:	c3                   	ret    

c0000d98 <sys_mbox_trypost>:
c0000d98:	83 ec 0c             	sub    esp,0xc
c0000d9b:	83 ec 0c             	sub    esp,0xc
c0000d9e:	68 60 f5 02 c0       	push   0xc002f560
c0000da3:	e8 d8 0f 02 00       	call   c0021d80 <KeCPanic>
c0000da8:	83 c4 10             	add    esp,0x10
c0000dab:	90                   	nop
c0000dac:	83 c4 0c             	add    esp,0xc
c0000daf:	c3                   	ret    

c0000db0 <sys_thread_new>:
c0000db0:	83 ec 0c             	sub    esp,0xc
c0000db3:	83 ec 08             	sub    esp,0x8
c0000db6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dbe:	e8 99 0f 02 00       	call   c0021d5c <KeNetCreateThread>
c0000dc3:	83 c4 10             	add    esp,0x10
c0000dc6:	b8 00 00 00 00       	mov    eax,0x0
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	c3                   	ret    
c0000dcf:	90                   	nop

c0000dd0 <sys_init>:
c0000dd0:	90                   	nop
c0000dd1:	c3                   	ret    

c0000dd2 <largebin_index>:
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	c1 ea 08             	shr    edx,0x8
c0000dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ddd:	77 10                	ja     c0000def <largebin_index+0x1d>
c0000ddf:	0f bd d2             	bsr    edx,edx
c0000de2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000de5:	d3 e8                	shr    eax,cl
c0000de7:	83 e0 03             	and    eax,0x3
c0000dea:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dee:	c3                   	ret    
c0000def:	b8 5f 00 00 00       	mov    eax,0x5f
c0000df4:	c3                   	ret    

c0000df5 <malloc_init_state>:
c0000df5:	8d 50 34             	lea    edx,[eax+0x34]
c0000df8:	53                   	push   ebx
c0000df9:	89 d1                	mov    ecx,edx
c0000dfb:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000e01:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000e04:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000e07:	83 c2 08             	add    edx,0x8
c0000e0a:	39 da                	cmp    edx,ebx
c0000e0c:	75 f3                	jne    c0000e01 <malloc_init_state+0xc>
c0000e0e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e1a:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000e24:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e2e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e38:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e3f:	83 e2 03             	and    edx,0x3
c0000e42:	5b                   	pop    ebx
c0000e43:	83 ca 48             	or     edx,0x48
c0000e46:	89 10                	mov    DWORD PTR [eax],edx
c0000e48:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e4b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e55:	c3                   	ret    

c0000e56 <malloc_consolidate>:
c0000e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e58:	85 d2                	test   edx,edx
c0000e5a:	0f 84 d8 00 00 00    	je     c0000f38 <malloc_consolidate+0xe2>
c0000e60:	55                   	push   ebp
c0000e61:	83 e2 fd             	and    edx,0xfffffffd
c0000e64:	57                   	push   edi
c0000e65:	89 c5                	mov    ebp,eax
c0000e67:	56                   	push   esi
c0000e68:	53                   	push   ebx
c0000e69:	8d 78 34             	lea    edi,[eax+0x34]
c0000e6c:	83 ec 10             	sub    esp,0x10
c0000e6f:	89 10                	mov    DWORD PTR [eax],edx
c0000e71:	c1 ea 03             	shr    edx,0x3
c0000e74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e78:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e7c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e83:	85 d2                	test   edx,edx
c0000e85:	0f 84 98 00 00 00    	je     c0000f23 <malloc_consolidate+0xcd>
c0000e8b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e92:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e95:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e9c:	89 f9                	mov    ecx,edi
c0000e9e:	83 e1 fe             	and    ecx,0xfffffffe
c0000ea1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ea4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ea7:	83 e3 fc             	and    ebx,0xfffffffc
c0000eaa:	83 e7 01             	and    edi,0x1
c0000ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000eb0:	75 14                	jne    c0000ec6 <malloc_consolidate+0x70>
c0000eb2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000eb4:	29 fa                	sub    edx,edi
c0000eb6:	01 f9                	add    ecx,edi
c0000eb8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ebb:	89 fb                	mov    ebx,edi
c0000ebd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ec0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ec3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ec6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ec9:	74 40                	je     c0000f0b <malloc_consolidate+0xb5>
c0000ecb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ece:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ed1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ed5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ed8:	83 e7 01             	and    edi,0x1
c0000edb:	75 0e                	jne    c0000eeb <malloc_consolidate+0x95>
c0000edd:	01 d9                	add    ecx,ebx
c0000edf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ee2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ee5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ee8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eeb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eee:	89 ce                	mov    esi,ecx
c0000ef0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ef3:	83 ce 01             	or     esi,0x1
c0000ef6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ef9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000efc:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000f00:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000f03:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000f06:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000f09:	eb 0c                	jmp    c0000f17 <malloc_consolidate+0xc1>
c0000f0b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000f0e:	83 c9 01             	or     ecx,0x1
c0000f11:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000f1b:	85 d2                	test   edx,edx
c0000f1d:	0f 85 6f ff ff ff    	jne    c0000e92 <malloc_consolidate+0x3c>
c0000f23:	83 c5 04             	add    ebp,0x4
c0000f26:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000f2a:	0f 85 50 ff ff ff    	jne    c0000e80 <malloc_consolidate+0x2a>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	5b                   	pop    ebx
c0000f34:	5e                   	pop    esi
c0000f35:	5f                   	pop    edi
c0000f36:	5d                   	pop    ebp
c0000f37:	c3                   	ret    
c0000f38:	e9 b8 fe ff ff       	jmp    c0000df5 <malloc_init_state>

c0000f3d <dlfree>:
c0000f3d:	57                   	push   edi
c0000f3e:	56                   	push   esi
c0000f3f:	53                   	push   ebx
c0000f40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000f44:	85 db                	test   ebx,ebx
c0000f46:	0f 84 e2 00 00 00    	je     c000102e <dlfree+0xf1>
c0000f4c:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000f4f:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000f52:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000f58:	89 f0                	mov    eax,esi
c0000f5a:	83 e0 fc             	and    eax,0xfffffffc
c0000f5d:	39 c1                	cmp    ecx,eax
c0000f5f:	72 24                	jb     c0000f85 <dlfree+0x48>
c0000f61:	c1 e8 03             	shr    eax,0x3
c0000f64:	83 c9 03             	or     ecx,0x3
c0000f67:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f6d:	83 e8 02             	sub    eax,0x2
c0000f70:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000f77:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000f79:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f80:	e9 a9 00 00 00       	jmp    c000102e <dlfree+0xf1>
c0000f85:	83 e6 02             	and    esi,0x2
c0000f88:	0f 85 a0 00 00 00    	jne    c000102e <dlfree+0xf1>
c0000f8e:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f91:	83 c9 01             	or     ecx,0x1
c0000f94:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f9a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000f9d:	83 e1 fc             	and    ecx,0xfffffffc
c0000fa0:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000fa4:	75 13                	jne    c0000fb9 <dlfree+0x7c>
c0000fa6:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000fa9:	29 da                	sub    edx,ebx
c0000fab:	01 d8                	add    eax,ebx
c0000fad:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000fb0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000fb3:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fb6:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fb9:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000fbf:	74 40                	je     c0001001 <dlfree+0xc4>
c0000fc1:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000fc5:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000fc8:	80 e3 01             	and    bl,0x1
c0000fcb:	75 0e                	jne    c0000fdb <dlfree+0x9e>
c0000fcd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000fd0:	01 c8                	add    eax,ecx
c0000fd2:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000fd5:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fd8:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fdb:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fe1:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fe8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000feb:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000ff1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ff4:	89 c1                	mov    ecx,eax
c0000ff6:	83 c9 01             	or     ecx,0x1
c0000ff9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ffc:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fff:	eb 10                	jmp    c0001011 <dlfree+0xd4>
c0001001:	01 c8                	add    eax,ecx
c0001003:	89 c1                	mov    ecx,eax
c0001005:	83 c9 01             	or     ecx,0x1
c0001008:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000100b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0001011:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0001016:	76 16                	jbe    c000102e <dlfree+0xf1>
c0001018:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c000101f:	74 0d                	je     c000102e <dlfree+0xf1>
c0001021:	5b                   	pop    ebx
c0001022:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001027:	5e                   	pop    esi
c0001028:	5f                   	pop    edi
c0001029:	e9 28 fe ff ff       	jmp    c0000e56 <malloc_consolidate>
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	c3                   	ret    

c0001032 <sYSMALLOc>:
c0001032:	55                   	push   ebp
c0001033:	57                   	push   edi
c0001034:	56                   	push   esi
c0001035:	53                   	push   ebx
c0001036:	89 d3                	mov    ebx,edx
c0001038:	83 ec 2c             	sub    esp,0x2c
c000103b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000103f:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0001045:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001048:	8d 41 ff             	lea    eax,[ecx-0x1]
c000104b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000104f:	74 1f                	je     c0001070 <sYSMALLOc+0x3e>
c0001051:	89 d0                	mov    eax,edx
c0001053:	e8 fe fd ff ff       	call   c0000e56 <malloc_consolidate>
c0001058:	83 ec 0c             	sub    esp,0xc
c000105b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000105f:	83 e8 07             	sub    eax,0x7
c0001062:	50                   	push   eax
c0001063:	e8 33 02 00 00       	call   c000129b <dlmalloc>
c0001068:	83 c4 10             	add    esp,0x10
c000106b:	e9 23 02 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c0001070:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0001073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0001077:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c000107d:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0001080:	83 c0 10             	add    eax,0x10
c0001083:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001087:	01 c2                	add    edx,eax
c0001089:	83 e5 fc             	and    ebp,0xfffffffc
c000108c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001093:	74 02                	je     c0001097 <sYSMALLOc+0x65>
c0001095:	29 ea                	sub    edx,ebp
c0001097:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000109b:	f7 d9                	neg    ecx
c000109d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00010a1:	21 ca                	and    edx,ecx
c00010a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00010a7:	7f 07                	jg     c00010b0 <sYSMALLOc+0x7e>
c00010a9:	31 c0                	xor    eax,eax
c00010ab:	e9 e3 01 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c00010b0:	83 ec 0c             	sub    esp,0xc
c00010b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00010b7:	e8 b0 52 01 00       	call   c001636c <sbrk>
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	83 f8 ff             	cmp    eax,0xffffffff
c00010c2:	89 c6                	mov    esi,eax
c00010c4:	74 e3                	je     c00010a9 <sYSMALLOc+0x77>
c00010c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00010ca:	8d 14 2f             	lea    edx,[edi+ebp*1]
c00010cd:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c00010d3:	39 c2                	cmp    edx,eax
c00010d5:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00010db:	75 11                	jne    c00010ee <sYSMALLOc+0xbc>
c00010dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010e1:	01 e8                	add    eax,ebp
c00010e3:	83 c8 01             	or     eax,0x1
c00010e6:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00010e9:	e9 93 00 00 00       	jmp    c0001181 <sYSMALLOc+0x14f>
c00010ee:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c00010f4:	a8 01                	test   al,0x1
c00010f6:	0f 84 73 01 00 00    	je     c000126f <sYSMALLOc+0x23d>
c00010fc:	85 ed                	test   ebp,ebp
c00010fe:	74 12                	je     c0001112 <sYSMALLOc+0xe0>
c0001100:	39 f2                	cmp    edx,esi
c0001102:	76 0e                	jbe    c0001112 <sYSMALLOc+0xe0>
c0001104:	83 e0 fe             	and    eax,0xfffffffe
c0001107:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c000110d:	e9 5d 01 00 00       	jmp    c000126f <sYSMALLOc+0x23d>
c0001112:	85 ed                	test   ebp,ebp
c0001114:	74 0c                	je     c0001122 <sYSMALLOc+0xf0>
c0001116:	89 f0                	mov    eax,esi
c0001118:	29 d0                	sub    eax,edx
c000111a:	01 c1                	add    ecx,eax
c000111c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001122:	89 f2                	mov    edx,esi
c0001124:	83 e2 07             	and    edx,0x7
c0001127:	0f 84 b1 00 00 00    	je     c00011de <sYSMALLOc+0x1ac>
c000112d:	b8 08 00 00 00       	mov    eax,0x8
c0001132:	29 d0                	sub    eax,edx
c0001134:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000113b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000113f:	01 e8                	add    eax,ebp
c0001141:	83 ec 0c             	sub    esp,0xc
c0001144:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001147:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000114b:	01 f2                	add    edx,esi
c000114d:	29 d0                	sub    eax,edx
c000114f:	01 d1                	add    ecx,edx
c0001151:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001155:	01 c1                	add    ecx,eax
c0001157:	51                   	push   ecx
c0001158:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000115c:	e8 0b 52 01 00       	call   c001636c <sbrk>
c0001161:	83 c4 10             	add    esp,0x10
c0001164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001168:	83 f8 ff             	cmp    eax,0xffffffff
c000116b:	75 7c                	jne    c00011e9 <sYSMALLOc+0x1b7>
c000116d:	83 ec 0c             	sub    esp,0xc
c0001170:	6a 00                	push   0x0
c0001172:	e8 f5 51 01 00       	call   c001636c <sbrk>
c0001177:	83 c4 10             	add    esp,0x10
c000117a:	31 c9                	xor    ecx,ecx
c000117c:	83 f8 ff             	cmp    eax,0xffffffff
c000117f:	75 7e                	jne    c00011ff <sYSMALLOc+0x1cd>
c0001181:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001187:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000118d:	73 06                	jae    c0001195 <sYSMALLOc+0x163>
c000118f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001195:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000119b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00011a1:	73 06                	jae    c00011a9 <sYSMALLOc+0x177>
c00011a3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00011a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00011ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011af:	83 e2 fc             	and    edx,0xfffffffc
c00011b2:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c00011b6:	0f 87 ed fe ff ff    	ja     c00010a9 <sYSMALLOc+0x77>
c00011bc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00011c0:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00011c3:	29 fa                	sub    edx,edi
c00011c5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00011c8:	89 fb                	mov    ebx,edi
c00011ca:	83 ca 01             	or     edx,0x1
c00011cd:	83 cb 01             	or     ebx,0x1
c00011d0:	83 c0 08             	add    eax,0x8
c00011d3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00011d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011d9:	e9 b5 00 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c00011de:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00011e2:	31 c0                	xor    eax,eax
c00011e4:	e9 52 ff ff ff       	jmp    c000113b <sYSMALLOc+0x109>
c00011e9:	39 c6                	cmp    esi,eax
c00011eb:	76 12                	jbe    c00011ff <sYSMALLOc+0x1cd>
c00011ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00011f1:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011f8:	01 f0                	add    eax,esi
c00011fa:	e9 7b ff ff ff       	jmp    c000117a <sYSMALLOc+0x148>
c00011ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001203:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001206:	29 f0                	sub    eax,esi
c0001208:	01 c8                	add    eax,ecx
c000120a:	83 c8 01             	or     eax,0x1
c000120d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001210:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001216:	85 ed                	test   ebp,ebp
c0001218:	0f 84 63 ff ff ff    	je     c0001181 <sYSMALLOc+0x14f>
c000121e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001221:	83 e0 f8             	and    eax,0xfffffff8
c0001224:	89 c2                	mov    edx,eax
c0001226:	83 ca 01             	or     edx,0x1
c0001229:	83 f8 0f             	cmp    eax,0xf
c000122c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000122f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001237:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000123f:	0f 86 3c ff ff ff    	jbe    c0001181 <sYSMALLOc+0x14f>
c0001245:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000124b:	83 ec 0c             	sub    esp,0xc
c000124e:	83 c7 08             	add    edi,0x8
c0001251:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000125b:	57                   	push   edi
c000125c:	e8 dc fc ff ff       	call   c0000f3d <dlfree>
c0001261:	83 c4 10             	add    esp,0x10
c0001264:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000126a:	e9 12 ff ff ff       	jmp    c0001181 <sYSMALLOc+0x14f>
c000126f:	83 ec 0c             	sub    esp,0xc
c0001272:	6a 00                	push   0x0
c0001274:	e8 f3 50 01 00       	call   c001636c <sbrk>
c0001279:	89 c2                	mov    edx,eax
c000127b:	29 f2                	sub    edx,esi
c000127d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001281:	83 c4 10             	add    esp,0x10
c0001284:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000128a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000128e:	e9 e7 fe ff ff       	jmp    c000117a <sYSMALLOc+0x148>
c0001293:	83 c4 2c             	add    esp,0x2c
c0001296:	5b                   	pop    ebx
c0001297:	5e                   	pop    esi
c0001298:	5f                   	pop    edi
c0001299:	5d                   	pop    ebp
c000129a:	c3                   	ret    

c000129b <dlmalloc>:
c000129b:	55                   	push   ebp
c000129c:	57                   	push   edi
c000129d:	56                   	push   esi
c000129e:	53                   	push   ebx
c000129f:	83 ec 1c             	sub    esp,0x1c
c00012a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00012a6:	83 f8 df             	cmp    eax,0xffffffdf
c00012a9:	0f 87 70 03 00 00    	ja     c000161f <dlmalloc+0x384>
c00012af:	83 c0 0b             	add    eax,0xb
c00012b2:	be 10 00 00 00       	mov    esi,0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 05                	jbe    c00012c1 <dlmalloc+0x26>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 c6                	mov    esi,eax
c00012c1:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00012c7:	f7 c7 01 00 00 00    	test   edi,0x1
c00012cd:	75 17                	jne    c00012e6 <dlmalloc+0x4b>
c00012cf:	85 ff                	test   edi,edi
c00012d1:	0f 85 05 03 00 00    	jne    c00015dc <dlmalloc+0x341>
c00012d7:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012dc:	e8 75 fb ff ff       	call   c0000e56 <malloc_consolidate>
c00012e1:	e9 f6 02 00 00       	jmp    c00015dc <dlmalloc+0x341>
c00012e6:	39 f7                	cmp    edi,esi
c00012e8:	72 1f                	jb     c0001309 <dlmalloc+0x6e>
c00012ea:	89 f2                	mov    edx,esi
c00012ec:	c1 ea 03             	shr    edx,0x3
c00012ef:	83 ea 02             	sub    edx,0x2
c00012f2:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00012f9:	85 c0                	test   eax,eax
c00012fb:	74 0c                	je     c0001309 <dlmalloc+0x6e>
c00012fd:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001300:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c0001307:	eb 30                	jmp    c0001339 <dlmalloc+0x9e>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	89 f0                	mov    eax,esi
c0001311:	77 2e                	ja     c0001341 <dlmalloc+0xa6>
c0001313:	c1 e8 03             	shr    eax,0x3
c0001316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000131a:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001321:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001324:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001327:	39 c3                	cmp    ebx,eax
c0001329:	74 2e                	je     c0001359 <dlmalloc+0xbe>
c000132b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000132e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001333:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001336:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001339:	83 c0 08             	add    eax,0x8
c000133c:	e9 e0 02 00 00       	jmp    c0001621 <dlmalloc+0x386>
c0001341:	e8 8c fa ff ff       	call   c0000dd2 <largebin_index>
c0001346:	83 e7 02             	and    edi,0x2
c0001349:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000134d:	74 0a                	je     c0001359 <dlmalloc+0xbe>
c000134f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001354:	e8 fd fa ff ff       	call   c0000e56 <malloc_consolidate>
c0001359:	8d 46 10             	lea    eax,[esi+0x10]
c000135c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001360:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c0001366:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c000136c:	0f 84 13 01 00 00    	je     c0001485 <dlmalloc+0x1ea>
c0001372:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001375:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001378:	83 e7 fc             	and    edi,0xfffffffc
c000137b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001381:	77 4c                	ja     c00013cf <dlmalloc+0x134>
c0001383:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c0001388:	75 45                	jne    c00013cf <dlmalloc+0x134>
c000138a:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001390:	75 3d                	jne    c00013cf <dlmalloc+0x134>
c0001392:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001396:	73 37                	jae    c00013cf <dlmalloc+0x134>
c0001398:	8d 04 33             	lea    eax,[ebx+esi*1]
c000139b:	89 fa                	mov    edx,edi
c000139d:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00013a2:	29 f2                	sub    edx,esi
c00013a4:	83 ce 01             	or     esi,0x1
c00013a7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00013ac:	89 d1                	mov    ecx,edx
c00013ae:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00013b3:	83 c9 01             	or     ecx,0x1
c00013b6:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013bd:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00013c4:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00013c7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00013ca:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00013cd:	eb 15                	jmp    c00013e4 <dlmalloc+0x149>
c00013cf:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00013d4:	39 fe                	cmp    esi,edi
c00013d6:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013dd:	75 0d                	jne    c00013ec <dlmalloc+0x151>
c00013df:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00013e4:	8d 43 08             	lea    eax,[ebx+0x8]
c00013e7:	e9 35 02 00 00       	jmp    c0001621 <dlmalloc+0x386>
c00013ec:	81 ff ff 00 00 00    	cmp    edi,0xff
c00013f2:	89 f8                	mov    eax,edi
c00013f4:	77 19                	ja     c000140f <dlmalloc+0x174>
c00013f6:	c1 e8 03             	shr    eax,0x3
c00013f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00013fc:	83 c2 0d             	add    edx,0xd
c00013ff:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c0001406:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000140d:	eb 46                	jmp    c0001455 <dlmalloc+0x1ba>
c000140f:	e8 be f9 ff ff       	call   c0000dd2 <largebin_index>
c0001414:	8d 14 00             	lea    edx,[eax+eax*1]
c0001417:	83 c2 0d             	add    edx,0xd
c000141a:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001421:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001428:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000142b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000142f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001433:	89 d5                	mov    ebp,edx
c0001435:	74 1e                	je     c0001455 <dlmalloc+0x1ba>
c0001437:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000143a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000143d:	77 12                	ja     c0001451 <dlmalloc+0x1b6>
c000143f:	83 cf 01             	or     edi,0x1
c0001442:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001445:	76 05                	jbe    c000144c <dlmalloc+0x1b1>
c0001447:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000144a:	eb f6                	jmp    c0001442 <dlmalloc+0x1a7>
c000144c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000144f:	eb 04                	jmp    c0001455 <dlmalloc+0x1ba>
c0001451:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001455:	89 c7                	mov    edi,eax
c0001457:	88 c1                	mov    cl,al
c0001459:	c1 ff 05             	sar    edi,0x5
c000145c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001460:	bf 01 00 00 00       	mov    edi,0x1
c0001465:	d3 e7                	shl    edi,cl
c0001467:	89 f8                	mov    eax,edi
c0001469:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000146d:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c0001474:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001477:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000147a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000147d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001480:	e9 db fe ff ff       	jmp    c0001360 <dlmalloc+0xc5>
c0001485:	81 fe ff 00 00 00    	cmp    esi,0xff
c000148b:	76 78                	jbe    c0001505 <dlmalloc+0x26a>
c000148d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001491:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c0001498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000149b:	8d 48 f8             	lea    ecx,[eax-0x8]
c000149e:	39 ca                	cmp    edx,ecx
c00014a0:	74 63                	je     c0001505 <dlmalloc+0x26a>
c00014a2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00014a5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014a8:	83 e3 fc             	and    ebx,0xfffffffc
c00014ab:	39 de                	cmp    esi,ebx
c00014ad:	77 52                	ja     c0001501 <dlmalloc+0x266>
c00014af:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00014b2:	89 df                	mov    edi,ebx
c00014b4:	01 d3                	add    ebx,edx
c00014b6:	29 f7                	sub    edi,esi
c00014b8:	83 ff 0f             	cmp    edi,0xf
c00014bb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014be:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00014c1:	8d 42 08             	lea    eax,[edx+0x8]
c00014c4:	77 09                	ja     c00014cf <dlmalloc+0x234>
c00014c6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00014ca:	e9 52 01 00 00       	jmp    c0001621 <dlmalloc+0x386>
c00014cf:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00014d2:	83 ce 01             	or     esi,0x1
c00014d5:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00014db:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00014e1:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00014e8:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00014ef:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00014f2:	89 fa                	mov    edx,edi
c00014f4:	83 ca 01             	or     edx,0x1
c00014f7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014fa:	89 3b                	mov    DWORD PTR [ebx],edi
c00014fc:	e9 20 01 00 00       	jmp    c0001621 <dlmalloc+0x386>
c0001501:	89 c2                	mov    edx,eax
c0001503:	eb 99                	jmp    c000149e <dlmalloc+0x203>
c0001505:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001509:	b8 01 00 00 00       	mov    eax,0x1
c000150e:	41                   	inc    ecx
c000150f:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c0001516:	89 cb                	mov    ebx,ecx
c0001518:	c1 eb 05             	shr    ebx,0x5
c000151b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001522:	d3 e0                	shl    eax,cl
c0001524:	39 f8                	cmp    eax,edi
c0001526:	77 04                	ja     c000152c <dlmalloc+0x291>
c0001528:	85 c0                	test   eax,eax
c000152a:	75 26                	jne    c0001552 <dlmalloc+0x2b7>
c000152c:	43                   	inc    ebx
c000152d:	83 fb 02             	cmp    ebx,0x2
c0001530:	0f 87 a6 00 00 00    	ja     c00015dc <dlmalloc+0x341>
c0001536:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000153d:	85 ff                	test   edi,edi
c000153f:	74 eb                	je     c000152c <dlmalloc+0x291>
c0001541:	89 d8                	mov    eax,ebx
c0001543:	c1 e0 06             	shl    eax,0x6
c0001546:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c000154d:	b8 01 00 00 00       	mov    eax,0x1
c0001552:	85 f8                	test   eax,edi
c0001554:	75 07                	jne    c000155d <dlmalloc+0x2c2>
c0001556:	83 c2 08             	add    edx,0x8
c0001559:	01 c0                	add    eax,eax
c000155b:	eb f5                	jmp    c0001552 <dlmalloc+0x2b7>
c000155d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001560:	39 ca                	cmp    edx,ecx
c0001562:	75 14                	jne    c0001578 <dlmalloc+0x2dd>
c0001564:	89 c1                	mov    ecx,eax
c0001566:	83 c2 08             	add    edx,0x8
c0001569:	f7 d1                	not    ecx
c000156b:	01 c0                	add    eax,eax
c000156d:	21 cf                	and    edi,ecx
c000156f:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c0001576:	eb ac                	jmp    c0001524 <dlmalloc+0x289>
c0001578:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000157b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000157e:	83 e0 fc             	and    eax,0xfffffffc
c0001581:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001584:	89 c3                	mov    ebx,eax
c0001586:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001589:	8d 14 01             	lea    edx,[ecx+eax*1]
c000158c:	29 f3                	sub    ebx,esi
c000158e:	8d 41 08             	lea    eax,[ecx+0x8]
c0001591:	83 fb 0f             	cmp    ebx,0xf
c0001594:	77 09                	ja     c000159f <dlmalloc+0x304>
c0001596:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000159a:	e9 82 00 00 00       	jmp    c0001621 <dlmalloc+0x386>
c000159f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00015a2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015a8:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00015ae:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00015b4:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00015bb:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00015c2:	77 06                	ja     c00015ca <dlmalloc+0x32f>
c00015c4:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00015ca:	83 ce 01             	or     esi,0x1
c00015cd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00015d0:	89 d9                	mov    ecx,ebx
c00015d2:	83 c9 01             	or     ecx,0x1
c00015d5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00015d8:	89 1a                	mov    DWORD PTR [edx],ebx
c00015da:	eb 45                	jmp    c0001621 <dlmalloc+0x386>
c00015dc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00015e1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00015e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015e7:	83 e2 fc             	and    edx,0xfffffffc
c00015ea:	39 d1                	cmp    ecx,edx
c00015ec:	77 1e                	ja     c000160c <dlmalloc+0x371>
c00015ee:	89 f3                	mov    ebx,esi
c00015f0:	29 f2                	sub    edx,esi
c00015f2:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015f5:	83 cb 01             	or     ebx,0x1
c00015f8:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00015fe:	83 ca 01             	or     edx,0x1
c0001601:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001604:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001607:	e9 2d fd ff ff       	jmp    c0001339 <dlmalloc+0x9e>
c000160c:	83 c4 1c             	add    esp,0x1c
c000160f:	89 f0                	mov    eax,esi
c0001611:	5b                   	pop    ebx
c0001612:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c0001617:	5e                   	pop    esi
c0001618:	5f                   	pop    edi
c0001619:	5d                   	pop    ebp
c000161a:	e9 13 fa ff ff       	jmp    c0001032 <sYSMALLOc>
c000161f:	31 c0                	xor    eax,eax
c0001621:	83 c4 1c             	add    esp,0x1c
c0001624:	5b                   	pop    ebx
c0001625:	5e                   	pop    esi
c0001626:	5f                   	pop    edi
c0001627:	5d                   	pop    ebp
c0001628:	c3                   	ret    

c0001629 <iALLOc>:
c0001629:	55                   	push   ebp
c000162a:	89 c5                	mov    ebp,eax
c000162c:	57                   	push   edi
c000162d:	56                   	push   esi
c000162e:	53                   	push   ebx
c000162f:	83 ec 2c             	sub    esp,0x2c
c0001632:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001636:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000163a:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001645:	75 12                	jne    c0001659 <iALLOc+0x30>
c0001647:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000164b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001650:	e8 01 f8 ff ff       	call   c0000e56 <malloc_consolidate>
c0001655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001659:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000165e:	74 12                	je     c0001672 <iALLOc+0x49>
c0001660:	85 ed                	test   ebp,ebp
c0001662:	0f 84 64 01 00 00    	je     c00017cc <iALLOc+0x1a3>
c0001668:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001670:	eb 33                	jmp    c00016a5 <iALLOc+0x7c>
c0001672:	85 ed                	test   ebp,ebp
c0001674:	75 14                	jne    c000168a <iALLOc+0x61>
c0001676:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000167e:	83 c4 2c             	add    esp,0x2c
c0001681:	5b                   	pop    ebx
c0001682:	5e                   	pop    esi
c0001683:	5f                   	pop    edi
c0001684:	5d                   	pop    ebp
c0001685:	e9 11 fc ff ff       	jmp    c000129b <dlmalloc>
c000168a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001692:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001699:	83 f8 0f             	cmp    eax,0xf
c000169c:	76 07                	jbe    c00016a5 <iALLOc+0x7c>
c000169e:	83 e0 f8             	and    eax,0xfffffff8
c00016a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00016a5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00016aa:	75 09                	jne    c00016b5 <iALLOc+0x8c>
c00016ac:	89 d0                	mov    eax,edx
c00016ae:	31 f6                	xor    esi,esi
c00016b0:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00016b3:	eb 3b                	jmp    c00016f0 <iALLOc+0xc7>
c00016b5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00016bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00016bf:	83 c0 0b             	add    eax,0xb
c00016c2:	83 f8 0f             	cmp    eax,0xf
c00016c5:	76 07                	jbe    c00016ce <iALLOc+0xa5>
c00016c7:	83 e0 f8             	and    eax,0xfffffff8
c00016ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00016ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00016d2:	0f af f5             	imul   esi,ebp
c00016d5:	eb 25                	jmp    c00016fc <iALLOc+0xd3>
c00016d7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00016d9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00016dc:	bb 10 00 00 00       	mov    ebx,0x10
c00016e1:	83 f9 0f             	cmp    ecx,0xf
c00016e4:	76 05                	jbe    c00016eb <iALLOc+0xc2>
c00016e6:	83 e1 f8             	and    ecx,0xfffffff8
c00016e9:	89 cb                	mov    ebx,ecx
c00016eb:	01 de                	add    esi,ebx
c00016ed:	83 c0 04             	add    eax,0x4
c00016f0:	39 c7                	cmp    edi,eax
c00016f2:	75 e3                	jne    c00016d7 <iALLOc+0xae>
c00016f4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001700:	83 ec 0c             	sub    esp,0xc
c0001703:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c0001709:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001717:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000171b:	50                   	push   eax
c000171c:	e8 7a fb ff ff       	call   c000129b <dlmalloc>
c0001721:	83 c4 10             	add    esp,0x10
c0001724:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000172a:	85 c0                	test   eax,eax
c000172c:	0f 84 92 00 00 00    	je     c00017c4 <iALLOc+0x19b>
c0001732:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001735:	8d 78 f8             	lea    edi,[eax-0x8]
c0001738:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000173c:	83 e3 fc             	and    ebx,0xfffffffc
c000173f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001744:	74 1e                	je     c0001764 <iALLOc+0x13b>
c0001746:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000174a:	89 d9                	mov    ecx,ebx
c000174c:	52                   	push   edx
c000174d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001751:	83 e9 04             	sub    ecx,0x4
c0001754:	51                   	push   ecx
c0001755:	6a 00                	push   0x0
c0001757:	50                   	push   eax
c0001758:	e8 93 ed ff ff       	call   c00004f0 <memset>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001764:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001769:	75 14                	jne    c000177f <iALLOc+0x156>
c000176b:	8d 04 37             	lea    eax,[edi+esi*1]
c000176e:	29 f3                	sub    ebx,esi
c0001770:	8d 48 08             	lea    ecx,[eax+0x8]
c0001773:	83 cb 01             	or     ebx,0x1
c0001776:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001779:	89 f3                	mov    ebx,esi
c000177b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000177f:	31 c0                	xor    eax,eax
c0001781:	4d                   	dec    ebp
c0001782:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001786:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001789:	39 c5                	cmp    ebp,eax
c000178b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000178e:	74 2c                	je     c00017bc <iALLOc+0x193>
c0001790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001794:	85 c9                	test   ecx,ecx
c0001796:	75 15                	jne    c00017ad <iALLOc+0x184>
c0001798:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000179b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000179e:	b9 10 00 00 00       	mov    ecx,0x10
c00017a3:	83 fe 0f             	cmp    esi,0xf
c00017a6:	76 05                	jbe    c00017ad <iALLOc+0x184>
c00017a8:	83 e6 f8             	and    esi,0xfffffff8
c00017ab:	89 f1                	mov    ecx,esi
c00017ad:	89 ce                	mov    esi,ecx
c00017af:	29 cb                	sub    ebx,ecx
c00017b1:	83 ce 01             	or     esi,0x1
c00017b4:	40                   	inc    eax
c00017b5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00017b8:	01 cf                	add    edi,ecx
c00017ba:	eb c6                	jmp    c0001782 <iALLOc+0x159>
c00017bc:	83 cb 01             	or     ebx,0x1
c00017bf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00017c2:	eb 08                	jmp    c00017cc <iALLOc+0x1a3>
c00017c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00017cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	5b                   	pop    ebx
c00017d4:	5e                   	pop    esi
c00017d5:	5f                   	pop    edi
c00017d6:	5d                   	pop    ebp
c00017d7:	c3                   	ret    

c00017d8 <dlrealloc>:
c00017d8:	55                   	push   ebp
c00017d9:	57                   	push   edi
c00017da:	56                   	push   esi
c00017db:	53                   	push   ebx
c00017dc:	83 ec 1c             	sub    esp,0x1c
c00017df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00017e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00017e7:	85 db                	test   ebx,ebx
c00017e9:	75 10                	jne    c00017fb <dlrealloc+0x23>
c00017eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00017ef:	83 c4 1c             	add    esp,0x1c
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	e9 a0 fa ff ff       	jmp    c000129b <dlmalloc>
c00017fb:	83 f8 df             	cmp    eax,0xffffffdf
c00017fe:	76 07                	jbe    c0001807 <dlrealloc+0x2f>
c0001800:	31 db                	xor    ebx,ebx
c0001802:	e9 6b 01 00 00       	jmp    c0001972 <dlrealloc+0x19a>
c0001807:	83 c0 0b             	add    eax,0xb
c000180a:	bd 10 00 00 00       	mov    ebp,0x10
c000180f:	83 f8 0f             	cmp    eax,0xf
c0001812:	76 05                	jbe    c0001819 <dlrealloc+0x41>
c0001814:	83 e0 f8             	and    eax,0xfffffff8
c0001817:	89 c5                	mov    ebp,eax
c0001819:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000181c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000181f:	89 ce                	mov    esi,ecx
c0001821:	83 e6 fc             	and    esi,0xfffffffc
c0001824:	f6 c1 02             	test   cl,0x2
c0001827:	75 d7                	jne    c0001800 <dlrealloc+0x28>
c0001829:	39 f5                	cmp    ebp,esi
c000182b:	0f 86 04 01 00 00    	jbe    c0001935 <dlrealloc+0x15d>
c0001831:	8d 14 37             	lea    edx,[edi+esi*1]
c0001834:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000183a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000183d:	75 33                	jne    c0001872 <dlrealloc+0x9a>
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	01 f0                	add    eax,esi
c0001844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001848:	8d 45 10             	lea    eax,[ebp+0x10]
c000184b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000184f:	77 49                	ja     c000189a <dlrealloc+0xc2>
c0001851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001855:	83 e1 01             	and    ecx,0x1
c0001858:	01 ef                	add    edi,ebp
c000185a:	09 e9                	or     ecx,ebp
c000185c:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000185f:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001865:	29 e8                	sub    eax,ebp
c0001867:	83 c8 01             	or     eax,0x1
c000186a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000186d:	e9 00 01 00 00       	jmp    c0001972 <dlrealloc+0x19a>
c0001872:	89 c1                	mov    ecx,eax
c0001874:	83 e1 fe             	and    ecx,0xfffffffe
c0001877:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000187c:	75 1c                	jne    c000189a <dlrealloc+0xc2>
c000187e:	83 e0 fc             	and    eax,0xfffffffc
c0001881:	01 f0                	add    eax,esi
c0001883:	39 c5                	cmp    ebp,eax
c0001885:	77 13                	ja     c000189a <dlrealloc+0xc2>
c0001887:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000188a:	89 c6                	mov    esi,eax
c000188c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000188f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001892:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001895:	e9 9b 00 00 00       	jmp    c0001935 <dlrealloc+0x15d>
c000189a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000189e:	8d 45 f9             	lea    eax,[ebp-0x7]
c00018a1:	83 ec 0c             	sub    esp,0xc
c00018a4:	50                   	push   eax
c00018a5:	e8 f1 f9 ff ff       	call   c000129b <dlmalloc>
c00018aa:	83 c4 10             	add    esp,0x10
c00018ad:	85 c0                	test   eax,eax
c00018af:	0f 84 4b ff ff ff    	je     c0001800 <dlrealloc+0x28>
c00018b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018b9:	8d 48 f8             	lea    ecx,[eax-0x8]
c00018bc:	39 ca                	cmp    edx,ecx
c00018be:	75 0a                	jne    c00018ca <dlrealloc+0xf2>
c00018c0:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00018c3:	83 e0 fc             	and    eax,0xfffffffc
c00018c6:	01 c6                	add    esi,eax
c00018c8:	eb 6b                	jmp    c0001935 <dlrealloc+0x15d>
c00018ca:	8d 4e fc             	lea    ecx,[esi-0x4]
c00018cd:	83 f9 27             	cmp    ecx,0x27
c00018d0:	76 08                	jbe    c00018da <dlrealloc+0x102>
c00018d2:	89 de                	mov    esi,ebx
c00018d4:	89 c7                	mov    edi,eax
c00018d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00018d8:	eb 43                	jmp    c000191d <dlrealloc+0x145>
c00018da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00018dc:	83 f9 13             	cmp    ecx,0x13
c00018df:	89 10                	mov    DWORD PTR [eax],edx
c00018e1:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00018e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00018e7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00018ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00018ed:	76 2e                	jbe    c000191d <dlrealloc+0x145>
c00018ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018f2:	83 f9 1b             	cmp    ecx,0x1b
c00018f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018f8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018fe:	76 1d                	jbe    c000191d <dlrealloc+0x145>
c0001900:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001903:	83 f9 23             	cmp    ecx,0x23
c0001906:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001909:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000190c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000190f:	76 0c                	jbe    c000191d <dlrealloc+0x145>
c0001911:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001914:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001917:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000191a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000191d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001921:	83 ec 0c             	sub    esp,0xc
c0001924:	53                   	push   ebx
c0001925:	e8 13 f6 ff ff       	call   c0000f3d <dlfree>
c000192a:	83 c4 10             	add    esp,0x10
c000192d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001931:	89 c3                	mov    ebx,eax
c0001933:	eb 3d                	jmp    c0001972 <dlrealloc+0x19a>
c0001935:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001938:	8d 04 37             	lea    eax,[edi+esi*1]
c000193b:	89 f2                	mov    edx,esi
c000193d:	29 ea                	sub    edx,ebp
c000193f:	83 e1 01             	and    ecx,0x1
c0001942:	83 fa 0f             	cmp    edx,0xf
c0001945:	77 0b                	ja     c0001952 <dlrealloc+0x17a>
c0001947:	09 ce                	or     esi,ecx
c0001949:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000194c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001950:	eb 20                	jmp    c0001972 <dlrealloc+0x19a>
c0001952:	01 ef                	add    edi,ebp
c0001954:	83 ca 01             	or     edx,0x1
c0001957:	09 cd                	or     ebp,ecx
c0001959:	83 ec 0c             	sub    esp,0xc
c000195c:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000195f:	83 c7 08             	add    edi,0x8
c0001962:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001965:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001969:	57                   	push   edi
c000196a:	e8 ce f5 ff ff       	call   c0000f3d <dlfree>
c000196f:	83 c4 10             	add    esp,0x10
c0001972:	83 c4 1c             	add    esp,0x1c
c0001975:	89 d8                	mov    eax,ebx
c0001977:	5b                   	pop    ebx
c0001978:	5e                   	pop    esi
c0001979:	5f                   	pop    edi
c000197a:	5d                   	pop    ebp
c000197b:	c3                   	ret    

c000197c <dlmemalign>:
c000197c:	55                   	push   ebp
c000197d:	57                   	push   edi
c000197e:	56                   	push   esi
c000197f:	53                   	push   ebx
c0001980:	83 ec 0c             	sub    esp,0xc
c0001983:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000198b:	83 fa 08             	cmp    edx,0x8
c000198e:	77 10                	ja     c00019a0 <dlmemalign+0x24>
c0001990:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001994:	83 c4 0c             	add    esp,0xc
c0001997:	5b                   	pop    ebx
c0001998:	5e                   	pop    esi
c0001999:	5f                   	pop    edi
c000199a:	5d                   	pop    ebp
c000199b:	e9 fb f8 ff ff       	jmp    c000129b <dlmalloc>
c00019a0:	83 fa 0f             	cmp    edx,0xf
c00019a3:	bf 10 00 00 00       	mov    edi,0x10
c00019a8:	76 13                	jbe    c00019bd <dlmemalign+0x41>
c00019aa:	8d 4a ff             	lea    ecx,[edx-0x1]
c00019ad:	85 d1                	test   ecx,edx
c00019af:	75 04                	jne    c00019b5 <dlmemalign+0x39>
c00019b1:	89 d7                	mov    edi,edx
c00019b3:	eb 08                	jmp    c00019bd <dlmemalign+0x41>
c00019b5:	39 d7                	cmp    edi,edx
c00019b7:	73 04                	jae    c00019bd <dlmemalign+0x41>
c00019b9:	01 ff                	add    edi,edi
c00019bb:	eb f8                	jmp    c00019b5 <dlmemalign+0x39>
c00019bd:	83 f8 df             	cmp    eax,0xffffffdf
c00019c0:	76 07                	jbe    c00019c9 <dlmemalign+0x4d>
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	e9 ce 00 00 00       	jmp    c0001a97 <dlmemalign+0x11b>
c00019c9:	83 c0 0b             	add    eax,0xb
c00019cc:	bd 10 00 00 00       	mov    ebp,0x10
c00019d1:	83 f8 0f             	cmp    eax,0xf
c00019d4:	76 05                	jbe    c00019db <dlmemalign+0x5f>
c00019d6:	83 e0 f8             	and    eax,0xfffffff8
c00019d9:	89 c5                	mov    ebp,eax
c00019db:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019df:	83 ec 0c             	sub    esp,0xc
c00019e2:	50                   	push   eax
c00019e3:	e8 b3 f8 ff ff       	call   c000129b <dlmalloc>
c00019e8:	83 c4 10             	add    esp,0x10
c00019eb:	85 c0                	test   eax,eax
c00019ed:	89 c1                	mov    ecx,eax
c00019ef:	74 d1                	je     c00019c2 <dlmemalign+0x46>
c00019f1:	8d 70 f8             	lea    esi,[eax-0x8]
c00019f4:	31 d2                	xor    edx,edx
c00019f6:	f7 f7                	div    edi
c00019f8:	85 d2                	test   edx,edx
c00019fa:	74 62                	je     c0001a5e <dlmemalign+0xe2>
c00019fc:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001a00:	89 f8                	mov    eax,edi
c0001a02:	f7 d8                	neg    eax
c0001a04:	21 c3                	and    ebx,eax
c0001a06:	83 eb 08             	sub    ebx,0x8
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	29 f0                	sub    eax,esi
c0001a0d:	83 f8 0f             	cmp    eax,0xf
c0001a10:	77 02                	ja     c0001a14 <dlmemalign+0x98>
c0001a12:	01 fb                	add    ebx,edi
c0001a14:	89 d8                	mov    eax,ebx
c0001a16:	29 f0                	sub    eax,esi
c0001a18:	89 c6                	mov    esi,eax
c0001a1a:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a1d:	89 c2                	mov    edx,eax
c0001a1f:	83 e2 fc             	and    edx,0xfffffffc
c0001a22:	29 f2                	sub    edx,esi
c0001a24:	a8 02                	test   al,0x2
c0001a26:	74 10                	je     c0001a38 <dlmemalign+0xbc>
c0001a28:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a2b:	83 ca 02             	or     edx,0x2
c0001a2e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a31:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a34:	89 33                	mov    DWORD PTR [ebx],esi
c0001a36:	eb 5f                	jmp    c0001a97 <dlmemalign+0x11b>
c0001a38:	89 d0                	mov    eax,edx
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 c8 01             	or     eax,0x1
c0001a40:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a43:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a48:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a4b:	83 e0 01             	and    eax,0x1
c0001a4e:	09 f0                	or     eax,esi
c0001a50:	89 de                	mov    esi,ebx
c0001a52:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a55:	51                   	push   ecx
c0001a56:	e8 e2 f4 ff ff       	call   c0000f3d <dlfree>
c0001a5b:	83 c4 10             	add    esp,0x10
c0001a5e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a61:	a8 02                	test   al,0x2
c0001a63:	75 2f                	jne    c0001a94 <dlmemalign+0x118>
c0001a65:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a68:	83 e0 fc             	and    eax,0xfffffffc
c0001a6b:	39 c2                	cmp    edx,eax
c0001a6d:	73 25                	jae    c0001a94 <dlmemalign+0x118>
c0001a6f:	29 e8                	sub    eax,ebp
c0001a71:	83 ec 0c             	sub    esp,0xc
c0001a74:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a77:	83 c8 01             	or     eax,0x1
c0001a7a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a7d:	83 c2 08             	add    edx,0x8
c0001a80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a83:	83 e0 01             	and    eax,0x1
c0001a86:	09 c5                	or     ebp,eax
c0001a88:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a8b:	52                   	push   edx
c0001a8c:	e8 ac f4 ff ff       	call   c0000f3d <dlfree>
c0001a91:	83 c4 10             	add    esp,0x10
c0001a94:	8d 46 08             	lea    eax,[esi+0x8]
c0001a97:	83 c4 0c             	add    esp,0xc
c0001a9a:	5b                   	pop    ebx
c0001a9b:	5e                   	pop    esi
c0001a9c:	5f                   	pop    edi
c0001a9d:	5d                   	pop    ebp
c0001a9e:	c3                   	ret    

c0001a9f <dlcalloc>:
c0001a9f:	53                   	push   ebx
c0001aa0:	83 ec 14             	sub    esp,0x14
c0001aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001aa7:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001aac:	50                   	push   eax
c0001aad:	e8 e9 f7 ff ff       	call   c000129b <dlmalloc>
c0001ab2:	83 c4 10             	add    esp,0x10
c0001ab5:	85 c0                	test   eax,eax
c0001ab7:	89 c3                	mov    ebx,eax
c0001ab9:	74 77                	je     c0001b32 <dlcalloc+0x93>
c0001abb:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001abe:	89 d0                	mov    eax,edx
c0001ac0:	83 e0 fc             	and    eax,0xfffffffc
c0001ac3:	80 e2 02             	and    dl,0x2
c0001ac6:	75 5a                	jne    c0001b22 <dlcalloc+0x83>
c0001ac8:	83 e8 04             	sub    eax,0x4
c0001acb:	83 f8 27             	cmp    eax,0x27
c0001ace:	76 03                	jbe    c0001ad3 <dlcalloc+0x34>
c0001ad0:	51                   	push   ecx
c0001ad1:	eb 53                	jmp    c0001b26 <dlcalloc+0x87>
c0001ad3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ad9:	83 f8 13             	cmp    eax,0x13
c0001adc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ae3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aea:	76 46                	jbe    c0001b32 <dlcalloc+0x93>
c0001aec:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001af3:	83 f8 1b             	cmp    eax,0x1b
c0001af6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001afd:	76 33                	jbe    c0001b32 <dlcalloc+0x93>
c0001aff:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001b06:	83 f8 23             	cmp    eax,0x23
c0001b09:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b10:	76 20                	jbe    c0001b32 <dlcalloc+0x93>
c0001b12:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b19:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b20:	eb 10                	jmp    c0001b32 <dlcalloc+0x93>
c0001b22:	52                   	push   edx
c0001b23:	83 e8 08             	sub    eax,0x8
c0001b26:	50                   	push   eax
c0001b27:	6a 00                	push   0x0
c0001b29:	53                   	push   ebx
c0001b2a:	e8 c1 e9 ff ff       	call   c00004f0 <memset>
c0001b2f:	83 c4 10             	add    esp,0x10
c0001b32:	83 c4 08             	add    esp,0x8
c0001b35:	89 d8                	mov    eax,ebx
c0001b37:	5b                   	pop    ebx
c0001b38:	c3                   	ret    

c0001b39 <dlcfree>:
c0001b39:	e9 ff f3 ff ff       	jmp    c0000f3d <dlfree>

c0001b3e <dlindependent_calloc>:
c0001b3e:	83 ec 28             	sub    esp,0x28
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b56:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b5a:	e8 ca fa ff ff       	call   c0001629 <iALLOc>
c0001b5f:	83 c4 2c             	add    esp,0x2c
c0001b62:	c3                   	ret    

c0001b63 <dlindependent_comalloc>:
c0001b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b67:	31 c9                	xor    ecx,ecx
c0001b69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b75:	e9 af fa ff ff       	jmp    c0001629 <iALLOc>

c0001b7a <dlvalloc>:
c0001b7a:	83 ec 0c             	sub    esp,0xc
c0001b7d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b84:	75 0a                	jne    c0001b90 <dlvalloc+0x16>
c0001b86:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b8b:	e8 c6 f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001b90:	50                   	push   eax
c0001b91:	50                   	push   eax
c0001b92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b96:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001b9c:	e8 db fd ff ff       	call   c000197c <dlmemalign>
c0001ba1:	83 c4 1c             	add    esp,0x1c
c0001ba4:	c3                   	ret    

c0001ba5 <dlpvalloc>:
c0001ba5:	83 ec 0c             	sub    esp,0xc
c0001ba8:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001baf:	75 0a                	jne    c0001bbb <dlpvalloc+0x16>
c0001bb1:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bb6:	e8 9b f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001bbb:	52                   	push   edx
c0001bbc:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001bc1:	52                   	push   edx
c0001bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001bc6:	89 c1                	mov    ecx,eax
c0001bc8:	f7 d9                	neg    ecx
c0001bca:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bce:	21 ca                	and    edx,ecx
c0001bd0:	52                   	push   edx
c0001bd1:	50                   	push   eax
c0001bd2:	e8 a5 fd ff ff       	call   c000197c <dlmemalign>
c0001bd7:	83 c4 1c             	add    esp,0x1c
c0001bda:	c3                   	ret    

c0001bdb <dlmalloc_trim>:
c0001bdb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001be0:	e8 71 f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001be5:	31 c0                	xor    eax,eax
c0001be7:	c3                   	ret    

c0001be8 <dlmalloc_usable_size>:
c0001be8:	53                   	push   ebx
c0001be9:	31 c0                	xor    eax,eax
c0001beb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	74 24                	je     c0001c17 <dlmalloc_usable_size+0x2f>
c0001bf3:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bf6:	f6 c2 02             	test   dl,0x2
c0001bf9:	74 08                	je     c0001c03 <dlmalloc_usable_size+0x1b>
c0001bfb:	83 e2 fc             	and    edx,0xfffffffc
c0001bfe:	8d 42 f8             	lea    eax,[edx-0x8]
c0001c01:	eb 14                	jmp    c0001c17 <dlmalloc_usable_size+0x2f>
c0001c03:	89 d3                	mov    ebx,edx
c0001c05:	31 c0                	xor    eax,eax
c0001c07:	83 e3 fe             	and    ebx,0xfffffffe
c0001c0a:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001c0f:	74 06                	je     c0001c17 <dlmalloc_usable_size+0x2f>
c0001c11:	83 e2 fc             	and    edx,0xfffffffc
c0001c14:	8d 42 fc             	lea    eax,[edx-0x4]
c0001c17:	5b                   	pop    ebx
c0001c18:	c3                   	ret    

c0001c19 <dlmallinfo>:
c0001c19:	55                   	push   ebp
c0001c1a:	57                   	push   edi
c0001c1b:	56                   	push   esi
c0001c1c:	53                   	push   ebx
c0001c1d:	83 ec 08             	sub    esp,0x8
c0001c20:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001c27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c2b:	75 0a                	jne    c0001c37 <dlmallinfo+0x1e>
c0001c2d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c32:	e8 1f f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001c37:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001c3c:	31 ed                	xor    ebp,ebp
c0001c3e:	31 c9                	xor    ecx,ecx
c0001c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c43:	83 e0 fc             	and    eax,0xfffffffc
c0001c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4a:	31 c0                	xor    eax,eax
c0001c4c:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001c53:	85 d2                	test   edx,edx
c0001c55:	74 0e                	je     c0001c65 <dlmallinfo+0x4c>
c0001c57:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c5a:	45                   	inc    ebp
c0001c5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c5e:	83 e6 fc             	and    esi,0xfffffffc
c0001c61:	01 f1                	add    ecx,esi
c0001c63:	eb ee                	jmp    c0001c53 <dlmallinfo+0x3a>
c0001c65:	40                   	inc    eax
c0001c66:	83 f8 0a             	cmp    eax,0xa
c0001c69:	75 e1                	jne    c0001c4c <dlmallinfo+0x33>
c0001c6b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c76:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c79:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001c7e:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c81:	39 f0                	cmp    eax,esi
c0001c83:	74 10                	je     c0001c95 <dlmallinfo+0x7c>
c0001c85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c88:	ff 04 24             	inc    DWORD PTR [esp]
c0001c8b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c8e:	83 e7 fc             	and    edi,0xfffffffc
c0001c91:	01 fa                	add    edx,edi
c0001c93:	eb ec                	jmp    c0001c81 <dlmallinfo+0x68>
c0001c95:	83 c0 08             	add    eax,0x8
c0001c98:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001c9d:	75 df                	jne    c0001c7e <dlmallinfo+0x65>
c0001c9f:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001ca5:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ca8:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001cad:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001cb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001cb3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001cb6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001cb9:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001cbf:	89 03                	mov    DWORD PTR [ebx],eax
c0001cc1:	29 d0                	sub    eax,edx
c0001cc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cca:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ccd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cd0:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001cd6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cd9:	89 d8                	mov    eax,ebx
c0001cdb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cde:	83 c4 08             	add    esp,0x8
c0001ce1:	5b                   	pop    ebx
c0001ce2:	5e                   	pop    esi
c0001ce3:	5f                   	pop    edi
c0001ce4:	5d                   	pop    ebp
c0001ce5:	c2 04 00             	ret    0x4

c0001ce8 <dlmalloc_stats>:
c0001ce8:	83 ec 30             	sub    esp,0x30
c0001ceb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001cef:	50                   	push   eax
c0001cf0:	e8 24 ff ff ff       	call   c0001c19 <dlmallinfo>
c0001cf5:	83 c4 30             	add    esp,0x30
c0001cf8:	c3                   	ret    

c0001cf9 <dlmallopt>:
c0001cf9:	56                   	push   esi
c0001cfa:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cff:	53                   	push   ebx
c0001d00:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001d04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001d08:	e8 49 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d0d:	8d 46 04             	lea    eax,[esi+0x4]
c0001d10:	83 f8 05             	cmp    eax,0x5
c0001d13:	77 67                	ja     c0001d7c <dlmallopt+0x83>
c0001d15:	ff 24 85 74 f5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0a8c]
c0001d1c:	83 fb 50             	cmp    ebx,0x50
c0001d1f:	77 5b                	ja     c0001d7c <dlmallopt+0x83>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	ba 08 00 00 00       	mov    edx,0x8
c0001d28:	74 12                	je     c0001d3c <dlmallopt+0x43>
c0001d2a:	83 c3 0b             	add    ebx,0xb
c0001d2d:	ba 10 00 00 00       	mov    edx,0x10
c0001d32:	83 fb 0f             	cmp    ebx,0xf
c0001d35:	76 05                	jbe    c0001d3c <dlmallopt+0x43>
c0001d37:	89 da                	mov    edx,ebx
c0001d39:	83 e2 f8             	and    edx,0xfffffff8
c0001d3c:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001d41:	83 e0 03             	and    eax,0x3
c0001d44:	09 d0                	or     eax,edx
c0001d46:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001d4b:	eb 31                	jmp    c0001d7e <dlmallopt+0x85>
c0001d4d:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001d53:	eb 06                	jmp    c0001d5b <dlmallopt+0x62>
c0001d55:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001d5b:	be 01 00 00 00       	mov    esi,0x1
c0001d60:	eb 1c                	jmp    c0001d7e <dlmallopt+0x85>
c0001d62:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001d68:	eb f1                	jmp    c0001d5b <dlmallopt+0x62>
c0001d6a:	31 f6                	xor    esi,esi
c0001d6c:	85 db                	test   ebx,ebx
c0001d6e:	75 0e                	jne    c0001d7e <dlmallopt+0x85>
c0001d70:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001d7a:	eb df                	jmp    c0001d5b <dlmallopt+0x62>
c0001d7c:	31 f6                	xor    esi,esi
c0001d7e:	5b                   	pop    ebx
c0001d7f:	89 f0                	mov    eax,esi
c0001d81:	5e                   	pop    esi
c0001d82:	c3                   	ret    
c0001d83:	90                   	nop

c0001d84 <isblank>:
c0001d84:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d89:	74 09                	je     c0001d94 <isblank+0x10>
c0001d8b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d90:	75 0a                	jne    c0001d9c <isblank+0x18>
c0001d92:	66 90                	xchg   ax,ax
c0001d94:	b8 01 00 00 00       	mov    eax,0x1
c0001d99:	c3                   	ret    
c0001d9a:	66 90                	xchg   ax,ax
c0001d9c:	b8 00 00 00 00       	mov    eax,0x0
c0001da1:	c3                   	ret    
c0001da2:	66 90                	xchg   ax,ax

c0001da4 <iscntrl>:
c0001da4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001da9:	7e 09                	jle    c0001db4 <iscntrl+0x10>
c0001dab:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001db0:	75 0a                	jne    c0001dbc <iscntrl+0x18>
c0001db2:	66 90                	xchg   ax,ax
c0001db4:	b8 01 00 00 00       	mov    eax,0x1
c0001db9:	c3                   	ret    
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	c3                   	ret    
c0001dc2:	66 90                	xchg   ax,ax

c0001dc4 <isdigit>:
c0001dc4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001dc9:	7e 0d                	jle    c0001dd8 <isdigit+0x14>
c0001dcb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001dd0:	7f 06                	jg     c0001dd8 <isdigit+0x14>
c0001dd2:	b8 01 00 00 00       	mov    eax,0x1
c0001dd7:	c3                   	ret    
c0001dd8:	b8 00 00 00 00       	mov    eax,0x0
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax

c0001de0 <islower>:
c0001de0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001de5:	7e 0d                	jle    c0001df4 <islower+0x14>
c0001de7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dec:	7f 06                	jg     c0001df4 <islower+0x14>
c0001dee:	b8 01 00 00 00       	mov    eax,0x1
c0001df3:	c3                   	ret    
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	c3                   	ret    
c0001dfa:	66 90                	xchg   ax,ax

c0001dfc <isspace>:
c0001dfc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001e01:	7c 19                	jl     c0001e1c <isspace+0x20>
c0001e03:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001e08:	7e 0a                	jle    c0001e14 <isspace+0x18>
c0001e0a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e0f:	75 0b                	jne    c0001e1c <isspace+0x20>
c0001e11:	8d 76 00             	lea    esi,[esi+0x0]
c0001e14:	b8 01 00 00 00       	mov    eax,0x1
c0001e19:	c3                   	ret    
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 00 00 00 00       	mov    eax,0x0
c0001e21:	c3                   	ret    
c0001e22:	66 90                	xchg   ax,ax

c0001e24 <isupper>:
c0001e24:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e29:	7e 0d                	jle    c0001e38 <isupper+0x14>
c0001e2b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e30:	7f 06                	jg     c0001e38 <isupper+0x14>
c0001e32:	b8 01 00 00 00       	mov    eax,0x1
c0001e37:	c3                   	ret    
c0001e38:	b8 00 00 00 00       	mov    eax,0x0
c0001e3d:	c3                   	ret    
c0001e3e:	66 90                	xchg   ax,ax

c0001e40 <isalpha>:
c0001e40:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e44:	e8 db ff ff ff       	call   c0001e24 <isupper>
c0001e49:	83 c4 04             	add    esp,0x4
c0001e4c:	85 c0                	test   eax,eax
c0001e4e:	75 10                	jne    c0001e60 <isalpha+0x20>
c0001e50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e54:	e8 87 ff ff ff       	call   c0001de0 <islower>
c0001e59:	83 c4 04             	add    esp,0x4
c0001e5c:	85 c0                	test   eax,eax
c0001e5e:	74 08                	je     c0001e68 <isalpha+0x28>
c0001e60:	b8 01 00 00 00       	mov    eax,0x1
c0001e65:	c3                   	ret    
c0001e66:	66 90                	xchg   ax,ax
c0001e68:	b8 00 00 00 00       	mov    eax,0x0
c0001e6d:	c3                   	ret    
c0001e6e:	66 90                	xchg   ax,ax

c0001e70 <isalnum>:
c0001e70:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e74:	e8 c7 ff ff ff       	call   c0001e40 <isalpha>
c0001e79:	83 c4 04             	add    esp,0x4
c0001e7c:	85 c0                	test   eax,eax
c0001e7e:	75 10                	jne    c0001e90 <isalnum+0x20>
c0001e80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e84:	e8 3b ff ff ff       	call   c0001dc4 <isdigit>
c0001e89:	83 c4 04             	add    esp,0x4
c0001e8c:	85 c0                	test   eax,eax
c0001e8e:	74 08                	je     c0001e98 <isalnum+0x28>
c0001e90:	b8 01 00 00 00       	mov    eax,0x1
c0001e95:	c3                   	ret    
c0001e96:	66 90                	xchg   ax,ax
c0001e98:	b8 00 00 00 00       	mov    eax,0x0
c0001e9d:	c3                   	ret    
c0001e9e:	66 90                	xchg   ax,ax

c0001ea0 <ispunct>:
c0001ea0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ea4:	e8 c7 ff ff ff       	call   c0001e70 <isalnum>
c0001ea9:	83 c4 04             	add    esp,0x4
c0001eac:	85 c0                	test   eax,eax
c0001eae:	75 28                	jne    c0001ed8 <ispunct+0x38>
c0001eb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb4:	e8 43 ff ff ff       	call   c0001dfc <isspace>
c0001eb9:	83 c4 04             	add    esp,0x4
c0001ebc:	85 c0                	test   eax,eax
c0001ebe:	75 18                	jne    c0001ed8 <ispunct+0x38>
c0001ec0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec4:	e8 db fe ff ff       	call   c0001da4 <iscntrl>
c0001ec9:	83 c4 04             	add    esp,0x4
c0001ecc:	85 c0                	test   eax,eax
c0001ece:	75 08                	jne    c0001ed8 <ispunct+0x38>
c0001ed0:	b8 01 00 00 00       	mov    eax,0x1
c0001ed5:	c3                   	ret    
c0001ed6:	66 90                	xchg   ax,ax
c0001ed8:	b8 00 00 00 00       	mov    eax,0x0
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isgraph>:
c0001ee0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee4:	e8 87 ff ff ff       	call   c0001e70 <isalnum>
c0001ee9:	83 c4 04             	add    esp,0x4
c0001eec:	85 c0                	test   eax,eax
c0001eee:	75 10                	jne    c0001f00 <isgraph+0x20>
c0001ef0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ef4:	e8 a7 ff ff ff       	call   c0001ea0 <ispunct>
c0001ef9:	83 c4 04             	add    esp,0x4
c0001efc:	85 c0                	test   eax,eax
c0001efe:	74 08                	je     c0001f08 <isgraph+0x28>
c0001f00:	b8 01 00 00 00       	mov    eax,0x1
c0001f05:	c3                   	ret    
c0001f06:	66 90                	xchg   ax,ax
c0001f08:	b8 00 00 00 00       	mov    eax,0x0
c0001f0d:	c3                   	ret    
c0001f0e:	66 90                	xchg   ax,ax

c0001f10 <isprint>:
c0001f10:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f14:	e8 c7 ff ff ff       	call   c0001ee0 <isgraph>
c0001f19:	83 c4 04             	add    esp,0x4
c0001f1c:	85 c0                	test   eax,eax
c0001f1e:	75 08                	jne    c0001f28 <isprint+0x18>
c0001f20:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f25:	75 09                	jne    c0001f30 <isprint+0x20>
c0001f27:	90                   	nop
c0001f28:	b8 01 00 00 00       	mov    eax,0x1
c0001f2d:	c3                   	ret    
c0001f2e:	66 90                	xchg   ax,ax
c0001f30:	b8 00 00 00 00       	mov    eax,0x0
c0001f35:	c3                   	ret    
c0001f36:	66 90                	xchg   ax,ax

c0001f38 <isxdigit>:
c0001f38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f3c:	e8 83 fe ff ff       	call   c0001dc4 <isdigit>
c0001f41:	83 c4 04             	add    esp,0x4
c0001f44:	85 c0                	test   eax,eax
c0001f46:	75 20                	jne    c0001f68 <isxdigit+0x30>
c0001f48:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f4d:	7e 09                	jle    c0001f58 <isxdigit+0x20>
c0001f4f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f54:	7e 12                	jle    c0001f68 <isxdigit+0x30>
c0001f56:	66 90                	xchg   ax,ax
c0001f58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f5d:	7e 11                	jle    c0001f70 <isxdigit+0x38>
c0001f5f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f64:	7f 0a                	jg     c0001f70 <isxdigit+0x38>
c0001f66:	66 90                	xchg   ax,ax
c0001f68:	b8 01 00 00 00       	mov    eax,0x1
c0001f6d:	c3                   	ret    
c0001f6e:	66 90                	xchg   ax,ax
c0001f70:	b8 00 00 00 00       	mov    eax,0x0
c0001f75:	c3                   	ret    

c0001f76 <disk_status>:
c0001f76:	31 c0                	xor    eax,eax
c0001f78:	c3                   	ret    

c0001f79 <disk_initialize>:
c0001f79:	31 c0                	xor    eax,eax
c0001f7b:	c3                   	ret    

c0001f7c <disk_read>:
c0001f7c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f81:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f8d:	e9 46 6a 02 00       	jmp    c00289d8 <fatWrapperReadDisk>

c0001f92 <disk_write>:
c0001f92:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f97:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fa3:	e9 70 6a 02 00       	jmp    c0028a18 <fatWrapperWriteDisk>

c0001fa8 <disk_ioctl>:
c0001fa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fb1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fb6:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001fbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fc2:	e9 91 6a 02 00       	jmp    c0028a58 <fatWrapperIoctl>

c0001fc7 <ld_word>:
c0001fc7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fcb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fce:	c1 e2 08             	shl    edx,0x8
c0001fd1:	09 d0                	or     eax,edx
c0001fd3:	c3                   	ret    

c0001fd4 <ld_dword>:
c0001fd4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd8:	89 d1                	mov    ecx,edx
c0001fda:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fde:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe1:	c1 e1 08             	shl    ecx,0x8
c0001fe4:	09 ca                	or     edx,ecx
c0001fe6:	c1 e2 08             	shl    edx,0x8
c0001fe9:	09 d0                	or     eax,edx
c0001feb:	c3                   	ret    

c0001fec <st_word>:
c0001fec:	66 89 10             	mov    WORD PTR [eax],dx
c0001fef:	c3                   	ret    

c0001ff0 <st_dword>:
c0001ff0:	89 10                	mov    DWORD PTR [eax],edx
c0001ff2:	c3                   	ret    

c0001ff3 <mem_cpy>:
c0001ff3:	85 c9                	test   ecx,ecx
c0001ff5:	74 10                	je     c0002007 <mem_cpy+0x14>
c0001ff7:	57                   	push   edi
c0001ff8:	01 c1                	add    ecx,eax
c0001ffa:	56                   	push   esi
c0001ffb:	89 c7                	mov    edi,eax
c0001ffd:	89 d6                	mov    esi,edx
c0001fff:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002000:	39 f9                	cmp    ecx,edi
c0002002:	75 fb                	jne    c0001fff <mem_cpy+0xc>
c0002004:	5e                   	pop    esi
c0002005:	5f                   	pop    edi
c0002006:	c3                   	ret    
c0002007:	c3                   	ret    

c0002008 <mem_set>:
c0002008:	01 c1                	add    ecx,eax
c000200a:	88 10                	mov    BYTE PTR [eax],dl
c000200c:	40                   	inc    eax
c000200d:	39 c8                	cmp    eax,ecx
c000200f:	75 f9                	jne    c000200a <mem_set+0x2>
c0002011:	c3                   	ret    

c0002012 <mem_cmp>:
c0002012:	57                   	push   edi
c0002013:	56                   	push   esi
c0002014:	89 c6                	mov    esi,eax
c0002016:	53                   	push   ebx
c0002017:	46                   	inc    esi
c0002018:	42                   	inc    edx
c0002019:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201d:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002021:	29 fb                	sub    ebx,edi
c0002023:	89 cf                	mov    edi,ecx
c0002025:	29 f7                	sub    edi,esi
c0002027:	01 c7                	add    edi,eax
c0002029:	74 04                	je     c000202f <mem_cmp+0x1d>
c000202b:	85 db                	test   ebx,ebx
c000202d:	74 e8                	je     c0002017 <mem_cmp+0x5>
c000202f:	89 d8                	mov    eax,ebx
c0002031:	5b                   	pop    ebx
c0002032:	5e                   	pop    esi
c0002033:	5f                   	pop    edi
c0002034:	c3                   	ret    

c0002035 <chk_chr>:
c0002035:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002038:	85 c9                	test   ecx,ecx
c000203a:	74 07                	je     c0002043 <chk_chr+0xe>
c000203c:	39 d1                	cmp    ecx,edx
c000203e:	74 03                	je     c0002043 <chk_chr+0xe>
c0002040:	40                   	inc    eax
c0002041:	eb f2                	jmp    c0002035 <chk_chr>
c0002043:	89 c8                	mov    eax,ecx
c0002045:	c3                   	ret    

c0002046 <dbc_1st>:
c0002046:	31 c0                	xor    eax,eax
c0002048:	c3                   	ret    

c0002049 <dbc_2nd>:
c0002049:	31 c0                	xor    eax,eax
c000204b:	c3                   	ret    

c000204c <tchar2uni>:
c000204c:	57                   	push   edi
c000204d:	56                   	push   esi
c000204e:	53                   	push   ebx
c000204f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002051:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0002053:	8d 73 01             	lea    esi,[ebx+0x1]
c0002056:	f6 c1 80             	test   cl,0x80
c0002059:	75 0a                	jne    c0002065 <tchar2uni+0x19>
c000205b:	0f b6 d1             	movzx  edx,cl
c000205e:	89 f3                	mov    ebx,esi
c0002060:	e9 b2 00 00 00       	jmp    c0002117 <tchar2uni+0xcb>
c0002065:	89 ca                	mov    edx,ecx
c0002067:	81 e2 e0 00 00 00    	and    edx,0xe0
c000206d:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0002073:	89 ca                	mov    edx,ecx
c0002075:	75 0a                	jne    c0002081 <tchar2uni+0x35>
c0002077:	83 e2 1f             	and    edx,0x1f
c000207a:	b9 01 00 00 00       	mov    ecx,0x1
c000207f:	eb 37                	jmp    c00020b8 <tchar2uni+0x6c>
c0002081:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002087:	81 fa e0 00 00 00    	cmp    edx,0xe0
c000208d:	75 0c                	jne    c000209b <tchar2uni+0x4f>
c000208f:	89 ca                	mov    edx,ecx
c0002091:	b9 02 00 00 00       	mov    ecx,0x2
c0002096:	83 e2 0f             	and    edx,0xf
c0002099:	eb 1d                	jmp    c00020b8 <tchar2uni+0x6c>
c000209b:	89 cf                	mov    edi,ecx
c000209d:	83 ca ff             	or     edx,0xffffffff
c00020a0:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a6:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020ac:	75 70                	jne    c000211e <tchar2uni+0xd2>
c00020ae:	89 ca                	mov    edx,ecx
c00020b0:	b9 03 00 00 00       	mov    ecx,0x3
c00020b5:	83 e2 07             	and    edx,0x7
c00020b8:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020bc:	46                   	inc    esi
c00020bd:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020c0:	89 cf                	mov    edi,ecx
c00020c2:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c8:	83 c7 80             	add    edi,0xffffff80
c00020cb:	75 4e                	jne    c000211b <tchar2uni+0xcf>
c00020cd:	c1 e2 06             	shl    edx,0x6
c00020d0:	83 e1 3f             	and    ecx,0x3f
c00020d3:	09 ca                	or     edx,ecx
c00020d5:	39 de                	cmp    esi,ebx
c00020d7:	75 e3                	jne    c00020bc <tchar2uni+0x70>
c00020d9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020df:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020e5:	76 34                	jbe    c000211b <tchar2uni+0xcf>
c00020e7:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020ea:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020f0:	77 29                	ja     c000211b <tchar2uni+0xcf>
c00020f2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f8:	76 1d                	jbe    c0002117 <tchar2uni+0xcb>
c00020fa:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002100:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002106:	c1 e1 06             	shl    ecx,0x6
c0002109:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000210f:	09 ca                	or     edx,ecx
c0002111:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002117:	89 18                	mov    DWORD PTR [eax],ebx
c0002119:	eb 03                	jmp    c000211e <tchar2uni+0xd2>
c000211b:	83 ca ff             	or     edx,0xffffffff
c000211e:	5b                   	pop    ebx
c000211f:	89 d0                	mov    eax,edx
c0002121:	5e                   	pop    esi
c0002122:	5f                   	pop    edi
c0002123:	c3                   	ret    

c0002124 <put_utf>:
c0002124:	53                   	push   ebx
c0002125:	83 f8 7f             	cmp    eax,0x7f
c0002128:	89 c3                	mov    ebx,eax
c000212a:	b0 00                	mov    al,0x0
c000212c:	77 11                	ja     c000213f <put_utf+0x1b>
c000212e:	85 c9                	test   ecx,ecx
c0002130:	0f 84 e5 00 00 00    	je     c000221b <put_utf+0xf7>
c0002136:	88 1a                	mov    BYTE PTR [edx],bl
c0002138:	b0 01                	mov    al,0x1
c000213a:	e9 dc 00 00 00       	jmp    c000221b <put_utf+0xf7>
c000213f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002145:	77 23                	ja     c000216a <put_utf+0x46>
c0002147:	83 f9 01             	cmp    ecx,0x1
c000214a:	0f 86 cb 00 00 00    	jbe    c000221b <put_utf+0xf7>
c0002150:	89 d8                	mov    eax,ebx
c0002152:	83 e3 3f             	and    ebx,0x3f
c0002155:	c1 e8 06             	shr    eax,0x6
c0002158:	83 cb 80             	or     ebx,0xffffff80
c000215b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215e:	83 c8 c0             	or     eax,0xffffffc0
c0002161:	88 02                	mov    BYTE PTR [edx],al
c0002163:	b0 02                	mov    al,0x2
c0002165:	e9 b1 00 00 00       	jmp    c000221b <put_utf+0xf7>
c000216a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002170:	77 40                	ja     c00021b2 <put_utf+0x8e>
c0002172:	83 f9 02             	cmp    ecx,0x2
c0002175:	0f 86 a0 00 00 00    	jbe    c000221b <put_utf+0xf7>
c000217b:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002181:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002187:	0f 86 8e 00 00 00    	jbe    c000221b <put_utf+0xf7>
c000218d:	89 d8                	mov    eax,ebx
c000218f:	c1 e8 0c             	shr    eax,0xc
c0002192:	83 c8 e0             	or     eax,0xffffffe0
c0002195:	88 02                	mov    BYTE PTR [edx],al
c0002197:	89 d8                	mov    eax,ebx
c0002199:	83 e3 3f             	and    ebx,0x3f
c000219c:	c1 e8 06             	shr    eax,0x6
c000219f:	83 cb 80             	or     ebx,0xffffff80
c00021a2:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a5:	83 e0 3f             	and    eax,0x3f
c00021a8:	83 c8 80             	or     eax,0xffffff80
c00021ab:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021ae:	b0 03                	mov    al,0x3
c00021b0:	eb 69                	jmp    c000221b <put_utf+0xf7>
c00021b2:	83 f9 03             	cmp    ecx,0x3
c00021b5:	76 64                	jbe    c000221b <put_utf+0xf7>
c00021b7:	89 d9                	mov    ecx,ebx
c00021b9:	0f b7 c3             	movzx  eax,bx
c00021bc:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021c2:	66 31 c9             	xor    cx,cx
c00021c5:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021cb:	c1 e9 06             	shr    ecx,0x6
c00021ce:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d4:	77 43                	ja     c0002219 <put_utf+0xf5>
c00021d6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021dc:	77 3b                	ja     c0002219 <put_utf+0xf5>
c00021de:	09 cb                	or     ebx,ecx
c00021e0:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e6:	89 d8                	mov    eax,ebx
c00021e8:	c1 e8 12             	shr    eax,0x12
c00021eb:	83 c8 f0             	or     eax,0xfffffff0
c00021ee:	88 02                	mov    BYTE PTR [edx],al
c00021f0:	89 d8                	mov    eax,ebx
c00021f2:	c1 e8 0c             	shr    eax,0xc
c00021f5:	83 e0 3f             	and    eax,0x3f
c00021f8:	83 c8 80             	or     eax,0xffffff80
c00021fb:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021fe:	89 d8                	mov    eax,ebx
c0002200:	83 e3 3f             	and    ebx,0x3f
c0002203:	c1 e8 06             	shr    eax,0x6
c0002206:	83 cb 80             	or     ebx,0xffffff80
c0002209:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000220c:	83 e0 3f             	and    eax,0x3f
c000220f:	83 c8 80             	or     eax,0xffffff80
c0002212:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002215:	b0 04                	mov    al,0x4
c0002217:	eb 02                	jmp    c000221b <put_utf+0xf7>
c0002219:	31 c0                	xor    eax,eax
c000221b:	5b                   	pop    ebx
c000221c:	c3                   	ret    

c000221d <clst2sect>:
c000221d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002220:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002223:	83 ea 02             	sub    edx,0x2
c0002226:	39 ca                	cmp    edx,ecx
c0002228:	76 0d                	jbe    c0002237 <clst2sect+0x1a>
c000222a:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000222e:	0f af d1             	imul   edx,ecx
c0002231:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002234:	89 d0                	mov    eax,edx
c0002236:	c3                   	ret    
c0002237:	31 c0                	xor    eax,eax
c0002239:	c3                   	ret    

c000223a <pick_lfn>:
c000223a:	55                   	push   ebp
c000223b:	57                   	push   edi
c000223c:	89 c7                	mov    edi,eax
c000223e:	56                   	push   esi
c000223f:	53                   	push   ebx
c0002240:	89 d3                	mov    ebx,edx
c0002242:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002245:	e8 7d fd ff ff       	call   c0001fc7 <ld_word>
c000224a:	66 85 c0             	test   ax,ax
c000224d:	74 04                	je     c0002253 <pick_lfn+0x19>
c000224f:	31 c0                	xor    eax,eax
c0002251:	eb 62                	jmp    c00022b5 <pick_lfn+0x7b>
c0002253:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002256:	bd 01 00 00 00       	mov    ebp,0x1
c000225b:	31 f6                	xor    esi,esi
c000225d:	83 e1 bf             	and    ecx,0xffffffbf
c0002260:	49                   	dec    ecx
c0002261:	6b c9 0d             	imul   ecx,ecx,0xd
c0002264:	0f b6 86 c0 f6 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0940]
c000226b:	01 d8                	add    eax,ebx
c000226d:	e8 55 fd ff ff       	call   c0001fc7 <ld_word>
c0002272:	66 85 ed             	test   bp,bp
c0002275:	74 11                	je     c0002288 <pick_lfn+0x4e>
c0002277:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000227d:	77 d0                	ja     c000224f <pick_lfn+0x15>
c000227f:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002283:	89 c5                	mov    ebp,eax
c0002285:	41                   	inc    ecx
c0002286:	eb 0a                	jmp    c0002292 <pick_lfn+0x58>
c0002288:	0f b7 c0             	movzx  eax,ax
c000228b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002290:	75 bd                	jne    c000224f <pick_lfn+0x15>
c0002292:	46                   	inc    esi
c0002293:	83 fe 0d             	cmp    esi,0xd
c0002296:	75 cc                	jne    c0002264 <pick_lfn+0x2a>
c0002298:	f6 03 40             	test   BYTE PTR [ebx],0x40
c000229b:	74 13                	je     c00022b0 <pick_lfn+0x76>
c000229d:	66 85 ed             	test   bp,bp
c00022a0:	74 0e                	je     c00022b0 <pick_lfn+0x76>
c00022a2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a8:	77 a5                	ja     c000224f <pick_lfn+0x15>
c00022aa:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022b0:	b8 01 00 00 00       	mov    eax,0x1
c00022b5:	5b                   	pop    ebx
c00022b6:	5e                   	pop    esi
c00022b7:	5f                   	pop    edi
c00022b8:	5d                   	pop    ebp
c00022b9:	c3                   	ret    

c00022ba <put_lfn>:
c00022ba:	55                   	push   ebp
c00022bb:	57                   	push   edi
c00022bc:	89 d7                	mov    edi,edx
c00022be:	56                   	push   esi
c00022bf:	31 f6                	xor    esi,esi
c00022c1:	53                   	push   ebx
c00022c2:	83 ec 0c             	sub    esp,0xc
c00022c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022cd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022d7:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022da:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022dd:	31 d2                	xor    edx,edx
c00022df:	e8 08 fd ff ff       	call   c0001fec <st_word>
c00022e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022eb:	0f b6 d9             	movzx  ebx,cl
c00022ee:	4b                   	dec    ebx
c00022ef:	6b db 0d             	imul   ebx,ebx,0xd
c00022f2:	0f b7 c6             	movzx  eax,si
c00022f5:	3d ff ff 00 00       	cmp    eax,0xffff
c00022fa:	74 09                	je     c0002305 <put_lfn+0x4b>
c00022fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002300:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002304:	43                   	inc    ebx
c0002305:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002308:	0f b7 ee             	movzx  ebp,si
c000230b:	89 ea                	mov    edx,ebp
c000230d:	0f b6 80 c0 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0940]
c0002314:	01 f8                	add    eax,edi
c0002316:	e8 d1 fc ff ff       	call   c0001fec <st_word>
c000231b:	85 ed                	test   ebp,ebp
c000231d:	75 05                	jne    c0002324 <put_lfn+0x6a>
c000231f:	be ff ff 00 00       	mov    esi,0xffff
c0002324:	ff 04 24             	inc    DWORD PTR [esp]
c0002327:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000232b:	75 c5                	jne    c00022f2 <put_lfn+0x38>
c000232d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002333:	74 0b                	je     c0002340 <put_lfn+0x86>
c0002335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002339:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000233e:	75 07                	jne    c0002347 <put_lfn+0x8d>
c0002340:	83 c9 40             	or     ecx,0x40
c0002343:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002347:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000234b:	88 07                	mov    BYTE PTR [edi],al
c000234d:	83 c4 0c             	add    esp,0xc
c0002350:	5b                   	pop    ebx
c0002351:	5e                   	pop    esi
c0002352:	5f                   	pop    edi
c0002353:	5d                   	pop    ebp
c0002354:	c3                   	ret    

c0002355 <gen_numname>:
c0002355:	57                   	push   edi
c0002356:	89 cf                	mov    edi,ecx
c0002358:	56                   	push   esi
c0002359:	b9 0b 00 00 00       	mov    ecx,0xb
c000235e:	53                   	push   ebx
c000235f:	89 c6                	mov    esi,eax
c0002361:	83 ec 10             	sub    esp,0x10
c0002364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002368:	e8 86 fc ff ff       	call   c0001ff3 <mem_cpy>
c000236d:	83 fb 05             	cmp    ebx,0x5
c0002370:	76 30                	jbe    c00023a2 <gen_numname+0x4d>
c0002372:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002375:	66 85 c0             	test   ax,ax
c0002378:	74 28                	je     c00023a2 <gen_numname+0x4d>
c000237a:	83 c7 02             	add    edi,0x2
c000237d:	ba 10 00 00 00       	mov    edx,0x10
c0002382:	89 c1                	mov    ecx,eax
c0002384:	01 db                	add    ebx,ebx
c0002386:	c1 e0 10             	shl    eax,0x10
c0002389:	83 e1 01             	and    ecx,0x1
c000238c:	c1 e8 11             	shr    eax,0x11
c000238f:	01 cb                	add    ebx,ecx
c0002391:	0f ba e3 10          	bt     ebx,0x10
c0002395:	73 06                	jae    c000239d <gen_numname+0x48>
c0002397:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000239d:	4a                   	dec    edx
c000239e:	75 e2                	jne    c0002382 <gen_numname+0x2d>
c00023a0:	eb d0                	jmp    c0002372 <gen_numname+0x1d>
c00023a2:	b8 07 00 00 00       	mov    eax,0x7
c00023a7:	89 d9                	mov    ecx,ebx
c00023a9:	83 e1 0f             	and    ecx,0xf
c00023ac:	8d 79 30             	lea    edi,[ecx+0x30]
c00023af:	83 ff 39             	cmp    edi,0x39
c00023b2:	89 fa                	mov    edx,edi
c00023b4:	76 03                	jbe    c00023b9 <gen_numname+0x64>
c00023b6:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b9:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023bc:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023c0:	89 da                	mov    edx,ebx
c00023c2:	c1 ea 04             	shr    edx,0x4
c00023c5:	83 fb 0f             	cmp    ebx,0xf
c00023c8:	76 06                	jbe    c00023d0 <gen_numname+0x7b>
c00023ca:	89 c8                	mov    eax,ecx
c00023cc:	89 d3                	mov    ebx,edx
c00023ce:	eb d7                	jmp    c00023a7 <gen_numname+0x52>
c00023d0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023d5:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d8:	31 d2                	xor    edx,edx
c00023da:	8d 04 16             	lea    eax,[esi+edx*1]
c00023dd:	39 ca                	cmp    edx,ecx
c00023df:	73 19                	jae    c00023fa <gen_numname+0xa5>
c00023e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023e4:	83 f8 20             	cmp    eax,0x20
c00023e7:	74 11                	je     c00023fa <gen_numname+0xa5>
c00023e9:	e8 58 fc ff ff       	call   c0002046 <dbc_1st>
c00023ee:	85 c0                	test   eax,eax
c00023f0:	74 05                	je     c00023f7 <gen_numname+0xa2>
c00023f2:	39 d3                	cmp    ebx,edx
c00023f4:	74 04                	je     c00023fa <gen_numname+0xa5>
c00023f6:	42                   	inc    edx
c00023f7:	42                   	inc    edx
c00023f8:	eb e0                	jmp    c00023da <gen_numname+0x85>
c00023fa:	83 f9 07             	cmp    ecx,0x7
c00023fd:	b0 20                	mov    al,0x20
c00023ff:	77 05                	ja     c0002406 <gen_numname+0xb1>
c0002401:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002405:	41                   	inc    ecx
c0002406:	42                   	inc    edx
c0002407:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000240b:	83 fa 07             	cmp    edx,0x7
c000240e:	76 ea                	jbe    c00023fa <gen_numname+0xa5>
c0002410:	83 c4 10             	add    esp,0x10
c0002413:	5b                   	pop    ebx
c0002414:	5e                   	pop    esi
c0002415:	5f                   	pop    edi
c0002416:	c3                   	ret    

c0002417 <sum_sfn>:
c0002417:	53                   	push   ebx
c0002418:	31 c9                	xor    ecx,ecx
c000241a:	31 db                	xor    ebx,ebx
c000241c:	0f b6 d1             	movzx  edx,cl
c000241f:	d1 ea                	shr    edx,1
c0002421:	c1 e1 07             	shl    ecx,0x7
c0002424:	09 ca                	or     edx,ecx
c0002426:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002429:	43                   	inc    ebx
c000242a:	01 ca                	add    edx,ecx
c000242c:	83 fb 0b             	cmp    ebx,0xb
c000242f:	88 d1                	mov    cl,dl
c0002431:	75 e9                	jne    c000241c <sum_sfn+0x5>
c0002433:	5b                   	pop    ebx
c0002434:	88 d0                	mov    al,dl
c0002436:	c3                   	ret    

c0002437 <get_ldnumber>:
c0002437:	55                   	push   ebp
c0002438:	57                   	push   edi
c0002439:	56                   	push   esi
c000243a:	83 ce ff             	or     esi,0xffffffff
c000243d:	53                   	push   ebx
c000243e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002440:	85 d2                	test   edx,edx
c0002442:	74 38                	je     c000247c <get_ldnumber+0x45>
c0002444:	89 c5                	mov    ebp,eax
c0002446:	89 d1                	mov    ecx,edx
c0002448:	41                   	inc    ecx
c0002449:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c000244d:	80 fb 1f             	cmp    bl,0x1f
c0002450:	76 05                	jbe    c0002457 <get_ldnumber+0x20>
c0002452:	83 fb 3a             	cmp    ebx,0x3a
c0002455:	75 f1                	jne    c0002448 <get_ldnumber+0x11>
c0002457:	31 f6                	xor    esi,esi
c0002459:	83 fb 3a             	cmp    ebx,0x3a
c000245c:	75 1e                	jne    c000247c <get_ldnumber+0x45>
c000245e:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002460:	83 ce ff             	or     esi,0xffffffff
c0002463:	8d 7b d0             	lea    edi,[ebx-0x30]
c0002466:	89 f8                	mov    eax,edi
c0002468:	3c 09                	cmp    al,0x9
c000246a:	77 10                	ja     c000247c <get_ldnumber+0x45>
c000246c:	83 c2 02             	add    edx,0x2
c000246f:	39 d1                	cmp    ecx,edx
c0002471:	75 09                	jne    c000247c <get_ldnumber+0x45>
c0002473:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002476:	0f be f3             	movsx  esi,bl
c0002479:	83 ee 30             	sub    esi,0x30
c000247c:	5b                   	pop    ebx
c000247d:	89 f0                	mov    eax,esi
c000247f:	5e                   	pop    esi
c0002480:	5f                   	pop    edi
c0002481:	5d                   	pop    ebp
c0002482:	c3                   	ret    

c0002483 <validate>:
c0002483:	56                   	push   esi
c0002484:	85 c0                	test   eax,eax
c0002486:	53                   	push   ebx
c0002487:	89 d6                	mov    esi,edx
c0002489:	51                   	push   ecx
c000248a:	75 09                	jne    c0002495 <validate+0x12>
c000248c:	b8 09 00 00 00       	mov    eax,0x9
c0002491:	31 c9                	xor    ecx,ecx
c0002493:	eb 2e                	jmp    c00024c3 <validate+0x40>
c0002495:	89 c3                	mov    ebx,eax
c0002497:	8b 00                	mov    eax,DWORD PTR [eax]
c0002499:	85 c0                	test   eax,eax
c000249b:	74 ef                	je     c000248c <validate+0x9>
c000249d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024a0:	74 ea                	je     c000248c <validate+0x9>
c00024a2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a5:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a9:	75 e1                	jne    c000248c <validate+0x9>
c00024ab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024af:	83 ec 0c             	sub    esp,0xc
c00024b2:	50                   	push   eax
c00024b3:	e8 be fa ff ff       	call   c0001f76 <disk_status>
c00024b8:	83 c4 10             	add    esp,0x10
c00024bb:	a8 01                	test   al,0x1
c00024bd:	75 cd                	jne    c000248c <validate+0x9>
c00024bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024c1:	31 c0                	xor    eax,eax
c00024c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c5:	5a                   	pop    edx
c00024c6:	5b                   	pop    ebx
c00024c7:	5e                   	pop    esi
c00024c8:	c3                   	ret    

c00024c9 <sync_window>:
c00024c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024cd:	74 58                	je     c0002527 <sync_window+0x5e>
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	89 c3                	mov    ebx,eax
c00024d3:	51                   	push   ecx
c00024d4:	6a 01                	push   0x1
c00024d6:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d9:	8d 70 34             	lea    esi,[eax+0x34]
c00024dc:	56                   	push   esi
c00024dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024e1:	50                   	push   eax
c00024e2:	e8 ab fa ff ff       	call   c0001f92 <disk_write>
c00024e7:	83 c4 10             	add    esp,0x10
c00024ea:	ba 01 00 00 00       	mov    edx,0x1
c00024ef:	85 c0                	test   eax,eax
c00024f1:	75 2e                	jne    c0002521 <sync_window+0x58>
c00024f3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024f7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024fd:	89 c1                	mov    ecx,eax
c00024ff:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002502:	39 d1                	cmp    ecx,edx
c0002504:	73 19                	jae    c000251f <sync_window+0x56>
c0002506:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000250a:	75 13                	jne    c000251f <sync_window+0x56>
c000250c:	6a 01                	push   0x1
c000250e:	01 d0                	add    eax,edx
c0002510:	50                   	push   eax
c0002511:	56                   	push   esi
c0002512:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002516:	50                   	push   eax
c0002517:	e8 76 fa ff ff       	call   c0001f92 <disk_write>
c000251c:	83 c4 10             	add    esp,0x10
c000251f:	31 d2                	xor    edx,edx
c0002521:	89 d0                	mov    eax,edx
c0002523:	5a                   	pop    edx
c0002524:	5b                   	pop    ebx
c0002525:	5e                   	pop    esi
c0002526:	c3                   	ret    
c0002527:	31 d2                	xor    edx,edx
c0002529:	89 d0                	mov    eax,edx
c000252b:	c3                   	ret    

c000252c <move_window>:
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 3a                	je     c000256b <move_window+0x3f>
c0002531:	56                   	push   esi
c0002532:	89 d6                	mov    esi,edx
c0002534:	53                   	push   ebx
c0002535:	89 c3                	mov    ebx,eax
c0002537:	51                   	push   ecx
c0002538:	e8 8c ff ff ff       	call   c00024c9 <sync_window>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 2d                	jne    c000256e <move_window+0x42>
c0002541:	6a 01                	push   0x1
c0002543:	56                   	push   esi
c0002544:	8d 43 34             	lea    eax,[ebx+0x34]
c0002547:	50                   	push   eax
c0002548:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254c:	50                   	push   eax
c000254d:	e8 2a fa ff ff       	call   c0001f7c <disk_read>
c0002552:	83 c4 10             	add    esp,0x10
c0002555:	89 c2                	mov    edx,eax
c0002557:	31 c0                	xor    eax,eax
c0002559:	85 d2                	test   edx,edx
c000255b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002560:	0f 45 f2             	cmovne esi,edx
c0002563:	0f 95 c0             	setne  al
c0002566:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002569:	eb 03                	jmp    c000256e <move_window+0x42>
c000256b:	31 c0                	xor    eax,eax
c000256d:	c3                   	ret    
c000256e:	5a                   	pop    edx
c000256f:	5b                   	pop    ebx
c0002570:	5e                   	pop    esi
c0002571:	c3                   	ret    

c0002572 <check_fs>:
c0002572:	53                   	push   ebx
c0002573:	89 c3                	mov    ebx,eax
c0002575:	83 ec 08             	sub    esp,0x8
c0002578:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000257c:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002583:	e8 a4 ff ff ff       	call   c000252c <move_window>
c0002588:	ba 04 00 00 00       	mov    edx,0x4
c000258d:	85 c0                	test   eax,eax
c000258f:	75 68                	jne    c00025f9 <check_fs+0x87>
c0002591:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002597:	e8 2b fa ff ff       	call   c0001fc7 <ld_word>
c000259c:	ba 03 00 00 00       	mov    edx,0x3
c00025a1:	66 3d 55 aa          	cmp    ax,0xaa55
c00025a5:	75 52                	jne    c00025f9 <check_fs+0x87>
c00025a7:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025aa:	8d 50 18             	lea    edx,[eax+0x18]
c00025ad:	80 fa 01             	cmp    dl,0x1
c00025b0:	76 09                	jbe    c00025bb <check_fs+0x49>
c00025b2:	3c eb                	cmp    al,0xeb
c00025b4:	ba 02 00 00 00       	mov    edx,0x2
c00025b9:	75 3e                	jne    c00025f9 <check_fs+0x87>
c00025bb:	ba e0 33 03 c0       	mov    edx,0xc00333e0
c00025c0:	b9 03 00 00 00       	mov    ecx,0x3
c00025c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025c8:	e8 45 fa ff ff       	call   c0002012 <mem_cmp>
c00025cd:	31 d2                	xor    edx,edx
c00025cf:	85 c0                	test   eax,eax
c00025d1:	74 26                	je     c00025f9 <check_fs+0x87>
c00025d3:	ba 8c f5 02 c0       	mov    edx,0xc002f58c
c00025d8:	b9 05 00 00 00       	mov    ecx,0x5
c00025dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025e3:	e8 2a fa ff ff       	call   c0002012 <mem_cmp>
c00025e8:	31 d2                	xor    edx,edx
c00025ea:	85 c0                	test   eax,eax
c00025ec:	74 0b                	je     c00025f9 <check_fs+0x87>
c00025ee:	31 d2                	xor    edx,edx
c00025f0:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025f4:	0f 95 c2             	setne  dl
c00025f7:	01 d2                	add    edx,edx
c00025f9:	83 c4 08             	add    esp,0x8
c00025fc:	89 d0                	mov    eax,edx
c00025fe:	5b                   	pop    ebx
c00025ff:	c3                   	ret    

c0002600 <find_volume>:
c0002600:	55                   	push   ebp
c0002601:	57                   	push   edi
c0002602:	56                   	push   esi
c0002603:	89 c6                	mov    esi,eax
c0002605:	53                   	push   ebx
c0002606:	89 d3                	mov    ebx,edx
c0002608:	83 ec 2c             	sub    esp,0x2c
c000260b:	31 d2                	xor    edx,edx
c000260d:	e8 60 ff ff ff       	call   c0002572 <check_fs>
c0002612:	85 db                	test   ebx,ebx
c0002614:	0f 94 c2             	sete   dl
c0002617:	83 f8 02             	cmp    eax,0x2
c000261a:	74 07                	je     c0002623 <find_volume+0x23>
c000261c:	77 63                	ja     c0002681 <find_volume+0x81>
c000261e:	f6 c2 01             	test   dl,0x1
c0002621:	75 5e                	jne    c0002681 <find_volume+0x81>
c0002623:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000262d:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c0002633:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002637:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000263b:	89 f8                	mov    eax,edi
c000263d:	83 c7 10             	add    edi,0x10
c0002640:	e8 8f f9 ff ff       	call   c0001fd4 <ld_dword>
c0002645:	83 c5 04             	add    ebp,0x4
c0002648:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000264c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000264f:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0002653:	75 e2                	jne    c0002637 <find_volume+0x37>
c0002655:	83 fb 01             	cmp    ebx,0x1
c0002658:	0f b6 fa             	movzx  edi,dl
c000265b:	83 d3 ff             	adc    ebx,0xffffffff
c000265e:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c0002662:	b8 03 00 00 00       	mov    eax,0x3
c0002667:	85 d2                	test   edx,edx
c0002669:	74 07                	je     c0002672 <find_volume+0x72>
c000266b:	89 f0                	mov    eax,esi
c000266d:	e8 00 ff ff ff       	call   c0002572 <check_fs>
c0002672:	83 f8 01             	cmp    eax,0x1
c0002675:	76 0a                	jbe    c0002681 <find_volume+0x81>
c0002677:	85 ff                	test   edi,edi
c0002679:	74 06                	je     c0002681 <find_volume+0x81>
c000267b:	43                   	inc    ebx
c000267c:	83 fb 03             	cmp    ebx,0x3
c000267f:	76 dd                	jbe    c000265e <find_volume+0x5e>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	5b                   	pop    ebx
c0002685:	5e                   	pop    esi
c0002686:	5f                   	pop    edi
c0002687:	5d                   	pop    ebp
c0002688:	c3                   	ret    

c0002689 <mount_volume>:
c0002689:	55                   	push   ebp
c000268a:	89 d5                	mov    ebp,edx
c000268c:	57                   	push   edi
c000268d:	89 cf                	mov    edi,ecx
c000268f:	56                   	push   esi
c0002690:	53                   	push   ebx
c0002691:	bb 0b 00 00 00       	mov    ebx,0xb
c0002696:	83 ec 2c             	sub    esp,0x2c
c0002699:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000269f:	e8 93 fd ff ff       	call   c0002437 <get_ldnumber>
c00026a4:	85 c0                	test   eax,eax
c00026a6:	0f 88 d0 02 00 00    	js     c000297c <mount_volume+0x2f3>
c00026ac:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00026b3:	89 c2                	mov    edx,eax
c00026b5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ba:	85 f6                	test   esi,esi
c00026bc:	0f 84 ba 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026c2:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026c5:	83 e7 fe             	and    edi,0xfffffffe
c00026c8:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026cb:	74 3c                	je     c0002709 <mount_volume+0x80>
c00026cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026d1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026d5:	83 ec 0c             	sub    esp,0xc
c00026d8:	50                   	push   eax
c00026d9:	e8 98 f8 ff ff       	call   c0001f76 <disk_status>
c00026de:	83 c4 10             	add    esp,0x10
c00026e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026e5:	a8 01                	test   al,0x1
c00026e7:	75 20                	jne    c0002709 <mount_volume+0x80>
c00026e9:	31 db                	xor    ebx,ebx
c00026eb:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026f1:	0f 84 85 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026f7:	a8 04                	test   al,0x4
c00026f9:	0f 84 7d 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026ff:	bb 0a 00 00 00       	mov    ebx,0xa
c0002704:	e9 73 02 00 00       	jmp    c000297c <mount_volume+0x2f3>
c0002709:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000270c:	83 ec 0c             	sub    esp,0xc
c000270f:	0f b6 c2             	movzx  eax,dl
c0002712:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002715:	bb 03 00 00 00       	mov    ebx,0x3
c000271a:	50                   	push   eax
c000271b:	e8 59 f8 ff ff       	call   c0001f79 <disk_initialize>
c0002720:	83 c4 10             	add    esp,0x10
c0002723:	a8 01                	test   al,0x1
c0002725:	0f 85 51 02 00 00    	jne    c000297c <mount_volume+0x2f3>
c000272b:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002731:	74 04                	je     c0002737 <mount_volume+0xae>
c0002733:	a8 04                	test   al,0x4
c0002735:	75 c8                	jne    c00026ff <mount_volume+0x76>
c0002737:	31 d2                	xor    edx,edx
c0002739:	89 f0                	mov    eax,esi
c000273b:	e8 c0 fe ff ff       	call   c0002600 <find_volume>
c0002740:	bb 01 00 00 00       	mov    ebx,0x1
c0002745:	83 f8 04             	cmp    eax,0x4
c0002748:	0f 84 2e 02 00 00    	je     c000297c <mount_volume+0x2f3>
c000274e:	83 f8 01             	cmp    eax,0x1
c0002751:	76 0a                	jbe    c000275d <mount_volume+0xd4>
c0002753:	bb 0d 00 00 00       	mov    ebx,0xd
c0002758:	e9 1f 02 00 00       	jmp    c000297c <mount_volume+0x2f3>
c000275d:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002760:	e8 62 f8 ff ff       	call   c0001fc7 <ld_word>
c0002765:	66 3d 00 02          	cmp    ax,0x200
c0002769:	75 e8                	jne    c0002753 <mount_volume+0xca>
c000276b:	8d 46 4a             	lea    eax,[esi+0x4a]
c000276e:	e8 54 f8 ff ff       	call   c0001fc7 <ld_word>
c0002773:	0f b7 c0             	movzx  eax,ax
c0002776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000277a:	85 c0                	test   eax,eax
c000277c:	75 0c                	jne    c000278a <mount_volume+0x101>
c000277e:	8d 46 58             	lea    eax,[esi+0x58]
c0002781:	e8 4e f8 ff ff       	call   c0001fd4 <ld_dword>
c0002786:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000278a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000278d:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c0002790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002798:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000279b:	89 e8                	mov    eax,ebp
c000279d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027a0:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027a3:	3c 01                	cmp    al,0x1
c00027a5:	77 ac                	ja     c0002753 <mount_volume+0xca>
c00027a7:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027ab:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027af:	66 85 c0             	test   ax,ax
c00027b2:	89 c3                	mov    ebx,eax
c00027b4:	74 9d                	je     c0002753 <mount_volume+0xca>
c00027b6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027b9:	85 d8                	test   eax,ebx
c00027bb:	75 96                	jne    c0002753 <mount_volume+0xca>
c00027bd:	8d 46 45             	lea    eax,[esi+0x45]
c00027c0:	e8 02 f8 ff ff       	call   c0001fc7 <ld_word>
c00027c5:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027c9:	a8 0f                	test   al,0xf
c00027cb:	89 c7                	mov    edi,eax
c00027cd:	75 84                	jne    c0002753 <mount_volume+0xca>
c00027cf:	8d 46 47             	lea    eax,[esi+0x47]
c00027d2:	e8 f0 f7 ff ff       	call   c0001fc7 <ld_word>
c00027d7:	0f b7 d0             	movzx  edx,ax
c00027da:	85 d2                	test   edx,edx
c00027dc:	75 0a                	jne    c00027e8 <mount_volume+0x15f>
c00027de:	8d 46 54             	lea    eax,[esi+0x54]
c00027e1:	e8 ee f7 ff ff       	call   c0001fd4 <ld_dword>
c00027e6:	89 c2                	mov    edx,eax
c00027e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027ec:	8d 46 42             	lea    eax,[esi+0x42]
c00027ef:	e8 d3 f7 ff ff       	call   c0001fc7 <ld_word>
c00027f4:	0f b7 c8             	movzx  ecx,ax
c00027f7:	85 c9                	test   ecx,ecx
c00027f9:	0f 84 54 ff ff ff    	je     c0002753 <mount_volume+0xca>
c00027ff:	89 e8                	mov    eax,ebp
c0002801:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002805:	0f b6 e8             	movzx  ebp,al
c0002808:	0f b7 c7             	movzx  eax,di
c000280b:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002810:	c1 e8 04             	shr    eax,0x4
c0002813:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002817:	01 e8                	add    eax,ebp
c0002819:	01 c8                	add    eax,ecx
c000281b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000281f:	39 c2                	cmp    edx,eax
c0002821:	0f 82 2c ff ff ff    	jb     c0002753 <mount_volume+0xca>
c0002827:	29 c2                	sub    edx,eax
c0002829:	89 d5                	mov    ebp,edx
c000282b:	89 d0                	mov    eax,edx
c000282d:	31 d2                	xor    edx,edx
c000282f:	f7 f3                	div    ebx
c0002831:	39 dd                	cmp    ebp,ebx
c0002833:	0f 82 1a ff ff ff    	jb     c0002753 <mount_volume+0xca>
c0002839:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000283e:	0f 87 0f ff ff ff    	ja     c0002753 <mount_volume+0xca>
c0002844:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002849:	0f 86 1e 01 00 00    	jbe    c000296d <mount_volume+0x2e4>
c000284f:	bb 03 00 00 00       	mov    ebx,0x3
c0002854:	8d 68 02             	lea    ebp,[eax+0x2]
c0002857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000285b:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000285e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002862:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002866:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002869:	01 c8                	add    eax,ecx
c000286b:	83 fb 03             	cmp    ebx,0x3
c000286e:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002871:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002874:	75 23                	jne    c0002899 <mount_volume+0x210>
c0002876:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002879:	e8 49 f7 ff ff       	call   c0001fc7 <ld_word>
c000287e:	09 c7                	or     edi,eax
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 85 ca fe ff ff    	jne    c0002753 <mount_volume+0xca>
c0002889:	8d 46 60             	lea    eax,[esi+0x60]
c000288c:	e8 43 f7 ff ff       	call   c0001fd4 <ld_dword>
c0002891:	c1 e5 02             	shl    ebp,0x2
c0002894:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002897:	eb 25                	jmp    c00028be <mount_volume+0x235>
c0002899:	66 85 ff             	test   di,di
c000289c:	0f 84 b1 fe ff ff    	je     c0002753 <mount_volume+0xca>
c00028a2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028a6:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028aa:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028ae:	83 e5 01             	and    ebp,0x1
c00028b1:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028b4:	d1 ea                	shr    edx,1
c00028b6:	01 d5                	add    ebp,edx
c00028b8:	83 fb 02             	cmp    ebx,0x2
c00028bb:	0f 44 ef             	cmove  ebp,edi
c00028be:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028c4:	c1 ed 09             	shr    ebp,0x9
c00028c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028cb:	0f 87 82 fe ff ff    	ja     c0002753 <mount_volume+0xca>
c00028d1:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028d8:	83 fb 03             	cmp    ebx,0x3
c00028db:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028e2:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028e6:	75 6e                	jne    c0002956 <mount_volume+0x2cd>
c00028e8:	8d 46 64             	lea    eax,[esi+0x64]
c00028eb:	e8 d7 f6 ff ff       	call   c0001fc7 <ld_word>
c00028f0:	66 48                	dec    ax
c00028f2:	75 62                	jne    c0002956 <mount_volume+0x2cd>
c00028f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00028f8:	89 f0                	mov    eax,esi
c00028fa:	42                   	inc    edx
c00028fb:	e8 2c fc ff ff       	call   c000252c <move_window>
c0002900:	85 c0                	test   eax,eax
c0002902:	75 52                	jne    c0002956 <mount_volume+0x2cd>
c0002904:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002908:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000290e:	e8 b4 f6 ff ff       	call   c0001fc7 <ld_word>
c0002913:	66 3d 55 aa          	cmp    ax,0xaa55
c0002917:	75 3d                	jne    c0002956 <mount_volume+0x2cd>
c0002919:	8d 46 34             	lea    eax,[esi+0x34]
c000291c:	e8 b3 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002921:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002926:	75 2e                	jne    c0002956 <mount_volume+0x2cd>
c0002928:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000292e:	e8 a1 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002933:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002938:	75 1c                	jne    c0002956 <mount_volume+0x2cd>
c000293a:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002940:	e8 8f f6 ff ff       	call   c0001fd4 <ld_dword>
c0002945:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002948:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000294e:	e8 81 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002953:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002956:	88 1e                	mov    BYTE PTR [esi],bl
c0002958:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000295e:	31 db                	xor    ebx,ebx
c0002960:	40                   	inc    eax
c0002961:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002967:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000296b:	eb 0f                	jmp    c000297c <mount_volume+0x2f3>
c000296d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002972:	19 db                	sbb    ebx,ebx
c0002974:	83 c3 02             	add    ebx,0x2
c0002977:	e9 d8 fe ff ff       	jmp    c0002854 <mount_volume+0x1cb>
c000297c:	83 c4 2c             	add    esp,0x2c
c000297f:	89 d8                	mov    eax,ebx
c0002981:	5b                   	pop    ebx
c0002982:	5e                   	pop    esi
c0002983:	5f                   	pop    edi
c0002984:	5d                   	pop    ebp
c0002985:	c3                   	ret    

c0002986 <put_fat>:
c0002986:	55                   	push   ebp
c0002987:	bd 02 00 00 00       	mov    ebp,0x2
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	53                   	push   ebx
c000298f:	83 ec 1c             	sub    esp,0x1c
c0002992:	83 fa 01             	cmp    edx,0x1
c0002995:	0f 86 38 01 00 00    	jbe    c0002ad3 <put_fat+0x14d>
c000299b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000299e:	0f 86 2f 01 00 00    	jbe    c0002ad3 <put_fat+0x14d>
c00029a4:	89 c6                	mov    esi,eax
c00029a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029a9:	89 cf                	mov    edi,ecx
c00029ab:	89 d3                	mov    ebx,edx
c00029ad:	83 f8 02             	cmp    eax,0x2
c00029b0:	0f 84 b1 00 00 00    	je     c0002a67 <put_fat+0xe1>
c00029b6:	83 f8 03             	cmp    eax,0x3
c00029b9:	0f 84 d5 00 00 00    	je     c0002a94 <put_fat+0x10e>
c00029bf:	48                   	dec    eax
c00029c0:	0f 85 0d 01 00 00    	jne    c0002ad3 <put_fat+0x14d>
c00029c6:	89 d1                	mov    ecx,edx
c00029c8:	89 f0                	mov    eax,esi
c00029ca:	d1 e9                	shr    ecx,1
c00029cc:	01 d1                	add    ecx,edx
c00029ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029d2:	89 ca                	mov    edx,ecx
c00029d4:	c1 ea 09             	shr    edx,0x9
c00029d7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029da:	e8 4d fb ff ff       	call   c000252c <move_window>
c00029df:	85 c0                	test   eax,eax
c00029e1:	89 c5                	mov    ebp,eax
c00029e3:	0f 85 ea 00 00 00    	jne    c0002ad3 <put_fat+0x14d>
c00029e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ed:	8d 46 34             	lea    eax,[esi+0x34]
c00029f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029f4:	8d 41 01             	lea    eax,[ecx+0x1]
c00029f7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a01:	83 e3 01             	and    ebx,0x1
c0002a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a08:	89 f8                	mov    eax,edi
c0002a0a:	74 11                	je     c0002a1d <put_fat+0x97>
c0002a0c:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a0e:	89 f8                	mov    eax,edi
c0002a10:	c1 e0 04             	shl    eax,0x4
c0002a13:	25 f0 0f 00 00       	and    eax,0xff0
c0002a18:	83 e2 0f             	and    edx,0xf
c0002a1b:	09 d0                	or     eax,edx
c0002a1d:	88 01                	mov    BYTE PTR [ecx],al
c0002a1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a23:	89 f0                	mov    eax,esi
c0002a25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a29:	c1 ea 09             	shr    edx,0x9
c0002a2c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a2f:	e8 f8 fa ff ff       	call   c000252c <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	89 c5                	mov    ebp,eax
c0002a38:	0f 85 95 00 00 00    	jne    c0002ad3 <put_fat+0x14d>
c0002a3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a42:	25 ff 01 00 00       	and    eax,0x1ff
c0002a47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a4b:	85 db                	test   ebx,ebx
c0002a4d:	74 07                	je     c0002a56 <put_fat+0xd0>
c0002a4f:	c1 ef 04             	shr    edi,0x4
c0002a52:	89 f9                	mov    ecx,edi
c0002a54:	eb 0d                	jmp    c0002a63 <put_fat+0xdd>
c0002a56:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a58:	c1 ef 08             	shr    edi,0x8
c0002a5b:	83 e7 0f             	and    edi,0xf
c0002a5e:	83 e1 f0             	and    ecx,0xfffffff0
c0002a61:	09 f9                	or     ecx,edi
c0002a63:	88 08                	mov    BYTE PTR [eax],cl
c0002a65:	eb 27                	jmp    c0002a8e <put_fat+0x108>
c0002a67:	c1 ea 08             	shr    edx,0x8
c0002a6a:	89 f0                	mov    eax,esi
c0002a6c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a6f:	e8 b8 fa ff ff       	call   c000252c <move_window>
c0002a74:	85 c0                	test   eax,eax
c0002a76:	89 c5                	mov    ebp,eax
c0002a78:	75 59                	jne    c0002ad3 <put_fat+0x14d>
c0002a7a:	01 db                	add    ebx,ebx
c0002a7c:	0f b7 d7             	movzx  edx,di
c0002a7f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a85:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a89:	e8 5e f5 ff ff       	call   c0001fec <st_word>
c0002a8e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a92:	eb 3f                	jmp    c0002ad3 <put_fat+0x14d>
c0002a94:	c1 ea 07             	shr    edx,0x7
c0002a97:	89 f0                	mov    eax,esi
c0002a99:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a9c:	e8 8b fa ff ff       	call   c000252c <move_window>
c0002aa1:	85 c0                	test   eax,eax
c0002aa3:	89 c5                	mov    ebp,eax
c0002aa5:	75 2c                	jne    c0002ad3 <put_fat+0x14d>
c0002aa7:	c1 e3 02             	shl    ebx,0x2
c0002aaa:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ab0:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ab6:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002aba:	89 d8                	mov    eax,ebx
c0002abc:	e8 13 f5 ff ff       	call   c0001fd4 <ld_dword>
c0002ac1:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ac6:	09 f8                	or     eax,edi
c0002ac8:	89 c2                	mov    edx,eax
c0002aca:	89 d8                	mov    eax,ebx
c0002acc:	e8 1f f5 ff ff       	call   c0001ff0 <st_dword>
c0002ad1:	eb bb                	jmp    c0002a8e <put_fat+0x108>
c0002ad3:	83 c4 1c             	add    esp,0x1c
c0002ad6:	89 e8                	mov    eax,ebp
c0002ad8:	5b                   	pop    ebx
c0002ad9:	5e                   	pop    esi
c0002ada:	5f                   	pop    edi
c0002adb:	5d                   	pop    ebp
c0002adc:	c3                   	ret    

c0002add <dir_clear>:
c0002add:	55                   	push   ebp
c0002ade:	57                   	push   edi
c0002adf:	56                   	push   esi
c0002ae0:	89 c6                	mov    esi,eax
c0002ae2:	53                   	push   ebx
c0002ae3:	83 ec 1c             	sub    esp,0x1c
c0002ae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002aea:	e8 da f9 ff ff       	call   c00024c9 <sync_window>
c0002aef:	85 c0                	test   eax,eax
c0002af1:	0f 85 c1 00 00 00    	jne    c0002bb8 <dir_clear+0xdb>
c0002af7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002afb:	89 f0                	mov    eax,esi
c0002afd:	e8 1b f7 ff ff       	call   c000221d <clst2sect>
c0002b02:	31 d2                	xor    edx,edx
c0002b04:	b9 00 02 00 00       	mov    ecx,0x200
c0002b09:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b0c:	89 c5                	mov    ebp,eax
c0002b0e:	8d 46 34             	lea    eax,[esi+0x34]
c0002b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b15:	e8 ee f4 ff ff       	call   c0002008 <mem_set>
c0002b1a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b1e:	b8 00 80 00 00       	mov    eax,0x8000
c0002b23:	c1 e3 09             	shl    ebx,0x9
c0002b26:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b2c:	0f 47 d8             	cmova  ebx,eax
c0002b2f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b35:	76 16                	jbe    c0002b4d <dir_clear+0x70>
c0002b37:	83 ec 0c             	sub    esp,0xc
c0002b3a:	53                   	push   ebx
c0002b3b:	e8 cc 32 00 00       	call   c0005e0c <ff_memalloc>
c0002b40:	83 c4 10             	add    esp,0x10
c0002b43:	85 c0                	test   eax,eax
c0002b45:	89 c7                	mov    edi,eax
c0002b47:	75 76                	jne    c0002bbf <dir_clear+0xe2>
c0002b49:	d1 eb                	shr    ebx,1
c0002b4b:	eb e2                	jmp    c0002b2f <dir_clear+0x52>
c0002b4d:	31 db                	xor    ebx,ebx
c0002b4f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b53:	39 d8                	cmp    eax,ebx
c0002b55:	76 53                	jbe    c0002baa <dir_clear+0xcd>
c0002b57:	6a 01                	push   0x1
c0002b59:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5c:	50                   	push   eax
c0002b5d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b65:	50                   	push   eax
c0002b66:	e8 27 f4 ff ff       	call   c0001f92 <disk_write>
c0002b6b:	83 c4 10             	add    esp,0x10
c0002b6e:	85 c0                	test   eax,eax
c0002b70:	75 38                	jne    c0002baa <dir_clear+0xcd>
c0002b72:	43                   	inc    ebx
c0002b73:	eb da                	jmp    c0002b4f <dir_clear+0x72>
c0002b75:	52                   	push   edx
c0002b76:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b7d:	50                   	push   eax
c0002b7e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b82:	57                   	push   edi
c0002b83:	50                   	push   eax
c0002b84:	e8 09 f4 ff ff       	call   c0001f92 <disk_write>
c0002b89:	83 c4 10             	add    esp,0x10
c0002b8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b90:	85 c0                	test   eax,eax
c0002b92:	75 0a                	jne    c0002b9e <dir_clear+0xc1>
c0002b94:	01 d3                	add    ebx,edx
c0002b96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b9a:	39 d8                	cmp    eax,ebx
c0002b9c:	77 d7                	ja     c0002b75 <dir_clear+0x98>
c0002b9e:	83 ec 0c             	sub    esp,0xc
c0002ba1:	57                   	push   edi
c0002ba2:	e8 7d 32 00 00       	call   c0005e24 <ff_memfree>
c0002ba7:	83 c4 10             	add    esp,0x10
c0002baa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bae:	39 d8                	cmp    eax,ebx
c0002bb0:	0f 95 c0             	setne  al
c0002bb3:	0f b6 c0             	movzx  eax,al
c0002bb6:	eb 19                	jmp    c0002bd1 <dir_clear+0xf4>
c0002bb8:	b8 01 00 00 00       	mov    eax,0x1
c0002bbd:	eb 12                	jmp    c0002bd1 <dir_clear+0xf4>
c0002bbf:	89 d9                	mov    ecx,ebx
c0002bc1:	31 d2                	xor    edx,edx
c0002bc3:	e8 40 f4 ff ff       	call   c0002008 <mem_set>
c0002bc8:	89 da                	mov    edx,ebx
c0002bca:	31 db                	xor    ebx,ebx
c0002bcc:	c1 ea 09             	shr    edx,0x9
c0002bcf:	eb c5                	jmp    c0002b96 <dir_clear+0xb9>
c0002bd1:	83 c4 1c             	add    esp,0x1c
c0002bd4:	5b                   	pop    ebx
c0002bd5:	5e                   	pop    esi
c0002bd6:	5f                   	pop    edi
c0002bd7:	5d                   	pop    ebp
c0002bd8:	c3                   	ret    

c0002bd9 <create_name>:
c0002bd9:	55                   	push   ebp
c0002bda:	89 c5                	mov    ebp,eax
c0002bdc:	57                   	push   edi
c0002bdd:	89 d7                	mov    edi,edx
c0002bdf:	56                   	push   esi
c0002be0:	31 f6                	xor    esi,esi
c0002be2:	53                   	push   ebx
c0002be3:	83 ec 3c             	sub    esp,0x3c
c0002be6:	8b 02                	mov    eax,DWORD PTR [edx]
c0002be8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002bef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002bfa:	e8 4d f4 ff ff       	call   c000204c <tchar2uni>
c0002bff:	83 f8 ff             	cmp    eax,0xffffffff
c0002c02:	89 c3                	mov    ebx,eax
c0002c04:	75 0a                	jne    c0002c10 <create_name+0x37>
c0002c06:	b8 06 00 00 00       	mov    eax,0x6
c0002c0b:	e9 7c 02 00 00       	jmp    c0002e8c <create_name+0x2b3>
c0002c10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c15:	76 0c                	jbe    c0002c23 <create_name+0x4a>
c0002c17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c1b:	c1 e8 10             	shr    eax,0x10
c0002c1e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c22:	46                   	inc    esi
c0002c23:	0f b7 d3             	movzx  edx,bx
c0002c26:	89 d8                	mov    eax,ebx
c0002c28:	83 fa 1f             	cmp    edx,0x1f
c0002c2b:	76 30                	jbe    c0002c5d <create_name+0x84>
c0002c2d:	83 fa 2f             	cmp    edx,0x2f
c0002c30:	74 2b                	je     c0002c5d <create_name+0x84>
c0002c32:	83 fa 5c             	cmp    edx,0x5c
c0002c35:	74 35                	je     c0002c6c <create_name+0x93>
c0002c37:	83 fa 7f             	cmp    edx,0x7f
c0002c3a:	77 0e                	ja     c0002c4a <create_name+0x71>
c0002c3c:	b8 92 f5 02 c0       	mov    eax,0xc002f592
c0002c41:	e8 ef f3 ff ff       	call   c0002035 <chk_chr>
c0002c46:	85 c0                	test   eax,eax
c0002c48:	75 bc                	jne    c0002c06 <create_name+0x2d>
c0002c4a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c50:	77 b4                	ja     c0002c06 <create_name+0x2d>
c0002c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c56:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c5a:	46                   	inc    esi
c0002c5b:	eb 99                	jmp    c0002bf6 <create_name+0x1d>
c0002c5d:	66 83 f8 1f          	cmp    ax,0x1f
c0002c61:	b3 04                	mov    bl,0x4
c0002c63:	76 1a                	jbe    c0002c7f <create_name+0xa6>
c0002c65:	eb 05                	jmp    c0002c6c <create_name+0x93>
c0002c67:	40                   	inc    eax
c0002c68:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c70:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c73:	83 fa 2f             	cmp    edx,0x2f
c0002c76:	74 ef                	je     c0002c67 <create_name+0x8e>
c0002c78:	83 fa 5c             	cmp    edx,0x5c
c0002c7b:	74 ea                	je     c0002c67 <create_name+0x8e>
c0002c7d:	31 db                	xor    ebx,ebx
c0002c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c83:	89 07                	mov    DWORD PTR [edi],eax
c0002c85:	85 f6                	test   esi,esi
c0002c87:	74 16                	je     c0002c9f <create_name+0xc6>
c0002c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c8d:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c92:	83 f8 20             	cmp    eax,0x20
c0002c95:	74 05                	je     c0002c9c <create_name+0xc3>
c0002c97:	83 f8 2e             	cmp    eax,0x2e
c0002c9a:	75 03                	jne    c0002c9f <create_name+0xc6>
c0002c9c:	4e                   	dec    esi
c0002c9d:	eb e6                	jmp    c0002c85 <create_name+0xac>
c0002c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ca3:	31 ff                	xor    edi,edi
c0002ca5:	85 f6                	test   esi,esi
c0002ca7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cad:	0f 84 53 ff ff ff    	je     c0002c06 <create_name+0x2d>
c0002cb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb7:	8d 57 01             	lea    edx,[edi+0x1]
c0002cba:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cbe:	83 f8 20             	cmp    eax,0x20
c0002cc1:	75 04                	jne    c0002cc7 <create_name+0xee>
c0002cc3:	89 d7                	mov    edi,edx
c0002cc5:	eb ec                	jmp    c0002cb3 <create_name+0xda>
c0002cc7:	85 ff                	test   edi,edi
c0002cc9:	75 05                	jne    c0002cd0 <create_name+0xf7>
c0002ccb:	83 f8 2e             	cmp    eax,0x2e
c0002cce:	75 08                	jne    c0002cd8 <create_name+0xff>
c0002cd0:	83 cb 03             	or     ebx,0x3
c0002cd3:	eb 03                	jmp    c0002cd8 <create_name+0xff>
c0002cd5:	4e                   	dec    esi
c0002cd6:	74 0c                	je     c0002ce4 <create_name+0x10b>
c0002cd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cdc:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ce2:	75 f1                	jne    c0002cd5 <create_name+0xfc>
c0002ce4:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ce9:	ba 20 00 00 00       	mov    edx,0x20
c0002cee:	8d 45 20             	lea    eax,[ebp+0x20]
c0002cf1:	e8 12 f3 ff ff       	call   c0002008 <mem_set>
c0002cf6:	31 c9                	xor    ecx,ecx
c0002cf8:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d00:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d05:	8d 47 01             	lea    eax,[edi+0x1]
c0002d08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d10:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	89 c7                	mov    edi,eax
c0002d18:	0f 84 1d 01 00 00    	je     c0002e3b <create_name+0x262>
c0002d1e:	83 f8 20             	cmp    eax,0x20
c0002d21:	74 0b                	je     c0002d2e <create_name+0x155>
c0002d23:	83 f8 2e             	cmp    eax,0x2e
c0002d26:	75 0f                	jne    c0002d37 <create_name+0x15e>
c0002d28:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d2c:	74 09                	je     c0002d37 <create_name+0x15e>
c0002d2e:	83 cb 03             	or     ebx,0x3
c0002d31:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d35:	eb ce                	jmp    c0002d05 <create_name+0x12c>
c0002d37:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d3b:	73 06                	jae    c0002d43 <create_name+0x16a>
c0002d3d:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d41:	75 3a                	jne    c0002d7d <create_name+0x1a4>
c0002d43:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d48:	75 08                	jne    c0002d52 <create_name+0x179>
c0002d4a:	83 cb 03             	or     ebx,0x3
c0002d4d:	e9 e9 00 00 00       	jmp    c0002e3b <create_name+0x262>
c0002d52:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d56:	74 0d                	je     c0002d65 <create_name+0x18c>
c0002d58:	83 cb 03             	or     ebx,0x3
c0002d5b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d5f:	0f 87 d6 00 00 00    	ja     c0002e3b <create_name+0x262>
c0002d65:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d6a:	b9 08 00 00 00       	mov    ecx,0x8
c0002d6f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d73:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002d7b:	eb b4                	jmp    c0002d31 <create_name+0x158>
c0002d7d:	0f b7 c7             	movzx  eax,di
c0002d80:	83 f8 7f             	cmp    eax,0x7f
c0002d83:	76 66                	jbe    c0002deb <create_name+0x212>
c0002d85:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d89:	89 d9                	mov    ecx,ebx
c0002d8b:	83 c9 02             	or     ecx,0x2
c0002d8e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d92:	52                   	push   edx
c0002d93:	52                   	push   edx
c0002d94:	68 b5 01 00 00       	push   0x1b5
c0002d99:	50                   	push   eax
c0002d9a:	e8 9d 30 00 00       	call   c0005e3c <ff_uni2oem>
c0002d9f:	83 c4 10             	add    esp,0x10
c0002da2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002da6:	a8 80                	test   al,0x80
c0002da8:	89 c7                	mov    edi,eax
c0002daa:	74 0c                	je     c0002db8 <create_name+0x1df>
c0002dac:	83 e7 7f             	and    edi,0x7f
c0002daf:	0f b6 bf 40 f6 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd09c0]
c0002db6:	eb 2a                	jmp    c0002de2 <create_name+0x209>
c0002db8:	0f b7 c0             	movzx  eax,ax
c0002dbb:	3d ff 00 00 00       	cmp    eax,0xff
c0002dc0:	76 20                	jbe    c0002de2 <create_name+0x209>
c0002dc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002dc6:	4a                   	dec    edx
c0002dc7:	39 ca                	cmp    edx,ecx
c0002dc9:	77 0c                	ja     c0002dd7 <create_name+0x1fe>
c0002dcb:	83 cb 03             	or     ebx,0x3
c0002dce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dd2:	e9 5a ff ff ff       	jmp    c0002d31 <create_name+0x158>
c0002dd7:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002ddb:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ddf:	41                   	inc    ecx
c0002de0:	eb 4d                	jmp    c0002e2f <create_name+0x256>
c0002de2:	66 85 ff             	test   di,di
c0002de5:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002de9:	74 19                	je     c0002e04 <create_name+0x22b>
c0002deb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002def:	0f b7 d7             	movzx  edx,di
c0002df2:	b8 9b f5 02 c0       	mov    eax,0xc002f59b
c0002df7:	e8 39 f2 ff ff       	call   c0002035 <chk_chr>
c0002dfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e00:	85 c0                	test   eax,eax
c0002e02:	74 0a                	je     c0002e0e <create_name+0x235>
c0002e04:	83 cb 03             	or     ebx,0x3
c0002e07:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e0c:	eb 21                	jmp    c0002e2f <create_name+0x256>
c0002e0e:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e11:	66 83 f8 19          	cmp    ax,0x19
c0002e15:	77 07                	ja     c0002e1e <create_name+0x245>
c0002e17:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e1c:	eb 11                	jmp    c0002e2f <create_name+0x256>
c0002e1e:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e21:	66 83 f8 19          	cmp    ax,0x19
c0002e25:	77 08                	ja     c0002e2f <create_name+0x256>
c0002e27:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e2c:	83 ef 20             	sub    edi,0x20
c0002e2f:	89 f8                	mov    eax,edi
c0002e31:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e35:	41                   	inc    ecx
c0002e36:	e9 f6 fe ff ff       	jmp    c0002d31 <create_name+0x158>
c0002e3b:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e3f:	75 04                	jne    c0002e45 <create_name+0x26c>
c0002e41:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e45:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e4a:	75 05                	jne    c0002e51 <create_name+0x278>
c0002e4c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e55:	83 e0 0c             	and    eax,0xc
c0002e58:	83 f8 0c             	cmp    eax,0xc
c0002e5b:	74 0c                	je     c0002e69 <create_name+0x290>
c0002e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e61:	83 e0 03             	and    eax,0x3
c0002e64:	83 f8 03             	cmp    eax,0x3
c0002e67:	75 05                	jne    c0002e6e <create_name+0x295>
c0002e69:	83 cb 02             	or     ebx,0x2
c0002e6c:	eb 19                	jmp    c0002e87 <create_name+0x2ae>
c0002e6e:	f6 c3 02             	test   bl,0x2
c0002e71:	75 14                	jne    c0002e87 <create_name+0x2ae>
c0002e73:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e78:	74 03                	je     c0002e7d <create_name+0x2a4>
c0002e7a:	83 cb 10             	or     ebx,0x10
c0002e7d:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e82:	74 03                	je     c0002e87 <create_name+0x2ae>
c0002e84:	83 cb 08             	or     ebx,0x8
c0002e87:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002e8a:	31 c0                	xor    eax,eax
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 1e f1 ff ff       	call   c0001fc7 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a4 00 00 00       	jmp    c0002f59 <cmp_lfn+0xc5>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	31 c9                	xor    ecx,ecx
c0002ebe:	83 e3 3f             	and    ebx,0x3f
c0002ec1:	4b                   	dec    ebx
c0002ec2:	6b db 0d             	imul   ebx,ebx,0xd
c0002ec5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ec9:	0f b6 81 c0 f6 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0940]
c0002ed0:	01 f8                	add    eax,edi
c0002ed2:	e8 f0 f0 ff ff       	call   c0001fc7 <ld_word>
c0002ed7:	66 85 ed             	test   bp,bp
c0002eda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ede:	0f b7 f0             	movzx  esi,ax
c0002ee1:	74 44                	je     c0002f27 <cmp_lfn+0x93>
c0002ee3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002ee7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eed:	77 bf                	ja     c0002eae <cmp_lfn+0x1a>
c0002eef:	83 ec 0c             	sub    esp,0xc
c0002ef2:	0f b7 c6             	movzx  eax,si
c0002ef5:	50                   	push   eax
c0002ef6:	e8 55 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002efb:	89 c5                	mov    ebp,eax
c0002efd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f08:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0f:	e8 3c 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f14:	83 c4 10             	add    esp,0x10
c0002f17:	39 c5                	cmp    ebp,eax
c0002f19:	75 93                	jne    c0002eae <cmp_lfn+0x1a>
c0002f1b:	89 f5                	mov    ebp,esi
c0002f1d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f25:	eb 0c                	jmp    c0002f33 <cmp_lfn+0x9f>
c0002f27:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f2d:	0f 85 7b ff ff ff    	jne    c0002eae <cmp_lfn+0x1a>
c0002f33:	41                   	inc    ecx
c0002f34:	83 f9 0d             	cmp    ecx,0xd
c0002f37:	75 8c                	jne    c0002ec5 <cmp_lfn+0x31>
c0002f39:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f3c:	74 16                	je     c0002f54 <cmp_lfn+0xc0>
c0002f3e:	66 85 ed             	test   bp,bp
c0002f41:	74 11                	je     c0002f54 <cmp_lfn+0xc0>
c0002f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f47:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f4c:	0f 94 c0             	sete   al
c0002f4f:	0f b6 c0             	movzx  eax,al
c0002f52:	eb 05                	jmp    c0002f59 <cmp_lfn+0xc5>
c0002f54:	b8 01 00 00 00       	mov    eax,0x1
c0002f59:	83 c4 1c             	add    esp,0x1c
c0002f5c:	5b                   	pop    ebx
c0002f5d:	5e                   	pop    esi
c0002f5e:	5f                   	pop    edi
c0002f5f:	5d                   	pop    ebp
c0002f60:	c3                   	ret    

c0002f61 <sync_fs>:
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	53                   	push   ebx
c0002f64:	89 c3                	mov    ebx,eax
c0002f66:	e8 5e f5 ff ff       	call   c00024c9 <sync_window>
c0002f6b:	85 c0                	test   eax,eax
c0002f6d:	0f 85 9a 00 00 00    	jne    c000300d <sync_fs+0xac>
c0002f73:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f76:	75 7b                	jne    c0002ff3 <sync_fs+0x92>
c0002f78:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f7c:	75 75                	jne    c0002ff3 <sync_fs+0x92>
c0002f7e:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f81:	b9 00 02 00 00       	mov    ecx,0x200
c0002f86:	31 d2                	xor    edx,edx
c0002f88:	89 f0                	mov    eax,esi
c0002f8a:	e8 79 f0 ff ff       	call   c0002008 <mem_set>
c0002f8f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f9a:	e8 4d f0 ff ff       	call   c0001fec <st_word>
c0002f9f:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa4:	89 f0                	mov    eax,esi
c0002fa6:	e8 45 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fab:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fb1:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb6:	e8 35 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fbb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbe:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc4:	e8 27 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fc9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fcc:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fd2:	e8 19 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fda:	6a 01                	push   0x1
c0002fdc:	40                   	inc    eax
c0002fdd:	50                   	push   eax
c0002fde:	56                   	push   esi
c0002fdf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fe2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe6:	50                   	push   eax
c0002fe7:	e8 a6 ef ff ff       	call   c0001f92 <disk_write>
c0002fec:	83 c4 10             	add    esp,0x10
c0002fef:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002ff3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff7:	51                   	push   ecx
c0002ff8:	6a 00                	push   0x0
c0002ffa:	6a 00                	push   0x0
c0002ffc:	50                   	push   eax
c0002ffd:	e8 a6 ef ff ff       	call   c0001fa8 <disk_ioctl>
c0003002:	83 c4 10             	add    esp,0x10
c0003005:	85 c0                	test   eax,eax
c0003007:	0f 95 c0             	setne  al
c000300a:	0f b6 c0             	movzx  eax,al
c000300d:	5a                   	pop    edx
c000300e:	5b                   	pop    ebx
c000300f:	5e                   	pop    esi
c0003010:	c3                   	ret    

c0003011 <create_partition>:
c0003011:	55                   	push   ebp
c0003012:	0f b6 c0             	movzx  eax,al
c0003015:	57                   	push   edi
c0003016:	56                   	push   esi
c0003017:	53                   	push   ebx
c0003018:	83 ec 40             	sub    esp,0x40
c000301b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003023:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003027:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000302b:	50                   	push   eax
c000302c:	6a 01                	push   0x1
c000302e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003032:	e8 71 ef ff ff       	call   c0001fa8 <disk_ioctl>
c0003037:	83 c4 10             	add    esp,0x10
c000303a:	85 c0                	test   eax,eax
c000303c:	0f 85 68 01 00 00    	jne    c00031aa <create_partition+0x199>
c0003042:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0003046:	b9 05 00 00 00       	mov    ecx,0x5
c000304b:	be 08 00 00 00       	mov    esi,0x8
c0003050:	89 f0                	mov    eax,esi
c0003052:	31 d2                	xor    edx,edx
c0003054:	0f b6 d8             	movzx  ebx,al
c0003057:	89 e8                	mov    eax,ebp
c0003059:	f7 f3                	div    ebx
c000305b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003060:	76 0a                	jbe    c000306c <create_partition+0x5b>
c0003062:	d1 e6                	shl    esi,1
c0003064:	49                   	dec    ecx
c0003065:	75 e9                	jne    c0003050 <create_partition+0x3f>
c0003067:	be ff ff ff ff       	mov    esi,0xffffffff
c000306c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003070:	b9 00 02 00 00       	mov    ecx,0x200
c0003075:	31 d2                	xor    edx,edx
c0003077:	e8 8c ef ff ff       	call   c0002008 <mem_set>
c000307c:	b9 64 00 00 00       	mov    ecx,0x64
c0003081:	89 e8                	mov    eax,ebp
c0003083:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000308b:	31 d2                	xor    edx,edx
c000308d:	f7 f1                	div    ecx
c000308f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003094:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003098:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000309c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a2:	89 f0                	mov    eax,esi
c00030a4:	0f b6 c0             	movzx  eax,al
c00030a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030ab:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030b0:	0f 96 c0             	setbe  al
c00030b3:	31 d2                	xor    edx,edx
c00030b5:	85 c9                	test   ecx,ecx
c00030b7:	0f 95 c2             	setne  dl
c00030ba:	85 c2                	test   edx,eax
c00030bc:	0f 84 b7 00 00 00    	je     c0003179 <create_partition+0x168>
c00030c2:	39 e9                	cmp    ecx,ebp
c00030c4:	0f 83 af 00 00 00    	jae    c0003179 <create_partition+0x168>
c00030ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030d2:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030d5:	83 fe 64             	cmp    esi,0x64
c00030d8:	77 0b                	ja     c00030e5 <create_partition+0xd4>
c00030da:	74 07                	je     c00030e3 <create_partition+0xd2>
c00030dc:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c00030e1:	eb 02                	jmp    c00030e5 <create_partition+0xd4>
c00030e3:	89 ee                	mov    esi,ebp
c00030e5:	89 ca                	mov    edx,ecx
c00030e7:	31 c0                	xor    eax,eax
c00030e9:	01 f2                	add    edx,esi
c00030eb:	0f 92 c0             	setb   al
c00030ee:	39 ea                	cmp    edx,ebp
c00030f0:	77 04                	ja     c00030f6 <create_partition+0xe5>
c00030f2:	85 c0                	test   eax,eax
c00030f4:	74 06                	je     c00030fc <create_partition+0xeb>
c00030f6:	89 ee                	mov    esi,ebp
c00030f8:	29 ce                	sub    esi,ecx
c00030fa:	eb 04                	jmp    c0003100 <create_partition+0xef>
c00030fc:	85 f6                	test   esi,esi
c00030fe:	74 79                	je     c0003179 <create_partition+0x168>
c0003100:	89 ca                	mov    edx,ecx
c0003102:	89 d8                	mov    eax,ebx
c0003104:	e8 e7 ee ff ff       	call   c0001ff0 <st_dword>
c0003109:	8d 43 04             	lea    eax,[ebx+0x4]
c000310c:	89 f2                	mov    edx,esi
c000310e:	e8 dd ee ff ff       	call   c0001ff0 <st_dword>
c0003113:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003117:	bf 3f 00 00 00       	mov    edi,0x3f
c000311c:	31 d2                	xor    edx,edx
c000311e:	83 c3 10             	add    ebx,0x10
c0003121:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003125:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003128:	89 c8                	mov    eax,ecx
c000312a:	01 f1                	add    ecx,esi
c000312c:	f7 f7                	div    edi
c000312e:	89 d7                	mov    edi,edx
c0003130:	31 d2                	xor    edx,edx
c0003132:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003136:	47                   	inc    edi
c0003137:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000313a:	89 c2                	mov    edx,eax
c000313c:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c000313f:	c1 ea 02             	shr    edx,0x2
c0003142:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003145:	83 e2 c0             	and    edx,0xffffffc0
c0003148:	09 fa                	or     edx,edi
c000314a:	bf 3f 00 00 00       	mov    edi,0x3f
c000314f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003152:	31 d2                	xor    edx,edx
c0003154:	f7 f7                	div    edi
c0003156:	89 d6                	mov    esi,edx
c0003158:	31 d2                	xor    edx,edx
c000315a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315e:	46                   	inc    esi
c000315f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003162:	89 c7                	mov    edi,eax
c0003164:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003167:	c1 ef 02             	shr    edi,0x2
c000316a:	83 e7 c0             	and    edi,0xffffffc0
c000316d:	09 fe                	or     esi,edi
c000316f:	89 f2                	mov    edx,esi
c0003171:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003174:	e9 32 ff ff ff       	jmp    c00030ab <create_partition+0x9a>
c0003179:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000317d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003182:	05 fe 01 00 00       	add    eax,0x1fe
c0003187:	e8 60 ee ff ff       	call   c0001fec <st_word>
c000318c:	6a 01                	push   0x1
c000318e:	6a 00                	push   0x0
c0003190:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003198:	e8 f5 ed ff ff       	call   c0001f92 <disk_write>
c000319d:	83 c4 10             	add    esp,0x10
c00031a0:	85 c0                	test   eax,eax
c00031a2:	0f 95 c0             	setne  al
c00031a5:	0f b6 c0             	movzx  eax,al
c00031a8:	eb 05                	jmp    c00031af <create_partition+0x19e>
c00031aa:	b8 01 00 00 00       	mov    eax,0x1
c00031af:	83 c4 3c             	add    esp,0x3c
c00031b2:	5b                   	pop    ebx
c00031b3:	5e                   	pop    esi
c00031b4:	5f                   	pop    edi
c00031b5:	5d                   	pop    ebp
c00031b6:	c3                   	ret    

c00031b7 <get_fileinfo>:
c00031b7:	55                   	push   ebp
c00031b8:	57                   	push   edi
c00031b9:	56                   	push   esi
c00031ba:	53                   	push   ebx
c00031bb:	83 ec 1c             	sub    esp,0x1c
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c4:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031c8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031cc:	0f 84 de 01 00 00    	je     c00033b0 <get_fileinfo+0x1f9>
c00031d2:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d6:	89 d3                	mov    ebx,edx
c00031d8:	89 c6                	mov    esi,eax
c00031da:	74 7d                	je     c0003259 <get_fileinfo+0xa2>
c00031dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031e4:	31 ff                	xor    edi,edi
c00031e6:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c00031ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00031f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f8:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031fc:	85 c0                	test   eax,eax
c00031fe:	89 c2                	mov    edx,eax
c0003200:	74 44                	je     c0003246 <get_fileinfo+0x8f>
c0003202:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003207:	85 ed                	test   ebp,ebp
c0003209:	75 0d                	jne    c0003218 <get_fileinfo+0x61>
c000320b:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003211:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003216:	76 20                	jbe    c0003238 <get_fileinfo+0x81>
c0003218:	c1 e5 10             	shl    ebp,0x10
c000321b:	b9 ff 00 00 00       	mov    ecx,0xff
c0003220:	29 f9                	sub    ecx,edi
c0003222:	09 e8                	or     eax,ebp
c0003224:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003228:	e8 f7 ee ff ff       	call   c0002124 <put_utf>
c000322d:	0f b6 c0             	movzx  eax,al
c0003230:	85 c0                	test   eax,eax
c0003232:	74 10                	je     c0003244 <get_fileinfo+0x8d>
c0003234:	01 c7                	add    edi,eax
c0003236:	31 d2                	xor    edx,edx
c0003238:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c000323d:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c0003242:	eb a9                	jmp    c00031ed <get_fileinfo+0x36>
c0003244:	31 ff                	xor    edi,edi
c0003246:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c000324c:	b8 00 00 00 00       	mov    eax,0x0
c0003251:	0f 45 f8             	cmovne edi,eax
c0003254:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003259:	31 ff                	xor    edi,edi
c000325b:	31 c9                	xor    ecx,ecx
c000325d:	83 f9 0a             	cmp    ecx,0xa
c0003260:	0f 87 ac 00 00 00    	ja     c0003312 <get_fileinfo+0x15b>
c0003266:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003269:	8d 69 01             	lea    ebp,[ecx+0x1]
c000326c:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003270:	83 f8 20             	cmp    eax,0x20
c0003273:	89 c2                	mov    edx,eax
c0003275:	0f 84 90 00 00 00    	je     c000330b <get_fileinfo+0x154>
c000327b:	83 f8 05             	cmp    eax,0x5
c000327e:	75 05                	jne    c0003285 <get_fileinfo+0xce>
c0003280:	ba e5 00 00 00       	mov    edx,0xe5
c0003285:	83 fd 09             	cmp    ebp,0x9
c0003288:	75 0b                	jne    c0003295 <get_fileinfo+0xde>
c000328a:	83 ff 0b             	cmp    edi,0xb
c000328d:	77 06                	ja     c0003295 <get_fileinfo+0xde>
c000328f:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003294:	47                   	inc    edi
c0003295:	0f b7 c2             	movzx  eax,dx
c0003298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000329c:	e8 a5 ed ff ff       	call   c0002046 <dbc_1st>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 2f                	je     c00032d4 <get_fileinfo+0x11d>
c00032a5:	83 fd 08             	cmp    ebp,0x8
c00032a8:	74 2a                	je     c00032d4 <get_fileinfo+0x11d>
c00032aa:	83 fd 0b             	cmp    ebp,0xb
c00032ad:	74 25                	je     c00032d4 <get_fileinfo+0x11d>
c00032af:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032b2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032b6:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032ba:	e8 8a ed ff ff       	call   c0002049 <dbc_2nd>
c00032bf:	85 c0                	test   eax,eax
c00032c1:	74 11                	je     c00032d4 <get_fileinfo+0x11d>
c00032c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032c7:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032ca:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032cf:	c1 e0 08             	shl    eax,0x8
c00032d2:	09 c2                	or     edx,eax
c00032d4:	50                   	push   eax
c00032d5:	0f b7 d2             	movzx  edx,dx
c00032d8:	50                   	push   eax
c00032d9:	68 b5 01 00 00       	push   0x1b5
c00032de:	52                   	push   edx
c00032df:	e8 f4 2b 00 00       	call   c0005ed8 <ff_oem2uni>
c00032e4:	83 c4 10             	add    esp,0x10
c00032e7:	0f b7 c0             	movzx  eax,ax
c00032ea:	85 c0                	test   eax,eax
c00032ec:	75 04                	jne    c00032f2 <get_fileinfo+0x13b>
c00032ee:	31 ff                	xor    edi,edi
c00032f0:	eb 20                	jmp    c0003312 <get_fileinfo+0x15b>
c00032f2:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032f6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032fb:	29 f9                	sub    ecx,edi
c00032fd:	e8 22 ee ff ff       	call   c0002124 <put_utf>
c0003302:	0f b6 c0             	movzx  eax,al
c0003305:	85 c0                	test   eax,eax
c0003307:	74 e5                	je     c00032ee <get_fileinfo+0x137>
c0003309:	01 c7                	add    edi,eax
c000330b:	89 e9                	mov    ecx,ebp
c000330d:	e9 4b ff ff ff       	jmp    c000325d <get_fileinfo+0xa6>
c0003312:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003317:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000331b:	75 5f                	jne    c000337c <get_fileinfo+0x1c5>
c000331d:	85 ff                	test   edi,edi
c000331f:	75 0b                	jne    c000332c <get_fileinfo+0x175>
c0003321:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003325:	ba 01 00 00 00       	mov    edx,0x1
c000332a:	eb 3e                	jmp    c000336a <get_fileinfo+0x1b3>
c000332c:	bf 08 00 00 00       	mov    edi,0x8
c0003331:	31 d2                	xor    edx,edx
c0003333:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003339:	84 c0                	test   al,al
c000333b:	74 2d                	je     c000336a <get_fileinfo+0x1b3>
c000333d:	66 83 f8 2e          	cmp    ax,0x2e
c0003341:	74 1b                	je     c000335e <get_fileinfo+0x1a7>
c0003343:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003346:	66 83 f9 19          	cmp    cx,0x19
c000334a:	77 17                	ja     c0003363 <get_fileinfo+0x1ac>
c000334c:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334f:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003352:	21 f9                	and    ecx,edi
c0003354:	80 e1 18             	and    cl,0x18
c0003357:	74 0a                	je     c0003363 <get_fileinfo+0x1ac>
c0003359:	83 c0 20             	add    eax,0x20
c000335c:	eb 05                	jmp    c0003363 <get_fileinfo+0x1ac>
c000335e:	bf 10 00 00 00       	mov    edi,0x10
c0003363:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003367:	42                   	inc    edx
c0003368:	eb c9                	jmp    c0003333 <get_fileinfo+0x17c>
c000336a:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000336f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003372:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003376:	75 04                	jne    c000337c <get_fileinfo+0x1c5>
c0003378:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000337c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003382:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003385:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003388:	83 c0 1c             	add    eax,0x1c
c000338b:	e8 44 ec ff ff       	call   c0001fd4 <ld_dword>
c0003390:	89 03                	mov    DWORD PTR [ebx],eax
c0003392:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003395:	83 c0 16             	add    eax,0x16
c0003398:	e8 2a ec ff ff       	call   c0001fc7 <ld_word>
c000339d:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a4:	83 c0 18             	add    eax,0x18
c00033a7:	e8 1b ec ff ff       	call   c0001fc7 <ld_word>
c00033ac:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033b0:	83 c4 1c             	add    esp,0x1c
c00033b3:	5b                   	pop    ebx
c00033b4:	5e                   	pop    esi
c00033b5:	5f                   	pop    edi
c00033b6:	5d                   	pop    ebp
c00033b7:	c3                   	ret    

c00033b8 <ld_clust.isra.0>:
c00033b8:	56                   	push   esi
c00033b9:	89 c6                	mov    esi,eax
c00033bb:	53                   	push   ebx
c00033bc:	89 d3                	mov    ebx,edx
c00033be:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033c1:	e8 01 ec ff ff       	call   c0001fc7 <ld_word>
c00033c6:	0f b7 c8             	movzx  ecx,ax
c00033c9:	89 f0                	mov    eax,esi
c00033cb:	3c 03                	cmp    al,0x3
c00033cd:	75 0d                	jne    c00033dc <ld_clust.isra.0+0x24>
c00033cf:	8d 43 14             	lea    eax,[ebx+0x14]
c00033d2:	e8 f0 eb ff ff       	call   c0001fc7 <ld_word>
c00033d7:	c1 e0 10             	shl    eax,0x10
c00033da:	09 c1                	or     ecx,eax
c00033dc:	5b                   	pop    ebx
c00033dd:	89 c8                	mov    eax,ecx
c00033df:	5e                   	pop    esi
c00033e0:	c3                   	ret    

c00033e1 <st_clust.isra.1>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033ea:	0f b7 d1             	movzx  edx,cx
c00033ed:	e8 fa eb ff ff       	call   c0001fec <st_word>
c00033f2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033f5:	75 0f                	jne    c0003406 <st_clust.isra.1+0x25>
c00033f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fa:	5b                   	pop    ebx
c00033fb:	c1 e9 10             	shr    ecx,0x10
c00033fe:	89 ca                	mov    edx,ecx
c0003400:	5e                   	pop    esi
c0003401:	e9 e6 eb ff ff       	jmp    c0001fec <st_word>
c0003406:	5b                   	pop    ebx
c0003407:	5e                   	pop    esi
c0003408:	c3                   	ret    

c0003409 <get_fat.isra.2>:
c0003409:	83 fa 01             	cmp    edx,0x1
c000340c:	b9 01 00 00 00       	mov    ecx,0x1
c0003411:	0f 86 f4 00 00 00    	jbe    c000350b <get_fat.isra.2+0x102>
c0003417:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000341a:	0f 83 eb 00 00 00    	jae    c000350b <get_fat.isra.2+0x102>
c0003420:	55                   	push   ebp
c0003421:	57                   	push   edi
c0003422:	56                   	push   esi
c0003423:	89 c6                	mov    esi,eax
c0003425:	53                   	push   ebx
c0003426:	89 d3                	mov    ebx,edx
c0003428:	83 ec 0c             	sub    esp,0xc
c000342b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000342e:	83 f8 02             	cmp    eax,0x2
c0003431:	74 79                	je     c00034ac <get_fat.isra.2+0xa3>
c0003433:	83 f8 03             	cmp    eax,0x3
c0003436:	0f 84 97 00 00 00    	je     c00034d3 <get_fat.isra.2+0xca>
c000343c:	48                   	dec    eax
c000343d:	0f 85 be 00 00 00    	jne    c0003501 <get_fat.isra.2+0xf8>
c0003443:	89 d7                	mov    edi,edx
c0003445:	89 f0                	mov    eax,esi
c0003447:	d1 ef                	shr    edi,1
c0003449:	01 d7                	add    edi,edx
c000344b:	89 fa                	mov    edx,edi
c000344d:	c1 ea 09             	shr    edx,0x9
c0003450:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003453:	e8 d4 f0 ff ff       	call   c000252c <move_window>
c0003458:	85 c0                	test   eax,eax
c000345a:	74 08                	je     c0003464 <get_fat.isra.2+0x5b>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	e9 9d 00 00 00       	jmp    c0003501 <get_fat.isra.2+0xf8>
c0003464:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003467:	89 f0                	mov    eax,esi
c0003469:	89 ea                	mov    edx,ebp
c000346b:	81 e7 ff 01 00 00    	and    edi,0x1ff
c0003471:	c1 ea 09             	shr    edx,0x9
c0003474:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 ab f0 ff ff       	call   c000252c <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	75 d7                	jne    c000345c <get_fat.isra.2+0x53>
c0003485:	89 f8                	mov    eax,edi
c0003487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000348d:	0f b6 f8             	movzx  edi,al
c0003490:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003495:	c1 e0 08             	shl    eax,0x8
c0003498:	09 f8                	or     eax,edi
c000349a:	89 c1                	mov    ecx,eax
c000349c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034a2:	80 e3 01             	and    bl,0x1
c00034a5:	74 5a                	je     c0003501 <get_fat.isra.2+0xf8>
c00034a7:	c1 e8 04             	shr    eax,0x4
c00034aa:	eb 53                	jmp    c00034ff <get_fat.isra.2+0xf6>
c00034ac:	c1 ea 08             	shr    edx,0x8
c00034af:	89 f0                	mov    eax,esi
c00034b1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034b4:	e8 73 f0 ff ff       	call   c000252c <move_window>
c00034b9:	85 c0                	test   eax,eax
c00034bb:	75 9f                	jne    c000345c <get_fat.isra.2+0x53>
c00034bd:	01 db                	add    ebx,ebx
c00034bf:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034c5:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034c9:	e8 f9 ea ff ff       	call   c0001fc7 <ld_word>
c00034ce:	0f b7 c8             	movzx  ecx,ax
c00034d1:	eb 2e                	jmp    c0003501 <get_fat.isra.2+0xf8>
c00034d3:	c1 ea 07             	shr    edx,0x7
c00034d6:	89 f0                	mov    eax,esi
c00034d8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034db:	e8 4c f0 ff ff       	call   c000252c <move_window>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	0f 85 74 ff ff ff    	jne    c000345c <get_fat.isra.2+0x53>
c00034e8:	c1 e3 02             	shl    ebx,0x2
c00034eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00034f1:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f5:	e8 da ea ff ff       	call   c0001fd4 <ld_dword>
c00034fa:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034ff:	89 c1                	mov    ecx,eax
c0003501:	83 c4 0c             	add    esp,0xc
c0003504:	89 c8                	mov    eax,ecx
c0003506:	5b                   	pop    ebx
c0003507:	5e                   	pop    esi
c0003508:	5f                   	pop    edi
c0003509:	5d                   	pop    ebp
c000350a:	c3                   	ret    
c000350b:	89 c8                	mov    eax,ecx
c000350d:	c3                   	ret    

c000350e <dir_sdi>:
c000350e:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003514:	0f 87 b6 00 00 00    	ja     c00035d0 <dir_sdi+0xc2>
c000351a:	55                   	push   ebp
c000351b:	57                   	push   edi
c000351c:	56                   	push   esi
c000351d:	53                   	push   ebx
c000351e:	89 d3                	mov    ebx,edx
c0003520:	83 ec 1c             	sub    esp,0x1c
c0003523:	f6 c2 1f             	test   dl,0x1f
c0003526:	74 0a                	je     c0003532 <dir_sdi+0x24>
c0003528:	b8 02 00 00 00       	mov    eax,0x2
c000352d:	e9 96 00 00 00       	jmp    c00035c8 <dir_sdi+0xba>
c0003532:	89 c6                	mov    esi,eax
c0003534:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003536:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003539:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c000353c:	85 ff                	test   edi,edi
c000353e:	75 21                	jne    c0003561 <dir_sdi+0x53>
c0003540:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003544:	76 07                	jbe    c000354d <dir_sdi+0x3f>
c0003546:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003549:	85 c0                	test   eax,eax
c000354b:	75 12                	jne    c000355f <dir_sdi+0x51>
c000354d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003551:	89 da                	mov    edx,ebx
c0003553:	c1 ea 05             	shr    edx,0x5
c0003556:	39 c2                	cmp    edx,eax
c0003558:	73 ce                	jae    c0003528 <dir_sdi+0x1a>
c000355a:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c000355d:	eb 3c                	jmp    c000359b <dir_sdi+0x8d>
c000355f:	89 c7                	mov    edi,eax
c0003561:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0003565:	c1 e1 09             	shl    ecx,0x9
c0003568:	39 cb                	cmp    ebx,ecx
c000356a:	72 26                	jb     c0003592 <dir_sdi+0x84>
c000356c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003570:	8b 06                	mov    eax,DWORD PTR [esi]
c0003572:	89 fa                	mov    edx,edi
c0003574:	e8 90 fe ff ff       	call   c0003409 <get_fat.isra.2>
c0003579:	83 f8 ff             	cmp    eax,0xffffffff
c000357c:	89 c7                	mov    edi,eax
c000357e:	74 43                	je     c00035c3 <dir_sdi+0xb5>
c0003580:	83 f8 01             	cmp    eax,0x1
c0003583:	76 a3                	jbe    c0003528 <dir_sdi+0x1a>
c0003585:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003588:	76 9e                	jbe    c0003528 <dir_sdi+0x1a>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	29 cb                	sub    ebx,ecx
c0003590:	eb d6                	jmp    c0003568 <dir_sdi+0x5a>
c0003592:	89 fa                	mov    edx,edi
c0003594:	89 e8                	mov    eax,ebp
c0003596:	e8 82 ec ff ff       	call   c000221d <clst2sect>
c000359b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000359e:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035a1:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035a4:	85 d2                	test   edx,edx
c00035a6:	74 80                	je     c0003528 <dir_sdi+0x1a>
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035b0:	c1 e8 09             	shr    eax,0x9
c00035b3:	01 d0                	add    eax,edx
c00035b5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035b8:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035bc:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035bf:	31 c0                	xor    eax,eax
c00035c1:	eb 05                	jmp    c00035c8 <dir_sdi+0xba>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	83 c4 1c             	add    esp,0x1c
c00035cb:	5b                   	pop    ebx
c00035cc:	5e                   	pop    esi
c00035cd:	5f                   	pop    edi
c00035ce:	5d                   	pop    ebp
c00035cf:	c3                   	ret    
c00035d0:	b8 02 00 00 00       	mov    eax,0x2
c00035d5:	c3                   	ret    

c00035d6 <create_chain>:
c00035d6:	55                   	push   ebp
c00035d7:	89 c5                	mov    ebp,eax
c00035d9:	57                   	push   edi
c00035da:	89 d7                	mov    edi,edx
c00035dc:	56                   	push   esi
c00035dd:	53                   	push   ebx
c00035de:	83 ec 1c             	sub    esp,0x1c
c00035e1:	85 d2                	test   edx,edx
c00035e3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035e5:	75 0e                	jne    c00035f5 <create_chain+0x1f>
c00035e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00035ea:	85 c9                	test   ecx,ecx
c00035ec:	74 32                	je     c0003620 <create_chain+0x4a>
c00035ee:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00035f1:	77 32                	ja     c0003625 <create_chain+0x4f>
c00035f3:	eb 2b                	jmp    c0003620 <create_chain+0x4a>
c00035f5:	89 d8                	mov    eax,ebx
c00035f7:	e8 0d fe ff ff       	call   c0003409 <get_fat.isra.2>
c00035fc:	83 f8 01             	cmp    eax,0x1
c00035ff:	77 0a                	ja     c000360b <create_chain+0x35>
c0003601:	b8 01 00 00 00       	mov    eax,0x1
c0003606:	e9 fd 00 00 00       	jmp    c0003708 <create_chain+0x132>
c000360b:	83 f8 ff             	cmp    eax,0xffffffff
c000360e:	0f 84 f1 00 00 00    	je     c0003705 <create_chain+0x12f>
c0003614:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003617:	89 f9                	mov    ecx,edi
c0003619:	76 0a                	jbe    c0003625 <create_chain+0x4f>
c000361b:	e9 e8 00 00 00       	jmp    c0003708 <create_chain+0x132>
c0003620:	b9 01 00 00 00       	mov    ecx,0x1
c0003625:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003629:	75 07                	jne    c0003632 <create_chain+0x5c>
c000362b:	31 c0                	xor    eax,eax
c000362d:	e9 d6 00 00 00       	jmp    c0003708 <create_chain+0x132>
c0003632:	39 f9                	cmp    ecx,edi
c0003634:	75 49                	jne    c000367f <create_chain+0xa9>
c0003636:	8d 71 01             	lea    esi,[ecx+0x1]
c0003639:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000363c:	77 05                	ja     c0003643 <create_chain+0x6d>
c000363e:	be 02 00 00 00       	mov    esi,0x2
c0003643:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003647:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000364a:	89 f2                	mov    edx,esi
c000364c:	e8 b8 fd ff ff       	call   c0003409 <get_fat.isra.2>
c0003651:	83 f8 01             	cmp    eax,0x1
c0003654:	0f 84 ae 00 00 00    	je     c0003708 <create_chain+0x132>
c000365a:	83 f8 ff             	cmp    eax,0xffffffff
c000365d:	0f 84 a5 00 00 00    	je     c0003708 <create_chain+0x132>
c0003663:	85 c0                	test   eax,eax
c0003665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003669:	74 10                	je     c000367b <create_chain+0xa5>
c000366b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000366e:	83 f8 01             	cmp    eax,0x1
c0003671:	76 0c                	jbe    c000367f <create_chain+0xa9>
c0003673:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003676:	0f 47 c8             	cmova  ecx,eax
c0003679:	eb 04                	jmp    c000367f <create_chain+0xa9>
c000367b:	85 f6                	test   esi,esi
c000367d:	75 3b                	jne    c00036ba <create_chain+0xe4>
c000367f:	89 ce                	mov    esi,ecx
c0003681:	46                   	inc    esi
c0003682:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003685:	77 0a                	ja     c0003691 <create_chain+0xbb>
c0003687:	83 f9 01             	cmp    ecx,0x1
c000368a:	76 9f                	jbe    c000362b <create_chain+0x55>
c000368c:	be 02 00 00 00       	mov    esi,0x2
c0003691:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003698:	89 f2                	mov    edx,esi
c000369a:	e8 6a fd ff ff       	call   c0003409 <get_fat.isra.2>
c000369f:	85 c0                	test   eax,eax
c00036a1:	74 17                	je     c00036ba <create_chain+0xe4>
c00036a3:	83 f8 01             	cmp    eax,0x1
c00036a6:	74 60                	je     c0003708 <create_chain+0x132>
c00036a8:	83 f8 ff             	cmp    eax,0xffffffff
c00036ab:	74 5b                	je     c0003708 <create_chain+0x132>
c00036ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b1:	39 ce                	cmp    esi,ecx
c00036b3:	75 cc                	jne    c0003681 <create_chain+0xab>
c00036b5:	e9 71 ff ff ff       	jmp    c000362b <create_chain+0x55>
c00036ba:	83 c9 ff             	or     ecx,0xffffffff
c00036bd:	89 f2                	mov    edx,esi
c00036bf:	89 d8                	mov    eax,ebx
c00036c1:	e8 c0 f2 ff ff       	call   c0002986 <put_fat>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 0f                	jne    c00036d9 <create_chain+0x103>
c00036ca:	85 ff                	test   edi,edi
c00036cc:	74 0b                	je     c00036d9 <create_chain+0x103>
c00036ce:	89 f1                	mov    ecx,esi
c00036d0:	89 fa                	mov    edx,edi
c00036d2:	89 d8                	mov    eax,ebx
c00036d4:	e8 ad f2 ff ff       	call   c0002986 <put_fat>
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 21                	jne    c00036fe <create_chain+0x128>
c00036dd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00036e0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00036e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00036e6:	8d 57 fe             	lea    edx,[edi-0x2]
c00036e9:	39 d0                	cmp    eax,edx
c00036eb:	77 04                	ja     c00036f1 <create_chain+0x11b>
c00036ed:	48                   	dec    eax
c00036ee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00036f1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00036f4:	83 c8 01             	or     eax,0x1
c00036f7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00036fa:	89 f0                	mov    eax,esi
c00036fc:	eb 0a                	jmp    c0003708 <create_chain+0x132>
c00036fe:	48                   	dec    eax
c00036ff:	0f 85 fc fe ff ff    	jne    c0003601 <create_chain+0x2b>
c0003705:	83 c8 ff             	or     eax,0xffffffff
c0003708:	83 c4 1c             	add    esp,0x1c
c000370b:	5b                   	pop    ebx
c000370c:	5e                   	pop    esi
c000370d:	5f                   	pop    edi
c000370e:	5d                   	pop    ebp
c000370f:	c3                   	ret    

c0003710 <remove_chain>:
c0003710:	55                   	push   ebp
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	89 d6                	mov    esi,edx
c0003715:	53                   	push   ebx
c0003716:	83 ec 0c             	sub    esp,0xc
c0003719:	83 fa 01             	cmp    edx,0x1
c000371c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000371e:	76 6a                	jbe    c000378a <remove_chain+0x7a>
c0003720:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003723:	76 65                	jbe    c000378a <remove_chain+0x7a>
c0003725:	85 c9                	test   ecx,ecx
c0003727:	89 c5                	mov    ebp,eax
c0003729:	89 ca                	mov    edx,ecx
c000372b:	74 0e                	je     c000373b <remove_chain+0x2b>
c000372d:	83 c9 ff             	or     ecx,0xffffffff
c0003730:	89 d8                	mov    eax,ebx
c0003732:	e8 4f f2 ff ff       	call   c0002986 <put_fat>
c0003737:	85 c0                	test   eax,eax
c0003739:	75 5b                	jne    c0003796 <remove_chain+0x86>
c000373b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000373e:	89 f2                	mov    edx,esi
c0003740:	e8 c4 fc ff ff       	call   c0003409 <get_fat.isra.2>
c0003745:	85 c0                	test   eax,eax
c0003747:	89 c7                	mov    edi,eax
c0003749:	75 04                	jne    c000374f <remove_chain+0x3f>
c000374b:	31 c0                	xor    eax,eax
c000374d:	eb 47                	jmp    c0003796 <remove_chain+0x86>
c000374f:	83 f8 01             	cmp    eax,0x1
c0003752:	74 36                	je     c000378a <remove_chain+0x7a>
c0003754:	83 f8 ff             	cmp    eax,0xffffffff
c0003757:	74 38                	je     c0003791 <remove_chain+0x81>
c0003759:	31 c9                	xor    ecx,ecx
c000375b:	89 f2                	mov    edx,esi
c000375d:	89 d8                	mov    eax,ebx
c000375f:	e8 22 f2 ff ff       	call   c0002986 <put_fat>
c0003764:	85 c0                	test   eax,eax
c0003766:	75 2e                	jne    c0003796 <remove_chain+0x86>
c0003768:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000376b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000376e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003771:	39 c8                	cmp    eax,ecx
c0003773:	73 0d                	jae    c0003782 <remove_chain+0x72>
c0003775:	40                   	inc    eax
c0003776:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003779:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000377c:	83 c8 01             	or     eax,0x1
c000377f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003782:	39 fa                	cmp    edx,edi
c0003784:	89 fe                	mov    esi,edi
c0003786:	77 b3                	ja     c000373b <remove_chain+0x2b>
c0003788:	eb c1                	jmp    c000374b <remove_chain+0x3b>
c000378a:	b8 02 00 00 00       	mov    eax,0x2
c000378f:	eb 05                	jmp    c0003796 <remove_chain+0x86>
c0003791:	b8 01 00 00 00       	mov    eax,0x1
c0003796:	83 c4 0c             	add    esp,0xc
c0003799:	5b                   	pop    ebx
c000379a:	5e                   	pop    esi
c000379b:	5f                   	pop    edi
c000379c:	5d                   	pop    ebp
c000379d:	c3                   	ret    

c000379e <dir_next>:
c000379e:	55                   	push   ebp
c000379f:	57                   	push   edi
c00037a0:	56                   	push   esi
c00037a1:	53                   	push   ebx
c00037a2:	83 ec 1c             	sub    esp,0x1c
c00037a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037aa:	83 c7 20             	add    edi,0x20
c00037ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037b3:	76 07                	jbe    c00037bc <dir_next+0x1e>
c00037b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037bf:	b9 04 00 00 00       	mov    ecx,0x4
c00037c4:	85 f6                	test   esi,esi
c00037c6:	0f 84 cd 00 00 00    	je     c0003899 <dir_next+0xfb>
c00037cc:	89 c3                	mov    ebx,eax
c00037ce:	89 f8                	mov    eax,edi
c00037d0:	25 ff 01 00 00       	and    eax,0x1ff
c00037d5:	89 d1                	mov    ecx,edx
c00037d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037db:	0f 85 a8 00 00 00    	jne    c0003889 <dir_next+0xeb>
c00037e1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037e4:	46                   	inc    esi
c00037e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e8:	85 d2                	test   edx,edx
c00037ea:	75 22                	jne    c000380e <dir_next+0x70>
c00037ec:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037f0:	89 fa                	mov    edx,edi
c00037f2:	c1 ea 05             	shr    edx,0x5
c00037f5:	39 c2                	cmp    edx,eax
c00037f7:	0f 82 8c 00 00 00    	jb     c0003889 <dir_next+0xeb>
c00037fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003804:	b9 04 00 00 00       	mov    ecx,0x4
c0003809:	e9 8b 00 00 00       	jmp    c0003899 <dir_next+0xfb>
c000380e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003812:	89 fe                	mov    esi,edi
c0003814:	c1 ee 09             	shr    esi,0x9
c0003817:	48                   	dec    eax
c0003818:	85 f0                	test   eax,esi
c000381a:	75 6d                	jne    c0003889 <dir_next+0xeb>
c000381c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003820:	89 e8                	mov    eax,ebp
c0003822:	e8 e2 fb ff ff       	call   c0003409 <get_fat.isra.2>
c0003827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000382b:	83 f8 01             	cmp    eax,0x1
c000382e:	89 c6                	mov    esi,eax
c0003830:	77 07                	ja     c0003839 <dir_next+0x9b>
c0003832:	b9 02 00 00 00       	mov    ecx,0x2
c0003837:	eb 60                	jmp    c0003899 <dir_next+0xfb>
c0003839:	83 f8 ff             	cmp    eax,0xffffffff
c000383c:	75 07                	jne    c0003845 <dir_next+0xa7>
c000383e:	b9 01 00 00 00       	mov    ecx,0x1
c0003843:	eb 54                	jmp    c0003899 <dir_next+0xfb>
c0003845:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003848:	77 30                	ja     c000387a <dir_next+0xdc>
c000384a:	85 c9                	test   ecx,ecx
c000384c:	74 af                	je     c00037fd <dir_next+0x5f>
c000384e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003851:	89 d8                	mov    eax,ebx
c0003853:	e8 7e fd ff ff       	call   c00035d6 <create_chain>
c0003858:	b9 07 00 00 00       	mov    ecx,0x7
c000385d:	85 c0                	test   eax,eax
c000385f:	89 c6                	mov    esi,eax
c0003861:	74 36                	je     c0003899 <dir_next+0xfb>
c0003863:	83 f8 01             	cmp    eax,0x1
c0003866:	74 ca                	je     c0003832 <dir_next+0x94>
c0003868:	83 f8 ff             	cmp    eax,0xffffffff
c000386b:	74 d1                	je     c000383e <dir_next+0xa0>
c000386d:	89 c2                	mov    edx,eax
c000386f:	89 e8                	mov    eax,ebp
c0003871:	e8 67 f2 ff ff       	call   c0002add <dir_clear>
c0003876:	85 c0                	test   eax,eax
c0003878:	75 c4                	jne    c000383e <dir_next+0xa0>
c000387a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000387d:	89 f2                	mov    edx,esi
c000387f:	89 e8                	mov    eax,ebp
c0003881:	e8 97 e9 ff ff       	call   c000221d <clst2sect>
c0003886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003889:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000388c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003890:	31 c9                	xor    ecx,ecx
c0003892:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003896:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003899:	83 c4 1c             	add    esp,0x1c
c000389c:	89 c8                	mov    eax,ecx
c000389e:	5b                   	pop    ebx
c000389f:	5e                   	pop    esi
c00038a0:	5f                   	pop    edi
c00038a1:	5d                   	pop    ebp
c00038a2:	c3                   	ret    

c00038a3 <dir_alloc>:
c00038a3:	55                   	push   ebp
c00038a4:	89 c5                	mov    ebp,eax
c00038a6:	57                   	push   edi
c00038a7:	89 d7                	mov    edi,edx
c00038a9:	56                   	push   esi
c00038aa:	31 d2                	xor    edx,edx
c00038ac:	53                   	push   ebx
c00038ad:	83 ec 0c             	sub    esp,0xc
c00038b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b2:	e8 57 fc ff ff       	call   c000350e <dir_sdi>
c00038b7:	85 c0                	test   eax,eax
c00038b9:	75 3b                	jne    c00038f6 <dir_alloc+0x53>
c00038bb:	31 db                	xor    ebx,ebx
c00038bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038c0:	89 f0                	mov    eax,esi
c00038c2:	e8 65 ec ff ff       	call   c000252c <move_window>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	75 2b                	jne    c00038f6 <dir_alloc+0x53>
c00038cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038ce:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038d1:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d7:	74 04                	je     c00038dd <dir_alloc+0x3a>
c00038d9:	85 d2                	test   edx,edx
c00038db:	75 07                	jne    c00038e4 <dir_alloc+0x41>
c00038dd:	43                   	inc    ebx
c00038de:	39 fb                	cmp    ebx,edi
c00038e0:	75 04                	jne    c00038e6 <dir_alloc+0x43>
c00038e2:	eb 1c                	jmp    c0003900 <dir_alloc+0x5d>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	ba 01 00 00 00       	mov    edx,0x1
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 ac fe ff ff       	call   c000379e <dir_next>
c00038f2:	85 c0                	test   eax,eax
c00038f4:	74 c7                	je     c00038bd <dir_alloc+0x1a>
c00038f6:	83 f8 04             	cmp    eax,0x4
c00038f9:	75 05                	jne    c0003900 <dir_alloc+0x5d>
c00038fb:	b8 07 00 00 00       	mov    eax,0x7
c0003900:	83 c4 0c             	add    esp,0xc
c0003903:	5b                   	pop    ebx
c0003904:	5e                   	pop    esi
c0003905:	5f                   	pop    edi
c0003906:	5d                   	pop    ebp
c0003907:	c3                   	ret    

c0003908 <dir_read>:
c0003908:	55                   	push   ebp
c0003909:	57                   	push   edi
c000390a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000390f:	56                   	push   esi
c0003910:	be 04 00 00 00       	mov    esi,0x4
c0003915:	53                   	push   ebx
c0003916:	89 c3                	mov    ebx,eax
c0003918:	83 ec 1c             	sub    esp,0x1c
c000391b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000391f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003921:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003926:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003929:	85 d2                	test   edx,edx
c000392b:	0f 84 e3 00 00 00    	je     c0003a14 <dir_read+0x10c>
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 f4 eb ff ff       	call   c000252c <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 dd 00 00 00    	jne    c0003a1f <dir_read+0x117>
c0003942:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003945:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003948:	88 04 24             	mov    BYTE PTR [esp],al
c000394b:	85 c0                	test   eax,eax
c000394d:	0f 84 c7 00 00 00    	je     c0003a1a <dir_read+0x112>
c0003953:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003956:	83 e1 3f             	and    ecx,0x3f
c0003959:	3d e5 00 00 00       	cmp    eax,0xe5
c000395e:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003961:	0f 84 93 00 00 00    	je     c00039fa <dir_read+0xf2>
c0003967:	83 f8 2e             	cmp    eax,0x2e
c000396a:	0f 84 8a 00 00 00    	je     c00039fa <dir_read+0xf2>
c0003970:	0f b6 c9             	movzx  ecx,cl
c0003973:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003977:	83 e1 df             	and    ecx,0xffffffdf
c000397a:	83 f9 08             	cmp    ecx,0x8
c000397d:	0f 94 c1             	sete   cl
c0003980:	0f b6 c9             	movzx  ecx,cl
c0003983:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003987:	75 71                	jne    c00039fa <dir_read+0xf2>
c0003989:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000398e:	75 4a                	jne    c00039da <dir_read+0xd2>
c0003990:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003994:	74 16                	je     c00039ac <dir_read+0xa4>
c0003996:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003999:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039a0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039a7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039aa:	eb 0e                	jmp    c00039ba <dir_read+0xb2>
c00039ac:	89 f9                	mov    ecx,edi
c00039ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b3:	0f b6 c9             	movzx  ecx,cl
c00039b6:	39 c1                	cmp    ecx,eax
c00039b8:	75 45                	jne    c00039ff <dir_read+0xf7>
c00039ba:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039be:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c3:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039c6:	75 37                	jne    c00039ff <dir_read+0xf7>
c00039c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039cb:	e8 6a e8 ff ff       	call   c000223a <pick_lfn>
c00039d0:	85 c0                	test   eax,eax
c00039d2:	74 2b                	je     c00039ff <dir_read+0xf7>
c00039d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039d7:	4f                   	dec    edi
c00039d8:	eb 25                	jmp    c00039ff <dir_read+0xf7>
c00039da:	89 f8                	mov    eax,edi
c00039dc:	84 c0                	test   al,al
c00039de:	75 11                	jne    c00039f1 <dir_read+0xe9>
c00039e0:	89 d0                	mov    eax,edx
c00039e2:	e8 30 ea ff ff       	call   c0002417 <sum_sfn>
c00039e7:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039eb:	75 04                	jne    c00039f1 <dir_read+0xe9>
c00039ed:	31 f6                	xor    esi,esi
c00039ef:	eb 35                	jmp    c0003a26 <dir_read+0x11e>
c00039f1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f8:	eb 2c                	jmp    c0003a26 <dir_read+0x11e>
c00039fa:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ff:	31 d2                	xor    edx,edx
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 96 fd ff ff       	call   c000379e <dir_next>
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	89 c6                	mov    esi,eax
c0003a0c:	0f 84 14 ff ff ff    	je     c0003926 <dir_read+0x1e>
c0003a12:	eb 0b                	jmp    c0003a1f <dir_read+0x117>
c0003a14:	85 f6                	test   esi,esi
c0003a16:	74 d5                	je     c00039ed <dir_read+0xe5>
c0003a18:	eb 05                	jmp    c0003a1f <dir_read+0x117>
c0003a1a:	be 04 00 00 00       	mov    esi,0x4
c0003a1f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a26:	83 c4 1c             	add    esp,0x1c
c0003a29:	89 f0                	mov    eax,esi
c0003a2b:	5b                   	pop    ebx
c0003a2c:	5e                   	pop    esi
c0003a2d:	5f                   	pop    edi
c0003a2e:	5d                   	pop    ebp
c0003a2f:	c3                   	ret    

c0003a30 <dir_remove>:
c0003a30:	57                   	push   edi
c0003a31:	56                   	push   esi
c0003a32:	53                   	push   ebx
c0003a33:	89 c3                	mov    ebx,eax
c0003a35:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a3d:	83 fa ff             	cmp    edx,0xffffffff
c0003a40:	74 09                	je     c0003a4b <dir_remove+0x1b>
c0003a42:	e8 c7 fa ff ff       	call   c000350e <dir_sdi>
c0003a47:	85 c0                	test   eax,eax
c0003a49:	75 34                	jne    c0003a7f <dir_remove+0x4f>
c0003a4b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d7 ea ff ff       	call   c000252c <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 1c                	jne    c0003a75 <dir_remove+0x45>
c0003a59:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a5c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a63:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a66:	73 17                	jae    c0003a7f <dir_remove+0x4f>
c0003a68:	31 d2                	xor    edx,edx
c0003a6a:	89 d8                	mov    eax,ebx
c0003a6c:	e8 2d fd ff ff       	call   c000379e <dir_next>
c0003a71:	85 c0                	test   eax,eax
c0003a73:	74 d6                	je     c0003a4b <dir_remove+0x1b>
c0003a75:	83 f8 04             	cmp    eax,0x4
c0003a78:	75 05                	jne    c0003a7f <dir_remove+0x4f>
c0003a7a:	b8 02 00 00 00       	mov    eax,0x2
c0003a7f:	5b                   	pop    ebx
c0003a80:	5e                   	pop    esi
c0003a81:	5f                   	pop    edi
c0003a82:	c3                   	ret    

c0003a83 <dir_find>:
c0003a83:	55                   	push   ebp
c0003a84:	31 d2                	xor    edx,edx
c0003a86:	57                   	push   edi
c0003a87:	56                   	push   esi
c0003a88:	53                   	push   ebx
c0003a89:	89 c3                	mov    ebx,eax
c0003a8b:	83 ec 1c             	sub    esp,0x1c
c0003a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 73 fa ff ff       	call   c000350e <dir_sdi>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	89 c6                	mov    esi,eax
c0003a9f:	0f 85 22 01 00 00    	jne    c0003bc7 <dir_find+0x144>
c0003aa5:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aac:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ab1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003ab6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003abd:	e8 6a ea ff ff       	call   c000252c <move_window>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	89 c6                	mov    esi,eax
c0003ac6:	0f 85 fb 00 00 00    	jne    c0003bc7 <dir_find+0x144>
c0003acc:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003acf:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003ad2:	85 d2                	test   edx,edx
c0003ad4:	89 d1                	mov    ecx,edx
c0003ad6:	0f 84 e6 00 00 00    	je     c0003bc2 <dir_find+0x13f>
c0003adc:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003adf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003ae3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ae7:	83 e0 3f             	and    eax,0x3f
c0003aea:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003af0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003af3:	0f 84 a8 00 00 00    	je     c0003ba1 <dir_find+0x11e>
c0003af9:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003afe:	0f b6 c0             	movzx  eax,al
c0003b01:	74 0b                	je     c0003b0e <dir_find+0x8b>
c0003b03:	83 f8 0f             	cmp    eax,0xf
c0003b06:	0f 85 95 00 00 00    	jne    c0003ba1 <dir_find+0x11e>
c0003b0c:	eb 05                	jmp    c0003b13 <dir_find+0x90>
c0003b0e:	83 f8 0f             	cmp    eax,0xf
c0003b11:	75 62                	jne    c0003b75 <dir_find+0xf2>
c0003b13:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b17:	0f 85 90 00 00 00    	jne    c0003bad <dir_find+0x12a>
c0003b1d:	f6 c1 40             	test   cl,0x40
c0003b20:	74 15                	je     c0003b37 <dir_find+0xb4>
c0003b22:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b25:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b2b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b32:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b35:	eb 11                	jmp    c0003b48 <dir_find+0xc5>
c0003b37:	89 e8                	mov    eax,ebp
c0003b39:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b3e:	0f b6 d0             	movzx  edx,al
c0003b41:	0f b6 c1             	movzx  eax,cl
c0003b44:	39 c2                	cmp    edx,eax
c0003b46:	75 65                	jne    c0003bad <dir_find+0x12a>
c0003b48:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b4c:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b51:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b54:	75 57                	jne    c0003bad <dir_find+0x12a>
c0003b56:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b5e:	89 fa                	mov    edx,edi
c0003b60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b63:	e8 2c f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b68:	85 c0                	test   eax,eax
c0003b6a:	74 41                	je     c0003bad <dir_find+0x12a>
c0003b6c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b70:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b73:	eb 38                	jmp    c0003bad <dir_find+0x12a>
c0003b75:	89 e8                	mov    eax,ebp
c0003b77:	84 c0                	test   al,al
c0003b79:	75 0d                	jne    c0003b88 <dir_find+0x105>
c0003b7b:	89 f8                	mov    eax,edi
c0003b7d:	e8 95 e8 ff ff       	call   c0002417 <sum_sfn>
c0003b82:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b86:	74 3f                	je     c0003bc7 <dir_find+0x144>
c0003b88:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b8c:	75 13                	jne    c0003ba1 <dir_find+0x11e>
c0003b8e:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b91:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b96:	89 f8                	mov    eax,edi
c0003b98:	e8 75 e4 ff ff       	call   c0002012 <mem_cmp>
c0003b9d:	85 c0                	test   eax,eax
c0003b9f:	74 26                	je     c0003bc7 <dir_find+0x144>
c0003ba1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ba8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bad:	31 d2                	xor    edx,edx
c0003baf:	89 d8                	mov    eax,ebx
c0003bb1:	e8 e8 fb ff ff       	call   c000379e <dir_next>
c0003bb6:	85 c0                	test   eax,eax
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	0f 84 f6 fe ff ff    	je     c0003ab6 <dir_find+0x33>
c0003bc0:	eb 05                	jmp    c0003bc7 <dir_find+0x144>
c0003bc2:	be 04 00 00 00       	mov    esi,0x4
c0003bc7:	83 c4 1c             	add    esp,0x1c
c0003bca:	89 f0                	mov    eax,esi
c0003bcc:	5b                   	pop    ebx
c0003bcd:	5e                   	pop    esi
c0003bce:	5f                   	pop    edi
c0003bcf:	5d                   	pop    ebp
c0003bd0:	c3                   	ret    

c0003bd1 <follow_path>:
c0003bd1:	56                   	push   esi
c0003bd2:	53                   	push   ebx
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 ec 14             	sub    esp,0x14
c0003bd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bdc:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003be2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003be5:	83 fa 2f             	cmp    edx,0x2f
c0003be8:	75 07                	jne    c0003bf1 <follow_path+0x20>
c0003bea:	40                   	inc    eax
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	eb ed                	jmp    c0003bde <follow_path+0xd>
c0003bf1:	83 fa 5c             	cmp    edx,0x5c
c0003bf4:	74 f4                	je     c0003bea <follow_path+0x19>
c0003bf6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bfd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c00:	77 3e                	ja     c0003c40 <follow_path+0x6f>
c0003c02:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c06:	31 d2                	xor    edx,edx
c0003c08:	89 d8                	mov    eax,ebx
c0003c0a:	e8 ff f8 ff ff       	call   c000350e <dir_sdi>
c0003c0f:	eb 57                	jmp    c0003c68 <follow_path+0x97>
c0003c11:	89 d8                	mov    eax,ebx
c0003c13:	e8 6b fe ff ff       	call   c0003a83 <dir_find>
c0003c18:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c1b:	85 c0                	test   eax,eax
c0003c1d:	75 32                	jne    c0003c51 <follow_path+0x80>
c0003c1f:	80 e2 04             	and    dl,0x4
c0003c22:	75 44                	jne    c0003c68 <follow_path+0x97>
c0003c24:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c28:	74 39                	je     c0003c63 <follow_path+0x92>
c0003c2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c2d:	25 ff 01 00 00       	and    eax,0x1ff
c0003c32:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c36:	8a 06                	mov    al,BYTE PTR [esi]
c0003c38:	e8 7b f7 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0003c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c44:	89 d8                	mov    eax,ebx
c0003c46:	e8 8e ef ff ff       	call   c0002bd9 <create_name>
c0003c4b:	85 c0                	test   eax,eax
c0003c4d:	74 c2                	je     c0003c11 <follow_path+0x40>
c0003c4f:	eb 17                	jmp    c0003c68 <follow_path+0x97>
c0003c51:	83 f8 04             	cmp    eax,0x4
c0003c54:	75 12                	jne    c0003c68 <follow_path+0x97>
c0003c56:	80 e2 04             	and    dl,0x4
c0003c59:	ba 05 00 00 00       	mov    edx,0x5
c0003c5e:	0f 44 c2             	cmove  eax,edx
c0003c61:	eb 05                	jmp    c0003c68 <follow_path+0x97>
c0003c63:	b8 05 00 00 00       	mov    eax,0x5
c0003c68:	83 c4 14             	add    esp,0x14
c0003c6b:	5b                   	pop    ebx
c0003c6c:	5e                   	pop    esi
c0003c6d:	c3                   	ret    

c0003c6e <dir_register>:
c0003c6e:	55                   	push   ebp
c0003c6f:	57                   	push   edi
c0003c70:	56                   	push   esi
c0003c71:	be 06 00 00 00       	mov    esi,0x6
c0003c76:	53                   	push   ebx
c0003c77:	83 ec 2c             	sub    esp,0x2c
c0003c7a:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c7d:	80 e2 a0             	and    dl,0xa0
c0003c80:	0f 85 66 01 00 00    	jne    c0003dec <dir_register+0x17e>
c0003c86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c8e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c90:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c97:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c9c:	74 06                	je     c0003ca4 <dir_register+0x36>
c0003c9e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ca2:	eb ef                	jmp    c0003c93 <dir_register+0x25>
c0003ca4:	89 c3                	mov    ebx,eax
c0003ca6:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cab:	8d 40 20             	lea    eax,[eax+0x20]
c0003cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cb2:	89 c2                	mov    edx,eax
c0003cb4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003cb8:	e8 36 e3 ff ff       	call   c0001ff3 <mem_cpy>
c0003cbd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cc2:	74 48                	je     c0003d0c <dir_register+0x9e>
c0003cc4:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cc8:	bd 01 00 00 00       	mov    ebp,0x1
c0003ccd:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cd0:	55                   	push   ebp
c0003cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cd5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cd9:	e8 77 e6 ff ff       	call   c0002355 <gen_numname>
c0003cde:	58                   	pop    eax
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	e8 9d fd ff ff       	call   c0003a83 <dir_find>
c0003ce6:	85 c0                	test   eax,eax
c0003ce8:	89 c6                	mov    esi,eax
c0003cea:	75 10                	jne    c0003cfc <dir_register+0x8e>
c0003cec:	45                   	inc    ebp
c0003ced:	83 fd 64             	cmp    ebp,0x64
c0003cf0:	75 db                	jne    c0003ccd <dir_register+0x5f>
c0003cf2:	be 07 00 00 00       	mov    esi,0x7
c0003cf7:	e9 f0 00 00 00       	jmp    c0003dec <dir_register+0x17e>
c0003cfc:	83 f8 04             	cmp    eax,0x4
c0003cff:	0f 85 e7 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d05:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d09:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d0c:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d11:	bd 01 00 00 00       	mov    ebp,0x1
c0003d16:	74 13                	je     c0003d2b <dir_register+0xbd>
c0003d18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d1c:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d21:	31 d2                	xor    edx,edx
c0003d23:	83 c0 0c             	add    eax,0xc
c0003d26:	f7 f1                	div    ecx
c0003d28:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d2b:	89 ea                	mov    edx,ebp
c0003d2d:	89 d8                	mov    eax,ebx
c0003d2f:	e8 6f fb ff ff       	call   c00038a3 <dir_alloc>
c0003d34:	85 c0                	test   eax,eax
c0003d36:	89 c6                	mov    esi,eax
c0003d38:	0f 85 ae 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d3e:	4d                   	dec    ebp
c0003d3f:	74 6b                	je     c0003dac <dir_register+0x13e>
c0003d41:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d44:	89 e8                	mov    eax,ebp
c0003d46:	c1 e0 05             	shl    eax,0x5
c0003d49:	29 c2                	sub    edx,eax
c0003d4b:	89 d8                	mov    eax,ebx
c0003d4d:	e8 bc f7 ff ff       	call   c000350e <dir_sdi>
c0003d52:	85 c0                	test   eax,eax
c0003d54:	89 c6                	mov    esi,eax
c0003d56:	0f 85 90 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d60:	e8 b2 e6 ff ff       	call   c0002417 <sum_sfn>
c0003d65:	0f b6 c0             	movzx  eax,al
c0003d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d6c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d6f:	89 f8                	mov    eax,edi
c0003d71:	e8 b6 e7 ff ff       	call   c000252c <move_window>
c0003d76:	85 c0                	test   eax,eax
c0003d78:	89 c6                	mov    esi,eax
c0003d7a:	75 70                	jne    c0003dec <dir_register+0x17e>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	89 e8                	mov    eax,ebp
c0003d81:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d84:	0f b6 c8             	movzx  ecx,al
c0003d87:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003d8e:	e8 27 e5 ff ff       	call   c00022ba <put_lfn>
c0003d93:	31 d2                	xor    edx,edx
c0003d95:	89 d8                	mov    eax,ebx
c0003d97:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d9b:	e8 fe f9 ff ff       	call   c000379e <dir_next>
c0003da0:	83 c4 10             	add    esp,0x10
c0003da3:	85 c0                	test   eax,eax
c0003da5:	89 c6                	mov    esi,eax
c0003da7:	75 43                	jne    c0003dec <dir_register+0x17e>
c0003da9:	4d                   	dec    ebp
c0003daa:	75 c0                	jne    c0003d6c <dir_register+0xfe>
c0003dac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003daf:	89 f8                	mov    eax,edi
c0003db1:	e8 76 e7 ff ff       	call   c000252c <move_window>
c0003db6:	85 c0                	test   eax,eax
c0003db8:	89 c6                	mov    esi,eax
c0003dba:	75 30                	jne    c0003dec <dir_register+0x17e>
c0003dbc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003dbf:	b9 20 00 00 00       	mov    ecx,0x20
c0003dc4:	31 d2                	xor    edx,edx
c0003dc6:	e8 3d e2 ff ff       	call   c0002008 <mem_set>
c0003dcb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd7:	e8 17 e2 ff ff       	call   c0001ff3 <mem_cpy>
c0003ddc:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ddf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003de2:	83 e0 18             	and    eax,0x18
c0003de5:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003de8:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dec:	83 c4 2c             	add    esp,0x2c
c0003def:	89 f0                	mov    eax,esi
c0003df1:	5b                   	pop    ebx
c0003df2:	5e                   	pop    esi
c0003df3:	5f                   	pop    edi
c0003df4:	5d                   	pop    ebp
c0003df5:	c3                   	ret    

c0003df6 <f_mount>:
c0003df6:	53                   	push   ebx
c0003df7:	83 ec 18             	sub    esp,0x18
c0003dfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003dfe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e0a:	e8 28 e6 ff ff       	call   c0002437 <get_ldnumber>
c0003e0f:	89 c2                	mov    edx,eax
c0003e11:	b8 0b 00 00 00       	mov    eax,0xb
c0003e16:	85 d2                	test   edx,edx
c0003e18:	78 39                	js     c0003e53 <f_mount+0x5d>
c0003e1a:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003e21:	85 c0                	test   eax,eax
c0003e23:	74 03                	je     c0003e28 <f_mount+0x32>
c0003e25:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e2c:	85 c0                	test   eax,eax
c0003e2e:	74 03                	je     c0003e33 <f_mount+0x3d>
c0003e30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e37:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003e3e:	31 c0                	xor    eax,eax
c0003e40:	84 db                	test   bl,bl
c0003e42:	74 0f                	je     c0003e53 <f_mount+0x5d>
c0003e44:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e48:	31 c9                	xor    ecx,ecx
c0003e4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e4e:	e8 36 e8 ff ff       	call   c0002689 <mount_volume>
c0003e53:	83 c4 18             	add    esp,0x18
c0003e56:	5b                   	pop    ebx
c0003e57:	c3                   	ret    

c0003e58 <f_open>:
c0003e58:	55                   	push   ebp
c0003e59:	b8 09 00 00 00       	mov    eax,0x9
c0003e5e:	57                   	push   edi
c0003e5f:	56                   	push   esi
c0003e60:	53                   	push   ebx
c0003e61:	83 ec 5c             	sub    esp,0x5c
c0003e64:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e68:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e6c:	85 db                	test   ebx,ebx
c0003e6e:	0f 84 9f 02 00 00    	je     c0004113 <f_open+0x2bb>
c0003e74:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e78:	89 fd                	mov    ebp,edi
c0003e7a:	83 e5 3f             	and    ebp,0x3f
c0003e7d:	89 e8                	mov    eax,ebp
c0003e7f:	89 ee                	mov    esi,ebp
c0003e81:	0f b6 c8             	movzx  ecx,al
c0003e84:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e88:	e8 fc e7 ff ff       	call   c0002689 <mount_volume>
c0003e8d:	85 c0                	test   eax,eax
c0003e8f:	0f 85 78 02 00 00    	jne    c000410d <f_open+0x2b5>
c0003e95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e99:	83 ec 0c             	sub    esp,0xc
c0003e9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ea0:	68 00 02 00 00       	push   0x200
c0003ea5:	e8 62 1f 00 00       	call   c0005e0c <ff_memalloc>
c0003eaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003eae:	83 c4 10             	add    esp,0x10
c0003eb1:	b8 11 00 00 00       	mov    eax,0x11
c0003eb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ebb:	0f 84 52 02 00 00    	je     c0004113 <f_open+0x2bb>
c0003ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ec9:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ecd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ed0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ed4:	e8 f8 fc ff ff       	call   c0003bd1 <follow_path>
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	75 0d                	jne    c0003eea <f_open+0x92>
c0003edd:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ee2:	ba 06 00 00 00       	mov    edx,0x6
c0003ee7:	0f 45 c2             	cmovne eax,edx
c0003eea:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ef0:	0f 84 d5 00 00 00    	je     c0003fcb <f_open+0x173>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	74 21                	je     c0003f1b <f_open+0xc3>
c0003efa:	83 f8 04             	cmp    eax,0x4
c0003efd:	0f 85 ef 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f03:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f07:	e8 62 fd ff ff       	call   c0003c6e <dir_register>
c0003f0c:	85 c0                	test   eax,eax
c0003f0e:	0f 85 de 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f14:	83 cd 08             	or     ebp,0x8
c0003f17:	89 ee                	mov    esi,ebp
c0003f19:	eb 2c                	jmp    c0003f47 <f_open+0xef>
c0003f1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f1f:	b8 07 00 00 00       	mov    eax,0x7
c0003f24:	80 e2 11             	and    dl,0x11
c0003f27:	0f 85 c5 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f2d:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f33:	b8 08 00 00 00       	mov    eax,0x8
c0003f38:	0f 85 b4 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f3e:	83 e7 08             	and    edi,0x8
c0003f41:	0f 84 b1 00 00 00    	je     c0003ff8 <f_open+0x1a0>
c0003f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f4f:	8a 00                	mov    al,BYTE PTR [eax]
c0003f51:	89 ea                	mov    edx,ebp
c0003f53:	e8 60 f4 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0003f58:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f5d:	89 c7                	mov    edi,eax
c0003f5f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f62:	e8 89 e0 ff ff       	call   c0001ff0 <st_dword>
c0003f67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6b:	31 c9                	xor    ecx,ecx
c0003f6d:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f75:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f79:	e8 63 f4 ff ff       	call   c00033e1 <st_clust.isra.1>
c0003f7e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f82:	31 d2                	xor    edx,edx
c0003f84:	83 c0 1c             	add    eax,0x1c
c0003f87:	e8 64 e0 ff ff       	call   c0001ff0 <st_dword>
c0003f8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f90:	85 ff                	test   edi,edi
c0003f92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f96:	74 60                	je     c0003ff8 <f_open+0x1a0>
c0003f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9c:	31 c9                	xor    ecx,ecx
c0003f9e:	89 fa                	mov    edx,edi
c0003fa0:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fa3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fa7:	e8 64 f7 ff ff       	call   c0003710 <remove_chain>
c0003fac:	85 c0                	test   eax,eax
c0003fae:	0f 85 3e 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb8:	89 ea                	mov    edx,ebp
c0003fba:	4f                   	dec    edi
c0003fbb:	e8 6c e5 ff ff       	call   c000252c <move_window>
c0003fc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fc4:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fc7:	85 c0                	test   eax,eax
c0003fc9:	eb 27                	jmp    c0003ff2 <f_open+0x19a>
c0003fcb:	85 c0                	test   eax,eax
c0003fcd:	0f 85 1f 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fd3:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fd7:	b8 04 00 00 00       	mov    eax,0x4
c0003fdc:	f6 c2 10             	test   dl,0x10
c0003fdf:	0f 85 0d 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fe5:	83 e7 02             	and    edi,0x2
c0003fe8:	74 0e                	je     c0003ff8 <f_open+0x1a0>
c0003fea:	b8 07 00 00 00       	mov    eax,0x7
c0003fef:	80 e2 01             	and    dl,0x1
c0003ff2:	0f 85 fa 00 00 00    	jne    c00040f2 <f_open+0x29a>
c0003ff8:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ffe:	74 03                	je     c0004003 <f_open+0x1ab>
c0004000:	83 ce 40             	or     esi,0x40
c0004003:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004007:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000400b:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000400e:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004011:	89 fa                	mov    edx,edi
c0004013:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004016:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004019:	e8 9a f3 ff ff       	call   c00033b8 <ld_clust.isra.0>
c000401e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004021:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004024:	e8 ab df ff ff       	call   c0001fd4 <ld_dword>
c0004029:	8d 7b 28             	lea    edi,[ebx+0x28]
c000402c:	31 d2                	xor    edx,edx
c000402e:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004030:	b9 00 02 00 00       	mov    ecx,0x200
c0004035:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004038:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c000403c:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004040:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004047:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000404e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004052:	89 f0                	mov    eax,esi
c0004054:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004057:	89 f8                	mov    eax,edi
c0004059:	e8 aa df ff ff       	call   c0002008 <mem_set>
c000405e:	83 e6 20             	and    esi,0x20
c0004061:	75 07                	jne    c000406a <f_open+0x212>
c0004063:	31 c0                	xor    eax,eax
c0004065:	e9 88 00 00 00       	jmp    c00040f2 <f_open+0x29a>
c000406a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000406d:	85 f6                	test   esi,esi
c000406f:	74 f2                	je     c0004063 <f_open+0x20b>
c0004071:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004078:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000407b:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000407f:	31 c0                	xor    eax,eax
c0004081:	c1 e5 09             	shl    ebp,0x9
c0004084:	85 c0                	test   eax,eax
c0004086:	75 23                	jne    c00040ab <f_open+0x253>
c0004088:	39 ee                	cmp    esi,ebp
c000408a:	76 1f                	jbe    c00040ab <f_open+0x253>
c000408c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000408e:	e8 76 f3 ff ff       	call   c0003409 <get_fat.isra.2>
c0004093:	89 c2                	mov    edx,eax
c0004095:	b8 02 00 00 00       	mov    eax,0x2
c000409a:	83 fa 01             	cmp    edx,0x1
c000409d:	76 08                	jbe    c00040a7 <f_open+0x24f>
c000409f:	31 c0                	xor    eax,eax
c00040a1:	83 fa ff             	cmp    edx,0xffffffff
c00040a4:	0f 94 c0             	sete   al
c00040a7:	29 ee                	sub    esi,ebp
c00040a9:	eb d9                	jmp    c0004084 <f_open+0x22c>
c00040ab:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040ae:	85 c0                	test   eax,eax
c00040b0:	75 40                	jne    c00040f2 <f_open+0x29a>
c00040b2:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040b8:	74 a9                	je     c0004063 <f_open+0x20b>
c00040ba:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040be:	89 e8                	mov    eax,ebp
c00040c0:	e8 58 e1 ff ff       	call   c000221d <clst2sect>
c00040c5:	89 c2                	mov    edx,eax
c00040c7:	b8 02 00 00 00       	mov    eax,0x2
c00040cc:	85 d2                	test   edx,edx
c00040ce:	74 22                	je     c00040f2 <f_open+0x29a>
c00040d0:	c1 ee 09             	shr    esi,0x9
c00040d3:	8d 04 16             	lea    eax,[esi+edx*1]
c00040d6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040d9:	6a 01                	push   0x1
c00040db:	50                   	push   eax
c00040dc:	57                   	push   edi
c00040dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00040e1:	50                   	push   eax
c00040e2:	e8 95 de ff ff       	call   c0001f7c <disk_read>
c00040e7:	83 c4 10             	add    esp,0x10
c00040ea:	85 c0                	test   eax,eax
c00040ec:	0f 95 c0             	setne  al
c00040ef:	0f b6 c0             	movzx  eax,al
c00040f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040f6:	83 ec 0c             	sub    esp,0xc
c00040f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040fd:	e8 22 1d 00 00       	call   c0005e24 <ff_memfree>
c0004102:	83 c4 10             	add    esp,0x10
c0004105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004109:	85 c0                	test   eax,eax
c000410b:	74 06                	je     c0004113 <f_open+0x2bb>
c000410d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004113:	83 c4 5c             	add    esp,0x5c
c0004116:	5b                   	pop    ebx
c0004117:	5e                   	pop    esi
c0004118:	5f                   	pop    edi
c0004119:	5d                   	pop    ebp
c000411a:	c3                   	ret    

c000411b <f_read>:
c000411b:	55                   	push   ebp
c000411c:	57                   	push   edi
c000411d:	56                   	push   esi
c000411e:	53                   	push   ebx
c000411f:	83 ec 2c             	sub    esp,0x2c
c0004122:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004126:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000412a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004138:	89 d8                	mov    eax,ebx
c000413a:	e8 44 e3 ff ff       	call   c0002483 <validate>
c000413f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004143:	85 c0                	test   eax,eax
c0004145:	0f 85 a5 01 00 00    	jne    c00042f0 <f_read+0x1d5>
c000414b:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c000414f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004153:	85 c0                	test   eax,eax
c0004155:	0f 85 95 01 00 00    	jne    c00042f0 <f_read+0x1d5>
c000415b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000415f:	0f 84 83 01 00 00    	je     c00042e8 <f_read+0x1cd>
c0004165:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004168:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000416b:	39 f8                	cmp    eax,edi
c000416d:	0f 46 f8             	cmovbe edi,eax
c0004170:	85 ff                	test   edi,edi
c0004172:	0f 84 78 01 00 00    	je     c00042f0 <f_read+0x1d5>
c0004178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000417b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004180:	0f 85 2b 01 00 00    	jne    c00042b1 <f_read+0x196>
c0004186:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000418a:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000418e:	89 c2                	mov    edx,eax
c0004190:	c1 ea 09             	shr    edx,0x9
c0004193:	4d                   	dec    ebp
c0004194:	21 d5                	and    ebp,edx
c0004196:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000419a:	75 42                	jne    c00041de <f_read+0xc3>
c000419c:	85 c0                	test   eax,eax
c000419e:	75 05                	jne    c00041a5 <f_read+0x8a>
c00041a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041a3:	eb 0a                	jmp    c00041af <f_read+0x94>
c00041a5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041aa:	e8 5a f2 ff ff       	call   c0003409 <get_fat.isra.2>
c00041af:	83 f8 01             	cmp    eax,0x1
c00041b2:	77 11                	ja     c00041c5 <f_read+0xaa>
c00041b4:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041b8:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041c0:	e9 2b 01 00 00       	jmp    c00042f0 <f_read+0x1d5>
c00041c5:	83 f8 ff             	cmp    eax,0xffffffff
c00041c8:	75 11                	jne    c00041db <f_read+0xc0>
c00041ca:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041ce:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041d6:	e9 15 01 00 00       	jmp    c00042f0 <f_read+0x1d5>
c00041db:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041e9:	89 c8                	mov    eax,ecx
c00041eb:	e8 2d e0 ff ff       	call   c000221d <clst2sect>
c00041f0:	85 c0                	test   eax,eax
c00041f2:	74 c0                	je     c00041b4 <f_read+0x99>
c00041f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041f8:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c00041fe:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004205:	76 58                	jbe    c000425f <f_read+0x144>
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	89 fe                	mov    esi,edi
c000420d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004211:	c1 ee 09             	shr    esi,0x9
c0004214:	01 f2                	add    edx,esi
c0004216:	39 c2                	cmp    edx,eax
c0004218:	76 06                	jbe    c0004220 <f_read+0x105>
c000421a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421e:	89 c6                	mov    esi,eax
c0004220:	56                   	push   esi
c0004221:	55                   	push   ebp
c0004222:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004226:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000422a:	50                   	push   eax
c000422b:	e8 4c dd ff ff       	call   c0001f7c <disk_read>
c0004230:	83 c4 10             	add    esp,0x10
c0004233:	85 c0                	test   eax,eax
c0004235:	75 93                	jne    c00041ca <f_read+0xaf>
c0004237:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000423b:	74 1d                	je     c000425a <f_read+0x13f>
c000423d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004240:	29 e8                	sub    eax,ebp
c0004242:	39 f0                	cmp    eax,esi
c0004244:	73 14                	jae    c000425a <f_read+0x13f>
c0004246:	c1 e0 09             	shl    eax,0x9
c0004249:	b9 00 02 00 00       	mov    ecx,0x200
c000424e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004252:	8d 53 28             	lea    edx,[ebx+0x28]
c0004255:	e8 99 dd ff ff       	call   c0001ff3 <mem_cpy>
c000425a:	c1 e6 09             	shl    esi,0x9
c000425d:	eb 75                	jmp    c00042d4 <f_read+0x1b9>
c000425f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004262:	39 e8                	cmp    eax,ebp
c0004264:	74 48                	je     c00042ae <f_read+0x193>
c0004266:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000426a:	8d 73 28             	lea    esi,[ebx+0x28]
c000426d:	74 22                	je     c0004291 <f_read+0x176>
c000426f:	6a 01                	push   0x1
c0004271:	50                   	push   eax
c0004272:	56                   	push   esi
c0004273:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004277:	50                   	push   eax
c0004278:	e8 15 dd ff ff       	call   c0001f92 <disk_write>
c000427d:	83 c4 10             	add    esp,0x10
c0004280:	85 c0                	test   eax,eax
c0004282:	0f 85 42 ff ff ff    	jne    c00041ca <f_read+0xaf>
c0004288:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000428b:	83 e0 7f             	and    eax,0x7f
c000428e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004291:	6a 01                	push   0x1
c0004293:	55                   	push   ebp
c0004294:	56                   	push   esi
c0004295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004299:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000429d:	50                   	push   eax
c000429e:	e8 d9 dc ff ff       	call   c0001f7c <disk_read>
c00042a3:	83 c4 10             	add    esp,0x10
c00042a6:	85 c0                	test   eax,eax
c00042a8:	0f 85 1c ff ff ff    	jne    c00041ca <f_read+0xaf>
c00042ae:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042b4:	be 00 02 00 00       	mov    esi,0x200
c00042b9:	25 ff 01 00 00       	and    eax,0x1ff
c00042be:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042c2:	29 c6                	sub    esi,eax
c00042c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042c8:	39 f7                	cmp    edi,esi
c00042ca:	0f 46 f7             	cmovbe esi,edi
c00042cd:	89 f1                	mov    ecx,esi
c00042cf:	e8 1f dd ff ff       	call   c0001ff3 <mem_cpy>
c00042d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042d8:	29 f7                	sub    edi,esi
c00042da:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00042de:	01 30                	add    DWORD PTR [eax],esi
c00042e0:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00042e3:	e9 88 fe ff ff       	jmp    c0004170 <f_read+0x55>
c00042e8:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c00042f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00042f4:	83 c4 2c             	add    esp,0x2c
c00042f7:	5b                   	pop    ebx
c00042f8:	5e                   	pop    esi
c00042f9:	5f                   	pop    edi
c00042fa:	5d                   	pop    ebp
c00042fb:	c3                   	ret    

c00042fc <f_write>:
c00042fc:	55                   	push   ebp
c00042fd:	57                   	push   edi
c00042fe:	56                   	push   esi
c00042ff:	53                   	push   ebx
c0004300:	83 ec 2c             	sub    esp,0x2c
c0004303:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004307:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000430b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004315:	89 d8                	mov    eax,ebx
c0004317:	e8 67 e1 ff ff       	call   c0002483 <validate>
c000431c:	85 c0                	test   eax,eax
c000431e:	89 c7                	mov    edi,eax
c0004320:	0f 85 13 02 00 00    	jne    c0004539 <f_write+0x23d>
c0004326:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c000432a:	85 ff                	test   edi,edi
c000432c:	0f 85 07 02 00 00    	jne    c0004539 <f_write+0x23d>
c0004332:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004336:	0f 84 f8 01 00 00    	je     c0004534 <f_write+0x238>
c000433c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000433f:	89 c1                	mov    ecx,eax
c0004341:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0004345:	0f 83 ed 00 00 00    	jae    c0004438 <f_write+0x13c>
c000434b:	f7 d0                	not    eax
c000434d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004351:	e9 e2 00 00 00       	jmp    c0004438 <f_write+0x13c>
c0004356:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004359:	a9 ff 01 00 00       	test   eax,0x1ff
c000435e:	0f 85 9b 01 00 00    	jne    c00044ff <f_write+0x203>
c0004364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004368:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000436c:	89 c2                	mov    edx,eax
c000436e:	c1 ea 09             	shr    edx,0x9
c0004371:	4d                   	dec    ebp
c0004372:	21 d5                	and    ebp,edx
c0004374:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004378:	0f 84 c7 00 00 00    	je     c0004445 <f_write+0x149>
c000437e:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004382:	0f 85 23 01 00 00    	jne    c00044ab <f_write+0x1af>
c0004388:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004393:	89 c8                	mov    eax,ecx
c0004395:	e8 83 de ff ff       	call   c000221d <clst2sect>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 84 d3 00 00 00    	je     c0004475 <f_write+0x179>
c00043a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043a6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043ae:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b5:	0f 86 1c 01 00 00    	jbe    c00044d7 <f_write+0x1db>
c00043bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043c3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043c7:	c1 ee 09             	shr    esi,0x9
c00043ca:	01 f2                	add    edx,esi
c00043cc:	39 c2                	cmp    edx,eax
c00043ce:	76 06                	jbe    c00043d6 <f_write+0xda>
c00043d0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043d4:	89 c6                	mov    esi,eax
c00043d6:	56                   	push   esi
c00043d7:	55                   	push   ebp
c00043d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043dc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e0:	50                   	push   eax
c00043e1:	e8 ac db ff ff       	call   c0001f92 <disk_write>
c00043e6:	83 c4 10             	add    esp,0x10
c00043e9:	85 c0                	test   eax,eax
c00043eb:	0f 85 97 00 00 00    	jne    c0004488 <f_write+0x18c>
c00043f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043f4:	29 ea                	sub    edx,ebp
c00043f6:	39 f2                	cmp    edx,esi
c00043f8:	73 1d                	jae    c0004417 <f_write+0x11b>
c00043fa:	c1 e2 09             	shl    edx,0x9
c00043fd:	b9 00 02 00 00       	mov    ecx,0x200
c0004402:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004406:	8d 43 28             	lea    eax,[ebx+0x28]
c0004409:	e8 e5 db ff ff       	call   c0001ff3 <mem_cpy>
c000440e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004411:	83 e0 7f             	and    eax,0x7f
c0004414:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004417:	c1 e6 09             	shl    esi,0x9
c000441a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000441e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004422:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004426:	01 30                	add    DWORD PTR [eax],esi
c0004428:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000442b:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000442e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004431:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004435:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004438:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000443d:	0f 85 13 ff ff ff    	jne    c0004356 <f_write+0x5a>
c0004443:	eb 1d                	jmp    c0004462 <f_write+0x166>
c0004445:	85 c0                	test   eax,eax
c0004447:	75 0b                	jne    c0004454 <f_write+0x158>
c0004449:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000444c:	31 d2                	xor    edx,edx
c000444e:	85 c0                	test   eax,eax
c0004450:	75 1e                	jne    c0004470 <f_write+0x174>
c0004452:	eb 03                	jmp    c0004457 <f_write+0x15b>
c0004454:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004457:	89 d8                	mov    eax,ebx
c0004459:	e8 78 f1 ff ff       	call   c00035d6 <create_chain>
c000445e:	85 c0                	test   eax,eax
c0004460:	75 0e                	jne    c0004470 <f_write+0x174>
c0004462:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004465:	83 c8 40             	or     eax,0x40
c0004468:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000446b:	e9 c9 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004470:	83 f8 01             	cmp    eax,0x1
c0004473:	75 0e                	jne    c0004483 <f_write+0x187>
c0004475:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004479:	bf 02 00 00 00       	mov    edi,0x2
c000447e:	e9 b6 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004483:	83 f8 ff             	cmp    eax,0xffffffff
c0004486:	75 0e                	jne    c0004496 <f_write+0x19a>
c0004488:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000448c:	bf 01 00 00 00       	mov    edi,0x1
c0004491:	e9 a3 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004496:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000449a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000449d:	0f 85 db fe ff ff    	jne    c000437e <f_write+0x82>
c00044a3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044a6:	e9 d3 fe ff ff       	jmp    c000437e <f_write+0x82>
c00044ab:	6a 01                	push   0x1
c00044ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044b0:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b3:	50                   	push   eax
c00044b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044bc:	50                   	push   eax
c00044bd:	e8 d0 da ff ff       	call   c0001f92 <disk_write>
c00044c2:	83 c4 10             	add    esp,0x10
c00044c5:	85 c0                	test   eax,eax
c00044c7:	75 bf                	jne    c0004488 <f_write+0x18c>
c00044c9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044cc:	83 e0 7f             	and    eax,0x7f
c00044cf:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044d2:	e9 b1 fe ff ff       	jmp    c0004388 <f_write+0x8c>
c00044d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00044da:	74 20                	je     c00044fc <f_write+0x200>
c00044dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044df:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044e2:	76 18                	jbe    c00044fc <f_write+0x200>
c00044e4:	6a 01                	push   0x1
c00044e6:	55                   	push   ebp
c00044e7:	8d 43 28             	lea    eax,[ebx+0x28]
c00044ea:	50                   	push   eax
c00044eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044ef:	50                   	push   eax
c00044f0:	e8 87 da ff ff       	call   c0001f7c <disk_read>
c00044f5:	83 c4 10             	add    esp,0x10
c00044f8:	85 c0                	test   eax,eax
c00044fa:	75 8c                	jne    c0004488 <f_write+0x18c>
c00044fc:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00044ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004502:	be 00 02 00 00       	mov    esi,0x200
c0004507:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000450b:	25 ff 01 00 00       	and    eax,0x1ff
c0004510:	29 c6                	sub    esi,eax
c0004512:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0004516:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000451a:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c000451f:	89 f1                	mov    ecx,esi
c0004521:	e8 cd da ff ff       	call   c0001ff3 <mem_cpy>
c0004526:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004529:	83 c8 80             	or     eax,0xffffff80
c000452c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000452f:	e9 e6 fe ff ff       	jmp    c000441a <f_write+0x11e>
c0004534:	bf 07 00 00 00       	mov    edi,0x7
c0004539:	83 c4 2c             	add    esp,0x2c
c000453c:	89 f8                	mov    eax,edi
c000453e:	5b                   	pop    ebx
c000453f:	5e                   	pop    esi
c0004540:	5f                   	pop    edi
c0004541:	5d                   	pop    ebp
c0004542:	c3                   	ret    

c0004543 <f_sync>:
c0004543:	56                   	push   esi
c0004544:	53                   	push   ebx
c0004545:	83 ec 14             	sub    esp,0x14
c0004548:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000454c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004550:	89 d8                	mov    eax,ebx
c0004552:	e8 2c df ff ff       	call   c0002483 <validate>
c0004557:	85 c0                	test   eax,eax
c0004559:	0f 85 a3 00 00 00    	jne    c0004602 <f_sync+0xbf>
c000455f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004562:	f6 c2 40             	test   dl,0x40
c0004565:	0f 84 97 00 00 00    	je     c0004602 <f_sync+0xbf>
c000456b:	80 e2 80             	and    dl,0x80
c000456e:	74 2e                	je     c000459e <f_sync+0x5b>
c0004570:	6a 01                	push   0x1
c0004572:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004575:	8d 43 28             	lea    eax,[ebx+0x28]
c0004578:	50                   	push   eax
c0004579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000457d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004581:	50                   	push   eax
c0004582:	e8 0b da ff ff       	call   c0001f92 <disk_write>
c0004587:	83 c4 10             	add    esp,0x10
c000458a:	89 c2                	mov    edx,eax
c000458c:	b8 01 00 00 00       	mov    eax,0x1
c0004591:	85 d2                	test   edx,edx
c0004593:	75 6d                	jne    c0004602 <f_sync+0xbf>
c0004595:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004598:	83 e0 7f             	and    eax,0x7f
c000459b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000459e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045a5:	e8 82 df ff ff       	call   c000252c <move_window>
c00045aa:	85 c0                	test   eax,eax
c00045ac:	75 54                	jne    c0004602 <f_sync+0xbf>
c00045ae:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045b1:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045b4:	89 f2                	mov    edx,esi
c00045b6:	83 c8 20             	or     eax,0x20
c00045b9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045bc:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045c1:	e8 1b ee ff ff       	call   c00033e1 <st_clust.isra.1>
c00045c6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045c9:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045cc:	e8 1f da ff ff       	call   c0001ff0 <st_dword>
c00045d1:	8d 46 16             	lea    eax,[esi+0x16]
c00045d4:	ba 00 00 21 50       	mov    edx,0x50210000
c00045d9:	e8 12 da ff ff       	call   c0001ff0 <st_dword>
c00045de:	8d 46 12             	lea    eax,[esi+0x12]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	e8 04 da ff ff       	call   c0001fec <st_word>
c00045e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ec:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f4:	e8 68 e9 ff ff       	call   c0002f61 <sync_fs>
c00045f9:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045fc:	83 e2 bf             	and    edx,0xffffffbf
c00045ff:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004602:	83 c4 14             	add    esp,0x14
c0004605:	5b                   	pop    ebx
c0004606:	5e                   	pop    esi
c0004607:	c3                   	ret    

c0004608 <f_close>:
c0004608:	53                   	push   ebx
c0004609:	83 ec 24             	sub    esp,0x24
c000460c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004610:	53                   	push   ebx
c0004611:	e8 2d ff ff ff       	call   c0004543 <f_sync>
c0004616:	83 c4 10             	add    esp,0x10
c0004619:	85 c0                	test   eax,eax
c000461b:	75 15                	jne    c0004632 <f_close+0x2a>
c000461d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004621:	89 d8                	mov    eax,ebx
c0004623:	e8 5b de ff ff       	call   c0002483 <validate>
c0004628:	85 c0                	test   eax,eax
c000462a:	75 06                	jne    c0004632 <f_close+0x2a>
c000462c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004632:	83 c4 18             	add    esp,0x18
c0004635:	5b                   	pop    ebx
c0004636:	c3                   	ret    

c0004637 <f_lseek>:
c0004637:	55                   	push   ebp
c0004638:	57                   	push   edi
c0004639:	56                   	push   esi
c000463a:	53                   	push   ebx
c000463b:	83 ec 2c             	sub    esp,0x2c
c000463e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004642:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004646:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 32 de ff ff       	call   c0002483 <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	89 c5                	mov    ebp,eax
c0004655:	0f 85 82 01 00 00    	jne    c00047dd <f_lseek+0x1a6>
c000465b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000465f:	85 ed                	test   ebp,ebp
c0004661:	0f 85 76 01 00 00    	jne    c00047dd <f_lseek+0x1a6>
c0004667:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000466a:	39 f0                	cmp    eax,esi
c000466c:	73 07                	jae    c0004675 <f_lseek+0x3e>
c000466e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004672:	0f 44 f0             	cmove  esi,eax
c0004675:	85 f6                	test   esi,esi
c0004677:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000467a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004681:	75 07                	jne    c000468a <f_lseek+0x53>
c0004683:	31 f6                	xor    esi,esi
c0004685:	e9 e2 00 00 00       	jmp    c000476c <f_lseek+0x135>
c000468a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468e:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004692:	c1 e7 09             	shl    edi,0x9
c0004695:	85 c9                	test   ecx,ecx
c0004697:	74 28                	je     c00046c1 <f_lseek+0x8a>
c0004699:	31 d2                	xor    edx,edx
c000469b:	49                   	dec    ecx
c000469c:	8d 46 ff             	lea    eax,[esi-0x1]
c000469f:	f7 f7                	div    edi
c00046a1:	31 d2                	xor    edx,edx
c00046a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a7:	89 c8                	mov    eax,ecx
c00046a9:	f7 f7                	div    edi
c00046ab:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046af:	72 10                	jb     c00046c1 <f_lseek+0x8a>
c00046b1:	89 f8                	mov    eax,edi
c00046b3:	f7 d8                	neg    eax
c00046b5:	21 c1                	and    ecx,eax
c00046b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046ba:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046bd:	29 ce                	sub    esi,ecx
c00046bf:	eb 3c                	jmp    c00046fd <f_lseek+0xc6>
c00046c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046c4:	85 c0                	test   eax,eax
c00046c6:	75 32                	jne    c00046fa <f_lseek+0xc3>
c00046c8:	31 d2                	xor    edx,edx
c00046ca:	89 d8                	mov    eax,ebx
c00046cc:	e8 05 ef ff ff       	call   c00035d6 <create_chain>
c00046d1:	83 f8 01             	cmp    eax,0x1
c00046d4:	75 0e                	jne    c00046e4 <f_lseek+0xad>
c00046d6:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046da:	bd 02 00 00 00       	mov    ebp,0x2
c00046df:	e9 f9 00 00 00       	jmp    c00047dd <f_lseek+0x1a6>
c00046e4:	83 f8 ff             	cmp    eax,0xffffffff
c00046e7:	75 0e                	jne    c00046f7 <f_lseek+0xc0>
c00046e9:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046ed:	bd 01 00 00 00       	mov    ebp,0x1
c00046f2:	e9 e6 00 00 00       	jmp    c00047dd <f_lseek+0x1a6>
c00046f7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046fa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00046fd:	85 c0                	test   eax,eax
c00046ff:	74 82                	je     c0004683 <f_lseek+0x4c>
c0004701:	39 fe                	cmp    esi,edi
c0004703:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004706:	76 3d                	jbe    c0004745 <f_lseek+0x10e>
c0004708:	01 fa                	add    edx,edi
c000470a:	29 fe                	sub    esi,edi
c000470c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004710:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004713:	89 c2                	mov    edx,eax
c0004715:	74 0d                	je     c0004724 <f_lseek+0xed>
c0004717:	89 d8                	mov    eax,ebx
c0004719:	e8 b8 ee ff ff       	call   c00035d6 <create_chain>
c000471e:	85 c0                	test   eax,eax
c0004720:	75 09                	jne    c000472b <f_lseek+0xf4>
c0004722:	eb 1f                	jmp    c0004743 <f_lseek+0x10c>
c0004724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004726:	e8 de ec ff ff       	call   c0003409 <get_fat.isra.2>
c000472b:	83 f8 ff             	cmp    eax,0xffffffff
c000472e:	74 b9                	je     c00046e9 <f_lseek+0xb2>
c0004730:	83 f8 01             	cmp    eax,0x1
c0004733:	76 a1                	jbe    c00046d6 <f_lseek+0x9f>
c0004735:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004739:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000473c:	76 98                	jbe    c00046d6 <f_lseek+0x9f>
c000473e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004741:	eb be                	jmp    c0004701 <f_lseek+0xca>
c0004743:	31 f6                	xor    esi,esi
c0004745:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004748:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000474e:	0f 84 2f ff ff ff    	je     c0004683 <f_lseek+0x4c>
c0004754:	89 c2                	mov    edx,eax
c0004756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475a:	e8 be da ff ff       	call   c000221d <clst2sect>
c000475f:	85 c0                	test   eax,eax
c0004761:	0f 84 6f ff ff ff    	je     c00046d6 <f_lseek+0x9f>
c0004767:	c1 ee 09             	shr    esi,0x9
c000476a:	01 c6                	add    esi,eax
c000476c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000476f:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004772:	76 0c                	jbe    c0004780 <f_lseek+0x149>
c0004774:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004777:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000477a:	83 ca 40             	or     edx,0x40
c000477d:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004780:	a9 ff 01 00 00       	test   eax,0x1ff
c0004785:	74 56                	je     c00047dd <f_lseek+0x1a6>
c0004787:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000478a:	39 f0                	cmp    eax,esi
c000478c:	74 4f                	je     c00047dd <f_lseek+0x1a6>
c000478e:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004792:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004795:	74 26                	je     c00047bd <f_lseek+0x186>
c0004797:	6a 01                	push   0x1
c0004799:	50                   	push   eax
c000479a:	57                   	push   edi
c000479b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000479f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047a3:	50                   	push   eax
c00047a4:	e8 e9 d7 ff ff       	call   c0001f92 <disk_write>
c00047a9:	83 c4 10             	add    esp,0x10
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 35 ff ff ff    	jne    c00046e9 <f_lseek+0xb2>
c00047b4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047b7:	83 e0 7f             	and    eax,0x7f
c00047ba:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047bd:	6a 01                	push   0x1
c00047bf:	56                   	push   esi
c00047c0:	57                   	push   edi
c00047c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047c9:	50                   	push   eax
c00047ca:	e8 ad d7 ff ff       	call   c0001f7c <disk_read>
c00047cf:	83 c4 10             	add    esp,0x10
c00047d2:	85 c0                	test   eax,eax
c00047d4:	0f 85 0f ff ff ff    	jne    c00046e9 <f_lseek+0xb2>
c00047da:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047dd:	83 c4 2c             	add    esp,0x2c
c00047e0:	89 e8                	mov    eax,ebp
c00047e2:	5b                   	pop    ebx
c00047e3:	5e                   	pop    esi
c00047e4:	5f                   	pop    edi
c00047e5:	5d                   	pop    ebp
c00047e6:	c3                   	ret    

c00047e7 <f_opendir>:
c00047e7:	56                   	push   esi
c00047e8:	b8 09 00 00 00       	mov    eax,0x9
c00047ed:	53                   	push   ebx
c00047ee:	83 ec 24             	sub    esp,0x24
c00047f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047f5:	85 db                	test   ebx,ebx
c00047f7:	0f 84 af 00 00 00    	je     c00048ac <f_opendir+0xc5>
c00047fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004801:	31 c9                	xor    ecx,ecx
c0004803:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004807:	e8 7d de ff ff       	call   c0002689 <mount_volume>
c000480c:	85 c0                	test   eax,eax
c000480e:	0f 85 92 00 00 00    	jne    c00048a6 <f_opendir+0xbf>
c0004814:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	89 03                	mov    DWORD PTR [ebx],eax
c000481d:	68 00 02 00 00       	push   0x200
c0004822:	e8 e5 15 00 00       	call   c0005e0c <ff_memalloc>
c0004827:	83 c4 10             	add    esp,0x10
c000482a:	89 c6                	mov    esi,eax
c000482c:	b8 11 00 00 00       	mov    eax,0x11
c0004831:	85 f6                	test   esi,esi
c0004833:	74 77                	je     c00048ac <f_opendir+0xc5>
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000483d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004840:	89 d8                	mov    eax,ebx
c0004842:	e8 8a f3 ff ff       	call   c0003bd1 <follow_path>
c0004847:	85 c0                	test   eax,eax
c0004849:	75 37                	jne    c0004882 <f_opendir+0x9b>
c000484b:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000484f:	75 1c                	jne    c000486d <f_opendir+0x86>
c0004851:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004855:	b8 05 00 00 00       	mov    eax,0x5
c000485a:	74 26                	je     c0004882 <f_opendir+0x9b>
c000485c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004860:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004863:	8a 00                	mov    al,BYTE PTR [eax]
c0004865:	e8 4e eb ff ff       	call   c00033b8 <ld_clust.isra.0>
c000486a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000486d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004871:	31 d2                	xor    edx,edx
c0004873:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004877:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000487b:	89 d8                	mov    eax,ebx
c000487d:	e8 8c ec ff ff       	call   c000350e <dir_sdi>
c0004882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004886:	83 ec 0c             	sub    esp,0xc
c0004889:	56                   	push   esi
c000488a:	e8 95 15 00 00       	call   c0005e24 <ff_memfree>
c000488f:	83 c4 10             	add    esp,0x10
c0004892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004896:	83 f8 04             	cmp    eax,0x4
c0004899:	74 06                	je     c00048a1 <f_opendir+0xba>
c000489b:	85 c0                	test   eax,eax
c000489d:	74 0d                	je     c00048ac <f_opendir+0xc5>
c000489f:	eb 05                	jmp    c00048a6 <f_opendir+0xbf>
c00048a1:	b8 05 00 00 00       	mov    eax,0x5
c00048a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048ac:	83 c4 24             	add    esp,0x24
c00048af:	5b                   	pop    ebx
c00048b0:	5e                   	pop    esi
c00048b1:	c3                   	ret    

c00048b2 <f_closedir>:
c00048b2:	53                   	push   ebx
c00048b3:	83 ec 18             	sub    esp,0x18
c00048b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048ba:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048be:	89 d8                	mov    eax,ebx
c00048c0:	e8 be db ff ff       	call   c0002483 <validate>
c00048c5:	85 c0                	test   eax,eax
c00048c7:	75 06                	jne    c00048cf <f_closedir+0x1d>
c00048c9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048cf:	83 c4 18             	add    esp,0x18
c00048d2:	5b                   	pop    ebx
c00048d3:	c3                   	ret    

c00048d4 <f_readdir>:
c00048d4:	57                   	push   edi
c00048d5:	56                   	push   esi
c00048d6:	53                   	push   ebx
c00048d7:	83 ec 20             	sub    esp,0x20
c00048da:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048e2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048e6:	89 d8                	mov    eax,ebx
c00048e8:	e8 96 db ff ff       	call   c0002483 <validate>
c00048ed:	85 c0                	test   eax,eax
c00048ef:	75 6e                	jne    c000495f <f_readdir+0x8b>
c00048f1:	85 ff                	test   edi,edi
c00048f3:	75 0b                	jne    c0004900 <f_readdir+0x2c>
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	89 d8                	mov    eax,ebx
c00048f9:	e8 10 ec ff ff       	call   c000350e <dir_sdi>
c00048fe:	eb 5f                	jmp    c000495f <f_readdir+0x8b>
c0004900:	83 ec 0c             	sub    esp,0xc
c0004903:	68 00 02 00 00       	push   0x200
c0004908:	e8 ff 14 00 00       	call   c0005e0c <ff_memalloc>
c000490d:	83 c4 10             	add    esp,0x10
c0004910:	89 c6                	mov    esi,eax
c0004912:	b8 11 00 00 00       	mov    eax,0x11
c0004917:	85 f6                	test   esi,esi
c0004919:	74 44                	je     c000495f <f_readdir+0x8b>
c000491b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000491f:	31 d2                	xor    edx,edx
c0004921:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004924:	89 d8                	mov    eax,ebx
c0004926:	e8 dd ef ff ff       	call   c0003908 <dir_read>
c000492b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004930:	75 19                	jne    c000494b <f_readdir+0x77>
c0004932:	89 fa                	mov    edx,edi
c0004934:	89 d8                	mov    eax,ebx
c0004936:	e8 7c e8 ff ff       	call   c00031b7 <get_fileinfo>
c000493b:	31 d2                	xor    edx,edx
c000493d:	89 d8                	mov    eax,ebx
c000493f:	e8 5a ee ff ff       	call   c000379e <dir_next>
c0004944:	83 f8 04             	cmp    eax,0x4
c0004947:	75 02                	jne    c000494b <f_readdir+0x77>
c0004949:	31 c0                	xor    eax,eax
c000494b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000494f:	83 ec 0c             	sub    esp,0xc
c0004952:	56                   	push   esi
c0004953:	e8 cc 14 00 00       	call   c0005e24 <ff_memfree>
c0004958:	83 c4 10             	add    esp,0x10
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	83 c4 20             	add    esp,0x20
c0004962:	5b                   	pop    ebx
c0004963:	5e                   	pop    esi
c0004964:	5f                   	pop    edi
c0004965:	c3                   	ret    

c0004966 <f_stat>:
c0004966:	57                   	push   edi
c0004967:	31 c9                	xor    ecx,ecx
c0004969:	56                   	push   esi
c000496a:	53                   	push   ebx
c000496b:	83 ec 30             	sub    esp,0x30
c000496e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004972:	89 e2                	mov    edx,esp
c0004974:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004978:	e8 0c dd ff ff       	call   c0002689 <mount_volume>
c000497d:	85 c0                	test   eax,eax
c000497f:	89 c3                	mov    ebx,eax
c0004981:	75 59                	jne    c00049dc <f_stat+0x76>
c0004983:	83 ec 0c             	sub    esp,0xc
c0004986:	bb 11 00 00 00       	mov    ebx,0x11
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 77 14 00 00       	call   c0005e0c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	85 c0                	test   eax,eax
c000499a:	89 c6                	mov    esi,eax
c000499c:	74 3e                	je     c00049dc <f_stat+0x76>
c000499e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049a1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049a5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049a8:	89 e0                	mov    eax,esp
c00049aa:	e8 22 f2 ff ff       	call   c0003bd1 <follow_path>
c00049af:	85 c0                	test   eax,eax
c00049b1:	89 c3                	mov    ebx,eax
c00049b3:	75 1b                	jne    c00049d0 <f_stat+0x6a>
c00049b5:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049ba:	75 0f                	jne    c00049cb <f_stat+0x65>
c00049bc:	85 ff                	test   edi,edi
c00049be:	74 10                	je     c00049d0 <f_stat+0x6a>
c00049c0:	89 fa                	mov    edx,edi
c00049c2:	89 e0                	mov    eax,esp
c00049c4:	e8 ee e7 ff ff       	call   c00031b7 <get_fileinfo>
c00049c9:	eb 05                	jmp    c00049d0 <f_stat+0x6a>
c00049cb:	bb 06 00 00 00       	mov    ebx,0x6
c00049d0:	83 ec 0c             	sub    esp,0xc
c00049d3:	56                   	push   esi
c00049d4:	e8 4b 14 00 00       	call   c0005e24 <ff_memfree>
c00049d9:	83 c4 10             	add    esp,0x10
c00049dc:	83 c4 30             	add    esp,0x30
c00049df:	89 d8                	mov    eax,ebx
c00049e1:	5b                   	pop    ebx
c00049e2:	5e                   	pop    esi
c00049e3:	5f                   	pop    edi
c00049e4:	c3                   	ret    

c00049e5 <f_getfree>:
c00049e5:	55                   	push   ebp
c00049e6:	31 c9                	xor    ecx,ecx
c00049e8:	57                   	push   edi
c00049e9:	56                   	push   esi
c00049ea:	53                   	push   ebx
c00049eb:	83 ec 2c             	sub    esp,0x2c
c00049ee:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049f2:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049f6:	e8 8e dc ff ff       	call   c0002689 <mount_volume>
c00049fb:	85 c0                	test   eax,eax
c00049fd:	89 c6                	mov    esi,eax
c00049ff:	0f 85 df 00 00 00    	jne    c0004ae4 <f_getfree+0xff>
c0004a05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a09:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a0d:	89 18                	mov    DWORD PTR [eax],ebx
c0004a0f:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a12:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a15:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a18:	39 d0                	cmp    eax,edx
c0004a1a:	77 0b                	ja     c0004a27 <f_getfree+0x42>
c0004a1c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a20:	89 01                	mov    DWORD PTR [ecx],eax
c0004a22:	e9 bd 00 00 00       	jmp    c0004ae4 <f_getfree+0xff>
c0004a27:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a2a:	75 29                	jne    c0004a55 <f_getfree+0x70>
c0004a2c:	bf 02 00 00 00       	mov    edi,0x2
c0004a31:	31 ed                	xor    ebp,ebp
c0004a33:	89 fa                	mov    edx,edi
c0004a35:	89 d8                	mov    eax,ebx
c0004a37:	e8 cd e9 ff ff       	call   c0003409 <get_fat.isra.2>
c0004a3c:	83 f8 ff             	cmp    eax,0xffffffff
c0004a3f:	74 7d                	je     c0004abe <f_getfree+0xd9>
c0004a41:	83 f8 01             	cmp    eax,0x1
c0004a44:	74 7f                	je     c0004ac5 <f_getfree+0xe0>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	83 d5 00             	adc    ebp,0x0
c0004a4d:	47                   	inc    edi
c0004a4e:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a51:	77 e0                	ja     c0004a33 <f_getfree+0x4e>
c0004a53:	eb 79                	jmp    c0004ace <f_getfree+0xe9>
c0004a55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a58:	31 ed                	xor    ebp,ebp
c0004a5a:	31 db                	xor    ebx,ebx
c0004a5c:	85 db                	test   ebx,ebx
c0004a5e:	75 18                	jne    c0004a78 <f_getfree+0x93>
c0004a60:	8d 42 01             	lea    eax,[edx+0x1]
c0004a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a6b:	e8 bc da ff ff       	call   c000252c <move_window>
c0004a70:	85 c0                	test   eax,eax
c0004a72:	75 58                	jne    c0004acc <f_getfree+0xe7>
c0004a74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a80:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a83:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004a87:	75 13                	jne    c0004a9c <f_getfree+0xb7>
c0004a89:	e8 39 d5 ff ff       	call   c0001fc7 <ld_word>
c0004a8e:	0f b7 c0             	movzx  eax,ax
c0004a91:	83 f8 01             	cmp    eax,0x1
c0004a94:	83 d5 00             	adc    ebp,0x0
c0004a97:	83 c3 02             	add    ebx,0x2
c0004a9a:	eb 13                	jmp    c0004aaf <f_getfree+0xca>
c0004a9c:	e8 33 d5 ff ff       	call   c0001fd4 <ld_dword>
c0004aa1:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004aa6:	83 f8 01             	cmp    eax,0x1
c0004aa9:	83 d5 00             	adc    ebp,0x0
c0004aac:	83 c3 04             	add    ebx,0x4
c0004aaf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ab5:	4f                   	dec    edi
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	75 a0                	jne    c0004a5c <f_getfree+0x77>
c0004abc:	eb 10                	jmp    c0004ace <f_getfree+0xe9>
c0004abe:	be 01 00 00 00       	mov    esi,0x1
c0004ac3:	eb 09                	jmp    c0004ace <f_getfree+0xe9>
c0004ac5:	be 02 00 00 00       	mov    esi,0x2
c0004aca:	eb 02                	jmp    c0004ace <f_getfree+0xe9>
c0004acc:	89 c6                	mov    esi,eax
c0004ace:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004ad2:	89 28                	mov    DWORD PTR [eax],ebp
c0004ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ad8:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004adb:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ade:	83 ca 01             	or     edx,0x1
c0004ae1:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004ae4:	83 c4 2c             	add    esp,0x2c
c0004ae7:	89 f0                	mov    eax,esi
c0004ae9:	5b                   	pop    ebx
c0004aea:	5e                   	pop    esi
c0004aeb:	5f                   	pop    edi
c0004aec:	5d                   	pop    ebp
c0004aed:	c3                   	ret    

c0004aee <f_truncate>:
c0004aee:	56                   	push   esi
c0004aef:	53                   	push   ebx
c0004af0:	83 ec 14             	sub    esp,0x14
c0004af3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004af7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004afb:	89 d8                	mov    eax,ebx
c0004afd:	e8 81 d9 ff ff       	call   c0002483 <validate>
c0004b02:	85 c0                	test   eax,eax
c0004b04:	89 c6                	mov    esi,eax
c0004b06:	0f 85 c4 00 00 00    	jne    c0004bd0 <f_truncate+0xe2>
c0004b0c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b10:	85 f6                	test   esi,esi
c0004b12:	0f 85 b8 00 00 00    	jne    c0004bd0 <f_truncate+0xe2>
c0004b18:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b1c:	0f 84 a9 00 00 00    	je     c0004bcb <f_truncate+0xdd>
c0004b22:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b25:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b28:	0f 83 a2 00 00 00    	jae    c0004bd0 <f_truncate+0xe2>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	75 15                	jne    c0004b47 <f_truncate+0x59>
c0004b32:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b35:	31 c9                	xor    ecx,ecx
c0004b37:	89 d8                	mov    eax,ebx
c0004b39:	e8 d2 eb ff ff       	call   c0003710 <remove_chain>
c0004b3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b45:	eb 35                	jmp    c0004b7c <f_truncate+0x8e>
c0004b47:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b4c:	e8 b8 e8 ff ff       	call   c0003409 <get_fat.isra.2>
c0004b51:	89 c2                	mov    edx,eax
c0004b53:	b8 01 00 00 00       	mov    eax,0x1
c0004b58:	83 fa ff             	cmp    edx,0xffffffff
c0004b5b:	74 1f                	je     c0004b7c <f_truncate+0x8e>
c0004b5d:	83 fa 01             	cmp    edx,0x1
c0004b60:	b8 02 00 00 00       	mov    eax,0x2
c0004b65:	74 15                	je     c0004b7c <f_truncate+0x8e>
c0004b67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b6b:	31 c0                	xor    eax,eax
c0004b6d:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b70:	76 0a                	jbe    c0004b7c <f_truncate+0x8e>
c0004b72:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b75:	89 d8                	mov    eax,ebx
c0004b77:	e8 94 eb ff ff       	call   c0003710 <remove_chain>
c0004b7c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b7f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b82:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b85:	83 ca 40             	or     edx,0x40
c0004b88:	85 c0                	test   eax,eax
c0004b8a:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b8d:	75 35                	jne    c0004bc4 <f_truncate+0xd6>
c0004b8f:	80 e2 80             	and    dl,0x80
c0004b92:	74 3c                	je     c0004bd0 <f_truncate+0xe2>
c0004b94:	6a 01                	push   0x1
c0004b96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004b99:	8d 43 28             	lea    eax,[ebx+0x28]
c0004b9c:	50                   	push   eax
c0004b9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ba1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004ba5:	50                   	push   eax
c0004ba6:	e8 e7 d3 ff ff       	call   c0001f92 <disk_write>
c0004bab:	83 c4 10             	add    esp,0x10
c0004bae:	85 c0                	test   eax,eax
c0004bb0:	75 0d                	jne    c0004bbf <f_truncate+0xd1>
c0004bb2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bb5:	31 f6                	xor    esi,esi
c0004bb7:	83 e0 7f             	and    eax,0x7f
c0004bba:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bbd:	eb 11                	jmp    c0004bd0 <f_truncate+0xe2>
c0004bbf:	b8 01 00 00 00       	mov    eax,0x1
c0004bc4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	eb 05                	jmp    c0004bd0 <f_truncate+0xe2>
c0004bcb:	be 07 00 00 00       	mov    esi,0x7
c0004bd0:	83 c4 14             	add    esp,0x14
c0004bd3:	89 f0                	mov    eax,esi
c0004bd5:	5b                   	pop    ebx
c0004bd6:	5e                   	pop    esi
c0004bd7:	c3                   	ret    

c0004bd8 <f_unlink>:
c0004bd8:	55                   	push   ebp
c0004bd9:	b9 02 00 00 00       	mov    ecx,0x2
c0004bde:	57                   	push   edi
c0004bdf:	56                   	push   esi
c0004be0:	53                   	push   ebx
c0004be1:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004be7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004beb:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bf2:	e8 92 da ff ff       	call   c0002689 <mount_volume>
c0004bf7:	85 c0                	test   eax,eax
c0004bf9:	0f 85 ee 00 00 00    	jne    c0004ced <f_unlink+0x115>
c0004bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c03:	83 ec 0c             	sub    esp,0xc
c0004c06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c0a:	68 00 02 00 00       	push   0x200
c0004c0f:	e8 f8 11 00 00       	call   c0005e0c <ff_memalloc>
c0004c14:	83 c4 10             	add    esp,0x10
c0004c17:	89 c3                	mov    ebx,eax
c0004c19:	b8 11 00 00 00       	mov    eax,0x11
c0004c1e:	85 db                	test   ebx,ebx
c0004c20:	0f 84 c7 00 00 00    	je     c0004ced <f_unlink+0x115>
c0004c26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c31:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c34:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c38:	e8 94 ef ff ff       	call   c0003bd1 <follow_path>
c0004c3d:	85 c0                	test   eax,eax
c0004c3f:	0f 85 94 00 00 00    	jne    c0004cd9 <f_unlink+0x101>
c0004c45:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c4a:	b8 06 00 00 00       	mov    eax,0x6
c0004c4f:	0f 85 84 00 00 00    	jne    c0004cd9 <f_unlink+0x101>
c0004c55:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c5a:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c60:	74 07                	je     c0004c69 <f_unlink+0x91>
c0004c62:	b8 07 00 00 00       	mov    eax,0x7
c0004c67:	eb 70                	jmp    c0004cd9 <f_unlink+0x101>
c0004c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c71:	8a 07                	mov    al,BYTE PTR [edi]
c0004c73:	e8 40 e7 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0004c78:	83 e5 10             	and    ebp,0x10
c0004c7b:	89 c6                	mov    esi,eax
c0004c7d:	75 20                	jne    c0004c9f <f_unlink+0xc7>
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 a8 ed ff ff       	call   c0003a30 <dir_remove>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	75 40                	jne    c0004ccc <f_unlink+0xf4>
c0004c8c:	85 f6                	test   esi,esi
c0004c8e:	74 3c                	je     c0004ccc <f_unlink+0xf4>
c0004c90:	31 c9                	xor    ecx,ecx
c0004c92:	89 f2                	mov    edx,esi
c0004c94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c98:	e8 73 ea ff ff       	call   c0003710 <remove_chain>
c0004c9d:	eb 2d                	jmp    c0004ccc <f_unlink+0xf4>
c0004c9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	31 d2                	xor    edx,edx
c0004ca9:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cad:	e8 5c e8 ff ff       	call   c000350e <dir_sdi>
c0004cb2:	85 c0                	test   eax,eax
c0004cb4:	75 23                	jne    c0004cd9 <f_unlink+0x101>
c0004cb6:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cba:	31 d2                	xor    edx,edx
c0004cbc:	e8 47 ec ff ff       	call   c0003908 <dir_read>
c0004cc1:	85 c0                	test   eax,eax
c0004cc3:	74 9d                	je     c0004c62 <f_unlink+0x8a>
c0004cc5:	83 f8 04             	cmp    eax,0x4
c0004cc8:	75 0f                	jne    c0004cd9 <f_unlink+0x101>
c0004cca:	eb b3                	jmp    c0004c7f <f_unlink+0xa7>
c0004ccc:	85 c0                	test   eax,eax
c0004cce:	75 09                	jne    c0004cd9 <f_unlink+0x101>
c0004cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cd4:	e8 88 e2 ff ff       	call   c0002f61 <sync_fs>
c0004cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cdd:	83 ec 0c             	sub    esp,0xc
c0004ce0:	53                   	push   ebx
c0004ce1:	e8 3e 11 00 00       	call   c0005e24 <ff_memfree>
c0004ce6:	83 c4 10             	add    esp,0x10
c0004ce9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ced:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004cf3:	5b                   	pop    ebx
c0004cf4:	5e                   	pop    esi
c0004cf5:	5f                   	pop    edi
c0004cf6:	5d                   	pop    ebp
c0004cf7:	c3                   	ret    

c0004cf8 <f_mkdir>:
c0004cf8:	57                   	push   edi
c0004cf9:	b9 02 00 00 00       	mov    ecx,0x2
c0004cfe:	56                   	push   esi
c0004cff:	53                   	push   ebx
c0004d00:	83 ec 50             	sub    esp,0x50
c0004d03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d07:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d0b:	e8 79 d9 ff ff       	call   c0002689 <mount_volume>
c0004d10:	85 c0                	test   eax,eax
c0004d12:	89 c3                	mov    ebx,eax
c0004d14:	0f 85 70 01 00 00    	jne    c0004e8a <f_mkdir+0x192>
c0004d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1e:	83 ec 0c             	sub    esp,0xc
c0004d21:	bb 11 00 00 00       	mov    ebx,0x11
c0004d26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2a:	68 00 02 00 00       	push   0x200
c0004d2f:	e8 d8 10 00 00       	call   c0005e0c <ff_memalloc>
c0004d34:	83 c4 10             	add    esp,0x10
c0004d37:	85 c0                	test   eax,eax
c0004d39:	89 c7                	mov    edi,eax
c0004d3b:	0f 84 49 01 00 00    	je     c0004e8a <f_mkdir+0x192>
c0004d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d45:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d49:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d4c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d50:	e8 7c ee ff ff       	call   c0003bd1 <follow_path>
c0004d55:	85 c0                	test   eax,eax
c0004d57:	89 c3                	mov    ebx,eax
c0004d59:	74 3e                	je     c0004d99 <f_mkdir+0xa1>
c0004d5b:	83 f8 04             	cmp    eax,0x4
c0004d5e:	75 3e                	jne    c0004d9e <f_mkdir+0xa6>
c0004d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d64:	31 d2                	xor    edx,edx
c0004d66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d6e:	e8 63 e8 ff ff       	call   c00035d6 <create_chain>
c0004d73:	85 c0                	test   eax,eax
c0004d75:	89 c6                	mov    esi,eax
c0004d77:	74 0c                	je     c0004d85 <f_mkdir+0x8d>
c0004d79:	83 f8 01             	cmp    eax,0x1
c0004d7c:	bb 02 00 00 00       	mov    ebx,0x2
c0004d81:	74 07                	je     c0004d8a <f_mkdir+0x92>
c0004d83:	eb 2a                	jmp    c0004daf <f_mkdir+0xb7>
c0004d85:	bb 07 00 00 00       	mov    ebx,0x7
c0004d8a:	31 c9                	xor    ecx,ecx
c0004d8c:	89 f2                	mov    edx,esi
c0004d8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d92:	e8 79 e9 ff ff       	call   c0003710 <remove_chain>
c0004d97:	eb 05                	jmp    c0004d9e <f_mkdir+0xa6>
c0004d99:	bb 08 00 00 00       	mov    ebx,0x8
c0004d9e:	83 ec 0c             	sub    esp,0xc
c0004da1:	57                   	push   edi
c0004da2:	e8 7d 10 00 00       	call   c0005e24 <ff_memfree>
c0004da7:	83 c4 10             	add    esp,0x10
c0004daa:	e9 db 00 00 00       	jmp    c0004e8a <f_mkdir+0x192>
c0004daf:	83 f8 ff             	cmp    eax,0xffffffff
c0004db2:	bb 01 00 00 00       	mov    ebx,0x1
c0004db7:	74 d1                	je     c0004d8a <f_mkdir+0x92>
c0004db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbd:	89 f2                	mov    edx,esi
c0004dbf:	e8 19 dd ff ff       	call   c0002add <dir_clear>
c0004dc4:	85 c0                	test   eax,eax
c0004dc6:	89 c3                	mov    ebx,eax
c0004dc8:	75 c0                	jne    c0004d8a <f_mkdir+0x92>
c0004dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dd3:	ba 20 00 00 00       	mov    edx,0x20
c0004dd8:	83 c0 34             	add    eax,0x34
c0004ddb:	e8 28 d2 ff ff       	call   c0002008 <mem_set>
c0004de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de4:	ba 00 00 21 50       	mov    edx,0x50210000
c0004de9:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ded:	83 c0 4a             	add    eax,0x4a
c0004df0:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004df4:	e8 f7 d1 ff ff       	call   c0001ff0 <st_dword>
c0004df9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dfd:	89 f1                	mov    ecx,esi
c0004dff:	8d 50 34             	lea    edx,[eax+0x34]
c0004e02:	e8 da e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0b:	b9 20 00 00 00       	mov    ecx,0x20
c0004e10:	8d 50 34             	lea    edx,[eax+0x34]
c0004e13:	83 c0 54             	add    eax,0x54
c0004e16:	e8 d8 d1 ff ff       	call   c0001ff3 <mem_cpy>
c0004e1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e1f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e23:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	e8 b2 e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e33:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e37:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e3b:	e8 2e ee ff ff       	call   c0003c6e <dir_register>
c0004e40:	85 c0                	test   eax,eax
c0004e42:	89 c3                	mov    ebx,eax
c0004e44:	0f 85 40 ff ff ff    	jne    c0004d8a <f_mkdir+0x92>
c0004e4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e53:	83 c0 16             	add    eax,0x16
c0004e56:	e8 95 d1 ff ff       	call   c0001ff0 <st_dword>
c0004e5b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e5f:	89 f1                	mov    ecx,esi
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	e8 77 e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e6e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e76:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e7e:	e8 de e0 ff ff       	call   c0002f61 <sync_fs>
c0004e83:	89 c3                	mov    ebx,eax
c0004e85:	e9 14 ff ff ff       	jmp    c0004d9e <f_mkdir+0xa6>
c0004e8a:	83 c4 50             	add    esp,0x50
c0004e8d:	89 d8                	mov    eax,ebx
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_rename>:
c0004e93:	57                   	push   edi
c0004e94:	56                   	push   esi
c0004e95:	53                   	push   ebx
c0004e96:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004e9c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ea3:	e8 8f d5 ff ff       	call   c0002437 <get_ldnumber>
c0004ea8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004eac:	b9 02 00 00 00       	mov    ecx,0x2
c0004eb1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004eb8:	e8 cc d7 ff ff       	call   c0002689 <mount_volume>
c0004ebd:	85 c0                	test   eax,eax
c0004ebf:	0f 85 7c 01 00 00    	jne    c0005041 <f_rename+0x1ae>
c0004ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec9:	83 ec 0c             	sub    esp,0xc
c0004ecc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ed0:	68 00 02 00 00       	push   0x200
c0004ed5:	e8 32 0f 00 00       	call   c0005e0c <ff_memalloc>
c0004eda:	83 c4 10             	add    esp,0x10
c0004edd:	89 c6                	mov    esi,eax
c0004edf:	b8 11 00 00 00       	mov    eax,0x11
c0004ee4:	85 f6                	test   esi,esi
c0004ee6:	0f 84 55 01 00 00    	je     c0005041 <f_rename+0x1ae>
c0004eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef0:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004ef7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004efa:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004efe:	e8 ce ec ff ff       	call   c0003bd1 <follow_path>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	0f 85 22 01 00 00    	jne    c000502d <f_rename+0x19a>
c0004f0b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f0f:	b8 06 00 00 00       	mov    eax,0x6
c0004f14:	80 e2 a0             	and    dl,0xa0
c0004f17:	0f 85 10 01 00 00    	jne    c000502d <f_rename+0x19a>
c0004f1d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f25:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2a:	e8 c4 d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004f2f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f33:	b9 30 00 00 00       	mov    ecx,0x30
c0004f38:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f3c:	e8 b2 d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004f41:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f48:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f4c:	e8 80 ec ff ff       	call   c0003bd1 <follow_path>
c0004f51:	85 c0                	test   eax,eax
c0004f53:	75 20                	jne    c0004f75 <f_rename+0xe2>
c0004f55:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f59:	b8 08 00 00 00       	mov    eax,0x8
c0004f5e:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f62:	0f 85 c5 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f68:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f6c:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f73:	eb 03                	jmp    c0004f78 <f_rename+0xe5>
c0004f75:	83 f8 04             	cmp    eax,0x4
c0004f78:	0f 85 af 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f7e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f82:	e8 e7 ec ff ff       	call   c0003c6e <dir_register>
c0004f87:	85 c0                	test   eax,eax
c0004f89:	0f 85 9e 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f8f:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004f96:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004f9a:	b9 13 00 00 00       	mov    ecx,0x13
c0004f9f:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fa2:	e8 4c d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004fa7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fab:	a8 10                	test   al,0x10
c0004fad:	75 03                	jne    c0004fb2 <f_rename+0x11f>
c0004faf:	83 c8 20             	or     eax,0x20
c0004fb2:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fbd:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fc1:	74 54                	je     c0005017 <f_rename+0x184>
c0004fc3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fc7:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fcb:	74 4a                	je     c0005017 <f_rename+0x184>
c0004fcd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fd1:	89 da                	mov    edx,ebx
c0004fd3:	8a 07                	mov    al,BYTE PTR [edi]
c0004fd5:	e8 de e3 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0004fda:	89 c2                	mov    edx,eax
c0004fdc:	89 f8                	mov    eax,edi
c0004fde:	e8 3a d2 ff ff       	call   c000221d <clst2sect>
c0004fe3:	89 c2                	mov    edx,eax
c0004fe5:	b8 02 00 00 00       	mov    eax,0x2
c0004fea:	85 d2                	test   edx,edx
c0004fec:	74 3f                	je     c000502d <f_rename+0x19a>
c0004fee:	89 f8                	mov    eax,edi
c0004ff0:	e8 37 d5 ff ff       	call   c000252c <move_window>
c0004ff5:	85 c0                	test   eax,eax
c0004ff7:	75 34                	jne    c000502d <f_rename+0x19a>
c0004ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffd:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005001:	75 14                	jne    c0005017 <f_rename+0x184>
c0005003:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005007:	8d 50 54             	lea    edx,[eax+0x54]
c000500a:	e8 d2 e3 ff ff       	call   c00033e1 <st_clust.isra.1>
c000500f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005013:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005017:	8d 44 24 40          	lea    eax,[esp+0x40]
c000501b:	e8 10 ea ff ff       	call   c0003a30 <dir_remove>
c0005020:	85 c0                	test   eax,eax
c0005022:	75 09                	jne    c000502d <f_rename+0x19a>
c0005024:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005028:	e8 34 df ff ff       	call   c0002f61 <sync_fs>
c000502d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005031:	83 ec 0c             	sub    esp,0xc
c0005034:	56                   	push   esi
c0005035:	e8 ea 0d 00 00       	call   c0005e24 <ff_memfree>
c000503a:	83 c4 10             	add    esp,0x10
c000503d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005041:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005047:	5b                   	pop    ebx
c0005048:	5e                   	pop    esi
c0005049:	5f                   	pop    edi
c000504a:	c3                   	ret    

c000504b <f_chmod>:
c000504b:	57                   	push   edi
c000504c:	b9 02 00 00 00       	mov    ecx,0x2
c0005051:	56                   	push   esi
c0005052:	53                   	push   ebx
c0005053:	83 ec 50             	sub    esp,0x50
c0005056:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000505a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000505e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005062:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0005066:	e8 1e d6 ff ff       	call   c0002689 <mount_volume>
c000506b:	85 c0                	test   eax,eax
c000506d:	0f 85 81 00 00 00    	jne    c00050f4 <f_chmod+0xa9>
c0005073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005077:	83 ec 0c             	sub    esp,0xc
c000507a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000507e:	68 00 02 00 00       	push   0x200
c0005083:	e8 84 0d 00 00       	call   c0005e0c <ff_memalloc>
c0005088:	83 c4 10             	add    esp,0x10
c000508b:	89 c6                	mov    esi,eax
c000508d:	b8 11 00 00 00       	mov    eax,0x11
c0005092:	85 f6                	test   esi,esi
c0005094:	74 5e                	je     c00050f4 <f_chmod+0xa9>
c0005096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000509a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000509e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a5:	e8 27 eb ff ff       	call   c0003bd1 <follow_path>
c00050aa:	85 c0                	test   eax,eax
c00050ac:	75 32                	jne    c00050e0 <f_chmod+0x95>
c00050ae:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050b2:	b8 06 00 00 00       	mov    eax,0x6
c00050b7:	80 e2 a0             	and    dl,0xa0
c00050ba:	75 24                	jne    c00050e0 <f_chmod+0x95>
c00050bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c0:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050c3:	31 d7                	xor    edi,edx
c00050c5:	21 fb                	and    ebx,edi
c00050c7:	83 e3 27             	and    ebx,0x27
c00050ca:	31 d3                	xor    ebx,edx
c00050cc:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050db:	e8 81 de ff ff       	call   c0002f61 <sync_fs>
c00050e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050e4:	83 ec 0c             	sub    esp,0xc
c00050e7:	56                   	push   esi
c00050e8:	e8 37 0d 00 00       	call   c0005e24 <ff_memfree>
c00050ed:	83 c4 10             	add    esp,0x10
c00050f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050f4:	83 c4 50             	add    esp,0x50
c00050f7:	5b                   	pop    ebx
c00050f8:	5e                   	pop    esi
c00050f9:	5f                   	pop    edi
c00050fa:	c3                   	ret    

c00050fb <f_utime>:
c00050fb:	56                   	push   esi
c00050fc:	b9 02 00 00 00       	mov    ecx,0x2
c0005101:	53                   	push   ebx
c0005102:	83 ec 54             	sub    esp,0x54
c0005105:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005109:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000510d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005111:	e8 73 d5 ff ff       	call   c0002689 <mount_volume>
c0005116:	85 c0                	test   eax,eax
c0005118:	0f 85 87 00 00 00    	jne    c00051a5 <f_utime+0xaa>
c000511e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005122:	83 ec 0c             	sub    esp,0xc
c0005125:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005129:	68 00 02 00 00       	push   0x200
c000512e:	e8 d9 0c 00 00       	call   c0005e0c <ff_memalloc>
c0005133:	83 c4 10             	add    esp,0x10
c0005136:	89 c3                	mov    ebx,eax
c0005138:	b8 11 00 00 00       	mov    eax,0x11
c000513d:	85 db                	test   ebx,ebx
c000513f:	74 64                	je     c00051a5 <f_utime+0xaa>
c0005141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005145:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005149:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000514c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005150:	e8 7c ea ff ff       	call   c0003bd1 <follow_path>
c0005155:	85 c0                	test   eax,eax
c0005157:	75 38                	jne    c0005191 <f_utime+0x96>
c0005159:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000515d:	b8 06 00 00 00       	mov    eax,0x6
c0005162:	80 e2 a0             	and    dl,0xa0
c0005165:	75 2a                	jne    c0005191 <f_utime+0x96>
c0005167:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000516b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c000516f:	c1 e2 10             	shl    edx,0x10
c0005172:	09 c2                	or     edx,eax
c0005174:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005178:	83 c0 16             	add    eax,0x16
c000517b:	e8 70 ce ff ff       	call   c0001ff0 <st_dword>
c0005180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005184:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000518c:	e8 d0 dd ff ff       	call   c0002f61 <sync_fs>
c0005191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005195:	83 ec 0c             	sub    esp,0xc
c0005198:	53                   	push   ebx
c0005199:	e8 86 0c 00 00       	call   c0005e24 <ff_memfree>
c000519e:	83 c4 10             	add    esp,0x10
c00051a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051a5:	83 c4 54             	add    esp,0x54
c00051a8:	5b                   	pop    ebx
c00051a9:	5e                   	pop    esi
c00051aa:	c3                   	ret    

c00051ab <f_getlabel>:
c00051ab:	55                   	push   ebp
c00051ac:	31 c9                	xor    ecx,ecx
c00051ae:	57                   	push   edi
c00051af:	56                   	push   esi
c00051b0:	53                   	push   ebx
c00051b1:	83 ec 5c             	sub    esp,0x5c
c00051b4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b8:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051bc:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c0:	e8 c4 d4 ff ff       	call   c0002689 <mount_volume>
c00051c5:	85 c0                	test   eax,eax
c00051c7:	89 c3                	mov    ebx,eax
c00051c9:	0f 85 d9 00 00 00    	jne    c00052a8 <f_getlabel+0xfd>
c00051cf:	85 ff                	test   edi,edi
c00051d1:	0f 84 d1 00 00 00    	je     c00052a8 <f_getlabel+0xfd>
c00051d7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e3:	31 d2                	xor    edx,edx
c00051e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ed:	e8 1c e3 ff ff       	call   c000350e <dir_sdi>
c00051f2:	85 c0                	test   eax,eax
c00051f4:	89 c3                	mov    ebx,eax
c00051f6:	0f 85 a2 00 00 00    	jne    c000529e <f_getlabel+0xf3>
c00051fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005200:	ba 01 00 00 00       	mov    edx,0x1
c0005205:	e8 fe e6 ff ff       	call   c0003908 <dir_read>
c000520a:	85 c0                	test   eax,eax
c000520c:	89 c3                	mov    ebx,eax
c000520e:	0f 85 8a 00 00 00    	jne    c000529e <f_getlabel+0xf3>
c0005214:	31 f6                	xor    esi,esi
c0005216:	31 d2                	xor    edx,edx
c0005218:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000521c:	8d 6a 01             	lea    ebp,[edx+0x1]
c000521f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005223:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005227:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c000522c:	89 c8                	mov    eax,ecx
c000522e:	e8 13 ce ff ff       	call   c0002046 <dbc_1st>
c0005233:	85 c0                	test   eax,eax
c0005235:	74 19                	je     c0005250 <f_getlabel+0xa5>
c0005237:	83 fd 0b             	cmp    ebp,0xb
c000523a:	74 14                	je     c0005250 <f_getlabel+0xa5>
c000523c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005240:	c1 e1 08             	shl    ecx,0x8
c0005243:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005247:	8d 6a 02             	lea    ebp,[edx+0x2]
c000524a:	09 c1                	or     ecx,eax
c000524c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005250:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0005255:	52                   	push   edx
c0005256:	52                   	push   edx
c0005257:	68 b5 01 00 00       	push   0x1b5
c000525c:	50                   	push   eax
c000525d:	e8 76 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005262:	83 c4 10             	add    esp,0x10
c0005265:	0f b7 c0             	movzx  eax,ax
c0005268:	85 c0                	test   eax,eax
c000526a:	74 1f                	je     c000528b <f_getlabel+0xe0>
c000526c:	8d 14 37             	lea    edx,[edi+esi*1]
c000526f:	b9 04 00 00 00       	mov    ecx,0x4
c0005274:	e8 ab ce ff ff       	call   c0002124 <put_utf>
c0005279:	0f b6 c0             	movzx  eax,al
c000527c:	85 c0                	test   eax,eax
c000527e:	74 0b                	je     c000528b <f_getlabel+0xe0>
c0005280:	01 c6                	add    esi,eax
c0005282:	83 fd 0b             	cmp    ebp,0xb
c0005285:	74 06                	je     c000528d <f_getlabel+0xe2>
c0005287:	89 ea                	mov    edx,ebp
c0005289:	eb 8d                	jmp    c0005218 <f_getlabel+0x6d>
c000528b:	31 f6                	xor    esi,esi
c000528d:	01 fe                	add    esi,edi
c000528f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0005292:	39 f7                	cmp    edi,esi
c0005294:	74 12                	je     c00052a8 <f_getlabel+0xfd>
c0005296:	4e                   	dec    esi
c0005297:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c000529a:	74 f3                	je     c000528f <f_getlabel+0xe4>
c000529c:	eb 0a                	jmp    c00052a8 <f_getlabel+0xfd>
c000529e:	83 fb 04             	cmp    ebx,0x4
c00052a1:	75 05                	jne    c00052a8 <f_getlabel+0xfd>
c00052a3:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052a6:	31 db                	xor    ebx,ebx
c00052a8:	85 db                	test   ebx,ebx
c00052aa:	75 49                	jne    c00052f5 <f_getlabel+0x14a>
c00052ac:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b1:	74 42                	je     c00052f5 <f_getlabel+0x14a>
c00052b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052ba:	e8 6d d2 ff ff       	call   c000252c <move_window>
c00052bf:	85 c0                	test   eax,eax
c00052c1:	89 c3                	mov    ebx,eax
c00052c3:	75 30                	jne    c00052f5 <f_getlabel+0x14a>
c00052c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052c9:	b8 43 00 00 00       	mov    eax,0x43
c00052ce:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d1:	83 f9 03             	cmp    ecx,0x3
c00052d4:	74 10                	je     c00052e6 <f_getlabel+0x13b>
c00052d6:	83 f9 04             	cmp    ecx,0x4
c00052d9:	b8 64 00 00 00       	mov    eax,0x64
c00052de:	b9 27 00 00 00       	mov    ecx,0x27
c00052e3:	0f 45 c1             	cmovne eax,ecx
c00052e6:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052ea:	e8 e5 cc ff ff       	call   c0001fd4 <ld_dword>
c00052ef:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f3:	89 07                	mov    DWORD PTR [edi],eax
c00052f5:	83 c4 5c             	add    esp,0x5c
c00052f8:	89 d8                	mov    eax,ebx
c00052fa:	5b                   	pop    ebx
c00052fb:	5e                   	pop    esi
c00052fc:	5f                   	pop    edi
c00052fd:	5d                   	pop    ebp
c00052fe:	c3                   	ret    

c00052ff <f_setlabel>:
c00052ff:	57                   	push   edi
c0005300:	b9 02 00 00 00       	mov    ecx,0x2
c0005305:	56                   	push   esi
c0005306:	53                   	push   ebx
c0005307:	83 ec 50             	sub    esp,0x50
c000530a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000530e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005312:	e8 72 d3 ff ff       	call   c0002689 <mount_volume>
c0005317:	85 c0                	test   eax,eax
c0005319:	89 c6                	mov    esi,eax
c000531b:	0f 85 65 01 00 00    	jne    c0005486 <f_setlabel+0x187>
c0005321:	b9 0b 00 00 00       	mov    ecx,0xb
c0005326:	ba 20 00 00 00       	mov    edx,0x20
c000532b:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000532f:	31 db                	xor    ebx,ebx
c0005331:	e8 d2 cc ff ff       	call   c0002008 <mem_set>
c0005336:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000533a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000533d:	76 5d                	jbe    c000539c <f_setlabel+0x9d>
c000533f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005343:	e8 04 cd ff ff       	call   c000204c <tchar2uni>
c0005348:	3d ff ff 00 00       	cmp    eax,0xffff
c000534d:	76 0a                	jbe    c0005359 <f_setlabel+0x5a>
c000534f:	be 06 00 00 00       	mov    esi,0x6
c0005354:	e9 2d 01 00 00       	jmp    c0005486 <f_setlabel+0x187>
c0005359:	83 ec 0c             	sub    esp,0xc
c000535c:	50                   	push   eax
c000535d:	e8 ee 0b 00 00       	call   c0005f50 <ff_wtoupper>
c0005362:	5a                   	pop    edx
c0005363:	59                   	pop    ecx
c0005364:	68 b5 01 00 00       	push   0x1b5
c0005369:	50                   	push   eax
c000536a:	e8 cd 0a 00 00       	call   c0005e3c <ff_uni2oem>
c000536f:	83 c4 10             	add    esp,0x10
c0005372:	0f b7 f0             	movzx  esi,ax
c0005375:	85 f6                	test   esi,esi
c0005377:	89 f7                	mov    edi,esi
c0005379:	74 d4                	je     c000534f <f_setlabel+0x50>
c000537b:	89 f2                	mov    edx,esi
c000537d:	b8 10 f6 02 c0       	mov    eax,0xc002f610
c0005382:	e8 ae cc ff ff       	call   c0002035 <chk_chr>
c0005387:	85 c0                	test   eax,eax
c0005389:	75 c4                	jne    c000534f <f_setlabel+0x50>
c000538b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005391:	0f 87 c9 00 00 00    	ja     c0005460 <f_setlabel+0x161>
c0005397:	e9 e0 00 00 00       	jmp    c000547c <f_setlabel+0x17d>
c000539c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053a1:	74 ac                	je     c000534f <f_setlabel+0x50>
c00053a3:	85 db                	test   ebx,ebx
c00053a5:	74 0e                	je     c00053b5 <f_setlabel+0xb6>
c00053a7:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053ac:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053af:	75 04                	jne    c00053b5 <f_setlabel+0xb6>
c00053b1:	89 c3                	mov    ebx,eax
c00053b3:	eb ee                	jmp    c00053a3 <f_setlabel+0xa4>
c00053b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c1:	31 d2                	xor    edx,edx
c00053c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053cb:	e8 3e e1 ff ff       	call   c000350e <dir_sdi>
c00053d0:	85 c0                	test   eax,eax
c00053d2:	89 c6                	mov    esi,eax
c00053d4:	0f 85 ac 00 00 00    	jne    c0005486 <f_setlabel+0x187>
c00053da:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053de:	ba 01 00 00 00       	mov    edx,0x1
c00053e3:	e8 20 e5 ff ff       	call   c0003908 <dir_read>
c00053e8:	85 c0                	test   eax,eax
c00053ea:	75 18                	jne    c0005404 <f_setlabel+0x105>
c00053ec:	85 db                	test   ebx,ebx
c00053ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053f2:	74 0b                	je     c00053ff <f_setlabel+0x100>
c00053f4:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00053f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00053fd:	eb 47                	jmp    c0005446 <f_setlabel+0x147>
c00053ff:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005402:	eb 47                	jmp    c000544b <f_setlabel+0x14c>
c0005404:	83 f8 04             	cmp    eax,0x4
c0005407:	75 53                	jne    c000545c <f_setlabel+0x15d>
c0005409:	85 db                	test   ebx,ebx
c000540b:	74 79                	je     c0005486 <f_setlabel+0x187>
c000540d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005411:	ba 01 00 00 00       	mov    edx,0x1
c0005416:	e8 88 e4 ff ff       	call   c00038a3 <dir_alloc>
c000541b:	85 c0                	test   eax,eax
c000541d:	89 c6                	mov    esi,eax
c000541f:	75 65                	jne    c0005486 <f_setlabel+0x187>
c0005421:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005425:	b9 20 00 00 00       	mov    ecx,0x20
c000542a:	31 d2                	xor    edx,edx
c000542c:	e8 d7 cb ff ff       	call   c0002008 <mem_set>
c0005431:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005435:	b9 0b 00 00 00       	mov    ecx,0xb
c000543a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000543e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005442:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005446:	e8 a8 cb ff ff       	call   c0001ff3 <mem_cpy>
c000544b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000544f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005457:	e8 05 db ff ff       	call   c0002f61 <sync_fs>
c000545c:	89 c6                	mov    esi,eax
c000545e:	eb 26                	jmp    c0005486 <f_setlabel+0x187>
c0005460:	83 fb 09             	cmp    ebx,0x9
c0005463:	0f 87 e6 fe ff ff    	ja     c000534f <f_setlabel+0x50>
c0005469:	89 f0                	mov    eax,esi
c000546b:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c000546f:	43                   	inc    ebx
c0005470:	89 f8                	mov    eax,edi
c0005472:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005476:	43                   	inc    ebx
c0005477:	e9 ba fe ff ff       	jmp    c0005336 <f_setlabel+0x37>
c000547c:	83 fb 0a             	cmp    ebx,0xa
c000547f:	76 ef                	jbe    c0005470 <f_setlabel+0x171>
c0005481:	e9 c9 fe ff ff       	jmp    c000534f <f_setlabel+0x50>
c0005486:	83 c4 50             	add    esp,0x50
c0005489:	89 f0                	mov    eax,esi
c000548b:	5b                   	pop    ebx
c000548c:	5e                   	pop    esi
c000548d:	5f                   	pop    edi
c000548e:	c3                   	ret    

c000548f <f_expand>:
c000548f:	55                   	push   ebp
c0005490:	57                   	push   edi
c0005491:	56                   	push   esi
c0005492:	53                   	push   ebx
c0005493:	83 ec 2c             	sub    esp,0x2c
c0005496:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000549e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054a6:	89 d8                	mov    eax,ebx
c00054a8:	e8 d6 cf ff ff       	call   c0002483 <validate>
c00054ad:	85 c0                	test   eax,eax
c00054af:	89 c6                	mov    esi,eax
c00054b1:	0f 85 3b 01 00 00    	jne    c00055f2 <f_expand+0x163>
c00054b7:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054bb:	85 f6                	test   esi,esi
c00054bd:	0f 85 2f 01 00 00    	jne    c00055f2 <f_expand+0x163>
c00054c3:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054c8:	75 0a                	jne    c00054d4 <f_expand+0x45>
c00054ca:	be 07 00 00 00       	mov    esi,0x7
c00054cf:	e9 1e 01 00 00       	jmp    c00055f2 <f_expand+0x163>
c00054d4:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054d8:	75 f0                	jne    c00054ca <f_expand+0x3b>
c00054da:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054de:	74 ea                	je     c00054ca <f_expand+0x3b>
c00054e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054e4:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c00054e8:	c1 e7 09             	shl    edi,0x9
c00054eb:	8d 47 ff             	lea    eax,[edi-0x1]
c00054ee:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054f2:	0f 95 c0             	setne  al
c00054f5:	31 d2                	xor    edx,edx
c00054f7:	0f b6 c0             	movzx  eax,al
c00054fa:	89 c5                	mov    ebp,eax
c00054fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005500:	f7 f7                	div    edi
c0005502:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005505:	01 e8                	add    eax,ebp
c0005507:	83 ff 01             	cmp    edi,0x1
c000550a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000550e:	76 05                	jbe    c0005515 <f_expand+0x86>
c0005510:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c0005513:	77 05                	ja     c000551a <f_expand+0x8b>
c0005515:	bf 02 00 00 00       	mov    edi,0x2
c000551a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000551d:	89 fd                	mov    ebp,edi
c000551f:	31 c9                	xor    ecx,ecx
c0005521:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005525:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005527:	89 ea                	mov    edx,ebp
c0005529:	45                   	inc    ebp
c000552a:	e8 da de ff ff       	call   c0003409 <get_fat.isra.2>
c000552f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005533:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005537:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000553a:	77 05                	ja     c0005541 <f_expand+0xb2>
c000553c:	bd 02 00 00 00       	mov    ebp,0x2
c0005541:	83 f8 01             	cmp    eax,0x1
c0005544:	74 20                	je     c0005566 <f_expand+0xd7>
c0005546:	83 f8 ff             	cmp    eax,0xffffffff
c0005549:	74 25                	je     c0005570 <f_expand+0xe1>
c000554b:	85 c0                	test   eax,eax
c000554d:	75 09                	jne    c0005558 <f_expand+0xc9>
c000554f:	41                   	inc    ecx
c0005550:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005554:	75 07                	jne    c000555d <f_expand+0xce>
c0005556:	eb 1f                	jmp    c0005577 <f_expand+0xe8>
c0005558:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000555b:	31 c9                	xor    ecx,ecx
c000555d:	39 fd                	cmp    ebp,edi
c000555f:	75 c0                	jne    c0005521 <f_expand+0x92>
c0005561:	e9 64 ff ff ff       	jmp    c00054ca <f_expand+0x3b>
c0005566:	be 02 00 00 00       	mov    esi,0x2
c000556b:	e9 82 00 00 00       	jmp    c00055f2 <f_expand+0x163>
c0005570:	be 01 00 00 00       	mov    esi,0x1
c0005575:	eb 7b                	jmp    c00055f2 <f_expand+0x163>
c0005577:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000557c:	74 2b                	je     c00055a9 <f_expand+0x11a>
c000557e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005581:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	74 24                	je     c00055ad <f_expand+0x11e>
c0005589:	83 c9 ff             	or     ecx,0xffffffff
c000558c:	83 fd 01             	cmp    ebp,0x1
c000558f:	74 03                	je     c0005594 <f_expand+0x105>
c0005591:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005598:	89 fa                	mov    edx,edi
c000559a:	e8 e7 d3 ff ff       	call   c0002986 <put_fat>
c000559f:	85 c0                	test   eax,eax
c00055a1:	75 4d                	jne    c00055f0 <f_expand+0x161>
c00055a3:	89 f8                	mov    eax,edi
c00055a5:	4d                   	dec    ebp
c00055a6:	47                   	inc    edi
c00055a7:	eb dc                	jmp    c0005585 <f_expand+0xf6>
c00055a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055ac:	48                   	dec    eax
c00055ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055b1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055b6:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055b9:	74 37                	je     c00055f2 <f_expand+0x163>
c00055bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055c8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055cb:	83 c8 40             	or     eax,0x40
c00055ce:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055d1:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055d7:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055da:	39 c8                	cmp    eax,ecx
c00055dc:	77 14                	ja     c00055f2 <f_expand+0x163>
c00055de:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055e2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055e5:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055e8:	83 c8 01             	or     eax,0x1
c00055eb:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055ee:	eb 02                	jmp    c00055f2 <f_expand+0x163>
c00055f0:	89 c6                	mov    esi,eax
c00055f2:	83 c4 2c             	add    esp,0x2c
c00055f5:	89 f0                	mov    eax,esi
c00055f7:	5b                   	pop    ebx
c00055f8:	5e                   	pop    esi
c00055f9:	5f                   	pop    edi
c00055fa:	5d                   	pop    ebp
c00055fb:	c3                   	ret    

c00055fc <f_mkfs>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	be 0b 00 00 00       	mov    esi,0xb
c0005604:	53                   	push   ebx
c0005605:	83 ec 5c             	sub    esp,0x5c
c0005608:	8d 44 24 70          	lea    eax,[esp+0x70]
c000560c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005610:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005614:	e8 1e ce ff ff       	call   c0002437 <get_ldnumber>
c0005619:	85 c0                	test   eax,eax
c000561b:	0f 88 e0 07 00 00    	js     c0005e01 <f_mkfs+0x805>
c0005621:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005628:	85 d2                	test   edx,edx
c000562a:	74 03                	je     c000562f <f_mkfs+0x33>
c000562c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000562f:	85 db                	test   ebx,ebx
c0005631:	75 05                	jne    c0005638 <f_mkfs+0x3c>
c0005633:	bb 00 f6 02 c0       	mov    ebx,0xc002f600
c0005638:	0f b6 c0             	movzx  eax,al
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005642:	be 03 00 00 00       	mov    esi,0x3
c0005647:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000564b:	e8 29 c9 ff ff       	call   c0001f79 <disk_initialize>
c0005650:	83 c4 10             	add    esp,0x10
c0005653:	a8 01                	test   al,0x1
c0005655:	0f 85 a6 07 00 00    	jne    c0005e01 <f_mkfs+0x805>
c000565b:	a8 04                	test   al,0x4
c000565d:	be 0a 00 00 00       	mov    esi,0xa
c0005662:	0f 85 99 07 00 00    	jne    c0005e01 <f_mkfs+0x805>
c0005668:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000566b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000566f:	85 c0                	test   eax,eax
c0005671:	75 20                	jne    c0005693 <f_mkfs+0x97>
c0005673:	51                   	push   ecx
c0005674:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005678:	50                   	push   eax
c0005679:	6a 03                	push   0x3
c000567b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000567f:	e8 24 c9 ff ff       	call   c0001fa8 <disk_ioctl>
c0005684:	83 c4 10             	add    esp,0x10
c0005687:	85 c0                	test   eax,eax
c0005689:	74 08                	je     c0005693 <f_mkfs+0x97>
c000568b:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005693:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005697:	8d 42 ff             	lea    eax,[edx-0x1]
c000569a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000569f:	77 04                	ja     c00056a5 <f_mkfs+0xa9>
c00056a1:	85 c2                	test   edx,eax
c00056a3:	74 08                	je     c00056ad <f_mkfs+0xb1>
c00056a5:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056ad:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056b0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056b8:	48                   	dec    eax
c00056b9:	3c 01                	cmp    al,0x1
c00056bb:	76 05                	jbe    c00056c2 <f_mkfs+0xc6>
c00056bd:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056c9:	48                   	dec    eax
c00056ca:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056cf:	77 15                	ja     c00056e6 <f_mkfs+0xea>
c00056d1:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056d6:	b8 00 02 00 00       	mov    eax,0x200
c00056db:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c00056e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0xf2>
c00056e6:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c00056ee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056f1:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f7:	77 0f                	ja     c0005708 <f_mkfs+0x10c>
c00056f9:	8d 47 ff             	lea    eax,[edi-0x1]
c00056fc:	85 f8                	test   eax,edi
c00056fe:	b8 00 00 00 00       	mov    eax,0x0
c0005703:	0f 45 f8             	cmovne edi,eax
c0005706:	eb 02                	jmp    c000570a <f_mkfs+0x10e>
c0005708:	31 ff                	xor    edi,edi
c000570a:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005712:	77 0a                	ja     c000571e <f_mkfs+0x122>
c0005714:	be 11 00 00 00       	mov    esi,0x11
c0005719:	e9 e3 06 00 00       	jmp    c0005e01 <f_mkfs+0x805>
c000571e:	85 ed                	test   ebp,ebp
c0005720:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005722:	89 eb                	mov    ebx,ebp
c0005724:	75 1e                	jne    c0005744 <f_mkfs+0x148>
c0005726:	83 ec 0c             	sub    esp,0xc
c0005729:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005730:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005735:	50                   	push   eax
c0005736:	e8 d1 06 00 00       	call   c0005e0c <ff_memalloc>
c000573b:	83 c4 10             	add    esp,0x10
c000573e:	85 c0                	test   eax,eax
c0005740:	89 c3                	mov    ebx,eax
c0005742:	74 d0                	je     c0005714 <f_mkfs+0x118>
c0005744:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000574c:	52                   	push   edx
c000574d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005751:	50                   	push   eax
c0005752:	6a 01                	push   0x1
c0005754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005758:	e8 4b c8 ff ff       	call   c0001fa8 <disk_ioctl>
c000575d:	83 c4 10             	add    esp,0x10
c0005760:	85 c0                	test   eax,eax
c0005762:	0f 85 42 06 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005768:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005770:	89 f0                	mov    eax,esi
c0005772:	83 e0 08             	and    eax,0x8
c0005775:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005779:	75 18                	jne    c0005793 <f_mkfs+0x197>
c000577b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000577f:	83 f8 3f             	cmp    eax,0x3f
c0005782:	76 0f                	jbe    c0005793 <f_mkfs+0x197>
c0005784:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c000578c:	83 e8 3f             	sub    eax,0x3f
c000578f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005793:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005797:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000579b:	83 f8 7f             	cmp    eax,0x7f
c000579e:	0f 86 5f 02 00 00    	jbe    c0005a03 <f_mkfs+0x407>
c00057a4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057aa:	b9 80 00 00 00       	mov    ecx,0x80
c00057af:	77 05                	ja     c00057b6 <f_mkfs+0x1ba>
c00057b1:	c1 ef 09             	shr    edi,0x9
c00057b4:	89 f9                	mov    ecx,edi
c00057b6:	89 f0                	mov    eax,esi
c00057b8:	89 f7                	mov    edi,esi
c00057ba:	83 e0 01             	and    eax,0x1
c00057bd:	83 e7 02             	and    edi,0x2
c00057c0:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057c4:	0f b6 c0             	movzx  eax,al
c00057c7:	74 0a                	je     c00057d3 <f_mkfs+0x1d7>
c00057c9:	85 c0                	test   eax,eax
c00057cb:	0f 84 53 01 00 00    	je     c0005924 <f_mkfs+0x328>
c00057d1:	eb 37                	jmp    c000580a <f_mkfs+0x20e>
c00057d3:	85 c0                	test   eax,eax
c00057d5:	be 13 00 00 00       	mov    esi,0x13
c00057da:	75 2e                	jne    c000580a <f_mkfs+0x20e>
c00057dc:	e9 e0 05 00 00       	jmp    c0005dc1 <f_mkfs+0x7c5>
c00057e1:	83 f8 02             	cmp    eax,0x2
c00057e4:	0f 85 11 02 00 00    	jne    c00059fb <f_mkfs+0x3ff>
c00057ea:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057f0:	0f 86 e8 01 00 00    	jbe    c00059de <f_mkfs+0x3e2>
c00057f6:	85 c9                	test   ecx,ecx
c00057f8:	0f 85 d5 05 00 00    	jne    c0005dd3 <f_mkfs+0x7d7>
c00057fe:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005801:	83 f9 40             	cmp    ecx,0x40
c0005804:	0f 87 d9 05 00 00    	ja     c0005de3 <f_mkfs+0x7e7>
c000580a:	85 c9                	test   ecx,ecx
c000580c:	89 cf                	mov    edi,ecx
c000580e:	75 1c                	jne    c000582c <f_mkfs+0x230>
c0005810:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005814:	b8 e0 f5 02 c0       	mov    eax,0xc002f5e0
c0005819:	bf 01 00 00 00       	mov    edi,0x1
c000581e:	c1 ee 0c             	shr    esi,0xc
c0005821:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005824:	85 d2                	test   edx,edx
c0005826:	0f 85 67 01 00 00    	jne    c0005993 <f_mkfs+0x397>
c000582c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005830:	31 d2                	xor    edx,edx
c0005832:	f7 f7                	div    edi
c0005834:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005839:	0f 86 66 01 00 00    	jbe    c00059a5 <f_mkfs+0x3a9>
c000583f:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005844:	83 c0 02             	add    eax,0x2
c0005847:	01 c0                	add    eax,eax
c0005849:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005851:	05 ff 01 00 00       	add    eax,0x1ff
c0005856:	c1 e8 09             	shr    eax,0x9
c0005859:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000585d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005861:	c1 e0 05             	shl    eax,0x5
c0005864:	c1 e8 09             	shr    eax,0x9
c0005867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000586b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005870:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005878:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000587c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005884:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005889:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000588d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005891:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005899:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000589d:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058a1:	f7 d8                	neg    eax
c00058a3:	21 c6                	and    esi,eax
c00058a5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058aa:	29 d6                	sub    esi,edx
c00058ac:	83 f8 03             	cmp    eax,0x3
c00058af:	0f 85 03 01 00 00    	jne    c00059b8 <f_mkfs+0x3bc>
c00058b5:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058b9:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058bd:	89 f8                	mov    eax,edi
c00058bf:	c1 e0 04             	shl    eax,0x4
c00058c2:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058c6:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058ca:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058ce:	0f 82 2f 01 00 00    	jb     c0005a03 <f_mkfs+0x407>
c00058d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058d8:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058dc:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058e0:	89 c2                	mov    edx,eax
c00058e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058e6:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058eb:	29 c2                	sub    edx,eax
c00058ed:	89 d0                	mov    eax,edx
c00058ef:	31 d2                	xor    edx,edx
c00058f1:	f7 f7                	div    edi
c00058f3:	89 c6                	mov    esi,eax
c00058f5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058fa:	83 f8 03             	cmp    eax,0x3
c00058fd:	0f 85 de fe ff ff    	jne    c00057e1 <f_mkfs+0x1e5>
c0005903:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005909:	0f 87 03 01 00 00    	ja     c0005a12 <f_mkfs+0x416>
c000590f:	85 c9                	test   ecx,ecx
c0005911:	0f 85 ec 00 00 00    	jne    c0005a03 <f_mkfs+0x407>
c0005917:	83 ff 01             	cmp    edi,0x1
c000591a:	0f 86 e3 00 00 00    	jbe    c0005a03 <f_mkfs+0x407>
c0005920:	d1 ef                	shr    edi,1
c0005922:	89 f9                	mov    ecx,edi
c0005924:	85 c9                	test   ecx,ecx
c0005926:	89 ce                	mov    esi,ecx
c0005928:	75 25                	jne    c000594f <f_mkfs+0x353>
c000592a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000592e:	b8 f0 f5 02 c0       	mov    eax,0xc002f5f0
c0005933:	b9 01 00 00 00       	mov    ecx,0x1
c0005938:	c1 ee 11             	shr    esi,0x11
c000593b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000593e:	85 d2                	test   edx,edx
c0005940:	74 0b                	je     c000594d <f_mkfs+0x351>
c0005942:	83 c0 02             	add    eax,0x2
c0005945:	39 f2                	cmp    edx,esi
c0005947:	77 04                	ja     c000594d <f_mkfs+0x351>
c0005949:	01 c9                	add    ecx,ecx
c000594b:	eb ee                	jmp    c000593b <f_mkfs+0x33f>
c000594d:	31 f6                	xor    esi,esi
c000594f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005953:	31 d2                	xor    edx,edx
c0005955:	f7 f1                	div    ecx
c0005957:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000595e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005963:	c1 ea 09             	shr    edx,0x9
c0005966:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000596b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000596f:	0f 87 8e 00 00 00    	ja     c0005a03 <f_mkfs+0x407>
c0005975:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000597d:	89 cf                	mov    edi,ecx
c000597f:	89 f1                	mov    ecx,esi
c0005981:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005989:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000598e:	e9 d8 fe ff ff       	jmp    c000586b <f_mkfs+0x26f>
c0005993:	83 c0 02             	add    eax,0x2
c0005996:	39 f2                	cmp    edx,esi
c0005998:	0f 87 8e fe ff ff    	ja     c000582c <f_mkfs+0x230>
c000599e:	01 ff                	add    edi,edi
c00059a0:	e9 7c fe ff ff       	jmp    c0005821 <f_mkfs+0x225>
c00059a5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059aa:	8d 04 40             	lea    eax,[eax+eax*2]
c00059ad:	40                   	inc    eax
c00059ae:	d1 e8                	shr    eax,1
c00059b0:	83 c0 03             	add    eax,0x3
c00059b3:	e9 91 fe ff ff       	jmp    c0005849 <f_mkfs+0x24d>
c00059b8:	31 d2                	xor    edx,edx
c00059ba:	89 f0                	mov    eax,esi
c00059bc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c0:	85 d2                	test   edx,edx
c00059c2:	74 09                	je     c00059cd <f_mkfs+0x3d1>
c00059c4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059c8:	4e                   	dec    esi
c00059c9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059cd:	89 f0                	mov    eax,esi
c00059cf:	31 d2                	xor    edx,edx
c00059d1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059d5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059d9:	e9 df fe ff ff       	jmp    c00058bd <f_mkfs+0x2c1>
c00059de:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059e4:	77 2c                	ja     c0005a12 <f_mkfs+0x416>
c00059e6:	85 c9                	test   ecx,ecx
c00059e8:	75 19                	jne    c0005a03 <f_mkfs+0x407>
c00059ea:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059ed:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059f3:	0f 86 11 fe ff ff    	jbe    c000580a <f_mkfs+0x20e>
c00059f9:	eb 08                	jmp    c0005a03 <f_mkfs+0x407>
c00059fb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a01:	76 0a                	jbe    c0005a0d <f_mkfs+0x411>
c0005a03:	be 0e 00 00 00       	mov    esi,0xe
c0005a08:	e9 b4 03 00 00       	jmp    c0005dc1 <f_mkfs+0x7c5>
c0005a0d:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a12:	31 d2                	xor    edx,edx
c0005a14:	b9 00 02 00 00       	mov    ecx,0x200
c0005a19:	89 d8                	mov    eax,ebx
c0005a1b:	e8 e8 c5 ff ff       	call   c0002008 <mem_set>
c0005a20:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a25:	ba a2 f5 02 c0       	mov    edx,0xc002f5a2
c0005a2a:	89 d8                	mov    eax,ebx
c0005a2c:	e8 c2 c5 ff ff       	call   c0001ff3 <mem_cpy>
c0005a31:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a34:	ba 00 02 00 00       	mov    edx,0x200
c0005a39:	e8 ae c5 ff ff       	call   c0001fec <st_word>
c0005a3e:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a43:	89 f8                	mov    eax,edi
c0005a45:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a48:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a4b:	e8 9c c5 ff ff       	call   c0001fec <st_word>
c0005a50:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a54:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a57:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a5c:	83 f8 03             	cmp    eax,0x3
c0005a5f:	b8 00 00 00 00       	mov    eax,0x0
c0005a64:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a6d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a74:	e8 73 c5 ff ff       	call   c0001fec <st_word>
c0005a79:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a7d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a83:	77 0a                	ja     c0005a8f <f_mkfs+0x493>
c0005a85:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a88:	e8 5f c5 ff ff       	call   c0001fec <st_word>
c0005a8d:	eb 08                	jmp    c0005a97 <f_mkfs+0x49b>
c0005a8f:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a92:	e8 59 c5 ff ff       	call   c0001ff0 <st_dword>
c0005a97:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a9b:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a9e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005aa3:	e8 44 c5 ff ff       	call   c0001fec <st_word>
c0005aa8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005aab:	ba ff 00 00 00       	mov    edx,0xff
c0005ab0:	e8 37 c5 ff ff       	call   c0001fec <st_word>
c0005ab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ab9:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005abc:	e8 2f c5 ff ff       	call   c0001ff0 <st_dword>
c0005ac1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ac6:	83 f8 03             	cmp    eax,0x3
c0005ac9:	75 57                	jne    c0005b22 <f_mkfs+0x526>
c0005acb:	8d 43 43             	lea    eax,[ebx+0x43]
c0005ace:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ad3:	e8 18 c5 ff ff       	call   c0001ff0 <st_dword>
c0005ad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005adc:	8d 43 24             	lea    eax,[ebx+0x24]
c0005adf:	e8 0c c5 ff ff       	call   c0001ff0 <st_dword>
c0005ae4:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ae7:	ba 02 00 00 00       	mov    edx,0x2
c0005aec:	e8 ff c4 ff ff       	call   c0001ff0 <st_dword>
c0005af1:	8d 43 30             	lea    eax,[ebx+0x30]
c0005af4:	ba 01 00 00 00       	mov    edx,0x1
c0005af9:	e8 ee c4 ff ff       	call   c0001fec <st_word>
c0005afe:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b01:	ba 06 00 00 00       	mov    edx,0x6
c0005b06:	e8 e1 c4 ff ff       	call   c0001fec <st_word>
c0005b0b:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b0e:	b9 13 00 00 00       	mov    ecx,0x13
c0005b13:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b17:	ba ae f5 02 c0       	mov    edx,0xc002f5ae
c0005b1c:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b20:	eb 2f                	jmp    c0005b51 <f_mkfs+0x555>
c0005b22:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b25:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b2a:	e8 c1 c4 ff ff       	call   c0001ff0 <st_dword>
c0005b2f:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b34:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b37:	e8 b0 c4 ff ff       	call   c0001fec <st_word>
c0005b3c:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b3f:	b9 13 00 00 00       	mov    ecx,0x13
c0005b44:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b48:	ba c2 f5 02 c0       	mov    edx,0xc002f5c2
c0005b4d:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b51:	e8 9d c4 ff ff       	call   c0001ff3 <mem_cpy>
c0005b56:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b5c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b65:	e8 82 c4 ff ff       	call   c0001fec <st_word>
c0005b6a:	6a 01                	push   0x1
c0005b6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b70:	53                   	push   ebx
c0005b71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b75:	e8 18 c4 ff ff       	call   c0001f92 <disk_write>
c0005b7a:	83 c4 10             	add    esp,0x10
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	0f 85 25 02 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005b85:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b8a:	83 f8 03             	cmp    eax,0x3
c0005b8d:	0f 85 98 00 00 00    	jne    c0005c2b <f_mkfs+0x62f>
c0005b93:	6a 01                	push   0x1
c0005b95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b99:	83 c0 06             	add    eax,0x6
c0005b9c:	50                   	push   eax
c0005b9d:	53                   	push   ebx
c0005b9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ba2:	e8 eb c3 ff ff       	call   c0001f92 <disk_write>
c0005ba7:	b9 00 02 00 00       	mov    ecx,0x200
c0005bac:	31 d2                	xor    edx,edx
c0005bae:	89 d8                	mov    eax,ebx
c0005bb0:	e8 53 c4 ff ff       	call   c0002008 <mem_set>
c0005bb5:	ba 52 52 61 41       	mov    edx,0x41615252
c0005bba:	89 d8                	mov    eax,ebx
c0005bbc:	e8 2f c4 ff ff       	call   c0001ff0 <st_dword>
c0005bc1:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bc7:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bcc:	e8 1f c4 ff ff       	call   c0001ff0 <st_dword>
c0005bd1:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bd4:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bda:	e8 11 c4 ff ff       	call   c0001ff0 <st_dword>
c0005bdf:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005be5:	ba 02 00 00 00       	mov    edx,0x2
c0005bea:	e8 01 c4 ff ff       	call   c0001ff0 <st_dword>
c0005bef:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005bf5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005bfa:	e8 ed c3 ff ff       	call   c0001fec <st_word>
c0005bff:	6a 01                	push   0x1
c0005c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c05:	83 c0 07             	add    eax,0x7
c0005c08:	50                   	push   eax
c0005c09:	53                   	push   ebx
c0005c0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c0e:	e8 7f c3 ff ff       	call   c0001f92 <disk_write>
c0005c13:	83 c4 20             	add    esp,0x20
c0005c16:	6a 01                	push   0x1
c0005c18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c1c:	40                   	inc    eax
c0005c1d:	50                   	push   eax
c0005c1e:	53                   	push   ebx
c0005c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c23:	e8 6a c3 ff ff       	call   c0001f92 <disk_write>
c0005c28:	83 c4 10             	add    esp,0x10
c0005c2b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c2f:	31 d2                	xor    edx,edx
c0005c31:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c35:	c1 e8 09             	shr    eax,0x9
c0005c38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c3c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 bf c3 ff ff       	call   c0002008 <mem_set>
c0005c49:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c4e:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c5b:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c64:	83 f8 01             	cmp    eax,0x1
c0005c67:	0f 44 d1             	cmove  edx,ecx
c0005c6a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c6e:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c73:	75 21                	jne    c0005c96 <f_mkfs+0x69a>
c0005c75:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c7a:	89 d8                	mov    eax,ebx
c0005c7c:	e8 6f c3 ff ff       	call   c0001ff0 <st_dword>
c0005c81:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c84:	83 ca ff             	or     edx,0xffffffff
c0005c87:	e8 64 c3 ff ff       	call   c0001ff0 <st_dword>
c0005c8c:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c8f:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c94:	eb 06                	jmp    c0005c9c <f_mkfs+0x6a0>
c0005c96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005c9a:	89 d8                	mov    eax,ebx
c0005c9c:	e8 4f c3 ff ff       	call   c0001ff0 <st_dword>
c0005ca1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ca9:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cad:	0f 46 c6             	cmovbe eax,esi
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	50                   	push   eax
c0005cb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb9:	53                   	push   ebx
c0005cba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cbe:	e8 cf c2 ff ff       	call   c0001f92 <disk_write>
c0005cc3:	83 c4 10             	add    esp,0x10
c0005cc6:	85 c0                	test   eax,eax
c0005cc8:	0f 85 dc 00 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005cce:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd3:	31 d2                	xor    edx,edx
c0005cd5:	89 d8                	mov    eax,ebx
c0005cd7:	e8 2c c3 ff ff       	call   c0002008 <mem_set>
c0005cdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ce0:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005ce4:	29 ce                	sub    esi,ecx
c0005ce6:	75 bd                	jne    c0005ca5 <f_mkfs+0x6a9>
c0005ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005cf4:	40                   	inc    eax
c0005cf5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf9:	0f 87 6f ff ff ff    	ja     c0005c6e <f_mkfs+0x672>
c0005cff:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d04:	83 f8 03             	cmp    eax,0x3
c0005d07:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d10:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d14:	0f 46 f7             	cmovbe esi,edi
c0005d17:	56                   	push   esi
c0005d18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d1c:	53                   	push   ebx
c0005d1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d21:	e8 6c c2 ff ff       	call   c0001f92 <disk_write>
c0005d26:	83 c4 10             	add    esp,0x10
c0005d29:	85 c0                	test   eax,eax
c0005d2b:	75 7d                	jne    c0005daa <f_mkfs+0x7ae>
c0005d2d:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d31:	29 f7                	sub    edi,esi
c0005d33:	75 d7                	jne    c0005d0c <f_mkfs+0x710>
c0005d35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d3a:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3f:	83 f8 03             	cmp    eax,0x3
c0005d42:	74 1e                	je     c0005d62 <f_mkfs+0x766>
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	b9 06 00 00 00       	mov    ecx,0x6
c0005d51:	77 0f                	ja     c0005d62 <f_mkfs+0x766>
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	b9 04 00 00 00       	mov    ecx,0x4
c0005d5b:	74 05                	je     c0005d62 <f_mkfs+0x766>
c0005d5d:	b9 01 00 00 00       	mov    ecx,0x1
c0005d62:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d67:	75 2a                	jne    c0005d93 <f_mkfs+0x797>
c0005d69:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005d7c:	53                   	push   ebx
c0005d7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d81:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d85:	e8 87 d2 ff ff       	call   c0003011 <create_partition>
c0005d8a:	83 c4 10             	add    esp,0x10
c0005d8d:	85 c0                	test   eax,eax
c0005d8f:	89 c6                	mov    esi,eax
c0005d91:	75 2e                	jne    c0005dc1 <f_mkfs+0x7c5>
c0005d93:	50                   	push   eax
c0005d94:	31 f6                	xor    esi,esi
c0005d96:	6a 00                	push   0x0
c0005d98:	6a 00                	push   0x0
c0005d9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d9e:	e8 05 c2 ff ff       	call   c0001fa8 <disk_ioctl>
c0005da3:	83 c4 10             	add    esp,0x10
c0005da6:	85 c0                	test   eax,eax
c0005da8:	74 17                	je     c0005dc1 <f_mkfs+0x7c5>
c0005daa:	85 ed                	test   ebp,ebp
c0005dac:	75 0c                	jne    c0005dba <f_mkfs+0x7be>
c0005dae:	83 ec 0c             	sub    esp,0xc
c0005db1:	53                   	push   ebx
c0005db2:	e8 6d 00 00 00       	call   c0005e24 <ff_memfree>
c0005db7:	83 c4 10             	add    esp,0x10
c0005dba:	be 01 00 00 00       	mov    esi,0x1
c0005dbf:	eb 40                	jmp    c0005e01 <f_mkfs+0x805>
c0005dc1:	85 ed                	test   ebp,ebp
c0005dc3:	75 3c                	jne    c0005e01 <f_mkfs+0x805>
c0005dc5:	83 ec 0c             	sub    esp,0xc
c0005dc8:	53                   	push   ebx
c0005dc9:	e8 56 00 00 00       	call   c0005e24 <ff_memfree>
c0005dce:	83 c4 10             	add    esp,0x10
c0005dd1:	eb 2e                	jmp    c0005e01 <f_mkfs+0x805>
c0005dd3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd8:	0f 85 46 fb ff ff    	jne    c0005924 <f_mkfs+0x328>
c0005dde:	e9 20 fc ff ff       	jmp    c0005a03 <f_mkfs+0x407>
c0005de3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de8:	0f 85 3c fb ff ff    	jne    c000592a <f_mkfs+0x32e>
c0005dee:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df4:	89 cf                	mov    edi,ecx
c0005df6:	0f 86 30 fa ff ff    	jbe    c000582c <f_mkfs+0x230>
c0005dfc:	e9 02 fc ff ff       	jmp    c0005a03 <f_mkfs+0x407>
c0005e01:	83 c4 5c             	add    esp,0x5c
c0005e04:	89 f0                	mov    eax,esi
c0005e06:	5b                   	pop    ebx
c0005e07:	5e                   	pop    esi
c0005e08:	5f                   	pop    edi
c0005e09:	5d                   	pop    ebp
c0005e0a:	c3                   	ret    
c0005e0b:	90                   	nop

c0005e0c <ff_memalloc>:
c0005e0c:	83 ec 0c             	sub    esp,0xc
c0005e0f:	83 ec 0c             	sub    esp,0xc
c0005e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e16:	e8 7c 06 01 00       	call   c0016497 <malloc>
c0005e1b:	83 c4 10             	add    esp,0x10
c0005e1e:	83 c4 0c             	add    esp,0xc
c0005e21:	c3                   	ret    
c0005e22:	66 90                	xchg   ax,ax

c0005e24 <ff_memfree>:
c0005e24:	83 ec 0c             	sub    esp,0xc
c0005e27:	83 ec 0c             	sub    esp,0xc
c0005e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2e:	e8 74 06 01 00       	call   c00164a7 <free>
c0005e33:	83 c4 10             	add    esp,0x10
c0005e36:	90                   	nop
c0005e37:	83 c4 0c             	add    esp,0xc
c0005e3a:	c3                   	ret    
c0005e3b:	90                   	nop

c0005e3c <ff_uni2oem>:
c0005e3c:	83 ec 14             	sub    esp,0x14
c0005e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e43:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e47:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4e:	c7 44 24 0c e0 f9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f9e0
c0005e56:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e5b:	77 0b                	ja     c0005e68 <ff_uni2oem+0x2c>
c0005e5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e61:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e66:	eb 64                	jmp    c0005ecc <ff_uni2oem+0x90>
c0005e68:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e70:	77 5a                	ja     c0005ecc <ff_uni2oem+0x90>
c0005e72:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e76:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e7b:	75 4f                	jne    c0005ecc <ff_uni2oem+0x90>
c0005e7d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e84:	eb 12                	jmp    c0005e98 <ff_uni2oem+0x5c>
c0005e86:	66 90                	xchg   ax,ax
c0005e88:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e8d:	83 c0 01             	add    eax,0x1
c0005e90:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e95:	8d 76 00             	lea    esi,[esi+0x0]
c0005e98:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e9d:	83 f8 7f             	cmp    eax,0x7f
c0005ea0:	77 1a                	ja     c0005ebc <ff_uni2oem+0x80>
c0005ea2:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea7:	8d 14 00             	lea    edx,[eax+eax*1]
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	01 d0                	add    eax,edx
c0005eb0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb3:	0f b7 c0             	movzx  eax,ax
c0005eb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eba:	75 cc                	jne    c0005e88 <ff_uni2oem+0x4c>
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 e0 f9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f9e0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f38:	01 d0                	add    eax,edx
c0005f3a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f42:	66 90                	xchg   ax,ax
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 a7 01 00 00    	ja     c0006108 <ff_wtoupper+0x1b8>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 e0 f7 02 c0       	mov    eax,0xc002f7e0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 20 f7 02 c0       	mov    eax,0xc002f720
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 50 01 00 00    	je     c00060fc <ff_wtoupper+0x1ac>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 3e 01 00 00    	jb     c00060fc <ff_wtoupper+0x1ac>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d4 00 00 00    	jge    c00060d8 <ff_wtoupper+0x188>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 e6 00 00 00    	ja     c00060f8 <ff_wtoupper+0x1a8>
c0006012:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	8d 14 00             	lea    edx,[eax+eax*1]
c000602d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006031:	01 d0                	add    eax,edx
c0006033:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006036:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603b:	e9 94 00 00 00       	jmp    c00060d4 <ff_wtoupper+0x184>
c0006040:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006049:	89 d1                	mov    ecx,edx
c000604b:	29 c1                	sub    ecx,eax
c000604d:	89 c8                	mov    eax,ecx
c000604f:	83 e0 01             	and    eax,0x1
c0006052:	89 c2                	mov    edx,eax
c0006054:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006059:	29 d0                	sub    eax,edx
c000605b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006060:	eb 72                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006062:	66 90                	xchg   ax,ax
c0006064:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006069:	83 e8 10             	sub    eax,0x10
c000606c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006071:	eb 61                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006073:	90                   	nop
c0006074:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006079:	83 e8 20             	sub    eax,0x20
c000607c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006081:	eb 51                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006083:	90                   	nop
c0006084:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006089:	83 e8 30             	sub    eax,0x30
c000608c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006091:	eb 41                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006093:	90                   	nop
c0006094:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006099:	83 e8 1a             	sub    eax,0x1a
c000609c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a1:	eb 31                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060a3:	90                   	nop
c00060a4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a9:	83 c0 08             	add    eax,0x8
c00060ac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b1:	eb 21                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060b3:	90                   	nop
c00060b4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b9:	83 e8 50             	sub    eax,0x50
c00060bc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c1:	eb 11                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060c3:	90                   	nop
c00060c4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c9:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d3:	90                   	nop
c00060d4:	eb 22                	jmp    c00060f8 <ff_wtoupper+0x1a8>
c00060d6:	66 90                	xchg   ax,ax
c00060d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060dd:	85 c0                	test   eax,eax
c00060df:	0f 85 a7 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ea:	d1 e0                	shl    eax,1
c00060ec:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f0:	e9 97 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f5:	8d 76 00             	lea    esi,[esi+0x0]
c00060f8:	90                   	nop
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006105:	8d 76 00             	lea    esi,[esi+0x0]
c0006108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000610c:	83 c4 10             	add    esp,0x10
c000610f:	c3                   	ret    

c0006110 <utf2ucs>:
c0006110:	57                   	push   edi
c0006111:	31 c9                	xor    ecx,ecx
c0006113:	56                   	push   esi
c0006114:	89 d7                	mov    edi,edx
c0006116:	53                   	push   ebx
c0006117:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611b:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c000611f:	89 de                	mov    esi,ebx
c0006121:	c1 fe 08             	sar    esi,0x8
c0006124:	89 f2                	mov    edx,esi
c0006126:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006129:	41                   	inc    ecx
c000612a:	85 db                	test   ebx,ebx
c000612c:	75 e9                	jne    c0006117 <utf2ucs+0x7>
c000612e:	5b                   	pop    ebx
c000612f:	5e                   	pop    esi
c0006130:	5f                   	pop    edi
c0006131:	c3                   	ret    

c0006132 <ucs2utfn>:
c0006132:	83 e1 fe             	and    ecx,0xfffffffe
c0006135:	01 d1                	add    ecx,edx
c0006137:	39 d1                	cmp    ecx,edx
c0006139:	75 04                	jne    c000613f <ucs2utfn+0xd>
c000613b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000613e:	c3                   	ret    
c000613f:	57                   	push   edi
c0006140:	56                   	push   esi
c0006141:	53                   	push   ebx
c0006142:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006145:	83 c2 02             	add    edx,0x2
c0006148:	89 de                	mov    esi,ebx
c000614a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000614e:	c1 e6 08             	shl    esi,0x8
c0006151:	09 f3                	or     ebx,esi
c0006153:	83 fb 3b             	cmp    ebx,0x3b
c0006156:	74 50                	je     c00061a8 <ucs2utfn+0x76>
c0006158:	83 fb 7f             	cmp    ebx,0x7f
c000615b:	7f 05                	jg     c0006162 <ucs2utfn+0x30>
c000615d:	88 18                	mov    BYTE PTR [eax],bl
c000615f:	40                   	inc    eax
c0006160:	eb 42                	jmp    c00061a4 <ucs2utfn+0x72>
c0006162:	89 df                	mov    edi,ebx
c0006164:	89 de                	mov    esi,ebx
c0006166:	c1 fe 06             	sar    esi,0x6
c0006169:	83 e7 3f             	and    edi,0x3f
c000616c:	83 cf 80             	or     edi,0xffffff80
c000616f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006175:	7f 12                	jg     c0006189 <ucs2utfn+0x57>
c0006177:	83 ce c0             	or     esi,0xffffffc0
c000617a:	83 c0 02             	add    eax,0x2
c000617d:	89 f3                	mov    ebx,esi
c000617f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006182:	89 fb                	mov    ebx,edi
c0006184:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006187:	eb 1b                	jmp    c00061a4 <ucs2utfn+0x72>
c0006189:	c1 fb 0c             	sar    ebx,0xc
c000618c:	83 e6 3f             	and    esi,0x3f
c000618f:	83 cb e0             	or     ebx,0xffffffe0
c0006192:	83 ce 80             	or     esi,0xffffff80
c0006195:	88 18                	mov    BYTE PTR [eax],bl
c0006197:	89 f3                	mov    ebx,esi
c0006199:	83 c0 03             	add    eax,0x3
c000619c:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000619f:	89 fb                	mov    ebx,edi
c00061a1:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a4:	39 d1                	cmp    ecx,edx
c00061a6:	75 9a                	jne    c0006142 <ucs2utfn+0x10>
c00061a8:	5b                   	pop    ebx
c00061a9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061ac:	5e                   	pop    esi
c00061ad:	5f                   	pop    edi
c00061ae:	c3                   	ret    

c00061af <isjoliet>:
c00061af:	31 d2                	xor    edx,edx
c00061b1:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b4:	75 26                	jne    c00061dc <isjoliet+0x2d>
c00061b6:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061ba:	75 20                	jne    c00061dc <isjoliet+0x2d>
c00061bc:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c0:	ba 02 00 00 00       	mov    edx,0x2
c00061c5:	83 f8 43             	cmp    eax,0x43
c00061c8:	74 12                	je     c00061dc <isjoliet+0x2d>
c00061ca:	83 f8 45             	cmp    eax,0x45
c00061cd:	ba 03 00 00 00       	mov    edx,0x3
c00061d2:	74 08                	je     c00061dc <isjoliet+0x2d>
c00061d4:	31 d2                	xor    edx,edx
c00061d6:	83 f8 40             	cmp    eax,0x40
c00061d9:	0f 94 c2             	sete   dl
c00061dc:	89 d0                	mov    eax,edx
c00061de:	c3                   	ret    

c00061df <htohl_32>:
c00061df:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e1:	c3                   	ret    

c00061e2 <iso_733>:
c00061e2:	eb fb                	jmp    c00061df <htohl_32>

c00061e4 <bgrad_cache>:
c00061e4:	83 fa 0e             	cmp    edx,0xe
c00061e7:	77 16                	ja     c00061ff <bgrad_cache+0x1b>
c00061e9:	53                   	push   ebx
c00061ea:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061ed:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f1:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f4:	42                   	inc    edx
c00061f5:	83 fa 0f             	cmp    edx,0xf
c00061f8:	75 f3                	jne    c00061ed <bgrad_cache+0x9>
c00061fa:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00061fd:	5b                   	pop    ebx
c00061fe:	c3                   	ret    
c00061ff:	c3                   	ret    

c0006200 <ucscompare>:
c0006200:	55                   	push   ebp
c0006201:	57                   	push   edi
c0006202:	89 c7                	mov    edi,eax
c0006204:	56                   	push   esi
c0006205:	89 d6                	mov    esi,edx
c0006207:	53                   	push   ebx
c0006208:	31 d2                	xor    edx,edx
c000620a:	83 ec 1c             	sub    esp,0x1c
c000620d:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006211:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006216:	c1 e3 08             	shl    ebx,0x8
c0006219:	09 c3                	or     ebx,eax
c000621b:	39 ca                	cmp    edx,ecx
c000621d:	7d 42                	jge    c0006261 <ucscompare+0x61>
c000621f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000622b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006230:	c1 e0 08             	shl    eax,0x8
c0006233:	09 e8                	or     eax,ebp
c0006235:	83 f8 3b             	cmp    eax,0x3b
c0006238:	74 27                	je     c0006261 <ucscompare+0x61>
c000623a:	83 ec 0c             	sub    esp,0xc
c000623d:	50                   	push   eax
c000623e:	e8 3d a7 ff ff       	call   c0000980 <tolower>
c0006243:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006246:	89 c5                	mov    ebp,eax
c0006248:	e8 33 a7 ff ff       	call   c0000980 <tolower>
c000624d:	83 c4 10             	add    esp,0x10
c0006250:	39 c5                	cmp    ebp,eax
c0006252:	75 20                	jne    c0006274 <ucscompare+0x74>
c0006254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006258:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000625c:	83 c2 02             	add    edx,0x2
c000625f:	eb ac                	jmp    c000620d <ucscompare+0xd>
c0006261:	83 fb 2f             	cmp    ebx,0x2f
c0006264:	0f 95 c2             	setne  dl
c0006267:	31 c0                	xor    eax,eax
c0006269:	85 db                	test   ebx,ebx
c000626b:	0f 95 c0             	setne  al
c000626e:	21 d0                	and    eax,edx
c0006270:	f7 d8                	neg    eax
c0006272:	eb 03                	jmp    c0006277 <ucscompare+0x77>
c0006274:	83 c8 ff             	or     eax,0xffffffff
c0006277:	83 c4 1c             	add    esp,0x1c
c000627a:	5b                   	pop    ebx
c000627b:	5e                   	pop    esi
c000627c:	5f                   	pop    edi
c000627d:	5d                   	pop    ebp
c000627e:	c3                   	ret    

c000627f <fncompare>:
c000627f:	55                   	push   ebp
c0006280:	57                   	push   edi
c0006281:	89 c7                	mov    edi,eax
c0006283:	56                   	push   esi
c0006284:	89 ce                	mov    esi,ecx
c0006286:	53                   	push   ebx
c0006287:	31 db                	xor    ebx,ebx
c0006289:	83 ec 1c             	sub    esp,0x1c
c000628c:	39 d3                	cmp    ebx,edx
c000628e:	7d 45                	jge    c00062d5 <fncompare+0x56>
c0006290:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006294:	83 f8 3b             	cmp    eax,0x3b
c0006297:	74 3c                	je     c00062d5 <fncompare+0x56>
c0006299:	83 f8 2e             	cmp    eax,0x2e
c000629c:	75 0e                	jne    c00062ac <fncompare+0x2d>
c000629e:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a1:	39 d9                	cmp    ecx,ebx
c00062a3:	74 30                	je     c00062d5 <fncompare+0x56>
c00062a5:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062aa:	74 29                	je     c00062d5 <fncompare+0x56>
c00062ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b0:	83 ec 0c             	sub    esp,0xc
c00062b3:	50                   	push   eax
c00062b4:	e8 c7 a6 ff ff       	call   c0000980 <tolower>
c00062b9:	89 c5                	mov    ebp,eax
c00062bb:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c2:	e8 b9 a6 ff ff       	call   c0000980 <tolower>
c00062c7:	83 c4 10             	add    esp,0x10
c00062ca:	39 c5                	cmp    ebp,eax
c00062cc:	75 1e                	jne    c00062ec <fncompare+0x6d>
c00062ce:	43                   	inc    ebx
c00062cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d3:	eb b7                	jmp    c000628c <fncompare+0xd>
c00062d5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062d9:	83 fa 2f             	cmp    edx,0x2f
c00062dc:	0f 95 c1             	setne  cl
c00062df:	31 c0                	xor    eax,eax
c00062e1:	85 d2                	test   edx,edx
c00062e3:	0f 95 c0             	setne  al
c00062e6:	21 c8                	and    eax,ecx
c00062e8:	f7 d8                	neg    eax
c00062ea:	eb 03                	jmp    c00062ef <fncompare+0x70>
c00062ec:	83 c8 ff             	or     eax,0xffffffff
c00062ef:	83 c4 1c             	add    esp,0x1c
c00062f2:	5b                   	pop    ebx
c00062f3:	5e                   	pop    esi
c00062f4:	5f                   	pop    edi
c00062f5:	5d                   	pop    ebp
c00062f6:	c3                   	ret    

c00062f7 <bclear_cache>:
c00062f7:	83 ec 18             	sub    esp,0x18
c00062fa:	68 e0 fa 02 c0       	push   0xc002fae0
c00062ff:	e8 78 30 02 00       	call   c002937c <iso_kprintf>
c0006304:	83 c4 10             	add    esp,0x10
c0006307:	31 c0                	xor    eax,eax
c0006309:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006310:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006316:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c000631d:	40                   	inc    eax
c000631e:	83 f8 10             	cmp    eax,0x10
c0006321:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006327:	75 e0                	jne    c0006309 <bclear_cache+0x12>
c0006329:	83 c4 0c             	add    esp,0xc
c000632c:	c3                   	ret    

c000632d <bclear>:
c000632d:	eb c8                	jmp    c00062f7 <bclear_cache>

c000632f <iso_break_all>:
c000632f:	83 ec 18             	sub    esp,0x18
c0006332:	68 ee fa 02 c0       	push   0xc002faee
c0006337:	e8 40 30 02 00       	call   c002937c <iso_kprintf>
c000633c:	83 c4 10             	add    esp,0x10
c000633f:	31 c0                	xor    eax,eax
c0006341:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000634b:	05 94 00 00 00       	add    eax,0x94
c0006350:	3d 40 09 00 00       	cmp    eax,0x940
c0006355:	75 ea                	jne    c0006341 <iso_break_all+0x12>
c0006357:	83 c4 0c             	add    esp,0xc
c000635a:	c3                   	ret    

c000635b <isoReadDiscSector>:
c000635b:	83 ec 0c             	sub    esp,0xc
c000635e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006365:	50                   	push   eax
c0006366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	e8 a9 2f 02 00       	call   c0029320 <isoReadDiscSectorHelper>
c0006377:	83 c4 1c             	add    esp,0x1c
c000637a:	c3                   	ret    

c000637b <bread_cache>:
c000637b:	55                   	push   ebp
c000637c:	57                   	push   edi
c000637d:	89 d7                	mov    edi,edx
c000637f:	56                   	push   esi
c0006380:	ba 0f 00 00 00       	mov    edx,0xf
c0006385:	53                   	push   ebx
c0006386:	89 c6                	mov    esi,eax
c0006388:	83 ec 0c             	sub    esp,0xc
c000638b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000638e:	39 38                	cmp    DWORD PTR [eax],edi
c0006390:	74 3c                	je     c00063ce <bread_cache+0x53>
c0006392:	4a                   	dec    edx
c0006393:	83 fa ff             	cmp    edx,0xffffffff
c0006396:	75 f3                	jne    c000638b <bread_cache+0x10>
c0006398:	31 db                	xor    ebx,ebx
c000639a:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000639d:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a0:	74 08                	je     c00063aa <bread_cache+0x2f>
c00063a2:	43                   	inc    ebx
c00063a3:	83 fb 10             	cmp    ebx,0x10
c00063a6:	75 f2                	jne    c000639a <bread_cache+0x1f>
c00063a8:	31 db                	xor    ebx,ebx
c00063aa:	50                   	push   eax
c00063ab:	6a 01                	push   0x1
c00063ad:	57                   	push   edi
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b4:	83 c0 04             	add    eax,0x4
c00063b7:	50                   	push   eax
c00063b8:	e8 9e ff ff ff       	call   c000635b <isoReadDiscSector>
c00063bd:	83 c4 10             	add    esp,0x10
c00063c0:	83 c9 ff             	or     ecx,0xffffffff
c00063c3:	85 c0                	test   eax,eax
c00063c5:	78 13                	js     c00063da <bread_cache+0x5f>
c00063c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ca:	89 da                	mov    edx,ebx
c00063cc:	89 38                	mov    DWORD PTR [eax],edi
c00063ce:	89 f0                	mov    eax,esi
c00063d0:	e8 0f fe ff ff       	call   c00061e4 <bgrad_cache>
c00063d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00063da:	83 c4 0c             	add    esp,0xc
c00063dd:	89 c8                	mov    eax,ecx
c00063df:	5b                   	pop    ebx
c00063e0:	5e                   	pop    esi
c00063e1:	5f                   	pop    edi
c00063e2:	5d                   	pop    ebp
c00063e3:	c3                   	ret    

c00063e4 <biread>:
c00063e4:	89 c2                	mov    edx,eax
c00063e6:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00063eb:	eb 8e                	jmp    c000637b <bread_cache>

c00063ed <bdread>:
c00063ed:	89 c2                	mov    edx,eax
c00063ef:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00063f4:	eb 85                	jmp    c000637b <bread_cache>

c00063f6 <strnicmp>:
c00063f6:	55                   	push   ebp
c00063f7:	57                   	push   edi
c00063f8:	31 ff                	xor    edi,edi
c00063fa:	56                   	push   esi
c00063fb:	53                   	push   ebx
c00063fc:	83 ec 0c             	sub    esp,0xc
c00063ff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006403:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006407:	74 43                	je     c000644c <strnicmp+0x56>
c0006409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000640d:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006411:	85 c0                	test   eax,eax
c0006413:	74 37                	je     c000644c <strnicmp+0x56>
c0006415:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006419:	85 d2                	test   edx,edx
c000641b:	74 2f                	je     c000644c <strnicmp+0x56>
c000641d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006420:	39 d0                	cmp    eax,edx
c0006422:	75 04                	jne    c0006428 <strnicmp+0x32>
c0006424:	89 ef                	mov    edi,ebp
c0006426:	eb db                	jmp    c0006403 <strnicmp+0xd>
c0006428:	83 ec 0c             	sub    esp,0xc
c000642b:	50                   	push   eax
c000642c:	e8 4f a5 ff ff       	call   c0000980 <tolower>
c0006431:	89 c3                	mov    ebx,eax
c0006433:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006437:	89 ef                	mov    edi,ebp
c0006439:	89 04 24             	mov    DWORD PTR [esp],eax
c000643c:	e8 3f a5 ff ff       	call   c0000980 <tolower>
c0006441:	83 c4 10             	add    esp,0x10
c0006444:	29 c3                	sub    ebx,eax
c0006446:	89 d8                	mov    eax,ebx
c0006448:	74 b9                	je     c0006403 <strnicmp+0xd>
c000644a:	eb 02                	jmp    c000644e <strnicmp+0x58>
c000644c:	31 c0                	xor    eax,eax
c000644e:	83 c4 0c             	add    esp,0xc
c0006451:	5b                   	pop    ebx
c0006452:	5e                   	pop    esi
c0006453:	5f                   	pop    edi
c0006454:	5d                   	pop    ebp
c0006455:	c3                   	ret    

c0006456 <find_object>:
c0006456:	55                   	push   ebp
c0006457:	57                   	push   edi
c0006458:	89 c7                	mov    edi,eax
c000645a:	56                   	push   esi
c000645b:	53                   	push   ebx
c000645c:	89 d3                	mov    ebx,edx
c000645e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006464:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006476:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000647a:	74 0b                	je     c0006487 <find_object+0x31>
c000647c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006480:	89 fa                	mov    edx,edi
c0006482:	e8 89 fc ff ff       	call   c0006110 <utf2ucs>
c0006487:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006493:	7e 11                	jle    c00064a6 <find_object+0x50>
c0006495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006499:	e8 46 ff ff ff       	call   c00063e4 <biread>
c000649e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064a2:	85 c0                	test   eax,eax
c00064a4:	79 07                	jns    c00064ad <find_object+0x57>
c00064a6:	31 db                	xor    ebx,ebx
c00064a8:	e9 47 01 00 00       	jmp    c00065f4 <find_object+0x19e>
c00064ad:	31 ed                	xor    ebp,ebp
c00064af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064b3:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00064ba:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064be:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064c1:	85 f6                	test   esi,esi
c00064c3:	75 0e                	jne    c00064d3 <find_object+0x7d>
c00064c5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064c9:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064d1:	eb bb                	jmp    c000648e <find_object+0x38>
c00064d3:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c00064d9:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00064dd:	85 c9                	test   ecx,ecx
c00064df:	89 d0                	mov    eax,edx
c00064e1:	74 2b                	je     c000650e <find_object+0xb8>
c00064e3:	8d 43 21             	lea    eax,[ebx+0x21]
c00064e6:	89 d1                	mov    ecx,edx
c00064e8:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064ec:	e8 0f fd ff ff       	call   c0006200 <ucscompare>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	0f 84 cd 00 00 00    	je     c00065c6 <find_object+0x170>
c00064f9:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00064fc:	01 c5                	add    ebp,eax
c00064fe:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006504:	7f bf                	jg     c00064c5 <find_object+0x6f>
c0006506:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c000650a:	7f a3                	jg     c00064af <find_object+0x59>
c000650c:	eb b7                	jmp    c00064c5 <find_object+0x6f>
c000650e:	29 d6                	sub    esi,edx
c0006510:	a8 01                	test   al,0x1
c0006512:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c0006516:	74 05                	je     c000651d <find_object+0xc7>
c0006518:	83 ee 21             	sub    esi,0x21
c000651b:	eb 6a                	jmp    c0006587 <find_object+0x131>
c000651d:	42                   	inc    edx
c000651e:	83 ee 22             	sub    esi,0x22
c0006521:	eb 64                	jmp    c0006587 <find_object+0x131>
c0006523:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006526:	48                   	dec    eax
c0006527:	3c 01                	cmp    al,0x1
c0006529:	77 61                	ja     c000658c <find_object+0x136>
c000652b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000652f:	50                   	push   eax
c0006530:	6a 02                	push   0x2
c0006532:	68 fd fa 02 c0       	push   0xc002fafd
c0006537:	52                   	push   edx
c0006538:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000653c:	e8 cf a2 ff ff       	call   c0000810 <strncmp>
c0006541:	83 c4 10             	add    esp,0x10
c0006544:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006548:	85 c0                	test   eax,eax
c000654a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000654e:	75 2f                	jne    c000657f <find_object+0x129>
c0006550:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c0006554:	50                   	push   eax
c0006555:	8d 42 05             	lea    eax,[edx+0x5]
c0006558:	83 e9 05             	sub    ecx,0x5
c000655b:	51                   	push   ecx
c000655c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006560:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006564:	50                   	push   eax
c0006565:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006569:	50                   	push   eax
c000656a:	e8 21 a1 ff ff       	call   c0000690 <strncpy>
c000656f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006573:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000657f:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006583:	29 c6                	sub    esi,eax
c0006585:	01 c2                	add    edx,eax
c0006587:	83 fe 03             	cmp    esi,0x3
c000658a:	7f 97                	jg     c0006523 <find_object+0xcd>
c000658c:	85 c9                	test   ecx,ecx
c000658e:	7e 40                	jle    c00065d0 <find_object+0x17a>
c0006590:	51                   	push   ecx
c0006591:	51                   	push   ecx
c0006592:	6a 2f                	push   0x2f
c0006594:	57                   	push   edi
c0006595:	e8 36 a2 ff ff       	call   c00007d0 <strchr>
c000659a:	83 c4 10             	add    esp,0x10
c000659d:	85 c0                	test   eax,eax
c000659f:	74 04                	je     c00065a5 <find_object+0x14f>
c00065a1:	29 f8                	sub    eax,edi
c00065a3:	eb 0c                	jmp    c00065b1 <find_object+0x15b>
c00065a5:	83 ec 0c             	sub    esp,0xc
c00065a8:	57                   	push   edi
c00065a9:	e8 d2 9f ff ff       	call   c0000580 <strlen>
c00065ae:	83 c4 10             	add    esp,0x10
c00065b1:	52                   	push   edx
c00065b2:	50                   	push   eax
c00065b3:	57                   	push   edi
c00065b4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b8:	50                   	push   eax
c00065b9:	e8 38 fe ff ff       	call   c00063f6 <strnicmp>
c00065be:	83 c4 10             	add    esp,0x10
c00065c1:	e9 2b ff ff ff       	jmp    c00064f1 <find_object+0x9b>
c00065c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065ca:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065ce:	eb 1e                	jmp    c00065ee <find_object+0x198>
c00065d0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d4:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d7:	89 f9                	mov    ecx,edi
c00065d9:	e8 a1 fc ff ff       	call   c000627f <fncompare>
c00065de:	85 c0                	test   eax,eax
c00065e0:	0f 85 13 ff ff ff    	jne    c00064f9 <find_object+0xa3>
c00065e6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065ea:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00065ee:	0f 85 05 ff ff ff    	jne    c00064f9 <find_object+0xa3>
c00065f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00065fa:	89 d8                	mov    eax,ebx
c00065fc:	5b                   	pop    ebx
c00065fd:	5e                   	pop    esi
c00065fe:	5f                   	pop    edi
c00065ff:	5d                   	pop    ebp
c0006600:	c3                   	ret    

c0006601 <find_object_path>:
c0006601:	55                   	push   ebp
c0006602:	57                   	push   edi
c0006603:	89 d7                	mov    edi,edx
c0006605:	56                   	push   esi
c0006606:	89 c6                	mov    esi,eax
c0006608:	53                   	push   ebx
c0006609:	89 cb                	mov    ebx,ecx
c000660b:	83 ec 0c             	sub    esp,0xc
c000660e:	50                   	push   eax
c000660f:	50                   	push   eax
c0006610:	6a 2f                	push   0x2f
c0006612:	56                   	push   esi
c0006613:	e8 b8 a1 ff ff       	call   c00007d0 <strchr>
c0006618:	83 c4 10             	add    esp,0x10
c000661b:	85 c0                	test   eax,eax
c000661d:	89 c5                	mov    ebp,eax
c000661f:	74 3a                	je     c000665b <find_object_path+0x5a>
c0006621:	39 ee                	cmp    esi,ebp
c0006623:	74 31                	je     c0006656 <find_object_path+0x55>
c0006625:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006628:	e8 b5 fb ff ff       	call   c00061e2 <iso_733>
c000662d:	89 c2                	mov    edx,eax
c000662f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006632:	e8 ab fb ff ff       	call   c00061e2 <iso_733>
c0006637:	83 ec 0c             	sub    esp,0xc
c000663a:	52                   	push   edx
c000663b:	89 c1                	mov    ecx,eax
c000663d:	ba 01 00 00 00       	mov    edx,0x1
c0006642:	89 f0                	mov    eax,esi
c0006644:	e8 0d fe ff ff       	call   c0006456 <find_object>
c0006649:	83 c4 10             	add    esp,0x10
c000664c:	85 c0                	test   eax,eax
c000664e:	89 c3                	mov    ebx,eax
c0006650:	75 04                	jne    c0006656 <find_object_path+0x55>
c0006652:	31 db                	xor    ebx,ebx
c0006654:	eb 36                	jmp    c000668c <find_object_path+0x8b>
c0006656:	8d 75 01             	lea    esi,[ebp+0x1]
c0006659:	eb b3                	jmp    c000660e <find_object_path+0xd>
c000665b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000665e:	74 28                	je     c0006688 <find_object_path+0x87>
c0006660:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006663:	e8 7a fb ff ff       	call   c00061e2 <iso_733>
c0006668:	89 c2                	mov    edx,eax
c000666a:	8d 43 02             	lea    eax,[ebx+0x2]
c000666d:	e8 70 fb ff ff       	call   c00061e2 <iso_733>
c0006672:	83 ec 0c             	sub    esp,0xc
c0006675:	52                   	push   edx
c0006676:	89 c1                	mov    ecx,eax
c0006678:	89 fa                	mov    edx,edi
c000667a:	89 f0                	mov    eax,esi
c000667c:	e8 d5 fd ff ff       	call   c0006456 <find_object>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	eb 04                	jmp    c000668c <find_object_path+0x8b>
c0006688:	85 ff                	test   edi,edi
c000668a:	74 c6                	je     c0006652 <find_object_path+0x51>
c000668c:	83 c4 0c             	add    esp,0xc
c000668f:	89 d8                	mov    eax,ebx
c0006691:	5b                   	pop    ebx
c0006692:	5e                   	pop    esi
c0006693:	5f                   	pop    edi
c0006694:	5d                   	pop    ebp
c0006695:	c3                   	ret    

c0006696 <stricmp>:
c0006696:	57                   	push   edi
c0006697:	56                   	push   esi
c0006698:	31 f6                	xor    esi,esi
c000669a:	53                   	push   ebx
c000669b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669f:	83 ec 0c             	sub    esp,0xc
c00066a2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066aa:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066ae:	46                   	inc    esi
c00066af:	50                   	push   eax
c00066b0:	e8 ab a2 ff ff       	call   c0000960 <toupper>
c00066b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00066b8:	e8 c3 a2 ff ff       	call   c0000980 <tolower>
c00066bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066c0:	89 c3                	mov    ebx,eax
c00066c2:	e8 99 a2 ff ff       	call   c0000960 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 b1 a2 ff ff       	call   c0000980 <tolower>
c00066cf:	83 c4 10             	add    esp,0x10
c00066d2:	39 c3                	cmp    ebx,eax
c00066d4:	75 04                	jne    c00066da <stricmp+0x44>
c00066d6:	85 db                	test   ebx,ebx
c00066d8:	75 c1                	jne    c000669b <stricmp+0x5>
c00066da:	29 c3                	sub    ebx,eax
c00066dc:	89 d8                	mov    eax,ebx
c00066de:	5b                   	pop    ebx
c00066df:	5e                   	pop    esi
c00066e0:	5f                   	pop    edi
c00066e1:	c3                   	ret    

c00066e2 <iso_open>:
c00066e2:	57                   	push   edi
c00066e3:	31 c0                	xor    eax,eax
c00066e5:	56                   	push   esi
c00066e6:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00066eb:	53                   	push   ebx
c00066ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00066f1:	0f 95 c0             	setne  al
c00066f4:	89 c2                	mov    edx,eax
c00066f6:	89 c6                	mov    esi,eax
c00066f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00066fc:	e8 00 ff ff ff       	call   c0006601 <find_object_path>
c0006701:	83 ca ff             	or     edx,0xffffffff
c0006704:	85 c0                	test   eax,eax
c0006706:	74 5e                	je     c0006766 <iso_open+0x84>
c0006708:	89 c1                	mov    ecx,eax
c000670a:	31 d2                	xor    edx,edx
c000670c:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006712:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006719:	75 42                	jne    c000675d <iso_open+0x7b>
c000671b:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006725:	8d 41 02             	lea    eax,[ecx+0x2]
c0006728:	e8 b5 fa ff ff       	call   c00061e2 <iso_733>
c000672d:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006733:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c000673d:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006743:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006746:	e8 97 fa ff ff       	call   c00061e2 <iso_733>
c000674b:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006755:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000675b:	eb 09                	jmp    c0006766 <iso_open+0x84>
c000675d:	42                   	inc    edx
c000675e:	83 fa 10             	cmp    edx,0x10
c0006761:	75 a9                	jne    c000670c <iso_open+0x2a>
c0006763:	83 ca ff             	or     edx,0xffffffff
c0006766:	5b                   	pop    ebx
c0006767:	89 d0                	mov    eax,edx
c0006769:	5e                   	pop    esi
c000676a:	5f                   	pop    edi
c000676b:	c3                   	ret    

c000676c <iso_close>:
c000676c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006770:	83 f8 0f             	cmp    eax,0xf
c0006773:	7f 10                	jg     c0006785 <iso_close+0x19>
c0006775:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000677b:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006785:	e9 6d fb ff ff       	jmp    c00062f7 <bclear_cache>

c000678a <iso_read>:
c000678a:	55                   	push   ebp
c000678b:	57                   	push   edi
c000678c:	56                   	push   esi
c000678d:	53                   	push   ebx
c000678e:	83 ec 1c             	sub    esp,0x1c
c0006791:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006795:	83 fd 0f             	cmp    ebp,0xf
c0006798:	7e 0a                	jle    c00067a4 <iso_read+0x1a>
c000679a:	83 c8 ff             	or     eax,0xffffffff
c000679d:	89 c2                	mov    edx,eax
c000679f:	e9 f4 00 00 00       	jmp    c0006898 <iso_read+0x10e>
c00067a4:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067aa:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067b1:	74 e7                	je     c000679a <iso_read+0x10>
c00067b3:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00067b9:	85 d2                	test   edx,edx
c00067bb:	75 dd                	jne    c000679a <iso_read+0x10>
c00067bd:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067c2:	0f 84 cd 00 00 00    	je     c0006895 <iso_read+0x10b>
c00067c8:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067ce:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c00067d4:	29 c3                	sub    ebx,eax
c00067d6:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00067da:	89 d9                	mov    ecx,ebx
c00067dc:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00067e1:	85 c9                	test   ecx,ecx
c00067e3:	0f 84 ac 00 00 00    	je     c0006895 <iso_read+0x10b>
c00067e9:	89 c6                	mov    esi,eax
c00067eb:	bb 00 08 00 00       	mov    ebx,0x800
c00067f0:	c1 e8 0b             	shr    eax,0xb
c00067f3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067f9:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00067ff:	29 f3                	sub    ebx,esi
c0006801:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006807:	75 3f                	jne    c0006848 <iso_read+0xbe>
c0006809:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000680f:	7e 37                	jle    c0006848 <iso_read+0xbe>
c0006811:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006817:	be 20 00 00 00       	mov    esi,0x20
c000681c:	7f 05                	jg     c0006823 <iso_read+0x99>
c000681e:	89 ce                	mov    esi,ecx
c0006820:	c1 fe 0b             	sar    esi,0xb
c0006823:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006827:	89 f3                	mov    ebx,esi
c0006829:	52                   	push   edx
c000682a:	56                   	push   esi
c000682b:	50                   	push   eax
c000682c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006830:	c1 e3 0b             	shl    ebx,0xb
c0006833:	e8 23 fb ff ff       	call   c000635b <isoReadDiscSector>
c0006838:	83 c4 10             	add    esp,0x10
c000683b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000683f:	85 c0                	test   eax,eax
c0006841:	7f 3d                	jg     c0006880 <iso_read+0xf6>
c0006843:	e9 52 ff ff ff       	jmp    c000679a <iso_read+0x10>
c0006848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684c:	39 d9                	cmp    ecx,ebx
c000684e:	0f 4e d9             	cmovle ebx,ecx
c0006851:	e8 97 fb ff ff       	call   c00063ed <bdread>
c0006856:	85 c0                	test   eax,eax
c0006858:	0f 88 3c ff ff ff    	js     c000679a <iso_read+0x10>
c000685e:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006865:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000686b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000686f:	25 ff 07 00 00       	and    eax,0x7ff
c0006874:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006878:	89 d9                	mov    ecx,ebx
c000687a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000687c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006880:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006884:	01 da                	add    edx,ebx
c0006886:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c000688c:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006890:	e9 28 ff ff ff       	jmp    c00067bd <iso_read+0x33>
c0006895:	89 d0                	mov    eax,edx
c0006897:	99                   	cdq    
c0006898:	83 c4 1c             	add    esp,0x1c
c000689b:	5b                   	pop    ebx
c000689c:	5e                   	pop    esi
c000689d:	5f                   	pop    edi
c000689e:	5d                   	pop    ebp
c000689f:	c3                   	ret    

c00068a0 <iso_seek>:
c00068a0:	55                   	push   ebp
c00068a1:	83 c8 ff             	or     eax,0xffffffff
c00068a4:	57                   	push   edi
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	56                   	push   esi
c00068a8:	53                   	push   ebx
c00068a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068b5:	83 fe 0f             	cmp    esi,0xf
c00068b8:	7f 65                	jg     c000691f <iso_seek+0x7f>
c00068ba:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068c0:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00068c7:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00068cd:	74 50                	je     c000691f <iso_seek+0x7f>
c00068cf:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068d6:	75 47                	jne    c000691f <iso_seek+0x7f>
c00068d8:	83 fb 01             	cmp    ebx,0x1
c00068db:	74 0e                	je     c00068eb <iso_seek+0x4b>
c00068dd:	83 fb 02             	cmp    ebx,0x2
c00068e0:	74 0e                	je     c00068f0 <iso_seek+0x50>
c00068e2:	85 db                	test   ebx,ebx
c00068e4:	75 39                	jne    c000691f <iso_seek+0x7f>
c00068e6:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068e9:	eb 0d                	jmp    c00068f8 <iso_seek+0x58>
c00068eb:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00068ee:	eb 08                	jmp    c00068f8 <iso_seek+0x58>
c00068f0:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00068f3:	01 f8                	add    eax,edi
c00068f5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00068f8:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00068fe:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006904:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006909:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000690c:	76 03                	jbe    c0006911 <iso_seek+0x71>
c000690e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006911:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006917:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c000691d:	31 d2                	xor    edx,edx
c000691f:	5b                   	pop    ebx
c0006920:	5e                   	pop    esi
c0006921:	5f                   	pop    edi
c0006922:	5d                   	pop    ebp
c0006923:	c3                   	ret    

c0006924 <iso_tell>:
c0006924:	53                   	push   ebx
c0006925:	83 c8 ff             	or     eax,0xffffffff
c0006928:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000692c:	89 c2                	mov    edx,eax
c000692e:	83 f9 0f             	cmp    ecx,0xf
c0006931:	7f 20                	jg     c0006953 <iso_tell+0x2f>
c0006933:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006939:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006940:	74 11                	je     c0006953 <iso_tell+0x2f>
c0006942:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006949:	75 08                	jne    c0006953 <iso_tell+0x2f>
c000694b:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006951:	31 d2                	xor    edx,edx
c0006953:	5b                   	pop    ebx
c0006954:	c3                   	ret    

c0006955 <iso_total>:
c0006955:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006959:	83 c8 ff             	or     eax,0xffffffff
c000695c:	83 fa 0f             	cmp    edx,0xf
c000695f:	7f 1e                	jg     c000697f <iso_total+0x2a>
c0006961:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006967:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000696e:	74 0f                	je     c000697f <iso_total+0x2a>
c0006970:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006977:	75 06                	jne    c000697f <iso_total+0x2a>
c0006979:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000697f:	c3                   	ret    

c0006980 <fn_postprocess>:
c0006980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006984:	89 d0                	mov    eax,edx
c0006986:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006989:	85 c9                	test   ecx,ecx
c000698b:	74 08                	je     c0006995 <fn_postprocess+0x15>
c000698d:	83 f9 3b             	cmp    ecx,0x3b
c0006990:	74 03                	je     c0006995 <fn_postprocess+0x15>
c0006992:	40                   	inc    eax
c0006993:	eb f1                	jmp    c0006986 <fn_postprocess+0x6>
c0006995:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006998:	39 d0                	cmp    eax,edx
c000699a:	76 0a                	jbe    c00069a6 <fn_postprocess+0x26>
c000699c:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069a0:	75 04                	jne    c00069a6 <fn_postprocess+0x26>
c00069a2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069a6:	c3                   	ret    

c00069a7 <iso_readdir>:
c00069a7:	55                   	push   ebp
c00069a8:	57                   	push   edi
c00069a9:	56                   	push   esi
c00069aa:	53                   	push   ebx
c00069ab:	83 ec 1c             	sub    esp,0x1c
c00069ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069b2:	83 fb 0f             	cmp    ebx,0xf
c00069b5:	7f 28                	jg     c00069df <iso_readdir+0x38>
c00069b7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069bd:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00069c4:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00069ca:	74 13                	je     c00069df <iso_readdir+0x38>
c00069cc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069d0:	74 0d                	je     c00069df <iso_readdir+0x38>
c00069d2:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069d9:	0f 84 b1 00 00 00    	je     c0006a90 <iso_readdir+0xe9>
c00069df:	83 ec 0c             	sub    esp,0xc
c00069e2:	68 00 fb 02 c0       	push   0xc002fb00
c00069e7:	e8 90 29 02 00       	call   c002937c <iso_kprintf>
c00069ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069ef:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069f5:	e8 9e 29 02 00       	call   c0029398 <iso_kprintfd>
c00069fa:	c7 04 24 05 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb05
c0006a01:	e8 76 29 02 00       	call   c002937c <iso_kprintf>
c0006a06:	58                   	pop    eax
c0006a07:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006a0d:	e8 86 29 02 00       	call   c0029398 <iso_kprintfd>
c0006a12:	c7 04 24 0b fb 02 c0 	mov    DWORD PTR [esp],0xc002fb0b
c0006a19:	e8 5e 29 02 00       	call   c002937c <iso_kprintf>
c0006a1e:	58                   	pop    eax
c0006a1f:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006a25:	e8 6e 29 02 00       	call   c0029398 <iso_kprintfd>
c0006a2a:	c7 04 24 11 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb11
c0006a31:	e8 46 29 02 00       	call   c002937c <iso_kprintf>
c0006a36:	58                   	pop    eax
c0006a37:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006a3d:	e8 56 29 02 00       	call   c0029398 <iso_kprintfd>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	eb 42                	jmp    c0006a89 <iso_readdir+0xe2>
c0006a47:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a4a:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a51:	89 d1                	mov    ecx,edx
c0006a53:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a59:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a5d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a60:	75 35                	jne    c0006a97 <iso_readdir+0xf0>
c0006a62:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a68:	81 c2 00 08 00 00    	add    edx,0x800
c0006a6e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a71:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a74:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a77:	73 1e                	jae    c0006a97 <iso_readdir+0xf0>
c0006a79:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a7b:	c1 ea 0b             	shr    edx,0xb
c0006a7e:	01 d0                	add    eax,edx
c0006a80:	e8 5f f9 ff ff       	call   c00063e4 <biread>
c0006a85:	85 c0                	test   eax,eax
c0006a87:	79 be                	jns    c0006a47 <iso_readdir+0xa0>
c0006a89:	31 c0                	xor    eax,eax
c0006a8b:	e9 6a 01 00 00       	jmp    c0006bfa <iso_readdir+0x253>
c0006a90:	31 f6                	xor    esi,esi
c0006a92:	83 c8 ff             	or     eax,0xffffffff
c0006a95:	eb da                	jmp    c0006a71 <iso_readdir+0xca>
c0006a97:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006a9d:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006aa3:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006aa9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006aac:	73 db                	jae    c0006a89 <iso_readdir+0xe2>
c0006aae:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ab2:	75 34                	jne    c0006ae8 <iso_readdir+0x141>
c0006ab4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ab8:	75 2e                	jne    c0006ae8 <iso_readdir+0x141>
c0006aba:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006abd:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006ac4:	01 f9                	add    ecx,edi
c0006ac6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006ac9:	89 c8                	mov    eax,ecx
c0006acb:	25 ff 07 00 00       	and    eax,0x7ff
c0006ad0:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ad5:	01 c8                	add    eax,ecx
c0006ad7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006ada:	25 ff 07 00 00       	and    eax,0x7ff
c0006adf:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006ae3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006ae6:	74 a1                	je     c0006a89 <iso_readdir+0xe2>
c0006ae8:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006aee:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006af2:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006af9:	8d 56 21             	lea    edx,[esi+0x21]
c0006afc:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006b02:	74 0c                	je     c0006b10 <iso_readdir+0x169>
c0006b04:	89 e8                	mov    eax,ebp
c0006b06:	e8 27 f6 ff ff       	call   c0006132 <ucs2utfn>
c0006b0b:	e9 b1 00 00 00       	jmp    c0006bc1 <iso_readdir+0x21a>
c0006b10:	50                   	push   eax
c0006b11:	51                   	push   ecx
c0006b12:	52                   	push   edx
c0006b13:	55                   	push   ebp
c0006b14:	e8 77 9b ff ff       	call   c0000690 <strncpy>
c0006b19:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b20:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006b28:	e8 53 fe ff ff       	call   c0006980 <fn_postprocess>
c0006b2d:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b31:	83 c4 10             	add    esp,0x10
c0006b34:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b37:	89 d1                	mov    ecx,edx
c0006b39:	29 d0                	sub    eax,edx
c0006b3b:	80 e1 01             	and    cl,0x1
c0006b3e:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b42:	74 05                	je     c0006b49 <iso_readdir+0x1a2>
c0006b44:	83 e8 21             	sub    eax,0x21
c0006b47:	eb 04                	jmp    c0006b4d <iso_readdir+0x1a6>
c0006b49:	42                   	inc    edx
c0006b4a:	83 e8 22             	sub    eax,0x22
c0006b4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b51:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b5b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b60:	7e 5f                	jle    c0006bc1 <iso_readdir+0x21a>
c0006b62:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b65:	48                   	dec    eax
c0006b66:	3c 01                	cmp    al,0x1
c0006b68:	77 57                	ja     c0006bc1 <iso_readdir+0x21a>
c0006b6a:	51                   	push   ecx
c0006b6b:	6a 02                	push   0x2
c0006b6d:	68 fd fa 02 c0       	push   0xc002fafd
c0006b72:	52                   	push   edx
c0006b73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b77:	e8 94 9c ff ff       	call   c0000810 <strncmp>
c0006b7c:	83 c4 10             	add    esp,0x10
c0006b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006b83:	85 c0                	test   eax,eax
c0006b85:	75 2e                	jne    c0006bb5 <iso_readdir+0x20e>
c0006b87:	50                   	push   eax
c0006b88:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006b8c:	83 e8 05             	sub    eax,0x5
c0006b8f:	50                   	push   eax
c0006b90:	8d 42 05             	lea    eax,[edx+0x5]
c0006b93:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006b97:	50                   	push   eax
c0006b98:	55                   	push   ebp
c0006b99:	e8 f2 9a ff ff       	call   c0000690 <strncpy>
c0006b9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006ba2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006ba6:	83 c4 10             	add    esp,0x10
c0006ba9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bad:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006bb5:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb9:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bbd:	01 c2                	add    edx,eax
c0006bbf:	eb 9a                	jmp    c0006b5b <iso_readdir+0x1b4>
c0006bc1:	83 c8 ff             	or     eax,0xffffffff
c0006bc4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bc8:	89 c2                	mov    edx,eax
c0006bca:	75 0a                	jne    c0006bd6 <iso_readdir+0x22f>
c0006bcc:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bcf:	e8 0e f6 ff ff       	call   c00061e2 <iso_733>
c0006bd4:	31 d2                	xor    edx,edx
c0006bd6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006bdc:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006be2:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006be8:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006bee:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bf1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006bf4:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006bfa:	83 c4 1c             	add    esp,0x1c
c0006bfd:	5b                   	pop    ebx
c0006bfe:	5e                   	pop    esi
c0006bff:	5f                   	pop    edi
c0006c00:	5d                   	pop    ebp
c0006c01:	c3                   	ret    

c0006c02 <iso_reset>:
c0006c02:	83 ec 18             	sub    esp,0x18
c0006c05:	68 1a fb 02 c0       	push   0xc002fb1a
c0006c0a:	e8 6d 27 02 00       	call   c002937c <iso_kprintf>
c0006c0f:	e8 1b f7 ff ff       	call   c000632f <iso_break_all>
c0006c14:	e8 14 f7 ff ff       	call   c000632d <bclear>
c0006c19:	31 c0                	xor    eax,eax
c0006c1b:	83 c4 1c             	add    esp,0x1c
c0006c1e:	c3                   	ret    

c0006c1f <init_percd>:
c0006c1f:	57                   	push   edi
c0006c20:	56                   	push   esi
c0006c21:	53                   	push   ebx
c0006c22:	bb 01 00 00 00       	mov    ebx,0x1
c0006c27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c2b:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006c30:	e8 cd ff ff ff       	call   c0006c02 <iso_reset>
c0006c35:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006c3f:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c44:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c48:	e8 97 f7 ff ff       	call   c00063e4 <biread>
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	89 c6                	mov    esi,eax
c0006c51:	0f 88 ba 00 00 00    	js     c0006d11 <init_percd+0xf2>
c0006c57:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006c5e:	52                   	push   edx
c0006c5f:	6a 06                	push   0x6
c0006c61:	68 25 fb 02 c0       	push   0xc002fb25
c0006c66:	83 c0 04             	add    eax,0x4
c0006c69:	50                   	push   eax
c0006c6a:	e8 11 97 ff ff       	call   c0000380 <memcmp>
c0006c6f:	83 c4 10             	add    esp,0x10
c0006c72:	85 c0                	test   eax,eax
c0006c74:	74 08                	je     c0006c7e <init_percd+0x5f>
c0006c76:	43                   	inc    ebx
c0006c77:	83 fb 04             	cmp    ebx,0x4
c0006c7a:	75 c3                	jne    c0006c3f <init_percd+0x20>
c0006c7c:	eb 1a                	jmp    c0006c98 <init_percd+0x79>
c0006c7e:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c85:	83 c0 5c             	add    eax,0x5c
c0006c88:	e8 22 f5 ff ff       	call   c00061af <isjoliet>
c0006c8d:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006c92:	85 c0                	test   eax,eax
c0006c94:	74 e0                	je     c0006c76 <init_percd+0x57>
c0006c96:	eb 3e                	jmp    c0006cd6 <init_percd+0xb7>
c0006c98:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c9f:	75 35                	jne    c0006cd6 <init_percd+0xb7>
c0006ca1:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006ca6:	83 c0 10             	add    eax,0x10
c0006ca9:	e8 36 f7 ff ff       	call   c00063e4 <biread>
c0006cae:	85 c0                	test   eax,eax
c0006cb0:	89 c6                	mov    esi,eax
c0006cb2:	78 5f                	js     c0006d13 <init_percd+0xf4>
c0006cb4:	50                   	push   eax
c0006cb5:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006cbc:	83 cb ff             	or     ebx,0xffffffff
c0006cbf:	6a 06                	push   0x6
c0006cc1:	68 2c fb 02 c0       	push   0xc002fb2c
c0006cc6:	83 c0 04             	add    eax,0x4
c0006cc9:	50                   	push   eax
c0006cca:	e8 b1 96 ff ff       	call   c0000380 <memcmp>
c0006ccf:	83 c4 10             	add    esp,0x10
c0006cd2:	85 c0                	test   eax,eax
c0006cd4:	75 3d                	jne    c0006d13 <init_percd+0xf4>
c0006cd6:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006cdd:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006ce2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ce7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006ced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cef:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006cf4:	31 db                	xor    ebx,ebx
c0006cf6:	e8 e7 f4 ff ff       	call   c00061e2 <iso_733>
c0006cfb:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006d00:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006d05:	e8 d8 f4 ff ff       	call   c00061e2 <iso_733>
c0006d0a:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006d0f:	eb 02                	jmp    c0006d13 <init_percd+0xf4>
c0006d11:	89 c3                	mov    ebx,eax
c0006d13:	89 d8                	mov    eax,ebx
c0006d15:	5b                   	pop    ebx
c0006d16:	5e                   	pop    esi
c0006d17:	5f                   	pop    edi
c0006d18:	c3                   	ret    

c0006d19 <iso_ioctl>:
c0006d19:	83 ec 18             	sub    esp,0x18
c0006d1c:	68 33 fb 02 c0       	push   0xc002fb33
c0006d21:	e8 56 26 02 00       	call   c002937c <iso_kprintf>
c0006d26:	e8 d7 fe ff ff       	call   c0006c02 <iso_reset>
c0006d2b:	31 c0                	xor    eax,eax
c0006d2d:	83 c4 1c             	add    esp,0x1c
c0006d30:	c3                   	ret    

c0006d31 <fs_iso9660_init>:
c0006d31:	53                   	push   ebx
c0006d32:	31 db                	xor    ebx,ebx
c0006d34:	83 ec 14             	sub    esp,0x14
c0006d37:	68 3e fb 02 c0       	push   0xc002fb3e
c0006d3c:	e8 3b 26 02 00       	call   c002937c <iso_kprintf>
c0006d41:	83 c4 0c             	add    esp,0xc
c0006d44:	68 40 09 00 00       	push   0x940
c0006d49:	6a 00                	push   0x0
c0006d4b:	68 20 6d 03 c0       	push   0xc0036d20
c0006d50:	e8 9b 97 ff ff       	call   c00004f0 <memset>
c0006d55:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006d5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d66:	e8 2c f7 00 00       	call   c0016497 <malloc>
c0006d6b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d72:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006d77:	e8 1b f7 00 00       	call   c0016497 <malloc>
c0006d7c:	83 c4 10             	add    esp,0x10
c0006d7f:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006d84:	83 ec 0c             	sub    esp,0xc
c0006d87:	68 04 08 00 00       	push   0x804
c0006d8c:	e8 06 f7 00 00       	call   c0016497 <malloc>
c0006d91:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006d98:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d9e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006da5:	e8 ed f6 00 00       	call   c0016497 <malloc>
c0006daa:	83 c4 10             	add    esp,0x10
c0006dad:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006db4:	43                   	inc    ebx
c0006db5:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dbb:	83 fb 10             	cmp    ebx,0x10
c0006dbe:	75 c4                	jne    c0006d84 <fs_iso9660_init+0x53>
c0006dc0:	83 c4 08             	add    esp,0x8
c0006dc3:	31 c0                	xor    eax,eax
c0006dc5:	5b                   	pop    ebx
c0006dc6:	c3                   	ret    

c0006dc7 <fs_iso9660_shutdown>:
c0006dc7:	53                   	push   ebx
c0006dc8:	31 db                	xor    ebx,ebx
c0006dca:	83 ec 08             	sub    esp,0x8
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006dd7:	e8 cb f6 00 00       	call   c00164a7 <free>
c0006ddc:	58                   	pop    eax
c0006ddd:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006de4:	43                   	inc    ebx
c0006de5:	e8 bd f6 00 00       	call   c00164a7 <free>
c0006dea:	83 c4 10             	add    esp,0x10
c0006ded:	83 fb 10             	cmp    ebx,0x10
c0006df0:	75 db                	jne    c0006dcd <fs_iso9660_shutdown+0x6>
c0006df2:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006df7:	85 c0                	test   eax,eax
c0006df9:	74 0c                	je     c0006e07 <fs_iso9660_shutdown+0x40>
c0006dfb:	83 ec 0c             	sub    esp,0xc
c0006dfe:	50                   	push   eax
c0006dff:	e8 a3 f6 00 00       	call   c00164a7 <free>
c0006e04:	83 c4 10             	add    esp,0x10
c0006e07:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006e0c:	85 c0                	test   eax,eax
c0006e0e:	74 0c                	je     c0006e1c <fs_iso9660_shutdown+0x55>
c0006e10:	83 ec 0c             	sub    esp,0xc
c0006e13:	50                   	push   eax
c0006e14:	e8 8e f6 00 00       	call   c00164a7 <free>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006e26:	31 c0                	xor    eax,eax
c0006e28:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006e32:	83 c4 08             	add    esp,0x8
c0006e35:	5b                   	pop    ebx
c0006e36:	c3                   	ret    
c0006e37:	90                   	nop

c0006e38 <lwip_init>:
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	e8 5c 2c 00 00       	call   c0009a9c <stats_init>
c0006e40:	e8 8b 9f ff ff       	call   c0000dd0 <sys_init>
c0006e45:	e8 ae 01 00 00       	call   c0006ff8 <mem_init>
c0006e4a:	e8 09 0a 00 00       	call   c0007858 <memp_init>
c0006e4f:	e8 ec 0c 00 00       	call   c0007b40 <netif_init>
c0006e54:	e8 17 9e ff ff       	call   c0000c70 <lwip_socket_init>
c0006e59:	e8 06 9e 00 00       	call   c0010c64 <sys_timeouts_init>
c0006e5e:	90                   	nop
c0006e5f:	83 c4 0c             	add    esp,0xc
c0006e62:	c3                   	ret    
c0006e63:	90                   	nop

c0006e64 <plug_holes>:
c0006e64:	83 ec 1c             	sub    esp,0x1c
c0006e67:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e6c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e70:	73 16                	jae    c0006e88 <plug_holes+0x24>
c0006e72:	83 ec 08             	sub    esp,0x8
c0006e75:	68 4f fb 02 c0       	push   0xc002fb4f
c0006e7a:	68 66 fb 02 c0       	push   0xc002fb66
c0006e7f:	e8 00 8d 01 00       	call   c001fb84 <CPrintf>
c0006e84:	83 c4 10             	add    esp,0x10
c0006e87:	90                   	nop
c0006e88:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e8d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e91:	72 15                	jb     c0006ea8 <plug_holes+0x44>
c0006e93:	83 ec 08             	sub    esp,0x8
c0006e96:	68 73 fb 02 c0       	push   0xc002fb73
c0006e9b:	68 66 fb 02 c0       	push   0xc002fb66
c0006ea0:	e8 df 8c 01 00       	call   c001fb84 <CPrintf>
c0006ea5:	83 c4 10             	add    esp,0x10
c0006ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006eaf:	0f b6 c0             	movzx  eax,al
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 16                	je     c0006ecc <plug_holes+0x68>
c0006eb6:	83 ec 08             	sub    esp,0x8
c0006eb9:	68 8d fb 02 c0       	push   0xc002fb8d
c0006ebe:	68 66 fb 02 c0       	push   0xc002fb66
c0006ec3:	e8 bc 8c 01 00       	call   c001fb84 <CPrintf>
c0006ec8:	83 c4 10             	add    esp,0x10
c0006ecb:	90                   	nop
c0006ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ed0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006ed3:	0f b7 c0             	movzx  eax,ax
c0006ed6:	3d 40 06 00 00       	cmp    eax,0x640
c0006edb:	76 17                	jbe    c0006ef4 <plug_holes+0x90>
c0006edd:	83 ec 08             	sub    esp,0x8
c0006ee0:	68 20 fc 02 c0       	push   0xc002fc20
c0006ee5:	68 66 fb 02 c0       	push   0xc002fb66
c0006eea:	e8 95 8c 01 00       	call   c001fb84 <CPrintf>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	66 90                	xchg   ax,ax
c0006ef4:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006efe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f01:	0f b7 c0             	movzx  eax,ax
c0006f04:	01 d0                	add    eax,edx
c0006f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006f12:	74 64                	je     c0006f78 <plug_holes+0x114>
c0006f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f18:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006f1b:	0f b6 c0             	movzx  eax,al
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 56                	jne    c0006f78 <plug_holes+0x114>
c0006f22:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f27:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f2b:	74 4b                	je     c0006f78 <plug_holes+0x114>
c0006f2d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f32:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f36:	75 0c                	jne    c0006f44 <plug_holes+0xe0>
c0006f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f3c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f41:	8d 76 00             	lea    esi,[esi+0x0]
c0006f44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f48:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f4f:	66 89 10             	mov    WORD PTR [eax],dx
c0006f52:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f5b:	89 d1                	mov    ecx,edx
c0006f5d:	29 c1                	sub    ecx,eax
c0006f5f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f69:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f6c:	0f b7 c0             	movzx  eax,ax
c0006f6f:	01 d0                	add    eax,edx
c0006f71:	89 ca                	mov    edx,ecx
c0006f73:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006f77:	90                   	nop
c0006f78:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f82:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006f86:	0f b7 c0             	movzx  eax,ax
c0006f89:	01 d0                	add    eax,edx
c0006f8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f93:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006f97:	74 57                	je     c0006ff0 <plug_holes+0x18c>
c0006f99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f9d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006fa0:	0f b6 c0             	movzx  eax,al
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	75 49                	jne    c0006ff0 <plug_holes+0x18c>
c0006fa7:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006fac:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fb0:	75 0a                	jne    c0006fbc <plug_holes+0x158>
c0006fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb6:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006fbb:	90                   	nop
c0006fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fc0:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006fc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fc7:	66 89 10             	mov    WORD PTR [eax],dx
c0006fca:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fd3:	89 d1                	mov    ecx,edx
c0006fd5:	29 c1                	sub    ecx,eax
c0006fd7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fe1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006fe4:	0f b7 c0             	movzx  eax,ax
c0006fe7:	01 d0                	add    eax,edx
c0006fe9:	89 ca                	mov    edx,ecx
c0006feb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006fef:	90                   	nop
c0006ff0:	90                   	nop
c0006ff1:	83 c4 1c             	add    esp,0x1c
c0006ff4:	c3                   	ret    
c0006ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0006ff8 <mem_init>:
c0006ff8:	83 ec 1c             	sub    esp,0x1c
c0006ffb:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007005:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000700e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007012:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0007017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000701b:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007021:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007025:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007029:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000702e:	05 40 06 00 00       	add    eax,0x640
c0007033:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0007038:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000703d:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007041:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007046:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000704b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007050:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0007056:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000705b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007060:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	6a 01                	push   0x1
c000706e:	68 98 76 03 c0       	push   0xc0037698
c0007073:	e8 28 9c ff ff       	call   c0000ca0 <sys_sem_new>
c0007078:	83 c4 10             	add    esp,0x10
c000707b:	0f be c0             	movsx  eax,al
c000707e:	85 c0                	test   eax,eax
c0007080:	74 16                	je     c0007098 <mem_init+0xa0>
c0007082:	83 ec 08             	sub    esp,0x8
c0007085:	68 a8 fb 02 c0       	push   0xc002fba8
c000708a:	68 66 fb 02 c0       	push   0xc002fb66
c000708f:	e8 f0 8a 01 00       	call   c001fb84 <CPrintf>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	90                   	nop
c0007098:	90                   	nop
c0007099:	83 c4 1c             	add    esp,0x1c
c000709c:	c3                   	ret    
c000709d:	8d 76 00             	lea    esi,[esi+0x0]

c00070a0 <mem_free>:
c00070a0:	83 ec 1c             	sub    esp,0x1c
c00070a3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00070a8:	0f 84 0e 01 00 00    	je     c00071bc <mem_free+0x11c>
c00070ae:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070b3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070b7:	72 0b                	jb     c00070c4 <mem_free+0x24>
c00070b9:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070be:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070c2:	72 18                	jb     c00070dc <mem_free+0x3c>
c00070c4:	83 ec 08             	sub    esp,0x8
c00070c7:	68 c3 fb 02 c0       	push   0xc002fbc3
c00070cc:	68 66 fb 02 c0       	push   0xc002fb66
c00070d1:	e8 ae 8a 01 00       	call   c001fb84 <CPrintf>
c00070d6:	83 c4 10             	add    esp,0x10
c00070d9:	8d 76 00             	lea    esi,[esi+0x0]
c00070dc:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070e1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070e5:	72 0d                	jb     c00070f4 <mem_free+0x54>
c00070e7:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070ec:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070f0:	72 22                	jb     c0007114 <mem_free+0x74>
c00070f2:	66 90                	xchg   ax,ax
c00070f4:	e8 7b 8a 01 00       	call   c001fb74 <CLockScheduler>
c00070f9:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00070ff:	83 c0 01             	add    eax,0x1
c0007102:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007108:	e8 4b 8a 01 00       	call   c001fb58 <CUnlockScheduler>
c000710d:	e9 ae 00 00 00       	jmp    c00071c0 <mem_free+0x120>
c0007112:	66 90                	xchg   ax,ax
c0007114:	83 ec 08             	sub    esp,0x8
c0007117:	6a 00                	push   0x0
c0007119:	68 98 76 03 c0       	push   0xc0037698
c000711e:	e8 d5 9b ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000712a:	83 e8 06             	sub    eax,0x6
c000712d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007135:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007138:	0f b6 c0             	movzx  eax,al
c000713b:	85 c0                	test   eax,eax
c000713d:	75 15                	jne    c0007154 <mem_free+0xb4>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	68 da fb 02 c0       	push   0xc002fbda
c0007147:	68 66 fb 02 c0       	push   0xc002fb66
c000714c:	e8 33 8a 01 00       	call   c001fb84 <CPrintf>
c0007151:	83 c4 10             	add    esp,0x10
c0007154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007158:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000715c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007161:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007165:	73 09                	jae    c0007170 <mem_free+0xd0>
c0007167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000716b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007170:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007177:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000717c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007180:	29 c1                	sub    ecx,eax
c0007182:	89 c8                	mov    eax,ecx
c0007184:	89 c1                	mov    ecx,eax
c0007186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000718d:	29 c1                	sub    ecx,eax
c000718f:	89 c8                	mov    eax,ecx
c0007191:	01 d0                	add    eax,edx
c0007193:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007199:	83 ec 0c             	sub    esp,0xc
c000719c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a0:	e8 bf fc ff ff       	call   c0006e64 <plug_holes>
c00071a5:	83 c4 10             	add    esp,0x10
c00071a8:	83 ec 0c             	sub    esp,0xc
c00071ab:	68 98 76 03 c0       	push   0xc0037698
c00071b0:	e8 2b 9b ff ff       	call   c0000ce0 <sys_sem_signal>
c00071b5:	83 c4 10             	add    esp,0x10
c00071b8:	eb 06                	jmp    c00071c0 <mem_free+0x120>
c00071ba:	66 90                	xchg   ax,ax
c00071bc:	90                   	nop
c00071bd:	8d 76 00             	lea    esi,[esi+0x0]
c00071c0:	83 c4 1c             	add    esp,0x1c
c00071c3:	c3                   	ret    

c00071c4 <mem_trim>:
c00071c4:	83 ec 2c             	sub    esp,0x2c
c00071c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00071cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00071d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071d5:	83 f8 0b             	cmp    eax,0xb
c00071d8:	77 0a                	ja     c00071e4 <mem_trim+0x20>
c00071da:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]
c00071e4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071e9:	3d 40 06 00 00       	cmp    eax,0x640
c00071ee:	76 0c                	jbe    c00071fc <mem_trim+0x38>
c00071f0:	b8 00 00 00 00       	mov    eax,0x0
c00071f5:	e9 d6 02 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00071fa:	66 90                	xchg   ax,ax
c00071fc:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007201:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007205:	72 0d                	jb     c0007214 <mem_trim+0x50>
c0007207:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000720c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007210:	72 1a                	jb     c000722c <mem_trim+0x68>
c0007212:	66 90                	xchg   ax,ax
c0007214:	83 ec 08             	sub    esp,0x8
c0007217:	68 ee fb 02 c0       	push   0xc002fbee
c000721c:	68 66 fb 02 c0       	push   0xc002fb66
c0007221:	e8 5e 89 01 00       	call   c001fb84 <CPrintf>
c0007226:	83 c4 10             	add    esp,0x10
c0007229:	8d 76 00             	lea    esi,[esi+0x0]
c000722c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007231:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007235:	72 0d                	jb     c0007244 <mem_trim+0x80>
c0007237:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000723c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007240:	72 26                	jb     c0007268 <mem_trim+0xa4>
c0007242:	66 90                	xchg   ax,ax
c0007244:	e8 2b 89 01 00       	call   c001fb74 <CLockScheduler>
c0007249:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000724f:	83 c0 01             	add    eax,0x1
c0007252:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007258:	e8 fb 88 01 00       	call   c001fb58 <CUnlockScheduler>
c000725d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007261:	e9 6a 02 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c0007266:	66 90                	xchg   ax,ax
c0007268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000726c:	83 e8 06             	sub    eax,0x6
c000726f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007273:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000727c:	29 c2                	sub    edx,eax
c000727e:	89 d0                	mov    eax,edx
c0007280:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007289:	66 8b 10             	mov    dx,WORD PTR [eax]
c000728c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007291:	89 d1                	mov    ecx,edx
c0007293:	29 c1                	sub    ecx,eax
c0007295:	89 c8                	mov    eax,ecx
c0007297:	83 e8 06             	sub    eax,0x6
c000729a:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000729f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072a4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072a9:	39 c2                	cmp    edx,eax
c00072ab:	76 17                	jbe    c00072c4 <mem_trim+0x100>
c00072ad:	83 ec 08             	sub    esp,0x8
c00072b0:	68 4c fc 02 c0       	push   0xc002fc4c
c00072b5:	68 66 fb 02 c0       	push   0xc002fb66
c00072ba:	e8 c5 88 01 00       	call   c001fb84 <CPrintf>
c00072bf:	83 c4 10             	add    esp,0x10
c00072c2:	66 90                	xchg   ax,ax
c00072c4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072c9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072ce:	39 c2                	cmp    edx,eax
c00072d0:	76 0a                	jbe    c00072dc <mem_trim+0x118>
c00072d2:	b8 00 00 00 00       	mov    eax,0x0
c00072d7:	e9 f4 01 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00072dc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072e1:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072e6:	39 c2                	cmp    edx,eax
c00072e8:	75 0a                	jne    c00072f4 <mem_trim+0x130>
c00072ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00072ee:	e9 dd 01 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00072f3:	90                   	nop
c00072f4:	83 ec 08             	sub    esp,0x8
c00072f7:	6a 00                	push   0x0
c00072f9:	68 98 76 03 c0       	push   0xc0037698
c00072fe:	e8 f5 99 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0007303:	83 c4 10             	add    esp,0x10
c0007306:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000730c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007310:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007313:	0f b7 c0             	movzx  eax,ax
c0007316:	01 d0                	add    eax,edx
c0007318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000731c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007320:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007323:	0f b6 c0             	movzx  eax,al
c0007326:	85 c0                	test   eax,eax
c0007328:	0f 85 c6 00 00 00    	jne    c00073f4 <mem_trim+0x230>
c000732e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007332:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007335:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000733a:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000733f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007343:	01 d0                	add    eax,edx
c0007345:	83 c0 06             	add    eax,0x6
c0007348:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000734d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007352:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007356:	75 14                	jne    c000736c <mem_trim+0x1a8>
c0007358:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000735e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007363:	01 d0                	add    eax,edx
c0007365:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000736a:	66 90                	xchg   ax,ax
c000736c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007372:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007377:	01 d0                	add    eax,edx
c0007379:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007381:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007389:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000738e:	66 89 10             	mov    WORD PTR [eax],dx
c0007391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007395:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000739a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000739e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00073a6:	66 89 10             	mov    WORD PTR [eax],dx
c00073a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073ad:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073b0:	0f b7 c0             	movzx  eax,ax
c00073b3:	3d 40 06 00 00       	cmp    eax,0x640
c00073b8:	74 1a                	je     c00073d4 <mem_trim+0x210>
c00073ba:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073c7:	0f b7 c0             	movzx  eax,ax
c00073ca:	01 c2                	add    edx,eax
c00073cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073d0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073d4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073e2:	29 d1                	sub    ecx,edx
c00073e4:	89 ca                	mov    edx,ecx
c00073e6:	01 d0                	add    eax,edx
c00073e8:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073ee:	e9 c9 00 00 00       	jmp    c00074bc <mem_trim+0x2f8>
c00073f3:	90                   	nop
c00073f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073f9:	8d 50 12             	lea    edx,[eax+0x12]
c00073fc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007401:	39 c2                	cmp    edx,eax
c0007403:	0f 87 b3 00 00 00    	ja     c00074bc <mem_trim+0x2f8>
c0007409:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000740e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007412:	01 d0                	add    eax,edx
c0007414:	83 c0 06             	add    eax,0x6
c0007417:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000741c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007422:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007427:	01 d0                	add    eax,edx
c0007429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000742d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007432:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007436:	73 0c                	jae    c0007444 <mem_trim+0x280>
c0007438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000743c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007441:	8d 76 00             	lea    esi,[esi+0x0]
c0007444:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007448:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000744c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007450:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007457:	66 89 10             	mov    WORD PTR [eax],dx
c000745a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000745e:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007463:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000746b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000746f:	66 89 10             	mov    WORD PTR [eax],dx
c0007472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007476:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007479:	0f b7 c0             	movzx  eax,ax
c000747c:	3d 40 06 00 00       	cmp    eax,0x640
c0007481:	74 1d                	je     c00074a0 <mem_trim+0x2dc>
c0007483:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007489:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000748d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007490:	0f b7 c0             	movzx  eax,ax
c0007493:	01 c2                	add    edx,eax
c0007495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007499:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000749d:	8d 76 00             	lea    esi,[esi+0x0]
c00074a0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00074a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00074ae:	29 d1                	sub    ecx,edx
c00074b0:	89 ca                	mov    edx,ecx
c00074b2:	01 d0                	add    eax,edx
c00074b4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00074ba:	66 90                	xchg   ax,ax
c00074bc:	83 ec 0c             	sub    esp,0xc
c00074bf:	68 98 76 03 c0       	push   0xc0037698
c00074c4:	e8 17 98 ff ff       	call   c0000ce0 <sys_sem_signal>
c00074c9:	83 c4 10             	add    esp,0x10
c00074cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074d0:	83 c4 2c             	add    esp,0x2c
c00074d3:	c3                   	ret    

c00074d4 <mem_malloc>:
c00074d4:	53                   	push   ebx
c00074d5:	83 ec 28             	sub    esp,0x28
c00074d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074dc:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00074e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074e6:	85 c0                	test   eax,eax
c00074e8:	75 0a                	jne    c00074f4 <mem_malloc+0x20>
c00074ea:	b8 00 00 00 00       	mov    eax,0x0
c00074ef:	e9 f8 02 00 00       	jmp    c00077ec <mem_malloc+0x318>
c00074f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074f9:	83 f8 0b             	cmp    eax,0xb
c00074fc:	77 0a                	ja     c0007508 <mem_malloc+0x34>
c00074fe:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007505:	8d 76 00             	lea    esi,[esi+0x0]
c0007508:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000750d:	3d 40 06 00 00       	cmp    eax,0x640
c0007512:	76 0c                	jbe    c0007520 <mem_malloc+0x4c>
c0007514:	b8 00 00 00 00       	mov    eax,0x0
c0007519:	e9 ce 02 00 00       	jmp    c00077ec <mem_malloc+0x318>
c000751e:	66 90                	xchg   ax,ax
c0007520:	83 ec 08             	sub    esp,0x8
c0007523:	6a 00                	push   0x0
c0007525:	68 98 76 03 c0       	push   0xc0037698
c000752a:	e8 c9 97 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c000752f:	83 c4 10             	add    esp,0x10
c0007532:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007538:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000753d:	29 c2                	sub    edx,eax
c000753f:	89 d0                	mov    eax,edx
c0007541:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007546:	e9 61 02 00 00       	jmp    c00077ac <mem_malloc+0x2d8>
c000754b:	90                   	nop
c000754c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007552:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007557:	01 d0                	add    eax,edx
c0007559:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000755d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007564:	0f b6 c0             	movzx  eax,al
c0007567:	85 c0                	test   eax,eax
c0007569:	0f 85 25 02 00 00    	jne    c0007794 <mem_malloc+0x2c0>
c000756f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007573:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007576:	0f b7 d0             	movzx  edx,ax
c0007579:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000757e:	29 c2                	sub    edx,eax
c0007580:	89 d0                	mov    eax,edx
c0007582:	8d 50 fa             	lea    edx,[eax-0x6]
c0007585:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000758a:	39 c2                	cmp    edx,eax
c000758c:	0f 82 02 02 00 00    	jb     c0007794 <mem_malloc+0x2c0>
c0007592:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007599:	0f b7 d0             	movzx  edx,ax
c000759c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00075a1:	29 c2                	sub    edx,eax
c00075a3:	89 d0                	mov    eax,edx
c00075a5:	8d 50 fa             	lea    edx,[eax-0x6]
c00075a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00075ad:	83 c0 12             	add    eax,0x12
c00075b0:	39 c2                	cmp    edx,eax
c00075b2:	0f 82 c4 00 00 00    	jb     c000767c <mem_malloc+0x1a8>
c00075b8:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00075bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075c1:	01 d0                	add    eax,edx
c00075c3:	83 c0 06             	add    eax,0x6
c00075c6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00075cb:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075d1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00075d6:	01 d0                	add    eax,edx
c00075d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075e8:	66 8b 10             	mov    dx,WORD PTR [eax]
c00075eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075ef:	66 89 10             	mov    WORD PTR [eax],dx
c00075f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075f6:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00075fb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00075ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007603:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007608:	66 89 10             	mov    WORD PTR [eax],dx
c000760b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000760f:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007617:	66 8b 00             	mov    ax,WORD PTR [eax]
c000761a:	0f b7 c0             	movzx  eax,ax
c000761d:	3d 40 06 00 00       	cmp    eax,0x640
c0007622:	74 1c                	je     c0007640 <mem_malloc+0x16c>
c0007624:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000762a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000762e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007631:	0f b7 c0             	movzx  eax,ax
c0007634:	01 c2                	add    edx,eax
c0007636:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000763b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000763f:	90                   	nop
c0007640:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007646:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000764a:	01 d0                	add    eax,edx
c000764c:	83 c0 06             	add    eax,0x6
c000764f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007655:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000765c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007662:	0f b7 d2             	movzx  edx,dx
c0007665:	0f b7 c0             	movzx  eax,ax
c0007668:	39 c2                	cmp    edx,eax
c000766a:	73 64                	jae    c00076d0 <mem_malloc+0x1fc>
c000766c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007672:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007678:	eb 56                	jmp    c00076d0 <mem_malloc+0x1fc>
c000767a:	66 90                	xchg   ax,ax
c000767c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007680:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007684:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c000768b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000768f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007692:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007698:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000769c:	29 cb                	sub    ebx,ecx
c000769e:	89 d9                	mov    ecx,ebx
c00076a0:	29 c8                	sub    eax,ecx
c00076a2:	01 d0                	add    eax,edx
c00076a4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00076aa:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00076b1:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076b7:	0f b7 d2             	movzx  edx,dx
c00076ba:	0f b7 c0             	movzx  eax,ax
c00076bd:	39 c2                	cmp    edx,eax
c00076bf:	73 0f                	jae    c00076d0 <mem_malloc+0x1fc>
c00076c1:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076c7:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00076cd:	8d 76 00             	lea    esi,[esi+0x0]
c00076d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076d5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00076d9:	75 71                	jne    c000774c <mem_malloc+0x278>
c00076db:	eb 1b                	jmp    c00076f8 <mem_malloc+0x224>
c00076dd:	8d 76 00             	lea    esi,[esi+0x0]
c00076e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076e6:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076eb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ee:	0f b7 c0             	movzx  eax,ax
c00076f1:	01 d0                	add    eax,edx
c00076f3:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00076f8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076fd:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007700:	0f b6 c0             	movzx  eax,al
c0007703:	85 c0                	test   eax,eax
c0007705:	74 11                	je     c0007718 <mem_malloc+0x244>
c0007707:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000770d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007712:	39 c2                	cmp    edx,eax
c0007714:	75 ca                	jne    c00076e0 <mem_malloc+0x20c>
c0007716:	66 90                	xchg   ax,ax
c0007718:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000771e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007723:	39 c2                	cmp    edx,eax
c0007725:	74 25                	je     c000774c <mem_malloc+0x278>
c0007727:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000772c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000772f:	0f b6 c0             	movzx  eax,al
c0007732:	85 c0                	test   eax,eax
c0007734:	74 16                	je     c000774c <mem_malloc+0x278>
c0007736:	83 ec 08             	sub    esp,0x8
c0007739:	68 05 fc 02 c0       	push   0xc002fc05
c000773e:	68 66 fb 02 c0       	push   0xc002fb66
c0007743:	e8 3c 84 01 00       	call   c001fb84 <CPrintf>
c0007748:	83 c4 10             	add    esp,0x10
c000774b:	90                   	nop
c000774c:	83 ec 0c             	sub    esp,0xc
c000774f:	68 98 76 03 c0       	push   0xc0037698
c0007754:	e8 87 95 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007759:	83 c4 10             	add    esp,0x10
c000775c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007765:	01 d0                	add    eax,edx
c0007767:	8d 50 06             	lea    edx,[eax+0x6]
c000776a:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000776f:	39 c2                	cmp    edx,eax
c0007771:	76 15                	jbe    c0007788 <mem_malloc+0x2b4>
c0007773:	83 ec 08             	sub    esp,0x8
c0007776:	68 6c fc 02 c0       	push   0xc002fc6c
c000777b:	68 66 fb 02 c0       	push   0xc002fb66
c0007780:	e8 ff 83 01 00       	call   c001fb84 <CPrintf>
c0007785:	83 c4 10             	add    esp,0x10
c0007788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000778c:	83 c0 06             	add    eax,0x6
c000778f:	eb 5b                	jmp    c00077ec <mem_malloc+0x318>
c0007791:	8d 76 00             	lea    esi,[esi+0x0]
c0007794:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000779a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000779f:	01 d0                	add    eax,edx
c00077a1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00077a9:	8d 76 00             	lea    esi,[esi+0x0]
c00077ac:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00077b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00077b6:	b9 40 06 00 00       	mov    ecx,0x640
c00077bb:	29 d1                	sub    ecx,edx
c00077bd:	89 ca                	mov    edx,ecx
c00077bf:	39 d0                	cmp    eax,edx
c00077c1:	0f 8c 85 fd ff ff    	jl     c000754c <mem_malloc+0x78>
c00077c7:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00077cd:	83 c0 01             	add    eax,0x1
c00077d0:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00077d6:	83 ec 0c             	sub    esp,0xc
c00077d9:	68 98 76 03 c0       	push   0xc0037698
c00077de:	e8 fd 94 ff ff       	call   c0000ce0 <sys_sem_signal>
c00077e3:	83 c4 10             	add    esp,0x10
c00077e6:	b8 00 00 00 00       	mov    eax,0x0
c00077eb:	90                   	nop
c00077ec:	83 c4 28             	add    esp,0x28
c00077ef:	5b                   	pop    ebx
c00077f0:	c3                   	ret    
c00077f1:	8d 76 00             	lea    esi,[esi+0x0]

c00077f4 <mem_calloc>:
c00077f4:	83 ec 2c             	sub    esp,0x2c
c00077f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00077ff:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007804:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007809:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000780d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007811:	0f af c2             	imul   eax,edx
c0007814:	0f b7 c0             	movzx  eax,ax
c0007817:	83 ec 0c             	sub    esp,0xc
c000781a:	50                   	push   eax
c000781b:	e8 b4 fc ff ff       	call   c00074d4 <mem_malloc>
c0007820:	83 c4 10             	add    esp,0x10
c0007823:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007827:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000782c:	74 22                	je     c0007850 <mem_calloc+0x5c>
c000782e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007833:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007838:	0f af c2             	imul   eax,edx
c000783b:	83 ec 04             	sub    esp,0x4
c000783e:	50                   	push   eax
c000783f:	6a 00                	push   0x0
c0007841:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007845:	e8 a6 8c ff ff       	call   c00004f0 <memset>
c000784a:	83 c4 10             	add    esp,0x10
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007854:	83 c4 2c             	add    esp,0x2c
c0007857:	c3                   	ret    

c0007858 <memp_init>:
c0007858:	83 ec 10             	sub    esp,0x10
c000785b:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007862:	eb 78                	jmp    c00078dc <memp_init+0x84>
c0007864:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007869:	89 d0                	mov    eax,edx
c000786b:	c1 e0 02             	shl    eax,0x2
c000786e:	01 d0                	add    eax,edx
c0007870:	d1 e0                	shl    eax,1
c0007872:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007877:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000787c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007881:	89 d0                	mov    eax,edx
c0007883:	c1 e0 02             	shl    eax,0x2
c0007886:	01 d0                	add    eax,edx
c0007888:	d1 e0                	shl    eax,1
c000788a:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000788f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007894:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007899:	89 d0                	mov    eax,edx
c000789b:	c1 e0 02             	shl    eax,0x2
c000789e:	01 d0                	add    eax,edx
c00078a0:	d1 e0                	shl    eax,1
c00078a2:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00078a7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00078ac:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00078b6:	66 8b 8c 00 bc fc 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd0344]
c00078be:	89 d0                	mov    eax,edx
c00078c0:	c1 e0 02             	shl    eax,0x2
c00078c3:	01 d0                	add    eax,edx
c00078c5:	d1 e0                	shl    eax,1
c00078c7:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00078cc:	66 89 08             	mov    WORD PTR [eax],cx
c00078cf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078d4:	83 c0 01             	add    eax,0x1
c00078d7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078dc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078e1:	83 f8 0d             	cmp    eax,0xd
c00078e4:	0f 86 7a ff ff ff    	jbe    c0007864 <memp_init+0xc>
c00078ea:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00078f2:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00078f9:	e9 8a 00 00 00       	jmp    c0007988 <memp_init+0x130>
c00078fe:	66 90                	xchg   ax,ax
c0007900:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007905:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007910:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007917:	eb 47                	jmp    c0007960 <memp_init+0x108>
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007921:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000792c:	89 10                	mov    DWORD PTR [eax],edx
c000792e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007933:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007937:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000793e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007943:	66 8b 84 00 d8 fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0328]
c000794b:	0f b7 c0             	movzx  eax,ax
c000794e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007956:	83 c0 01             	add    eax,0x1
c0007959:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000795e:	66 90                	xchg   ax,ax
c0007960:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007965:	66 8b 84 00 bc fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0344]
c000796d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007972:	0f b7 c0             	movzx  eax,ax
c0007975:	39 c2                	cmp    edx,eax
c0007977:	72 a3                	jb     c000791c <memp_init+0xc4>
c0007979:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000797e:	83 c0 01             	add    eax,0x1
c0007981:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007986:	66 90                	xchg   ax,ax
c0007988:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000798d:	83 f8 0d             	cmp    eax,0xd
c0007990:	0f 86 6a ff ff ff    	jbe    c0007900 <memp_init+0xa8>
c0007996:	90                   	nop
c0007997:	83 c4 10             	add    esp,0x10
c000799a:	c3                   	ret    
c000799b:	90                   	nop

c000799c <memp_malloc>:
c000799c:	83 ec 1c             	sub    esp,0x1c
c000799f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00079a4:	76 22                	jbe    c00079c8 <memp_malloc+0x2c>
c00079a6:	83 ec 08             	sub    esp,0x8
c00079a9:	68 9c fc 02 c0       	push   0xc002fc9c
c00079ae:	68 66 fb 02 c0       	push   0xc002fb66
c00079b3:	e8 cc 81 01 00       	call   c001fb84 <CPrintf>
c00079b8:	83 c4 10             	add    esp,0x10
c00079bb:	b8 00 00 00 00       	mov    eax,0x0
c00079c0:	e9 ff 00 00 00       	jmp    c0007ac4 <memp_malloc+0x128>
c00079c5:	8d 76 00             	lea    esi,[esi+0x0]
c00079c8:	e8 a7 81 01 00       	call   c001fb74 <CLockScheduler>
c00079cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079d1:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00079d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00079e1:	0f 84 a1 00 00 00    	je     c0007a88 <memp_malloc+0xec>
c00079e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00079ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079f1:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079fc:	89 d0                	mov    eax,edx
c00079fe:	c1 e0 02             	shl    eax,0x2
c0007a01:	01 d0                	add    eax,edx
c0007a03:	d1 e0                	shl    eax,1
c0007a05:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a0d:	83 c0 01             	add    eax,0x1
c0007a10:	89 c1                	mov    ecx,eax
c0007a12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a16:	89 d0                	mov    eax,edx
c0007a18:	c1 e0 02             	shl    eax,0x2
c0007a1b:	01 d0                	add    eax,edx
c0007a1d:	d1 e0                	shl    eax,1
c0007a1f:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a24:	66 89 08             	mov    WORD PTR [eax],cx
c0007a27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a2b:	89 d0                	mov    eax,edx
c0007a2d:	c1 e0 02             	shl    eax,0x2
c0007a30:	01 d0                	add    eax,edx
c0007a32:	d1 e0                	shl    eax,1
c0007a34:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a39:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007a3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a40:	89 d0                	mov    eax,edx
c0007a42:	c1 e0 02             	shl    eax,0x2
c0007a45:	01 d0                	add    eax,edx
c0007a47:	d1 e0                	shl    eax,1
c0007a49:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a4e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a51:	0f b7 d1             	movzx  edx,cx
c0007a54:	0f b7 c0             	movzx  eax,ax
c0007a57:	39 c2                	cmp    edx,eax
c0007a59:	73 5d                	jae    c0007ab8 <memp_malloc+0x11c>
c0007a5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a5f:	89 d0                	mov    eax,edx
c0007a61:	c1 e0 02             	shl    eax,0x2
c0007a64:	01 d0                	add    eax,edx
c0007a66:	d1 e0                	shl    eax,1
c0007a68:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a6d:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007a70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a74:	89 d0                	mov    eax,edx
c0007a76:	c1 e0 02             	shl    eax,0x2
c0007a79:	01 d0                	add    eax,edx
c0007a7b:	d1 e0                	shl    eax,1
c0007a7d:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a82:	66 89 08             	mov    WORD PTR [eax],cx
c0007a85:	eb 31                	jmp    c0007ab8 <memp_malloc+0x11c>
c0007a87:	90                   	nop
c0007a88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a8c:	89 d0                	mov    eax,edx
c0007a8e:	c1 e0 02             	shl    eax,0x2
c0007a91:	01 d0                	add    eax,edx
c0007a93:	d1 e0                	shl    eax,1
c0007a95:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a9a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a9d:	83 c0 01             	add    eax,0x1
c0007aa0:	89 c1                	mov    ecx,eax
c0007aa2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007aa6:	89 d0                	mov    eax,edx
c0007aa8:	c1 e0 02             	shl    eax,0x2
c0007aab:	01 d0                	add    eax,edx
c0007aad:	d1 e0                	shl    eax,1
c0007aaf:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007ab4:	66 89 08             	mov    WORD PTR [eax],cx
c0007ab7:	90                   	nop
c0007ab8:	e8 9b 80 01 00       	call   c001fb58 <CUnlockScheduler>
c0007abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0007ac4:	83 c4 1c             	add    esp,0x1c
c0007ac7:	c3                   	ret    

c0007ac8 <memp_free>:
c0007ac8:	83 ec 1c             	sub    esp,0x1c
c0007acb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ad0:	74 66                	je     c0007b38 <memp_free+0x70>
c0007ad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ad6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ada:	e8 95 80 01 00       	call   c001fb74 <CLockScheduler>
c0007adf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ae3:	89 d0                	mov    eax,edx
c0007ae5:	c1 e0 02             	shl    eax,0x2
c0007ae8:	01 d0                	add    eax,edx
c0007aea:	d1 e0                	shl    eax,1
c0007aec:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007af1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007af4:	83 e8 01             	sub    eax,0x1
c0007af7:	89 c1                	mov    ecx,eax
c0007af9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007afd:	89 d0                	mov    eax,edx
c0007aff:	c1 e0 02             	shl    eax,0x2
c0007b02:	01 d0                	add    eax,edx
c0007b04:	d1 e0                	shl    eax,1
c0007b06:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b0b:	66 89 08             	mov    WORD PTR [eax],cx
c0007b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b12:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b1d:	89 10                	mov    DWORD PTR [eax],edx
c0007b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007b27:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b2e:	e8 25 80 01 00       	call   c001fb58 <CUnlockScheduler>
c0007b33:	eb 07                	jmp    c0007b3c <memp_free+0x74>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	90                   	nop
c0007b39:	8d 76 00             	lea    esi,[esi+0x0]
c0007b3c:	83 c4 1c             	add    esp,0x1c
c0007b3f:	c3                   	ret    

c0007b40 <netif_init>:
c0007b40:	90                   	nop
c0007b41:	c3                   	ret    
c0007b42:	66 90                	xchg   ax,ax

c0007b44 <netif_find>:
c0007b44:	83 ec 10             	sub    esp,0x10
c0007b47:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007b4c:	75 0a                	jne    c0007b58 <netif_find+0x14>
c0007b4e:	b8 00 00 00 00       	mov    eax,0x0
c0007b53:	e9 80 00 00 00       	jmp    c0007bd8 <netif_find+0x94>
c0007b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b5c:	83 c0 02             	add    eax,0x2
c0007b5f:	8a 00                	mov    al,BYTE PTR [eax]
c0007b61:	83 e8 30             	sub    eax,0x30
c0007b64:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007b68:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007b6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b71:	eb 59                	jmp    c0007bcc <netif_find+0x88>
c0007b73:	90                   	nop
c0007b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b78:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007b7b:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007b80:	0f b6 c0             	movzx  eax,al
c0007b83:	39 c2                	cmp    edx,eax
c0007b85:	75 39                	jne    c0007bc0 <netif_find+0x7c>
c0007b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b8b:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b91:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007b94:	0f be d2             	movsx  edx,dl
c0007b97:	0f be c0             	movsx  eax,al
c0007b9a:	39 c2                	cmp    edx,eax
c0007b9c:	75 22                	jne    c0007bc0 <netif_find+0x7c>
c0007b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ba2:	83 c0 01             	add    eax,0x1
c0007ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bab:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007bae:	0f be d2             	movsx  edx,dl
c0007bb1:	0f be c0             	movsx  eax,al
c0007bb4:	39 c2                	cmp    edx,eax
c0007bb6:	75 08                	jne    c0007bc0 <netif_find+0x7c>
c0007bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bbc:	eb 1a                	jmp    c0007bd8 <netif_find+0x94>
c0007bbe:	66 90                	xchg   ax,ax
c0007bc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bca:	66 90                	xchg   ax,ax
c0007bcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007bd1:	75 a1                	jne    c0007b74 <netif_find+0x30>
c0007bd3:	b8 00 00 00 00       	mov    eax,0x0
c0007bd8:	83 c4 10             	add    esp,0x10
c0007bdb:	c3                   	ret    

c0007bdc <netif_set_ipaddr>:
c0007bdc:	83 ec 1c             	sub    esp,0x1c
c0007bdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007be3:	8b 10                	mov    edx,DWORD PTR [eax]
c0007be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bec:	39 c2                	cmp    edx,eax
c0007bee:	0f 84 bc 00 00 00    	je     c0007cb0 <netif_set_ipaddr+0xd4>
c0007bf4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bfd:	eb 45                	jmp    c0007c44 <netif_set_ipaddr+0x68>
c0007bff:	90                   	nop
c0007c00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c04:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c0d:	39 c2                	cmp    edx,eax
c0007c0f:	75 27                	jne    c0007c38 <netif_set_ipaddr+0x5c>
c0007c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007c23:	e8 8c 36 00 00       	call   c000b2b4 <tcp_abort>
c0007c28:	83 c4 10             	add    esp,0x10
c0007c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c33:	eb 0f                	jmp    c0007c44 <netif_set_ipaddr+0x68>
c0007c35:	8d 76 00             	lea    esi,[esi+0x0]
c0007c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c43:	90                   	nop
c0007c44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007c49:	75 b5                	jne    c0007c00 <netif_set_ipaddr+0x24>
c0007c4b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007c50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c54:	eb 52                	jmp    c0007ca8 <netif_set_ipaddr+0xcc>
c0007c56:	66 90                	xchg   ax,ax
c0007c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c5c:	85 c0                	test   eax,eax
c0007c5e:	74 3c                	je     c0007c9c <netif_set_ipaddr+0xc0>
c0007c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c66:	85 c0                	test   eax,eax
c0007c68:	74 32                	je     c0007c9c <netif_set_ipaddr+0xc0>
c0007c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c77:	39 c2                	cmp    edx,eax
c0007c79:	75 21                	jne    c0007c9c <netif_set_ipaddr+0xc0>
c0007c7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c80:	74 0a                	je     c0007c8c <netif_set_ipaddr+0xb0>
c0007c82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c88:	eb 0a                	jmp    c0007c94 <netif_set_ipaddr+0xb8>
c0007c8a:	66 90                	xchg   ax,ax
c0007c8c:	b8 00 00 00 00       	mov    eax,0x0
c0007c91:	8d 76 00             	lea    esi,[esi+0x0]
c0007c94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c98:	89 02                	mov    DWORD PTR [edx],eax
c0007c9a:	66 90                	xchg   ax,ax
c0007c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ca7:	90                   	nop
c0007ca8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cad:	75 a9                	jne    c0007c58 <netif_set_ipaddr+0x7c>
c0007caf:	90                   	nop
c0007cb0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007cb5:	74 09                	je     c0007cc0 <netif_set_ipaddr+0xe4>
c0007cb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cbd:	eb 09                	jmp    c0007cc8 <netif_set_ipaddr+0xec>
c0007cbf:	90                   	nop
c0007cc0:	b8 00 00 00 00       	mov    eax,0x0
c0007cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ccc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007ccf:	90                   	nop
c0007cd0:	83 c4 1c             	add    esp,0x1c
c0007cd3:	c3                   	ret    

c0007cd4 <netif_set_gw>:
c0007cd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd9:	74 09                	je     c0007ce4 <netif_set_gw+0x10>
c0007cdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ce1:	eb 09                	jmp    c0007cec <netif_set_gw+0x18>
c0007ce3:	90                   	nop
c0007ce4:	b8 00 00 00 00       	mov    eax,0x0
c0007ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cf0:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007cf3:	90                   	nop
c0007cf4:	c3                   	ret    
c0007cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0007cf8 <netif_set_netmask>:
c0007cf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cfd:	74 09                	je     c0007d08 <netif_set_netmask+0x10>
c0007cff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d05:	eb 09                	jmp    c0007d10 <netif_set_netmask+0x18>
c0007d07:	90                   	nop
c0007d08:	b8 00 00 00 00       	mov    eax,0x0
c0007d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007d14:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007d17:	90                   	nop
c0007d18:	c3                   	ret    
c0007d19:	8d 76 00             	lea    esi,[esi+0x0]

c0007d1c <netif_set_addr>:
c0007d1c:	83 ec 0c             	sub    esp,0xc
c0007d1f:	83 ec 08             	sub    esp,0x8
c0007d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d2a:	e8 ad fe ff ff       	call   c0007bdc <netif_set_ipaddr>
c0007d2f:	83 c4 10             	add    esp,0x10
c0007d32:	83 ec 08             	sub    esp,0x8
c0007d35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007d39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d3d:	e8 b6 ff ff ff       	call   c0007cf8 <netif_set_netmask>
c0007d42:	83 c4 10             	add    esp,0x10
c0007d45:	83 ec 08             	sub    esp,0x8
c0007d48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 7f ff ff ff       	call   c0007cd4 <netif_set_gw>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	90                   	nop
c0007d59:	83 c4 0c             	add    esp,0xc
c0007d5c:	c3                   	ret    
c0007d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0007d60 <netif_add>:
c0007d60:	83 ec 0c             	sub    esp,0xc
c0007d63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007d68:	75 16                	jne    c0007d80 <netif_add+0x20>
c0007d6a:	83 ec 08             	sub    esp,0x8
c0007d6d:	68 f4 fc 02 c0       	push   0xc002fcf4
c0007d72:	68 66 fb 02 c0       	push   0xc002fb66
c0007d77:	e8 08 7e 01 00       	call   c001fb84 <CPrintf>
c0007d7c:	83 c4 10             	add    esp,0x10
c0007d7f:	90                   	nop
c0007d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007db1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007db4:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007db9:	8d 50 01             	lea    edx,[eax+0x1]
c0007dbc:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007dc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007dc6:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dd1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007de4:	e8 33 ff ff ff       	call   c0007d1c <netif_set_addr>
c0007de9:	83 c4 10             	add    esp,0x10
c0007dec:	83 ec 0c             	sub    esp,0xc
c0007def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007df3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007df7:	ff d0                	call   eax
c0007df9:	83 c4 10             	add    esp,0x10
c0007dfc:	0f be c0             	movsx  eax,al
c0007dff:	85 c0                	test   eax,eax
c0007e01:	74 09                	je     c0007e0c <netif_add+0xac>
c0007e03:	b8 00 00 00 00       	mov    eax,0x0
c0007e08:	eb 1e                	jmp    c0007e28 <netif_add+0xc8>
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e16:	89 10                	mov    DWORD PTR [eax],edx
c0007e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e1c:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e25:	8d 76 00             	lea    esi,[esi+0x0]
c0007e28:	83 c4 0c             	add    esp,0xc
c0007e2b:	c3                   	ret    

c0007e2c <netif_set_default>:
c0007e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e30:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007e35:	90                   	nop
c0007e36:	c3                   	ret    
c0007e37:	90                   	nop

c0007e38 <netif_set_up>:
c0007e38:	83 ec 0c             	sub    esp,0xc
c0007e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e3f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e42:	0f b6 c0             	movzx  eax,al
c0007e45:	83 e0 01             	and    eax,0x1
c0007e48:	75 4a                	jne    c0007e94 <netif_set_up+0x5c>
c0007e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e4e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e51:	83 c8 01             	or     eax,0x1
c0007e54:	88 c2                	mov    dl,al
c0007e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e5a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e61:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e64:	0f b6 c0             	movzx  eax,al
c0007e67:	83 e0 10             	and    eax,0x10
c0007e6a:	74 28                	je     c0007e94 <netif_set_up+0x5c>
c0007e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e70:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e73:	0f b6 c0             	movzx  eax,al
c0007e76:	83 e0 20             	and    eax,0x20
c0007e79:	74 19                	je     c0007e94 <netif_set_up+0x5c>
c0007e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e7f:	83 c0 04             	add    eax,0x4
c0007e82:	83 ec 08             	sub    esp,0x8
c0007e85:	50                   	push   eax
c0007e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e8a:	e8 55 a6 00 00       	call   c00124e4 <etharp_request>
c0007e8f:	83 c4 10             	add    esp,0x10
c0007e92:	66 90                	xchg   ax,ax
c0007e94:	90                   	nop
c0007e95:	83 c4 0c             	add    esp,0xc
c0007e98:	c3                   	ret    
c0007e99:	8d 76 00             	lea    esi,[esi+0x0]

c0007e9c <netif_set_down>:
c0007e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ea0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ea3:	0f b6 c0             	movzx  eax,al
c0007ea6:	83 e0 01             	and    eax,0x1
c0007ea9:	74 15                	je     c0007ec0 <netif_set_down+0x24>
c0007eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007eaf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb2:	83 e0 fe             	and    eax,0xfffffffe
c0007eb5:	88 c2                	mov    dl,al
c0007eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ebb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ebe:	66 90                	xchg   ax,ax
c0007ec0:	90                   	nop
c0007ec1:	c3                   	ret    
c0007ec2:	66 90                	xchg   ax,ax

c0007ec4 <netif_remove>:
c0007ec4:	83 ec 10             	sub    esp,0x10
c0007ec7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007ecc:	0f 84 92 00 00 00    	je     c0007f64 <netif_remove+0xa0>
c0007ed2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ed6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ed9:	83 e0 01             	and    eax,0x1
c0007edc:	0f b6 c0             	movzx  eax,al
c0007edf:	85 c0                	test   eax,eax
c0007ee1:	74 0d                	je     c0007ef0 <netif_remove+0x2c>
c0007ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ee7:	e8 b0 ff ff ff       	call   c0007e9c <netif_set_down>
c0007eec:	83 c4 04             	add    esp,0x4
c0007eef:	90                   	nop
c0007ef0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ef5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ef9:	75 0d                	jne    c0007f08 <netif_remove+0x44>
c0007efb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f01:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007f06:	eb 44                	jmp    c0007f4c <netif_remove+0x88>
c0007f08:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f11:	eb 29                	jmp    c0007f3c <netif_remove+0x78>
c0007f13:	90                   	nop
c0007f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f1a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f1e:	75 10                	jne    c0007f30 <netif_remove+0x6c>
c0007f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f24:	8b 10                	mov    edx,DWORD PTR [eax]
c0007f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f2a:	89 10                	mov    DWORD PTR [eax],edx
c0007f2c:	eb 16                	jmp    c0007f44 <netif_remove+0x80>
c0007f2e:	66 90                	xchg   ax,ax
c0007f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3a:	66 90                	xchg   ax,ax
c0007f3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f41:	75 d1                	jne    c0007f14 <netif_remove+0x50>
c0007f43:	90                   	nop
c0007f44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f49:	74 1d                	je     c0007f68 <netif_remove+0xa4>
c0007f4b:	90                   	nop
c0007f4c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007f51:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f55:	75 15                	jne    c0007f6c <netif_remove+0xa8>
c0007f57:	6a 00                	push   0x0
c0007f59:	e8 ce fe ff ff       	call   c0007e2c <netif_set_default>
c0007f5e:	83 c4 04             	add    esp,0x4
c0007f61:	eb 09                	jmp    c0007f6c <netif_remove+0xa8>
c0007f63:	90                   	nop
c0007f64:	90                   	nop
c0007f65:	eb 05                	jmp    c0007f6c <netif_remove+0xa8>
c0007f67:	90                   	nop
c0007f68:	90                   	nop
c0007f69:	8d 76 00             	lea    esi,[esi+0x0]
c0007f6c:	83 c4 10             	add    esp,0x10
c0007f6f:	c3                   	ret    

c0007f70 <netif_set_link_up>:
c0007f70:	83 ec 0c             	sub    esp,0xc
c0007f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f77:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f7a:	0f b6 c0             	movzx  eax,al
c0007f7d:	83 e0 10             	and    eax,0x10
c0007f80:	75 4a                	jne    c0007fcc <netif_set_link_up+0x5c>
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f89:	83 c8 10             	or     eax,0x10
c0007f8c:	88 c2                	mov    dl,al
c0007f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f92:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f99:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f9c:	0f b6 c0             	movzx  eax,al
c0007f9f:	83 e0 01             	and    eax,0x1
c0007fa2:	74 28                	je     c0007fcc <netif_set_link_up+0x5c>
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fab:	0f b6 c0             	movzx  eax,al
c0007fae:	83 e0 20             	and    eax,0x20
c0007fb1:	74 19                	je     c0007fcc <netif_set_link_up+0x5c>
c0007fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb7:	83 c0 04             	add    eax,0x4
c0007fba:	83 ec 08             	sub    esp,0x8
c0007fbd:	50                   	push   eax
c0007fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fc2:	e8 1d a5 00 00       	call   c00124e4 <etharp_request>
c0007fc7:	83 c4 10             	add    esp,0x10
c0007fca:	66 90                	xchg   ax,ax
c0007fcc:	90                   	nop
c0007fcd:	83 c4 0c             	add    esp,0xc
c0007fd0:	c3                   	ret    
c0007fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0007fd4 <netif_set_link_down>:
c0007fd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fd8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fdb:	0f b6 c0             	movzx  eax,al
c0007fde:	83 e0 10             	and    eax,0x10
c0007fe1:	74 15                	je     c0007ff8 <netif_set_link_down+0x24>
c0007fe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fe7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fea:	83 e0 ef             	and    eax,0xffffffef
c0007fed:	88 c2                	mov    dl,al
c0007fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ff3:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ff6:	66 90                	xchg   ax,ax
c0007ff8:	90                   	nop
c0007ff9:	c3                   	ret    
c0007ffa:	66 90                	xchg   ax,ax

c0007ffc <pbuf_free_ooseq>:
c0007ffc:	83 ec 1c             	sub    esp,0x1c
c0007fff:	e8 70 7b 01 00       	call   c001fb74 <CLockScheduler>
c0008004:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000800b:	e8 48 7b 01 00       	call   c001fb58 <CUnlockScheduler>
c0008010:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0008015:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008019:	eb 41                	jmp    c000805c <pbuf_free_ooseq+0x60>
c000801b:	90                   	nop
c000801c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008020:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008026:	85 c0                	test   eax,eax
c0008028:	74 26                	je     c0008050 <pbuf_free_ooseq+0x54>
c000802a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000802e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008034:	83 ec 0c             	sub    esp,0xc
c0008037:	50                   	push   eax
c0008038:	e8 1b 20 00 00       	call   c000a058 <tcp_segs_free>
c000803d:	83 c4 10             	add    esp,0x10
c0008040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008044:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000804e:	eb 14                	jmp    c0008064 <pbuf_free_ooseq+0x68>
c0008050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008054:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000805b:	90                   	nop
c000805c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008061:	75 b9                	jne    c000801c <pbuf_free_ooseq+0x20>
c0008063:	90                   	nop
c0008064:	83 c4 1c             	add    esp,0x1c
c0008067:	c3                   	ret    

c0008068 <pbuf_pool_is_empty>:
c0008068:	83 ec 1c             	sub    esp,0x1c
c000806b:	e8 04 7b 01 00       	call   c001fb74 <CLockScheduler>
c0008070:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0008075:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008079:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0008080:	e8 d3 7a 01 00       	call   c001fb58 <CUnlockScheduler>
c0008085:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000808a:	85 c0                	test   eax,eax
c000808c:	75 2e                	jne    c00080bc <pbuf_pool_is_empty+0x54>
c000808e:	83 ec 04             	sub    esp,0x4
c0008091:	6a 00                	push   0x0
c0008093:	6a 00                	push   0x0
c0008095:	68 fc 7f 00 c0       	push   0xc0007ffc
c000809a:	e8 e9 8b ff ff       	call   c0000c88 <tcpip_callback_with_block>
c000809f:	83 c4 10             	add    esp,0x10
c00080a2:	0f be c0             	movsx  eax,al
c00080a5:	85 c0                	test   eax,eax
c00080a7:	74 13                	je     c00080bc <pbuf_pool_is_empty+0x54>
c00080a9:	e8 c6 7a 01 00       	call   c001fb74 <CLockScheduler>
c00080ae:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c00080b5:	e8 9e 7a 01 00       	call   c001fb58 <CUnlockScheduler>
c00080ba:	66 90                	xchg   ax,ax
c00080bc:	90                   	nop
c00080bd:	83 c4 1c             	add    esp,0x1c
c00080c0:	c3                   	ret    
c00080c1:	8d 76 00             	lea    esi,[esi+0x0]

c00080c4 <pbuf_alloced_custom>:
c00080c4:	83 ec 2c             	sub    esp,0x2c
c00080c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00080cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00080cf:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00080d4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00080d9:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00080e0:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c00080e5:	74 29                	je     c0008110 <pbuf_alloced_custom+0x4c>
c00080e7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080ec:	74 12                	je     c0008100 <pbuf_alloced_custom+0x3c>
c00080ee:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c00080f3:	74 2b                	je     c0008120 <pbuf_alloced_custom+0x5c>
c00080f5:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c00080fa:	74 54                	je     c0008150 <pbuf_alloced_custom+0x8c>
c00080fc:	eb 32                	jmp    c0008130 <pbuf_alloced_custom+0x6c>
c00080fe:	66 90                	xchg   ax,ax
c0008100:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008105:	83 c0 14             	add    eax,0x14
c0008108:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000810d:	8d 76 00             	lea    esi,[esi+0x0]
c0008110:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008115:	83 c0 14             	add    eax,0x14
c0008118:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000811d:	8d 76 00             	lea    esi,[esi+0x0]
c0008120:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008125:	83 c0 0e             	add    eax,0xe
c0008128:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000812d:	eb 25                	jmp    c0008154 <pbuf_alloced_custom+0x90>
c000812f:	90                   	nop
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	68 0c fd 02 c0       	push   0xc002fd0c
c0008138:	68 66 fb 02 c0       	push   0xc002fb66
c000813d:	e8 42 7a 01 00       	call   c001fb84 <CPrintf>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	b8 00 00 00 00       	mov    eax,0x0
c000814a:	e9 95 00 00 00       	jmp    c00081e4 <pbuf_alloced_custom+0x120>
c000814f:	90                   	nop
c0008150:	90                   	nop
c0008151:	8d 76 00             	lea    esi,[esi+0x0]
c0008154:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008159:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000815e:	01 c2                	add    edx,eax
c0008160:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008165:	39 c2                	cmp    edx,eax
c0008167:	7d 07                	jge    c0008170 <pbuf_alloced_custom+0xac>
c0008169:	b8 00 00 00 00       	mov    eax,0x0
c000816e:	eb 74                	jmp    c00081e4 <pbuf_alloced_custom+0x120>
c0008170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008174:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000817a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000817f:	74 17                	je     c0008198 <pbuf_alloced_custom+0xd4>
c0008181:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000818a:	01 c2                	add    edx,eax
c000818c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008190:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008193:	eb 0f                	jmp    c00081a4 <pbuf_alloced_custom+0xe0>
c0008195:	8d 76 00             	lea    esi,[esi+0x0]
c0008198:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000819c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00081a3:	90                   	nop
c00081a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081a8:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00081ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00081b4:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00081b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00081bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081c3:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00081c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00081cb:	88 c2                	mov    dl,al
c00081cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081d1:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00081d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081d8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00081de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081e2:	66 90                	xchg   ax,ax
c00081e4:	83 c4 2c             	add    esp,0x2c
c00081e7:	c3                   	ret    

c00081e8 <pbuf_header>:
c00081e8:	83 ec 2c             	sub    esp,0x2c
c00081eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00081f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081f9:	75 15                	jne    c0008210 <pbuf_header+0x28>
c00081fb:	83 ec 08             	sub    esp,0x8
c00081fe:	68 96 ff 02 c0       	push   0xc002ff96
c0008203:	68 66 fb 02 c0       	push   0xc002fb66
c0008208:	e8 77 79 01 00       	call   c001fb84 <CPrintf>
c000820d:	83 c4 10             	add    esp,0x10
c0008210:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008215:	85 c0                	test   eax,eax
c0008217:	74 07                	je     c0008220 <pbuf_header+0x38>
c0008219:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000821e:	75 08                	jne    c0008228 <pbuf_header+0x40>
c0008220:	b0 00                	mov    al,0x0
c0008222:	e9 5d 01 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c0008227:	90                   	nop
c0008228:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000822d:	85 c0                	test   eax,eax
c000822f:	79 3b                	jns    c000826c <pbuf_header+0x84>
c0008231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008235:	f7 d8                	neg    eax
c0008237:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000823c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008240:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008244:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008249:	0f b7 c0             	movzx  eax,ax
c000824c:	39 c2                	cmp    edx,eax
c000824e:	76 28                	jbe    c0008278 <pbuf_header+0x90>
c0008250:	83 ec 08             	sub    esp,0x8
c0008253:	68 e7 fe 02 c0       	push   0xc002fee7
c0008258:	68 66 fb 02 c0       	push   0xc002fb66
c000825d:	e8 22 79 01 00       	call   c001fb84 <CPrintf>
c0008262:	83 c4 10             	add    esp,0x10
c0008265:	b0 01                	mov    al,0x1
c0008267:	e9 18 01 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c000826c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008270:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008275:	8d 76 00             	lea    esi,[esi+0x0]
c0008278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000827c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000827f:	0f b6 c0             	movzx  eax,al
c0008282:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000828b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000828e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008292:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008297:	85 c0                	test   eax,eax
c0008299:	74 0d                	je     c00082a8 <pbuf_header+0xc0>
c000829b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082a0:	83 f8 03             	cmp    eax,0x3
c00082a3:	75 3f                	jne    c00082e4 <pbuf_header+0xfc>
c00082a5:	8d 76 00             	lea    esi,[esi+0x0]
c00082a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082af:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00082b4:	f7 da                	neg    edx
c00082b6:	01 c2                	add    edx,eax
c00082b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082ca:	83 c2 10             	add    edx,0x10
c00082cd:	39 d0                	cmp    eax,edx
c00082cf:	73 7f                	jae    c0008350 <pbuf_header+0x168>
c00082d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082dc:	b0 01                	mov    al,0x1
c00082de:	e9 a1 00 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c00082e3:	90                   	nop
c00082e4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082e9:	83 f8 02             	cmp    eax,0x2
c00082ec:	74 0a                	je     c00082f8 <pbuf_header+0x110>
c00082ee:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082f3:	83 f8 01             	cmp    eax,0x1
c00082f6:	75 3c                	jne    c0008334 <pbuf_header+0x14c>
c00082f8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00082fd:	85 c0                	test   eax,eax
c00082ff:	79 2f                	jns    c0008330 <pbuf_header+0x148>
c0008301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008305:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008309:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000830e:	0f b7 c0             	movzx  eax,ax
c0008311:	39 c2                	cmp    edx,eax
c0008313:	77 1b                	ja     c0008330 <pbuf_header+0x148>
c0008315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000831c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008321:	f7 da                	neg    edx
c0008323:	01 c2                	add    edx,eax
c0008325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008329:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000832c:	eb 22                	jmp    c0008350 <pbuf_header+0x168>
c000832e:	66 90                	xchg   ax,ax
c0008330:	b0 01                	mov    al,0x1
c0008332:	eb 50                	jmp    c0008384 <pbuf_header+0x19c>
c0008334:	83 ec 08             	sub    esp,0x8
c0008337:	68 05 ff 02 c0       	push   0xc002ff05
c000833c:	68 66 fb 02 c0       	push   0xc002fb66
c0008341:	e8 3e 78 01 00       	call   c001fb84 <CPrintf>
c0008346:	83 c4 10             	add    esp,0x10
c0008349:	b0 01                	mov    al,0x1
c000834b:	eb 37                	jmp    c0008384 <pbuf_header+0x19c>
c000834d:	8d 76 00             	lea    esi,[esi+0x0]
c0008350:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008354:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835c:	01 d0                	add    eax,edx
c000835e:	89 c2                	mov    edx,eax
c0008360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008364:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000836c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000836f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008373:	01 d0                	add    eax,edx
c0008375:	89 c2                	mov    edx,eax
c0008377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000837b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000837f:	b0 00                	mov    al,0x0
c0008381:	8d 76 00             	lea    esi,[esi+0x0]
c0008384:	83 c4 2c             	add    esp,0x2c
c0008387:	c3                   	ret    

c0008388 <pbuf_free>:
c0008388:	83 ec 1c             	sub    esp,0x1c
c000838b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008390:	75 26                	jne    c00083b8 <pbuf_free+0x30>
c0008392:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008397:	75 17                	jne    c00083b0 <pbuf_free+0x28>
c0008399:	83 ec 08             	sub    esp,0x8
c000839c:	68 96 ff 02 c0       	push   0xc002ff96
c00083a1:	68 66 fb 02 c0       	push   0xc002fb66
c00083a6:	e8 d9 77 01 00       	call   c001fb84 <CPrintf>
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	66 90                	xchg   ax,ax
c00083b0:	b0 00                	mov    al,0x0
c00083b2:	e9 a9 01 00 00       	jmp    c0008560 <pbuf_free+0x1d8>
c00083b7:	90                   	nop
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083bf:	0f b6 c0             	movzx  eax,al
c00083c2:	85 c0                	test   eax,eax
c00083c4:	74 42                	je     c0008408 <pbuf_free+0x80>
c00083c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ca:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083cd:	0f b6 c0             	movzx  eax,al
c00083d0:	83 f8 01             	cmp    eax,0x1
c00083d3:	74 33                	je     c0008408 <pbuf_free+0x80>
c00083d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083d9:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083dc:	0f b6 c0             	movzx  eax,al
c00083df:	83 f8 02             	cmp    eax,0x2
c00083e2:	74 24                	je     c0008408 <pbuf_free+0x80>
c00083e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083e8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083eb:	0f b6 c0             	movzx  eax,al
c00083ee:	83 f8 03             	cmp    eax,0x3
c00083f1:	74 15                	je     c0008408 <pbuf_free+0x80>
c00083f3:	83 ec 08             	sub    esp,0x8
c00083f6:	68 13 ff 02 c0       	push   0xc002ff13
c00083fb:	68 66 fb 02 c0       	push   0xc002fb66
c0008400:	e8 7f 77 01 00       	call   c001fb84 <CPrintf>
c0008405:	83 c4 10             	add    esp,0x10
c0008408:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000840d:	e9 3e 01 00 00       	jmp    c0008550 <pbuf_free+0x1c8>
c0008412:	66 90                	xchg   ax,ax
c0008414:	e8 5b 77 01 00       	call   c001fb74 <CLockScheduler>
c0008419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000841d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008421:	0f b7 c0             	movzx  eax,ax
c0008424:	85 c0                	test   eax,eax
c0008426:	75 18                	jne    c0008440 <pbuf_free+0xb8>
c0008428:	83 ec 08             	sub    esp,0x8
c000842b:	68 28 ff 02 c0       	push   0xc002ff28
c0008430:	68 66 fb 02 c0       	push   0xc002fb66
c0008435:	e8 4a 77 01 00       	call   c001fb84 <CPrintf>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	8d 76 00             	lea    esi,[esi+0x0]
c0008440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008444:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008448:	83 e8 01             	sub    eax,0x1
c000844b:	89 c2                	mov    edx,eax
c000844d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008451:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008459:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000845d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008462:	e8 f1 76 01 00       	call   c001fb58 <CUnlockScheduler>
c0008467:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000846c:	85 c0                	test   eax,eax
c000846e:	0f 85 d4 00 00 00    	jne    c0008548 <pbuf_free+0x1c0>
c0008474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008478:	8b 00                	mov    eax,DWORD PTR [eax]
c000847a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000847e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008482:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008485:	0f b6 c0             	movzx  eax,al
c0008488:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000848d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008491:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008494:	0f b6 c0             	movzx  eax,al
c0008497:	83 e0 02             	and    eax,0x2
c000849a:	74 3c                	je     c00084d8 <pbuf_free+0x150>
c000849c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00084a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00084a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00084a9:	85 c0                	test   eax,eax
c00084ab:	75 17                	jne    c00084c4 <pbuf_free+0x13c>
c00084ad:	83 ec 08             	sub    esp,0x8
c00084b0:	68 30 fd 02 c0       	push   0xc002fd30
c00084b5:	68 66 fb 02 c0       	push   0xc002fb66
c00084ba:	e8 c5 76 01 00       	call   c001fb84 <CPrintf>
c00084bf:	83 c4 10             	add    esp,0x10
c00084c2:	66 90                	xchg   ax,ax
c00084c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00084c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084d1:	ff d0                	call   eax
c00084d3:	83 c4 10             	add    esp,0x10
c00084d6:	eb 58                	jmp    c0008530 <pbuf_free+0x1a8>
c00084d8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084dd:	83 f8 03             	cmp    eax,0x3
c00084e0:	75 16                	jne    c00084f8 <pbuf_free+0x170>
c00084e2:	83 ec 08             	sub    esp,0x8
c00084e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084e9:	6a 0d                	push   0xd
c00084eb:	e8 d8 f5 ff ff       	call   c0007ac8 <memp_free>
c00084f0:	83 c4 10             	add    esp,0x10
c00084f3:	eb 3b                	jmp    c0008530 <pbuf_free+0x1a8>
c00084f5:	8d 76 00             	lea    esi,[esi+0x0]
c00084f8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084fd:	83 f8 01             	cmp    eax,0x1
c0008500:	74 0a                	je     c000850c <pbuf_free+0x184>
c0008502:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008507:	83 f8 02             	cmp    eax,0x2
c000850a:	75 14                	jne    c0008520 <pbuf_free+0x198>
c000850c:	83 ec 08             	sub    esp,0x8
c000850f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008513:	6a 0c                	push   0xc
c0008515:	e8 ae f5 ff ff       	call   c0007ac8 <memp_free>
c000851a:	83 c4 10             	add    esp,0x10
c000851d:	eb 11                	jmp    c0008530 <pbuf_free+0x1a8>
c000851f:	90                   	nop
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008527:	e8 74 eb ff ff       	call   c00070a0 <mem_free>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	90                   	nop
c0008530:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008534:	83 c0 01             	add    eax,0x1
c0008537:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000853b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000853f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008543:	eb 0b                	jmp    c0008550 <pbuf_free+0x1c8>
c0008545:	8d 76 00             	lea    esi,[esi+0x0]
c0008548:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008550:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008555:	0f 85 b9 fe ff ff    	jne    c0008414 <pbuf_free+0x8c>
c000855b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000855f:	90                   	nop
c0008560:	83 c4 1c             	add    esp,0x1c
c0008563:	c3                   	ret    

c0008564 <pbuf_alloc>:
c0008564:	83 ec 3c             	sub    esp,0x3c
c0008567:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000856b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008570:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008577:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c000857c:	74 2a                	je     c00085a8 <pbuf_alloc+0x44>
c000857e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008583:	74 13                	je     c0008598 <pbuf_alloc+0x34>
c0008585:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000858a:	74 2c                	je     c00085b8 <pbuf_alloc+0x54>
c000858c:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008591:	74 55                	je     c00085e8 <pbuf_alloc+0x84>
c0008593:	eb 33                	jmp    c00085c8 <pbuf_alloc+0x64>
c0008595:	8d 76 00             	lea    esi,[esi+0x0]
c0008598:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000859d:	83 c0 14             	add    eax,0x14
c00085a0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085a5:	8d 76 00             	lea    esi,[esi+0x0]
c00085a8:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00085ad:	83 c0 14             	add    eax,0x14
c00085b0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085b5:	8d 76 00             	lea    esi,[esi+0x0]
c00085b8:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00085bd:	83 c0 0e             	add    eax,0xe
c00085c0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085c5:	eb 25                	jmp    c00085ec <pbuf_alloc+0x88>
c00085c7:	90                   	nop
c00085c8:	83 ec 08             	sub    esp,0x8
c00085cb:	68 3e ff 02 c0       	push   0xc002ff3e
c00085d0:	68 66 fb 02 c0       	push   0xc002fb66
c00085d5:	e8 aa 75 01 00       	call   c001fb84 <CPrintf>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	b8 00 00 00 00       	mov    eax,0x0
c00085e2:	e9 71 03 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c00085e7:	90                   	nop
c00085e8:	90                   	nop
c00085e9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ec:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00085f1:	77 11                	ja     c0008604 <pbuf_alloc+0xa0>
c00085f3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00085f8:	0f 85 c6 02 00 00    	jne    c00088c4 <pbuf_alloc+0x360>
c00085fe:	e9 41 02 00 00       	jmp    c0008844 <pbuf_alloc+0x2e0>
c0008603:	90                   	nop
c0008604:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008609:	0f 85 15 03 00 00    	jne    c0008924 <pbuf_alloc+0x3c0>
c000860f:	83 ec 0c             	sub    esp,0xc
c0008612:	6a 0d                	push   0xd
c0008614:	e8 83 f3 ff ff       	call   c000799c <memp_malloc>
c0008619:	83 c4 10             	add    esp,0x10
c000861c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008620:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008625:	75 11                	jne    c0008638 <pbuf_alloc+0xd4>
c0008627:	e8 3c fa ff ff       	call   c0008068 <pbuf_pool_is_empty>
c000862c:	b8 00 00 00 00       	mov    eax,0x0
c0008631:	e9 22 03 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008636:	66 90                	xchg   ax,ax
c0008638:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000863c:	88 c2                	mov    dl,al
c000863e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008642:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008649:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000864f:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008654:	8d 50 10             	lea    edx,[eax+0x10]
c0008657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000865b:	01 c2                	add    edx,eax
c000865d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008661:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008670:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008675:	ba 4e 02 00 00       	mov    edx,0x24e
c000867a:	29 c2                	sub    edx,eax
c000867c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008681:	39 c2                	cmp    edx,eax
c0008683:	0f 4e c2             	cmovle eax,edx
c0008686:	89 c2                	mov    edx,eax
c0008688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000868c:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008694:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000869b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000869f:	0f b7 c0             	movzx  eax,ax
c00086a2:	01 c2                	add    edx,eax
c00086a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086a8:	05 5e 02 00 00       	add    eax,0x25e
c00086ad:	39 c2                	cmp    edx,eax
c00086af:	76 17                	jbe    c00086c8 <pbuf_alloc+0x164>
c00086b1:	83 ec 08             	sub    esp,0x8
c00086b4:	68 54 fd 02 c0       	push   0xc002fd54
c00086b9:	68 66 fb 02 c0       	push   0xc002fb66
c00086be:	e8 c1 74 01 00       	call   c001fb84 <CPrintf>
c00086c3:	83 c4 10             	add    esp,0x10
c00086c6:	66 90                	xchg   ax,ax
c00086c8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00086cd:	ba 4e 02 00 00       	mov    edx,0x24e
c00086d2:	29 c2                	sub    edx,eax
c00086d4:	89 d0                	mov    eax,edx
c00086d6:	85 c0                	test   eax,eax
c00086d8:	7f 16                	jg     c00086f0 <pbuf_alloc+0x18c>
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	68 88 fd 02 c0       	push   0xc002fd88
c00086e2:	68 66 fb 02 c0       	push   0xc002fb66
c00086e7:	e8 98 74 01 00       	call   c001fb84 <CPrintf>
c00086ec:	83 c4 10             	add    esp,0x10
c00086ef:	90                   	nop
c00086f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086f4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008702:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000870b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000870f:	0f b7 c0             	movzx  eax,ax
c0008712:	29 c2                	sub    edx,eax
c0008714:	89 d0                	mov    eax,edx
c0008716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000871a:	e9 15 01 00 00       	jmp    c0008834 <pbuf_alloc+0x2d0>
c000871f:	90                   	nop
c0008720:	83 ec 0c             	sub    esp,0xc
c0008723:	6a 0d                	push   0xd
c0008725:	e8 72 f2 ff ff       	call   c000799c <memp_malloc>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008731:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008736:	75 20                	jne    c0008758 <pbuf_alloc+0x1f4>
c0008738:	e8 2b f9 ff ff       	call   c0008068 <pbuf_pool_is_empty>
c000873d:	83 ec 0c             	sub    esp,0xc
c0008740:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008744:	e8 3f fc ff ff       	call   c0008388 <pbuf_free>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	b8 00 00 00 00       	mov    eax,0x0
c0008751:	e9 02 02 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008756:	66 90                	xchg   ax,ax
c0008758:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000875c:	88 c2                	mov    dl,al
c000875e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008762:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008769:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000876d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008771:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008777:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000877b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000877f:	89 10                	mov    DWORD PTR [eax],edx
c0008781:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008789:	7e 15                	jle    c00087a0 <pbuf_alloc+0x23c>
c000878b:	83 ec 08             	sub    esp,0x8
c000878e:	68 59 ff 02 c0       	push   0xc002ff59
c0008793:	68 66 fb 02 c0       	push   0xc002fb66
c0008798:	e8 e7 73 01 00       	call   c001fb84 <CPrintf>
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00087a4:	89 c2                	mov    edx,eax
c00087a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087aa:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00087b2:	0f b7 d0             	movzx  edx,ax
c00087b5:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00087bb:	76 07                	jbe    c00087c4 <pbuf_alloc+0x260>
c00087bd:	b8 4e 02 00 00       	mov    eax,0x24e
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00087c8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087d0:	8d 50 10             	lea    edx,[eax+0x10]
c00087d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00087e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087e9:	0f b7 c0             	movzx  eax,ax
c00087ec:	01 c2                	add    edx,eax
c00087ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f2:	05 5e 02 00 00       	add    eax,0x25e
c00087f7:	39 c2                	cmp    edx,eax
c00087f9:	76 15                	jbe    c0008810 <pbuf_alloc+0x2ac>
c00087fb:	83 ec 08             	sub    esp,0x8
c00087fe:	68 54 fd 02 c0       	push   0xc002fd54
c0008803:	68 66 fb 02 c0       	push   0xc002fb66
c0008808:	e8 77 73 01 00       	call   c001fb84 <CPrintf>
c000880d:	83 c4 10             	add    esp,0x10
c0008810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008814:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000881a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000881e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008822:	0f b7 c0             	movzx  eax,ax
c0008825:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000882d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008831:	8d 76 00             	lea    esi,[esi+0x0]
c0008834:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008839:	0f 8f e1 fe ff ff    	jg     c0008720 <pbuf_alloc+0x1bc>
c000883f:	e9 fc 00 00 00       	jmp    c0008940 <pbuf_alloc+0x3dc>
c0008844:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000884d:	01 d0                	add    eax,edx
c000884f:	83 c0 10             	add    eax,0x10
c0008852:	0f b7 c0             	movzx  eax,ax
c0008855:	83 ec 0c             	sub    esp,0xc
c0008858:	50                   	push   eax
c0008859:	e8 76 ec ff ff       	call   c00074d4 <mem_malloc>
c000885e:	83 c4 10             	add    esp,0x10
c0008861:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008865:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000886a:	75 0c                	jne    c0008878 <pbuf_alloc+0x314>
c000886c:	b8 00 00 00 00       	mov    eax,0x0
c0008871:	e9 e2 00 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008876:	66 90                	xchg   ax,ax
c0008878:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000887d:	8d 50 10             	lea    edx,[eax+0x10]
c0008880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008884:	01 c2                	add    edx,eax
c0008886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000888d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008895:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000889d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00088a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088a4:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00088a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088b6:	88 c2                	mov    dl,al
c00088b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088bc:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088bf:	eb 7f                	jmp    c0008940 <pbuf_alloc+0x3dc>
c00088c1:	8d 76 00             	lea    esi,[esi+0x0]
c00088c4:	83 ec 0c             	sub    esp,0xc
c00088c7:	6a 0c                	push   0xc
c00088c9:	e8 ce f0 ff ff       	call   c000799c <memp_malloc>
c00088ce:	83 c4 10             	add    esp,0x10
c00088d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00088d5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00088da:	75 08                	jne    c00088e4 <pbuf_alloc+0x380>
c00088dc:	b8 00 00 00 00       	mov    eax,0x0
c00088e1:	eb 75                	jmp    c0008958 <pbuf_alloc+0x3f4>
c00088e3:	90                   	nop
c00088e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088f7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00088fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008906:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000890a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000890e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008914:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008918:	88 c2                	mov    dl,al
c000891a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000891e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008921:	eb 1d                	jmp    c0008940 <pbuf_alloc+0x3dc>
c0008923:	90                   	nop
c0008924:	83 ec 08             	sub    esp,0x8
c0008927:	68 6d ff 02 c0       	push   0xc002ff6d
c000892c:	68 66 fb 02 c0       	push   0xc002fb66
c0008931:	e8 4e 72 01 00       	call   c001fb84 <CPrintf>
c0008936:	83 c4 10             	add    esp,0x10
c0008939:	b8 00 00 00 00       	mov    eax,0x0
c000893e:	eb 18                	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008940:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008944:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000894a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894e:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008956:	66 90                	xchg   ax,ax
c0008958:	83 c4 3c             	add    esp,0x3c
c000895b:	c3                   	ret    

c000895c <pbuf_realloc>:
c000895c:	83 ec 2c             	sub    esp,0x2c
c000895f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008963:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008968:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000896d:	75 15                	jne    c0008984 <pbuf_realloc+0x28>
c000896f:	83 ec 08             	sub    esp,0x8
c0008972:	68 88 ff 02 c0       	push   0xc002ff88
c0008977:	68 66 fb 02 c0       	push   0xc002fb66
c000897c:	e8 03 72 01 00       	call   c001fb84 <CPrintf>
c0008981:	83 c4 10             	add    esp,0x10
c0008984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008988:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000898b:	0f b6 c0             	movzx  eax,al
c000898e:	83 f8 03             	cmp    eax,0x3
c0008991:	74 41                	je     c00089d4 <pbuf_realloc+0x78>
c0008993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008997:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000899a:	0f b6 c0             	movzx  eax,al
c000899d:	83 f8 01             	cmp    eax,0x1
c00089a0:	74 32                	je     c00089d4 <pbuf_realloc+0x78>
c00089a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089a6:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089a9:	0f b6 c0             	movzx  eax,al
c00089ac:	85 c0                	test   eax,eax
c00089ae:	74 24                	je     c00089d4 <pbuf_realloc+0x78>
c00089b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089b4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089b7:	0f b6 c0             	movzx  eax,al
c00089ba:	83 f8 02             	cmp    eax,0x2
c00089bd:	74 15                	je     c00089d4 <pbuf_realloc+0x78>
c00089bf:	83 ec 08             	sub    esp,0x8
c00089c2:	68 a0 ff 02 c0       	push   0xc002ffa0
c00089c7:	68 66 fb 02 c0       	push   0xc002fb66
c00089cc:	e8 b3 71 01 00       	call   c001fb84 <CPrintf>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089db:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089e0:	0f b7 c0             	movzx  eax,ax
c00089e3:	39 c2                	cmp    edx,eax
c00089e5:	0f 83 71 01 00 00    	jae    c0008b5c <pbuf_realloc+0x200>
c00089eb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089f7:	0f b7 c0             	movzx  eax,ax
c00089fa:	29 c2                	sub    edx,eax
c00089fc:	89 d0                	mov    eax,edx
c00089fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a06:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a13:	eb 7b                	jmp    c0008a90 <pbuf_realloc+0x134>
c0008a15:	8d 76 00             	lea    esi,[esi+0x0]
c0008a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a20:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008a25:	89 d1                	mov    ecx,edx
c0008a27:	29 c1                	sub    ecx,eax
c0008a29:	89 c8                	mov    eax,ecx
c0008a2b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a30:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008a38:	7e 16                	jle    c0008a50 <pbuf_realloc+0xf4>
c0008a3a:	83 ec 08             	sub    esp,0x8
c0008a3d:	68 bb ff 02 c0       	push   0xc002ffbb
c0008a42:	68 66 fb 02 c0       	push   0xc002fb66
c0008a47:	e8 38 71 01 00       	call   c001fb84 <CPrintf>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	90                   	nop
c0008a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008a5b:	01 d0                	add    eax,edx
c0008a5d:	89 c2                	mov    edx,eax
c0008a5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a63:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a71:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a76:	75 18                	jne    c0008a90 <pbuf_realloc+0x134>
c0008a78:	83 ec 08             	sub    esp,0x8
c0008a7b:	68 cc ff 02 c0       	push   0xc002ffcc
c0008a80:	68 66 fb 02 c0       	push   0xc002fb66
c0008a85:	e8 fa 70 01 00       	call   c001fb84 <CPrintf>
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a94:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a98:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a9d:	0f b7 c0             	movzx  eax,ax
c0008aa0:	39 c2                	cmp    edx,eax
c0008aa2:	0f 87 70 ff ff ff    	ja     c0008a18 <pbuf_realloc+0xbc>
c0008aa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aac:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008aaf:	0f b6 c0             	movzx  eax,al
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	75 5e                	jne    c0008b14 <pbuf_realloc+0x1b8>
c0008ab6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aba:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008abe:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008ac3:	0f b7 c0             	movzx  eax,ax
c0008ac6:	39 c2                	cmp    edx,eax
c0008ac8:	74 4a                	je     c0008b14 <pbuf_realloc+0x1b8>
c0008aca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ad1:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008ad5:	89 c2                	mov    edx,eax
c0008ad7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008adc:	01 d0                	add    eax,edx
c0008ade:	0f b7 c0             	movzx  eax,ax
c0008ae1:	83 ec 08             	sub    esp,0x8
c0008ae4:	50                   	push   eax
c0008ae5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ae9:	e8 d6 e6 ff ff       	call   c00071c4 <mem_trim>
c0008aee:	83 c4 10             	add    esp,0x10
c0008af1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008af5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008afa:	75 18                	jne    c0008b14 <pbuf_realloc+0x1b8>
c0008afc:	83 ec 08             	sub    esp,0x8
c0008aff:	68 e4 ff 02 c0       	push   0xc002ffe4
c0008b04:	68 66 fb 02 c0       	push   0xc002fb66
c0008b09:	e8 76 70 01 00       	call   c001fb84 <CPrintf>
c0008b0e:	83 c4 10             	add    esp,0x10
c0008b11:	8d 76 00             	lea    esi,[esi+0x0]
c0008b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b18:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b1d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b25:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008b29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b2d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b37:	85 c0                	test   eax,eax
c0008b39:	74 15                	je     c0008b50 <pbuf_realloc+0x1f4>
c0008b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b41:	83 ec 0c             	sub    esp,0xc
c0008b44:	50                   	push   eax
c0008b45:	e8 3e f8 ff ff       	call   c0008388 <pbuf_free>
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b5a:	eb 04                	jmp    c0008b60 <pbuf_realloc+0x204>
c0008b5c:	90                   	nop
c0008b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b60:	83 c4 2c             	add    esp,0x2c
c0008b63:	c3                   	ret    

c0008b64 <pbuf_clen>:
c0008b64:	83 ec 10             	sub    esp,0x10
c0008b67:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b6c:	eb 1a                	jmp    c0008b88 <pbuf_clen+0x24>
c0008b6e:	66 90                	xchg   ax,ax
c0008b70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b74:	83 c0 01             	add    eax,0x1
c0008b77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b85:	8d 76 00             	lea    esi,[esi+0x0]
c0008b88:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008b8d:	75 e1                	jne    c0008b70 <pbuf_clen+0xc>
c0008b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b93:	83 c4 10             	add    esp,0x10
c0008b96:	c3                   	ret    
c0008b97:	90                   	nop

c0008b98 <pbuf_ref>:
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008ba0:	74 22                	je     c0008bc4 <pbuf_ref+0x2c>
c0008ba2:	e8 cd 6f 01 00       	call   c001fb74 <CLockScheduler>
c0008ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bab:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008baf:	83 c0 01             	add    eax,0x1
c0008bb2:	89 c2                	mov    edx,eax
c0008bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb8:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008bbc:	e8 97 6f 01 00       	call   c001fb58 <CUnlockScheduler>
c0008bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008bc4:	90                   	nop
c0008bc5:	83 c4 0c             	add    esp,0xc
c0008bc8:	c3                   	ret    
c0008bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0008bcc <pbuf_cat>:
c0008bcc:	83 ec 1c             	sub    esp,0x1c
c0008bcf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008bd4:	74 0a                	je     c0008be0 <pbuf_cat+0x14>
c0008bd6:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008bdb:	75 1f                	jne    c0008bfc <pbuf_cat+0x30>
c0008bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0008be0:	83 ec 08             	sub    esp,0x8
c0008be3:	68 bc fd 02 c0       	push   0xc002fdbc
c0008be8:	68 66 fb 02 c0       	push   0xc002fb66
c0008bed:	e8 92 6f 01 00       	call   c001fb84 <CPrintf>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	e9 ae 00 00 00       	jmp    c0008ca8 <pbuf_cat+0xdc>
c0008bfa:	66 90                	xchg   ax,ax
c0008bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c04:	eb 26                	jmp    c0008c2c <pbuf_cat+0x60>
c0008c06:	66 90                	xchg   ax,ax
c0008c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c0c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c16:	01 d0                	add    eax,edx
c0008c18:	89 c2                	mov    edx,eax
c0008c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c1e:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	85 c0                	test   eax,eax
c0008c34:	75 d2                	jne    c0008c08 <pbuf_cat+0x3c>
c0008c36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c41:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c45:	0f b7 d2             	movzx  edx,dx
c0008c48:	0f b7 c0             	movzx  eax,ax
c0008c4b:	39 c2                	cmp    edx,eax
c0008c4d:	74 15                	je     c0008c64 <pbuf_cat+0x98>
c0008c4f:	83 ec 08             	sub    esp,0x8
c0008c52:	68 f4 fd 02 c0       	push   0xc002fdf4
c0008c57:	68 66 fb 02 c0       	push   0xc002fb66
c0008c5c:	e8 23 6f 01 00       	call   c001fb84 <CPrintf>
c0008c61:	83 c4 10             	add    esp,0x10
c0008c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c6a:	85 c0                	test   eax,eax
c0008c6c:	74 16                	je     c0008c84 <pbuf_cat+0xb8>
c0008c6e:	83 ec 08             	sub    esp,0x8
c0008c71:	68 00 00 03 c0       	push   0xc0030000
c0008c76:	68 66 fb 02 c0       	push   0xc002fb66
c0008c7b:	e8 04 6f 01 00       	call   c001fb84 <CPrintf>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	90                   	nop
c0008c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c88:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c92:	01 d0                	add    eax,edx
c0008c94:	89 c2                	mov    edx,eax
c0008c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c9a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ca2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ca6:	89 10                	mov    DWORD PTR [eax],edx
c0008ca8:	83 c4 1c             	add    esp,0x1c
c0008cab:	c3                   	ret    

c0008cac <pbuf_chain>:
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	83 ec 08             	sub    esp,0x8
c0008cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cba:	e8 0d ff ff ff       	call   c0008bcc <pbuf_cat>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	83 ec 0c             	sub    esp,0xc
c0008cc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008cc9:	e8 ca fe ff ff       	call   c0008b98 <pbuf_ref>
c0008cce:	83 c4 10             	add    esp,0x10
c0008cd1:	90                   	nop
c0008cd2:	83 c4 0c             	add    esp,0xc
c0008cd5:	c3                   	ret    
c0008cd6:	66 90                	xchg   ax,ax

c0008cd8 <pbuf_dechain>:
c0008cd8:	83 ec 1c             	sub    esp,0x1c
c0008cdb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008cef:	0f 84 8b 00 00 00    	je     c0008d80 <pbuf_dechain+0xa8>
c0008cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cfc:	0f b7 d0             	movzx  edx,ax
c0008cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d06:	0f b7 c8             	movzx  ecx,ax
c0008d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d11:	0f b7 c0             	movzx  eax,ax
c0008d14:	29 c1                	sub    ecx,eax
c0008d16:	89 c8                	mov    eax,ecx
c0008d18:	39 c2                	cmp    edx,eax
c0008d1a:	74 18                	je     c0008d34 <pbuf_dechain+0x5c>
c0008d1c:	83 ec 08             	sub    esp,0x8
c0008d1f:	68 24 fe 02 c0       	push   0xc002fe24
c0008d24:	68 66 fb 02 c0       	push   0xc002fb66
c0008d29:	e8 56 6e 01 00       	call   c001fb84 <CPrintf>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	8d 76 00             	lea    esi,[esi+0x0]
c0008d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d38:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d3f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d43:	89 d1                	mov    ecx,edx
c0008d45:	29 c1                	sub    ecx,eax
c0008d47:	89 c8                	mov    eax,ecx
c0008d49:	89 c2                	mov    edx,eax
c0008d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d4f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d61:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d69:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d74:	e8 0f f6 ff ff       	call   c0008388 <pbuf_free>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d84:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d8f:	0f b7 d2             	movzx  edx,dx
c0008d92:	0f b7 c0             	movzx  eax,ax
c0008d95:	39 c2                	cmp    edx,eax
c0008d97:	74 17                	je     c0008db0 <pbuf_dechain+0xd8>
c0008d99:	83 ec 08             	sub    esp,0x8
c0008d9c:	68 10 00 03 c0       	push   0xc0030010
c0008da1:	68 66 fb 02 c0       	push   0xc002fb66
c0008da6:	e8 d9 6d 01 00       	call   c001fb84 <CPrintf>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	66 90                	xchg   ax,ax
c0008db0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008db5:	85 c0                	test   eax,eax
c0008db7:	75 07                	jne    c0008dc0 <pbuf_dechain+0xe8>
c0008db9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008dbd:	eb 09                	jmp    c0008dc8 <pbuf_dechain+0xf0>
c0008dbf:	90                   	nop
c0008dc0:	b8 00 00 00 00       	mov    eax,0x0
c0008dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0008dc8:	83 c4 1c             	add    esp,0x1c
c0008dcb:	c3                   	ret    

c0008dcc <pbuf_copy>:
c0008dcc:	53                   	push   ebx
c0008dcd:	83 ec 18             	sub    esp,0x18
c0008dd0:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008dd7:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008dde:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008de3:	74 1f                	je     c0008e04 <pbuf_copy+0x38>
c0008de5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008dea:	74 18                	je     c0008e04 <pbuf_copy+0x38>
c0008dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008df0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008df3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008df7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008dfa:	0f b7 d2             	movzx  edx,dx
c0008dfd:	0f b7 c0             	movzx  eax,ax
c0008e00:	39 c2                	cmp    edx,eax
c0008e02:	73 1c                	jae    c0008e20 <pbuf_copy+0x54>
c0008e04:	83 ec 08             	sub    esp,0x8
c0008e07:	68 48 fe 02 c0       	push   0xc002fe48
c0008e0c:	68 66 fb 02 c0       	push   0xc002fb66
c0008e11:	e8 6e 6d 01 00       	call   c001fb84 <CPrintf>
c0008e16:	83 c4 10             	add    esp,0x10
c0008e19:	b0 f2                	mov    al,0xf2
c0008e1b:	e9 0c 02 00 00       	jmp    c000902c <pbuf_copy+0x260>
c0008e20:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008e25:	75 15                	jne    c0008e3c <pbuf_copy+0x70>
c0008e27:	83 ec 08             	sub    esp,0x8
c0008e2a:	68 25 00 03 c0       	push   0xc0030025
c0008e2f:	68 66 fb 02 c0       	push   0xc002fb66
c0008e34:	e8 4b 6d 01 00       	call   c001fb84 <CPrintf>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e40:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e44:	0f b7 d0             	movzx  edx,ax
c0008e47:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008e4c:	89 d1                	mov    ecx,edx
c0008e4e:	29 c1                	sub    ecx,eax
c0008e50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e54:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e58:	0f b7 d0             	movzx  edx,ax
c0008e5b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008e60:	29 c2                	sub    edx,eax
c0008e62:	89 d0                	mov    eax,edx
c0008e64:	39 c1                	cmp    ecx,eax
c0008e66:	7c 1c                	jl     c0008e84 <pbuf_copy+0xb8>
c0008e68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e74:	89 d3                	mov    ebx,edx
c0008e76:	29 c3                	sub    ebx,eax
c0008e78:	89 d8                	mov    eax,ebx
c0008e7a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e7f:	eb 1b                	jmp    c0008e9c <pbuf_copy+0xd0>
c0008e81:	8d 76 00             	lea    esi,[esi+0x0]
c0008e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e88:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e8c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008e91:	89 d3                	mov    ebx,edx
c0008e93:	29 c3                	sub    ebx,eax
c0008e95:	89 d8                	mov    eax,ebx
c0008e97:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e9c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008ea1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ea5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008ea8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008ead:	01 d1                	add    ecx,edx
c0008eaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008eb3:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008eb6:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ebb:	01 da                	add    edx,ebx
c0008ebd:	83 ec 04             	sub    esp,0x4
c0008ec0:	50                   	push   eax
c0008ec1:	51                   	push   ecx
c0008ec2:	52                   	push   edx
c0008ec3:	e8 b2 74 ff ff       	call   c000037a <memcpy>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ed5:	01 d0                	add    eax,edx
c0008ed7:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008edc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ee5:	01 d0                	add    eax,edx
c0008ee7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ef4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ef9:	0f b7 c0             	movzx  eax,ax
c0008efc:	39 c2                	cmp    edx,eax
c0008efe:	76 18                	jbe    c0008f18 <pbuf_copy+0x14c>
c0008f00:	83 ec 08             	sub    esp,0x8
c0008f03:	68 32 00 03 c0       	push   0xc0030032
c0008f08:	68 66 fb 02 c0       	push   0xc002fb66
c0008f0d:	e8 72 6c 01 00       	call   c001fb84 <CPrintf>
c0008f12:	83 c4 10             	add    esp,0x10
c0008f15:	8d 76 00             	lea    esi,[esi+0x0]
c0008f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f20:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008f25:	0f b7 c0             	movzx  eax,ax
c0008f28:	39 c2                	cmp    edx,eax
c0008f2a:	75 14                	jne    c0008f40 <pbuf_copy+0x174>
c0008f2c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008f40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f44:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f48:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f4d:	0f b7 c0             	movzx  eax,ax
c0008f50:	39 c2                	cmp    edx,eax
c0008f52:	76 18                	jbe    c0008f6c <pbuf_copy+0x1a0>
c0008f54:	83 ec 08             	sub    esp,0x8
c0008f57:	68 49 00 03 c0       	push   0xc0030049
c0008f5c:	68 66 fb 02 c0       	push   0xc002fb66
c0008f61:	e8 1e 6c 01 00       	call   c001fb84 <CPrintf>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	8d 76 00             	lea    esi,[esi+0x0]
c0008f6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f70:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f74:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f79:	0f b7 c0             	movzx  eax,ax
c0008f7c:	39 c2                	cmp    edx,eax
c0008f7e:	72 14                	jb     c0008f94 <pbuf_copy+0x1c8>
c0008f80:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008f91:	8d 76 00             	lea    esi,[esi+0x0]
c0008f94:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f99:	74 3d                	je     c0008fd8 <pbuf_copy+0x20c>
c0008f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f9f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fa7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008faa:	0f b7 d2             	movzx  edx,dx
c0008fad:	0f b7 c0             	movzx  eax,ax
c0008fb0:	39 c2                	cmp    edx,eax
c0008fb2:	75 24                	jne    c0008fd8 <pbuf_copy+0x20c>
c0008fb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	74 1a                	je     c0008fd8 <pbuf_copy+0x20c>
c0008fbe:	83 ec 08             	sub    esp,0x8
c0008fc1:	68 78 fe 02 c0       	push   0xc002fe78
c0008fc6:	68 66 fb 02 c0       	push   0xc002fb66
c0008fcb:	e8 b4 6b 01 00       	call   c001fb84 <CPrintf>
c0008fd0:	83 c4 10             	add    esp,0x10
c0008fd3:	b0 fa                	mov    al,0xfa
c0008fd5:	eb 55                	jmp    c000902c <pbuf_copy+0x260>
c0008fd7:	90                   	nop
c0008fd8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fdd:	74 3d                	je     c000901c <pbuf_copy+0x250>
c0008fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe3:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008feb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008fee:	0f b7 d2             	movzx  edx,dx
c0008ff1:	0f b7 c0             	movzx  eax,ax
c0008ff4:	39 c2                	cmp    edx,eax
c0008ff6:	75 24                	jne    c000901c <pbuf_copy+0x250>
c0008ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ffc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ffe:	85 c0                	test   eax,eax
c0009000:	74 1a                	je     c000901c <pbuf_copy+0x250>
c0009002:	83 ec 08             	sub    esp,0x8
c0009005:	68 78 fe 02 c0       	push   0xc002fe78
c000900a:	68 66 fb 02 c0       	push   0xc002fb66
c000900f:	e8 70 6b 01 00       	call   c001fb84 <CPrintf>
c0009014:	83 c4 10             	add    esp,0x10
c0009017:	b0 fa                	mov    al,0xfa
c0009019:	eb 11                	jmp    c000902c <pbuf_copy+0x260>
c000901b:	90                   	nop
c000901c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009021:	0f 85 f9 fd ff ff    	jne    c0008e20 <pbuf_copy+0x54>
c0009027:	b0 00                	mov    al,0x0
c0009029:	8d 76 00             	lea    esi,[esi+0x0]
c000902c:	83 c4 18             	add    esp,0x18
c000902f:	5b                   	pop    ebx
c0009030:	c3                   	ret    
c0009031:	8d 76 00             	lea    esi,[esi+0x0]

c0009034 <pbuf_copy_partial>:
c0009034:	53                   	push   ebx
c0009035:	83 ec 28             	sub    esp,0x28
c0009038:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000903c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009040:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0009045:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000904a:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009051:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009056:	75 20                	jne    c0009078 <pbuf_copy_partial+0x44>
c0009058:	83 ec 08             	sub    esp,0x8
c000905b:	68 a4 fe 02 c0       	push   0xc002fea4
c0009060:	68 66 fb 02 c0       	push   0xc002fb66
c0009065:	e8 1a 6b 01 00       	call   c001fb84 <CPrintf>
c000906a:	83 c4 10             	add    esp,0x10
c000906d:	b8 00 00 00 00       	mov    eax,0x0
c0009072:	e9 59 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c0009077:	90                   	nop
c0009078:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000907d:	75 21                	jne    c00090a0 <pbuf_copy_partial+0x6c>
c000907f:	83 ec 08             	sub    esp,0x8
c0009082:	68 c4 fe 02 c0       	push   0xc002fec4
c0009087:	68 66 fb 02 c0       	push   0xc002fb66
c000908c:	e8 f3 6a 01 00       	call   c001fb84 <CPrintf>
c0009091:	83 c4 10             	add    esp,0x10
c0009094:	b8 00 00 00 00       	mov    eax,0x0
c0009099:	e9 32 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c000909e:	66 90                	xchg   ax,ax
c00090a0:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c00090a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00090ac:	74 0a                	je     c00090b8 <pbuf_copy_partial+0x84>
c00090ae:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00090b3:	75 0f                	jne    c00090c4 <pbuf_copy_partial+0x90>
c00090b5:	8d 76 00             	lea    esi,[esi+0x0]
c00090b8:	b8 00 00 00 00       	mov    eax,0x0
c00090bd:	e9 0e 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c00090c2:	66 90                	xchg   ax,ax
c00090c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090cc:	e9 e3 00 00 00       	jmp    c00091b4 <pbuf_copy_partial+0x180>
c00090d1:	8d 76 00             	lea    esi,[esi+0x0]
c00090d4:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00090d9:	85 c0                	test   eax,eax
c00090db:	74 33                	je     c0009110 <pbuf_copy_partial+0xdc>
c00090dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090e1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00090ea:	0f b7 c0             	movzx  eax,ax
c00090ed:	39 c2                	cmp    edx,eax
c00090ef:	72 1f                	jb     c0009110 <pbuf_copy_partial+0xdc>
c00090f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090f5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090fd:	89 d3                	mov    ebx,edx
c00090ff:	29 c3                	sub    ebx,eax
c0009101:	89 d8                	mov    eax,ebx
c0009103:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009108:	e9 9b 00 00 00       	jmp    c00091a8 <pbuf_copy_partial+0x174>
c000910d:	8d 76 00             	lea    esi,[esi+0x0]
c0009110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009114:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000911c:	89 d1                	mov    ecx,edx
c000911e:	29 c1                	sub    ecx,eax
c0009120:	89 c8                	mov    eax,ecx
c0009122:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009127:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000912c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009131:	39 c2                	cmp    edx,eax
c0009133:	76 0b                	jbe    c0009140 <pbuf_copy_partial+0x10c>
c0009135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009139:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000913e:	66 90                	xchg   ax,ax
c0009140:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009149:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000914c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009151:	01 d1                	add    ecx,edx
c0009153:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009158:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000915c:	01 da                	add    edx,ebx
c000915e:	83 ec 04             	sub    esp,0x4
c0009161:	50                   	push   eax
c0009162:	51                   	push   ecx
c0009163:	52                   	push   edx
c0009164:	e8 11 72 ff ff       	call   c000037a <memcpy>
c0009169:	83 c4 10             	add    esp,0x10
c000916c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009171:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009175:	01 d0                	add    eax,edx
c0009177:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000917c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009181:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009185:	01 d0                	add    eax,edx
c0009187:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000918c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009190:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009194:	89 d3                	mov    ebx,edx
c0009196:	29 c3                	sub    ebx,eax
c0009198:	89 d8                	mov    eax,ebx
c000919a:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000919f:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00091a6:	66 90                	xchg   ax,ax
c00091a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00091ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091b2:	66 90                	xchg   ax,ax
c00091b4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00091b9:	85 c0                	test   eax,eax
c00091bb:	74 0b                	je     c00091c8 <pbuf_copy_partial+0x194>
c00091bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00091c2:	0f 85 0c ff ff ff    	jne    c00090d4 <pbuf_copy_partial+0xa0>
c00091c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00091cd:	8d 76 00             	lea    esi,[esi+0x0]
c00091d0:	83 c4 28             	add    esp,0x28
c00091d3:	5b                   	pop    ebx
c00091d4:	c3                   	ret    
c00091d5:	8d 76 00             	lea    esi,[esi+0x0]

c00091d8 <pbuf_take>:
c00091d8:	83 ec 2c             	sub    esp,0x2c
c00091db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00091df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00091e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091e8:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091ed:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091f9:	75 1d                	jne    c0009218 <pbuf_take+0x40>
c00091fb:	83 ec 08             	sub    esp,0x8
c00091fe:	68 64 00 03 c0       	push   0xc0030064
c0009203:	68 66 fb 02 c0       	push   0xc002fb66
c0009208:	e8 77 69 01 00       	call   c001fb84 <CPrintf>
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	b0 00                	mov    al,0x0
c0009212:	e9 3d 01 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c0009217:	90                   	nop
c0009218:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000921d:	75 1d                	jne    c000923c <pbuf_take+0x64>
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 7b 00 03 c0       	push   0xc003007b
c0009227:	68 66 fb 02 c0       	push   0xc002fb66
c000922c:	e8 53 69 01 00       	call   c001fb84 <CPrintf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	b0 00                	mov    al,0x0
c0009236:	e9 19 01 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c000923b:	90                   	nop
c000923c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009241:	74 1d                	je     c0009260 <pbuf_take+0x88>
c0009243:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009248:	74 16                	je     c0009260 <pbuf_take+0x88>
c000924a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000924e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009251:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009256:	0f b7 c0             	movzx  eax,ax
c0009259:	39 c2                	cmp    edx,eax
c000925b:	76 0b                	jbe    c0009268 <pbuf_take+0x90>
c000925d:	8d 76 00             	lea    esi,[esi+0x0]
c0009260:	b0 f2                	mov    al,0xf2
c0009262:	e9 ed 00 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c0009267:	90                   	nop
c0009268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000926c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009270:	e9 9f 00 00 00       	jmp    c0009314 <pbuf_take+0x13c>
c0009275:	8d 76 00             	lea    esi,[esi+0x0]
c0009278:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000927d:	75 15                	jne    c0009294 <pbuf_take+0xbc>
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 96 00 03 c0       	push   0xc0030096
c0009287:	68 66 fb 02 c0       	push   0xc002fb66
c000928c:	e8 f3 68 01 00       	call   c001fb84 <CPrintf>
c0009291:	83 c4 10             	add    esp,0x10
c0009294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009298:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000929d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092a5:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00092aa:	0f b7 c0             	movzx  eax,ax
c00092ad:	39 c2                	cmp    edx,eax
c00092af:	76 0f                	jbe    c00092c0 <pbuf_take+0xe8>
c00092b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092b9:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092be:	66 90                	xchg   ax,ax
c00092c0:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00092c5:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c00092ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00092ce:	01 c1                	add    ecx,eax
c00092d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092d7:	83 ec 04             	sub    esp,0x4
c00092da:	52                   	push   edx
c00092db:	51                   	push   ecx
c00092dc:	50                   	push   eax
c00092dd:	e8 98 70 ff ff       	call   c000037a <memcpy>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092ee:	89 d1                	mov    ecx,edx
c00092f0:	29 c1                	sub    ecx,eax
c00092f2:	89 c8                	mov    eax,ecx
c00092f4:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092f9:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092fe:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009303:	01 d0                	add    eax,edx
c0009305:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000930a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009314:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 85 57 ff ff ff    	jne    c0009278 <pbuf_take+0xa0>
c0009321:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009326:	85 c0                	test   eax,eax
c0009328:	75 0e                	jne    c0009338 <pbuf_take+0x160>
c000932a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000932f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009334:	39 c2                	cmp    edx,eax
c0009336:	74 18                	je     c0009350 <pbuf_take+0x178>
c0009338:	83 ec 08             	sub    esp,0x8
c000933b:	68 ae 00 03 c0       	push   0xc00300ae
c0009340:	68 66 fb 02 c0       	push   0xc002fb66
c0009345:	e8 3a 68 01 00       	call   c001fb84 <CPrintf>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8d 76 00             	lea    esi,[esi+0x0]
c0009350:	b0 00                	mov    al,0x0
c0009352:	66 90                	xchg   ax,ax
c0009354:	83 c4 2c             	add    esp,0x2c
c0009357:	c3                   	ret    

c0009358 <pbuf_coalesce>:
c0009358:	83 ec 1c             	sub    esp,0x1c
c000935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000935f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009361:	85 c0                	test   eax,eax
c0009363:	75 07                	jne    c000936c <pbuf_coalesce+0x14>
c0009365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009369:	eb 7d                	jmp    c00093e8 <pbuf_coalesce+0x90>
c000936b:	90                   	nop
c000936c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009370:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009373:	0f b7 c0             	movzx  eax,ax
c0009376:	83 ec 04             	sub    esp,0x4
c0009379:	6a 00                	push   0x0
c000937b:	50                   	push   eax
c000937c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009380:	e8 df f1 ff ff       	call   c0008564 <pbuf_alloc>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000938c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009391:	75 09                	jne    c000939c <pbuf_coalesce+0x44>
c0009393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009397:	eb 4f                	jmp    c00093e8 <pbuf_coalesce+0x90>
c0009399:	8d 76 00             	lea    esi,[esi+0x0]
c000939c:	83 ec 08             	sub    esp,0x8
c000939f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a7:	e8 20 fa ff ff       	call   c0008dcc <pbuf_copy>
c00093ac:	83 c4 10             	add    esp,0x10
c00093af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00093b3:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00093b8:	85 c0                	test   eax,eax
c00093ba:	74 18                	je     c00093d4 <pbuf_coalesce+0x7c>
c00093bc:	83 ec 08             	sub    esp,0x8
c00093bf:	68 c4 00 03 c0       	push   0xc00300c4
c00093c4:	68 66 fb 02 c0       	push   0xc002fb66
c00093c9:	e8 b6 67 01 00       	call   c001fb84 <CPrintf>
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	8d 76 00             	lea    esi,[esi+0x0]
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093db:	e8 a8 ef ff ff       	call   c0008388 <pbuf_free>
c00093e0:	83 c4 10             	add    esp,0x10
c00093e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093e7:	90                   	nop
c00093e8:	83 c4 1c             	add    esp,0x1c
c00093eb:	c3                   	ret    

c00093ec <pbuf_get_at>:
c00093ec:	83 ec 14             	sub    esp,0x14
c00093ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093f7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00093fa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009407:	eb 27                	jmp    c0009430 <pbuf_get_at+0x44>
c0009409:	8d 76 00             	lea    esi,[esi+0x0]
c000940c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009410:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009414:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009419:	89 d1                	mov    ecx,edx
c000941b:	29 c1                	sub    ecx,eax
c000941d:	89 c8                	mov    eax,ecx
c000941f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009428:	8b 00                	mov    eax,DWORD PTR [eax]
c000942a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000942e:	66 90                	xchg   ax,ax
c0009430:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009435:	74 15                	je     c000944c <pbuf_get_at+0x60>
c0009437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000943b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000943f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009444:	0f b7 c0             	movzx  eax,ax
c0009447:	39 c2                	cmp    edx,eax
c0009449:	73 c1                	jae    c000940c <pbuf_get_at+0x20>
c000944b:	90                   	nop
c000944c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009451:	74 29                	je     c000947c <pbuf_get_at+0x90>
c0009453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009457:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000945b:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009460:	0f b7 c0             	movzx  eax,ax
c0009463:	39 c2                	cmp    edx,eax
c0009465:	73 15                	jae    c000947c <pbuf_get_at+0x90>
c0009467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000946b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000946e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009473:	01 d0                	add    eax,edx
c0009475:	8a 00                	mov    al,BYTE PTR [eax]
c0009477:	eb 07                	jmp    c0009480 <pbuf_get_at+0x94>
c0009479:	8d 76 00             	lea    esi,[esi+0x0]
c000947c:	b0 00                	mov    al,0x0
c000947e:	66 90                	xchg   ax,ax
c0009480:	83 c4 14             	add    esp,0x14
c0009483:	c3                   	ret    

c0009484 <pbuf_memcmp>:
c0009484:	83 ec 18             	sub    esp,0x18
c0009487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000948b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000948f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009494:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a9:	eb 25                	jmp    c00094d0 <pbuf_memcmp+0x4c>
c00094ab:	90                   	nop
c00094ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094b4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094b9:	89 d1                	mov    ecx,edx
c00094bb:	29 c1                	sub    ecx,eax
c00094bd:	89 c8                	mov    eax,ecx
c00094bf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00094ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ce:	66 90                	xchg   ax,ax
c00094d0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094d5:	74 15                	je     c00094ec <pbuf_memcmp+0x68>
c00094d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094db:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094df:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094e4:	0f b7 c0             	movzx  eax,ax
c00094e7:	39 c2                	cmp    edx,eax
c00094e9:	73 c1                	jae    c00094ac <pbuf_memcmp+0x28>
c00094eb:	90                   	nop
c00094ec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094f1:	0f 84 8d 00 00 00    	je     c0009584 <pbuf_memcmp+0x100>
c00094f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094fb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094ff:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009504:	0f b7 c0             	movzx  eax,ax
c0009507:	39 c2                	cmp    edx,eax
c0009509:	73 79                	jae    c0009584 <pbuf_memcmp+0x100>
c000950b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009512:	eb 5c                	jmp    c0009570 <pbuf_memcmp+0xec>
c0009514:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009519:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000951e:	01 d0                	add    eax,edx
c0009520:	0f b7 c0             	movzx  eax,ax
c0009523:	50                   	push   eax
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 bf fe ff ff       	call   c00093ec <pbuf_get_at>
c000952d:	83 c4 08             	add    esp,0x8
c0009530:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009534:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009539:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000953d:	01 d0                	add    eax,edx
c000953f:	8a 00                	mov    al,BYTE PTR [eax]
c0009541:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009545:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c000954a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000954f:	39 c2                	cmp    edx,eax
c0009551:	74 0d                	je     c0009560 <pbuf_memcmp+0xdc>
c0009553:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009558:	83 c0 01             	add    eax,0x1
c000955b:	eb 2f                	jmp    c000958c <pbuf_memcmp+0x108>
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009565:	83 c0 01             	add    eax,0x1
c0009568:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000956d:	8d 76 00             	lea    esi,[esi+0x0]
c0009570:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009575:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009579:	39 c2                	cmp    edx,eax
c000957b:	72 97                	jb     c0009514 <pbuf_memcmp+0x90>
c000957d:	b8 00 00 00 00       	mov    eax,0x0
c0009582:	eb 08                	jmp    c000958c <pbuf_memcmp+0x108>
c0009584:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009589:	8d 76 00             	lea    esi,[esi+0x0]
c000958c:	83 c4 18             	add    esp,0x18
c000958f:	c3                   	ret    

c0009590 <pbuf_memfind>:
c0009590:	83 ec 18             	sub    esp,0x18
c0009593:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000959b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095a0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095a8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00095ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095af:	89 d1                	mov    ecx,edx
c00095b1:	29 c1                	sub    ecx,eax
c00095b3:	89 c8                	mov    eax,ecx
c00095b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00095ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00095c1:	0f b7 c0             	movzx  eax,ax
c00095c4:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00095c9:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00095cd:	01 ca                	add    edx,ecx
c00095cf:	39 d0                	cmp    eax,edx
c00095d1:	7c 65                	jl     c0009638 <pbuf_memfind+0xa8>
c00095d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00095d6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095db:	eb 4b                	jmp    c0009628 <pbuf_memfind+0x98>
c00095dd:	8d 76 00             	lea    esi,[esi+0x0]
c00095e0:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00095e5:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00095ea:	52                   	push   edx
c00095eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095ef:	50                   	push   eax
c00095f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00095f4:	e8 8b fe ff ff       	call   c0009484 <pbuf_memcmp>
c00095f9:	83 c4 10             	add    esp,0x10
c00095fc:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009601:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009606:	85 c0                	test   eax,eax
c0009608:	75 0a                	jne    c0009614 <pbuf_memfind+0x84>
c000960a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000960f:	eb 2f                	jmp    c0009640 <pbuf_memfind+0xb0>
c0009611:	8d 76 00             	lea    esi,[esi+0x0]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000961e:	01 d0                	add    eax,edx
c0009620:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009625:	8d 76 00             	lea    esi,[esi+0x0]
c0009628:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000962d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009632:	39 c2                	cmp    edx,eax
c0009634:	76 aa                	jbe    c00095e0 <pbuf_memfind+0x50>
c0009636:	66 90                	xchg   ax,ax
c0009638:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000963d:	8d 76 00             	lea    esi,[esi+0x0]
c0009640:	83 c4 18             	add    esp,0x18
c0009643:	c3                   	ret    

c0009644 <pbuf_strstr>:
c0009644:	83 ec 1c             	sub    esp,0x1c
c0009647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000964c:	74 1e                	je     c000966c <pbuf_strstr+0x28>
c000964e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009652:	8a 00                	mov    al,BYTE PTR [eax]
c0009654:	0f be c0             	movsx  eax,al
c0009657:	85 c0                	test   eax,eax
c0009659:	74 11                	je     c000966c <pbuf_strstr+0x28>
c000965b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000965f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009662:	0f b7 c0             	movzx  eax,ax
c0009665:	3d ff ff 00 00       	cmp    eax,0xffff
c000966a:	75 08                	jne    c0009674 <pbuf_strstr+0x30>
c000966c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009671:	eb 41                	jmp    c00096b4 <pbuf_strstr+0x70>
c0009673:	90                   	nop
c0009674:	83 ec 0c             	sub    esp,0xc
c0009677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000967b:	e8 00 6f ff ff       	call   c0000580 <strlen>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009687:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000968f:	76 07                	jbe    c0009698 <pbuf_strstr+0x54>
c0009691:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009696:	eb 1c                	jmp    c00096b4 <pbuf_strstr+0x70>
c0009698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000969c:	0f b7 c0             	movzx  eax,ax
c000969f:	6a 00                	push   0x0
c00096a1:	50                   	push   eax
c00096a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00096a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00096aa:	e8 e1 fe ff ff       	call   c0009590 <pbuf_memfind>
c00096af:	83 c4 10             	add    esp,0x10
c00096b2:	66 90                	xchg   ax,ax
c00096b4:	83 c4 1c             	add    esp,0x1c
c00096b7:	c3                   	ret    

c00096b8 <raw_input>:
c00096b8:	83 ec 2c             	sub    esp,0x2c
c00096bb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00096c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00096c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00096c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096cf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00096d2:	0f b6 c0             	movzx  eax,al
c00096d5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00096e2:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	e9 b8 00 00 00       	jmp    c00097a8 <raw_input+0xf0>
c00096f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f4:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00096f7:	0f b6 d0             	movzx  edx,al
c00096fa:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00096ff:	39 c2                	cmp    edx,eax
c0009701:	0f 85 8d 00 00 00    	jne    c0009794 <raw_input+0xdc>
c0009707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000970b:	85 c0                	test   eax,eax
c000970d:	74 19                	je     c0009728 <raw_input+0x70>
c000970f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009713:	8b 00                	mov    eax,DWORD PTR [eax]
c0009715:	85 c0                	test   eax,eax
c0009717:	74 0f                	je     c0009728 <raw_input+0x70>
c0009719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971d:	8b 10                	mov    edx,DWORD PTR [eax]
c000971f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009724:	39 c2                	cmp    edx,eax
c0009726:	75 6c                	jne    c0009794 <raw_input+0xdc>
c0009728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000972c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000972f:	85 c0                	test   eax,eax
c0009731:	74 61                	je     c0009794 <raw_input+0xdc>
c0009733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009737:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000973a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000973e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009741:	68 90 68 03 c0       	push   0xc0036890
c0009746:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000974a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974e:	52                   	push   edx
c000974f:	ff d0                	call   eax
c0009751:	83 c4 10             	add    esp,0x10
c0009754:	0f b6 c0             	movzx  eax,al
c0009757:	85 c0                	test   eax,eax
c0009759:	74 39                	je     c0009794 <raw_input+0xdc>
c000975b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0009763:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009768:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000976d:	74 25                	je     c0009794 <raw_input+0xdc>
c000976f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009773:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009776:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000977a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000977d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009787:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000978a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000978e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009793:	90                   	nop
c0009794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009798:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000979c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00097a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00097a7:	90                   	nop
c00097a8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00097ad:	85 c0                	test   eax,eax
c00097af:	75 0b                	jne    c00097bc <raw_input+0x104>
c00097b1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00097b6:	0f 85 34 ff ff ff    	jne    c00096f0 <raw_input+0x38>
c00097bc:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00097c0:	83 c4 2c             	add    esp,0x2c
c00097c3:	c3                   	ret    

c00097c4 <raw_bind>:
c00097c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097c9:	74 09                	je     c00097d4 <raw_bind+0x10>
c00097cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d1:	eb 09                	jmp    c00097dc <raw_bind+0x18>
c00097d3:	90                   	nop
c00097d4:	b8 00 00 00 00       	mov    eax,0x0
c00097d9:	8d 76 00             	lea    esi,[esi+0x0]
c00097dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097e0:	89 02                	mov    DWORD PTR [edx],eax
c00097e2:	b0 00                	mov    al,0x0
c00097e4:	c3                   	ret    
c00097e5:	8d 76 00             	lea    esi,[esi+0x0]

c00097e8 <raw_connect>:
c00097e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097ed:	74 09                	je     c00097f8 <raw_connect+0x10>
c00097ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f5:	eb 09                	jmp    c0009800 <raw_connect+0x18>
c00097f7:	90                   	nop
c00097f8:	b8 00 00 00 00       	mov    eax,0x0
c00097fd:	8d 76 00             	lea    esi,[esi+0x0]
c0009800:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009804:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009807:	b0 00                	mov    al,0x0
c0009809:	c3                   	ret    
c000980a:	66 90                	xchg   ax,ax

c000980c <raw_recv>:
c000980c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009810:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009814:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000981f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009822:	90                   	nop
c0009823:	c3                   	ret    

c0009824 <raw_sendto>:
c0009824:	83 ec 1c             	sub    esp,0x1c
c0009827:	83 ec 08             	sub    esp,0x8
c000982a:	6a 14                	push   0x14
c000982c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009830:	e8 b3 e9 ff ff       	call   c00081e8 <pbuf_header>
c0009835:	83 c4 10             	add    esp,0x10
c0009838:	0f b6 c0             	movzx  eax,al
c000983b:	85 c0                	test   eax,eax
c000983d:	74 49                	je     c0009888 <raw_sendto+0x64>
c000983f:	83 ec 04             	sub    esp,0x4
c0009842:	6a 00                	push   0x0
c0009844:	6a 00                	push   0x0
c0009846:	6a 01                	push   0x1
c0009848:	e8 17 ed ff ff       	call   c0008564 <pbuf_alloc>
c000984d:	83 c4 10             	add    esp,0x10
c0009850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009854:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009859:	75 09                	jne    c0009864 <raw_sendto+0x40>
c000985b:	b0 ff                	mov    al,0xff
c000985d:	e9 2a 01 00 00       	jmp    c000998c <raw_sendto+0x168>
c0009862:	66 90                	xchg   ax,ax
c0009864:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000986b:	0f b7 c0             	movzx  eax,ax
c000986e:	85 c0                	test   eax,eax
c0009870:	74 52                	je     c00098c4 <raw_sendto+0xa0>
c0009872:	83 ec 08             	sub    esp,0x8
c0009875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000987d:	e8 2a f4 ff ff       	call   c0008cac <pbuf_chain>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	eb 3d                	jmp    c00098c4 <raw_sendto+0xa0>
c0009887:	90                   	nop
c0009888:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000988c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009890:	83 ec 08             	sub    esp,0x8
c0009893:	6a ec                	push   0xffffffec
c0009895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009899:	e8 4a e9 ff ff       	call   c00081e8 <pbuf_header>
c000989e:	83 c4 10             	add    esp,0x10
c00098a1:	0f b6 c0             	movzx  eax,al
c00098a4:	85 c0                	test   eax,eax
c00098a6:	74 1c                	je     c00098c4 <raw_sendto+0xa0>
c00098a8:	83 ec 08             	sub    esp,0x8
c00098ab:	68 d8 00 03 c0       	push   0xc00300d8
c00098b0:	68 66 fb 02 c0       	push   0xc002fb66
c00098b5:	e8 ca 62 01 00       	call   c001fb84 <CPrintf>
c00098ba:	83 c4 10             	add    esp,0x10
c00098bd:	b0 ff                	mov    al,0xff
c00098bf:	e9 c8 00 00 00       	jmp    c000998c <raw_sendto+0x168>
c00098c4:	83 ec 0c             	sub    esp,0xc
c00098c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098cb:	e8 00 9e 00 00       	call   c00136d0 <ip_route>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00098dc:	75 22                	jne    c0009900 <raw_sendto+0xdc>
c00098de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e2:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098e6:	74 10                	je     c00098f8 <raw_sendto+0xd4>
c00098e8:	83 ec 0c             	sub    esp,0xc
c00098eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ef:	e8 94 ea ff ff       	call   c0008388 <pbuf_free>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	90                   	nop
c00098f8:	b0 fc                	mov    al,0xfc
c00098fa:	e9 8d 00 00 00       	jmp    c000998c <raw_sendto+0x168>
c00098ff:	90                   	nop
c0009900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009904:	85 c0                	test   eax,eax
c0009906:	74 0c                	je     c0009914 <raw_sendto+0xf0>
c0009908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000990c:	8b 00                	mov    eax,DWORD PTR [eax]
c000990e:	85 c0                	test   eax,eax
c0009910:	75 12                	jne    c0009924 <raw_sendto+0x100>
c0009912:	66 90                	xchg   ax,ax
c0009914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009918:	83 c0 04             	add    eax,0x4
c000991b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000991f:	eb 0b                	jmp    c000992c <raw_sendto+0x108>
c0009921:	8d 76 00             	lea    esi,[esi+0x0]
c0009924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000992c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009930:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009933:	0f b6 c8             	movzx  ecx,al
c0009936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000993a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000993d:	0f b6 d0             	movzx  edx,al
c0009940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009944:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009947:	0f b6 c0             	movzx  eax,al
c000994a:	83 ec 04             	sub    esp,0x4
c000994d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009951:	51                   	push   ecx
c0009952:	52                   	push   edx
c0009953:	50                   	push   eax
c0009954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009960:	e8 43 a2 00 00       	call   c0013ba8 <ip_output_if>
c0009965:	83 c4 20             	add    esp,0x20
c0009968:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000996c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009970:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009974:	74 12                	je     c0009988 <raw_sendto+0x164>
c0009976:	83 ec 0c             	sub    esp,0xc
c0009979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000997d:	e8 06 ea ff ff       	call   c0008388 <pbuf_free>
c0009982:	83 c4 10             	add    esp,0x10
c0009985:	8d 76 00             	lea    esi,[esi+0x0]
c0009988:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c000998c:	83 c4 1c             	add    esp,0x1c
c000998f:	c3                   	ret    

c0009990 <raw_send>:
c0009990:	83 ec 0c             	sub    esp,0xc
c0009993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009997:	83 c0 04             	add    eax,0x4
c000999a:	83 ec 04             	sub    esp,0x4
c000999d:	50                   	push   eax
c000999e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099a6:	e8 79 fe ff ff       	call   c0009824 <raw_sendto>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	83 c4 0c             	add    esp,0xc
c00099b1:	c3                   	ret    
c00099b2:	66 90                	xchg   ax,ax

c00099b4 <raw_remove>:
c00099b4:	83 ec 1c             	sub    esp,0x1c
c00099b7:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099bc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099c0:	75 12                	jne    c00099d4 <raw_remove+0x20>
c00099c2:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099ca:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00099cf:	eb 4b                	jmp    c0009a1c <raw_remove+0x68>
c00099d1:	8d 76 00             	lea    esi,[esi+0x0]
c00099d4:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099dd:	eb 35                	jmp    c0009a14 <raw_remove+0x60>
c00099df:	90                   	nop
c00099e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099e7:	85 c0                	test   eax,eax
c00099e9:	74 1d                	je     c0009a08 <raw_remove+0x54>
c00099eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099f2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099f6:	75 10                	jne    c0009a08 <raw_remove+0x54>
c00099f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00099fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00099ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a03:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a06:	66 90                	xchg   ax,ax
c0009a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a13:	90                   	nop
c0009a14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009a19:	75 c5                	jne    c00099e0 <raw_remove+0x2c>
c0009a1b:	90                   	nop
c0009a1c:	83 ec 08             	sub    esp,0x8
c0009a1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a23:	6a 00                	push   0x0
c0009a25:	e8 9e e0 ff ff       	call   c0007ac8 <memp_free>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	90                   	nop
c0009a2e:	83 c4 1c             	add    esp,0x1c
c0009a31:	c3                   	ret    
c0009a32:	66 90                	xchg   ax,ax

c0009a34 <raw_new>:
c0009a34:	83 ec 2c             	sub    esp,0x2c
c0009a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a3b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a3f:	83 ec 0c             	sub    esp,0xc
c0009a42:	6a 00                	push   0x0
c0009a44:	e8 53 df ff ff       	call   c000799c <memp_malloc>
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a55:	74 3d                	je     c0009a94 <raw_new+0x60>
c0009a57:	83 ec 04             	sub    esp,0x4
c0009a5a:	6a 1c                	push   0x1c
c0009a5c:	6a 00                	push   0x0
c0009a5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a62:	e8 89 6a ff ff       	call   c00004f0 <memset>
c0009a67:	83 c4 10             	add    esp,0x10
c0009a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a6e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009a72:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a79:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009a7d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009a83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a8e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009a93:	90                   	nop
c0009a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a98:	83 c4 2c             	add    esp,0x2c
c0009a9b:	c3                   	ret    

c0009a9c <stats_init>:
c0009a9c:	90                   	nop
c0009a9d:	c3                   	ret    
c0009a9e:	66 90                	xchg   ax,ax

c0009aa0 <sys_msleep>:
c0009aa0:	83 ec 1c             	sub    esp,0x1c
c0009aa3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009aa8:	74 46                	je     c0009af0 <sys_msleep+0x50>
c0009aaa:	83 ec 08             	sub    esp,0x8
c0009aad:	6a 00                	push   0x0
c0009aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ab3:	50                   	push   eax
c0009ab4:	e8 e7 71 ff ff       	call   c0000ca0 <sys_sem_new>
c0009ab9:	83 c4 10             	add    esp,0x10
c0009abc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009ac0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009ac5:	85 c0                	test   eax,eax
c0009ac7:	75 27                	jne    c0009af0 <sys_msleep+0x50>
c0009ac9:	83 ec 08             	sub    esp,0x8
c0009acc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009ad0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ad4:	50                   	push   eax
c0009ad5:	e8 1e 72 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0009ada:	83 c4 10             	add    esp,0x10
c0009add:	83 ec 0c             	sub    esp,0xc
c0009ae0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ae4:	50                   	push   eax
c0009ae5:	e8 de 71 ff ff       	call   c0000cc8 <sys_sem_free>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	8d 76 00             	lea    esi,[esi+0x0]
c0009af0:	90                   	nop
c0009af1:	83 c4 1c             	add    esp,0x1c
c0009af4:	c3                   	ret    
c0009af5:	66 90                	xchg   ax,ax
c0009af7:	90                   	nop

c0009af8 <tcp_accept_null>:
c0009af8:	83 ec 04             	sub    esp,0x4
c0009afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009aff:	88 04 24             	mov    BYTE PTR [esp],al
c0009b02:	b0 f6                	mov    al,0xf6
c0009b04:	83 c4 04             	add    esp,0x4
c0009b07:	c3                   	ret    

c0009b08 <tcp_listen_with_backlog>:
c0009b08:	83 ec 2c             	sub    esp,0x2c
c0009b0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b1a:	85 c0                	test   eax,eax
c0009b1c:	74 22                	je     c0009b40 <tcp_listen_with_backlog+0x38>
c0009b1e:	83 ec 08             	sub    esp,0x8
c0009b21:	68 00 01 03 c0       	push   0xc0030100
c0009b26:	68 66 fb 02 c0       	push   0xc002fb66
c0009b2b:	e8 54 60 01 00       	call   c001fb84 <CPrintf>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	b8 00 00 00 00       	mov    eax,0x0
c0009b38:	e9 77 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b47:	83 f8 01             	cmp    eax,0x1
c0009b4a:	75 0c                	jne    c0009b58 <tcp_listen_with_backlog+0x50>
c0009b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b50:	e9 5f 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b55:	8d 76 00             	lea    esi,[esi+0x0]
c0009b58:	83 ec 0c             	sub    esp,0xc
c0009b5b:	6a 03                	push   0x3
c0009b5d:	e8 3a de ff ff       	call   c000799c <memp_malloc>
c0009b62:	83 c4 10             	add    esp,0x10
c0009b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b69:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009b6e:	75 0c                	jne    c0009b7c <tcp_listen_with_backlog+0x74>
c0009b70:	b8 00 00 00 00       	mov    eax,0x0
c0009b75:	e9 3a 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b7a:	66 90                	xchg   ax,ax
c0009b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009b83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b95:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9d:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ba8:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009bab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009baf:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bb6:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bbd:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009bc7:	83 c8 02             	or     eax,0x2
c0009bca:	88 c2                	mov    dl,al
c0009bcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd0:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009bd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd7:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bde:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be5:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bec:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf9:	89 10                	mov    DWORD PTR [eax],edx
c0009bfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009c02:	0f b7 c0             	movzx  eax,ax
c0009c05:	85 c0                	test   eax,eax
c0009c07:	74 6f                	je     c0009c78 <tcp_listen_with_backlog+0x170>
c0009c09:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c0e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c12:	75 10                	jne    c0009c24 <tcp_listen_with_backlog+0x11c>
c0009c14:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c1c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009c21:	eb 49                	jmp    c0009c6c <tcp_listen_with_backlog+0x164>
c0009c23:	90                   	nop
c0009c24:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c29:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c2e:	eb 30                	jmp    c0009c60 <tcp_listen_with_backlog+0x158>
c0009c30:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c38:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c3c:	75 12                	jne    c0009c50 <tcp_listen_with_backlog+0x148>
c0009c3e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009c47:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009c4a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c4d:	eb 1d                	jmp    c0009c6c <tcp_listen_with_backlog+0x164>
c0009c4f:	90                   	nop
c0009c50:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c58:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c60:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c65:	85 c0                	test   eax,eax
c0009c67:	75 c7                	jne    c0009c30 <tcp_listen_with_backlog+0x128>
c0009c69:	8d 76 00             	lea    esi,[esi+0x0]
c0009c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c70:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009c77:	90                   	nop
c0009c78:	83 ec 08             	sub    esp,0x8
c0009c7b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009c7f:	6a 02                	push   0x2
c0009c81:	e8 42 de ff ff       	call   c0007ac8 <memp_free>
c0009c86:	83 c4 10             	add    esp,0x10
c0009c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c8d:	c7 40 1c f8 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009af8
c0009c94:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c9e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ca5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009caa:	e8 21 6f 00 00       	call   c0010bd0 <tcp_timer_needed>
c0009caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cb3:	90                   	nop
c0009cb4:	83 c4 2c             	add    esp,0x2c
c0009cb7:	c3                   	ret    

c0009cb8 <tcp_update_rcv_ann_wnd>:
c0009cb8:	83 ec 1c             	sub    esp,0x1c
c0009cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cbf:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cc6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cc9:	0f b7 c0             	movzx  eax,ax
c0009ccc:	01 d0                	add    eax,edx
c0009cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009cd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cdd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ce0:	0f b7 c8             	movzx  ecx,ax
c0009ce3:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009ce9:	76 05                	jbe    c0009cf0 <tcp_update_rcv_ann_wnd+0x38>
c0009ceb:	b8 30 04 00 00       	mov    eax,0x430
c0009cf0:	0f b7 c0             	movzx  eax,ax
c0009cf3:	01 c2                	add    edx,eax
c0009cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cf9:	29 d0                	sub    eax,edx
c0009cfb:	78 23                	js     c0009d20 <tcp_update_rcv_ann_wnd+0x68>
c0009cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d01:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d08:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d10:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009d13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d17:	29 c2                	sub    edx,eax
c0009d19:	89 d0                	mov    eax,edx
c0009d1b:	eb 77                	jmp    c0009d94 <tcp_update_rcv_ann_wnd+0xdc>
c0009d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d24:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d2b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009d2e:	29 c2                	sub    edx,eax
c0009d30:	89 d0                	mov    eax,edx
c0009d32:	85 c0                	test   eax,eax
c0009d34:	7e 0e                	jle    c0009d44 <tcp_update_rcv_ann_wnd+0x8c>
c0009d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d3a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009d40:	eb 4a                	jmp    c0009d8c <tcp_update_rcv_ann_wnd+0xd4>
c0009d42:	66 90                	xchg   ax,ax
c0009d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d48:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d4f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009d52:	29 c2                	sub    edx,eax
c0009d54:	89 d0                	mov    eax,edx
c0009d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d5a:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009d62:	76 18                	jbe    c0009d7c <tcp_update_rcv_ann_wnd+0xc4>
c0009d64:	83 ec 08             	sub    esp,0x8
c0009d67:	68 34 03 03 c0       	push   0xc0030334
c0009d6c:	68 66 fb 02 c0       	push   0xc002fb66
c0009d71:	e8 0e 5e 01 00       	call   c001fb84 <CPrintf>
c0009d76:	83 c4 10             	add    esp,0x10
c0009d79:	8d 76 00             	lea    esi,[esi+0x0]
c0009d7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d80:	89 c2                	mov    edx,eax
c0009d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d86:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009d8a:	66 90                	xchg   ax,ax
c0009d8c:	b8 00 00 00 00       	mov    eax,0x0
c0009d91:	8d 76 00             	lea    esi,[esi+0x0]
c0009d94:	83 c4 1c             	add    esp,0x1c
c0009d97:	c3                   	ret    

c0009d98 <tcp_recved>:
c0009d98:	83 ec 2c             	sub    esp,0x2c
c0009d9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009da4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009db0:	0f b7 c0             	movzx  eax,ax
c0009db3:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009db8:	29 c1                	sub    ecx,eax
c0009dba:	89 c8                	mov    eax,ecx
c0009dbc:	39 c2                	cmp    edx,eax
c0009dbe:	7e 18                	jle    c0009dd8 <tcp_recved+0x40>
c0009dc0:	83 ec 08             	sub    esp,0x8
c0009dc3:	68 24 01 03 c0       	push   0xc0030124
c0009dc8:	68 66 fb 02 c0       	push   0xc002fb66
c0009dcd:	e8 b2 5d 01 00       	call   c001fb84 <CPrintf>
c0009dd2:	83 c4 10             	add    esp,0x10
c0009dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0009dd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ddc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009de3:	01 d0                	add    eax,edx
c0009de5:	89 c2                	mov    edx,eax
c0009de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009deb:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009df6:	0f b7 c0             	movzx  eax,ax
c0009df9:	3d 60 08 00 00       	cmp    eax,0x860
c0009dfe:	76 0c                	jbe    c0009e0c <tcp_recved+0x74>
c0009e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e04:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009e0a:	66 90                	xchg   ax,ax
c0009e0c:	83 ec 0c             	sub    esp,0xc
c0009e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e13:	e8 a0 fe ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e1f:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009e27:	7e 23                	jle    c0009e4c <tcp_recved+0xb4>
c0009e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009e30:	83 c8 02             	or     eax,0x2
c0009e33:	88 c2                	mov    dl,al
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009e3c:	83 ec 0c             	sub    esp,0xc
c0009e3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e43:	e8 e0 60 00 00       	call   c000ff28 <tcp_output>
c0009e48:	83 c4 10             	add    esp,0x10
c0009e4b:	90                   	nop
c0009e4c:	90                   	nop
c0009e4d:	83 c4 2c             	add    esp,0x2c
c0009e50:	c3                   	ret    
c0009e51:	8d 76 00             	lea    esi,[esi+0x0]

c0009e54 <tcp_new_port>:
c0009e54:	83 ec 10             	sub    esp,0x10
c0009e57:	90                   	nop
c0009e58:	66 a1 20 3c 03 c0    	mov    ax,ds:0xc0033c20
c0009e5e:	8d 50 01             	lea    edx,[eax+0x1]
c0009e61:	66 89 15 20 3c 03 c0 	mov    WORD PTR ds:0xc0033c20,dx
c0009e68:	0f b7 c0             	movzx  eax,ax
c0009e6b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009e70:	75 0a                	jne    c0009e7c <tcp_new_port+0x28>
c0009e72:	66 c7 05 20 3c 03 c0 00 c0 	mov    WORD PTR ds:0xc0033c20,0xc000
c0009e7b:	90                   	nop
c0009e7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009e84:	eb 4a                	jmp    c0009ed0 <tcp_new_port+0x7c>
c0009e86:	66 90                	xchg   ax,ax
c0009e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e8c:	8b 04 85 40 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfbc0]
c0009e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e99:	eb 29                	jmp    c0009ec4 <tcp_new_port+0x70>
c0009e9b:	90                   	nop
c0009e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ea0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ea3:	66 a1 20 3c 03 c0    	mov    ax,ds:0xc0033c20
c0009ea9:	0f b7 d2             	movzx  edx,dx
c0009eac:	0f b7 c0             	movzx  eax,ax
c0009eaf:	39 c2                	cmp    edx,eax
c0009eb1:	75 05                	jne    c0009eb8 <tcp_new_port+0x64>
c0009eb3:	eb a3                	jmp    c0009e58 <tcp_new_port+0x4>
c0009eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ebc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec3:	90                   	nop
c0009ec4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009ec9:	75 d1                	jne    c0009e9c <tcp_new_port+0x48>
c0009ecb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009ed0:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009ed5:	7e b1                	jle    c0009e88 <tcp_new_port+0x34>
c0009ed7:	66 a1 20 3c 03 c0    	mov    ax,ds:0xc0033c20
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	c3                   	ret    
c0009ee1:	8d 76 00             	lea    esi,[esi+0x0]

c0009ee4 <tcp_bind>:
c0009ee4:	83 ec 2c             	sub    esp,0x2c
c0009ee7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ef0:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009eff:	85 c0                	test   eax,eax
c0009f01:	74 1d                	je     c0009f20 <tcp_bind+0x3c>
c0009f03:	83 ec 08             	sub    esp,0x8
c0009f06:	68 48 01 03 c0       	push   0xc0030148
c0009f0b:	68 66 fb 02 c0       	push   0xc002fb66
c0009f10:	e8 6f 5c 01 00       	call   c001fb84 <CPrintf>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	b0 fa                	mov    al,0xfa
c0009f1a:	e9 f1 00 00 00       	jmp    c000a010 <tcp_bind+0x12c>
c0009f1f:	90                   	nop
c0009f20:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009f25:	85 c0                	test   eax,eax
c0009f27:	75 0b                	jne    c0009f34 <tcp_bind+0x50>
c0009f29:	e8 26 ff ff ff       	call   c0009e54 <tcp_new_port>
c0009f2e:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f33:	90                   	nop
c0009f34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f3c:	eb 7a                	jmp    c0009fb8 <tcp_bind+0xd4>
c0009f3e:	66 90                	xchg   ax,ax
c0009f40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f44:	8b 04 85 40 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfbc0]
c0009f4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f51:	eb 59                	jmp    c0009fac <tcp_bind+0xc8>
c0009f53:	90                   	nop
c0009f54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009f5b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f60:	0f b7 c0             	movzx  eax,ax
c0009f63:	39 c2                	cmp    edx,eax
c0009f65:	75 39                	jne    c0009fa0 <tcp_bind+0xbc>
c0009f67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f6b:	85 c0                	test   eax,eax
c0009f6d:	74 2d                	je     c0009f9c <tcp_bind+0xb8>
c0009f6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f75:	85 c0                	test   eax,eax
c0009f77:	74 23                	je     c0009f9c <tcp_bind+0xb8>
c0009f79:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f7e:	74 1c                	je     c0009f9c <tcp_bind+0xb8>
c0009f80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f86:	85 c0                	test   eax,eax
c0009f88:	74 12                	je     c0009f9c <tcp_bind+0xb8>
c0009f8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f96:	39 c2                	cmp    edx,eax
c0009f98:	75 06                	jne    c0009fa0 <tcp_bind+0xbc>
c0009f9a:	66 90                	xchg   ax,ax
c0009f9c:	b0 f8                	mov    al,0xf8
c0009f9e:	eb 70                	jmp    c000a010 <tcp_bind+0x12c>
c0009fa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fab:	90                   	nop
c0009fac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009fb1:	75 a1                	jne    c0009f54 <tcp_bind+0x70>
c0009fb3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009fb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fbc:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009fc0:	0f 8c 7a ff ff ff    	jl     c0009f40 <tcp_bind+0x5c>
c0009fc6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009fcb:	74 17                	je     c0009fe4 <tcp_bind+0x100>
c0009fcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fd3:	85 c0                	test   eax,eax
c0009fd5:	74 0d                	je     c0009fe4 <tcp_bind+0x100>
c0009fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fdb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fdf:	8b 12                	mov    edx,DWORD PTR [edx]
c0009fe1:	89 10                	mov    DWORD PTR [eax],edx
c0009fe3:	90                   	nop
c0009fe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fe8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009fec:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009ff0:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a001:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a006:	e8 c5 6b 00 00       	call   c0010bd0 <tcp_timer_needed>
c000a00b:	b0 00                	mov    al,0x0
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	83 c4 2c             	add    esp,0x2c
c000a013:	c3                   	ret    

c000a014 <tcp_seg_free>:
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a01c:	74 32                	je     c000a050 <tcp_seg_free+0x3c>
c000a01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a025:	85 c0                	test   eax,eax
c000a027:	74 13                	je     c000a03c <tcp_seg_free+0x28>
c000a029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a02d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	50                   	push   eax
c000a034:	e8 4f e3 ff ff       	call   c0008388 <pbuf_free>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	83 ec 08             	sub    esp,0x8
c000a03f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a043:	6a 04                	push   0x4
c000a045:	e8 7e da ff ff       	call   c0007ac8 <memp_free>
c000a04a:	83 c4 10             	add    esp,0x10
c000a04d:	8d 76 00             	lea    esi,[esi+0x0]
c000a050:	90                   	nop
c000a051:	83 c4 0c             	add    esp,0xc
c000a054:	c3                   	ret    
c000a055:	8d 76 00             	lea    esi,[esi+0x0]

c000a058 <tcp_segs_free>:
c000a058:	83 ec 1c             	sub    esp,0x1c
c000a05b:	eb 27                	jmp    c000a084 <tcp_segs_free+0x2c>
c000a05d:	8d 76 00             	lea    esi,[esi+0x0]
c000a060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a064:	8b 00                	mov    eax,DWORD PTR [eax]
c000a066:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a06a:	83 ec 0c             	sub    esp,0xc
c000a06d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a071:	e8 9e ff ff ff       	call   c000a014 <tcp_seg_free>
c000a076:	83 c4 10             	add    esp,0x10
c000a079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a081:	8d 76 00             	lea    esi,[esi+0x0]
c000a084:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a089:	75 d5                	jne    c000a060 <tcp_segs_free+0x8>
c000a08b:	90                   	nop
c000a08c:	83 c4 1c             	add    esp,0x1c
c000a08f:	c3                   	ret    

c000a090 <tcp_setprio>:
c000a090:	83 ec 04             	sub    esp,0x4
c000a093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a097:	88 04 24             	mov    BYTE PTR [esp],al
c000a09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a09e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a0a1:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a0a4:	90                   	nop
c000a0a5:	83 c4 04             	add    esp,0x4
c000a0a8:	c3                   	ret    
c000a0a9:	8d 76 00             	lea    esi,[esi+0x0]

c000a0ac <tcp_seg_copy>:
c000a0ac:	83 ec 1c             	sub    esp,0x1c
c000a0af:	83 ec 0c             	sub    esp,0xc
c000a0b2:	6a 04                	push   0x4
c000a0b4:	e8 e3 d8 ff ff       	call   c000799c <memp_malloc>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a0c5:	75 09                	jne    c000a0d0 <tcp_seg_copy+0x24>
c000a0c7:	b8 00 00 00 00       	mov    eax,0x0
c000a0cc:	eb 2e                	jmp    c000a0fc <tcp_seg_copy+0x50>
c000a0ce:	66 90                	xchg   ax,ax
c000a0d0:	83 ec 04             	sub    esp,0x4
c000a0d3:	6a 10                	push   0x10
c000a0d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a0d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0dd:	e8 98 62 ff ff       	call   c000037a <memcpy>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ec:	83 ec 0c             	sub    esp,0xc
c000a0ef:	50                   	push   eax
c000a0f0:	e8 a3 ea ff ff       	call   c0008b98 <pbuf_ref>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	c3                   	ret    

c000a100 <tcp_arg>:
c000a100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a108:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a10b:	90                   	nop
c000a10c:	c3                   	ret    
c000a10d:	8d 76 00             	lea    esi,[esi+0x0]

c000a110 <tcp_recv>:
c000a110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a114:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a118:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a11e:	90                   	nop
c000a11f:	c3                   	ret    

c000a120 <tcp_sent>:
c000a120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a128:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a12e:	90                   	nop
c000a12f:	c3                   	ret    

c000a130 <tcp_err>:
c000a130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a138:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a13e:	90                   	nop
c000a13f:	c3                   	ret    

c000a140 <tcp_accept>:
c000a140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a148:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a14b:	90                   	nop
c000a14c:	c3                   	ret    
c000a14d:	8d 76 00             	lea    esi,[esi+0x0]

c000a150 <tcp_poll>:
c000a150:	83 ec 04             	sub    esp,0x4
c000a153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a157:	88 04 24             	mov    BYTE PTR [esp],al
c000a15a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a15e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a162:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a16c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a16f:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a172:	90                   	nop
c000a173:	83 c4 04             	add    esp,0x4
c000a176:	c3                   	ret    
c000a177:	90                   	nop

c000a178 <tcp_pcb_purge>:
c000a178:	83 ec 0c             	sub    esp,0xc
c000a17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a182:	85 c0                	test   eax,eax
c000a184:	0f 84 ca 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a18e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a191:	83 f8 0a             	cmp    eax,0xa
c000a194:	0f 84 ba 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1a1:	83 f8 01             	cmp    eax,0x1
c000a1a4:	0f 84 aa 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ae:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a1b4:	85 c0                	test   eax,eax
c000a1b6:	74 24                	je     c000a1dc <tcp_pcb_purge+0x64>
c000a1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bc:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	50                   	push   eax
c000a1c6:	e8 bd e1 ff ff       	call   c0008388 <pbuf_free>
c000a1cb:	83 c4 10             	add    esp,0x10
c000a1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d2:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a1e6:	83 ec 0c             	sub    esp,0xc
c000a1e9:	50                   	push   eax
c000a1ea:	e8 69 fe ff ff       	call   c000a058 <tcp_segs_free>
c000a1ef:	83 c4 10             	add    esp,0x10
c000a1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f6:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a211:	83 ec 0c             	sub    esp,0xc
c000a214:	50                   	push   eax
c000a215:	e8 3e fe ff ff       	call   c000a058 <tcp_segs_free>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a221:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a224:	83 ec 0c             	sub    esp,0xc
c000a227:	50                   	push   eax
c000a228:	e8 2b fe ff ff       	call   c000a058 <tcp_segs_free>
c000a22d:	83 c4 10             	add    esp,0x10
c000a230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a234:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23f:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a246:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24d:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a253:	90                   	nop
c000a254:	90                   	nop
c000a255:	83 c4 0c             	add    esp,0xc
c000a258:	c3                   	ret    
c000a259:	8d 76 00             	lea    esi,[esi+0x0]

c000a25c <tcp_slowtmr>:
c000a25c:	57                   	push   edi
c000a25d:	56                   	push   esi
c000a25e:	53                   	push   ebx
c000a25f:	83 ec 20             	sub    esp,0x20
c000a262:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a267:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a26c:	83 c0 01             	add    eax,0x1
c000a26f:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a274:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a27c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a281:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a285:	e9 0e 06 00 00       	jmp    c000a898 <tcp_slowtmr+0x63c>
c000a28a:	66 90                	xchg   ax,ax
c000a28c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a290:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a293:	85 c0                	test   eax,eax
c000a295:	75 15                	jne    c000a2ac <tcp_slowtmr+0x50>
c000a297:	83 ec 08             	sub    esp,0x8
c000a29a:	68 70 01 03 c0       	push   0xc0030170
c000a29f:	68 66 fb 02 c0       	push   0xc002fb66
c000a2a4:	e8 db 58 01 00       	call   c001fb84 <CPrintf>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2b3:	83 f8 01             	cmp    eax,0x1
c000a2b6:	75 18                	jne    c000a2d0 <tcp_slowtmr+0x74>
c000a2b8:	83 ec 08             	sub    esp,0x8
c000a2bb:	68 9c 01 03 c0       	push   0xc003019c
c000a2c0:	68 66 fb 02 c0       	push   0xc002fb66
c000a2c5:	e8 ba 58 01 00       	call   c001fb84 <CPrintf>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a2d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2d7:	83 f8 0a             	cmp    eax,0xa
c000a2da:	75 18                	jne    c000a2f4 <tcp_slowtmr+0x98>
c000a2dc:	83 ec 08             	sub    esp,0x8
c000a2df:	68 c8 01 03 c0       	push   0xc00301c8
c000a2e4:	68 66 fb 02 c0       	push   0xc002fb66
c000a2e9:	e8 96 58 01 00       	call   c001fb84 <CPrintf>
c000a2ee:	83 c4 10             	add    esp,0x10
c000a2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000a2f4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2f9:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a2fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a302:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a305:	83 f8 02             	cmp    eax,0x2
c000a308:	75 22                	jne    c000a32c <tcp_slowtmr+0xd0>
c000a30a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30e:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a311:	0f b6 c0             	movzx  eax,al
c000a314:	83 f8 06             	cmp    eax,0x6
c000a317:	75 13                	jne    c000a32c <tcp_slowtmr+0xd0>
c000a319:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a31d:	83 c0 01             	add    eax,0x1
c000a320:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a324:	e9 eb 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a329:	8d 76 00             	lea    esi,[esi+0x0]
c000a32c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a330:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a333:	0f b6 c0             	movzx  eax,al
c000a336:	83 f8 0c             	cmp    eax,0xc
c000a339:	75 11                	jne    c000a34c <tcp_slowtmr+0xf0>
c000a33b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a33f:	83 c0 01             	add    eax,0x1
c000a342:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a346:	e9 c9 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a34b:	90                   	nop
c000a34c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a350:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a356:	0f b6 c0             	movzx  eax,al
c000a359:	85 c0                	test   eax,eax
c000a35b:	0f 84 8f 00 00 00    	je     c000a3f0 <tcp_slowtmr+0x194>
c000a361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a365:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a36b:	8d 50 01             	lea    edx,[eax+0x1]
c000a36e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a372:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a37c:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a386:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a38c:	0f b6 c0             	movzx  eax,al
c000a38f:	83 e8 01             	sub    eax,0x1
c000a392:	8a 80 50 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfbb0]
c000a398:	0f b6 c0             	movzx  eax,al
c000a39b:	39 c2                	cmp    edx,eax
c000a39d:	0f 82 71 01 00 00    	jb     c000a514 <tcp_slowtmr+0x2b8>
c000a3a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a7:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a3b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a3bb:	0f b6 c0             	movzx  eax,al
c000a3be:	83 f8 06             	cmp    eax,0x6
c000a3c1:	77 19                	ja     c000a3dc <tcp_slowtmr+0x180>
c000a3c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c7:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a3cd:	83 c0 01             	add    eax,0x1
c000a3d0:	88 c2                	mov    dl,al
c000a3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d6:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3e3:	e8 58 64 00 00       	call   c0010840 <tcp_zero_window_probe>
c000a3e8:	83 c4 10             	add    esp,0x10
c000a3eb:	e9 24 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a3f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f4:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3f8:	98                   	cwde   
c000a3f9:	85 c0                	test   eax,eax
c000a3fb:	78 17                	js     c000a414 <tcp_slowtmr+0x1b8>
c000a3fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a401:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a405:	83 c0 01             	add    eax,0x1
c000a408:	89 c2                	mov    edx,eax
c000a40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40e:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a412:	66 90                	xchg   ax,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a41b:	85 c0                	test   eax,eax
c000a41d:	0f 84 f1 00 00 00    	je     c000a514 <tcp_slowtmr+0x2b8>
c000a423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a427:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a42b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a432:	0f bf d2             	movsx  edx,dx
c000a435:	98                   	cwde   
c000a436:	39 c2                	cmp    edx,eax
c000a438:	0f 8c d6 00 00 00    	jl     c000a514 <tcp_slowtmr+0x2b8>
c000a43e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a442:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a445:	83 f8 02             	cmp    eax,0x2
c000a448:	74 3e                	je     c000a488 <tcp_slowtmr+0x22c>
c000a44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a451:	98                   	cwde   
c000a452:	c1 f8 03             	sar    eax,0x3
c000a455:	0f bf d0             	movsx  edx,ax
c000a458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a460:	98                   	cwde   
c000a461:	01 c2                	add    edx,eax
c000a463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a467:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a46a:	0f b6 c0             	movzx  eax,al
c000a46d:	8a 80 58 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfba8]
c000a473:	0f b6 c0             	movzx  eax,al
c000a476:	88 c1                	mov    cl,al
c000a478:	d3 e2                	shl    edx,cl
c000a47a:	89 d0                	mov    eax,edx
c000a47c:	89 c2                	mov    edx,eax
c000a47e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a482:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a486:	66 90                	xchg   ax,ax
c000a488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a496:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a4a1:	89 c8                	mov    eax,ecx
c000a4a3:	0f b7 d8             	movzx  ebx,ax
c000a4a6:	0f b7 ca             	movzx  ecx,dx
c000a4a9:	39 cb                	cmp    ebx,ecx
c000a4ab:	76 03                	jbe    c000a4b0 <tcp_slowtmr+0x254>
c000a4ad:	89 d0                	mov    eax,edx
c000a4af:	90                   	nop
c000a4b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a4b5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a4ba:	d1 e8                	shr    eax,1
c000a4bc:	89 c2                	mov    edx,eax
c000a4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c2:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a4cd:	0f b7 d0             	movzx  edx,ax
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4d7:	0f b7 c0             	movzx  eax,ax
c000a4da:	d1 e0                	shl    eax,1
c000a4dc:	39 c2                	cmp    edx,eax
c000a4de:	7d 14                	jge    c000a4f4 <tcp_slowtmr+0x298>
c000a4e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4e7:	d1 e0                	shl    eax,1
c000a4e9:	89 c2                	mov    edx,eax
c000a4eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ef:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a4f3:	90                   	nop
c000a4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a503:	83 ec 0c             	sub    esp,0xc
c000a506:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a50a:	e8 21 60 00 00       	call   c0010530 <tcp_rexmit_rto>
c000a50f:	83 c4 10             	add    esp,0x10
c000a512:	66 90                	xchg   ax,ax
c000a514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a518:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a51b:	83 f8 06             	cmp    eax,0x6
c000a51e:	75 24                	jne    c000a544 <tcp_slowtmr+0x2e8>
c000a520:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a52d:	29 c2                	sub    edx,eax
c000a52f:	89 d0                	mov    eax,edx
c000a531:	83 f8 28             	cmp    eax,0x28
c000a534:	76 0e                	jbe    c000a544 <tcp_slowtmr+0x2e8>
c000a536:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a53a:	83 c0 01             	add    eax,0x1
c000a53d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a541:	8d 76 00             	lea    esi,[esi+0x0]
c000a544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a548:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a54b:	0f b6 c0             	movzx  eax,al
c000a54e:	83 e0 08             	and    eax,0x8
c000a551:	0f 84 cd 00 00 00    	je     c000a624 <tcp_slowtmr+0x3c8>
c000a557:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a55b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a55e:	83 f8 04             	cmp    eax,0x4
c000a561:	74 11                	je     c000a574 <tcp_slowtmr+0x318>
c000a563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a567:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a56a:	83 f8 07             	cmp    eax,0x7
c000a56d:	0f 85 b1 00 00 00    	jne    c000a624 <tcp_slowtmr+0x3c8>
c000a573:	90                   	nop
c000a574:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a581:	89 d1                	mov    ecx,edx
c000a583:	29 c1                	sub    ecx,eax
c000a585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a589:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a58f:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a594:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a599:	f7 e2                	mul    edx
c000a59b:	89 d0                	mov    eax,edx
c000a59d:	c1 e8 05             	shr    eax,0x5
c000a5a0:	39 c1                	cmp    ecx,eax
c000a5a2:	76 18                	jbe    c000a5bc <tcp_slowtmr+0x360>
c000a5a4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5a8:	83 c0 01             	add    eax,0x1
c000a5ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5af:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a5b3:	83 c0 01             	add    eax,0x1
c000a5b6:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a5ba:	eb 68                	jmp    c000a624 <tcp_slowtmr+0x3c8>
c000a5bc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5c9:	89 d1                	mov    ecx,edx
c000a5cb:	29 c1                	sub    ecx,eax
c000a5cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d1:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a5d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5db:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a5e1:	0f b6 c0             	movzx  eax,al
c000a5e4:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a5ea:	01 d0                	add    eax,edx
c000a5ec:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a5f1:	f7 e2                	mul    edx
c000a5f3:	89 d0                	mov    eax,edx
c000a5f5:	c1 e8 05             	shr    eax,0x5
c000a5f8:	39 c1                	cmp    ecx,eax
c000a5fa:	76 28                	jbe    c000a624 <tcp_slowtmr+0x3c8>
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a603:	e8 6c 61 00 00       	call   c0010774 <tcp_keepalive>
c000a608:	83 c4 10             	add    esp,0x10
c000a60b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a615:	83 c0 01             	add    eax,0x1
c000a618:	88 c2                	mov    dl,al
c000a61a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a61e:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a628:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a62e:	85 c0                	test   eax,eax
c000a630:	74 4e                	je     c000a680 <tcp_slowtmr+0x424>
c000a632:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a63f:	89 d1                	mov    ecx,edx
c000a641:	29 c1                	sub    ecx,eax
c000a643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a647:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a64a:	0f bf d0             	movsx  edx,ax
c000a64d:	89 d0                	mov    eax,edx
c000a64f:	d1 e0                	shl    eax,1
c000a651:	01 d0                	add    eax,edx
c000a653:	d1 e0                	shl    eax,1
c000a655:	39 c1                	cmp    ecx,eax
c000a657:	72 27                	jb     c000a680 <tcp_slowtmr+0x424>
c000a659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65d:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a663:	83 ec 0c             	sub    esp,0xc
c000a666:	50                   	push   eax
c000a667:	e8 ec f9 ff ff       	call   c000a058 <tcp_segs_free>
c000a66c:	83 c4 10             	add    esp,0x10
c000a66f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a673:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a67d:	8d 76 00             	lea    esi,[esi+0x0]
c000a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a684:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a687:	83 f8 03             	cmp    eax,0x3
c000a68a:	75 24                	jne    c000a6b0 <tcp_slowtmr+0x454>
c000a68c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a692:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a696:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a699:	29 c2                	sub    edx,eax
c000a69b:	89 d0                	mov    eax,edx
c000a69d:	83 f8 28             	cmp    eax,0x28
c000a6a0:	76 0e                	jbe    c000a6b0 <tcp_slowtmr+0x454>
c000a6a2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6a6:	83 c0 01             	add    eax,0x1
c000a6a9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a6b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b7:	83 f8 09             	cmp    eax,0x9
c000a6ba:	75 24                	jne    c000a6e0 <tcp_slowtmr+0x484>
c000a6bc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6c6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6c9:	29 c2                	sub    edx,eax
c000a6cb:	89 d0                	mov    eax,edx
c000a6cd:	3d f0 00 00 00       	cmp    eax,0xf0
c000a6d2:	76 0c                	jbe    c000a6e0 <tcp_slowtmr+0x484>
c000a6d4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6d8:	83 c0 01             	add    eax,0x1
c000a6db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6df:	90                   	nop
c000a6e0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a6e5:	85 c0                	test   eax,eax
c000a6e7:	0f 84 13 01 00 00    	je     c000a800 <tcp_slowtmr+0x5a4>
c000a6ed:	83 ec 0c             	sub    esp,0xc
c000a6f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6f4:	e8 7f fa ff ff       	call   c000a178 <tcp_pcb_purge>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a701:	74 31                	je     c000a734 <tcp_slowtmr+0x4d8>
c000a703:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a708:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a70c:	75 16                	jne    c000a724 <tcp_slowtmr+0x4c8>
c000a70e:	83 ec 08             	sub    esp,0x8
c000a711:	68 f8 01 03 c0       	push   0xc00301f8
c000a716:	68 66 fb 02 c0       	push   0xc002fb66
c000a71b:	e8 64 54 01 00       	call   c001fb84 <CPrintf>
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	90                   	nop
c000a724:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a728:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a72b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a72f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a732:	eb 2c                	jmp    c000a760 <tcp_slowtmr+0x504>
c000a734:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a739:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a73d:	74 15                	je     c000a754 <tcp_slowtmr+0x4f8>
c000a73f:	83 ec 08             	sub    esp,0x8
c000a742:	68 24 02 03 c0       	push   0xc0030224
c000a747:	68 66 fb 02 c0       	push   0xc002fb66
c000a74c:	e8 33 54 01 00       	call   c001fb84 <CPrintf>
c000a751:	83 c4 10             	add    esp,0x10
c000a754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a758:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a75b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a764:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a76a:	85 c0                	test   eax,eax
c000a76c:	74 1e                	je     c000a78c <tcp_slowtmr+0x530>
c000a76e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a772:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a77c:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a77f:	83 ec 08             	sub    esp,0x8
c000a782:	6a f6                	push   0xfffffff6
c000a784:	52                   	push   edx
c000a785:	ff d0                	call   eax
c000a787:	83 c4 10             	add    esp,0x10
c000a78a:	66 90                	xchg   ax,ax
c000a78c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a791:	85 c0                	test   eax,eax
c000a793:	74 3f                	je     c000a7d4 <tcp_slowtmr+0x578>
c000a795:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a799:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a79d:	0f b7 f0             	movzx  esi,ax
c000a7a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a7a7:	0f b7 d8             	movzx  ebx,ax
c000a7aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ae:	8d 78 04             	lea    edi,[eax+0x4]
c000a7b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a7b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a7bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7c0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a7c3:	83 ec 08             	sub    esp,0x8
c000a7c6:	56                   	push   esi
c000a7c7:	53                   	push   ebx
c000a7c8:	57                   	push   edi
c000a7c9:	51                   	push   ecx
c000a7ca:	52                   	push   edx
c000a7cb:	50                   	push   eax
c000a7cc:	e8 e3 5b 00 00       	call   c00103b4 <tcp_rst>
c000a7d1:	83 c4 20             	add    esp,0x20
c000a7d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7e7:	83 ec 08             	sub    esp,0x8
c000a7ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ee:	6a 02                	push   0x2
c000a7f0:	e8 d3 d2 ff ff       	call   c0007ac8 <memp_free>
c000a7f5:	83 c4 10             	add    esp,0x10
c000a7f8:	e9 9b 00 00 00       	jmp    c000a898 <tcp_slowtmr+0x63c>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a804:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a80c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a80f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a817:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a81a:	83 c0 01             	add    eax,0x1
c000a81d:	88 c2                	mov    dl,al
c000a81f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a823:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a826:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a82a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a831:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a834:	0f b6 d2             	movzx  edx,dl
c000a837:	0f b6 c0             	movzx  eax,al
c000a83a:	39 c2                	cmp    edx,eax
c000a83c:	72 5a                	jb     c000a898 <tcp_slowtmr+0x63c>
c000a83e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a842:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a846:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a84a:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a850:	85 c0                	test   eax,eax
c000a852:	74 24                	je     c000a878 <tcp_slowtmr+0x61c>
c000a854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a858:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a85e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a862:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a865:	83 ec 08             	sub    esp,0x8
c000a868:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a86c:	52                   	push   edx
c000a86d:	ff d0                	call   eax
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a876:	eb 08                	jmp    c000a880 <tcp_slowtmr+0x624>
c000a878:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a87d:	8d 76 00             	lea    esi,[esi+0x0]
c000a880:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a885:	85 c0                	test   eax,eax
c000a887:	75 0f                	jne    c000a898 <tcp_slowtmr+0x63c>
c000a889:	83 ec 0c             	sub    esp,0xc
c000a88c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a890:	e8 93 56 00 00       	call   c000ff28 <tcp_output>
c000a895:	83 c4 10             	add    esp,0x10
c000a898:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a89d:	0f 85 e9 f9 ff ff    	jne    c000a28c <tcp_slowtmr+0x30>
c000a8a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a8ab:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8b4:	e9 0b 01 00 00       	jmp    c000a9c4 <tcp_slowtmr+0x768>
c000a8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000a8bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a8c3:	83 f8 0a             	cmp    eax,0xa
c000a8c6:	74 18                	je     c000a8e0 <tcp_slowtmr+0x684>
c000a8c8:	83 ec 08             	sub    esp,0x8
c000a8cb:	68 50 02 03 c0       	push   0xc0030250
c000a8d0:	68 66 fb 02 c0       	push   0xc002fb66
c000a8d5:	e8 aa 52 01 00       	call   c001fb84 <CPrintf>
c000a8da:	83 c4 10             	add    esp,0x10
c000a8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a8e0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a8e5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a8eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8ef:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a8f2:	29 c2                	sub    edx,eax
c000a8f4:	89 d0                	mov    eax,edx
c000a8f6:	3d f0 00 00 00       	cmp    eax,0xf0
c000a8fb:	76 0b                	jbe    c000a908 <tcp_slowtmr+0x6ac>
c000a8fd:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a901:	83 c0 01             	add    eax,0x1
c000a904:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a90d:	85 c0                	test   eax,eax
c000a90f:	0f 84 9b 00 00 00    	je     c000a9b0 <tcp_slowtmr+0x754>
c000a915:	83 ec 0c             	sub    esp,0xc
c000a918:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a91c:	e8 57 f8 ff ff       	call   c000a178 <tcp_pcb_purge>
c000a921:	83 c4 10             	add    esp,0x10
c000a924:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a929:	74 31                	je     c000a95c <tcp_slowtmr+0x700>
c000a92b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a930:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a934:	75 16                	jne    c000a94c <tcp_slowtmr+0x6f0>
c000a936:	83 ec 08             	sub    esp,0x8
c000a939:	68 80 02 03 c0       	push   0xc0030280
c000a93e:	68 66 fb 02 c0       	push   0xc002fb66
c000a943:	e8 3c 52 01 00       	call   c001fb84 <CPrintf>
c000a948:	83 c4 10             	add    esp,0x10
c000a94b:	90                   	nop
c000a94c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a950:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a953:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a957:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a95a:	eb 2c                	jmp    c000a988 <tcp_slowtmr+0x72c>
c000a95c:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a961:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a965:	74 15                	je     c000a97c <tcp_slowtmr+0x720>
c000a967:	83 ec 08             	sub    esp,0x8
c000a96a:	68 a8 02 03 c0       	push   0xc00302a8
c000a96f:	68 66 fb 02 c0       	push   0xc002fb66
c000a974:	e8 0b 52 01 00       	call   c001fb84 <CPrintf>
c000a979:	83 c4 10             	add    esp,0x10
c000a97c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a983:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a994:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a997:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a99b:	83 ec 08             	sub    esp,0x8
c000a99e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9a2:	6a 02                	push   0x2
c000a9a4:	e8 1f d1 ff ff       	call   c0007ac8 <memp_free>
c000a9a9:	83 c4 10             	add    esp,0x10
c000a9ac:	eb 16                	jmp    c000a9c4 <tcp_slowtmr+0x768>
c000a9ae:	66 90                	xchg   ax,ax
c000a9b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a9b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a9c3:	90                   	nop
c000a9c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9c9:	0f 85 ed fe ff ff    	jne    c000a8bc <tcp_slowtmr+0x660>
c000a9cf:	90                   	nop
c000a9d0:	83 c4 20             	add    esp,0x20
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	5f                   	pop    edi
c000a9d6:	c3                   	ret    
c000a9d7:	90                   	nop

c000a9d8 <tcp_pcb_remove>:
c000a9d8:	83 ec 0c             	sub    esp,0xc
c000a9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9df:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9e1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9e5:	75 11                	jne    c000a9f8 <tcp_pcb_remove+0x20>
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f4:	89 10                	mov    DWORD PTR [eax],edx
c000a9f6:	eb 4c                	jmp    c000aa44 <tcp_pcb_remove+0x6c>
c000a9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9fe:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aa03:	eb 33                	jmp    c000aa38 <tcp_pcb_remove+0x60>
c000aa05:	8d 76 00             	lea    esi,[esi+0x0]
c000aa08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa10:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000aa14:	75 12                	jne    c000aa28 <tcp_pcb_remove+0x50>
c000aa16:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa1f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000aa22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa25:	eb 1d                	jmp    c000aa44 <tcp_pcb_remove+0x6c>
c000aa27:	90                   	nop
c000aa28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa30:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aa35:	8d 76 00             	lea    esi,[esi+0x0]
c000aa38:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa3d:	85 c0                	test   eax,eax
c000aa3f:	75 c7                	jne    c000aa08 <tcp_pcb_remove+0x30>
c000aa41:	8d 76 00             	lea    esi,[esi+0x0]
c000aa44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa48:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa56:	e8 1d f7 ff ff       	call   c000a178 <tcp_pcb_purge>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa65:	83 f8 0a             	cmp    eax,0xa
c000aa68:	74 3e                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa71:	83 f8 01             	cmp    eax,0x1
c000aa74:	74 32                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa7a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa7d:	0f b6 c0             	movzx  eax,al
c000aa80:	83 e0 01             	and    eax,0x1
c000aa83:	74 23                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa89:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa8c:	83 c8 02             	or     eax,0x2
c000aa8f:	88 c2                	mov    dl,al
c000aa91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa95:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aa98:	83 ec 0c             	sub    esp,0xc
c000aa9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa9f:	e8 84 54 00 00       	call   c000ff28 <tcp_output>
c000aaa4:	83 c4 10             	add    esp,0x10
c000aaa7:	90                   	nop
c000aaa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaaf:	83 f8 01             	cmp    eax,0x1
c000aab2:	74 64                	je     c000ab18 <tcp_pcb_remove+0x140>
c000aab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aab8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aabb:	85 c0                	test   eax,eax
c000aabd:	74 15                	je     c000aad4 <tcp_pcb_remove+0xfc>
c000aabf:	83 ec 08             	sub    esp,0x8
c000aac2:	68 4e 03 03 c0       	push   0xc003034e
c000aac7:	68 66 fb 02 c0       	push   0xc002fb66
c000aacc:	e8 b3 50 01 00       	call   c001fb84 <CPrintf>
c000aad1:	83 c4 10             	add    esp,0x10
c000aad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aad8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aadb:	85 c0                	test   eax,eax
c000aadd:	74 15                	je     c000aaf4 <tcp_pcb_remove+0x11c>
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	68 66 03 03 c0       	push   0xc0030366
c000aae7:	68 66 fb 02 c0       	push   0xc002fb66
c000aaec:	e8 93 50 01 00       	call   c001fb84 <CPrintf>
c000aaf1:	83 c4 10             	add    esp,0x10
c000aaf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaf8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 16                	je     c000ab18 <tcp_pcb_remove+0x140>
c000ab02:	83 ec 08             	sub    esp,0x8
c000ab05:	68 7f 03 03 c0       	push   0xc003037f
c000ab0a:	68 66 fb 02 c0       	push   0xc002fb66
c000ab0f:	e8 70 50 01 00       	call   c001fb84 <CPrintf>
c000ab14:	83 c4 10             	add    esp,0x10
c000ab17:	90                   	nop
c000ab18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab1c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab23:	90                   	nop
c000ab24:	83 c4 0c             	add    esp,0xc
c000ab27:	c3                   	ret    

c000ab28 <tcp_close_shutdown>:
c000ab28:	57                   	push   edi
c000ab29:	56                   	push   esi
c000ab2a:	53                   	push   ebx
c000ab2b:	83 ec 20             	sub    esp,0x20
c000ab2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ab32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ab36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ab3b:	85 c0                	test   eax,eax
c000ab3d:	0f 84 41 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab4a:	83 f8 01             	cmp    eax,0x1
c000ab4d:	0f 84 31 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab57:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ab5d:	85 c0                	test   eax,eax
c000ab5f:	75 17                	jne    c000ab78 <tcp_close_shutdown+0x50>
c000ab61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab65:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ab68:	0f b7 c0             	movzx  eax,ax
c000ab6b:	3d 60 08 00 00       	cmp    eax,0x860
c000ab70:	0f 84 0e 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ab7f:	0f b6 c0             	movzx  eax,al
c000ab82:	83 e0 10             	and    eax,0x10
c000ab85:	75 15                	jne    c000ab9c <tcp_close_shutdown+0x74>
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	68 96 03 03 c0       	push   0xc0030396
c000ab8f:	68 66 fb 02 c0       	push   0xc002fb66
c000ab94:	e8 eb 4f 01 00       	call   c001fb84 <CPrintf>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aba0:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aba4:	0f b7 f0             	movzx  esi,ax
c000aba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abae:	0f b7 d8             	movzx  ebx,ax
c000abb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb5:	8d 78 04             	lea    edi,[eax+0x4]
c000abb8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000abbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abc0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000abc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abc7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000abca:	83 ec 08             	sub    esp,0x8
c000abcd:	56                   	push   esi
c000abce:	53                   	push   ebx
c000abcf:	57                   	push   edi
c000abd0:	51                   	push   ecx
c000abd1:	52                   	push   edx
c000abd2:	50                   	push   eax
c000abd3:	e8 dc 57 00 00       	call   c00103b4 <tcp_rst>
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abe2:	e8 91 f5 ff ff       	call   c000a178 <tcp_pcb_purge>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abef:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abf3:	75 0f                	jne    c000ac04 <tcp_close_shutdown+0xdc>
c000abf5:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abfa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abfd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ac02:	eb 48                	jmp    c000ac4c <tcp_close_shutdown+0x124>
c000ac04:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ac09:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac0e:	eb 30                	jmp    c000ac40 <tcp_close_shutdown+0x118>
c000ac10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac1c:	75 12                	jne    c000ac30 <tcp_close_shutdown+0x108>
c000ac1e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ac27:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac2d:	eb 1d                	jmp    c000ac4c <tcp_close_shutdown+0x124>
c000ac2f:	90                   	nop
c000ac30:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac38:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac40:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac45:	85 c0                	test   eax,eax
c000ac47:	75 c7                	jne    c000ac10 <tcp_close_shutdown+0xe8>
c000ac49:	8d 76 00             	lea    esi,[esi+0x0]
c000ac4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac50:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac5b:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ac62:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ac68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac6c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac73:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ac78:	e8 53 5f 00 00       	call   c0010bd0 <tcp_timer_needed>
c000ac7d:	b0 00                	mov    al,0x0
c000ac7f:	e9 f4 01 00 00       	jmp    c000ae78 <tcp_close_shutdown+0x350>
c000ac84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac8b:	83 f8 07             	cmp    eax,0x7
c000ac8e:	0f 87 a4 01 00 00    	ja     c000ae38 <tcp_close_shutdown+0x310>
c000ac94:	8b 04 85 20 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfbe0]
c000ac9b:	ff e0                	jmp    eax
c000ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c000aca0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000acac:	0f b7 c0             	movzx  eax,ax
c000acaf:	85 c0                	test   eax,eax
c000acb1:	74 71                	je     c000ad24 <tcp_close_shutdown+0x1fc>
c000acb3:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acb8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000acbc:	75 12                	jne    c000acd0 <tcp_close_shutdown+0x1a8>
c000acbe:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acc6:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000accb:	eb 4b                	jmp    c000ad18 <tcp_close_shutdown+0x1f0>
c000accd:	8d 76 00             	lea    esi,[esi+0x0]
c000acd0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acd5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000acda:	eb 30                	jmp    c000ad0c <tcp_close_shutdown+0x1e4>
c000acdc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ace1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ace4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ace8:	75 12                	jne    c000acfc <tcp_close_shutdown+0x1d4>
c000acea:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000acf3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000acf6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000acf9:	eb 1d                	jmp    c000ad18 <tcp_close_shutdown+0x1f0>
c000acfb:	90                   	nop
c000acfc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad04:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad09:	8d 76 00             	lea    esi,[esi+0x0]
c000ad0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad11:	85 c0                	test   eax,eax
c000ad13:	75 c7                	jne    c000acdc <tcp_close_shutdown+0x1b4>
c000ad15:	8d 76 00             	lea    esi,[esi+0x0]
c000ad18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad1c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ad23:	90                   	nop
c000ad24:	83 ec 08             	sub    esp,0x8
c000ad27:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad2b:	6a 02                	push   0x2
c000ad2d:	e8 96 cd ff ff       	call   c0007ac8 <memp_free>
c000ad32:	83 c4 10             	add    esp,0x10
c000ad35:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3d:	e9 12 01 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad50:	68 78 68 03 c0       	push   0xc0036878
c000ad55:	e8 7e fc ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	83 ec 08             	sub    esp,0x8
c000ad60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad64:	6a 03                	push   0x3
c000ad66:	e8 5d cd ff ff       	call   c0007ac8 <memp_free>
c000ad6b:	83 c4 10             	add    esp,0x10
c000ad6e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad76:	e9 d9 00 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ad7b:	90                   	nop
c000ad7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad81:	83 ec 08             	sub    esp,0x8
c000ad84:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad88:	68 70 68 03 c0       	push   0xc0036870
c000ad8d:	e8 46 fc ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000ad92:	83 c4 10             	add    esp,0x10
c000ad95:	83 ec 08             	sub    esp,0x8
c000ad98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad9c:	6a 02                	push   0x2
c000ad9e:	e8 25 cd ff ff       	call   c0007ac8 <memp_free>
c000ada3:	83 c4 10             	add    esp,0x10
c000ada6:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000adae:	e9 a1 00 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000adb3:	90                   	nop
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adbb:	e8 b8 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adc7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adcc:	85 c0                	test   eax,eax
c000adce:	75 78                	jne    c000ae48 <tcp_close_shutdown+0x320>
c000add0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add4:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000addb:	eb 6b                	jmp    c000ae48 <tcp_close_shutdown+0x320>
c000addd:	8d 76 00             	lea    esi,[esi+0x0]
c000ade0:	83 ec 0c             	sub    esp,0xc
c000ade3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ade7:	e8 8c 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adf3:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adf8:	85 c0                	test   eax,eax
c000adfa:	75 50                	jne    c000ae4c <tcp_close_shutdown+0x324>
c000adfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae00:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ae07:	eb 43                	jmp    c000ae4c <tcp_close_shutdown+0x324>
c000ae09:	8d 76 00             	lea    esi,[esi+0x0]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae13:	e8 60 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000ae18:	83 c4 10             	add    esp,0x10
c000ae1b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ae1f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae24:	85 c0                	test   eax,eax
c000ae26:	75 28                	jne    c000ae50 <tcp_close_shutdown+0x328>
c000ae28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae2c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ae33:	eb 1b                	jmp    c000ae50 <tcp_close_shutdown+0x328>
c000ae35:	8d 76 00             	lea    esi,[esi+0x0]
c000ae38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae3d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae45:	eb 0d                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae47:	90                   	nop
c000ae48:	90                   	nop
c000ae49:	eb 09                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae4b:	90                   	nop
c000ae4c:	90                   	nop
c000ae4d:	eb 05                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae4f:	90                   	nop
c000ae50:	90                   	nop
c000ae51:	8d 76 00             	lea    esi,[esi+0x0]
c000ae54:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ae59:	74 19                	je     c000ae74 <tcp_close_shutdown+0x34c>
c000ae5b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae60:	85 c0                	test   eax,eax
c000ae62:	75 10                	jne    c000ae74 <tcp_close_shutdown+0x34c>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae6b:	e8 b8 50 00 00       	call   c000ff28 <tcp_output>
c000ae70:	83 c4 10             	add    esp,0x10
c000ae73:	90                   	nop
c000ae74:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ae78:	83 c4 20             	add    esp,0x20
c000ae7b:	5b                   	pop    ebx
c000ae7c:	5e                   	pop    esi
c000ae7d:	5f                   	pop    edi
c000ae7e:	c3                   	ret    
c000ae7f:	90                   	nop

c000ae80 <tcp_close>:
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae8a:	83 f8 01             	cmp    eax,0x1
c000ae8d:	74 15                	je     c000aea4 <tcp_close+0x24>
c000ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae93:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ae96:	83 c8 10             	or     eax,0x10
c000ae99:	88 c2                	mov    dl,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	83 ec 08             	sub    esp,0x8
c000aea7:	6a 01                	push   0x1
c000aea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aead:	e8 76 fc ff ff       	call   c000ab28 <tcp_close_shutdown>
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	83 c4 0c             	add    esp,0xc
c000aeb8:	c3                   	ret    
c000aeb9:	8d 76 00             	lea    esi,[esi+0x0]

c000aebc <tcp_recv_null>:
c000aebc:	83 ec 1c             	sub    esp,0x1c
c000aebf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000aec3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aec7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000aecc:	74 2e                	je     c000aefc <tcp_recv_null+0x40>
c000aece:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000aed2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aed5:	0f b7 c0             	movzx  eax,ax
c000aed8:	83 ec 08             	sub    esp,0x8
c000aedb:	50                   	push   eax
c000aedc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aee0:	e8 b3 ee ff ff       	call   c0009d98 <tcp_recved>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	83 ec 0c             	sub    esp,0xc
c000aeeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aeef:	e8 94 d4 ff ff       	call   c0008388 <pbuf_free>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	eb 1f                	jmp    c000af18 <tcp_recv_null+0x5c>
c000aef9:	8d 76 00             	lea    esi,[esi+0x0]
c000aefc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000af01:	85 c0                	test   eax,eax
c000af03:	75 13                	jne    c000af18 <tcp_recv_null+0x5c>
c000af05:	83 ec 0c             	sub    esp,0xc
c000af08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000af0c:	e8 6f ff ff ff       	call   c000ae80 <tcp_close>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	eb 06                	jmp    c000af1c <tcp_recv_null+0x60>
c000af16:	66 90                	xchg   ax,ax
c000af18:	b0 00                	mov    al,0x0
c000af1a:	66 90                	xchg   ax,ax
c000af1c:	83 c4 1c             	add    esp,0x1c
c000af1f:	c3                   	ret    

c000af20 <tcp_fasttmr>:
c000af20:	83 ec 1c             	sub    esp,0x1c
c000af23:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000af28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af2c:	e9 03 01 00 00       	jmp    c000b034 <tcp_fasttmr+0x114>
c000af31:	8d 76 00             	lea    esi,[esi+0x0]
c000af34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000af3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af43:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af49:	85 c0                	test   eax,eax
c000af4b:	0f 84 8f 00 00 00    	je     c000afe0 <tcp_fasttmr+0xc0>
c000af51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af55:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af5b:	85 c0                	test   eax,eax
c000af5d:	74 31                	je     c000af90 <tcp_fasttmr+0x70>
c000af5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af63:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af6d:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000af73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af77:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000af7a:	6a 00                	push   0x0
c000af7c:	51                   	push   ecx
c000af7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af81:	52                   	push   edx
c000af82:	ff d0                	call   eax
c000af84:	83 c4 10             	add    esp,0x10
c000af87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af8b:	eb 23                	jmp    c000afb0 <tcp_fasttmr+0x90>
c000af8d:	8d 76 00             	lea    esi,[esi+0x0]
c000af90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af94:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af9a:	6a 00                	push   0x0
c000af9c:	50                   	push   eax
c000af9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa1:	6a 00                	push   0x0
c000afa3:	e8 14 ff ff ff       	call   c000aebc <tcp_recv_null>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000afaf:	90                   	nop
c000afb0:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000afb5:	85 c0                	test   eax,eax
c000afb7:	75 13                	jne    c000afcc <tcp_fasttmr+0xac>
c000afb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afbd:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000afc7:	eb 17                	jmp    c000afe0 <tcp_fasttmr+0xc0>
c000afc9:	8d 76 00             	lea    esi,[esi+0x0]
c000afcc:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000afd1:	83 f8 f6             	cmp    eax,0xfffffff6
c000afd4:	75 0a                	jne    c000afe0 <tcp_fasttmr+0xc0>
c000afd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000afde:	66 90                	xchg   ax,ax
c000afe0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000afe5:	74 45                	je     c000b02c <tcp_fasttmr+0x10c>
c000afe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afeb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afee:	0f b6 c0             	movzx  eax,al
c000aff1:	83 e0 01             	and    eax,0x1
c000aff4:	74 36                	je     c000b02c <tcp_fasttmr+0x10c>
c000aff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000affa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000affd:	83 c8 02             	or     eax,0x2
c000b000:	88 c2                	mov    dl,al
c000b002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b006:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b010:	e8 13 4f 00 00       	call   c000ff28 <tcp_output>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b01c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b01f:	83 e0 fc             	and    eax,0xfffffffc
c000b022:	88 c2                	mov    dl,al
c000b024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b028:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b02b:	90                   	nop
c000b02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b030:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b039:	0f 85 f5 fe ff ff    	jne    c000af34 <tcp_fasttmr+0x14>
c000b03f:	90                   	nop
c000b040:	83 c4 1c             	add    esp,0x1c
c000b043:	c3                   	ret    

c000b044 <tcp_tmr>:
c000b044:	83 ec 0c             	sub    esp,0xc
c000b047:	e8 d4 fe ff ff       	call   c000af20 <tcp_fasttmr>
c000b04c:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b051:	83 c0 01             	add    eax,0x1
c000b054:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b059:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b05e:	0f b6 c0             	movzx  eax,al
c000b061:	83 e0 01             	and    eax,0x1
c000b064:	74 06                	je     c000b06c <tcp_tmr+0x28>
c000b066:	e8 f1 f1 ff ff       	call   c000a25c <tcp_slowtmr>
c000b06b:	90                   	nop
c000b06c:	90                   	nop
c000b06d:	83 c4 0c             	add    esp,0xc
c000b070:	c3                   	ret    
c000b071:	8d 76 00             	lea    esi,[esi+0x0]

c000b074 <tcp_shutdown>:
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b07e:	83 f8 01             	cmp    eax,0x1
c000b081:	75 09                	jne    c000b08c <tcp_shutdown+0x18>
c000b083:	b0 f3                	mov    al,0xf3
c000b085:	e9 92 00 00 00       	jmp    c000b11c <tcp_shutdown+0xa8>
c000b08a:	66 90                	xchg   ax,ax
c000b08c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b091:	74 49                	je     c000b0dc <tcp_shutdown+0x68>
c000b093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b097:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b09d:	85 c0                	test   eax,eax
c000b09f:	74 27                	je     c000b0c8 <tcp_shutdown+0x54>
c000b0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a5:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	50                   	push   eax
c000b0af:	e8 d4 d2 ff ff       	call   c0008388 <pbuf_free>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bb:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b0cf:	83 c8 10             	or     eax,0x10
c000b0d2:	88 c2                	mov    dl,al
c000b0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b0db:	90                   	nop
c000b0dc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0e1:	74 2d                	je     c000b110 <tcp_shutdown+0x9c>
c000b0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0ea:	83 f8 03             	cmp    eax,0x3
c000b0ed:	72 25                	jb     c000b114 <tcp_shutdown+0xa0>
c000b0ef:	83 f8 04             	cmp    eax,0x4
c000b0f2:	76 08                	jbe    c000b0fc <tcp_shutdown+0x88>
c000b0f4:	83 f8 07             	cmp    eax,0x7
c000b0f7:	75 1b                	jne    c000b114 <tcp_shutdown+0xa0>
c000b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b0fc:	83 ec 08             	sub    esp,0x8
c000b0ff:	6a 00                	push   0x0
c000b101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b105:	e8 1e fa ff ff       	call   c000ab28 <tcp_close_shutdown>
c000b10a:	83 c4 10             	add    esp,0x10
c000b10d:	eb 0d                	jmp    c000b11c <tcp_shutdown+0xa8>
c000b10f:	90                   	nop
c000b110:	90                   	nop
c000b111:	eb 05                	jmp    c000b118 <tcp_shutdown+0xa4>
c000b113:	90                   	nop
c000b114:	90                   	nop
c000b115:	8d 76 00             	lea    esi,[esi+0x0]
c000b118:	b0 00                	mov    al,0x0
c000b11a:	66 90                	xchg   ax,ax
c000b11c:	83 c4 0c             	add    esp,0xc
c000b11f:	c3                   	ret    

c000b120 <tcp_abandon>:
c000b120:	83 ec 2c             	sub    esp,0x2c
c000b123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b127:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b12a:	83 f8 01             	cmp    eax,0x1
c000b12d:	75 15                	jne    c000b144 <tcp_abandon+0x24>
c000b12f:	83 ec 08             	sub    esp,0x8
c000b132:	68 d0 02 03 c0       	push   0xc00302d0
c000b137:	68 66 fb 02 c0       	push   0xc002fb66
c000b13c:	e8 43 4a 01 00       	call   c001fb84 <CPrintf>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b14b:	83 f8 0a             	cmp    eax,0xa
c000b14e:	75 2c                	jne    c000b17c <tcp_abandon+0x5c>
c000b150:	83 ec 08             	sub    esp,0x8
c000b153:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b157:	68 84 68 03 c0       	push   0xc0036884
c000b15c:	e8 77 f8 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	83 ec 08             	sub    esp,0x8
c000b167:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b16b:	6a 02                	push   0x2
c000b16d:	e8 56 c9 ff ff       	call   c0007ac8 <memp_free>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	e9 32 01 00 00       	jmp    c000b2ac <tcp_abandon+0x18c>
c000b17a:	66 90                	xchg   ax,ax
c000b17c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b180:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b196:	8b 00                	mov    eax,DWORD PTR [eax]
c000b198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b19c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b1ae:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b1b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1b7:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b1bb:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b1ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1d2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b1d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1d9:	83 ec 08             	sub    esp,0x8
c000b1dc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1e0:	68 70 68 03 c0       	push   0xc0036870
c000b1e5:	e8 ee f7 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1f4:	85 c0                	test   eax,eax
c000b1f6:	74 14                	je     c000b20c <tcp_abandon+0xec>
c000b1f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1fc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1ff:	83 ec 0c             	sub    esp,0xc
c000b202:	50                   	push   eax
c000b203:	e8 50 ee ff ff       	call   c000a058 <tcp_segs_free>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	90                   	nop
c000b20c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b210:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b213:	85 c0                	test   eax,eax
c000b215:	74 15                	je     c000b22c <tcp_abandon+0x10c>
c000b217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b21b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b21e:	83 ec 0c             	sub    esp,0xc
c000b221:	50                   	push   eax
c000b222:	e8 31 ee ff ff       	call   c000a058 <tcp_segs_free>
c000b227:	83 c4 10             	add    esp,0x10
c000b22a:	66 90                	xchg   ax,ax
c000b22c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b230:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b236:	85 c0                	test   eax,eax
c000b238:	74 16                	je     c000b250 <tcp_abandon+0x130>
c000b23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b23e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	50                   	push   eax
c000b248:	e8 0b ee ff ff       	call   c000a058 <tcp_segs_free>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	83 ec 08             	sub    esp,0x8
c000b253:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b257:	6a 02                	push   0x2
c000b259:	e8 6a c8 ff ff       	call   c0007ac8 <memp_free>
c000b25e:	83 c4 10             	add    esp,0x10
c000b261:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b266:	74 14                	je     c000b27c <tcp_abandon+0x15c>
c000b268:	83 ec 08             	sub    esp,0x8
c000b26b:	6a f6                	push   0xfffffff6
c000b26d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b275:	ff d0                	call   eax
c000b277:	83 c4 10             	add    esp,0x10
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b281:	74 29                	je     c000b2ac <tcp_abandon+0x18c>
c000b283:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b288:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b28d:	83 ec 08             	sub    esp,0x8
c000b290:	52                   	push   edx
c000b291:	50                   	push   eax
c000b292:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b296:	50                   	push   eax
c000b297:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b29b:	50                   	push   eax
c000b29c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2a0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2a4:	e8 0b 51 00 00       	call   c00103b4 <tcp_rst>
c000b2a9:	83 c4 20             	add    esp,0x20
c000b2ac:	90                   	nop
c000b2ad:	83 c4 2c             	add    esp,0x2c
c000b2b0:	c3                   	ret    
c000b2b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b2b4 <tcp_abort>:
c000b2b4:	83 ec 0c             	sub    esp,0xc
c000b2b7:	83 ec 08             	sub    esp,0x8
c000b2ba:	6a 01                	push   0x1
c000b2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2c0:	e8 5b fe ff ff       	call   c000b120 <tcp_abandon>
c000b2c5:	83 c4 10             	add    esp,0x10
c000b2c8:	90                   	nop
c000b2c9:	83 c4 0c             	add    esp,0xc
c000b2cc:	c3                   	ret    
c000b2cd:	8d 76 00             	lea    esi,[esi+0x0]

c000b2d0 <tcp_kill_prio>:
c000b2d0:	83 ec 2c             	sub    esp,0x2c
c000b2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b2db:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b2e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2f0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b2f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2f9:	eb 75                	jmp    c000b370 <tcp_kill_prio+0xa0>
c000b2fb:	90                   	nop
c000b2fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b300:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b303:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b308:	0f b6 c0             	movzx  eax,al
c000b30b:	39 c2                	cmp    edx,eax
c000b30d:	72 55                	jb     c000b364 <tcp_kill_prio+0x94>
c000b30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b313:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b316:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b31b:	0f b6 c0             	movzx  eax,al
c000b31e:	39 c2                	cmp    edx,eax
c000b320:	72 42                	jb     c000b364 <tcp_kill_prio+0x94>
c000b322:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b32c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b32f:	29 c2                	sub    edx,eax
c000b331:	89 d0                	mov    eax,edx
c000b333:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b337:	77 2b                	ja     c000b364 <tcp_kill_prio+0x94>
c000b339:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b33f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b343:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b346:	29 c2                	sub    edx,eax
c000b348:	89 d0                	mov    eax,edx
c000b34a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b34e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b352:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b35a:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b35d:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b361:	8d 76 00             	lea    esi,[esi+0x0]
c000b364:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b368:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b36b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b36f:	90                   	nop
c000b370:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b375:	75 85                	jne    c000b2fc <tcp_kill_prio+0x2c>
c000b377:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b37c:	74 12                	je     c000b390 <tcp_kill_prio+0xc0>
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b385:	e8 2a ff ff ff       	call   c000b2b4 <tcp_abort>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	8d 76 00             	lea    esi,[esi+0x0]
c000b390:	90                   	nop
c000b391:	83 c4 2c             	add    esp,0x2c
c000b394:	c3                   	ret    
c000b395:	8d 76 00             	lea    esi,[esi+0x0]

c000b398 <tcp_kill_timewait>:
c000b398:	83 ec 1c             	sub    esp,0x1c
c000b39b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b3a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b3ab:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b3b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3b4:	eb 42                	jmp    c000b3f8 <tcp_kill_timewait+0x60>
c000b3b6:	66 90                	xchg   ax,ax
c000b3b8:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b3be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3c2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3c5:	29 c2                	sub    edx,eax
c000b3c7:	89 d0                	mov    eax,edx
c000b3c9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3cd:	77 1d                	ja     c000b3ec <tcp_kill_timewait+0x54>
c000b3cf:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b3d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3d9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3dc:	29 c2                	sub    edx,eax
c000b3de:	89 d0                	mov    eax,edx
c000b3e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3f7:	90                   	nop
c000b3f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b3fd:	75 b9                	jne    c000b3b8 <tcp_kill_timewait+0x20>
c000b3ff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b404:	74 12                	je     c000b418 <tcp_kill_timewait+0x80>
c000b406:	83 ec 0c             	sub    esp,0xc
c000b409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40d:	e8 a2 fe ff ff       	call   c000b2b4 <tcp_abort>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	8d 76 00             	lea    esi,[esi+0x0]
c000b418:	90                   	nop
c000b419:	83 c4 1c             	add    esp,0x1c
c000b41c:	c3                   	ret    
c000b41d:	8d 76 00             	lea    esi,[esi+0x0]

c000b420 <tcp_next_iss>:
c000b420:	8b 15 1c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c1c
c000b426:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b42b:	01 d0                	add    eax,edx
c000b42d:	a3 1c 3c 03 c0       	mov    ds:0xc0033c1c,eax
c000b432:	a1 1c 3c 03 c0       	mov    eax,ds:0xc0033c1c
c000b437:	c3                   	ret    

c000b438 <tcp_alloc>:
c000b438:	83 ec 2c             	sub    esp,0x2c
c000b43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b43f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	6a 02                	push   0x2
c000b448:	e8 4f c5 ff ff       	call   c000799c <memp_malloc>
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b454:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b459:	75 6d                	jne    c000b4c8 <tcp_alloc+0x90>
c000b45b:	e8 38 ff ff ff       	call   c000b398 <tcp_kill_timewait>
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	6a 02                	push   0x2
c000b465:	e8 32 c5 ff ff       	call   c000799c <memp_malloc>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b471:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b476:	75 38                	jne    c000b4b0 <tcp_alloc+0x78>
c000b478:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b47d:	83 ec 0c             	sub    esp,0xc
c000b480:	50                   	push   eax
c000b481:	e8 4a fe ff ff       	call   c000b2d0 <tcp_kill_prio>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	83 ec 0c             	sub    esp,0xc
c000b48c:	6a 02                	push   0x2
c000b48e:	e8 09 c5 ff ff       	call   c000799c <memp_malloc>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b49a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b49f:	74 0f                	je     c000b4b0 <tcp_alloc+0x78>
c000b4a1:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b4a7:	83 e8 01             	sub    eax,0x1
c000b4aa:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b4b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4b5:	74 11                	je     c000b4c8 <tcp_alloc+0x90>
c000b4b7:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b4bd:	83 e8 01             	sub    eax,0x1
c000b4c0:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b4c6:	66 90                	xchg   ax,ax
c000b4c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4cd:	0f 84 09 01 00 00    	je     c000b5dc <tcp_alloc+0x1a4>
c000b4d3:	83 ec 04             	sub    esp,0x4
c000b4d6:	68 a8 00 00 00       	push   0xa8
c000b4db:	6a 00                	push   0x0
c000b4dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b4e1:	e8 0a 50 ff ff       	call   c00004f0 <memset>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ed:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b4f1:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f8:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b520:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b524:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b528:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b52c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b530:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b536:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b540:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b544:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b54a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b54e:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b558:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b562:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b568:	e8 b3 fe ff ff       	call   c000b420 <tcp_next_iss>
c000b56d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b571:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b575:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b579:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b580:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b584:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b58f:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b596:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b59a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b59d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b5a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ae:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b5b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5b6:	c7 80 8c 00 00 00 bc ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000aebc
c000b5c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c4:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b5ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5d2:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5e0:	83 c4 2c             	add    esp,0x2c
c000b5e3:	c3                   	ret    

c000b5e4 <tcp_new>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	83 ec 0c             	sub    esp,0xc
c000b5ea:	6a 40                	push   0x40
c000b5ec:	e8 47 fe ff ff       	call   c000b438 <tcp_alloc>
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	83 c4 0c             	add    esp,0xc
c000b5f7:	c3                   	ret    

c000b5f8 <tcp_eff_send_mss>:
c000b5f8:	53                   	push   ebx
c000b5f9:	83 ec 28             	sub    esp,0x28
c000b5fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b600:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b60c:	e8 bf 80 00 00       	call   c00136d0 <ip_route>
c000b611:	83 c4 10             	add    esp,0x10
c000b614:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b618:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b61d:	74 3d                	je     c000b65c <tcp_eff_send_mss+0x64>
c000b61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b623:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b626:	0f b7 c0             	movzx  eax,ax
c000b629:	85 c0                	test   eax,eax
c000b62b:	74 2f                	je     c000b65c <tcp_eff_send_mss+0x64>
c000b62d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b631:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b634:	83 e8 28             	sub    eax,0x28
c000b637:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b63c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b640:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b645:	0f b7 d8             	movzx  ebx,ax
c000b648:	0f b7 ca             	movzx  ecx,dx
c000b64b:	39 cb                	cmp    ebx,ecx
c000b64d:	76 05                	jbe    c000b654 <tcp_eff_send_mss+0x5c>
c000b64f:	89 d0                	mov    eax,edx
c000b651:	8d 76 00             	lea    esi,[esi+0x0]
c000b654:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b659:	8d 76 00             	lea    esi,[esi+0x0]
c000b65c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b660:	83 c4 28             	add    esp,0x28
c000b663:	5b                   	pop    ebx
c000b664:	c3                   	ret    
c000b665:	8d 76 00             	lea    esi,[esi+0x0]

c000b668 <tcp_connect>:
c000b668:	83 ec 2c             	sub    esp,0x2c
c000b66b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b66f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b678:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b67b:	85 c0                	test   eax,eax
c000b67d:	74 1d                	je     c000b69c <tcp_connect+0x34>
c000b67f:	83 ec 08             	sub    esp,0x8
c000b682:	68 04 03 03 c0       	push   0xc0030304
c000b687:	68 66 fb 02 c0       	push   0xc002fb66
c000b68c:	e8 f3 44 01 00       	call   c001fb84 <CPrintf>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	b0 f7                	mov    al,0xf7
c000b696:	e9 41 02 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b69b:	90                   	nop
c000b69c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b6a1:	74 25                	je     c000b6c8 <tcp_connect+0x60>
c000b6a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b6ab:	8b 12                	mov    edx,DWORD PTR [edx]
c000b6ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b6b8:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b6bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c0:	85 c0                	test   eax,eax
c000b6c2:	74 18                	je     c000b6dc <tcp_connect+0x74>
c000b6c4:	eb 0a                	jmp    c000b6d0 <tcp_connect+0x68>
c000b6c6:	66 90                	xchg   ax,ax
c000b6c8:	b0 fa                	mov    al,0xfa
c000b6ca:	e9 0d 02 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b6cf:	90                   	nop
c000b6d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6d6:	85 c0                	test   eax,eax
c000b6d8:	75 3a                	jne    c000b714 <tcp_connect+0xac>
c000b6da:	66 90                	xchg   ax,ax
c000b6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e0:	83 c0 04             	add    eax,0x4
c000b6e3:	83 ec 0c             	sub    esp,0xc
c000b6e6:	50                   	push   eax
c000b6e7:	e8 e4 7f 00 00       	call   c00136d0 <ip_route>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6f3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b6f8:	75 0a                	jne    c000b704 <tcp_connect+0x9c>
c000b6fa:	b0 fc                	mov    al,0xfc
c000b6fc:	e9 db 01 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b701:	8d 76 00             	lea    esi,[esi+0x0]
c000b704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b708:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b70f:	89 10                	mov    DWORD PTR [eax],edx
c000b711:	8d 76 00             	lea    esi,[esi+0x0]
c000b714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b718:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b71b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b724:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b727:	0f b7 c0             	movzx  eax,ax
c000b72a:	85 c0                	test   eax,eax
c000b72c:	75 12                	jne    c000b740 <tcp_connect+0xd8>
c000b72e:	e8 21 e7 ff ff       	call   c0009e54 <tcp_new_port>
c000b733:	89 c2                	mov    edx,eax
c000b735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b739:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b73d:	8d 76 00             	lea    esi,[esi+0x0]
c000b740:	e8 db fc ff ff       	call   c000b420 <tcp_next_iss>
c000b745:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b74d:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b758:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b75c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b75f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b763:	8d 50 ff             	lea    edx,[eax-0x1]
c000b766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76a:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b76d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b771:	8d 50 ff             	lea    edx,[eax-0x1]
c000b774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b778:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b77b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b77f:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b789:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b78f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b793:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b79d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a1:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b7a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ab:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7b8:	0f b7 c0             	movzx  eax,ax
c000b7bb:	83 ec 08             	sub    esp,0x8
c000b7be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7c2:	50                   	push   eax
c000b7c3:	e8 30 fe ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	89 c2                	mov    edx,eax
c000b7cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d1:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b7d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d9:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b7df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7e6:	89 c2                	mov    edx,eax
c000b7e8:	c1 e2 02             	shl    edx,0x2
c000b7eb:	01 d0                	add    eax,edx
c000b7ed:	d1 e0                	shl    eax,1
c000b7ef:	89 c2                	mov    edx,eax
c000b7f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7f5:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7fd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b801:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b807:	83 ec 08             	sub    esp,0x8
c000b80a:	6a 02                	push   0x2
c000b80c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b810:	e8 73 40 00 00       	call   c000f888 <tcp_enqueue_flags>
c000b815:	83 c4 10             	add    esp,0x10
c000b818:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b81c:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 85 af 00 00 00    	jne    c000b8d8 <tcp_connect+0x270>
c000b829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b82d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b834:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b839:	85 c0                	test   eax,eax
c000b83b:	74 6f                	je     c000b8ac <tcp_connect+0x244>
c000b83d:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b842:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b846:	75 10                	jne    c000b858 <tcp_connect+0x1f0>
c000b848:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b84d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b850:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b855:	eb 49                	jmp    c000b8a0 <tcp_connect+0x238>
c000b857:	90                   	nop
c000b858:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b85d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b862:	eb 30                	jmp    c000b894 <tcp_connect+0x22c>
c000b864:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b86c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b870:	75 12                	jne    c000b884 <tcp_connect+0x21c>
c000b872:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b87b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b87e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b881:	eb 1d                	jmp    c000b8a0 <tcp_connect+0x238>
c000b883:	90                   	nop
c000b884:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b889:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b88c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b891:	8d 76 00             	lea    esi,[esi+0x0]
c000b894:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b899:	85 c0                	test   eax,eax
c000b89b:	75 c7                	jne    c000b864 <tcp_connect+0x1fc>
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b8ab:	90                   	nop
c000b8ac:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b8b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8bd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b8c2:	e8 09 53 00 00       	call   c0010bd0 <tcp_timer_needed>
c000b8c7:	83 ec 0c             	sub    esp,0xc
c000b8ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b8ce:	e8 55 46 00 00       	call   c000ff28 <tcp_output>
c000b8d3:	83 c4 10             	add    esp,0x10
c000b8d6:	66 90                	xchg   ax,ax
c000b8d8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b8dc:	83 c4 2c             	add    esp,0x2c
c000b8df:	c3                   	ret    

c000b8e0 <tcp_debug_state_str>:
c000b8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e4:	8b 04 85 80 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb80]
c000b8eb:	c3                   	ret    

c000b8ec <tcp_timewait_input>:
c000b8ec:	53                   	push   ebx
c000b8ed:	83 ec 08             	sub    esp,0x8
c000b8f0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8f5:	0f b6 c0             	movzx  eax,al
c000b8f8:	83 e0 04             	and    eax,0x4
c000b8fb:	74 07                	je     c000b904 <tcp_timewait_input+0x18>
c000b8fd:	b0 00                	mov    al,0x0
c000b8ff:	e9 e8 00 00 00       	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b904:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b909:	0f b6 c0             	movzx  eax,al
c000b90c:	83 e0 02             	and    eax,0x2
c000b90f:	0f 84 83 00 00 00    	je     c000b998 <tcp_timewait_input+0xac>
c000b915:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b922:	29 c2                	sub    edx,eax
c000b924:	89 d0                	mov    eax,edx
c000b926:	0f 88 88 00 00 00    	js     c000b9b4 <tcp_timewait_input+0xc8>
c000b92c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b936:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b93d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b940:	0f b7 c0             	movzx  eax,ax
c000b943:	01 c8                	add    eax,ecx
c000b945:	29 c2                	sub    edx,eax
c000b947:	89 d0                	mov    eax,edx
c000b949:	85 c0                	test   eax,eax
c000b94b:	7f 67                	jg     c000b9b4 <tcp_timewait_input+0xc8>
c000b94d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b952:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b955:	0f b7 c8             	movzx  ecx,ax
c000b958:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b95d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b961:	0f b7 d0             	movzx  edx,ax
c000b964:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b96a:	0f b7 d8             	movzx  ebx,ax
c000b96d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b972:	01 c3                	add    ebx,eax
c000b974:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b979:	83 ec 08             	sub    esp,0x8
c000b97c:	51                   	push   ecx
c000b97d:	52                   	push   edx
c000b97e:	68 90 68 03 c0       	push   0xc0036890
c000b983:	68 98 68 03 c0       	push   0xc0036898
c000b988:	53                   	push   ebx
c000b989:	50                   	push   eax
c000b98a:	e8 25 4a 00 00       	call   c00103b4 <tcp_rst>
c000b98f:	83 c4 20             	add    esp,0x20
c000b992:	b0 00                	mov    al,0x0
c000b994:	eb 56                	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b996:	66 90                	xchg   ax,ax
c000b998:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b99d:	0f b6 c0             	movzx  eax,al
c000b9a0:	83 e0 01             	and    eax,0x1
c000b9a3:	74 0f                	je     c000b9b4 <tcp_timewait_input+0xc8>
c000b9a5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b9b2:	66 90                	xchg   ax,ax
c000b9b4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b9ba:	0f b7 c0             	movzx  eax,ax
c000b9bd:	85 c0                	test   eax,eax
c000b9bf:	74 27                	je     c000b9e8 <tcp_timewait_input+0xfc>
c000b9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b9c8:	83 c8 02             	or     eax,0x2
c000b9cb:	88 c2                	mov    dl,al
c000b9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b9d4:	83 ec 0c             	sub    esp,0xc
c000b9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9db:	e8 48 45 00 00       	call   c000ff28 <tcp_output>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	eb 07                	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9e8:	b0 00                	mov    al,0x0
c000b9ea:	66 90                	xchg   ax,ax
c000b9ec:	83 c4 08             	add    esp,0x8
c000b9ef:	5b                   	pop    ebx
c000b9f0:	c3                   	ret    
c000b9f1:	8d 76 00             	lea    esi,[esi+0x0]

c000b9f4 <tcp_oos_insert_segment>:
c000b9f4:	53                   	push   ebx
c000b9f5:	83 ec 18             	sub    esp,0x18
c000b9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9ff:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba03:	0f b7 c0             	movzx  eax,ax
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	50                   	push   eax
c000ba0a:	e8 0d 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	0f b7 c0             	movzx  eax,ax
c000ba15:	83 e0 01             	and    eax,0x1
c000ba18:	0f 84 8e 00 00 00    	je     c000baac <tcp_oos_insert_segment+0xb8>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ba25:	e8 2e e6 ff ff       	call   c000a058 <tcp_segs_free>
c000ba2a:	83 c4 10             	add    esp,0x10
c000ba2d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000ba35:	e9 1a 01 00 00       	jmp    c000bb54 <tcp_oos_insert_segment+0x160>
c000ba3a:	66 90                	xchg   ax,ax
c000ba3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba47:	0f b7 c0             	movzx  eax,ax
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	50                   	push   eax
c000ba4e:	e8 c9 51 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	0f b7 c0             	movzx  eax,ax
c000ba59:	83 e0 01             	and    eax,0x1
c000ba5c:	74 2a                	je     c000ba88 <tcp_oos_insert_segment+0x94>
c000ba5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba65:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ba69:	83 ec 0c             	sub    esp,0xc
c000ba6c:	6a 01                	push   0x1
c000ba6e:	e8 a9 51 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	89 c2                	mov    edx,eax
c000ba78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba7f:	09 da                	or     edx,ebx
c000ba81:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ba85:	8d 76 00             	lea    esi,[esi+0x0]
c000ba88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba94:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba9a:	83 ec 0c             	sub    esp,0xc
c000ba9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baa1:	e8 6e e5 ff ff       	call   c000a014 <tcp_seg_free>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8d 76 00             	lea    esi,[esi+0x0]
c000baac:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bab1:	74 35                	je     c000bae8 <tcp_oos_insert_segment+0xf4>
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baba:	0f b7 d0             	movzx  edx,ax
c000babd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bac2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bac5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bac9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bacc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bacf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bad6:	0f b7 c0             	movzx  eax,ax
c000bad9:	01 d0                	add    eax,edx
c000badb:	29 c1                	sub    ecx,eax
c000badd:	89 c8                	mov    eax,ecx
c000badf:	0f 89 57 ff ff ff    	jns    c000ba3c <tcp_oos_insert_segment+0x48>
c000bae5:	8d 76 00             	lea    esi,[esi+0x0]
c000bae8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000baed:	74 65                	je     c000bb54 <tcp_oos_insert_segment+0x160>
c000baef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf6:	0f b7 d0             	movzx  edx,ax
c000baf9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bafe:	01 c2                	add    edx,eax
c000bb00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb0a:	29 c2                	sub    edx,eax
c000bb0c:	89 d0                	mov    eax,edx
c000bb0e:	85 c0                	test   eax,eax
c000bb10:	7e 42                	jle    c000bb54 <tcp_oos_insert_segment+0x160>
c000bb12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb1c:	89 c2                	mov    edx,eax
c000bb1e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb23:	89 d3                	mov    ebx,edx
c000bb25:	29 c3                	sub    ebx,eax
c000bb27:	89 d8                	mov    eax,ebx
c000bb29:	89 c2                	mov    edx,eax
c000bb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb3a:	0f b7 d0             	movzx  edx,ax
c000bb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb44:	83 ec 08             	sub    esp,0x8
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	e8 0e ce ff ff       	call   c000895c <pbuf_realloc>
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	8d 76 00             	lea    esi,[esi+0x0]
c000bb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb5c:	89 10                	mov    DWORD PTR [eax],edx
c000bb5e:	90                   	nop
c000bb5f:	83 c4 18             	add    esp,0x18
c000bb62:	5b                   	pop    ebx
c000bb63:	c3                   	ret    

c000bb64 <tcp_receive>:
c000bb64:	57                   	push   edi
c000bb65:	56                   	push   esi
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 30             	sub    esp,0x30
c000bb6a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb72:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb77:	0f b6 c0             	movzx  eax,al
c000bb7a:	83 e0 10             	and    eax,0x10
c000bb7d:	0f 84 f5 07 00 00    	je     c000c378 <tcp_receive+0x814>
c000bb83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb87:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb8a:	0f b7 d0             	movzx  edx,ax
c000bb8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb91:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bb94:	01 d0                	add    eax,edx
c000bb96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb9e:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bba1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bba6:	29 c2                	sub    edx,eax
c000bba8:	89 d0                	mov    eax,edx
c000bbaa:	78 50                	js     c000bbfc <tcp_receive+0x98>
c000bbac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb0:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bbb3:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bbb8:	39 c2                	cmp    edx,eax
c000bbba:	75 14                	jne    c000bbd0 <tcp_receive+0x6c>
c000bbbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbc0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbc3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbc8:	29 c2                	sub    edx,eax
c000bbca:	89 d0                	mov    eax,edx
c000bbcc:	78 2e                	js     c000bbfc <tcp_receive+0x98>
c000bbce:	66 90                	xchg   ax,ax
c000bbd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd4:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbd7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbdc:	39 c2                	cmp    edx,eax
c000bbde:	75 74                	jne    c000bc54 <tcp_receive+0xf0>
c000bbe0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bbe5:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bbe9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbed:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbf0:	0f b7 d2             	movzx  edx,dx
c000bbf3:	0f b7 c0             	movzx  eax,ax
c000bbf6:	39 c2                	cmp    edx,eax
c000bbf8:	76 5a                	jbe    c000bc54 <tcp_receive+0xf0>
c000bbfa:	66 90                	xchg   ax,ax
c000bbfc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bc01:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bc05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc09:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bc0d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bc13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc17:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bc1a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc24:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bc27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	85 c0                	test   eax,eax
c000bc33:	74 1f                	je     c000bc54 <tcp_receive+0xf0>
c000bc35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc39:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bc3f:	0f b6 c0             	movzx  eax,al
c000bc42:	85 c0                	test   eax,eax
c000bc44:	74 0e                	je     c000bc54 <tcp_receive+0xf0>
c000bc46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4a:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bc51:	8d 76 00             	lea    esi,[esi+0x0]
c000bc54:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc5e:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc61:	29 c2                	sub    edx,eax
c000bc63:	89 d0                	mov    eax,edx
c000bc65:	85 c0                	test   eax,eax
c000bc67:	0f 8f 03 01 00 00    	jg     c000bd70 <tcp_receive+0x20c>
c000bc6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc71:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bc77:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bc7d:	0f b7 c0             	movzx  eax,ax
c000bc80:	85 c0                	test   eax,eax
c000bc82:	0f 85 d0 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bc88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc8c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bc8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc93:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc96:	0f b7 c0             	movzx  eax,ax
c000bc99:	01 d0                	add    eax,edx
c000bc9b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bc9f:	0f 85 b3 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bca5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca9:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bcad:	98                   	cwde   
c000bcae:	85 c0                	test   eax,eax
c000bcb0:	0f 88 a2 00 00 00    	js     c000bd58 <tcp_receive+0x1f4>
c000bcb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcba:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bcbd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bcc2:	39 c2                	cmp    edx,eax
c000bcc4:	0f 85 8e 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bcca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bcd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd6:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcd9:	83 c0 01             	add    eax,0x1
c000bcdc:	88 c2                	mov    dl,al
c000bcde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce2:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bce5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce9:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcec:	0f b6 c0             	movzx  eax,al
c000bcef:	83 f8 03             	cmp    eax,0x3
c000bcf2:	76 44                	jbe    c000bd38 <tcp_receive+0x1d4>
c000bcf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf8:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd03:	01 d0                	add    eax,edx
c000bd05:	89 c2                	mov    edx,eax
c000bd07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd0f:	0f b7 d2             	movzx  edx,dx
c000bd12:	0f b7 c0             	movzx  eax,ax
c000bd15:	39 c2                	cmp    edx,eax
c000bd17:	76 3f                	jbe    c000bd58 <tcp_receive+0x1f4>
c000bd19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd28:	01 d0                	add    eax,edx
c000bd2a:	89 c2                	mov    edx,eax
c000bd2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd30:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bd34:	eb 22                	jmp    c000bd58 <tcp_receive+0x1f4>
c000bd36:	66 90                	xchg   ax,ax
c000bd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bd3f:	0f b6 c0             	movzx  eax,al
c000bd42:	83 f8 03             	cmp    eax,0x3
c000bd45:	75 11                	jne    c000bd58 <tcp_receive+0x1f4>
c000bd47:	83 ec 0c             	sub    esp,0xc
c000bd4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd4e:	e8 35 49 00 00       	call   c0010688 <tcp_rexmit_fast>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	66 90                	xchg   ax,ax
c000bd58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bd5d:	0f 85 a1 04 00 00    	jne    c000c204 <tcp_receive+0x6a0>
c000bd63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd67:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd6b:	e9 94 04 00 00       	jmp    c000c204 <tcp_receive+0x6a0>
c000bd70:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd7d:	29 c2                	sub    edx,eax
c000bd7f:	89 d0                	mov    eax,edx
c000bd81:	83 e8 01             	sub    eax,0x1
c000bd84:	0f 88 52 03 00 00    	js     c000c0dc <tcp_receive+0x578>
c000bd8a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd94:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bd97:	29 c2                	sub    edx,eax
c000bd99:	89 d0                	mov    eax,edx
c000bd9b:	85 c0                	test   eax,eax
c000bd9d:	0f 8f 39 03 00 00    	jg     c000c0dc <tcp_receive+0x578>
c000bda3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bdaa:	0f b6 c0             	movzx  eax,al
c000bdad:	83 e0 04             	and    eax,0x4
c000bdb0:	74 22                	je     c000bdd4 <tcp_receive+0x270>
c000bdb2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bdb9:	83 e0 fb             	and    eax,0xfffffffb
c000bdbc:	88 c2                	mov    dl,al
c000bdbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc2:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bdc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc9:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bdcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bdd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd8:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bde3:	98                   	cwde   
c000bde4:	c1 f8 03             	sar    eax,0x3
c000bde7:	89 c2                	mov    edx,eax
c000bde9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bded:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bdf1:	01 d0                	add    eax,edx
c000bdf3:	89 c2                	mov    edx,eax
c000bdf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf9:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bdfd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be02:	89 c2                	mov    edx,eax
c000be04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be08:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000be0b:	89 d7                	mov    edi,edx
c000be0d:	29 c7                	sub    edi,eax
c000be0f:	89 f8                	mov    eax,edi
c000be11:	89 c2                	mov    edx,eax
c000be13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be17:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000be1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1f:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000be23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be27:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be2a:	01 d0                	add    eax,edx
c000be2c:	89 c2                	mov    edx,eax
c000be2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be32:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000be36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3a:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000be3e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000be44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be48:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000be4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000be52:	83 f8 03             	cmp    eax,0x3
c000be55:	0f 86 dd 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be67:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000be6a:	0f b7 d2             	movzx  edx,dx
c000be6d:	0f b7 c0             	movzx  eax,ax
c000be70:	39 c2                	cmp    edx,eax
c000be72:	73 4c                	jae    c000bec0 <tcp_receive+0x35c>
c000be74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be78:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be83:	01 d0                	add    eax,edx
c000be85:	89 c2                	mov    edx,eax
c000be87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be8f:	0f b7 d2             	movzx  edx,dx
c000be92:	0f b7 c0             	movzx  eax,ax
c000be95:	39 c2                	cmp    edx,eax
c000be97:	0f 86 9b 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000be9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea1:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000beac:	01 d0                	add    eax,edx
c000beae:	89 c2                	mov    edx,eax
c000beb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb4:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000beb8:	e9 7b 01 00 00       	jmp    c000c038 <tcp_receive+0x4d4>
c000bebd:	8d 76 00             	lea    esi,[esi+0x0]
c000bec0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec4:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bec8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000becc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000becf:	0f b7 d0             	movzx  edx,ax
c000bed2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bed9:	0f b7 c0             	movzx  eax,ax
c000bedc:	0f af c2             	imul   eax,edx
c000bedf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bee3:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000bee7:	0f b7 f2             	movzx  esi,dx
c000beea:	89 c2                	mov    edx,eax
c000beec:	c1 fa 1f             	sar    edx,0x1f
c000beef:	f7 fe                	idiv   esi
c000bef1:	01 c8                	add    eax,ecx
c000bef3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000befc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bf00:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000bf05:	0f b7 c0             	movzx  eax,ax
c000bf08:	39 c2                	cmp    edx,eax
c000bf0a:	0f 86 28 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000bf10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf14:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000bf19:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bf1d:	e9 16 01 00 00       	jmp    c000c038 <tcp_receive+0x4d4>
c000bf22:	66 90                	xchg   ax,ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bf2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf33:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf36:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3c:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000bf3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf43:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bf46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	50                   	push   eax
c000bf51:	e8 0e cc ff ff       	call   c0008b64 <pbuf_clen>
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	0f b6 c0             	movzx  eax,al
c000bf5c:	0f b7 d3             	movzx  edx,bx
c000bf5f:	0f b7 c0             	movzx  eax,ax
c000bf62:	39 c2                	cmp    edx,eax
c000bf64:	73 16                	jae    c000bf7c <tcp_receive+0x418>
c000bf66:	83 ec 08             	sub    esp,0x8
c000bf69:	68 ac 04 03 c0       	push   0xc00304ac
c000bf6e:	68 66 fb 02 c0       	push   0xc002fb66
c000bf73:	e8 0c 3c 01 00       	call   c001fb84 <CPrintf>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	90                   	nop
c000bf7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf80:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf83:	0f b7 c0             	movzx  eax,ax
c000bf86:	85 c0                	test   eax,eax
c000bf88:	74 36                	je     c000bfc0 <tcp_receive+0x45c>
c000bf8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf91:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf95:	0f b7 c0             	movzx  eax,ax
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	50                   	push   eax
c000bf9c:	e8 7b 4c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bfa1:	83 c4 10             	add    esp,0x10
c000bfa4:	0f b7 c0             	movzx  eax,ax
c000bfa7:	83 e0 01             	and    eax,0x1
c000bfaa:	74 14                	je     c000bfc0 <tcp_receive+0x45c>
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bfb3:	83 e8 01             	sub    eax,0x1
c000bfb6:	89 c2                	mov    edx,eax
c000bfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbc:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bfc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	50                   	push   eax
c000bfcb:	e8 94 cb ff ff       	call   c0008b64 <pbuf_clen>
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	88 c1                	mov    cl,al
c000bfd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd9:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bfdc:	0f b6 c1             	movzx  eax,cl
c000bfdf:	89 d7                	mov    edi,edx
c000bfe1:	29 c7                	sub    edi,eax
c000bfe3:	89 f8                	mov    eax,edi
c000bfe5:	89 c2                	mov    edx,eax
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bff6:	e8 19 e0 ff ff       	call   c000a014 <tcp_seg_free>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c002:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c005:	0f b7 c0             	movzx  eax,ax
c000c008:	85 c0                	test   eax,eax
c000c00a:	74 2c                	je     c000c038 <tcp_receive+0x4d4>
c000c00c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c010:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c013:	85 c0                	test   eax,eax
c000c015:	75 21                	jne    c000c038 <tcp_receive+0x4d4>
c000c017:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c01e:	85 c0                	test   eax,eax
c000c020:	75 16                	jne    c000c038 <tcp_receive+0x4d4>
c000c022:	83 ec 08             	sub    esp,0x8
c000c025:	68 d4 04 03 c0       	push   0xc00304d4
c000c02a:	68 66 fb 02 c0       	push   0xc002fb66
c000c02f:	e8 50 3b 01 00       	call   c001fb84 <CPrintf>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	90                   	nop
c000c038:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c03c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c03f:	85 c0                	test   eax,eax
c000c041:	74 69                	je     c000c0ac <tcp_receive+0x548>
c000c043:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c047:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c04a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c04d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c050:	83 ec 0c             	sub    esp,0xc
c000c053:	50                   	push   eax
c000c054:	e8 e7 4b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	89 c3                	mov    ebx,eax
c000c05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c062:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c065:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c068:	0f b7 f0             	movzx  esi,ax
c000c06b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c06f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c072:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c075:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c079:	0f b7 c0             	movzx  eax,ax
c000c07c:	83 ec 0c             	sub    esp,0xc
c000c07f:	50                   	push   eax
c000c080:	e8 97 4b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	0f b7 c0             	movzx  eax,ax
c000c08b:	83 e0 03             	and    eax,0x3
c000c08e:	0f 95 c0             	setne  al
c000c091:	0f b6 c0             	movzx  eax,al
c000c094:	01 f0                	add    eax,esi
c000c096:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c099:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c09e:	29 c2                	sub    edx,eax
c000c0a0:	89 d0                	mov    eax,edx
c000c0a2:	85 c0                	test   eax,eax
c000c0a4:	0f 8e 7a fe ff ff    	jle    c000bf24 <tcp_receive+0x3c0>
c000c0aa:	66 90                	xchg   ax,ax
c000c0ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0b3:	85 c0                	test   eax,eax
c000c0b5:	75 0d                	jne    c000c0c4 <tcp_receive+0x560>
c000c0b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bb:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c0c1:	eb 0d                	jmp    c000c0d0 <tcp_receive+0x56c>
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d4:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c0d8:	eb 0e                	jmp    c000c0e8 <tcp_receive+0x584>
c000c0da:	66 90                	xchg   ax,ax
c000c0dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e0:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c0e6:	66 90                	xchg   ax,ax
c000c0e8:	e9 17 01 00 00       	jmp    c000c204 <tcp_receive+0x6a0>
c000c0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c0f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0ff:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c102:	8b 10                	mov    edx,DWORD PTR [eax]
c000c104:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c108:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c10b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10f:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	50                   	push   eax
c000c11d:	e8 42 ca ff ff       	call   c0008b64 <pbuf_clen>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	0f b6 c0             	movzx  eax,al
c000c128:	0f b7 d3             	movzx  edx,bx
c000c12b:	0f b7 c0             	movzx  eax,ax
c000c12e:	39 c2                	cmp    edx,eax
c000c130:	73 16                	jae    c000c148 <tcp_receive+0x5e4>
c000c132:	83 ec 08             	sub    esp,0x8
c000c135:	68 ac 04 03 c0       	push   0xc00304ac
c000c13a:	68 66 fb 02 c0       	push   0xc002fb66
c000c13f:	e8 40 3a 01 00       	call   c001fb84 <CPrintf>
c000c144:	83 c4 10             	add    esp,0x10
c000c147:	90                   	nop
c000c148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c14c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c14f:	0f b7 c0             	movzx  eax,ax
c000c152:	85 c0                	test   eax,eax
c000c154:	74 36                	je     c000c18c <tcp_receive+0x628>
c000c156:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c15a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c15d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c161:	0f b7 c0             	movzx  eax,ax
c000c164:	83 ec 0c             	sub    esp,0xc
c000c167:	50                   	push   eax
c000c168:	e8 af 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	0f b7 c0             	movzx  eax,ax
c000c173:	83 e0 01             	and    eax,0x1
c000c176:	74 14                	je     c000c18c <tcp_receive+0x628>
c000c178:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c17f:	83 e8 01             	sub    eax,0x1
c000c182:	89 c2                	mov    edx,eax
c000c184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c188:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c18c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c193:	83 ec 0c             	sub    esp,0xc
c000c196:	50                   	push   eax
c000c197:	e8 c8 c9 ff ff       	call   c0008b64 <pbuf_clen>
c000c19c:	83 c4 10             	add    esp,0x10
c000c19f:	88 c1                	mov    cl,al
c000c1a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a5:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c1a8:	0f b6 c1             	movzx  eax,cl
c000c1ab:	89 d6                	mov    esi,edx
c000c1ad:	29 c6                	sub    esi,eax
c000c1af:	89 f0                	mov    eax,esi
c000c1b1:	89 c2                	mov    edx,eax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c1bb:	83 ec 0c             	sub    esp,0xc
c000c1be:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c1c2:	e8 4d de ff ff       	call   c000a014 <tcp_seg_free>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ce:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c1d1:	0f b7 c0             	movzx  eax,ax
c000c1d4:	85 c0                	test   eax,eax
c000c1d6:	74 2c                	je     c000c204 <tcp_receive+0x6a0>
c000c1d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1dc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1df:	85 c0                	test   eax,eax
c000c1e1:	75 21                	jne    c000c204 <tcp_receive+0x6a0>
c000c1e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	75 16                	jne    c000c204 <tcp_receive+0x6a0>
c000c1ee:	83 ec 08             	sub    esp,0x8
c000c1f1:	68 d4 04 03 c0       	push   0xc00304d4
c000c1f6:	68 66 fb 02 c0       	push   0xc002fb66
c000c1fb:	e8 84 39 01 00       	call   c001fb84 <CPrintf>
c000c200:	83 c4 10             	add    esp,0x10
c000c203:	90                   	nop
c000c204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c208:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c20b:	85 c0                	test   eax,eax
c000c20d:	74 7d                	je     c000c28c <tcp_receive+0x728>
c000c20f:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c215:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c219:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c21c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c21f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c222:	83 ec 0c             	sub    esp,0xc
c000c225:	50                   	push   eax
c000c226:	e8 15 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 c6                	mov    esi,eax
c000c230:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c234:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c23a:	0f b7 f8             	movzx  edi,ax
c000c23d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c241:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c244:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c247:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c24b:	0f b7 c0             	movzx  eax,ax
c000c24e:	83 ec 0c             	sub    esp,0xc
c000c251:	50                   	push   eax
c000c252:	e8 c5 49 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	0f b7 c0             	movzx  eax,ax
c000c25d:	83 e0 03             	and    eax,0x3
c000c260:	0f 95 c0             	setne  al
c000c263:	0f b6 c0             	movzx  eax,al
c000c266:	01 f8                	add    eax,edi
c000c268:	01 f0                	add    eax,esi
c000c26a:	29 c3                	sub    ebx,eax
c000c26c:	89 d8                	mov    eax,ebx
c000c26e:	78 1c                	js     c000c28c <tcp_receive+0x728>
c000c270:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c276:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c27a:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c27d:	29 c2                	sub    edx,eax
c000c27f:	89 d0                	mov    eax,edx
c000c281:	85 c0                	test   eax,eax
c000c283:	0f 8e 67 fe ff ff    	jle    c000c0f0 <tcp_receive+0x58c>
c000c289:	8d 76 00             	lea    esi,[esi+0x0]
c000c28c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c293:	85 c0                	test   eax,eax
c000c295:	0f 84 dd 00 00 00    	je     c000c378 <tcp_receive+0x814>
c000c29b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29f:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c2a2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c2a7:	29 c2                	sub    edx,eax
c000c2a9:	89 d0                	mov    eax,edx
c000c2ab:	0f 89 c7 00 00 00    	jns    c000c378 <tcp_receive+0x814>
c000c2b1:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c2b6:	89 c2                	mov    edx,eax
c000c2b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c2bf:	89 d7                	mov    edi,edx
c000c2c1:	29 c7                	sub    edi,eax
c000c2c3:	89 f8                	mov    eax,edi
c000c2c5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2ca:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c2cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d3:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c2d6:	98                   	cwde   
c000c2d7:	c1 f8 03             	sar    eax,0x3
c000c2da:	89 d6                	mov    esi,edx
c000c2dc:	29 c6                	sub    esi,eax
c000c2de:	89 f0                	mov    eax,esi
c000c2e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2e9:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c2ec:	89 c2                	mov    edx,eax
c000c2ee:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2f3:	01 d0                	add    eax,edx
c000c2f5:	89 c2                	mov    edx,eax
c000c2f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2fb:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c2ff:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c304:	85 c0                	test   eax,eax
c000c306:	79 0c                	jns    c000c314 <tcp_receive+0x7b0>
c000c308:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c30d:	f7 d8                	neg    eax
c000c30f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c314:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c31d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c321:	98                   	cwde   
c000c322:	c1 f8 02             	sar    eax,0x2
c000c325:	89 d7                	mov    edi,edx
c000c327:	29 c7                	sub    edi,eax
c000c329:	89 f8                	mov    eax,edi
c000c32b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c330:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c334:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c338:	89 c2                	mov    edx,eax
c000c33a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c33f:	01 d0                	add    eax,edx
c000c341:	89 c2                	mov    edx,eax
c000c343:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c347:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c34b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c34f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c352:	98                   	cwde   
c000c353:	c1 f8 03             	sar    eax,0x3
c000c356:	89 c2                	mov    edx,eax
c000c358:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c35c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c360:	01 d0                	add    eax,edx
c000c362:	89 c2                	mov    edx,eax
c000c364:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c368:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c36c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c370:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c377:	90                   	nop
c000c378:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c37e:	0f b7 c0             	movzx  eax,ax
c000c381:	85 c0                	test   eax,eax
c000c383:	0f 84 43 0e 00 00    	je     c000d1cc <tcp_receive+0x1668>
c000c389:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c38d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c390:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c395:	29 c2                	sub    edx,eax
c000c397:	89 d0                	mov    eax,edx
c000c399:	83 e8 01             	sub    eax,0x1
c000c39c:	0f 88 c6 01 00 00    	js     c000c568 <tcp_receive+0xa04>
c000c3a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c3a9:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c3b0:	0f b7 ca             	movzx  ecx,dx
c000c3b3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c3b9:	01 ca                	add    edx,ecx
c000c3bb:	29 d0                	sub    eax,edx
c000c3bd:	83 c0 01             	add    eax,0x1
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f a0 01 00 00    	jg     c000c568 <tcp_receive+0xa04>
c000c3c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3cc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c3cf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c3d4:	29 c2                	sub    edx,eax
c000c3d6:	89 d0                	mov    eax,edx
c000c3d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3dc:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3e5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3ea:	85 c0                	test   eax,eax
c000c3ec:	75 16                	jne    c000c404 <tcp_receive+0x8a0>
c000c3ee:	83 ec 08             	sub    esp,0x8
c000c3f1:	68 d1 06 03 c0       	push   0xc00306d1
c000c3f6:	68 66 fb 02 c0       	push   0xc002fb66
c000c3fb:	e8 84 37 01 00       	call   c001fb84 <CPrintf>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	90                   	nop
c000c404:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c40c:	7e 16                	jle    c000c424 <tcp_receive+0x8c0>
c000c40e:	83 ec 08             	sub    esp,0x8
c000c411:	68 e1 06 03 c0       	push   0xc00306e1
c000c416:	68 66 fb 02 c0       	push   0xc002fb66
c000c41b:	e8 64 37 01 00       	call   c001fb84 <CPrintf>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	90                   	nop
c000c424:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c429:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c42d:	0f b7 c0             	movzx  eax,ax
c000c430:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c434:	0f 8e b6 00 00 00    	jle    c000c4f0 <tcp_receive+0x98c>
c000c43a:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c43f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c442:	0f b7 c0             	movzx  eax,ax
c000c445:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c449:	7e 15                	jle    c000c460 <tcp_receive+0x8fc>
c000c44b:	83 ec 08             	sub    esp,0x8
c000c44e:	68 f0 06 03 c0       	push   0xc00306f0
c000c453:	68 66 fb 02 c0       	push   0xc002fb66
c000c458:	e8 27 37 01 00       	call   c001fb84 <CPrintf>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c465:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c468:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c46c:	29 d0                	sub    eax,edx
c000c46e:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c473:	eb 33                	jmp    c000c4a8 <tcp_receive+0x944>
c000c475:	8d 76 00             	lea    esi,[esi+0x0]
c000c478:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c47c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c480:	0f b7 c0             	movzx  eax,ax
c000c483:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c48b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c48f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c497:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c49d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c4a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4a7:	90                   	nop
c000c4a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c4ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c4b0:	0f b7 c0             	movzx  eax,ax
c000c4b3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c4b7:	7f bf                	jg     c000c478 <tcp_receive+0x914>
c000c4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4bd:	f7 d8                	neg    eax
c000c4bf:	98                   	cwde   
c000c4c0:	83 ec 08             	sub    esp,0x8
c000c4c3:	50                   	push   eax
c000c4c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c4c8:	e8 1b bd ff ff       	call   c00081e8 <pbuf_header>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	0f b6 c0             	movzx  eax,al
c000c4d3:	85 c0                	test   eax,eax
c000c4d5:	74 51                	je     c000c528 <tcp_receive+0x9c4>
c000c4d7:	83 ec 08             	sub    esp,0x8
c000c4da:	68 00 07 03 c0       	push   0xc0030700
c000c4df:	68 66 fb 02 c0       	push   0xc002fb66
c000c4e4:	e8 9b 36 01 00       	call   c001fb84 <CPrintf>
c000c4e9:	83 c4 10             	add    esp,0x10
c000c4ec:	eb 3a                	jmp    c000c528 <tcp_receive+0x9c4>
c000c4ee:	66 90                	xchg   ax,ax
c000c4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4f4:	f7 d8                	neg    eax
c000c4f6:	0f bf d0             	movsx  edx,ax
c000c4f9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c4fe:	83 ec 08             	sub    esp,0x8
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	e8 e0 bc ff ff       	call   c00081e8 <pbuf_header>
c000c508:	83 c4 10             	add    esp,0x10
c000c50b:	0f b6 c0             	movzx  eax,al
c000c50e:	85 c0                	test   eax,eax
c000c510:	74 16                	je     c000c528 <tcp_receive+0x9c4>
c000c512:	83 ec 08             	sub    esp,0x8
c000c515:	68 00 07 03 c0       	push   0xc0030700
c000c51a:	68 66 fb 02 c0       	push   0xc002fb66
c000c51f:	e8 60 36 01 00       	call   c001fb84 <CPrintf>
c000c524:	83 c4 10             	add    esp,0x10
c000c527:	90                   	nop
c000c528:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c52e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c533:	89 c1                	mov    ecx,eax
c000c535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c539:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c53c:	89 ce                	mov    esi,ecx
c000c53e:	29 c6                	sub    esi,eax
c000c540:	89 f0                	mov    eax,esi
c000c542:	01 d0                	add    eax,edx
c000c544:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c54a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c54e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c551:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c556:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c55b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c561:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c564:	eb 2a                	jmp    c000c590 <tcp_receive+0xa2c>
c000c566:	66 90                	xchg   ax,ax
c000c568:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c56e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c572:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c575:	29 c2                	sub    edx,eax
c000c577:	89 d0                	mov    eax,edx
c000c579:	79 15                	jns    c000c590 <tcp_receive+0xa2c>
c000c57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c57f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c582:	83 c8 02             	or     eax,0x2
c000c585:	88 c2                	mov    dl,al
c000c587:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c58b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c58e:	66 90                	xchg   ax,ax
c000c590:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c596:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c59a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c59d:	29 c2                	sub    edx,eax
c000c59f:	89 d0                	mov    eax,edx
c000c5a1:	0f 88 11 0c 00 00    	js     c000d1b8 <tcp_receive+0x1654>
c000c5a7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c5ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5b1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c5b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c5bb:	0f b7 c0             	movzx  eax,ax
c000c5be:	01 c8                	add    eax,ecx
c000c5c0:	29 c2                	sub    edx,eax
c000c5c2:	89 d0                	mov    eax,edx
c000c5c4:	83 c0 01             	add    eax,0x1
c000c5c7:	85 c0                	test   eax,eax
c000c5c9:	0f 8f e9 0b 00 00    	jg     c000d1b8 <tcp_receive+0x1654>
c000c5cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5d3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c5d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c5db:	39 c2                	cmp    edx,eax
c000c5dd:	0f 85 25 07 00 00    	jne    c000cd08 <tcp_receive+0x11a4>
c000c5e3:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c5e9:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5f2:	0f b7 c0             	movzx  eax,ax
c000c5f5:	83 ec 0c             	sub    esp,0xc
c000c5f8:	50                   	push   eax
c000c5f9:	e8 1e 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5fe:	83 c4 10             	add    esp,0x10
c000c601:	0f b7 c0             	movzx  eax,ax
c000c604:	83 e0 03             	and    eax,0x3
c000c607:	0f 95 c0             	setne  al
c000c60a:	0f b6 c0             	movzx  eax,al
c000c60d:	01 d8                	add    eax,ebx
c000c60f:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c615:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c619:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c61c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c622:	0f b7 d2             	movzx  edx,dx
c000c625:	0f b7 c0             	movzx  eax,ax
c000c628:	39 c2                	cmp    edx,eax
c000c62a:	0f 83 30 01 00 00    	jae    c000c760 <tcp_receive+0xbfc>
c000c630:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c635:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c639:	0f b7 c0             	movzx  eax,ax
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	50                   	push   eax
c000c640:	e8 d7 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	0f b7 c0             	movzx  eax,ax
c000c64b:	83 e0 01             	and    eax,0x1
c000c64e:	74 48                	je     c000c698 <tcp_receive+0xb34>
c000c650:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c655:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c659:	80 e4 c0             	and    ah,0xc0
c000c65c:	89 c3                	mov    ebx,eax
c000c65e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c663:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c667:	0f b7 c0             	movzx  eax,ax
c000c66a:	83 ec 0c             	sub    esp,0xc
c000c66d:	50                   	push   eax
c000c66e:	e8 a9 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c673:	83 c4 10             	add    esp,0x10
c000c676:	0f b7 c0             	movzx  eax,ax
c000c679:	83 e0 3e             	and    eax,0x3e
c000c67c:	83 ec 0c             	sub    esp,0xc
c000c67f:	50                   	push   eax
c000c680:	e8 97 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	09 d8                	or     eax,ebx
c000c68a:	89 c2                	mov    edx,eax
c000c68c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c691:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c695:	8d 76 00             	lea    esi,[esi+0x0]
c000c698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c69f:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6a5:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6aa:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6ae:	0f b7 c0             	movzx  eax,ax
c000c6b1:	83 ec 0c             	sub    esp,0xc
c000c6b4:	50                   	push   eax
c000c6b5:	e8 62 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c6ba:	83 c4 10             	add    esp,0x10
c000c6bd:	0f b7 c0             	movzx  eax,ax
c000c6c0:	83 e0 02             	and    eax,0x2
c000c6c3:	74 0f                	je     c000c6d4 <tcp_receive+0xb70>
c000c6c5:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c6ca:	83 e8 01             	sub    eax,0x1
c000c6cd:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6d3:	90                   	nop
c000c6d4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c6d9:	0f b7 d0             	movzx  edx,ax
c000c6dc:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c6e1:	83 ec 08             	sub    esp,0x8
c000c6e4:	52                   	push   edx
c000c6e5:	50                   	push   eax
c000c6e6:	e8 71 c2 ff ff       	call   c000895c <pbuf_realloc>
c000c6eb:	83 c4 10             	add    esp,0x10
c000c6ee:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c6f4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6f9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6fd:	0f b7 c0             	movzx  eax,ax
c000c700:	83 ec 0c             	sub    esp,0xc
c000c703:	50                   	push   eax
c000c704:	e8 13 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	0f b7 c0             	movzx  eax,ax
c000c70f:	83 e0 03             	and    eax,0x3
c000c712:	0f 95 c0             	setne  al
c000c715:	0f b6 c0             	movzx  eax,al
c000c718:	01 d8                	add    eax,ebx
c000c71a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c720:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c726:	0f b7 d0             	movzx  edx,ax
c000c729:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c72e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c731:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c735:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c738:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c73c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c73f:	0f b7 c0             	movzx  eax,ax
c000c742:	01 d0                	add    eax,edx
c000c744:	39 c1                	cmp    ecx,eax
c000c746:	74 18                	je     c000c760 <tcp_receive+0xbfc>
c000c748:	83 ec 08             	sub    esp,0x8
c000c74b:	68 f4 04 03 c0       	push   0xc00304f4
c000c750:	68 66 fb 02 c0       	push   0xc002fb66
c000c755:	e8 2a 34 01 00       	call   c001fb84 <CPrintf>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	8d 76 00             	lea    esi,[esi+0x0]
c000c760:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c764:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c76a:	85 c0                	test   eax,eax
c000c76c:	0f 84 7e 02 00 00    	je     c000c9f0 <tcp_receive+0xe8c>
c000c772:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c777:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77b:	0f b7 c0             	movzx  eax,ax
c000c77e:	83 ec 0c             	sub    esp,0xc
c000c781:	50                   	push   eax
c000c782:	e8 95 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	0f b7 c0             	movzx  eax,ax
c000c78d:	83 e0 01             	and    eax,0x1
c000c790:	74 4a                	je     c000c7dc <tcp_receive+0xc78>
c000c792:	eb 34                	jmp    c000c7c8 <tcp_receive+0xc64>
c000c794:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c798:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7b2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c7b8:	83 ec 0c             	sub    esp,0xc
c000c7bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7bf:	e8 50 d8 ff ff       	call   c000a014 <tcp_seg_free>
c000c7c4:	83 c4 10             	add    esp,0x10
c000c7c7:	90                   	nop
c000c7c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7cc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7d2:	85 c0                	test   eax,eax
c000c7d4:	75 be                	jne    c000c794 <tcp_receive+0xc30>
c000c7d6:	e9 15 02 00 00       	jmp    c000c9f0 <tcp_receive+0xe8c>
c000c7db:	90                   	nop
c000c7dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7e0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7ea:	e9 bd 00 00 00       	jmp    c000c8ac <tcp_receive+0xd48>
c000c7ef:	90                   	nop
c000c7f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7fb:	0f b7 c0             	movzx  eax,ax
c000c7fe:	83 ec 0c             	sub    esp,0xc
c000c801:	50                   	push   eax
c000c802:	e8 15 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c807:	83 c4 10             	add    esp,0x10
c000c80a:	0f b7 c0             	movzx  eax,ax
c000c80d:	83 e0 01             	and    eax,0x1
c000c810:	74 76                	je     c000c888 <tcp_receive+0xd24>
c000c812:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c817:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c81b:	0f b7 c0             	movzx  eax,ax
c000c81e:	83 ec 0c             	sub    esp,0xc
c000c821:	50                   	push   eax
c000c822:	e8 f5 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c827:	83 c4 10             	add    esp,0x10
c000c82a:	0f b7 c0             	movzx  eax,ax
c000c82d:	83 e0 02             	and    eax,0x2
c000c830:	75 56                	jne    c000c888 <tcp_receive+0xd24>
c000c832:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c837:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c83b:	83 ec 0c             	sub    esp,0xc
c000c83e:	6a 01                	push   0x1
c000c840:	e8 d7 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c845:	83 c4 10             	add    esp,0x10
c000c848:	89 c2                	mov    edx,eax
c000c84a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c84f:	09 da                	or     edx,ebx
c000c851:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c855:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c85b:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c860:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c864:	0f b7 c0             	movzx  eax,ax
c000c867:	83 ec 0c             	sub    esp,0xc
c000c86a:	50                   	push   eax
c000c86b:	e8 ac 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	0f b7 c0             	movzx  eax,ax
c000c876:	83 e0 03             	and    eax,0x3
c000c879:	0f 95 c0             	setne  al
c000c87c:	0f b6 c0             	movzx  eax,al
c000c87f:	01 d8                	add    eax,ebx
c000c881:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c887:	90                   	nop
c000c888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c88c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c890:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c894:	8b 00                	mov    eax,DWORD PTR [eax]
c000c896:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c89a:	83 ec 0c             	sub    esp,0xc
c000c89d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8a1:	e8 6e d7 ff ff       	call   c000a014 <tcp_seg_free>
c000c8a6:	83 c4 10             	add    esp,0x10
c000c8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c8b1:	74 31                	je     c000c8e4 <tcp_receive+0xd80>
c000c8b3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8b9:	0f b7 d0             	movzx  edx,ax
c000c8bc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8c1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c8c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c8ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c8d5:	0f b7 c0             	movzx  eax,ax
c000c8d8:	01 d0                	add    eax,edx
c000c8da:	29 c1                	sub    ecx,eax
c000c8dc:	89 c8                	mov    eax,ecx
c000c8de:	0f 89 0c ff ff ff    	jns    c000c7f0 <tcp_receive+0xc8c>
c000c8e4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c8e9:	0f 84 f1 00 00 00    	je     c000c9e0 <tcp_receive+0xe7c>
c000c8ef:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8f5:	0f b7 d0             	movzx  edx,ax
c000c8f8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8fd:	01 c2                	add    edx,eax
c000c8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c909:	29 c2                	sub    edx,eax
c000c90b:	89 d0                	mov    eax,edx
c000c90d:	85 c0                	test   eax,eax
c000c90f:	0f 8e cb 00 00 00    	jle    c000c9e0 <tcp_receive+0xe7c>
c000c915:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c91c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91f:	89 c2                	mov    edx,eax
c000c921:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c926:	89 d7                	mov    edi,edx
c000c928:	29 c7                	sub    edi,eax
c000c92a:	89 f8                	mov    eax,edi
c000c92c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c932:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 d5 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 02             	and    eax,0x2
c000c950:	74 0e                	je     c000c960 <tcp_receive+0xdfc>
c000c952:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c957:	83 e8 01             	sub    eax,0x1
c000c95a:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c960:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c965:	0f b7 d0             	movzx  edx,ax
c000c968:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c96d:	83 ec 08             	sub    esp,0x8
c000c970:	52                   	push   edx
c000c971:	50                   	push   eax
c000c972:	e8 e5 bf ff ff       	call   c000895c <pbuf_realloc>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c980:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c985:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c989:	0f b7 c0             	movzx  eax,ax
c000c98c:	83 ec 0c             	sub    esp,0xc
c000c98f:	50                   	push   eax
c000c990:	e8 87 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c995:	83 c4 10             	add    esp,0x10
c000c998:	0f b7 c0             	movzx  eax,ax
c000c99b:	83 e0 03             	and    eax,0x3
c000c99e:	0f 95 c0             	setne  al
c000c9a1:	0f b6 c0             	movzx  eax,al
c000c9a4:	01 d8                	add    eax,ebx
c000c9a6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c9ac:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9b2:	0f b7 d0             	movzx  edx,ax
c000c9b5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9ba:	01 c2                	add    edx,eax
c000c9bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9c6:	39 c2                	cmp    edx,eax
c000c9c8:	74 16                	je     c000c9e0 <tcp_receive+0xe7c>
c000c9ca:	83 ec 08             	sub    esp,0x8
c000c9cd:	68 2c 05 03 c0       	push   0xc003052c
c000c9d2:	68 66 fb 02 c0       	push   0xc002fb66
c000c9d7:	e8 a8 31 01 00       	call   c001fb84 <CPrintf>
c000c9dc:	83 c4 10             	add    esp,0x10
c000c9df:	90                   	nop
c000c9e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c9e8:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c9ee:	66 90                	xchg   ax,ax
c000c9f0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9f6:	0f b7 d0             	movzx  edx,ax
c000c9f9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9fe:	01 c2                	add    edx,eax
c000ca00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca04:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ca0e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca14:	0f b7 d2             	movzx  edx,dx
c000ca17:	0f b7 c0             	movzx  eax,ax
c000ca1a:	39 c2                	cmp    edx,eax
c000ca1c:	73 16                	jae    c000ca34 <tcp_receive+0xed0>
c000ca1e:	83 ec 08             	sub    esp,0x8
c000ca21:	68 68 05 03 c0       	push   0xc0030568
c000ca26:	68 66 fb 02 c0       	push   0xc002fb66
c000ca2b:	e8 54 31 01 00       	call   c001fb84 <CPrintf>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	90                   	nop
c000ca34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca38:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ca3b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca41:	89 d6                	mov    esi,edx
c000ca43:	29 c6                	sub    esi,eax
c000ca45:	89 f0                	mov    eax,esi
c000ca47:	89 c2                	mov    edx,eax
c000ca49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca4d:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000ca51:	83 ec 0c             	sub    esp,0xc
c000ca54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca58:	e8 5b d2 ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca68:	0f b7 c0             	movzx  eax,ax
c000ca6b:	85 c0                	test   eax,eax
c000ca6d:	74 15                	je     c000ca84 <tcp_receive+0xf20>
c000ca6f:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca74:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000ca79:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ca83:	90                   	nop
c000ca84:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca8d:	0f b7 c0             	movzx  eax,ax
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	50                   	push   eax
c000ca94:	e8 83 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 e0 01             	and    eax,0x1
c000caa2:	0f 84 dc 01 00 00    	je     c000cc84 <tcp_receive+0x1120>
c000caa8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000caad:	83 c8 20             	or     eax,0x20
c000cab0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cab5:	e9 ca 01 00 00       	jmp    c000cc84 <tcp_receive+0x1120>
c000caba:	66 90                	xchg   ax,ax
c000cabc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cac6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cace:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cad4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cad7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cada:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cadf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cae6:	0f b7 d8             	movzx  ebx,ax
c000cae9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caf0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000caf4:	0f b7 c0             	movzx  eax,ax
c000caf7:	83 ec 0c             	sub    esp,0xc
c000cafa:	50                   	push   eax
c000cafb:	e8 1c 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb00:	83 c4 10             	add    esp,0x10
c000cb03:	0f b7 c0             	movzx  eax,ax
c000cb06:	83 e0 03             	and    eax,0x3
c000cb09:	0f 95 c0             	setne  al
c000cb0c:	0f b6 c0             	movzx  eax,al
c000cb0f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cb12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb16:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cb19:	01 c2                	add    edx,eax
c000cb1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb1f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cb29:	0f b7 d8             	movzx  ebx,ax
c000cb2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb33:	0f b7 f0             	movzx  esi,ax
c000cb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb41:	0f b7 c0             	movzx  eax,ax
c000cb44:	83 ec 0c             	sub    esp,0xc
c000cb47:	50                   	push   eax
c000cb48:	e8 cf 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	0f b7 c0             	movzx  eax,ax
c000cb53:	83 e0 03             	and    eax,0x3
c000cb56:	0f 95 c0             	setne  al
c000cb59:	0f b6 c0             	movzx  eax,al
c000cb5c:	01 f0                	add    eax,esi
c000cb5e:	39 c3                	cmp    ebx,eax
c000cb60:	7d 16                	jge    c000cb78 <tcp_receive+0x1014>
c000cb62:	83 ec 08             	sub    esp,0x8
c000cb65:	68 88 05 03 c0       	push   0xc0030588
c000cb6a:	68 66 fb 02 c0       	push   0xc002fb66
c000cb6f:	e8 10 30 01 00       	call   c001fb84 <CPrintf>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	90                   	nop
c000cb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb7f:	0f b7 d8             	movzx  ebx,ax
c000cb82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb8d:	0f b7 c0             	movzx  eax,ax
c000cb90:	83 ec 0c             	sub    esp,0xc
c000cb93:	50                   	push   eax
c000cb94:	e8 83 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	0f b7 c0             	movzx  eax,ax
c000cb9f:	83 e0 03             	and    eax,0x3
c000cba2:	0f 95 c0             	setne  al
c000cba5:	0f b6 c0             	movzx  eax,al
c000cba8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cbab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbaf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cbb2:	29 d0                	sub    eax,edx
c000cbb4:	89 c2                	mov    edx,eax
c000cbb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbba:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbc5:	e8 ee d0 ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c000cbca:	83 c4 10             	add    esp,0x10
c000cbcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cbd7:	0f b7 c0             	movzx  eax,ax
c000cbda:	85 c0                	test   eax,eax
c000cbdc:	74 3e                	je     c000cc1c <tcp_receive+0x10b8>
c000cbde:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cbe3:	85 c0                	test   eax,eax
c000cbe5:	74 1d                	je     c000cc04 <tcp_receive+0x10a0>
c000cbe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbeb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cbee:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cbf3:	83 ec 08             	sub    esp,0x8
c000cbf6:	52                   	push   edx
c000cbf7:	50                   	push   eax
c000cbf8:	e8 cf bf ff ff       	call   c0008bcc <pbuf_cat>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	eb 0e                	jmp    c000cc10 <tcp_receive+0x10ac>
c000cc02:	66 90                	xchg   ax,ax
c000cc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc0b:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cc10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc1b:	90                   	nop
c000cc1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc23:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc27:	0f b7 c0             	movzx  eax,ax
c000cc2a:	83 ec 0c             	sub    esp,0xc
c000cc2d:	50                   	push   eax
c000cc2e:	e8 e9 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	0f b7 c0             	movzx  eax,ax
c000cc39:	83 e0 01             	and    eax,0x1
c000cc3c:	74 26                	je     c000cc64 <tcp_receive+0x1100>
c000cc3e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cc43:	83 c8 20             	or     eax,0x20
c000cc46:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cc52:	83 f8 04             	cmp    eax,0x4
c000cc55:	75 0d                	jne    c000cc64 <tcp_receive+0x1100>
c000cc57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5b:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cc62:	66 90                	xchg   ax,ax
c000cc64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc68:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc6e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc74:	83 ec 0c             	sub    esp,0xc
c000cc77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7b:	e8 94 d3 ff ff       	call   c000a014 <tcp_seg_free>
c000cc80:	83 c4 10             	add    esp,0x10
c000cc83:	90                   	nop
c000cc84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc88:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc8e:	85 c0                	test   eax,eax
c000cc90:	74 22                	je     c000ccb4 <tcp_receive+0x1150>
c000cc92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc96:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc9f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cca2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cca9:	39 c2                	cmp    edx,eax
c000ccab:	0f 84 0b fe ff ff    	je     c000cabc <tcp_receive+0xf58>
c000ccb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ccb4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccbb:	0f b6 c0             	movzx  eax,al
c000ccbe:	83 e0 01             	and    eax,0x1
c000ccc1:	74 2d                	je     c000ccf0 <tcp_receive+0x118c>
c000ccc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccc7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccca:	83 e0 fe             	and    eax,0xfffffffe
c000cccd:	88 c2                	mov    dl,al
c000cccf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccd3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ccd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccdd:	83 c8 02             	or     eax,0x2
c000cce0:	88 c2                	mov    dl,al
c000cce2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cce6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cce9:	e9 2e 05 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000ccee:	66 90                	xchg   ax,ax
c000ccf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccf7:	83 c8 01             	or     eax,0x1
c000ccfa:	88 c2                	mov    dl,al
c000ccfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd00:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cd03:	e9 14 05 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd0f:	e8 00 2f 00 00       	call   c000fc14 <tcp_send_empty_ack>
c000cd14:	83 c4 10             	add    esp,0x10
c000cd17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd1b:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cd21:	85 c0                	test   eax,eax
c000cd23:	75 23                	jne    c000cd48 <tcp_receive+0x11e4>
c000cd25:	83 ec 0c             	sub    esp,0xc
c000cd28:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd2d:	e8 7a d3 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	89 c2                	mov    edx,eax
c000cd37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3b:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd41:	e9 d6 04 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cd50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd54:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cd5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd5e:	e9 2d 04 00 00       	jmp    c000d190 <tcp_receive+0x162c>
c000cd63:	90                   	nop
c000cd64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd6b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd6e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd73:	39 c2                	cmp    edx,eax
c000cd75:	75 75                	jne    c000cdec <tcp_receive+0x1288>
c000cd77:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cd7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd84:	0f b7 d2             	movzx  edx,dx
c000cd87:	0f b7 c0             	movzx  eax,ax
c000cd8a:	39 c2                	cmp    edx,eax
c000cd8c:	0f 86 0e 04 00 00    	jbe    c000d1a0 <tcp_receive+0x163c>
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd9a:	e8 0d d3 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cd9f:	83 c4 10             	add    esp,0x10
c000cda2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdab:	0f 84 f3 03 00 00    	je     c000d1a4 <tcp_receive+0x1640>
c000cdb1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cdb6:	74 0c                	je     c000cdc4 <tcp_receive+0x1260>
c000cdb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdc0:	89 10                	mov    DWORD PTR [eax],edx
c000cdc2:	eb 10                	jmp    c000cdd4 <tcp_receive+0x1270>
c000cdc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdcc:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdd2:	66 90                	xchg   ax,ax
c000cdd4:	83 ec 08             	sub    esp,0x8
c000cdd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cddf:	e8 10 ec ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000cde4:	83 c4 10             	add    esp,0x10
c000cde7:	e9 b8 03 00 00       	jmp    c000d1a4 <tcp_receive+0x1640>
c000cdec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cdf1:	75 61                	jne    c000ce54 <tcp_receive+0x12f0>
c000cdf3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce03:	29 c2                	sub    edx,eax
c000ce05:	89 d0                	mov    eax,edx
c000ce07:	0f 89 2b 01 00 00    	jns    c000cf38 <tcp_receive+0x13d4>
c000ce0d:	83 ec 0c             	sub    esp,0xc
c000ce10:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce15:	e8 92 d2 ff ff       	call   c000a0ac <tcp_seg_copy>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce21:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ce26:	0f 84 7c 03 00 00    	je     c000d1a8 <tcp_receive+0x1644>
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce34:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce3a:	83 ec 08             	sub    esp,0x8
c000ce3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce45:	e8 aa eb ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000ce4a:	83 c4 10             	add    esp,0x10
c000ce4d:	e9 56 03 00 00       	jmp    c000d1a8 <tcp_receive+0x1644>
c000ce52:	66 90                	xchg   ax,ax
c000ce54:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce64:	29 c2                	sub    edx,eax
c000ce66:	89 d0                	mov    eax,edx
c000ce68:	83 e8 01             	sub    eax,0x1
c000ce6b:	0f 88 c7 00 00 00    	js     c000cf38 <tcp_receive+0x13d4>
c000ce71:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce81:	29 c2                	sub    edx,eax
c000ce83:	89 d0                	mov    eax,edx
c000ce85:	83 c0 01             	add    eax,0x1
c000ce88:	85 c0                	test   eax,eax
c000ce8a:	0f 8f a8 00 00 00    	jg     c000cf38 <tcp_receive+0x13d4>
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce98:	e8 0f d2 ff ff       	call   c000a0ac <tcp_seg_copy>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cea9:	0f 84 fd 02 00 00    	je     c000d1ac <tcp_receive+0x1648>
c000ceaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ceb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 c0             	movzx  eax,ax
c000cec3:	01 c2                	add    edx,eax
c000cec5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceca:	29 c2                	sub    edx,eax
c000cecc:	89 d0                	mov    eax,edx
c000cece:	85 c0                	test   eax,eax
c000ced0:	7e 42                	jle    c000cf14 <tcp_receive+0x13b0>
c000ced2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ced7:	89 c2                	mov    edx,eax
c000ced9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cedd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cee3:	89 d7                	mov    edi,edx
c000cee5:	29 c7                	sub    edi,eax
c000cee7:	89 f8                	mov    eax,edi
c000cee9:	89 c2                	mov    edx,eax
c000ceeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cefa:	0f b7 d0             	movzx  edx,ax
c000cefd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	52                   	push   edx
c000cf08:	50                   	push   eax
c000cf09:	e8 4e ba ff ff       	call   c000895c <pbuf_realloc>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	8d 76 00             	lea    esi,[esi+0x0]
c000cf14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf1c:	89 10                	mov    DWORD PTR [eax],edx
c000cf1e:	83 ec 08             	sub    esp,0x8
c000cf21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf29:	e8 c6 ea ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000cf2e:	83 c4 10             	add    esp,0x10
c000cf31:	e9 76 02 00 00       	jmp    c000d1ac <tcp_receive+0x1648>
c000cf36:	66 90                	xchg   ax,ax
c000cf38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf3e:	85 c0                	test   eax,eax
c000cf40:	0f 85 36 02 00 00    	jne    c000d17c <tcp_receive+0x1618>
c000cf46:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf56:	29 c2                	sub    edx,eax
c000cf58:	89 d0                	mov    eax,edx
c000cf5a:	85 c0                	test   eax,eax
c000cf5c:	0f 8e 1a 02 00 00    	jle    c000d17c <tcp_receive+0x1618>
c000cf62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf69:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf6d:	0f b7 c0             	movzx  eax,ax
c000cf70:	83 ec 0c             	sub    esp,0xc
c000cf73:	50                   	push   eax
c000cf74:	e8 a3 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	0f b7 c0             	movzx  eax,ax
c000cf7f:	83 e0 01             	and    eax,0x1
c000cf82:	0f 85 28 02 00 00    	jne    c000d1b0 <tcp_receive+0x164c>
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf90:	e8 17 d1 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 c2                	mov    edx,eax
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	89 10                	mov    DWORD PTR [eax],edx
c000cfa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	0f 84 06 02 00 00    	je     c000d1b4 <tcp_receive+0x1650>
c000cfae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfb5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cfb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cfbf:	0f b7 c0             	movzx  eax,ax
c000cfc2:	01 c2                	add    edx,eax
c000cfc4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfc9:	29 c2                	sub    edx,eax
c000cfcb:	89 d0                	mov    eax,edx
c000cfcd:	85 c0                	test   eax,eax
c000cfcf:	7e 3f                	jle    c000d010 <tcp_receive+0x14ac>
c000cfd1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfd6:	89 c2                	mov    edx,eax
c000cfd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfe2:	89 d6                	mov    esi,edx
c000cfe4:	29 c6                	sub    esi,eax
c000cfe6:	89 f0                	mov    eax,esi
c000cfe8:	89 c2                	mov    edx,eax
c000cfea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfee:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cff2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cff9:	0f b7 d0             	movzx  edx,ax
c000cffc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d003:	83 ec 08             	sub    esp,0x8
c000d006:	52                   	push   edx
c000d007:	50                   	push   eax
c000d008:	e8 4f b9 ff ff       	call   c000895c <pbuf_realloc>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d016:	0f b7 d0             	movzx  edx,ax
c000d019:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d01e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d021:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d025:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d028:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d02c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d02f:	0f b7 c0             	movzx  eax,ax
c000d032:	01 d0                	add    eax,edx
c000d034:	39 c1                	cmp    ecx,eax
c000d036:	0f 86 78 01 00 00    	jbe    c000d1b4 <tcp_receive+0x1650>
c000d03c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d040:	8b 00                	mov    eax,DWORD PTR [eax]
c000d042:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d045:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d049:	0f b7 c0             	movzx  eax,ax
c000d04c:	83 ec 0c             	sub    esp,0xc
c000d04f:	50                   	push   eax
c000d050:	e8 c7 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	0f b7 c0             	movzx  eax,ax
c000d05b:	83 e0 01             	and    eax,0x1
c000d05e:	74 54                	je     c000d0b4 <tcp_receive+0x1550>
c000d060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d064:	8b 00                	mov    eax,DWORD PTR [eax]
c000d066:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d069:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d06d:	80 e4 c0             	and    ah,0xc0
c000d070:	89 c3                	mov    ebx,eax
c000d072:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d076:	8b 00                	mov    eax,DWORD PTR [eax]
c000d078:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d07b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d07f:	0f b7 c0             	movzx  eax,ax
c000d082:	83 ec 0c             	sub    esp,0xc
c000d085:	50                   	push   eax
c000d086:	e8 91 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d08b:	83 c4 10             	add    esp,0x10
c000d08e:	0f b7 c0             	movzx  eax,ax
c000d091:	83 e0 3e             	and    eax,0x3e
c000d094:	83 ec 0c             	sub    esp,0xc
c000d097:	50                   	push   eax
c000d098:	e8 7f 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	09 d8                	or     eax,ebx
c000d0a2:	89 c2                	mov    edx,eax
c000d0a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ad:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000d0b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d0bb:	89 c2                	mov    edx,eax
c000d0bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0c4:	01 d0                	add    eax,edx
c000d0c6:	89 c1                	mov    ecx,eax
c000d0c8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d0cd:	89 c2                	mov    edx,eax
c000d0cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	89 cf                	mov    edi,ecx
c000d0d7:	29 d7                	sub    edi,edx
c000d0d9:	89 fa                	mov    edx,edi
c000d0db:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d0df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0e8:	0f b7 d0             	movzx  edx,ax
c000d0eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0f4:	83 ec 08             	sub    esp,0x8
c000d0f7:	52                   	push   edx
c000d0f8:	50                   	push   eax
c000d0f9:	e8 5e b8 ff ff       	call   c000895c <pbuf_realloc>
c000d0fe:	83 c4 10             	add    esp,0x10
c000d101:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d105:	8b 00                	mov    eax,DWORD PTR [eax]
c000d107:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d10a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d10e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d113:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d117:	0f b7 c0             	movzx  eax,ax
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	50                   	push   eax
c000d11e:	e8 f9 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	0f b7 c0             	movzx  eax,ax
c000d129:	83 e0 03             	and    eax,0x3
c000d12c:	0f 95 c0             	setne  al
c000d12f:	0f b6 c0             	movzx  eax,al
c000d132:	01 d8                	add    eax,ebx
c000d134:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d13a:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d140:	0f b7 d0             	movzx  edx,ax
c000d143:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d148:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d14b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d14f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d156:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d159:	0f b7 c0             	movzx  eax,ax
c000d15c:	01 d0                	add    eax,edx
c000d15e:	39 c1                	cmp    ecx,eax
c000d160:	74 52                	je     c000d1b4 <tcp_receive+0x1650>
c000d162:	83 ec 08             	sub    esp,0x8
c000d165:	68 f4 04 03 c0       	push   0xc00304f4
c000d16a:	68 66 fb 02 c0       	push   0xc002fb66
c000d16f:	e8 10 2a 01 00       	call   c001fb84 <CPrintf>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	eb 3b                	jmp    c000d1b4 <tcp_receive+0x1650>
c000d179:	8d 76 00             	lea    esi,[esi+0x0]
c000d17c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d180:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d184:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d188:	8b 00                	mov    eax,DWORD PTR [eax]
c000d18a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d18e:	66 90                	xchg   ax,ax
c000d190:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d195:	0f 85 c9 fb ff ff    	jne    c000cd64 <tcp_receive+0x1200>
c000d19b:	eb 7f                	jmp    c000d21c <tcp_receive+0x16b8>
c000d19d:	8d 76 00             	lea    esi,[esi+0x0]
c000d1a0:	90                   	nop
c000d1a1:	eb 79                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1a3:	90                   	nop
c000d1a4:	90                   	nop
c000d1a5:	eb 75                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1a7:	90                   	nop
c000d1a8:	90                   	nop
c000d1a9:	eb 71                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1ab:	90                   	nop
c000d1ac:	90                   	nop
c000d1ad:	eb 6d                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1af:	90                   	nop
c000d1b0:	90                   	nop
c000d1b1:	eb 69                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1b3:	90                   	nop
c000d1b4:	90                   	nop
c000d1b5:	eb 65                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1b7:	90                   	nop
c000d1b8:	83 ec 0c             	sub    esp,0xc
c000d1bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d1bf:	e8 50 2a 00 00       	call   c000fc14 <tcp_send_empty_ack>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	eb 53                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1cc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d1d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1d9:	29 c2                	sub    edx,eax
c000d1db:	89 d0                	mov    eax,edx
c000d1dd:	78 25                	js     c000d204 <tcp_receive+0x16a0>
c000d1df:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d1e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1e9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d1ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	01 c8                	add    eax,ecx
c000d1f8:	29 c2                	sub    edx,eax
c000d1fa:	89 d0                	mov    eax,edx
c000d1fc:	83 c0 01             	add    eax,0x1
c000d1ff:	85 c0                	test   eax,eax
c000d201:	7e 19                	jle    c000d21c <tcp_receive+0x16b8>
c000d203:	90                   	nop
c000d204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d208:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d20b:	83 c8 02             	or     eax,0x2
c000d20e:	88 c2                	mov    dl,al
c000d210:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d214:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d217:	eb 03                	jmp    c000d21c <tcp_receive+0x16b8>
c000d219:	8d 76 00             	lea    esi,[esi+0x0]
c000d21c:	90                   	nop
c000d21d:	83 c4 30             	add    esp,0x30
c000d220:	5b                   	pop    ebx
c000d221:	5e                   	pop    esi
c000d222:	5f                   	pop    edi
c000d223:	c3                   	ret    

c000d224 <tcp_parseopt>:
c000d224:	83 ec 1c             	sub    esp,0x1c
c000d227:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d22c:	83 c0 14             	add    eax,0x14
c000d22f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d233:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d238:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d23c:	0f b7 c0             	movzx  eax,ax
c000d23f:	83 ec 0c             	sub    esp,0xc
c000d242:	50                   	push   eax
c000d243:	e8 d4 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d248:	83 c4 10             	add    esp,0x10
c000d24b:	0f b7 c0             	movzx  eax,ax
c000d24e:	c1 e8 0c             	shr    eax,0xc
c000d251:	0f b7 c0             	movzx  eax,ax
c000d254:	83 f8 05             	cmp    eax,0x5
c000d257:	0f 86 6f 01 00 00    	jbe    c000d3cc <tcp_parseopt+0x1a8>
c000d25d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d262:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d266:	0f b7 c0             	movzx  eax,ax
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	50                   	push   eax
c000d26d:	e8 aa 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	0f b7 c0             	movzx  eax,ax
c000d278:	c1 e8 0c             	shr    eax,0xc
c000d27b:	83 e8 05             	sub    eax,0x5
c000d27e:	c1 e0 02             	shl    eax,0x2
c000d281:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d286:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d28d:	e9 1e 01 00 00       	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d292:	66 90                	xchg   ax,ax
c000d294:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d29d:	01 d0                	add    eax,edx
c000d29f:	8a 00                	mov    al,BYTE PTR [eax]
c000d2a1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d2a5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d2aa:	83 f8 01             	cmp    eax,0x1
c000d2ad:	74 15                	je     c000d2c4 <tcp_parseopt+0xa0>
c000d2af:	83 f8 02             	cmp    eax,0x2
c000d2b2:	74 24                	je     c000d2d8 <tcp_parseopt+0xb4>
c000d2b4:	85 c0                	test   eax,eax
c000d2b6:	0f 85 bc 00 00 00    	jne    c000d378 <tcp_parseopt+0x154>
c000d2bc:	e9 0b 01 00 00       	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d2c9:	83 c0 01             	add    eax,0x1
c000d2cc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2d1:	e9 da 00 00 00       	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d2d6:	66 90                	xchg   ax,ax
c000d2d8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2dd:	8d 50 01             	lea    edx,[eax+0x1]
c000d2e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2e4:	01 d0                	add    eax,edx
c000d2e6:	8a 00                	mov    al,BYTE PTR [eax]
c000d2e8:	0f b6 c0             	movzx  eax,al
c000d2eb:	83 f8 04             	cmp    eax,0x4
c000d2ee:	0f 85 d0 00 00 00    	jne    c000d3c4 <tcp_parseopt+0x1a0>
c000d2f4:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2f9:	8d 50 03             	lea    edx,[eax+0x3]
c000d2fc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d301:	39 c2                	cmp    edx,eax
c000d303:	0f 8d bb 00 00 00    	jge    c000d3c4 <tcp_parseopt+0x1a0>
c000d309:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d30e:	8d 50 02             	lea    edx,[eax+0x2]
c000d311:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d315:	01 d0                	add    eax,edx
c000d317:	8a 00                	mov    al,BYTE PTR [eax]
c000d319:	0f b6 c0             	movzx  eax,al
c000d31c:	c1 e0 08             	shl    eax,0x8
c000d31f:	89 c2                	mov    edx,eax
c000d321:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d326:	8d 48 03             	lea    ecx,[eax+0x3]
c000d329:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d32d:	01 c8                	add    eax,ecx
c000d32f:	8a 00                	mov    al,BYTE PTR [eax]
c000d331:	0f b6 c0             	movzx  eax,al
c000d334:	09 d0                	or     eax,edx
c000d336:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d33b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d340:	3d 18 02 00 00       	cmp    eax,0x218
c000d345:	77 11                	ja     c000d358 <tcp_parseopt+0x134>
c000d347:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d34c:	85 c0                	test   eax,eax
c000d34e:	74 08                	je     c000d358 <tcp_parseopt+0x134>
c000d350:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d355:	eb 09                	jmp    c000d360 <tcp_parseopt+0x13c>
c000d357:	90                   	nop
c000d358:	b8 18 02 00 00       	mov    eax,0x218
c000d35d:	8d 76 00             	lea    esi,[esi+0x0]
c000d360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d364:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d368:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d36d:	83 c0 04             	add    eax,0x4
c000d370:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d375:	eb 39                	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d377:	90                   	nop
c000d378:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d37d:	8d 50 01             	lea    edx,[eax+0x1]
c000d380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d384:	01 d0                	add    eax,edx
c000d386:	8a 00                	mov    al,BYTE PTR [eax]
c000d388:	0f b6 c0             	movzx  eax,al
c000d38b:	85 c0                	test   eax,eax
c000d38d:	74 39                	je     c000d3c8 <tcp_parseopt+0x1a4>
c000d38f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d394:	8d 50 01             	lea    edx,[eax+0x1]
c000d397:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d39b:	01 d0                	add    eax,edx
c000d39d:	8a 00                	mov    al,BYTE PTR [eax]
c000d39f:	0f b6 c0             	movzx  eax,al
c000d3a2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d3a7:	01 d0                	add    eax,edx
c000d3a9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d3ae:	66 90                	xchg   ax,ax
c000d3b0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3b5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d3ba:	39 c2                	cmp    edx,eax
c000d3bc:	0f 82 d2 fe ff ff    	jb     c000d294 <tcp_parseopt+0x70>
c000d3c2:	eb 08                	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d3c4:	90                   	nop
c000d3c5:	eb 05                	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d3c7:	90                   	nop
c000d3c8:	90                   	nop
c000d3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3cc:	83 c4 1c             	add    esp,0x1c
c000d3cf:	c3                   	ret    

c000d3d0 <tcp_listen_input>:
c000d3d0:	53                   	push   ebx
c000d3d1:	83 ec 18             	sub    esp,0x18
c000d3d4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d3d9:	0f b6 c0             	movzx  eax,al
c000d3dc:	83 e0 10             	and    eax,0x10
c000d3df:	74 53                	je     c000d434 <tcp_listen_input+0x64>
c000d3e1:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d3e9:	0f b7 d0             	movzx  edx,ax
c000d3ec:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3f1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d3f5:	0f b7 c0             	movzx  eax,ax
c000d3f8:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d3ff:	0f b7 d9             	movzx  ebx,cx
c000d402:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d408:	01 cb                	add    ebx,ecx
c000d40a:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d410:	83 c1 01             	add    ecx,0x1
c000d413:	83 ec 08             	sub    esp,0x8
c000d416:	52                   	push   edx
c000d417:	50                   	push   eax
c000d418:	68 90 68 03 c0       	push   0xc0036890
c000d41d:	68 98 68 03 c0       	push   0xc0036898
c000d422:	53                   	push   ebx
c000d423:	51                   	push   ecx
c000d424:	e8 8b 2f 00 00       	call   c00103b4 <tcp_rst>
c000d429:	83 c4 20             	add    esp,0x20
c000d42c:	e9 a7 01 00 00       	jmp    c000d5d8 <tcp_listen_input+0x208>
c000d431:	8d 76 00             	lea    esi,[esi+0x0]
c000d434:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d439:	0f b6 c0             	movzx  eax,al
c000d43c:	83 e0 02             	and    eax,0x2
c000d43f:	0f 84 93 01 00 00    	je     c000d5d8 <tcp_listen_input+0x208>
c000d445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d449:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d44c:	0f b6 c0             	movzx  eax,al
c000d44f:	83 ec 0c             	sub    esp,0xc
c000d452:	50                   	push   eax
c000d453:	e8 e0 df ff ff       	call   c000b438 <tcp_alloc>
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d45f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d464:	75 16                	jne    c000d47c <tcp_listen_input+0xac>
c000d466:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d46c:	83 c0 01             	add    eax,0x1
c000d46f:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d475:	b0 ff                	mov    al,0xff
c000d477:	e9 60 01 00 00       	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d47c:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d486:	89 10                	mov    DWORD PTR [eax],edx
c000d488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d493:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d497:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d49d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d4a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d4a9:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b0:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d4b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b8:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d4bf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d4d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d4dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d4e1:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4e9:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d4ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4f1:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d4f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4f8:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d4fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d501:	8d 50 ff             	lea    edx,[eax-0x1]
c000d504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d508:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d516:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d524:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52b:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d52e:	83 e0 8c             	and    eax,0xffffff8c
c000d531:	88 c2                	mov    dl,al
c000d533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d537:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d53a:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d544:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d54b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d550:	e8 7b 36 00 00       	call   c0010bd0 <tcp_timer_needed>
c000d555:	83 ec 0c             	sub    esp,0xc
c000d558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d55c:	e8 c3 fc ff ff       	call   c000d224 <tcp_parseopt>
c000d561:	83 c4 10             	add    esp,0x10
c000d564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d568:	8d 50 04             	lea    edx,[eax+0x4]
c000d56b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d56f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d572:	0f b7 c0             	movzx  eax,ax
c000d575:	83 ec 08             	sub    esp,0x8
c000d578:	52                   	push   edx
c000d579:	50                   	push   eax
c000d57a:	e8 79 e0 ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000d57f:	83 c4 10             	add    esp,0x10
c000d582:	89 c2                	mov    edx,eax
c000d584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d588:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d58c:	83 ec 08             	sub    esp,0x8
c000d58f:	6a 12                	push   0x12
c000d591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d595:	e8 ee 22 00 00       	call   c000f888 <tcp_enqueue_flags>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d5a1:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d5a6:	85 c0                	test   eax,eax
c000d5a8:	74 1a                	je     c000d5c4 <tcp_listen_input+0x1f4>
c000d5aa:	83 ec 08             	sub    esp,0x8
c000d5ad:	6a 00                	push   0x0
c000d5af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5b3:	e8 68 db ff ff       	call   c000b120 <tcp_abandon>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d5bf:	eb 1b                	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5cb:	e8 58 29 00 00       	call   c000ff28 <tcp_output>
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	eb 07                	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d8:	b0 00                	mov    al,0x0
c000d5da:	66 90                	xchg   ax,ax
c000d5dc:	83 c4 18             	add    esp,0x18
c000d5df:	5b                   	pop    ebx
c000d5e0:	c3                   	ret    
c000d5e1:	8d 76 00             	lea    esi,[esi+0x0]

c000d5e4 <tcp_process>:
c000d5e4:	53                   	push   ebx
c000d5e5:	83 ec 18             	sub    esp,0x18
c000d5e8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d5ed:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d5f2:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5f7:	0f b6 c0             	movzx  eax,al
c000d5fa:	83 e0 04             	and    eax,0x4
c000d5fd:	0f 84 bd 00 00 00    	je     c000d6c0 <tcp_process+0xdc>
c000d603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d607:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d60a:	83 f8 02             	cmp    eax,0x2
c000d60d:	75 19                	jne    c000d628 <tcp_process+0x44>
c000d60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d613:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d616:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d61b:	39 c2                	cmp    edx,eax
c000d61d:	75 45                	jne    c000d664 <tcp_process+0x80>
c000d61f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d624:	eb 3e                	jmp    c000d664 <tcp_process+0x80>
c000d626:	66 90                	xchg   ax,ax
c000d628:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d632:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d635:	29 c2                	sub    edx,eax
c000d637:	89 d0                	mov    eax,edx
c000d639:	78 29                	js     c000d664 <tcp_process+0x80>
c000d63b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d645:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d64f:	0f b7 c0             	movzx  eax,ax
c000d652:	01 c8                	add    eax,ecx
c000d654:	29 c2                	sub    edx,eax
c000d656:	89 d0                	mov    eax,edx
c000d658:	85 c0                	test   eax,eax
c000d65a:	7f 08                	jg     c000d664 <tcp_process+0x80>
c000d65c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d661:	8d 76 00             	lea    esi,[esi+0x0]
c000d664:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d669:	85 c0                	test   eax,eax
c000d66b:	74 4b                	je     c000d6b8 <tcp_process+0xd4>
c000d66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d671:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d674:	85 c0                	test   eax,eax
c000d676:	75 18                	jne    c000d690 <tcp_process+0xac>
c000d678:	83 ec 08             	sub    esp,0x8
c000d67b:	68 b0 05 03 c0       	push   0xc00305b0
c000d680:	68 66 fb 02 c0       	push   0xc002fb66
c000d685:	e8 fa 24 01 00       	call   c001fb84 <CPrintf>
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	8d 76 00             	lea    esi,[esi+0x0]
c000d690:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d695:	83 c8 08             	or     eax,0x8
c000d698:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d69d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d6a4:	83 e0 fe             	and    eax,0xfffffffe
c000d6a7:	88 c2                	mov    dl,al
c000d6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ad:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d6b0:	b0 f5                	mov    al,0xf5
c000d6b2:	e9 c9 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6b7:	90                   	nop
c000d6b8:	b0 00                	mov    al,0x0
c000d6ba:	e9 c1 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6bf:	90                   	nop
c000d6c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6c5:	0f b6 c0             	movzx  eax,al
c000d6c8:	83 e0 02             	and    eax,0x2
c000d6cb:	74 33                	je     c000d700 <tcp_process+0x11c>
c000d6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6d4:	83 f8 02             	cmp    eax,0x2
c000d6d7:	74 27                	je     c000d700 <tcp_process+0x11c>
c000d6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6e0:	83 f8 03             	cmp    eax,0x3
c000d6e3:	74 1b                	je     c000d700 <tcp_process+0x11c>
c000d6e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d6ec:	83 c8 02             	or     eax,0x2
c000d6ef:	88 c2                	mov    dl,al
c000d6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d6f8:	b0 00                	mov    al,0x0
c000d6fa:	e9 81 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6ff:	90                   	nop
c000d700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d704:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d707:	0f b6 c0             	movzx  eax,al
c000d70a:	83 e0 10             	and    eax,0x10
c000d70d:	75 0d                	jne    c000d71c <tcp_process+0x138>
c000d70f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d719:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d720:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d72e:	e8 f1 fa ff ff       	call   c000d224 <tcp_parseopt>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d73d:	83 f8 09             	cmp    eax,0x9
c000d740:	0f 87 16 08 00 00    	ja     c000df5c <tcp_process+0x978>
c000d746:	8b 04 85 58 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8a8]
c000d74d:	ff e0                	jmp    eax
c000d74f:	90                   	nop
c000d750:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d755:	0f b6 c0             	movzx  eax,al
c000d758:	83 e0 10             	and    eax,0x10
c000d75b:	0f 84 07 02 00 00    	je     c000d968 <tcp_process+0x384>
c000d761:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d766:	0f b6 c0             	movzx  eax,al
c000d769:	83 e0 02             	and    eax,0x2
c000d76c:	0f 84 f6 01 00 00    	je     c000d968 <tcp_process+0x384>
c000d772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d776:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d779:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d77c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d77f:	83 ec 0c             	sub    esp,0xc
c000d782:	50                   	push   eax
c000d783:	e8 b8 34 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	8d 50 01             	lea    edx,[eax+0x1]
c000d78e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d793:	39 c2                	cmp    edx,eax
c000d795:	0f 85 cd 01 00 00    	jne    c000d968 <tcp_process+0x384>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d7a3:	83 c0 01             	add    eax,0x1
c000d7a6:	89 c2                	mov    edx,eax
c000d7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ac:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d7b0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d7b5:	8d 50 01             	lea    edx,[eax+0x1]
c000d7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d7bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d7cd:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d7da:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d7df:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e7:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d7eb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d7f0:	8d 50 ff             	lea    edx,[eax-0x1]
c000d7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f7:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d809:	8d 50 04             	lea    edx,[eax+0x4]
c000d80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d810:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d813:	0f b7 c0             	movzx  eax,ax
c000d816:	83 ec 08             	sub    esp,0x8
c000d819:	52                   	push   edx
c000d81a:	50                   	push   eax
c000d81b:	e8 d8 dd ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000d820:	83 c4 10             	add    esp,0x10
c000d823:	89 c2                	mov    edx,eax
c000d825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d829:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d831:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d834:	89 c2                	mov    edx,eax
c000d836:	c1 e2 02             	shl    edx,0x2
c000d839:	01 d0                	add    eax,edx
c000d83b:	d1 e0                	shl    eax,1
c000d83d:	89 c2                	mov    edx,eax
c000d83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d843:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d84f:	0f b7 c0             	movzx  eax,ax
c000d852:	83 f8 01             	cmp    eax,0x1
c000d855:	75 0d                	jne    c000d864 <tcp_process+0x280>
c000d857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d85e:	d1 e0                	shl    eax,1
c000d860:	eb 0a                	jmp    c000d86c <tcp_process+0x288>
c000d862:	66 90                	xchg   ax,ax
c000d864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d868:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d86b:	90                   	nop
c000d86c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d870:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d878:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d87b:	0f b7 c0             	movzx  eax,ax
c000d87e:	85 c0                	test   eax,eax
c000d880:	75 16                	jne    c000d898 <tcp_process+0x2b4>
c000d882:	83 ec 08             	sub    esp,0x8
c000d885:	68 13 07 03 c0       	push   0xc0030713
c000d88a:	68 66 fb 02 c0       	push   0xc002fb66
c000d88f:	e8 f0 22 01 00       	call   c001fb84 <CPrintf>
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	90                   	nop
c000d898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d89f:	83 e8 01             	sub    eax,0x1
c000d8a2:	89 c2                	mov    edx,eax
c000d8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a8:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000d8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c1:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8cb:	85 c0                	test   eax,eax
c000d8cd:	75 0d                	jne    c000d8dc <tcp_process+0x2f8>
c000d8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8d3:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d8d9:	eb 15                	jmp    c000d8f0 <tcp_process+0x30c>
c000d8db:	90                   	nop
c000d8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e0:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ea:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d8ee:	66 90                	xchg   ax,ax
c000d8f0:	83 ec 0c             	sub    esp,0xc
c000d8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8f7:	e8 18 c7 ff ff       	call   c000a014 <tcp_seg_free>
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d903:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d909:	85 c0                	test   eax,eax
c000d90b:	74 27                	je     c000d934 <tcp_process+0x350>
c000d90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d911:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d917:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d91b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d91e:	83 ec 04             	sub    esp,0x4
c000d921:	6a 00                	push   0x0
c000d923:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d927:	52                   	push   edx
c000d928:	ff d0                	call   eax
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d931:	eb 09                	jmp    c000d93c <tcp_process+0x358>
c000d933:	90                   	nop
c000d934:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d939:	8d 76 00             	lea    esi,[esi+0x0]
c000d93c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d941:	83 f8 f6             	cmp    eax,0xfffffff6
c000d944:	75 0a                	jne    c000d950 <tcp_process+0x36c>
c000d946:	b0 f6                	mov    al,0xf6
c000d948:	e9 33 06 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d94d:	8d 76 00             	lea    esi,[esi+0x0]
c000d950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d954:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d957:	83 c8 02             	or     eax,0x2
c000d95a:	88 c2                	mov    dl,al
c000d95c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d960:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d963:	e9 f8 05 00 00       	jmp    c000df60 <tcp_process+0x97c>
c000d968:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d96d:	0f b6 c0             	movzx  eax,al
c000d970:	83 e0 10             	and    eax,0x10
c000d973:	0f 84 e7 05 00 00    	je     c000df60 <tcp_process+0x97c>
c000d979:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d97e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d981:	0f b7 c8             	movzx  ecx,ax
c000d984:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d989:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d98d:	0f b7 d0             	movzx  edx,ax
c000d990:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d996:	0f b7 d8             	movzx  ebx,ax
c000d999:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d99e:	01 c3                	add    ebx,eax
c000d9a0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d9a5:	83 ec 08             	sub    esp,0x8
c000d9a8:	51                   	push   ecx
c000d9a9:	52                   	push   edx
c000d9aa:	68 90 68 03 c0       	push   0xc0036890
c000d9af:	68 98 68 03 c0       	push   0xc0036898
c000d9b4:	53                   	push   ebx
c000d9b5:	50                   	push   eax
c000d9b6:	e8 f9 29 00 00       	call   c00103b4 <tcp_rst>
c000d9bb:	83 c4 20             	add    esp,0x20
c000d9be:	e9 9d 05 00 00       	jmp    c000df60 <tcp_process+0x97c>
c000d9c3:	90                   	nop
c000d9c4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d9c9:	0f b6 c0             	movzx  eax,al
c000d9cc:	83 e0 10             	and    eax,0x10
c000d9cf:	0f 84 ab 01 00 00    	je     c000db80 <tcp_process+0x59c>
c000d9d5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d9e2:	29 c2                	sub    edx,eax
c000d9e4:	89 d0                	mov    eax,edx
c000d9e6:	83 e8 01             	sub    eax,0x1
c000d9e9:	0f 88 45 01 00 00    	js     c000db34 <tcp_process+0x550>
c000d9ef:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f9:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d9fc:	29 c2                	sub    edx,eax
c000d9fe:	89 d0                	mov    eax,edx
c000da00:	85 c0                	test   eax,eax
c000da02:	0f 8f 2c 01 00 00    	jg     c000db34 <tcp_process+0x550>
c000da08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da17:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da1a:	85 c0                	test   eax,eax
c000da1c:	75 16                	jne    c000da34 <tcp_process+0x450>
c000da1e:	83 ec 08             	sub    esp,0x8
c000da21:	68 29 07 03 c0       	push   0xc0030729
c000da26:	68 66 fb 02 c0       	push   0xc002fb66
c000da2b:	e8 54 21 01 00       	call   c001fb84 <CPrintf>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	90                   	nop
c000da34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da38:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da3b:	85 c0                	test   eax,eax
c000da3d:	74 25                	je     c000da64 <tcp_process+0x480>
c000da3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da43:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da46:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da4a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da4d:	83 ec 04             	sub    esp,0x4
c000da50:	6a 00                	push   0x0
c000da52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da56:	52                   	push   edx
c000da57:	ff d0                	call   eax
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da60:	eb 0a                	jmp    c000da6c <tcp_process+0x488>
c000da62:	66 90                	xchg   ax,ax
c000da64:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000da69:	8d 76 00             	lea    esi,[esi+0x0]
c000da6c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da71:	85 c0                	test   eax,eax
c000da73:	74 23                	je     c000da98 <tcp_process+0x4b4>
c000da75:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da7a:	83 f8 f6             	cmp    eax,0xfffffff6
c000da7d:	74 11                	je     c000da90 <tcp_process+0x4ac>
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	e8 29 d8 ff ff       	call   c000b2b4 <tcp_abort>
c000da8b:	83 c4 10             	add    esp,0x10
c000da8e:	66 90                	xchg   ax,ax
c000da90:	b0 f6                	mov    al,0xf6
c000da92:	e9 e9 04 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000da97:	90                   	nop
c000da98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000daa0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000daa5:	83 ec 0c             	sub    esp,0xc
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	e8 b3 e0 ff ff       	call   c000bb64 <tcp_receive>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dabb:	0f b7 c0             	movzx  eax,ax
c000dabe:	85 c0                	test   eax,eax
c000dac0:	74 16                	je     c000dad8 <tcp_process+0x4f4>
c000dac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dac9:	83 e8 01             	sub    eax,0x1
c000dacc:	89 c2                	mov    edx,eax
c000dace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad2:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000dad6:	66 90                	xchg   ax,ax
c000dad8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dadd:	83 f8 01             	cmp    eax,0x1
c000dae0:	75 0e                	jne    c000daf0 <tcp_process+0x50c>
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dae9:	d1 e0                	shl    eax,1
c000daeb:	eb 0b                	jmp    c000daf8 <tcp_process+0x514>
c000daed:	8d 76 00             	lea    esi,[esi+0x0]
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000daf7:	90                   	nop
c000daf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dafc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000db00:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db05:	0f b6 c0             	movzx  eax,al
c000db08:	83 e0 20             	and    eax,0x20
c000db0b:	0f 84 ab 00 00 00    	je     c000dbbc <tcp_process+0x5d8>
c000db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db18:	83 c8 02             	or     eax,0x2
c000db1b:	88 c2                	mov    dl,al
c000db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db21:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db28:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db2f:	e9 88 00 00 00       	jmp    c000dbbc <tcp_process+0x5d8>
c000db34:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db39:	66 8b 00             	mov    ax,WORD PTR [eax]
c000db3c:	0f b7 c8             	movzx  ecx,ax
c000db3f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db44:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000db48:	0f b7 d0             	movzx  edx,ax
c000db4b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000db51:	0f b7 d8             	movzx  ebx,ax
c000db54:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db59:	01 c3                	add    ebx,eax
c000db5b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db60:	83 ec 08             	sub    esp,0x8
c000db63:	51                   	push   ecx
c000db64:	52                   	push   edx
c000db65:	68 90 68 03 c0       	push   0xc0036890
c000db6a:	68 98 68 03 c0       	push   0xc0036898
c000db6f:	53                   	push   ebx
c000db70:	50                   	push   eax
c000db71:	e8 3e 28 00 00       	call   c00103b4 <tcp_rst>
c000db76:	83 c4 20             	add    esp,0x20
c000db79:	e9 e6 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000db7e:	66 90                	xchg   ax,ax
c000db80:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db85:	0f b6 c0             	movzx  eax,al
c000db88:	83 e0 02             	and    eax,0x2
c000db8b:	0f 84 d3 03 00 00    	je     c000df64 <tcp_process+0x980>
c000db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db95:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db98:	8d 50 ff             	lea    edx,[eax-0x1]
c000db9b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dba0:	39 c2                	cmp    edx,eax
c000dba2:	0f 85 bc 03 00 00    	jne    c000df64 <tcp_process+0x980>
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbaf:	e8 0c 2a 00 00       	call   c00105c0 <tcp_rexmit>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	e9 a8 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000dbbc:	90                   	nop
c000dbbd:	e9 a2 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000dbc2:	66 90                	xchg   ax,ax
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcb:	e8 94 df ff ff       	call   c000bb64 <tcp_receive>
c000dbd0:	83 c4 10             	add    esp,0x10
c000dbd3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dbd8:	0f b6 c0             	movzx  eax,al
c000dbdb:	83 e0 20             	and    eax,0x20
c000dbde:	0f 84 84 03 00 00    	je     c000df68 <tcp_process+0x984>
c000dbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbeb:	83 c8 02             	or     eax,0x2
c000dbee:	88 c2                	mov    dl,al
c000dbf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc02:	e9 61 03 00 00       	jmp    c000df68 <tcp_process+0x984>
c000dc07:	90                   	nop
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc0f:	e8 50 df ff ff       	call   c000bb64 <tcp_receive>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc1c:	0f b6 c0             	movzx  eax,al
c000dc1f:	83 e0 20             	and    eax,0x20
c000dc22:	0f 84 08 01 00 00    	je     c000dd30 <tcp_process+0x74c>
c000dc28:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc2d:	0f b6 c0             	movzx  eax,al
c000dc30:	83 e0 10             	and    eax,0x10
c000dc33:	0f 84 d3 00 00 00    	je     c000dd0c <tcp_process+0x728>
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc40:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc45:	39 c2                	cmp    edx,eax
c000dc47:	0f 85 bf 00 00 00    	jne    c000dd0c <tcp_process+0x728>
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc54:	83 c8 02             	or     eax,0x2
c000dc57:	88 c2                	mov    dl,al
c000dc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc67:	e8 0c c5 ff ff       	call   c000a178 <tcp_pcb_purge>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc74:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc78:	75 12                	jne    c000dc8c <tcp_process+0x6a8>
c000dc7a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc82:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc87:	eb 4b                	jmp    c000dcd4 <tcp_process+0x6f0>
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc91:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc96:	eb 30                	jmp    c000dcc8 <tcp_process+0x6e4>
c000dc98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dca0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dca4:	75 12                	jne    c000dcb8 <tcp_process+0x6d4>
c000dca6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcaf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dcb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcb5:	eb 1d                	jmp    c000dcd4 <tcp_process+0x6f0>
c000dcb7:	90                   	nop
c000dcb8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcc0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dccd:	85 c0                	test   eax,eax
c000dccf:	75 c7                	jne    c000dc98 <tcp_process+0x6b4>
c000dcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dcea:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcfb:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd00:	e8 cb 2e 00 00       	call   c0010bd0 <tcp_timer_needed>
c000dd05:	e9 62 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd13:	83 c8 02             	or     eax,0x2
c000dd16:	88 c2                	mov    dl,al
c000dd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd23:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dd2a:	e9 3d 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd2f:	90                   	nop
c000dd30:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd35:	0f b6 c0             	movzx  eax,al
c000dd38:	83 e0 10             	and    eax,0x10
c000dd3b:	0f 84 2b 02 00 00    	je     c000df6c <tcp_process+0x988>
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd48:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd4d:	39 c2                	cmp    edx,eax
c000dd4f:	0f 85 17 02 00 00    	jne    c000df6c <tcp_process+0x988>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dd60:	e9 07 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd65:	8d 76 00             	lea    esi,[esi+0x0]
c000dd68:	83 ec 0c             	sub    esp,0xc
c000dd6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd6f:	e8 f0 dd ff ff       	call   c000bb64 <tcp_receive>
c000dd74:	83 c4 10             	add    esp,0x10
c000dd77:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd7c:	0f b6 c0             	movzx  eax,al
c000dd7f:	83 e0 20             	and    eax,0x20
c000dd82:	0f 84 e8 01 00 00    	je     c000df70 <tcp_process+0x98c>
c000dd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd8c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd8f:	83 c8 02             	or     eax,0x2
c000dd92:	88 c2                	mov    dl,al
c000dd94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd98:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd9b:	83 ec 0c             	sub    esp,0xc
c000dd9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda2:	e8 d1 c3 ff ff       	call   c000a178 <tcp_pcb_purge>
c000dda7:	83 c4 10             	add    esp,0x10
c000ddaa:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddaf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddb3:	75 0f                	jne    c000ddc4 <tcp_process+0x7e0>
c000ddb5:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ddc2:	eb 48                	jmp    c000de0c <tcp_process+0x828>
c000ddc4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddc9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddce:	eb 30                	jmp    c000de00 <tcp_process+0x81c>
c000ddd0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddd8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dddc:	75 12                	jne    c000ddf0 <tcp_process+0x80c>
c000ddde:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dde3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dde7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dded:	eb 1d                	jmp    c000de0c <tcp_process+0x828>
c000ddef:	90                   	nop
c000ddf0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddf8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddfd:	8d 76 00             	lea    esi,[esi+0x0]
c000de00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de05:	85 c0                	test   eax,eax
c000de07:	75 c7                	jne    c000ddd0 <tcp_process+0x7ec>
c000de09:	8d 76 00             	lea    esi,[esi+0x0]
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de1b:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de22:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de33:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de38:	e8 93 2d 00 00       	call   c0010bd0 <tcp_timer_needed>
c000de3d:	e9 2e 01 00 00       	jmp    c000df70 <tcp_process+0x98c>
c000de42:	66 90                	xchg   ax,ax
c000de44:	83 ec 0c             	sub    esp,0xc
c000de47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de4b:	e8 14 dd ff ff       	call   c000bb64 <tcp_receive>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de58:	0f b6 c0             	movzx  eax,al
c000de5b:	83 e0 10             	and    eax,0x10
c000de5e:	0f 84 10 01 00 00    	je     c000df74 <tcp_process+0x990>
c000de64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de68:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de6b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de70:	39 c2                	cmp    edx,eax
c000de72:	0f 85 fc 00 00 00    	jne    c000df74 <tcp_process+0x990>
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de7f:	e8 f4 c2 ff ff       	call   c000a178 <tcp_pcb_purge>
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de8c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de90:	75 12                	jne    c000dea4 <tcp_process+0x8c0>
c000de92:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de9a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de9f:	eb 4b                	jmp    c000deec <tcp_process+0x908>
c000dea1:	8d 76 00             	lea    esi,[esi+0x0]
c000dea4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dea9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000deae:	eb 30                	jmp    c000dee0 <tcp_process+0x8fc>
c000deb0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000deb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000deb8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000debc:	75 12                	jne    c000ded0 <tcp_process+0x8ec>
c000debe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dec7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000deca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000decd:	eb 1d                	jmp    c000deec <tcp_process+0x908>
c000decf:	90                   	nop
c000ded0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ded5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dedd:	8d 76 00             	lea    esi,[esi+0x0]
c000dee0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dee5:	85 c0                	test   eax,eax
c000dee7:	75 c7                	jne    c000deb0 <tcp_process+0x8cc>
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000def7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000defb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df02:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000df08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df0c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df13:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000df18:	e8 b3 2c 00 00       	call   c0010bd0 <tcp_timer_needed>
c000df1d:	eb 55                	jmp    c000df74 <tcp_process+0x990>
c000df1f:	90                   	nop
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df27:	e8 38 dc ff ff       	call   c000bb64 <tcp_receive>
c000df2c:	83 c4 10             	add    esp,0x10
c000df2f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000df34:	0f b6 c0             	movzx  eax,al
c000df37:	83 e0 10             	and    eax,0x10
c000df3a:	74 3c                	je     c000df78 <tcp_process+0x994>
c000df3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df40:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df43:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000df48:	39 c2                	cmp    edx,eax
c000df4a:	75 2c                	jne    c000df78 <tcp_process+0x994>
c000df4c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000df51:	83 c8 10             	or     eax,0x10
c000df54:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000df59:	eb 1d                	jmp    c000df78 <tcp_process+0x994>
c000df5b:	90                   	nop
c000df5c:	90                   	nop
c000df5d:	eb 1d                	jmp    c000df7c <tcp_process+0x998>
c000df5f:	90                   	nop
c000df60:	90                   	nop
c000df61:	eb 19                	jmp    c000df7c <tcp_process+0x998>
c000df63:	90                   	nop
c000df64:	90                   	nop
c000df65:	eb 15                	jmp    c000df7c <tcp_process+0x998>
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	eb 11                	jmp    c000df7c <tcp_process+0x998>
c000df6b:	90                   	nop
c000df6c:	90                   	nop
c000df6d:	eb 0d                	jmp    c000df7c <tcp_process+0x998>
c000df6f:	90                   	nop
c000df70:	90                   	nop
c000df71:	eb 09                	jmp    c000df7c <tcp_process+0x998>
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	eb 05                	jmp    c000df7c <tcp_process+0x998>
c000df77:	90                   	nop
c000df78:	90                   	nop
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	b0 00                	mov    al,0x0
c000df7e:	66 90                	xchg   ax,ax
c000df80:	83 c4 18             	add    esp,0x18
c000df83:	5b                   	pop    ebx
c000df84:	c3                   	ret    
c000df85:	8d 76 00             	lea    esi,[esi+0x0]

c000df88 <tcp_input>:
c000df88:	53                   	push   ebx
c000df89:	83 ec 18             	sub    esp,0x18
c000df8c:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000df92:	83 c0 01             	add    eax,0x1
c000df95:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000df9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfa2:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000dfa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfab:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dfae:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000dfb3:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dfb6:	0f b7 c0             	movzx  eax,ax
c000dfb9:	83 ec 0c             	sub    esp,0xc
c000dfbc:	50                   	push   eax
c000dfbd:	e8 5a 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	0f b7 c0             	movzx  eax,ax
c000dfc8:	c1 e8 08             	shr    eax,0x8
c000dfcb:	0f b7 c0             	movzx  eax,ax
c000dfce:	83 e0 0f             	and    eax,0xf
c000dfd1:	c1 e0 02             	shl    eax,0x2
c000dfd4:	01 d8                	add    eax,ebx
c000dfd6:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000dfdb:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000dfe0:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dfe3:	0f b7 c0             	movzx  eax,ax
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	50                   	push   eax
c000dfea:	e8 2d 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	0f b7 c0             	movzx  eax,ax
c000dff5:	c1 e8 08             	shr    eax,0x8
c000dff8:	83 e0 0f             	and    eax,0xf
c000dffb:	c1 e0 02             	shl    eax,0x2
c000dffe:	f7 d8                	neg    eax
c000e000:	98                   	cwde   
c000e001:	83 ec 08             	sub    esp,0x8
c000e004:	50                   	push   eax
c000e005:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e009:	e8 da a1 ff ff       	call   c00081e8 <pbuf_header>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	0f b6 c0             	movzx  eax,al
c000e014:	85 c0                	test   eax,eax
c000e016:	75 10                	jne    c000e028 <tcp_input+0xa0>
c000e018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e01c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e01f:	0f b7 c0             	movzx  eax,ax
c000e022:	83 f8 13             	cmp    eax,0x13
c000e025:	77 35                	ja     c000e05c <tcp_input+0xd4>
c000e027:	90                   	nop
c000e028:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e02e:	83 c0 01             	add    eax,0x1
c000e031:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e037:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e03d:	83 c0 01             	add    eax,0x1
c000e040:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04d:	e8 36 a3 ff ff       	call   c0008388 <pbuf_free>
c000e052:	83 c4 10             	add    esp,0x10
c000e055:	e9 fe 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e05a:	66 90                	xchg   ax,ax
c000e05c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e061:	83 ec 08             	sub    esp,0x8
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	50                   	push   eax
c000e069:	e8 be 5e 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c000e06e:	83 c4 10             	add    esp,0x10
c000e071:	0f b6 c0             	movzx  eax,al
c000e074:	85 c0                	test   eax,eax
c000e076:	75 14                	jne    c000e08c <tcp_input+0x104>
c000e078:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e07d:	25 f0 00 00 00       	and    eax,0xf0
c000e082:	3d e0 00 00 00       	cmp    eax,0xe0
c000e087:	75 37                	jne    c000e0c0 <tcp_input+0x138>
c000e089:	8d 76 00             	lea    esi,[esi+0x0]
c000e08c:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e092:	83 c0 01             	add    eax,0x1
c000e095:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e09b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e0a1:	83 c0 01             	add    eax,0x1
c000e0a4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e0aa:	83 ec 0c             	sub    esp,0xc
c000e0ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b1:	e8 d2 a2 ff ff       	call   c0008388 <pbuf_free>
c000e0b6:	83 c4 10             	add    esp,0x10
c000e0b9:	e9 9a 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e0be:	66 90                	xchg   ax,ax
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0c7:	0f b7 c0             	movzx  eax,ax
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	50                   	push   eax
c000e0ce:	6a 06                	push   0x6
c000e0d0:	68 98 68 03 c0       	push   0xc0036898
c000e0d5:	68 90 68 03 c0       	push   0xc0036890
c000e0da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e0de:	e8 61 51 00 00       	call   c0013244 <inet_chksum_pseudo>
c000e0e3:	83 c4 20             	add    esp,0x20
c000e0e6:	0f b7 c0             	movzx  eax,ax
c000e0e9:	85 c0                	test   eax,eax
c000e0eb:	74 33                	je     c000e120 <tcp_input+0x198>
c000e0ed:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e0f3:	83 c0 01             	add    eax,0x1
c000e0f6:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e0fc:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e102:	83 c0 01             	add    eax,0x1
c000e105:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e112:	e8 71 a2 ff ff       	call   c0008388 <pbuf_free>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	e9 39 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e11f:	90                   	nop
c000e120:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e125:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e129:	0f b7 c0             	movzx  eax,ax
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	50                   	push   eax
c000e130:	e8 e7 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	0f b7 c0             	movzx  eax,ax
c000e13b:	c1 e8 0c             	shr    eax,0xc
c000e13e:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e142:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e147:	ba 00 00 00 00       	mov    edx,0x0
c000e14c:	89 d1                	mov    ecx,edx
c000e14e:	29 c1                	sub    ecx,eax
c000e150:	89 c8                	mov    eax,ecx
c000e152:	c1 e0 02             	shl    eax,0x2
c000e155:	98                   	cwde   
c000e156:	83 ec 08             	sub    esp,0x8
c000e159:	50                   	push   eax
c000e15a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15e:	e8 85 a0 ff ff       	call   c00081e8 <pbuf_header>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	0f b6 c0             	movzx  eax,al
c000e169:	85 c0                	test   eax,eax
c000e16b:	74 33                	je     c000e1a0 <tcp_input+0x218>
c000e16d:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e173:	83 c0 01             	add    eax,0x1
c000e176:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e17c:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e182:	83 c0 01             	add    eax,0x1
c000e185:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e18b:	83 ec 0c             	sub    esp,0xc
c000e18e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e192:	e8 f1 a1 ff ff       	call   c0008388 <pbuf_free>
c000e197:	83 c4 10             	add    esp,0x10
c000e19a:	e9 b9 08 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e19f:	90                   	nop
c000e1a0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e1a8:	0f b7 c0             	movzx  eax,ax
c000e1ab:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	50                   	push   eax
c000e1b5:	e8 62 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	66 89 03             	mov    WORD PTR [ebx],ax
c000e1c0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1c5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e1c9:	0f b7 c0             	movzx  eax,ax
c000e1cc:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	50                   	push   eax
c000e1d6:	e8 41 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1db:	83 c4 10             	add    esp,0x10
c000e1de:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e1e2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1ea:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1f0:	83 ec 0c             	sub    esp,0xc
c000e1f3:	50                   	push   eax
c000e1f4:	e8 47 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e1f9:	83 c4 10             	add    esp,0x10
c000e1fc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e1ff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e202:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e207:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e20c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e20f:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	50                   	push   eax
c000e219:	e8 22 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e21e:	83 c4 10             	add    esp,0x10
c000e221:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e224:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e227:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e22c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e231:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e235:	0f b7 c0             	movzx  eax,ax
c000e238:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e23e:	83 ec 0c             	sub    esp,0xc
c000e241:	50                   	push   eax
c000e242:	e8 d5 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e247:	83 c4 10             	add    esp,0x10
c000e24a:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e24e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e253:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e257:	0f b7 c0             	movzx  eax,ax
c000e25a:	83 ec 0c             	sub    esp,0xc
c000e25d:	50                   	push   eax
c000e25e:	e8 b9 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e263:	83 c4 10             	add    esp,0x10
c000e266:	83 e0 3f             	and    eax,0x3f
c000e269:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e272:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e275:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e27a:	0f b6 c0             	movzx  eax,al
c000e27d:	83 e0 03             	and    eax,0x3
c000e280:	0f 95 c0             	setne  al
c000e283:	0f b6 c0             	movzx  eax,al
c000e286:	01 d0                	add    eax,edx
c000e288:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e28e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e296:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e29b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e29f:	e9 50 01 00 00       	jmp    c000e3f4 <tcp_input+0x46c>
c000e2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2ab:	85 c0                	test   eax,eax
c000e2ad:	75 15                	jne    c000e2c4 <tcp_input+0x33c>
c000e2af:	83 ec 08             	sub    esp,0x8
c000e2b2:	68 d0 05 03 c0       	push   0xc00305d0
c000e2b7:	68 66 fb 02 c0       	push   0xc002fb66
c000e2bc:	e8 c3 18 01 00       	call   c001fb84 <CPrintf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2cb:	83 f8 0a             	cmp    eax,0xa
c000e2ce:	75 18                	jne    c000e2e8 <tcp_input+0x360>
c000e2d0:	83 ec 08             	sub    esp,0x8
c000e2d3:	68 f8 05 03 c0       	push   0xc00305f8
c000e2d8:	68 66 fb 02 c0       	push   0xc002fb66
c000e2dd:	e8 a2 18 01 00       	call   c001fb84 <CPrintf>
c000e2e2:	83 c4 10             	add    esp,0x10
c000e2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2ef:	83 f8 01             	cmp    eax,0x1
c000e2f2:	75 18                	jne    c000e30c <tcp_input+0x384>
c000e2f4:	83 ec 08             	sub    esp,0x8
c000e2f7:	68 24 06 03 c0       	push   0xc0030624
c000e2fc:	68 66 fb 02 c0       	push   0xc002fb66
c000e301:	e8 7e 18 01 00       	call   c001fb84 <CPrintf>
c000e306:	83 c4 10             	add    esp,0x10
c000e309:	8d 76 00             	lea    esi,[esi+0x0]
c000e30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e310:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e314:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e319:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e31c:	0f b7 d2             	movzx  edx,dx
c000e31f:	0f b7 c0             	movzx  eax,ax
c000e322:	39 c2                	cmp    edx,eax
c000e324:	0f 85 b6 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e32e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e331:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e336:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e33a:	0f b7 d2             	movzx  edx,dx
c000e33d:	0f b7 c0             	movzx  eax,ax
c000e340:	39 c2                	cmp    edx,eax
c000e342:	0f 85 98 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e34c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e34f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e354:	39 c2                	cmp    edx,eax
c000e356:	0f 85 84 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e360:	8b 10                	mov    edx,DWORD PTR [eax]
c000e362:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e367:	39 c2                	cmp    edx,eax
c000e369:	75 75                	jne    c000e3e0 <tcp_input+0x458>
c000e36b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e36f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e372:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e376:	75 18                	jne    c000e390 <tcp_input+0x408>
c000e378:	83 ec 08             	sub    esp,0x8
c000e37b:	68 4c 06 03 c0       	push   0xc003064c
c000e380:	68 66 fb 02 c0       	push   0xc002fb66
c000e385:	e8 fa 17 01 00       	call   c001fb84 <CPrintf>
c000e38a:	83 c4 10             	add    esp,0x10
c000e38d:	8d 76 00             	lea    esi,[esi+0x0]
c000e390:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e395:	74 25                	je     c000e3bc <tcp_input+0x434>
c000e397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e39b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3a5:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e3ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e3bb:	90                   	nop
c000e3bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3c3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e3c7:	75 3b                	jne    c000e404 <tcp_input+0x47c>
c000e3c9:	83 ec 08             	sub    esp,0x8
c000e3cc:	68 78 06 03 c0       	push   0xc0030678
c000e3d1:	68 66 fb 02 c0       	push   0xc002fb66
c000e3d6:	e8 a9 17 01 00       	call   c001fb84 <CPrintf>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	eb 24                	jmp    c000e404 <tcp_input+0x47c>
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3f3:	90                   	nop
c000e3f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e3f9:	0f 85 a5 fe ff ff    	jne    c000e2a4 <tcp_input+0x31c>
c000e3ff:	eb 07                	jmp    c000e408 <tcp_input+0x480>
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	90                   	nop
c000e405:	8d 76 00             	lea    esi,[esi+0x0]
c000e408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e40d:	0f 85 89 01 00 00    	jne    c000e59c <tcp_input+0x614>
c000e413:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e41c:	e9 ab 00 00 00       	jmp    c000e4cc <tcp_input+0x544>
c000e421:	8d 76 00             	lea    esi,[esi+0x0]
c000e424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e428:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e42b:	83 f8 0a             	cmp    eax,0xa
c000e42e:	74 18                	je     c000e448 <tcp_input+0x4c0>
c000e430:	83 ec 08             	sub    esp,0x8
c000e433:	68 a4 06 03 c0       	push   0xc00306a4
c000e438:	68 66 fb 02 c0       	push   0xc002fb66
c000e43d:	e8 42 17 01 00       	call   c001fb84 <CPrintf>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	8d 76 00             	lea    esi,[esi+0x0]
c000e448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e450:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e455:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e458:	0f b7 d2             	movzx  edx,dx
c000e45b:	0f b7 c0             	movzx  eax,ax
c000e45e:	39 c2                	cmp    edx,eax
c000e460:	75 5e                	jne    c000e4c0 <tcp_input+0x538>
c000e462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e466:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e469:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e46e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e472:	0f b7 d2             	movzx  edx,dx
c000e475:	0f b7 c0             	movzx  eax,ax
c000e478:	39 c2                	cmp    edx,eax
c000e47a:	75 44                	jne    c000e4c0 <tcp_input+0x538>
c000e47c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e480:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e483:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e488:	39 c2                	cmp    edx,eax
c000e48a:	75 34                	jne    c000e4c0 <tcp_input+0x538>
c000e48c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e490:	8b 10                	mov    edx,DWORD PTR [eax]
c000e492:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e497:	39 c2                	cmp    edx,eax
c000e499:	75 25                	jne    c000e4c0 <tcp_input+0x538>
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4a2:	e8 45 d4 ff ff       	call   c000b8ec <tcp_timewait_input>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	83 ec 0c             	sub    esp,0xc
c000e4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4b1:	e8 d2 9e ff ff       	call   c0008388 <pbuf_free>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	e9 9a 05 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e4be:	66 90                	xchg   ax,ax
c000e4c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4cb:	90                   	nop
c000e4cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e4d1:	0f 85 4d ff ff ff    	jne    c000e424 <tcp_input+0x49c>
c000e4d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e4df:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e4e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4e8:	eb 52                	jmp    c000e53c <tcp_input+0x5b4>
c000e4ea:	66 90                	xchg   ax,ax
c000e4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4f0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e4f3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4f8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e4fc:	0f b7 d2             	movzx  edx,dx
c000e4ff:	0f b7 c0             	movzx  eax,ax
c000e502:	39 c2                	cmp    edx,eax
c000e504:	75 22                	jne    c000e528 <tcp_input+0x5a0>
c000e506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e50c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e511:	39 c2                	cmp    edx,eax
c000e513:	74 2f                	je     c000e544 <tcp_input+0x5bc>
c000e515:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e519:	85 c0                	test   eax,eax
c000e51b:	74 27                	je     c000e544 <tcp_input+0x5bc>
c000e51d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e521:	8b 00                	mov    eax,DWORD PTR [eax]
c000e523:	85 c0                	test   eax,eax
c000e525:	74 1d                	je     c000e544 <tcp_input+0x5bc>
c000e527:	90                   	nop
c000e528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e52c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e534:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e53b:	90                   	nop
c000e53c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e541:	75 a9                	jne    c000e4ec <tcp_input+0x564>
c000e543:	90                   	nop
c000e544:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e549:	74 51                	je     c000e59c <tcp_input+0x614>
c000e54b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e550:	74 26                	je     c000e578 <tcp_input+0x5f0>
c000e552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e556:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e55d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e560:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e56a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e571:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e576:	66 90                	xchg   ax,ax
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e57f:	e8 4c ee ff ff       	call   c000d3d0 <tcp_listen_input>
c000e584:	83 c4 10             	add    esp,0x10
c000e587:	83 ec 0c             	sub    esp,0xc
c000e58a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e58e:	e8 f5 9d ff ff       	call   c0008388 <pbuf_free>
c000e593:	83 c4 10             	add    esp,0x10
c000e596:	e9 bd 04 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e59b:	90                   	nop
c000e59c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5a1:	0f 84 1d 04 00 00    	je     c000e9c4 <tcp_input+0xa3c>
c000e5a7:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e5b8:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c2:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e5c7:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5cc:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e5d1:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e5db:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e5e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e6:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e5ec:	85 c0                	test   eax,eax
c000e5ee:	0f 84 b4 00 00 00    	je     c000e6a8 <tcp_input+0x720>
c000e5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f8:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e5fe:	85 c0                	test   eax,eax
c000e600:	74 2e                	je     c000e630 <tcp_input+0x6a8>
c000e602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e606:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e60c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e610:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e616:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e61a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e61d:	6a 00                	push   0x0
c000e61f:	51                   	push   ecx
c000e620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e624:	52                   	push   edx
c000e625:	ff d0                	call   eax
c000e627:	83 c4 10             	add    esp,0x10
c000e62a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e62e:	eb 20                	jmp    c000e650 <tcp_input+0x6c8>
c000e630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e634:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e63a:	6a 00                	push   0x0
c000e63c:	50                   	push   eax
c000e63d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e641:	6a 00                	push   0x0
c000e643:	e8 74 c8 ff ff       	call   c000aebc <tcp_recv_null>
c000e648:	83 c4 10             	add    esp,0x10
c000e64b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e64f:	90                   	nop
c000e650:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e655:	85 c0                	test   eax,eax
c000e657:	75 13                	jne    c000e66c <tcp_input+0x6e4>
c000e659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e65d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e667:	eb 3f                	jmp    c000e6a8 <tcp_input+0x720>
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e671:	83 f8 f6             	cmp    eax,0xfffffff6
c000e674:	74 0e                	je     c000e684 <tcp_input+0x6fc>
c000e676:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e67c:	0f b7 c0             	movzx  eax,ax
c000e67f:	85 c0                	test   eax,eax
c000e681:	74 25                	je     c000e6a8 <tcp_input+0x720>
c000e683:	90                   	nop
c000e684:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e68a:	83 c0 01             	add    eax,0x1
c000e68d:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e69a:	e8 e9 9c ff ff       	call   c0008388 <pbuf_free>
c000e69f:	83 c4 10             	add    esp,0x10
c000e6a2:	e9 b1 03 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e6a7:	90                   	nop
c000e6a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6ac:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e6b1:	83 ec 0c             	sub    esp,0xc
c000e6b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6b8:	e8 27 ef ff ff       	call   c000d5e4 <tcp_process>
c000e6bd:	83 c4 10             	add    esp,0x10
c000e6c0:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e6c4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e6c9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e6cc:	0f 84 9e 02 00 00    	je     c000e970 <tcp_input+0x9e8>
c000e6d2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e6d7:	0f b6 c0             	movzx  eax,al
c000e6da:	83 e0 08             	and    eax,0x8
c000e6dd:	74 59                	je     c000e738 <tcp_input+0x7b0>
c000e6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6e3:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e6e9:	85 c0                	test   eax,eax
c000e6eb:	74 1f                	je     c000e70c <tcp_input+0x784>
c000e6ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6f1:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e6f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6fb:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6fe:	83 ec 08             	sub    esp,0x8
c000e701:	6a f5                	push   0xfffffff5
c000e703:	52                   	push   edx
c000e704:	ff d0                	call   eax
c000e706:	83 c4 10             	add    esp,0x10
c000e709:	8d 76 00             	lea    esi,[esi+0x0]
c000e70c:	83 ec 08             	sub    esp,0x8
c000e70f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e713:	68 70 68 03 c0       	push   0xc0036870
c000e718:	e8 bb c2 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	83 ec 08             	sub    esp,0x8
c000e723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e727:	6a 02                	push   0x2
c000e729:	e8 9a 93 ff ff       	call   c0007ac8 <memp_free>
c000e72e:	83 c4 10             	add    esp,0x10
c000e731:	e9 4a 02 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e736:	66 90                	xchg   ax,ax
c000e738:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e73d:	0f b6 c0             	movzx  eax,al
c000e740:	83 e0 10             	and    eax,0x10
c000e743:	74 2b                	je     c000e770 <tcp_input+0x7e8>
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e74c:	68 70 68 03 c0       	push   0xc0036870
c000e751:	e8 82 c2 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	83 ec 08             	sub    esp,0x8
c000e75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e760:	6a 02                	push   0x2
c000e762:	e8 61 93 ff ff       	call   c0007ac8 <memp_free>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	e9 11 02 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e76f:	90                   	nop
c000e770:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e77c:	0f b7 c0             	movzx  eax,ax
c000e77f:	85 c0                	test   eax,eax
c000e781:	74 55                	je     c000e7d8 <tcp_input+0x850>
c000e783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e787:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e78d:	85 c0                	test   eax,eax
c000e78f:	74 2f                	je     c000e7c0 <tcp_input+0x838>
c000e791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e795:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e79b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e79f:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e7a2:	0f b7 ca             	movzx  ecx,dx
c000e7a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a9:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7ac:	83 ec 04             	sub    esp,0x4
c000e7af:	51                   	push   ecx
c000e7b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b4:	52                   	push   edx
c000e7b5:	ff d0                	call   eax
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7be:	eb 08                	jmp    c000e7c8 <tcp_input+0x840>
c000e7c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7cd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7d0:	0f 84 9e 01 00 00    	je     c000e974 <tcp_input+0x9ec>
c000e7d6:	66 90                	xchg   ax,ax
c000e7d8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7dd:	85 c0                	test   eax,eax
c000e7df:	0f 84 f3 00 00 00    	je     c000e8d8 <tcp_input+0x950>
c000e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e7ef:	85 c0                	test   eax,eax
c000e7f1:	74 15                	je     c000e808 <tcp_input+0x880>
c000e7f3:	83 ec 08             	sub    esp,0x8
c000e7f6:	68 3d 07 03 c0       	push   0xc003073d
c000e7fb:	68 66 fb 02 c0       	push   0xc002fb66
c000e800:	e8 7f 13 01 00       	call   c001fb84 <CPrintf>
c000e805:	83 c4 10             	add    esp,0x10
c000e808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e80f:	0f b6 c0             	movzx  eax,al
c000e812:	83 e0 10             	and    eax,0x10
c000e815:	74 25                	je     c000e83c <tcp_input+0x8b4>
c000e817:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e81c:	83 ec 0c             	sub    esp,0xc
c000e81f:	50                   	push   eax
c000e820:	e8 63 9b ff ff       	call   c0008388 <pbuf_free>
c000e825:	83 c4 10             	add    esp,0x10
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e82f:	e8 80 ca ff ff       	call   c000b2b4 <tcp_abort>
c000e834:	83 c4 10             	add    esp,0x10
c000e837:	e9 44 01 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e83c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e841:	0f b6 c0             	movzx  eax,al
c000e844:	83 e0 08             	and    eax,0x8
c000e847:	74 13                	je     c000e85c <tcp_input+0x8d4>
c000e849:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e84e:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e851:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e856:	83 ca 01             	or     edx,0x1
c000e859:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e85c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e860:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e866:	85 c0                	test   eax,eax
c000e868:	74 2a                	je     c000e894 <tcp_input+0x90c>
c000e86a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e874:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e87e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e881:	6a 00                	push   0x0
c000e883:	51                   	push   ecx
c000e884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e888:	52                   	push   edx
c000e889:	ff d0                	call   eax
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e892:	eb 1c                	jmp    c000e8b0 <tcp_input+0x928>
c000e894:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e899:	6a 00                	push   0x0
c000e89b:	50                   	push   eax
c000e89c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8a0:	6a 00                	push   0x0
c000e8a2:	e8 15 c6 ff ff       	call   c000aebc <tcp_recv_null>
c000e8a7:	83 c4 10             	add    esp,0x10
c000e8aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8ae:	66 90                	xchg   ax,ax
c000e8b0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8b5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8b8:	0f 84 ba 00 00 00    	je     c000e978 <tcp_input+0x9f0>
c000e8be:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8c3:	85 c0                	test   eax,eax
c000e8c5:	74 11                	je     c000e8d8 <tcp_input+0x950>
c000e8c7:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e8cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8d1:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e8d7:	90                   	nop
c000e8d8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e8dd:	0f b6 c0             	movzx  eax,al
c000e8e0:	83 e0 20             	and    eax,0x20
c000e8e3:	74 6f                	je     c000e954 <tcp_input+0x9cc>
c000e8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8e9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e8ec:	0f b7 c0             	movzx  eax,ax
c000e8ef:	3d 60 08 00 00       	cmp    eax,0x860
c000e8f4:	74 16                	je     c000e90c <tcp_input+0x984>
c000e8f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8fa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e8fd:	83 c0 01             	add    eax,0x1
c000e900:	89 c2                	mov    edx,eax
c000e902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e906:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000e90a:	66 90                	xchg   ax,ax
c000e90c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e910:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e916:	85 c0                	test   eax,eax
c000e918:	74 26                	je     c000e940 <tcp_input+0x9b8>
c000e91a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e91e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e928:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e92b:	6a 00                	push   0x0
c000e92d:	6a 00                	push   0x0
c000e92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e933:	52                   	push   edx
c000e934:	ff d0                	call   eax
c000e936:	83 c4 10             	add    esp,0x10
c000e939:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e93d:	eb 09                	jmp    c000e948 <tcp_input+0x9c0>
c000e93f:	90                   	nop
c000e940:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e945:	8d 76 00             	lea    esi,[esi+0x0]
c000e948:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e94d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e950:	74 2a                	je     c000e97c <tcp_input+0x9f4>
c000e952:	66 90                	xchg   ax,ax
c000e954:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e965:	e8 be 15 00 00       	call   c000ff28 <tcp_output>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	eb 11                	jmp    c000e980 <tcp_input+0x9f8>
c000e96f:	90                   	nop
c000e970:	90                   	nop
c000e971:	eb 0d                	jmp    c000e980 <tcp_input+0x9f8>
c000e973:	90                   	nop
c000e974:	90                   	nop
c000e975:	eb 09                	jmp    c000e980 <tcp_input+0x9f8>
c000e977:	90                   	nop
c000e978:	90                   	nop
c000e979:	eb 05                	jmp    c000e980 <tcp_input+0x9f8>
c000e97b:	90                   	nop
c000e97c:	90                   	nop
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]
c000e980:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e98a:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e994:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e999:	85 c0                	test   eax,eax
c000e99b:	0f 84 b7 00 00 00    	je     c000ea58 <tcp_input+0xad0>
c000e9a1:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e9a6:	83 ec 0c             	sub    esp,0xc
c000e9a9:	50                   	push   eax
c000e9aa:	e8 d9 99 ff ff       	call   c0008388 <pbuf_free>
c000e9af:	83 c4 10             	add    esp,0x10
c000e9b2:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e9bc:	e9 97 00 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e9c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9c4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e9c9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e9cd:	0f b7 c0             	movzx  eax,ax
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	50                   	push   eax
c000e9d4:	e8 43 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e9d9:	83 c4 10             	add    esp,0x10
c000e9dc:	0f b7 c0             	movzx  eax,ax
c000e9df:	83 e0 04             	and    eax,0x4
c000e9e2:	75 64                	jne    c000ea48 <tcp_input+0xac0>
c000e9e4:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e9ea:	83 c0 01             	add    eax,0x1
c000e9ed:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e9f3:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e9f9:	83 c0 01             	add    eax,0x1
c000e9fc:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000ea02:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000ea07:	66 8b 00             	mov    ax,WORD PTR [eax]
c000ea0a:	0f b7 c8             	movzx  ecx,ax
c000ea0d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000ea12:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000ea16:	0f b7 d0             	movzx  edx,ax
c000ea19:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ea1f:	0f b7 d8             	movzx  ebx,ax
c000ea22:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ea27:	01 c3                	add    ebx,eax
c000ea29:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	51                   	push   ecx
c000ea32:	52                   	push   edx
c000ea33:	68 90 68 03 c0       	push   0xc0036890
c000ea38:	68 98 68 03 c0       	push   0xc0036898
c000ea3d:	53                   	push   ebx
c000ea3e:	50                   	push   eax
c000ea3f:	e8 70 19 00 00       	call   c00103b4 <tcp_rst>
c000ea44:	83 c4 20             	add    esp,0x20
c000ea47:	90                   	nop
c000ea48:	83 ec 0c             	sub    esp,0xc
c000ea4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea4f:	e8 34 99 ff ff       	call   c0008388 <pbuf_free>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	90                   	nop
c000ea58:	83 c4 18             	add    esp,0x18
c000ea5b:	5b                   	pop    ebx
c000ea5c:	c3                   	ret    
c000ea5d:	66 90                	xchg   ax,ax
c000ea5f:	90                   	nop

c000ea60 <tcp_output_alloc_header>:
c000ea60:	83 ec 2c             	sub    esp,0x2c
c000ea63:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea6b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ea70:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ea75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea7d:	01 d0                	add    eax,edx
c000ea7f:	83 c0 14             	add    eax,0x14
c000ea82:	0f b7 c0             	movzx  eax,ax
c000ea85:	83 ec 04             	sub    esp,0x4
c000ea88:	6a 00                	push   0x0
c000ea8a:	50                   	push   eax
c000ea8b:	6a 01                	push   0x1
c000ea8d:	e8 d2 9a ff ff       	call   c0008564 <pbuf_alloc>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea99:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ea9e:	0f 84 18 01 00 00    	je     c000ebbc <tcp_output_alloc_header+0x15c>
c000eaa4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eaa9:	8d 50 13             	lea    edx,[eax+0x13]
c000eaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000eab4:	0f b7 c0             	movzx  eax,ax
c000eab7:	39 c2                	cmp    edx,eax
c000eab9:	7c 15                	jl     c000ead0 <tcp_output_alloc_header+0x70>
c000eabb:	83 ec 08             	sub    esp,0x8
c000eabe:	68 80 07 03 c0       	push   0xc0030780
c000eac3:	68 66 fb 02 c0       	push   0xc002fb66
c000eac8:	e8 b7 10 01 00       	call   c001fb84 <CPrintf>
c000eacd:	83 c4 10             	add    esp,0x10
c000ead0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ead4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ead7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eadb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eadf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eae2:	0f b7 c0             	movzx  eax,ax
c000eae5:	83 ec 0c             	sub    esp,0xc
c000eae8:	50                   	push   eax
c000eae9:	e8 2e 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eaee:	83 c4 10             	add    esp,0x10
c000eaf1:	89 c2                	mov    edx,eax
c000eaf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaf7:	66 89 10             	mov    WORD PTR [eax],dx
c000eafa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eafe:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000eb02:	0f b7 c0             	movzx  eax,ax
c000eb05:	83 ec 0c             	sub    esp,0xc
c000eb08:	50                   	push   eax
c000eb09:	e8 0e 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	89 c2                	mov    edx,eax
c000eb13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb17:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000eb1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eb23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb2a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eb2d:	83 ec 0c             	sub    esp,0xc
c000eb30:	50                   	push   eax
c000eb31:	e8 0a 21 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	89 c2                	mov    edx,eax
c000eb3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eb42:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eb47:	c1 e8 02             	shr    eax,0x2
c000eb4a:	83 c0 05             	add    eax,0x5
c000eb4d:	c1 e0 0c             	shl    eax,0xc
c000eb50:	83 c8 10             	or     eax,0x10
c000eb53:	0f b7 c0             	movzx  eax,ax
c000eb56:	83 ec 0c             	sub    esp,0xc
c000eb59:	50                   	push   eax
c000eb5a:	e8 bd 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb5f:	83 c4 10             	add    esp,0x10
c000eb62:	89 c2                	mov    edx,eax
c000eb64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb68:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000eb6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb70:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eb74:	0f b7 c0             	movzx  eax,ax
c000eb77:	83 ec 0c             	sub    esp,0xc
c000eb7a:	50                   	push   eax
c000eb7b:	e8 9c 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 c2                	mov    edx,eax
c000eb85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb89:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000eb8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb91:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eb97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb9b:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebac:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ebb0:	0f b7 c0             	movzx  eax,ax
c000ebb3:	01 c2                	add    edx,eax
c000ebb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebb9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ebbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc0:	83 c4 2c             	add    esp,0x2c
c000ebc3:	c3                   	ret    

c000ebc4 <tcp_create_segment>:
c000ebc4:	53                   	push   ebx
c000ebc5:	83 ec 28             	sub    esp,0x28
c000ebc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebcc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ebd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ebd4:	88 d0                	mov    al,dl
c000ebd6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ebda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ebdf:	c1 e0 02             	shl    eax,0x2
c000ebe2:	83 e0 04             	and    eax,0x4
c000ebe5:	88 c2                	mov    dl,al
c000ebe7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ebec:	83 e0 02             	and    eax,0x2
c000ebef:	74 07                	je     c000ebf8 <tcp_create_segment+0x34>
c000ebf1:	b0 0c                	mov    al,0xc
c000ebf3:	eb 07                	jmp    c000ebfc <tcp_create_segment+0x38>
c000ebf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf8:	b0 00                	mov    al,0x0
c000ebfa:	66 90                	xchg   ax,ax
c000ebfc:	01 d0                	add    eax,edx
c000ebfe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ec02:	83 ec 0c             	sub    esp,0xc
c000ec05:	6a 04                	push   0x4
c000ec07:	e8 90 8d ff ff       	call   c000799c <memp_malloc>
c000ec0c:	83 c4 10             	add    esp,0x10
c000ec0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec13:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ec18:	75 1a                	jne    c000ec34 <tcp_create_segment+0x70>
c000ec1a:	83 ec 0c             	sub    esp,0xc
c000ec1d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec21:	e8 62 97 ff ff       	call   c0008388 <pbuf_free>
c000ec26:	83 c4 10             	add    esp,0x10
c000ec29:	b8 00 00 00 00       	mov    eax,0x0
c000ec2e:	e9 31 01 00 00       	jmp    c000ed64 <tcp_create_segment+0x1a0>
c000ec33:	90                   	nop
c000ec34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec38:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ec3c:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ec3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec4d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec58:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ec5b:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec60:	89 d1                	mov    ecx,edx
c000ec62:	29 c1                	sub    ecx,eax
c000ec64:	89 c8                	mov    eax,ecx
c000ec66:	89 c2                	mov    edx,eax
c000ec68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec6c:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ec70:	83 ec 08             	sub    esp,0x8
c000ec73:	6a 14                	push   0x14
c000ec75:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec79:	e8 6a 95 ff ff       	call   c00081e8 <pbuf_header>
c000ec7e:	83 c4 10             	add    esp,0x10
c000ec81:	0f b6 c0             	movzx  eax,al
c000ec84:	85 c0                	test   eax,eax
c000ec86:	74 28                	je     c000ecb0 <tcp_create_segment+0xec>
c000ec88:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ec8e:	83 c0 01             	add    eax,0x1
c000ec91:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ec97:	83 ec 0c             	sub    esp,0xc
c000ec9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec9e:	e8 71 b3 ff ff       	call   c000a014 <tcp_seg_free>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	b8 00 00 00 00       	mov    eax,0x0
c000ecab:	e9 b4 00 00 00       	jmp    c000ed64 <tcp_create_segment+0x1a0>
c000ecb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecb7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ecc8:	0f b7 c0             	movzx  eax,ax
c000eccb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eccf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecd2:	83 ec 0c             	sub    esp,0xc
c000ecd5:	50                   	push   eax
c000ecd6:	e8 41 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	66 89 03             	mov    WORD PTR [ebx],ax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ece9:	0f b7 c0             	movzx  eax,ax
c000ecec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecf0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecf3:	83 ec 0c             	sub    esp,0xc
c000ecf6:	50                   	push   eax
c000ecf7:	e8 20 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ed03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed07:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ed0a:	83 ec 0c             	sub    esp,0xc
c000ed0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ed11:	e8 2a 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ed16:	83 c4 10             	add    esp,0x10
c000ed19:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ed1c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed21:	c1 e8 02             	shr    eax,0x2
c000ed24:	0f b6 c0             	movzx  eax,al
c000ed27:	83 c0 05             	add    eax,0x5
c000ed2a:	c1 e0 0c             	shl    eax,0xc
c000ed2d:	89 c2                	mov    edx,eax
c000ed2f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ed34:	09 d0                	or     eax,edx
c000ed36:	0f b7 c0             	movzx  eax,ax
c000ed39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed3d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	50                   	push   eax
c000ed44:	e8 d3 1e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ed50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed57:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ed5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed61:	8d 76 00             	lea    esi,[esi+0x0]
c000ed64:	83 c4 28             	add    esp,0x28
c000ed67:	5b                   	pop    ebx
c000ed68:	c3                   	ret    
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]

c000ed6c <tcp_pbuf_prealloc>:
c000ed6c:	53                   	push   ebx
c000ed6d:	83 ec 28             	sub    esp,0x28
c000ed70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed78:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ed7c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ed80:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ed85:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed8a:	88 d8                	mov    al,bl
c000ed8c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed90:	88 c8                	mov    al,cl
c000ed92:	88 04 24             	mov    BYTE PTR [esp],al
c000ed95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed99:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed9e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eda3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eda8:	39 c2                	cmp    edx,eax
c000edaa:	73 64                	jae    c000ee10 <tcp_pbuf_prealloc+0xa4>
c000edac:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000edb1:	83 e0 02             	and    eax,0x2
c000edb4:	75 2e                	jne    c000ede4 <tcp_pbuf_prealloc+0x78>
c000edb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edba:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000edbd:	0f b6 c0             	movzx  eax,al
c000edc0:	83 e0 40             	and    eax,0x40
c000edc3:	75 4b                	jne    c000ee10 <tcp_pbuf_prealloc+0xa4>
c000edc5:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000edc9:	85 c0                	test   eax,eax
c000edcb:	74 17                	je     c000ede4 <tcp_pbuf_prealloc+0x78>
c000edcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edd1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000edd4:	85 c0                	test   eax,eax
c000edd6:	75 0c                	jne    c000ede4 <tcp_pbuf_prealloc+0x78>
c000edd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eddc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eddf:	85 c0                	test   eax,eax
c000ede1:	74 2d                	je     c000ee10 <tcp_pbuf_prealloc+0xa4>
c000ede3:	90                   	nop
c000ede4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ede9:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000edef:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000edf4:	39 c2                	cmp    edx,eax
c000edf6:	7d 0c                	jge    c000ee04 <tcp_pbuf_prealloc+0x98>
c000edf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edfc:	05 18 02 00 00       	add    eax,0x218
c000ee01:	eb 05                	jmp    c000ee08 <tcp_pbuf_prealloc+0x9c>
c000ee03:	90                   	nop
c000ee04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee08:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee10:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ee15:	83 ec 04             	sub    esp,0x4
c000ee18:	6a 00                	push   0x0
c000ee1a:	50                   	push   eax
c000ee1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee1f:	e8 40 97 ff ff       	call   c0008564 <pbuf_alloc>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee2b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ee30:	75 0a                	jne    c000ee3c <tcp_pbuf_prealloc+0xd0>
c000ee32:	b8 00 00 00 00       	mov    eax,0x0
c000ee37:	eb 5f                	jmp    c000ee98 <tcp_pbuf_prealloc+0x12c>
c000ee39:	8d 76 00             	lea    esi,[esi+0x0]
c000ee3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee42:	85 c0                	test   eax,eax
c000ee44:	74 16                	je     c000ee5c <tcp_pbuf_prealloc+0xf0>
c000ee46:	83 ec 08             	sub    esp,0x8
c000ee49:	68 04 0a 03 c0       	push   0xc0030a04
c000ee4e:	68 66 fb 02 c0       	push   0xc002fb66
c000ee53:	e8 2c 0d 01 00       	call   c001fb84 <CPrintf>
c000ee58:	83 c4 10             	add    esp,0x10
c000ee5b:	90                   	nop
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ee64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee68:	89 d1                	mov    ecx,edx
c000ee6a:	29 c1                	sub    ecx,eax
c000ee6c:	89 c8                	mov    eax,ecx
c000ee6e:	89 c2                	mov    edx,eax
c000ee70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee74:	66 89 10             	mov    WORD PTR [eax],dx
c000ee77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee7f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ee83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ee8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee8e:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ee92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee96:	66 90                	xchg   ax,ax
c000ee98:	83 c4 28             	add    esp,0x28
c000ee9b:	5b                   	pop    ebx
c000ee9c:	c3                   	ret    
c000ee9d:	8d 76 00             	lea    esi,[esi+0x0]

c000eea0 <tcp_write_checks>:
c000eea0:	83 ec 1c             	sub    esp,0x1c
c000eea3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eea7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eeb3:	83 f8 04             	cmp    eax,0x4
c000eeb6:	74 2c                	je     c000eee4 <tcp_write_checks+0x44>
c000eeb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eebf:	83 f8 07             	cmp    eax,0x7
c000eec2:	74 20                	je     c000eee4 <tcp_write_checks+0x44>
c000eec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eecb:	83 f8 02             	cmp    eax,0x2
c000eece:	74 14                	je     c000eee4 <tcp_write_checks+0x44>
c000eed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eed7:	83 f8 03             	cmp    eax,0x3
c000eeda:	74 08                	je     c000eee4 <tcp_write_checks+0x44>
c000eedc:	b0 f3                	mov    al,0xf3
c000eede:	e9 f9 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000eee3:	90                   	nop
c000eee4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eee9:	85 c0                	test   eax,eax
c000eeeb:	75 07                	jne    c000eef4 <tcp_write_checks+0x54>
c000eeed:	b0 00                	mov    al,0x0
c000eeef:	e9 e8 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000eef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef8:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000eefc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ef01:	0f b7 c0             	movzx  eax,ax
c000ef04:	39 c2                	cmp    edx,eax
c000ef06:	76 1c                	jbe    c000ef24 <tcp_write_checks+0x84>
c000ef08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef0f:	83 c8 80             	or     eax,0xffffff80
c000ef12:	88 c2                	mov    dl,al
c000ef14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef18:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ef1b:	b0 ff                	mov    al,0xff
c000ef1d:	e9 ba 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000ef22:	66 90                	xchg   ax,ax
c000ef24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef28:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef2b:	0f b7 c0             	movzx  eax,ax
c000ef2e:	83 f8 01             	cmp    eax,0x1
c000ef31:	77 11                	ja     c000ef44 <tcp_write_checks+0xa4>
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef3a:	0f b7 c0             	movzx  eax,ax
c000ef3d:	3d fc ff 00 00       	cmp    eax,0xfffc
c000ef42:	76 28                	jbe    c000ef6c <tcp_write_checks+0xcc>
c000ef44:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ef4a:	83 c0 01             	add    eax,0x1
c000ef4d:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ef53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef57:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef5a:	83 c8 80             	or     eax,0xffffff80
c000ef5d:	88 c2                	mov    dl,al
c000ef5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef63:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ef66:	b0 ff                	mov    al,0xff
c000ef68:	eb 72                	jmp    c000efdc <tcp_write_checks+0x13c>
c000ef6a:	66 90                	xchg   ax,ax
c000ef6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef70:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef73:	0f b7 c0             	movzx  eax,ax
c000ef76:	85 c0                	test   eax,eax
c000ef78:	74 2e                	je     c000efa8 <tcp_write_checks+0x108>
c000ef7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef7e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef81:	85 c0                	test   eax,eax
c000ef83:	75 53                	jne    c000efd8 <tcp_write_checks+0x138>
c000ef85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef89:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef8c:	85 c0                	test   eax,eax
c000ef8e:	75 48                	jne    c000efd8 <tcp_write_checks+0x138>
c000ef90:	83 ec 08             	sub    esp,0x8
c000ef93:	68 b0 07 03 c0       	push   0xc00307b0
c000ef98:	68 66 fb 02 c0       	push   0xc002fb66
c000ef9d:	e8 e2 0b 01 00       	call   c001fb84 <CPrintf>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	eb 31                	jmp    c000efd8 <tcp_write_checks+0x138>
c000efa7:	90                   	nop
c000efa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efac:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000efaf:	85 c0                	test   eax,eax
c000efb1:	75 0d                	jne    c000efc0 <tcp_write_checks+0x120>
c000efb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000efba:	85 c0                	test   eax,eax
c000efbc:	74 1a                	je     c000efd8 <tcp_write_checks+0x138>
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	83 ec 08             	sub    esp,0x8
c000efc3:	68 ec 07 03 c0       	push   0xc00307ec
c000efc8:	68 66 fb 02 c0       	push   0xc002fb66
c000efcd:	e8 b2 0b 01 00       	call   c001fb84 <CPrintf>
c000efd2:	83 c4 10             	add    esp,0x10
c000efd5:	8d 76 00             	lea    esi,[esi+0x0]
c000efd8:	b0 00                	mov    al,0x0
c000efda:	66 90                	xchg   ax,ax
c000efdc:	83 c4 1c             	add    esp,0x1c
c000efdf:	c3                   	ret    

c000efe0 <tcp_write>:
c000efe0:	56                   	push   esi
c000efe1:	53                   	push   ebx
c000efe2:	83 ec 54             	sub    esp,0x54
c000efe5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000efe9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000efed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eff2:	88 d0                	mov    al,dl
c000eff4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eff8:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f000:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f008:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f010:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f018:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f020:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f027:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f02c:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f031:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f038:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f03f:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f044:	75 1e                	jne    c000f064 <tcp_write+0x84>
c000f046:	83 ec 08             	sub    esp,0x8
c000f049:	68 20 08 03 c0       	push   0xc0030820
c000f04e:	68 66 fb 02 c0       	push   0xc002fb66
c000f053:	e8 2c 0b 01 00       	call   c001fb84 <CPrintf>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	b0 f2                	mov    al,0xf2
c000f05d:	e9 1e 08 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f062:	66 90                	xchg   ax,ax
c000f064:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f069:	83 ec 08             	sub    esp,0x8
c000f06c:	50                   	push   eax
c000f06d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f071:	e8 2a fe ff ff       	call   c000eea0 <tcp_write_checks>
c000f076:	83 c4 10             	add    esp,0x10
c000f079:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f07d:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f082:	85 c0                	test   eax,eax
c000f084:	74 0a                	je     c000f090 <tcp_write+0xb0>
c000f086:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f08a:	e9 f1 07 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f08f:	90                   	nop
c000f090:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f094:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f097:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f09c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f0a0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	0f 84 79 02 00 00    	je     c000f324 <tcp_write+0x344>
c000f0ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f0af:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0b2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0b6:	eb 0c                	jmp    c000f0c4 <tcp_write+0xe4>
c000f0b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c2:	66 90                	xchg   ax,ax
c000f0c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ca:	85 c0                	test   eax,eax
c000f0cc:	75 ea                	jne    c000f0b8 <tcp_write+0xd8>
c000f0ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d2:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f0d5:	0f b6 c0             	movzx  eax,al
c000f0d8:	c1 e0 02             	shl    eax,0x2
c000f0db:	83 e0 04             	and    eax,0x4
c000f0de:	89 c2                	mov    edx,eax
c000f0e0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0e4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f0e7:	0f b6 c0             	movzx  eax,al
c000f0ea:	83 e0 02             	and    eax,0x2
c000f0ed:	74 09                	je     c000f0f8 <tcp_write+0x118>
c000f0ef:	b8 0c 00 00 00       	mov    eax,0xc
c000f0f4:	eb 0a                	jmp    c000f100 <tcp_write+0x120>
c000f0f6:	66 90                	xchg   ax,ax
c000f0f8:	b8 00 00 00 00       	mov    eax,0x0
c000f0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f100:	01 d0                	add    eax,edx
c000f102:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f107:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f10b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f10e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f112:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f115:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f11a:	01 c8                	add    eax,ecx
c000f11c:	89 d6                	mov    esi,edx
c000f11e:	29 c6                	sub    esi,eax
c000f120:	89 f0                	mov    eax,esi
c000f122:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f127:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f12b:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f12f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f134:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f139:	0f b7 c0             	movzx  eax,ax
c000f13c:	85 c0                	test   eax,eax
c000f13e:	0f 84 84 00 00 00    	je     c000f1c8 <tcp_write+0x1e8>
c000f144:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f149:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f14e:	39 c2                	cmp    edx,eax
c000f150:	76 16                	jbe    c000f168 <tcp_write+0x188>
c000f152:	83 ec 08             	sub    esp,0x8
c000f155:	68 54 08 03 c0       	push   0xc0030854
c000f15a:	68 66 fb 02 c0       	push   0xc002fb66
c000f15f:	e8 20 0a 01 00       	call   c001fb84 <CPrintf>
c000f164:	83 c4 10             	add    esp,0x10
c000f167:	90                   	nop
c000f168:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f16c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f170:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f179:	0f b7 d8             	movzx  ebx,ax
c000f17c:	0f b7 ca             	movzx  ecx,dx
c000f17f:	39 cb                	cmp    ebx,ecx
c000f181:	76 05                	jbe    c000f188 <tcp_write+0x1a8>
c000f183:	89 d0                	mov    eax,edx
c000f185:	8d 76 00             	lea    esi,[esi+0x0]
c000f188:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f18d:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f192:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f197:	01 d0                	add    eax,edx
c000f199:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f19e:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f1a3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f1a8:	89 d6                	mov    esi,edx
c000f1aa:	29 c6                	sub    esi,eax
c000f1ac:	89 f0                	mov    eax,esi
c000f1ae:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f1b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f1b7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f1bc:	89 d6                	mov    esi,edx
c000f1be:	29 c6                	sub    esi,eax
c000f1c0:	89 f0                	mov    eax,esi
c000f1c2:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f1c7:	90                   	nop
c000f1c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f1cd:	0f b7 c0             	movzx  eax,ax
c000f1d0:	85 c0                	test   eax,eax
c000f1d2:	74 24                	je     c000f1f8 <tcp_write+0x218>
c000f1d4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f1d9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f1de:	39 c2                	cmp    edx,eax
c000f1e0:	74 16                	je     c000f1f8 <tcp_write+0x218>
c000f1e2:	83 ec 08             	sub    esp,0x8
c000f1e5:	68 18 0a 03 c0       	push   0xc0030a18
c000f1ea:	68 66 fb 02 c0       	push   0xc002fb66
c000f1ef:	e8 90 09 01 00       	call   c001fb84 <CPrintf>
c000f1f4:	83 c4 10             	add    esp,0x10
c000f1f7:	90                   	nop
c000f1f8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f1fd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f202:	39 c2                	cmp    edx,eax
c000f204:	0f 83 ca 03 00 00    	jae    c000f5d4 <tcp_write+0x5f4>
c000f20a:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f20f:	85 c0                	test   eax,eax
c000f211:	0f 84 bd 03 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f217:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f21b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f21e:	0f b7 c0             	movzx  eax,ax
c000f221:	85 c0                	test   eax,eax
c000f223:	0f 84 ab 03 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f229:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f22e:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f233:	29 c2                	sub    edx,eax
c000f235:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f23a:	39 c2                	cmp    edx,eax
c000f23c:	0f 4e c2             	cmovle eax,edx
c000f23f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f244:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f248:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f24c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f251:	83 e0 01             	and    eax,0x1
c000f254:	74 62                	je     c000f2b8 <tcp_write+0x2d8>
c000f256:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f25b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f260:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f265:	83 ec 04             	sub    esp,0x4
c000f268:	6a 01                	push   0x1
c000f26a:	51                   	push   ecx
c000f26b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f26f:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f273:	51                   	push   ecx
c000f274:	52                   	push   edx
c000f275:	50                   	push   eax
c000f276:	6a 03                	push   0x3
c000f278:	e8 ef fa ff ff       	call   c000ed6c <tcp_pbuf_prealloc>
c000f27d:	83 c4 20             	add    esp,0x20
c000f280:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f284:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f289:	0f 84 4d 05 00 00    	je     c000f7dc <tcp_write+0x7fc>
c000f28f:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f294:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f299:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f29d:	01 c1                	add    ecx,eax
c000f29f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f2a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2a6:	83 ec 04             	sub    esp,0x4
c000f2a9:	52                   	push   edx
c000f2aa:	51                   	push   ecx
c000f2ab:	50                   	push   eax
c000f2ac:	e8 c9 10 ff ff       	call   c000037a <memcpy>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	eb 3a                	jmp    c000f2f0 <tcp_write+0x310>
c000f2b6:	66 90                	xchg   ax,ax
c000f2b8:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f2bd:	83 ec 04             	sub    esp,0x4
c000f2c0:	6a 01                	push   0x1
c000f2c2:	50                   	push   eax
c000f2c3:	6a 03                	push   0x3
c000f2c5:	e8 9a 92 ff ff       	call   c0008564 <pbuf_alloc>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f2d1:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f2d6:	0f 84 04 05 00 00    	je     c000f7e0 <tcp_write+0x800>
c000f2dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2e1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f2e5:	01 c2                	add    edx,eax
c000f2e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f2eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f2f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2f9:	01 d0                	add    eax,edx
c000f2fb:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f300:	83 ec 0c             	sub    esp,0xc
c000f303:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f307:	e8 58 98 ff ff       	call   c0008b64 <pbuf_clen>
c000f30c:	83 c4 10             	add    esp,0x10
c000f30f:	0f b6 c0             	movzx  eax,al
c000f312:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f316:	01 d0                	add    eax,edx
c000f318:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f31d:	e9 b2 02 00 00       	jmp    c000f5d4 <tcp_write+0x5f4>
c000f322:	66 90                	xchg   ax,ax
c000f324:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f328:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f32c:	0f b7 c0             	movzx  eax,ax
c000f32f:	85 c0                	test   eax,eax
c000f331:	0f 84 9d 02 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f337:	83 ec 08             	sub    esp,0x8
c000f33a:	68 74 08 03 c0       	push   0xc0030874
c000f33f:	68 66 fb 02 c0       	push   0xc002fb66
c000f344:	e8 3b 08 01 00       	call   c001fb84 <CPrintf>
c000f349:	83 c4 10             	add    esp,0x10
c000f34c:	e9 83 02 00 00       	jmp    c000f5d4 <tcp_write+0x5f4>
c000f351:	8d 76 00             	lea    esi,[esi+0x0]
c000f354:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f358:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f35d:	89 d3                	mov    ebx,edx
c000f35f:	29 c3                	sub    ebx,eax
c000f361:	89 d8                	mov    eax,ebx
c000f363:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f368:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f36c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f36f:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f374:	89 d6                	mov    esi,edx
c000f376:	29 c6                	sub    esi,eax
c000f378:	89 f0                	mov    eax,esi
c000f37a:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f37f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f383:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f388:	0f b7 d8             	movzx  ebx,ax
c000f38b:	0f b7 ca             	movzx  ecx,dx
c000f38e:	39 cb                	cmp    ebx,ecx
c000f390:	76 02                	jbe    c000f394 <tcp_write+0x3b4>
c000f392:	89 d0                	mov    eax,edx
c000f394:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f399:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f39e:	83 e0 01             	and    eax,0x1
c000f3a1:	0f 84 b1 00 00 00    	je     c000f458 <tcp_write+0x478>
c000f3a7:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f3ac:	0f 94 c0             	sete   al
c000f3af:	0f b6 d8             	movzx  ebx,al
c000f3b2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f3b7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f3bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3be:	0f b7 d0             	movzx  edx,ax
c000f3c1:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f3c6:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f3cb:	01 f0                	add    eax,esi
c000f3cd:	0f b7 c0             	movzx  eax,ax
c000f3d0:	83 ec 04             	sub    esp,0x4
c000f3d3:	53                   	push   ebx
c000f3d4:	51                   	push   ecx
c000f3d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f3d9:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f3dd:	51                   	push   ecx
c000f3de:	52                   	push   edx
c000f3df:	50                   	push   eax
c000f3e0:	6a 00                	push   0x0
c000f3e2:	e8 85 f9 ff ff       	call   c000ed6c <tcp_pbuf_prealloc>
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f3ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f3f3:	0f 84 eb 03 00 00    	je     c000f7e4 <tcp_write+0x804>
c000f3f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3fd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f401:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f406:	0f b7 c0             	movzx  eax,ax
c000f409:	39 c2                	cmp    edx,eax
c000f40b:	76 17                	jbe    c000f424 <tcp_write+0x444>
c000f40d:	83 ec 08             	sub    esp,0x8
c000f410:	68 a4 08 03 c0       	push   0xc00308a4
c000f415:	68 66 fb 02 c0       	push   0xc002fb66
c000f41a:	e8 65 07 01 00       	call   c001fb84 <CPrintf>
c000f41f:	83 c4 10             	add    esp,0x10
c000f422:	66 90                	xchg   ax,ax
c000f424:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f429:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f42e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f432:	01 d1                	add    ecx,edx
c000f434:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f438:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f43b:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f440:	01 da                	add    edx,ebx
c000f442:	83 ec 04             	sub    esp,0x4
c000f445:	50                   	push   eax
c000f446:	51                   	push   ecx
c000f447:	52                   	push   edx
c000f448:	e8 2d 0f ff ff       	call   c000037a <memcpy>
c000f44d:	83 c4 10             	add    esp,0x10
c000f450:	e9 a7 00 00 00       	jmp    c000f4fc <tcp_write+0x51c>
c000f455:	8d 76 00             	lea    esi,[esi+0x0]
c000f458:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f45d:	0f b7 c0             	movzx  eax,ax
c000f460:	85 c0                	test   eax,eax
c000f462:	74 18                	je     c000f47c <tcp_write+0x49c>
c000f464:	83 ec 08             	sub    esp,0x8
c000f467:	68 36 0a 03 c0       	push   0xc0030a36
c000f46c:	68 66 fb 02 c0       	push   0xc002fb66
c000f471:	e8 0e 07 01 00       	call   c001fb84 <CPrintf>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	8d 76 00             	lea    esi,[esi+0x0]
c000f47c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f481:	83 ec 04             	sub    esp,0x4
c000f484:	6a 01                	push   0x1
c000f486:	50                   	push   eax
c000f487:	6a 00                	push   0x0
c000f489:	e8 d6 90 ff ff       	call   c0008564 <pbuf_alloc>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f495:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f49a:	0f 84 48 03 00 00    	je     c000f7e8 <tcp_write+0x808>
c000f4a0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4a5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f4a9:	01 c2                	add    edx,eax
c000f4ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f4af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f4b2:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4b7:	83 ec 04             	sub    esp,0x4
c000f4ba:	6a 00                	push   0x0
c000f4bc:	50                   	push   eax
c000f4bd:	6a 00                	push   0x0
c000f4bf:	e8 a0 90 ff ff       	call   c0008564 <pbuf_alloc>
c000f4c4:	83 c4 10             	add    esp,0x10
c000f4c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4cb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4d0:	75 16                	jne    c000f4e8 <tcp_write+0x508>
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4d9:	e8 aa 8e ff ff       	call   c0008388 <pbuf_free>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	e9 0a 03 00 00       	jmp    c000f7f0 <tcp_write+0x810>
c000f4e6:	66 90                	xchg   ax,ax
c000f4e8:	83 ec 08             	sub    esp,0x8
c000f4eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f4ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f4f3:	e8 d4 96 ff ff       	call   c0008bcc <pbuf_cat>
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	90                   	nop
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f503:	e8 5c 96 ff ff       	call   c0008b64 <pbuf_clen>
c000f508:	83 c4 10             	add    esp,0x10
c000f50b:	0f b6 c0             	movzx  eax,al
c000f50e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f512:	01 d0                	add    eax,edx
c000f514:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f519:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f51e:	83 f8 02             	cmp    eax,0x2
c000f521:	77 0d                	ja     c000f530 <tcp_write+0x550>
c000f523:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f528:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f52d:	76 15                	jbe    c000f544 <tcp_write+0x564>
c000f52f:	90                   	nop
c000f530:	83 ec 0c             	sub    esp,0xc
c000f533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f537:	e8 4c 8e ff ff       	call   c0008388 <pbuf_free>
c000f53c:	83 c4 10             	add    esp,0x10
c000f53f:	e9 ac 02 00 00       	jmp    c000f7f0 <tcp_write+0x810>
c000f544:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f549:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f54d:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f550:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f555:	01 ca                	add    edx,ecx
c000f557:	83 ec 0c             	sub    esp,0xc
c000f55a:	50                   	push   eax
c000f55b:	52                   	push   edx
c000f55c:	6a 00                	push   0x0
c000f55e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f562:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f566:	e8 59 f6 ff ff       	call   c000ebc4 <tcp_create_segment>
c000f56b:	83 c4 20             	add    esp,0x20
c000f56e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f572:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f577:	0f 84 6f 02 00 00    	je     c000f7ec <tcp_write+0x80c>
c000f57d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f582:	75 0c                	jne    c000f590 <tcp_write+0x5b0>
c000f584:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f588:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f58c:	eb 2a                	jmp    c000f5b8 <tcp_write+0x5d8>
c000f58e:	66 90                	xchg   ax,ax
c000f590:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f595:	75 15                	jne    c000f5ac <tcp_write+0x5cc>
c000f597:	83 ec 08             	sub    esp,0x8
c000f59a:	68 44 0a 03 c0       	push   0xc0030a44
c000f59f:	68 66 fb 02 c0       	push   0xc002fb66
c000f5a4:	e8 db 05 01 00       	call   c001fb84 <CPrintf>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f5b0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f5b4:	89 10                	mov    DWORD PTR [eax],edx
c000f5b6:	66 90                	xchg   ax,ax
c000f5b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f5bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f5c0:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f5c5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f5ca:	01 d0                	add    eax,edx
c000f5cc:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5d9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f5de:	39 c2                	cmp    edx,eax
c000f5e0:	0f 82 6e fd ff ff    	jb     c000f354 <tcp_write+0x374>
c000f5e6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f5eb:	85 c0                	test   eax,eax
c000f5ed:	0f 84 a1 00 00 00    	je     c000f694 <tcp_write+0x6b4>
c000f5f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5fe:	eb 74                	jmp    c000f674 <tcp_write+0x694>
c000f600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f607:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f60c:	01 d0                	add    eax,edx
c000f60e:	89 c2                	mov    edx,eax
c000f610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f614:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f61c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61e:	85 c0                	test   eax,eax
c000f620:	75 46                	jne    c000f668 <tcp_write+0x688>
c000f622:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f627:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f62b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f62e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f632:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f636:	0f b7 d2             	movzx  edx,dx
c000f639:	01 ca                	add    edx,ecx
c000f63b:	83 ec 04             	sub    esp,0x4
c000f63e:	50                   	push   eax
c000f63f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f643:	52                   	push   edx
c000f644:	e8 31 0d ff ff       	call   c000037a <memcpy>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f650:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f654:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f659:	01 d0                	add    eax,edx
c000f65b:	89 c2                	mov    edx,eax
c000f65d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f661:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f665:	8d 76 00             	lea    esi,[esi+0x0]
c000f668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f672:	66 90                	xchg   ax,ax
c000f674:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f679:	75 85                	jne    c000f600 <tcp_write+0x620>
c000f67b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f67f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f682:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f687:	01 d0                	add    eax,edx
c000f689:	89 c2                	mov    edx,eax
c000f68b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f68f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f693:	90                   	nop
c000f694:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f699:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f69d:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f6a1:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f6a6:	74 50                	je     c000f6f8 <tcp_write+0x718>
c000f6a8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f6ad:	75 15                	jne    c000f6c4 <tcp_write+0x6e4>
c000f6af:	83 ec 08             	sub    esp,0x8
c000f6b2:	68 e4 08 03 c0       	push   0xc00308e4
c000f6b7:	68 66 fb 02 c0       	push   0xc002fb66
c000f6bc:	e8 c3 04 01 00       	call   c001fb84 <CPrintf>
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6cb:	83 ec 08             	sub    esp,0x8
c000f6ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f6d2:	50                   	push   eax
c000f6d3:	e8 f4 94 ff ff       	call   c0008bcc <pbuf_cat>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f6e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f6e9:	01 d0                	add    eax,edx
c000f6eb:	89 c2                	mov    edx,eax
c000f6ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6f1:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f6fd:	75 0d                	jne    c000f70c <tcp_write+0x72c>
c000f6ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f703:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f707:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f70a:	eb 0c                	jmp    c000f718 <tcp_write+0x738>
c000f70c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f710:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f714:	89 10                	mov    DWORD PTR [eax],edx
c000f716:	66 90                	xchg   ax,ax
c000f718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f71c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f71f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f724:	01 c2                	add    edx,eax
c000f726:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f72a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f72d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f731:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f739:	89 d3                	mov    ebx,edx
c000f73b:	29 c3                	sub    ebx,eax
c000f73d:	89 d8                	mov    eax,ebx
c000f73f:	89 c2                	mov    edx,eax
c000f741:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f745:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f749:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f74d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f751:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f755:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f759:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f75c:	0f b7 c0             	movzx  eax,ax
c000f75f:	85 c0                	test   eax,eax
c000f761:	74 2d                	je     c000f790 <tcp_write+0x7b0>
c000f763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f767:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f76a:	85 c0                	test   eax,eax
c000f76c:	75 22                	jne    c000f790 <tcp_write+0x7b0>
c000f76e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f772:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f775:	85 c0                	test   eax,eax
c000f777:	75 17                	jne    c000f790 <tcp_write+0x7b0>
c000f779:	83 ec 08             	sub    esp,0x8
c000f77c:	68 55 0a 03 c0       	push   0xc0030a55
c000f781:	68 66 fb 02 c0       	push   0xc002fb66
c000f786:	e8 f9 03 01 00       	call   c001fb84 <CPrintf>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	66 90                	xchg   ax,ax
c000f790:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f795:	74 3d                	je     c000f7d4 <tcp_write+0x7f4>
c000f797:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f79b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f79e:	85 c0                	test   eax,eax
c000f7a0:	74 32                	je     c000f7d4 <tcp_write+0x7f4>
c000f7a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f7a7:	83 e0 02             	and    eax,0x2
c000f7aa:	75 28                	jne    c000f7d4 <tcp_write+0x7f4>
c000f7ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f7b3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f7b7:	83 ec 0c             	sub    esp,0xc
c000f7ba:	6a 08                	push   0x8
c000f7bc:	e8 5b 14 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	89 c2                	mov    edx,eax
c000f7c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f7cd:	09 da                	or     edx,ebx
c000f7cf:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f7d3:	90                   	nop
c000f7d4:	b0 00                	mov    al,0x0
c000f7d6:	e9 a5 00 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f7db:	90                   	nop
c000f7dc:	90                   	nop
c000f7dd:	eb 11                	jmp    c000f7f0 <tcp_write+0x810>
c000f7df:	90                   	nop
c000f7e0:	90                   	nop
c000f7e1:	eb 0d                	jmp    c000f7f0 <tcp_write+0x810>
c000f7e3:	90                   	nop
c000f7e4:	90                   	nop
c000f7e5:	eb 09                	jmp    c000f7f0 <tcp_write+0x810>
c000f7e7:	90                   	nop
c000f7e8:	90                   	nop
c000f7e9:	eb 05                	jmp    c000f7f0 <tcp_write+0x810>
c000f7eb:	90                   	nop
c000f7ec:	90                   	nop
c000f7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f7f7:	83 c8 80             	or     eax,0xffffff80
c000f7fa:	88 c2                	mov    dl,al
c000f7fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f800:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f803:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f809:	83 c0 01             	add    eax,0x1
c000f80c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f812:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f817:	74 0f                	je     c000f828 <tcp_write+0x848>
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f820:	e8 63 8b ff ff       	call   c0008388 <pbuf_free>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f82d:	74 11                	je     c000f840 <tcp_write+0x860>
c000f82f:	83 ec 0c             	sub    esp,0xc
c000f832:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f836:	e8 1d a8 ff ff       	call   c000a058 <tcp_segs_free>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	66 90                	xchg   ax,ax
c000f840:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f844:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f847:	0f b7 c0             	movzx  eax,ax
c000f84a:	85 c0                	test   eax,eax
c000f84c:	74 2e                	je     c000f87c <tcp_write+0x89c>
c000f84e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f852:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f855:	85 c0                	test   eax,eax
c000f857:	75 23                	jne    c000f87c <tcp_write+0x89c>
c000f859:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f85d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f860:	85 c0                	test   eax,eax
c000f862:	75 18                	jne    c000f87c <tcp_write+0x89c>
c000f864:	83 ec 08             	sub    esp,0x8
c000f867:	68 55 0a 03 c0       	push   0xc0030a55
c000f86c:	68 66 fb 02 c0       	push   0xc002fb66
c000f871:	e8 0e 03 01 00       	call   c001fb84 <CPrintf>
c000f876:	83 c4 10             	add    esp,0x10
c000f879:	8d 76 00             	lea    esi,[esi+0x0]
c000f87c:	b0 ff                	mov    al,0xff
c000f87e:	66 90                	xchg   ax,ax
c000f880:	83 c4 54             	add    esp,0x54
c000f883:	5b                   	pop    ebx
c000f884:	5e                   	pop    esi
c000f885:	c3                   	ret    
c000f886:	66 90                	xchg   ax,ax

c000f888 <tcp_enqueue_flags>:
c000f888:	83 ec 3c             	sub    esp,0x3c
c000f88b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f88f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f893:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f898:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f89d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f8a2:	83 e0 03             	and    eax,0x3
c000f8a5:	75 15                	jne    c000f8bc <tcp_enqueue_flags+0x34>
c000f8a7:	83 ec 08             	sub    esp,0x8
c000f8aa:	68 1c 09 03 c0       	push   0xc003091c
c000f8af:	68 66 fb 02 c0       	push   0xc002fb66
c000f8b4:	e8 cb 02 01 00       	call   c001fb84 <CPrintf>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8c3:	0f b7 c0             	movzx  eax,ax
c000f8c6:	83 f8 01             	cmp    eax,0x1
c000f8c9:	77 11                	ja     c000f8dc <tcp_enqueue_flags+0x54>
c000f8cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8d2:	0f b7 c0             	movzx  eax,ax
c000f8d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f8da:	76 2c                	jbe    c000f908 <tcp_enqueue_flags+0x80>
c000f8dc:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8e2:	83 c0 01             	add    eax,0x1
c000f8e5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f2:	83 c8 80             	or     eax,0xffffff80
c000f8f5:	88 c2                	mov    dl,al
c000f8f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8fe:	b0 ff                	mov    al,0xff
c000f900:	e9 6f 02 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f90d:	83 e0 02             	and    eax,0x2
c000f910:	74 06                	je     c000f918 <tcp_enqueue_flags+0x90>
c000f912:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f917:	90                   	nop
c000f918:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f91d:	c1 e0 02             	shl    eax,0x2
c000f920:	83 e0 04             	and    eax,0x4
c000f923:	88 c2                	mov    dl,al
c000f925:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f92a:	83 e0 02             	and    eax,0x2
c000f92d:	74 05                	je     c000f934 <tcp_enqueue_flags+0xac>
c000f92f:	b0 0c                	mov    al,0xc
c000f931:	eb 05                	jmp    c000f938 <tcp_enqueue_flags+0xb0>
c000f933:	90                   	nop
c000f934:	b0 00                	mov    al,0x0
c000f936:	66 90                	xchg   ax,ax
c000f938:	01 d0                	add    eax,edx
c000f93a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f93e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f942:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f946:	0f b7 c0             	movzx  eax,ax
c000f949:	85 c0                	test   eax,eax
c000f94b:	75 17                	jne    c000f964 <tcp_enqueue_flags+0xdc>
c000f94d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f953:	83 c0 01             	add    eax,0x1
c000f956:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f95c:	b0 ff                	mov    al,0xff
c000f95e:	e9 11 02 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f963:	90                   	nop
c000f964:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f969:	83 ec 04             	sub    esp,0x4
c000f96c:	6a 00                	push   0x0
c000f96e:	50                   	push   eax
c000f96f:	6a 00                	push   0x0
c000f971:	e8 ee 8b ff ff       	call   c0008564 <pbuf_alloc>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f97d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f982:	75 2c                	jne    c000f9b0 <tcp_enqueue_flags+0x128>
c000f984:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f988:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f98b:	83 c8 80             	or     eax,0xffffff80
c000f98e:	88 c2                	mov    dl,al
c000f990:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f994:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f997:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f99d:	83 c0 01             	add    eax,0x1
c000f9a0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f9a6:	b0 ff                	mov    al,0xff
c000f9a8:	e9 c7 01 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9b4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f9b8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f9bd:	0f b7 d2             	movzx  edx,dx
c000f9c0:	0f b7 c0             	movzx  eax,ax
c000f9c3:	39 c2                	cmp    edx,eax
c000f9c5:	73 15                	jae    c000f9dc <tcp_enqueue_flags+0x154>
c000f9c7:	83 ec 08             	sub    esp,0x8
c000f9ca:	68 74 09 03 c0       	push   0xc0030974
c000f9cf:	68 66 fb 02 c0       	push   0xc002fb66
c000f9d4:	e8 ab 01 01 00       	call   c001fb84 <CPrintf>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f9e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f9e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9ed:	83 ec 0c             	sub    esp,0xc
c000f9f0:	51                   	push   ecx
c000f9f1:	52                   	push   edx
c000f9f2:	50                   	push   eax
c000f9f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f9f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f9fb:	e8 c4 f1 ff ff       	call   c000ebc4 <tcp_create_segment>
c000fa00:	83 c4 20             	add    esp,0x20
c000fa03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fa07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fa0c:	75 2a                	jne    c000fa38 <tcp_enqueue_flags+0x1b0>
c000fa0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa15:	83 c8 80             	or     eax,0xffffff80
c000fa18:	88 c2                	mov    dl,al
c000fa1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa21:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa27:	83 c0 01             	add    eax,0x1
c000fa2a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa30:	b0 ff                	mov    al,0xff
c000fa32:	e9 3d 01 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000fa37:	90                   	nop
c000fa38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fa3f:	0f b7 c0             	movzx  eax,ax
c000fa42:	85 c0                	test   eax,eax
c000fa44:	74 16                	je     c000fa5c <tcp_enqueue_flags+0x1d4>
c000fa46:	83 ec 08             	sub    esp,0x8
c000fa49:	68 b0 09 03 c0       	push   0xc00309b0
c000fa4e:	68 66 fb 02 c0       	push   0xc002fb66
c000fa53:	e8 2c 01 01 00       	call   c001fb84 <CPrintf>
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	90                   	nop
c000fa5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa63:	85 c0                	test   eax,eax
c000fa65:	75 0d                	jne    c000fa74 <tcp_enqueue_flags+0x1ec>
c000fa67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fa72:	eb 30                	jmp    c000faa4 <tcp_enqueue_flags+0x21c>
c000fa74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fa7f:	eb 0f                	jmp    c000fa90 <tcp_enqueue_flags+0x208>
c000fa81:	8d 76 00             	lea    esi,[esi+0x0]
c000fa84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fa8e:	66 90                	xchg   ax,ax
c000fa90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa96:	85 c0                	test   eax,eax
c000fa98:	75 ea                	jne    c000fa84 <tcp_enqueue_flags+0x1fc>
c000fa9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000faa2:	89 10                	mov    DWORD PTR [eax],edx
c000faa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faa8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000faae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fab3:	83 e0 02             	and    eax,0x2
c000fab6:	75 0c                	jne    c000fac4 <tcp_enqueue_flags+0x23c>
c000fab8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fabd:	83 e0 01             	and    eax,0x1
c000fac0:	74 2a                	je     c000faec <tcp_enqueue_flags+0x264>
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fac8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000facb:	8d 50 01             	lea    edx,[eax+0x1]
c000face:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fad2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fad5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fad9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fadd:	83 e8 01             	sub    eax,0x1
c000fae0:	89 c2                	mov    edx,eax
c000fae2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae6:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000faea:	66 90                	xchg   ax,ax
c000faec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faf1:	83 e0 01             	and    eax,0x1
c000faf4:	74 16                	je     c000fb0c <tcp_enqueue_flags+0x284>
c000faf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fafa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fafd:	83 c8 20             	or     eax,0x20
c000fb00:	88 c2                	mov    dl,al
c000fb02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb06:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb09:	8d 76 00             	lea    esi,[esi+0x0]
c000fb0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb13:	83 ec 0c             	sub    esp,0xc
c000fb16:	50                   	push   eax
c000fb17:	e8 48 90 ff ff       	call   c0008b64 <pbuf_clen>
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	88 c1                	mov    cl,al
c000fb21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb25:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fb28:	0f b6 c1             	movzx  eax,cl
c000fb2b:	01 d0                	add    eax,edx
c000fb2d:	89 c2                	mov    edx,eax
c000fb2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb33:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fb37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb3b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fb3e:	0f b7 c0             	movzx  eax,ax
c000fb41:	85 c0                	test   eax,eax
c000fb43:	74 2b                	je     c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb49:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fb4c:	85 c0                	test   eax,eax
c000fb4e:	75 20                	jne    c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb54:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb57:	85 c0                	test   eax,eax
c000fb59:	75 15                	jne    c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb5b:	83 ec 08             	sub    esp,0x8
c000fb5e:	68 dc 09 03 c0       	push   0xc00309dc
c000fb63:	68 66 fb 02 c0       	push   0xc002fb66
c000fb68:	e8 17 00 01 00       	call   c001fb84 <CPrintf>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	b0 00                	mov    al,0x0
c000fb72:	66 90                	xchg   ax,ax
c000fb74:	83 c4 3c             	add    esp,0x3c
c000fb77:	c3                   	ret    

c000fb78 <tcp_send_fin>:
c000fb78:	53                   	push   ebx
c000fb79:	83 ec 18             	sub    esp,0x18
c000fb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb80:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb83:	85 c0                	test   eax,eax
c000fb85:	74 71                	je     c000fbf8 <tcp_send_fin+0x80>
c000fb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb92:	eb 0c                	jmp    c000fba0 <tcp_send_fin+0x28>
c000fb94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb9e:	66 90                	xchg   ax,ax
c000fba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba6:	85 c0                	test   eax,eax
c000fba8:	75 ea                	jne    c000fb94 <tcp_send_fin+0x1c>
c000fbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbb1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fbb5:	0f b7 c0             	movzx  eax,ax
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	50                   	push   eax
c000fbbc:	e8 5b 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	0f b7 c0             	movzx  eax,ax
c000fbc7:	83 e0 07             	and    eax,0x7
c000fbca:	75 2c                	jne    c000fbf8 <tcp_send_fin+0x80>
c000fbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbd3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fbd7:	83 ec 0c             	sub    esp,0xc
c000fbda:	6a 01                	push   0x1
c000fbdc:	e8 3b 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	89 c2                	mov    edx,eax
c000fbe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbed:	09 da                	or     edx,ebx
c000fbef:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fbf3:	b0 00                	mov    al,0x0
c000fbf5:	eb 15                	jmp    c000fc0c <tcp_send_fin+0x94>
c000fbf7:	90                   	nop
c000fbf8:	83 ec 08             	sub    esp,0x8
c000fbfb:	6a 01                	push   0x1
c000fbfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc01:	e8 82 fc ff ff       	call   c000f888 <tcp_enqueue_flags>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	8d 76 00             	lea    esi,[esi+0x0]
c000fc0c:	83 c4 18             	add    esp,0x18
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	8d 76 00             	lea    esi,[esi+0x0]

c000fc14 <tcp_send_empty_ack>:
c000fc14:	53                   	push   ebx
c000fc15:	83 ec 18             	sub    esp,0x18
c000fc18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fc24:	83 ec 0c             	sub    esp,0xc
c000fc27:	50                   	push   eax
c000fc28:	e8 13 10 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	89 c2                	mov    edx,eax
c000fc32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc37:	52                   	push   edx
c000fc38:	6a 00                	push   0x0
c000fc3a:	50                   	push   eax
c000fc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc3f:	e8 1c ee ff ff       	call   c000ea60 <tcp_output_alloc_header>
c000fc44:	83 c4 10             	add    esp,0x10
c000fc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc50:	75 0a                	jne    c000fc5c <tcp_send_empty_ack+0x48>
c000fc52:	b0 fe                	mov    al,0xfe
c000fc54:	e9 9b 00 00 00       	jmp    c000fcf4 <tcp_send_empty_ack+0xe0>
c000fc59:	8d 76 00             	lea    esi,[esi+0x0]
c000fc5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fc6e:	83 e0 fc             	and    eax,0xfffffffc
c000fc71:	88 c2                	mov    dl,al
c000fc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fc81:	0f b7 d0             	movzx  edx,ax
c000fc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	52                   	push   edx
c000fc93:	6a 06                	push   0x6
c000fc95:	51                   	push   ecx
c000fc96:	50                   	push   eax
c000fc97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc9b:	e8 a4 35 00 00       	call   c0013244 <inet_chksum_pseudo>
c000fca0:	83 c4 20             	add    esp,0x20
c000fca3:	89 c2                	mov    edx,eax
c000fca5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fca9:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb1:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fcb4:	0f b6 c8             	movzx  ecx,al
c000fcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcbb:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcbe:	0f b6 d0             	movzx  edx,al
c000fcc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc5:	8d 58 04             	lea    ebx,[eax+0x4]
c000fcc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	6a 06                	push   0x6
c000fcd1:	51                   	push   ecx
c000fcd2:	52                   	push   edx
c000fcd3:	53                   	push   ebx
c000fcd4:	50                   	push   eax
c000fcd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd9:	e8 a6 41 00 00       	call   c0013e84 <ip_output>
c000fcde:	83 c4 20             	add    esp,0x20
c000fce1:	83 ec 0c             	sub    esp,0xc
c000fce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce8:	e8 9b 86 ff ff       	call   c0008388 <pbuf_free>
c000fced:	83 c4 10             	add    esp,0x10
c000fcf0:	b0 00                	mov    al,0x0
c000fcf2:	66 90                	xchg   ax,ax
c000fcf4:	83 c4 18             	add    esp,0x18
c000fcf7:	5b                   	pop    ebx
c000fcf8:	c3                   	ret    
c000fcf9:	8d 76 00             	lea    esi,[esi+0x0]

c000fcfc <tcp_output_segment>:
c000fcfc:	56                   	push   esi
c000fcfd:	53                   	push   ebx
c000fcfe:	83 ec 14             	sub    esp,0x14
c000fd01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd05:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fd08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	50                   	push   eax
c000fd13:	e8 28 0f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fd1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd22:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fd26:	0f b7 c0             	movzx  eax,ax
c000fd29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd2d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	50                   	push   eax
c000fd34:	e8 e3 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fd40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd44:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fd47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4b:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fd4f:	0f b7 c0             	movzx  eax,ax
c000fd52:	01 c2                	add    edx,eax
c000fd54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd58:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd62:	83 c0 14             	add    eax,0x14
c000fd65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fd70:	0f b6 c0             	movzx  eax,al
c000fd73:	83 e0 01             	and    eax,0x1
c000fd76:	74 10                	je     c000fd88 <tcp_output_segment+0x8c>
c000fd78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd7c:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fd82:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fd87:	90                   	nop
c000fd88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd8c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fd90:	98                   	cwde   
c000fd91:	83 f8 ff             	cmp    eax,0xffffffff
c000fd94:	75 0a                	jne    c000fda0 <tcp_output_segment+0xa4>
c000fd96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd9a:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fda0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda4:	85 c0                	test   eax,eax
c000fda6:	74 0c                	je     c000fdb4 <tcp_output_segment+0xb8>
c000fda8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdae:	85 c0                	test   eax,eax
c000fdb0:	75 32                	jne    c000fde4 <tcp_output_segment+0xe8>
c000fdb2:	66 90                	xchg   ax,ax
c000fdb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdb8:	83 c0 04             	add    eax,0x4
c000fdbb:	83 ec 0c             	sub    esp,0xc
c000fdbe:	50                   	push   eax
c000fdbf:	e8 0c 39 00 00       	call   c00136d0 <ip_route>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdcb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fdd0:	0f 84 46 01 00 00    	je     c000ff1c <tcp_output_segment+0x220>
c000fdd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fddd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fde1:	89 10                	mov    DWORD PTR [eax],edx
c000fde3:	90                   	nop
c000fde4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fde8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdeb:	85 c0                	test   eax,eax
c000fded:	75 2d                	jne    c000fe1c <tcp_output_segment+0x120>
c000fdef:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fdf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdf9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	50                   	push   eax
c000fe0a:	e8 31 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	89 c2                	mov    edx,eax
c000fe14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe18:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fe1b:	90                   	nop
c000fe1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe20:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fe23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2d:	29 c2                	sub    edx,eax
c000fe2f:	89 d0                	mov    eax,edx
c000fe31:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fe36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe3d:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000fe41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe48:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fe4d:	89 ce                	mov    esi,ecx
c000fe4f:	29 d6                	sub    esi,edx
c000fe51:	89 f2                	mov    edx,esi
c000fe53:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe5e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000fe61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fe6d:	89 ce                	mov    esi,ecx
c000fe6f:	29 d6                	sub    esi,edx
c000fe71:	89 f2                	mov    edx,esi
c000fe73:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000fe77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe82:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fe85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fe88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe8f:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fe95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe9f:	0f b7 c8             	movzx  ecx,ax
c000fea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea6:	8d 70 04             	lea    esi,[eax+0x4]
c000fea9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000feb4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000feb8:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	51                   	push   ecx
c000febf:	6a 06                	push   0x6
c000fec1:	56                   	push   esi
c000fec2:	52                   	push   edx
c000fec3:	50                   	push   eax
c000fec4:	e8 7b 33 00 00       	call   c0013244 <inet_chksum_pseudo>
c000fec9:	83 c4 20             	add    esp,0x20
c000fecc:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fed0:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fed6:	83 c0 01             	add    eax,0x1
c000fed9:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fedf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee3:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fee6:	0f b6 d8             	movzx  ebx,al
c000fee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feed:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fef0:	0f b6 c8             	movzx  ecx,al
c000fef3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef7:	8d 70 04             	lea    esi,[eax+0x4]
c000fefa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff05:	83 ec 08             	sub    esp,0x8
c000ff08:	6a 06                	push   0x6
c000ff0a:	53                   	push   ebx
c000ff0b:	51                   	push   ecx
c000ff0c:	56                   	push   esi
c000ff0d:	52                   	push   edx
c000ff0e:	50                   	push   eax
c000ff0f:	e8 70 3f 00 00       	call   c0013e84 <ip_output>
c000ff14:	83 c4 20             	add    esp,0x20
c000ff17:	eb 07                	jmp    c000ff20 <tcp_output_segment+0x224>
c000ff19:	8d 76 00             	lea    esi,[esi+0x0]
c000ff1c:	90                   	nop
c000ff1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff20:	83 c4 14             	add    esp,0x14
c000ff23:	5b                   	pop    ebx
c000ff24:	5e                   	pop    esi
c000ff25:	c3                   	ret    
c000ff26:	66 90                	xchg   ax,ax

c000ff28 <tcp_output>:
c000ff28:	56                   	push   esi
c000ff29:	53                   	push   ebx
c000ff2a:	83 ec 24             	sub    esp,0x24
c000ff2d:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000ff32:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ff36:	75 08                	jne    c000ff40 <tcp_output+0x18>
c000ff38:	b0 00                	mov    al,0x0
c000ff3a:	e9 6d 04 00 00       	jmp    c00103ac <tcp_output+0x484>
c000ff3f:	90                   	nop
c000ff40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff44:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000ff48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff4c:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000ff4f:	89 c8                	mov    eax,ecx
c000ff51:	0f b7 d8             	movzx  ebx,ax
c000ff54:	0f b7 ca             	movzx  ecx,dx
c000ff57:	39 cb                	cmp    ebx,ecx
c000ff59:	76 05                	jbe    c000ff60 <tcp_output+0x38>
c000ff5b:	89 d0                	mov    eax,edx
c000ff5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff60:	0f b7 c0             	movzx  eax,ax
c000ff63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff76:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff79:	0f b6 c0             	movzx  eax,al
c000ff7c:	83 e0 02             	and    eax,0x2
c000ff7f:	74 4f                	je     c000ffd0 <tcp_output+0xa8>
c000ff81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ff86:	74 34                	je     c000ffbc <tcp_output+0x94>
c000ff88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 a5 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa4:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000ffa7:	29 c2                	sub    edx,eax
c000ffa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ffb0:	0f b7 c0             	movzx  eax,ax
c000ffb3:	01 d0                	add    eax,edx
c000ffb5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ffb9:	73 15                	jae    c000ffd0 <tcp_output+0xa8>
c000ffbb:	90                   	nop
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ffc3:	e8 4c fc ff ff       	call   c000fc14 <tcp_send_empty_ack>
c000ffc8:	83 c4 10             	add    esp,0x10
c000ffcb:	e9 dc 03 00 00       	jmp    c00103ac <tcp_output+0x484>
c000ffd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ffd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffdb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ffe0:	0f 84 e6 02 00 00    	je     c00102cc <tcp_output+0x3a4>
c000ffe6:	eb 0c                	jmp    c000fff4 <tcp_output+0xcc>
c000ffe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffec:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff2:	66 90                	xchg   ax,ax
c000fff4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fff8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fffa:	85 c0                	test   eax,eax
c000fffc:	75 ea                	jne    c000ffe8 <tcp_output+0xc0>
c000fffe:	e9 c9 02 00 00       	jmp    c00102cc <tcp_output+0x3a4>
c0010003:	90                   	nop
c0010004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010008:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001000b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001000f:	0f b7 c0             	movzx  eax,ax
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	50                   	push   eax
c0010016:	e8 01 0c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	0f b7 c0             	movzx  eax,ax
c0010021:	83 e0 04             	and    eax,0x4
c0010024:	74 16                	je     c001003c <tcp_output+0x114>
c0010026:	83 ec 08             	sub    esp,0x8
c0010029:	68 73 0a 03 c0       	push   0xc0030a73
c001002e:	68 66 fb 02 c0       	push   0xc002fb66
c0010033:	e8 4c fb 00 00       	call   c001fb84 <CPrintf>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010043:	85 c0                	test   eax,eax
c0010045:	74 45                	je     c001008c <tcp_output+0x164>
c0010047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001004b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001004e:	0f b6 c0             	movzx  eax,al
c0010051:	83 e0 44             	and    eax,0x44
c0010054:	75 36                	jne    c001008c <tcp_output+0x164>
c0010056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001005a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001005d:	85 c0                	test   eax,eax
c001005f:	74 33                	je     c0010094 <tcp_output+0x16c>
c0010061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010065:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010068:	8b 00                	mov    eax,DWORD PTR [eax]
c001006a:	85 c0                	test   eax,eax
c001006c:	75 1e                	jne    c001008c <tcp_output+0x164>
c001006e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010072:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010075:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001007c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001007f:	0f b7 d2             	movzx  edx,dx
c0010082:	0f b7 c0             	movzx  eax,ax
c0010085:	39 c2                	cmp    edx,eax
c0010087:	72 0b                	jb     c0010094 <tcp_output+0x16c>
c0010089:	8d 76 00             	lea    esi,[esi+0x0]
c001008c:	b8 01 00 00 00       	mov    eax,0x1
c0010091:	eb 09                	jmp    c001009c <tcp_output+0x174>
c0010093:	90                   	nop
c0010094:	b8 00 00 00 00       	mov    eax,0x0
c0010099:	8d 76 00             	lea    esi,[esi+0x0]
c001009c:	85 c0                	test   eax,eax
c001009e:	75 18                	jne    c00100b8 <tcp_output+0x190>
c00100a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100a4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00100a7:	0f b6 c0             	movzx  eax,al
c00100aa:	25 a0 00 00 00       	and    eax,0xa0
c00100af:	0f 84 57 02 00 00    	je     c001030c <tcp_output+0x3e4>
c00100b5:	8d 76 00             	lea    esi,[esi+0x0]
c00100b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00100be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c2:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00100c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00100cc:	83 f8 02             	cmp    eax,0x2
c00100cf:	74 3b                	je     c001010c <tcp_output+0x1e4>
c00100d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100d8:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	6a 10                	push   0x10
c00100e1:	e8 36 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	89 c2                	mov    edx,eax
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100f2:	09 da                	or     edx,ebx
c00100f4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c00100f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00100ff:	83 e0 fc             	and    eax,0xfffffffc
c0010102:	88 c2                	mov    dl,al
c0010104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010108:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001010b:	90                   	nop
c001010c:	83 ec 08             	sub    esp,0x8
c001010f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010113:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010117:	e8 e0 fb ff ff       	call   c000fcfc <tcp_output_segment>
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010126:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	50                   	push   eax
c001012d:	e8 0e 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	89 c3                	mov    ebx,eax
c0010137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001013b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001013e:	0f b7 f0             	movzx  esi,ax
c0010141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010148:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001014c:	0f b7 c0             	movzx  eax,ax
c001014f:	83 ec 0c             	sub    esp,0xc
c0010152:	50                   	push   eax
c0010153:	e8 c4 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010158:	83 c4 10             	add    esp,0x10
c001015b:	0f b7 c0             	movzx  eax,ax
c001015e:	83 e0 03             	and    eax,0x3
c0010161:	0f 95 c0             	setne  al
c0010164:	0f b6 c0             	movzx  eax,al
c0010167:	01 f0                	add    eax,esi
c0010169:	01 d8                	add    eax,ebx
c001016b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001016f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010173:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010176:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001017a:	79 0c                	jns    c0010188 <tcp_output+0x260>
c001017c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010180:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010184:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010187:	90                   	nop
c0010188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001018c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001018f:	0f b7 d8             	movzx  ebx,ax
c0010192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010196:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010199:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001019d:	0f b7 c0             	movzx  eax,ax
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	50                   	push   eax
c00101a4:	e8 73 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	0f b7 c0             	movzx  eax,ax
c00101af:	83 e0 03             	and    eax,0x3
c00101b2:	0f 95 c0             	setne  al
c00101b5:	0f b6 c0             	movzx  eax,al
c00101b8:	01 d8                	add    eax,ebx
c00101ba:	85 c0                	test   eax,eax
c00101bc:	0f 8e ee 00 00 00    	jle    c00102b0 <tcp_output+0x388>
c00101c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00101cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00101d3:	85 c0                	test   eax,eax
c00101d5:	75 19                	jne    c00101f0 <tcp_output+0x2c8>
c00101d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00101e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101ea:	e9 d1 00 00 00       	jmp    c00102c0 <tcp_output+0x398>
c00101ef:	90                   	nop
c00101f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	50                   	push   eax
c00101fe:	e8 3d 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	89 c3                	mov    ebx,eax
c0010208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001020c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001020f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010212:	83 ec 0c             	sub    esp,0xc
c0010215:	50                   	push   eax
c0010216:	e8 25 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	29 c3                	sub    ebx,eax
c0010220:	89 d8                	mov    eax,ebx
c0010222:	79 74                	jns    c0010298 <tcp_output+0x370>
c0010224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010228:	83 c0 7c             	add    eax,0x7c
c001022b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001022f:	eb 0f                	jmp    c0010240 <tcp_output+0x318>
c0010231:	8d 76 00             	lea    esi,[esi+0x0]
c0010234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010238:	8b 00                	mov    eax,DWORD PTR [eax]
c001023a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001023e:	66 90                	xchg   ax,ax
c0010240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010244:	8b 00                	mov    eax,DWORD PTR [eax]
c0010246:	85 c0                	test   eax,eax
c0010248:	74 36                	je     c0010280 <tcp_output+0x358>
c001024a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001024e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010250:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010253:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	50                   	push   eax
c001025a:	e8 e1 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	89 c3                	mov    ebx,eax
c0010264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001026b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	50                   	push   eax
c0010272:	e8 c9 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010277:	83 c4 10             	add    esp,0x10
c001027a:	29 c3                	sub    ebx,eax
c001027c:	89 d8                	mov    eax,ebx
c001027e:	78 b4                	js     c0010234 <tcp_output+0x30c>
c0010280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010284:	8b 10                	mov    edx,DWORD PTR [eax]
c0010286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001028a:	89 10                	mov    DWORD PTR [eax],edx
c001028c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010294:	89 10                	mov    DWORD PTR [eax],edx
c0010296:	eb 28                	jmp    c00102c0 <tcp_output+0x398>
c0010298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001029c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102a0:	89 10                	mov    DWORD PTR [eax],edx
c00102a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00102a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ac:	eb 12                	jmp    c00102c0 <tcp_output+0x398>
c00102ae:	66 90                	xchg   ax,ax
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00102b7:	e8 58 9d ff ff       	call   c000a014 <tcp_seg_free>
c00102bc:	83 c4 10             	add    esp,0x10
c00102bf:	90                   	nop
c00102c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00102c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102cb:	90                   	nop
c00102cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00102d1:	74 3d                	je     c0010310 <tcp_output+0x3e8>
c00102d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102dd:	83 ec 0c             	sub    esp,0xc
c00102e0:	50                   	push   eax
c00102e1:	e8 5a 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00102e6:	83 c4 10             	add    esp,0x10
c00102e9:	89 c2                	mov    edx,eax
c00102eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102ef:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102f2:	29 c2                	sub    edx,eax
c00102f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102fb:	0f b7 c0             	movzx  eax,ax
c00102fe:	01 d0                	add    eax,edx
c0010300:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010304:	0f 83 fa fc ff ff    	jae    c0010004 <tcp_output+0xdc>
c001030a:	eb 04                	jmp    c0010310 <tcp_output+0x3e8>
c001030c:	90                   	nop
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010314:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010317:	85 c0                	test   eax,eax
c0010319:	75 0d                	jne    c0010328 <tcp_output+0x400>
c001031b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001031f:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010325:	8d 76 00             	lea    esi,[esi+0x0]
c0010328:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001032d:	74 65                	je     c0010394 <tcp_output+0x46c>
c001032f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010333:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010339:	0f b6 c0             	movzx  eax,al
c001033c:	85 c0                	test   eax,eax
c001033e:	75 54                	jne    c0010394 <tcp_output+0x46c>
c0010340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010347:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	50                   	push   eax
c001034e:	e8 ed 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	89 c2                	mov    edx,eax
c0010358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001035f:	29 c2                	sub    edx,eax
c0010361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010365:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010368:	0f b7 c0             	movzx  eax,ax
c001036b:	01 c2                	add    edx,eax
c001036d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010371:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010374:	0f b7 c0             	movzx  eax,ax
c0010377:	39 c2                	cmp    edx,eax
c0010379:	76 19                	jbe    c0010394 <tcp_output+0x46c>
c001037b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001037f:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010389:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001038d:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010394:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010398:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001039b:	83 e0 7f             	and    eax,0x7f
c001039e:	88 c2                	mov    dl,al
c00103a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00103a7:	b0 00                	mov    al,0x0
c00103a9:	8d 76 00             	lea    esi,[esi+0x0]
c00103ac:	83 c4 24             	add    esp,0x24
c00103af:	5b                   	pop    ebx
c00103b0:	5e                   	pop    esi
c00103b1:	c3                   	ret    
c00103b2:	66 90                	xchg   ax,ax

c00103b4 <tcp_rst>:
c00103b4:	83 ec 2c             	sub    esp,0x2c
c00103b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00103bb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00103bf:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00103c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00103c9:	83 ec 04             	sub    esp,0x4
c00103cc:	6a 00                	push   0x0
c00103ce:	6a 14                	push   0x14
c00103d0:	6a 01                	push   0x1
c00103d2:	e8 8d 81 ff ff       	call   c0008564 <pbuf_alloc>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103e3:	0f 84 3f 01 00 00    	je     c0010528 <tcp_rst+0x174>
c00103e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103ed:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00103f1:	0f b7 c0             	movzx  eax,ax
c00103f4:	83 f8 13             	cmp    eax,0x13
c00103f7:	77 17                	ja     c0010410 <tcp_rst+0x5c>
c00103f9:	83 ec 08             	sub    esp,0x8
c00103fc:	68 80 07 03 c0       	push   0xc0030780
c0010401:	68 66 fb 02 c0       	push   0xc002fb66
c0010406:	e8 79 f7 00 00       	call   c001fb84 <CPrintf>
c001040b:	83 c4 10             	add    esp,0x10
c001040e:	66 90                	xchg   ax,ax
c0010410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001041b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	50                   	push   eax
c0010424:	e8 f3 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	89 c2                	mov    edx,eax
c001042e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010432:	66 89 10             	mov    WORD PTR [eax],dx
c0010435:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001043a:	83 ec 0c             	sub    esp,0xc
c001043d:	50                   	push   eax
c001043e:	e8 d9 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	89 c2                	mov    edx,eax
c0010448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001044c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010457:	e8 e4 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	89 c2                	mov    edx,eax
c0010461:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001046f:	e8 cc 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	89 c2                	mov    edx,eax
c0010479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010480:	83 ec 0c             	sub    esp,0xc
c0010483:	68 14 50 00 00       	push   0x5014
c0010488:	e8 8f 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	89 c2                	mov    edx,eax
c0010492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010496:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001049a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001049e:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c00104a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104a8:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00104ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104b2:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00104b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00104bf:	0f b7 c0             	movzx  eax,ax
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	50                   	push   eax
c00104c6:	6a 06                	push   0x6
c00104c8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00104cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00104d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00104d4:	e8 6b 2d 00 00       	call   c0013244 <inet_chksum_pseudo>
c00104d9:	83 c4 20             	add    esp,0x20
c00104dc:	89 c2                	mov    edx,eax
c00104de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104e2:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00104e6:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00104ec:	83 c0 01             	add    eax,0x1
c00104ef:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	6a 06                	push   0x6
c00104fa:	6a 00                	push   0x0
c00104fc:	68 ff 00 00 00       	push   0xff
c0010501:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010505:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010509:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001050d:	e8 72 39 00 00       	call   c0013e84 <ip_output>
c0010512:	83 c4 20             	add    esp,0x20
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001051c:	e8 67 7e ff ff       	call   c0008388 <pbuf_free>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	eb 06                	jmp    c001052c <tcp_rst+0x178>
c0010526:	66 90                	xchg   ax,ax
c0010528:	90                   	nop
c0010529:	8d 76 00             	lea    esi,[esi+0x0]
c001052c:	83 c4 2c             	add    esp,0x2c
c001052f:	c3                   	ret    

c0010530 <tcp_rexmit_rto>:
c0010530:	83 ec 1c             	sub    esp,0x1c
c0010533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010537:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001053a:	85 c0                	test   eax,eax
c001053c:	74 7a                	je     c00105b8 <tcp_rexmit_rto+0x88>
c001053e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010542:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010549:	eb 0d                	jmp    c0010558 <tcp_rexmit_rto+0x28>
c001054b:	90                   	nop
c001054c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010550:	8b 00                	mov    eax,DWORD PTR [eax]
c0010552:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010556:	66 90                	xchg   ax,ax
c0010558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001055c:	8b 00                	mov    eax,DWORD PTR [eax]
c001055e:	85 c0                	test   eax,eax
c0010560:	75 ea                	jne    c001054c <tcp_rexmit_rto+0x1c>
c0010562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010566:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c0010569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056d:	89 10                	mov    DWORD PTR [eax],edx
c001056f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010573:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001057a:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c001057d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010581:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001058c:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001058f:	83 c0 01             	add    eax,0x1
c0010592:	88 c2                	mov    dl,al
c0010594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010598:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001059b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001059f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00105ad:	e8 76 f9 ff ff       	call   c000ff28 <tcp_output>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	eb 05                	jmp    c00105bc <tcp_rexmit_rto+0x8c>
c00105b7:	90                   	nop
c00105b8:	90                   	nop
c00105b9:	8d 76 00             	lea    esi,[esi+0x0]
c00105bc:	83 c4 1c             	add    esp,0x1c
c00105bf:	c3                   	ret    

c00105c0 <tcp_rexmit>:
c00105c0:	53                   	push   ebx
c00105c1:	83 ec 18             	sub    esp,0x18
c00105c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105cb:	85 c0                	test   eax,eax
c00105cd:	0f 84 a9 00 00 00    	je     c001067c <tcp_rexmit+0xbc>
c00105d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105d7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00105e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105e8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00105eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ef:	83 c0 78             	add    eax,0x78
c00105f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105f6:	eb 0c                	jmp    c0010604 <tcp_rexmit+0x44>
c00105f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00105fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010602:	66 90                	xchg   ax,ax
c0010604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010608:	8b 00                	mov    eax,DWORD PTR [eax]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 36                	je     c0010644 <tcp_rexmit+0x84>
c001060e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010612:	8b 00                	mov    eax,DWORD PTR [eax]
c0010614:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010617:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	50                   	push   eax
c001061e:	e8 1d 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	89 c3                	mov    ebx,eax
c0010628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001062c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001062f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	50                   	push   eax
c0010636:	e8 05 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	29 c3                	sub    ebx,eax
c0010640:	89 d8                	mov    eax,ebx
c0010642:	78 b4                	js     c00105f8 <tcp_rexmit+0x38>
c0010644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010648:	8b 10                	mov    edx,DWORD PTR [eax]
c001064a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001064e:	89 10                	mov    DWORD PTR [eax],edx
c0010650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010658:	89 10                	mov    DWORD PTR [eax],edx
c001065a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065e:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010661:	83 c0 01             	add    eax,0x1
c0010664:	88 c2                	mov    dl,al
c0010666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066a:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001066d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010671:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010678:	eb 06                	jmp    c0010680 <tcp_rexmit+0xc0>
c001067a:	66 90                	xchg   ax,ax
c001067c:	90                   	nop
c001067d:	8d 76 00             	lea    esi,[esi+0x0]
c0010680:	83 c4 18             	add    esp,0x18
c0010683:	5b                   	pop    ebx
c0010684:	c3                   	ret    
c0010685:	8d 76 00             	lea    esi,[esi+0x0]

c0010688 <tcp_rexmit_fast>:
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010692:	85 c0                	test   eax,eax
c0010694:	0f 84 d2 00 00 00    	je     c001076c <tcp_rexmit_fast+0xe4>
c001069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106a1:	0f b6 c0             	movzx  eax,al
c00106a4:	83 e0 04             	and    eax,0x4
c00106a7:	0f 85 bf 00 00 00    	jne    c001076c <tcp_rexmit_fast+0xe4>
c00106ad:	83 ec 0c             	sub    esp,0xc
c00106b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b4:	e8 07 ff ff ff       	call   c00105c0 <tcp_rexmit>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00106cb:	0f b7 d2             	movzx  edx,dx
c00106ce:	0f b7 c0             	movzx  eax,ax
c00106d1:	39 c2                	cmp    edx,eax
c00106d3:	76 1b                	jbe    c00106f0 <tcp_rexmit_fast+0x68>
c00106d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00106dc:	0f b7 c0             	movzx  eax,ax
c00106df:	d1 e8                	shr    eax,1
c00106e1:	89 c2                	mov    edx,eax
c00106e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e7:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00106eb:	eb 1b                	jmp    c0010708 <tcp_rexmit_fast+0x80>
c00106ed:	8d 76 00             	lea    esi,[esi+0x0]
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00106f8:	0f b7 c0             	movzx  eax,ax
c00106fb:	d1 e8                	shr    eax,1
c00106fd:	89 c2                	mov    edx,eax
c00106ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010703:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010707:	90                   	nop
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001070f:	0f b7 d0             	movzx  edx,ax
c0010712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010716:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010719:	0f b7 c0             	movzx  eax,ax
c001071c:	d1 e0                	shl    eax,1
c001071e:	39 c2                	cmp    edx,eax
c0010720:	7d 16                	jge    c0010738 <tcp_rexmit_fast+0xb0>
c0010722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010726:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010729:	d1 e0                	shl    eax,1
c001072b:	89 c2                	mov    edx,eax
c001072d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010731:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010735:	8d 76 00             	lea    esi,[esi+0x0]
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001073f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010743:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010746:	89 c1                	mov    ecx,eax
c0010748:	d1 e1                	shl    ecx,1
c001074a:	01 c8                	add    eax,ecx
c001074c:	01 d0                	add    eax,edx
c001074e:	89 c2                	mov    edx,eax
c0010750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010754:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c0010758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001075f:	83 c8 04             	or     eax,0x4
c0010762:	88 c2                	mov    dl,al
c0010764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010768:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001076b:	90                   	nop
c001076c:	90                   	nop
c001076d:	83 c4 0c             	add    esp,0xc
c0010770:	c3                   	ret    
c0010771:	8d 76 00             	lea    esi,[esi+0x0]

c0010774 <tcp_keepalive>:
c0010774:	83 ec 1c             	sub    esp,0x1c
c0010777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001077b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001077e:	83 e8 01             	sub    eax,0x1
c0010781:	83 ec 0c             	sub    esp,0xc
c0010784:	50                   	push   eax
c0010785:	e8 b6 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	50                   	push   eax
c001078e:	6a 00                	push   0x0
c0010790:	6a 00                	push   0x0
c0010792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010796:	e8 c5 e2 ff ff       	call   c000ea60 <tcp_output_alloc_header>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107a7:	0f 84 8b 00 00 00    	je     c0010838 <tcp_keepalive+0xc4>
c00107ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107bf:	0f b7 d0             	movzx  edx,ax
c00107c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107c6:	8d 48 04             	lea    ecx,[eax+0x4]
c00107c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	52                   	push   edx
c00107d1:	6a 06                	push   0x6
c00107d3:	51                   	push   ecx
c00107d4:	50                   	push   eax
c00107d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00107d9:	e8 66 2a 00 00       	call   c0013244 <inet_chksum_pseudo>
c00107de:	83 c4 20             	add    esp,0x20
c00107e1:	89 c2                	mov    edx,eax
c00107e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107e7:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00107eb:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00107f1:	83 c0 01             	add    eax,0x1
c00107f4:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00107fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fe:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010801:	0f b6 d0             	movzx  edx,al
c0010804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010808:	8d 48 04             	lea    ecx,[eax+0x4]
c001080b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001080f:	83 ec 08             	sub    esp,0x8
c0010812:	6a 06                	push   0x6
c0010814:	6a 00                	push   0x0
c0010816:	52                   	push   edx
c0010817:	51                   	push   ecx
c0010818:	50                   	push   eax
c0010819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001081d:	e8 62 36 00 00       	call   c0013e84 <ip_output>
c0010822:	83 c4 20             	add    esp,0x20
c0010825:	83 ec 0c             	sub    esp,0xc
c0010828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001082c:	e8 57 7b ff ff       	call   c0008388 <pbuf_free>
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	eb 06                	jmp    c001083c <tcp_keepalive+0xc8>
c0010836:	66 90                	xchg   ax,ax
c0010838:	90                   	nop
c0010839:	8d 76 00             	lea    esi,[esi+0x0]
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <tcp_zero_window_probe>:
c0010840:	53                   	push   ebx
c0010841:	83 ec 28             	sub    esp,0x28
c0010844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010848:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001084b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001084f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010854:	75 0e                	jne    c0010864 <tcp_zero_window_probe+0x24>
c0010856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001085a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001085d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010861:	8d 76 00             	lea    esi,[esi+0x0]
c0010864:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010869:	0f 84 99 01 00 00    	je     c0010a08 <tcp_zero_window_probe+0x1c8>
c001086f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010873:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010876:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001087a:	0f b7 c0             	movzx  eax,ax
c001087d:	83 ec 0c             	sub    esp,0xc
c0010880:	50                   	push   eax
c0010881:	e8 96 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	0f b7 c0             	movzx  eax,ax
c001088c:	83 e0 01             	and    eax,0x1
c001088f:	74 17                	je     c00108a8 <tcp_zero_window_probe+0x68>
c0010891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010895:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010898:	0f b7 c0             	movzx  eax,ax
c001089b:	85 c0                	test   eax,eax
c001089d:	75 09                	jne    c00108a8 <tcp_zero_window_probe+0x68>
c001089f:	b8 01 00 00 00       	mov    eax,0x1
c00108a4:	eb 0a                	jmp    c00108b0 <tcp_zero_window_probe+0x70>
c00108a6:	66 90                	xchg   ax,ax
c00108a8:	b8 00 00 00 00       	mov    eax,0x0
c00108ad:	8d 76 00             	lea    esi,[esi+0x0]
c00108b0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00108b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00108b9:	85 c0                	test   eax,eax
c00108bb:	0f 94 c0             	sete   al
c00108be:	0f b6 c0             	movzx  eax,al
c00108c1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00108c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00108d0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00108d5:	52                   	push   edx
c00108d6:	50                   	push   eax
c00108d7:	6a 00                	push   0x0
c00108d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108dd:	e8 7e e1 ff ff       	call   c000ea60 <tcp_output_alloc_header>
c00108e2:	83 c4 10             	add    esp,0x10
c00108e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00108e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00108ee:	0f 84 18 01 00 00    	je     c0010a0c <tcp_zero_window_probe+0x1cc>
c00108f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108ff:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010904:	85 c0                	test   eax,eax
c0010906:	74 28                	je     c0010930 <tcp_zero_window_probe+0xf0>
c0010908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010910:	80 e4 c0             	and    ah,0xc0
c0010913:	89 c3                	mov    ebx,eax
c0010915:	83 ec 0c             	sub    esp,0xc
c0010918:	6a 11                	push   0x11
c001091a:	e8 fd 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001091f:	83 c4 10             	add    esp,0x10
c0010922:	09 d8                	or     eax,ebx
c0010924:	89 c2                	mov    edx,eax
c0010926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092a:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001092e:	eb 58                	jmp    c0010988 <tcp_zero_window_probe+0x148>
c0010930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010937:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001093a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001093e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010945:	83 c0 14             	add    eax,0x14
c0010948:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001094c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010950:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010954:	0f b7 c0             	movzx  eax,ax
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	50                   	push   eax
c001095b:	e8 bc 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	0f b7 c0             	movzx  eax,ax
c0010966:	c1 e8 0c             	shr    eax,0xc
c0010969:	c1 e0 02             	shl    eax,0x2
c001096c:	0f b7 d0             	movzx  edx,ax
c001096f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010976:	52                   	push   edx
c0010977:	6a 01                	push   0x1
c0010979:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001097d:	50                   	push   eax
c001097e:	e8 b1 86 ff ff       	call   c0009034 <pbuf_copy_partial>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	66 90                	xchg   ax,ax
c0010988:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001098c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001098f:	0f b7 d0             	movzx  edx,ax
c0010992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010996:	8d 48 04             	lea    ecx,[eax+0x4]
c0010999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001099d:	83 ec 0c             	sub    esp,0xc
c00109a0:	52                   	push   edx
c00109a1:	6a 06                	push   0x6
c00109a3:	51                   	push   ecx
c00109a4:	50                   	push   eax
c00109a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00109a9:	e8 96 28 00 00       	call   c0013244 <inet_chksum_pseudo>
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	89 c2                	mov    edx,eax
c00109b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b7:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00109bb:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00109c1:	83 c0 01             	add    eax,0x1
c00109c4:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00109ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109ce:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00109d1:	0f b6 d0             	movzx  edx,al
c00109d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109d8:	8d 48 04             	lea    ecx,[eax+0x4]
c00109db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109df:	83 ec 08             	sub    esp,0x8
c00109e2:	6a 06                	push   0x6
c00109e4:	6a 00                	push   0x0
c00109e6:	52                   	push   edx
c00109e7:	51                   	push   ecx
c00109e8:	50                   	push   eax
c00109e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00109ed:	e8 92 34 00 00       	call   c0013e84 <ip_output>
c00109f2:	83 c4 20             	add    esp,0x20
c00109f5:	83 ec 0c             	sub    esp,0xc
c00109f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00109fc:	e8 87 79 ff ff       	call   c0008388 <pbuf_free>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	eb 0a                	jmp    c0010a10 <tcp_zero_window_probe+0x1d0>
c0010a06:	66 90                	xchg   ax,ax
c0010a08:	90                   	nop
c0010a09:	eb 05                	jmp    c0010a10 <tcp_zero_window_probe+0x1d0>
c0010a0b:	90                   	nop
c0010a0c:	90                   	nop
c0010a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a10:	83 c4 28             	add    esp,0x28
c0010a13:	5b                   	pop    ebx
c0010a14:	c3                   	ret    
c0010a15:	66 90                	xchg   ax,ax
c0010a17:	90                   	nop

c0010a18 <sys_timeout>:
c0010a18:	83 ec 1c             	sub    esp,0x1c
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	6a 0b                	push   0xb
c0010a20:	e8 77 6f ff ff       	call   c000799c <memp_malloc>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010a31:	75 25                	jne    c0010a58 <sys_timeout+0x40>
c0010a33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010a38:	0f 85 3e 01 00 00    	jne    c0010b7c <sys_timeout+0x164>
c0010a3e:	83 ec 08             	sub    esp,0x8
c0010a41:	68 8c 0a 03 c0       	push   0xc0030a8c
c0010a46:	68 66 fb 02 c0       	push   0xc002fb66
c0010a4b:	e8 34 f1 00 00       	call   c001fb84 <CPrintf>
c0010a50:	83 c4 10             	add    esp,0x10
c0010a53:	e9 24 01 00 00       	jmp    c0010b7c <sys_timeout+0x164>
c0010a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010a75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010a80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a83:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a88:	85 c0                	test   eax,eax
c0010a8a:	75 10                	jne    c0010a9c <sys_timeout+0x84>
c0010a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a90:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a95:	e9 e6 00 00 00       	jmp    c0010b80 <sys_timeout+0x168>
c0010a9a:	66 90                	xchg   ax,ax
c0010a9c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010aa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aa4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010aa8:	73 2e                	jae    c0010ad8 <sys_timeout+0xc0>
c0010aaa:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010aaf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ab2:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ab7:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010abb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010abe:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010ac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ac8:	89 10                	mov    DWORD PTR [eax],edx
c0010aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ace:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010ad3:	e9 a8 00 00 00       	jmp    c0010b80 <sys_timeout+0x168>
c0010ad8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ae1:	e9 86 00 00 00       	jmp    c0010b6c <sys_timeout+0x154>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010aec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010af6:	29 c2                	sub    edx,eax
c0010af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010afc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b05:	85 c0                	test   eax,eax
c0010b07:	74 17                	je     c0010b20 <sys_timeout+0x108>
c0010b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b19:	39 c2                	cmp    edx,eax
c0010b1b:	76 43                	jbe    c0010b60 <sys_timeout+0x148>
c0010b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b26:	85 c0                	test   eax,eax
c0010b28:	74 1e                	je     c0010b48 <sys_timeout+0x130>
c0010b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b30:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b40:	29 d1                	sub    ecx,edx
c0010b42:	89 ca                	mov    edx,ecx
c0010b44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b47:	90                   	nop
c0010b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b52:	89 10                	mov    DWORD PTR [eax],edx
c0010b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b5c:	89 10                	mov    DWORD PTR [eax],edx
c0010b5e:	eb 20                	jmp    c0010b80 <sys_timeout+0x168>
c0010b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010b71:	0f 85 71 ff ff ff    	jne    c0010ae8 <sys_timeout+0xd0>
c0010b77:	eb 07                	jmp    c0010b80 <sys_timeout+0x168>
c0010b79:	8d 76 00             	lea    esi,[esi+0x0]
c0010b7c:	90                   	nop
c0010b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b80:	83 c4 1c             	add    esp,0x1c
c0010b83:	c3                   	ret    

c0010b84 <tcpip_tcp_timer>:
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	e8 b8 a4 ff ff       	call   c000b044 <tcp_tmr>
c0010b8c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b91:	85 c0                	test   eax,eax
c0010b93:	75 0b                	jne    c0010ba0 <tcpip_tcp_timer+0x1c>
c0010b95:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b9a:	85 c0                	test   eax,eax
c0010b9c:	74 1e                	je     c0010bbc <tcpip_tcp_timer+0x38>
c0010b9e:	66 90                	xchg   ax,ax
c0010ba0:	83 ec 04             	sub    esp,0x4
c0010ba3:	6a 00                	push   0x0
c0010ba5:	68 84 0b 01 c0       	push   0xc0010b84
c0010baa:	68 fa 00 00 00       	push   0xfa
c0010baf:	e8 64 fe ff ff       	call   c0010a18 <sys_timeout>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	eb 0f                	jmp    c0010bc8 <tcpip_tcp_timer+0x44>
c0010bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bbc:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010bc6:	66 90                	xchg   ax,ax
c0010bc8:	90                   	nop
c0010bc9:	83 c4 0c             	add    esp,0xc
c0010bcc:	c3                   	ret    
c0010bcd:	8d 76 00             	lea    esi,[esi+0x0]

c0010bd0 <tcp_timer_needed>:
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	75 38                	jne    c0010c14 <tcp_timer_needed+0x44>
c0010bdc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010be1:	85 c0                	test   eax,eax
c0010be3:	75 0b                	jne    c0010bf0 <tcp_timer_needed+0x20>
c0010be5:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010bea:	85 c0                	test   eax,eax
c0010bec:	74 26                	je     c0010c14 <tcp_timer_needed+0x44>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010bfa:	83 ec 04             	sub    esp,0x4
c0010bfd:	6a 00                	push   0x0
c0010bff:	68 84 0b 01 c0       	push   0xc0010b84
c0010c04:	68 fa 00 00 00       	push   0xfa
c0010c09:	e8 0a fe ff ff       	call   c0010a18 <sys_timeout>
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	8d 76 00             	lea    esi,[esi+0x0]
c0010c14:	90                   	nop
c0010c15:	83 c4 0c             	add    esp,0xc
c0010c18:	c3                   	ret    
c0010c19:	8d 76 00             	lea    esi,[esi+0x0]

c0010c1c <ip_reass_timer>:
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	e8 18 3b 00 00       	call   c001473c <ip_reass_tmr>
c0010c24:	83 ec 04             	sub    esp,0x4
c0010c27:	6a 00                	push   0x0
c0010c29:	68 1c 0c 01 c0       	push   0xc0010c1c
c0010c2e:	68 e8 03 00 00       	push   0x3e8
c0010c33:	e8 e0 fd ff ff       	call   c0010a18 <sys_timeout>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	90                   	nop
c0010c3c:	83 c4 0c             	add    esp,0xc
c0010c3f:	c3                   	ret    

c0010c40 <arp_timer>:
c0010c40:	83 ec 0c             	sub    esp,0xc
c0010c43:	e8 64 0d 00 00       	call   c00119ac <etharp_tmr>
c0010c48:	83 ec 04             	sub    esp,0x4
c0010c4b:	6a 00                	push   0x0
c0010c4d:	68 40 0c 01 c0       	push   0xc0010c40
c0010c52:	68 88 13 00 00       	push   0x1388
c0010c57:	e8 bc fd ff ff       	call   c0010a18 <sys_timeout>
c0010c5c:	83 c4 10             	add    esp,0x10
c0010c5f:	90                   	nop
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	c3                   	ret    

c0010c64 <sys_timeouts_init>:
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	83 ec 04             	sub    esp,0x4
c0010c6a:	6a 00                	push   0x0
c0010c6c:	68 1c 0c 01 c0       	push   0xc0010c1c
c0010c71:	68 e8 03 00 00       	push   0x3e8
c0010c76:	e8 9d fd ff ff       	call   c0010a18 <sys_timeout>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	83 ec 04             	sub    esp,0x4
c0010c81:	6a 00                	push   0x0
c0010c83:	68 40 0c 01 c0       	push   0xc0010c40
c0010c88:	68 88 13 00 00       	push   0x1388
c0010c8d:	e8 86 fd ff ff       	call   c0010a18 <sys_timeout>
c0010c92:	83 c4 10             	add    esp,0x10
c0010c95:	90                   	nop
c0010c96:	83 c4 0c             	add    esp,0xc
c0010c99:	c3                   	ret    
c0010c9a:	66 90                	xchg   ax,ax

c0010c9c <sys_untimeout>:
c0010c9c:	83 ec 1c             	sub    esp,0x1c
c0010c9f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ca4:	85 c0                	test   eax,eax
c0010ca6:	0f 84 b4 00 00 00    	je     c0010d60 <sys_untimeout+0xc4>
c0010cac:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010cbd:	e9 8e 00 00 00       	jmp    c0010d50 <sys_untimeout+0xb4>
c0010cc2:	66 90                	xchg   ax,ax
c0010cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ccb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010ccf:	75 6b                	jne    c0010d3c <sys_untimeout+0xa0>
c0010cd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cd8:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010cdc:	75 5e                	jne    c0010d3c <sys_untimeout+0xa0>
c0010cde:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010ce3:	75 0f                	jne    c0010cf4 <sys_untimeout+0x58>
c0010ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ceb:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010cf0:	eb 0e                	jmp    c0010d00 <sys_untimeout+0x64>
c0010cf2:	66 90                	xchg   ax,ax
c0010cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cf8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cfe:	89 10                	mov    DWORD PTR [eax],edx
c0010d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d06:	85 c0                	test   eax,eax
c0010d08:	74 1e                	je     c0010d28 <sys_untimeout+0x8c>
c0010d0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d10:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d17:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d20:	01 ca                	add    edx,ecx
c0010d22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d25:	8d 76 00             	lea    esi,[esi+0x0]
c0010d28:	83 ec 08             	sub    esp,0x8
c0010d2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d2f:	6a 0b                	push   0xb
c0010d31:	e8 92 6d ff ff       	call   c0007ac8 <memp_free>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	eb 29                	jmp    c0010d64 <sys_untimeout+0xc8>
c0010d3b:	90                   	nop
c0010d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d4e:	66 90                	xchg   ax,ax
c0010d50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d55:	0f 85 69 ff ff ff    	jne    c0010cc4 <sys_untimeout+0x28>
c0010d5b:	90                   	nop
c0010d5c:	eb 06                	jmp    c0010d64 <sys_untimeout+0xc8>
c0010d5e:	66 90                	xchg   ax,ax
c0010d60:	90                   	nop
c0010d61:	8d 76 00             	lea    esi,[esi+0x0]
c0010d64:	83 c4 1c             	add    esp,0x1c
c0010d67:	c3                   	ret    

c0010d68 <sys_timeouts_mbox_fetch>:
c0010d68:	83 ec 1c             	sub    esp,0x1c
c0010d6b:	90                   	nop
c0010d6c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 1f                	jne    c0010d94 <sys_timeouts_mbox_fetch+0x2c>
c0010d75:	83 ec 04             	sub    esp,0x4
c0010d78:	6a 00                	push   0x0
c0010d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d82:	e8 d9 ff fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d8e:	e9 cd 00 00 00       	jmp    c0010e60 <sys_timeouts_mbox_fetch+0xf8>
c0010d93:	90                   	nop
c0010d94:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d9c:	85 c0                	test   eax,eax
c0010d9e:	74 24                	je     c0010dc4 <sys_timeouts_mbox_fetch+0x5c>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010da8:	83 ec 04             	sub    esp,0x4
c0010dab:	50                   	push   eax
c0010dac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010db0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010db4:	e8 a7 ff fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dc0:	eb 0a                	jmp    c0010dcc <sys_timeouts_mbox_fetch+0x64>
c0010dc2:	66 90                	xchg   ax,ax
c0010dc4:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010dcc:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010dd1:	75 5d                	jne    c0010e30 <sys_timeouts_mbox_fetch+0xc8>
c0010dd3:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010dd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010de2:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010de7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010deb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010df9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dfc:	83 ec 08             	sub    esp,0x8
c0010dff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e03:	6a 0b                	push   0xb
c0010e05:	e8 be 6c ff ff       	call   c0007ac8 <memp_free>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010e12:	0f 84 54 ff ff ff    	je     c0010d6c <sys_timeouts_mbox_fetch+0x4>
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e23:	ff d0                	call   eax
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	e9 3f ff ff ff       	jmp    c0010d6c <sys_timeouts_mbox_fetch+0x4>
c0010e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010e30:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e38:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010e3c:	73 16                	jae    c0010e54 <sys_timeouts_mbox_fetch+0xec>
c0010e3e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e46:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e4b:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010e4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e52:	eb 0c                	jmp    c0010e60 <sys_timeouts_mbox_fetch+0xf8>
c0010e54:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e60:	90                   	nop
c0010e61:	83 c4 1c             	add    esp,0x1c
c0010e64:	c3                   	ret    
c0010e65:	66 90                	xchg   ax,ax
c0010e67:	90                   	nop

c0010e68 <udp_input>:
c0010e68:	53                   	push   ebx
c0010e69:	83 ec 28             	sub    esp,0x28
c0010e6c:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010e72:	83 c0 01             	add    eax,0x1
c0010e75:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e8d:	0f b7 d8             	movzx  ebx,ax
c0010e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e97:	0f b7 c0             	movzx  eax,ax
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	50                   	push   eax
c0010e9e:	e8 79 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	0f b7 c0             	movzx  eax,ax
c0010ea9:	c1 e8 08             	shr    eax,0x8
c0010eac:	0f b7 c0             	movzx  eax,ax
c0010eaf:	83 e0 0f             	and    eax,0xf
c0010eb2:	83 c0 02             	add    eax,0x2
c0010eb5:	c1 e0 02             	shl    eax,0x2
c0010eb8:	39 c3                	cmp    ebx,eax
c0010eba:	7c 3c                	jl     c0010ef8 <udp_input+0x90>
c0010ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ec3:	0f b7 c0             	movzx  eax,ax
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	50                   	push   eax
c0010eca:	e8 4d fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	0f b7 c0             	movzx  eax,ax
c0010ed5:	c1 e8 08             	shr    eax,0x8
c0010ed8:	83 e0 0f             	and    eax,0xf
c0010edb:	c1 e0 02             	shl    eax,0x2
c0010ede:	f7 d8                	neg    eax
c0010ee0:	98                   	cwde   
c0010ee1:	83 ec 08             	sub    esp,0x8
c0010ee4:	50                   	push   eax
c0010ee5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ee9:	e8 fa 72 ff ff       	call   c00081e8 <pbuf_header>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	0f b6 c0             	movzx  eax,al
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	74 34                	je     c0010f2c <udp_input+0xc4>
c0010ef8:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010efe:	83 c0 01             	add    eax,0x1
c0010f01:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010f07:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010f0d:	83 c0 01             	add    eax,0x1
c0010f10:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f1d:	e8 66 74 ff ff       	call   c0008388 <pbuf_free>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	e9 aa 03 00 00       	jmp    c00112d4 <udp_input+0x46c>
c0010f2a:	66 90                	xchg   ax,ax
c0010f2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f37:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f3c:	83 ec 08             	sub    esp,0x8
c0010f3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f43:	50                   	push   eax
c0010f44:	e8 e3 2f 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010f50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f54:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f57:	0f b7 c0             	movzx  eax,ax
c0010f5a:	83 ec 0c             	sub    esp,0xc
c0010f5d:	50                   	push   eax
c0010f5e:	e8 b9 fc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f6f:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010f73:	0f b7 c0             	movzx  eax,ax
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	50                   	push   eax
c0010f7a:	e8 9d fc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010f7f:	83 c4 10             	add    esp,0x10
c0010f82:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010f87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010f8f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010f94:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010f9c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010fa1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fa5:	e9 0a 01 00 00       	jmp    c00110b4 <udp_input+0x24c>
c0010faa:	66 90                	xchg   ax,ax
c0010fac:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010fb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb5:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010fb9:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010fbe:	0f b7 c0             	movzx  eax,ax
c0010fc1:	39 c2                	cmp    edx,eax
c0010fc3:	75 57                	jne    c001101c <udp_input+0x1b4>
c0010fc5:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010fca:	85 c0                	test   eax,eax
c0010fcc:	75 12                	jne    c0010fe0 <udp_input+0x178>
c0010fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fd2:	85 c0                	test   eax,eax
c0010fd4:	74 22                	je     c0010ff8 <udp_input+0x190>
c0010fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	74 18                	je     c0010ff8 <udp_input+0x190>
c0010fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fe6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010feb:	39 c2                	cmp    edx,eax
c0010fed:	74 09                	je     c0010ff8 <udp_input+0x190>
c0010fef:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	74 24                	je     c001101c <udp_input+0x1b4>
c0010ff8:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010ffd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011002:	75 18                	jne    c001101c <udp_input+0x1b4>
c0011004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011008:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001100b:	0f b6 c0             	movzx  eax,al
c001100e:	83 e0 04             	and    eax,0x4
c0011011:	75 09                	jne    c001101c <udp_input+0x1b4>
c0011013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001101b:	90                   	nop
c001101c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011021:	85 c0                	test   eax,eax
c0011023:	74 7b                	je     c00110a0 <udp_input+0x238>
c0011025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011029:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001102c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011031:	0f b7 c0             	movzx  eax,ax
c0011034:	39 c2                	cmp    edx,eax
c0011036:	75 68                	jne    c00110a0 <udp_input+0x238>
c0011038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001103c:	83 c0 04             	add    eax,0x4
c001103f:	74 1b                	je     c001105c <udp_input+0x1f4>
c0011041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011048:	85 c0                	test   eax,eax
c001104a:	74 10                	je     c001105c <udp_input+0x1f4>
c001104c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011050:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011053:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0011058:	39 c2                	cmp    edx,eax
c001105a:	75 44                	jne    c00110a0 <udp_input+0x238>
c001105c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011061:	74 29                	je     c001108c <udp_input+0x224>
c0011063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011067:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001106a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001106e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011071:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001107b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001107e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011082:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011087:	eb 37                	jmp    c00110c0 <udp_input+0x258>
c0011089:	8d 76 00             	lea    esi,[esi+0x0]
c001108c:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0011092:	83 c0 01             	add    eax,0x1
c0011095:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c001109b:	eb 23                	jmp    c00110c0 <udp_input+0x258>
c001109d:	8d 76 00             	lea    esi,[esi+0x0]
c00110a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110b3:	90                   	nop
c00110b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110b9:	0f 85 ed fe ff ff    	jne    c0010fac <udp_input+0x144>
c00110bf:	90                   	nop
c00110c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110c5:	75 09                	jne    c00110d0 <udp_input+0x268>
c00110c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110cf:	90                   	nop
c00110d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110d5:	75 15                	jne    c00110ec <udp_input+0x284>
c00110d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00110de:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110e3:	39 c2                	cmp    edx,eax
c00110e5:	0f 85 d9 01 00 00    	jne    c00112c4 <udp_input+0x45c>
c00110eb:	90                   	nop
c00110ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110f0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00110f4:	0f b7 c0             	movzx  eax,ax
c00110f7:	85 c0                	test   eax,eax
c00110f9:	74 61                	je     c001115c <udp_input+0x2f4>
c00110fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011102:	0f b7 c0             	movzx  eax,ax
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	50                   	push   eax
c0011109:	6a 11                	push   0x11
c001110b:	68 98 68 03 c0       	push   0xc0036898
c0011110:	68 90 68 03 c0       	push   0xc0036890
c0011115:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011119:	e8 26 21 00 00       	call   c0013244 <inet_chksum_pseudo>
c001111e:	83 c4 20             	add    esp,0x20
c0011121:	0f b7 c0             	movzx  eax,ax
c0011124:	85 c0                	test   eax,eax
c0011126:	74 34                	je     c001115c <udp_input+0x2f4>
c0011128:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001112e:	83 c0 01             	add    eax,0x1
c0011131:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011137:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001113d:	83 c0 01             	add    eax,0x1
c0011140:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114d:	e8 36 72 ff ff       	call   c0008388 <pbuf_free>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	e9 7a 01 00 00       	jmp    c00112d4 <udp_input+0x46c>
c001115a:	66 90                	xchg   ax,ax
c001115c:	83 ec 08             	sub    esp,0x8
c001115f:	6a f8                	push   0xfffffff8
c0011161:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011165:	e8 7e 70 ff ff       	call   c00081e8 <pbuf_header>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	0f b6 c0             	movzx  eax,al
c0011170:	85 c0                	test   eax,eax
c0011172:	74 38                	je     c00111ac <udp_input+0x344>
c0011174:	83 ec 08             	sub    esp,0x8
c0011177:	68 c9 0a 03 c0       	push   0xc0030ac9
c001117c:	68 66 fb 02 c0       	push   0xc002fb66
c0011181:	e8 fe e9 00 00       	call   c001fb84 <CPrintf>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001118f:	83 c0 01             	add    eax,0x1
c0011192:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011198:	83 ec 0c             	sub    esp,0xc
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 e4 71 ff ff       	call   c0008388 <pbuf_free>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	e9 28 01 00 00       	jmp    c00112d4 <udp_input+0x46c>
c00111ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b1:	74 51                	je     c0011204 <udp_input+0x39c>
c00111b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00111ba:	85 c0                	test   eax,eax
c00111bc:	74 32                	je     c00111f0 <udp_input+0x388>
c00111be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00111c5:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00111ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111ce:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00111d1:	83 ec 0c             	sub    esp,0xc
c00111d4:	51                   	push   ecx
c00111d5:	68 90 68 03 c0       	push   0xc0036890
c00111da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00111e2:	52                   	push   edx
c00111e3:	ff d0                	call   eax
c00111e5:	83 c4 20             	add    esp,0x20
c00111e8:	e9 e7 00 00 00       	jmp    c00112d4 <udp_input+0x46c>
c00111ed:	8d 76 00             	lea    esi,[esi+0x0]
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111f7:	e8 8c 71 ff ff       	call   c0008388 <pbuf_free>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	e9 d0 00 00 00       	jmp    c00112d4 <udp_input+0x46c>
c0011204:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011209:	85 c0                	test   eax,eax
c001120b:	0f 85 83 00 00 00    	jne    c0011294 <udp_input+0x42c>
c0011211:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011216:	25 f0 00 00 00       	and    eax,0xf0
c001121b:	3d e0 00 00 00       	cmp    eax,0xe0
c0011220:	74 72                	je     c0011294 <udp_input+0x42c>
c0011222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011226:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011229:	0f b7 c0             	movzx  eax,ax
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	50                   	push   eax
c0011230:	e8 e7 f9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	0f b7 c0             	movzx  eax,ax
c001123b:	c1 e8 08             	shr    eax,0x8
c001123e:	0f b7 c0             	movzx  eax,ax
c0011241:	83 e0 0f             	and    eax,0xf
c0011244:	83 c0 02             	add    eax,0x2
c0011247:	c1 e0 02             	shl    eax,0x2
c001124a:	98                   	cwde   
c001124b:	83 ec 08             	sub    esp,0x8
c001124e:	50                   	push   eax
c001124f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011253:	e8 90 6f ff ff       	call   c00081e8 <pbuf_header>
c0011258:	83 c4 10             	add    esp,0x10
c001125b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001125f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011262:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011266:	74 18                	je     c0011280 <udp_input+0x418>
c0011268:	83 ec 08             	sub    esp,0x8
c001126b:	68 dd 0a 03 c0       	push   0xc0030add
c0011270:	68 66 fb 02 c0       	push   0xc002fb66
c0011275:	e8 0a e9 00 00       	call   c001fb84 <CPrintf>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	8d 76 00             	lea    esi,[esi+0x0]
c0011280:	83 ec 08             	sub    esp,0x8
c0011283:	6a 03                	push   0x3
c0011285:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011289:	e8 76 1e 00 00       	call   c0013104 <icmp_dest_unreach>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	8d 76 00             	lea    esi,[esi+0x0]
c0011294:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001129a:	83 c0 01             	add    eax,0x1
c001129d:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00112a3:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00112a9:	83 c0 01             	add    eax,0x1
c00112ac:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112b9:	e8 ca 70 ff ff       	call   c0008388 <pbuf_free>
c00112be:	83 c4 10             	add    esp,0x10
c00112c1:	eb 11                	jmp    c00112d4 <udp_input+0x46c>
c00112c3:	90                   	nop
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112cb:	e8 b8 70 ff ff       	call   c0008388 <pbuf_free>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	90                   	nop
c00112d4:	90                   	nop
c00112d5:	83 c4 28             	add    esp,0x28
c00112d8:	5b                   	pop    ebx
c00112d9:	c3                   	ret    
c00112da:	66 90                	xchg   ax,ax

c00112dc <udp_bind>:
c00112dc:	83 ec 2c             	sub    esp,0x2c
c00112df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00112e8:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00112ed:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00112f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112f6:	e9 8d 00 00 00       	jmp    c0011388 <udp_bind+0xac>
c00112fb:	90                   	nop
c00112fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011300:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011304:	75 26                	jne    c001132c <udp_bind+0x50>
c0011306:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001130b:	85 c0                	test   eax,eax
c001130d:	74 15                	je     c0011324 <udp_bind+0x48>
c001130f:	83 ec 08             	sub    esp,0x8
c0011312:	68 f1 0a 03 c0       	push   0xc0030af1
c0011317:	68 66 fb 02 c0       	push   0xc002fb66
c001131c:	e8 63 e8 00 00       	call   c001fb84 <CPrintf>
c0011321:	83 c4 10             	add    esp,0x10
c0011324:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011329:	eb 51                	jmp    c001137c <udp_bind+0xa0>
c001132b:	90                   	nop
c001132c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011330:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011334:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011339:	0f b7 c0             	movzx  eax,ax
c001133c:	39 c2                	cmp    edx,eax
c001133e:	75 3c                	jne    c001137c <udp_bind+0xa0>
c0011340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011344:	85 c0                	test   eax,eax
c0011346:	74 2c                	je     c0011374 <udp_bind+0x98>
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 00                	mov    eax,DWORD PTR [eax]
c001134e:	85 c0                	test   eax,eax
c0011350:	74 22                	je     c0011374 <udp_bind+0x98>
c0011352:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011357:	74 1b                	je     c0011374 <udp_bind+0x98>
c0011359:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001135d:	8b 00                	mov    eax,DWORD PTR [eax]
c001135f:	85 c0                	test   eax,eax
c0011361:	74 11                	je     c0011374 <udp_bind+0x98>
c0011363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011367:	8b 10                	mov    edx,DWORD PTR [eax]
c0011369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001136d:	8b 00                	mov    eax,DWORD PTR [eax]
c001136f:	39 c2                	cmp    edx,eax
c0011371:	75 09                	jne    c001137c <udp_bind+0xa0>
c0011373:	90                   	nop
c0011374:	b0 f8                	mov    al,0xf8
c0011376:	e9 dd 00 00 00       	jmp    c0011458 <udp_bind+0x17c>
c001137b:	90                   	nop
c001137c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011380:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011383:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011387:	90                   	nop
c0011388:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001138d:	0f 85 69 ff ff ff    	jne    c00112fc <udp_bind+0x20>
c0011393:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011398:	74 0a                	je     c00113a4 <udp_bind+0xc8>
c001139a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001139e:	8b 00                	mov    eax,DWORD PTR [eax]
c00113a0:	eb 0a                	jmp    c00113ac <udp_bind+0xd0>
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	b8 00 00 00 00       	mov    eax,0x0
c00113a9:	8d 76 00             	lea    esi,[esi+0x0]
c00113ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00113b0:	89 02                	mov    DWORD PTR [edx],eax
c00113b2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00113b7:	85 c0                	test   eax,eax
c00113b9:	75 6d                	jne    c0011428 <udp_bind+0x14c>
c00113bb:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00113c2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113cb:	eb 3b                	jmp    c0011408 <udp_bind+0x12c>
c00113cd:	8d 76 00             	lea    esi,[esi+0x0]
c00113d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113d4:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113d8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00113dd:	0f b7 c0             	movzx  eax,ax
c00113e0:	39 c2                	cmp    edx,eax
c00113e2:	75 18                	jne    c00113fc <udp_bind+0x120>
c00113e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113e8:	83 c0 01             	add    eax,0x1
c00113eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113f0:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113f9:	eb 0d                	jmp    c0011408 <udp_bind+0x12c>
c00113fb:	90                   	nop
c00113fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011400:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011403:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011407:	90                   	nop
c0011408:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001140d:	74 0d                	je     c001141c <udp_bind+0x140>
c001140f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011414:	3d ff ff 00 00       	cmp    eax,0xffff
c0011419:	75 b5                	jne    c00113d0 <udp_bind+0xf4>
c001141b:	90                   	nop
c001141c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011421:	74 05                	je     c0011428 <udp_bind+0x14c>
c0011423:	b0 f8                	mov    al,0xf8
c0011425:	eb 31                	jmp    c0011458 <udp_bind+0x17c>
c0011427:	90                   	nop
c0011428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001142c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011430:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c0011434:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011439:	85 c0                	test   eax,eax
c001143b:	75 17                	jne    c0011454 <udp_bind+0x178>
c001143d:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011447:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001144a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001144e:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011453:	90                   	nop
c0011454:	b0 00                	mov    al,0x0
c0011456:	66 90                	xchg   ax,ax
c0011458:	83 c4 2c             	add    esp,0x2c
c001145b:	c3                   	ret    

c001145c <udp_sendto_if>:
c001145c:	83 ec 2c             	sub    esp,0x2c
c001145f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011463:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001146c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011470:	0f b7 c0             	movzx  eax,ax
c0011473:	85 c0                	test   eax,eax
c0011475:	75 39                	jne    c00114b0 <udp_sendto_if+0x54>
c0011477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001147b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001147f:	0f b7 d0             	movzx  edx,ax
c0011482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011486:	83 ec 04             	sub    esp,0x4
c0011489:	52                   	push   edx
c001148a:	50                   	push   eax
c001148b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001148f:	e8 48 fe ff ff       	call   c00112dc <udp_bind>
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001149b:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00114a0:	85 c0                	test   eax,eax
c00114a2:	74 0c                	je     c00114b0 <udp_sendto_if+0x54>
c00114a4:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00114a8:	e9 2f 02 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00114ad:	8d 76 00             	lea    esi,[esi+0x0]
c00114b0:	83 ec 08             	sub    esp,0x8
c00114b3:	6a 08                	push   0x8
c00114b5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114b9:	e8 2a 6d ff ff       	call   c00081e8 <pbuf_header>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	0f b6 c0             	movzx  eax,al
c00114c4:	85 c0                	test   eax,eax
c00114c6:	74 48                	je     c0011510 <udp_sendto_if+0xb4>
c00114c8:	83 ec 04             	sub    esp,0x4
c00114cb:	6a 00                	push   0x0
c00114cd:	6a 08                	push   0x8
c00114cf:	6a 01                	push   0x1
c00114d1:	e8 8e 70 ff ff       	call   c0008564 <pbuf_alloc>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00114dd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00114e2:	75 08                	jne    c00114ec <udp_sendto_if+0x90>
c00114e4:	b0 ff                	mov    al,0xff
c00114e6:	e9 f1 01 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00114eb:	90                   	nop
c00114ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114f3:	0f b7 c0             	movzx  eax,ax
c00114f6:	85 c0                	test   eax,eax
c00114f8:	74 1e                	je     c0011518 <udp_sendto_if+0xbc>
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011505:	e8 a2 77 ff ff       	call   c0008cac <pbuf_chain>
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	eb 09                	jmp    c0011518 <udp_sendto_if+0xbc>
c001150f:	90                   	nop
c0011510:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011518:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001151c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011520:	0f b7 c0             	movzx  eax,ax
c0011523:	83 f8 07             	cmp    eax,0x7
c0011526:	77 18                	ja     c0011540 <udp_sendto_if+0xe4>
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	68 00 0b 03 c0       	push   0xc0030b00
c0011530:	68 66 fb 02 c0       	push   0xc002fb66
c0011535:	e8 4a e6 00 00       	call   c001fb84 <CPrintf>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	8d 76 00             	lea    esi,[esi+0x0]
c0011540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001154b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001154f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011553:	0f b7 c0             	movzx  eax,ax
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	50                   	push   eax
c001155a:	e8 bd f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	89 c2                	mov    edx,eax
c0011564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011568:	66 89 10             	mov    WORD PTR [eax],dx
c001156b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	50                   	push   eax
c0011574:	e8 a3 f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	89 c2                	mov    edx,eax
c001157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011582:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0011586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011594:	85 c0                	test   eax,eax
c0011596:	74 0c                	je     c00115a4 <udp_sendto_if+0x148>
c0011598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001159c:	8b 00                	mov    eax,DWORD PTR [eax]
c001159e:	85 c0                	test   eax,eax
c00115a0:	75 12                	jne    c00115b4 <udp_sendto_if+0x158>
c00115a2:	66 90                	xchg   ax,ax
c00115a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115a8:	83 c0 04             	add    eax,0x4
c00115ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115af:	eb 47                	jmp    c00115f8 <udp_sendto_if+0x19c>
c00115b1:	8d 76 00             	lea    esi,[esi+0x0]
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00115ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c1:	39 c2                	cmp    edx,eax
c00115c3:	74 2b                	je     c00115f0 <udp_sendto_if+0x194>
c00115c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115c9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115cd:	74 19                	je     c00115e8 <udp_sendto_if+0x18c>
c00115cf:	83 ec 0c             	sub    esp,0xc
c00115d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115d6:	e8 ad 6d ff ff       	call   c0008388 <pbuf_free>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00115e6:	66 90                	xchg   ax,ax
c00115e8:	b0 fa                	mov    al,0xfa
c00115ea:	e9 ed 00 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00115ef:	90                   	nop
c00115f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115ff:	0f b7 c0             	movzx  eax,ax
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	50                   	push   eax
c0011606:	e8 11 f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001160b:	83 c4 10             	add    esp,0x10
c001160e:	89 c2                	mov    edx,eax
c0011610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011614:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0011618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001161f:	0f b6 c0             	movzx  eax,al
c0011622:	83 e0 01             	and    eax,0x1
c0011625:	75 49                	jne    c0011670 <udp_sendto_if+0x214>
c0011627:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001162b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001162e:	0f b7 c0             	movzx  eax,ax
c0011631:	83 ec 0c             	sub    esp,0xc
c0011634:	50                   	push   eax
c0011635:	6a 11                	push   0x11
c0011637:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001163b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001163f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011643:	e8 fc 1b 00 00       	call   c0013244 <inet_chksum_pseudo>
c0011648:	83 c4 20             	add    esp,0x20
c001164b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011650:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011655:	85 c0                	test   eax,eax
c0011657:	75 07                	jne    c0011660 <udp_sendto_if+0x204>
c0011659:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c0011660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011664:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0011669:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001166d:	8d 76 00             	lea    esi,[esi+0x0]
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011677:	0f b6 d0             	movzx  edx,al
c001167a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011681:	0f b6 c0             	movzx  eax,al
c0011684:	83 ec 04             	sub    esp,0x4
c0011687:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001168b:	6a 11                	push   0x11
c001168d:	52                   	push   edx
c001168e:	50                   	push   eax
c001168f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011697:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001169b:	e8 08 25 00 00       	call   c0013ba8 <ip_output_if>
c00116a0:	83 c4 20             	add    esp,0x20
c00116a3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00116a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116ab:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116af:	74 17                	je     c00116c8 <udp_sendto_if+0x26c>
c00116b1:	83 ec 0c             	sub    esp,0xc
c00116b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b8:	e8 cb 6c ff ff       	call   c0008388 <pbuf_free>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c8:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00116ce:	83 c0 01             	add    eax,0x1
c00116d1:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00116d7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00116db:	90                   	nop
c00116dc:	83 c4 2c             	add    esp,0x2c
c00116df:	c3                   	ret    

c00116e0 <udp_sendto>:
c00116e0:	83 ec 2c             	sub    esp,0x2c
c00116e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116ec:	83 ec 0c             	sub    esp,0xc
c00116ef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00116f3:	e8 d8 1f 00 00       	call   c00136d0 <ip_route>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011704:	75 16                	jne    c001171c <udp_sendto+0x3c>
c0011706:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c001170c:	83 c0 01             	add    eax,0x1
c001170f:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c0011715:	b0 fc                	mov    al,0xfc
c0011717:	eb 27                	jmp    c0011740 <udp_sendto+0x60>
c0011719:	8d 76 00             	lea    esi,[esi+0x0]
c001171c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011721:	83 ec 0c             	sub    esp,0xc
c0011724:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011728:	50                   	push   eax
c0011729:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001172d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011731:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011735:	e8 22 fd ff ff       	call   c001145c <udp_sendto_if>
c001173a:	83 c4 20             	add    esp,0x20
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	83 c4 2c             	add    esp,0x2c
c0011743:	c3                   	ret    

c0011744 <udp_send>:
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001174b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001174e:	0f b7 c0             	movzx  eax,ax
c0011751:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011755:	83 c2 04             	add    edx,0x4
c0011758:	50                   	push   eax
c0011759:	52                   	push   edx
c001175a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001175e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011762:	e8 79 ff ff ff       	call   c00116e0 <udp_sendto>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	83 c4 0c             	add    esp,0xc
c001176d:	c3                   	ret    
c001176e:	66 90                	xchg   ax,ax

c0011770 <udp_connect>:
c0011770:	83 ec 2c             	sub    esp,0x2c
c0011773:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011777:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001177c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011780:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011784:	0f b7 c0             	movzx  eax,ax
c0011787:	85 c0                	test   eax,eax
c0011789:	75 39                	jne    c00117c4 <udp_connect+0x54>
c001178b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011793:	0f b7 d0             	movzx  edx,ax
c0011796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001179a:	83 ec 04             	sub    esp,0x4
c001179d:	52                   	push   edx
c001179e:	50                   	push   eax
c001179f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00117a3:	e8 34 fb ff ff       	call   c00112dc <udp_bind>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00117af:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00117b4:	85 c0                	test   eax,eax
c00117b6:	74 0c                	je     c00117c4 <udp_connect+0x54>
c00117b8:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00117bc:	e9 8b 00 00 00       	jmp    c001184c <udp_connect+0xdc>
c00117c1:	8d 76 00             	lea    esi,[esi+0x0]
c00117c4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00117c9:	74 09                	je     c00117d4 <udp_connect+0x64>
c00117cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00117d1:	eb 09                	jmp    c00117dc <udp_connect+0x6c>
c00117d3:	90                   	nop
c00117d4:	b8 00 00 00 00       	mov    eax,0x0
c00117d9:	8d 76 00             	lea    esi,[esi+0x0]
c00117dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117eb:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c00117ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117f3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117f6:	83 c8 04             	or     eax,0x4
c00117f9:	88 c2                	mov    dl,al
c00117fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ff:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011802:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011807:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001180b:	eb 1f                	jmp    c001182c <udp_connect+0xbc>
c001180d:	8d 76 00             	lea    esi,[esi+0x0]
c0011810:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011814:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011818:	75 06                	jne    c0011820 <udp_connect+0xb0>
c001181a:	b0 00                	mov    al,0x0
c001181c:	eb 2e                	jmp    c001184c <udp_connect+0xdc>
c001181e:	66 90                	xchg   ax,ax
c0011820:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011824:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011827:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001182b:	90                   	nop
c001182c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011831:	75 dd                	jne    c0011810 <udp_connect+0xa0>
c0011833:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001183d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011844:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011849:	b0 00                	mov    al,0x0
c001184b:	90                   	nop
c001184c:	83 c4 2c             	add    esp,0x2c
c001184f:	c3                   	ret    

c0011850 <udp_disconnect>:
c0011850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001185b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001185f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011869:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001186c:	83 e0 fb             	and    eax,0xfffffffb
c001186f:	88 c2                	mov    dl,al
c0011871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011875:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011878:	90                   	nop
c0011879:	c3                   	ret    
c001187a:	66 90                	xchg   ax,ax

c001187c <udp_recv>:
c001187c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011884:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001188f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011892:	90                   	nop
c0011893:	c3                   	ret    

c0011894 <udp_remove>:
c0011894:	83 ec 1c             	sub    esp,0x1c
c0011897:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001189c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00118a0:	75 12                	jne    c00118b4 <udp_remove+0x20>
c00118a2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118aa:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00118af:	eb 4b                	jmp    c00118fc <udp_remove+0x68>
c00118b1:	8d 76 00             	lea    esi,[esi+0x0]
c00118b4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118bd:	eb 35                	jmp    c00118f4 <udp_remove+0x60>
c00118bf:	90                   	nop
c00118c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118c7:	85 c0                	test   eax,eax
c00118c9:	74 1d                	je     c00118e8 <udp_remove+0x54>
c00118cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118d2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00118d6:	75 10                	jne    c00118e8 <udp_remove+0x54>
c00118d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00118df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00118e6:	66 90                	xchg   ax,ax
c00118e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f3:	90                   	nop
c00118f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00118f9:	75 c5                	jne    c00118c0 <udp_remove+0x2c>
c00118fb:	90                   	nop
c00118fc:	83 ec 08             	sub    esp,0x8
c00118ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011903:	6a 01                	push   0x1
c0011905:	e8 be 61 ff ff       	call   c0007ac8 <memp_free>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	90                   	nop
c001190e:	83 c4 1c             	add    esp,0x1c
c0011911:	c3                   	ret    
c0011912:	66 90                	xchg   ax,ax

c0011914 <udp_new>:
c0011914:	83 ec 1c             	sub    esp,0x1c
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	6a 01                	push   0x1
c001191c:	e8 7b 60 ff ff       	call   c000799c <memp_malloc>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001192d:	74 1d                	je     c001194c <udp_new+0x38>
c001192f:	83 ec 04             	sub    esp,0x4
c0011932:	6a 20                	push   0x20
c0011934:	6a 00                	push   0x0
c0011936:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001193a:	e8 b1 eb fe ff       	call   c00004f0 <memset>
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011946:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c001194a:	66 90                	xchg   ax,ax
c001194c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011950:	83 c4 1c             	add    esp,0x1c
c0011953:	c3                   	ret    

c0011954 <free_entry>:
c0011954:	83 ec 0c             	sub    esp,0xc
c0011957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195b:	c1 e0 04             	shl    eax,0x4
c001195e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011963:	8b 00                	mov    eax,DWORD PTR [eax]
c0011965:	85 c0                	test   eax,eax
c0011967:	74 2f                	je     c0011998 <free_entry+0x44>
c0011969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196d:	c1 e0 04             	shl    eax,0x4
c0011970:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011975:	8b 00                	mov    eax,DWORD PTR [eax]
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	50                   	push   eax
c001197b:	e8 08 6a ff ff       	call   c0008388 <pbuf_free>
c0011980:	83 c4 10             	add    esp,0x10
c0011983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011987:	c1 e0 04             	shl    eax,0x4
c001198a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001198f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011995:	8d 76 00             	lea    esi,[esi+0x0]
c0011998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199c:	c1 e0 04             	shl    eax,0x4
c001199f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00119a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00119a7:	90                   	nop
c00119a8:	83 c4 0c             	add    esp,0xc
c00119ab:	c3                   	ret    

c00119ac <etharp_tmr>:
c00119ac:	83 ec 1c             	sub    esp,0x1c
c00119af:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00119b4:	e9 a7 00 00 00       	jmp    c0011a60 <etharp_tmr+0xb4>
c00119b9:	8d 76 00             	lea    esi,[esi+0x0]
c00119bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119c1:	c1 e0 04             	shl    eax,0x4
c00119c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00119c9:	8a 00                	mov    al,BYTE PTR [eax]
c00119cb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00119cf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00119d4:	85 c0                	test   eax,eax
c00119d6:	74 7c                	je     c0011a54 <etharp_tmr+0xa8>
c00119d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119dd:	89 c2                	mov    edx,eax
c00119df:	c1 e2 04             	shl    edx,0x4
c00119e2:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c00119e8:	8a 12                	mov    dl,BYTE PTR [edx]
c00119ea:	83 c2 01             	add    edx,0x1
c00119ed:	c1 e0 04             	shl    eax,0x4
c00119f0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00119f5:	88 10                	mov    BYTE PTR [eax],dl
c00119f7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119fc:	c1 e0 04             	shl    eax,0x4
c00119ff:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a04:	8a 00                	mov    al,BYTE PTR [eax]
c0011a06:	0f b6 c0             	movzx  eax,al
c0011a09:	3d ef 00 00 00       	cmp    eax,0xef
c0011a0e:	77 30                	ja     c0011a40 <etharp_tmr+0x94>
c0011a10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a15:	c1 e0 04             	shl    eax,0x4
c0011a18:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a1d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a1f:	0f b6 c0             	movzx  eax,al
c0011a22:	83 f8 01             	cmp    eax,0x1
c0011a25:	75 2d                	jne    c0011a54 <etharp_tmr+0xa8>
c0011a27:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a2c:	c1 e0 04             	shl    eax,0x4
c0011a2f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a34:	8a 00                	mov    al,BYTE PTR [eax]
c0011a36:	0f b6 c0             	movzx  eax,al
c0011a39:	83 f8 01             	cmp    eax,0x1
c0011a3c:	76 16                	jbe    c0011a54 <etharp_tmr+0xa8>
c0011a3e:	66 90                	xchg   ax,ax
c0011a40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a45:	83 ec 0c             	sub    esp,0xc
c0011a48:	50                   	push   eax
c0011a49:	e8 06 ff ff ff       	call   c0011954 <free_entry>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	8d 76 00             	lea    esi,[esi+0x0]
c0011a54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011a58:	83 c0 01             	add    eax,0x1
c0011a5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a5f:	90                   	nop
c0011a60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a65:	83 f8 09             	cmp    eax,0x9
c0011a68:	0f 86 4e ff ff ff    	jbe    c00119bc <etharp_tmr+0x10>
c0011a6e:	90                   	nop
c0011a6f:	83 c4 1c             	add    esp,0x1c
c0011a72:	c3                   	ret    
c0011a73:	90                   	nop

c0011a74 <find_entry>:
c0011a74:	83 ec 2c             	sub    esp,0x2c
c0011a77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011a7f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011a84:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011a89:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011a8e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011a93:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011a98:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011a9d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011aa2:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011aa7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011aac:	e9 7f 01 00 00       	jmp    c0011c30 <find_entry+0x1bc>
c0011ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ab4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ab9:	c1 e0 04             	shl    eax,0x4
c0011abc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ac7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011acc:	83 f8 0a             	cmp    eax,0xa
c0011acf:	75 17                	jne    c0011ae8 <find_entry+0x74>
c0011ad1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ad6:	85 c0                	test   eax,eax
c0011ad8:	75 0e                	jne    c0011ae8 <find_entry+0x74>
c0011ada:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ade:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011ae2:	e9 3d 01 00 00       	jmp    c0011c24 <find_entry+0x1b0>
c0011ae7:	90                   	nop
c0011ae8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011aed:	85 c0                	test   eax,eax
c0011aef:	0f 84 2f 01 00 00    	je     c0011c24 <find_entry+0x1b0>
c0011af5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011afa:	83 f8 01             	cmp    eax,0x1
c0011afd:	74 21                	je     c0011b20 <find_entry+0xac>
c0011aff:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b04:	83 f8 02             	cmp    eax,0x2
c0011b07:	74 17                	je     c0011b20 <find_entry+0xac>
c0011b09:	83 ec 08             	sub    esp,0x8
c0011b0c:	68 30 0b 03 c0       	push   0xc0030b30
c0011b11:	68 66 fb 02 c0       	push   0xc002fb66
c0011b16:	e8 69 e0 00 00       	call   c001fb84 <CPrintf>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011b25:	74 25                	je     c0011b4c <find_entry+0xd8>
c0011b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b2d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b32:	c1 e0 04             	shl    eax,0x4
c0011b35:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b3c:	39 c2                	cmp    edx,eax
c0011b3e:	75 0c                	jne    c0011b4c <find_entry+0xd8>
c0011b40:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b44:	e9 53 02 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011b49:	8d 76 00             	lea    esi,[esi+0x0]
c0011b4c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b51:	83 f8 01             	cmp    eax,0x1
c0011b54:	0f 85 8a 00 00 00    	jne    c0011be4 <find_entry+0x170>
c0011b5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5f:	c1 e0 04             	shl    eax,0x4
c0011b62:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b69:	85 c0                	test   eax,eax
c0011b6b:	74 3f                	je     c0011bac <find_entry+0x138>
c0011b6d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b72:	c1 e0 04             	shl    eax,0x4
c0011b75:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b7a:	8a 00                	mov    al,BYTE PTR [eax]
c0011b7c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011b81:	0f b6 c0             	movzx  eax,al
c0011b84:	39 c2                	cmp    edx,eax
c0011b86:	0f 87 98 00 00 00    	ja     c0011c24 <find_entry+0x1b0>
c0011b8c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b90:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011ba7:	eb 7b                	jmp    c0011c24 <find_entry+0x1b0>
c0011ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bb1:	c1 e0 04             	shl    eax,0x4
c0011bb4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bb9:	8a 00                	mov    al,BYTE PTR [eax]
c0011bbb:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011bc0:	0f b6 c0             	movzx  eax,al
c0011bc3:	39 c2                	cmp    edx,eax
c0011bc5:	77 5d                	ja     c0011c24 <find_entry+0x1b0>
c0011bc7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bcb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011bcf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bd4:	c1 e0 04             	shl    eax,0x4
c0011bd7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0011bde:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011be2:	eb 40                	jmp    c0011c24 <find_entry+0x1b0>
c0011be4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be9:	83 f8 02             	cmp    eax,0x2
c0011bec:	75 36                	jne    c0011c24 <find_entry+0x1b0>
c0011bee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bf3:	c1 e0 04             	shl    eax,0x4
c0011bf6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bfb:	8a 00                	mov    al,BYTE PTR [eax]
c0011bfd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011c02:	0f b6 c0             	movzx  eax,al
c0011c05:	39 c2                	cmp    edx,eax
c0011c07:	77 1b                	ja     c0011c24 <find_entry+0x1b0>
c0011c09:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c0d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011c11:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c16:	c1 e0 04             	shl    eax,0x4
c0011c19:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c1e:	8a 00                	mov    al,BYTE PTR [eax]
c0011c20:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011c24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c28:	83 c0 01             	add    eax,0x1
c0011c2b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c2f:	90                   	nop
c0011c30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c35:	83 f8 09             	cmp    eax,0x9
c0011c38:	0f 86 76 fe ff ff    	jbe    c0011ab4 <find_entry+0x40>
c0011c3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011c43:	83 e0 02             	and    eax,0x2
c0011c46:	75 14                	jne    c0011c5c <find_entry+0x1e8>
c0011c48:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c4d:	83 f8 0a             	cmp    eax,0xa
c0011c50:	75 12                	jne    c0011c64 <find_entry+0x1f0>
c0011c52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011c57:	83 e0 01             	and    eax,0x1
c0011c5a:	75 08                	jne    c0011c64 <find_entry+0x1f0>
c0011c5c:	b0 ff                	mov    al,0xff
c0011c5e:	e9 39 01 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011c63:	90                   	nop
c0011c64:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c69:	83 f8 09             	cmp    eax,0x9
c0011c6c:	7f 0e                	jg     c0011c7c <find_entry+0x208>
c0011c6e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011c72:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c76:	e9 a1 00 00 00       	jmp    c0011d1c <find_entry+0x2a8>
c0011c7b:	90                   	nop
c0011c7c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011c81:	83 f8 09             	cmp    eax,0x9
c0011c84:	7f 32                	jg     c0011cb8 <find_entry+0x244>
c0011c86:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011c8a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c8e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c93:	c1 e0 04             	shl    eax,0x4
c0011c96:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9d:	85 c0                	test   eax,eax
c0011c9f:	74 47                	je     c0011ce8 <find_entry+0x274>
c0011ca1:	83 ec 08             	sub    esp,0x8
c0011ca4:	68 a9 0c 03 c0       	push   0xc0030ca9
c0011ca9:	68 66 fb 02 c0       	push   0xc002fb66
c0011cae:	e8 d1 de 00 00       	call   c001fb84 <CPrintf>
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	eb 30                	jmp    c0011ce8 <find_entry+0x274>
c0011cb8:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011cbd:	83 f8 09             	cmp    eax,0x9
c0011cc0:	7f 0a                	jg     c0011ccc <find_entry+0x258>
c0011cc2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011cc6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011cca:	eb 1c                	jmp    c0011ce8 <find_entry+0x274>
c0011ccc:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011cd1:	83 f8 09             	cmp    eax,0x9
c0011cd4:	7f 0a                	jg     c0011ce0 <find_entry+0x26c>
c0011cd6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011cda:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011cde:	eb 08                	jmp    c0011ce8 <find_entry+0x274>
c0011ce0:	b0 ff                	mov    al,0xff
c0011ce2:	e9 b5 00 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011ce7:	90                   	nop
c0011ce8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ced:	83 f8 09             	cmp    eax,0x9
c0011cf0:	76 16                	jbe    c0011d08 <find_entry+0x294>
c0011cf2:	83 ec 08             	sub    esp,0x8
c0011cf5:	68 c0 0c 03 c0       	push   0xc0030cc0
c0011cfa:	68 66 fb 02 c0       	push   0xc002fb66
c0011cff:	e8 80 de 00 00       	call   c001fb84 <CPrintf>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	90                   	nop
c0011d08:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	50                   	push   eax
c0011d11:	e8 3e fc ff ff       	call   c0011954 <free_entry>
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	8d 76 00             	lea    esi,[esi+0x0]
c0011d1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d21:	83 f8 09             	cmp    eax,0x9
c0011d24:	76 16                	jbe    c0011d3c <find_entry+0x2c8>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	68 c0 0c 03 c0       	push   0xc0030cc0
c0011d2e:	68 66 fb 02 c0       	push   0xc002fb66
c0011d33:	e8 4c de 00 00       	call   c001fb84 <CPrintf>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	90                   	nop
c0011d3c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d41:	c1 e0 04             	shl    eax,0x4
c0011d44:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011d49:	8a 00                	mov    al,BYTE PTR [eax]
c0011d4b:	0f b6 c0             	movzx  eax,al
c0011d4e:	85 c0                	test   eax,eax
c0011d50:	74 16                	je     c0011d68 <find_entry+0x2f4>
c0011d52:	83 ec 08             	sub    esp,0x8
c0011d55:	68 70 0b 03 c0       	push   0xc0030b70
c0011d5a:	68 66 fb 02 c0       	push   0xc002fb66
c0011d5f:	e8 20 de 00 00       	call   c001fb84 <CPrintf>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	90                   	nop
c0011d68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011d6d:	74 19                	je     c0011d88 <find_entry+0x314>
c0011d6f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7a:	c1 e2 04             	shl    edx,0x4
c0011d7d:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011d83:	89 02                	mov    DWORD PTR [edx],eax
c0011d85:	8d 76 00             	lea    esi,[esi+0x0]
c0011d88:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d8d:	c1 e0 04             	shl    eax,0x4
c0011d90:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011d98:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d9c:	83 c4 2c             	add    esp,0x2c
c0011d9f:	c3                   	ret    

c0011da0 <etharp_send_ip>:
c0011da0:	83 ec 1c             	sub    esp,0x1c
c0011da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011da7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011db5:	0f b6 c0             	movzx  eax,al
c0011db8:	83 f8 06             	cmp    eax,0x6
c0011dbb:	74 17                	je     c0011dd4 <etharp_send_ip+0x34>
c0011dbd:	83 ec 08             	sub    esp,0x8
c0011dc0:	68 9c 0b 03 c0       	push   0xc0030b9c
c0011dc5:	68 66 fb 02 c0       	push   0xc002fb66
c0011dca:	e8 b5 dd 00 00       	call   c001fb84 <CPrintf>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	66 90                	xchg   ax,ax
c0011dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dd8:	83 ec 04             	sub    esp,0x4
c0011ddb:	6a 06                	push   0x6
c0011ddd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011de1:	50                   	push   eax
c0011de2:	e8 93 e5 fe ff       	call   c000037a <memcpy>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dee:	83 c0 06             	add    eax,0x6
c0011df1:	83 ec 04             	sub    esp,0x4
c0011df4:	6a 06                	push   0x6
c0011df6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011dfa:	50                   	push   eax
c0011dfb:	e8 7a e5 fe ff       	call   c000037a <memcpy>
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e07:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e11:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011e14:	83 ec 08             	sub    esp,0x8
c0011e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e1f:	ff d0                	call   eax
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	83 c4 1c             	add    esp,0x1c
c0011e27:	c3                   	ret    

c0011e28 <update_arp_entry>:
c0011e28:	83 ec 2c             	sub    esp,0x2c
c0011e2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e37:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e3a:	0f b6 c0             	movzx  eax,al
c0011e3d:	83 f8 06             	cmp    eax,0x6
c0011e40:	74 16                	je     c0011e58 <update_arp_entry+0x30>
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	68 e0 0b 03 c0       	push   0xc0030be0
c0011e4a:	68 66 fb 02 c0       	push   0xc002fb66
c0011e4f:	e8 30 dd 00 00       	call   c001fb84 <CPrintf>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	90                   	nop
c0011e58:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011e5d:	74 39                	je     c0011e98 <update_arp_entry+0x70>
c0011e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	74 2f                	je     c0011e98 <update_arp_entry+0x70>
c0011e69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6f:	83 ec 08             	sub    esp,0x8
c0011e72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e76:	50                   	push   eax
c0011e77:	e8 b0 20 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	0f b6 c0             	movzx  eax,al
c0011e82:	85 c0                	test   eax,eax
c0011e84:	75 12                	jne    c0011e98 <update_arp_entry+0x70>
c0011e86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8c:	25 f0 00 00 00       	and    eax,0xf0
c0011e91:	3d e0 00 00 00       	cmp    eax,0xe0
c0011e96:	75 08                	jne    c0011ea0 <update_arp_entry+0x78>
c0011e98:	b0 f2                	mov    al,0xf2
c0011e9a:	e9 d9 00 00 00       	jmp    c0011f78 <update_arp_entry+0x150>
c0011e9f:	90                   	nop
c0011ea0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	50                   	push   eax
c0011ea9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ead:	e8 c2 fb ff ff       	call   c0011a74 <find_entry>
c0011eb2:	83 c4 10             	add    esp,0x10
c0011eb5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011eb9:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ebe:	85 c0                	test   eax,eax
c0011ec0:	79 0a                	jns    c0011ecc <update_arp_entry+0xa4>
c0011ec2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011ec6:	e9 ad 00 00 00       	jmp    c0011f78 <update_arp_entry+0x150>
c0011ecb:	90                   	nop
c0011ecc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ed1:	c1 e0 04             	shl    eax,0x4
c0011ed4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ed9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011edc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ee1:	c1 e0 04             	shl    eax,0x4
c0011ee4:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ee9:	83 c0 08             	add    eax,0x8
c0011eec:	83 ec 04             	sub    esp,0x4
c0011eef:	6a 06                	push   0x6
c0011ef1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ef5:	50                   	push   eax
c0011ef6:	e8 7f e4 fe ff       	call   c000037a <memcpy>
c0011efb:	83 c4 10             	add    esp,0x10
c0011efe:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f03:	c1 e0 04             	shl    eax,0x4
c0011f06:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011f0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f0e:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f13:	c1 e0 04             	shl    eax,0x4
c0011f16:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f1d:	85 c0                	test   eax,eax
c0011f1f:	74 53                	je     c0011f74 <update_arp_entry+0x14c>
c0011f21:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f26:	c1 e0 04             	shl    eax,0x4
c0011f29:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f34:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f39:	c1 e0 04             	shl    eax,0x4
c0011f3c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f4b:	83 c0 23             	add    eax,0x23
c0011f4e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f52:	50                   	push   eax
c0011f53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011f57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f5b:	e8 40 fe ff ff       	call   c0011da0 <etharp_send_ip>
c0011f60:	83 c4 10             	add    esp,0x10
c0011f63:	83 ec 0c             	sub    esp,0xc
c0011f66:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011f6a:	e8 19 64 ff ff       	call   c0008388 <pbuf_free>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	66 90                	xchg   ax,ax
c0011f74:	b0 00                	mov    al,0x0
c0011f76:	66 90                	xchg   ax,ax
c0011f78:	83 c4 2c             	add    esp,0x2c
c0011f7b:	c3                   	ret    

c0011f7c <etharp_find_addr>:
c0011f7c:	83 ec 1c             	sub    esp,0x1c
c0011f7f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011f84:	74 0a                	je     c0011f90 <etharp_find_addr+0x14>
c0011f86:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011f8b:	75 1b                	jne    c0011fa8 <etharp_find_addr+0x2c>
c0011f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f90:	83 ec 08             	sub    esp,0x8
c0011f93:	68 08 0c 03 c0       	push   0xc0030c08
c0011f98:	68 66 fb 02 c0       	push   0xc002fb66
c0011f9d:	e8 e2 db 00 00       	call   c001fb84 <CPrintf>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fa8:	83 ec 08             	sub    esp,0x8
c0011fab:	6a 02                	push   0x2
c0011fad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011fb1:	e8 be fa ff ff       	call   c0011a74 <find_entry>
c0011fb6:	83 c4 10             	add    esp,0x10
c0011fb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fbd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fc2:	85 c0                	test   eax,eax
c0011fc4:	78 4a                	js     c0012010 <etharp_find_addr+0x94>
c0011fc6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fcb:	c1 e0 04             	shl    eax,0x4
c0011fce:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0011fd5:	0f b6 c0             	movzx  eax,al
c0011fd8:	83 f8 02             	cmp    eax,0x2
c0011fdb:	75 33                	jne    c0012010 <etharp_find_addr+0x94>
c0011fdd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fe2:	c1 e0 04             	shl    eax,0x4
c0011fe5:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011fea:	8d 50 08             	lea    edx,[eax+0x8]
c0011fed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ff1:	89 10                	mov    DWORD PTR [eax],edx
c0011ff3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011ff8:	c1 e0 04             	shl    eax,0x4
c0011ffb:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012000:	8d 50 04             	lea    edx,[eax+0x4]
c0012003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012007:	89 10                	mov    DWORD PTR [eax],edx
c0012009:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001200d:	eb 05                	jmp    c0012014 <etharp_find_addr+0x98>
c001200f:	90                   	nop
c0012010:	b0 ff                	mov    al,0xff
c0012012:	66 90                	xchg   ax,ax
c0012014:	83 c4 1c             	add    esp,0x1c
c0012017:	c3                   	ret    

c0012018 <etharp_arp_input>:
c0012018:	83 ec 2c             	sub    esp,0x2c
c001201b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012020:	75 1a                	jne    c001203c <etharp_arp_input+0x24>
c0012022:	83 ec 08             	sub    esp,0x8
c0012025:	68 d3 0c 03 c0       	push   0xc0030cd3
c001202a:	68 66 fb 02 c0       	push   0xc002fb66
c001202f:	e8 50 db 00 00       	call   c001fb84 <CPrintf>
c0012034:	83 c4 10             	add    esp,0x10
c0012037:	e9 d4 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001203c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012040:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012044:	0f b7 c0             	movzx  eax,ax
c0012047:	83 f8 29             	cmp    eax,0x29
c001204a:	77 34                	ja     c0012080 <etharp_arp_input+0x68>
c001204c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0012052:	83 c0 01             	add    eax,0x1
c0012055:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c001205b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012061:	83 c0 01             	add    eax,0x1
c0012064:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012071:	e8 12 63 ff ff       	call   c0008388 <pbuf_free>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	e9 92 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001207e:	66 90                	xchg   ax,ax
c0012080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001208b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001208f:	83 c0 0e             	add    eax,0xe
c0012092:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012096:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001209a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001209d:	0f b7 c0             	movzx  eax,ax
c00120a0:	3d 00 01 00 00       	cmp    eax,0x100
c00120a5:	75 31                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ab:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00120ae:	0f b6 c0             	movzx  eax,al
c00120b1:	83 f8 06             	cmp    eax,0x6
c00120b4:	75 22                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ba:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c00120bd:	0f b6 c0             	movzx  eax,al
c00120c0:	83 f8 04             	cmp    eax,0x4
c00120c3:	75 13                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120c9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00120cd:	0f b7 c0             	movzx  eax,ax
c00120d0:	83 f8 08             	cmp    eax,0x8
c00120d3:	74 37                	je     c001210c <etharp_arp_input+0xf4>
c00120d5:	8d 76 00             	lea    esi,[esi+0x0]
c00120d8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00120de:	83 c0 01             	add    eax,0x1
c00120e1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00120e7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00120ed:	83 c0 01             	add    eax,0x1
c00120f0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00120f6:	83 ec 0c             	sub    esp,0xc
c00120f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00120fd:	e8 86 62 ff ff       	call   c0008388 <pbuf_free>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	e9 06 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001210a:	66 90                	xchg   ax,ax
c001210c:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0012112:	83 c0 01             	add    eax,0x1
c0012115:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c001211b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211f:	83 c0 0e             	add    eax,0xe
c0012122:	83 ec 04             	sub    esp,0x4
c0012125:	6a 04                	push   0x4
c0012127:	50                   	push   eax
c0012128:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001212c:	50                   	push   eax
c001212d:	e8 48 e2 fe ff       	call   c000037a <memcpy>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012139:	83 c0 18             	add    eax,0x18
c001213c:	83 ec 04             	sub    esp,0x4
c001213f:	6a 04                	push   0x4
c0012141:	50                   	push   eax
c0012142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012146:	50                   	push   eax
c0012147:	e8 2e e2 fe ff       	call   c000037a <memcpy>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012153:	83 c0 04             	add    eax,0x4
c0012156:	74 0c                	je     c0012164 <etharp_arp_input+0x14c>
c0012158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001215f:	85 c0                	test   eax,eax
c0012161:	75 09                	jne    c001216c <etharp_arp_input+0x154>
c0012163:	90                   	nop
c0012164:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012169:	eb 15                	jmp    c0012180 <etharp_arp_input+0x168>
c001216b:	90                   	nop
c001216c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012177:	39 c2                	cmp    edx,eax
c0012179:	0f 94 c0             	sete   al
c001217c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012180:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012185:	85 c0                	test   eax,eax
c0012187:	74 07                	je     c0012190 <etharp_arp_input+0x178>
c0012189:	b8 01 00 00 00       	mov    eax,0x1
c001218e:	eb 08                	jmp    c0012198 <etharp_arp_input+0x180>
c0012190:	b8 02 00 00 00       	mov    eax,0x2
c0012195:	8d 76 00             	lea    esi,[esi+0x0]
c0012198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001219c:	83 c2 08             	add    edx,0x8
c001219f:	50                   	push   eax
c00121a0:	52                   	push   edx
c00121a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121a5:	50                   	push   eax
c00121a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121aa:	e8 79 fc ff ff       	call   c0011e28 <update_arp_entry>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121b6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00121ba:	0f b7 c0             	movzx  eax,ax
c00121bd:	3d 00 01 00 00       	cmp    eax,0x100
c00121c2:	74 10                	je     c00121d4 <etharp_arp_input+0x1bc>
c00121c4:	3d 00 02 00 00       	cmp    eax,0x200
c00121c9:	0f 84 2d 01 00 00    	je     c00122fc <etharp_arp_input+0x2e4>
c00121cf:	e9 14 01 00 00       	jmp    c00122e8 <etharp_arp_input+0x2d0>
c00121d4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00121d9:	85 c0                	test   eax,eax
c00121db:	0f 84 fb 00 00 00    	je     c00122dc <etharp_arp_input+0x2c4>
c00121e1:	83 ec 0c             	sub    esp,0xc
c00121e4:	6a 02                	push   0x2
c00121e6:	e8 31 ea fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00121eb:	83 c4 10             	add    esp,0x10
c00121ee:	89 c2                	mov    edx,eax
c00121f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121f4:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00121f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121fc:	8d 50 0e             	lea    edx,[eax+0xe]
c00121ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012203:	83 c0 18             	add    eax,0x18
c0012206:	83 ec 04             	sub    esp,0x4
c0012209:	6a 04                	push   0x4
c001220b:	52                   	push   edx
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012219:	8d 50 04             	lea    edx,[eax+0x4]
c001221c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012220:	83 c0 0e             	add    eax,0xe
c0012223:	83 ec 04             	sub    esp,0x4
c0012226:	6a 04                	push   0x4
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	e8 4b e1 fe ff       	call   c000037a <memcpy>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012236:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012239:	0f b6 c0             	movzx  eax,al
c001223c:	83 f8 06             	cmp    eax,0x6
c001223f:	74 17                	je     c0012258 <etharp_arp_input+0x240>
c0012241:	83 ec 08             	sub    esp,0x8
c0012244:	68 9c 0b 03 c0       	push   0xc0030b9c
c0012249:	68 66 fb 02 c0       	push   0xc002fb66
c001224e:	e8 31 d9 00 00       	call   c001fb84 <CPrintf>
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	66 90                	xchg   ax,ax
c0012258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001225c:	8d 50 08             	lea    edx,[eax+0x8]
c001225f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012263:	83 c0 12             	add    eax,0x12
c0012266:	83 ec 04             	sub    esp,0x4
c0012269:	6a 06                	push   0x6
c001226b:	52                   	push   edx
c001226c:	50                   	push   eax
c001226d:	e8 08 e1 fe ff       	call   c000037a <memcpy>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012279:	8d 50 08             	lea    edx,[eax+0x8]
c001227c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012280:	83 ec 04             	sub    esp,0x4
c0012283:	6a 06                	push   0x6
c0012285:	52                   	push   edx
c0012286:	50                   	push   eax
c0012287:	e8 ee e0 fe ff       	call   c000037a <memcpy>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012293:	83 c0 08             	add    eax,0x8
c0012296:	83 ec 04             	sub    esp,0x4
c0012299:	6a 06                	push   0x6
c001229b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001229f:	50                   	push   eax
c00122a0:	e8 d5 e0 fe ff       	call   c000037a <memcpy>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122ac:	83 c0 06             	add    eax,0x6
c00122af:	83 ec 04             	sub    esp,0x4
c00122b2:	6a 06                	push   0x6
c00122b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b8:	50                   	push   eax
c00122b9:	e8 bc e0 fe ff       	call   c000037a <memcpy>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122c8:	83 ec 08             	sub    esp,0x8
c00122cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00122cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122d3:	ff d0                	call   eax
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	eb 26                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122da:	66 90                	xchg   ax,ax
c00122dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e0:	83 c0 04             	add    eax,0x4
c00122e3:	eb 1b                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122e5:	8d 76 00             	lea    esi,[esi+0x0]
c00122e8:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00122ee:	83 c0 01             	add    eax,0x1
c00122f1:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00122f7:	eb 07                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122f9:	8d 76 00             	lea    esi,[esi+0x0]
c00122fc:	90                   	nop
c00122fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012300:	83 ec 0c             	sub    esp,0xc
c0012303:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012307:	e8 7c 60 ff ff       	call   c0008388 <pbuf_free>
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	90                   	nop
c0012310:	83 c4 2c             	add    esp,0x2c
c0012313:	c3                   	ret    

c0012314 <etharp_raw>:
c0012314:	83 ec 2c             	sub    esp,0x2c
c0012317:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001231b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012320:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012325:	83 ec 04             	sub    esp,0x4
c0012328:	6a 00                	push   0x0
c001232a:	6a 2a                	push   0x2a
c001232c:	6a 03                	push   0x3
c001232e:	e8 31 62 ff ff       	call   c0008564 <pbuf_alloc>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001233a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001233f:	75 17                	jne    c0012358 <etharp_raw+0x44>
c0012341:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012347:	83 c0 01             	add    eax,0x1
c001234a:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012350:	b0 ff                	mov    al,0xff
c0012352:	e9 89 01 00 00       	jmp    c00124e0 <etharp_raw+0x1cc>
c0012357:	90                   	nop
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012360:	0f b7 c0             	movzx  eax,ax
c0012363:	83 f8 29             	cmp    eax,0x29
c0012366:	77 18                	ja     c0012380 <etharp_raw+0x6c>
c0012368:	83 ec 08             	sub    esp,0x8
c001236b:	68 2c 0c 03 c0       	push   0xc0030c2c
c0012370:	68 66 fb 02 c0       	push   0xc002fb66
c0012375:	e8 0a d8 00 00       	call   c001fb84 <CPrintf>
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	8d 76 00             	lea    esi,[esi+0x0]
c0012380:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	83 c0 0e             	add    eax,0xe
c0012392:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012396:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001239b:	83 ec 0c             	sub    esp,0xc
c001239e:	50                   	push   eax
c001239f:	e8 78 e8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	89 c2                	mov    edx,eax
c00123a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ad:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00123b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b5:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00123b8:	0f b6 c0             	movzx  eax,al
c00123bb:	83 f8 06             	cmp    eax,0x6
c00123be:	74 18                	je     c00123d8 <etharp_raw+0xc4>
c00123c0:	83 ec 08             	sub    esp,0x8
c00123c3:	68 9c 0b 03 c0       	push   0xc0030b9c
c00123c8:	68 66 fb 02 c0       	push   0xc002fb66
c00123cd:	e8 b2 d7 00 00       	call   c001fb84 <CPrintf>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123dc:	83 c0 08             	add    eax,0x8
c00123df:	83 ec 04             	sub    esp,0x4
c00123e2:	6a 06                	push   0x6
c00123e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e8:	50                   	push   eax
c00123e9:	e8 8c df fe ff       	call   c000037a <memcpy>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f5:	83 c0 12             	add    eax,0x12
c00123f8:	83 ec 04             	sub    esp,0x4
c00123fb:	6a 06                	push   0x6
c00123fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012401:	50                   	push   eax
c0012402:	e8 73 df fe ff       	call   c000037a <memcpy>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001240e:	83 ec 04             	sub    esp,0x4
c0012411:	6a 06                	push   0x6
c0012413:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012417:	50                   	push   eax
c0012418:	e8 5d df fe ff       	call   c000037a <memcpy>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012424:	83 c0 06             	add    eax,0x6
c0012427:	83 ec 04             	sub    esp,0x4
c001242a:	6a 06                	push   0x6
c001242c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012430:	50                   	push   eax
c0012431:	e8 44 df fe ff       	call   c000037a <memcpy>
c0012436:	83 c4 10             	add    esp,0x10
c0012439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243d:	83 c0 0e             	add    eax,0xe
c0012440:	83 ec 04             	sub    esp,0x4
c0012443:	6a 04                	push   0x4
c0012445:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012449:	50                   	push   eax
c001244a:	e8 2b df fe ff       	call   c000037a <memcpy>
c001244f:	83 c4 10             	add    esp,0x10
c0012452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012456:	83 c0 18             	add    eax,0x18
c0012459:	83 ec 04             	sub    esp,0x4
c001245c:	6a 04                	push   0x4
c001245e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012462:	50                   	push   eax
c0012463:	e8 12 df fe ff       	call   c000037a <memcpy>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246f:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012478:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001247e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012482:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248a:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001248e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012492:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012498:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001249c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124aa:	ff d0                	call   eax
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00124b3:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00124b9:	83 c0 01             	add    eax,0x1
c00124bc:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124c9:	e8 ba 5e ff ff       	call   c0008388 <pbuf_free>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00124dd:	8d 76 00             	lea    esi,[esi+0x0]
c00124e0:	83 c4 2c             	add    esp,0x2c
c00124e3:	c3                   	ret    

c00124e4 <etharp_request>:
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124eb:	8d 48 04             	lea    ecx,[eax+0x4]
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	8d 50 23             	lea    edx,[eax+0x23]
c00124f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f9:	83 c0 23             	add    eax,0x23
c00124fc:	6a 01                	push   0x1
c00124fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012502:	68 fc 0c 03 c0       	push   0xc0030cfc
c0012507:	51                   	push   ecx
c0012508:	52                   	push   edx
c0012509:	68 04 0d 03 c0       	push   0xc0030d04
c001250e:	50                   	push   eax
c001250f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012513:	e8 fc fd ff ff       	call   c0012314 <etharp_raw>
c0012518:	83 c4 20             	add    esp,0x20
c001251b:	83 c4 0c             	add    esp,0xc
c001251e:	c3                   	ret    
c001251f:	90                   	nop

c0012520 <etharp_query>:
c0012520:	83 ec 2c             	sub    esp,0x2c
c0012523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012527:	83 c0 23             	add    eax,0x23
c001252a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001252e:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012533:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012537:	8b 00                	mov    eax,DWORD PTR [eax]
c0012539:	83 ec 08             	sub    esp,0x8
c001253c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012540:	50                   	push   eax
c0012541:	e8 e6 19 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	0f b6 c0             	movzx  eax,al
c001254c:	85 c0                	test   eax,eax
c001254e:	75 24                	jne    c0012574 <etharp_query+0x54>
c0012550:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012554:	8b 00                	mov    eax,DWORD PTR [eax]
c0012556:	25 f0 00 00 00       	and    eax,0xf0
c001255b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012560:	74 12                	je     c0012574 <etharp_query+0x54>
c0012562:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012567:	74 0b                	je     c0012574 <etharp_query+0x54>
c0012569:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256d:	8b 00                	mov    eax,DWORD PTR [eax]
c001256f:	85 c0                	test   eax,eax
c0012571:	75 09                	jne    c001257c <etharp_query+0x5c>
c0012573:	90                   	nop
c0012574:	b0 f2                	mov    al,0xf2
c0012576:	e9 dd 02 00 00       	jmp    c0012858 <etharp_query+0x338>
c001257b:	90                   	nop
c001257c:	83 ec 08             	sub    esp,0x8
c001257f:	6a 01                	push   0x1
c0012581:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012585:	e8 ea f4 ff ff       	call   c0011a74 <find_entry>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012591:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012596:	85 c0                	test   eax,eax
c0012598:	79 22                	jns    c00125bc <etharp_query+0x9c>
c001259a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001259f:	74 0f                	je     c00125b0 <etharp_query+0x90>
c00125a1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00125a7:	83 c0 01             	add    eax,0x1
c00125aa:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00125b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125b4:	e9 9f 02 00 00       	jmp    c0012858 <etharp_query+0x338>
c00125b9:	8d 76 00             	lea    esi,[esi+0x0]
c00125bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125c1:	c1 e0 04             	shl    eax,0x4
c00125c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125c9:	8a 00                	mov    al,BYTE PTR [eax]
c00125cb:	0f b6 c0             	movzx  eax,al
c00125ce:	85 c0                	test   eax,eax
c00125d0:	75 12                	jne    c00125e4 <etharp_query+0xc4>
c00125d2:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d7:	c1 e0 04             	shl    eax,0x4
c00125da:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125df:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00125e2:	66 90                	xchg   ax,ax
c00125e4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125e9:	c1 e0 04             	shl    eax,0x4
c00125ec:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125f1:	8a 00                	mov    al,BYTE PTR [eax]
c00125f3:	0f b6 c0             	movzx  eax,al
c00125f6:	83 f8 01             	cmp    eax,0x1
c00125f9:	74 2d                	je     c0012628 <etharp_query+0x108>
c00125fb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012600:	c1 e0 04             	shl    eax,0x4
c0012603:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012608:	8a 00                	mov    al,BYTE PTR [eax]
c001260a:	0f b6 c0             	movzx  eax,al
c001260d:	83 f8 02             	cmp    eax,0x2
c0012610:	74 16                	je     c0012628 <etharp_query+0x108>
c0012612:	83 ec 08             	sub    esp,0x8
c0012615:	68 60 0c 03 c0       	push   0xc0030c60
c001261a:	68 66 fb 02 c0       	push   0xc002fb66
c001261f:	e8 60 d5 00 00       	call   c001fb84 <CPrintf>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	90                   	nop
c0012628:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001262d:	c1 e0 04             	shl    eax,0x4
c0012630:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012635:	8a 00                	mov    al,BYTE PTR [eax]
c0012637:	0f b6 c0             	movzx  eax,al
c001263a:	83 f8 01             	cmp    eax,0x1
c001263d:	74 09                	je     c0012648 <etharp_query+0x128>
c001263f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012644:	75 2a                	jne    c0012670 <etharp_query+0x150>
c0012646:	66 90                	xchg   ax,ax
c0012648:	83 ec 08             	sub    esp,0x8
c001264b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001264f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012653:	e8 8c fe ff ff       	call   c00124e4 <etharp_request>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001265f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012664:	75 0a                	jne    c0012670 <etharp_query+0x150>
c0012666:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001266a:	e9 e9 01 00 00       	jmp    c0012858 <etharp_query+0x338>
c001266f:	90                   	nop
c0012670:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012675:	75 15                	jne    c001268c <etharp_query+0x16c>
c0012677:	83 ec 08             	sub    esp,0x8
c001267a:	68 da ff 02 c0       	push   0xc002ffda
c001267f:	68 66 fb 02 c0       	push   0xc002fb66
c0012684:	e8 fb d4 00 00       	call   c001fb84 <CPrintf>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012691:	c1 e0 04             	shl    eax,0x4
c0012694:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012699:	8a 00                	mov    al,BYTE PTR [eax]
c001269b:	0f b6 c0             	movzx  eax,al
c001269e:	83 f8 02             	cmp    eax,0x2
c00126a1:	75 39                	jne    c00126dc <etharp_query+0x1bc>
c00126a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00126a7:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00126ac:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126b1:	c1 e0 04             	shl    eax,0x4
c00126b4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00126b9:	83 c0 08             	add    eax,0x8
c00126bc:	50                   	push   eax
c00126bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126c9:	e8 d2 f6 ff ff       	call   c0011da0 <etharp_send_ip>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00126d5:	e9 7a 01 00 00       	jmp    c0012854 <etharp_query+0x334>
c00126da:	66 90                	xchg   ax,ax
c00126dc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126e1:	c1 e0 04             	shl    eax,0x4
c00126e4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126e9:	8a 00                	mov    al,BYTE PTR [eax]
c00126eb:	0f b6 c0             	movzx  eax,al
c00126ee:	83 f8 01             	cmp    eax,0x1
c00126f1:	0f 85 5d 01 00 00    	jne    c0012854 <etharp_query+0x334>
c00126f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012703:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012707:	eb 63                	jmp    c001276c <etharp_query+0x24c>
c0012709:	8d 76 00             	lea    esi,[esi+0x0]
c001270c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012710:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012718:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001271b:	0f b7 d2             	movzx  edx,dx
c001271e:	0f b7 c0             	movzx  eax,ax
c0012721:	39 c2                	cmp    edx,eax
c0012723:	75 1f                	jne    c0012744 <etharp_query+0x224>
c0012725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012729:	8b 00                	mov    eax,DWORD PTR [eax]
c001272b:	85 c0                	test   eax,eax
c001272d:	74 15                	je     c0012744 <etharp_query+0x224>
c001272f:	83 ec 08             	sub    esp,0x8
c0012732:	68 e1 0c 03 c0       	push   0xc0030ce1
c0012737:	68 66 fb 02 c0       	push   0xc002fb66
c001273c:	e8 43 d4 00 00       	call   c001fb84 <CPrintf>
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012748:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001274b:	0f b6 c0             	movzx  eax,al
c001274e:	83 f8 01             	cmp    eax,0x1
c0012751:	74 0d                	je     c0012760 <etharp_query+0x240>
c0012753:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001275b:	eb 17                	jmp    c0012774 <etharp_query+0x254>
c001275d:	8d 76 00             	lea    esi,[esi+0x0]
c0012760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012764:	8b 00                	mov    eax,DWORD PTR [eax]
c0012766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001276a:	66 90                	xchg   ax,ax
c001276c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012771:	75 99                	jne    c001270c <etharp_query+0x1ec>
c0012773:	90                   	nop
c0012774:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012779:	74 59                	je     c00127d4 <etharp_query+0x2b4>
c001277b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012782:	0f b7 c0             	movzx  eax,ax
c0012785:	83 ec 04             	sub    esp,0x4
c0012788:	6a 00                	push   0x0
c001278a:	50                   	push   eax
c001278b:	6a 03                	push   0x3
c001278d:	e8 d2 5d ff ff       	call   c0008564 <pbuf_alloc>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012799:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001279e:	74 4c                	je     c00127ec <etharp_query+0x2cc>
c00127a0:	83 ec 08             	sub    esp,0x8
c00127a3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127ab:	e8 1c 66 ff ff       	call   c0008dcc <pbuf_copy>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	0f be c0             	movsx  eax,al
c00127b6:	85 c0                	test   eax,eax
c00127b8:	74 32                	je     c00127ec <etharp_query+0x2cc>
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127c1:	e8 c2 5b ff ff       	call   c0008388 <pbuf_free>
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127d1:	eb 19                	jmp    c00127ec <etharp_query+0x2cc>
c00127d3:	90                   	nop
c00127d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127dc:	83 ec 0c             	sub    esp,0xc
c00127df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127e3:	e8 b0 63 ff ff       	call   c0008b98 <pbuf_ref>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	90                   	nop
c00127ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00127f1:	74 4d                	je     c0012840 <etharp_query+0x320>
c00127f3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127f8:	c1 e0 04             	shl    eax,0x4
c00127fb:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012800:	8b 00                	mov    eax,DWORD PTR [eax]
c0012802:	85 c0                	test   eax,eax
c0012804:	74 1e                	je     c0012824 <etharp_query+0x304>
c0012806:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001280b:	c1 e0 04             	shl    eax,0x4
c001280e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012813:	8b 00                	mov    eax,DWORD PTR [eax]
c0012815:	83 ec 0c             	sub    esp,0xc
c0012818:	50                   	push   eax
c0012819:	e8 6a 5b ff ff       	call   c0008388 <pbuf_free>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	8d 76 00             	lea    esi,[esi+0x0]
c0012824:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012829:	c1 e0 04             	shl    eax,0x4
c001282c:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012836:	89 02                	mov    DWORD PTR [edx],eax
c0012838:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001283d:	eb 15                	jmp    c0012854 <etharp_query+0x334>
c001283f:	90                   	nop
c0012840:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012846:	83 c0 01             	add    eax,0x1
c0012849:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001284f:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012854:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012858:	83 c4 2c             	add    esp,0x2c
c001285b:	c3                   	ret    

c001285c <etharp_output>:
c001285c:	83 ec 1c             	sub    esp,0x1c
c001285f:	83 ec 08             	sub    esp,0x8
c0012862:	6a 0e                	push   0xe
c0012864:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012868:	e8 7b 59 ff ff       	call   c00081e8 <pbuf_header>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	0f b6 c0             	movzx  eax,al
c0012873:	85 c0                	test   eax,eax
c0012875:	74 19                	je     c0012890 <etharp_output+0x34>
c0012877:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c001287d:	83 c0 01             	add    eax,0x1
c0012880:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c0012886:	b0 fe                	mov    al,0xfe
c0012888:	e9 8b 01 00 00       	jmp    c0012a18 <etharp_output+0x1bc>
c001288d:	8d 76 00             	lea    esi,[esi+0x0]
c0012890:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012898:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001289c:	8b 00                	mov    eax,DWORD PTR [eax]
c001289e:	83 ec 08             	sub    esp,0x8
c00128a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128a5:	50                   	push   eax
c00128a6:	e8 81 16 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c00128ab:	83 c4 10             	add    esp,0x10
c00128ae:	0f b6 c0             	movzx  eax,al
c00128b1:	85 c0                	test   eax,eax
c00128b3:	74 0f                	je     c00128c4 <etharp_output+0x68>
c00128b5:	c7 44 24 0c 04 0d 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030d04
c00128bd:	e9 3a 01 00 00       	jmp    c00129fc <etharp_output+0x1a0>
c00128c2:	66 90                	xchg   ax,ax
c00128c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ca:	25 f0 00 00 00       	and    eax,0xf0
c00128cf:	3d e0 00 00 00       	cmp    eax,0xe0
c00128d4:	75 42                	jne    c0012918 <etharp_output+0xbc>
c00128d6:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00128db:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00128e0:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00128e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128e9:	83 c0 01             	add    eax,0x1
c00128ec:	8a 00                	mov    al,BYTE PTR [eax]
c00128ee:	83 e0 7f             	and    eax,0x7f
c00128f1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00128f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128f9:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00128fc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012900:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012904:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012907:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001290b:	8d 44 24 06          	lea    eax,[esp+0x6]
c001290f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012913:	e9 e4 00 00 00       	jmp    c00129fc <etharp_output+0x1a0>
c0012918:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001291c:	8b 10                	mov    edx,DWORD PTR [eax]
c001291e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012925:	31 c2                	xor    edx,eax
c0012927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001292b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292e:	21 d0                	and    eax,edx
c0012930:	74 3a                	je     c001296c <etharp_output+0x110>
c0012932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012936:	8b 00                	mov    eax,DWORD PTR [eax]
c0012938:	0f b7 c0             	movzx  eax,ax
c001293b:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012940:	74 2a                	je     c001296c <etharp_output+0x110>
c0012942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012946:	83 c0 0c             	add    eax,0xc
c0012949:	74 19                	je     c0012964 <etharp_output+0x108>
c001294b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001294f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012952:	85 c0                	test   eax,eax
c0012954:	74 0e                	je     c0012964 <etharp_output+0x108>
c0012956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001295a:	83 c0 0c             	add    eax,0xc
c001295d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012961:	eb 09                	jmp    c001296c <etharp_output+0x110>
c0012963:	90                   	nop
c0012964:	b0 fc                	mov    al,0xfc
c0012966:	e9 ad 00 00 00       	jmp    c0012a18 <etharp_output+0x1bc>
c001296b:	90                   	nop
c001296c:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012971:	0f b6 c0             	movzx  eax,al
c0012974:	c1 e0 04             	shl    eax,0x4
c0012977:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001297c:	8a 00                	mov    al,BYTE PTR [eax]
c001297e:	0f b6 c0             	movzx  eax,al
c0012981:	83 f8 02             	cmp    eax,0x2
c0012984:	75 5a                	jne    c00129e0 <etharp_output+0x184>
c0012986:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001298a:	8b 10                	mov    edx,DWORD PTR [eax]
c001298c:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012991:	0f b6 c0             	movzx  eax,al
c0012994:	c1 e0 04             	shl    eax,0x4
c0012997:	05 04 a9 03 c0       	add    eax,0xc003a904
c001299c:	8b 00                	mov    eax,DWORD PTR [eax]
c001299e:	39 c2                	cmp    edx,eax
c00129a0:	75 3e                	jne    c00129e0 <etharp_output+0x184>
c00129a2:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00129a8:	83 c0 01             	add    eax,0x1
c00129ab:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00129b1:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00129b6:	0f b6 c0             	movzx  eax,al
c00129b9:	c1 e0 04             	shl    eax,0x4
c00129bc:	05 00 a9 03 c0       	add    eax,0xc003a900
c00129c1:	8d 50 08             	lea    edx,[eax+0x8]
c00129c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129c8:	83 c0 23             	add    eax,0x23
c00129cb:	52                   	push   edx
c00129cc:	50                   	push   eax
c00129cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d5:	e8 c6 f3 ff ff       	call   c0011da0 <etharp_send_ip>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	eb 39                	jmp    c0012a18 <etharp_output+0x1bc>
c00129df:	90                   	nop
c00129e0:	83 ec 04             	sub    esp,0x4
c00129e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00129eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129ef:	e8 2c fb ff ff       	call   c0012520 <etharp_query>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	eb 1f                	jmp    c0012a18 <etharp_output+0x1bc>
c00129f9:	8d 76 00             	lea    esi,[esi+0x0]
c00129fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a00:	83 c0 23             	add    eax,0x23
c0012a03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012a07:	50                   	push   eax
c0012a08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a10:	e8 8b f3 ff ff       	call   c0011da0 <etharp_send_ip>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 c4 1c             	add    esp,0x1c
c0012a1b:	c3                   	ret    

c0012a1c <ethernet_input>:
c0012a1c:	83 ec 1c             	sub    esp,0x1c
c0012a1f:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a2a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012a2e:	0f b7 c0             	movzx  eax,ax
c0012a31:	83 f8 0e             	cmp    eax,0xe
c0012a34:	77 26                	ja     c0012a5c <ethernet_input+0x40>
c0012a36:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a3c:	83 c0 01             	add    eax,0x1
c0012a3f:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a45:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a4b:	83 c0 01             	add    eax,0x1
c0012a4e:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a54:	e9 ef 00 00 00       	jmp    c0012b48 <ethernet_input+0x12c>
c0012a59:	8d 76 00             	lea    esi,[esi+0x0]
c0012a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a6b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012a6f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012a74:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012a79:	83 f8 08             	cmp    eax,0x8
c0012a7c:	74 0e                	je     c0012a8c <ethernet_input+0x70>
c0012a7e:	3d 08 06 00 00       	cmp    eax,0x608
c0012a83:	74 6b                	je     c0012af0 <ethernet_input+0xd4>
c0012a85:	e9 92 00 00 00       	jmp    c0012b1c <ethernet_input+0x100>
c0012a8a:	66 90                	xchg   ax,ax
c0012a8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a90:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a93:	0f b6 c0             	movzx  eax,al
c0012a96:	83 e0 20             	and    eax,0x20
c0012a99:	0f 84 a1 00 00 00    	je     c0012b40 <ethernet_input+0x124>
c0012a9f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012aa4:	f7 d8                	neg    eax
c0012aa6:	98                   	cwde   
c0012aa7:	83 ec 08             	sub    esp,0x8
c0012aaa:	50                   	push   eax
c0012aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aaf:	e8 34 57 ff ff       	call   c00081e8 <pbuf_header>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	0f b6 c0             	movzx  eax,al
c0012aba:	85 c0                	test   eax,eax
c0012abc:	74 1a                	je     c0012ad8 <ethernet_input+0xbc>
c0012abe:	83 ec 08             	sub    esp,0x8
c0012ac1:	68 88 0c 03 c0       	push   0xc0030c88
c0012ac6:	68 66 fb 02 c0       	push   0xc002fb66
c0012acb:	e8 b4 d0 00 00       	call   c001fb84 <CPrintf>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	eb 73                	jmp    c0012b48 <ethernet_input+0x12c>
c0012ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad8:	83 ec 08             	sub    esp,0x8
c0012adb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012adf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae3:	e8 7c 0c 00 00       	call   c0013764 <ip_input>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	eb 4f                	jmp    c0012b3c <ethernet_input+0x120>
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]
c0012af0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012af4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012af7:	0f b6 c0             	movzx  eax,al
c0012afa:	83 e0 20             	and    eax,0x20
c0012afd:	74 45                	je     c0012b44 <ethernet_input+0x128>
c0012aff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b03:	83 c0 23             	add    eax,0x23
c0012b06:	83 ec 04             	sub    esp,0x4
c0012b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b0d:	50                   	push   eax
c0012b0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012b12:	e8 01 f5 ff ff       	call   c0012018 <etharp_arp_input>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	eb 20                	jmp    c0012b3c <ethernet_input+0x120>
c0012b1c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012b22:	83 c0 01             	add    eax,0x1
c0012b25:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012b2b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012b31:	83 c0 01             	add    eax,0x1
c0012b34:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012b3a:	eb 0c                	jmp    c0012b48 <ethernet_input+0x12c>
c0012b3c:	b0 00                	mov    al,0x0
c0012b3e:	eb 1c                	jmp    c0012b5c <ethernet_input+0x140>
c0012b40:	90                   	nop
c0012b41:	eb 05                	jmp    c0012b48 <ethernet_input+0x12c>
c0012b43:	90                   	nop
c0012b44:	90                   	nop
c0012b45:	8d 76 00             	lea    esi,[esi+0x0]
c0012b48:	83 ec 0c             	sub    esp,0xc
c0012b4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b4f:	e8 34 58 ff ff       	call   c0008388 <pbuf_free>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	b0 00                	mov    al,0x0
c0012b59:	8d 76 00             	lea    esi,[esi+0x0]
c0012b5c:	83 c4 1c             	add    esp,0x1c
c0012b5f:	c3                   	ret    

c0012b60 <icmp_input>:
c0012b60:	83 ec 2c             	sub    esp,0x2c
c0012b63:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012b69:	83 c0 01             	add    eax,0x1
c0012b6c:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012b72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b81:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012b84:	0f b7 c0             	movzx  eax,ax
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	50                   	push   eax
c0012b8b:	e8 8c e0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012b90:	83 c4 10             	add    esp,0x10
c0012b93:	0f b7 c0             	movzx  eax,ax
c0012b96:	c1 e8 08             	shr    eax,0x8
c0012b99:	83 e0 0f             	and    eax,0xf
c0012b9c:	c1 e0 02             	shl    eax,0x2
c0012b9f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ba4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ba9:	f7 d8                	neg    eax
c0012bab:	98                   	cwde   
c0012bac:	83 ec 08             	sub    esp,0x8
c0012baf:	50                   	push   eax
c0012bb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bb4:	e8 2f 56 ff ff       	call   c00081e8 <pbuf_header>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	0f b6 c0             	movzx  eax,al
c0012bbf:	85 c0                	test   eax,eax
c0012bc1:	0f 85 b1 03 00 00    	jne    c0012f78 <icmp_input+0x418>
c0012bc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bcb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bce:	0f b7 c0             	movzx  eax,ax
c0012bd1:	83 f8 03             	cmp    eax,0x3
c0012bd4:	0f 86 9e 03 00 00    	jbe    c0012f78 <icmp_input+0x418>
c0012bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012be1:	8a 00                	mov    al,BYTE PTR [eax]
c0012be3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012be7:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012bec:	85 c0                	test   eax,eax
c0012bee:	0f 84 6c 03 00 00    	je     c0012f60 <icmp_input+0x400>
c0012bf4:	83 f8 08             	cmp    eax,0x8
c0012bf7:	0f 85 43 03 00 00    	jne    c0012f40 <icmp_input+0x3e0>
c0012bfd:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012c05:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012c0a:	25 f0 00 00 00       	and    eax,0xf0
c0012c0f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012c14:	75 0a                	jne    c0012c20 <icmp_input+0xc0>
c0012c16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012c1e:	66 90                	xchg   ax,ax
c0012c20:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012c25:	83 ec 08             	sub    esp,0x8
c0012c28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c2c:	50                   	push   eax
c0012c2d:	e8 fa 12 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	0f b6 c0             	movzx  eax,al
c0012c38:	85 c0                	test   eax,eax
c0012c3a:	74 08                	je     c0012c44 <icmp_input+0xe4>
c0012c3c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012c44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c49:	75 25                	jne    c0012c70 <icmp_input+0x110>
c0012c4b:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012c51:	83 c0 01             	add    eax,0x1
c0012c54:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c61:	e8 22 57 ff ff       	call   c0008388 <pbuf_free>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	e9 56 03 00 00       	jmp    c0012fc4 <icmp_input+0x464>
c0012c6e:	66 90                	xchg   ax,ax
c0012c70:	90                   	nop
c0012c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c78:	0f b7 c0             	movzx  eax,ax
c0012c7b:	83 f8 07             	cmp    eax,0x7
c0012c7e:	0f 86 f8 02 00 00    	jbe    c0012f7c <icmp_input+0x41c>
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8b:	e8 5c 09 00 00       	call   c00135ec <inet_chksum_pbuf>
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	0f b7 c0             	movzx  eax,ax
c0012c96:	85 c0                	test   eax,eax
c0012c98:	74 26                	je     c0012cc0 <icmp_input+0x160>
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ca1:	e8 e2 56 ff ff       	call   c0008388 <pbuf_free>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012caf:	83 c0 01             	add    eax,0x1
c0012cb2:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012cb8:	e9 07 03 00 00       	jmp    c0012fc4 <icmp_input+0x464>
c0012cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc0:	83 ec 08             	sub    esp,0x8
c0012cc3:	6a 22                	push   0x22
c0012cc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cc9:	e8 1a 55 ff ff       	call   c00081e8 <pbuf_header>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	0f b6 c0             	movzx  eax,al
c0012cd4:	85 c0                	test   eax,eax
c0012cd6:	0f 84 24 01 00 00    	je     c0012e00 <icmp_input+0x2a0>
c0012cdc:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012ce1:	83 ec 08             	sub    esp,0x8
c0012ce4:	50                   	push   eax
c0012ce5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ce9:	e8 fa 54 ff ff       	call   c00081e8 <pbuf_header>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	0f b6 c0             	movzx  eax,al
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	74 1c                	je     c0012d14 <icmp_input+0x1b4>
c0012cf8:	83 ec 08             	sub    esp,0x8
c0012cfb:	68 0c 0d 03 c0       	push   0xc0030d0c
c0012d00:	68 66 fb 02 c0       	push   0xc002fb66
c0012d05:	e8 7a ce 00 00       	call   c001fb84 <CPrintf>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	e9 92 02 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012d12:	66 90                	xchg   ax,ax
c0012d14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d1b:	0f b7 c0             	movzx  eax,ax
c0012d1e:	83 ec 04             	sub    esp,0x4
c0012d21:	6a 00                	push   0x0
c0012d23:	50                   	push   eax
c0012d24:	6a 02                	push   0x2
c0012d26:	e8 39 58 ff ff       	call   c0008564 <pbuf_alloc>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d32:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012d37:	0f 84 63 02 00 00    	je     c0012fa0 <icmp_input+0x440>
c0012d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d41:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012d45:	0f b7 c0             	movzx  eax,ax
c0012d48:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012d4d:	83 c2 08             	add    edx,0x8
c0012d50:	39 d0                	cmp    eax,edx
c0012d52:	73 18                	jae    c0012d6c <icmp_input+0x20c>
c0012d54:	83 ec 08             	sub    esp,0x8
c0012d57:	68 40 0d 03 c0       	push   0xc0030d40
c0012d5c:	68 66 fb 02 c0       	push   0xc002fb66
c0012d61:	e8 1e ce 00 00       	call   c001fb84 <CPrintf>
c0012d66:	83 c4 10             	add    esp,0x10
c0012d69:	8d 76 00             	lea    esi,[esi+0x0]
c0012d6c:	83 ec 08             	sub    esp,0x8
c0012d6f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d77:	e8 50 60 ff ff       	call   c0008dcc <pbuf_copy>
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	0f be c0             	movsx  eax,al
c0012d82:	85 c0                	test   eax,eax
c0012d84:	74 1a                	je     c0012da0 <icmp_input+0x240>
c0012d86:	83 ec 08             	sub    esp,0x8
c0012d89:	68 78 0d 03 c0       	push   0xc0030d78
c0012d8e:	68 66 fb 02 c0       	push   0xc002fb66
c0012d93:	e8 ec cd 00 00       	call   c001fb84 <CPrintf>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	e9 04 02 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012da7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012dab:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012db0:	f7 d8                	neg    eax
c0012db2:	98                   	cwde   
c0012db3:	83 ec 08             	sub    esp,0x8
c0012db6:	50                   	push   eax
c0012db7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dbb:	e8 28 54 ff ff       	call   c00081e8 <pbuf_header>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	0f b6 c0             	movzx  eax,al
c0012dc6:	85 c0                	test   eax,eax
c0012dc8:	74 1a                	je     c0012de4 <icmp_input+0x284>
c0012dca:	83 ec 08             	sub    esp,0x8
c0012dcd:	68 a0 0d 03 c0       	push   0xc0030da0
c0012dd2:	68 66 fb 02 c0       	push   0xc002fb66
c0012dd7:	e8 a8 cd 00 00       	call   c001fb84 <CPrintf>
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	e9 c0 01 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012deb:	e8 98 55 ff ff       	call   c0008388 <pbuf_free>
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012dfb:	eb 37                	jmp    c0012e34 <icmp_input+0x2d4>
c0012dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012e00:	83 ec 08             	sub    esp,0x8
c0012e03:	6a de                	push   0xffffffde
c0012e05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e09:	e8 da 53 ff ff       	call   c00081e8 <pbuf_header>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	0f b6 c0             	movzx  eax,al
c0012e14:	85 c0                	test   eax,eax
c0012e16:	74 1c                	je     c0012e34 <icmp_input+0x2d4>
c0012e18:	83 ec 08             	sub    esp,0x8
c0012e1b:	68 a0 0d 03 c0       	push   0xc0030da0
c0012e20:	68 66 fb 02 c0       	push   0xc002fb66
c0012e25:	e8 5a cd 00 00       	call   c001fb84 <CPrintf>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	e9 72 01 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012e32:	66 90                	xchg   ax,ax
c0012e34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e3f:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012e45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012e4c:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e68:	0f b7 c0             	movzx  eax,ax
c0012e6b:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012e70:	76 1a                	jbe    c0012e8c <icmp_input+0x32c>
c0012e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e76:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e7a:	83 c0 09             	add    eax,0x9
c0012e7d:	89 c2                	mov    edx,eax
c0012e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e83:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012e87:	eb 1b                	jmp    c0012ea4 <icmp_input+0x344>
c0012e89:	8d 76 00             	lea    esi,[esi+0x0]
c0012e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e90:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e94:	83 c0 08             	add    eax,0x8
c0012e97:	89 c2                	mov    edx,eax
c0012e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e9d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ea8:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eb0:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	6a 14                	push   0x14
c0012ebb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ebf:	e8 00 07 00 00       	call   c00135c4 <inet_chksum>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	89 c2                	mov    edx,eax
c0012ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ecd:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0012ed1:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012ed7:	83 c0 01             	add    eax,0x1
c0012eda:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012ee0:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012ee5:	83 ec 08             	sub    esp,0x8
c0012ee8:	50                   	push   eax
c0012ee9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012eed:	e8 f6 52 ff ff       	call   c00081e8 <pbuf_header>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	0f b6 c0             	movzx  eax,al
c0012ef8:	85 c0                	test   eax,eax
c0012efa:	74 18                	je     c0012f14 <icmp_input+0x3b4>
c0012efc:	83 ec 08             	sub    esp,0x8
c0012eff:	68 88 0c 03 c0       	push   0xc0030c88
c0012f04:	68 66 fb 02 c0       	push   0xc002fb66
c0012f09:	e8 76 cc 00 00       	call   c001fb84 <CPrintf>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	eb 51                	jmp    c0012f64 <icmp_input+0x404>
c0012f13:	90                   	nop
c0012f14:	83 ec 04             	sub    esp,0x4
c0012f17:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f1b:	6a 01                	push   0x1
c0012f1d:	6a 00                	push   0x0
c0012f1f:	68 ff 00 00 00       	push   0xff
c0012f24:	6a 00                	push   0x0
c0012f26:	68 98 68 03 c0       	push   0xc0036898
c0012f2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2f:	e8 74 0c 00 00       	call   c0013ba8 <ip_output_if>
c0012f34:	83 c4 20             	add    esp,0x20
c0012f37:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012f3b:	eb 27                	jmp    c0012f64 <icmp_input+0x404>
c0012f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f40:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012f46:	83 c0 01             	add    eax,0x1
c0012f49:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012f4f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012f55:	83 c0 01             	add    eax,0x1
c0012f58:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012f5e:	eb 04                	jmp    c0012f64 <icmp_input+0x404>
c0012f60:	90                   	nop
c0012f61:	8d 76 00             	lea    esi,[esi+0x0]
c0012f64:	83 ec 0c             	sub    esp,0xc
c0012f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f6b:	e8 18 54 ff ff       	call   c0008388 <pbuf_free>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	eb 4f                	jmp    c0012fc4 <icmp_input+0x464>
c0012f75:	8d 76 00             	lea    esi,[esi+0x0]
c0012f78:	90                   	nop
c0012f79:	eb 05                	jmp    c0012f80 <icmp_input+0x420>
c0012f7b:	90                   	nop
c0012f7c:	90                   	nop
c0012f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f80:	83 ec 0c             	sub    esp,0xc
c0012f83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f87:	e8 fc 53 ff ff       	call   c0008388 <pbuf_free>
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012f95:	83 c0 01             	add    eax,0x1
c0012f98:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012f9e:	eb 24                	jmp    c0012fc4 <icmp_input+0x464>
c0012fa0:	90                   	nop
c0012fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fab:	e8 d8 53 ff ff       	call   c0008388 <pbuf_free>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012fb9:	83 c0 01             	add    eax,0x1
c0012fbc:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012fc2:	90                   	nop
c0012fc3:	90                   	nop
c0012fc4:	83 c4 2c             	add    esp,0x2c
c0012fc7:	c3                   	ret    

c0012fc8 <icmp_send_response>:
c0012fc8:	83 ec 2c             	sub    esp,0x2c
c0012fcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fcf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012fd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012fd7:	88 d0                	mov    al,dl
c0012fd9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012fdd:	83 ec 04             	sub    esp,0x4
c0012fe0:	6a 00                	push   0x0
c0012fe2:	6a 24                	push   0x24
c0012fe4:	6a 01                	push   0x1
c0012fe6:	e8 79 55 ff ff       	call   c0008564 <pbuf_alloc>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ff2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ff7:	0f 84 ff 00 00 00    	je     c00130fc <icmp_send_response+0x134>
c0012ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013001:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013005:	0f b7 c0             	movzx  eax,ax
c0013008:	83 f8 23             	cmp    eax,0x23
c001300b:	77 17                	ja     c0013024 <icmp_send_response+0x5c>
c001300d:	83 ec 08             	sub    esp,0x8
c0013010:	68 d4 0d 03 c0       	push   0xc0030dd4
c0013015:	68 66 fb 02 c0       	push   0xc002fb66
c001301a:	e8 65 cb 00 00       	call   c001fb84 <CPrintf>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	66 90                	xchg   ax,ax
c0013024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001302b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001302f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013033:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013036:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001303a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013042:	88 10                	mov    BYTE PTR [eax],dl
c0013044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013048:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c001304c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001304f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013053:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013059:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001305d:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001306a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001306e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013071:	83 c2 08             	add    edx,0x8
c0013074:	83 ec 04             	sub    esp,0x4
c0013077:	6a 1c                	push   0x1c
c0013079:	50                   	push   eax
c001307a:	52                   	push   edx
c001307b:	e8 fa d2 fe ff       	call   c000037a <memcpy>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013087:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c001308d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013091:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013095:	0f b7 c0             	movzx  eax,ax
c0013098:	83 ec 08             	sub    esp,0x8
c001309b:	50                   	push   eax
c001309c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00130a0:	e8 1f 05 00 00       	call   c00135c4 <inet_chksum>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	89 c2                	mov    edx,eax
c00130aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130ae:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00130b2:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c00130b8:	83 c0 01             	add    eax,0x1
c00130bb:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c00130c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00130c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130cc:	83 ec 08             	sub    esp,0x8
c00130cf:	6a 01                	push   0x1
c00130d1:	6a 00                	push   0x0
c00130d3:	68 ff 00 00 00       	push   0xff
c00130d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00130dc:	50                   	push   eax
c00130dd:	6a 00                	push   0x0
c00130df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130e3:	e8 9c 0d 00 00       	call   c0013e84 <ip_output>
c00130e8:	83 c4 20             	add    esp,0x20
c00130eb:	83 ec 0c             	sub    esp,0xc
c00130ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00130f2:	e8 91 52 ff ff       	call   c0008388 <pbuf_free>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	eb 04                	jmp    c0013100 <icmp_send_response+0x138>
c00130fc:	90                   	nop
c00130fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013100:	83 c4 2c             	add    esp,0x2c
c0013103:	c3                   	ret    

c0013104 <icmp_dest_unreach>:
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310b:	0f b6 c0             	movzx  eax,al
c001310e:	83 ec 04             	sub    esp,0x4
c0013111:	50                   	push   eax
c0013112:	6a 03                	push   0x3
c0013114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013118:	e8 ab fe ff ff       	call   c0012fc8 <icmp_send_response>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	90                   	nop
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	c3                   	ret    
c0013125:	8d 76 00             	lea    esi,[esi+0x0]

c0013128 <icmp_time_exceeded>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312f:	0f b6 c0             	movzx  eax,al
c0013132:	83 ec 04             	sub    esp,0x4
c0013135:	50                   	push   eax
c0013136:	6a 0b                	push   0xb
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 87 fe ff ff       	call   c0012fc8 <icmp_send_response>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	90                   	nop
c0013145:	83 c4 0c             	add    esp,0xc
c0013148:	c3                   	ret    
c0013149:	66 90                	xchg   ax,ax
c001314b:	90                   	nop

c001314c <lwip_standard_chksum>:
c001314c:	83 ec 2c             	sub    esp,0x2c
c001314f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013157:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001315e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001316a:	83 e0 01             	and    eax,0x1
c001316d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013171:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013176:	74 24                	je     c001319c <lwip_standard_chksum+0x50>
c0013178:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001317d:	7e 1d                	jle    c001319c <lwip_standard_chksum+0x50>
c001317f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013183:	8d 42 01             	lea    eax,[edx+0x1]
c0013186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001318a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001318e:	83 c0 01             	add    eax,0x1
c0013191:	8a 12                	mov    dl,BYTE PTR [edx]
c0013193:	88 10                	mov    BYTE PTR [eax],dl
c0013195:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c001319a:	66 90                	xchg   ax,ax
c001319c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131a4:	eb 1e                	jmp    c00131c4 <lwip_standard_chksum+0x78>
c00131a6:	66 90                	xchg   ax,ax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	8d 50 02             	lea    edx,[eax+0x2]
c00131af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00131b6:	0f b7 c0             	movzx  eax,ax
c00131b9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00131bd:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00131c2:	66 90                	xchg   ax,ax
c00131c4:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00131c9:	7f dd                	jg     c00131a8 <lwip_standard_chksum+0x5c>
c00131cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00131d0:	7e 0e                	jle    c00131e0 <lwip_standard_chksum+0x94>
c00131d2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00131d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131da:	8a 12                	mov    dl,BYTE PTR [edx]
c00131dc:	88 10                	mov    BYTE PTR [eax],dl
c00131de:	66 90                	xchg   ax,ax
c00131e0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00131e5:	0f b7 c0             	movzx  eax,ax
c00131e8:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00131ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131f0:	c1 e8 10             	shr    eax,0x10
c00131f3:	89 c2                	mov    edx,eax
c00131f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131f9:	0f b7 c0             	movzx  eax,ax
c00131fc:	01 d0                	add    eax,edx
c00131fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013202:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013206:	c1 e8 10             	shr    eax,0x10
c0013209:	89 c2                	mov    edx,eax
c001320b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001320f:	0f b7 c0             	movzx  eax,ax
c0013212:	01 d0                	add    eax,edx
c0013214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013218:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001321d:	74 1d                	je     c001323c <lwip_standard_chksum+0xf0>
c001321f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013223:	0f b7 c0             	movzx  eax,ax
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	50                   	push   eax
c001322a:	e8 ed d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	0f b7 c0             	movzx  eax,ax
c0013235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013239:	8d 76 00             	lea    esi,[esi+0x0]
c001323c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013240:	83 c4 2c             	add    esp,0x2c
c0013243:	c3                   	ret    

c0013244 <inet_chksum_pseudo>:
c0013244:	83 ec 2c             	sub    esp,0x2c
c0013247:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001324b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001324f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013253:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013258:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013260:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001326d:	e9 8a 00 00 00       	jmp    c00132fc <inet_chksum_pseudo+0xb8>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001327c:	0f b7 d0             	movzx  edx,ax
c001327f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013283:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013286:	83 ec 08             	sub    esp,0x8
c0013289:	52                   	push   edx
c001328a:	50                   	push   eax
c001328b:	e8 bc fe ff ff       	call   c001314c <lwip_standard_chksum>
c0013290:	83 c4 10             	add    esp,0x10
c0013293:	0f b7 c0             	movzx  eax,ax
c0013296:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001329a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001329e:	c1 e8 10             	shr    eax,0x10
c00132a1:	89 c2                	mov    edx,eax
c00132a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a7:	0f b7 c0             	movzx  eax,ax
c00132aa:	01 d0                	add    eax,edx
c00132ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00132b8:	83 e0 01             	and    eax,0x1
c00132bb:	0f b7 c0             	movzx  eax,ax
c00132be:	85 c0                	test   eax,eax
c00132c0:	74 2e                	je     c00132f0 <inet_chksum_pseudo+0xac>
c00132c2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00132c6:	ba 01 00 00 00       	mov    edx,0x1
c00132cb:	29 c2                	sub    edx,eax
c00132cd:	89 d0                	mov    eax,edx
c00132cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00132d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d7:	0f b7 c0             	movzx  eax,ax
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	50                   	push   eax
c00132de:	e8 39 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132e3:	83 c4 10             	add    esp,0x10
c00132e6:	0f b7 c0             	movzx  eax,ax
c00132e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132ed:	8d 76 00             	lea    esi,[esi+0x0]
c00132f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00132f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00132fa:	66 90                	xchg   ax,ax
c00132fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013301:	0f 85 6d ff ff ff    	jne    c0013274 <inet_chksum_pseudo+0x30>
c0013307:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001330c:	85 c0                	test   eax,eax
c001330e:	74 1c                	je     c001332c <inet_chksum_pseudo+0xe8>
c0013310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013314:	0f b7 c0             	movzx  eax,ax
c0013317:	83 ec 0c             	sub    esp,0xc
c001331a:	50                   	push   eax
c001331b:	e8 fc d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	0f b7 c0             	movzx  eax,ax
c0013326:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001332a:	66 90                	xchg   ax,ax
c001332c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013330:	8b 00                	mov    eax,DWORD PTR [eax]
c0013332:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333a:	0f b7 c0             	movzx  eax,ax
c001333d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013345:	c1 e8 10             	shr    eax,0x10
c0013348:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001334c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013350:	8b 00                	mov    eax,DWORD PTR [eax]
c0013352:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335a:	0f b7 c0             	movzx  eax,ax
c001335d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013365:	c1 e8 10             	shr    eax,0x10
c0013368:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001336c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013371:	83 ec 0c             	sub    esp,0xc
c0013374:	50                   	push   eax
c0013375:	e8 a2 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013384:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013389:	83 ec 0c             	sub    esp,0xc
c001338c:	50                   	push   eax
c001338d:	e8 8a d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	0f b7 c0             	movzx  eax,ax
c0013398:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001339c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a0:	c1 e8 10             	shr    eax,0x10
c00133a3:	89 c2                	mov    edx,eax
c00133a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a9:	0f b7 c0             	movzx  eax,ax
c00133ac:	01 d0                	add    eax,edx
c00133ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b6:	c1 e8 10             	shr    eax,0x10
c00133b9:	89 c2                	mov    edx,eax
c00133bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bf:	0f b7 c0             	movzx  eax,ax
c00133c2:	01 d0                	add    eax,edx
c00133c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133cc:	f7 d0                	not    eax
c00133ce:	83 c4 2c             	add    esp,0x2c
c00133d1:	c3                   	ret    
c00133d2:	66 90                	xchg   ax,ax

c00133d4 <inet_chksum_pseudo_partial>:
c00133d4:	83 ec 2c             	sub    esp,0x2c
c00133d7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00133db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00133df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00133e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00133e7:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00133ec:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00133f1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133f9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013406:	e9 d9 00 00 00       	jmp    c00134e4 <inet_chksum_pseudo_partial+0x110>
c001340b:	90                   	nop
c001340c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013410:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013414:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013419:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001341e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013423:	39 c2                	cmp    edx,eax
c0013425:	76 09                	jbe    c0013430 <inet_chksum_pseudo_partial+0x5c>
c0013427:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001342b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013430:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013435:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013439:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001343c:	83 ec 08             	sub    esp,0x8
c001343f:	52                   	push   edx
c0013440:	50                   	push   eax
c0013441:	e8 06 fd ff ff       	call   c001314c <lwip_standard_chksum>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013454:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013458:	89 d1                	mov    ecx,edx
c001345a:	29 c1                	sub    ecx,eax
c001345c:	89 c8                	mov    eax,ecx
c001345e:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013463:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013468:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c001346d:	76 15                	jbe    c0013484 <inet_chksum_pseudo_partial+0xb0>
c001346f:	83 ec 08             	sub    esp,0x8
c0013472:	68 00 0e 03 c0       	push   0xc0030e00
c0013477:	68 66 fb 02 c0       	push   0xc002fb66
c001347c:	e8 03 c7 00 00       	call   c001fb84 <CPrintf>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013488:	c1 e8 10             	shr    eax,0x10
c001348b:	89 c2                	mov    edx,eax
c001348d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013491:	0f b7 c0             	movzx  eax,ax
c0013494:	01 d0                	add    eax,edx
c0013496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001349a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001349e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134a2:	83 e0 01             	and    eax,0x1
c00134a5:	0f b7 c0             	movzx  eax,ax
c00134a8:	85 c0                	test   eax,eax
c00134aa:	74 2c                	je     c00134d8 <inet_chksum_pseudo_partial+0x104>
c00134ac:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00134b0:	ba 01 00 00 00       	mov    edx,0x1
c00134b5:	29 c2                	sub    edx,eax
c00134b7:	89 d0                	mov    eax,edx
c00134b9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00134bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c1:	0f b7 c0             	movzx  eax,ax
c00134c4:	83 ec 0c             	sub    esp,0xc
c00134c7:	50                   	push   eax
c00134c8:	e8 4f d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134cd:	83 c4 10             	add    esp,0x10
c00134d0:	0f b7 c0             	movzx  eax,ax
c00134d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134e2:	66 90                	xchg   ax,ax
c00134e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00134e9:	74 0d                	je     c00134f8 <inet_chksum_pseudo_partial+0x124>
c00134eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134f0:	85 c0                	test   eax,eax
c00134f2:	0f 85 14 ff ff ff    	jne    c001340c <inet_chksum_pseudo_partial+0x38>
c00134f8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00134fd:	85 c0                	test   eax,eax
c00134ff:	74 1b                	je     c001351c <inet_chksum_pseudo_partial+0x148>
c0013501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013505:	0f b7 c0             	movzx  eax,ax
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	50                   	push   eax
c001350c:	e8 0b d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	0f b7 c0             	movzx  eax,ax
c0013517:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001351b:	90                   	nop
c001351c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013520:	8b 00                	mov    eax,DWORD PTR [eax]
c0013522:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352a:	0f b7 c0             	movzx  eax,ax
c001352d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013535:	c1 e8 10             	shr    eax,0x10
c0013538:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001353c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013540:	8b 00                	mov    eax,DWORD PTR [eax]
c0013542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354a:	0f b7 c0             	movzx  eax,ax
c001354d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013555:	c1 e8 10             	shr    eax,0x10
c0013558:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001355c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	50                   	push   eax
c0013565:	e8 b2 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	0f b7 c0             	movzx  eax,ax
c0013570:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013574:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013579:	83 ec 0c             	sub    esp,0xc
c001357c:	50                   	push   eax
c001357d:	e8 9a d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	0f b7 c0             	movzx  eax,ax
c0013588:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001358c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013590:	c1 e8 10             	shr    eax,0x10
c0013593:	89 c2                	mov    edx,eax
c0013595:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013599:	0f b7 c0             	movzx  eax,ax
c001359c:	01 d0                	add    eax,edx
c001359e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a6:	c1 e8 10             	shr    eax,0x10
c00135a9:	89 c2                	mov    edx,eax
c00135ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135af:	0f b7 c0             	movzx  eax,ax
c00135b2:	01 d0                	add    eax,edx
c00135b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135bc:	f7 d0                	not    eax
c00135be:	83 c4 2c             	add    esp,0x2c
c00135c1:	c3                   	ret    
c00135c2:	66 90                	xchg   ax,ax

c00135c4 <inet_chksum>:
c00135c4:	83 ec 1c             	sub    esp,0x1c
c00135c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00135d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00135d5:	83 ec 08             	sub    esp,0x8
c00135d8:	50                   	push   eax
c00135d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135dd:	e8 6a fb ff ff       	call   c001314c <lwip_standard_chksum>
c00135e2:	83 c4 10             	add    esp,0x10
c00135e5:	f7 d0                	not    eax
c00135e7:	83 c4 1c             	add    esp,0x1c
c00135ea:	c3                   	ret    
c00135eb:	90                   	nop

c00135ec <inet_chksum_pbuf>:
c00135ec:	83 ec 1c             	sub    esp,0x1c
c00135ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135f7:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00135fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013604:	e9 8b 00 00 00       	jmp    c0013694 <inet_chksum_pbuf+0xa8>
c0013609:	8d 76 00             	lea    esi,[esi+0x0]
c001360c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013614:	0f b7 d0             	movzx  edx,ax
c0013617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001361b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001361e:	83 ec 08             	sub    esp,0x8
c0013621:	52                   	push   edx
c0013622:	50                   	push   eax
c0013623:	e8 24 fb ff ff       	call   c001314c <lwip_standard_chksum>
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	0f b7 c0             	movzx  eax,ax
c001362e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013636:	c1 e8 10             	shr    eax,0x10
c0013639:	89 c2                	mov    edx,eax
c001363b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001363f:	0f b7 c0             	movzx  eax,ax
c0013642:	01 d0                	add    eax,edx
c0013644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001364c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013650:	83 e0 01             	and    eax,0x1
c0013653:	0f b7 c0             	movzx  eax,ax
c0013656:	85 c0                	test   eax,eax
c0013658:	74 2e                	je     c0013688 <inet_chksum_pbuf+0x9c>
c001365a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001365e:	ba 01 00 00 00       	mov    edx,0x1
c0013663:	29 c2                	sub    edx,eax
c0013665:	89 d0                	mov    eax,edx
c0013667:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001366b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001366f:	0f b7 c0             	movzx  eax,ax
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	50                   	push   eax
c0013676:	e8 a1 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	0f b7 c0             	movzx  eax,ax
c0013681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013685:	8d 76 00             	lea    esi,[esi+0x0]
c0013688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001368c:	8b 00                	mov    eax,DWORD PTR [eax]
c001368e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013692:	66 90                	xchg   ax,ax
c0013694:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013699:	0f 85 6d ff ff ff    	jne    c001360c <inet_chksum_pbuf+0x20>
c001369f:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00136a4:	85 c0                	test   eax,eax
c00136a6:	74 1c                	je     c00136c4 <inet_chksum_pbuf+0xd8>
c00136a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ac:	0f b7 c0             	movzx  eax,ax
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	50                   	push   eax
c00136b3:	e8 64 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	0f b7 c0             	movzx  eax,ax
c00136be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136c2:	66 90                	xchg   ax,ax
c00136c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136c8:	f7 d0                	not    eax
c00136ca:	83 c4 1c             	add    esp,0x1c
c00136cd:	c3                   	ret    
c00136ce:	66 90                	xchg   ax,ax

c00136d0 <ip_route>:
c00136d0:	83 ec 10             	sub    esp,0x10
c00136d3:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00136d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136dc:	eb 42                	jmp    c0013720 <ip_route+0x50>
c00136de:	66 90                	xchg   ax,ax
c00136e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136e4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00136e7:	83 e0 01             	and    eax,0x1
c00136ea:	0f b6 c0             	movzx  eax,al
c00136ed:	85 c0                	test   eax,eax
c00136ef:	74 23                	je     c0013714 <ip_route+0x44>
c00136f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00136f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136fe:	31 c2                	xor    edx,eax
c0013700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013707:	21 d0                	and    eax,edx
c0013709:	75 09                	jne    c0013714 <ip_route+0x44>
c001370b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370f:	eb 4f                	jmp    c0013760 <ip_route+0x90>
c0013711:	8d 76 00             	lea    esi,[esi+0x0]
c0013714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013718:	8b 00                	mov    eax,DWORD PTR [eax]
c001371a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001371e:	66 90                	xchg   ax,ax
c0013720:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013725:	75 b9                	jne    c00136e0 <ip_route+0x10>
c0013727:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c001372c:	85 c0                	test   eax,eax
c001372e:	74 10                	je     c0013740 <ip_route+0x70>
c0013730:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013735:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013738:	0f b6 c0             	movzx  eax,al
c001373b:	83 e0 01             	and    eax,0x1
c001373e:	75 18                	jne    c0013758 <ip_route+0x88>
c0013740:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013746:	83 c0 01             	add    eax,0x1
c0013749:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001374f:	b8 00 00 00 00       	mov    eax,0x0
c0013754:	eb 0a                	jmp    c0013760 <ip_route+0x90>
c0013756:	66 90                	xchg   ax,ax
c0013758:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c001375d:	8d 76 00             	lea    esi,[esi+0x0]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	c3                   	ret    

c0013764 <ip_input>:
c0013764:	83 ec 1c             	sub    esp,0x1c
c0013767:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c001376d:	83 c0 01             	add    eax,0x1
c0013770:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001377a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001377d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013785:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013788:	0f b7 c0             	movzx  eax,ax
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	50                   	push   eax
c001378f:	e8 88 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	0f b7 c0             	movzx  eax,ax
c001379a:	c1 e8 0c             	shr    eax,0xc
c001379d:	0f b7 c0             	movzx  eax,ax
c00137a0:	83 f8 04             	cmp    eax,0x4
c00137a3:	74 37                	je     c00137dc <ip_input+0x78>
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137ac:	e8 d7 4b ff ff       	call   c0008388 <pbuf_free>
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00137ba:	83 c0 01             	add    eax,0x1
c00137bd:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00137c3:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137c9:	83 c0 01             	add    eax,0x1
c00137cc:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137d2:	b0 00                	mov    al,0x0
c00137d4:	e9 cb 03 00 00       	jmp    c0013ba4 <ip_input+0x440>
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]
c00137dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00137e3:	0f b7 c0             	movzx  eax,ax
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	50                   	push   eax
c00137ea:	e8 2d d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00137ef:	83 c4 10             	add    esp,0x10
c00137f2:	0f b7 c0             	movzx  eax,ax
c00137f5:	c1 e8 08             	shr    eax,0x8
c00137f8:	83 e0 0f             	and    eax,0xf
c00137fb:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013800:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013805:	c1 e0 02             	shl    eax,0x2
c0013808:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001380d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013811:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013815:	0f b7 c0             	movzx  eax,ax
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	50                   	push   eax
c001381c:	e8 fb d3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	66 89 04 24          	mov    WORD PTR [esp],ax
c0013828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001382c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013830:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013835:	0f b7 c0             	movzx  eax,ax
c0013838:	39 c2                	cmp    edx,eax
c001383a:	77 14                	ja     c0013850 <ip_input+0xec>
c001383c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013840:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013843:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013847:	0f b7 c0             	movzx  eax,ax
c001384a:	39 c2                	cmp    edx,eax
c001384c:	76 36                	jbe    c0013884 <ip_input+0x120>
c001384e:	66 90                	xchg   ax,ax
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013857:	e8 2c 4b ff ff       	call   c0008388 <pbuf_free>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013865:	83 c0 01             	add    eax,0x1
c0013868:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001386e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013874:	83 c0 01             	add    eax,0x1
c0013877:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001387d:	b0 00                	mov    al,0x0
c001387f:	e9 20 03 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013884:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013889:	83 ec 08             	sub    esp,0x8
c001388c:	50                   	push   eax
c001388d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013891:	e8 2e fd ff ff       	call   c00135c4 <inet_chksum>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	0f b7 c0             	movzx  eax,ax
c001389c:	85 c0                	test   eax,eax
c001389e:	74 34                	je     c00138d4 <ip_input+0x170>
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a7:	e8 dc 4a ff ff       	call   c0008388 <pbuf_free>
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00138b5:	83 c0 01             	add    eax,0x1
c00138b8:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00138be:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00138c4:	83 c0 01             	add    eax,0x1
c00138c7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00138cd:	b0 00                	mov    al,0x0
c00138cf:	e9 d0 02 00 00       	jmp    c0013ba4 <ip_input+0x440>
c00138d4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00138d8:	83 ec 08             	sub    esp,0x8
c00138db:	50                   	push   eax
c00138dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e0:	e8 77 50 ff ff       	call   c000895c <pbuf_realloc>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138ef:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00138f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138fb:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013900:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013908:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001390c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013914:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013917:	83 e0 01             	and    eax,0x1
c001391a:	0f b6 c0             	movzx  eax,al
c001391d:	85 c0                	test   eax,eax
c001391f:	74 43                	je     c0013964 <ip_input+0x200>
c0013921:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013925:	83 c0 04             	add    eax,0x4
c0013928:	74 3a                	je     c0013964 <ip_input+0x200>
c001392a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001392e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013931:	85 c0                	test   eax,eax
c0013933:	74 2f                	je     c0013964 <ip_input+0x200>
c0013935:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001393b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001393f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013942:	39 c2                	cmp    edx,eax
c0013944:	74 66                	je     c00139ac <ip_input+0x248>
c0013946:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001394b:	83 ec 08             	sub    esp,0x8
c001394e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013952:	50                   	push   eax
c0013953:	e8 d4 05 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	0f b6 c0             	movzx  eax,al
c001395e:	85 c0                	test   eax,eax
c0013960:	75 4a                	jne    c00139ac <ip_input+0x248>
c0013962:	66 90                	xchg   ax,ax
c0013964:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013969:	74 15                	je     c0013980 <ip_input+0x21c>
c001396b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013973:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001397c:	eb 0e                	jmp    c001398c <ip_input+0x228>
c001397e:	66 90                	xchg   ax,ax
c0013980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013984:	8b 00                	mov    eax,DWORD PTR [eax]
c0013986:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001398a:	66 90                	xchg   ax,ax
c001398c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013990:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013994:	75 0a                	jne    c00139a0 <ip_input+0x23c>
c0013996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001399a:	8b 00                	mov    eax,DWORD PTR [eax]
c001399c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00139a5:	0f 85 65 ff ff ff    	jne    c0013910 <ip_input+0x1ac>
c00139ab:	90                   	nop
c00139ac:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00139b1:	83 ec 08             	sub    esp,0x8
c00139b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b8:	50                   	push   eax
c00139b9:	e8 6e 05 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	0f b6 c0             	movzx  eax,al
c00139c4:	85 c0                	test   eax,eax
c00139c6:	75 14                	jne    c00139dc <ip_input+0x278>
c00139c8:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00139cd:	25 f0 00 00 00       	and    eax,0xf0
c00139d2:	3d e0 00 00 00       	cmp    eax,0xe0
c00139d7:	75 2b                	jne    c0013a04 <ip_input+0x2a0>
c00139d9:	8d 76 00             	lea    esi,[esi+0x0]
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 a0 49 ff ff       	call   c0008388 <pbuf_free>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00139f1:	83 c0 01             	add    eax,0x1
c00139f4:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00139fa:	b0 00                	mov    al,0x0
c00139fc:	e9 a3 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a01:	8d 76 00             	lea    esi,[esi+0x0]
c0013a04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a09:	75 19                	jne    c0013a24 <ip_input+0x2c0>
c0013a0b:	83 ec 0c             	sub    esp,0xc
c0013a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a12:	e8 71 49 ff ff       	call   c0008388 <pbuf_free>
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	b0 00                	mov    al,0x0
c0013a1c:	e9 83 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a21:	8d 76 00             	lea    esi,[esi+0x0]
c0013a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a28:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013a2c:	0f b7 c0             	movzx  eax,ax
c0013a2f:	25 3f ff 00 00       	and    eax,0xff3f
c0013a34:	74 2e                	je     c0013a64 <ip_input+0x300>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3d:	e8 8a 13 00 00       	call   c0014dcc <ip_reass>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a49:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013a4e:	75 08                	jne    c0013a58 <ip_input+0x2f4>
c0013a50:	b0 00                	mov    al,0x0
c0013a52:	e9 4d 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a57:	90                   	nop
c0013a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a63:	90                   	nop
c0013a64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a68:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a71:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013a76:	83 ec 08             	sub    esp,0x8
c0013a79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a81:	e8 32 5c ff ff       	call   c00096b8 <raw_input>
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	0f b6 c0             	movzx  eax,al
c0013a8c:	85 c0                	test   eax,eax
c0013a8e:	0f 85 e0 00 00 00    	jne    c0013b74 <ip_input+0x410>
c0013a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a98:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013a9b:	0f b6 c0             	movzx  eax,al
c0013a9e:	83 f8 06             	cmp    eax,0x6
c0013aa1:	74 25                	je     c0013ac8 <ip_input+0x364>
c0013aa3:	83 f8 11             	cmp    eax,0x11
c0013aa6:	74 08                	je     c0013ab0 <ip_input+0x34c>
c0013aa8:	83 f8 01             	cmp    eax,0x1
c0013aab:	74 33                	je     c0013ae0 <ip_input+0x37c>
c0013aad:	eb 49                	jmp    c0013af8 <ip_input+0x394>
c0013aaf:	90                   	nop
c0013ab0:	83 ec 08             	sub    esp,0x8
c0013ab3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ab7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013abb:	e8 a8 d3 ff ff       	call   c0010e68 <udp_input>
c0013ac0:	83 c4 10             	add    esp,0x10
c0013ac3:	e9 b0 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013ac8:	83 ec 08             	sub    esp,0x8
c0013acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ad3:	e8 b0 a4 ff ff       	call   c000df88 <tcp_input>
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	e9 98 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013ae0:	83 ec 08             	sub    esp,0x8
c0013ae3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aeb:	e8 70 f0 ff ff       	call   c0012b60 <icmp_input>
c0013af0:	83 c4 10             	add    esp,0x10
c0013af3:	e9 80 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013af8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013afd:	83 ec 08             	sub    esp,0x8
c0013b00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b04:	50                   	push   eax
c0013b05:	e8 22 04 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	0f b6 c0             	movzx  eax,al
c0013b10:	85 c0                	test   eax,eax
c0013b12:	75 30                	jne    c0013b44 <ip_input+0x3e0>
c0013b14:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013b19:	25 f0 00 00 00       	and    eax,0xf0
c0013b1e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013b23:	74 1f                	je     c0013b44 <ip_input+0x3e0>
c0013b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013b30:	83 ec 08             	sub    esp,0x8
c0013b33:	6a 02                	push   0x2
c0013b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b39:	e8 c6 f5 ff ff       	call   c0013104 <icmp_dest_unreach>
c0013b3e:	83 c4 10             	add    esp,0x10
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4b:	e8 38 48 ff ff       	call   c0008388 <pbuf_free>
c0013b50:	83 c4 10             	add    esp,0x10
c0013b53:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013b59:	83 c0 01             	add    eax,0x1
c0013b5c:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013b62:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013b68:	83 c0 01             	add    eax,0x1
c0013b6b:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013b71:	eb 05                	jmp    c0013b78 <ip_input+0x414>
c0013b73:	90                   	nop
c0013b74:	90                   	nop
c0013b75:	8d 76 00             	lea    esi,[esi+0x0]
c0013b78:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013b82:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013b8c:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013b96:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ba0:	b0 00                	mov    al,0x0
c0013ba2:	66 90                	xchg   ax,ax
c0013ba4:	83 c4 1c             	add    esp,0x1c
c0013ba7:	c3                   	ret    

c0013ba8 <ip_output_if>:
c0013ba8:	83 ec 2c             	sub    esp,0x2c
c0013bab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013baf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013bb3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013bb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013bbb:	88 c8                	mov    al,cl
c0013bbd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013bc1:	88 d0                	mov    al,dl
c0013bc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013bc7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013bcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bd3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013bd7:	0f b7 c0             	movzx  eax,ax
c0013bda:	83 f8 01             	cmp    eax,0x1
c0013bdd:	74 15                	je     c0013bf4 <ip_output_if+0x4c>
c0013bdf:	83 ec 08             	sub    esp,0x8
c0013be2:	68 0a 0e 03 c0       	push   0xc0030e0a
c0013be7:	68 66 fb 02 c0       	push   0xc002fb66
c0013bec:	e8 93 bf 00 00       	call   c001fb84 <CPrintf>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013bf9:	0f 84 f5 01 00 00    	je     c0013df4 <ip_output_if+0x24c>
c0013bff:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013c06:	83 ec 08             	sub    esp,0x8
c0013c09:	6a 14                	push   0x14
c0013c0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c0f:	e8 d4 45 ff ff       	call   c00081e8 <pbuf_header>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	0f b6 c0             	movzx  eax,al
c0013c1a:	85 c0                	test   eax,eax
c0013c1c:	74 16                	je     c0013c34 <ip_output_if+0x8c>
c0013c1e:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013c24:	83 c0 01             	add    eax,0x1
c0013c27:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013c2d:	b0 fe                	mov    al,0xfe
c0013c2f:	e9 4c 02 00 00       	jmp    c0013e80 <ip_output_if+0x2d8>
c0013c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013c3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c43:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013c47:	0f b7 c0             	movzx  eax,ax
c0013c4a:	83 f8 13             	cmp    eax,0x13
c0013c4d:	77 15                	ja     c0013c64 <ip_output_if+0xbc>
c0013c4f:	83 ec 08             	sub    esp,0x8
c0013c52:	68 18 0e 03 c0       	push   0xc0030e18
c0013c57:	68 66 fb 02 c0       	push   0xc002fb66
c0013c5c:	e8 23 bf 00 00       	call   c001fb84 <CPrintf>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c68:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c6c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c73:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013c77:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013c7a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013c7f:	c1 e0 08             	shl    eax,0x8
c0013c82:	89 c2                	mov    edx,eax
c0013c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013c89:	09 d0                	or     eax,edx
c0013c8b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c93:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c99:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013c9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ca0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ca3:	0f b7 c0             	movzx  eax,ax
c0013ca6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013cb1:	c1 e8 10             	shr    eax,0x10
c0013cb4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cb8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013cbd:	c1 e8 02             	shr    eax,0x2
c0013cc0:	0f b7 c0             	movzx  eax,ax
c0013cc3:	c1 e0 08             	shl    eax,0x8
c0013cc6:	80 cc 40             	or     ah,0x40
c0013cc9:	89 c2                	mov    edx,eax
c0013ccb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013cd0:	09 d0                	or     eax,edx
c0013cd2:	0f b7 c0             	movzx  eax,ax
c0013cd5:	83 ec 0c             	sub    esp,0xc
c0013cd8:	50                   	push   eax
c0013cd9:	e8 3e cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	89 c2                	mov    edx,eax
c0013ce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce7:	66 89 10             	mov    WORD PTR [eax],dx
c0013cea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cee:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013cf1:	0f b7 c0             	movzx  eax,ax
c0013cf4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013cff:	0f b7 c0             	movzx  eax,ax
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	50                   	push   eax
c0013d06:	e8 11 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	89 c2                	mov    edx,eax
c0013d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d14:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013d18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d1c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013d20:	0f b7 c0             	movzx  eax,ax
c0013d23:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2b:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013d31:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013d37:	0f b7 c0             	movzx  eax,ax
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	50                   	push   eax
c0013d3e:	e8 d9 ce fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	89 c2                	mov    edx,eax
c0013d48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d4c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013d50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d54:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013d58:	0f b7 c0             	movzx  eax,ax
c0013d5b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d5f:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013d65:	83 c0 01             	add    eax,0x1
c0013d68:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013d6e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013d73:	74 0b                	je     c0013d80 <ip_output_if+0x1d8>
c0013d75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d7b:	85 c0                	test   eax,eax
c0013d7d:	75 11                	jne    c0013d90 <ip_output_if+0x1e8>
c0013d7f:	90                   	nop
c0013d80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d8e:	eb 10                	jmp    c0013da0 <ip_output_if+0x1f8>
c0013d90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013da0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013da4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013da7:	0f b7 c0             	movzx  eax,ax
c0013daa:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013db5:	c1 e8 10             	shr    eax,0x10
c0013db8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dc0:	c1 e8 10             	shr    eax,0x10
c0013dc3:	89 c2                	mov    edx,eax
c0013dc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dc9:	0f b7 c0             	movzx  eax,ax
c0013dcc:	01 d0                	add    eax,edx
c0013dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dd6:	c1 e8 10             	shr    eax,0x10
c0013dd9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ddd:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013de5:	89 c2                	mov    edx,eax
c0013de7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013deb:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013def:	eb 23                	jmp    c0013e14 <ip_output_if+0x26c>
c0013df1:	8d 76 00             	lea    esi,[esi+0x0]
c0013df4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013e1a:	83 c0 01             	add    eax,0x1
c0013e1d:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013e23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013e2a:	0f b7 c0             	movzx  eax,ax
c0013e2d:	85 c0                	test   eax,eax
c0013e2f:	74 33                	je     c0013e64 <ip_output_if+0x2bc>
c0013e31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e35:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013e38:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013e3f:	0f b7 d2             	movzx  edx,dx
c0013e42:	0f b7 c0             	movzx  eax,ax
c0013e45:	39 c2                	cmp    edx,eax
c0013e47:	76 1b                	jbe    c0013e64 <ip_output_if+0x2bc>
c0013e49:	83 ec 04             	sub    esp,0x4
c0013e4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e50:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013e54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e58:	e8 37 14 00 00       	call   c0015294 <ip_frag>
c0013e5d:	83 c4 10             	add    esp,0x10
c0013e60:	eb 1e                	jmp    c0013e80 <ip_output_if+0x2d8>
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013e6b:	83 ec 04             	sub    esp,0x4
c0013e6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013e76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013e7a:	ff d0                	call   eax
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	90                   	nop
c0013e80:	83 c4 2c             	add    esp,0x2c
c0013e83:	c3                   	ret    

c0013e84 <ip_output>:
c0013e84:	83 ec 2c             	sub    esp,0x2c
c0013e87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013e8f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013e93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013e97:	88 c8                	mov    al,cl
c0013e99:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e9d:	88 d0                	mov    al,dl
c0013e9f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ea7:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013eab:	0f b7 c0             	movzx  eax,ax
c0013eae:	83 f8 01             	cmp    eax,0x1
c0013eb1:	74 15                	je     c0013ec8 <ip_output+0x44>
c0013eb3:	83 ec 08             	sub    esp,0x8
c0013eb6:	68 0a 0e 03 c0       	push   0xc0030e0a
c0013ebb:	68 66 fb 02 c0       	push   0xc002fb66
c0013ec0:	e8 bf bc 00 00       	call   c001fb84 <CPrintf>
c0013ec5:	83 c4 10             	add    esp,0x10
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013ecf:	e8 fc f7 ff ff       	call   c00136d0 <ip_route>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013edb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ee0:	75 16                	jne    c0013ef8 <ip_output+0x74>
c0013ee2:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013ee8:	83 c0 01             	add    eax,0x1
c0013eeb:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013ef1:	b0 fc                	mov    al,0xfc
c0013ef3:	eb 33                	jmp    c0013f28 <ip_output+0xa4>
c0013ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ef8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013efd:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013f02:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013f07:	83 ec 04             	sub    esp,0x4
c0013f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f0e:	51                   	push   ecx
c0013f0f:	52                   	push   edx
c0013f10:	50                   	push   eax
c0013f11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f1d:	e8 86 fc ff ff       	call   c0013ba8 <ip_output_if>
c0013f22:	83 c4 20             	add    esp,0x20
c0013f25:	8d 76 00             	lea    esi,[esi+0x0]
c0013f28:	83 c4 2c             	add    esp,0x2c
c0013f2b:	c3                   	ret    

c0013f2c <ip4_addr_isbroadcast>:
c0013f2c:	83 ec 10             	sub    esp,0x10
c0013f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f37:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013f3c:	74 0a                	je     c0013f48 <ip4_addr_isbroadcast+0x1c>
c0013f3e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f43:	75 07                	jne    c0013f4c <ip4_addr_isbroadcast+0x20>
c0013f45:	8d 76 00             	lea    esi,[esi+0x0]
c0013f48:	b0 01                	mov    al,0x1
c0013f4a:	eb 64                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f50:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013f53:	0f b6 c0             	movzx  eax,al
c0013f56:	83 e0 02             	and    eax,0x2
c0013f59:	75 05                	jne    c0013f60 <ip4_addr_isbroadcast+0x34>
c0013f5b:	b0 00                	mov    al,0x0
c0013f5d:	eb 51                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f5f:	90                   	nop
c0013f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f67:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013f6b:	75 07                	jne    c0013f74 <ip4_addr_isbroadcast+0x48>
c0013f6d:	b0 00                	mov    al,0x0
c0013f6f:	eb 3f                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f71:	8d 76 00             	lea    esi,[esi+0x0]
c0013f74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f7f:	31 c2                	xor    edx,eax
c0013f81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013f88:	21 d0                	and    eax,edx
c0013f8a:	75 20                	jne    c0013fac <ip4_addr_isbroadcast+0x80>
c0013f8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013f93:	f7 d0                	not    eax
c0013f95:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013f99:	89 c2                	mov    edx,eax
c0013f9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013fa2:	f7 d0                	not    eax
c0013fa4:	39 c2                	cmp    edx,eax
c0013fa6:	75 04                	jne    c0013fac <ip4_addr_isbroadcast+0x80>
c0013fa8:	b0 01                	mov    al,0x1
c0013faa:	eb 04                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013fac:	b0 00                	mov    al,0x0
c0013fae:	66 90                	xchg   ax,ax
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	c3                   	ret    

c0013fb4 <ip4_addr_netmask_valid>:
c0013fb4:	83 ec 1c             	sub    esp,0x1c
c0013fb7:	83 ec 0c             	sub    esp,0xc
c0013fba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fbe:	e8 7d cc fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fca:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013fd2:	eb 10                	jmp    c0013fe4 <ip4_addr_netmask_valid+0x30>
c0013fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fd8:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013fdc:	74 12                	je     c0013ff0 <ip4_addr_netmask_valid+0x3c>
c0013fde:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013fe9:	75 e9                	jne    c0013fd4 <ip4_addr_netmask_valid+0x20>
c0013feb:	eb 1b                	jmp    c0014008 <ip4_addr_netmask_valid+0x54>
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	90                   	nop
c0013ff1:	eb 15                	jmp    c0014008 <ip4_addr_netmask_valid+0x54>
c0013ff3:	90                   	nop
c0013ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ff8:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013ffc:	74 06                	je     c0014004 <ip4_addr_netmask_valid+0x50>
c0013ffe:	b0 00                	mov    al,0x0
c0014000:	eb 12                	jmp    c0014014 <ip4_addr_netmask_valid+0x60>
c0014002:	66 90                	xchg   ax,ax
c0014004:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0014008:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001400d:	75 e5                	jne    c0013ff4 <ip4_addr_netmask_valid+0x40>
c001400f:	b0 01                	mov    al,0x1
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	83 c4 1c             	add    esp,0x1c
c0014017:	c3                   	ret    

c0014018 <ipaddr_aton>:
c0014018:	83 ec 2c             	sub    esp,0x2c
c001401b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001401f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014023:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014027:	8a 00                	mov    al,BYTE PTR [eax]
c0014029:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014034:	0f b6 c0             	movzx  eax,al
c0014037:	83 f8 2f             	cmp    eax,0x2f
c001403a:	76 0c                	jbe    c0014048 <ipaddr_aton+0x30>
c001403c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014040:	0f b6 c0             	movzx  eax,al
c0014043:	83 f8 39             	cmp    eax,0x39
c0014046:	76 0c                	jbe    c0014054 <ipaddr_aton+0x3c>
c0014048:	b8 00 00 00 00       	mov    eax,0x0
c001404d:	e9 f2 02 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014052:	66 90                	xchg   ax,ax
c0014054:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001405c:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0014061:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014066:	83 f8 30             	cmp    eax,0x30
c0014069:	75 45                	jne    c00140b0 <ipaddr_aton+0x98>
c001406b:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014074:	8a 00                	mov    al,BYTE PTR [eax]
c0014076:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001407a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001407f:	83 f8 78             	cmp    eax,0x78
c0014082:	74 0c                	je     c0014090 <ipaddr_aton+0x78>
c0014084:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014089:	83 f8 58             	cmp    eax,0x58
c001408c:	75 1a                	jne    c00140a8 <ipaddr_aton+0x90>
c001408e:	66 90                	xchg   ax,ax
c0014090:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014095:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001409a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001409e:	8a 00                	mov    al,BYTE PTR [eax]
c00140a0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140a4:	eb 0a                	jmp    c00140b0 <ipaddr_aton+0x98>
c00140a6:	66 90                	xchg   ax,ax
c00140a8:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c00140ad:	8d 76 00             	lea    esi,[esi+0x0]
c00140b0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140b4:	0f b6 c0             	movzx  eax,al
c00140b7:	83 f8 2f             	cmp    eax,0x2f
c00140ba:	76 3c                	jbe    c00140f8 <ipaddr_aton+0xe0>
c00140bc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140c0:	0f b6 c0             	movzx  eax,al
c00140c3:	83 f8 39             	cmp    eax,0x39
c00140c6:	77 30                	ja     c00140f8 <ipaddr_aton+0xe0>
c00140c8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00140cd:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00140d2:	89 c2                	mov    edx,eax
c00140d4:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140d9:	01 d0                	add    eax,edx
c00140db:	83 e8 30             	sub    eax,0x30
c00140de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140e2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140eb:	8a 00                	mov    al,BYTE PTR [eax]
c00140ed:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140f1:	e9 ae 00 00 00       	jmp    c00141a4 <ipaddr_aton+0x18c>
c00140f6:	66 90                	xchg   ax,ax
c00140f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00140fd:	83 f8 10             	cmp    eax,0x10
c0014100:	0f 85 a6 00 00 00    	jne    c00141ac <ipaddr_aton+0x194>
c0014106:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001410a:	0f b6 c0             	movzx  eax,al
c001410d:	83 f8 2f             	cmp    eax,0x2f
c0014110:	76 0e                	jbe    c0014120 <ipaddr_aton+0x108>
c0014112:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014116:	0f b6 c0             	movzx  eax,al
c0014119:	83 f8 39             	cmp    eax,0x39
c001411c:	76 32                	jbe    c0014150 <ipaddr_aton+0x138>
c001411e:	66 90                	xchg   ax,ax
c0014120:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014124:	0f b6 c0             	movzx  eax,al
c0014127:	83 f8 60             	cmp    eax,0x60
c001412a:	76 0c                	jbe    c0014138 <ipaddr_aton+0x120>
c001412c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014130:	0f b6 c0             	movzx  eax,al
c0014133:	83 f8 66             	cmp    eax,0x66
c0014136:	76 18                	jbe    c0014150 <ipaddr_aton+0x138>
c0014138:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001413c:	0f b6 c0             	movzx  eax,al
c001413f:	83 f8 40             	cmp    eax,0x40
c0014142:	76 68                	jbe    c00141ac <ipaddr_aton+0x194>
c0014144:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014148:	0f b6 c0             	movzx  eax,al
c001414b:	83 f8 46             	cmp    eax,0x46
c001414e:	77 5c                	ja     c00141ac <ipaddr_aton+0x194>
c0014150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014154:	c1 e0 04             	shl    eax,0x4
c0014157:	89 c2                	mov    edx,eax
c0014159:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415e:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014161:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014165:	0f b6 c0             	movzx  eax,al
c0014168:	83 f8 60             	cmp    eax,0x60
c001416b:	76 13                	jbe    c0014180 <ipaddr_aton+0x168>
c001416d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014171:	0f b6 c0             	movzx  eax,al
c0014174:	83 f8 7a             	cmp    eax,0x7a
c0014177:	77 07                	ja     c0014180 <ipaddr_aton+0x168>
c0014179:	b8 61 00 00 00       	mov    eax,0x61
c001417e:	eb 08                	jmp    c0014188 <ipaddr_aton+0x170>
c0014180:	b8 41 00 00 00       	mov    eax,0x41
c0014185:	8d 76 00             	lea    esi,[esi+0x0]
c0014188:	29 c1                	sub    ecx,eax
c001418a:	89 c8                	mov    eax,ecx
c001418c:	09 d0                	or     eax,edx
c001418e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014192:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001419b:	8a 00                	mov    al,BYTE PTR [eax]
c001419d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141a1:	8d 76 00             	lea    esi,[esi+0x0]
c00141a4:	e9 07 ff ff ff       	jmp    c00140b0 <ipaddr_aton+0x98>
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141b1:	83 f8 2e             	cmp    eax,0x2e
c00141b4:	75 42                	jne    c00141f8 <ipaddr_aton+0x1e0>
c00141b6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00141ba:	83 c0 0c             	add    eax,0xc
c00141bd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00141c1:	72 0d                	jb     c00141d0 <ipaddr_aton+0x1b8>
c00141c3:	b8 00 00 00 00       	mov    eax,0x0
c00141c8:	e9 77 01 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c00141cd:	8d 76 00             	lea    esi,[esi+0x0]
c00141d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141d4:	8d 50 04             	lea    edx,[eax+0x4]
c00141d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00141db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141df:	89 10                	mov    DWORD PTR [eax],edx
c00141e1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141ea:	8a 00                	mov    al,BYTE PTR [eax]
c00141ec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141f0:	e9 3b fe ff ff       	jmp    c0014030 <ipaddr_aton+0x18>
c00141f5:	8d 76 00             	lea    esi,[esi+0x0]
c00141f8:	90                   	nop
c00141f9:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141fe:	85 c0                	test   eax,eax
c0014200:	74 46                	je     c0014248 <ipaddr_aton+0x230>
c0014202:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014207:	83 f8 20             	cmp    eax,0x20
c001420a:	74 3c                	je     c0014248 <ipaddr_aton+0x230>
c001420c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014211:	83 f8 0c             	cmp    eax,0xc
c0014214:	74 32                	je     c0014248 <ipaddr_aton+0x230>
c0014216:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421b:	83 f8 0a             	cmp    eax,0xa
c001421e:	74 28                	je     c0014248 <ipaddr_aton+0x230>
c0014220:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014225:	83 f8 0d             	cmp    eax,0xd
c0014228:	74 1e                	je     c0014248 <ipaddr_aton+0x230>
c001422a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001422f:	83 f8 09             	cmp    eax,0x9
c0014232:	74 14                	je     c0014248 <ipaddr_aton+0x230>
c0014234:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014239:	83 f8 0b             	cmp    eax,0xb
c001423c:	74 0a                	je     c0014248 <ipaddr_aton+0x230>
c001423e:	b8 00 00 00 00       	mov    eax,0x0
c0014243:	e9 fc 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014248:	8d 44 24 04          	lea    eax,[esp+0x4]
c001424c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014250:	29 c2                	sub    edx,eax
c0014252:	89 d0                	mov    eax,edx
c0014254:	c1 f8 02             	sar    eax,0x2
c0014257:	83 c0 01             	add    eax,0x1
c001425a:	83 f8 04             	cmp    eax,0x4
c001425d:	0f 87 9d 00 00 00    	ja     c0014300 <ipaddr_aton+0x2e8>
c0014263:	8b 04 85 50 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1b0]
c001426a:	ff e0                	jmp    eax
c001426c:	b8 00 00 00 00       	mov    eax,0x0
c0014271:	e9 ce 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014276:	66 90                	xchg   ax,ax
c0014278:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c0014280:	76 0a                	jbe    c001428c <ipaddr_aton+0x274>
c0014282:	b8 00 00 00 00       	mov    eax,0x0
c0014287:	e9 b8 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c001428c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014290:	c1 e0 18             	shl    eax,0x18
c0014293:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014297:	e9 80 00 00 00       	jmp    c001431c <ipaddr_aton+0x304>
c001429c:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00142a4:	76 0a                	jbe    c00142b0 <ipaddr_aton+0x298>
c00142a6:	b8 00 00 00 00       	mov    eax,0x0
c00142ab:	e9 94 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c00142b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b4:	c1 e0 18             	shl    eax,0x18
c00142b7:	89 c2                	mov    edx,eax
c00142b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142bd:	c1 e0 10             	shl    eax,0x10
c00142c0:	09 d0                	or     eax,edx
c00142c2:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00142c6:	eb 54                	jmp    c001431c <ipaddr_aton+0x304>
c00142c8:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00142d0:	76 0a                	jbe    c00142dc <ipaddr_aton+0x2c4>
c00142d2:	b8 00 00 00 00       	mov    eax,0x0
c00142d7:	eb 6b                	jmp    c0014344 <ipaddr_aton+0x32c>
c00142d9:	8d 76 00             	lea    esi,[esi+0x0]
c00142dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e0:	c1 e0 18             	shl    eax,0x18
c00142e3:	89 c2                	mov    edx,eax
c00142e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142e9:	c1 e0 10             	shl    eax,0x10
c00142ec:	09 c2                	or     edx,eax
c00142ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142f2:	c1 e0 08             	shl    eax,0x8
c00142f5:	09 d0                	or     eax,edx
c00142f7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00142fb:	eb 1f                	jmp    c001431c <ipaddr_aton+0x304>
c00142fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014300:	83 ec 08             	sub    esp,0x8
c0014303:	68 45 0e 03 c0       	push   0xc0030e45
c0014308:	68 66 fb 02 c0       	push   0xc002fb66
c001430d:	e8 72 b8 00 00       	call   c001fb84 <CPrintf>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	eb 05                	jmp    c001431c <ipaddr_aton+0x304>
c0014317:	90                   	nop
c0014318:	90                   	nop
c0014319:	8d 76 00             	lea    esi,[esi+0x0]
c001431c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014321:	74 19                	je     c001433c <ipaddr_aton+0x324>
c0014323:	83 ec 0c             	sub    esp,0xc
c0014326:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001432a:	e8 11 c9 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	89 c2                	mov    edx,eax
c0014334:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014338:	89 10                	mov    DWORD PTR [eax],edx
c001433a:	66 90                	xchg   ax,ax
c001433c:	b8 01 00 00 00       	mov    eax,0x1
c0014341:	8d 76 00             	lea    esi,[esi+0x0]
c0014344:	83 c4 2c             	add    esp,0x2c
c0014347:	c3                   	ret    

c0014348 <ipaddr_addr>:
c0014348:	83 ec 1c             	sub    esp,0x1c
c001434b:	83 ec 08             	sub    esp,0x8
c001434e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014352:	50                   	push   eax
c0014353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014357:	e8 bc fc ff ff       	call   c0014018 <ipaddr_aton>
c001435c:	83 c4 10             	add    esp,0x10
c001435f:	85 c0                	test   eax,eax
c0014361:	74 09                	je     c001436c <ipaddr_addr+0x24>
c0014363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014367:	eb 0b                	jmp    c0014374 <ipaddr_addr+0x2c>
c0014369:	8d 76 00             	lea    esi,[esi+0x0]
c001436c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014371:	8d 76 00             	lea    esi,[esi+0x0]
c0014374:	83 c4 1c             	add    esp,0x1c
c0014377:	c3                   	ret    

c0014378 <ipaddr_ntoa_r>:
c0014378:	83 ec 20             	sub    esp,0x20
c001437b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014383:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014387:	8b 00                	mov    eax,DWORD PTR [eax]
c0014389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001438d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014391:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014395:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001439d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00143a2:	e9 f9 00 00 00       	jmp    c00144a0 <ipaddr_ntoa_r+0x128>
c00143a7:	90                   	nop
c00143a8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00143ad:	8d 76 00             	lea    esi,[esi+0x0]
c00143b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143b4:	8a 00                	mov    al,BYTE PTR [eax]
c00143b6:	0f b6 c8             	movzx  ecx,al
c00143b9:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00143be:	89 c8                	mov    eax,ecx
c00143c0:	f7 e2                	mul    edx
c00143c2:	c1 ea 03             	shr    edx,0x3
c00143c5:	89 d0                	mov    eax,edx
c00143c7:	c1 e0 02             	shl    eax,0x2
c00143ca:	01 d0                	add    eax,edx
c00143cc:	d1 e0                	shl    eax,1
c00143ce:	29 c1                	sub    ecx,eax
c00143d0:	89 c8                	mov    eax,ecx
c00143d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00143d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143da:	8a 00                	mov    al,BYTE PTR [eax]
c00143dc:	0f b6 c0             	movzx  eax,al
c00143df:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00143e4:	f7 e2                	mul    edx
c00143e6:	89 d0                	mov    eax,edx
c00143e8:	c1 e8 03             	shr    eax,0x3
c00143eb:	88 c2                	mov    dl,al
c00143ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143f1:	88 10                	mov    BYTE PTR [eax],dl
c00143f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00143f7:	83 c0 30             	add    eax,0x30
c00143fa:	88 c1                	mov    cl,al
c00143fc:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014400:	8d 50 01             	lea    edx,[eax+0x1]
c0014403:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014407:	0f b6 c0             	movzx  eax,al
c001440a:	88 ca                	mov    dl,cl
c001440c:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014414:	8a 00                	mov    al,BYTE PTR [eax]
c0014416:	0f b6 c0             	movzx  eax,al
c0014419:	85 c0                	test   eax,eax
c001441b:	75 93                	jne    c00143b0 <ipaddr_ntoa_r+0x38>
c001441d:	eb 35                	jmp    c0014454 <ipaddr_ntoa_r+0xdc>
c001441f:	90                   	nop
c0014420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014424:	8d 50 01             	lea    edx,[eax+0x1]
c0014427:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001442b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001442f:	7f 0b                	jg     c001443c <ipaddr_ntoa_r+0xc4>
c0014431:	b8 00 00 00 00       	mov    eax,0x0
c0014436:	e9 85 00 00 00       	jmp    c00144c0 <ipaddr_ntoa_r+0x148>
c001443b:	90                   	nop
c001443c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014445:	8d 48 01             	lea    ecx,[eax+0x1]
c0014448:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001444c:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014450:	88 10                	mov    BYTE PTR [eax],dl
c0014452:	66 90                	xchg   ax,ax
c0014454:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014458:	8d 50 ff             	lea    edx,[eax-0x1]
c001445b:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001445f:	0f b6 c0             	movzx  eax,al
c0014462:	85 c0                	test   eax,eax
c0014464:	75 ba                	jne    c0014420 <ipaddr_ntoa_r+0xa8>
c0014466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446a:	8d 50 01             	lea    edx,[eax+0x1]
c001446d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014471:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014475:	7f 09                	jg     c0014480 <ipaddr_ntoa_r+0x108>
c0014477:	b8 00 00 00 00       	mov    eax,0x0
c001447c:	eb 42                	jmp    c00144c0 <ipaddr_ntoa_r+0x148>
c001447e:	66 90                	xchg   ax,ax
c0014480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014484:	8d 50 01             	lea    edx,[eax+0x1]
c0014487:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001448b:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001448e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014497:	83 c0 01             	add    eax,0x1
c001449a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001449e:	66 90                	xchg   ax,ax
c00144a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00144a5:	83 f8 03             	cmp    eax,0x3
c00144a8:	0f 86 fa fe ff ff    	jbe    c00143a8 <ipaddr_ntoa_r+0x30>
c00144ae:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00144b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144b7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00144ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144be:	66 90                	xchg   ax,ax
c00144c0:	83 c4 20             	add    esp,0x20
c00144c3:	c3                   	ret    

c00144c4 <ipaddr_ntoa>:
c00144c4:	6a 10                	push   0x10
c00144c6:	68 a4 a9 03 c0       	push   0xc003a9a4
c00144cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00144cf:	e8 a4 fe ff ff       	call   c0014378 <ipaddr_ntoa_r>
c00144d4:	83 c4 0c             	add    esp,0xc
c00144d7:	c3                   	ret    

c00144d8 <ip_reass_dequeue_datagram>:
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00144e0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00144e4:	75 0e                	jne    c00144f4 <ip_reass_dequeue_datagram+0x1c>
c00144e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00144ec:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00144f1:	eb 29                	jmp    c001451c <ip_reass_dequeue_datagram+0x44>
c00144f3:	90                   	nop
c00144f4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00144f9:	75 15                	jne    c0014510 <ip_reass_dequeue_datagram+0x38>
c00144fb:	83 ec 08             	sub    esp,0x8
c00144fe:	68 6c 0e 03 c0       	push   0xc0030e6c
c0014503:	68 66 fb 02 c0       	push   0xc002fb66
c0014508:	e8 77 b6 00 00       	call   c001fb84 <CPrintf>
c001450d:	83 c4 10             	add    esp,0x10
c0014510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014514:	8b 10                	mov    edx,DWORD PTR [eax]
c0014516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001451a:	89 10                	mov    DWORD PTR [eax],edx
c001451c:	83 ec 08             	sub    esp,0x8
c001451f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014523:	6a 05                	push   0x5
c0014525:	e8 9e 35 ff ff       	call   c0007ac8 <memp_free>
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	90                   	nop
c001452e:	83 c4 0c             	add    esp,0xc
c0014531:	c3                   	ret    
c0014532:	66 90                	xchg   ax,ax

c0014534 <ip_reass_free_complete_datagram>:
c0014534:	83 ec 2c             	sub    esp,0x2c
c0014537:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c001453e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014542:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014546:	75 18                	jne    c0014560 <ip_reass_free_complete_datagram+0x2c>
c0014548:	83 ec 08             	sub    esp,0x8
c001454b:	68 85 0e 03 c0       	push   0xc0030e85
c0014550:	68 66 fb 02 c0       	push   0xc002fb66
c0014555:	e8 2a b6 00 00       	call   c001fb84 <CPrintf>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	8d 76 00             	lea    esi,[esi+0x0]
c0014560:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014565:	74 21                	je     c0014588 <ip_reass_free_complete_datagram+0x54>
c0014567:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001456b:	8b 00                	mov    eax,DWORD PTR [eax]
c001456d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014571:	74 15                	je     c0014588 <ip_reass_free_complete_datagram+0x54>
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	68 91 0e 03 c0       	push   0xc0030e91
c001457b:	68 66 fb 02 c0       	push   0xc002fb66
c0014580:	e8 ff b5 00 00       	call   c001fb84 <CPrintf>
c0014585:	83 c4 10             	add    esp,0x10
c0014588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001458c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001458f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014592:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001459a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001459e:	0f b7 c0             	movzx  eax,ax
c00145a1:	85 c0                	test   eax,eax
c00145a3:	0f 85 a3 00 00 00    	jne    c001464c <ip_reass_free_complete_datagram+0x118>
c00145a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00145ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00145c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145c5:	8d 50 08             	lea    edx,[eax+0x8]
c00145c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145cf:	83 ec 04             	sub    esp,0x4
c00145d2:	6a 14                	push   0x14
c00145d4:	52                   	push   edx
c00145d5:	50                   	push   eax
c00145d6:	e8 9f bd fe ff       	call   c000037a <memcpy>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	83 ec 08             	sub    esp,0x8
c00145e1:	6a 01                	push   0x1
c00145e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145e7:	e8 3c eb ff ff       	call   c0013128 <icmp_time_exceeded>
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	83 ec 0c             	sub    esp,0xc
c00145f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145f6:	e8 69 45 ff ff       	call   c0008b64 <pbuf_clen>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014602:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014607:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001460c:	01 d0                	add    eax,edx
c001460e:	3d ff ff 00 00       	cmp    eax,0xffff
c0014613:	7e 17                	jle    c001462c <ip_reass_free_complete_datagram+0xf8>
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	68 a3 0e 03 c0       	push   0xc0030ea3
c001461d:	68 66 fb 02 c0       	push   0xc002fb66
c0014622:	e8 5d b5 00 00       	call   c001fb84 <CPrintf>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	66 90                	xchg   ax,ax
c001462c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014631:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014636:	01 d0                	add    eax,edx
c0014638:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014644:	e8 3f 3d ff ff       	call   c0008388 <pbuf_free>
c0014649:	83 c4 10             	add    esp,0x10
c001464c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014653:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014657:	eb 7b                	jmp    c00146d4 <ip_reass_free_complete_datagram+0x1a0>
c0014659:	8d 76 00             	lea    esi,[esi+0x0]
c001465c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014667:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001466b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001466f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014673:	8b 00                	mov    eax,DWORD PTR [eax]
c0014675:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014679:	83 ec 0c             	sub    esp,0xc
c001467c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014680:	e8 df 44 ff ff       	call   c0008b64 <pbuf_clen>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001468c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014691:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014696:	01 d0                	add    eax,edx
c0014698:	3d ff ff 00 00       	cmp    eax,0xffff
c001469d:	7e 15                	jle    c00146b4 <ip_reass_free_complete_datagram+0x180>
c001469f:	83 ec 08             	sub    esp,0x8
c00146a2:	68 a3 0e 03 c0       	push   0xc0030ea3
c00146a7:	68 66 fb 02 c0       	push   0xc002fb66
c00146ac:	e8 d3 b4 00 00       	call   c001fb84 <CPrintf>
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146b9:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146be:	01 d0                	add    eax,edx
c00146c0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146c5:	83 ec 0c             	sub    esp,0xc
c00146c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146cc:	e8 b7 3c ff ff       	call   c0008388 <pbuf_free>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146d9:	75 81                	jne    c001465c <ip_reass_free_complete_datagram+0x128>
c00146db:	83 ec 08             	sub    esp,0x8
c00146de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00146e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00146e6:	e8 ed fd ff ff       	call   c00144d8 <ip_reass_dequeue_datagram>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00146f4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146f9:	0f b7 c0             	movzx  eax,ax
c00146fc:	39 c2                	cmp    edx,eax
c00146fe:	76 18                	jbe    c0014718 <ip_reass_free_complete_datagram+0x1e4>
c0014700:	83 ec 08             	sub    esp,0x8
c0014703:	68 c0 0e 03 c0       	push   0xc0030ec0
c0014708:	68 66 fb 02 c0       	push   0xc002fb66
c001470d:	e8 72 b4 00 00       	call   c001fb84 <CPrintf>
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001471f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014724:	89 d1                	mov    ecx,edx
c0014726:	29 c1                	sub    ecx,eax
c0014728:	89 c8                	mov    eax,ecx
c001472a:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014730:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014735:	83 c4 2c             	add    esp,0x2c
c0014738:	c3                   	ret    
c0014739:	8d 76 00             	lea    esi,[esi+0x0]

c001473c <ip_reass_tmr>:
c001473c:	83 ec 1c             	sub    esp,0x1c
c001473f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014747:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001474c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014750:	eb 62                	jmp    c00147b4 <ip_reass_tmr+0x78>
c0014752:	66 90                	xchg   ax,ax
c0014754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014758:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001475b:	0f b6 c0             	movzx  eax,al
c001475e:	85 c0                	test   eax,eax
c0014760:	74 2a                	je     c001478c <ip_reass_tmr+0x50>
c0014762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014766:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014769:	83 e8 01             	sub    eax,0x1
c001476c:	88 c2                	mov    dl,al
c001476e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014772:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014779:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014781:	8b 00                	mov    eax,DWORD PTR [eax]
c0014783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014787:	eb 2b                	jmp    c00147b4 <ip_reass_tmr+0x78>
c0014789:	8d 76 00             	lea    esi,[esi+0x0]
c001478c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014798:	8b 00                	mov    eax,DWORD PTR [eax]
c001479a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001479e:	83 ec 08             	sub    esp,0x8
c00147a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147a9:	e8 86 fd ff ff       	call   c0014534 <ip_reass_free_complete_datagram>
c00147ae:	83 c4 10             	add    esp,0x10
c00147b1:	8d 76 00             	lea    esi,[esi+0x0]
c00147b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147b9:	75 99                	jne    c0014754 <ip_reass_tmr+0x18>
c00147bb:	90                   	nop
c00147bc:	83 c4 1c             	add    esp,0x1c
c00147bf:	c3                   	ret    

c00147c0 <ip_reass_remove_oldest_datagram>:
c00147c0:	83 ec 2c             	sub    esp,0x2c
c00147c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147cb:	90                   	nop
c00147cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00147d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147e4:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00147e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ed:	e9 9a 00 00 00       	jmp    c001488c <ip_reass_remove_oldest_datagram+0xcc>
c00147f2:	66 90                	xchg   ax,ax
c00147f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147f8:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00147fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014802:	39 c2                	cmp    edx,eax
c0014804:	75 2e                	jne    c0014834 <ip_reass_remove_oldest_datagram+0x74>
c0014806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001480a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001480d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014811:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014814:	39 c2                	cmp    edx,eax
c0014816:	75 1c                	jne    c0014834 <ip_reass_remove_oldest_datagram+0x74>
c0014818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001481c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001481f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014823:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014827:	0f b7 d2             	movzx  edx,dx
c001482a:	0f b7 c0             	movzx  eax,ax
c001482d:	39 c2                	cmp    edx,eax
c001482f:	74 3b                	je     c001486c <ip_reass_remove_oldest_datagram+0xac>
c0014831:	8d 76 00             	lea    esi,[esi+0x0]
c0014834:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0014839:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001483e:	75 0c                	jne    c001484c <ip_reass_remove_oldest_datagram+0x8c>
c0014840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014844:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014848:	eb 22                	jmp    c001486c <ip_reass_remove_oldest_datagram+0xac>
c001484a:	66 90                	xchg   ax,ax
c001484c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014850:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014857:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001485a:	0f b6 d2             	movzx  edx,dl
c001485d:	0f b6 c0             	movzx  eax,al
c0014860:	39 c2                	cmp    edx,eax
c0014862:	77 08                	ja     c001486c <ip_reass_remove_oldest_datagram+0xac>
c0014864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014868:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001486c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014870:	8b 00                	mov    eax,DWORD PTR [eax]
c0014872:	85 c0                	test   eax,eax
c0014874:	74 0a                	je     c0014880 <ip_reass_remove_oldest_datagram+0xc0>
c0014876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001487a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001487e:	66 90                	xchg   ax,ax
c0014880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014884:	8b 00                	mov    eax,DWORD PTR [eax]
c0014886:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001488a:	66 90                	xchg   ax,ax
c001488c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014891:	0f 85 5d ff ff ff    	jne    c00147f4 <ip_reass_remove_oldest_datagram+0x34>
c0014897:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001489c:	74 22                	je     c00148c0 <ip_reass_remove_oldest_datagram+0x100>
c001489e:	83 ec 08             	sub    esp,0x8
c00148a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00148a9:	e8 86 fc ff ff       	call   c0014534 <ip_reass_free_complete_datagram>
c00148ae:	83 c4 10             	add    esp,0x10
c00148b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00148b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148b9:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00148bd:	8d 76 00             	lea    esi,[esi+0x0]
c00148c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c4:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00148c8:	7d 0e                	jge    c00148d8 <ip_reass_remove_oldest_datagram+0x118>
c00148ca:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00148cf:	0f 8f f7 fe ff ff    	jg     c00147cc <ip_reass_remove_oldest_datagram+0xc>
c00148d5:	8d 76 00             	lea    esi,[esi+0x0]
c00148d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148dc:	83 c4 2c             	add    esp,0x2c
c00148df:	c3                   	ret    

c00148e0 <ip_reass_enqueue_new_datagram>:
c00148e0:	83 ec 1c             	sub    esp,0x1c
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	6a 05                	push   0x5
c00148e8:	e8 af 30 ff ff       	call   c000799c <memp_malloc>
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148f9:	75 4d                	jne    c0014948 <ip_reass_enqueue_new_datagram+0x68>
c00148fb:	83 ec 08             	sub    esp,0x8
c00148fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014906:	e8 b5 fe ff ff       	call   c00147c0 <ip_reass_remove_oldest_datagram>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014912:	7f 14                	jg     c0014928 <ip_reass_enqueue_new_datagram+0x48>
c0014914:	83 ec 0c             	sub    esp,0xc
c0014917:	6a 05                	push   0x5
c0014919:	e8 7e 30 ff ff       	call   c000799c <memp_malloc>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014925:	8d 76 00             	lea    esi,[esi+0x0]
c0014928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001492d:	75 19                	jne    c0014948 <ip_reass_enqueue_new_datagram+0x68>
c001492f:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014935:	83 c0 01             	add    eax,0x1
c0014938:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001493e:	b8 00 00 00 00       	mov    eax,0x0
c0014943:	eb 53                	jmp    c0014998 <ip_reass_enqueue_new_datagram+0xb8>
c0014945:	8d 76 00             	lea    esi,[esi+0x0]
c0014948:	83 ec 04             	sub    esp,0x4
c001494b:	6a 20                	push   0x20
c001494d:	6a 00                	push   0x0
c001494f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014953:	e8 98 bb fe ff       	call   c00004f0 <memset>
c0014958:	83 c4 10             	add    esp,0x10
c001495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001495f:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014963:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001496d:	89 10                	mov    DWORD PTR [eax],edx
c001496f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014973:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001497c:	83 c0 08             	add    eax,0x8
c001497f:	83 ec 04             	sub    esp,0x4
c0014982:	6a 14                	push   0x14
c0014984:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014988:	50                   	push   eax
c0014989:	e8 ec b9 fe ff       	call   c000037a <memcpy>
c001498e:	83 c4 10             	add    esp,0x10
c0014991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014995:	8d 76 00             	lea    esi,[esi+0x0]
c0014998:	83 c4 1c             	add    esp,0x1c
c001499b:	c3                   	ret    

c001499c <ip_reass_chain_frag_into_datagram_and_validate>:
c001499c:	53                   	push   ebx
c001499d:	83 ec 28             	sub    esp,0x28
c00149a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00149a8:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00149b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149bf:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00149c3:	0f b7 c0             	movzx  eax,ax
c00149c6:	83 ec 0c             	sub    esp,0xc
c00149c9:	50                   	push   eax
c00149ca:	e8 4d c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00149cf:	83 c4 10             	add    esp,0x10
c00149d2:	89 c3                	mov    ebx,eax
c00149d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00149db:	0f b7 c0             	movzx  eax,ax
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	50                   	push   eax
c00149e2:	e8 35 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	0f b7 c0             	movzx  eax,ax
c00149ed:	c1 e8 08             	shr    eax,0x8
c00149f0:	83 e0 0f             	and    eax,0xf
c00149f3:	c1 e0 02             	shl    eax,0x2
c00149f6:	89 d9                	mov    ecx,ebx
c00149f8:	29 c1                	sub    ecx,eax
c00149fa:	89 c8                	mov    eax,ecx
c00149fc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a05:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a09:	0f b7 c0             	movzx  eax,ax
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	50                   	push   eax
c0014a10:	e8 07 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	25 ff 1f 00 00       	and    eax,0x1fff
c0014a1d:	c1 e0 03             	shl    eax,0x3
c0014a20:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014a25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014a3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014a42:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014a46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014a4a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014a4f:	01 d0                	add    eax,edx
c0014a51:	89 c2                	mov    edx,eax
c0014a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a57:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a66:	e9 11 01 00 00       	jmp    c0014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014a6b:	90                   	nop
c0014a6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a7b:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a83:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a87:	0f b7 d2             	movzx  edx,dx
c0014a8a:	0f b7 c0             	movzx  eax,ax
c0014a8d:	39 c2                	cmp    edx,eax
c0014a8f:	73 6f                	jae    c0014b00 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a99:	89 10                	mov    DWORD PTR [eax],edx
c0014a9b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014aa0:	74 4e                	je     c0014af0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014aa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aa6:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014aaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aae:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ab2:	0f b7 d2             	movzx  edx,dx
c0014ab5:	0f b7 c0             	movzx  eax,ax
c0014ab8:	39 c2                	cmp    edx,eax
c0014aba:	0f 82 bc 02 00 00    	jb     c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014ac0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ac4:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014acc:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ad0:	0f b7 d2             	movzx  edx,dx
c0014ad3:	0f b7 c0             	movzx  eax,ax
c0014ad6:	39 c2                	cmp    edx,eax
c0014ad8:	0f 87 9e 02 00 00    	ja     c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ae6:	89 10                	mov    DWORD PTR [eax],edx
c0014ae8:	e9 9b 00 00 00       	jmp    c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014af4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014af8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014afb:	e9 88 00 00 00       	jmp    c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014b00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b04:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b10:	0f b7 d2             	movzx  edx,dx
c0014b13:	0f b7 c0             	movzx  eax,ax
c0014b16:	39 c2                	cmp    edx,eax
c0014b18:	0f 84 62 02 00 00    	je     c0014d80 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014b1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b22:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b2a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b2e:	0f b7 d2             	movzx  edx,dx
c0014b31:	0f b7 c0             	movzx  eax,ax
c0014b34:	39 c2                	cmp    edx,eax
c0014b36:	0f 82 48 02 00 00    	jb     c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014b3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b41:	74 25                	je     c0014b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b53:	0f b7 d2             	movzx  edx,dx
c0014b56:	0f b7 c0             	movzx  eax,ax
c0014b59:	39 c2                	cmp    edx,eax
c0014b5b:	74 0b                	je     c0014b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014b5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b65:	8d 76 00             	lea    esi,[esi+0x0]
c0014b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b7a:	66 90                	xchg   ax,ax
c0014b7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b81:	0f 85 e5 fe ff ff    	jne    c0014a6c <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014b87:	90                   	nop
c0014b88:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b8d:	0f 85 95 00 00 00    	jne    c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b93:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b98:	74 62                	je     c0014bfc <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014baa:	0f b7 d2             	movzx  edx,dx
c0014bad:	0f b7 c0             	movzx  eax,ax
c0014bb0:	39 c2                	cmp    edx,eax
c0014bb2:	76 18                	jbe    c0014bcc <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014bb4:	83 ec 08             	sub    esp,0x8
c0014bb7:	68 db 0e 03 c0       	push   0xc0030edb
c0014bbc:	68 66 fb 02 c0       	push   0xc002fb66
c0014bc1:	e8 be af 00 00       	call   c001fb84 <CPrintf>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bd4:	89 10                	mov    DWORD PTR [eax],edx
c0014bd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bda:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014be6:	0f b7 d2             	movzx  edx,dx
c0014be9:	0f b7 c0             	movzx  eax,ax
c0014bec:	39 c2                	cmp    edx,eax
c0014bee:	74 38                	je     c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014bf0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bf8:	eb 2e                	jmp    c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014bfa:	66 90                	xchg   ax,ax
c0014bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c03:	85 c0                	test   eax,eax
c0014c05:	74 15                	je     c0014c1c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014c07:	83 ec 08             	sub    esp,0x8
c0014c0a:	68 1c 0f 03 c0       	push   0xc0030f1c
c0014c0f:	68 66 fb 02 c0       	push   0xc002fb66
c0014c14:	e8 6b af 00 00       	call   c001fb84 <CPrintf>
c0014c19:	83 c4 10             	add    esp,0x10
c0014c1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c20:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014c27:	90                   	nop
c0014c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c2c:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014c2f:	0f b6 c0             	movzx  eax,al
c0014c32:	83 e0 01             	and    eax,0x1
c0014c35:	0f 84 39 01 00 00    	je     c0014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014c3b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014c40:	0f 84 26 01 00 00    	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c50:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c54:	0f b7 c0             	movzx  eax,ax
c0014c57:	85 c0                	test   eax,eax
c0014c59:	74 0d                	je     c0014c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c63:	e9 04 01 00 00       	jmp    c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c7a:	eb 44                	jmp    c0014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014c7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c93:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c97:	0f b7 d2             	movzx  edx,dx
c0014c9a:	0f b7 c0             	movzx  eax,ax
c0014c9d:	39 c2                	cmp    edx,eax
c0014c9f:	74 0b                	je     c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014ca1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ca9:	eb 1d                	jmp    c0014cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014cab:	90                   	nop
c0014cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cbe:	66 90                	xchg   ax,ax
c0014cc0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014cc5:	75 b5                	jne    c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014cc7:	90                   	nop
c0014cc8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ccd:	0f 84 99 00 00 00    	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cda:	85 c0                	test   eax,eax
c0014cdc:	75 16                	jne    c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014cde:	83 ec 08             	sub    esp,0x8
c0014ce1:	68 f9 0e 03 c0       	push   0xc0030ef9
c0014ce6:	68 66 fb 02 c0       	push   0xc002fb66
c0014ceb:	e8 94 ae 00 00       	call   c001fb84 <CPrintf>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	90                   	nop
c0014cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cfe:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014d02:	75 18                	jne    c0014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014d04:	83 ec 08             	sub    esp,0x8
c0014d07:	68 f9 0e 03 c0       	push   0xc0030ef9
c0014d0c:	68 66 fb 02 c0       	push   0xc002fb66
c0014d11:	e8 6e ae 00 00       	call   c001fb84 <CPrintf>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	8d 76 00             	lea    esi,[esi+0x0]
c0014d1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d22:	85 c0                	test   eax,eax
c0014d24:	74 16                	je     c0014d3c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014d26:	83 ec 08             	sub    esp,0x8
c0014d29:	68 54 0f 03 c0       	push   0xc0030f54
c0014d2e:	68 66 fb 02 c0       	push   0xc002fb66
c0014d33:	e8 4c ae 00 00       	call   c001fb84 <CPrintf>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	90                   	nop
c0014d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d40:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014d4b:	0f b7 d2             	movzx  edx,dx
c0014d4e:	0f b7 c0             	movzx  eax,ax
c0014d51:	39 c2                	cmp    edx,eax
c0014d53:	74 17                	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d55:	83 ec 08             	sub    esp,0x8
c0014d58:	68 78 0f 03 c0       	push   0xc0030f78
c0014d5d:	68 66 fb 02 c0       	push   0xc002fb66
c0014d62:	e8 1d ae 00 00       	call   c001fb84 <CPrintf>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	66 90                	xchg   ax,ax
c0014d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d70:	eb 52                	jmp    c0014dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014d72:	66 90                	xchg   ax,ax
c0014d74:	b8 00 00 00 00       	mov    eax,0x0
c0014d79:	eb 49                	jmp    c0014dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014d7b:	90                   	nop
c0014d7c:	90                   	nop
c0014d7d:	eb 09                	jmp    c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014d7f:	90                   	nop
c0014d80:	90                   	nop
c0014d81:	eb 05                	jmp    c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014d83:	90                   	nop
c0014d84:	90                   	nop
c0014d85:	8d 76 00             	lea    esi,[esi+0x0]
c0014d88:	83 ec 0c             	sub    esp,0xc
c0014d8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d8f:	e8 d0 3d ff ff       	call   c0008b64 <pbuf_clen>
c0014d94:	83 c4 10             	add    esp,0x10
c0014d97:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014d9e:	0f b6 c0             	movzx  eax,al
c0014da1:	89 d3                	mov    ebx,edx
c0014da3:	29 c3                	sub    ebx,eax
c0014da5:	89 d8                	mov    eax,ebx
c0014da7:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014dad:	83 ec 0c             	sub    esp,0xc
c0014db0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014db4:	e8 cf 35 ff ff       	call   c0008388 <pbuf_free>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	b8 00 00 00 00       	mov    eax,0x0
c0014dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014dc4:	83 c4 28             	add    esp,0x28
c0014dc7:	5b                   	pop    ebx
c0014dc8:	c3                   	ret    
c0014dc9:	8d 76 00             	lea    esi,[esi+0x0]

c0014dcc <ip_reass>:
c0014dcc:	53                   	push   ebx
c0014dcd:	83 ec 28             	sub    esp,0x28
c0014dd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014dd8:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014dde:	83 c0 01             	add    eax,0x1
c0014de1:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014deb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014df6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014df9:	0f b7 c0             	movzx  eax,ax
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	50                   	push   eax
c0014e00:	e8 17 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	0f b7 c0             	movzx  eax,ax
c0014e0b:	c1 e8 08             	shr    eax,0x8
c0014e0e:	0f b7 c0             	movzx  eax,ax
c0014e11:	83 e0 0f             	and    eax,0xf
c0014e14:	c1 e0 02             	shl    eax,0x2
c0014e17:	83 f8 14             	cmp    eax,0x14
c0014e1a:	74 14                	je     c0014e30 <ip_reass+0x64>
c0014e1c:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014e22:	83 c0 01             	add    eax,0x1
c0014e25:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014e2b:	e9 70 03 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e34:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e38:	0f b7 c0             	movzx  eax,ax
c0014e3b:	83 ec 0c             	sub    esp,0xc
c0014e3e:	50                   	push   eax
c0014e3f:	e8 d8 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e4c:	c1 e0 03             	shl    eax,0x3
c0014e4f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e58:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014e5c:	0f b7 c0             	movzx  eax,ax
c0014e5f:	83 ec 0c             	sub    esp,0xc
c0014e62:	50                   	push   eax
c0014e63:	e8 b4 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	89 c3                	mov    ebx,eax
c0014e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e71:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014e74:	0f b7 c0             	movzx  eax,ax
c0014e77:	83 ec 0c             	sub    esp,0xc
c0014e7a:	50                   	push   eax
c0014e7b:	e8 9c bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	0f b7 c0             	movzx  eax,ax
c0014e86:	c1 e8 08             	shr    eax,0x8
c0014e89:	83 e0 0f             	and    eax,0xf
c0014e8c:	c1 e0 02             	shl    eax,0x2
c0014e8f:	89 d9                	mov    ecx,ebx
c0014e91:	29 c1                	sub    ecx,eax
c0014e93:	89 c8                	mov    eax,ecx
c0014e95:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014e9a:	83 ec 0c             	sub    esp,0xc
c0014e9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014ea1:	e8 be 3c ff ff       	call   c0008b64 <pbuf_clen>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014ead:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014eb3:	0f b7 d0             	movzx  edx,ax
c0014eb6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ebb:	01 d0                	add    eax,edx
c0014ebd:	83 f8 0a             	cmp    eax,0xa
c0014ec0:	7e 42                	jle    c0014f04 <ip_reass+0x138>
c0014ec2:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ec7:	83 ec 08             	sub    esp,0x8
c0014eca:	50                   	push   eax
c0014ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ecf:	e8 ec f8 ff ff       	call   c00147c0 <ip_reass_remove_oldest_datagram>
c0014ed4:	83 c4 10             	add    esp,0x10
c0014ed7:	85 c0                	test   eax,eax
c0014ed9:	74 15                	je     c0014ef0 <ip_reass+0x124>
c0014edb:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014ee1:	0f b7 d0             	movzx  edx,ax
c0014ee4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ee9:	01 d0                	add    eax,edx
c0014eeb:	83 f8 0a             	cmp    eax,0xa
c0014eee:	7e 14                	jle    c0014f04 <ip_reass+0x138>
c0014ef0:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014ef6:	83 c0 01             	add    eax,0x1
c0014ef9:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014eff:	e9 9c 02 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014f04:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014f09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f0d:	eb 65                	jmp    c0014f74 <ip_reass+0x1a8>
c0014f0f:	90                   	nop
c0014f10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f14:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014f1e:	39 c2                	cmp    edx,eax
c0014f20:	75 3e                	jne    c0014f60 <ip_reass+0x194>
c0014f22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f30:	39 c2                	cmp    edx,eax
c0014f32:	75 2c                	jne    c0014f60 <ip_reass+0x194>
c0014f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f38:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014f43:	0f b7 d2             	movzx  edx,dx
c0014f46:	0f b7 c0             	movzx  eax,ax
c0014f49:	39 c2                	cmp    edx,eax
c0014f4b:	75 13                	jne    c0014f60 <ip_reass+0x194>
c0014f4d:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014f53:	83 c0 01             	add    eax,0x1
c0014f56:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014f5c:	eb 1e                	jmp    c0014f7c <ip_reass+0x1b0>
c0014f5e:	66 90                	xchg   ax,ax
c0014f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f72:	66 90                	xchg   ax,ax
c0014f74:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f79:	75 95                	jne    c0014f10 <ip_reass+0x144>
c0014f7b:	90                   	nop
c0014f7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f81:	75 25                	jne    c0014fa8 <ip_reass+0x1dc>
c0014f83:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f88:	83 ec 08             	sub    esp,0x8
c0014f8b:	50                   	push   eax
c0014f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f90:	e8 4b f9 ff ff       	call   c00148e0 <ip_reass_enqueue_new_datagram>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014fa1:	75 61                	jne    c0015004 <ip_reass+0x238>
c0014fa3:	e9 f8 01 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fac:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014fb0:	0f b7 c0             	movzx  eax,ax
c0014fb3:	83 ec 0c             	sub    esp,0xc
c0014fb6:	50                   	push   eax
c0014fb7:	e8 60 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	0f b7 c0             	movzx  eax,ax
c0014fc2:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fc7:	75 3b                	jne    c0015004 <ip_reass+0x238>
c0014fc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fcd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014fd1:	0f b7 c0             	movzx  eax,ax
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	50                   	push   eax
c0014fd8:	e8 3f bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	0f b7 c0             	movzx  eax,ax
c0014fe3:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fe8:	74 1a                	je     c0015004 <ip_reass+0x238>
c0014fea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fee:	83 c0 08             	add    eax,0x8
c0014ff1:	83 ec 04             	sub    esp,0x4
c0014ff4:	6a 14                	push   0x14
c0014ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ffa:	50                   	push   eax
c0014ffb:	e8 7a b3 fe ff       	call   c000037a <memcpy>
c0015000:	83 c4 10             	add    esp,0x10
c0015003:	90                   	nop
c0015004:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0015009:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001500f:	01 d0                	add    eax,edx
c0015011:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001501b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001501f:	0f b7 c0             	movzx  eax,ax
c0015022:	83 e0 20             	and    eax,0x20
c0015025:	75 29                	jne    c0015050 <ip_reass+0x284>
c0015027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001502b:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c001502e:	83 c8 01             	or     eax,0x1
c0015031:	88 c2                	mov    dl,al
c0015033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015037:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001503a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001503f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015043:	01 d0                	add    eax,edx
c0015045:	89 c2                	mov    edx,eax
c0015047:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001504b:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001504f:	90                   	nop
c0015050:	83 ec 08             	sub    esp,0x8
c0015053:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015057:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001505b:	e8 3c f9 ff ff       	call   c001499c <ip_reass_chain_frag_into_datagram_and_validate>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	0f 84 2d 01 00 00    	je     c0015198 <ip_reass+0x3cc>
c001506b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001506f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015072:	83 c0 14             	add    eax,0x14
c0015075:	89 c2                	mov    edx,eax
c0015077:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001507b:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001507f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015083:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015089:	8b 00                	mov    eax,DWORD PTR [eax]
c001508b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001508f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015093:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001509d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150a1:	83 c0 08             	add    eax,0x8
c00150a4:	83 ec 04             	sub    esp,0x4
c00150a7:	6a 14                	push   0x14
c00150a9:	50                   	push   eax
c00150aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150ae:	e8 c7 b2 fe ff       	call   c000037a <memcpy>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150ba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00150bd:	0f b7 c0             	movzx  eax,ax
c00150c0:	83 ec 0c             	sub    esp,0xc
c00150c3:	50                   	push   eax
c00150c4:	e8 53 bb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	89 c2                	mov    edx,eax
c00150ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00150d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150da:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00150e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150e4:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00150ea:	83 ec 08             	sub    esp,0x8
c00150ed:	6a 14                	push   0x14
c00150ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150f3:	e8 cc e4 ff ff       	call   c00135c4 <inet_chksum>
c00150f8:	83 c4 10             	add    esp,0x10
c00150fb:	89 c2                	mov    edx,eax
c00150fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015101:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015109:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001510c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015110:	eb 3e                	jmp    c0015150 <ip_reass+0x384>
c0015112:	66 90                	xchg   ax,ax
c0015114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001511b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	6a ec                	push   0xffffffec
c0015124:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015128:	e8 bb 30 ff ff       	call   c00081e8 <pbuf_header>
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	83 ec 08             	sub    esp,0x8
c0015133:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015137:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001513b:	e8 8c 3a ff ff       	call   c0008bcc <pbuf_cat>
c0015140:	83 c4 10             	add    esp,0x10
c0015143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015155:	75 bd                	jne    c0015114 <ip_reass+0x348>
c0015157:	83 ec 08             	sub    esp,0x8
c001515a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015162:	e8 71 f3 ff ff       	call   c00144d8 <ip_reass_dequeue_datagram>
c0015167:	83 c4 10             	add    esp,0x10
c001516a:	83 ec 0c             	sub    esp,0xc
c001516d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015171:	e8 ee 39 ff ff       	call   c0008b64 <pbuf_clen>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015180:	0f b6 c0             	movzx  eax,al
c0015183:	89 d3                	mov    ebx,edx
c0015185:	29 c3                	sub    ebx,eax
c0015187:	89 d8                	mov    eax,ebx
c0015189:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001518f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015193:	eb 2f                	jmp    c00151c4 <ip_reass+0x3f8>
c0015195:	8d 76 00             	lea    esi,[esi+0x0]
c0015198:	b8 00 00 00 00       	mov    eax,0x0
c001519d:	eb 25                	jmp    c00151c4 <ip_reass+0x3f8>
c001519f:	90                   	nop
c00151a0:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00151a6:	83 c0 01             	add    eax,0x1
c00151a9:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00151af:	83 ec 0c             	sub    esp,0xc
c00151b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151b6:	e8 cd 31 ff ff       	call   c0008388 <pbuf_free>
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	b8 00 00 00 00       	mov    eax,0x0
c00151c3:	90                   	nop
c00151c4:	83 c4 28             	add    esp,0x28
c00151c7:	5b                   	pop    ebx
c00151c8:	c3                   	ret    
c00151c9:	8d 76 00             	lea    esi,[esi+0x0]

c00151cc <ip_frag_alloc_pbuf_custom_ref>:
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	83 ec 0c             	sub    esp,0xc
c00151d2:	6a 06                	push   0x6
c00151d4:	e8 c3 27 ff ff       	call   c000799c <memp_malloc>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	83 c4 0c             	add    esp,0xc
c00151df:	c3                   	ret    

c00151e0 <ip_frag_free_pbuf_custom_ref>:
c00151e0:	83 ec 0c             	sub    esp,0xc
c00151e3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00151e8:	75 16                	jne    c0015200 <ip_frag_free_pbuf_custom_ref+0x20>
c00151ea:	83 ec 08             	sub    esp,0x8
c00151ed:	68 96 ff 02 c0       	push   0xc002ff96
c00151f2:	68 66 fb 02 c0       	push   0xc002fb66
c00151f7:	e8 88 a9 00 00       	call   c001fb84 <CPrintf>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	90                   	nop
c0015200:	83 ec 08             	sub    esp,0x8
c0015203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015207:	6a 06                	push   0x6
c0015209:	e8 ba 28 ff ff       	call   c0007ac8 <memp_free>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	90                   	nop
c0015212:	83 c4 0c             	add    esp,0xc
c0015215:	c3                   	ret    
c0015216:	66 90                	xchg   ax,ax

c0015218 <ipfrag_free_pbuf_custom>:
c0015218:	83 ec 1c             	sub    esp,0x1c
c001521b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001521f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015223:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015228:	75 16                	jne    c0015240 <ipfrag_free_pbuf_custom+0x28>
c001522a:	83 ec 08             	sub    esp,0x8
c001522d:	68 06 0f 03 c0       	push   0xc0030f06
c0015232:	68 66 fb 02 c0       	push   0xc002fb66
c0015237:	e8 48 a9 00 00       	call   c001fb84 <CPrintf>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	90                   	nop
c0015240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015244:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015248:	74 16                	je     c0015260 <ipfrag_free_pbuf_custom+0x48>
c001524a:	83 ec 08             	sub    esp,0x8
c001524d:	68 12 0f 03 c0       	push   0xc0030f12
c0015252:	68 66 fb 02 c0       	push   0xc002fb66
c0015257:	e8 28 a9 00 00       	call   c001fb84 <CPrintf>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	90                   	nop
c0015260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015264:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015267:	85 c0                	test   eax,eax
c0015269:	74 15                	je     c0015280 <ipfrag_free_pbuf_custom+0x68>
c001526b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001526f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015272:	83 ec 0c             	sub    esp,0xc
c0015275:	50                   	push   eax
c0015276:	e8 0d 31 ff ff       	call   c0008388 <pbuf_free>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	66 90                	xchg   ax,ax
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015287:	e8 54 ff ff ff       	call   c00151e0 <ip_frag_free_pbuf_custom_ref>
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	90                   	nop
c0015290:	83 c4 1c             	add    esp,0x1c
c0015293:	c3                   	ret    

c0015294 <ip_frag>:
c0015294:	53                   	push   ebx
c0015295:	83 ec 38             	sub    esp,0x38
c0015298:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001529c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001529f:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00152a4:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00152ab:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00152b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152c9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00152cd:	0f b7 c0             	movzx  eax,ax
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	50                   	push   eax
c00152d4:	e8 43 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00152e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152e5:	25 ff 1f 00 00       	and    eax,0x1fff
c00152ea:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00152ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152f3:	25 00 20 00 00       	and    eax,0x2000
c00152f8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00152fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015301:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015304:	83 e8 14             	sub    eax,0x14
c0015307:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001530c:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015311:	83 e8 14             	sub    eax,0x14
c0015314:	8d 50 07             	lea    edx,[eax+0x7]
c0015317:	0f 48 c2             	cmovs  eax,edx
c001531a:	c1 f8 03             	sar    eax,0x3
c001531d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015322:	e9 05 03 00 00       	jmp    c001562c <ip_frag+0x398>
c0015327:	90                   	nop
c0015328:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001532d:	8d 50 ed             	lea    edx,[eax-0x13]
c0015330:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015335:	39 c2                	cmp    edx,eax
c0015337:	0f 9f c0             	setg   al
c001533a:	0f b6 c0             	movzx  eax,al
c001533d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015346:	25 ff 1f 00 00       	and    eax,0x1fff
c001534b:	89 c2                	mov    edx,eax
c001534d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015352:	09 d0                	or     eax,edx
c0015354:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015359:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001535e:	85 c0                	test   eax,eax
c0015360:	75 0e                	jne    c0015370 <ip_frag+0xdc>
c0015362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015366:	80 cc 20             	or     ah,0x20
c0015369:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001536e:	66 90                	xchg   ax,ax
c0015370:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015375:	85 c0                	test   eax,eax
c0015377:	75 0b                	jne    c0015384 <ip_frag+0xf0>
c0015379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001537d:	c1 e0 03             	shl    eax,0x3
c0015380:	eb 0a                	jmp    c001538c <ip_frag+0xf8>
c0015382:	66 90                	xchg   ax,ax
c0015384:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015389:	8d 76 00             	lea    esi,[esi+0x0]
c001538c:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015391:	83 ec 04             	sub    esp,0x4
c0015394:	6a 00                	push   0x0
c0015396:	6a 14                	push   0x14
c0015398:	6a 02                	push   0x2
c001539a:	e8 c5 31 ff ff       	call   c0008564 <pbuf_alloc>
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153ab:	75 07                	jne    c00153b4 <ip_frag+0x120>
c00153ad:	b0 ff                	mov    al,0xff
c00153af:	e9 88 02 00 00       	jmp    c001563c <ip_frag+0x3a8>
c00153b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00153bc:	0f b7 c0             	movzx  eax,ax
c00153bf:	83 f8 13             	cmp    eax,0x13
c00153c2:	77 18                	ja     c00153dc <ip_frag+0x148>
c00153c4:	83 ec 08             	sub    esp,0x8
c00153c7:	68 a8 0f 03 c0       	push   0xc0030fa8
c00153cc:	68 66 fb 02 c0       	push   0xc002fb66
c00153d1:	e8 ae a7 00 00       	call   c001fb84 <CPrintf>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	8d 76 00             	lea    esi,[esi+0x0]
c00153dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00153e3:	83 ec 04             	sub    esp,0x4
c00153e6:	6a 14                	push   0x14
c00153e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00153ec:	50                   	push   eax
c00153ed:	e8 88 af fe ff       	call   c000037a <memcpy>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00153fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015407:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c001540c:	01 c2                	add    edx,eax
c001540e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015412:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015415:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015419:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001541d:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015422:	89 d1                	mov    ecx,edx
c0015424:	29 c1                	sub    ecx,eax
c0015426:	89 c8                	mov    eax,ecx
c0015428:	89 c2                	mov    edx,eax
c001542a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001542e:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015436:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001543b:	e9 18 01 00 00       	jmp    c0015558 <ip_frag+0x2c4>
c0015440:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015444:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015448:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001544c:	0f b7 d8             	movzx  ebx,ax
c001544f:	0f b7 ca             	movzx  ecx,dx
c0015452:	39 cb                	cmp    ebx,ecx
c0015454:	76 02                	jbe    c0015458 <ip_frag+0x1c4>
c0015456:	89 d0                	mov    eax,edx
c0015458:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c001545d:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015462:	85 c0                	test   eax,eax
c0015464:	75 12                	jne    c0015478 <ip_frag+0x1e4>
c0015466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001546a:	8b 00                	mov    eax,DWORD PTR [eax]
c001546c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015470:	e9 e3 00 00 00       	jmp    c0015558 <ip_frag+0x2c4>
c0015475:	8d 76 00             	lea    esi,[esi+0x0]
c0015478:	e8 4f fd ff ff       	call   c00151cc <ip_frag_alloc_pbuf_custom_ref>
c001547d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015481:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015486:	75 18                	jne    c00154a0 <ip_frag+0x20c>
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001548f:	e8 f4 2e ff ff       	call   c0008388 <pbuf_free>
c0015494:	83 c4 10             	add    esp,0x10
c0015497:	b0 ff                	mov    al,0xff
c0015499:	e9 9e 01 00 00       	jmp    c001563c <ip_frag+0x3a8>
c001549e:	66 90                	xchg   ax,ax
c00154a0:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00154a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00154ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00154b0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00154b5:	83 ec 08             	sub    esp,0x8
c00154b8:	53                   	push   ebx
c00154b9:	51                   	push   ecx
c00154ba:	52                   	push   edx
c00154bb:	6a 02                	push   0x2
c00154bd:	50                   	push   eax
c00154be:	6a 03                	push   0x3
c00154c0:	e8 ff 2b ff ff       	call   c00080c4 <pbuf_alloced_custom>
c00154c5:	83 c4 20             	add    esp,0x20
c00154c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154cc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00154d1:	75 25                	jne    c00154f8 <ip_frag+0x264>
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154da:	e8 01 fd ff ff       	call   c00151e0 <ip_frag_free_pbuf_custom_ref>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154e9:	e8 9a 2e ff ff       	call   c0008388 <pbuf_free>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	b0 ff                	mov    al,0xff
c00154f3:	e9 44 01 00 00       	jmp    c001563c <ip_frag+0x3a8>
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154ff:	e8 94 36 ff ff       	call   c0008b98 <pbuf_ref>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001550b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001550f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015516:	c7 40 10 18 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015218
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015528:	e8 9f 36 ff ff       	call   c0008bcc <pbuf_cat>
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015534:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015539:	89 d3                	mov    ebx,edx
c001553b:	29 c3                	sub    ebx,eax
c001553d:	89 d8                	mov    eax,ebx
c001553f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015544:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015549:	85 c0                	test   eax,eax
c001554b:	74 0b                	je     c0015558 <ip_frag+0x2c4>
c001554d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015551:	8b 00                	mov    eax,DWORD PTR [eax]
c0015553:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015557:	90                   	nop
c0015558:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001555d:	85 c0                	test   eax,eax
c001555f:	0f 85 db fe ff ff    	jne    c0015440 <ip_frag+0x1ac>
c0015565:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001556a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001556f:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	50                   	push   eax
c0015578:	e8 9f b6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	89 c2                	mov    edx,eax
c0015582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015586:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558e:	83 c0 14             	add    eax,0x14
c0015591:	0f b7 c0             	movzx  eax,ax
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	50                   	push   eax
c0015598:	e8 7f b6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	89 c2                	mov    edx,eax
c00155a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155a6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00155aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155ae:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00155b4:	83 ec 08             	sub    esp,0x8
c00155b7:	6a 14                	push   0x14
c00155b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00155bd:	e8 02 e0 ff ff       	call   c00135c4 <inet_chksum>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	89 c2                	mov    edx,eax
c00155c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155cb:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00155cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00155d3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d6:	83 ec 04             	sub    esp,0x4
c00155d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155e1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00155e5:	ff d0                	call   eax
c00155e7:	83 c4 10             	add    esp,0x10
c00155ea:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00155f0:	83 c0 01             	add    eax,0x1
c00155f3:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00155f9:	83 ec 0c             	sub    esp,0xc
c00155fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015600:	e8 83 2d ff ff       	call   c0008388 <pbuf_free>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015611:	89 d1                	mov    ecx,edx
c0015613:	29 c1                	sub    ecx,eax
c0015615:	89 c8                	mov    eax,ecx
c0015617:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001561c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015624:	01 d0                	add    eax,edx
c0015626:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001562b:	90                   	nop
c001562c:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015631:	85 c0                	test   eax,eax
c0015633:	0f 85 ef fc ff ff    	jne    c0015328 <ip_frag+0x94>
c0015639:	b0 00                	mov    al,0x0
c001563b:	90                   	nop
c001563c:	83 c4 38             	add    esp,0x38
c001563f:	5b                   	pop    ebx
c0015640:	c3                   	ret    
c0015641:	90                   	nop

c0015642 <Computer::close(int, int, void*)>:
c0015642:	53                   	push   ebx
c0015643:	83 ec 08             	sub    esp,0x8
c0015646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001564a:	e8 c7 a3 00 00       	call   c001fa16 <KeExecuteAtexit()>
c001564f:	83 ec 0c             	sub    esp,0xc
c0015652:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015658:	50                   	push   eax
c0015659:	e8 6e 5f 00 00       	call   c001b5cc <Device::closeAll()>
c001565e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015664:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015668:	8b 10                	mov    edx,DWORD PTR [eax]
c001566a:	51                   	push   ecx
c001566b:	68 0f 27 00 00       	push   0x270f
c0015670:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015674:	53                   	push   ebx
c0015675:	50                   	push   eax
c0015676:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015679:	83 c4 14             	add    esp,0x14
c001567c:	68 c8 0f 03 c0       	push   0xc0030fc8
c0015681:	e8 d0 ab 00 00       	call   c0020256 <KePanic(char const*)>
c0015686:	83 c4 18             	add    esp,0x18
c0015689:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001568e:	5b                   	pop    ebx
c001568f:	c3                   	ret    

c0015690 <Krnl::firstTask()>:
c0015690:	53                   	push   ebx
c0015691:	83 ec 14             	sub    esp,0x14
c0015694:	fb                   	sti    
c0015695:	68 de 0f 03 c0       	push   0xc0030fde
c001569a:	e8 56 a4 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001569f:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00156a6:	e8 ec 0d 00 00       	call   c0016497 <malloc>
c00156ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00156b2:	89 c3                	mov    ebx,eax
c00156b4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00156b9:	50                   	push   eax
c00156ba:	68 f7 0f 03 c0       	push   0xc0030ff7
c00156bf:	6a 01                	push   0x1
c00156c1:	53                   	push   ebx
c00156c2:	e8 61 f7 00 00       	call   c0024e28 <Process::Process(bool, char const*, Process*, char**)>
c00156c7:	83 c4 20             	add    esp,0x20
c00156ca:	68 ff 00 00 00       	push   0xff
c00156cf:	6a 00                	push   0x0
c00156d1:	68 e3 5e 01 c0       	push   0xc0015ee3
c00156d6:	53                   	push   ebx
c00156d7:	e8 74 f9 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c00156dc:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00156e2:	6a 7a                	push   0x7a
c00156e4:	6a 00                	push   0x0
c00156e6:	68 08 59 02 c0       	push   0xc0025908
c00156eb:	52                   	push   edx
c00156ec:	e8 5f f9 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c00156f1:	83 c4 14             	add    esp,0x14
c00156f4:	68 f4 10 03 c0       	push   0xc00310f4
c00156f9:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00156fe:	e8 f2 a3 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015703:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c001570a:	e8 fe ac 00 00       	call   c002040d <KeInitRand()>
c001570f:	e8 8b 05 01 00       	call   c0025c9f <Vm::initialise8086()>
c0015714:	e8 97 4a 00 00       	call   c001a1b0 <Fs::initVFS()>
c0015719:	c7 04 24 04 10 03 c0 	mov    DWORD PTR [esp],0xc0031004
c0015720:	e8 d0 a3 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015725:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001572a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015730:	8b 10                	mov    edx,DWORD PTR [eax]
c0015732:	6a 00                	push   0x0
c0015734:	6a 00                	push   0x0
c0015736:	6a 00                	push   0x0
c0015738:	50                   	push   eax
c0015739:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001573c:	83 c4 14             	add    esp,0x14
c001573f:	68 f4 10 03 c0       	push   0xc00310f4
c0015744:	e8 ac a3 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015749:	e8 fc 41 00 00       	call   c001994a <KeInitialiseSymlinks()>
c001574e:	e8 4b a9 00 00       	call   c002009e <KeLoadSystemEnv()>
c0015753:	e8 c3 ab 00 00       	call   c002031b <KeSetupPowerManager()>
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	6a 3a                	push   0x3a
c001575d:	68 1e 10 03 c0       	push   0xc003101e
c0015762:	68 27 10 03 c0       	push   0xc0031027
c0015767:	e8 54 d8 00 00       	call   c0022fc0 <Reg::readIntWithDefault(char*, char*, int)>
c001576c:	89 04 24             	mov    DWORD PTR [esp],eax
c001576f:	e8 68 56 00 00       	call   c001addc <User::loadClockSettings(int)>
c0015774:	c7 04 24 18 11 03 c0 	mov    DWORD PTR [esp],0xc0031118
c001577b:	e8 75 a3 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015780:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015785:	59                   	pop    ecx
c0015786:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c001578c:	53                   	push   ebx
c001578d:	e8 ee 5c 00 00       	call   c001b480 <Device::loadDriversForAll()>
c0015792:	c7 04 24 2f 10 03 c0 	mov    DWORD PTR [esp],0xc003102f
c0015799:	e8 57 a3 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001579e:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00157a4:	58                   	pop    eax
c00157a5:	5a                   	pop    edx
c00157a6:	6a 01                	push   0x1
c00157a8:	68 40 10 03 c0       	push   0xc0031040
c00157ad:	e8 59 f0 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c00157b2:	59                   	pop    ecx
c00157b3:	5a                   	pop    edx
c00157b4:	53                   	push   ebx
c00157b5:	50                   	push   eax
c00157b6:	e8 b1 f2 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	83 ec 0c             	sub    esp,0xc
c00157c1:	6a 02                	push   0x2
c00157c3:	e8 90 fb 00 00       	call   c0025358 <blockTask(TaskState)>
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	eb f1                	jmp    c00157be <Krnl::firstTask()+0x12e>
c00157cd:	90                   	nop

c00157ce <Computer::Computer()>:
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157d5:	83 ec 08             	sub    esp,0x8
c00157d8:	68 5c 10 03 c0       	push   0xc003105c
c00157dd:	50                   	push   eax
c00157de:	e8 e3 5c 00 00       	call   c001b4c6 <Device::Device(char const*)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	ba 64 11 03 c0       	mov    edx,0xc0031164
c00157eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ef:	89 10                	mov    DWORD PTR [eax],edx
c00157f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00157ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015803:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c001580d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015811:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015817:	83 ca 04             	or     edx,0x4
c001581a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001582a:	0f b6 d0             	movzx  edx,al
c001582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015831:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001583c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015842:	0f b6 d0             	movzx  edx,al
c0015845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015849:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001584e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015852:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015858:	8d 50 01             	lea    edx,[eax+0x1]
c001585b:	88 d1                	mov    cl,dl
c001585d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015861:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015867:	0f b6 d0             	movzx  edx,al
c001586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001586e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015872:	83 e1 3f             	and    ecx,0x3f
c0015875:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015879:	90                   	nop
c001587a:	83 c4 0c             	add    esp,0xc
c001587d:	c3                   	ret    

c001587e <Computer::setBootMessage(char const*)>:
c001587e:	c3                   	ret    
c001587f:	90                   	nop

c0015880 <Computer::detectFeatures()>:
c0015880:	55                   	push   ebp
c0015881:	57                   	push   edi
c0015882:	56                   	push   esi
c0015883:	53                   	push   ebx
c0015884:	83 ec 1c             	sub    esp,0x1c
c0015887:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001588b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015891:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015897:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001589d:	e8 57 a9 fe ff       	call   c00001f9 <detectCPUID>
c00158a2:	31 d2                	xor    edx,edx
c00158a4:	85 c0                	test   eax,eax
c00158a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158ac:	0f 95 c2             	setne  dl
c00158af:	d1 e2                	shl    edx,1
c00158b1:	83 e0 fd             	and    eax,0xfffffffd
c00158b4:	09 d0                	or     eax,edx
c00158b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158bc:	a8 02                	test   al,0x2
c00158be:	75 51                	jne    c0015911 <Computer::detectFeatures()+0x91>
c00158c0:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00158c7:	74 0f                	je     c00158d8 <Computer::detectFeatures()+0x58>
c00158c9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158cf:	83 e0 fb             	and    eax,0xfffffffb
c00158d2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158d8:	e8 e9 8a 01 00       	call   c002e3c6 <x87Detect>
c00158dd:	83 e0 01             	and    eax,0x1
c00158e0:	c1 e0 04             	shl    eax,0x4
c00158e3:	89 c2                	mov    edx,eax
c00158e5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158eb:	83 e0 ef             	and    eax,0xffffffef
c00158ee:	09 d0                	or     eax,edx
c00158f0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f6:	a8 10                	test   al,0x10
c00158f8:	88 c2                	mov    dl,al
c00158fa:	0f 85 33 01 00 00    	jne    c0015a33 <Computer::detectFeatures()+0x1b3>
c0015900:	80 e2 80             	and    dl,0x80
c0015903:	0f 85 4c 01 00 00    	jne    c0015a55 <Computer::detectFeatures()+0x1d5>
c0015909:	83 c4 1c             	add    esp,0x1c
c001590c:	5b                   	pop    ebx
c001590d:	5e                   	pop    esi
c001590e:	5f                   	pop    edi
c001590f:	5d                   	pop    ebp
c0015910:	c3                   	ret    
c0015911:	83 ec 0c             	sub    esp,0xc
c0015914:	6a 20                	push   0x20
c0015916:	e8 13 96 00 00       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001591b:	83 e0 01             	and    eax,0x1
c001591e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015925:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001592b:	83 e0 f7             	and    eax,0xfffffff7
c001592e:	09 d0                	or     eax,edx
c0015930:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015936:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c001593d:	e8 ec 95 00 00       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c0015942:	89 c2                	mov    edx,eax
c0015944:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001594a:	83 e2 01             	and    edx,0x1
c001594d:	83 e0 fe             	and    eax,0xfffffffe
c0015950:	09 d0                	or     eax,edx
c0015952:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015958:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001595f:	e8 ca 95 00 00       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c0015964:	89 c2                	mov    edx,eax
c0015966:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001596c:	c1 e2 07             	shl    edx,0x7
c001596f:	83 e0 7f             	and    eax,0x7f
c0015972:	09 d0                	or     eax,edx
c0015974:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001597a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015981:	e8 a8 95 00 00       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	83 e0 01             	and    eax,0x1
c001598c:	c1 e0 05             	shl    eax,0x5
c001598f:	89 c2                	mov    edx,eax
c0015991:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015997:	83 e0 df             	and    eax,0xffffffdf
c001599a:	09 d0                	or     eax,edx
c001599c:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00159a6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ac:	0f 84 c9 00 00 00    	je     c0015a7b <Computer::detectFeatures()+0x1fb>
c00159b2:	83 e0 fe             	and    eax,0xfffffffe
c00159b5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159bb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159c1:	89 c2                	mov    edx,eax
c00159c3:	83 e2 09             	and    edx,0x9
c00159c6:	83 fa 01             	cmp    edx,0x1
c00159c9:	75 09                	jne    c00159d4 <Computer::detectFeatures()+0x154>
c00159cb:	83 e0 fe             	and    eax,0xfffffffe
c00159ce:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00159db:	50                   	push   eax
c00159dc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00159e0:	55                   	push   ebp
c00159e1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00159e5:	57                   	push   edi
c00159e6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00159ea:	56                   	push   esi
c00159eb:	68 00 00 00 80       	push   0x80000000
c00159f0:	e8 b5 94 00 00       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00159f5:	83 c4 20             	add    esp,0x20
c00159f8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00159ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015a03:	0f 86 b7 fe ff ff    	jbe    c00158c0 <Computer::detectFeatures()+0x40>
c0015a09:	83 ec 0c             	sub    esp,0xc
c0015a0c:	50                   	push   eax
c0015a0d:	55                   	push   ebp
c0015a0e:	57                   	push   edi
c0015a0f:	56                   	push   esi
c0015a10:	68 01 00 00 80       	push   0x80000001
c0015a15:	e8 90 94 00 00       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015a1a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015a20:	83 c4 20             	add    esp,0x20
c0015a23:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015a28:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015a2e:	e9 8d fe ff ff       	jmp    c00158c0 <Computer::detectFeatures()+0x40>
c0015a33:	e8 48 89 01 00       	call   c002e380 <sseDetect>
c0015a38:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015a3e:	83 e2 7f             	and    edx,0x7f
c0015a41:	c1 e0 07             	shl    eax,0x7
c0015a44:	09 c2                	or     edx,eax
c0015a46:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015a4c:	80 e2 80             	and    dl,0x80
c0015a4f:	0f 84 b4 fe ff ff    	je     c0015909 <Computer::detectFeatures()+0x89>
c0015a55:	e8 b6 85 01 00       	call   c002e010 <avxDetect>
c0015a5a:	83 e0 01             	and    eax,0x1
c0015a5d:	c1 e0 05             	shl    eax,0x5
c0015a60:	89 c2                	mov    edx,eax
c0015a62:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a68:	83 e0 df             	and    eax,0xffffffdf
c0015a6b:	09 d0                	or     eax,edx
c0015a6d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a73:	83 c4 1c             	add    esp,0x1c
c0015a76:	5b                   	pop    ebx
c0015a77:	5e                   	pop    esi
c0015a78:	5f                   	pop    edi
c0015a79:	5d                   	pop    ebp
c0015a7a:	c3                   	ret    
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	68 00 02 00 00       	push   0x200
c0015a83:	e8 a6 94 00 00       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	89 c2                	mov    edx,eax
c0015a8d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a93:	83 e2 01             	and    edx,0x1
c0015a96:	83 e0 fe             	and    eax,0xfffffffe
c0015a99:	09 d0                	or     eax,edx
c0015a9b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015aa1:	e9 15 ff ff ff       	jmp    c00159bb <Computer::detectFeatures()+0x13b>

c0015aa6 <Computer::displayFeatures()>:
c0015aa6:	c3                   	ret    
c0015aa7:	90                   	nop

c0015aa8 <Computer::rdmsr(unsigned int)>:
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aaf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015ab6:	74 0a                	je     c0015ac2 <Computer::rdmsr(unsigned int)+0x1a>
c0015ab8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015abc:	0f 32                	rdmsr  
c0015abe:	83 c4 0c             	add    esp,0xc
c0015ac1:	c3                   	ret    
c0015ac2:	83 ec 0c             	sub    esp,0xc
c0015ac5:	68 65 10 03 c0       	push   0xc0031065
c0015aca:	e8 87 a7 00 00       	call   c0020256 <KePanic(char const*)>
c0015acf:	83 c4 10             	add    esp,0x10
c0015ad2:	eb e4                	jmp    c0015ab8 <Computer::rdmsr(unsigned int)+0x10>

c0015ad4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015ad4:	57                   	push   edi
c0015ad5:	56                   	push   esi
c0015ad6:	83 ec 04             	sub    esp,0x4
c0015ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015add:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015ae1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015ae5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015aec:	74 10                	je     c0015afe <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015aee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015af2:	89 f0                	mov    eax,esi
c0015af4:	89 fa                	mov    edx,edi
c0015af6:	0f 30                	wrmsr  
c0015af8:	83 c4 04             	add    esp,0x4
c0015afb:	5e                   	pop    esi
c0015afc:	5f                   	pop    edi
c0015afd:	c3                   	ret    
c0015afe:	83 ec 0c             	sub    esp,0xc
c0015b01:	68 6b 10 03 c0       	push   0xc003106b
c0015b06:	e8 4b a7 00 00       	call   c0020256 <KePanic(char const*)>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	eb de                	jmp    c0015aee <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015b10 <Computer::shutdown()>:
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b17:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b19:	6a 00                	push   0x0
c0015b1b:	6a 00                	push   0x0
c0015b1d:	6a 00                	push   0x0
c0015b1f:	50                   	push   eax
c0015b20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b23:	83 c4 1c             	add    esp,0x1c
c0015b26:	c3                   	ret    
c0015b27:	90                   	nop

c0015b28 <Computer::restart()>:
c0015b28:	83 ec 0c             	sub    esp,0xc
c0015b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b31:	6a 00                	push   0x0
c0015b33:	6a 00                	push   0x0
c0015b35:	6a 01                	push   0x1
c0015b37:	50                   	push   eax
c0015b38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b3b:	83 c4 1c             	add    esp,0x1c
c0015b3e:	c3                   	ret    
c0015b3f:	90                   	nop

c0015b40 <Computer::sleep()>:
c0015b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b4e:	e9 ad 8e 00 00       	jmp    c001ea00 <ACPI::sleep()>
c0015b53:	90                   	nop

c0015b54 <Computer::nmiEnabled()>:
c0015b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <Computer::readCMOS(unsigned char)>:
c0015b60:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b64:	31 d2                	xor    edx,edx
c0015b66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b6a:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015b71:	75 02                	jne    c0015b75 <Computer::readCMOS(unsigned char)+0x15>
c0015b73:	b2 80                	mov    dl,0x80
c0015b75:	09 d0                	or     eax,edx
c0015b77:	e6 70                	out    0x70,al
c0015b79:	e4 71                	in     al,0x71
c0015b7b:	c3                   	ret    

c0015b7c <Computer::enableNMI(bool)>:
c0015b7c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b84:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015b8a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015b92:	eb cc                	jmp    c0015b60 <Computer::readCMOS(unsigned char)>

c0015b94 <Computer::open(int, int, void*)>:
c0015b94:	56                   	push   esi
c0015b95:	53                   	push   ebx
c0015b96:	83 ec 10             	sub    esp,0x10
c0015b99:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ba0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ba4:	68 71 10 03 c0       	push   0xc0031071
c0015ba9:	0f 94 05 40 3c 03 c0 	sete   BYTE PTR ds:0xc0033c40
c0015bb0:	e8 40 9f 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015bb5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015bbc:	e8 d6 08 00 00       	call   c0016497 <malloc>
c0015bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bc4:	89 c6                	mov    esi,eax
c0015bc6:	e8 a9 89 00 00       	call   c001e574 <ACPI::ACPI()>
c0015bcb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015bd1:	58                   	pop    eax
c0015bd2:	5a                   	pop    edx
c0015bd3:	56                   	push   esi
c0015bd4:	53                   	push   ebx
c0015bd5:	e8 8a 57 00 00       	call   c001b364 <Device::addChild(Device*)>
c0015bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bdd:	e8 9e fc ff ff       	call   c0015880 <Computer::detectFeatures()>
c0015be2:	59                   	pop    ecx
c0015be3:	5e                   	pop    esi
c0015be4:	6a 01                	push   0x1
c0015be6:	53                   	push   ebx
c0015be7:	e8 90 ff ff ff       	call   c0015b7c <Computer::enableNMI(bool)>
c0015bec:	c7 04 24 89 10 03 c0 	mov    DWORD PTR [esp],0xc0031089
c0015bf3:	e8 fd 9e 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015bf8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015bff:	e8 93 08 00 00       	call   c0016497 <malloc>
c0015c04:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c07:	89 c6                	mov    esi,eax
c0015c09:	e8 d8 93 00 00       	call   c001efe6 <CPU::CPU()>
c0015c0e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015c14:	58                   	pop    eax
c0015c15:	5a                   	pop    edx
c0015c16:	56                   	push   esi
c0015c17:	53                   	push   ebx
c0015c18:	e8 47 57 00 00       	call   c001b364 <Device::addChild(Device*)>
c0015c1d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c23:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015c27:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c29:	51                   	push   ecx
c0015c2a:	6a 00                	push   0x0
c0015c2c:	6a 00                	push   0x0
c0015c2e:	50                   	push   eax
c0015c2f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c32:	83 c4 14             	add    esp,0x14
c0015c35:	68 38 11 03 c0       	push   0xc0031138
c0015c3a:	e8 b6 9e 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015c3f:	e8 a2 12 01 00       	call   c0026ee6 <HalInitialiseCoprocessor()>
c0015c44:	c7 04 24 a3 10 03 c0 	mov    DWORD PTR [esp],0xc00310a3
c0015c4b:	e8 a5 9e 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c0015c50:	c7 04 24 90 56 01 c0 	mov    DWORD PTR [esp],0xc0015690
c0015c57:	e8 1c f5 00 00       	call   c0025178 <setupMultitasking(void (*)())>
c0015c5c:	83 c4 14             	add    esp,0x14
c0015c5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c64:	5b                   	pop    ebx
c0015c65:	5e                   	pop    esi
c0015c66:	c3                   	ret    
c0015c67:	90                   	nop

c0015c68 <Computer::disableNMI()>:
c0015c68:	6a 00                	push   0x0
c0015c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c6e:	50                   	push   eax
c0015c6f:	e8 08 ff ff ff       	call   c0015b7c <Computer::enableNMI(bool)>
c0015c74:	5a                   	pop    edx
c0015c75:	59                   	pop    ecx
c0015c76:	c3                   	ret    
c0015c77:	90                   	nop

c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015c78:	53                   	push   ebx
c0015c79:	b2 80                	mov    dl,0x80
c0015c7b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c87:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015c8e:	74 02                	je     c0015c92 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015c90:	31 d2                	xor    edx,edx
c0015c92:	09 d0                	or     eax,edx
c0015c94:	e6 70                	out    0x70,al
c0015c96:	88 c8                	mov    al,cl
c0015c98:	e6 71                	out    0x71,al
c0015c9a:	5b                   	pop    ebx
c0015c9b:	c3                   	ret    

c0015c9c <Computer::handleNMI()>:
c0015c9c:	56                   	push   esi
c0015c9d:	53                   	push   ebx
c0015c9e:	83 ec 10             	sub    esp,0x10
c0015ca1:	e4 92                	in     al,0x92
c0015ca3:	89 c6                	mov    esi,eax
c0015ca5:	e4 61                	in     al,0x61
c0015ca7:	68 be 10 03 c0       	push   0xc00310be
c0015cac:	88 c3                	mov    bl,al
c0015cae:	e8 1b 36 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0015cb3:	83 c4 10             	add    esp,0x10
c0015cb6:	83 e6 10             	and    esi,0x10
c0015cb9:	75 10                	jne    c0015ccb <Computer::handleNMI()+0x2f>
c0015cbb:	f6 c3 40             	test   bl,0x40
c0015cbe:	75 20                	jne    c0015ce0 <Computer::handleNMI()+0x44>
c0015cc0:	80 e3 80             	and    bl,0x80
c0015cc3:	75 30                	jne    c0015cf5 <Computer::handleNMI()+0x59>
c0015cc5:	83 c4 04             	add    esp,0x4
c0015cc8:	5b                   	pop    ebx
c0015cc9:	5e                   	pop    esi
c0015cca:	c3                   	ret    
c0015ccb:	83 ec 0c             	sub    esp,0xc
c0015cce:	68 cf 10 03 c0       	push   0xc00310cf
c0015cd3:	e8 7e a5 00 00       	call   c0020256 <KePanic(char const*)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	f6 c3 40             	test   bl,0x40
c0015cde:	74 e0                	je     c0015cc0 <Computer::handleNMI()+0x24>
c0015ce0:	83 ec 0c             	sub    esp,0xc
c0015ce3:	68 dc 10 03 c0       	push   0xc00310dc
c0015ce8:	e8 69 a5 00 00       	call   c0020256 <KePanic(char const*)>
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	80 e3 80             	and    bl,0x80
c0015cf3:	74 d0                	je     c0015cc5 <Computer::handleNMI()+0x29>
c0015cf5:	c7 44 24 10 e6 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc00310e6
c0015cfd:	83 c4 04             	add    esp,0x4
c0015d00:	5b                   	pop    ebx
c0015d01:	5e                   	pop    esi
c0015d02:	e9 4f a5 00 00       	jmp    c0020256 <KePanic(char const*)>
c0015d07:	90                   	nop

c0015d08 <GDTEntry::setBase(unsigned int)>:
c0015d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d10:	89 c1                	mov    ecx,eax
c0015d12:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015d16:	c1 e9 10             	shr    ecx,0x10
c0015d19:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015d1c:	c1 e8 18             	shr    eax,0x18
c0015d1f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015d22:	c3                   	ret    
c0015d23:	90                   	nop

c0015d24 <GDTEntry::setLimit(unsigned int)>:
c0015d24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d2c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015d2f:	66 89 01             	mov    WORD PTR [ecx],ax
c0015d32:	c1 e8 10             	shr    eax,0x10
c0015d35:	83 e0 0f             	and    eax,0xf
c0015d38:	83 e2 f0             	and    edx,0xfffffff0
c0015d3b:	09 d0                	or     eax,edx
c0015d3d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015d40:	c3                   	ret    
c0015d41:	90                   	nop

c0015d42 <GDT::GDT()>:
c0015d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d56:	90                   	nop
c0015d57:	c3                   	ret    

c0015d58 <GDT::addEntry(GDTEntry)>:
c0015d58:	53                   	push   ebx
c0015d59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d65:	8b 02                	mov    eax,DWORD PTR [edx]
c0015d67:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015d6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d6e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015d72:	c1 e0 03             	shl    eax,0x3
c0015d75:	89 0a                	mov    DWORD PTR [edx],ecx
c0015d77:	5b                   	pop    ebx
c0015d78:	c3                   	ret    
c0015d79:	90                   	nop

c0015d7a <GDT::getNumberOfEntries()>:
c0015d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d80:	c3                   	ret    
c0015d81:	90                   	nop

c0015d82 <GDT::flush()>:
c0015d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d86:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d88:	83 c0 04             	add    eax,0x4
c0015d8b:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015d90:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015d97:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015d9e:	e9 b7 a5 fe ff       	jmp    c000035a <loadGDT>
c0015da3:	90                   	nop

c0015da4 <GDT::setup()>:
c0015da4:	57                   	push   edi
c0015da5:	56                   	push   esi
c0015da6:	53                   	push   ebx
c0015da7:	83 ec 30             	sub    esp,0x30
c0015daa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015dae:	6a 00                	push   0x0
c0015db0:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015db4:	56                   	push   esi
c0015db5:	e8 4e ff ff ff       	call   c0015d08 <GDTEntry::setBase(unsigned int)>
c0015dba:	6a 00                	push   0x0
c0015dbc:	56                   	push   esi
c0015dbd:	e8 62 ff ff ff       	call   c0015d24 <GDTEntry::setLimit(unsigned int)>
c0015dc2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015dca:	6a 00                	push   0x0
c0015dcc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015dd0:	56                   	push   esi
c0015dd1:	e8 32 ff ff ff       	call   c0015d08 <GDTEntry::setBase(unsigned int)>
c0015dd6:	68 ff ff ff 00       	push   0xffffff
c0015ddb:	56                   	push   esi
c0015ddc:	e8 43 ff ff ff       	call   c0015d24 <GDTEntry::setLimit(unsigned int)>
c0015de1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015de5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015de9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015dee:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015df2:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015df7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015dfb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015dff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015e03:	89 f8                	mov    eax,edi
c0015e05:	89 fa                	mov    edx,edi
c0015e07:	80 e4 f7             	and    ah,0xf7
c0015e0a:	80 ce 60             	or     dh,0x60
c0015e0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015e11:	89 c7                	mov    edi,eax
c0015e13:	80 cc 60             	or     ah,0x60
c0015e16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015e1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e22:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015e26:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015e2a:	83 c4 20             	add    esp,0x20
c0015e2d:	6a 00                	push   0x0
c0015e2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e33:	50                   	push   eax
c0015e34:	e8 cf fe ff ff       	call   c0015d08 <GDTEntry::setBase(unsigned int)>
c0015e39:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015e3d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015e41:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015e45:	83 e0 3f             	and    eax,0x3f
c0015e48:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e4c:	6a 00                	push   0x0
c0015e4e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015e52:	50                   	push   eax
c0015e53:	e8 b0 fe ff ff       	call   c0015d08 <GDTEntry::setBase(unsigned int)>
c0015e58:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015e5c:	83 e0 3f             	and    eax,0x3f
c0015e5f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015e63:	83 c4 0c             	add    esp,0xc
c0015e66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6e:	53                   	push   ebx
c0015e6f:	e8 e4 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015e74:	83 c4 0c             	add    esp,0xc
c0015e77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e7f:	53                   	push   ebx
c0015e80:	e8 d3 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015e85:	83 c4 0c             	add    esp,0xc
c0015e88:	57                   	push   edi
c0015e89:	56                   	push   esi
c0015e8a:	53                   	push   ebx
c0015e8b:	e8 c8 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015e90:	83 c4 0c             	add    esp,0xc
c0015e93:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015e97:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015e9b:	53                   	push   ebx
c0015e9c:	e8 b7 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015ea1:	83 c4 0c             	add    esp,0xc
c0015ea4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ea8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015eac:	53                   	push   ebx
c0015ead:	e8 a6 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015eb2:	83 c4 0c             	add    esp,0xc
c0015eb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ebd:	53                   	push   ebx
c0015ebe:	e8 95 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015ec3:	83 c4 0c             	add    esp,0xc
c0015ec6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015eca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ece:	53                   	push   ebx
c0015ecf:	e8 84 fe ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0015ed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ed7:	e8 a6 fe ff ff       	call   c0015d82 <GDT::flush()>
c0015edc:	83 c4 40             	add    esp,0x40
c0015edf:	5b                   	pop    ebx
c0015ee0:	5e                   	pop    esi
c0015ee1:	5f                   	pop    edi
c0015ee2:	c3                   	ret    

c0015ee3 <idleFunction(void*)>:
c0015ee3:	83 ec 0c             	sub    esp,0xc
c0015ee6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015eeb:	48                   	dec    eax
c0015eec:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015ef1:	75 01                	jne    c0015ef4 <idleFunction(void*)+0x11>
c0015ef3:	fb                   	sti    
c0015ef4:	e8 b9 0c 01 00       	call   c0026bb2 <HalSystemIdle()>
c0015ef9:	e8 84 8a 01 00       	call   c002e982 <idleCommon()>
c0015efe:	eb f4                	jmp    c0015ef4 <idleFunction(void*)+0x11>

c0015f00 <IDTEntry::IDTEntry(bool)>:
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 04             	sub    esp,0x4
c0015f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f08:	88 04 24             	mov    BYTE PTR [esp],al
c0015f0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f0f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f19:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f21:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f24:	83 e2 f0             	and    edx,0xfffffff0
c0015f27:	83 ca 0e             	or     edx,0xe
c0015f2a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f31:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f34:	83 e2 ef             	and    edx,0xffffffef
c0015f37:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f3a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015f3e:	85 c0                	test   eax,eax
c0015f40:	74 06                	je     c0015f48 <IDTEntry::IDTEntry(bool)+0x48>
c0015f42:	b2 03                	mov    dl,0x3
c0015f44:	eb 06                	jmp    c0015f4c <IDTEntry::IDTEntry(bool)+0x4c>
c0015f46:	66 90                	xchg   ax,ax
c0015f48:	b2 00                	mov    dl,0x0
c0015f4a:	66 90                	xchg   ax,ax
c0015f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f50:	83 e2 03             	and    edx,0x3
c0015f53:	89 d3                	mov    ebx,edx
c0015f55:	c1 e3 05             	shl    ebx,0x5
c0015f58:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f5b:	83 e2 9f             	and    edx,0xffffff9f
c0015f5e:	88 d1                	mov    cl,dl
c0015f60:	88 da                	mov    dl,bl
c0015f62:	09 ca                	or     edx,ecx
c0015f64:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f6b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f6e:	83 ca 80             	or     edx,0xffffff80
c0015f71:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f74:	90                   	nop
c0015f75:	83 c4 04             	add    esp,0x4
c0015f78:	5b                   	pop    ebx
c0015f79:	c3                   	ret    

c0015f7a <IDTEntry::setOffset(unsigned int)>:
c0015f7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f82:	66 89 02             	mov    WORD PTR [edx],ax
c0015f85:	c1 e8 10             	shr    eax,0x10
c0015f88:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015f8c:	c3                   	ret    
c0015f8d:	90                   	nop
c0015f8e:	66 90                	xchg   ax,ax

c0015f90 <IDT::IDT()>:
c0015f90:	90                   	nop
c0015f91:	c3                   	ret    

c0015f92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f96:	83 c0 30             	add    eax,0x30
c0015f99:	c3                   	ret    

c0015f9a <IDT::addEntry(IDTEntry, int)>:
c0015f9a:	53                   	push   ebx
c0015f9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015fa3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fab:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015fae:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015fb2:	5b                   	pop    ebx
c0015fb3:	c3                   	ret    

c0015fb4 <IDT::addEntry(int, void (*)(), bool)>:
c0015fb4:	53                   	push   ebx
c0015fb5:	83 ec 10             	sub    esp,0x10
c0015fb8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015fbd:	50                   	push   eax
c0015fbe:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015fc2:	53                   	push   ebx
c0015fc3:	e8 38 ff ff ff       	call   c0015f00 <IDTEntry::IDTEntry(bool)>
c0015fc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015fcc:	53                   	push   ebx
c0015fcd:	e8 a8 ff ff ff       	call   c0015f7a <IDTEntry::setOffset(unsigned int)>
c0015fd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fde:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015fe2:	e8 b3 ff ff ff       	call   c0015f9a <IDT::addEntry(IDTEntry, int)>
c0015fe7:	83 c4 30             	add    esp,0x30
c0015fea:	5b                   	pop    ebx
c0015feb:	c3                   	ret    

c0015fec <IDT::flush()>:
c0015fec:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ff9:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015ffe:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0016005:	c3                   	ret    

c0016006 <IDT::setup()>:
c0016006:	57                   	push   edi
c0016007:	56                   	push   esi
c0016008:	53                   	push   ebx
c0016009:	83 ec 10             	sub    esp,0x10
c001600c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016010:	6a 00                	push   0x0
c0016012:	68 80 e0 02 c0       	push   0xc002e080
c0016017:	6a 00                	push   0x0
c0016019:	53                   	push   ebx
c001601a:	e8 95 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001601f:	6a 00                	push   0x0
c0016021:	68 90 e0 02 c0       	push   0xc002e090
c0016026:	6a 01                	push   0x1
c0016028:	53                   	push   ebx
c0016029:	e8 86 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001602e:	83 c4 20             	add    esp,0x20
c0016031:	6a 00                	push   0x0
c0016033:	68 9a e0 02 c0       	push   0xc002e09a
c0016038:	6a 02                	push   0x2
c001603a:	53                   	push   ebx
c001603b:	e8 74 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016040:	6a 00                	push   0x0
c0016042:	68 a4 e0 02 c0       	push   0xc002e0a4
c0016047:	6a 03                	push   0x3
c0016049:	53                   	push   ebx
c001604a:	e8 65 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001604f:	83 c4 20             	add    esp,0x20
c0016052:	6a 00                	push   0x0
c0016054:	68 ae e0 02 c0       	push   0xc002e0ae
c0016059:	6a 04                	push   0x4
c001605b:	53                   	push   ebx
c001605c:	e8 53 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016061:	6a 00                	push   0x0
c0016063:	68 b8 e0 02 c0       	push   0xc002e0b8
c0016068:	6a 05                	push   0x5
c001606a:	53                   	push   ebx
c001606b:	e8 44 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016070:	83 c4 20             	add    esp,0x20
c0016073:	6a 00                	push   0x0
c0016075:	68 c2 e0 02 c0       	push   0xc002e0c2
c001607a:	6a 06                	push   0x6
c001607c:	53                   	push   ebx
c001607d:	e8 32 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016082:	6a 00                	push   0x0
c0016084:	68 cc e0 02 c0       	push   0xc002e0cc
c0016089:	6a 07                	push   0x7
c001608b:	53                   	push   ebx
c001608c:	e8 23 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016091:	83 c4 20             	add    esp,0x20
c0016094:	6a 00                	push   0x0
c0016096:	68 d6 e0 02 c0       	push   0xc002e0d6
c001609b:	6a 08                	push   0x8
c001609d:	53                   	push   ebx
c001609e:	e8 11 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160a3:	6a 00                	push   0x0
c00160a5:	68 de e0 02 c0       	push   0xc002e0de
c00160aa:	6a 09                	push   0x9
c00160ac:	53                   	push   ebx
c00160ad:	e8 02 ff ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160b2:	83 c4 20             	add    esp,0x20
c00160b5:	6a 00                	push   0x0
c00160b7:	68 e8 e0 02 c0       	push   0xc002e0e8
c00160bc:	6a 0a                	push   0xa
c00160be:	53                   	push   ebx
c00160bf:	e8 f0 fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160c4:	6a 00                	push   0x0
c00160c6:	68 f0 e0 02 c0       	push   0xc002e0f0
c00160cb:	6a 0b                	push   0xb
c00160cd:	53                   	push   ebx
c00160ce:	e8 e1 fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160d3:	83 c4 20             	add    esp,0x20
c00160d6:	6a 00                	push   0x0
c00160d8:	68 f8 e0 02 c0       	push   0xc002e0f8
c00160dd:	6a 0c                	push   0xc
c00160df:	53                   	push   ebx
c00160e0:	e8 cf fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160e5:	6a 00                	push   0x0
c00160e7:	68 00 e1 02 c0       	push   0xc002e100
c00160ec:	6a 0d                	push   0xd
c00160ee:	53                   	push   ebx
c00160ef:	e8 c0 fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00160f4:	83 c4 20             	add    esp,0x20
c00160f7:	6a 00                	push   0x0
c00160f9:	68 1a e1 02 c0       	push   0xc002e11a
c00160fe:	6a 0e                	push   0xe
c0016100:	53                   	push   ebx
c0016101:	e8 ae fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016106:	6a 00                	push   0x0
c0016108:	68 22 e1 02 c0       	push   0xc002e122
c001610d:	6a 0f                	push   0xf
c001610f:	53                   	push   ebx
c0016110:	e8 9f fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016115:	83 c4 20             	add    esp,0x20
c0016118:	6a 00                	push   0x0
c001611a:	68 2c e1 02 c0       	push   0xc002e12c
c001611f:	6a 10                	push   0x10
c0016121:	53                   	push   ebx
c0016122:	e8 8d fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016127:	6a 00                	push   0x0
c0016129:	68 36 e1 02 c0       	push   0xc002e136
c001612e:	6a 11                	push   0x11
c0016130:	53                   	push   ebx
c0016131:	e8 7e fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016136:	83 c4 20             	add    esp,0x20
c0016139:	6a 00                	push   0x0
c001613b:	68 40 e1 02 c0       	push   0xc002e140
c0016140:	6a 12                	push   0x12
c0016142:	53                   	push   ebx
c0016143:	e8 6c fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016148:	6a 01                	push   0x1
c001614a:	68 da e1 02 c0       	push   0xc002e1da
c001614f:	6a 60                	push   0x60
c0016151:	53                   	push   ebx
c0016152:	e8 5d fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016157:	83 c4 20             	add    esp,0x20
c001615a:	6a 00                	push   0x0
c001615c:	68 e1 e1 02 c0       	push   0xc002e1e1
c0016161:	6a 20                	push   0x20
c0016163:	53                   	push   ebx
c0016164:	e8 4b fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016169:	6a 00                	push   0x0
c001616b:	68 cc e1 02 c0       	push   0xc002e1cc
c0016170:	6a 21                	push   0x21
c0016172:	53                   	push   ebx
c0016173:	e8 3c fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016178:	83 c4 20             	add    esp,0x20
c001617b:	6a 00                	push   0x0
c001617d:	68 d3 e1 02 c0       	push   0xc002e1d3
c0016182:	6a 22                	push   0x22
c0016184:	53                   	push   ebx
c0016185:	e8 2a fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001618a:	6a 00                	push   0x0
c001618c:	68 4a e1 02 c0       	push   0xc002e14a
c0016191:	6a 23                	push   0x23
c0016193:	53                   	push   ebx
c0016194:	e8 1b fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016199:	83 c4 20             	add    esp,0x20
c001619c:	6a 00                	push   0x0
c001619e:	68 54 e1 02 c0       	push   0xc002e154
c00161a3:	6a 24                	push   0x24
c00161a5:	53                   	push   ebx
c00161a6:	e8 09 fe ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161ab:	6a 00                	push   0x0
c00161ad:	68 5e e1 02 c0       	push   0xc002e15e
c00161b2:	6a 25                	push   0x25
c00161b4:	53                   	push   ebx
c00161b5:	e8 fa fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161ba:	83 c4 20             	add    esp,0x20
c00161bd:	6a 00                	push   0x0
c00161bf:	68 68 e1 02 c0       	push   0xc002e168
c00161c4:	6a 26                	push   0x26
c00161c6:	53                   	push   ebx
c00161c7:	e8 e8 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161cc:	6a 00                	push   0x0
c00161ce:	68 72 e1 02 c0       	push   0xc002e172
c00161d3:	6a 27                	push   0x27
c00161d5:	53                   	push   ebx
c00161d6:	e8 d9 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161db:	83 c4 20             	add    esp,0x20
c00161de:	6a 00                	push   0x0
c00161e0:	68 7c e1 02 c0       	push   0xc002e17c
c00161e5:	6a 28                	push   0x28
c00161e7:	53                   	push   ebx
c00161e8:	e8 c7 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161ed:	6a 00                	push   0x0
c00161ef:	68 86 e1 02 c0       	push   0xc002e186
c00161f4:	6a 29                	push   0x29
c00161f6:	53                   	push   ebx
c00161f7:	e8 b8 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00161fc:	83 c4 20             	add    esp,0x20
c00161ff:	6a 00                	push   0x0
c0016201:	68 90 e1 02 c0       	push   0xc002e190
c0016206:	6a 2a                	push   0x2a
c0016208:	53                   	push   ebx
c0016209:	e8 a6 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001620e:	6a 00                	push   0x0
c0016210:	68 9a e1 02 c0       	push   0xc002e19a
c0016215:	6a 2b                	push   0x2b
c0016217:	53                   	push   ebx
c0016218:	e8 97 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001621d:	83 c4 20             	add    esp,0x20
c0016220:	6a 00                	push   0x0
c0016222:	68 a4 e1 02 c0       	push   0xc002e1a4
c0016227:	6a 2c                	push   0x2c
c0016229:	53                   	push   ebx
c001622a:	e8 85 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001622f:	6a 00                	push   0x0
c0016231:	68 ae e1 02 c0       	push   0xc002e1ae
c0016236:	6a 2d                	push   0x2d
c0016238:	53                   	push   ebx
c0016239:	e8 76 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001623e:	83 c4 20             	add    esp,0x20
c0016241:	6a 00                	push   0x0
c0016243:	68 b8 e1 02 c0       	push   0xc002e1b8
c0016248:	6a 2e                	push   0x2e
c001624a:	53                   	push   ebx
c001624b:	e8 64 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016250:	6a 00                	push   0x0
c0016252:	68 c2 e1 02 c0       	push   0xc002e1c2
c0016257:	6a 2f                	push   0x2f
c0016259:	53                   	push   ebx
c001625a:	e8 55 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c001625f:	83 c4 20             	add    esp,0x20
c0016262:	6a 00                	push   0x0
c0016264:	68 1c e3 02 c0       	push   0xc002e31c
c0016269:	6a 30                	push   0x30
c001626b:	53                   	push   ebx
c001626c:	e8 43 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016271:	6a 00                	push   0x0
c0016273:	68 26 e3 02 c0       	push   0xc002e326
c0016278:	6a 31                	push   0x31
c001627a:	53                   	push   ebx
c001627b:	e8 34 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016280:	83 c4 20             	add    esp,0x20
c0016283:	6a 00                	push   0x0
c0016285:	68 30 e3 02 c0       	push   0xc002e330
c001628a:	6a 32                	push   0x32
c001628c:	53                   	push   ebx
c001628d:	e8 22 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c0016292:	6a 00                	push   0x0
c0016294:	68 3a e3 02 c0       	push   0xc002e33a
c0016299:	6a 33                	push   0x33
c001629b:	53                   	push   ebx
c001629c:	e8 13 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00162a1:	83 c4 20             	add    esp,0x20
c00162a4:	6a 00                	push   0x0
c00162a6:	68 44 e3 02 c0       	push   0xc002e344
c00162ab:	6a 34                	push   0x34
c00162ad:	53                   	push   ebx
c00162ae:	e8 01 fd ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00162b3:	6a 00                	push   0x0
c00162b5:	68 4e e3 02 c0       	push   0xc002e34e
c00162ba:	6a 35                	push   0x35
c00162bc:	53                   	push   ebx
c00162bd:	e8 f2 fc ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00162c2:	83 c4 20             	add    esp,0x20
c00162c5:	6a 00                	push   0x0
c00162c7:	68 58 e3 02 c0       	push   0xc002e358
c00162cc:	6a 36                	push   0x36
c00162ce:	53                   	push   ebx
c00162cf:	e8 e0 fc ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00162d4:	6a 00                	push   0x0
c00162d6:	68 62 e3 02 c0       	push   0xc002e362
c00162db:	6a 37                	push   0x37
c00162dd:	53                   	push   ebx
c00162de:	e8 d1 fc ff ff       	call   c0015fb4 <IDT::addEntry(int, void (*)(), bool)>
c00162e3:	83 c4 1c             	add    esp,0x1c
c00162e6:	6a 03                	push   0x3
c00162e8:	6a 02                	push   0x2
c00162ea:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162f0:	e8 d5 24 00 00       	call   c00187ca <VAS::allocatePages(int, int)>
c00162f5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00162fc:	89 c6                	mov    esi,eax
c00162fe:	e8 94 01 00 00       	call   c0016497 <malloc>
c0016303:	81 c6 00 20 00 00    	add    esi,0x2000
c0016309:	89 04 24             	mov    DWORD PTR [esp],eax
c001630c:	89 c7                	mov    edi,eax
c001630e:	e8 dd 15 00 00       	call   c00178f0 <TSS::TSS()>
c0016313:	83 c4 0c             	add    esp,0xc
c0016316:	68 d6 e0 02 c0       	push   0xc002e0d6
c001631b:	56                   	push   esi
c001631c:	57                   	push   edi
c001631d:	e8 12 16 00 00       	call   c0017934 <TSS::setup(unsigned long, unsigned long)>
c0016322:	89 c6                	mov    esi,eax
c0016324:	58                   	pop    eax
c0016325:	5a                   	pop    edx
c0016326:	6a 00                	push   0x0
c0016328:	8d 44 24 14          	lea    eax,[esp+0x14]
c001632c:	50                   	push   eax
c001632d:	e8 ce fb ff ff       	call   c0015f00 <IDTEntry::IDTEntry(bool)>
c0016332:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016336:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001633b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016346:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c001634c:	80 ce 05             	or     dh,0x5
c001634f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016353:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0016356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001635a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001635d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016360:	e8 87 fc ff ff       	call   c0015fec <IDT::flush()>
c0016365:	83 c4 20             	add    esp,0x20
c0016368:	5b                   	pop    ebx
c0016369:	5e                   	pop    esi
c001636a:	5f                   	pop    edi
c001636b:	c3                   	ret    

c001636c <sbrk>:
c001636c:	55                   	push   ebp
c001636d:	57                   	push   edi
c001636e:	56                   	push   esi
c001636f:	53                   	push   ebx
c0016370:	83 ec 1c             	sub    esp,0x1c
c0016373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016377:	85 c0                	test   eax,eax
c0016379:	74 66                	je     c00163e1 <sbrk+0x75>
c001637b:	78 6b                	js     c00163e8 <sbrk+0x7c>
c001637d:	8b 15 24 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c24
c0016383:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016387:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c001638d:	05 ff 0f 00 00       	add    eax,0xfff
c0016392:	0f 49 e8             	cmovns ebp,eax
c0016395:	c1 fd 0c             	sar    ebp,0xc
c0016398:	bb 00 00 00 00       	mov    ebx,0x0
c001639d:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00163a3:	8b 3d 24 3c 03 c0    	mov    edi,DWORD PTR ds:0xc0033c24
c00163a9:	e8 f8 03 00 00       	call   c00167a6 <Phys::allocatePage()>
c00163ae:	68 01 04 00 00       	push   0x401
c00163b3:	57                   	push   edi
c00163b4:	50                   	push   eax
c00163b5:	56                   	push   esi
c00163b6:	e8 07 23 00 00       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00163bb:	81 05 24 3c 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033c24,0x1000
c00163c5:	83 c3 01             	add    ebx,0x1
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	39 dd                	cmp    ebp,ebx
c00163cd:	75 ce                	jne    c001639d <sbrk+0x31>
c00163cf:	0f 20 d8             	mov    eax,cr3
c00163d2:	0f 22 d8             	mov    cr3,eax
c00163d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163d9:	83 c4 1c             	add    esp,0x1c
c00163dc:	5b                   	pop    ebx
c00163dd:	5e                   	pop    esi
c00163de:	5f                   	pop    edi
c00163df:	5d                   	pop    ebp
c00163e0:	c3                   	ret    
c00163e1:	a1 24 3c 03 c0       	mov    eax,ds:0xc0033c24
c00163e6:	eb f1                	jmp    c00163d9 <sbrk+0x6d>
c00163e8:	83 ec 08             	sub    esp,0x8
c00163eb:	50                   	push   eax
c00163ec:	68 88 11 03 c0       	push   0xc0031188
c00163f1:	e8 d8 2e 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00163f6:	83 c4 10             	add    esp,0x10
c00163f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163fe:	eb d9                	jmp    c00163d9 <sbrk+0x6d>

c0016400 <mmap>:
c0016400:	83 ec 18             	sub    esp,0x18
c0016403:	68 b8 11 03 c0       	push   0xc00311b8
c0016408:	e8 49 9e 00 00       	call   c0020256 <KePanic(char const*)>
c001640d:	b8 00 00 00 00       	mov    eax,0x0
c0016412:	83 c4 1c             	add    esp,0x1c
c0016415:	c3                   	ret    

c0016416 <munmap>:
c0016416:	83 ec 18             	sub    esp,0x18
c0016419:	68 bd 11 03 c0       	push   0xc00311bd
c001641e:	e8 33 9e 00 00       	call   c0020256 <KePanic(char const*)>
c0016423:	b8 00 00 00 00       	mov    eax,0x0
c0016428:	83 c4 1c             	add    esp,0x1c
c001642b:	c3                   	ret    

c001642c <liballoc_lock()>:
c001642c:	fa                   	cli    
c001642d:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016434:	b8 00 00 00 00       	mov    eax,0x0
c0016439:	c3                   	ret    

c001643a <liballoc_unlock()>:
c001643a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001643f:	83 e8 01             	sub    eax,0x1
c0016442:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016447:	75 01                	jne    c001644a <liballoc_unlock()+0x10>
c0016449:	fb                   	sti    
c001644a:	b8 00 00 00 00       	mov    eax,0x0
c001644f:	c3                   	ret    

c0016450 <liballoc_alloc(int)>:
c0016450:	83 ec 10             	sub    esp,0x10
c0016453:	6a 01                	push   0x1
c0016455:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016459:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001645f:	e8 66 23 00 00       	call   c00187ca <VAS::allocatePages(int, int)>
c0016464:	83 c4 1c             	add    esp,0x1c
c0016467:	c3                   	ret    

c0016468 <liballoc_free(void*, int)>:
c0016468:	83 ec 14             	sub    esp,0x14
c001646b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001646f:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016475:	e8 90 1f 00 00       	call   c001840a <VAS::freeAllocatedPages(unsigned long)>
c001647a:	b8 00 00 00 00       	mov    eax,0x0
c001647f:	83 c4 1c             	add    esp,0x1c
c0016482:	c3                   	ret    

c0016483 <realloc>:
c0016483:	83 ec 14             	sub    esp,0x14
c0016486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648e:	e8 45 b3 fe ff       	call   c00017d8 <dlrealloc>
c0016493:	83 c4 1c             	add    esp,0x1c
c0016496:	c3                   	ret    

c0016497 <malloc>:
c0016497:	83 ec 18             	sub    esp,0x18
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	e8 f8 ad fe ff       	call   c000129b <dlmalloc>
c00164a3:	83 c4 1c             	add    esp,0x1c
c00164a6:	c3                   	ret    

c00164a7 <free>:
c00164a7:	83 ec 18             	sub    esp,0x18
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 8a aa fe ff       	call   c0000f3d <dlfree>
c00164b3:	83 c4 1c             	add    esp,0x1c
c00164b6:	c3                   	ret    

c00164b7 <rfree>:
c00164b7:	83 ec 18             	sub    esp,0x18
c00164ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164be:	e8 7a aa fe ff       	call   c0000f3d <dlfree>
c00164c3:	83 c4 1c             	add    esp,0x1c
c00164c6:	c3                   	ret    

c00164c7 <calloc>:
c00164c7:	56                   	push   esi
c00164c8:	53                   	push   ebx
c00164c9:	83 ec 10             	sub    esp,0x10
c00164cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00164d5:	53                   	push   ebx
c00164d6:	e8 bc ff ff ff       	call   c0016497 <malloc>
c00164db:	89 c6                	mov    esi,eax
c00164dd:	83 c4 0c             	add    esp,0xc
c00164e0:	53                   	push   ebx
c00164e1:	6a 00                	push   0x0
c00164e3:	50                   	push   eax
c00164e4:	e8 07 a0 fe ff       	call   c00004f0 <memset>
c00164e9:	89 f0                	mov    eax,esi
c00164eb:	83 c4 14             	add    esp,0x14
c00164ee:	5b                   	pop    ebx
c00164ef:	5e                   	pop    esi
c00164f0:	c3                   	ret    

c00164f1 <KeEntryPoint>:
c00164f1:	57                   	push   edi
c00164f2:	bf f9 03 00 00       	mov    edi,0x3f9
c00164f7:	56                   	push   esi
c00164f8:	31 f6                	xor    esi,esi
c00164fa:	53                   	push   ebx
c00164fb:	89 fa                	mov    edx,edi
c00164fd:	83 ec 2c             	sub    esp,0x2c
c0016500:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016505:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c001650a:	89 f0                	mov    eax,esi
c001650c:	ee                   	out    dx,al
c001650d:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016512:	b0 80                	mov    al,0x80
c0016514:	89 da                	mov    edx,ebx
c0016516:	ee                   	out    dx,al
c0016517:	b1 03                	mov    cl,0x3
c0016519:	ba f8 03 00 00       	mov    edx,0x3f8
c001651e:	88 c8                	mov    al,cl
c0016520:	ee                   	out    dx,al
c0016521:	89 f0                	mov    eax,esi
c0016523:	89 fa                	mov    edx,edi
c0016525:	ee                   	out    dx,al
c0016526:	88 c8                	mov    al,cl
c0016528:	89 da                	mov    edx,ebx
c001652a:	ee                   	out    dx,al
c001652b:	b0 c7                	mov    al,0xc7
c001652d:	ba fa 03 00 00       	mov    edx,0x3fa
c0016532:	ee                   	out    dx,al
c0016533:	b0 0b                	mov    al,0xb
c0016535:	ba fc 03 00 00       	mov    edx,0x3fc
c001653a:	ee                   	out    dx,al
c001653b:	68 c4 11 03 c0       	push   0xc00311c4
c0016540:	e8 89 2d 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0016545:	e8 2f 95 00 00       	call   c001fa79 <KeDisplaySplashScreen()>
c001654a:	a1 24 05 00 00       	mov    eax,ds:0x524
c001654f:	05 ff 0f 00 00       	add    eax,0xfff
c0016554:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016559:	89 04 24             	mov    DWORD PTR [esp],eax
c001655c:	e8 b3 03 00 00       	call   c0016914 <Phys::physicalMemorySetup(unsigned int)>
c0016561:	e8 27 1c 00 00       	call   c001818d <Virt::virtualMemorySetup()>
c0016566:	e8 58 94 00 00       	call   c001f9c3 <KeInitialiseAtexit()>
c001656b:	58                   	pop    eax
c001656c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016570:	53                   	push   ebx
c0016571:	e8 14 1f 00 00       	call   c001848a <VAS::VAS()>
c0016576:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c001657c:	e8 99 83 01 00       	call   c002e91a <_init>
c0016581:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0016588:	e8 0a ff ff ff       	call   c0016497 <malloc>
c001658d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016590:	89 c6                	mov    esi,eax
c0016592:	e8 37 f2 ff ff       	call   c00157ce <Computer::Computer()>
c0016597:	53                   	push   ebx
c0016598:	6a 00                	push   0x0
c001659a:	6a 00                	push   0x0
c001659c:	56                   	push   esi
c001659d:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00165a3:	e8 ec f5 ff ff       	call   c0015b94 <Computer::open(int, int, void*)>
c00165a8:	83 c4 14             	add    esp,0x14
c00165ab:	53                   	push   ebx
c00165ac:	e8 a3 1f 00 00       	call   c0018554 <VAS::~VAS()>
c00165b1:	83 c4 30             	add    esp,0x30
c00165b4:	5b                   	pop    ebx
c00165b5:	5e                   	pop    esi
c00165b6:	5f                   	pop    edi
c00165b7:	c3                   	ret    

c00165b8 <Phys::allocateDMA(unsigned long)>:
c00165b8:	55                   	push   ebp
c00165b9:	31 ed                	xor    ebp,ebp
c00165bb:	57                   	push   edi
c00165bc:	56                   	push   esi
c00165bd:	31 f6                	xor    esi,esi
c00165bf:	53                   	push   ebx
c00165c0:	31 db                	xor    ebx,ebx
c00165c2:	83 ec 1c             	sub    esp,0x1c
c00165c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c9:	05 ff 0f 00 00       	add    eax,0xfff
c00165ce:	c1 e8 0c             	shr    eax,0xc
c00165d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165d5:	31 c0                	xor    eax,eax
c00165d7:	eb 1b                	jmp    c00165f4 <Phys::allocateDMA(unsigned long)+0x3c>
c00165d9:	8d 78 01             	lea    edi,[eax+0x1]
c00165dc:	85 c0                	test   eax,eax
c00165de:	0f 44 eb             	cmove  ebp,ebx
c00165e1:	0f 44 f3             	cmove  esi,ebx
c00165e4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00165e8:	74 37                	je     c0016621 <Phys::allocateDMA(unsigned long)+0x69>
c00165ea:	89 f8                	mov    eax,edi
c00165ec:	83 c3 01             	add    ebx,0x1
c00165ef:	83 fb 0f             	cmp    ebx,0xf
c00165f2:	7f 13                	jg     c0016607 <Phys::allocateDMA(unsigned long)+0x4f>
c00165f4:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c00165fb:	74 dc                	je     c00165d9 <Phys::allocateDMA(unsigned long)+0x21>
c00165fd:	31 c0                	xor    eax,eax
c00165ff:	83 c3 01             	add    ebx,0x1
c0016602:	83 fb 0f             	cmp    ebx,0xf
c0016605:	7e ed                	jle    c00165f4 <Phys::allocateDMA(unsigned long)+0x3c>
c0016607:	83 ec 0c             	sub    esp,0xc
c001660a:	68 dc 11 03 c0       	push   0xc00311dc
c001660f:	e8 42 9c 00 00       	call   c0020256 <KePanic(char const*)>
c0016614:	83 c4 10             	add    esp,0x10
c0016617:	31 c0                	xor    eax,eax
c0016619:	83 c4 1c             	add    esp,0x1c
c001661c:	5b                   	pop    ebx
c001661d:	5e                   	pop    esi
c001661e:	5f                   	pop    edi
c001661f:	5d                   	pop    ebp
c0016620:	c3                   	ret    
c0016621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016625:	89 f2                	mov    edx,esi
c0016627:	c1 fa 04             	sar    edx,0x4
c001662a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001662e:	01 f1                	add    ecx,esi
c0016630:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016633:	83 e9 01             	sub    ecx,0x1
c0016636:	0f 48 ca             	cmovs  ecx,edx
c0016639:	c1 f9 04             	sar    ecx,0x4
c001663c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016640:	74 06                	je     c0016648 <Phys::allocateDMA(unsigned long)+0x90>
c0016642:	89 eb                	mov    ebx,ebp
c0016644:	31 c0                	xor    eax,eax
c0016646:	eb b7                	jmp    c00165ff <Phys::allocateDMA(unsigned long)+0x47>
c0016648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001664c:	85 d2                	test   edx,edx
c001664e:	74 17                	je     c0016667 <Phys::allocateDMA(unsigned long)+0xaf>
c0016650:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c0016656:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c001665d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016660:	83 c2 01             	add    edx,0x1
c0016663:	39 d0                	cmp    eax,edx
c0016665:	75 f6                	jne    c001665d <Phys::allocateDMA(unsigned long)+0xa5>
c0016667:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c001666d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016671:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016675:	01 c2                	add    edx,eax
c0016677:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001667d:	85 c9                	test   ecx,ecx
c001667f:	74 17                	je     c0016698 <Phys::allocateDMA(unsigned long)+0xe0>
c0016681:	83 ec 0c             	sub    esp,0xc
c0016684:	68 dc 11 03 c0       	push   0xc00311dc
c0016689:	e8 c8 9b 00 00       	call   c0020256 <KePanic(char const*)>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	89 f8                	mov    eax,edi
c0016693:	e9 54 ff ff ff       	jmp    c00165ec <Phys::allocateDMA(unsigned long)+0x34>
c0016698:	c1 e6 0c             	shl    esi,0xc
c001669b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00166a1:	e9 73 ff ff ff       	jmp    c0016619 <Phys::allocateDMA(unsigned long)+0x61>

c00166a6 <Phys::freeDMA(unsigned long, unsigned long)>:
c00166a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166aa:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00166b0:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00166b5:	c1 ea 0c             	shr    edx,0xc
c00166b8:	29 d0                	sub    eax,edx
c00166ba:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00166bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166c3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00166c8:	c1 e8 0c             	shr    eax,0xc
c00166cb:	85 d2                	test   edx,edx
c00166cd:	74 11                	je     c00166e0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00166cf:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00166d4:	01 c2                	add    edx,eax
c00166d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00166d9:	83 c0 01             	add    eax,0x1
c00166dc:	39 d0                	cmp    eax,edx
c00166de:	75 f6                	jne    c00166d6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00166e0:	c3                   	ret    

c00166e1 <Phys::setPageState(unsigned long, bool)>:
c00166e1:	57                   	push   edi
c00166e2:	56                   	push   esi
c00166e3:	8b 35 28 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c28
c00166e9:	53                   	push   ebx
c00166ea:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00166ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166f7:	89 ca                	mov    edx,ecx
c00166f9:	83 e1 07             	and    ecx,0x7
c00166fc:	c1 ea 03             	shr    edx,0x3
c00166ff:	0f b6 c0             	movzx  eax,al
c0016702:	d3 c3                	rol    ebx,cl
c0016704:	01 d6                	add    esi,edx
c0016706:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016709:	d3 e0                	shl    eax,cl
c001670b:	21 fb                	and    ebx,edi
c001670d:	88 1e                	mov    BYTE PTR [esi],bl
c001670f:	8b 1d 28 3c 03 c0    	mov    ebx,DWORD PTR ds:0xc0033c28
c0016715:	01 da                	add    edx,ebx
c0016717:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016719:	09 c8                	or     eax,ecx
c001671b:	88 02                	mov    BYTE PTR [edx],al
c001671d:	5b                   	pop    ebx
c001671e:	5e                   	pop    esi
c001671f:	5f                   	pop    edi
c0016720:	c3                   	ret    

c0016721 <Phys::getPageState(unsigned long)>:
c0016721:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016725:	8b 15 28 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c28
c001672b:	89 c8                	mov    eax,ecx
c001672d:	83 e1 07             	and    ecx,0x7
c0016730:	c1 e8 03             	shr    eax,0x3
c0016733:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016737:	d3 f8                	sar    eax,cl
c0016739:	83 e0 01             	and    eax,0x1
c001673c:	c3                   	ret    

c001673d <Phys::freePage(unsigned long)>:
c001673d:	53                   	push   ebx
c001673e:	83 ec 08             	sub    esp,0x8
c0016741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016745:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001674b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016751:	76 41                	jbe    c0016794 <Phys::freePage(unsigned long)+0x57>
c0016753:	c1 e8 0c             	shr    eax,0xc
c0016756:	50                   	push   eax
c0016757:	89 c3                	mov    ebx,eax
c0016759:	e8 c3 ff ff ff       	call   c0016721 <Phys::getPageState(unsigned long)>
c001675e:	5a                   	pop    edx
c001675f:	84 c0                	test   al,al
c0016761:	74 20                	je     c0016783 <Phys::freePage(unsigned long)+0x46>
c0016763:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	6a 00                	push   0x0
c001676d:	53                   	push   ebx
c001676e:	83 e8 01             	sub    eax,0x1
c0016771:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016776:	e8 66 ff ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	83 c4 08             	add    esp,0x8
c0016781:	5b                   	pop    ebx
c0016782:	c3                   	ret    
c0016783:	c7 44 24 10 81 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031281
c001678b:	83 c4 08             	add    esp,0x8
c001678e:	5b                   	pop    ebx
c001678f:	e9 c2 9a 00 00       	jmp    c0020256 <KePanic(char const*)>
c0016794:	68 00 10 00 00       	push   0x1000
c0016799:	50                   	push   eax
c001679a:	e8 07 ff ff ff       	call   c00166a6 <Phys::freeDMA(unsigned long, unsigned long)>
c001679f:	59                   	pop    ecx
c00167a0:	5b                   	pop    ebx
c00167a1:	83 c4 08             	add    esp,0x8
c00167a4:	5b                   	pop    ebx
c00167a5:	c3                   	ret    

c00167a6 <Phys::allocatePage()>:
c00167a6:	56                   	push   esi
c00167a7:	53                   	push   ebx
c00167a8:	83 ec 14             	sub    esp,0x14
c00167ab:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00167b1:	89 f3                	mov    ebx,esi
c00167b3:	eb 0a                	jmp    c00167bf <Phys::allocatePage()+0x19>
c00167b5:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00167bb:	39 de                	cmp    esi,ebx
c00167bd:	74 26                	je     c00167e5 <Phys::allocatePage()+0x3f>
c00167bf:	53                   	push   ebx
c00167c0:	e8 5c ff ff ff       	call   c0016721 <Phys::getPageState(unsigned long)>
c00167c5:	5a                   	pop    edx
c00167c6:	84 c0                	test   al,al
c00167c8:	74 67                	je     c0016831 <Phys::allocatePage()+0x8b>
c00167ca:	83 c3 01             	add    ebx,0x1
c00167cd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00167d3:	75 e0                	jne    c00167b5 <Phys::allocatePage()+0xf>
c00167d5:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00167df:	31 db                	xor    ebx,ebx
c00167e1:	39 de                	cmp    esi,ebx
c00167e3:	75 da                	jne    c00167bf <Phys::allocatePage()+0x19>
c00167e5:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	83 f0 01             	xor    eax,0x1
c00167f0:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c00167f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167fd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016803:	50                   	push   eax
c0016804:	e8 79 27 00 00       	call   c0018f82 <VAS::scanForEviction()>
c0016809:	83 c4 10             	add    esp,0x10
c001680c:	85 c0                	test   eax,eax
c001680e:	75 48                	jne    c0016858 <Phys::allocatePage()+0xb2>
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	68 04 12 03 c0       	push   0xc0031204
c0016818:	e8 39 9a 00 00       	call   c0020256 <KePanic(char const*)>
c001681d:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	53                   	push   ebx
c0016827:	e8 f5 fe ff ff       	call   c0016721 <Phys::getPageState(unsigned long)>
c001682c:	5a                   	pop    edx
c001682d:	84 c0                	test   al,al
c001682f:	75 99                	jne    c00167ca <Phys::allocatePage()+0x24>
c0016831:	6a 01                	push   0x1
c0016833:	53                   	push   ebx
c0016834:	e8 a8 fe ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016839:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c001683f:	59                   	pop    ecx
c0016840:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016845:	5b                   	pop    ebx
c0016846:	83 c2 01             	add    edx,0x1
c0016849:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001684f:	c1 e0 0c             	shl    eax,0xc
c0016852:	83 c4 14             	add    esp,0x14
c0016855:	5b                   	pop    ebx
c0016856:	5e                   	pop    esi
c0016857:	c3                   	ret    
c0016858:	83 ec 08             	sub    esp,0x8
c001685b:	89 c2                	mov    edx,eax
c001685d:	6a 01                	push   0x1
c001685f:	c1 ea 0c             	shr    edx,0xc
c0016862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016866:	52                   	push   edx
c0016867:	e8 75 fe ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c001686c:	83 c4 10             	add    esp,0x10
c001686f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016873:	eb dd                	jmp    c0016852 <Phys::allocatePage()+0xac>

c0016875 <Phys::allocateContiguousPages(int)>:
c0016875:	57                   	push   edi
c0016876:	56                   	push   esi
c0016877:	53                   	push   ebx
c0016878:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001687c:	fa                   	cli    
c001687d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016882:	31 db                	xor    ebx,ebx
c0016884:	83 c0 01             	add    eax,0x1
c0016887:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001688c:	85 db                	test   ebx,ebx
c001688e:	75 11                	jne    c00168a1 <Phys::allocateContiguousPages(int)+0x2c>
c0016890:	e8 11 ff ff ff       	call   c00167a6 <Phys::allocatePage()>
c0016895:	83 fe 01             	cmp    esi,0x1
c0016898:	89 c7                	mov    edi,eax
c001689a:	74 21                	je     c00168bd <Phys::allocateContiguousPages(int)+0x48>
c001689c:	bb 01 00 00 00       	mov    ebx,0x1
c00168a1:	e8 00 ff ff ff       	call   c00167a6 <Phys::allocatePage()>
c00168a6:	89 da                	mov    edx,ebx
c00168a8:	c1 e2 0c             	shl    edx,0xc
c00168ab:	01 fa                	add    edx,edi
c00168ad:	39 c2                	cmp    edx,eax
c00168af:	74 22                	je     c00168d3 <Phys::allocateContiguousPages(int)+0x5e>
c00168b1:	83 fe 01             	cmp    esi,0x1
c00168b4:	bb 01 00 00 00       	mov    ebx,0x1
c00168b9:	89 c7                	mov    edi,eax
c00168bb:	75 e4                	jne    c00168a1 <Phys::allocateContiguousPages(int)+0x2c>
c00168bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00168c2:	83 e8 01             	sub    eax,0x1
c00168c5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00168ca:	75 01                	jne    c00168cd <Phys::allocateContiguousPages(int)+0x58>
c00168cc:	fb                   	sti    
c00168cd:	5b                   	pop    ebx
c00168ce:	89 f8                	mov    eax,edi
c00168d0:	5e                   	pop    esi
c00168d1:	5f                   	pop    edi
c00168d2:	c3                   	ret    
c00168d3:	83 c3 01             	add    ebx,0x1
c00168d6:	39 f3                	cmp    ebx,esi
c00168d8:	75 b2                	jne    c001688c <Phys::allocateContiguousPages(int)+0x17>
c00168da:	eb e1                	jmp    c00168bd <Phys::allocateContiguousPages(int)+0x48>

c00168dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00168dc:	56                   	push   esi
c00168dd:	53                   	push   ebx
c00168de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168e2:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c00168e8:	73 06                	jae    c00168f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00168ea:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c00168f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168f4:	c1 eb 0c             	shr    ebx,0xc
c00168f7:	c1 e8 0c             	shr    eax,0xc
c00168fa:	39 d8                	cmp    eax,ebx
c00168fc:	73 13                	jae    c0016911 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00168fe:	6a 00                	push   0x0
c0016900:	50                   	push   eax
c0016901:	8d 70 01             	lea    esi,[eax+0x1]
c0016904:	e8 d8 fd ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016909:	39 f3                	cmp    ebx,esi
c001690b:	89 f0                	mov    eax,esi
c001690d:	5a                   	pop    edx
c001690e:	59                   	pop    ecx
c001690f:	75 ed                	jne    c00168fe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016911:	5b                   	pop    ebx
c0016912:	5e                   	pop    esi
c0016913:	c3                   	ret    

c0016914 <Phys::physicalMemorySetup(unsigned int)>:
c0016914:	55                   	push   ebp
c0016915:	57                   	push   edi
c0016916:	56                   	push   esi
c0016917:	53                   	push   ebx
c0016918:	31 db                	xor    ebx,ebx
c001691a:	83 ec 40             	sub    esp,0x40
c001691d:	6a 10                	push   0x10
c001691f:	6a 00                	push   0x0
c0016921:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016926:	e8 c5 9b fe ff       	call   c00004f0 <memset>
c001692b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001692f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016934:	05 00 10 00 00       	add    eax,0x1000
c0016939:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001693d:	5a                   	pop    edx
c001693e:	59                   	pop    ecx
c001693f:	50                   	push   eax
c0016940:	68 97 12 03 c0       	push   0xc0031297
c0016945:	e8 84 29 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001694a:	83 c4 10             	add    esp,0x10
c001694d:	83 ec 08             	sub    esp,0x8
c0016950:	6a 01                	push   0x1
c0016952:	53                   	push   ebx
c0016953:	83 c3 01             	add    ebx,0x1
c0016956:	e8 86 fd ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016964:	75 e7                	jne    c001694d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016966:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001696d:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016974:	c1 e0 08             	shl    eax,0x8
c0016977:	09 c2                	or     edx,eax
c0016979:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001697d:	0f 84 43 01 00 00    	je     c0016ac6 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0016983:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001698b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016990:	e9 82 00 00 00       	jmp    c0016a17 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0016995:	ba 00 00 08 00       	mov    edx,0x80000
c001699a:	89 c1                	mov    ecx,eax
c001699c:	39 f2                	cmp    edx,esi
c001699e:	19 f9                	sbb    ecx,edi
c00169a0:	0f 82 c0 00 00 00    	jb     c0016a66 <Phys::physicalMemorySetup(unsigned int)+0x152>
c00169a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169aa:	89 c5                	mov    ebp,eax
c00169ac:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00169b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169b4:	19 cd                	sbb    ebp,ecx
c00169b6:	0f 83 af 00 00 00    	jae    c0016a6b <Phys::physicalMemorySetup(unsigned int)+0x157>
c00169bc:	89 d6                	mov    esi,edx
c00169be:	ba 00 00 0a 00       	mov    edx,0xa0000
c00169c3:	39 f2                	cmp    edx,esi
c00169c5:	89 cf                	mov    edi,ecx
c00169c7:	19 c8                	sbb    eax,ecx
c00169c9:	73 07                	jae    c00169d2 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c00169cb:	be 00 00 0a 00       	mov    esi,0xa0000
c00169d0:	31 ff                	xor    edi,edi
c00169d2:	89 f2                	mov    edx,esi
c00169d4:	b8 ff 1f 00 00       	mov    eax,0x1fff
c00169d9:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00169df:	89 f9                	mov    ecx,edi
c00169e1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169e5:	83 d1 ff             	adc    ecx,0xffffffff
c00169e8:	39 d0                	cmp    eax,edx
c00169ea:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00169ee:	b8 00 00 00 00       	mov    eax,0x0
c00169f3:	19 c8                	sbb    eax,ecx
c00169f5:	0f 82 9d 01 00 00    	jb     c0016b98 <Phys::physicalMemorySetup(unsigned int)+0x284>
c00169fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00169ff:	83 c3 18             	add    ebx,0x18
c0016a02:	83 c6 01             	add    esi,0x1
c0016a05:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a0d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016a11:	0f 84 bf 00 00 00    	je     c0016ad6 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016a17:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016a19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a1c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016a1f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016a22:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016a26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a2d:	01 f0                	add    eax,esi
c0016a2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016a37:	55                   	push   ebp
c0016a38:	11 fa                	adc    edx,edi
c0016a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a3e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a46:	50                   	push   eax
c0016a47:	56                   	push   esi
c0016a48:	68 34 12 03 c0       	push   0xc0031234
c0016a4d:	e8 7c 28 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0016a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	09 f8                	or     eax,edi
c0016a5b:	75 79                	jne    c0016ad6 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016a5d:	83 fd 01             	cmp    ebp,0x1
c0016a60:	0f 84 2f ff ff ff    	je     c0016995 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0016a66:	83 fd 01             	cmp    ebp,0x1
c0016a69:	75 90                	jne    c00169fb <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016a6b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016a6f:	31 d2                	xor    edx,edx
c0016a71:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0016a75:	89 c8                	mov    eax,ecx
c0016a77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a7b:	19 d1                	sbb    ecx,edx
c0016a7d:	0f 82 78 ff ff ff    	jb     c00169fb <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016a83:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016a88:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016a8c:	b9 00 00 00 00       	mov    ecx,0x0
c0016a91:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0016a95:	0f 83 60 ff ff ff    	jae    c00169fb <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016a9b:	39 c6                	cmp    esi,eax
c0016a9d:	19 d7                	sbb    edi,edx
c0016a9f:	0f 83 ff 00 00 00    	jae    c0016ba4 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016aa5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016aa9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016aad:	29 c7                	sub    edi,eax
c0016aaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ab3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016ab7:	19 d5                	sbb    ebp,edx
c0016ab9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016abd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ac1:	e9 de 00 00 00       	jmp    c0016ba4 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016ac6:	83 ec 0c             	sub    esp,0xc
c0016ac9:	68 af 12 03 c0       	push   0xc00312af
c0016ace:	e8 83 97 00 00       	call   c0020256 <KePanic(char const*)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	83 ec 08             	sub    esp,0x8
c0016ad9:	bb 60 00 00 00       	mov    ebx,0x60
c0016ade:	6a 00                	push   0x0
c0016ae0:	6a 06                	push   0x6
c0016ae2:	e8 fa fb ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016ae7:	58                   	pop    eax
c0016ae8:	5a                   	pop    edx
c0016ae9:	6a 00                	push   0x0
c0016aeb:	6a 07                	push   0x7
c0016aed:	e8 ef fb ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016af2:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	83 c1 02             	add    ecx,0x2
c0016afe:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016b04:	83 ec 08             	sub    esp,0x8
c0016b07:	6a 00                	push   0x0
c0016b09:	53                   	push   ebx
c0016b0a:	83 c3 01             	add    ebx,0x1
c0016b0d:	e8 cf fb ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016b1b:	75 e7                	jne    c0016b04 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016b1d:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b22:	bb 40 01 00 00       	mov    ebx,0x140
c0016b27:	83 c0 20             	add    eax,0x20
c0016b2a:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b2f:	eb 26                	jmp    c0016b57 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016b31:	83 ec 08             	sub    esp,0x8
c0016b34:	6a 00                	push   0x0
c0016b36:	53                   	push   ebx
c0016b37:	83 c3 01             	add    ebx,0x1
c0016b3a:	e8 a2 fb ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016b3f:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b44:	83 c4 10             	add    esp,0x10
c0016b47:	83 c0 01             	add    eax,0x1
c0016b4a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016b50:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b55:	74 07                	je     c0016b5e <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016b57:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016b5c:	7e d3                	jle    c0016b31 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016b5e:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016b63:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016b68:	7f 26                	jg     c0016b90 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016b6a:	83 ec 08             	sub    esp,0x8
c0016b6d:	6a 00                	push   0x0
c0016b6f:	53                   	push   ebx
c0016b70:	83 c3 01             	add    ebx,0x1
c0016b73:	e8 69 fb ff ff       	call   c00166e1 <Phys::setPageState(unsigned long, bool)>
c0016b78:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	83 c0 01             	add    eax,0x1
c0016b83:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016b89:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b8e:	75 d3                	jne    c0016b63 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016b90:	83 c4 3c             	add    esp,0x3c
c0016b93:	5b                   	pop    ebx
c0016b94:	5e                   	pop    esi
c0016b95:	5f                   	pop    edi
c0016b96:	5d                   	pop    ebp
c0016b97:	c3                   	ret    
c0016b98:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016b9c:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016ba4:	83 ec 04             	sub    esp,0x4
c0016ba7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016bab:	56                   	push   esi
c0016bac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016bb0:	57                   	push   edi
c0016bb1:	68 58 12 03 c0       	push   0xc0031258
c0016bb6:	e8 13 27 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0016bbb:	5d                   	pop    ebp
c0016bbc:	58                   	pop    eax
c0016bbd:	56                   	push   esi
c0016bbe:	57                   	push   edi
c0016bbf:	e8 18 fd ff ff       	call   c00168dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016bc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bcc:	83 c4 0c             	add    esp,0xc
c0016bcf:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016bd5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bd9:	01 f0                	add    eax,esi
c0016bdb:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016be0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016be7:	52                   	push   edx
c0016be8:	50                   	push   eax
c0016be9:	68 bd 12 03 c0       	push   0xc00312bd
c0016bee:	e8 db 26 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	e9 00 fe ff ff       	jmp    c00169fb <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016bfb:	90                   	nop

c0016bfc <Pipe::isAtty()>:
c0016bfc:	31 c0                	xor    eax,eax
c0016bfe:	c3                   	ret    
c0016bff:	90                   	nop

c0016c00 <Pipe::~Pipe()>:
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	ba 1c 13 03 c0       	mov    edx,0xc003131c
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	89 10                	mov    DWORD PTR [eax],edx
c0016c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	50                   	push   eax
c0016c16:	e8 35 11 00 00       	call   c0017d50 <UnixFile::~UnixFile()>
c0016c1b:	83 c4 10             	add    esp,0x10
c0016c1e:	90                   	nop
c0016c1f:	83 c4 0c             	add    esp,0xc
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <Pipe::~Pipe()>:
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	83 ec 0c             	sub    esp,0xc
c0016c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c2e:	e8 cd ff ff ff       	call   c0016c00 <Pipe::~Pipe()>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	83 ec 08             	sub    esp,0x8
c0016c39:	6a 20                	push   0x20
c0016c3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3f:	e8 8c 25 00 00       	call   c00191d0 <operator delete(void*, unsigned long)>
c0016c44:	83 c4 10             	add    esp,0x10
c0016c47:	83 c4 0c             	add    esp,0xc
c0016c4a:	c3                   	ret    
c0016c4b:	90                   	nop

c0016c4c <Pipe::write(unsigned long long, void*, int*)>:
c0016c4c:	55                   	push   ebp
c0016c4d:	57                   	push   edi
c0016c4e:	56                   	push   esi
c0016c4f:	53                   	push   ebx
c0016c50:	83 ec 1c             	sub    esp,0x1c
c0016c53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016c5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c5f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016c62:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c66:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016c69:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c6c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016c70:	89 d8                	mov    eax,ebx
c0016c72:	89 d6                	mov    esi,edx
c0016c74:	89 d7                	mov    edi,edx
c0016c76:	c1 ff 1f             	sar    edi,0x1f
c0016c79:	03 34 24             	add    esi,DWORD PTR [esp]
c0016c7c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016c80:	c1 f8 1f             	sar    eax,0x1f
c0016c83:	39 f3                	cmp    ebx,esi
c0016c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c8d:	19 f8                	sbb    eax,edi
c0016c8f:	b8 01 00 00 00       	mov    eax,0x1
c0016c94:	72 72                	jb     c0016d08 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016c96:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016c9d:	01 d0                	add    eax,edx
c0016c9f:	99                   	cdq    
c0016ca0:	f7 fb                	idiv   ebx
c0016ca2:	89 d8                	mov    eax,ebx
c0016ca4:	29 d0                	sub    eax,edx
c0016ca6:	89 d6                	mov    esi,edx
c0016ca8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016cab:	89 c3                	mov    ebx,eax
c0016cad:	c1 fb 1f             	sar    ebx,0x1f
c0016cb0:	39 c2                	cmp    edx,eax
c0016cb2:	19 df                	sbb    edi,ebx
c0016cb4:	bb 00 00 00 00       	mov    ebx,0x0
c0016cb9:	72 04                	jb     c0016cbf <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016cbb:	89 d3                	mov    ebx,edx
c0016cbd:	29 c3                	sub    ebx,eax
c0016cbf:	89 d0                	mov    eax,edx
c0016cc1:	29 d8                	sub    eax,ebx
c0016cc3:	74 0d                	je     c0016cd2 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016cc5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016cc8:	89 c1                	mov    ecx,eax
c0016cca:	01 f7                	add    edi,esi
c0016ccc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016cd0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cd2:	85 db                	test   ebx,ebx
c0016cd4:	74 0d                	je     c0016ce3 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016cd6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cda:	89 d9                	mov    ecx,ebx
c0016cdc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016cdf:	89 c6                	mov    esi,eax
c0016ce1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016ce6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016ceb:	75 10                	jne    c0016cfd <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	68 d9 12 03 c0       	push   0xc00312d9
c0016cf5:	e8 5c 95 00 00       	call   c0020256 <KePanic(char const*)>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d04:	89 08                	mov    DWORD PTR [eax],ecx
c0016d06:	31 c0                	xor    eax,eax
c0016d08:	83 c4 1c             	add    esp,0x1c
c0016d0b:	5b                   	pop    ebx
c0016d0c:	5e                   	pop    esi
c0016d0d:	5f                   	pop    edi
c0016d0e:	5d                   	pop    ebp
c0016d0f:	c3                   	ret    

c0016d10 <Pipe::read(unsigned long long, void*, int*)>:
c0016d10:	55                   	push   ebp
c0016d11:	57                   	push   edi
c0016d12:	56                   	push   esi
c0016d13:	53                   	push   ebx
c0016d14:	83 ec 1c             	sub    esp,0x1c
c0016d17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016d1b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016d1f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016d23:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016d26:	89 c8                	mov    eax,ecx
c0016d28:	99                   	cdq    
c0016d29:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016d2d:	74 24                	je     c0016d53 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016d2f:	39 f9                	cmp    ecx,edi
c0016d31:	89 d1                	mov    ecx,edx
c0016d33:	19 f1                	sbb    ecx,esi
c0016d35:	73 1c                	jae    c0016d53 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016d37:	fa                   	cli    
c0016d38:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016d3e:	e8 59 e5 00 00       	call   c002529c <schedule()>
c0016d43:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016d48:	48                   	dec    eax
c0016d49:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016d4e:	75 d3                	jne    c0016d23 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016d50:	fb                   	sti    
c0016d51:	eb d0                	jmp    c0016d23 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016d53:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016d57:	39 f8                	cmp    eax,edi
c0016d59:	89 d1                	mov    ecx,edx
c0016d5b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016d5f:	19 f1                	sbb    ecx,esi
c0016d61:	73 08                	jae    c0016d6b <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d6b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016d6e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016d71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016d75:	29 f7                	sub    edi,esi
c0016d77:	89 f8                	mov    eax,edi
c0016d79:	99                   	cdq    
c0016d7a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016d7e:	89 d0                	mov    eax,edx
c0016d80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d84:	19 c2                	sbb    edx,eax
c0016d86:	89 f8                	mov    eax,edi
c0016d88:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016d8d:	89 ea                	mov    edx,ebp
c0016d8f:	29 c2                	sub    edx,eax
c0016d91:	85 c0                	test   eax,eax
c0016d93:	74 0b                	je     c0016da0 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016d95:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016d98:	89 c1                	mov    ecx,eax
c0016d9a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016d9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016da0:	85 d2                	test   edx,edx
c0016da2:	74 0d                	je     c0016db1 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016da4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016da8:	89 d1                	mov    ecx,edx
c0016daa:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016dad:	89 c7                	mov    edi,eax
c0016daf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016db1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016db4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016db7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016dba:	99                   	cdq    
c0016dbb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016dbf:	89 f7                	mov    edi,esi
c0016dc1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016dc5:	c1 ff 1f             	sar    edi,0x1f
c0016dc8:	57                   	push   edi
c0016dc9:	56                   	push   esi
c0016dca:	52                   	push   edx
c0016dcb:	50                   	push   eax
c0016dcc:	e8 2f 7a 01 00       	call   c002e800 <__umoddi3>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016dd9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016ddc:	75 10                	jne    c0016dee <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	68 f6 12 03 c0       	push   0xc00312f6
c0016de6:	e8 6b 94 00 00       	call   c0020256 <KePanic(char const*)>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016df6:	89 10                	mov    DWORD PTR [eax],edx
c0016df8:	83 c4 1c             	add    esp,0x1c
c0016dfb:	31 c0                	xor    eax,eax
c0016dfd:	5b                   	pop    ebx
c0016dfe:	5e                   	pop    esi
c0016dff:	5f                   	pop    edi
c0016e00:	5d                   	pop    ebp
c0016e01:	c3                   	ret    

c0016e02 <Pipe::Pipe(int)>:
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e09:	83 ec 08             	sub    esp,0x8
c0016e0c:	6a 00                	push   0x0
c0016e0e:	50                   	push   eax
c0016e0f:	e8 56 0d 00 00       	call   c0017b6a <UnixFile::UnixFile(int)>
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	ba 1c 13 03 c0       	mov    edx,0xc003131c
c0016e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e20:	89 10                	mov    DWORD PTR [eax],edx
c0016e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e31:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016e43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e47:	83 ec 0c             	sub    esp,0xc
c0016e4a:	50                   	push   eax
c0016e4b:	e8 47 f6 ff ff       	call   c0016497 <malloc>
c0016e50:	83 c4 10             	add    esp,0x10
c0016e53:	89 c2                	mov    edx,eax
c0016e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e60:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016e64:	90                   	nop
c0016e65:	83 c4 0c             	add    esp,0xc
c0016e68:	c3                   	ret    
c0016e69:	90                   	nop

c0016e6a <VgaText::isAtty()>:
c0016e6a:	b0 01                	mov    al,0x1
c0016e6c:	c3                   	ret    
c0016e6d:	90                   	nop

c0016e6e <VgaText::~VgaText()>:
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	ba 64 13 03 c0       	mov    edx,0xc0031364
c0016e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e7a:	89 10                	mov    DWORD PTR [eax],edx
c0016e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	50                   	push   eax
c0016e84:	e8 c7 0e 00 00       	call   c0017d50 <UnixFile::~UnixFile()>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	90                   	nop
c0016e8d:	83 c4 0c             	add    esp,0xc
c0016e90:	c3                   	ret    
c0016e91:	90                   	nop

c0016e92 <VgaText::~VgaText()>:
c0016e92:	83 ec 0c             	sub    esp,0xc
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e9c:	e8 cd ff ff ff       	call   c0016e6e <VgaText::~VgaText()>
c0016ea1:	83 c4 10             	add    esp,0x10
c0016ea4:	83 ec 08             	sub    esp,0x8
c0016ea7:	68 84 01 00 00       	push   0x184
c0016eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eb0:	e8 1b 23 00 00       	call   c00191d0 <operator delete(void*, unsigned long)>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	83 c4 0c             	add    esp,0xc
c0016ebb:	c3                   	ret    

c0016ebc <VgaText::read(unsigned long long, void*, int*)>:
c0016ebc:	83 ec 10             	sub    esp,0x10
c0016ebf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ec3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ecb:	e8 82 53 00 00       	call   c001c252 <readKeyboard(VgaText*, char*, unsigned long)>
c0016ed0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ed4:	89 02                	mov    DWORD PTR [edx],eax
c0016ed6:	31 c0                	xor    eax,eax
c0016ed8:	83 c4 1c             	add    esp,0x1c
c0016edb:	c3                   	ret    

c0016edc <setTerminalScrollLock(bool)>:
c0016edc:	c3                   	ret    

c0016edd <doTerminalCycle()>:
c0016edd:	c3                   	ret    

c0016ede <addToTerminalCycle(VgaText*)>:
c0016ede:	c3                   	ret    

c0016edf <scrollTerminalScrollLock(int)>:
c0016edf:	c3                   	ret    

c0016ee0 <VgaText::updateTitle()>:
c0016ee0:	c3                   	ret    
c0016ee1:	90                   	nop

c0016ee2 <VgaText::load()>:
c0016ee2:	c3                   	ret    
c0016ee3:	90                   	nop

c0016ee4 <VgaText::updateCursor()>:
c0016ee4:	83 ec 14             	sub    esp,0x14
c0016ee7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016eeb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016eee:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016ef1:	e8 ae 0e 01 00       	call   c0027da4 <HalConsoleCursorUpdate(int, int)>
c0016ef6:	83 c4 1c             	add    esp,0x1c
c0016ef9:	c3                   	ret    

c0016efa <VgaText::doANSI_SGR(int)>:
c0016efa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f02:	85 d2                	test   edx,edx
c0016f04:	75 0b                	jne    c0016f11 <VgaText::doANSI_SGR(int)+0x17>
c0016f06:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016f09:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016f0c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016f0f:	eb 59                	jmp    c0016f6a <VgaText::doANSI_SGR(int)+0x70>
c0016f11:	83 fa 07             	cmp    edx,0x7
c0016f14:	75 0b                	jne    c0016f21 <VgaText::doANSI_SGR(int)+0x27>
c0016f16:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016f19:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016f1c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016f1f:	eb 49                	jmp    c0016f6a <VgaText::doANSI_SGR(int)+0x70>
c0016f21:	83 fa 1b             	cmp    edx,0x1b
c0016f24:	74 e0                	je     c0016f06 <VgaText::doANSI_SGR(int)+0xc>
c0016f26:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016f29:	83 f9 07             	cmp    ecx,0x7
c0016f2c:	77 09                	ja     c0016f37 <VgaText::doANSI_SGR(int)+0x3d>
c0016f2e:	8b 14 8d 60 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc3a0]
c0016f35:	eb 20                	jmp    c0016f57 <VgaText::doANSI_SGR(int)+0x5d>
c0016f37:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016f3a:	83 f9 07             	cmp    ecx,0x7
c0016f3d:	77 09                	ja     c0016f48 <VgaText::doANSI_SGR(int)+0x4e>
c0016f3f:	8b 14 8d 60 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc3a0]
c0016f46:	eb 22                	jmp    c0016f6a <VgaText::doANSI_SGR(int)+0x70>
c0016f48:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016f4b:	83 f9 07             	cmp    ecx,0x7
c0016f4e:	77 0b                	ja     c0016f5b <VgaText::doANSI_SGR(int)+0x61>
c0016f50:	8b 14 95 18 3b 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc4e8]
c0016f57:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016f5a:	c3                   	ret    
c0016f5b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016f5e:	83 f9 07             	cmp    ecx,0x7
c0016f61:	77 0a                	ja     c0016f6d <VgaText::doANSI_SGR(int)+0x73>
c0016f63:	8b 14 95 f0 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc510]
c0016f6a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016f6d:	c3                   	ret    

c0016f6e <VgaText::setDefaultBgColour(VgaColour)>:
c0016f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f76:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f79:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016f7c:	c3                   	ret    
c0016f7d:	90                   	nop

c0016f7e <VgaText::setDefaultFgColour(VgaColour)>:
c0016f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f86:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016f89:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016f8c:	c3                   	ret    
c0016f8d:	90                   	nop

c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016f8e:	53                   	push   ebx
c0016f8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016f93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016f97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f9b:	51                   	push   ecx
c0016f9c:	e8 cd ff ff ff       	call   c0016f6e <VgaText::setDefaultBgColour(VgaColour)>
c0016fa1:	58                   	pop    eax
c0016fa2:	5a                   	pop    edx
c0016fa3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016fa7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fab:	5b                   	pop    ebx
c0016fac:	eb d0                	jmp    c0016f7e <VgaText::setDefaultFgColour(VgaColour)>

c0016fae <VgaText::setTitleTextColour(VgaColour)>:
c0016fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fb6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016fb9:	c3                   	ret    

c0016fba <VgaText::setTitleColour(VgaColour)>:
c0016fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fc2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016fc5:	c3                   	ret    

c0016fc6 <VgaText::setTitle(char*)>:
c0016fc6:	c3                   	ret    
c0016fc7:	90                   	nop

c0016fc8 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fcc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016fd1:	83 e0 0f             	and    eax,0xf
c0016fd4:	c1 e2 04             	shl    edx,0x4
c0016fd7:	09 d0                	or     eax,edx
c0016fd9:	c3                   	ret    

c0016fda <VgaText::scrollScreen()>:
c0016fda:	55                   	push   ebp
c0016fdb:	57                   	push   edi
c0016fdc:	56                   	push   esi
c0016fdd:	be 01 00 00 00       	mov    esi,0x1
c0016fe2:	53                   	push   ebx
c0016fe3:	83 ec 0c             	sub    esp,0xc
c0016fe6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016fea:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016fed:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016ff3:	31 ff                	xor    edi,edi
c0016ff5:	01 e9                	add    ecx,ebp
c0016ff7:	8a 01                	mov    al,BYTE PTR [ecx]
c0016ff9:	83 fe 18             	cmp    esi,0x18
c0016ffc:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017002:	75 20                	jne    c0017024 <VgaText::scrollScreen()+0x4a>
c0017004:	f7 c7 01 00 00 00    	test   edi,0x1
c001700a:	74 15                	je     c0017021 <VgaText::scrollScreen()+0x47>
c001700c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017010:	50                   	push   eax
c0017011:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017015:	50                   	push   eax
c0017016:	e8 ad ff ff ff       	call   c0016fc8 <VgaText::combineColours(unsigned char, unsigned char)>
c001701b:	5a                   	pop    edx
c001701c:	5a                   	pop    edx
c001701d:	88 01                	mov    BYTE PTR [ecx],al
c001701f:	eb 03                	jmp    c0017024 <VgaText::scrollScreen()+0x4a>
c0017021:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0017024:	47                   	inc    edi
c0017025:	41                   	inc    ecx
c0017026:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001702c:	75 c9                	jne    c0016ff7 <VgaText::scrollScreen()+0x1d>
c001702e:	46                   	inc    esi
c001702f:	83 fe 19             	cmp    esi,0x19
c0017032:	75 b9                	jne    c0016fed <VgaText::scrollScreen()+0x13>
c0017034:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001703a:	75 1f                	jne    c001705b <VgaText::scrollScreen()+0x81>
c001703c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017040:	74 05                	je     c0017047 <VgaText::scrollScreen()+0x6d>
c0017042:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0017045:	eb 14                	jmp    c001705b <VgaText::scrollScreen()+0x81>
c0017047:	50                   	push   eax
c0017048:	50                   	push   eax
c0017049:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001704d:	50                   	push   eax
c001704e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017052:	50                   	push   eax
c0017053:	e8 e0 0b 01 00       	call   c0027c38 <HalConsoleScroll(int, int)>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001705f:	83 c4 0c             	add    esp,0xc
c0017062:	5b                   	pop    ebx
c0017063:	5e                   	pop    esi
c0017064:	5f                   	pop    edi
c0017065:	5d                   	pop    ebp
c0017066:	e9 79 fe ff ff       	jmp    c0016ee4 <VgaText::updateCursor()>
c001706b:	90                   	nop

c001706c <VgaText::combineCharAndColour(char, unsigned char)>:
c001706c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017071:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0017076:	c1 e0 08             	shl    eax,0x8
c0017079:	09 d0                	or     eax,edx
c001707b:	c3                   	ret    

c001707c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001707c:	55                   	push   ebp
c001707d:	57                   	push   edi
c001707e:	56                   	push   esi
c001707f:	53                   	push   ebx
c0017080:	83 ec 1c             	sub    esp,0x1c
c0017083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017087:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001708b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001708f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017097:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001709b:	0f b6 c3             	movzx  eax,bl
c001709e:	50                   	push   eax
c001709f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00170a4:	50                   	push   eax
c00170a5:	e8 1e ff ff ff       	call   c0016fc8 <VgaText::combineColours(unsigned char, unsigned char)>
c00170aa:	5a                   	pop    edx
c00170ab:	59                   	pop    ecx
c00170ac:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00170b1:	0f b6 c0             	movzx  eax,al
c00170b4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00170b8:	50                   	push   eax
c00170b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00170bd:	e8 aa ff ff ff       	call   c001706c <VgaText::combineCharAndColour(char, unsigned char)>
c00170c2:	5a                   	pop    edx
c00170c3:	6b d7 50             	imul   edx,edi,0x50
c00170c6:	59                   	pop    ecx
c00170c7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00170ca:	01 f2                	add    edx,esi
c00170cc:	0f b7 d2             	movzx  edx,dx
c00170cf:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00170d3:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00170d9:	75 28                	jne    c0017103 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00170db:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00170df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170e3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00170e7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00170eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00170ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170f7:	83 c4 1c             	add    esp,0x1c
c00170fa:	5b                   	pop    ebx
c00170fb:	5e                   	pop    esi
c00170fc:	5f                   	pop    edi
c00170fd:	5d                   	pop    ebp
c00170fe:	e9 3d 0c 01 00       	jmp    c0027d40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017103:	83 c4 1c             	add    esp,0x1c
c0017106:	5b                   	pop    ebx
c0017107:	5e                   	pop    esi
c0017108:	5f                   	pop    edi
c0017109:	5d                   	pop    ebp
c001710a:	c3                   	ret    
c001710b:	90                   	nop

c001710c <VgaText::getCursorX()>:
c001710c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017110:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017113:	c3                   	ret    

c0017114 <VgaText::getCursorY()>:
c0017114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017118:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001711b:	c3                   	ret    

c001711c <VgaText::setCursor(int, int)>:
c001711c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017124:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017127:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001712b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001712e:	e9 b1 fd ff ff       	jmp    c0016ee4 <VgaText::updateCursor()>

c0017133 <setActiveTerminal(VgaText*)>:
c0017133:	53                   	push   ebx
c0017134:	83 ec 08             	sub    esp,0x8
c0017137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001713b:	85 db                	test   ebx,ebx
c001713d:	75 11                	jne    c0017150 <setActiveTerminal(VgaText*)+0x1d>
c001713f:	c7 44 24 10 30 13 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031330
c0017147:	83 c4 08             	add    esp,0x8
c001714a:	5b                   	pop    ebx
c001714b:	e9 06 91 00 00       	jmp    c0020256 <KePanic(char const*)>
c0017150:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017155:	85 c0                	test   eax,eax
c0017157:	74 0c                	je     c0017165 <setActiveTerminal(VgaText*)+0x32>
c0017159:	83 ec 0c             	sub    esp,0xc
c001715c:	50                   	push   eax
c001715d:	e8 82 fd ff ff       	call   c0016ee4 <VgaText::updateCursor()>
c0017162:	83 c4 10             	add    esp,0x10
c0017165:	50                   	push   eax
c0017166:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017169:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c001716f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017172:	53                   	push   ebx
c0017173:	e8 a4 ff ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c0017178:	83 c4 18             	add    esp,0x18
c001717b:	5b                   	pop    ebx
c001717c:	c3                   	ret    
c001717d:	90                   	nop

c001717e <VgaText::clearScreen()>:
c001717e:	57                   	push   edi
c001717f:	56                   	push   esi
c0017180:	31 f6                	xor    esi,esi
c0017182:	53                   	push   ebx
c0017183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017187:	52                   	push   edx
c0017188:	6a 00                	push   0x0
c001718a:	6a 00                	push   0x0
c001718c:	53                   	push   ebx
c001718d:	e8 8a ff ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001719c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001719f:	7e 20                	jle    c00171c1 <VgaText::clearScreen()+0x43>
c00171a1:	31 ff                	xor    edi,edi
c00171a3:	50                   	push   eax
c00171a4:	50                   	push   eax
c00171a5:	56                   	push   esi
c00171a6:	57                   	push   edi
c00171a7:	47                   	inc    edi
c00171a8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00171ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00171ae:	6a 20                	push   0x20
c00171b0:	53                   	push   ebx
c00171b1:	e8 c6 fe ff ff       	call   c001707c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00171b6:	83 c4 20             	add    esp,0x20
c00171b9:	83 ff 50             	cmp    edi,0x50
c00171bc:	75 e5                	jne    c00171a3 <VgaText::clearScreen()+0x25>
c00171be:	46                   	inc    esi
c00171bf:	eb db                	jmp    c001719c <VgaText::clearScreen()+0x1e>
c00171c1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00171c8:	5b                   	pop    ebx
c00171c9:	5e                   	pop    esi
c00171ca:	5f                   	pop    edi
c00171cb:	c3                   	ret    

c00171cc <VgaText::setCursorX(int)>:
c00171cc:	83 ec 10             	sub    esp,0x10
c00171cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171d3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00171d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171da:	50                   	push   eax
c00171db:	e8 3c ff ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c00171e0:	83 c4 1c             	add    esp,0x1c
c00171e3:	c3                   	ret    

c00171e4 <VgaText::setCursorY(int)>:
c00171e4:	83 ec 10             	sub    esp,0x10
c00171e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171ef:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00171f2:	50                   	push   eax
c00171f3:	e8 24 ff ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c00171f8:	83 c4 1c             	add    esp,0x1c
c00171fb:	c3                   	ret    

c00171fc <VgaText::incrementCursor(bool)>:
c00171fc:	56                   	push   esi
c00171fd:	53                   	push   ebx
c00171fe:	51                   	push   ecx
c00171ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017203:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017207:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001720a:	40                   	inc    eax
c001720b:	83 f8 50             	cmp    eax,0x50
c001720e:	74 05                	je     c0017215 <VgaText::incrementCursor(bool)+0x19>
c0017210:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017213:	eb 24                	jmp    c0017239 <VgaText::incrementCursor(bool)+0x3d>
c0017215:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001721c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001721f:	8d 50 01             	lea    edx,[eax+0x1]
c0017222:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017225:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017228:	75 0f                	jne    c0017239 <VgaText::incrementCursor(bool)+0x3d>
c001722a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001722d:	83 ec 0c             	sub    esp,0xc
c0017230:	53                   	push   ebx
c0017231:	e8 a4 fd ff ff       	call   c0016fda <VgaText::scrollScreen()>
c0017236:	83 c4 10             	add    esp,0x10
c0017239:	89 f0                	mov    eax,esi
c001723b:	84 c0                	test   al,al
c001723d:	74 0c                	je     c001724b <VgaText::incrementCursor(bool)+0x4f>
c001723f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017243:	5a                   	pop    edx
c0017244:	5b                   	pop    ebx
c0017245:	5e                   	pop    esi
c0017246:	e9 99 fc ff ff       	jmp    c0016ee4 <VgaText::updateCursor()>
c001724b:	58                   	pop    eax
c001724c:	5b                   	pop    ebx
c001724d:	5e                   	pop    esi
c001724e:	c3                   	ret    
c001724f:	90                   	nop

c0017250 <VgaText::decrementCursor(bool)>:
c0017250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017254:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017258:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001725b:	85 c0                	test   eax,eax
c001725d:	74 04                	je     c0017263 <VgaText::decrementCursor(bool)+0x13>
c001725f:	48                   	dec    eax
c0017260:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017263:	84 c9                	test   cl,cl
c0017265:	74 09                	je     c0017270 <VgaText::decrementCursor(bool)+0x20>
c0017267:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001726b:	e9 74 fc ff ff       	jmp    c0016ee4 <VgaText::updateCursor()>
c0017270:	c3                   	ret    
c0017271:	90                   	nop

c0017272 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017272:	53                   	push   ebx
c0017273:	83 ec 08             	sub    esp,0x8
c0017276:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001727b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001727f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017287:	83 f8 07             	cmp    eax,0x7
c001728a:	75 21                	jne    c00172ad <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001728c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017294:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001729c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00172a4:	83 c4 08             	add    esp,0x8
c00172a7:	5b                   	pop    ebx
c00172a8:	e9 d6 3a 00 00       	jmp    c001ad83 <Krnl::beep(int, int, bool)>
c00172ad:	83 f8 0d             	cmp    eax,0xd
c00172b0:	75 09                	jne    c00172bb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00172b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00172b9:	eb 2d                	jmp    c00172e8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00172bb:	83 f8 0a             	cmp    eax,0xa
c00172be:	75 31                	jne    c00172f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00172c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00172c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172ca:	8d 50 01             	lea    edx,[eax+0x1]
c00172cd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00172d0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00172d3:	75 0f                	jne    c00172e4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00172d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	53                   	push   ebx
c00172dc:	e8 f9 fc ff ff       	call   c0016fda <VgaText::scrollScreen()>
c00172e1:	83 c4 10             	add    esp,0x10
c00172e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00172e8:	83 c4 08             	add    esp,0x8
c00172eb:	5b                   	pop    ebx
c00172ec:	e9 f3 fb ff ff       	jmp    c0016ee4 <VgaText::updateCursor()>
c00172f1:	83 f8 08             	cmp    eax,0x8
c00172f4:	75 25                	jne    c001731b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00172f6:	50                   	push   eax
c00172f7:	50                   	push   eax
c00172f8:	6a 01                	push   0x1
c00172fa:	53                   	push   ebx
c00172fb:	e8 50 ff ff ff       	call   c0017250 <VgaText::decrementCursor(bool)>
c0017300:	5a                   	pop    edx
c0017301:	59                   	pop    ecx
c0017302:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017305:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017308:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001730b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001730e:	6a 20                	push   0x20
c0017310:	53                   	push   ebx
c0017311:	e8 66 fd ff ff       	call   c001707c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017316:	83 c4 28             	add    esp,0x28
c0017319:	5b                   	pop    ebx
c001731a:	c3                   	ret    
c001731b:	83 ec 08             	sub    esp,0x8
c001731e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017321:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017324:	51                   	push   ecx
c0017325:	52                   	push   edx
c0017326:	50                   	push   eax
c0017327:	53                   	push   ebx
c0017328:	e8 4f fd ff ff       	call   c001707c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001732d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017331:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017339:	83 c4 28             	add    esp,0x28
c001733c:	5b                   	pop    ebx
c001733d:	e9 ba fe ff ff       	jmp    c00171fc <VgaText::incrementCursor(bool)>

c0017342 <VgaText::putchar(char)>:
c0017342:	57                   	push   edi
c0017343:	56                   	push   esi
c0017344:	53                   	push   ebx
c0017345:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017349:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001734d:	0f be c2             	movsx  eax,dl
c0017350:	83 f8 5b             	cmp    eax,0x5b
c0017353:	75 18                	jne    c001736d <VgaText::putchar(char)+0x2b>
c0017355:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017359:	74 20                	je     c001737b <VgaText::putchar(char)+0x39>
c001735b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017361:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0017368:	e9 b8 00 00 00       	jmp    c0017425 <VgaText::putchar(char)+0xe3>
c001736d:	83 f8 1b             	cmp    eax,0x1b
c0017370:	75 09                	jne    c001737b <VgaText::putchar(char)+0x39>
c0017372:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0017376:	e9 aa 00 00 00       	jmp    c0017425 <VgaText::putchar(char)+0xe3>
c001737b:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c001737f:	89 f9                	mov    ecx,edi
c0017381:	84 c9                	test   cl,cl
c0017383:	0f 84 8c 00 00 00    	je     c0017415 <VgaText::putchar(char)+0xd3>
c0017389:	8d 4a c0             	lea    ecx,[edx-0x40]
c001738c:	80 f9 3e             	cmp    cl,0x3e
c001738f:	77 70                	ja     c0017401 <VgaText::putchar(char)+0xbf>
c0017391:	83 f8 6d             	cmp    eax,0x6d
c0017394:	75 3f                	jne    c00173d5 <VgaText::putchar(char)+0x93>
c0017396:	31 f6                	xor    esi,esi
c0017398:	31 d2                	xor    edx,edx
c001739a:	31 c0                	xor    eax,eax
c001739c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001739f:	7e 25                	jle    c00173c6 <VgaText::putchar(char)+0x84>
c00173a1:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00173a6:	83 fa 3b             	cmp    edx,0x3b
c00173a9:	75 0f                	jne    c00173ba <VgaText::putchar(char)+0x78>
c00173ab:	50                   	push   eax
c00173ac:	53                   	push   ebx
c00173ad:	e8 48 fb ff ff       	call   c0016efa <VgaText::doANSI_SGR(int)>
c00173b2:	31 d2                	xor    edx,edx
c00173b4:	59                   	pop    ecx
c00173b5:	58                   	pop    eax
c00173b6:	31 c0                	xor    eax,eax
c00173b8:	eb 09                	jmp    c00173c3 <VgaText::putchar(char)+0x81>
c00173ba:	6b c0 0a             	imul   eax,eax,0xa
c00173bd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00173c1:	89 fa                	mov    edx,edi
c00173c3:	46                   	inc    esi
c00173c4:	eb d6                	jmp    c001739c <VgaText::putchar(char)+0x5a>
c00173c6:	84 d2                	test   dl,dl
c00173c8:	74 2f                	je     c00173f9 <VgaText::putchar(char)+0xb7>
c00173ca:	50                   	push   eax
c00173cb:	53                   	push   ebx
c00173cc:	e8 29 fb ff ff       	call   c0016efa <VgaText::doANSI_SGR(int)>
c00173d1:	58                   	pop    eax
c00173d2:	5a                   	pop    edx
c00173d3:	eb 24                	jmp    c00173f9 <VgaText::putchar(char)+0xb7>
c00173d5:	83 f8 4a             	cmp    eax,0x4a
c00173d8:	75 1f                	jne    c00173f9 <VgaText::putchar(char)+0xb7>
c00173da:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00173de:	75 19                	jne    c00173f9 <VgaText::putchar(char)+0xb7>
c00173e0:	83 ec 0c             	sub    esp,0xc
c00173e3:	53                   	push   ebx
c00173e4:	e8 95 fd ff ff       	call   c001717e <VgaText::clearScreen()>
c00173e9:	83 c4 0c             	add    esp,0xc
c00173ec:	6a 00                	push   0x0
c00173ee:	6a 00                	push   0x0
c00173f0:	53                   	push   ebx
c00173f1:	e8 26 fd ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00173ff:	eb 24                	jmp    c0017425 <VgaText::putchar(char)+0xe3>
c0017401:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017404:	83 f8 0e             	cmp    eax,0xe
c0017407:	7f 1c                	jg     c0017425 <VgaText::putchar(char)+0xe3>
c0017409:	8d 48 01             	lea    ecx,[eax+0x1]
c001740c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001740f:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0017413:	eb 10                	jmp    c0017425 <VgaText::putchar(char)+0xe3>
c0017415:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017418:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001741b:	50                   	push   eax
c001741c:	53                   	push   ebx
c001741d:	e8 50 fe ff ff       	call   c0017272 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	5b                   	pop    ebx
c0017426:	5e                   	pop    esi
c0017427:	5f                   	pop    edi
c0017428:	c3                   	ret    
c0017429:	90                   	nop

c001742a <VgaText::putx(unsigned int)>:
c001742a:	57                   	push   edi
c001742b:	b9 11 00 00 00       	mov    ecx,0x11
c0017430:	56                   	push   esi
c0017431:	be 3e 13 03 c0       	mov    esi,0xc003133e
c0017436:	53                   	push   ebx
c0017437:	83 ec 20             	sub    esp,0x20
c001743a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001743e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017442:	fc                   	cld    
c0017443:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017445:	be 08 00 00 00       	mov    esi,0x8
c001744a:	50                   	push   eax
c001744b:	50                   	push   eax
c001744c:	89 d8                	mov    eax,ebx
c001744e:	c1 e8 1c             	shr    eax,0x1c
c0017451:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0017456:	c1 e3 04             	shl    ebx,0x4
c0017459:	50                   	push   eax
c001745a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001745e:	e8 df fe ff ff       	call   c0017342 <VgaText::putchar(char)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	4e                   	dec    esi
c0017467:	75 e1                	jne    c001744a <VgaText::putx(unsigned int)+0x20>
c0017469:	83 c4 20             	add    esp,0x20
c001746c:	5b                   	pop    ebx
c001746d:	5e                   	pop    esi
c001746e:	5f                   	pop    edi
c001746f:	c3                   	ret    

c0017470 <VgaText::puts(char const*)>:
c0017470:	53                   	push   ebx
c0017471:	83 ec 08             	sub    esp,0x8
c0017474:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017478:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001747b:	85 c0                	test   eax,eax
c001747d:	74 12                	je     c0017491 <VgaText::puts(char const*)+0x21>
c001747f:	51                   	push   ecx
c0017480:	43                   	inc    ebx
c0017481:	51                   	push   ecx
c0017482:	50                   	push   eax
c0017483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017487:	e8 b6 fe ff ff       	call   c0017342 <VgaText::putchar(char)>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	eb e7                	jmp    c0017478 <VgaText::puts(char const*)+0x8>
c0017491:	83 c4 08             	add    esp,0x8
c0017494:	5b                   	pop    ebx
c0017495:	c3                   	ret    

c0017496 <VgaText::write(unsigned long long, void*, int*)>:
c0017496:	55                   	push   ebp
c0017497:	57                   	push   edi
c0017498:	56                   	push   esi
c0017499:	53                   	push   ebx
c001749a:	83 ec 0c             	sub    esp,0xc
c001749d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00174a1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00174a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00174a9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00174b0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00174b3:	39 eb                	cmp    ebx,ebp
c00174b5:	74 13                	je     c00174ca <VgaText::write(unsigned long long, void*, int*)+0x34>
c00174b7:	50                   	push   eax
c00174b8:	43                   	inc    ebx
c00174b9:	50                   	push   eax
c00174ba:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00174be:	50                   	push   eax
c00174bf:	56                   	push   esi
c00174c0:	e8 7d fe ff ff       	call   c0017342 <VgaText::putchar(char)>
c00174c5:	83 c4 10             	add    esp,0x10
c00174c8:	eb e9                	jmp    c00174b3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00174ca:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00174d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174d5:	89 38                	mov    DWORD PTR [eax],edi
c00174d7:	83 c4 0c             	add    esp,0xc
c00174da:	31 c0                	xor    eax,eax
c00174dc:	5b                   	pop    ebx
c00174dd:	5e                   	pop    esi
c00174de:	5f                   	pop    edi
c00174df:	5d                   	pop    ebp
c00174e0:	c3                   	ret    
c00174e1:	90                   	nop

c00174e2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00174e2:	55                   	push   ebp
c00174e3:	57                   	push   edi
c00174e4:	56                   	push   esi
c00174e5:	53                   	push   ebx
c00174e6:	83 ec 0c             	sub    esp,0xc
c00174e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00174ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00174f2:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00174f9:	50                   	push   eax
c00174fa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00174ff:	50                   	push   eax
c0017500:	e8 c3 fa ff ff       	call   c0016fc8 <VgaText::combineColours(unsigned char, unsigned char)>
c0017505:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017509:	5a                   	pop    edx
c001750a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001750d:	59                   	pop    ecx
c001750e:	0f b6 f8             	movzx  edi,al
c0017511:	0f b7 db             	movzx  ebx,bx
c0017514:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017518:	01 db                	add    ebx,ebx
c001751a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001751d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017520:	85 c0                	test   eax,eax
c0017522:	0f 84 ef 00 00 00    	je     c0017617 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017528:	83 f8 0d             	cmp    eax,0xd
c001752b:	75 0c                	jne    c0017539 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001752d:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017534:	e9 d8 00 00 00       	jmp    c0017611 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017539:	83 f8 0a             	cmp    eax,0xa
c001753c:	75 44                	jne    c0017582 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001753e:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017545:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017548:	8d 48 01             	lea    ecx,[eax+0x1]
c001754b:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c001754e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017551:	75 0f                	jne    c0017562 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017553:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0017556:	83 ec 0c             	sub    esp,0xc
c0017559:	55                   	push   ebp
c001755a:	e8 7b fa ff ff       	call   c0016fda <VgaText::scrollScreen()>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	55                   	push   ebp
c0017566:	e8 79 f9 ff ff       	call   c0016ee4 <VgaText::updateCursor()>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017572:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017575:	0f b7 db             	movzx  ebx,bx
c0017578:	01 db                	add    ebx,ebx
c001757a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001757d:	e9 8f 00 00 00       	jmp    c0017611 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017582:	83 f8 08             	cmp    eax,0x8
c0017585:	75 34                	jne    c00175bb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0017587:	51                   	push   ecx
c0017588:	51                   	push   ecx
c0017589:	6a 01                	push   0x1
c001758b:	55                   	push   ebp
c001758c:	e8 bf fc ff ff       	call   c0017250 <VgaText::decrementCursor(bool)>
c0017591:	5b                   	pop    ebx
c0017592:	58                   	pop    eax
c0017593:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0017596:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017599:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001759c:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c001759f:	6a 20                	push   0x20
c00175a1:	55                   	push   ebp
c00175a2:	e8 d5 fa ff ff       	call   c001707c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00175a7:	83 c4 20             	add    esp,0x20
c00175aa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00175ae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00175b1:	0f b7 db             	movzx  ebx,bx
c00175b4:	01 db                	add    ebx,ebx
c00175b6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00175b9:	eb 56                	jmp    c0017611 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00175bb:	52                   	push   edx
c00175bc:	52                   	push   edx
c00175bd:	57                   	push   edi
c00175be:	50                   	push   eax
c00175bf:	e8 a8 fa ff ff       	call   c001706c <VgaText::combineCharAndColour(char, unsigned char)>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	66 89 03             	mov    WORD PTR [ebx],ax
c00175ca:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00175d0:	75 1d                	jne    c00175ef <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00175d2:	83 ec 0c             	sub    esp,0xc
c00175d5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00175d8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00175db:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175e3:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00175e6:	50                   	push   eax
c00175e7:	e8 54 07 01 00       	call   c0027d40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00175ec:	83 c4 20             	add    esp,0x20
c00175ef:	50                   	push   eax
c00175f0:	83 c3 02             	add    ebx,0x2
c00175f3:	50                   	push   eax
c00175f4:	6a 00                	push   0x0
c00175f6:	55                   	push   ebp
c00175f7:	e8 00 fc ff ff       	call   c00171fc <VgaText::incrementCursor(bool)>
c00175fc:	83 c4 10             	add    esp,0x10
c00175ff:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0017603:	75 0c                	jne    c0017611 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017605:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017609:	0f b7 db             	movzx  ebx,bx
c001760c:	01 db                	add    ebx,ebx
c001760e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017611:	46                   	inc    esi
c0017612:	e9 06 ff ff ff       	jmp    c001751d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017617:	83 ec 0c             	sub    esp,0xc
c001761a:	55                   	push   ebp
c001761b:	e8 c4 f8 ff ff       	call   c0016ee4 <VgaText::updateCursor()>
c0017620:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0017627:	83 c4 1c             	add    esp,0x1c
c001762a:	5b                   	pop    ebx
c001762b:	5e                   	pop    esi
c001762c:	5f                   	pop    edi
c001762d:	5d                   	pop    ebp
c001762e:	c3                   	ret    
c001762f:	90                   	nop

c0017630 <VgaText::VgaText(char const*)>:
c0017630:	56                   	push   esi
c0017631:	53                   	push   ebx
c0017632:	83 ec 04             	sub    esp,0x4
c0017635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017639:	83 ec 08             	sub    esp,0x8
c001763c:	6a 00                	push   0x0
c001763e:	50                   	push   eax
c001763f:	e8 26 05 00 00       	call   c0017b6a <UnixFile::UnixFile(int)>
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	ba 64 13 03 c0       	mov    edx,0xc0031364
c001764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017650:	89 10                	mov    DWORD PTR [eax],edx
c0017652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017656:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017661:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0017668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017674:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0017678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017687:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001768e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017692:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0017699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00176a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00176af:	83 ec 0c             	sub    esp,0xc
c00176b2:	6a 01                	push   0x1
c00176b4:	e8 00 09 00 00       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	89 c2                	mov    edx,eax
c00176be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00176c5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00176cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00176d2:	89 c6                	mov    esi,eax
c00176d4:	e8 cd f0 ff ff       	call   c00167a6 <Phys::allocatePage()>
c00176d9:	68 05 0c 00 00       	push   0xc05
c00176de:	56                   	push   esi
c00176df:	50                   	push   eax
c00176e0:	53                   	push   ebx
c00176e1:	e8 dc 0f 00 00       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00176e6:	83 c4 10             	add    esp,0x10
c00176e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00176f0:	83 ec 04             	sub    esp,0x4
c00176f3:	68 a0 0f 00 00       	push   0xfa0
c00176f8:	6a 00                	push   0x0
c00176fa:	50                   	push   eax
c00176fb:	e8 f0 8d fe ff       	call   c00004f0 <memset>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	83 ec 04             	sub    esp,0x4
c0017706:	6a 00                	push   0x0
c0017708:	6a 07                	push   0x7
c001770a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001770e:	e8 7b f8 ff ff       	call   c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	83 ec 04             	sub    esp,0x4
c0017719:	6a 00                	push   0x0
c001771b:	6a 00                	push   0x0
c001771d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017721:	e8 f6 f9 ff ff       	call   c001711c <VgaText::setCursor(int, int)>
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	83 ec 0c             	sub    esp,0xc
c001772c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017730:	e8 49 fa ff ff       	call   c001717e <VgaText::clearScreen()>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001773c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017744:	05 82 00 00 00       	add    eax,0x82
c0017749:	83 ec 04             	sub    esp,0x4
c001774c:	68 80 00 00 00       	push   0x80
c0017751:	6a 00                	push   0x0
c0017753:	50                   	push   eax
c0017754:	e8 97 8d fe ff       	call   c00004f0 <memset>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017760:	05 02 01 00 00       	add    eax,0x102
c0017765:	83 ec 04             	sub    esp,0x4
c0017768:	68 80 00 00 00       	push   0x80
c001776d:	6a 00                	push   0x0
c001776f:	50                   	push   eax
c0017770:	e8 7b 8d fe ff       	call   c00004f0 <memset>
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	90                   	nop
c0017779:	83 c4 04             	add    esp,0x4
c001777c:	5b                   	pop    ebx
c001777d:	5e                   	pop    esi
c001777e:	c3                   	ret    
c001777f:	90                   	nop

c0017780 <VgaText::receiveKey(unsigned char)>:
c0017780:	55                   	push   ebp
c0017781:	57                   	push   edi
c0017782:	56                   	push   esi
c0017783:	53                   	push   ebx
c0017784:	83 ec 2c             	sub    esp,0x2c
c0017787:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001778b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001778f:	89 fd                	mov    ebp,edi
c0017791:	81 e5 ff 00 00 00    	and    ebp,0xff
c0017797:	0f 84 48 01 00 00    	je     c00178e5 <VgaText::receiveKey(unsigned char)+0x165>
c001779d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00177a3:	83 fd 08             	cmp    ebp,0x8
c00177a6:	75 6a                	jne    c0017812 <VgaText::receiveKey(unsigned char)+0x92>
c00177a8:	83 ec 0c             	sub    esp,0xc
c00177ab:	56                   	push   esi
c00177ac:	e8 cf 8d fe ff       	call   c0000580 <strlen>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	85 c0                	test   eax,eax
c00177b6:	0f 84 ef 00 00 00    	je     c00178ab <VgaText::receiveKey(unsigned char)+0x12b>
c00177bc:	50                   	push   eax
c00177bd:	50                   	push   eax
c00177be:	6a 08                	push   0x8
c00177c0:	53                   	push   ebx
c00177c1:	e8 7c fb ff ff       	call   c0017342 <VgaText::putchar(char)>
c00177c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00177c9:	e8 b2 8d fe ff       	call   c0000580 <strlen>
c00177ce:	83 c4 10             	add    esp,0x10
c00177d1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00177d9:	83 fa 1f             	cmp    edx,0x1f
c00177dc:	89 d0                	mov    eax,edx
c00177de:	7f 1c                	jg     c00177fc <VgaText::receiveKey(unsigned char)+0x7c>
c00177e0:	83 e8 08             	sub    eax,0x8
c00177e3:	3c 02                	cmp    al,0x2
c00177e5:	76 15                	jbe    c00177fc <VgaText::receiveKey(unsigned char)+0x7c>
c00177e7:	83 fa 0d             	cmp    edx,0xd
c00177ea:	74 10                	je     c00177fc <VgaText::receiveKey(unsigned char)+0x7c>
c00177ec:	57                   	push   edi
c00177ed:	57                   	push   edi
c00177ee:	68 4f 13 03 c0       	push   0xc003134f
c00177f3:	53                   	push   ebx
c00177f4:	e8 77 fc ff ff       	call   c0017470 <VgaText::puts(char const*)>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	56                   	push   esi
c0017800:	e8 7b 8d fe ff       	call   c0000580 <strlen>
c0017805:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001780d:	e9 96 00 00 00       	jmp    c00178a8 <VgaText::receiveKey(unsigned char)+0x128>
c0017812:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017818:	83 ec 0c             	sub    esp,0xc
c001781b:	50                   	push   eax
c001781c:	e8 5f 8d fe ff       	call   c0000580 <strlen>
c0017821:	89 34 24             	mov    DWORD PTR [esp],esi
c0017824:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017828:	e8 53 8d fe ff       	call   c0000580 <strlen>
c001782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017838:	3d 80 00 00 00       	cmp    eax,0x80
c001783d:	0f 87 a2 00 00 00    	ja     c00178e5 <VgaText::receiveKey(unsigned char)+0x165>
c0017843:	8d 47 ff             	lea    eax,[edi-0x1]
c0017846:	3c 1e                	cmp    al,0x1e
c0017848:	77 35                	ja     c001787f <VgaText::receiveKey(unsigned char)+0xff>
c001784a:	8d 47 f7             	lea    eax,[edi-0x9]
c001784d:	3c 01                	cmp    al,0x1
c001784f:	76 2e                	jbe    c001787f <VgaText::receiveKey(unsigned char)+0xff>
c0017851:	83 fd 0d             	cmp    ebp,0xd
c0017854:	74 29                	je     c001787f <VgaText::receiveKey(unsigned char)+0xff>
c0017856:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017859:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001785c:	68 55 13 03 c0       	push   0xc0031355
c0017861:	53                   	push   ebx
c0017862:	e8 7b fc ff ff       	call   c00174e2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017867:	8d 47 40             	lea    eax,[edi+0x40]
c001786a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001786d:	0f b6 c0             	movzx  eax,al
c0017870:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017873:	50                   	push   eax
c0017874:	53                   	push   ebx
c0017875:	e8 f8 f9 ff ff       	call   c0017272 <VgaText::putchar(char, VgaColour, VgaColour)>
c001787a:	83 c4 20             	add    esp,0x20
c001787d:	eb 11                	jmp    c0017890 <VgaText::receiveKey(unsigned char)+0x110>
c001787f:	51                   	push   ecx
c0017880:	89 f8                	mov    eax,edi
c0017882:	51                   	push   ecx
c0017883:	0f be c0             	movsx  eax,al
c0017886:	50                   	push   eax
c0017887:	53                   	push   ebx
c0017888:	e8 b5 fa ff ff       	call   c0017342 <VgaText::putchar(char)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017895:	89 f8                	mov    eax,edi
c0017897:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001789b:	52                   	push   edx
c001789c:	52                   	push   edx
c001789d:	8d 44 24 26          	lea    eax,[esp+0x26]
c00178a1:	50                   	push   eax
c00178a2:	56                   	push   esi
c00178a3:	e8 c8 8f fe ff       	call   c0000870 <strcat>
c00178a8:	83 c4 10             	add    esp,0x10
c00178ab:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00178b2:	75 0f                	jne    c00178c3 <VgaText::receiveKey(unsigned char)+0x143>
c00178b4:	83 fd 1c             	cmp    ebp,0x1c
c00178b7:	77 2c                	ja     c00178e5 <VgaText::receiveKey(unsigned char)+0x165>
c00178b9:	b8 08 04 00 10       	mov    eax,0x10000408
c00178be:	0f a3 e8             	bt     eax,ebp
c00178c1:	73 22                	jae    c00178e5 <VgaText::receiveKey(unsigned char)+0x165>
c00178c3:	50                   	push   eax
c00178c4:	81 c3 02 01 00 00    	add    ebx,0x102
c00178ca:	50                   	push   eax
c00178cb:	56                   	push   esi
c00178cc:	53                   	push   ebx
c00178cd:	e8 9e 8f fe ff       	call   c0000870 <strcat>
c00178d2:	83 c4 0c             	add    esp,0xc
c00178d5:	68 80 00 00 00       	push   0x80
c00178da:	6a 00                	push   0x0
c00178dc:	56                   	push   esi
c00178dd:	e8 0e 8c fe ff       	call   c00004f0 <memset>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	83 c4 2c             	add    esp,0x2c
c00178e8:	5b                   	pop    ebx
c00178e9:	5e                   	pop    esi
c00178ea:	5f                   	pop    edi
c00178eb:	5d                   	pop    ebp
c00178ec:	c3                   	ret    
c00178ed:	90                   	nop

c00178ee <VgaText::doUpdate()>:
c00178ee:	c3                   	ret    
c00178ef:	90                   	nop

c00178f0 <TSS::TSS()>:
c00178f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00178fb:	90                   	nop
c00178fc:	c3                   	ret    
c00178fd:	90                   	nop
c00178fe:	66 90                	xchg   ax,ax

c0017900 <TSS::setESP(unsigned long)>:
c0017900:	55                   	push   ebp
c0017901:	89 e5                	mov    ebp,esp
c0017903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017909:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001790c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001790f:	90                   	nop
c0017910:	5d                   	pop    ebp
c0017911:	c3                   	ret    
c0017912:	66 90                	xchg   ax,ax

c0017914 <TSS::flush()>:
c0017914:	55                   	push   ebp
c0017915:	89 e5                	mov    ebp,esp
c0017917:	83 ec 10             	sub    esp,0x10
c001791a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001791d:	8b 00                	mov    eax,DWORD PTR [eax]
c001791f:	83 c8 03             	or     eax,0x3
c0017922:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017926:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001792a:	66 89 d0             	mov    ax,dx
c001792d:	0f 00 d8             	ltr    ax
c0017930:	90                   	nop
c0017931:	c9                   	leave  
c0017932:	c3                   	ret    
c0017933:	90                   	nop

c0017934 <TSS::setup(unsigned long, unsigned long)>:
c0017934:	55                   	push   ebp
c0017935:	89 e5                	mov    ebp,esp
c0017937:	83 ec 18             	sub    esp,0x18
c001793a:	83 ec 0c             	sub    esp,0xc
c001793d:	6a 68                	push   0x68
c001793f:	e8 53 eb ff ff       	call   c0016497 <malloc>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	89 c2                	mov    edx,eax
c0017949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001794c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001794f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017955:	83 ec 04             	sub    esp,0x4
c0017958:	6a 68                	push   0x68
c001795a:	6a 00                	push   0x0
c001795c:	50                   	push   eax
c001795d:	e8 8e 8b fe ff       	call   c00004f0 <memset>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001796b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017977:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001797d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017983:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017986:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001798c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001798f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001799b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00179a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00179ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00179b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179bf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00179c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179cb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00179d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179d7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00179da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00179dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00179e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ef:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00179f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179fc:	0f 20 da             	mov    edx,cr3
c00179ff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017a02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017a05:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a0e:	83 ec 08             	sub    esp,0x8
c0017a11:	50                   	push   eax
c0017a12:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017a15:	50                   	push   eax
c0017a16:	e8 ed e2 ff ff       	call   c0015d08 <GDTEntry::setBase(unsigned int)>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	83 ec 08             	sub    esp,0x8
c0017a21:	6a 68                	push   0x68
c0017a23:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017a26:	50                   	push   eax
c0017a27:	e8 f8 e2 ff ff       	call   c0015d24 <GDTEntry::setLimit(unsigned int)>
c0017a2c:	83 c4 10             	add    esp,0x10
c0017a2f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017a33:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017a36:	83 e0 0f             	and    eax,0xf
c0017a39:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017a3c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017a3f:	83 c8 40             	or     eax,0x40
c0017a42:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017a45:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017a4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a50:	05 78 01 00 00       	add    eax,0x178
c0017a55:	83 ec 04             	sub    esp,0x4
c0017a58:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017a5b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017a5e:	50                   	push   eax
c0017a5f:	e8 f4 e2 ff ff       	call   c0015d58 <GDT::addEntry(GDTEntry)>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	89 c2                	mov    edx,eax
c0017a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a6c:	89 10                	mov    DWORD PTR [eax],edx
c0017a6e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017a73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a79:	05 78 01 00 00       	add    eax,0x178
c0017a7e:	83 ec 0c             	sub    esp,0xc
c0017a81:	50                   	push   eax
c0017a82:	e8 fb e2 ff ff       	call   c0015d82 <GDT::flush()>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a8f:	c9                   	leave  
c0017a90:	c3                   	ret    
c0017a91:	90                   	nop

c0017a92 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a9d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017aa2:	75 08                	jne    c0017aac <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017aa4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017aaa:	eb 38                	jmp    c0017ae4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017aac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017ab1:	75 17                	jne    c0017aca <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017ab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ab8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac1:	8b 10                	mov    edx,DWORD PTR [eax]
c0017ac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ac7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017aca:	89 c1                	mov    ecx,eax
c0017acc:	83 e1 fd             	and    ecx,0xfffffffd
c0017acf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017ad5:	74 cd                	je     c0017aa4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017ad7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017adc:	83 e0 ef             	and    eax,0xffffffef
c0017adf:	83 f8 08             	cmp    eax,0x8
c0017ae2:	76 c0                	jbe    c0017aa4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017ae4:	31 c0                	xor    eax,eax
c0017ae6:	c3                   	ret    
c0017ae7:	90                   	nop

c0017ae8 <ReservedFilename::isAtty()>:
c0017ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017aef:	31 c0                	xor    eax,eax
c0017af1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017af7:	74 09                	je     c0017b02 <ReservedFilename::isAtty()+0x1a>
c0017af9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017aff:	0f 94 c0             	sete   al
c0017b02:	c3                   	ret    
c0017b03:	90                   	nop

c0017b04 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017b0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b13:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017b18:	75 08                	jne    c0017b22 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017b1a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017b20:	eb 3d                	jmp    c0017b5f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017b22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017b27:	75 17                	jne    c0017b40 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017b29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b37:	8b 10                	mov    edx,DWORD PTR [eax]
c0017b39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b3d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017b40:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017b45:	75 04                	jne    c0017b4b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017b47:	89 0a                	mov    DWORD PTR [edx],ecx
c0017b49:	eb 14                	jmp    c0017b5f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017b4b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017b50:	74 c8                	je     c0017b1a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017b52:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017b57:	83 e0 ef             	and    eax,0xffffffef
c0017b5a:	83 f8 08             	cmp    eax,0x8
c0017b5d:	76 bb                	jbe    c0017b1a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017b5f:	31 c0                	xor    eax,eax
c0017b61:	c3                   	ret    

c0017b62 <UnixFile::getFileDescriptor()>:
c0017b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b69:	c3                   	ret    

c0017b6a <UnixFile::UnixFile(int)>:
c0017b6a:	53                   	push   ebx
c0017b6b:	83 ec 28             	sub    esp,0x28
c0017b6e:	ba 2c 14 03 c0       	mov    edx,0xc003142c
c0017b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b77:	89 10                	mov    DWORD PTR [eax],edx
c0017b79:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017b81:	0f 8f 90 01 00 00    	jg     c0017d17 <UnixFile::UnixFile(int)+0x1ad>
c0017b87:	a1 a0 3c 03 c0       	mov    eax,ds:0xc0033ca0
c0017b8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8f:	89 15 a0 3c 03 c0    	mov    DWORD PTR ds:0xc0033ca0,edx
c0017b95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b99:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017b9c:	83 ec 08             	sub    esp,0x8
c0017b9f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017ba3:	68 98 aa 03 c0       	push   0xc003aa98
c0017ba8:	e8 3b 6e 01 00       	call   c002e9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017bad:	83 c4 10             	add    esp,0x10
c0017bb0:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017bb5:	83 f0 01             	xor    eax,0x1
c0017bb8:	0f b6 c0             	movzx  eax,al
c0017bbb:	85 c0                	test   eax,eax
c0017bbd:	0f 84 55 01 00 00    	je     c0017d18 <UnixFile::UnixFile(int)+0x1ae>
c0017bc3:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017bca:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017bd2:	83 ec 0c             	sub    esp,0xc
c0017bd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bd9:	e8 b9 e8 ff ff       	call   c0016497 <malloc>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	89 c3                	mov    ebx,eax
c0017be3:	83 ec 08             	sub    esp,0x8
c0017be6:	68 03 ff ff 0f       	push   0xfffff03
c0017beb:	53                   	push   ebx
c0017bec:	e8 2d 01 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017bfa:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017c02:	83 ec 0c             	sub    esp,0xc
c0017c05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c09:	e8 89 e8 ff ff       	call   c0016497 <malloc>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	89 c3                	mov    ebx,eax
c0017c13:	83 ec 08             	sub    esp,0x8
c0017c16:	68 01 ff ff 0f       	push   0xfffff01
c0017c1b:	53                   	push   ebx
c0017c1c:	e8 fd 00 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017c2a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c39:	e8 59 e8 ff ff       	call   c0016497 <malloc>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	89 c3                	mov    ebx,eax
c0017c43:	83 ec 08             	sub    esp,0x8
c0017c46:	68 00 ff ff 0f       	push   0xfffff00
c0017c4b:	53                   	push   ebx
c0017c4c:	e8 cd 00 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017c51:	83 c4 10             	add    esp,0x10
c0017c54:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017c5a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017c62:	83 ec 0c             	sub    esp,0xc
c0017c65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c69:	e8 29 e8 ff ff       	call   c0016497 <malloc>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	89 c3                	mov    ebx,eax
c0017c73:	83 ec 08             	sub    esp,0x8
c0017c76:	68 02 ff ff 0f       	push   0xfffff02
c0017c7b:	53                   	push   ebx
c0017c7c:	e8 9d 00 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017c81:	83 c4 10             	add    esp,0x10
c0017c84:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017c8a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017c92:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017c97:	7f 7f                	jg     c0017d18 <UnixFile::UnixFile(int)+0x1ae>
c0017c99:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017ca1:	83 ec 0c             	sub    esp,0xc
c0017ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ca8:	e8 ea e7 ff ff       	call   c0016497 <malloc>
c0017cad:	83 c4 10             	add    esp,0x10
c0017cb0:	89 c3                	mov    ebx,eax
c0017cb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cb6:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017cbb:	83 ec 08             	sub    esp,0x8
c0017cbe:	50                   	push   eax
c0017cbf:	53                   	push   ebx
c0017cc0:	e8 59 00 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017cc5:	83 c4 10             	add    esp,0x10
c0017cc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ccc:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017cd3:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017cdb:	83 ec 0c             	sub    esp,0xc
c0017cde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ce2:	e8 b0 e7 ff ff       	call   c0016497 <malloc>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	89 c3                	mov    ebx,eax
c0017cec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cf0:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017cf5:	83 ec 08             	sub    esp,0x8
c0017cf8:	50                   	push   eax
c0017cf9:	53                   	push   ebx
c0017cfa:	e8 1f 00 00 00       	call   c0017d1e <ReservedFilename::ReservedFilename(int)>
c0017cff:	83 c4 10             	add    esp,0x10
c0017d02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d06:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017d0d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017d12:	e9 7b ff ff ff       	jmp    c0017c92 <UnixFile::UnixFile(int)+0x128>
c0017d17:	90                   	nop
c0017d18:	83 c4 28             	add    esp,0x28
c0017d1b:	5b                   	pop    ebx
c0017d1c:	c3                   	ret    
c0017d1d:	90                   	nop

c0017d1e <ReservedFilename::ReservedFilename(int)>:
c0017d1e:	83 ec 0c             	sub    esp,0xc
c0017d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d25:	83 ec 08             	sub    esp,0x8
c0017d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d2c:	50                   	push   eax
c0017d2d:	e8 38 fe ff ff       	call   c0017b6a <UnixFile::UnixFile(int)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	ba 48 14 03 c0       	mov    edx,0xc0031448
c0017d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3e:	89 10                	mov    DWORD PTR [eax],edx
c0017d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017d4b:	90                   	nop
c0017d4c:	83 c4 0c             	add    esp,0xc
c0017d4f:	c3                   	ret    

c0017d50 <UnixFile::~UnixFile()>:
c0017d50:	83 ec 1c             	sub    esp,0x1c
c0017d53:	ba 2c 14 03 c0       	mov    edx,0xc003142c
c0017d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d5c:	89 10                	mov    DWORD PTR [eax],edx
c0017d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d65:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017d6a:	7f 76                	jg     c0017de2 <UnixFile::~UnixFile()+0x92>
c0017d6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d74:	83 ec 0c             	sub    esp,0xc
c0017d77:	68 98 aa 03 c0       	push   0xc003aa98
c0017d7c:	e8 3b 6d 01 00       	call   c002eabc <LinkedList<UnixFile>::getFirstElement()>
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	68 98 aa 03 c0       	push   0xc003aa98
c0017d90:	e8 2f 6d 01 00       	call   c002eac4 <LinkedList<UnixFile>::removeFirst()>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d9c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017da0:	74 43                	je     c0017de5 <UnixFile::~UnixFile()+0x95>
c0017da2:	83 ec 08             	sub    esp,0x8
c0017da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017da9:	68 98 aa 03 c0       	push   0xc003aa98
c0017dae:	e8 35 6c 01 00       	call   c002e9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017db3:	83 c4 10             	add    esp,0x10
c0017db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dba:	8d 50 01             	lea    edx,[eax+0x1]
c0017dbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dc1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017dc6:	0f 94 c0             	sete   al
c0017dc9:	0f b6 c0             	movzx  eax,al
c0017dcc:	85 c0                	test   eax,eax
c0017dce:	74 a4                	je     c0017d74 <UnixFile::~UnixFile()+0x24>
c0017dd0:	83 ec 0c             	sub    esp,0xc
c0017dd3:	68 04 14 03 c0       	push   0xc0031404
c0017dd8:	e8 79 84 00 00       	call   c0020256 <KePanic(char const*)>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	eb 92                	jmp    c0017d74 <UnixFile::~UnixFile()+0x24>
c0017de2:	90                   	nop
c0017de3:	eb 01                	jmp    c0017de6 <UnixFile::~UnixFile()+0x96>
c0017de5:	90                   	nop
c0017de6:	90                   	nop
c0017de7:	83 c4 1c             	add    esp,0x1c
c0017dea:	c3                   	ret    
c0017deb:	90                   	nop

c0017dec <UnixFile::~UnixFile()>:
c0017dec:	83 ec 0c             	sub    esp,0xc
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df6:	e8 55 ff ff ff       	call   c0017d50 <UnixFile::~UnixFile()>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	83 ec 08             	sub    esp,0x8
c0017e01:	6a 0c                	push   0xc
c0017e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e07:	e8 c4 13 00 00       	call   c00191d0 <operator delete(void*, unsigned long)>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	83 c4 0c             	add    esp,0xc
c0017e12:	c3                   	ret    
c0017e13:	90                   	nop

c0017e14 <ReservedFilename::~ReservedFilename()>:
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	ba 48 14 03 c0       	mov    edx,0xc0031448
c0017e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e20:	89 10                	mov    DWORD PTR [eax],edx
c0017e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e26:	83 ec 0c             	sub    esp,0xc
c0017e29:	50                   	push   eax
c0017e2a:	e8 21 ff ff ff       	call   c0017d50 <UnixFile::~UnixFile()>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	90                   	nop
c0017e33:	83 c4 0c             	add    esp,0xc
c0017e36:	c3                   	ret    
c0017e37:	90                   	nop

c0017e38 <ReservedFilename::~ReservedFilename()>:
c0017e38:	83 ec 0c             	sub    esp,0xc
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e42:	e8 cd ff ff ff       	call   c0017e14 <ReservedFilename::~ReservedFilename()>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	83 ec 08             	sub    esp,0x8
c0017e4d:	6a 0c                	push   0xc
c0017e4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e53:	e8 78 13 00 00       	call   c00191d0 <operator delete(void*, unsigned long)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	83 c4 0c             	add    esp,0xc
c0017e5e:	c3                   	ret    

c0017e5f <KeGetFileFromDescriptor(int)>:
c0017e5f:	53                   	push   ebx
c0017e60:	83 ec 08             	sub    esp,0x8
c0017e63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e67:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017e6d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017e73:	7f 2c                	jg     c0017ea1 <KeGetFileFromDescriptor(int)+0x42>
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	68 98 aa 03 c0       	push   0xc003aa98
c0017e7d:	e8 3a 6c 01 00       	call   c002eabc <LinkedList<UnixFile>::getFirstElement()>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	85 c0                	test   eax,eax
c0017e87:	75 04                	jne    c0017e8d <KeGetFileFromDescriptor(int)+0x2e>
c0017e89:	31 c0                	xor    eax,eax
c0017e8b:	eb 6e                	jmp    c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017e8d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017e90:	74 69                	je     c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017e92:	52                   	push   edx
c0017e93:	52                   	push   edx
c0017e94:	50                   	push   eax
c0017e95:	68 98 aa 03 c0       	push   0xc003aa98
c0017e9a:	e8 c7 6c 01 00       	call   c002eb66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017e9f:	eb e1                	jmp    c0017e82 <KeGetFileFromDescriptor(int)+0x23>
c0017ea1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017ea7:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017eac:	74 4d                	je     c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017eae:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017eb4:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017eb9:	74 40                	je     c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017ebb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017ec1:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017ec6:	74 33                	je     c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017ec8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017ece:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017ed3:	74 26                	je     c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017ed5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017edb:	83 f8 08             	cmp    eax,0x8
c0017ede:	77 09                	ja     c0017ee9 <KeGetFileFromDescriptor(int)+0x8a>
c0017ee0:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017ee7:	eb 12                	jmp    c0017efb <KeGetFileFromDescriptor(int)+0x9c>
c0017ee9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017eef:	83 fb 08             	cmp    ebx,0x8
c0017ef2:	77 95                	ja     c0017e89 <KeGetFileFromDescriptor(int)+0x2a>
c0017ef4:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017efb:	83 c4 08             	add    esp,0x8
c0017efe:	5b                   	pop    ebx
c0017eff:	c3                   	ret    

c0017f00 <__static_initialization_and_destruction_0(int, int)>:
c0017f00:	83 ec 0c             	sub    esp,0xc
c0017f03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017f08:	75 34                	jne    c0017f3e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017f0a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017f12:	75 2a                	jne    c0017f3e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	68 98 aa 03 c0       	push   0xc003aa98
c0017f1c:	e8 85 6a 01 00       	call   c002e9a6 <LinkedList<UnixFile>::LinkedList()>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	83 ec 04             	sub    esp,0x4
c0017f27:	68 18 3c 03 c0       	push   0xc0033c18
c0017f2c:	68 98 aa 03 c0       	push   0xc003aa98
c0017f31:	68 a4 e9 02 c0       	push   0xc002e9a4
c0017f36:	e8 45 12 00 00       	call   c0019180 <__cxa_atexit>
c0017f3b:	83 c4 10             	add    esp,0x10
c0017f3e:	90                   	nop
c0017f3f:	83 c4 0c             	add    esp,0xc
c0017f42:	c3                   	ret    

c0017f43 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	83 ec 08             	sub    esp,0x8
c0017f49:	68 ff ff 00 00       	push   0xffff
c0017f4e:	6a 01                	push   0x1
c0017f50:	e8 ab ff ff ff       	call   c0017f00 <__static_initialization_and_destruction_0(int, int)>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	83 c4 0c             	add    esp,0xc
c0017f5b:	c3                   	ret    

c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017f5c:	53                   	push   ebx
c0017f5d:	8b 15 a8 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033ca8
c0017f63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f6b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017f71:	89 d8                	mov    eax,ebx
c0017f73:	d1 e8                	shr    eax,1
c0017f75:	01 d0                	add    eax,edx
c0017f77:	80 e3 01             	and    bl,0x1
c0017f7a:	8a 10                	mov    dl,BYTE PTR [eax]
c0017f7c:	75 09                	jne    c0017f87 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017f7e:	83 e2 f0             	and    edx,0xfffffff0
c0017f81:	09 ca                	or     edx,ecx
c0017f83:	88 10                	mov    BYTE PTR [eax],dl
c0017f85:	5b                   	pop    ebx
c0017f86:	c3                   	ret    
c0017f87:	0f b6 c9             	movzx  ecx,cl
c0017f8a:	83 e2 0f             	and    edx,0xf
c0017f8d:	c1 e1 04             	shl    ecx,0x4
c0017f90:	09 ca                	or     edx,ecx
c0017f92:	88 10                	mov    BYTE PTR [eax],dl
c0017f94:	5b                   	pop    ebx
c0017f95:	c3                   	ret    

c0017f96 <Virt::getPageState(unsigned long)>:
c0017f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f9a:	8b 0d a8 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033ca8
c0017fa0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017fa6:	89 d0                	mov    eax,edx
c0017fa8:	d1 e8                	shr    eax,1
c0017faa:	80 e2 01             	and    dl,0x1
c0017fad:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017fb0:	74 03                	je     c0017fb5 <Virt::getPageState(unsigned long)+0x1f>
c0017fb2:	c1 e8 04             	shr    eax,0x4
c0017fb5:	83 e0 0f             	and    eax,0xf
c0017fb8:	c3                   	ret    

c0017fb9 <Virt::allocateKernelVirtualPages(int)>:
c0017fb9:	55                   	push   ebp
c0017fba:	57                   	push   edi
c0017fbb:	56                   	push   esi
c0017fbc:	31 f6                	xor    esi,esi
c0017fbe:	53                   	push   ebx
c0017fbf:	31 db                	xor    ebx,ebx
c0017fc1:	83 ec 1c             	sub    esp,0x1c
c0017fc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017fc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017fcd:	8b 2d a4 3c 03 c0    	mov    ebp,DWORD PTR ds:0xc0033ca4
c0017fd3:	55                   	push   ebp
c0017fd4:	e8 bd ff ff ff       	call   c0017f96 <Virt::getPageState(unsigned long)>
c0017fd9:	5a                   	pop    edx
c0017fda:	84 c0                	test   al,al
c0017fdc:	75 3d                	jne    c001801b <Virt::allocateKernelVirtualPages(int)+0x62>
c0017fde:	85 db                	test   ebx,ebx
c0017fe0:	0f 44 f5             	cmove  esi,ebp
c0017fe3:	83 c3 01             	add    ebx,0x1
c0017fe6:	39 fb                	cmp    ebx,edi
c0017fe8:	74 5e                	je     c0018048 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0017fea:	83 c5 01             	add    ebp,0x1
c0017fed:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017ff3:	76 33                	jbe    c0018028 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0017ff5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017ffa:	c7 05 a4 3c 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033ca4,0xc8000
c0018004:	75 2a                	jne    c0018030 <Virt::allocateKernelVirtualPages(int)+0x77>
c0018006:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001800b:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0018010:	55                   	push   ebp
c0018011:	e8 80 ff ff ff       	call   c0017f96 <Virt::getPageState(unsigned long)>
c0018016:	5a                   	pop    edx
c0018017:	84 c0                	test   al,al
c0018019:	74 c3                	je     c0017fde <Virt::allocateKernelVirtualPages(int)+0x25>
c001801b:	83 c5 01             	add    ebp,0x1
c001801e:	31 db                	xor    ebx,ebx
c0018020:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0018026:	77 cd                	ja     c0017ff5 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0018028:	89 2d a4 3c 03 c0    	mov    DWORD PTR ds:0xc0033ca4,ebp
c001802e:	eb a3                	jmp    c0017fd3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018030:	83 ec 0c             	sub    esp,0xc
c0018033:	68 5c 14 03 c0       	push   0xc003145c
c0018038:	e8 19 82 00 00       	call   c0020256 <KePanic(char const*)>
c001803d:	8b 2d a4 3c 03 c0    	mov    ebp,DWORD PTR ds:0xc0033ca4
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	eb 8b                	jmp    c0017fd3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018048:	89 35 a4 3c 03 c0    	mov    DWORD PTR ds:0xc0033ca4,esi
c001804e:	83 fb 01             	cmp    ebx,0x1
c0018051:	74 63                	je     c00180b6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0018053:	85 ff                	test   edi,edi
c0018055:	74 41                	je     c0018098 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018057:	89 f0                	mov    eax,esi
c0018059:	31 db                	xor    ebx,ebx
c001805b:	8d 6f ff             	lea    ebp,[edi-0x1]
c001805e:	eb 16                	jmp    c0018076 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0018060:	6a 01                	push   0x1
c0018062:	83 c3 01             	add    ebx,0x1
c0018065:	50                   	push   eax
c0018066:	e8 f1 fe ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001806b:	39 fb                	cmp    ebx,edi
c001806d:	58                   	pop    eax
c001806e:	5a                   	pop    edx
c001806f:	74 27                	je     c0018098 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018071:	a1 a4 3c 03 c0       	mov    eax,ds:0xc0033ca4
c0018076:	8d 50 01             	lea    edx,[eax+0x1]
c0018079:	85 db                	test   ebx,ebx
c001807b:	89 15 a4 3c 03 c0    	mov    DWORD PTR ds:0xc0033ca4,edx
c0018081:	74 22                	je     c00180a5 <Virt::allocateKernelVirtualPages(int)+0xec>
c0018083:	39 dd                	cmp    ebp,ebx
c0018085:	75 d9                	jne    c0018060 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0018087:	6a 03                	push   0x3
c0018089:	83 c3 01             	add    ebx,0x1
c001808c:	50                   	push   eax
c001808d:	e8 ca fe ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018092:	39 fb                	cmp    ebx,edi
c0018094:	59                   	pop    ecx
c0018095:	58                   	pop    eax
c0018096:	75 d9                	jne    c0018071 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0018098:	83 c4 1c             	add    esp,0x1c
c001809b:	89 f0                	mov    eax,esi
c001809d:	5b                   	pop    ebx
c001809e:	c1 e0 0c             	shl    eax,0xc
c00180a1:	5e                   	pop    esi
c00180a2:	5f                   	pop    edi
c00180a3:	5d                   	pop    ebp
c00180a4:	c3                   	ret    
c00180a5:	6a 02                	push   0x2
c00180a7:	bb 01 00 00 00       	mov    ebx,0x1
c00180ac:	50                   	push   eax
c00180ad:	e8 aa fe ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180b2:	58                   	pop    eax
c00180b3:	5a                   	pop    edx
c00180b4:	eb bb                	jmp    c0018071 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00180b6:	6a 04                	push   0x4
c00180b8:	56                   	push   esi
c00180b9:	8d 46 01             	lea    eax,[esi+0x1]
c00180bc:	a3 a4 3c 03 c0       	mov    ds:0xc0033ca4,eax
c00180c1:	e8 96 fe ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180c6:	89 f0                	mov    eax,esi
c00180c8:	59                   	pop    ecx
c00180c9:	c1 e0 0c             	shl    eax,0xc
c00180cc:	5b                   	pop    ebx
c00180cd:	83 c4 1c             	add    esp,0x1c
c00180d0:	5b                   	pop    ebx
c00180d1:	5e                   	pop    esi
c00180d2:	5f                   	pop    edi
c00180d3:	5d                   	pop    ebp
c00180d4:	c3                   	ret    

c00180d5 <Virt::freeSwapfilePage(unsigned long)>:
c00180d5:	53                   	push   ebx
c00180d6:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c00180dc:	b8 01 00 00 00       	mov    eax,0x1
c00180e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00180e5:	d3 e0                	shl    eax,cl
c00180e7:	89 cb                	mov    ebx,ecx
c00180e9:	c1 eb 05             	shr    ebx,0x5
c00180ec:	f7 d0                	not    eax
c00180ee:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00180f1:	21 c1                	and    ecx,eax
c00180f3:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00180f6:	5b                   	pop    ebx
c00180f7:	c3                   	ret    

c00180f8 <Virt::swapIDToSector(unsigned long)>:
c00180f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180fc:	8b 15 ac 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033cac
c0018102:	8b 0d b4 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033cb4
c0018108:	0f af c2             	imul   eax,edx
c001810b:	01 c8                	add    eax,ecx
c001810d:	c3                   	ret    

c001810e <Virt::allocateSwapfilePage()>:
c001810e:	55                   	push   ebp
c001810f:	31 d2                	xor    edx,edx
c0018111:	57                   	push   edi
c0018112:	56                   	push   esi
c0018113:	53                   	push   ebx
c0018114:	83 ec 0c             	sub    esp,0xc
c0018117:	8b 1d b0 3c 03 c0    	mov    ebx,DWORD PTR ds:0xc0033cb0
c001811d:	8b 0d ac 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033cac
c0018123:	89 d8                	mov    eax,ebx
c0018125:	f7 f1                	div    ecx
c0018127:	39 cb                	cmp    ebx,ecx
c0018129:	72 2f                	jb     c001815a <Virt::allocateSwapfilePage()+0x4c>
c001812b:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018131:	8b 16                	mov    edx,DWORD PTR [esi]
c0018133:	f6 c2 01             	test   dl,0x1
c0018136:	74 3e                	je     c0018176 <Virt::allocateSwapfilePage()+0x68>
c0018138:	31 c9                	xor    ecx,ecx
c001813a:	bf 01 00 00 00       	mov    edi,0x1
c001813f:	eb 12                	jmp    c0018153 <Virt::allocateSwapfilePage()+0x45>
c0018141:	89 ca                	mov    edx,ecx
c0018143:	89 fd                	mov    ebp,edi
c0018145:	c1 ea 05             	shr    edx,0x5
c0018148:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001814b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001814d:	d3 e5                	shl    ebp,cl
c001814f:	85 ea                	test   edx,ebp
c0018151:	74 2c                	je     c001817f <Virt::allocateSwapfilePage()+0x71>
c0018153:	83 c1 01             	add    ecx,0x1
c0018156:	39 c8                	cmp    eax,ecx
c0018158:	77 e7                	ja     c0018141 <Virt::allocateSwapfilePage()+0x33>
c001815a:	83 ec 0c             	sub    esp,0xc
c001815d:	68 f0 16 03 c0       	push   0xc00316f0
c0018162:	e8 ef 80 00 00       	call   c0020256 <KePanic(char const*)>
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	31 c9                	xor    ecx,ecx
c001816c:	83 c4 0c             	add    esp,0xc
c001816f:	89 c8                	mov    eax,ecx
c0018171:	5b                   	pop    ebx
c0018172:	5e                   	pop    esi
c0018173:	5f                   	pop    edi
c0018174:	5d                   	pop    ebp
c0018175:	c3                   	ret    
c0018176:	89 f3                	mov    ebx,esi
c0018178:	bd 01 00 00 00       	mov    ebp,0x1
c001817d:	31 c9                	xor    ecx,ecx
c001817f:	09 ea                	or     edx,ebp
c0018181:	89 c8                	mov    eax,ecx
c0018183:	89 13                	mov    DWORD PTR [ebx],edx
c0018185:	83 c4 0c             	add    esp,0xc
c0018188:	5b                   	pop    ebx
c0018189:	5e                   	pop    esi
c001818a:	5f                   	pop    edi
c001818b:	5d                   	pop    ebp
c001818c:	c3                   	ret    

c001818d <Virt::virtualMemorySetup()>:
c001818d:	53                   	push   ebx
c001818e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018193:	6a 0f                	push   0xf
c0018195:	53                   	push   ebx
c0018196:	83 c3 01             	add    ebx,0x1
c0018199:	e8 be fd ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001819e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00181a4:	58                   	pop    eax
c00181a5:	5a                   	pop    edx
c00181a6:	75 eb                	jne    c0018193 <Virt::virtualMemorySetup()+0x6>
c00181a8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00181ad:	6a 00                	push   0x0
c00181af:	53                   	push   ebx
c00181b0:	83 c3 01             	add    ebx,0x1
c00181b3:	e8 a4 fd ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181b8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00181be:	59                   	pop    ecx
c00181bf:	58                   	pop    eax
c00181c0:	75 eb                	jne    c00181ad <Virt::virtualMemorySetup()+0x20>
c00181c2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00181c7:	6a 0f                	push   0xf
c00181c9:	53                   	push   ebx
c00181ca:	83 c3 01             	add    ebx,0x1
c00181cd:	e8 8a fd ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181d2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00181d8:	58                   	pop    eax
c00181d9:	5a                   	pop    edx
c00181da:	75 eb                	jne    c00181c7 <Virt::virtualMemorySetup()+0x3a>
c00181dc:	5b                   	pop    ebx
c00181dd:	c3                   	ret    

c00181de <Virt::setupPageSwapping(int)>:
c00181de:	53                   	push   ebx
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c00181e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00181eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00181f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00181f3:	53                   	push   ebx
c00181f4:	68 07 17 03 c0       	push   0xc0031707
c00181f9:	50                   	push   eax
c00181fa:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00181fd:	c1 e3 0b             	shl    ebx,0xb
c0018200:	89 1d b0 3c 03 c0    	mov    DWORD PTR ds:0xc0033cb0,ebx
c0018206:	c1 eb 08             	shr    ebx,0x8
c0018209:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001820c:	c6 05 b8 3c 03 c0 43 	mov    BYTE PTR ds:0xc0033cb8,0x43
c0018213:	c7 05 ac 3c 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033cac,0x8
c001821d:	a3 b4 3c 03 c0       	mov    ds:0xc0033cb4,eax
c0018222:	e8 70 e2 ff ff       	call   c0016497 <malloc>
c0018227:	31 d2                	xor    edx,edx
c0018229:	83 c4 0c             	add    esp,0xc
c001822c:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018231:	89 c1                	mov    ecx,eax
c0018233:	a1 b0 3c 03 c0       	mov    eax,ds:0xc0033cb0
c0018238:	f7 35 ac 3c 03 c0    	div    DWORD PTR ds:0xc0033cac
c001823e:	c1 e8 05             	shr    eax,0x5
c0018241:	50                   	push   eax
c0018242:	6a 00                	push   0x0
c0018244:	51                   	push   ecx
c0018245:	e8 a6 82 fe ff       	call   c00004f0 <memset>
c001824a:	83 c4 18             	add    esp,0x18
c001824d:	5b                   	pop    ebx
c001824e:	c3                   	ret    
c001824f:	90                   	nop

c0018250 <VAS::setCPUSpecific(unsigned long)>:
c0018250:	c3                   	ret    
c0018251:	90                   	nop

c0018252 <VAS::VAS(VAS*)>:
c0018252:	83 ec 0c             	sub    esp,0xc
c0018255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018259:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018264:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001826b:	83 ec 0c             	sub    esp,0xc
c001826e:	68 7c 14 03 c0       	push   0xc003147c
c0018273:	e8 de 7f 00 00       	call   c0020256 <KePanic(char const*)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	90                   	nop
c001827c:	83 c4 0c             	add    esp,0xc
c001827f:	c3                   	ret    

c0018280 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018284:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018289:	89 c2                	mov    edx,eax
c001828b:	c1 ea 16             	shr    edx,0x16
c001828e:	c1 e8 0a             	shr    eax,0xa
c0018291:	83 f9 01             	cmp    ecx,0x1
c0018294:	19 c9                	sbb    ecx,ecx
c0018296:	25 fc 0f 00 00       	and    eax,0xffc
c001829b:	c1 e2 0c             	shl    edx,0xc
c001829e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00182a4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00182ab:	01 d0                	add    eax,edx
c00182ad:	c3                   	ret    

c00182ae <VAS::getPageTableEntry(unsigned long)>:
c00182ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182b2:	89 ca                	mov    edx,ecx
c00182b4:	c1 ea 16             	shr    edx,0x16
c00182b7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00182bd:	c1 e9 0a             	shr    ecx,0xa
c00182c0:	c1 e0 0c             	shl    eax,0xc
c00182c3:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00182c9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00182cc:	c3                   	ret    

c00182cd <Virt::freeKernelVirtualPages(unsigned long)>:
c00182cd:	55                   	push   ebp
c00182ce:	57                   	push   edi
c00182cf:	bf 01 00 00 00       	mov    edi,0x1
c00182d4:	56                   	push   esi
c00182d5:	53                   	push   ebx
c00182d6:	83 ec 1c             	sub    esp,0x1c
c00182d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00182dd:	c1 ee 0c             	shr    esi,0xc
c00182e0:	eb 48                	jmp    c001832a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00182e2:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00182e7:	83 ec 08             	sub    esp,0x8
c00182ea:	55                   	push   ebp
c00182eb:	50                   	push   eax
c00182ec:	e8 bd ff ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00182f6:	f6 c6 04             	test   dh,0x4
c00182f9:	75 70                	jne    c001836b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018301:	83 fb 04             	cmp    ebx,0x4
c0018304:	0f 84 8a 00 00 00    	je     c0018394 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001830a:	83 fb 02             	cmp    ebx,0x2
c001830d:	0f 84 9a 00 00 00    	je     c00183ad <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018313:	83 fb 03             	cmp    ebx,0x3
c0018316:	0f 84 be 00 00 00    	je     c00183da <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001831c:	83 fb 01             	cmp    ebx,0x1
c001831f:	0f 84 a2 00 00 00    	je     c00183c7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018325:	83 c6 01             	add    esi,0x1
c0018328:	31 ff                	xor    edi,edi
c001832a:	56                   	push   esi
c001832b:	89 f5                	mov    ebp,esi
c001832d:	e8 64 fc ff ff       	call   c0017f96 <Virt::getPageState(unsigned long)>
c0018332:	c1 e5 0c             	shl    ebp,0xc
c0018335:	5a                   	pop    edx
c0018336:	0f b6 d8             	movzx  ebx,al
c0018339:	85 db                	test   ebx,ebx
c001833b:	75 a5                	jne    c00182e2 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001833d:	83 ec 0c             	sub    esp,0xc
c0018340:	68 1e 17 03 c0       	push   0xc003171e
c0018345:	e8 0c 7f 00 00       	call   c0020256 <KePanic(char const*)>
c001834a:	5a                   	pop    edx
c001834b:	59                   	pop    ecx
c001834c:	55                   	push   ebp
c001834d:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c0018353:	55                   	push   ebp
c0018354:	e8 55 ff ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	8b 10                	mov    edx,DWORD PTR [eax]
c001835e:	f6 c6 04             	test   dh,0x4
c0018361:	75 08                	jne    c001836b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018363:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018369:	eb ba                	jmp    c0018325 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001836b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001836f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018375:	83 ec 0c             	sub    esp,0xc
c0018378:	52                   	push   edx
c0018379:	e8 bf e3 ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	83 fb 04             	cmp    ebx,0x4
c0018384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018388:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001838e:	0f 85 76 ff ff ff    	jne    c001830a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018394:	83 e7 01             	and    edi,0x1
c0018397:	75 46                	jne    c00183df <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018399:	c7 44 24 30 a0 14 03 c0 	mov    DWORD PTR [esp+0x30],0xc00314a0
c00183a1:	83 c4 1c             	add    esp,0x1c
c00183a4:	5b                   	pop    ebx
c00183a5:	5e                   	pop    esi
c00183a6:	5f                   	pop    edi
c00183a7:	5d                   	pop    ebp
c00183a8:	e9 a9 7e 00 00       	jmp    c0020256 <KePanic(char const*)>
c00183ad:	83 e7 01             	and    edi,0x1
c00183b0:	75 15                	jne    c00183c7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00183b2:	83 ec 0c             	sub    esp,0xc
c00183b5:	68 3a 17 03 c0       	push   0xc003173a
c00183ba:	e8 97 7e 00 00       	call   c0020256 <KePanic(char const*)>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	e9 5e ff ff ff       	jmp    c0018325 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00183c7:	83 ec 08             	sub    esp,0x8
c00183ca:	6a 00                	push   0x0
c00183cc:	56                   	push   esi
c00183cd:	e8 8a fb ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183d2:	83 c4 10             	add    esp,0x10
c00183d5:	e9 4b ff ff ff       	jmp    c0018325 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00183da:	83 e7 01             	and    edi,0x1
c00183dd:	75 16                	jne    c00183f5 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00183df:	83 ec 08             	sub    esp,0x8
c00183e2:	6a 00                	push   0x0
c00183e4:	56                   	push   esi
c00183e5:	e8 72 fb ff ff       	call   c0017f5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	83 c4 1c             	add    esp,0x1c
c00183f0:	5b                   	pop    ebx
c00183f1:	5e                   	pop    esi
c00183f2:	5f                   	pop    edi
c00183f3:	5d                   	pop    ebp
c00183f4:	c3                   	ret    
c00183f5:	c7 44 24 30 56 17 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031756
c00183fd:	83 c4 1c             	add    esp,0x1c
c0018400:	5b                   	pop    ebx
c0018401:	5e                   	pop    esi
c0018402:	5f                   	pop    edi
c0018403:	5d                   	pop    ebp
c0018404:	e9 4d 7e 00 00       	jmp    c0020256 <KePanic(char const*)>
c0018409:	90                   	nop

c001840a <VAS::freeAllocatedPages(unsigned long)>:
c001840a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001840e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018412:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018416:	74 09                	je     c0018421 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018418:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001841c:	e9 ac fe ff ff       	jmp    c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c0018421:	c7 44 24 04 c4 14 03 c0 	mov    DWORD PTR [esp+0x4],0xc00314c4
c0018429:	e9 a0 0e 00 00       	jmp    c00192ce <Dbg::kprintf(char const*, ...)>

c001842e <VAS::virtualToPhysical(unsigned long)>:
c001842e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018432:	50                   	push   eax
c0018433:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018437:	52                   	push   edx
c0018438:	e8 71 fe ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c001843d:	59                   	pop    ecx
c001843e:	5a                   	pop    edx
c001843f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018441:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018446:	c3                   	ret    
c0018447:	90                   	nop

c0018448 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0018448:	55                   	push   ebp
c0018449:	57                   	push   edi
c001844a:	56                   	push   esi
c001844b:	53                   	push   ebx
c001844c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018450:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018454:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018458:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001845c:	85 db                	test   ebx,ebx
c001845e:	7e 24                	jle    c0018484 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018460:	c1 e3 0c             	shl    ebx,0xc
c0018463:	01 f3                	add    ebx,esi
c0018465:	56                   	push   esi
c0018466:	81 c6 00 10 00 00    	add    esi,0x1000
c001846c:	55                   	push   ebp
c001846d:	e8 3c fe ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018472:	5a                   	pop    edx
c0018473:	59                   	pop    ecx
c0018474:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001847a:	21 f9                	and    ecx,edi
c001847c:	09 d1                	or     ecx,edx
c001847e:	39 f3                	cmp    ebx,esi
c0018480:	89 08                	mov    DWORD PTR [eax],ecx
c0018482:	75 e1                	jne    c0018465 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018484:	5b                   	pop    ebx
c0018485:	5e                   	pop    esi
c0018486:	5f                   	pop    edi
c0018487:	5d                   	pop    ebp
c0018488:	c3                   	ret    
c0018489:	90                   	nop

c001848a <VAS::VAS()>:
c001848a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001848e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018499:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184a4:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00184a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ad:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00184b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184b5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00184b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184bc:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00184c3:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c00184c8:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00184cd:	29 c2                	sub    edx,eax
c00184cf:	89 d0                	mov    eax,edx
c00184d1:	05 ff 0f 00 00       	add    eax,0xfff
c00184d6:	c1 e8 0c             	shr    eax,0xc
c00184d9:	89 c2                	mov    edx,eax
c00184db:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00184e0:	6a 04                	push   0x4
c00184e2:	6a ff                	push   0xffffffff
c00184e4:	52                   	push   edx
c00184e5:	50                   	push   eax
c00184e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184ea:	e8 59 ff ff ff       	call   c0018448 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00184ef:	83 c4 14             	add    esp,0x14
c00184f2:	90                   	nop
c00184f3:	c3                   	ret    

c00184f4 <VAS::setToWriteCombining(unsigned long, int)>:
c00184f4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00184f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00184ff:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018506:	75 01                	jne    c0018509 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018508:	c3                   	ret    
c0018509:	68 80 00 00 00       	push   0x80
c001850e:	6a ff                	push   0xffffffff
c0018510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018514:	50                   	push   eax
c0018515:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018519:	52                   	push   edx
c001851a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001851e:	51                   	push   ecx
c001851f:	e8 24 ff ff ff       	call   c0018448 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018524:	83 c4 14             	add    esp,0x14
c0018527:	c3                   	ret    

c0018528 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018528:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001852c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001852f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018533:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018536:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001853b:	83 f8 01             	cmp    eax,0x1
c001853e:	19 c0                	sbb    eax,eax
c0018540:	83 ca 03             	or     edx,0x3
c0018543:	83 e0 fc             	and    eax,0xfffffffc
c0018546:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001854d:	0f 20 d8             	mov    eax,cr3
c0018550:	0f 22 d8             	mov    cr3,eax
c0018553:	c3                   	ret    

c0018554 <VAS::~VAS()>:
c0018554:	83 ec 2c             	sub    esp,0x2c
c0018557:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001855f:	fa                   	cli    
c0018560:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018565:	83 c0 01             	add    eax,0x1
c0018568:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001856d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018572:	8b 00                	mov    eax,DWORD PTR [eax]
c0018574:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018577:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001857d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018581:	6a 01                	push   0x1
c0018583:	50                   	push   eax
c0018584:	e8 9f ff ff ff       	call   c0018528 <VAS::mapOtherVASIn(bool, VAS*)>
c0018589:	83 c4 0c             	add    esp,0xc
c001858c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018594:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001859c:	0f 8f d8 00 00 00    	jg     c001867a <VAS::~VAS()+0x126>
c00185a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185ad:	c1 e2 02             	shl    edx,0x2
c00185b0:	01 d0                	add    eax,edx
c00185b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bc:	83 e0 01             	and    eax,0x1
c00185bf:	0f 84 ab 00 00 00    	je     c0018670 <VAS::~VAS()+0x11c>
c00185c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00185cd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00185d5:	7f 74                	jg     c001864b <VAS::~VAS()+0xf7>
c00185d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185db:	c1 e0 0a             	shl    eax,0xa
c00185de:	89 c2                	mov    edx,eax
c00185e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185e4:	01 d0                	add    eax,edx
c00185e6:	c1 e0 0c             	shl    eax,0xc
c00185e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00185f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00185f7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00185fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018601:	6a 01                	push   0x1
c0018603:	50                   	push   eax
c0018604:	e8 77 fc ff ff       	call   c0018280 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018609:	83 c4 0c             	add    esp,0xc
c001860c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018614:	8b 00                	mov    eax,DWORD PTR [eax]
c0018616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001861e:	25 01 04 00 00       	and    eax,0x401
c0018623:	3d 01 04 00 00       	cmp    eax,0x401
c0018628:	75 1a                	jne    c0018644 <VAS::~VAS()+0xf0>
c001862a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001862e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018633:	83 ec 0c             	sub    esp,0xc
c0018636:	50                   	push   eax
c0018637:	e8 01 e1 ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018644:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0018649:	eb 82                	jmp    c00185cd <VAS::~VAS()+0x79>
c001864b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864f:	25 00 04 00 00       	and    eax,0x400
c0018654:	74 1a                	je     c0018670 <VAS::~VAS()+0x11c>
c0018656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001865a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	50                   	push   eax
c0018663:	e8 d5 e0 ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018670:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018675:	e9 1a ff ff ff       	jmp    c0018594 <VAS::~VAS()+0x40>
c001867a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001867e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018681:	83 ec 0c             	sub    esp,0xc
c0018684:	50                   	push   eax
c0018685:	e8 43 fc ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018691:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	50                   	push   eax
c0018698:	e8 a0 e0 ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00186a5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00186aa:	83 e8 01             	sub    eax,0x1
c00186ad:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00186b2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00186b7:	85 c0                	test   eax,eax
c00186b9:	75 01                	jne    c00186bc <VAS::~VAS()+0x168>
c00186bb:	fb                   	sti    
c00186bc:	90                   	nop
c00186bd:	83 c4 2c             	add    esp,0x2c
c00186c0:	c3                   	ret    
c00186c1:	90                   	nop

c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00186c2:	55                   	push   ebp
c00186c3:	57                   	push   edi
c00186c4:	56                   	push   esi
c00186c5:	53                   	push   ebx
c00186c6:	83 ec 1c             	sub    esp,0x1c
c00186c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00186cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00186d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00186d5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00186db:	77 08                	ja     c00186e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00186dd:	0f 20 d8             	mov    eax,cr3
c00186e0:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00186e3:	75 43                	jne    c0018728 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00186e5:	89 d8                	mov    eax,ebx
c00186e7:	09 f8                	or     eax,edi
c00186e9:	a9 ff 0f 00 00       	test   eax,0xfff
c00186ee:	75 53                	jne    c0018743 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00186f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00186f3:	89 de                	mov    esi,ebx
c00186f5:	c1 ee 16             	shr    esi,0x16
c00186f8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00186ff:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018703:	74 50                	je     c0018755 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018705:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018709:	c1 eb 0a             	shr    ebx,0xa
c001870c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018712:	c1 e6 0c             	shl    esi,0xc
c0018715:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001871b:	09 c7                	or     edi,eax
c001871d:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018720:	83 c4 1c             	add    esp,0x1c
c0018723:	5b                   	pop    ebx
c0018724:	5e                   	pop    esi
c0018725:	5f                   	pop    edi
c0018726:	5d                   	pop    ebp
c0018727:	c3                   	ret    
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	68 e8 14 03 c0       	push   0xc00314e8
c0018730:	e8 99 0b 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018735:	89 d8                	mov    eax,ebx
c0018737:	83 c4 10             	add    esp,0x10
c001873a:	09 f8                	or     eax,edi
c001873c:	a9 ff 0f 00 00       	test   eax,0xfff
c0018741:	74 ad                	je     c00186f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018743:	83 ec 0c             	sub    esp,0xc
c0018746:	68 50 15 03 c0       	push   0xc0031550
c001874b:	e8 06 7b 00 00       	call   c0020256 <KePanic(char const*)>
c0018750:	83 c4 10             	add    esp,0x10
c0018753:	eb 9b                	jmp    c00186f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018755:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018759:	e8 48 e0 ff ff       	call   c00167a6 <Phys::allocatePage()>
c001875e:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018764:	83 ec 0c             	sub    esp,0xc
c0018767:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001876b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001876f:	6a 01                	push   0x1
c0018771:	e8 43 f8 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c0018776:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001877d:	6a 01                	push   0x1
c001877f:	50                   	push   eax
c0018780:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018784:	52                   	push   edx
c0018785:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018789:	51                   	push   ecx
c001878a:	e8 3d 01 00 00       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001878f:	83 c4 1c             	add    esp,0x1c
c0018792:	68 00 10 00 00       	push   0x1000
c0018797:	6a 00                	push   0x0
c0018799:	50                   	push   eax
c001879a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001879e:	e8 4d 7d fe ff       	call   c00004f0 <memset>
c00187a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00187a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00187aa:	e8 1e fb ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c00187af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00187bd:	0d 07 04 00 00       	or     eax,0x407
c00187c2:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00187c5:	e9 3b ff ff ff       	jmp    c0018705 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00187ca <VAS::allocatePages(int, int)>:
c00187ca:	55                   	push   ebp
c00187cb:	57                   	push   edi
c00187cc:	56                   	push   esi
c00187cd:	53                   	push   ebx
c00187ce:	83 ec 1c             	sub    esp,0x1c
c00187d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187d9:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00187dd:	75 75                	jne    c0018854 <VAS::allocatePages(int, int)+0x8a>
c00187df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00187e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187e6:	85 c0                	test   eax,eax
c00187e8:	74 49                	je     c0018833 <VAS::allocatePages(int, int)+0x69>
c00187ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00187ee:	89 d5                	mov    ebp,edx
c00187f0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187f4:	c1 e5 0c             	shl    ebp,0xc
c00187f7:	01 dd                	add    ebp,ebx
c00187f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00187fc:	81 cf 00 04 00 00    	or     edi,0x400
c0018802:	85 d2                	test   edx,edx
c0018804:	7e 1b                	jle    c0018821 <VAS::allocatePages(int, int)+0x57>
c0018806:	e8 9b df ff ff       	call   c00167a6 <Phys::allocatePage()>
c001880b:	57                   	push   edi
c001880c:	53                   	push   ebx
c001880d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018813:	50                   	push   eax
c0018814:	56                   	push   esi
c0018815:	e8 a8 fe ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001881a:	83 c4 10             	add    esp,0x10
c001881d:	39 dd                	cmp    ebp,ebx
c001881f:	75 e5                	jne    c0018806 <VAS::allocatePages(int, int)+0x3c>
c0018821:	0f 20 d8             	mov    eax,cr3
c0018824:	0f 22 d8             	mov    cr3,eax
c0018827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001882b:	83 c4 1c             	add    esp,0x1c
c001882e:	5b                   	pop    ebx
c001882f:	5e                   	pop    esi
c0018830:	5f                   	pop    edi
c0018831:	5d                   	pop    ebp
c0018832:	c3                   	ret    
c0018833:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018837:	83 ec 0c             	sub    esp,0xc
c001883a:	68 74 15 03 c0       	push   0xc0031574
c001883f:	e8 12 7a 00 00       	call   c0020256 <KePanic(char const*)>
c0018844:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018852:	eb 96                	jmp    c00187ea <VAS::allocatePages(int, int)+0x20>
c0018854:	83 ec 0c             	sub    esp,0xc
c0018857:	52                   	push   edx
c0018858:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c001885c:	e8 58 f7 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c0018861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001886d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018871:	77 38                	ja     c00188ab <VAS::allocatePages(int, int)+0xe1>
c0018873:	85 d2                	test   edx,edx
c0018875:	7e aa                	jle    c0018821 <VAS::allocatePages(int, int)+0x57>
c0018877:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001887b:	c1 e2 0c             	shl    edx,0xc
c001887e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018882:	81 cf 00 04 00 00    	or     edi,0x400
c0018888:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001888b:	e8 16 df ff ff       	call   c00167a6 <Phys::allocatePage()>
c0018890:	57                   	push   edi
c0018891:	53                   	push   ebx
c0018892:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018898:	50                   	push   eax
c0018899:	56                   	push   esi
c001889a:	e8 23 fe ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001889f:	83 c4 10             	add    esp,0x10
c00188a2:	39 dd                	cmp    ebp,ebx
c00188a4:	75 e5                	jne    c001888b <VAS::allocatePages(int, int)+0xc1>
c00188a6:	e9 76 ff ff ff       	jmp    c0018821 <VAS::allocatePages(int, int)+0x57>
c00188ab:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00188b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00188b6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00188bd:	74 b4                	je     c0018873 <VAS::allocatePages(int, int)+0xa9>
c00188bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188c3:	80 cc 01             	or     ah,0x1
c00188c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00188ca:	eb a7                	jmp    c0018873 <VAS::allocatePages(int, int)+0xa9>

c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00188cc:	55                   	push   ebp
c00188cd:	57                   	push   edi
c00188ce:	56                   	push   esi
c00188cf:	53                   	push   ebx
c00188d0:	83 ec 1c             	sub    esp,0x1c
c00188d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00188d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00188df:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00188e3:	85 db                	test   ebx,ebx
c00188e5:	7e 2c                	jle    c0018913 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00188e7:	c1 e3 0c             	shl    ebx,0xc
c00188ea:	8d 04 33             	lea    eax,[ebx+esi*1]
c00188ed:	89 f3                	mov    ebx,esi
c00188ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188f3:	55                   	push   ebp
c00188f4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00188f8:	29 f2                	sub    edx,esi
c00188fa:	01 da                	add    edx,ebx
c00188fc:	52                   	push   edx
c00188fd:	53                   	push   ebx
c00188fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018904:	57                   	push   edi
c0018905:	e8 b8 fd ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001890a:	83 c4 10             	add    esp,0x10
c001890d:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018911:	75 e0                	jne    c00188f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018913:	0f 20 d8             	mov    eax,cr3
c0018916:	0f 22 d8             	mov    cr3,eax
c0018919:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001891d:	83 c4 1c             	add    esp,0x1c
c0018920:	5b                   	pop    ebx
c0018921:	5e                   	pop    esi
c0018922:	5f                   	pop    edi
c0018923:	5d                   	pop    ebp
c0018924:	c3                   	ret    
c0018925:	90                   	nop

c0018926 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018926:	55                   	push   ebp
c0018927:	57                   	push   edi
c0018928:	56                   	push   esi
c0018929:	53                   	push   ebx
c001892a:	83 ec 1c             	sub    esp,0x1c
c001892d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018931:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018935:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018939:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001893d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018941:	09 d8                	or     eax,ebx
c0018943:	a9 ff 0f 00 00       	test   eax,0xfff
c0018948:	75 4b                	jne    c0018995 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001894a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001894d:	89 de                	mov    esi,ebx
c001894f:	c1 ee 16             	shr    esi,0x16
c0018952:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0018959:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c001895d:	74 48                	je     c00189a7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c001895f:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0018964:	c1 eb 0a             	shr    ebx,0xa
c0018967:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001896b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001896f:	83 ff 01             	cmp    edi,0x1
c0018972:	19 c0                	sbb    eax,eax
c0018974:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001897a:	c1 e6 0c             	shl    esi,0xc
c001897d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0018982:	01 f3                	add    ebx,esi
c0018984:	09 ca                	or     edx,ecx
c0018986:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c001898d:	83 c4 1c             	add    esp,0x1c
c0018990:	5b                   	pop    ebx
c0018991:	5e                   	pop    esi
c0018992:	5f                   	pop    edi
c0018993:	5d                   	pop    ebp
c0018994:	c3                   	ret    
c0018995:	83 ec 0c             	sub    esp,0xc
c0018998:	68 a0 15 03 c0       	push   0xc00315a0
c001899d:	e8 b4 78 00 00       	call   c0020256 <KePanic(char const*)>
c00189a2:	83 c4 10             	add    esp,0x10
c00189a5:	eb a3                	jmp    c001894a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00189a7:	e8 fa dd ff ff       	call   c00167a6 <Phys::allocatePage()>
c00189ac:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00189b2:	83 ec 0c             	sub    esp,0xc
c00189b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00189b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189bd:	6a 01                	push   0x1
c00189bf:	e8 f5 f5 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c00189c4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189cb:	6a 01                	push   0x1
c00189cd:	50                   	push   eax
c00189ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d2:	50                   	push   eax
c00189d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00189d7:	51                   	push   ecx
c00189d8:	e8 ef fe ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189dd:	83 c4 1c             	add    esp,0x1c
c00189e0:	68 00 10 00 00       	push   0x1000
c00189e5:	6a 00                	push   0x0
c00189e7:	50                   	push   eax
c00189e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189ec:	e8 ff 7a fe ff       	call   c00004f0 <memset>
c00189f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189f5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00189f8:	e8 d0 f8 ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c00189fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a01:	83 c4 10             	add    esp,0x10
c0018a04:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018a07:	81 ca 07 04 00 00    	or     edx,0x407
c0018a0d:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018a10:	e9 4a ff ff ff       	jmp    c001895f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018a15:	90                   	nop

c0018a16 <VAS::VAS(bool)>:
c0018a16:	53                   	push   ebx
c0018a17:	83 ec 28             	sub    esp,0x28
c0018a1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a3c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018a40:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018a43:	e8 5e dd ff ff       	call   c00167a6 <Phys::allocatePage()>
c0018a48:	89 c2                	mov    edx,eax
c0018a4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a51:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018a57:	83 ec 0c             	sub    esp,0xc
c0018a5a:	6a 01                	push   0x1
c0018a5c:	e8 58 f5 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	89 c2                	mov    edx,eax
c0018a66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a6d:	83 ec 0c             	sub    esp,0xc
c0018a70:	6a 03                	push   0x3
c0018a72:	6a 01                	push   0x1
c0018a74:	52                   	push   edx
c0018a75:	50                   	push   eax
c0018a76:	53                   	push   ebx
c0018a77:	e8 50 fe ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018a7c:	83 c4 20             	add    esp,0x20
c0018a7f:	89 c2                	mov    edx,eax
c0018a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018a88:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018a90:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018a98:	7f 1d                	jg     c0018ab7 <VAS::VAS(bool)+0xa1>
c0018a9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018aa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aa5:	c1 e2 02             	shl    edx,0x2
c0018aa8:	01 d0                	add    eax,edx
c0018aaa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018ab0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018ab5:	eb d9                	jmp    c0018a90 <VAS::VAS(bool)+0x7a>
c0018ab7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018abf:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018ac7:	7f 7e                	jg     c0018b47 <VAS::VAS(bool)+0x131>
c0018ac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018acd:	2d 00 02 00 00       	sub    eax,0x200
c0018ad2:	c1 e0 0c             	shl    eax,0xc
c0018ad5:	83 c8 05             	or     eax,0x5
c0018ad8:	89 c2                	mov    edx,eax
c0018ada:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018adf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ae5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aeb:	83 e0 10             	and    eax,0x10
c0018aee:	0f b6 c0             	movzx  eax,al
c0018af1:	85 c0                	test   eax,eax
c0018af3:	74 07                	je     c0018afc <VAS::VAS(bool)+0xe6>
c0018af5:	b8 00 01 00 00       	mov    eax,0x100
c0018afa:	eb 05                	jmp    c0018b01 <VAS::VAS(bool)+0xeb>
c0018afc:	b8 00 00 00 00       	mov    eax,0x0
c0018b01:	09 d0                	or     eax,edx
c0018b03:	89 c1                	mov    ecx,eax
c0018b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b10:	c1 e2 02             	shl    edx,0x2
c0018b13:	01 d0                	add    eax,edx
c0018b15:	89 ca                	mov    edx,ecx
c0018b17:	89 10                	mov    DWORD PTR [eax],edx
c0018b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b1d:	2d 40 03 00 00       	sub    eax,0x340
c0018b22:	83 f8 7f             	cmp    eax,0x7f
c0018b25:	77 16                	ja     c0018b3d <VAS::VAS(bool)+0x127>
c0018b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b32:	c1 e2 02             	shl    edx,0x2
c0018b35:	01 d0                	add    eax,edx
c0018b37:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018b3d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018b42:	e9 78 ff ff ff       	jmp    c0018abf <VAS::VAS(bool)+0xa9>
c0018b47:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b52:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018b58:	83 e0 10             	and    eax,0x10
c0018b5b:	0f b6 c0             	movzx  eax,al
c0018b5e:	85 c0                	test   eax,eax
c0018b60:	74 07                	je     c0018b69 <VAS::VAS(bool)+0x153>
c0018b62:	b8 03 41 00 00       	mov    eax,0x4103
c0018b67:	eb 05                	jmp    c0018b6e <VAS::VAS(bool)+0x158>
c0018b69:	b8 03 40 00 00       	mov    eax,0x4003
c0018b6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018b75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018b7b:	89 02                	mov    DWORD PTR [edx],eax
c0018b7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b81:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b84:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b8f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018b95:	83 e0 10             	and    eax,0x10
c0018b98:	0f b6 c0             	movzx  eax,al
c0018b9b:	85 c0                	test   eax,eax
c0018b9d:	74 07                	je     c0018ba6 <VAS::VAS(bool)+0x190>
c0018b9f:	b8 00 01 00 00       	mov    eax,0x100
c0018ba4:	eb 05                	jmp    c0018bab <VAS::VAS(bool)+0x195>
c0018ba6:	b8 00 00 00 00       	mov    eax,0x0
c0018bab:	09 c2                	or     edx,eax
c0018bad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bb4:	05 fc 0f 00 00       	add    eax,0xffc
c0018bb9:	83 ca 03             	or     edx,0x3
c0018bbc:	89 10                	mov    DWORD PTR [eax],edx
c0018bbe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018bc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018bc9:	83 ec 0c             	sub    esp,0xc
c0018bcc:	50                   	push   eax
c0018bcd:	e8 f0 29 00 00       	call   c001b5c2 <Device::getName()>
c0018bd2:	83 c4 10             	add    esp,0x10
c0018bd5:	83 ec 08             	sub    esp,0x8
c0018bd8:	68 70 17 03 c0       	push   0xc0031770
c0018bdd:	50                   	push   eax
c0018bde:	e8 9d 7b fe ff       	call   c0000780 <strcmp>
c0018be3:	83 c4 10             	add    esp,0x10
c0018be6:	85 c0                	test   eax,eax
c0018be8:	0f 94 c0             	sete   al
c0018beb:	0f b6 c0             	movzx  eax,al
c0018bee:	85 c0                	test   eax,eax
c0018bf0:	74 68                	je     c0018c5a <VAS::VAS(bool)+0x244>
c0018bf2:	fa                   	cli    
c0018bf3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018bf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018bfe:	05 7c 09 00 00       	add    eax,0x97c
c0018c03:	83 ec 0c             	sub    esp,0xc
c0018c06:	50                   	push   eax
c0018c07:	e8 86 d3 ff ff       	call   c0015f92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018c0c:	83 c4 10             	add    esp,0x10
c0018c0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018c14:	89 c3                	mov    ebx,eax
c0018c16:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c21:	05 7c 09 00 00       	add    eax,0x97c
c0018c26:	83 ec 0c             	sub    esp,0xc
c0018c29:	50                   	push   eax
c0018c2a:	e8 63 d3 ff ff       	call   c0015f92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	83 ec 08             	sub    esp,0x8
c0018c35:	50                   	push   eax
c0018c36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c3a:	e8 6f f6 ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018c49:	6a 11                	push   0x11
c0018c4b:	53                   	push   ebx
c0018c4c:	50                   	push   eax
c0018c4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c51:	e8 6c fa ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	fb                   	sti    
c0018c5a:	90                   	nop
c0018c5b:	83 c4 28             	add    esp,0x28
c0018c5e:	5b                   	pop    ebx
c0018c5f:	c3                   	ret    

c0018c60 <VAS::evict(unsigned long)>:
c0018c60:	55                   	push   ebp
c0018c61:	57                   	push   edi
c0018c62:	56                   	push   esi
c0018c63:	53                   	push   ebx
c0018c64:	83 ec 1c             	sub    esp,0x1c
c0018c67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c73:	e8 96 f4 ff ff       	call   c001810e <Virt::allocateSwapfilePage()>
c0018c78:	89 c7                	mov    edi,eax
c0018c7a:	a1 ac 3c 03 c0       	mov    eax,ds:0xc0033cac
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	7e 40                	jle    c0018cc3 <VAS::evict(unsigned long)+0x63>
c0018c83:	89 ee                	mov    esi,ebp
c0018c85:	31 db                	xor    ebx,ebx
c0018c87:	83 ec 0c             	sub    esp,0xc
c0018c8a:	57                   	push   edi
c0018c8b:	e8 68 f4 ff ff       	call   c00180f8 <Virt::swapIDToSector(unsigned long)>
c0018c90:	31 d2                	xor    edx,edx
c0018c92:	89 34 24             	mov    DWORD PTR [esp],esi
c0018c95:	81 c6 00 02 00 00    	add    esi,0x200
c0018c9b:	6a 01                	push   0x1
c0018c9d:	52                   	push   edx
c0018c9e:	01 d8                	add    eax,ebx
c0018ca0:	83 c3 01             	add    ebx,0x1
c0018ca3:	50                   	push   eax
c0018ca4:	0f be 05 b8 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033cb8
c0018cab:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018cb2:	50                   	push   eax
c0018cb3:	e8 0e 3b 00 00       	call   c001c7c6 <LogicalDisk::write(unsigned long long, int, void*)>
c0018cb8:	83 c4 20             	add    esp,0x20
c0018cbb:	39 1d ac 3c 03 c0    	cmp    DWORD PTR ds:0xc0033cac,ebx
c0018cc1:	7f c4                	jg     c0018c87 <VAS::evict(unsigned long)+0x27>
c0018cc3:	c1 e7 0c             	shl    edi,0xc
c0018cc6:	83 ec 08             	sub    esp,0x8
c0018cc9:	55                   	push   ebp
c0018cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cce:	50                   	push   eax
c0018ccf:	e8 da f5 ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018cd4:	8b 10                	mov    edx,DWORD PTR [eax]
c0018cd6:	89 d3                	mov    ebx,edx
c0018cd8:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018cde:	09 d7                	or     edi,edx
c0018ce0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ce6:	89 38                	mov    DWORD PTR [eax],edi
c0018ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ceb:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018cf1:	83 c2 01             	add    edx,0x1
c0018cf4:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018cfa:	e8 3e da ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c0018cff:	0f 20 d8             	mov    eax,cr3
c0018d02:	0f 22 d8             	mov    cr3,eax
c0018d05:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018d0b:	51                   	push   ecx
c0018d0c:	55                   	push   ebp
c0018d0d:	53                   	push   ebx
c0018d0e:	68 c4 15 03 c0       	push   0xc00315c4
c0018d13:	e8 b6 05 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018d18:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018d1d:	c7 44 24 50 7e 17 03 c0 	mov    DWORD PTR [esp+0x50],0xc003177e
c0018d25:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018d29:	8d 50 01             	lea    edx,[eax+0x1]
c0018d2c:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018d32:	83 c4 3c             	add    esp,0x3c
c0018d35:	5b                   	pop    ebx
c0018d36:	5e                   	pop    esi
c0018d37:	5f                   	pop    edi
c0018d38:	5d                   	pop    ebp
c0018d39:	e9 90 05 00 00       	jmp    c00192ce <Dbg::kprintf(char const*, ...)>

c0018d3e <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018d3e:	55                   	push   ebp
c0018d3f:	57                   	push   edi
c0018d40:	56                   	push   esi
c0018d41:	53                   	push   ebx
c0018d42:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018d48:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018d4f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018d55:	77 78                	ja     c0018dcf <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018d57:	83 ec 08             	sub    esp,0x8
c0018d5a:	53                   	push   ebx
c0018d5b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018d61:	68 a1 17 03 c0       	push   0xc00317a1
c0018d66:	e8 63 05 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018d6b:	58                   	pop    eax
c0018d6c:	5a                   	pop    edx
c0018d6d:	53                   	push   ebx
c0018d6e:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018d75:	51                   	push   ecx
c0018d76:	e8 33 f5 ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	85 c0                	test   eax,eax
c0018d80:	89 c5                	mov    ebp,eax
c0018d82:	0f 95 c0             	setne  al
c0018d85:	85 db                	test   ebx,ebx
c0018d87:	0f 95 c2             	setne  dl
c0018d8a:	21 d0                	and    eax,edx
c0018d8c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018d90:	a8 01                	test   al,0x1
c0018d92:	75 0f                	jne    c0018da3 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018d94:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018d98:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018d9e:	5b                   	pop    ebx
c0018d9f:	5e                   	pop    esi
c0018da0:	5f                   	pop    edi
c0018da1:	5d                   	pop    ebp
c0018da2:	c3                   	ret    
c0018da3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da6:	f6 c4 02             	test   ah,0x2
c0018da9:	75 39                	jne    c0018de4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018dab:	89 c2                	mov    edx,eax
c0018dad:	81 e2 01 04 00 00    	and    edx,0x401
c0018db3:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018db9:	74 73                	je     c0018e2e <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018dbb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018dc0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018dc4:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018dca:	5b                   	pop    ebx
c0018dcb:	5e                   	pop    esi
c0018dcc:	5f                   	pop    edi
c0018dcd:	5d                   	pop    ebp
c0018dce:	c3                   	ret    
c0018dcf:	83 ec 0c             	sub    esp,0xc
c0018dd2:	68 8f 17 03 c0       	push   0xc003178f
c0018dd7:	e8 7a 74 00 00       	call   c0020256 <KePanic(char const*)>
c0018ddc:	83 c4 10             	add    esp,0x10
c0018ddf:	e9 73 ff ff ff       	jmp    c0018d57 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	89 de                	mov    esi,ebx
c0018de9:	68 f4 15 03 c0       	push   0xc00315f4
c0018dee:	e8 db 04 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018df3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018df7:	e8 aa d9 ff ff       	call   c00167a6 <Phys::allocatePage()>
c0018dfc:	ba 00 10 00 00       	mov    edx,0x1000
c0018e01:	89 d1                	mov    ecx,edx
c0018e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e05:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018e08:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018e0e:	09 c8                	or     eax,ecx
c0018e10:	83 c8 02             	or     eax,0x2
c0018e13:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018e16:	0f 20 d8             	mov    eax,cr3
c0018e19:	0f 22 d8             	mov    cr3,eax
c0018e1c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018e20:	89 df                	mov    edi,ebx
c0018e22:	89 d1                	mov    ecx,edx
c0018e24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e26:	83 c4 10             	add    esp,0x10
c0018e29:	e9 66 ff ff ff       	jmp    c0018d94 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0018e2e:	c1 e8 0c             	shr    eax,0xc
c0018e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e35:	e8 6c d9 ff ff       	call   c00167a6 <Phys::allocatePage()>
c0018e3a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018e3d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0018e43:	09 c2                	or     edx,eax
c0018e45:	81 ca 01 08 00 00    	or     edx,0x801
c0018e4b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0018e4e:	a1 ac 3c 03 c0       	mov    eax,ds:0xc0033cac
c0018e53:	85 c0                	test   eax,eax
c0018e55:	7e 44                	jle    c0018e9b <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0018e57:	89 df                	mov    edi,ebx
c0018e59:	31 f6                	xor    esi,esi
c0018e5b:	83 ec 0c             	sub    esp,0xc
c0018e5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018e62:	51                   	push   ecx
c0018e63:	e8 90 f2 ff ff       	call   c00180f8 <Virt::swapIDToSector(unsigned long)>
c0018e68:	31 d2                	xor    edx,edx
c0018e6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018e6d:	81 c7 00 02 00 00    	add    edi,0x200
c0018e73:	6a 01                	push   0x1
c0018e75:	52                   	push   edx
c0018e76:	01 f0                	add    eax,esi
c0018e78:	83 c6 01             	add    esi,0x1
c0018e7b:	50                   	push   eax
c0018e7c:	0f be 05 b8 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033cb8
c0018e83:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0018e8a:	55                   	push   ebp
c0018e8b:	e8 ca 38 00 00       	call   c001c75a <LogicalDisk::read(unsigned long long, int, void*)>
c0018e90:	83 c4 20             	add    esp,0x20
c0018e93:	39 35 ac 3c 03 c0    	cmp    DWORD PTR ds:0xc0033cac,esi
c0018e99:	7f c0                	jg     c0018e5b <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0018e9b:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018ea0:	83 ec 04             	sub    esp,0x4
c0018ea3:	83 e8 01             	sub    eax,0x1
c0018ea6:	50                   	push   eax
c0018ea7:	53                   	push   ebx
c0018ea8:	68 b4 17 03 c0       	push   0xc00317b4
c0018ead:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018eb2:	e8 17 04 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018eb7:	58                   	pop    eax
c0018eb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ebc:	52                   	push   edx
c0018ebd:	e8 13 f2 ff ff       	call   c00180d5 <Virt::freeSwapfilePage(unsigned long)>
c0018ec2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	83 e8 01             	sub    eax,0x1
c0018ecd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018ed2:	85 c0                	test   eax,eax
c0018ed4:	75 01                	jne    c0018ed7 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0018ed6:	fb                   	sti    
c0018ed7:	0f 20 d8             	mov    eax,cr3
c0018eda:	0f 22 d8             	mov    cr3,eax
c0018edd:	e9 b2 fe ff ff       	jmp    c0018d94 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0018ee2 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018ee2:	55                   	push   ebp
c0018ee3:	57                   	push   edi
c0018ee4:	56                   	push   esi
c0018ee5:	53                   	push   ebx
c0018ee6:	83 ec 28             	sub    esp,0x28
c0018ee9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018eed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018ef1:	50                   	push   eax
c0018ef2:	e8 c2 f0 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c0018ef7:	83 c4 0c             	add    esp,0xc
c0018efa:	6a 07                	push   0x7
c0018efc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018f00:	52                   	push   edx
c0018f01:	89 c5                	mov    ebp,eax
c0018f03:	53                   	push   ebx
c0018f04:	e8 c1 f8 ff ff       	call   c00187ca <VAS::allocatePages(int, int)>
c0018f09:	83 c4 10             	add    esp,0x10
c0018f0c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018f10:	89 c7                	mov    edi,eax
c0018f12:	85 c9                	test   ecx,ecx
c0018f14:	74 2f                	je     c0018f45 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018f16:	31 f6                	xor    esi,esi
c0018f18:	e8 89 d8 ff ff       	call   c00167a6 <Phys::allocatePage()>
c0018f1d:	83 c6 01             	add    esi,0x1
c0018f20:	6a 03                	push   0x3
c0018f22:	55                   	push   ebp
c0018f23:	50                   	push   eax
c0018f24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f28:	53                   	push   ebx
c0018f29:	e8 94 f7 ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018f2e:	6a 07                	push   0x7
c0018f30:	57                   	push   edi
c0018f31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f35:	50                   	push   eax
c0018f36:	53                   	push   ebx
c0018f37:	e8 86 f7 ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018f3c:	83 c4 20             	add    esp,0x20
c0018f3f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0018f43:	75 d3                	jne    c0018f18 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018f45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f49:	89 28                	mov    DWORD PTR [eax],ebp
c0018f4b:	83 c4 1c             	add    esp,0x1c
c0018f4e:	89 f8                	mov    eax,edi
c0018f50:	5b                   	pop    ebx
c0018f51:	5e                   	pop    esi
c0018f52:	5f                   	pop    edi
c0018f53:	5d                   	pop    ebp
c0018f54:	c3                   	ret    
c0018f55:	90                   	nop

c0018f56 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018f56:	53                   	push   ebx
c0018f57:	83 ec 14             	sub    esp,0x14
c0018f5a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018f5e:	68 14 16 03 c0       	push   0xc0031614
c0018f63:	e8 66 03 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018f68:	c7 04 24 74 16 03 c0 	mov    DWORD PTR [esp],0xc0031674
c0018f6f:	e8 5a 03 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0018f74:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018f78:	83 c4 18             	add    esp,0x18
c0018f7b:	5b                   	pop    ebx
c0018f7c:	e9 4c f3 ff ff       	jmp    c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c0018f81:	90                   	nop

c0018f82 <VAS::scanForEviction()>:
c0018f82:	57                   	push   edi
c0018f83:	56                   	push   esi
c0018f84:	31 f6                	xor    esi,esi
c0018f86:	53                   	push   ebx
c0018f87:	83 ec 10             	sub    esp,0x10
c0018f8a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018f8e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f91:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f97:	75 0e                	jne    c0018fa7 <VAS::scanForEviction()+0x25>
c0018f99:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f9c:	89 da                	mov    edx,ebx
c0018f9e:	c1 ea 16             	shr    edx,0x16
c0018fa1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018fa5:	74 57                	je     c0018ffe <VAS::scanForEviction()+0x7c>
c0018fa7:	53                   	push   ebx
c0018fa8:	57                   	push   edi
c0018fa9:	e8 00 f3 ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0018fae:	5a                   	pop    edx
c0018faf:	59                   	pop    ecx
c0018fb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0018fb2:	89 d1                	mov    ecx,edx
c0018fb4:	c1 e9 0c             	shr    ecx,0xc
c0018fb7:	74 10                	je     c0018fc9 <VAS::scanForEviction()+0x47>
c0018fb9:	89 d1                	mov    ecx,edx
c0018fbb:	81 e1 01 08 00 00    	and    ecx,0x801
c0018fc1:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018fc7:	74 40                	je     c0019009 <VAS::scanForEviction()+0x87>
c0018fc9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018fcf:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018fd5:	76 2d                	jbe    c0019004 <VAS::scanForEviction()+0x82>
c0018fd7:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018fde:	83 c6 01             	add    esi,0x1
c0018fe1:	83 fe 03             	cmp    esi,0x3
c0018fe4:	74 32                	je     c0019018 <VAS::scanForEviction()+0x96>
c0018fe6:	31 db                	xor    ebx,ebx
c0018fe8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018fee:	75 b7                	jne    c0018fa7 <VAS::scanForEviction()+0x25>
c0018ff0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018ff3:	89 da                	mov    edx,ebx
c0018ff5:	c1 ea 16             	shr    edx,0x16
c0018ff8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ffc:	75 a9                	jne    c0018fa7 <VAS::scanForEviction()+0x25>
c0018ffe:	81 c3 00 00 40 00    	add    ebx,0x400000
c0019004:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0019007:	eb 88                	jmp    c0018f91 <VAS::scanForEviction()+0xf>
c0019009:	f6 c2 20             	test   dl,0x20
c001900c:	74 13                	je     c0019021 <VAS::scanForEviction()+0x9f>
c001900e:	83 e2 df             	and    edx,0xffffffdf
c0019011:	89 10                	mov    DWORD PTR [eax],edx
c0019013:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019016:	eb b1                	jmp    c0018fc9 <VAS::scanForEviction()+0x47>
c0019018:	83 c4 10             	add    esp,0x10
c001901b:	31 c0                	xor    eax,eax
c001901d:	5b                   	pop    ebx
c001901e:	5e                   	pop    esi
c001901f:	5f                   	pop    edi
c0019020:	c3                   	ret    
c0019021:	89 d0                	mov    eax,edx
c0019023:	83 ec 08             	sub    esp,0x8
c0019026:	25 00 f0 ff ff       	and    eax,0xfffff000
c001902b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001902f:	53                   	push   ebx
c0019030:	68 c9 17 03 c0       	push   0xc00317c9
c0019035:	e8 94 02 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001903a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001903d:	58                   	pop    eax
c001903e:	5a                   	pop    edx
c001903f:	51                   	push   ecx
c0019040:	57                   	push   edi
c0019041:	e8 1a fc ff ff       	call   c0018c60 <VAS::evict(unsigned long)>
c0019046:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0019049:	5b                   	pop    ebx
c001904a:	5e                   	pop    esi
c001904b:	50                   	push   eax
c001904c:	68 dd 17 03 c0       	push   0xc00317dd
c0019051:	e8 78 02 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019056:	58                   	pop    eax
c0019057:	5a                   	pop    edx
c0019058:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001905c:	50                   	push   eax
c001905d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019061:	68 f0 17 03 c0       	push   0xc00317f0
c0019066:	e8 63 02 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001906b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	81 c1 00 10 00 00    	add    ecx,0x1000
c0019077:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001907a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001907e:	83 c4 10             	add    esp,0x10
c0019081:	5b                   	pop    ebx
c0019082:	5e                   	pop    esi
c0019083:	5f                   	pop    edi
c0019084:	c3                   	ret    

c0019085 <mapVASFirstTime>:
c0019085:	55                   	push   ebp
c0019086:	57                   	push   edi
c0019087:	56                   	push   esi
c0019088:	53                   	push   ebx
c0019089:	83 ec 0c             	sub    esp,0xc
c001908c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019091:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0019094:	83 fa 01             	cmp    edx,0x1
c0019097:	0f 84 cb 00 00 00    	je     c0019168 <mapVASFirstTime+0xe3>
c001909d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00190a0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00190a5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00190aa:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00190ad:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00190b3:	c1 e5 15             	shl    ebp,0x15
c00190b6:	29 eb                	sub    ebx,ebp
c00190b8:	29 ef                	sub    edi,ebp
c00190ba:	e8 e7 d6 ff ff       	call   c00167a6 <Phys::allocatePage()>
c00190bf:	83 ec 0c             	sub    esp,0xc
c00190c2:	68 03 04 00 00       	push   0x403
c00190c7:	6a 01                	push   0x1
c00190c9:	53                   	push   ebx
c00190ca:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00190d0:	50                   	push   eax
c00190d1:	56                   	push   esi
c00190d2:	e8 f5 f7 ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00190d7:	83 c4 20             	add    esp,0x20
c00190da:	39 fb                	cmp    ebx,edi
c00190dc:	75 dc                	jne    c00190ba <mapVASFirstTime+0x35>
c00190de:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00190e3:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00190e8:	29 eb                	sub    ebx,ebp
c00190ea:	29 ef                	sub    edi,ebp
c00190ec:	e8 b5 d6 ff ff       	call   c00167a6 <Phys::allocatePage()>
c00190f1:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00190f5:	83 fa 01             	cmp    edx,0x1
c00190f8:	19 d2                	sbb    edx,edx
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	83 e2 04             	and    edx,0x4
c0019100:	81 c2 03 04 00 00    	add    edx,0x403
c0019106:	52                   	push   edx
c0019107:	6a 01                	push   0x1
c0019109:	53                   	push   ebx
c001910a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019110:	50                   	push   eax
c0019111:	56                   	push   esi
c0019112:	e8 b5 f7 ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019117:	83 c4 20             	add    esp,0x20
c001911a:	39 df                	cmp    edi,ebx
c001911c:	75 ce                	jne    c00190ec <mapVASFirstTime+0x67>
c001911e:	83 ec 0c             	sub    esp,0xc
c0019121:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0019126:	6a 04                	push   0x4
c0019128:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c001912e:	6a ff                	push   0xffffffff
c0019130:	c1 eb 0c             	shr    ebx,0xc
c0019133:	53                   	push   ebx
c0019134:	68 00 50 03 c0       	push   0xc0035000
c0019139:	56                   	push   esi
c001913a:	e8 09 f3 ff ff       	call   c0018448 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001913f:	83 c4 14             	add    esp,0x14
c0019142:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0019147:	6a 04                	push   0x4
c0019149:	6a ff                	push   0xffffffff
c001914b:	53                   	push   ebx
c001914c:	68 00 50 03 c0       	push   0xc0035000
c0019151:	50                   	push   eax
c0019152:	e8 f1 f2 ff ff       	call   c0018448 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019157:	0f 20 d8             	mov    eax,cr3
c001915a:	0f 22 d8             	mov    cr3,eax
c001915d:	83 c4 20             	add    esp,0x20
c0019160:	83 c4 0c             	add    esp,0xc
c0019163:	5b                   	pop    ebx
c0019164:	5e                   	pop    esi
c0019165:	5f                   	pop    edi
c0019166:	5d                   	pop    ebp
c0019167:	c3                   	ret    
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	68 fd 17 03 c0       	push   0xc00317fd
c0019170:	e8 59 01 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	5b                   	pop    ebx
c001917c:	5e                   	pop    esi
c001917d:	5f                   	pop    edi
c001917e:	5d                   	pop    ebp
c001917f:	c3                   	ret    

c0019180 <__cxa_atexit>:
c0019180:	31 c0                	xor    eax,eax
c0019182:	c3                   	ret    

c0019183 <__cxa_finalize>:
c0019183:	c3                   	ret    

c0019184 <__stack_chk_fail>:
c0019184:	55                   	push   ebp
c0019185:	89 e5                	mov    ebp,esp
c0019187:	83 ec 10             	sub    esp,0x10
c001918a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001918d:	68 16 18 03 c0       	push   0xc0031816
c0019192:	e8 37 01 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019197:	58                   	pop    eax
c0019198:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001919b:	5a                   	pop    edx
c001919c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001919f:	68 16 18 03 c0       	push   0xc0031816
c00191a4:	e8 25 01 00 00       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00191a9:	c7 04 24 1e 18 03 c0 	mov    DWORD PTR [esp],0xc003181e
c00191b0:	e8 a1 70 00 00       	call   c0020256 <KePanic(char const*)>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	c9                   	leave  
c00191b9:	c3                   	ret    

c00191ba <__cxa_pure_virtual>:
c00191ba:	83 ec 18             	sub    esp,0x18
c00191bd:	68 36 18 03 c0       	push   0xc0031836
c00191c2:	e8 8f 70 00 00       	call   c0020256 <KePanic(char const*)>
c00191c7:	83 c4 1c             	add    esp,0x1c
c00191ca:	c3                   	ret    

c00191cb <operator new[](unsigned long)>:
c00191cb:	e9 c7 d2 ff ff       	jmp    c0016497 <malloc>

c00191d0 <operator delete(void*, unsigned long)>:
c00191d0:	e9 e2 d2 ff ff       	jmp    c00164b7 <rfree>

c00191d5 <operator delete[](void*)>:
c00191d5:	e9 dd d2 ff ff       	jmp    c00164b7 <rfree>

c00191da <operator delete[](void*, unsigned long)>:
c00191da:	e9 d8 d2 ff ff       	jmp    c00164b7 <rfree>

c00191df <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00191df:	55                   	push   ebp
c00191e0:	57                   	push   edi
c00191e1:	56                   	push   esi
c00191e2:	53                   	push   ebx
c00191e3:	83 ec 20             	sub    esp,0x20
c00191e6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00191ea:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c00191f2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00191f6:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c00191fe:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019202:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c001920a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0019212:	89 f7                	mov    edi,esi
c0019214:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019219:	89 eb                	mov    ebx,ebp
c001921b:	eb 02                	jmp    c001921f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c001921d:	89 c7                	mov    edi,eax
c001921f:	31 d2                	xor    edx,edx
c0019221:	89 f8                	mov    eax,edi
c0019223:	f7 f1                	div    ecx
c0019225:	83 c3 01             	add    ebx,0x1
c0019228:	39 cf                	cmp    edi,ecx
c001922a:	73 f1                	jae    c001921d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c001922c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001922f:	eb 02                	jmp    c0019233 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019231:	89 c6                	mov    esi,eax
c0019233:	31 d2                	xor    edx,edx
c0019235:	89 f0                	mov    eax,esi
c0019237:	f7 f1                	div    ecx
c0019239:	83 eb 01             	sub    ebx,0x1
c001923c:	39 ce                	cmp    esi,ecx
c001923e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019242:	88 13                	mov    BYTE PTR [ebx],dl
c0019244:	73 eb                	jae    c0019231 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0019246:	83 c4 20             	add    esp,0x20
c0019249:	89 e8                	mov    eax,ebp
c001924b:	5b                   	pop    ebx
c001924c:	5e                   	pop    esi
c001924d:	5f                   	pop    edi
c001924e:	5d                   	pop    ebp
c001924f:	c3                   	ret    

c0019250 <Dbg::logc(char)>:
c0019250:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019257:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001925b:	75 12                	jne    c001926f <Dbg::logc(char)+0x1f>
c001925d:	ba fd 03 00 00       	mov    edx,0x3fd
c0019262:	ec                   	in     al,dx
c0019263:	a8 20                	test   al,0x20
c0019265:	74 fb                	je     c0019262 <Dbg::logc(char)+0x12>
c0019267:	ba f8 03 00 00       	mov    edx,0x3f8
c001926c:	88 c8                	mov    al,cl
c001926e:	ee                   	out    dx,al
c001926f:	c3                   	ret    

c0019270 <Dbg::logs(char*)>:
c0019270:	53                   	push   ebx
c0019271:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019275:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019278:	85 c0                	test   eax,eax
c001927a:	74 11                	je     c001928d <Dbg::logs(char*)+0x1d>
c001927c:	50                   	push   eax
c001927d:	83 c3 01             	add    ebx,0x1
c0019280:	e8 cb ff ff ff       	call   c0019250 <Dbg::logc(char)>
c0019285:	58                   	pop    eax
c0019286:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019289:	85 c0                	test   eax,eax
c001928b:	75 ef                	jne    c001927c <Dbg::logs(char*)+0xc>
c001928d:	5b                   	pop    ebx
c001928e:	c3                   	ret    

c001928f <Dbg::logWriteInt(unsigned int)>:
c001928f:	83 ec 10             	sub    esp,0x10
c0019292:	6a 0a                	push   0xa
c0019294:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019298:	50                   	push   eax
c0019299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001929d:	50                   	push   eax
c001929e:	e8 3c ff ff ff       	call   c00191df <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00192a3:	50                   	push   eax
c00192a4:	e8 c7 ff ff ff       	call   c0019270 <Dbg::logs(char*)>
c00192a9:	83 c4 20             	add    esp,0x20
c00192ac:	c3                   	ret    

c00192ad <Dbg::logWriteIntBase(unsigned int, int)>:
c00192ad:	83 ec 10             	sub    esp,0x10
c00192b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192b4:	50                   	push   eax
c00192b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192b9:	50                   	push   eax
c00192ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00192be:	52                   	push   edx
c00192bf:	e8 1b ff ff ff       	call   c00191df <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00192c4:	50                   	push   eax
c00192c5:	e8 a6 ff ff ff       	call   c0019270 <Dbg::logs(char*)>
c00192ca:	83 c4 20             	add    esp,0x20
c00192cd:	c3                   	ret    

c00192ce <Dbg::kprintf(char const*, ...)>:
c00192ce:	55                   	push   ebp
c00192cf:	57                   	push   edi
c00192d0:	56                   	push   esi
c00192d1:	53                   	push   ebx
c00192d2:	83 ec 0c             	sub    esp,0xc
c00192d5:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00192dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192e0:	74 08                	je     c00192ea <Dbg::kprintf(char const*, ...)+0x1c>
c00192e2:	83 c4 0c             	add    esp,0xc
c00192e5:	5b                   	pop    ebx
c00192e6:	5e                   	pop    esi
c00192e7:	5f                   	pop    edi
c00192e8:	5d                   	pop    ebp
c00192e9:	c3                   	ret    
c00192ea:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192ee:	31 ff                	xor    edi,edi
c00192f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00192f7:	85 c0                	test   eax,eax
c00192f9:	74 e7                	je     c00192e2 <Dbg::kprintf(char const*, ...)+0x14>
c00192fb:	8d 77 01             	lea    esi,[edi+0x1]
c00192fe:	83 f8 25             	cmp    eax,0x25
c0019301:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019304:	75 47                	jne    c001934d <Dbg::kprintf(char const*, ...)+0x7f>
c0019306:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019309:	83 c7 02             	add    edi,0x2
c001930c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001930f:	83 e8 25             	sub    eax,0x25
c0019312:	0f b6 c0             	movzx  eax,al
c0019315:	83 f8 53             	cmp    eax,0x53
c0019318:	0f 87 ce 00 00 00    	ja     c00193ec <Dbg::kprintf(char const*, ...)+0x11e>
c001931e:	ff 24 85 4c 18 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce7b4]
c0019325:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019329:	89 c8                	mov    eax,ecx
c001932b:	83 c1 04             	add    ecx,0x4
c001932e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019332:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019334:	55                   	push   ebp
c0019335:	e8 55 ff ff ff       	call   c001928f <Dbg::logWriteInt(unsigned int)>
c001933a:	58                   	pop    eax
c001933b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001933e:	85 c0                	test   eax,eax
c0019340:	74 a0                	je     c00192e2 <Dbg::kprintf(char const*, ...)+0x14>
c0019342:	8d 77 01             	lea    esi,[edi+0x1]
c0019345:	83 f8 25             	cmp    eax,0x25
c0019348:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001934b:	74 b9                	je     c0019306 <Dbg::kprintf(char const*, ...)+0x38>
c001934d:	50                   	push   eax
c001934e:	89 f7                	mov    edi,esi
c0019350:	e8 fb fe ff ff       	call   c0019250 <Dbg::logc(char)>
c0019355:	89 ee                	mov    esi,ebp
c0019357:	58                   	pop    eax
c0019358:	eb e1                	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c001935a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001935e:	89 c8                	mov    eax,ecx
c0019360:	83 c1 04             	add    ecx,0x4
c0019363:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019367:	8b 00                	mov    eax,DWORD PTR [eax]
c0019369:	50                   	push   eax
c001936a:	e8 01 ff ff ff       	call   c0019270 <Dbg::logs(char*)>
c001936f:	58                   	pop    eax
c0019370:	eb c9                	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c0019372:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019376:	89 d0                	mov    eax,edx
c0019378:	83 c2 04             	add    edx,0x4
c001937b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001937f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019381:	50                   	push   eax
c0019382:	e8 08 ff ff ff       	call   c001928f <Dbg::logWriteInt(unsigned int)>
c0019387:	58                   	pop    eax
c0019388:	eb b1                	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c001938a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001938e:	89 d0                	mov    eax,edx
c0019390:	83 c2 04             	add    edx,0x4
c0019393:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019397:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001939a:	50                   	push   eax
c001939b:	e8 b0 fe ff ff       	call   c0019250 <Dbg::logc(char)>
c00193a0:	58                   	pop    eax
c00193a1:	eb 98                	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c00193a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193a7:	89 c8                	mov    eax,ecx
c00193a9:	83 c1 04             	add    ecx,0x4
c00193ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00193b0:	6a 10                	push   0x10
c00193b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00193b4:	51                   	push   ecx
c00193b5:	e8 f3 fe ff ff       	call   c00192ad <Dbg::logWriteIntBase(unsigned int, int)>
c00193ba:	5d                   	pop    ebp
c00193bb:	58                   	pop    eax
c00193bc:	e9 7a ff ff ff       	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c00193c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00193c5:	89 d0                	mov    eax,edx
c00193c7:	83 c2 08             	add    edx,0x8
c00193ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00193ce:	6a 10                	push   0x10
c00193d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00193d2:	50                   	push   eax
c00193d3:	e8 d5 fe ff ff       	call   c00192ad <Dbg::logWriteIntBase(unsigned int, int)>
c00193d8:	58                   	pop    eax
c00193d9:	5a                   	pop    edx
c00193da:	e9 5c ff ff ff       	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c00193df:	6a 25                	push   0x25
c00193e1:	e8 6a fe ff ff       	call   c0019250 <Dbg::logc(char)>
c00193e6:	5a                   	pop    edx
c00193e7:	e9 4f ff ff ff       	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>
c00193ec:	6a 25                	push   0x25
c00193ee:	e8 5d fe ff ff       	call   c0019250 <Dbg::logc(char)>
c00193f3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00193f7:	50                   	push   eax
c00193f8:	e8 53 fe ff ff       	call   c0019250 <Dbg::logc(char)>
c00193fd:	5a                   	pop    edx
c00193fe:	59                   	pop    ecx
c00193ff:	e9 37 ff ff ff       	jmp    c001933b <Dbg::kprintf(char const*, ...)+0x6d>

c0019404 <KiUbsanPrintDetails(char const*, void*)>:
c0019404:	83 ec 1c             	sub    esp,0x1c
c0019407:	83 ec 08             	sub    esp,0x8
c001940a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001940e:	68 9c 19 03 c0       	push   0xc003199c
c0019413:	e8 b6 fe ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001941f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019423:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019427:	8b 00                	mov    eax,DWORD PTR [eax]
c0019429:	83 ec 08             	sub    esp,0x8
c001942c:	50                   	push   eax
c001942d:	68 b0 19 03 c0       	push   0xc00319b0
c0019432:	e8 97 fe ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001943e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019441:	83 ec 08             	sub    esp,0x8
c0019444:	50                   	push   eax
c0019445:	68 ba 19 03 c0       	push   0xc00319ba
c001944a:	e8 7f fe ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019456:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019459:	83 ec 08             	sub    esp,0x8
c001945c:	50                   	push   eax
c001945d:	68 c4 19 03 c0       	push   0xc00319c4
c0019462:	e8 67 fe ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	90                   	nop
c001946b:	83 c4 1c             	add    esp,0x1c
c001946e:	c3                   	ret    
c001946f:	90                   	nop

c0019470 <__ubsan_handle_type_mismatch_v1>:
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	83 ec 08             	sub    esp,0x8
c0019476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001947a:	68 08 1b 03 c0       	push   0xc0031b08
c001947f:	e8 80 ff ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001948c:	75 16                	jne    c00194a4 <__ubsan_handle_type_mismatch_v1+0x34>
c001948e:	83 ec 0c             	sub    esp,0xc
c0019491:	68 ce 19 03 c0       	push   0xc00319ce
c0019496:	e8 33 fe ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	e9 91 00 00 00       	jmp    c0019534 <__ubsan_handle_type_mismatch_v1+0xc4>
c00194a3:	90                   	nop
c00194a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00194ab:	85 c0                	test   eax,eax
c00194ad:	74 29                	je     c00194d8 <__ubsan_handle_type_mismatch_v1+0x68>
c00194af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00194b6:	83 e8 01             	sub    eax,0x1
c00194b9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00194bd:	75 19                	jne    c00194d8 <__ubsan_handle_type_mismatch_v1+0x68>
c00194bf:	83 ec 08             	sub    esp,0x8
c00194c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194c6:	68 28 1b 03 c0       	push   0xc0031b28
c00194cb:	e8 fe fd ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	eb 5f                	jmp    c0019534 <__ubsan_handle_type_mismatch_v1+0xc4>
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	68 e3 19 03 c0       	push   0xc00319e3
c00194e0:	e8 e9 fd ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194ec:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00194ef:	0f b6 c0             	movzx  eax,al
c00194f2:	83 ec 08             	sub    esp,0x8
c00194f5:	50                   	push   eax
c00194f6:	68 fd 19 03 c0       	push   0xc00319fd
c00194fb:	e8 ce fd ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019507:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001950a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c001950d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019515:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019518:	0f b6 c0             	movzx  eax,al
c001951b:	8b 04 85 c0 3c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc340]
c0019522:	51                   	push   ecx
c0019523:	52                   	push   edx
c0019524:	50                   	push   eax
c0019525:	68 50 1b 03 c0       	push   0xc0031b50
c001952a:	e8 9f fd ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	66 90                	xchg   ax,ax
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	68 08 1b 03 c0       	push   0xc0031b08
c001953c:	e8 15 6d 00 00       	call   c0020256 <KePanic(char const*)>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	90                   	nop
c0019545:	83 c4 0c             	add    esp,0xc
c0019548:	c3                   	ret    
c0019549:	8d 76 00             	lea    esi,[esi+0x0]

c001954c <__ubsan_handle_pointer_overflow>:
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	83 ec 08             	sub    esp,0x8
c0019552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019556:	68 98 1b 03 c0       	push   0xc0031b98
c001955b:	e8 a4 fe ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	68 98 1b 03 c0       	push   0xc0031b98
c001956b:	e8 e6 6c 00 00       	call   c0020256 <KePanic(char const*)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	90                   	nop
c0019574:	83 c4 0c             	add    esp,0xc
c0019577:	c3                   	ret    

c0019578 <__ubsan_handle_out_of_bounds>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	83 ec 08             	sub    esp,0x8
c001957e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019582:	68 08 1a 03 c0       	push   0xc0031a08
c0019587:	e8 78 fe ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	83 ec 0c             	sub    esp,0xc
c0019592:	68 08 1a 03 c0       	push   0xc0031a08
c0019597:	e8 ba 6c 00 00       	call   c0020256 <KePanic(char const*)>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	90                   	nop
c00195a0:	83 c4 0c             	add    esp,0xc
c00195a3:	c3                   	ret    

c00195a4 <__ubsan_handle_add_overflow>:
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	83 ec 08             	sub    esp,0x8
c00195aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ae:	68 25 1a 03 c0       	push   0xc0031a25
c00195b3:	e8 4c fe ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	83 ec 0c             	sub    esp,0xc
c00195be:	68 25 1a 03 c0       	push   0xc0031a25
c00195c3:	e8 8e 6c 00 00       	call   c0020256 <KePanic(char const*)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	90                   	nop
c00195cc:	83 c4 0c             	add    esp,0xc
c00195cf:	c3                   	ret    

c00195d0 <__ubsan_handle_load_invalid_value>:
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	83 ec 08             	sub    esp,0x8
c00195d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195da:	68 b8 1b 03 c0       	push   0xc0031bb8
c00195df:	e8 20 fe ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c00195e4:	83 c4 10             	add    esp,0x10
c00195e7:	83 ec 0c             	sub    esp,0xc
c00195ea:	68 b8 1b 03 c0       	push   0xc0031bb8
c00195ef:	e8 62 6c 00 00       	call   c0020256 <KePanic(char const*)>
c00195f4:	83 c4 10             	add    esp,0x10
c00195f7:	90                   	nop
c00195f8:	83 c4 0c             	add    esp,0xc
c00195fb:	c3                   	ret    

c00195fc <__ubsan_handle_divrem_overflow>:
c00195fc:	83 ec 0c             	sub    esp,0xc
c00195ff:	83 ec 08             	sub    esp,0x8
c0019602:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019606:	68 dc 1b 03 c0       	push   0xc0031bdc
c001960b:	e8 f4 fd ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	83 ec 0c             	sub    esp,0xc
c0019616:	68 dc 1b 03 c0       	push   0xc0031bdc
c001961b:	e8 36 6c 00 00       	call   c0020256 <KePanic(char const*)>
c0019620:	83 c4 10             	add    esp,0x10
c0019623:	90                   	nop
c0019624:	83 c4 0c             	add    esp,0xc
c0019627:	c3                   	ret    

c0019628 <__ubsan_handle_mul_overflow>:
c0019628:	83 ec 0c             	sub    esp,0xc
c001962b:	83 ec 08             	sub    esp,0x8
c001962e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019632:	68 41 1a 03 c0       	push   0xc0031a41
c0019637:	e8 c8 fd ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	68 41 1a 03 c0       	push   0xc0031a41
c0019647:	e8 0a 6c 00 00       	call   c0020256 <KePanic(char const*)>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	90                   	nop
c0019650:	83 c4 0c             	add    esp,0xc
c0019653:	c3                   	ret    

c0019654 <__ubsan_handle_sub_overflow>:
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	83 ec 08             	sub    esp,0x8
c001965a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001965e:	68 5d 1a 03 c0       	push   0xc0031a5d
c0019663:	e8 9c fd ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c0019668:	83 c4 10             	add    esp,0x10
c001966b:	83 ec 0c             	sub    esp,0xc
c001966e:	68 5d 1a 03 c0       	push   0xc0031a5d
c0019673:	e8 de 6b 00 00       	call   c0020256 <KePanic(char const*)>
c0019678:	83 c4 10             	add    esp,0x10
c001967b:	90                   	nop
c001967c:	83 c4 0c             	add    esp,0xc
c001967f:	c3                   	ret    

c0019680 <__ubsan_handle_shift_out_of_bounds>:
c0019680:	83 ec 0c             	sub    esp,0xc
c0019683:	83 ec 08             	sub    esp,0x8
c0019686:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001968a:	68 fc 1b 03 c0       	push   0xc0031bfc
c001968f:	e8 70 fd ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	83 ec 0c             	sub    esp,0xc
c001969a:	68 fc 1b 03 c0       	push   0xc0031bfc
c001969f:	e8 b2 6b 00 00       	call   c0020256 <KePanic(char const*)>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	90                   	nop
c00196a8:	83 c4 0c             	add    esp,0xc
c00196ab:	c3                   	ret    

c00196ac <__ubsan_handle_negate_overflow>:
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	83 ec 08             	sub    esp,0x8
c00196b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b6:	68 20 1c 03 c0       	push   0xc0031c20
c00196bb:	e8 44 fd ff ff       	call   c0019404 <KiUbsanPrintDetails(char const*, void*)>
c00196c0:	83 c4 10             	add    esp,0x10
c00196c3:	83 ec 0c             	sub    esp,0xc
c00196c6:	68 20 1c 03 c0       	push   0xc0031c20
c00196cb:	e8 86 6b 00 00       	call   c0020256 <KePanic(char const*)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	90                   	nop
c00196d4:	83 c4 0c             	add    esp,0xc
c00196d7:	c3                   	ret    

c00196d8 <KiIsHashInTable(unsigned short)>:
c00196d8:	0f b7 d0             	movzx  edx,ax
c00196db:	83 e0 07             	and    eax,0x7
c00196de:	c1 fa 03             	sar    edx,0x3
c00196e1:	88 c1                	mov    cl,al
c00196e3:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00196ea:	d3 fa                	sar    edx,cl
c00196ec:	89 d0                	mov    eax,edx
c00196ee:	83 e0 01             	and    eax,0x1
c00196f1:	c3                   	ret    

c00196f2 <KiSetHashInTable(unsigned short, bool)>:
c00196f2:	56                   	push   esi
c00196f3:	53                   	push   ebx
c00196f4:	0f b7 d8             	movzx  ebx,ax
c00196f7:	c1 fb 03             	sar    ebx,0x3
c00196fa:	83 e0 07             	and    eax,0x7
c00196fd:	89 c1                	mov    ecx,eax
c00196ff:	b8 01 00 00 00       	mov    eax,0x1
c0019704:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001970b:	d3 e0                	shl    eax,cl
c001970d:	84 d2                	test   dl,dl
c001970f:	74 04                	je     c0019715 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019711:	09 f0                	or     eax,esi
c0019713:	eb 04                	jmp    c0019719 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019715:	f7 d0                	not    eax
c0019717:	21 f0                	and    eax,esi
c0019719:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c001971f:	5b                   	pop    ebx
c0019720:	5e                   	pop    esi
c0019721:	c3                   	ret    

c0019722 <KiFlushSymlinkChanges()>:
c0019722:	57                   	push   edi
c0019723:	56                   	push   esi
c0019724:	53                   	push   ebx
c0019725:	83 ec 1c             	sub    esp,0x1c
c0019728:	68 14 01 00 00       	push   0x114
c001972d:	e8 65 cd ff ff       	call   c0016497 <malloc>
c0019732:	83 c4 0c             	add    esp,0xc
c0019735:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001973b:	68 3f 1c 03 c0       	push   0xc0031c3f
c0019740:	50                   	push   eax
c0019741:	89 c3                	mov    ebx,eax
c0019743:	e8 9e 0d 00 00       	call   c001a4e6 <File::File(char const*, Process*)>
c0019748:	83 c4 10             	add    esp,0x10
c001974b:	85 db                	test   ebx,ebx
c001974d:	75 10                	jne    c001975f <KiFlushSymlinkChanges()+0x3d>
c001974f:	83 ec 0c             	sub    esp,0xc
c0019752:	68 5d 1c 03 c0       	push   0xc0031c5d
c0019757:	e8 fa 6a 00 00       	call   c0020256 <KePanic(char const*)>
c001975c:	83 c4 10             	add    esp,0x10
c001975f:	50                   	push   eax
c0019760:	50                   	push   eax
c0019761:	6a 06                	push   0x6
c0019763:	53                   	push   ebx
c0019764:	e8 9b 0d 00 00       	call   c001a504 <File::open(FileOpenMode)>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	85 c0                	test   eax,eax
c001976e:	74 10                	je     c0019780 <KiFlushSymlinkChanges()+0x5e>
c0019770:	83 ec 0c             	sub    esp,0xc
c0019773:	68 77 1c 03 c0       	push   0xc0031c77
c0019778:	e8 d9 6a 00 00       	call   c0020256 <KePanic(char const*)>
c001977d:	83 c4 10             	add    esp,0x10
c0019780:	31 f6                	xor    esi,esi
c0019782:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019788:	7e 70                	jle    c00197fa <KiFlushSymlinkChanges()+0xd8>
c001978a:	83 ec 0c             	sub    esp,0xc
c001978d:	89 f0                	mov    eax,esi
c001978f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019791:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019795:	c1 e0 08             	shl    eax,0x8
c0019798:	57                   	push   edi
c0019799:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001979e:	50                   	push   eax
c001979f:	6a 00                	push   0x0
c00197a1:	68 00 01 00 00       	push   0x100
c00197a6:	53                   	push   ebx
c00197a7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00197aa:	83 c4 20             	add    esp,0x20
c00197ad:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00197b5:	74 10                	je     c00197c7 <KiFlushSymlinkChanges()+0xa5>
c00197b7:	83 ec 0c             	sub    esp,0xc
c00197ba:	68 91 1c 03 c0       	push   0xc0031c91
c00197bf:	e8 92 6a 00 00       	call   c0020256 <KePanic(char const*)>
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197c9:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c00197d0:	83 ec 0c             	sub    esp,0xc
c00197d3:	57                   	push   edi
c00197d4:	52                   	push   edx
c00197d5:	6a 00                	push   0x0
c00197d7:	6a 08                	push   0x8
c00197d9:	53                   	push   ebx
c00197da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00197dd:	83 c4 20             	add    esp,0x20
c00197e0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00197e5:	74 10                	je     c00197f7 <KiFlushSymlinkChanges()+0xd5>
c00197e7:	83 ec 0c             	sub    esp,0xc
c00197ea:	68 ab 1c 03 c0       	push   0xc0031cab
c00197ef:	e8 62 6a 00 00       	call   c0020256 <KePanic(char const*)>
c00197f4:	83 c4 10             	add    esp,0x10
c00197f7:	46                   	inc    esi
c00197f8:	eb 88                	jmp    c0019782 <KiFlushSymlinkChanges()+0x60>
c00197fa:	83 ec 0c             	sub    esp,0xc
c00197fd:	53                   	push   ebx
c00197fe:	e8 5f 0d 00 00       	call   c001a562 <File::close()>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	85 db                	test   ebx,ebx
c0019808:	74 0c                	je     c0019816 <KiFlushSymlinkChanges()+0xf4>
c001980a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001980c:	83 ec 0c             	sub    esp,0xc
c001980f:	53                   	push   ebx
c0019810:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019820:	83 c4 10             	add    esp,0x10
c0019823:	5b                   	pop    ebx
c0019824:	5e                   	pop    esi
c0019825:	5f                   	pop    edi
c0019826:	c3                   	ret    

c0019827 <KiDeinitialiseSymlinks(void*)>:
c0019827:	e9 f6 fe ff ff       	jmp    c0019722 <KiFlushSymlinkChanges()>

c001982c <KiGetSymlinkHash(char const*)>:
c001982c:	53                   	push   ebx
c001982d:	89 c3                	mov    ebx,eax
c001982f:	83 ec 14             	sub    esp,0x14
c0019832:	50                   	push   eax
c0019833:	e8 48 6d fe ff       	call   c0000580 <strlen>
c0019838:	5a                   	pop    edx
c0019839:	59                   	pop    ecx
c001983a:	50                   	push   eax
c001983b:	53                   	push   ebx
c001983c:	e8 7c 63 00 00       	call   c001fbbd <KeCalculateCRC32(unsigned char*, int)>
c0019841:	83 c4 18             	add    esp,0x18
c0019844:	5b                   	pop    ebx
c0019845:	89 c2                	mov    edx,eax
c0019847:	c1 ea 10             	shr    edx,0x10
c001984a:	31 d0                	xor    eax,edx
c001984c:	c3                   	ret    

c001984d <KiCreateSymlinkID()>:
c001984d:	55                   	push   ebp
c001984e:	57                   	push   edi
c001984f:	56                   	push   esi
c0019850:	53                   	push   ebx
c0019851:	31 db                	xor    ebx,ebx
c0019853:	83 ec 1c             	sub    esp,0x1c
c0019856:	e8 49 6b 00 00       	call   c00203a4 <KeRand()>
c001985b:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019861:	31 d2                	xor    edx,edx
c0019863:	43                   	inc    ebx
c0019864:	31 ff                	xor    edi,edi
c0019866:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019869:	89 ee                	mov    esi,ebp
c001986b:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019871:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019875:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019879:	c1 e0 1f             	shl    eax,0x1f
c001987c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019882:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019886:	75 10                	jne    c0019898 <KiCreateSymlinkID()+0x4b>
c0019888:	83 ec 0c             	sub    esp,0xc
c001988b:	68 c5 1c 03 c0       	push   0xc0031cc5
c0019890:	e8 c1 69 00 00       	call   c0020256 <KePanic(char const*)>
c0019895:	83 c4 10             	add    esp,0x10
c0019898:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001989c:	75 06                	jne    c00198a4 <KiCreateSymlinkID()+0x57>
c001989e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00198a2:	74 b2                	je     c0019856 <KiCreateSymlinkID()+0x9>
c00198a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198ac:	83 c4 1c             	add    esp,0x1c
c00198af:	5b                   	pop    ebx
c00198b0:	31 f0                	xor    eax,esi
c00198b2:	5e                   	pop    esi
c00198b3:	31 fa                	xor    edx,edi
c00198b5:	5f                   	pop    edi
c00198b6:	5d                   	pop    ebp
c00198b7:	c3                   	ret    

c00198b8 <KeRegisterSymlink(char const*, unsigned long long)>:
c00198b8:	53                   	push   ebx
c00198b9:	83 ec 0c             	sub    esp,0xc
c00198bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00198c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00198c4:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00198cd:	68 00 01 00 00       	push   0x100
c00198d2:	6a 00                	push   0x0
c00198d4:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c00198db:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c00198e2:	c1 e0 08             	shl    eax,0x8
c00198e5:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00198ea:	50                   	push   eax
c00198eb:	e8 00 6c fe ff       	call   c00004f0 <memset>
c00198f0:	58                   	pop    eax
c00198f1:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198f6:	5a                   	pop    edx
c00198f7:	c1 e0 08             	shl    eax,0x8
c00198fa:	53                   	push   ebx
c00198fb:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019900:	50                   	push   eax
c0019901:	e8 4a 6d fe ff       	call   c0000650 <strcpy>
c0019906:	89 d8                	mov    eax,ebx
c0019908:	e8 1f ff ff ff       	call   c001982c <KiGetSymlinkHash(char const*)>
c001990d:	59                   	pop    ecx
c001990e:	0f b7 d8             	movzx  ebx,ax
c0019911:	58                   	pop    eax
c0019912:	53                   	push   ebx
c0019913:	68 ce 1c 03 c0       	push   0xc0031cce
c0019918:	e8 b1 f9 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001991d:	89 d8                	mov    eax,ebx
c001991f:	ba 01 00 00 00       	mov    edx,0x1
c0019924:	e8 c9 fd ff ff       	call   c00196f2 <KiSetHashInTable(unsigned short, bool)>
c0019929:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001992e:	83 c4 10             	add    esp,0x10
c0019931:	40                   	inc    eax
c0019932:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019937:	83 f8 03             	cmp    eax,0x3
c001993a:	7e 09                	jle    c0019945 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c001993c:	83 c4 08             	add    esp,0x8
c001993f:	5b                   	pop    ebx
c0019940:	e9 dd fd ff ff       	jmp    c0019722 <KiFlushSymlinkChanges()>
c0019945:	83 c4 08             	add    esp,0x8
c0019948:	5b                   	pop    ebx
c0019949:	c3                   	ret    

c001994a <KeInitialiseSymlinks()>:
c001994a:	57                   	push   edi
c001994b:	56                   	push   esi
c001994c:	53                   	push   ebx
c001994d:	81 ec 14 01 00 00    	sub    esp,0x114
c0019953:	68 00 20 00 00       	push   0x2000
c0019958:	6a 00                	push   0x0
c001995a:	68 00 af 03 c0       	push   0xc003af00
c001995f:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019969:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019973:	e8 78 6b fe ff       	call   c00004f0 <memset>
c0019978:	59                   	pop    ecx
c0019979:	5b                   	pop    ebx
c001997a:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019980:	68 e2 1c 03 c0       	push   0xc0031ce2
c0019985:	e8 44 f9 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001998a:	5e                   	pop    esi
c001998b:	5f                   	pop    edi
c001998c:	6a 00                	push   0x0
c001998e:	68 27 98 01 c0       	push   0xc0019827
c0019993:	e8 4a 60 00 00       	call   c001f9e2 <KeRegisterAtexit(void (*)(void*), void*)>
c0019998:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001999f:	e8 f3 ca ff ff       	call   c0016497 <malloc>
c00199a4:	83 c4 0c             	add    esp,0xc
c00199a7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00199ad:	68 3f 1c 03 c0       	push   0xc0031c3f
c00199b2:	50                   	push   eax
c00199b3:	89 c3                	mov    ebx,eax
c00199b5:	e8 2c 0b 00 00       	call   c001a4e6 <File::File(char const*, Process*)>
c00199ba:	83 c4 10             	add    esp,0x10
c00199bd:	85 db                	test   ebx,ebx
c00199bf:	75 10                	jne    c00199d1 <KeInitialiseSymlinks()+0x87>
c00199c1:	83 ec 0c             	sub    esp,0xc
c00199c4:	68 ff 1c 03 c0       	push   0xc0031cff
c00199c9:	e8 88 68 00 00       	call   c0020256 <KePanic(char const*)>
c00199ce:	83 c4 10             	add    esp,0x10
c00199d1:	83 ec 0c             	sub    esp,0xc
c00199d4:	53                   	push   ebx
c00199d5:	e8 ee 0d 00 00       	call   c001a7c8 <File::exists()>
c00199da:	83 c4 10             	add    esp,0x10
c00199dd:	84 c0                	test   al,al
c00199df:	75 3a                	jne    c0019a1b <KeInitialiseSymlinks()+0xd1>
c00199e1:	52                   	push   edx
c00199e2:	52                   	push   edx
c00199e3:	6a 12                	push   0x12
c00199e5:	53                   	push   ebx
c00199e6:	e8 19 0b 00 00       	call   c001a504 <File::open(FileOpenMode)>
c00199eb:	83 c4 10             	add    esp,0x10
c00199ee:	85 c0                	test   eax,eax
c00199f0:	74 10                	je     c0019a02 <KeInitialiseSymlinks()+0xb8>
c00199f2:	83 ec 0c             	sub    esp,0xc
c00199f5:	68 1c 1d 03 c0       	push   0xc0031d1c
c00199fa:	e8 57 68 00 00       	call   c0020256 <KePanic(char const*)>
c00199ff:	83 c4 10             	add    esp,0x10
c0019a02:	83 ec 0c             	sub    esp,0xc
c0019a05:	53                   	push   ebx
c0019a06:	e8 57 0b 00 00       	call   c001a562 <File::close()>
c0019a0b:	83 c4 10             	add    esp,0x10
c0019a0e:	85 db                	test   ebx,ebx
c0019a10:	0f 84 9e 00 00 00    	je     c0019ab4 <KeInitialiseSymlinks()+0x16a>
c0019a16:	e9 8d 00 00 00       	jmp    c0019aa8 <KeInitialiseSymlinks()+0x15e>
c0019a1b:	50                   	push   eax
c0019a1c:	50                   	push   eax
c0019a1d:	6a 01                	push   0x1
c0019a1f:	53                   	push   ebx
c0019a20:	e8 df 0a 00 00       	call   c001a504 <File::open(FileOpenMode)>
c0019a25:	83 c4 10             	add    esp,0x10
c0019a28:	85 c0                	test   eax,eax
c0019a2a:	74 10                	je     c0019a3c <KeInitialiseSymlinks()+0xf2>
c0019a2c:	83 ec 0c             	sub    esp,0xc
c0019a2f:	68 39 1d 03 c0       	push   0xc0031d39
c0019a34:	e8 1d 68 00 00       	call   c0020256 <KePanic(char const*)>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019a42:	83 ec 0c             	sub    esp,0xc
c0019a45:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019a49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a4b:	57                   	push   edi
c0019a4c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019a50:	56                   	push   esi
c0019a51:	6a 00                	push   0x0
c0019a53:	68 00 01 00 00       	push   0x100
c0019a58:	53                   	push   ebx
c0019a59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a5c:	83 c4 20             	add    esp,0x20
c0019a5f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019a67:	75 33                	jne    c0019a9c <KeInitialiseSymlinks()+0x152>
c0019a69:	83 ec 0c             	sub    esp,0xc
c0019a6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a6e:	57                   	push   edi
c0019a6f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019a73:	52                   	push   edx
c0019a74:	6a 00                	push   0x0
c0019a76:	6a 08                	push   0x8
c0019a78:	53                   	push   ebx
c0019a79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a7c:	83 c4 20             	add    esp,0x20
c0019a7f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a84:	75 16                	jne    c0019a9c <KeInitialiseSymlinks()+0x152>
c0019a86:	89 f0                	mov    eax,esi
c0019a88:	e8 9f fd ff ff       	call   c001982c <KiGetSymlinkHash(char const*)>
c0019a8d:	ba 01 00 00 00       	mov    edx,0x1
c0019a92:	0f b7 c0             	movzx  eax,ax
c0019a95:	e8 58 fc ff ff       	call   c00196f2 <KiSetHashInTable(unsigned short, bool)>
c0019a9a:	eb a0                	jmp    c0019a3c <KeInitialiseSymlinks()+0xf2>
c0019a9c:	83 ec 0c             	sub    esp,0xc
c0019a9f:	53                   	push   ebx
c0019aa0:	e8 bd 0a 00 00       	call   c001a562 <File::close()>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aaa:	83 ec 0c             	sub    esp,0xc
c0019aad:	53                   	push   ebx
c0019aae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	81 c4 10 01 00 00    	add    esp,0x110
c0019aba:	5b                   	pop    ebx
c0019abb:	5e                   	pop    esi
c0019abc:	5f                   	pop    edi
c0019abd:	c3                   	ret    

c0019abe <KiIsSymlinkRegistered(char const*)>:
c0019abe:	55                   	push   ebp
c0019abf:	57                   	push   edi
c0019ac0:	56                   	push   esi
c0019ac1:	53                   	push   ebx
c0019ac2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ac8:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019acf:	89 f0                	mov    eax,esi
c0019ad1:	e8 56 fd ff ff       	call   c001982c <KiGetSymlinkHash(char const*)>
c0019ad6:	53                   	push   ebx
c0019ad7:	56                   	push   esi
c0019ad8:	0f b7 c0             	movzx  eax,ax
c0019adb:	50                   	push   eax
c0019adc:	68 54 1d 03 c0       	push   0xc0031d54
c0019ae1:	e8 e8 f7 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019ae6:	89 f0                	mov    eax,esi
c0019ae8:	e8 3f fd ff ff       	call   c001982c <KiGetSymlinkHash(char const*)>
c0019aed:	0f b7 c0             	movzx  eax,ax
c0019af0:	e8 e3 fb ff ff       	call   c00196d8 <KiIsHashInTable(unsigned short)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	31 d2                	xor    edx,edx
c0019afa:	88 c1                	mov    cl,al
c0019afc:	31 c0                	xor    eax,eax
c0019afe:	84 c9                	test   cl,cl
c0019b00:	0f 84 31 01 00 00    	je     c0019c37 <KiIsSymlinkRegistered(char const*)+0x179>
c0019b06:	31 db                	xor    ebx,ebx
c0019b08:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019b0e:	7e 30                	jle    c0019b40 <KiIsSymlinkRegistered(char const*)+0x82>
c0019b10:	89 d8                	mov    eax,ebx
c0019b12:	c1 e0 08             	shl    eax,0x8
c0019b15:	51                   	push   ecx
c0019b16:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b1b:	51                   	push   ecx
c0019b1c:	50                   	push   eax
c0019b1d:	56                   	push   esi
c0019b1e:	e8 5d 6c fe ff       	call   c0000780 <strcmp>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	85 c0                	test   eax,eax
c0019b28:	75 13                	jne    c0019b3d <KiIsSymlinkRegistered(char const*)+0x7f>
c0019b2a:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019b31:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019b38:	e9 fa 00 00 00       	jmp    c0019c37 <KiIsSymlinkRegistered(char const*)+0x179>
c0019b3d:	43                   	inc    ebx
c0019b3e:	eb c8                	jmp    c0019b08 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019b40:	83 ec 0c             	sub    esp,0xc
c0019b43:	68 14 01 00 00       	push   0x114
c0019b48:	e8 4a c9 ff ff       	call   c0016497 <malloc>
c0019b4d:	83 c4 0c             	add    esp,0xc
c0019b50:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b56:	68 3f 1c 03 c0       	push   0xc0031c3f
c0019b5b:	50                   	push   eax
c0019b5c:	89 c3                	mov    ebx,eax
c0019b5e:	e8 83 09 00 00       	call   c001a4e6 <File::File(char const*, Process*)>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	85 db                	test   ebx,ebx
c0019b68:	75 12                	jne    c0019b7c <KiIsSymlinkRegistered(char const*)+0xbe>
c0019b6a:	83 ec 0c             	sub    esp,0xc
c0019b6d:	68 69 1d 03 c0       	push   0xc0031d69
c0019b72:	e8 df 66 00 00       	call   c0020256 <KePanic(char const*)>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	eb 10                	jmp    c0019b8c <KiIsSymlinkRegistered(char const*)+0xce>
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	53                   	push   ebx
c0019b80:	e8 43 0c 00 00       	call   c001a7c8 <File::exists()>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	84 c0                	test   al,al
c0019b8a:	74 de                	je     c0019b6a <KiIsSymlinkRegistered(char const*)+0xac>
c0019b8c:	52                   	push   edx
c0019b8d:	52                   	push   edx
c0019b8e:	6a 01                	push   0x1
c0019b90:	53                   	push   ebx
c0019b91:	e8 6e 09 00 00       	call   c001a504 <File::open(FileOpenMode)>
c0019b96:	83 c4 10             	add    esp,0x10
c0019b99:	85 c0                	test   eax,eax
c0019b9b:	74 10                	je     c0019bad <KiIsSymlinkRegistered(char const*)+0xef>
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	68 84 1d 03 c0       	push   0xc0031d84
c0019ba5:	e8 ac 66 00 00       	call   c0020256 <KePanic(char const*)>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	83 ec 0c             	sub    esp,0xc
c0019bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bb2:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019bb6:	55                   	push   ebp
c0019bb7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019bbb:	57                   	push   edi
c0019bbc:	6a 00                	push   0x0
c0019bbe:	68 00 01 00 00       	push   0x100
c0019bc3:	53                   	push   ebx
c0019bc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bc7:	83 c4 20             	add    esp,0x20
c0019bca:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019bd2:	75 4b                	jne    c0019c1f <KiIsSymlinkRegistered(char const*)+0x161>
c0019bd4:	83 ec 0c             	sub    esp,0xc
c0019bd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bd9:	55                   	push   ebp
c0019bda:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019bde:	52                   	push   edx
c0019bdf:	6a 00                	push   0x0
c0019be1:	6a 08                	push   0x8
c0019be3:	53                   	push   ebx
c0019be4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019be7:	83 c4 20             	add    esp,0x20
c0019bea:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019bef:	75 2e                	jne    c0019c1f <KiIsSymlinkRegistered(char const*)+0x161>
c0019bf1:	50                   	push   eax
c0019bf2:	50                   	push   eax
c0019bf3:	57                   	push   edi
c0019bf4:	56                   	push   esi
c0019bf5:	e8 86 6b fe ff       	call   c0000780 <strcmp>
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	85 c0                	test   eax,eax
c0019bff:	75 ac                	jne    c0019bad <KiIsSymlinkRegistered(char const*)+0xef>
c0019c01:	83 ec 0c             	sub    esp,0xc
c0019c04:	53                   	push   ebx
c0019c05:	e8 58 09 00 00       	call   c001a562 <File::close()>
c0019c0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	eb 18                	jmp    c0019c37 <KiIsSymlinkRegistered(char const*)+0x179>
c0019c1f:	83 ec 0c             	sub    esp,0xc
c0019c22:	53                   	push   ebx
c0019c23:	e8 3a 09 00 00       	call   c001a562 <File::close()>
c0019c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c30:	83 c4 10             	add    esp,0x10
c0019c33:	31 c0                	xor    eax,eax
c0019c35:	31 d2                	xor    edx,edx
c0019c37:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c3d:	5b                   	pop    ebx
c0019c3e:	5e                   	pop    esi
c0019c3f:	5f                   	pop    edi
c0019c40:	5d                   	pop    ebp
c0019c41:	c3                   	ret    

c0019c42 <KeDereferenceSymlink(char const*, char*)>:
c0019c42:	55                   	push   ebp
c0019c43:	57                   	push   edi
c0019c44:	56                   	push   esi
c0019c45:	53                   	push   ebx
c0019c46:	83 ec 48             	sub    esp,0x48
c0019c49:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019c4d:	56                   	push   esi
c0019c4e:	e8 6b fe ff ff       	call   c0019abe <KiIsSymlinkRegistered(char const*)>
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	89 c7                	mov    edi,eax
c0019c58:	89 d0                	mov    eax,edx
c0019c5a:	09 f8                	or     eax,edi
c0019c5c:	75 07                	jne    c0019c65 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019c5e:	31 c0                	xor    eax,eax
c0019c60:	e9 7c 01 00 00       	jmp    c0019de1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019c65:	83 ec 0c             	sub    esp,0xc
c0019c68:	89 d5                	mov    ebp,edx
c0019c6a:	68 14 01 00 00       	push   0x114
c0019c6f:	e8 23 c8 ff ff       	call   c0016497 <malloc>
c0019c74:	83 c4 0c             	add    esp,0xc
c0019c77:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c7d:	56                   	push   esi
c0019c7e:	50                   	push   eax
c0019c7f:	89 c3                	mov    ebx,eax
c0019c81:	e8 60 08 00 00       	call   c001a4e6 <File::File(char const*, Process*)>
c0019c86:	83 c4 10             	add    esp,0x10
c0019c89:	85 db                	test   ebx,ebx
c0019c8b:	0f 84 32 01 00 00    	je     c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c91:	56                   	push   esi
c0019c92:	56                   	push   esi
c0019c93:	6a 01                	push   0x1
c0019c95:	53                   	push   ebx
c0019c96:	e8 69 08 00 00       	call   c001a504 <File::open(FileOpenMode)>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	85 c0                	test   eax,eax
c0019ca0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ca2:	74 09                	je     c0019cad <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019ca4:	83 ec 0c             	sub    esp,0xc
c0019ca7:	53                   	push   ebx
c0019ca8:	e9 10 01 00 00       	jmp    c0019dbd <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019cad:	83 ec 0c             	sub    esp,0xc
c0019cb0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019cb4:	56                   	push   esi
c0019cb5:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019cb9:	52                   	push   edx
c0019cba:	6a 00                	push   0x0
c0019cbc:	6a 08                	push   0x8
c0019cbe:	53                   	push   ebx
c0019cbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cc2:	83 c4 20             	add    esp,0x20
c0019cc5:	85 c0                	test   eax,eax
c0019cc7:	0f 85 e2 00 00 00    	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ccd:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019cd2:	0f 85 d7 00 00 00    	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cdd:	56                   	push   esi
c0019cde:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ce2:	52                   	push   edx
c0019ce3:	6a 00                	push   0x0
c0019ce5:	6a 08                	push   0x8
c0019ce7:	53                   	push   ebx
c0019ce8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ceb:	83 c4 20             	add    esp,0x20
c0019cee:	85 c0                	test   eax,eax
c0019cf0:	0f 85 b9 00 00 00    	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cf6:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019cfb:	0f 85 ae 00 00 00    	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d01:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019d05:	0f 85 53 ff ff ff    	jne    c0019c5e <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019d0b:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019d0f:	0f 85 49 ff ff ff    	jne    c0019c5e <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019d15:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019d1d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019d25:	51                   	push   ecx
c0019d26:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019d2a:	50                   	push   eax
c0019d2b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d2f:	50                   	push   eax
c0019d30:	53                   	push   ebx
c0019d31:	e8 d0 0a 00 00       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c0019d36:	83 c4 10             	add    esp,0x10
c0019d39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019d3e:	75 6f                	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d44:	31 c9                	xor    ecx,ecx
c0019d46:	bf 0f 00 00 00       	mov    edi,0xf
c0019d4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d4f:	39 c7                	cmp    edi,eax
c0019d51:	89 cf                	mov    edi,ecx
c0019d53:	19 d7                	sbb    edi,edx
c0019d55:	73 58                	jae    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d57:	83 c0 f0             	add    eax,0xfffffff0
c0019d5a:	bf ff 00 00 00       	mov    edi,0xff
c0019d5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d63:	83 d2 ff             	adc    edx,0xffffffff
c0019d66:	39 c7                	cmp    edi,eax
c0019d68:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019d6c:	19 d1                	sbb    ecx,edx
c0019d6e:	72 53                	jb     c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019d70:	40                   	inc    eax
c0019d71:	52                   	push   edx
c0019d72:	50                   	push   eax
c0019d73:	6a 00                	push   0x0
c0019d75:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019d79:	e8 72 67 fe ff       	call   c00004f0 <memset>
c0019d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d80:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d83:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019d87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d8f:	53                   	push   ebx
c0019d90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d93:	83 c4 20             	add    esp,0x20
c0019d96:	85 c0                	test   eax,eax
c0019d98:	75 15                	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d9e:	89 c7                	mov    edi,eax
c0019da0:	c1 ff 1f             	sar    edi,0x1f
c0019da3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019da7:	75 06                	jne    c0019daf <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019da9:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019dad:	74 19                	je     c0019dc8 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019daf:	83 ec 0c             	sub    esp,0xc
c0019db2:	53                   	push   ebx
c0019db3:	e8 aa 07 00 00       	call   c001a562 <File::close()>
c0019db8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	83 c8 ff             	or     eax,0xffffffff
c0019dc6:	eb 19                	jmp    c0019de1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019dc8:	83 ec 0c             	sub    esp,0xc
c0019dcb:	53                   	push   ebx
c0019dcc:	e8 91 07 00 00       	call   c001a562 <File::close()>
c0019dd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dd9:	83 c4 10             	add    esp,0x10
c0019ddc:	b8 01 00 00 00       	mov    eax,0x1
c0019de1:	83 c4 3c             	add    esp,0x3c
c0019de4:	5b                   	pop    ebx
c0019de5:	5e                   	pop    esi
c0019de6:	5f                   	pop    edi
c0019de7:	5d                   	pop    ebp
c0019de8:	c3                   	ret    

c0019de9 <KeCreateSymlink(char const*, char const*)>:
c0019de9:	55                   	push   ebp
c0019dea:	57                   	push   edi
c0019deb:	56                   	push   esi
c0019dec:	53                   	push   ebx
c0019ded:	83 ec 38             	sub    esp,0x38
c0019df0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019df4:	68 14 01 00 00       	push   0x114
c0019df9:	e8 99 c6 ff ff       	call   c0016497 <malloc>
c0019dfe:	6a 00                	push   0x0
c0019e00:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019e06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019e0a:	89 c3                	mov    ebx,eax
c0019e0c:	50                   	push   eax
c0019e0d:	e8 f6 05 00 00       	call   c001a408 <File::File(char const*, Process*, bool)>
c0019e12:	83 c4 20             	add    esp,0x20
c0019e15:	85 db                	test   ebx,ebx
c0019e17:	b8 01 00 00 00       	mov    eax,0x1
c0019e1c:	0f 84 19 01 00 00    	je     c0019f3b <KeCreateSymlink(char const*, char const*)+0x152>
c0019e22:	52                   	push   edx
c0019e23:	52                   	push   edx
c0019e24:	6a 12                	push   0x12
c0019e26:	53                   	push   ebx
c0019e27:	e8 d8 06 00 00       	call   c001a504 <File::open(FileOpenMode)>
c0019e2c:	83 c4 10             	add    esp,0x10
c0019e2f:	85 c0                	test   eax,eax
c0019e31:	74 0b                	je     c0019e3e <KeCreateSymlink(char const*, char const*)+0x55>
c0019e33:	83 ec 0c             	sub    esp,0xc
c0019e36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e38:	53                   	push   ebx
c0019e39:	e9 f2 00 00 00       	jmp    c0019f30 <KeCreateSymlink(char const*, char const*)+0x147>
c0019e3e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019e42:	be d1 1d 03 c0       	mov    esi,0xc0031dd1
c0019e47:	b9 09 00 00 00       	mov    ecx,0x9
c0019e4c:	fc                   	cld    
c0019e4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019e56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e58:	56                   	push   esi
c0019e59:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019e5d:	52                   	push   edx
c0019e5e:	6a 00                	push   0x0
c0019e60:	6a 08                	push   0x8
c0019e62:	53                   	push   ebx
c0019e63:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e66:	83 c4 20             	add    esp,0x20
c0019e69:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e6e:	0f 85 ae 00 00 00    	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e74:	85 c0                	test   eax,eax
c0019e76:	0f 85 a6 00 00 00    	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e7c:	e8 cc f9 ff ff       	call   c001984d <KiCreateSymlinkID()>
c0019e81:	83 ec 0c             	sub    esp,0xc
c0019e84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e8e:	56                   	push   esi
c0019e8f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019e93:	52                   	push   edx
c0019e94:	6a 00                	push   0x0
c0019e96:	6a 08                	push   0x8
c0019e98:	53                   	push   ebx
c0019e99:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e9c:	83 c4 20             	add    esp,0x20
c0019e9f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ea4:	75 7c                	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019ea6:	85 c0                	test   eax,eax
c0019ea8:	75 78                	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019eaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eac:	83 ec 0c             	sub    esp,0xc
c0019eaf:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019eb2:	55                   	push   ebp
c0019eb3:	e8 c8 66 fe ff       	call   c0000580 <strlen>
c0019eb8:	31 d2                	xor    edx,edx
c0019eba:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ebd:	55                   	push   ebp
c0019ebe:	52                   	push   edx
c0019ebf:	50                   	push   eax
c0019ec0:	53                   	push   ebx
c0019ec1:	ff d7                	call   edi
c0019ec3:	83 c4 14             	add    esp,0x14
c0019ec6:	55                   	push   ebp
c0019ec7:	89 c6                	mov    esi,eax
c0019ec9:	e8 b2 66 fe ff       	call   c0000580 <strlen>
c0019ece:	83 c4 10             	add    esp,0x10
c0019ed1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019ed5:	75 4b                	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019ed7:	85 f6                	test   esi,esi
c0019ed9:	75 47                	jne    c0019f22 <KeCreateSymlink(char const*, char const*)+0x139>
c0019edb:	50                   	push   eax
c0019edc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019ee0:	55                   	push   ebp
c0019ee1:	68 9f 1d 03 c0       	push   0xc0031d9f
c0019ee6:	e8 e3 f3 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019eeb:	83 c4 0c             	add    esp,0xc
c0019eee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019ef2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019ef6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019efa:	e8 b9 f9 ff ff       	call   c00198b8 <KeRegisterSymlink(char const*, unsigned long long)>
c0019eff:	c7 04 24 c4 1d 03 c0 	mov    DWORD PTR [esp],0xc0031dc4
c0019f06:	e8 c3 f3 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0019f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f0e:	e8 4f 06 00 00       	call   c001a562 <File::close()>
c0019f13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	31 c0                	xor    eax,eax
c0019f20:	eb 19                	jmp    c0019f3b <KeCreateSymlink(char const*, char const*)+0x152>
c0019f22:	83 ec 0c             	sub    esp,0xc
c0019f25:	53                   	push   ebx
c0019f26:	e8 37 06 00 00       	call   c001a562 <File::close()>
c0019f2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	b8 01 00 00 00       	mov    eax,0x1
c0019f3b:	83 c4 2c             	add    esp,0x2c
c0019f3e:	5b                   	pop    ebx
c0019f3f:	5e                   	pop    esi
c0019f40:	5f                   	pop    edi
c0019f41:	5d                   	pop    ebp
c0019f42:	c3                   	ret    
c0019f43:	90                   	nop

c0019f44 <File::read(unsigned long long, void*, int*)>:
c0019f44:	53                   	push   ebx
c0019f45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f4d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f54:	83 f8 19             	cmp    eax,0x19
c0019f57:	77 35                	ja     c0019f8e <File::read(unsigned long long, void*, int*)+0x4a>
c0019f59:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f60:	85 c0                	test   eax,eax
c0019f62:	74 2a                	je     c0019f8e <File::read(unsigned long long, void*, int*)+0x4a>
c0019f64:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f6a:	85 c0                	test   eax,eax
c0019f6c:	74 20                	je     c0019f8e <File::read(unsigned long long, void*, int*)+0x4a>
c0019f6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f72:	74 21                	je     c0019f95 <File::read(unsigned long long, void*, int*)+0x51>
c0019f74:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f7a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f88:	5b                   	pop    ebx
c0019f89:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019f8c:	ff e0                	jmp    eax
c0019f8e:	b8 0b 00 00 00       	mov    eax,0xb
c0019f93:	eb 05                	jmp    c0019f9a <File::read(unsigned long long, void*, int*)+0x56>
c0019f95:	b8 05 00 00 00       	mov    eax,0x5
c0019f9a:	5b                   	pop    ebx
c0019f9b:	c3                   	ret    

c0019f9c <File::write(unsigned long long, void*, int*)>:
c0019f9c:	53                   	push   ebx
c0019f9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fa1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019fa5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019fac:	83 f8 19             	cmp    eax,0x19
c0019faf:	77 35                	ja     c0019fe6 <File::write(unsigned long long, void*, int*)+0x4a>
c0019fb1:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019fb8:	85 c0                	test   eax,eax
c0019fba:	74 2a                	je     c0019fe6 <File::write(unsigned long long, void*, int*)+0x4a>
c0019fbc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019fc2:	85 c0                	test   eax,eax
c0019fc4:	74 20                	je     c0019fe6 <File::write(unsigned long long, void*, int*)+0x4a>
c0019fc6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019fca:	74 21                	je     c0019fed <File::write(unsigned long long, void*, int*)+0x51>
c0019fcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019fce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fd2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019fd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fe0:	5b                   	pop    ebx
c0019fe1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019fe4:	ff e0                	jmp    eax
c0019fe6:	b8 0b 00 00 00       	mov    eax,0xb
c0019feb:	eb 05                	jmp    c0019ff2 <File::write(unsigned long long, void*, int*)+0x56>
c0019fed:	b8 05 00 00 00       	mov    eax,0x5
c0019ff2:	5b                   	pop    ebx
c0019ff3:	c3                   	ret    

c0019ff4 <Directory::read(unsigned long long, void*, int*)>:
c0019ff4:	53                   	push   ebx
c0019ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ff9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ffd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a004:	83 f8 19             	cmp    eax,0x19
c001a007:	77 35                	ja     c001a03e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a009:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a010:	85 c0                	test   eax,eax
c001a012:	74 2a                	je     c001a03e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a014:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a01a:	85 c0                	test   eax,eax
c001a01c:	74 20                	je     c001a03e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a01e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a022:	74 21                	je     c001a045 <Directory::read(unsigned long long, void*, int*)+0x51>
c001a024:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a026:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a02a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a030:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a034:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a038:	5b                   	pop    ebx
c001a039:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a03c:	ff e0                	jmp    eax
c001a03e:	b8 0b 00 00 00       	mov    eax,0xb
c001a043:	eb 05                	jmp    c001a04a <Directory::read(unsigned long long, void*, int*)+0x56>
c001a045:	b8 05 00 00 00       	mov    eax,0x5
c001a04a:	5b                   	pop    ebx
c001a04b:	c3                   	ret    

c001a04c <Directory::write(unsigned long long, void*, int*)>:
c001a04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a050:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a057:	b8 0b 00 00 00       	mov    eax,0xb
c001a05c:	83 fa 19             	cmp    edx,0x19
c001a05f:	77 18                	ja     c001a079 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a061:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a068:	85 d2                	test   edx,edx
c001a06a:	74 0d                	je     c001a079 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a06c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a073:	19 c0                	sbb    eax,eax
c001a075:	83 e0 0a             	and    eax,0xa
c001a078:	40                   	inc    eax
c001a079:	c3                   	ret    

c001a07a <File::isAtty()>:
c001a07a:	31 c0                	xor    eax,eax
c001a07c:	c3                   	ret    
c001a07d:	90                   	nop

c001a07e <Directory::isAtty()>:
c001a07e:	31 c0                	xor    eax,eax
c001a080:	c3                   	ret    
c001a081:	90                   	nop

c001a082 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a082:	b8 0a 00 00 00       	mov    eax,0xa
c001a087:	c3                   	ret    

c001a088 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a088:	b8 0a 00 00 00       	mov    eax,0xa
c001a08d:	c3                   	ret    

c001a08e <Filesystem::allocateSwapfile(char const*, int)>:
c001a08e:	31 c0                	xor    eax,eax
c001a090:	31 d2                	xor    edx,edx
c001a092:	c3                   	ret    
c001a093:	90                   	nop

c001a094 <File::~File()>:
c001a094:	83 ec 0c             	sub    esp,0xc
c001a097:	ba 90 1e 03 c0       	mov    edx,0xc0031e90
c001a09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a0:	89 10                	mov    DWORD PTR [eax],edx
c001a0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a6:	83 ec 0c             	sub    esp,0xc
c001a0a9:	50                   	push   eax
c001a0aa:	e8 a1 dc ff ff       	call   c0017d50 <UnixFile::~UnixFile()>
c001a0af:	83 c4 10             	add    esp,0x10
c001a0b2:	90                   	nop
c001a0b3:	83 c4 0c             	add    esp,0xc
c001a0b6:	c3                   	ret    
c001a0b7:	90                   	nop

c001a0b8 <File::~File()>:
c001a0b8:	83 ec 0c             	sub    esp,0xc
c001a0bb:	83 ec 0c             	sub    esp,0xc
c001a0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0c2:	e8 cd ff ff ff       	call   c001a094 <File::~File()>
c001a0c7:	83 c4 10             	add    esp,0x10
c001a0ca:	83 ec 08             	sub    esp,0x8
c001a0cd:	68 14 01 00 00       	push   0x114
c001a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d6:	e8 f5 f0 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	83 c4 0c             	add    esp,0xc
c001a0e1:	c3                   	ret    

c001a0e2 <Directory::~Directory()>:
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	ba ac 1e 03 c0       	mov    edx,0xc0031eac
c001a0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ee:	89 10                	mov    DWORD PTR [eax],edx
c001a0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	50                   	push   eax
c001a0f8:	e8 53 dc ff ff       	call   c0017d50 <UnixFile::~UnixFile()>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	90                   	nop
c001a101:	83 c4 0c             	add    esp,0xc
c001a104:	c3                   	ret    
c001a105:	90                   	nop

c001a106 <Directory::~Directory()>:
c001a106:	83 ec 0c             	sub    esp,0xc
c001a109:	83 ec 0c             	sub    esp,0xc
c001a10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a110:	e8 cd ff ff ff       	call   c001a0e2 <Directory::~Directory()>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	83 ec 08             	sub    esp,0x8
c001a11b:	68 14 01 00 00       	push   0x114
c001a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a124:	e8 a7 f0 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001a129:	83 c4 10             	add    esp,0x10
c001a12c:	83 c4 0c             	add    esp,0xc
c001a12f:	c3                   	ret    

c001a130 <Filesystem::Filesystem()>:
c001a130:	ba 24 1e 03 c0       	mov    edx,0xc0031e24
c001a135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a139:	89 10                	mov    DWORD PTR [eax],edx
c001a13b:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a145:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a14c:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a151:	90                   	nop
c001a152:	c3                   	ret    
c001a153:	90                   	nop

c001a154 <Filesystem::~Filesystem()>:
c001a154:	ba 24 1e 03 c0       	mov    edx,0xc0031e24
c001a159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a15d:	89 10                	mov    DWORD PTR [eax],edx
c001a15f:	90                   	nop
c001a160:	c3                   	ret    
c001a161:	90                   	nop

c001a162 <Filesystem::~Filesystem()>:
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a169:	e8 e6 ff ff ff       	call   c001a154 <Filesystem::~Filesystem()>
c001a16e:	83 c4 04             	add    esp,0x4
c001a171:	83 ec 08             	sub    esp,0x8
c001a174:	6a 08                	push   0x8
c001a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a17a:	e8 51 f0 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001a17f:	83 c4 10             	add    esp,0x10
c001a182:	83 c4 0c             	add    esp,0xc
c001a185:	c3                   	ret    

c001a186 <Fs::getcwd(Process*, char*, int)>:
c001a186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a18a:	31 c0                	xor    eax,eax
c001a18c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a190:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a193:	7d 15                	jge    c001a1aa <Fs::getcwd(Process*, char*, int)+0x24>
c001a195:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a199:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a1a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a1a3:	84 c9                	test   cl,cl
c001a1a5:	74 06                	je     c001a1ad <Fs::getcwd(Process*, char*, int)+0x27>
c001a1a7:	40                   	inc    eax
c001a1a8:	eb e2                	jmp    c001a18c <Fs::getcwd(Process*, char*, int)+0x6>
c001a1aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a1ad:	31 c0                	xor    eax,eax
c001a1af:	c3                   	ret    

c001a1b0 <Fs::initVFS()>:
c001a1b0:	83 ec 18             	sub    esp,0x18
c001a1b3:	6a 08                	push   0x8
c001a1b5:	e8 dd c2 ff ff       	call   c0016497 <malloc>
c001a1ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1bd:	e8 b6 e9 00 00       	call   c0028b78 <FAT::FAT()>
c001a1c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a1c9:	e8 c9 c2 ff ff       	call   c0016497 <malloc>
c001a1ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d1:	e8 d0 f8 00 00       	call   c0029aa6 <ISO9660::ISO9660()>
c001a1d6:	83 c4 1c             	add    esp,0x1c
c001a1d9:	c3                   	ret    

c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a1da:	55                   	push   ebp
c001a1db:	57                   	push   edi
c001a1dc:	56                   	push   esi
c001a1dd:	53                   	push   ebx
c001a1de:	81 ec 20 04 00 00    	sub    esp,0x420
c001a1e4:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a1eb:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a1f2:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a1f9:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a200:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a204:	68 00 04 00 00       	push   0x400
c001a209:	6a 00                	push   0x0
c001a20b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a20f:	57                   	push   edi
c001a210:	e8 db 62 fe ff       	call   c00004f0 <memset>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a21c:	75 0b                	jne    c001a229 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a21e:	50                   	push   eax
c001a21f:	50                   	push   eax
c001a220:	56                   	push   esi
c001a221:	57                   	push   edi
c001a222:	e8 29 64 fe ff       	call   c0000650 <strcpy>
c001a227:	eb 45                	jmp    c001a26e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a229:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a22c:	83 f8 2f             	cmp    eax,0x2f
c001a22f:	74 05                	je     c001a236 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a231:	83 f8 5c             	cmp    eax,0x5c
c001a234:	75 19                	jne    c001a24f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a236:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a239:	3c 60                	cmp    al,0x60
c001a23b:	7e 03                	jle    c001a240 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a23d:	83 e8 20             	sub    eax,0x20
c001a240:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a244:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a24b:	50                   	push   eax
c001a24c:	50                   	push   eax
c001a24d:	eb 18                	jmp    c001a267 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a24f:	50                   	push   eax
c001a250:	50                   	push   eax
c001a251:	55                   	push   ebp
c001a252:	57                   	push   edi
c001a253:	e8 f8 63 fe ff       	call   c0000650 <strcpy>
c001a258:	58                   	pop    eax
c001a259:	5a                   	pop    edx
c001a25a:	68 1f 2f 03 c0       	push   0xc0032f1f
c001a25f:	57                   	push   edi
c001a260:	e8 0b 66 fe ff       	call   c0000870 <strcat>
c001a265:	59                   	pop    ecx
c001a266:	5d                   	pop    ebp
c001a267:	56                   	push   esi
c001a268:	57                   	push   edi
c001a269:	e8 02 66 fe ff       	call   c0000870 <strcat>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a275:	3c 60                	cmp    al,0x60
c001a277:	7e 03                	jle    c001a27c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a279:	83 e8 20             	sub    eax,0x20
c001a27c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a280:	be 03 00 00 00       	mov    esi,0x3
c001a285:	88 03                	mov    BYTE PTR [ebx],al
c001a287:	b8 03 00 00 00       	mov    eax,0x3
c001a28c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a293:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a299:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a29d:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a2a2:	89 fa                	mov    edx,edi
c001a2a4:	0f be ea             	movsx  ebp,dl
c001a2a7:	85 ed                	test   ebp,ebp
c001a2a9:	0f 84 a1 00 00 00    	je     c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a2af:	8d 56 01             	lea    edx,[esi+0x1]
c001a2b2:	83 fd 2f             	cmp    ebp,0x2f
c001a2b5:	74 05                	je     c001a2bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a2b7:	83 fd 5c             	cmp    ebp,0x5c
c001a2ba:	75 12                	jne    c001a2ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a2bc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a2c1:	89 c5                	mov    ebp,eax
c001a2c3:	74 09                	je     c001a2ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a2c5:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a2c9:	40                   	inc    eax
c001a2ca:	89 d6                	mov    esi,edx
c001a2cc:	eb cf                	jmp    c001a29d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a2ce:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a2d3:	89 f9                	mov    ecx,edi
c001a2d5:	0f be e9             	movsx  ebp,cl
c001a2d8:	75 61                	jne    c001a33b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a2da:	83 fd 2e             	cmp    ebp,0x2e
c001a2dd:	75 5c                	jne    c001a33b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a2df:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a2e4:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a2e9:	74 19                	je     c001a304 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a2eb:	83 fd 2e             	cmp    ebp,0x2e
c001a2ee:	74 55                	je     c001a345 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a2f0:	89 f2                	mov    edx,esi
c001a2f2:	42                   	inc    edx
c001a2f3:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a2f8:	83 f9 2f             	cmp    ecx,0x2f
c001a2fb:	74 f5                	je     c001a2f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a2fd:	83 f9 5c             	cmp    ecx,0x5c
c001a300:	74 f0                	je     c001a2f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a302:	eb c6                	jmp    c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a304:	83 fd 2e             	cmp    ebp,0x2e
c001a307:	74 3c                	je     c001a345 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a309:	83 f8 03             	cmp    eax,0x3
c001a30c:	74 bc                	je     c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a30e:	42                   	inc    edx
c001a30f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a314:	83 f9 2f             	cmp    ecx,0x2f
c001a317:	74 f5                	je     c001a30e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a319:	83 f9 5c             	cmp    ecx,0x5c
c001a31c:	74 f0                	je     c001a30e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a31e:	48                   	dec    eax
c001a31f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a323:	75 06                	jne    c001a32b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a325:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a329:	eb f3                	jmp    c001a31e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a32b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a32f:	74 07                	je     c001a338 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a331:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a335:	48                   	dec    eax
c001a336:	eb f3                	jmp    c001a32b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a338:	40                   	inc    eax
c001a339:	eb 8f                	jmp    c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a33b:	83 fd 2f             	cmp    ebp,0x2f
c001a33e:	74 8a                	je     c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a340:	83 fd 5c             	cmp    ebp,0x5c
c001a343:	74 85                	je     c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a345:	89 f9                	mov    ecx,edi
c001a347:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a34a:	40                   	inc    eax
c001a34b:	e9 7a ff ff ff       	jmp    c001a2ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a350:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a354:	83 ec 0c             	sub    esp,0xc
c001a357:	53                   	push   ebx
c001a358:	e8 23 62 fe ff       	call   c0000580 <strlen>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a365:	74 1c                	je     c001a383 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a367:	83 ec 0c             	sub    esp,0xc
c001a36a:	53                   	push   ebx
c001a36b:	e8 10 62 fe ff       	call   c0000580 <strlen>
c001a370:	83 c4 10             	add    esp,0x10
c001a373:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a378:	74 09                	je     c001a383 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a37a:	31 ff                	xor    edi,edi
c001a37c:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a381:	eb 5c                	jmp    c001a3df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a383:	83 ec 0c             	sub    esp,0xc
c001a386:	53                   	push   ebx
c001a387:	e8 f4 61 fe ff       	call   c0000580 <strlen>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a394:	74 e4                	je     c001a37a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a396:	83 ec 0c             	sub    esp,0xc
c001a399:	53                   	push   ebx
c001a39a:	e8 e1 61 fe ff       	call   c0000580 <strlen>
c001a39f:	83 c4 10             	add    esp,0x10
c001a3a2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3a7:	eb ab                	jmp    c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a3a9:	52                   	push   edx
c001a3aa:	52                   	push   edx
c001a3ab:	53                   	push   ebx
c001a3ac:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a3b0:	55                   	push   ebp
c001a3b1:	e8 9a 62 fe ff       	call   c0000650 <strcpy>
c001a3b6:	59                   	pop    ecx
c001a3b7:	58                   	pop    eax
c001a3b8:	53                   	push   ebx
c001a3b9:	55                   	push   ebp
c001a3ba:	e8 83 f8 ff ff       	call   c0019c42 <KeDereferenceSymlink(char const*, char*)>
c001a3bf:	83 c4 10             	add    esp,0x10
c001a3c2:	48                   	dec    eax
c001a3c3:	75 37                	jne    c001a3fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a3c5:	50                   	push   eax
c001a3c6:	53                   	push   ebx
c001a3c7:	55                   	push   ebp
c001a3c8:	68 da 1d 03 c0       	push   0xc0031dda
c001a3cd:	e8 fc ee ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001a3d2:	8d 47 01             	lea    eax,[edi+0x1]
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	83 ff 14             	cmp    edi,0x14
c001a3db:	74 08                	je     c001a3e5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a3dd:	89 c7                	mov    edi,eax
c001a3df:	85 f6                	test   esi,esi
c001a3e1:	75 c6                	jne    c001a3a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a3e3:	eb 17                	jmp    c001a3fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a3e5:	83 ec 0c             	sub    esp,0xc
c001a3e8:	bf 15 00 00 00       	mov    edi,0x15
c001a3ed:	68 f5 1d 03 c0       	push   0xc0031df5
c001a3f2:	e8 5f 5e 00 00       	call   c0020256 <KePanic(char const*)>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	eb e3                	jmp    c001a3df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a3fc:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a402:	5b                   	pop    ebx
c001a403:	5e                   	pop    esi
c001a404:	5f                   	pop    edi
c001a405:	5d                   	pop    ebp
c001a406:	c3                   	ret    
c001a407:	90                   	nop

c001a408 <File::File(char const*, Process*, bool)>:
c001a408:	83 ec 1c             	sub    esp,0x1c
c001a40b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a40f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a417:	83 ec 08             	sub    esp,0x8
c001a41a:	6a 00                	push   0x0
c001a41c:	50                   	push   eax
c001a41d:	e8 48 d7 ff ff       	call   c0017b6a <UnixFile::UnixFile(int)>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	ba 90 1e 03 c0       	mov    edx,0xc0031e90
c001a42a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a42e:	89 10                	mov    DWORD PTR [eax],edx
c001a430:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a435:	85 c0                	test   eax,eax
c001a437:	74 0f                	je     c001a448 <File::File(char const*, Process*, bool)+0x40>
c001a439:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a43e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a442:	74 04                	je     c001a448 <File::File(char const*, Process*, bool)+0x40>
c001a444:	b0 01                	mov    al,0x1
c001a446:	eb 02                	jmp    c001a44a <File::File(char const*, Process*, bool)+0x42>
c001a448:	b0 00                	mov    al,0x0
c001a44a:	0f b6 c0             	movzx  eax,al
c001a44d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a451:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a457:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a45b:	83 c2 0d             	add    edx,0xd
c001a45e:	50                   	push   eax
c001a45f:	51                   	push   ecx
c001a460:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a464:	52                   	push   edx
c001a465:	e8 70 fd ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a46a:	83 c4 10             	add    esp,0x10
c001a46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a471:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a474:	83 e8 41             	sub    eax,0x41
c001a477:	88 c2                	mov    dl,al
c001a479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a47d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a487:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a48f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a495:	0f b6 c0             	movzx  eax,al
c001a498:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a49f:	85 c0                	test   eax,eax
c001a4a1:	74 3e                	je     c001a4e1 <File::File(char const*, Process*, bool)+0xd9>
c001a4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4a7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a4ad:	0f b6 c0             	movzx  eax,al
c001a4b0:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a4b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a4bd:	85 c0                	test   eax,eax
c001a4bf:	75 20                	jne    c001a4e1 <File::File(char const*, Process*, bool)+0xd9>
c001a4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4c5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a4cb:	0f b6 c0             	movzx  eax,al
c001a4ce:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a4d5:	83 ec 0c             	sub    esp,0xc
c001a4d8:	50                   	push   eax
c001a4d9:	e8 ba 21 00 00       	call   c001c698 <LogicalDisk::mount()>
c001a4de:	83 c4 10             	add    esp,0x10
c001a4e1:	90                   	nop
c001a4e2:	83 c4 1c             	add    esp,0x1c
c001a4e5:	c3                   	ret    

c001a4e6 <File::File(char const*, Process*)>:
c001a4e6:	83 ec 0c             	sub    esp,0xc
c001a4e9:	6a 01                	push   0x1
c001a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4f7:	e8 0c ff ff ff       	call   c001a408 <File::File(char const*, Process*, bool)>
c001a4fc:	83 c4 10             	add    esp,0x10
c001a4ff:	90                   	nop
c001a500:	83 c4 0c             	add    esp,0xc
c001a503:	c3                   	ret    

c001a504 <File::open(FileOpenMode)>:
c001a504:	53                   	push   ebx
c001a505:	b8 0b 00 00 00       	mov    eax,0xb
c001a50a:	83 ec 08             	sub    esp,0x8
c001a50d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a511:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a518:	83 fa 19             	cmp    edx,0x19
c001a51b:	77 40                	ja     c001a55d <File::open(FileOpenMode)+0x59>
c001a51d:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a524:	85 d2                	test   edx,edx
c001a526:	74 35                	je     c001a55d <File::open(FileOpenMode)+0x59>
c001a528:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a52e:	85 d2                	test   edx,edx
c001a530:	74 2b                	je     c001a55d <File::open(FileOpenMode)+0x59>
c001a532:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a536:	b8 06 00 00 00       	mov    eax,0x6
c001a53b:	75 20                	jne    c001a55d <File::open(FileOpenMode)+0x59>
c001a53d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a53f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a549:	51                   	push   ecx
c001a54a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a54d:	51                   	push   ecx
c001a54e:	52                   	push   edx
c001a54f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	85 c0                	test   eax,eax
c001a557:	75 04                	jne    c001a55d <File::open(FileOpenMode)+0x59>
c001a559:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a55d:	83 c4 08             	add    esp,0x8
c001a560:	5b                   	pop    ebx
c001a561:	c3                   	ret    

c001a562 <File::close()>:
c001a562:	53                   	push   ebx
c001a563:	b8 0b 00 00 00       	mov    eax,0xb
c001a568:	83 ec 08             	sub    esp,0x8
c001a56b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a56f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a576:	83 f9 19             	cmp    ecx,0x19
c001a579:	77 41                	ja     c001a5bc <File::close()+0x5a>
c001a57b:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a582:	85 db                	test   ebx,ebx
c001a584:	74 36                	je     c001a5bc <File::close()+0x5a>
c001a586:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a58d:	74 2d                	je     c001a5bc <File::close()+0x5a>
c001a58f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a593:	b8 05 00 00 00       	mov    eax,0x5
c001a598:	74 22                	je     c001a5bc <File::close()+0x5a>
c001a59a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a59e:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a5ab:	53                   	push   ebx
c001a5ac:	53                   	push   ebx
c001a5ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a5af:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a5b5:	50                   	push   eax
c001a5b6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	83 c4 08             	add    esp,0x8
c001a5bf:	5b                   	pop    ebx
c001a5c0:	c3                   	ret    
c001a5c1:	90                   	nop

c001a5c2 <File::seek(unsigned long long)>:
c001a5c2:	56                   	push   esi
c001a5c3:	b8 0b 00 00 00       	mov    eax,0xb
c001a5c8:	53                   	push   ebx
c001a5c9:	51                   	push   ecx
c001a5ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a5d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5d6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a5dd:	83 fa 19             	cmp    edx,0x19
c001a5e0:	77 31                	ja     c001a613 <File::seek(unsigned long long)+0x51>
c001a5e2:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5e9:	85 d2                	test   edx,edx
c001a5eb:	74 26                	je     c001a613 <File::seek(unsigned long long)+0x51>
c001a5ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5f3:	85 d2                	test   edx,edx
c001a5f5:	74 1c                	je     c001a613 <File::seek(unsigned long long)+0x51>
c001a5f7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a5fb:	b8 05 00 00 00       	mov    eax,0x5
c001a600:	74 11                	je     c001a613 <File::seek(unsigned long long)+0x51>
c001a602:	8b 02                	mov    eax,DWORD PTR [edx]
c001a604:	53                   	push   ebx
c001a605:	51                   	push   ecx
c001a606:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a60c:	52                   	push   edx
c001a60d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	5a                   	pop    edx
c001a614:	5b                   	pop    ebx
c001a615:	5e                   	pop    esi
c001a616:	c3                   	ret    
c001a617:	90                   	nop

c001a618 <File::truncate(unsigned long long)>:
c001a618:	56                   	push   esi
c001a619:	b8 0b 00 00 00       	mov    eax,0xb
c001a61e:	53                   	push   ebx
c001a61f:	51                   	push   ecx
c001a620:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a624:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a628:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a62c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a633:	83 fa 19             	cmp    edx,0x19
c001a636:	77 31                	ja     c001a669 <File::truncate(unsigned long long)+0x51>
c001a638:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a63f:	85 d2                	test   edx,edx
c001a641:	74 26                	je     c001a669 <File::truncate(unsigned long long)+0x51>
c001a643:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a649:	85 d2                	test   edx,edx
c001a64b:	74 1c                	je     c001a669 <File::truncate(unsigned long long)+0x51>
c001a64d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a651:	b8 05 00 00 00       	mov    eax,0x5
c001a656:	74 11                	je     c001a669 <File::truncate(unsigned long long)+0x51>
c001a658:	8b 02                	mov    eax,DWORD PTR [edx]
c001a65a:	53                   	push   ebx
c001a65b:	51                   	push   ecx
c001a65c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a662:	52                   	push   edx
c001a663:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	5a                   	pop    edx
c001a66a:	5b                   	pop    ebx
c001a66b:	5e                   	pop    esi
c001a66c:	c3                   	ret    
c001a66d:	90                   	nop

c001a66e <File::tell(unsigned long long*)>:
c001a66e:	83 ec 0c             	sub    esp,0xc
c001a671:	b8 0b 00 00 00       	mov    eax,0xb
c001a676:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a67a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a681:	83 fa 19             	cmp    edx,0x19
c001a684:	77 34                	ja     c001a6ba <File::tell(unsigned long long*)+0x4c>
c001a686:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a68d:	85 d2                	test   edx,edx
c001a68f:	74 29                	je     c001a6ba <File::tell(unsigned long long*)+0x4c>
c001a691:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a697:	85 d2                	test   edx,edx
c001a699:	74 1f                	je     c001a6ba <File::tell(unsigned long long*)+0x4c>
c001a69b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a69f:	b8 05 00 00 00       	mov    eax,0x5
c001a6a4:	74 14                	je     c001a6ba <File::tell(unsigned long long*)+0x4c>
c001a6a6:	50                   	push   eax
c001a6a7:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a6b3:	52                   	push   edx
c001a6b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a6b7:	83 c4 10             	add    esp,0x10
c001a6ba:	83 c4 0c             	add    esp,0xc
c001a6bd:	c3                   	ret    

c001a6be <File::rewind()>:
c001a6be:	83 ec 10             	sub    esp,0x10
c001a6c1:	6a 00                	push   0x0
c001a6c3:	6a 00                	push   0x0
c001a6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6c9:	e8 f4 fe ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c001a6ce:	83 c4 1c             	add    esp,0x1c
c001a6d1:	c3                   	ret    

c001a6d2 <File::unlink()>:
c001a6d2:	83 ec 0c             	sub    esp,0xc
c001a6d5:	b8 0b 00 00 00       	mov    eax,0xb
c001a6da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6e5:	83 f9 19             	cmp    ecx,0x19
c001a6e8:	77 2f                	ja     c001a719 <File::unlink()+0x47>
c001a6ea:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6f1:	85 c9                	test   ecx,ecx
c001a6f3:	74 24                	je     c001a719 <File::unlink()+0x47>
c001a6f5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6fb:	85 c9                	test   ecx,ecx
c001a6fd:	74 1a                	je     c001a719 <File::unlink()+0x47>
c001a6ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a703:	b8 06 00 00 00       	mov    eax,0x6
c001a708:	75 0f                	jne    c001a719 <File::unlink()+0x47>
c001a70a:	50                   	push   eax
c001a70b:	83 c2 0d             	add    edx,0xd
c001a70e:	50                   	push   eax
c001a70f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a711:	52                   	push   edx
c001a712:	51                   	push   ecx
c001a713:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	83 c4 0c             	add    esp,0xc
c001a71c:	c3                   	ret    
c001a71d:	90                   	nop

c001a71e <File::rename(char const*)>:
c001a71e:	83 ec 0c             	sub    esp,0xc
c001a721:	b8 0b 00 00 00       	mov    eax,0xb
c001a726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a72a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a731:	83 f9 19             	cmp    ecx,0x19
c001a734:	77 32                	ja     c001a768 <File::rename(char const*)+0x4a>
c001a736:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a73d:	85 c9                	test   ecx,ecx
c001a73f:	74 27                	je     c001a768 <File::rename(char const*)+0x4a>
c001a741:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a747:	85 c9                	test   ecx,ecx
c001a749:	74 1d                	je     c001a768 <File::rename(char const*)+0x4a>
c001a74b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a74f:	b8 06 00 00 00       	mov    eax,0x6
c001a754:	75 12                	jne    c001a768 <File::rename(char const*)+0x4a>
c001a756:	50                   	push   eax
c001a757:	83 c2 0d             	add    edx,0xd
c001a75a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a75c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a760:	52                   	push   edx
c001a761:	51                   	push   ecx
c001a762:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	83 c4 0c             	add    esp,0xc
c001a76b:	c3                   	ret    

c001a76c <File::chfatattr(unsigned char, unsigned char)>:
c001a76c:	57                   	push   edi
c001a76d:	b8 0b 00 00 00       	mov    eax,0xb
c001a772:	56                   	push   esi
c001a773:	53                   	push   ebx
c001a774:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a778:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a77c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a780:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a787:	83 f9 19             	cmp    ecx,0x19
c001a78a:	77 37                	ja     c001a7c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a78c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a793:	85 c9                	test   ecx,ecx
c001a795:	74 2c                	je     c001a7c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a797:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a79d:	85 c9                	test   ecx,ecx
c001a79f:	74 22                	je     c001a7c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a7a5:	b8 06 00 00 00       	mov    eax,0x6
c001a7aa:	75 17                	jne    c001a7c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7ac:	89 f0                	mov    eax,esi
c001a7ae:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7b0:	0f b6 db             	movzx  ebx,bl
c001a7b3:	0f b6 f0             	movzx  esi,al
c001a7b6:	83 c2 0d             	add    edx,0xd
c001a7b9:	56                   	push   esi
c001a7ba:	53                   	push   ebx
c001a7bb:	52                   	push   edx
c001a7bc:	51                   	push   ecx
c001a7bd:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a7c0:	83 c4 10             	add    esp,0x10
c001a7c3:	5b                   	pop    ebx
c001a7c4:	5e                   	pop    esi
c001a7c5:	5f                   	pop    edi
c001a7c6:	c3                   	ret    
c001a7c7:	90                   	nop

c001a7c8 <File::exists()>:
c001a7c8:	83 ec 0c             	sub    esp,0xc
c001a7cb:	31 c0                	xor    eax,eax
c001a7cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a7d8:	83 f9 19             	cmp    ecx,0x19
c001a7db:	77 24                	ja     c001a801 <File::exists()+0x39>
c001a7dd:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7e4:	85 c9                	test   ecx,ecx
c001a7e6:	74 19                	je     c001a801 <File::exists()+0x39>
c001a7e8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a7ee:	85 c9                	test   ecx,ecx
c001a7f0:	74 0f                	je     c001a801 <File::exists()+0x39>
c001a7f2:	50                   	push   eax
c001a7f3:	83 c2 0d             	add    edx,0xd
c001a7f6:	50                   	push   eax
c001a7f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a7f9:	52                   	push   edx
c001a7fa:	51                   	push   ecx
c001a7fb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a7fe:	83 c4 10             	add    esp,0x10
c001a801:	83 c4 0c             	add    esp,0xc
c001a804:	c3                   	ret    
c001a805:	90                   	nop

c001a806 <File::stat(unsigned long long*, bool*)>:
c001a806:	56                   	push   esi
c001a807:	53                   	push   ebx
c001a808:	50                   	push   eax
c001a809:	b8 0b 00 00 00       	mov    eax,0xb
c001a80e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a816:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a81a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a821:	83 f9 19             	cmp    ecx,0x19
c001a824:	77 3d                	ja     c001a863 <File::stat(unsigned long long*, bool*)+0x5d>
c001a826:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a82d:	85 c9                	test   ecx,ecx
c001a82f:	74 32                	je     c001a863 <File::stat(unsigned long long*, bool*)+0x5d>
c001a831:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a837:	85 c9                	test   ecx,ecx
c001a839:	74 28                	je     c001a863 <File::stat(unsigned long long*, bool*)+0x5d>
c001a83b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a83f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a841:	74 13                	je     c001a856 <File::stat(unsigned long long*, bool*)+0x50>
c001a843:	83 ec 04             	sub    esp,0x4
c001a846:	56                   	push   esi
c001a847:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a84d:	51                   	push   ecx
c001a84e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a851:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a854:	eb 0a                	jmp    c001a860 <File::stat(unsigned long long*, bool*)+0x5a>
c001a856:	53                   	push   ebx
c001a857:	83 c2 0d             	add    edx,0xd
c001a85a:	56                   	push   esi
c001a85b:	52                   	push   edx
c001a85c:	51                   	push   ecx
c001a85d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a860:	83 c4 10             	add    esp,0x10
c001a863:	5a                   	pop    edx
c001a864:	5b                   	pop    ebx
c001a865:	5e                   	pop    esi
c001a866:	c3                   	ret    

c001a867 <Fs::setcwd(Process*, char*)>:
c001a867:	55                   	push   ebp
c001a868:	57                   	push   edi
c001a869:	56                   	push   esi
c001a86a:	53                   	push   ebx
c001a86b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a871:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a878:	6a 00                	push   0x0
c001a87a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a880:	57                   	push   edi
c001a881:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a888:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a88c:	56                   	push   esi
c001a88d:	e8 48 f9 ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a892:	89 34 24             	mov    DWORD PTR [esp],esi
c001a895:	e8 e6 5c fe ff       	call   c0000580 <strlen>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	83 f8 02             	cmp    eax,0x2
c001a8a0:	77 15                	ja     c001a8b7 <Fs::setcwd(Process*, char*)+0x50>
c001a8a2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a8a7:	83 eb 41             	sub    ebx,0x41
c001a8aa:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a8b1:	85 c0                	test   eax,eax
c001a8b3:	75 1c                	jne    c001a8d1 <Fs::setcwd(Process*, char*)+0x6a>
c001a8b5:	eb 2f                	jmp    c001a8e6 <Fs::setcwd(Process*, char*)+0x7f>
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	56                   	push   esi
c001a8bb:	e8 c0 5c fe ff       	call   c0000580 <strlen>
c001a8c0:	83 c4 10             	add    esp,0x10
c001a8c3:	83 f8 03             	cmp    eax,0x3
c001a8c6:	75 57                	jne    c001a91f <Fs::setcwd(Process*, char*)+0xb8>
c001a8c8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a8cd:	75 50                	jne    c001a91f <Fs::setcwd(Process*, char*)+0xb8>
c001a8cf:	eb d1                	jmp    c001a8a2 <Fs::setcwd(Process*, char*)+0x3b>
c001a8d1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a8d8:	75 0c                	jne    c001a8e6 <Fs::setcwd(Process*, char*)+0x7f>
c001a8da:	83 ec 0c             	sub    esp,0xc
c001a8dd:	50                   	push   eax
c001a8de:	e8 b5 1d 00 00       	call   c001c698 <LogicalDisk::mount()>
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	83 fb 19             	cmp    ebx,0x19
c001a8e9:	b8 03 00 00 00       	mov    eax,0x3
c001a8ee:	0f 87 c6 00 00 00    	ja     c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a8f4:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a8fb:	b8 05 00 00 00       	mov    eax,0x5
c001a900:	85 d2                	test   edx,edx
c001a902:	0f 84 b2 00 00 00    	je     c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a908:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a90f:	b8 06 00 00 00       	mov    eax,0x6
c001a914:	0f 85 92 00 00 00    	jne    c001a9ac <Fs::setcwd(Process*, char*)+0x145>
c001a91a:	e9 9b 00 00 00       	jmp    c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a91f:	83 ec 0c             	sub    esp,0xc
c001a922:	68 14 01 00 00       	push   0x114
c001a927:	e8 6b bb ff ff       	call   c0016497 <malloc>
c001a92c:	83 c4 0c             	add    esp,0xc
c001a92f:	55                   	push   ebp
c001a930:	56                   	push   esi
c001a931:	50                   	push   eax
c001a932:	89 c3                	mov    ebx,eax
c001a934:	e8 ad fb ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001a939:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a93e:	83 c4 0c             	add    esp,0xc
c001a941:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a945:	50                   	push   eax
c001a946:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a94a:	50                   	push   eax
c001a94b:	53                   	push   ebx
c001a94c:	e8 b5 fe ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c001a951:	83 c4 10             	add    esp,0x10
c001a954:	83 f8 02             	cmp    eax,0x2
c001a957:	74 27                	je     c001a980 <Fs::setcwd(Process*, char*)+0x119>
c001a959:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a95e:	75 1c                	jne    c001a97c <Fs::setcwd(Process*, char*)+0x115>
c001a960:	85 db                	test   ebx,ebx
c001a962:	b8 02 00 00 00       	mov    eax,0x2
c001a967:	74 51                	je     c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a969:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a96b:	83 ec 0c             	sub    esp,0xc
c001a96e:	53                   	push   ebx
c001a96f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a972:	83 c4 10             	add    esp,0x10
c001a975:	b8 02 00 00 00       	mov    eax,0x2
c001a97a:	eb 3e                	jmp    c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a97c:	85 c0                	test   eax,eax
c001a97e:	74 1c                	je     c001a99c <Fs::setcwd(Process*, char*)+0x135>
c001a980:	85 db                	test   ebx,ebx
c001a982:	b8 01 00 00 00       	mov    eax,0x1
c001a987:	74 31                	je     c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a989:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a98b:	83 ec 0c             	sub    esp,0xc
c001a98e:	53                   	push   ebx
c001a98f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a992:	83 c4 10             	add    esp,0x10
c001a995:	b8 01 00 00 00       	mov    eax,0x1
c001a99a:	eb 1e                	jmp    c001a9ba <Fs::setcwd(Process*, char*)+0x153>
c001a99c:	85 db                	test   ebx,ebx
c001a99e:	74 0c                	je     c001a9ac <Fs::setcwd(Process*, char*)+0x145>
c001a9a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a2:	83 ec 0c             	sub    esp,0xc
c001a9a5:	53                   	push   ebx
c001a9a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	50                   	push   eax
c001a9ad:	50                   	push   eax
c001a9ae:	56                   	push   esi
c001a9af:	57                   	push   edi
c001a9b0:	e8 9b 5c fe ff       	call   c0000650 <strcpy>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	31 c0                	xor    eax,eax
c001a9ba:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9c0:	5b                   	pop    ebx
c001a9c1:	5e                   	pop    esi
c001a9c2:	5f                   	pop    edi
c001a9c3:	5d                   	pop    ebp
c001a9c4:	c3                   	ret    
c001a9c5:	90                   	nop

c001a9c6 <Directory::Directory(char const*, Process*)>:
c001a9c6:	83 ec 0c             	sub    esp,0xc
c001a9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cd:	83 ec 08             	sub    esp,0x8
c001a9d0:	6a 00                	push   0x0
c001a9d2:	50                   	push   eax
c001a9d3:	e8 92 d1 ff ff       	call   c0017b6a <UnixFile::UnixFile(int)>
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	ba ac 1e 03 c0       	mov    edx,0xc0031eac
c001a9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e4:	89 10                	mov    DWORD PTR [eax],edx
c001a9e6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a9eb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9ef:	0f 95 c0             	setne  al
c001a9f2:	0f b6 c0             	movzx  eax,al
c001a9f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9f9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a9ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa03:	83 c2 0d             	add    edx,0xd
c001aa06:	50                   	push   eax
c001aa07:	51                   	push   ecx
c001aa08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa0c:	52                   	push   edx
c001aa0d:	e8 c8 f7 ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa19:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001aa1c:	83 e8 41             	sub    eax,0x41
c001aa1f:	88 c2                	mov    dl,al
c001aa21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa25:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001aa2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001aa33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa37:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa3d:	0f b6 c0             	movzx  eax,al
c001aa40:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa47:	85 c0                	test   eax,eax
c001aa49:	74 3e                	je     c001aa89 <Directory::Directory(char const*, Process*)+0xc3>
c001aa4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa55:	0f b6 c0             	movzx  eax,al
c001aa58:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa5f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa65:	85 c0                	test   eax,eax
c001aa67:	75 20                	jne    c001aa89 <Directory::Directory(char const*, Process*)+0xc3>
c001aa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa6d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa73:	0f b6 c0             	movzx  eax,al
c001aa76:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa7d:	83 ec 0c             	sub    esp,0xc
c001aa80:	50                   	push   eax
c001aa81:	e8 12 1c 00 00       	call   c001c698 <LogicalDisk::mount()>
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	90                   	nop
c001aa8a:	83 c4 0c             	add    esp,0xc
c001aa8d:	c3                   	ret    

c001aa8e <Directory::open()>:
c001aa8e:	53                   	push   ebx
c001aa8f:	b8 0b 00 00 00       	mov    eax,0xb
c001aa94:	83 ec 08             	sub    esp,0x8
c001aa97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa9b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aaa2:	83 fa 19             	cmp    edx,0x19
c001aaa5:	77 3d                	ja     c001aae4 <Directory::open()+0x56>
c001aaa7:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aaae:	85 d2                	test   edx,edx
c001aab0:	74 32                	je     c001aae4 <Directory::open()+0x56>
c001aab2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aab8:	85 d2                	test   edx,edx
c001aaba:	74 28                	je     c001aae4 <Directory::open()+0x56>
c001aabc:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aac0:	b8 06 00 00 00       	mov    eax,0x6
c001aac5:	75 1d                	jne    c001aae4 <Directory::open()+0x56>
c001aac7:	50                   	push   eax
c001aac8:	8b 02                	mov    eax,DWORD PTR [edx]
c001aaca:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aad0:	51                   	push   ecx
c001aad1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aad4:	51                   	push   ecx
c001aad5:	52                   	push   edx
c001aad6:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aad9:	83 c4 10             	add    esp,0x10
c001aadc:	85 c0                	test   eax,eax
c001aade:	75 04                	jne    c001aae4 <Directory::open()+0x56>
c001aae0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aae4:	83 c4 08             	add    esp,0x8
c001aae7:	5b                   	pop    ebx
c001aae8:	c3                   	ret    
c001aae9:	90                   	nop

c001aaea <Directory::close()>:
c001aaea:	53                   	push   ebx
c001aaeb:	b8 0b 00 00 00       	mov    eax,0xb
c001aaf0:	83 ec 08             	sub    esp,0x8
c001aaf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaf7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aafe:	83 f9 19             	cmp    ecx,0x19
c001ab01:	77 41                	ja     c001ab44 <Directory::close()+0x5a>
c001ab03:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab0a:	85 db                	test   ebx,ebx
c001ab0c:	74 36                	je     c001ab44 <Directory::close()+0x5a>
c001ab0e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ab15:	74 2d                	je     c001ab44 <Directory::close()+0x5a>
c001ab17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab1b:	b8 05 00 00 00       	mov    eax,0x5
c001ab20:	74 22                	je     c001ab44 <Directory::close()+0x5a>
c001ab22:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ab26:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab2d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ab33:	53                   	push   ebx
c001ab34:	53                   	push   ebx
c001ab35:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab37:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ab3d:	50                   	push   eax
c001ab3e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	83 c4 08             	add    esp,0x8
c001ab47:	5b                   	pop    ebx
c001ab48:	c3                   	ret    
c001ab49:	90                   	nop

c001ab4a <Directory::unlink()>:
c001ab4a:	83 ec 0c             	sub    esp,0xc
c001ab4d:	b8 0b 00 00 00       	mov    eax,0xb
c001ab52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab5d:	83 f9 19             	cmp    ecx,0x19
c001ab60:	77 2f                	ja     c001ab91 <Directory::unlink()+0x47>
c001ab62:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab69:	85 c9                	test   ecx,ecx
c001ab6b:	74 24                	je     c001ab91 <Directory::unlink()+0x47>
c001ab6d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab73:	85 c9                	test   ecx,ecx
c001ab75:	74 1a                	je     c001ab91 <Directory::unlink()+0x47>
c001ab77:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab7b:	b8 06 00 00 00       	mov    eax,0x6
c001ab80:	75 0f                	jne    c001ab91 <Directory::unlink()+0x47>
c001ab82:	50                   	push   eax
c001ab83:	83 c2 0d             	add    edx,0xd
c001ab86:	50                   	push   eax
c001ab87:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab89:	52                   	push   edx
c001ab8a:	51                   	push   ecx
c001ab8b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ab8e:	83 c4 10             	add    esp,0x10
c001ab91:	83 c4 0c             	add    esp,0xc
c001ab94:	c3                   	ret    
c001ab95:	90                   	nop

c001ab96 <Directory::rename(char const*)>:
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	b8 0b 00 00 00       	mov    eax,0xb
c001ab9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aba2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aba9:	83 f9 19             	cmp    ecx,0x19
c001abac:	77 32                	ja     c001abe0 <Directory::rename(char const*)+0x4a>
c001abae:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abb5:	85 c9                	test   ecx,ecx
c001abb7:	74 27                	je     c001abe0 <Directory::rename(char const*)+0x4a>
c001abb9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001abbf:	85 c9                	test   ecx,ecx
c001abc1:	74 1d                	je     c001abe0 <Directory::rename(char const*)+0x4a>
c001abc3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001abc7:	b8 06 00 00 00       	mov    eax,0x6
c001abcc:	75 12                	jne    c001abe0 <Directory::rename(char const*)+0x4a>
c001abce:	50                   	push   eax
c001abcf:	83 c2 0d             	add    edx,0xd
c001abd2:	8b 01                	mov    eax,DWORD PTR [ecx]
c001abd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001abd8:	52                   	push   edx
c001abd9:	51                   	push   ecx
c001abda:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	83 c4 0c             	add    esp,0xc
c001abe3:	c3                   	ret    

c001abe4 <Directory::exists()>:
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	31 c0                	xor    eax,eax
c001abe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abf4:	83 f9 19             	cmp    ecx,0x19
c001abf7:	77 24                	ja     c001ac1d <Directory::exists()+0x39>
c001abf9:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac00:	85 c9                	test   ecx,ecx
c001ac02:	74 19                	je     c001ac1d <Directory::exists()+0x39>
c001ac04:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac0a:	85 c9                	test   ecx,ecx
c001ac0c:	74 0f                	je     c001ac1d <Directory::exists()+0x39>
c001ac0e:	50                   	push   eax
c001ac0f:	83 c2 0d             	add    edx,0xd
c001ac12:	50                   	push   eax
c001ac13:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac15:	52                   	push   edx
c001ac16:	51                   	push   ecx
c001ac17:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ac1a:	83 c4 10             	add    esp,0x10
c001ac1d:	83 c4 0c             	add    esp,0xc
c001ac20:	c3                   	ret    
c001ac21:	90                   	nop

c001ac22 <Directory::read(dirent*)>:
c001ac22:	83 ec 1c             	sub    esp,0x1c
c001ac25:	b8 0b 00 00 00       	mov    eax,0xb
c001ac2a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac35:	83 f9 19             	cmp    ecx,0x19
c001ac38:	77 30                	ja     c001ac6a <Directory::read(dirent*)+0x48>
c001ac3a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac41:	85 c9                	test   ecx,ecx
c001ac43:	74 25                	je     c001ac6a <Directory::read(dirent*)+0x48>
c001ac45:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ac4c:	74 1c                	je     c001ac6a <Directory::read(dirent*)+0x48>
c001ac4e:	83 ec 0c             	sub    esp,0xc
c001ac51:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac53:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ac57:	51                   	push   ecx
c001ac58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac5c:	6a 00                	push   0x0
c001ac5e:	68 10 01 00 00       	push   0x110
c001ac63:	52                   	push   edx
c001ac64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac67:	83 c4 20             	add    esp,0x20
c001ac6a:	83 c4 1c             	add    esp,0x1c
c001ac6d:	c3                   	ret    

c001ac6e <Directory::create()>:
c001ac6e:	83 ec 0c             	sub    esp,0xc
c001ac71:	b8 0b 00 00 00       	mov    eax,0xb
c001ac76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac81:	83 f9 19             	cmp    ecx,0x19
c001ac84:	77 2f                	ja     c001acb5 <Directory::create()+0x47>
c001ac86:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac8d:	85 c9                	test   ecx,ecx
c001ac8f:	74 24                	je     c001acb5 <Directory::create()+0x47>
c001ac91:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac97:	85 c9                	test   ecx,ecx
c001ac99:	74 1a                	je     c001acb5 <Directory::create()+0x47>
c001ac9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac9f:	b8 06 00 00 00       	mov    eax,0x6
c001aca4:	75 0f                	jne    c001acb5 <Directory::create()+0x47>
c001aca6:	50                   	push   eax
c001aca7:	83 c2 0d             	add    edx,0xd
c001acaa:	50                   	push   eax
c001acab:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acad:	52                   	push   edx
c001acae:	51                   	push   ecx
c001acaf:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001acb2:	83 c4 10             	add    esp,0x10
c001acb5:	83 c4 0c             	add    esp,0xc
c001acb8:	c3                   	ret    
c001acb9:	90                   	nop

c001acba <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001acba:	b8 0a 00 00 00       	mov    eax,0xa
c001acbf:	c3                   	ret    

c001acc0 <Bus::Bus(char const*)>:
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc7:	83 ec 08             	sub    esp,0x8
c001acca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acce:	50                   	push   eax
c001accf:	e8 f2 07 00 00       	call   c001b4c6 <Device::Device(char const*)>
c001acd4:	83 c4 10             	add    esp,0x10
c001acd7:	ba c8 1e 03 c0       	mov    edx,0xc0031ec8
c001acdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace0:	89 10                	mov    DWORD PTR [eax],edx
c001ace2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001acf0:	90                   	nop
c001acf1:	83 c4 0c             	add    esp,0xc
c001acf4:	c3                   	ret    
c001acf5:	90                   	nop
c001acf6:	66 90                	xchg   ax,ax

c001acf8 <Bus::~Bus()>:
c001acf8:	83 ec 0c             	sub    esp,0xc
c001acfb:	ba c8 1e 03 c0       	mov    edx,0xc0031ec8
c001ad00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad04:	89 10                	mov    DWORD PTR [eax],edx
c001ad06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	50                   	push   eax
c001ad0e:	e8 53 05 00 00       	call   c001b266 <Device::~Device()>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	90                   	nop
c001ad17:	83 c4 0c             	add    esp,0xc
c001ad1a:	c3                   	ret    
c001ad1b:	90                   	nop

c001ad1c <Bus::~Bus()>:
c001ad1c:	83 ec 0c             	sub    esp,0xc
c001ad1f:	83 ec 0c             	sub    esp,0xc
c001ad22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad26:	e8 cd ff ff ff       	call   c001acf8 <Bus::~Bus()>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	83 ec 08             	sub    esp,0x8
c001ad31:	68 58 01 00 00       	push   0x158
c001ad36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3a:	e8 91 e4 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	83 c4 0c             	add    esp,0xc
c001ad45:	c3                   	ret    

c001ad46 <beepThread(void*)>:
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ad4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad52:	48                   	dec    eax
c001ad53:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ad58:	75 01                	jne    c001ad5b <beepThread(void*)+0x15>
c001ad5a:	fb                   	sti    
c001ad5b:	6b c2 0a             	imul   eax,edx,0xa
c001ad5e:	83 ec 0c             	sub    esp,0xc
c001ad61:	50                   	push   eax
c001ad62:	e8 0d a7 00 00       	call   c0025474 <milliTenthSleep(unsigned int)>
c001ad67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad6e:	e8 06 c5 00 00       	call   c0027279 <HalMakeBeep(int)>
c001ad73:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ad7b:	83 c4 1c             	add    esp,0x1c
c001ad7e:	e9 d5 a5 00 00       	jmp    c0025358 <blockTask(TaskState)>

c001ad83 <Krnl::beep(int, int, bool)>:
c001ad83:	56                   	push   esi
c001ad84:	53                   	push   ebx
c001ad85:	83 ec 10             	sub    esp,0x10
c001ad88:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad94:	e8 e0 c4 00 00       	call   c0027279 <HalMakeBeep(int)>
c001ad99:	89 f0                	mov    eax,esi
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	84 c0                	test   al,al
c001ada0:	74 1e                	je     c001adc0 <Krnl::beep(int, int, bool)+0x3d>
c001ada2:	6b db 0a             	imul   ebx,ebx,0xa
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	53                   	push   ebx
c001ada9:	e8 c6 a6 00 00       	call   c0025474 <milliTenthSleep(unsigned int)>
c001adae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001adb6:	83 c4 14             	add    esp,0x14
c001adb9:	5b                   	pop    ebx
c001adba:	5e                   	pop    esi
c001adbb:	e9 b9 c4 00 00       	jmp    c0027279 <HalMakeBeep(int)>
c001adc0:	68 e6 00 00 00       	push   0xe6
c001adc5:	53                   	push   ebx
c001adc6:	68 46 ad 01 c0       	push   0xc001ad46
c001adcb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001add1:	e8 7a a2 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c001add6:	83 c4 14             	add    esp,0x14
c001add9:	5b                   	pop    ebx
c001adda:	5e                   	pop    esi
c001addb:	c3                   	ret    

c001addc <User::loadClockSettings(int)>:
c001addc:	53                   	push   ebx
c001addd:	83 ec 14             	sub    esp,0x14
c001ade0:	68 14 01 00 00       	push   0x114
c001ade5:	e8 ad b6 ff ff       	call   c0016497 <malloc>
c001adea:	83 c4 0c             	add    esp,0xc
c001aded:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001adf3:	68 ec 1e 03 c0       	push   0xc0031eec
c001adf8:	50                   	push   eax
c001adf9:	89 c3                	mov    ebx,eax
c001adfb:	e8 e6 f6 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001ae00:	58                   	pop    eax
c001ae01:	5a                   	pop    edx
c001ae02:	6a 01                	push   0x1
c001ae04:	53                   	push   ebx
c001ae05:	e8 fa f6 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c001ae0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae0d:	e8 50 f7 ff ff       	call   c001a562 <File::close()>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	85 db                	test   ebx,ebx
c001ae17:	74 0f                	je     c001ae28 <User::loadClockSettings(int)+0x4c>
c001ae19:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ae1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ae22:	83 c4 08             	add    esp,0x8
c001ae25:	5b                   	pop    ebx
c001ae26:	ff e0                	jmp    eax
c001ae28:	83 c4 08             	add    esp,0x8
c001ae2b:	5b                   	pop    ebx
c001ae2c:	c3                   	ret    
c001ae2d:	90                   	nop

c001ae2e <Clock::Clock(char const*)>:
c001ae2e:	83 ec 0c             	sub    esp,0xc
c001ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae35:	83 ec 08             	sub    esp,0x8
c001ae38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae3c:	50                   	push   eax
c001ae3d:	e8 84 06 00 00       	call   c001b4c6 <Device::Device(char const*)>
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	ba 14 1f 03 c0       	mov    edx,0xc0031f14
c001ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4e:	89 10                	mov    DWORD PTR [eax],edx
c001ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae54:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ae5e:	90                   	nop
c001ae5f:	83 c4 0c             	add    esp,0xc
c001ae62:	c3                   	ret    
c001ae63:	90                   	nop

c001ae64 <Clock::~Clock()>:
c001ae64:	83 ec 0c             	sub    esp,0xc
c001ae67:	ba 14 1f 03 c0       	mov    edx,0xc0031f14
c001ae6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae70:	89 10                	mov    DWORD PTR [eax],edx
c001ae72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae76:	83 ec 0c             	sub    esp,0xc
c001ae79:	50                   	push   eax
c001ae7a:	e8 e7 03 00 00       	call   c001b266 <Device::~Device()>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	90                   	nop
c001ae83:	83 c4 0c             	add    esp,0xc
c001ae86:	c3                   	ret    
c001ae87:	90                   	nop

c001ae88 <Clock::~Clock()>:
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	83 ec 0c             	sub    esp,0xc
c001ae8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae92:	e8 cd ff ff ff       	call   c001ae64 <Clock::~Clock()>
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	83 ec 08             	sub    esp,0x8
c001ae9d:	68 58 01 00 00       	push   0x158
c001aea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aea6:	e8 25 e3 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001aeab:	83 c4 10             	add    esp,0x10
c001aeae:	83 c4 0c             	add    esp,0xc
c001aeb1:	c3                   	ret    

c001aeb2 <Clock::timeInSecondsLocal()>:
c001aeb2:	53                   	push   ebx
c001aeb3:	83 ec 14             	sub    esp,0x14
c001aeb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeba:	8b 10                	mov    edx,DWORD PTR [eax]
c001aebc:	50                   	push   eax
c001aebd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001aec0:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001aec7:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001aecd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001aed3:	89 cb                	mov    ebx,ecx
c001aed5:	c1 fb 1f             	sar    ebx,0x1f
c001aed8:	01 c8                	add    eax,ecx
c001aeda:	11 da                	adc    edx,ebx
c001aedc:	83 c4 10             	add    esp,0x10
c001aedf:	31 c9                	xor    ecx,ecx
c001aee1:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001aee8:	74 05                	je     c001aeef <Clock::timeInSecondsLocal()+0x3d>
c001aeea:	b9 08 07 00 00       	mov    ecx,0x708
c001aeef:	31 db                	xor    ebx,ebx
c001aef1:	01 c8                	add    eax,ecx
c001aef3:	11 da                	adc    edx,ebx
c001aef5:	83 c4 08             	add    esp,0x8
c001aef8:	5b                   	pop    ebx
c001aef9:	c3                   	ret    

c001aefa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001aefa:	57                   	push   edi
c001aefb:	56                   	push   esi
c001aefc:	53                   	push   ebx
c001aefd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af09:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af0b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001af0e:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001af15:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001af1b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001af21:	99                   	cdq    
c001af22:	29 c6                	sub    esi,eax
c001af24:	19 d7                	sbb    edi,edx
c001af26:	89 f0                	mov    eax,esi
c001af28:	31 f6                	xor    esi,esi
c001af2a:	89 fa                	mov    edx,edi
c001af2c:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001af33:	74 05                	je     c001af3a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001af35:	be 08 07 00 00       	mov    esi,0x708
c001af3a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001af3e:	31 ff                	xor    edi,edi
c001af40:	29 f0                	sub    eax,esi
c001af42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af46:	19 fa                	sbb    edx,edi
c001af48:	89 d8                	mov    eax,ebx
c001af4a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af4e:	5b                   	pop    ebx
c001af4f:	5e                   	pop    esi
c001af50:	5f                   	pop    edi
c001af51:	ff e0                	jmp    eax

c001af53 <datetimeToSeconds(datetime_t)>:
c001af53:	55                   	push   ebp
c001af54:	57                   	push   edi
c001af55:	56                   	push   esi
c001af56:	53                   	push   ebx
c001af57:	83 ec 0c             	sub    esp,0xc
c001af5a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af62:	89 f7                	mov    edi,esi
c001af64:	89 f0                	mov    eax,esi
c001af66:	0f b6 cf             	movzx  ecx,bh
c001af69:	0f b6 c4             	movzx  eax,ah
c001af6c:	c1 ef 10             	shr    edi,0x10
c001af6f:	89 da                	mov    edx,ebx
c001af71:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001af74:	89 f9                	mov    ecx,edi
c001af76:	0f b6 f9             	movzx  edi,cl
c001af79:	89 f1                	mov    ecx,esi
c001af7b:	6b c0 3c             	imul   eax,eax,0x3c
c001af7e:	0f b6 f1             	movzx  esi,cl
c001af81:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001af87:	0f b6 db             	movzx  ebx,bl
c001af8a:	c1 ea 10             	shr    edx,0x10
c001af8d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001af93:	01 f8                	add    eax,edi
c001af95:	01 f0                	add    eax,esi
c001af97:	89 04 24             	mov    DWORD PTR [esp],eax
c001af9a:	c1 f8 1f             	sar    eax,0x1f
c001af9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afa1:	89 e8                	mov    eax,ebp
c001afa3:	0f b6 c0             	movzx  eax,al
c001afa6:	8b 0c 85 60 1f 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce0a0]
c001afad:	83 f8 01             	cmp    eax,0x1
c001afb0:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001afb4:	0f b7 da             	movzx  ebx,dx
c001afb7:	76 27                	jbe    c001afe0 <datetimeToSeconds(datetime_t)+0x8d>
c001afb9:	80 e2 03             	and    dl,0x3
c001afbc:	75 22                	jne    c001afe0 <datetimeToSeconds(datetime_t)+0x8d>
c001afbe:	31 d2                	xor    edx,edx
c001afc0:	be 64 00 00 00       	mov    esi,0x64
c001afc5:	89 d8                	mov    eax,ebx
c001afc7:	f7 f6                	div    esi
c001afc9:	85 d2                	test   edx,edx
c001afcb:	75 12                	jne    c001afdf <datetimeToSeconds(datetime_t)+0x8c>
c001afcd:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001afd3:	be 90 01 00 00       	mov    esi,0x190
c001afd8:	99                   	cdq    
c001afd9:	f7 fe                	idiv   esi
c001afdb:	85 d2                	test   edx,edx
c001afdd:	75 01                	jne    c001afe0 <datetimeToSeconds(datetime_t)+0x8d>
c001afdf:	41                   	inc    ecx
c001afe0:	83 fb 46             	cmp    ebx,0x46
c001afe3:	76 48                	jbe    c001b02d <datetimeToSeconds(datetime_t)+0xda>
c001afe5:	be 46 00 00 00       	mov    esi,0x46
c001afea:	bf 64 00 00 00       	mov    edi,0x64
c001afef:	bd 90 01 00 00       	mov    ebp,0x190
c001aff4:	f7 c6 03 00 00 00    	test   esi,0x3
c001affa:	b8 6d 01 00 00       	mov    eax,0x16d
c001afff:	75 23                	jne    c001b024 <datetimeToSeconds(datetime_t)+0xd1>
c001b001:	89 f0                	mov    eax,esi
c001b003:	99                   	cdq    
c001b004:	f7 ff                	idiv   edi
c001b006:	b8 6e 01 00 00       	mov    eax,0x16e
c001b00b:	85 d2                	test   edx,edx
c001b00d:	75 15                	jne    c001b024 <datetimeToSeconds(datetime_t)+0xd1>
c001b00f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b015:	99                   	cdq    
c001b016:	f7 fd                	idiv   ebp
c001b018:	83 fa 01             	cmp    edx,0x1
c001b01b:	19 c0                	sbb    eax,eax
c001b01d:	f7 d0                	not    eax
c001b01f:	05 6e 01 00 00       	add    eax,0x16e
c001b024:	46                   	inc    esi
c001b025:	01 c1                	add    ecx,eax
c001b027:	39 de                	cmp    esi,ebx
c001b029:	7c c9                	jl     c001aff4 <datetimeToSeconds(datetime_t)+0xa1>
c001b02b:	eb 34                	jmp    c001b061 <datetimeToSeconds(datetime_t)+0x10e>
c001b02d:	74 32                	je     c001b061 <datetimeToSeconds(datetime_t)+0x10e>
c001b02f:	b8 45 00 00 00       	mov    eax,0x45
c001b034:	89 c2                	mov    edx,eax
c001b036:	83 e2 03             	and    edx,0x3
c001b039:	39 d8                	cmp    eax,ebx
c001b03b:	7e 0f                	jle    c001b04c <datetimeToSeconds(datetime_t)+0xf9>
c001b03d:	83 fa 01             	cmp    edx,0x1
c001b040:	19 d2                	sbb    edx,edx
c001b042:	48                   	dec    eax
c001b043:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b04a:	eb e8                	jmp    c001b034 <datetimeToSeconds(datetime_t)+0xe1>
c001b04c:	85 d2                	test   edx,edx
c001b04e:	b8 6d 01 00 00       	mov    eax,0x16d
c001b053:	75 0a                	jne    c001b05f <datetimeToSeconds(datetime_t)+0x10c>
c001b055:	83 fb 01             	cmp    ebx,0x1
c001b058:	19 c0                	sbb    eax,eax
c001b05a:	05 6e 01 00 00       	add    eax,0x16e
c001b05f:	29 c1                	sub    ecx,eax
c001b061:	b8 80 51 01 00       	mov    eax,0x15180
c001b066:	f7 e9                	imul   ecx
c001b068:	03 04 24             	add    eax,DWORD PTR [esp]
c001b06b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b06f:	83 c4 0c             	add    esp,0xc
c001b072:	5b                   	pop    ebx
c001b073:	5e                   	pop    esi
c001b074:	5f                   	pop    edi
c001b075:	5d                   	pop    ebp
c001b076:	c3                   	ret    
c001b077:	90                   	nop

c001b078 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b078:	57                   	push   edi
c001b079:	56                   	push   esi
c001b07a:	53                   	push   ebx
c001b07b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b07f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b081:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b084:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b088:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b08c:	e8 c2 fe ff ff       	call   c001af53 <datetimeToSeconds(datetime_t)>
c001b091:	59                   	pop    ecx
c001b092:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b099:	5b                   	pop    ebx
c001b09a:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b0a0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b0a6:	89 cb                	mov    ebx,ecx
c001b0a8:	c1 fb 1f             	sar    ebx,0x1f
c001b0ab:	29 c8                	sub    eax,ecx
c001b0ad:	19 da                	sbb    edx,ebx
c001b0af:	31 c9                	xor    ecx,ecx
c001b0b1:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b0b8:	74 05                	je     c001b0bf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b0ba:	b9 08 07 00 00       	mov    ecx,0x708
c001b0bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b0c3:	31 db                	xor    ebx,ebx
c001b0c5:	29 c8                	sub    eax,ecx
c001b0c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0cb:	19 da                	sbb    edx,ebx
c001b0cd:	89 f8                	mov    eax,edi
c001b0cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0d3:	5b                   	pop    ebx
c001b0d4:	5e                   	pop    esi
c001b0d5:	5f                   	pop    edi
c001b0d6:	ff e0                	jmp    eax

c001b0d8 <secondsToDatetime(unsigned long long)>:
c001b0d8:	55                   	push   ebp
c001b0d9:	57                   	push   edi
c001b0da:	56                   	push   esi
c001b0db:	53                   	push   ebx
c001b0dc:	83 ec 1c             	sub    esp,0x1c
c001b0df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b0e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b0e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0eb:	6a 00                	push   0x0
c001b0ed:	68 80 51 01 00       	push   0x15180
c001b0f2:	55                   	push   ebp
c001b0f3:	57                   	push   edi
c001b0f4:	e8 07 36 01 00       	call   c002e700 <__udivdi3>
c001b0f9:	83 c4 10             	add    esp,0x10
c001b0fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b100:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b106:	6a 00                	push   0x0
c001b108:	68 80 51 01 00       	push   0x15180
c001b10d:	55                   	push   ebp
c001b10e:	57                   	push   edi
c001b10f:	bf 10 0e 00 00       	mov    edi,0xe10
c001b114:	e8 e7 36 01 00       	call   c002e800 <__umoddi3>
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	99                   	cdq    
c001b11d:	f7 ff                	idiv   edi
c001b11f:	bf 3c 00 00 00       	mov    edi,0x3c
c001b124:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b127:	89 d0                	mov    eax,edx
c001b129:	99                   	cdq    
c001b12a:	f7 ff                	idiv   edi
c001b12c:	85 db                	test   ebx,ebx
c001b12e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b131:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b134:	79 11                	jns    c001b147 <secondsToDatetime(unsigned long long)+0x6f>
c001b136:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b13a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b140:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b145:	eb 07                	jmp    c001b14e <secondsToDatetime(unsigned long long)+0x76>
c001b147:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b14c:	89 d8                	mov    eax,ebx
c001b14e:	99                   	cdq    
c001b14f:	bf b4 05 00 00       	mov    edi,0x5b4
c001b154:	f7 f9                	idiv   ecx
c001b156:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b15b:	31 d2                	xor    edx,edx
c001b15d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b162:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b166:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b16e:	01 c3                	add    ebx,eax
c001b170:	89 d8                	mov    eax,ebx
c001b172:	f7 f1                	div    ecx
c001b174:	31 d2                	xor    edx,edx
c001b176:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b179:	89 d8                	mov    eax,ebx
c001b17b:	f7 f7                	div    edi
c001b17d:	31 d2                	xor    edx,edx
c001b17f:	29 c1                	sub    ecx,eax
c001b181:	89 d8                	mov    eax,ebx
c001b183:	f7 f5                	div    ebp
c001b185:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b18a:	31 d2                	xor    edx,edx
c001b18c:	29 c1                	sub    ecx,eax
c001b18e:	89 c8                	mov    eax,ecx
c001b190:	f7 f5                	div    ebp
c001b192:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b197:	31 d2                	xor    edx,edx
c001b199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b19d:	89 c8                	mov    eax,ecx
c001b19f:	f7 f5                	div    ebp
c001b1a1:	31 d2                	xor    edx,edx
c001b1a3:	01 c3                	add    ebx,eax
c001b1a5:	89 c8                	mov    eax,ecx
c001b1a7:	f7 f7                	div    edi
c001b1a9:	bf 99 00 00 00       	mov    edi,0x99
c001b1ae:	31 d2                	xor    edx,edx
c001b1b0:	29 c3                	sub    ebx,eax
c001b1b2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b1ba:	29 c3                	sub    ebx,eax
c001b1bc:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b1bf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b1c2:	83 c1 02             	add    ecx,0x2
c001b1c5:	89 c8                	mov    eax,ecx
c001b1c7:	bb 05 00 00 00       	mov    ebx,0x5
c001b1cc:	f7 f7                	div    edi
c001b1ce:	31 d2                	xor    edx,edx
c001b1d0:	89 c7                	mov    edi,eax
c001b1d2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b1d8:	83 c0 02             	add    eax,0x2
c001b1db:	f7 f3                	div    ebx
c001b1dd:	89 eb                	mov    ebx,ebp
c001b1df:	29 c3                	sub    ebx,eax
c001b1e1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b1e7:	88 1e                	mov    BYTE PTR [esi],bl
c001b1e9:	19 c0                	sbb    eax,eax
c001b1eb:	31 d2                	xor    edx,edx
c001b1ed:	83 e0 0c             	and    eax,0xc
c001b1f0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b1f4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b1fc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b200:	83 f9 01             	cmp    ecx,0x1
c001b203:	0f 96 c2             	setbe  dl
c001b206:	41                   	inc    ecx
c001b207:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b20a:	01 d0                	add    eax,edx
c001b20c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b210:	83 c4 1c             	add    esp,0x1c
c001b213:	89 f0                	mov    eax,esi
c001b215:	5b                   	pop    ebx
c001b216:	5e                   	pop    esi
c001b217:	5f                   	pop    edi
c001b218:	5d                   	pop    ebp
c001b219:	c2 04 00             	ret    0x4

c001b21c <Clock::timeInDatetimeLocal()>:
c001b21c:	53                   	push   ebx
c001b21d:	83 ec 14             	sub    esp,0x14
c001b220:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b224:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b228:	e8 85 fc ff ff       	call   c001aeb2 <Clock::timeInSecondsLocal()>
c001b22d:	83 c4 0c             	add    esp,0xc
c001b230:	52                   	push   edx
c001b231:	50                   	push   eax
c001b232:	53                   	push   ebx
c001b233:	e8 a0 fe ff ff       	call   c001b0d8 <secondsToDatetime(unsigned long long)>
c001b238:	89 d8                	mov    eax,ebx
c001b23a:	83 c4 14             	add    esp,0x14
c001b23d:	5b                   	pop    ebx
c001b23e:	c2 04 00             	ret    0x4
c001b241:	90                   	nop

c001b242 <Device::hibernate()>:
c001b242:	c3                   	ret    
c001b243:	90                   	nop

c001b244 <Device::wake()>:
c001b244:	c3                   	ret    
c001b245:	90                   	nop

c001b246 <Device::detect()>:
c001b246:	c3                   	ret    
c001b247:	90                   	nop

c001b248 <Device::disableLegacy()>:
c001b248:	c3                   	ret    
c001b249:	90                   	nop

c001b24a <Device::powerSaving(PowerSavingLevel)>:
c001b24a:	c3                   	ret    
c001b24b:	90                   	nop

c001b24c <DriverlessDevice::close(int, int, void*)>:
c001b24c:	31 c0                	xor    eax,eax
c001b24e:	c3                   	ret    
c001b24f:	90                   	nop

c001b250 <DriverlessDevice::detect()>:
c001b250:	c3                   	ret    
c001b251:	90                   	nop

c001b252 <DriverlessDevice::open(int, int, void*)>:
c001b252:	83 ec 18             	sub    esp,0x18
c001b255:	68 90 1f 03 c0       	push   0xc0031f90
c001b25a:	e8 f7 4f 00 00       	call   c0020256 <KePanic(char const*)>
c001b25f:	83 c8 ff             	or     eax,0xffffffff
c001b262:	83 c4 1c             	add    esp,0x1c
c001b265:	c3                   	ret    

c001b266 <Device::~Device()>:
c001b266:	ba fc 1f 03 c0       	mov    edx,0xc0031ffc
c001b26b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b26f:	89 10                	mov    DWORD PTR [eax],edx
c001b271:	90                   	nop
c001b272:	c3                   	ret    
c001b273:	90                   	nop

c001b274 <Device::~Device()>:
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b27b:	e8 e6 ff ff ff       	call   c001b266 <Device::~Device()>
c001b280:	83 c4 04             	add    esp,0x4
c001b283:	83 ec 08             	sub    esp,0x8
c001b286:	68 58 01 00 00       	push   0x158
c001b28b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b28f:	e8 3c df ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001b294:	83 c4 10             	add    esp,0x10
c001b297:	83 c4 0c             	add    esp,0xc
c001b29a:	c3                   	ret    
c001b29b:	90                   	nop

c001b29c <Device::findAndLoadDriver()>:
c001b29c:	c7 44 24 04 ae 1f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031fae
c001b2a4:	e9 25 e0 ff ff       	jmp    c00192ce <Dbg::kprintf(char const*, ...)>
c001b2a9:	90                   	nop

c001b2aa <Device::preOpenPCI(PCIDeviceInfo)>:
c001b2aa:	57                   	push   edi
c001b2ab:	b9 09 00 00 00       	mov    ecx,0x9
c001b2b0:	56                   	push   esi
c001b2b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b2b5:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b2b9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b2c3:	81 c7 18 01 00 00    	add    edi,0x118
c001b2c9:	fc                   	cld    
c001b2ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2cc:	5e                   	pop    esi
c001b2cd:	5f                   	pop    edi
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <Device::preOpenACPI(void*, char*, char*)>:
c001b2d0:	57                   	push   edi
c001b2d1:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b2d6:	56                   	push   esi
c001b2d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2e3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b2ed:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b2f3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b2f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2fb:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b301:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b305:	b9 0e 00 00 00       	mov    ecx,0xe
c001b30a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b30c:	5e                   	pop    esi
c001b30d:	5f                   	pop    edi
c001b30e:	c3                   	ret    
c001b30f:	90                   	nop

c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b310:	53                   	push   ebx
c001b311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b315:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b319:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b31d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b321:	0f b6 c0             	movzx  eax,al
c001b324:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b328:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b32c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b330:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b334:	5b                   	pop    ebx
c001b335:	e9 be 05 00 00       	jmp    c001b8f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b33a <Device::getParent()>:
c001b33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b33e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b34a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b34e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b357:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b35b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b35f:	e9 0b 07 00 00       	jmp    c001ba6f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b364 <Device::addChild(Device*)>:
c001b364:	53                   	push   ebx
c001b365:	83 ec 08             	sub    esp,0x8
c001b368:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b370:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b376:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b37c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b37e:	85 d2                	test   edx,edx
c001b380:	74 04                	je     c001b386 <Device::addChild(Device*)+0x22>
c001b382:	89 d3                	mov    ebx,edx
c001b384:	eb f6                	jmp    c001b37c <Device::addChild(Device*)+0x18>
c001b386:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b389:	83 ec 0c             	sub    esp,0xc
c001b38c:	6a 08                	push   0x8
c001b38e:	e8 04 b1 ff ff       	call   c0016497 <malloc>
c001b393:	89 03                	mov    DWORD PTR [ebx],eax
c001b395:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b39b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3a2:	83 c4 18             	add    esp,0x18
c001b3a5:	5b                   	pop    ebx
c001b3a6:	c3                   	ret    
c001b3a7:	90                   	nop

c001b3a8 <Device::removeAllChildren()>:
c001b3a8:	56                   	push   esi
c001b3a9:	53                   	push   ebx
c001b3aa:	52                   	push   edx
c001b3ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3af:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b3b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3b8:	74 17                	je     c001b3d1 <Device::removeAllChildren()+0x29>
c001b3ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b3bd:	85 c0                	test   eax,eax
c001b3bf:	74 0c                	je     c001b3cd <Device::removeAllChildren()+0x25>
c001b3c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3c3:	83 ec 0c             	sub    esp,0xc
c001b3c6:	50                   	push   eax
c001b3c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3cf:	eb e4                	jmp    c001b3b5 <Device::removeAllChildren()+0xd>
c001b3d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b3d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3dd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b3e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3ea:	58                   	pop    eax
c001b3eb:	5b                   	pop    ebx
c001b3ec:	5e                   	pop    esi
c001b3ed:	c3                   	ret    

c001b3ee <Device::hibernateAll()>:
c001b3ee:	53                   	push   ebx
c001b3ef:	83 ec 14             	sub    esp,0x14
c001b3f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3f8:	53                   	push   ebx
c001b3f9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b3fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b408:	74 0f                	je     c001b419 <Device::hibernateAll()+0x2b>
c001b40a:	83 ec 0c             	sub    esp,0xc
c001b40d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b410:	e8 d9 ff ff ff       	call   c001b3ee <Device::hibernateAll()>
c001b415:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b417:	eb e9                	jmp    c001b402 <Device::hibernateAll()+0x14>
c001b419:	83 c4 08             	add    esp,0x8
c001b41c:	5b                   	pop    ebx
c001b41d:	c3                   	ret    

c001b41e <Device::wakeAll()>:
c001b41e:	53                   	push   ebx
c001b41f:	83 ec 14             	sub    esp,0x14
c001b422:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b426:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b428:	53                   	push   ebx
c001b429:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b42c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b438:	74 0f                	je     c001b449 <Device::wakeAll()+0x2b>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b440:	e8 d9 ff ff ff       	call   c001b41e <Device::wakeAll()>
c001b445:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b447:	eb e9                	jmp    c001b432 <Device::wakeAll()+0x14>
c001b449:	83 c4 08             	add    esp,0x8
c001b44c:	5b                   	pop    ebx
c001b44d:	c3                   	ret    

c001b44e <Device::detectAll()>:
c001b44e:	53                   	push   ebx
c001b44f:	83 ec 14             	sub    esp,0x14
c001b452:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b456:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b458:	53                   	push   ebx
c001b459:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b45c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b462:	83 c4 10             	add    esp,0x10
c001b465:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b468:	74 0f                	je     c001b479 <Device::detectAll()+0x2b>
c001b46a:	83 ec 0c             	sub    esp,0xc
c001b46d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b470:	e8 d9 ff ff ff       	call   c001b44e <Device::detectAll()>
c001b475:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b477:	eb e9                	jmp    c001b462 <Device::detectAll()+0x14>
c001b479:	83 c4 08             	add    esp,0x8
c001b47c:	5b                   	pop    ebx
c001b47d:	c3                   	ret    

c001b47e <Device::disableLegacyAll()>:
c001b47e:	c3                   	ret    
c001b47f:	90                   	nop

c001b480 <Device::loadDriversForAll()>:
c001b480:	c3                   	ret    
c001b481:	90                   	nop

c001b482 <Device::powerSavingAll(PowerSavingLevel)>:
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	83 ec 0c             	sub    esp,0xc
c001b487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b48b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b48f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b491:	56                   	push   esi
c001b492:	53                   	push   ebx
c001b493:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b496:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4a2:	74 0f                	je     c001b4b3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b4a4:	52                   	push   edx
c001b4a5:	52                   	push   edx
c001b4a6:	56                   	push   esi
c001b4a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4aa:	e8 d3 ff ff ff       	call   c001b482 <Device::powerSavingAll(PowerSavingLevel)>
c001b4af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b4b1:	eb e9                	jmp    c001b49c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b4b3:	58                   	pop    eax
c001b4b4:	5b                   	pop    ebx
c001b4b5:	5e                   	pop    esi
c001b4b6:	c3                   	ret    
c001b4b7:	90                   	nop

c001b4b8 <Device::setName(char const*)>:
c001b4b8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b4c0:	e9 8b 51 fe ff       	jmp    c0000650 <strcpy>
c001b4c5:	90                   	nop

c001b4c6 <Device::Device(char const*)>:
c001b4c6:	83 ec 1c             	sub    esp,0x1c
c001b4c9:	ba fc 1f 03 c0       	mov    edx,0xc0031ffc
c001b4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4d2:	89 10                	mov    DWORD PTR [eax],edx
c001b4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4d8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b4e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b502:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b50c:	83 ec 08             	sub    esp,0x8
c001b50f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b517:	e8 9c ff ff ff       	call   c001b4b8 <Device::setName(char const*)>
c001b51c:	83 c4 10             	add    esp,0x10
c001b51f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b527:	83 ec 0c             	sub    esp,0xc
c001b52a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b52e:	e8 64 af ff ff       	call   c0016497 <malloc>
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b53c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b543:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b547:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b54d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b551:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b557:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b55d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b561:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b56e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b572:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b57d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b588:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b596:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b5a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5a4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b5ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5b2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b5bc:	90                   	nop
c001b5bd:	83 c4 1c             	add    esp,0x1c
c001b5c0:	c3                   	ret    
c001b5c1:	90                   	nop

c001b5c2 <Device::getName()>:
c001b5c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5c6:	05 d0 00 00 00       	add    eax,0xd0
c001b5cb:	c3                   	ret    

c001b5cc <Device::closeAll()>:
c001b5cc:	53                   	push   ebx
c001b5cd:	83 ec 08             	sub    esp,0x8
c001b5d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5d4:	53                   	push   ebx
c001b5d5:	e8 e8 ff ff ff       	call   c001b5c2 <Device::getName()>
c001b5da:	52                   	push   edx
c001b5db:	50                   	push   eax
c001b5dc:	68 e8 1f 03 c0       	push   0xc0031fe8
c001b5e1:	e8 e8 dc ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001b5e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5e8:	6a 00                	push   0x0
c001b5ea:	6a 00                	push   0x0
c001b5ec:	6a 00                	push   0x0
c001b5ee:	53                   	push   ebx
c001b5ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b5f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5f8:	83 c4 20             	add    esp,0x20
c001b5fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5fe:	74 12                	je     c001b612 <Device::closeAll()+0x46>
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b606:	e8 c1 ff ff ff       	call   c001b5cc <Device::closeAll()>
c001b60b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	eb e9                	jmp    c001b5fb <Device::closeAll()+0x2f>
c001b612:	83 c4 08             	add    esp,0x8
c001b615:	5b                   	pop    ebx
c001b616:	c3                   	ret    
c001b617:	90                   	nop

c001b618 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b618:	83 ec 0c             	sub    esp,0xc
c001b61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61f:	83 ec 08             	sub    esp,0x8
c001b622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b626:	50                   	push   eax
c001b627:	e8 9a fe ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	ba 28 20 03 c0       	mov    edx,0xc0032028
c001b634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b638:	89 10                	mov    DWORD PTR [eax],edx
c001b63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b648:	90                   	nop
c001b649:	83 c4 0c             	add    esp,0xc
c001b64c:	c3                   	ret    
c001b64d:	90                   	nop

c001b64e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b64e:	57                   	push   edi
c001b64f:	56                   	push   esi
c001b650:	53                   	push   ebx
c001b651:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b655:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b659:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b65d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b663:	75 0c                	jne    c001b671 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b665:	52                   	push   edx
c001b666:	52                   	push   edx
c001b667:	53                   	push   ebx
c001b668:	56                   	push   esi
c001b669:	e8 44 35 01 00       	call   c002ebb2 <LinkedList<Device>::addElement(Device*)>
c001b66e:	83 c4 10             	add    esp,0x10
c001b671:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b677:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b67a:	74 12                	je     c001b68e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b67c:	50                   	push   eax
c001b67d:	57                   	push   edi
c001b67e:	56                   	push   esi
c001b67f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b682:	e8 c7 ff ff ff       	call   c001b64e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b687:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b689:	83 c4 10             	add    esp,0x10
c001b68c:	eb e9                	jmp    c001b677 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b68e:	5b                   	pop    ebx
c001b68f:	5e                   	pop    esi
c001b690:	5f                   	pop    edi
c001b691:	c3                   	ret    

c001b692 <getDevicesOfType(DeviceType)>:
c001b692:	53                   	push   ebx
c001b693:	83 ec 14             	sub    esp,0x14
c001b696:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b69a:	53                   	push   ebx
c001b69b:	e8 ee 35 01 00       	call   c002ec8e <LinkedList<Device>::LinkedList()>
c001b6a0:	83 c4 0c             	add    esp,0xc
c001b6a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6a7:	53                   	push   ebx
c001b6a8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b6ae:	e8 9b ff ff ff       	call   c001b64e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b6b3:	83 c4 18             	add    esp,0x18
c001b6b6:	89 d8                	mov    eax,ebx
c001b6b8:	5b                   	pop    ebx
c001b6b9:	c2 04 00             	ret    0x4

c001b6bc <HardDiskController::HardDiskController(char const*)>:
c001b6bc:	83 ec 0c             	sub    esp,0xc
c001b6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c3:	83 ec 08             	sub    esp,0x8
c001b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6ca:	50                   	push   eax
c001b6cb:	e8 f6 fd ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	ba 54 20 03 c0       	mov    edx,0xc0032054
c001b6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6dc:	89 10                	mov    DWORD PTR [eax],edx
c001b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b6ec:	90                   	nop
c001b6ed:	83 c4 0c             	add    esp,0xc
c001b6f0:	c3                   	ret    
c001b6f1:	90                   	nop
c001b6f2:	66 90                	xchg   ax,ax

c001b6f4 <HardDiskController::~HardDiskController()>:
c001b6f4:	83 ec 0c             	sub    esp,0xc
c001b6f7:	ba 54 20 03 c0       	mov    edx,0xc0032054
c001b6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b700:	89 10                	mov    DWORD PTR [eax],edx
c001b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b706:	83 ec 0c             	sub    esp,0xc
c001b709:	50                   	push   eax
c001b70a:	e8 57 fb ff ff       	call   c001b266 <Device::~Device()>
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	90                   	nop
c001b713:	83 c4 0c             	add    esp,0xc
c001b716:	c3                   	ret    
c001b717:	90                   	nop

c001b718 <HardDiskController::~HardDiskController()>:
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	83 ec 0c             	sub    esp,0xc
c001b71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b722:	e8 cd ff ff ff       	call   c001b6f4 <HardDiskController::~HardDiskController()>
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	83 ec 08             	sub    esp,0x8
c001b72d:	68 58 01 00 00       	push   0x158
c001b732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b736:	e8 95 da ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	83 c4 0c             	add    esp,0xc
c001b741:	c3                   	ret    

c001b742 <PhysicalDisk::eject()>:
c001b742:	83 c8 ff             	or     eax,0xffffffff
c001b745:	c3                   	ret    

c001b746 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74d:	83 ec 08             	sub    esp,0x8
c001b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b754:	50                   	push   eax
c001b755:	e8 6c fd ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001b75a:	83 c4 10             	add    esp,0x10
c001b75d:	ba 80 20 03 c0       	mov    edx,0xc0032080
c001b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b766:	89 10                	mov    DWORD PTR [eax],edx
c001b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b76c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b777:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b782:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b790:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b794:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b79e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b7a8:	90                   	nop
c001b7a9:	83 c4 0c             	add    esp,0xc
c001b7ac:	c3                   	ret    
c001b7ad:	90                   	nop

c001b7ae <PhysicalDisk::startCache()>:
c001b7ae:	56                   	push   esi
c001b7af:	53                   	push   ebx
c001b7b0:	83 ec 10             	sub    esp,0x10
c001b7b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b7b7:	6a 44                	push   0x44
c001b7b9:	e8 d9 ac ff ff       	call   c0016497 <malloc>
c001b7be:	89 c6                	mov    esi,eax
c001b7c0:	58                   	pop    eax
c001b7c1:	5a                   	pop    edx
c001b7c2:	53                   	push   ebx
c001b7c3:	56                   	push   esi
c001b7c4:	e8 77 17 00 00       	call   c001cf40 <VCache::VCache(PhysicalDisk*)>
c001b7c9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b7cf:	83 c4 14             	add    esp,0x14
c001b7d2:	5b                   	pop    ebx
c001b7d3:	5e                   	pop    esi
c001b7d4:	c3                   	ret    
c001b7d5:	90                   	nop

c001b7d6 <PhysicalDisk::~PhysicalDisk()>:
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	ba 80 20 03 c0       	mov    edx,0xc0032080
c001b7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e2:	89 10                	mov    DWORD PTR [eax],edx
c001b7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	50                   	push   eax
c001b7ec:	e8 75 fa ff ff       	call   c001b266 <Device::~Device()>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	90                   	nop
c001b7f5:	83 c4 0c             	add    esp,0xc
c001b7f8:	c3                   	ret    
c001b7f9:	90                   	nop

c001b7fa <PhysicalDisk::~PhysicalDisk()>:
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	83 ec 0c             	sub    esp,0xc
c001b800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b804:	e8 cd ff ff ff       	call   c001b7d6 <PhysicalDisk::~PhysicalDisk()>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	83 ec 08             	sub    esp,0x8
c001b80f:	68 6c 01 00 00       	push   0x16c
c001b814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b818:	e8 b3 d9 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	83 c4 0c             	add    esp,0xc
c001b823:	c3                   	ret    

c001b824 <int_handler>:
c001b824:	55                   	push   ebp
c001b825:	57                   	push   edi
c001b826:	56                   	push   esi
c001b827:	53                   	push   ebx
c001b828:	83 ec 0c             	sub    esp,0xc
c001b82b:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b832:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b836:	74 0b                	je     c001b843 <int_handler+0x1f>
c001b838:	fa                   	cli    
c001b839:	f4                   	hlt    
c001b83a:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b841:	75 f5                	jne    c001b838 <int_handler+0x14>
c001b843:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b846:	8d 46 e0             	lea    eax,[esi-0x20]
c001b849:	83 f8 17             	cmp    eax,0x17
c001b84c:	76 40                	jbe    c001b88e <int_handler+0x6a>
c001b84e:	c1 e6 04             	shl    esi,0x4
c001b851:	31 db                	xor    ebx,ebx
c001b853:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b859:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b85f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b863:	85 c0                	test   eax,eax
c001b865:	74 13                	je     c001b87a <int_handler+0x56>
c001b867:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b86b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b86e:	74 2c                	je     c001b89c <int_handler+0x78>
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	52                   	push   edx
c001b874:	57                   	push   edi
c001b875:	ff d0                	call   eax
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	83 c3 01             	add    ebx,0x1
c001b87d:	83 fb 04             	cmp    ebx,0x4
c001b880:	75 dd                	jne    c001b85f <int_handler+0x3b>
c001b882:	83 c4 0c             	add    esp,0xc
c001b885:	31 c0                	xor    eax,eax
c001b887:	5b                   	pop    ebx
c001b888:	31 d2                	xor    edx,edx
c001b88a:	5e                   	pop    esi
c001b88b:	5f                   	pop    edi
c001b88c:	5d                   	pop    ebp
c001b88d:	c3                   	ret    
c001b88e:	83 ec 0c             	sub    esp,0xc
c001b891:	50                   	push   eax
c001b892:	e8 1f ba 00 00       	call   c00272b6 <HalEndOfInterrupt(int)>
c001b897:	83 c4 10             	add    esp,0x10
c001b89a:	eb b2                	jmp    c001b84e <int_handler+0x2a>
c001b89c:	83 ec 08             	sub    esp,0x8
c001b89f:	52                   	push   edx
c001b8a0:	57                   	push   edi
c001b8a1:	ff d0                	call   eax
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	83 c4 0c             	add    esp,0xc
c001b8a9:	5b                   	pop    ebx
c001b8aa:	5e                   	pop    esi
c001b8ab:	5f                   	pop    edi
c001b8ac:	5d                   	pop    ebp
c001b8ad:	c3                   	ret    

c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b8ae:	56                   	push   esi
c001b8af:	31 c0                	xor    eax,eax
c001b8b1:	53                   	push   ebx
c001b8b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b8b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b8be:	89 ca                	mov    edx,ecx
c001b8c0:	c1 e2 04             	shl    edx,0x4
c001b8c3:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b8cb:	74 17                	je     c001b8e4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b8cd:	83 c0 01             	add    eax,0x1
c001b8d0:	83 f8 04             	cmp    eax,0x4
c001b8d3:	75 ee                	jne    c001b8c3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b8d5:	c7 44 24 0c b0 20 03 c0 	mov    DWORD PTR [esp+0xc],0xc00320b0
c001b8dd:	5b                   	pop    ebx
c001b8de:	5e                   	pop    esi
c001b8df:	e9 72 49 00 00       	jmp    c0020256 <KePanic(char const*)>
c001b8e4:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b8e7:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b8ee:	5b                   	pop    ebx
c001b8ef:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b8f6:	5e                   	pop    esi
c001b8f7:	c3                   	ret    

c001b8f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b8f8:	55                   	push   ebp
c001b8f9:	57                   	push   edi
c001b8fa:	56                   	push   esi
c001b8fb:	53                   	push   ebx
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b905:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b90d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b914:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b917:	74 57                	je     c001b970 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b919:	84 c0                	test   al,al
c001b91b:	89 c7                	mov    edi,eax
c001b91d:	74 1d                	je     c001b93c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b91f:	83 fe 0f             	cmp    esi,0xf
c001b922:	0f 8f d9 00 00 00    	jg     c001ba01 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001b928:	0f b6 b6 e8 3c 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc318]
c001b92f:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b937:	d1 ef                	shr    edi,1
c001b939:	83 e7 01             	and    edi,0x1
c001b93c:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b941:	83 ec 08             	sub    esp,0x8
c001b944:	31 db                	xor    ebx,ebx
c001b946:	50                   	push   eax
c001b947:	68 bd 20 03 c0       	push   0xc00320bd
c001b94c:	e8 7d d9 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001b951:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b956:	83 c4 10             	add    esp,0x10
c001b959:	85 c0                	test   eax,eax
c001b95b:	7f 59                	jg     c001b9b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001b95d:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	68 d4 20 03 c0       	push   0xc00320d4
c001b968:	e8 e9 48 00 00       	call   c0020256 <KePanic(char const*)>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	89 e8                	mov    eax,ebp
c001b972:	31 d2                	xor    edx,edx
c001b974:	c1 e0 04             	shl    eax,0x4
c001b977:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b97e:	85 c9                	test   ecx,ecx
c001b980:	0f 84 92 00 00 00    	je     c001ba18 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001b986:	83 c2 01             	add    edx,0x1
c001b989:	83 fa 04             	cmp    edx,0x4
c001b98c:	75 e9                	jne    c001b977 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001b98e:	83 ec 0c             	sub    esp,0xc
c001b991:	68 28 21 03 c0       	push   0xc0032128
c001b996:	e8 bb 48 00 00       	call   c0020256 <KePanic(char const*)>
c001b99b:	83 c4 10             	add    esp,0x10
c001b99e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	5b                   	pop    ebx
c001b9a7:	5e                   	pop    esi
c001b9a8:	5f                   	pop    edi
c001b9a9:	5d                   	pop    ebp
c001b9aa:	c3                   	ret    
c001b9ab:	83 c3 01             	add    ebx,0x1
c001b9ae:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b9b4:	7e a7                	jle    c001b95d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001b9b6:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001b9bd:	83 ec 08             	sub    esp,0x8
c001b9c0:	56                   	push   esi
c001b9c1:	55                   	push   ebp
c001b9c2:	e8 2f 21 01 00       	call   c002daf6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	84 c0                	test   al,al
c001b9cc:	74 dd                	je     c001b9ab <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b9ce:	89 f8                	mov    eax,edi
c001b9d0:	83 ec 04             	sub    esp,0x4
c001b9d3:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b9da:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b9dd:	0f b6 f8             	movzx  edi,al
c001b9e0:	57                   	push   edi
c001b9e1:	89 e8                	mov    eax,ebp
c001b9e3:	6a 00                	push   0x0
c001b9e5:	0f b6 c0             	movzx  eax,al
c001b9e8:	50                   	push   eax
c001b9e9:	89 f0                	mov    eax,esi
c001b9eb:	6a 00                	push   0x0
c001b9ed:	0f b6 c0             	movzx  eax,al
c001b9f0:	6a 00                	push   0x0
c001b9f2:	50                   	push   eax
c001b9f3:	53                   	push   ebx
c001b9f4:	e8 69 22 01 00       	call   c002dc62 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b9f9:	83 c4 20             	add    esp,0x20
c001b9fc:	e9 6f ff ff ff       	jmp    c001b970 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001ba01:	83 ec 0c             	sub    esp,0xc
c001ba04:	31 ff                	xor    edi,edi
c001ba06:	68 f0 20 03 c0       	push   0xc00320f0
c001ba0b:	e8 46 48 00 00       	call   c0020256 <KePanic(char const*)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	e9 24 ff ff ff       	jmp    c001b93c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001ba18:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001ba1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ba1f:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001ba26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba2a:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001ba31:	83 c4 0c             	add    esp,0xc
c001ba34:	89 f0                	mov    eax,esi
c001ba36:	5b                   	pop    ebx
c001ba37:	5e                   	pop    esi
c001ba38:	5f                   	pop    edi
c001ba39:	5d                   	pop    ebp
c001ba3a:	c3                   	ret    

c001ba3b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001ba3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba43:	c1 e0 04             	shl    eax,0x4
c001ba46:	8d 50 10             	lea    edx,[eax+0x10]
c001ba49:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001ba4f:	74 08                	je     c001ba59 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ba51:	83 c0 04             	add    eax,0x4
c001ba54:	39 d0                	cmp    eax,edx
c001ba56:	75 f1                	jne    c001ba49 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ba58:	c3                   	ret    
c001ba59:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba63:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba6d:	eb e2                	jmp    c001ba51 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ba6f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ba6f:	56                   	push   esi
c001ba70:	53                   	push   ebx
c001ba71:	83 ec 04             	sub    esp,0x4
c001ba74:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba81:	74 0e                	je     c001ba91 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001ba83:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ba88:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001ba8f:	75 34                	jne    c001bac5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001ba91:	8d 43 20             	lea    eax,[ebx+0x20]
c001ba94:	c1 e0 04             	shl    eax,0x4
c001ba97:	8d 50 10             	lea    edx,[eax+0x10]
c001ba9a:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001baa0:	74 0d                	je     c001baaf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001baa2:	83 c0 04             	add    eax,0x4
c001baa5:	39 d0                	cmp    eax,edx
c001baa7:	75 f1                	jne    c001ba9a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001baa9:	83 c4 04             	add    esp,0x4
c001baac:	5b                   	pop    ebx
c001baad:	5e                   	pop    esi
c001baae:	c3                   	ret    
c001baaf:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bab9:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bac3:	eb dd                	jmp    c001baa2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001bac5:	83 fb 0f             	cmp    ebx,0xf
c001bac8:	7f 09                	jg     c001bad3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001baca:	0f b6 9b e8 3c 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc318]
c001bad1:	eb be                	jmp    c001ba91 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bad3:	83 ec 0c             	sub    esp,0xc
c001bad6:	68 e1 20 03 c0       	push   0xc00320e1
c001badb:	e8 76 47 00 00       	call   c0020256 <KePanic(char const*)>
c001bae0:	83 c4 10             	add    esp,0x10
c001bae3:	eb ac                	jmp    c001ba91 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001bae5 <setupINTS()>:
c001bae5:	31 c0                	xor    eax,eax
c001bae7:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001baf1:	83 c0 10             	add    eax,0x10
c001baf4:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001bafe:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001bb08:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001bb12:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001bb1c:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001bb26:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001bb30:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001bb3a:	3d 00 10 00 00       	cmp    eax,0x1000
c001bb3f:	75 a6                	jne    c001bae7 <setupINTS()+0x2>
c001bb41:	c3                   	ret    

c001bb42 <convertLegacyIRQNumber(int)>:
c001bb42:	83 ec 0c             	sub    esp,0xc
c001bb45:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb56:	74 0c                	je     c001bb64 <convertLegacyIRQNumber(int)+0x22>
c001bb58:	83 f8 0f             	cmp    eax,0xf
c001bb5b:	7f 0b                	jg     c001bb68 <convertLegacyIRQNumber(int)+0x26>
c001bb5d:	0f b6 80 e8 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc318]
c001bb64:	83 c4 0c             	add    esp,0xc
c001bb67:	c3                   	ret    
c001bb68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bb6c:	83 ec 0c             	sub    esp,0xc
c001bb6f:	68 f0 20 03 c0       	push   0xc00320f0
c001bb74:	e8 dd 46 00 00       	call   c0020256 <KePanic(char const*)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb80:	83 c4 0c             	add    esp,0xc
c001bb83:	c3                   	ret    

c001bb84 <startGUI(void*)>:
c001bb84:	55                   	push   ebp
c001bb85:	89 e5                	mov    ebp,esp
c001bb87:	53                   	push   ebx
c001bb88:	83 ec 04             	sub    esp,0x4
c001bb8b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb90:	83 e8 01             	sub    eax,0x1
c001bb93:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb9d:	85 c0                	test   eax,eax
c001bb9f:	75 01                	jne    c001bba2 <startGUI(void*)+0x1e>
c001bba1:	fb                   	sti    
c001bba2:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bba8:	83 ec 08             	sub    esp,0x8
c001bbab:	6a 01                	push   0x1
c001bbad:	68 4d 21 03 c0       	push   0xc003214d
c001bbb2:	e8 54 8c 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	83 ec 08             	sub    esp,0x8
c001bbbd:	53                   	push   ebx
c001bbbe:	50                   	push   eax
c001bbbf:	e8 a8 8e 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001bbc4:	83 c4 10             	add    esp,0x10
c001bbc7:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bbcd:	83 ec 08             	sub    esp,0x8
c001bbd0:	6a 01                	push   0x1
c001bbd2:	68 67 21 03 c0       	push   0xc0032167
c001bbd7:	e8 2f 8c 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001bbdc:	83 c4 10             	add    esp,0x10
c001bbdf:	83 ec 08             	sub    esp,0x8
c001bbe2:	53                   	push   ebx
c001bbe3:	50                   	push   eax
c001bbe4:	e8 83 8e 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001bbe9:	83 c4 10             	add    esp,0x10
c001bbec:	eb fe                	jmp    c001bbec <startGUI(void*)+0x68>

c001bbee <startGUIVESA(void*)>:
c001bbee:	55                   	push   ebp
c001bbef:	89 e5                	mov    ebp,esp
c001bbf1:	53                   	push   ebx
c001bbf2:	83 ec 04             	sub    esp,0x4
c001bbf5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbfa:	83 e8 01             	sub    eax,0x1
c001bbfd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc02:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc07:	85 c0                	test   eax,eax
c001bc09:	75 01                	jne    c001bc0c <startGUIVESA(void*)+0x1e>
c001bc0b:	fb                   	sti    
c001bc0c:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bc12:	83 ec 08             	sub    esp,0x8
c001bc15:	6a 01                	push   0x1
c001bc17:	68 85 21 03 c0       	push   0xc0032185
c001bc1c:	e8 ea 8b 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	83 ec 08             	sub    esp,0x8
c001bc27:	53                   	push   ebx
c001bc28:	50                   	push   eax
c001bc29:	e8 3e 8e 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bc37:	83 ec 08             	sub    esp,0x8
c001bc3a:	6a 01                	push   0x1
c001bc3c:	68 67 21 03 c0       	push   0xc0032167
c001bc41:	e8 c5 8b 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001bc46:	83 c4 10             	add    esp,0x10
c001bc49:	83 ec 08             	sub    esp,0x8
c001bc4c:	53                   	push   ebx
c001bc4d:	50                   	push   eax
c001bc4e:	e8 19 8e 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	eb fe                	jmp    c001bc56 <startGUIVESA(void*)+0x68>

c001bc58 <sendKeyToTerminal(unsigned char)>:
c001bc58:	55                   	push   ebp
c001bc59:	89 e5                	mov    ebp,esp
c001bc5b:	83 ec 28             	sub    esp,0x28
c001bc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc61:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bc64:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bc69:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bc6d:	83 ec 08             	sub    esp,0x8
c001bc70:	52                   	push   edx
c001bc71:	50                   	push   eax
c001bc72:	e8 09 bb ff ff       	call   c0017780 <VgaText::receiveKey(unsigned char)>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc7e:	83 f8 0a             	cmp    eax,0xa
c001bc81:	74 16                	je     c001bc99 <sendKeyToTerminal(unsigned char)+0x41>
c001bc83:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc87:	83 f8 03             	cmp    eax,0x3
c001bc8a:	74 0d                	je     c001bc99 <sendKeyToTerminal(unsigned char)+0x41>
c001bc8c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc90:	83 f8 1c             	cmp    eax,0x1c
c001bc93:	0f 85 97 00 00 00    	jne    c001bd30 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc99:	fa                   	cli    
c001bc9a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc9f:	83 c0 01             	add    eax,0x1
c001bca2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bca7:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bcac:	83 c0 01             	add    eax,0x1
c001bcaf:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bcb4:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bcb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bcbc:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bcc6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bcca:	74 1f                	je     c001bceb <sendKeyToTerminal(unsigned char)+0x93>
c001bccc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bccf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bcd2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bcd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcd8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bcdb:	83 ec 0c             	sub    esp,0xc
c001bcde:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bce1:	e8 a2 98 00 00       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c001bce6:	83 c4 10             	add    esp,0x10
c001bce9:	eb db                	jmp    c001bcc6 <sendKeyToTerminal(unsigned char)+0x6e>
c001bceb:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bcf0:	83 e8 01             	sub    eax,0x1
c001bcf3:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bcf8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bcfd:	85 c0                	test   eax,eax
c001bcff:	75 18                	jne    c001bd19 <sendKeyToTerminal(unsigned char)+0xc1>
c001bd01:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bd06:	85 c0                	test   eax,eax
c001bd08:	74 0f                	je     c001bd19 <sendKeyToTerminal(unsigned char)+0xc1>
c001bd0a:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bd14:	e8 83 95 00 00       	call   c002529c <schedule()>
c001bd19:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd1e:	83 e8 01             	sub    eax,0x1
c001bd21:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bd26:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd2b:	85 c0                	test   eax,eax
c001bd2d:	75 01                	jne    c001bd30 <sendKeyToTerminal(unsigned char)+0xd8>
c001bd2f:	fb                   	sti    
c001bd30:	90                   	nop
c001bd31:	c9                   	leave  
c001bd32:	c3                   	ret    

c001bd33 <sendKeyboardToken(KeyboardToken)>:
c001bd33:	55                   	push   ebp
c001bd34:	89 e5                	mov    ebp,esp
c001bd36:	83 ec 18             	sub    esp,0x18
c001bd39:	e8 68 45 00 00       	call   c00202a6 <KeUserIOReceived()>
c001bd3e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bd41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd44:	0f b7 c0             	movzx  eax,ax
c001bd47:	83 f2 01             	xor    edx,0x1
c001bd4a:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bd50:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bd55:	85 c0                	test   eax,eax
c001bd57:	74 24                	je     c001bd7d <sendKeyboardToken(KeyboardToken)+0x4a>
c001bd59:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bd5f:	83 ec 04             	sub    esp,0x4
c001bd62:	68 40 ef 03 c0       	push   0xc003ef40
c001bd67:	83 ec 08             	sub    esp,0x8
c001bd6a:	89 e0                	mov    eax,esp
c001bd6c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bd6f:	89 08                	mov    DWORD PTR [eax],ecx
c001bd71:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bd74:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bd78:	ff d2                	call   edx
c001bd7a:	83 c4 10             	add    esp,0x10
c001bd7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bd81:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bd84:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bd89:	0f b6 d2             	movzx  edx,dl
c001bd8c:	0f b6 c0             	movzx  eax,al
c001bd8f:	39 c2                	cmp    edx,eax
c001bd91:	74 1c                	je     c001bdaf <sendKeyboardToken(KeyboardToken)+0x7c>
c001bd93:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bd96:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bd9b:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bda0:	0f b6 c0             	movzx  eax,al
c001bda3:	83 ec 0c             	sub    esp,0xc
c001bda6:	50                   	push   eax
c001bda7:	e8 30 b1 ff ff       	call   c0016edc <setTerminalScrollLock(bool)>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bdb2:	0f b6 c0             	movzx  eax,al
c001bdb5:	85 c0                	test   eax,eax
c001bdb7:	0f 84 da 00 00 00    	je     c001be97 <sendKeyboardToken(KeyboardToken)+0x164>
c001bdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc0:	0f b7 c0             	movzx  eax,ax
c001bdc3:	3d 18 03 00 00       	cmp    eax,0x318
c001bdc8:	75 06                	jne    c001bdd0 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bdca:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bdd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd3:	0f b7 c0             	movzx  eax,ax
c001bdd6:	3d 19 03 00 00       	cmp    eax,0x319
c001bddb:	75 06                	jne    c001bde3 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bddd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bde3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde6:	0f b7 c0             	movzx  eax,ax
c001bde9:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bdee:	75 06                	jne    c001bdf6 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bdf0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bdf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf9:	0f b7 c0             	movzx  eax,ax
c001bdfc:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be01:	75 06                	jne    c001be09 <sendKeyboardToken(KeyboardToken)+0xd6>
c001be03:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001be09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0c:	0f b7 c0             	movzx  eax,ax
c001be0f:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be14:	75 06                	jne    c001be1c <sendKeyboardToken(KeyboardToken)+0xe9>
c001be16:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001be1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be1f:	0f b7 c0             	movzx  eax,ax
c001be22:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be27:	75 06                	jne    c001be2f <sendKeyboardToken(KeyboardToken)+0xfc>
c001be29:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be32:	0f b7 c0             	movzx  eax,ax
c001be35:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be3a:	75 06                	jne    c001be42 <sendKeyboardToken(KeyboardToken)+0x10f>
c001be3c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001be42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be45:	0f b7 c0             	movzx  eax,ax
c001be48:	3d 1f 03 00 00       	cmp    eax,0x31f
c001be4d:	75 06                	jne    c001be55 <sendKeyboardToken(KeyboardToken)+0x122>
c001be4f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001be55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be58:	0f b7 c0             	movzx  eax,ax
c001be5b:	3d 20 03 00 00       	cmp    eax,0x320
c001be60:	75 06                	jne    c001be68 <sendKeyboardToken(KeyboardToken)+0x135>
c001be62:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001be68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be6b:	0f b7 c0             	movzx  eax,ax
c001be6e:	3d 21 03 00 00       	cmp    eax,0x321
c001be73:	75 06                	jne    c001be7b <sendKeyboardToken(KeyboardToken)+0x148>
c001be75:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001be7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be7e:	0f b7 c0             	movzx  eax,ax
c001be81:	3d 22 03 00 00       	cmp    eax,0x322
c001be86:	0f 85 f1 00 00 00    	jne    c001bf7d <sendKeyboardToken(KeyboardToken)+0x24a>
c001be8c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001be92:	e9 e6 00 00 00       	jmp    c001bf7d <sendKeyboardToken(KeyboardToken)+0x24a>
c001be97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9a:	0f b7 c0             	movzx  eax,ax
c001be9d:	3d 18 03 00 00       	cmp    eax,0x318
c001bea2:	75 0a                	jne    c001beae <sendKeyboardToken(KeyboardToken)+0x17b>
c001bea4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001beaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb1:	0f b7 c0             	movzx  eax,ax
c001beb4:	3d 19 03 00 00       	cmp    eax,0x319
c001beb9:	75 0a                	jne    c001bec5 <sendKeyboardToken(KeyboardToken)+0x192>
c001bebb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bec1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec8:	0f b7 c0             	movzx  eax,ax
c001becb:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bed0:	75 0a                	jne    c001bedc <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bed2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001bed8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bedc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bedf:	0f b7 c0             	movzx  eax,ax
c001bee2:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bee7:	75 0a                	jne    c001bef3 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001bee9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001beef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef6:	0f b7 c0             	movzx  eax,ax
c001bef9:	3d 1c 03 00 00       	cmp    eax,0x31c
c001befe:	75 0a                	jne    c001bf0a <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bf00:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bf06:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf0d:	0f b7 c0             	movzx  eax,ax
c001bf10:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bf15:	75 0a                	jne    c001bf21 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001bf17:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bf1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf24:	0f b7 c0             	movzx  eax,ax
c001bf27:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bf2c:	75 0a                	jne    c001bf38 <sendKeyboardToken(KeyboardToken)+0x205>
c001bf2e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001bf34:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf3b:	0f b7 c0             	movzx  eax,ax
c001bf3e:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bf43:	75 0a                	jne    c001bf4f <sendKeyboardToken(KeyboardToken)+0x21c>
c001bf45:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bf4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf52:	0f b7 c0             	movzx  eax,ax
c001bf55:	3d 20 03 00 00       	cmp    eax,0x320
c001bf5a:	75 0a                	jne    c001bf66 <sendKeyboardToken(KeyboardToken)+0x233>
c001bf5c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bf62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf69:	0f b7 c0             	movzx  eax,ax
c001bf6c:	3d 21 03 00 00       	cmp    eax,0x321
c001bf71:	75 0a                	jne    c001bf7d <sendKeyboardToken(KeyboardToken)+0x24a>
c001bf73:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bf79:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf80:	0f b7 c0             	movzx  eax,ax
c001bf83:	3d 00 02 00 00       	cmp    eax,0x200
c001bf88:	75 2f                	jne    c001bfb9 <sendKeyboardToken(KeyboardToken)+0x286>
c001bf8a:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf8f:	83 f0 01             	xor    eax,0x1
c001bf92:	0f b6 c0             	movzx  eax,al
c001bf95:	85 c0                	test   eax,eax
c001bf97:	74 20                	je     c001bfb9 <sendKeyboardToken(KeyboardToken)+0x286>
c001bf99:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf9e:	6a 01                	push   0x1
c001bfa0:	6a 00                	push   0x0
c001bfa2:	68 84 bb 01 c0       	push   0xc001bb84
c001bfa7:	50                   	push   eax
c001bfa8:	e8 a3 90 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c001bfad:	83 c4 10             	add    esp,0x10
c001bfb0:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bfb7:	eb 3a                	jmp    c001bff3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfbc:	0f b7 c0             	movzx  eax,ax
c001bfbf:	3d 01 02 00 00       	cmp    eax,0x201
c001bfc4:	75 2d                	jne    c001bff3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfc6:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bfcb:	83 f0 01             	xor    eax,0x1
c001bfce:	0f b6 c0             	movzx  eax,al
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	74 1e                	je     c001bff3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfd5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bfda:	6a 01                	push   0x1
c001bfdc:	6a 00                	push   0x0
c001bfde:	68 ee bb 01 c0       	push   0xc001bbee
c001bfe3:	50                   	push   eax
c001bfe4:	e8 67 90 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c001bfe9:	83 c4 10             	add    esp,0x10
c001bfec:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bff6:	0f b7 c0             	movzx  eax,ax
c001bff9:	3d 25 03 00 00       	cmp    eax,0x325
c001bffe:	75 06                	jne    c001c006 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c000:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c009:	0f b7 c0             	movzx  eax,ax
c001c00c:	3d 24 03 00 00       	cmp    eax,0x324
c001c011:	75 06                	jne    c001c019 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c013:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01c:	0f b7 c0             	movzx  eax,ax
c001c01f:	3d 23 03 00 00       	cmp    eax,0x323
c001c024:	75 06                	jne    c001c02c <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c026:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c02f:	0f b7 c0             	movzx  eax,ax
c001c032:	3d 26 03 00 00       	cmp    eax,0x326
c001c037:	75 06                	jne    c001c03f <sendKeyboardToken(KeyboardToken)+0x30c>
c001c039:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c042:	0f b7 c0             	movzx  eax,ax
c001c045:	3d 27 03 00 00       	cmp    eax,0x327
c001c04a:	75 06                	jne    c001c052 <sendKeyboardToken(KeyboardToken)+0x31f>
c001c04c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c055:	0f b7 c0             	movzx  eax,ax
c001c058:	3d 22 03 00 00       	cmp    eax,0x322
c001c05d:	75 06                	jne    c001c065 <sendKeyboardToken(KeyboardToken)+0x332>
c001c05f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c065:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c069:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c06c:	83 f0 01             	xor    eax,0x1
c001c06f:	0f b6 c0             	movzx  eax,al
c001c072:	85 c0                	test   eax,eax
c001c074:	74 7c                	je     c001c0f2 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c076:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c07b:	0f b6 c0             	movzx  eax,al
c001c07e:	85 c0                	test   eax,eax
c001c080:	74 43                	je     c001c0c5 <sendKeyboardToken(KeyboardToken)+0x392>
c001c082:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c086:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c08a:	85 c0                	test   eax,eax
c001c08c:	74 2b                	je     c001c0b9 <sendKeyboardToken(KeyboardToken)+0x386>
c001c08e:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c094:	89 d0                	mov    eax,edx
c001c096:	c1 e0 02             	shl    eax,0x2
c001c099:	01 d0                	add    eax,edx
c001c09b:	d1 e0                	shl    eax,1
c001c09d:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a5:	0f b7 c0             	movzx  eax,ax
c001c0a8:	8d 50 d0             	lea    edx,[eax-0x30]
c001c0ab:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0b0:	01 d0                	add    eax,edx
c001c0b2:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c0b7:	eb 71                	jmp    c001c12a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0b9:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c0c3:	eb 65                	jmp    c001c12a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0c5:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0ca:	85 c0                	test   eax,eax
c001c0cc:	74 18                	je     c001c0e6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c0ce:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0d3:	0f b6 c0             	movzx  eax,al
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	50                   	push   eax
c001c0da:	e8 79 fb ff ff       	call   c001bc58 <sendKeyToTerminal(unsigned char)>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c0e6:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c0f0:	eb 38                	jmp    c001c12a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f5:	0f b7 c0             	movzx  eax,ax
c001c0f8:	3d 01 01 00 00       	cmp    eax,0x101
c001c0fd:	75 2b                	jne    c001c12a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0ff:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c104:	85 c0                	test   eax,eax
c001c106:	74 18                	je     c001c120 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c108:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c10d:	0f b6 c0             	movzx  eax,al
c001c110:	83 ec 0c             	sub    esp,0xc
c001c113:	50                   	push   eax
c001c114:	e8 3f fb ff ff       	call   c001bc58 <sendKeyToTerminal(unsigned char)>
c001c119:	83 c4 10             	add    esp,0x10
c001c11c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c120:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c12a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c12d:	83 f0 01             	xor    eax,0x1
c001c130:	0f b6 c0             	movzx  eax,al
c001c133:	85 c0                	test   eax,eax
c001c135:	74 5a                	je     c001c191 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c137:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c13a:	83 f0 01             	xor    eax,0x1
c001c13d:	0f b6 c0             	movzx  eax,al
c001c140:	85 c0                	test   eax,eax
c001c142:	74 4d                	je     c001c191 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c144:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c149:	83 f0 01             	xor    eax,0x1
c001c14c:	0f b6 c0             	movzx  eax,al
c001c14f:	85 c0                	test   eax,eax
c001c151:	74 3e                	je     c001c191 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c156:	0f b7 c0             	movzx  eax,ax
c001c159:	83 f8 1f             	cmp    eax,0x1f
c001c15c:	76 0b                	jbe    c001c169 <sendKeyboardToken(KeyboardToken)+0x436>
c001c15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c161:	0f b7 c0             	movzx  eax,ax
c001c164:	83 f8 7e             	cmp    eax,0x7e
c001c167:	76 16                	jbe    c001c17f <sendKeyboardToken(KeyboardToken)+0x44c>
c001c169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c16c:	0f b7 c0             	movzx  eax,ax
c001c16f:	83 f8 0a             	cmp    eax,0xa
c001c172:	74 0b                	je     c001c17f <sendKeyboardToken(KeyboardToken)+0x44c>
c001c174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c177:	0f b7 c0             	movzx  eax,ax
c001c17a:	83 f8 08             	cmp    eax,0x8
c001c17d:	75 12                	jne    c001c191 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c17f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c182:	0f b6 c0             	movzx  eax,al
c001c185:	83 ec 0c             	sub    esp,0xc
c001c188:	50                   	push   eax
c001c189:	e8 ca fa ff ff       	call   c001bc58 <sendKeyToTerminal(unsigned char)>
c001c18e:	83 c4 10             	add    esp,0x10
c001c191:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c194:	83 f0 01             	xor    eax,0x1
c001c197:	0f b6 c0             	movzx  eax,al
c001c19a:	85 c0                	test   eax,eax
c001c19c:	74 5d                	je     c001c1fb <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c19e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c1a1:	83 f0 01             	xor    eax,0x1
c001c1a4:	0f b6 c0             	movzx  eax,al
c001c1a7:	85 c0                	test   eax,eax
c001c1a9:	74 50                	je     c001c1fb <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1ab:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c1b0:	0f b6 c0             	movzx  eax,al
c001c1b3:	85 c0                	test   eax,eax
c001c1b5:	74 44                	je     c001c1fb <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ba:	0f b7 c0             	movzx  eax,ax
c001c1bd:	83 f8 3f             	cmp    eax,0x3f
c001c1c0:	76 39                	jbe    c001c1fb <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1c5:	0f b7 c0             	movzx  eax,ax
c001c1c8:	83 f8 7f             	cmp    eax,0x7f
c001c1cb:	77 2e                	ja     c001c1fb <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1d0:	88 c2                	mov    dl,al
c001c1d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1d5:	0f b7 c0             	movzx  eax,ax
c001c1d8:	83 f8 5f             	cmp    eax,0x5f
c001c1db:	76 04                	jbe    c001c1e1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c1dd:	b0 20                	mov    al,0x20
c001c1df:	eb 02                	jmp    c001c1e3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c1e1:	b0 00                	mov    al,0x0
c001c1e3:	89 d1                	mov    ecx,edx
c001c1e5:	29 c1                	sub    ecx,eax
c001c1e7:	89 c8                	mov    eax,ecx
c001c1e9:	83 e8 40             	sub    eax,0x40
c001c1ec:	0f b6 c0             	movzx  eax,al
c001c1ef:	83 ec 0c             	sub    esp,0xc
c001c1f2:	50                   	push   eax
c001c1f3:	e8 60 fa ff ff       	call   c001bc58 <sendKeyToTerminal(unsigned char)>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1fe:	0f b7 c0             	movzx  eax,ax
c001c201:	3d 00 03 00 00       	cmp    eax,0x300
c001c206:	75 12                	jne    c001c21a <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c208:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c20b:	83 f0 01             	xor    eax,0x1
c001c20e:	0f b6 c0             	movzx  eax,al
c001c211:	85 c0                	test   eax,eax
c001c213:	74 05                	je     c001c21a <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c215:	e8 c3 ac ff ff       	call   c0016edd <doTerminalCycle()>
c001c21a:	90                   	nop
c001c21b:	c9                   	leave  
c001c21c:	c3                   	ret    

c001c21d <clearInternalKeybuffer(VgaText*)>:
c001c21d:	55                   	push   ebp
c001c21e:	89 e5                	mov    ebp,esp
c001c220:	83 ec 08             	sub    esp,0x8
c001c223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c226:	05 02 01 00 00       	add    eax,0x102
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	50                   	push   eax
c001c22f:	e8 4c 43 fe ff       	call   c0000580 <strlen>
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c23a:	81 c2 02 01 00 00    	add    edx,0x102
c001c240:	83 ec 04             	sub    esp,0x4
c001c243:	50                   	push   eax
c001c244:	6a 00                	push   0x0
c001c246:	52                   	push   edx
c001c247:	e8 a4 42 fe ff       	call   c00004f0 <memset>
c001c24c:	83 c4 10             	add    esp,0x10
c001c24f:	90                   	nop
c001c250:	c9                   	leave  
c001c251:	c3                   	ret    

c001c252 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c252:	55                   	push   ebp
c001c253:	89 e5                	mov    ebp,esp
c001c255:	83 ec 18             	sub    esp,0x18
c001c258:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c25d:	85 c0                	test   eax,eax
c001c25f:	74 2a                	je     c001c28b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c261:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c267:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c26d:	83 ec 04             	sub    esp,0x4
c001c270:	68 40 ef 03 c0       	push   0xc003ef40
c001c275:	83 ec 08             	sub    esp,0x8
c001c278:	89 e0                	mov    eax,esp
c001c27a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c27d:	89 08                	mov    DWORD PTR [eax],ecx
c001c27f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c282:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c286:	ff d2                	call   edx
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	fb                   	sti    
c001c28c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c293:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c297:	0f 84 0d 01 00 00    	je     c001c3aa <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c29d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2a0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c2a6:	0f be c0             	movsx  eax,al
c001c2a9:	85 c0                	test   eax,eax
c001c2ab:	75 2c                	jne    c001c2d9 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c2ad:	fa                   	cli    
c001c2ae:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2b3:	83 c0 01             	add    eax,0x1
c001c2b6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c2bb:	e8 dc 8f 00 00       	call   c002529c <schedule()>
c001c2c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2c5:	83 e8 01             	sub    eax,0x1
c001c2c8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c2cd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2d2:	85 c0                	test   eax,eax
c001c2d4:	75 c7                	jne    c001c29d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c2d6:	fb                   	sti    
c001c2d7:	eb c4                	jmp    c001c29d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c2d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c2dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c2df:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c2e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2e5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c2eb:	88 10                	mov    BYTE PTR [eax],dl
c001c2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2f0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c2f6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c2f9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2fd:	83 f8 03             	cmp    eax,0x3
c001c300:	75 1e                	jne    c001c320 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c302:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c307:	8b 00                	mov    eax,DWORD PTR [eax]
c001c309:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c30c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c312:	83 ec 08             	sub    esp,0x8
c001c315:	6a 02                	push   0x2
c001c317:	50                   	push   eax
c001c318:	e8 eb 47 00 00       	call   c0020b08 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c31d:	83 c4 10             	add    esp,0x10
c001c320:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c324:	83 f8 1c             	cmp    eax,0x1c
c001c327:	75 1e                	jne    c001c347 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c329:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c32e:	8b 00                	mov    eax,DWORD PTR [eax]
c001c330:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c333:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c339:	83 ec 08             	sub    esp,0x8
c001c33c:	6a 09                	push   0x9
c001c33e:	50                   	push   eax
c001c33f:	e8 c4 47 00 00       	call   c0020b08 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c34a:	05 02 01 00 00       	add    eax,0x102
c001c34f:	83 ec 0c             	sub    esp,0xc
c001c352:	50                   	push   eax
c001c353:	e8 28 42 fe ff       	call   c0000580 <strlen>
c001c358:	83 c4 10             	add    esp,0x10
c001c35b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c35e:	81 c2 02 01 00 00    	add    edx,0x102
c001c364:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c367:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c36a:	81 c2 02 01 00 00    	add    edx,0x102
c001c370:	83 ec 04             	sub    esp,0x4
c001c373:	50                   	push   eax
c001c374:	51                   	push   ecx
c001c375:	52                   	push   edx
c001c376:	e8 55 40 fe ff       	call   c00003d0 <memmove>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c382:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c386:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c38a:	83 f8 0a             	cmp    eax,0xa
c001c38d:	74 16                	je     c001c3a5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c38f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c393:	83 f8 03             	cmp    eax,0x3
c001c396:	74 0d                	je     c001c3a5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c398:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c39c:	83 f8 1c             	cmp    eax,0x1c
c001c39f:	0f 85 ee fe ff ff    	jne    c001c293 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c3a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c3a8:	eb 03                	jmp    c001c3ad <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c3aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c3ad:	c9                   	leave  
c001c3ae:	c3                   	ret    
c001c3af:	90                   	nop

c001c3b0 <Keyboard::Keyboard(char const*)>:
c001c3b0:	83 ec 0c             	sub    esp,0xc
c001c3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b7:	83 ec 08             	sub    esp,0x8
c001c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3be:	50                   	push   eax
c001c3bf:	e8 02 f1 ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	ba a8 21 03 c0       	mov    edx,0xc00321a8
c001c3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d0:	89 10                	mov    DWORD PTR [eax],edx
c001c3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c3e0:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c3e7:	90                   	nop
c001c3e8:	83 c4 0c             	add    esp,0xc
c001c3eb:	c3                   	ret    

c001c3ec <Keyboard::~Keyboard()>:
c001c3ec:	83 ec 0c             	sub    esp,0xc
c001c3ef:	ba a8 21 03 c0       	mov    edx,0xc00321a8
c001c3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f8:	89 10                	mov    DWORD PTR [eax],edx
c001c3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fe:	83 ec 0c             	sub    esp,0xc
c001c401:	50                   	push   eax
c001c402:	e8 5f ee ff ff       	call   c001b266 <Device::~Device()>
c001c407:	83 c4 10             	add    esp,0x10
c001c40a:	90                   	nop
c001c40b:	83 c4 0c             	add    esp,0xc
c001c40e:	c3                   	ret    
c001c40f:	90                   	nop

c001c410 <Keyboard::~Keyboard()>:
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	83 ec 0c             	sub    esp,0xc
c001c416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c41a:	e8 cd ff ff ff       	call   c001c3ec <Keyboard::~Keyboard()>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	83 ec 08             	sub    esp,0x8
c001c425:	68 5c 01 00 00       	push   0x15c
c001c42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c42e:	e8 9d cd ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	83 c4 0c             	add    esp,0xc
c001c439:	c3                   	ret    

c001c43a <LogicalDisk::close(int, int, void*)>:
c001c43a:	83 c8 ff             	or     eax,0xffffffff
c001c43d:	c3                   	ret    

c001c43e <LogicalDisk::~LogicalDisk()>:
c001c43e:	83 ec 0c             	sub    esp,0xc
c001c441:	ba 20 22 03 c0       	mov    edx,0xc0032220
c001c446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44a:	89 10                	mov    DWORD PTR [eax],edx
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	50                   	push   eax
c001c454:	e8 0d ee ff ff       	call   c001b266 <Device::~Device()>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	90                   	nop
c001c45d:	83 c4 0c             	add    esp,0xc
c001c460:	c3                   	ret    
c001c461:	90                   	nop

c001c462 <LogicalDisk::~LogicalDisk()>:
c001c462:	83 ec 0c             	sub    esp,0xc
c001c465:	83 ec 0c             	sub    esp,0xc
c001c468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c46c:	e8 cd ff ff ff       	call   c001c43e <LogicalDisk::~LogicalDisk()>
c001c471:	83 c4 10             	add    esp,0x10
c001c474:	83 ec 08             	sub    esp,0x8
c001c477:	68 78 01 00 00       	push   0x178
c001c47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c480:	e8 4b cd ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	83 c4 0c             	add    esp,0xc
c001c48b:	c3                   	ret    

c001c48c <LogicalDisk::open(int, int, void*)>:
c001c48c:	83 ec 18             	sub    esp,0x18
c001c48f:	68 d4 21 03 c0       	push   0xc00321d4
c001c494:	e8 bd 3d 00 00       	call   c0020256 <KePanic(char const*)>
c001c499:	83 c8 ff             	or     eax,0xffffffff
c001c49c:	83 c4 1c             	add    esp,0x1c
c001c49f:	c3                   	ret    

c001c4a0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c4a0:	53                   	push   ebx
c001c4a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4ad:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c4b3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c4b9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c4bf:	77 10                	ja     c001c4d1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c4c1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c4c7:	89 d3                	mov    ebx,edx
c001c4c9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c4cf:	72 05                	jb     c001c4d6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c4d1:	83 c8 ff             	or     eax,0xffffffff
c001c4d4:	89 c2                	mov    edx,eax
c001c4d6:	5b                   	pop    ebx
c001c4d7:	c3                   	ret    

c001c4d8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c4d8:	56                   	push   esi
c001c4d9:	83 c8 ff             	or     eax,0xffffffff
c001c4dc:	53                   	push   ebx
c001c4dd:	89 c2                	mov    edx,eax
c001c4df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c4e3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c4e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c4f1:	77 27                	ja     c001c51a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c4f3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c4f9:	89 d8                	mov    eax,ebx
c001c4fb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c501:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c506:	89 c2                	mov    edx,eax
c001c508:	73 10                	jae    c001c51a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c50a:	89 c8                	mov    eax,ecx
c001c50c:	89 da                	mov    edx,ebx
c001c50e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c514:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c51a:	5b                   	pop    ebx
c001c51b:	5e                   	pop    esi
c001c51c:	c3                   	ret    
c001c51d:	90                   	nop

c001c51e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c51e:	83 ec 1c             	sub    esp,0x1c
c001c521:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c529:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c52d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c531:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c535:	89 04 24             	mov    DWORD PTR [esp],eax
c001c538:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c53c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c544:	83 ec 08             	sub    esp,0x8
c001c547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c54b:	50                   	push   eax
c001c54c:	e8 75 ef ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001c551:	83 c4 10             	add    esp,0x10
c001c554:	ba 20 22 03 c0       	mov    edx,0xc0032220
c001c559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c55d:	89 10                	mov    DWORD PTR [eax],edx
c001c55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c563:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c56a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c56e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c579:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c584:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c58e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c59a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c5a0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c5aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5b1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c5b7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c5bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5c5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5cf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c5d9:	90                   	nop
c001c5da:	83 c4 1c             	add    esp,0x1c
c001c5dd:	c3                   	ret    

c001c5de <LogicalDisk::assignDriveLetter()>:
c001c5de:	55                   	push   ebp
c001c5df:	57                   	push   edi
c001c5e0:	56                   	push   esi
c001c5e1:	53                   	push   ebx
c001c5e2:	83 ec 14             	sub    esp,0x14
c001c5e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5e9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c5ef:	b0 41                	mov    al,0x41
c001c5f1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c5f7:	84 d2                	test   dl,dl
c001c5f9:	75 02                	jne    c001c5fd <LogicalDisk::assignDriveLetter()+0x1f>
c001c5fb:	b0 43                	mov    al,0x43
c001c5fd:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c603:	0f b6 ca             	movzx  ecx,dl
c001c606:	0f be e8             	movsx  ebp,al
c001c609:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c60d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c611:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c617:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c61b:	3c 43                	cmp    al,0x43
c001c61d:	75 10                	jne    c001c62f <LogicalDisk::assignDriveLetter()+0x51>
c001c61f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c626:	75 5a                	jne    c001c682 <LogicalDisk::assignDriveLetter()+0xa4>
c001c628:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c62d:	75 53                	jne    c001c682 <LogicalDisk::assignDriveLetter()+0xa4>
c001c62f:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c632:	ba 01 00 00 00       	mov    edx,0x1
c001c637:	89 34 24             	mov    DWORD PTR [esp],esi
c001c63a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c63d:	d3 e2                	shl    edx,cl
c001c63f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c643:	89 d7                	mov    edi,edx
c001c645:	89 d6                	mov    esi,edx
c001c647:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c64b:	c1 ff 1f             	sar    edi,0x1f
c001c64e:	21 f9                	and    ecx,edi
c001c650:	09 d1                	or     ecx,edx
c001c652:	75 2e                	jne    c001c682 <LogicalDisk::assignDriveLetter()+0xa4>
c001c654:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c658:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c65c:	09 f2                	or     edx,esi
c001c65e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c661:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c66b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c671:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c678:	09 fa                	or     edx,edi
c001c67a:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c680:	eb 0d                	jmp    c001c68f <LogicalDisk::assignDriveLetter()+0xb1>
c001c682:	8d 50 01             	lea    edx,[eax+0x1]
c001c685:	45                   	inc    ebp
c001c686:	80 fa 5b             	cmp    dl,0x5b
c001c689:	88 d0                	mov    al,dl
c001c68b:	75 8e                	jne    c001c61b <LogicalDisk::assignDriveLetter()+0x3d>
c001c68d:	31 c0                	xor    eax,eax
c001c68f:	83 c4 14             	add    esp,0x14
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	5d                   	pop    ebp
c001c696:	c3                   	ret    
c001c697:	90                   	nop

c001c698 <LogicalDisk::mount()>:
c001c698:	56                   	push   esi
c001c699:	53                   	push   ebx
c001c69a:	53                   	push   ebx
c001c69b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c69f:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c6a5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c6af:	85 db                	test   ebx,ebx
c001c6b1:	74 27                	je     c001c6da <LogicalDisk::mount()+0x42>
c001c6b3:	51                   	push   ecx
c001c6b4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c6bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c6bd:	83 e8 41             	sub    eax,0x41
c001c6c0:	50                   	push   eax
c001c6c1:	56                   	push   esi
c001c6c2:	53                   	push   ebx
c001c6c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	84 c0                	test   al,al
c001c6cb:	74 08                	je     c001c6d5 <LogicalDisk::mount()+0x3d>
c001c6cd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c6d3:	eb 07                	jmp    c001c6dc <LogicalDisk::mount()+0x44>
c001c6d5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c6d8:	eb d5                	jmp    c001c6af <LogicalDisk::mount()+0x17>
c001c6da:	31 c0                	xor    eax,eax
c001c6dc:	5a                   	pop    edx
c001c6dd:	5b                   	pop    ebx
c001c6de:	5e                   	pop    esi
c001c6df:	c3                   	ret    

c001c6e0 <LogicalDisk::unmount()>:
c001c6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c6ee:	c3                   	ret    
c001c6ef:	90                   	nop

c001c6f0 <LogicalDisk::eject()>:
c001c6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c6fa:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c700:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c703:	90                   	nop

c001c704 <LogicalDisk::unassignDriveLetter()>:
c001c704:	57                   	push   edi
c001c705:	56                   	push   esi
c001c706:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c70a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c711:	85 c9                	test   ecx,ecx
c001c713:	75 0f                	jne    c001c724 <LogicalDisk::unassignDriveLetter()+0x20>
c001c715:	c7 44 24 0c f8 21 03 c0 	mov    DWORD PTR [esp+0xc],0xc00321f8
c001c71d:	5e                   	pop    esi
c001c71e:	5f                   	pop    edi
c001c71f:	e9 32 3b 00 00       	jmp    c0020256 <KePanic(char const*)>
c001c724:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c72b:	83 e9 41             	sub    ecx,0x41
c001c72e:	b8 01 00 00 00       	mov    eax,0x1
c001c733:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c73e:	d3 e0                	shl    eax,cl
c001c740:	89 c7                	mov    edi,eax
c001c742:	f7 d0                	not    eax
c001c744:	c1 ff 1f             	sar    edi,0x1f
c001c747:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c74d:	89 fe                	mov    esi,edi
c001c74f:	f7 d6                	not    esi
c001c751:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c757:	5e                   	pop    esi
c001c758:	5f                   	pop    edi
c001c759:	c3                   	ret    

c001c75a <LogicalDisk::read(unsigned long long, int, void*)>:
c001c75a:	57                   	push   edi
c001c75b:	56                   	push   esi
c001c75c:	53                   	push   ebx
c001c75d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c769:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c76d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c773:	77 41                	ja     c001c7b6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c775:	99                   	cdq    
c001c776:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c77c:	01 c8                	add    eax,ecx
c001c77e:	11 da                	adc    edx,ebx
c001c780:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c786:	19 d7                	sbb    edi,edx
c001c788:	72 33                	jb     c001c7bd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c78a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c790:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c796:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c79a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c79e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c7a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7ae:	5b                   	pop    ebx
c001c7af:	5e                   	pop    esi
c001c7b0:	5f                   	pop    edi
c001c7b1:	e9 c6 0a 00 00       	jmp    c001d27c <VCache::read(unsigned long long, int, void*)>
c001c7b6:	b8 05 00 00 00       	mov    eax,0x5
c001c7bb:	eb 05                	jmp    c001c7c2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c7bd:	b8 07 00 00 00       	mov    eax,0x7
c001c7c2:	5b                   	pop    ebx
c001c7c3:	5e                   	pop    esi
c001c7c4:	5f                   	pop    edi
c001c7c5:	c3                   	ret    

c001c7c6 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c7c6:	57                   	push   edi
c001c7c7:	56                   	push   esi
c001c7c8:	53                   	push   ebx
c001c7c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c7cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c7d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7d9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c7df:	77 41                	ja     c001c822 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c7e1:	99                   	cdq    
c001c7e2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c7e8:	01 c8                	add    eax,ecx
c001c7ea:	11 da                	adc    edx,ebx
c001c7ec:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c7f2:	19 d7                	sbb    edi,edx
c001c7f4:	72 33                	jb     c001c829 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c7f6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c7fc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c802:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c806:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c80a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c810:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c816:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c81a:	5b                   	pop    ebx
c001c81b:	5e                   	pop    esi
c001c81c:	5f                   	pop    edi
c001c81d:	e9 6a 09 00 00       	jmp    c001d18c <VCache::write(unsigned long long, int, void*)>
c001c822:	b8 05 00 00 00       	mov    eax,0x5
c001c827:	eb 05                	jmp    c001c82e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c829:	b8 07 00 00 00       	mov    eax,0x7
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	5f                   	pop    edi
c001c831:	c3                   	ret    
c001c832:	66 90                	xchg   ax,ax

c001c834 <Mouse::Mouse(char const*)>:
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83b:	83 ec 08             	sub    esp,0x8
c001c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c842:	50                   	push   eax
c001c843:	e8 7e ec ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	ba 4c 22 03 c0       	mov    edx,0xc003224c
c001c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c854:	89 10                	mov    DWORD PTR [eax],edx
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c864:	90                   	nop
c001c865:	83 c4 0c             	add    esp,0xc
c001c868:	c3                   	ret    
c001c869:	90                   	nop
c001c86a:	66 90                	xchg   ax,ax

c001c86c <Mouse::~Mouse()>:
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	ba 4c 22 03 c0       	mov    edx,0xc003224c
c001c874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c878:	89 10                	mov    DWORD PTR [eax],edx
c001c87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87e:	83 ec 0c             	sub    esp,0xc
c001c881:	50                   	push   eax
c001c882:	e8 df e9 ff ff       	call   c001b266 <Device::~Device()>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	90                   	nop
c001c88b:	83 c4 0c             	add    esp,0xc
c001c88e:	c3                   	ret    
c001c88f:	90                   	nop

c001c890 <Mouse::~Mouse()>:
c001c890:	83 ec 0c             	sub    esp,0xc
c001c893:	83 ec 0c             	sub    esp,0xc
c001c896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c89a:	e8 cd ff ff ff       	call   c001c86c <Mouse::~Mouse()>
c001c89f:	83 c4 10             	add    esp,0x10
c001c8a2:	83 ec 08             	sub    esp,0x8
c001c8a5:	68 58 01 00 00       	push   0x158
c001c8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ae:	e8 1d c9 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	83 c4 0c             	add    esp,0xc
c001c8b9:	c3                   	ret    

c001c8ba <NIC::getMAC()>:
c001c8ba:	31 c0                	xor    eax,eax
c001c8bc:	31 d2                	xor    edx,edx
c001c8be:	c3                   	ret    
c001c8bf:	90                   	nop

c001c8c0 <NIC::write(int, unsigned char*, int*)>:
c001c8c0:	b8 01 00 00 00       	mov    eax,0x1
c001c8c5:	c3                   	ret    

c001c8c6 <NIC::NIC(char const*)>:
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cd:	83 ec 08             	sub    esp,0x8
c001c8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8d4:	50                   	push   eax
c001c8d5:	e8 ec eb ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	89 10                	mov    DWORD PTR [eax],edx
c001c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ec:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c8f6:	90                   	nop
c001c8f7:	83 c4 0c             	add    esp,0xc
c001c8fa:	c3                   	ret    
c001c8fb:	90                   	nop

c001c8fc <NIC::~NIC()>:
c001c8fc:	83 ec 0c             	sub    esp,0xc
c001c8ff:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c908:	89 10                	mov    DWORD PTR [eax],edx
c001c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	50                   	push   eax
c001c912:	e8 4f e9 ff ff       	call   c001b266 <Device::~Device()>
c001c917:	83 c4 10             	add    esp,0x10
c001c91a:	90                   	nop
c001c91b:	83 c4 0c             	add    esp,0xc
c001c91e:	c3                   	ret    
c001c91f:	90                   	nop

c001c920 <NIC::~NIC()>:
c001c920:	83 ec 0c             	sub    esp,0xc
c001c923:	83 ec 0c             	sub    esp,0xc
c001c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c92a:	e8 cd ff ff ff       	call   c001c8fc <NIC::~NIC()>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	83 ec 08             	sub    esp,0x8
c001c935:	68 58 01 00 00       	push   0x158
c001c93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c93e:	e8 8d c8 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	83 c4 0c             	add    esp,0xc
c001c949:	c3                   	ret    

c001c94a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c94a:	55                   	push   ebp
c001c94b:	57                   	push   edi
c001c94c:	56                   	push   esi
c001c94d:	53                   	push   ebx
c001c94e:	81 ec 28 01 00 00    	sub    esp,0x128
c001c954:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c95b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001c962:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001c969:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001c970:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c974:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c978:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c97f:	e8 3e ec ff ff       	call   c001b5c2 <Device::getName()>
c001c984:	5a                   	pop    edx
c001c985:	59                   	pop    ecx
c001c986:	50                   	push   eax
c001c987:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c98b:	55                   	push   ebp
c001c98c:	e8 bf 3c fe ff       	call   c0000650 <strcpy>
c001c991:	5b                   	pop    ebx
c001c992:	58                   	pop    eax
c001c993:	68 a4 22 03 c0       	push   0xc00322a4
c001c998:	55                   	push   ebp
c001c999:	e8 d2 3e fe ff       	call   c0000870 <strcat>
c001c99e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c9a5:	e8 ed 9a ff ff       	call   c0016497 <malloc>
c001c9aa:	83 c4 0c             	add    esp,0xc
c001c9ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c9b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c9b5:	89 c3                	mov    ebx,eax
c001c9b7:	57                   	push   edi
c001c9b8:	56                   	push   esi
c001c9b9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c9c0:	55                   	push   ebp
c001c9c1:	50                   	push   eax
c001c9c2:	e8 57 fb ff ff       	call   c001c51e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9c7:	83 c4 14             	add    esp,0x14
c001c9ca:	53                   	push   ebx
c001c9cb:	e8 0e fc ff ff       	call   c001c5de <LogicalDisk::assignDriveLetter()>
c001c9d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9d3:	e8 c0 fc ff ff       	call   c001c698 <LogicalDisk::mount()>
c001c9d8:	58                   	pop    eax
c001c9d9:	5a                   	pop    edx
c001c9da:	53                   	push   ebx
c001c9db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c9e2:	e8 7d e9 ff ff       	call   c001b364 <Device::addChild(Device*)>
c001c9e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c9ed:	5b                   	pop    ebx
c001c9ee:	5e                   	pop    esi
c001c9ef:	5f                   	pop    edi
c001c9f0:	5d                   	pop    ebp
c001c9f1:	c3                   	ret    

c001c9f2 <createPartitionsForDisk(PhysicalDisk*)>:
c001c9f2:	55                   	push   ebp
c001c9f3:	57                   	push   edi
c001c9f4:	56                   	push   esi
c001c9f5:	53                   	push   ebx
c001c9f6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c9fc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001ca03:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca09:	3d 00 02 00 00       	cmp    eax,0x200
c001ca0e:	74 27                	je     c001ca37 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001ca10:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001ca16:	83 ec 10             	sub    esp,0x10
c001ca19:	99                   	cdq    
c001ca1a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001ca20:	52                   	push   edx
c001ca21:	50                   	push   eax
c001ca22:	0f a4 f7 0a          	shld   edi,esi,0xa
c001ca26:	c1 e6 0a             	shl    esi,0xa
c001ca29:	89 fd                	mov    ebp,edi
c001ca2b:	55                   	push   ebp
c001ca2c:	56                   	push   esi
c001ca2d:	e8 ce 1c 01 00       	call   c002e700 <__udivdi3>
c001ca32:	e9 b9 00 00 00       	jmp    c001caf0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ca37:	83 ec 0c             	sub    esp,0xc
c001ca3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca3c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001ca40:	56                   	push   esi
c001ca41:	6a 01                	push   0x1
c001ca43:	6a 00                	push   0x0
c001ca45:	6a 00                	push   0x0
c001ca47:	53                   	push   ebx
c001ca48:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ca4b:	83 c4 20             	add    esp,0x20
c001ca4e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ca56:	75 0a                	jne    c001ca62 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001ca58:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001ca60:	74 2c                	je     c001ca8e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001ca62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca68:	83 ec 10             	sub    esp,0x10
c001ca6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca71:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca77:	89 f7                	mov    edi,esi
c001ca79:	c1 ff 1f             	sar    edi,0x1f
c001ca7c:	57                   	push   edi
c001ca7d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca81:	56                   	push   esi
c001ca82:	c1 e0 0a             	shl    eax,0xa
c001ca85:	52                   	push   edx
c001ca86:	50                   	push   eax
c001ca87:	e8 74 1c 01 00       	call   c002e700 <__udivdi3>
c001ca8c:	eb 62                	jmp    c001caf0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ca8e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001ca95:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001ca9c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001caa3:	89 cf                	mov    edi,ecx
c001caa5:	83 e2 7f             	and    edx,0x7f
c001caa8:	83 e7 7f             	and    edi,0x7f
c001caab:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001caae:	83 e0 7f             	and    eax,0x7f
c001cab1:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cab4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cabb:	83 e0 7f             	and    eax,0x7f
c001cabe:	01 d0                	add    eax,edx
c001cac0:	84 c0                	test   al,al
c001cac2:	89 c5                	mov    ebp,eax
c001cac4:	74 41                	je     c001cb07 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cac6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cacc:	83 ec 10             	sub    esp,0x10
c001cacf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cad5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cadb:	89 f7                	mov    edi,esi
c001cadd:	c1 ff 1f             	sar    edi,0x1f
c001cae0:	57                   	push   edi
c001cae1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cae5:	56                   	push   esi
c001cae6:	c1 e0 0a             	shl    eax,0xa
c001cae9:	52                   	push   edx
c001caea:	50                   	push   eax
c001caeb:	e8 10 1c 01 00       	call   c002e700 <__udivdi3>
c001caf0:	83 c4 14             	add    esp,0x14
c001caf3:	52                   	push   edx
c001caf4:	50                   	push   eax
c001caf5:	6a 00                	push   0x0
c001caf7:	6a 00                	push   0x0
c001caf9:	53                   	push   ebx
c001cafa:	e8 4b fe ff ff       	call   c001c94a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001caff:	83 c4 20             	add    esp,0x20
c001cb02:	e9 73 01 00 00       	jmp    c001cc7a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cb07:	89 f0                	mov    eax,esi
c001cb09:	31 c9                	xor    ecx,ecx
c001cb0b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cb12:	75 02                	jne    c001cb16 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cb14:	89 cd                	mov    ebp,ecx
c001cb16:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cb1e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cb25:	83 c0 10             	add    eax,0x10
c001cb28:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cb30:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001cb37:	c1 e2 08             	shl    edx,0x8
c001cb3a:	c1 e6 10             	shl    esi,0x10
c001cb3d:	09 f2                	or     edx,esi
c001cb3f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001cb46:	09 f2                	or     edx,esi
c001cb48:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cb4f:	c1 e6 18             	shl    esi,0x18
c001cb52:	09 f2                	or     edx,esi
c001cb54:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cb5b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cb5f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cb66:	c1 e6 10             	shl    esi,0x10
c001cb69:	c1 e2 08             	shl    edx,0x8
c001cb6c:	09 f2                	or     edx,esi
c001cb6e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cb75:	09 f2                	or     edx,esi
c001cb77:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cb7e:	c1 e6 18             	shl    esi,0x18
c001cb81:	09 f2                	or     edx,esi
c001cb83:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cb87:	41                   	inc    ecx
c001cb88:	83 f9 04             	cmp    ecx,0x4
c001cb8b:	0f 85 7a ff ff ff    	jne    c001cb0b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb95:	83 f0 01             	xor    eax,0x1
c001cb98:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cb9c:	75 4f                	jne    c001cbed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cba2:	83 f0 01             	xor    eax,0x1
c001cba5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cba9:	75 42                	jne    c001cbed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cbab:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cbb1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cbb9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cbbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbc7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cbcd:	89 f7                	mov    edi,esi
c001cbcf:	c1 ff 1f             	sar    edi,0x1f
c001cbd2:	57                   	push   edi
c001cbd3:	56                   	push   esi
c001cbd4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cbd8:	52                   	push   edx
c001cbd9:	c1 e0 0a             	shl    eax,0xa
c001cbdc:	50                   	push   eax
c001cbdd:	e8 1e 1b 01 00       	call   c002e700 <__udivdi3>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cbe9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cbed:	89 e8                	mov    eax,ebp
c001cbef:	0f b6 e8             	movzx  ebp,al
c001cbf2:	85 ed                	test   ebp,ebp
c001cbf4:	74 50                	je     c001cc46 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cbf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbfa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cbfe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc0a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cc0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc12:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cc16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cc22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc26:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cc2a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cc2e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cc32:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cc36:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cc3a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cc3e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cc42:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cc46:	31 ed                	xor    ebp,ebp
c001cc48:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cc4c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cc50:	89 f8                	mov    eax,edi
c001cc52:	09 f0                	or     eax,esi
c001cc54:	74 1e                	je     c001cc74 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cc56:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cc5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cc5e:	89 d1                	mov    ecx,edx
c001cc60:	09 c1                	or     ecx,eax
c001cc62:	74 10                	je     c001cc74 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	57                   	push   edi
c001cc68:	56                   	push   esi
c001cc69:	52                   	push   edx
c001cc6a:	50                   	push   eax
c001cc6b:	53                   	push   ebx
c001cc6c:	e8 d9 fc ff ff       	call   c001c94a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc71:	83 c4 20             	add    esp,0x20
c001cc74:	45                   	inc    ebp
c001cc75:	83 fd 04             	cmp    ebp,0x4
c001cc78:	75 ce                	jne    c001cc48 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cc7a:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cc80:	5b                   	pop    ebx
c001cc81:	5e                   	pop    esi
c001cc82:	5f                   	pop    edi
c001cc83:	5d                   	pop    ebp
c001cc84:	c3                   	ret    
c001cc85:	66 90                	xchg   ax,ax
c001cc87:	90                   	nop

c001cc88 <Serial::Serial(char const*)>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8f:	83 ec 08             	sub    esp,0x8
c001cc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc96:	50                   	push   eax
c001cc97:	e8 2a e8 ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001cc9c:	83 c4 10             	add    esp,0x10
c001cc9f:	ba b8 22 03 c0       	mov    edx,0xc00322b8
c001cca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca8:	89 10                	mov    DWORD PTR [eax],edx
c001ccaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccae:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001ccb8:	90                   	nop
c001ccb9:	83 c4 0c             	add    esp,0xc
c001ccbc:	c3                   	ret    
c001ccbd:	90                   	nop
c001ccbe:	66 90                	xchg   ax,ax

c001ccc0 <Serial::~Serial()>:
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	ba b8 22 03 c0       	mov    edx,0xc00322b8
c001ccc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cccc:	89 10                	mov    DWORD PTR [eax],edx
c001ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd2:	83 ec 0c             	sub    esp,0xc
c001ccd5:	50                   	push   eax
c001ccd6:	e8 8b e5 ff ff       	call   c001b266 <Device::~Device()>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	90                   	nop
c001ccdf:	83 c4 0c             	add    esp,0xc
c001cce2:	c3                   	ret    
c001cce3:	90                   	nop

c001cce4 <Serial::~Serial()>:
c001cce4:	83 ec 0c             	sub    esp,0xc
c001cce7:	83 ec 0c             	sub    esp,0xc
c001ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccee:	e8 cd ff ff ff       	call   c001ccc0 <Serial::~Serial()>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	83 ec 08             	sub    esp,0x8
c001ccf9:	68 58 01 00 00       	push   0x158
c001ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd02:	e8 c9 c4 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	83 c4 0c             	add    esp,0xc
c001cd0d:	c3                   	ret    
c001cd0e:	66 90                	xchg   ax,ax

c001cd10 <Timer::Timer(char const*)>:
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd17:	83 ec 08             	sub    esp,0x8
c001cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1e:	50                   	push   eax
c001cd1f:	e8 a2 e7 ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001cd24:	83 c4 10             	add    esp,0x10
c001cd27:	ba fc 22 03 c0       	mov    edx,0xc00322fc
c001cd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd30:	89 10                	mov    DWORD PTR [eax],edx
c001cd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd36:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cd40:	90                   	nop
c001cd41:	83 c4 0c             	add    esp,0xc
c001cd44:	c3                   	ret    
c001cd45:	90                   	nop
c001cd46:	66 90                	xchg   ax,ax

c001cd48 <Timer::~Timer()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	ba fc 22 03 c0       	mov    edx,0xc00322fc
c001cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd54:	89 10                	mov    DWORD PTR [eax],edx
c001cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	50                   	push   eax
c001cd5e:	e8 03 e5 ff ff       	call   c001b266 <Device::~Device()>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	90                   	nop
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    
c001cd6b:	90                   	nop

c001cd6c <Timer::~Timer()>:
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	83 ec 0c             	sub    esp,0xc
c001cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd76:	e8 cd ff ff ff       	call   c001cd48 <Timer::~Timer()>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	83 ec 08             	sub    esp,0x8
c001cd81:	68 5c 01 00 00       	push   0x15c
c001cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8a:	e8 41 c4 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	83 c4 0c             	add    esp,0xc
c001cd95:	c3                   	ret    

c001cd96 <Timer::read()>:
c001cd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cda0:	c3                   	ret    

c001cda1 <setupTimer(int)>:
c001cda1:	53                   	push   ebx
c001cda2:	83 ec 14             	sub    esp,0x14
c001cda5:	68 5c 01 00 00       	push   0x15c
c001cdaa:	e8 e8 96 ff ff       	call   c0016497 <malloc>
c001cdaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001cdb2:	89 c3                	mov    ebx,eax
c001cdb4:	e8 c7 11 01 00       	call   c002df80 <PIT::PIT()>
c001cdb9:	58                   	pop    eax
c001cdba:	5a                   	pop    edx
c001cdbb:	53                   	push   ebx
c001cdbc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cdc2:	e8 9d e5 ff ff       	call   c001b364 <Device::addChild(Device*)>
c001cdc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdc9:	6a 00                	push   0x0
c001cdcb:	6a 00                	push   0x0
c001cdcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cdd1:	53                   	push   ebx
c001cdd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdd5:	83 c4 28             	add    esp,0x28
c001cdd8:	89 d8                	mov    eax,ebx
c001cdda:	5b                   	pop    ebx
c001cddb:	c3                   	ret    

c001cddc <timerHandler(unsigned int)>:
c001cddc:	57                   	push   edi
c001cddd:	56                   	push   esi
c001cdde:	53                   	push   ebx
c001cddf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cde3:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cde9:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cdf0:	0f 84 46 01 00 00    	je     c001cf3c <timerHandler(unsigned int)+0x160>
c001cdf6:	fa                   	cli    
c001cdf7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cdfd:	83 ec 0c             	sub    esp,0xc
c001ce00:	68 e0 01 04 c0       	push   0xc00401e0
c001ce05:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001ce0b:	e8 c0 1e 01 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	84 c0                	test   al,al
c001ce15:	0f 85 a1 00 00 00    	jne    c001cebc <timerHandler(unsigned int)+0xe0>
c001ce1b:	83 ec 0c             	sub    esp,0xc
c001ce1e:	68 e0 01 04 c0       	push   0xc00401e0
c001ce23:	e8 c4 1e 01 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce28:	83 c4 10             	add    esp,0x10
c001ce2b:	89 c6                	mov    esi,eax
c001ce2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce30:	83 ec 0c             	sub    esp,0xc
c001ce33:	68 e0 01 04 c0       	push   0xc00401e0
c001ce38:	e8 af 1e 01 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce3d:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001ce44:	89 c3                	mov    ebx,eax
c001ce46:	e8 a9 1e 01 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ce4b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce4e:	83 c4 10             	add    esp,0x10
c001ce51:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001ce57:	77 23                	ja     c001ce7c <timerHandler(unsigned int)+0xa0>
c001ce59:	83 ec 0c             	sub    esp,0xc
c001ce5c:	53                   	push   ebx
c001ce5d:	e8 26 87 00 00       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c001ce62:	83 c4 10             	add    esp,0x10
c001ce65:	39 de                	cmp    esi,ebx
c001ce67:	75 27                	jne    c001ce90 <timerHandler(unsigned int)+0xb4>
c001ce69:	83 ec 0c             	sub    esp,0xc
c001ce6c:	68 e0 01 04 c0       	push   0xc00401e0
c001ce71:	e8 76 1e 01 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce76:	89 c6                	mov    esi,eax
c001ce78:	eb 12                	jmp    c001ce8c <timerHandler(unsigned int)+0xb0>
c001ce7a:	66 90                	xchg   ax,ax
c001ce7c:	50                   	push   eax
c001ce7d:	50                   	push   eax
c001ce7e:	53                   	push   ebx
c001ce7f:	68 e0 01 04 c0       	push   0xc00401e0
c001ce84:	e8 27 1f 01 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ce89:	8d 76 00             	lea    esi,[esi+0x0]
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	90                   	nop
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	68 e0 01 04 c0       	push   0xc00401e0
c001ce98:	e8 33 1e 01 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce9d:	83 c4 10             	add    esp,0x10
c001cea0:	84 c0                	test   al,al
c001cea2:	75 18                	jne    c001cebc <timerHandler(unsigned int)+0xe0>
c001cea4:	83 ec 0c             	sub    esp,0xc
c001cea7:	68 e0 01 04 c0       	push   0xc00401e0
c001ceac:	e8 3b 1e 01 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	39 f0                	cmp    eax,esi
c001ceb6:	0f 85 74 ff ff ff    	jne    c001ce30 <timerHandler(unsigned int)+0x54>
c001cebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cec1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001cec5:	74 3d                	je     c001cf04 <timerHandler(unsigned int)+0x128>
c001cec7:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cece:	74 34                	je     c001cf04 <timerHandler(unsigned int)+0x128>
c001ced0:	fa                   	cli    
c001ced1:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ced7:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cedd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cee2:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceea:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ceed:	77 05                	ja     c001cef4 <timerHandler(unsigned int)+0x118>
c001ceef:	e8 a8 83 00 00       	call   c002529c <schedule()>
c001cef4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cef9:	48                   	dec    eax
c001cefa:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ceff:	75 03                	jne    c001cf04 <timerHandler(unsigned int)+0x128>
c001cf01:	fb                   	sti    
c001cf02:	66 90                	xchg   ax,ax
c001cf04:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001cf09:	48                   	dec    eax
c001cf0a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001cf0f:	75 1b                	jne    c001cf2c <timerHandler(unsigned int)+0x150>
c001cf11:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001cf18:	74 12                	je     c001cf2c <timerHandler(unsigned int)+0x150>
c001cf1a:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001cf24:	e8 73 83 00 00       	call   c002529c <schedule()>
c001cf29:	8d 76 00             	lea    esi,[esi+0x0]
c001cf2c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cf31:	48                   	dec    eax
c001cf32:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cf37:	75 03                	jne    c001cf3c <timerHandler(unsigned int)+0x160>
c001cf39:	fb                   	sti    
c001cf3a:	66 90                	xchg   ax,ax
c001cf3c:	5b                   	pop    ebx
c001cf3d:	5e                   	pop    esi
c001cf3e:	5f                   	pop    edi
c001cf3f:	c3                   	ret    

c001cf40 <VCache::VCache(PhysicalDisk*)>:
c001cf40:	53                   	push   ebx
c001cf41:	83 ec 18             	sub    esp,0x18
c001cf44:	ba 2c 23 03 c0       	mov    edx,0xc003232c
c001cf49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4d:	89 10                	mov    DWORD PTR [eax],edx
c001cf4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf53:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cf5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cf65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf69:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001cf70:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cf77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cf82:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cf89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf8d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cf94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf98:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cfa7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cfae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cfb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfba:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfca:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfd1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cfd9:	83 ec 0c             	sub    esp,0xc
c001cfdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfe0:	e8 b2 94 ff ff       	call   c0016497 <malloc>
c001cfe5:	83 c4 10             	add    esp,0x10
c001cfe8:	89 c3                	mov    ebx,eax
c001cfea:	83 ec 0c             	sub    esp,0xc
c001cfed:	53                   	push   ebx
c001cfee:	e8 49 32 00 00       	call   c002023c <Mutex::Mutex()>
c001cff3:	83 c4 10             	add    esp,0x10
c001cff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d005:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d017:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d01d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d021:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d024:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d028:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d02e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d034:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d038:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d03b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d042:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d046:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d04a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d050:	05 00 02 00 00       	add    eax,0x200
c001d055:	c1 e0 03             	shl    eax,0x3
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	50                   	push   eax
c001d05c:	e8 36 94 ff ff       	call   c0016497 <malloc>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	89 c2                	mov    edx,eax
c001d066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d06a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d06d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d071:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d07c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d084:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d08a:	89 d0                	mov    eax,edx
c001d08c:	c1 e0 02             	shl    eax,0x2
c001d08f:	01 d0                	add    eax,edx
c001d091:	c1 e0 04             	shl    eax,0x4
c001d094:	83 ec 0c             	sub    esp,0xc
c001d097:	50                   	push   eax
c001d098:	e8 fa 93 ff ff       	call   c0016497 <malloc>
c001d09d:	83 c4 10             	add    esp,0x10
c001d0a0:	89 c2                	mov    edx,eax
c001d0a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0a6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d0a9:	90                   	nop
c001d0aa:	83 c4 18             	add    esp,0x18
c001d0ad:	5b                   	pop    ebx
c001d0ae:	c3                   	ret    
c001d0af:	90                   	nop

c001d0b0 <VCache::invalidateReadBuffer()>:
c001d0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0b4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d0ba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d0be:	c3                   	ret    
c001d0bf:	90                   	nop

c001d0c0 <VCache::writeWriteBuffer()>:
c001d0c0:	53                   	push   ebx
c001d0c1:	83 ec 08             	sub    esp,0x8
c001d0c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d0cc:	74 1e                	je     c001d0ec <VCache::writeWriteBuffer()+0x2c>
c001d0ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0d1:	83 ec 0c             	sub    esp,0xc
c001d0d4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0d6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d0d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d0dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d0df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d0e2:	50                   	push   eax
c001d0e3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d0e6:	83 c4 20             	add    esp,0x20
c001d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0ec:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d0f3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d0fa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d0fe:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d105:	83 c4 08             	add    esp,0x8
c001d108:	5b                   	pop    ebx
c001d109:	c3                   	ret    
c001d10a:	66 90                	xchg   ax,ax

c001d10c <VCache::~VCache()>:
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	ba 2c 23 03 c0       	mov    edx,0xc003232c
c001d114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d118:	89 10                	mov    DWORD PTR [eax],edx
c001d11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d121:	0f b6 c0             	movzx  eax,al
c001d124:	85 c0                	test   eax,eax
c001d126:	74 10                	je     c001d138 <VCache::~VCache()+0x2c>
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d12f:	e8 8c ff ff ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	90                   	nop
c001d138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	50                   	push   eax
c001d143:	e8 5f 93 ff ff       	call   c00164a7 <free>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d152:	83 ec 0c             	sub    esp,0xc
c001d155:	50                   	push   eax
c001d156:	e8 4c 93 ff ff       	call   c00164a7 <free>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	90                   	nop
c001d15f:	83 c4 0c             	add    esp,0xc
c001d162:	c3                   	ret    
c001d163:	90                   	nop

c001d164 <VCache::~VCache()>:
c001d164:	83 ec 0c             	sub    esp,0xc
c001d167:	83 ec 0c             	sub    esp,0xc
c001d16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d16e:	e8 99 ff ff ff       	call   c001d10c <VCache::~VCache()>
c001d173:	83 c4 10             	add    esp,0x10
c001d176:	83 ec 08             	sub    esp,0x8
c001d179:	6a 44                	push   0x44
c001d17b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d17f:	e8 4c c0 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001d184:	83 c4 10             	add    esp,0x10
c001d187:	83 c4 0c             	add    esp,0xc
c001d18a:	c3                   	ret    
c001d18b:	90                   	nop

c001d18c <VCache::write(unsigned long long, int, void*)>:
c001d18c:	55                   	push   ebp
c001d18d:	57                   	push   edi
c001d18e:	56                   	push   esi
c001d18f:	53                   	push   ebx
c001d190:	83 ec 1c             	sub    esp,0x1c
c001d193:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d197:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d19b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d19f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d1a3:	e8 60 7e 00 00       	call   c0025008 <KeDisablePreemption()>
c001d1a8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d1ac:	74 0e                	je     c001d1bc <VCache::write(unsigned long long, int, void*)+0x30>
c001d1ae:	83 ec 0c             	sub    esp,0xc
c001d1b1:	53                   	push   ebx
c001d1b2:	e8 f9 fe ff ff       	call   c001d0b0 <VCache::invalidateReadBuffer()>
c001d1b7:	83 c4 10             	add    esp,0x10
c001d1ba:	66 90                	xchg   ax,ax
c001d1bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d1c0:	74 5e                	je     c001d220 <VCache::write(unsigned long long, int, void*)+0x94>
c001d1c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d1c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1c9:	99                   	cdq    
c001d1ca:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d1cd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d1d0:	89 c1                	mov    ecx,eax
c001d1d2:	31 f1                	xor    ecx,esi
c001d1d4:	89 d0                	mov    eax,edx
c001d1d6:	31 f8                	xor    eax,edi
c001d1d8:	09 c1                	or     ecx,eax
c001d1da:	75 38                	jne    c001d214 <VCache::write(unsigned long long, int, void*)+0x88>
c001d1dc:	83 fd 01             	cmp    ebp,0x1
c001d1df:	75 33                	jne    c001d214 <VCache::write(unsigned long long, int, void*)+0x88>
c001d1e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d1e8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d1ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1f2:	0f af f9             	imul   edi,ecx
c001d1f5:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d1f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d1fd:	40                   	inc    eax
c001d1fe:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d201:	83 f8 50             	cmp    eax,0x50
c001d204:	75 66                	jne    c001d26c <VCache::write(unsigned long long, int, void*)+0xe0>
c001d206:	83 ec 0c             	sub    esp,0xc
c001d209:	53                   	push   ebx
c001d20a:	e8 b1 fe ff ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	eb 58                	jmp    c001d26c <VCache::write(unsigned long long, int, void*)+0xe0>
c001d214:	83 ec 0c             	sub    esp,0xc
c001d217:	53                   	push   ebx
c001d218:	e8 a3 fe ff ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c001d21d:	83 c4 10             	add    esp,0x10
c001d220:	83 fd 4f             	cmp    ebp,0x4f
c001d223:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d226:	7f 20                	jg     c001d248 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d228:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d22b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d22f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d232:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d235:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d238:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d23c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d242:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d244:	eb 26                	jmp    c001d26c <VCache::write(unsigned long long, int, void*)+0xe0>
c001d246:	66 90                	xchg   ax,ax
c001d248:	83 ec 0c             	sub    esp,0xc
c001d24b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d24d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d251:	55                   	push   ebp
c001d252:	57                   	push   edi
c001d253:	56                   	push   esi
c001d254:	50                   	push   eax
c001d255:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d258:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d25c:	83 c4 20             	add    esp,0x20
c001d25f:	e8 cc 7d 00 00       	call   c0025030 <KeRestorePreemption()>
c001d264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d268:	eb 0a                	jmp    c001d274 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d26a:	66 90                	xchg   ax,ax
c001d26c:	e8 bf 7d 00 00       	call   c0025030 <KeRestorePreemption()>
c001d271:	31 c0                	xor    eax,eax
c001d273:	90                   	nop
c001d274:	83 c4 1c             	add    esp,0x1c
c001d277:	5b                   	pop    ebx
c001d278:	5e                   	pop    esi
c001d279:	5f                   	pop    edi
c001d27a:	5d                   	pop    ebp
c001d27b:	c3                   	ret    

c001d27c <VCache::read(unsigned long long, int, void*)>:
c001d27c:	55                   	push   ebp
c001d27d:	57                   	push   edi
c001d27e:	56                   	push   esi
c001d27f:	53                   	push   ebx
c001d280:	83 ec 1c             	sub    esp,0x1c
c001d283:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d28b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d28f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d293:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d297:	89 04 24             	mov    DWORD PTR [esp],eax
c001d29a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d29e:	e8 65 7d 00 00       	call   c0025008 <KeDisablePreemption()>
c001d2a3:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d2a7:	74 0f                	je     c001d2b8 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d2a9:	83 ec 0c             	sub    esp,0xc
c001d2ac:	53                   	push   ebx
c001d2ad:	e8 0e fe ff ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b8:	83 fe 01             	cmp    esi,0x1
c001d2bb:	0f 85 8b 00 00 00    	jne    c001d34c <VCache::read(unsigned long long, int, void*)+0xd0>
c001d2c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2c4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d2cb:	75 7f                	jne    c001d34c <VCache::read(unsigned long long, int, void*)+0xd0>
c001d2cd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d2d0:	89 d1                	mov    ecx,edx
c001d2d2:	f7 d9                	neg    ecx
c001d2d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d2d8:	89 cf                	mov    edi,ecx
c001d2da:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d2dd:	c1 ff 1f             	sar    edi,0x1f
c001d2e0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d2e4:	89 ce                	mov    esi,ecx
c001d2e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2ea:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d2ee:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d2f2:	89 cf                	mov    edi,ecx
c001d2f4:	74 32                	je     c001d328 <VCache::read(unsigned long long, int, void*)+0xac>
c001d2f6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d2f9:	75 2d                	jne    c001d328 <VCache::read(unsigned long long, int, void*)+0xac>
c001d2fb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d2fe:	75 28                	jne    c001d328 <VCache::read(unsigned long long, int, void*)+0xac>
c001d300:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d303:	89 ef                	mov    edi,ebp
c001d305:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d30b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d30e:	8d 70 ff             	lea    esi,[eax-0x1]
c001d311:	23 34 24             	and    esi,DWORD PTR [esp]
c001d314:	0f af f1             	imul   esi,ecx
c001d317:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d31c:	e8 0f 7d 00 00       	call   c0025030 <KeRestorePreemption()>
c001d321:	31 c0                	xor    eax,eax
c001d323:	eb 57                	jmp    c001d37c <VCache::read(unsigned long long, int, void*)+0x100>
c001d325:	8d 76 00             	lea    esi,[esi+0x0]
c001d328:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d332:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d335:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d337:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d33a:	52                   	push   edx
c001d33b:	57                   	push   edi
c001d33c:	56                   	push   esi
c001d33d:	50                   	push   eax
c001d33e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d341:	83 c4 20             	add    esp,0x20
c001d344:	85 c0                	test   eax,eax
c001d346:	75 34                	jne    c001d37c <VCache::read(unsigned long long, int, void*)+0x100>
c001d348:	eb b6                	jmp    c001d300 <VCache::read(unsigned long long, int, void*)+0x84>
c001d34a:	66 90                	xchg   ax,ax
c001d34c:	83 ec 0c             	sub    esp,0xc
c001d34f:	53                   	push   ebx
c001d350:	e8 5b fd ff ff       	call   c001d0b0 <VCache::invalidateReadBuffer()>
c001d355:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d358:	8b 10                	mov    edx,DWORD PTR [eax]
c001d35a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d35d:	56                   	push   esi
c001d35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d366:	50                   	push   eax
c001d367:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d36a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d36e:	83 c4 20             	add    esp,0x20
c001d371:	e8 ba 7c 00 00       	call   c0025030 <KeRestorePreemption()>
c001d376:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d379:	8d 76 00             	lea    esi,[esi+0x0]
c001d37c:	83 c4 1c             	add    esp,0x1c
c001d37f:	5b                   	pop    ebx
c001d380:	5e                   	pop    esi
c001d381:	5f                   	pop    edi
c001d382:	5d                   	pop    ebp
c001d383:	c3                   	ret    

c001d384 <Video::putrect(int, int, int, int, unsigned int)>:
c001d384:	55                   	push   ebp
c001d385:	57                   	push   edi
c001d386:	56                   	push   esi
c001d387:	53                   	push   ebx
c001d388:	83 ec 1c             	sub    esp,0x1c
c001d38b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d38f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d393:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d397:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d39b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d39f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3a3:	01 df                	add    edi,ebx
c001d3a5:	39 fb                	cmp    ebx,edi
c001d3a7:	7d 1f                	jge    c001d3c8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d3a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3ad:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d3b1:	7d 12                	jge    c001d3c5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d3b3:	8b 16                	mov    edx,DWORD PTR [esi]
c001d3b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3b9:	53                   	push   ebx
c001d3ba:	55                   	push   ebp
c001d3bb:	45                   	inc    ebp
c001d3bc:	56                   	push   esi
c001d3bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	eb e8                	jmp    c001d3ad <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d3c5:	43                   	inc    ebx
c001d3c6:	eb dd                	jmp    c001d3a5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d3c8:	83 c4 1c             	add    esp,0x1c
c001d3cb:	5b                   	pop    ebx
c001d3cc:	5e                   	pop    esi
c001d3cd:	5f                   	pop    edi
c001d3ce:	5d                   	pop    ebp
c001d3cf:	c3                   	ret    

c001d3d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d3d0:	55                   	push   ebp
c001d3d1:	57                   	push   edi
c001d3d2:	31 ff                	xor    edi,edi
c001d3d4:	56                   	push   esi
c001d3d5:	53                   	push   ebx
c001d3d6:	83 ec 1c             	sub    esp,0x1c
c001d3d9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d3dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d3e1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d3e8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d3ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d3f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d3f5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d3f9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d3fc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d400:	01 f9                	add    ecx,edi
c001d402:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d406:	7d 2f                	jge    c001d437 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d408:	31 f6                	xor    esi,esi
c001d40a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d40e:	01 f2                	add    edx,esi
c001d410:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d414:	7d 1a                	jge    c001d430 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d416:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d419:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d41c:	46                   	inc    esi
c001d41d:	51                   	push   ecx
c001d41e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d422:	52                   	push   edx
c001d423:	55                   	push   ebp
c001d424:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d427:	83 c4 10             	add    esp,0x10
c001d42a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d42e:	eb da                	jmp    c001d40a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d430:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d434:	47                   	inc    edi
c001d435:	eb c5                	jmp    c001d3fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d437:	83 c4 1c             	add    esp,0x1c
c001d43a:	5b                   	pop    ebx
c001d43b:	5e                   	pop    esi
c001d43c:	5f                   	pop    edi
c001d43d:	5d                   	pop    ebp
c001d43e:	c3                   	ret    
c001d43f:	90                   	nop

c001d440 <Video::blit(unsigned int*, int, int, int, int)>:
c001d440:	55                   	push   ebp
c001d441:	ba 00 00 00 00       	mov    edx,0x0
c001d446:	57                   	push   edi
c001d447:	56                   	push   esi
c001d448:	53                   	push   ebx
c001d449:	83 ec 1c             	sub    esp,0x1c
c001d44c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d450:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d454:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d458:	85 c0                	test   eax,eax
c001d45a:	0f 49 d0             	cmovns edx,eax
c001d45d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d464:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d468:	89 eb                	mov    ebx,ebp
c001d46a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d46e:	01 ea                	add    edx,ebp
c001d470:	39 da                	cmp    edx,ebx
c001d472:	7e 54                	jle    c001d4c8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d474:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d47a:	7c 4c                	jl     c001d4c8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d47c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d480:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d484:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d488:	01 c1                	add    ecx,eax
c001d48a:	39 f9                	cmp    ecx,edi
c001d48c:	7e 2f                	jle    c001d4bd <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d48e:	83 c2 04             	add    edx,0x4
c001d491:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d497:	7c 21                	jl     c001d4ba <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d499:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d49d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d49f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d4a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d4a6:	55                   	push   ebp
c001d4a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d4ab:	56                   	push   esi
c001d4ac:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d4af:	83 c4 10             	add    esp,0x10
c001d4b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d4b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4ba:	47                   	inc    edi
c001d4bb:	eb c7                	jmp    c001d484 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d4bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d4c1:	43                   	inc    ebx
c001d4c2:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d4c6:	eb a2                	jmp    c001d46a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d4c8:	83 c4 1c             	add    esp,0x1c
c001d4cb:	5b                   	pop    ebx
c001d4cc:	5e                   	pop    esi
c001d4cd:	5f                   	pop    edi
c001d4ce:	5d                   	pop    ebp
c001d4cf:	c3                   	ret    

c001d4d0 <Video::clearScreen(unsigned int)>:
c001d4d0:	57                   	push   edi
c001d4d1:	56                   	push   esi
c001d4d2:	53                   	push   ebx
c001d4d3:	31 db                	xor    ebx,ebx
c001d4d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4d9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d4df:	7e 1f                	jle    c001d500 <Video::clearScreen(unsigned int)+0x30>
c001d4e1:	31 ff                	xor    edi,edi
c001d4e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d4e9:	7e 12                	jle    c001d4fd <Video::clearScreen(unsigned int)+0x2d>
c001d4eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4f1:	53                   	push   ebx
c001d4f2:	57                   	push   edi
c001d4f3:	47                   	inc    edi
c001d4f4:	56                   	push   esi
c001d4f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	eb e6                	jmp    c001d4e3 <Video::clearScreen(unsigned int)+0x13>
c001d4fd:	43                   	inc    ebx
c001d4fe:	eb d9                	jmp    c001d4d9 <Video::clearScreen(unsigned int)+0x9>
c001d500:	5b                   	pop    ebx
c001d501:	5e                   	pop    esi
c001d502:	5f                   	pop    edi
c001d503:	c3                   	ret    

c001d504 <Video::putpixel(int, int, unsigned int)>:
c001d504:	c7 44 24 04 34 23 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032334
c001d50c:	e9 45 2d 00 00       	jmp    c0020256 <KePanic(char const*)>
c001d511:	90                   	nop

c001d512 <Video::readPixelApprox(int, int)>:
c001d512:	83 ec 18             	sub    esp,0x18
c001d515:	68 55 23 03 c0       	push   0xc0032355
c001d51a:	e8 37 2d 00 00       	call   c0020256 <KePanic(char const*)>
c001d51f:	31 c0                	xor    eax,eax
c001d521:	83 c4 1c             	add    esp,0x1c
c001d524:	c3                   	ret    
c001d525:	90                   	nop

c001d526 <Video::Video(char const*)>:
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52d:	83 ec 08             	sub    esp,0x8
c001d530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d534:	50                   	push   eax
c001d535:	e8 8c df ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001d53a:	83 c4 10             	add    esp,0x10
c001d53d:	ba f8 23 03 c0       	mov    edx,0xc00323f8
c001d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d546:	89 10                	mov    DWORD PTR [eax],edx
c001d548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d556:	90                   	nop
c001d557:	83 c4 0c             	add    esp,0xc
c001d55a:	c3                   	ret    
c001d55b:	90                   	nop

c001d55c <Video::~Video()>:
c001d55c:	83 ec 0c             	sub    esp,0xc
c001d55f:	ba f8 23 03 c0       	mov    edx,0xc00323f8
c001d564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d568:	89 10                	mov    DWORD PTR [eax],edx
c001d56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	50                   	push   eax
c001d572:	e8 ef dc ff ff       	call   c001b266 <Device::~Device()>
c001d577:	83 c4 10             	add    esp,0x10
c001d57a:	90                   	nop
c001d57b:	83 c4 0c             	add    esp,0xc
c001d57e:	c3                   	ret    
c001d57f:	90                   	nop

c001d580 <Video::~Video()>:
c001d580:	83 ec 0c             	sub    esp,0xc
c001d583:	83 ec 0c             	sub    esp,0xc
c001d586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d58a:	e8 cd ff ff ff       	call   c001d55c <Video::~Video()>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	83 ec 08             	sub    esp,0x8
c001d595:	68 64 01 00 00       	push   0x164
c001d59a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d59e:	e8 2d bc ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c001d5a3:	83 c4 10             	add    esp,0x10
c001d5a6:	83 c4 0c             	add    esp,0xc
c001d5a9:	c3                   	ret    

c001d5aa <Video::isMonochrome()>:
c001d5aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d5b4:	c3                   	ret    
c001d5b5:	90                   	nop

c001d5b6 <Video::getWidth()>:
c001d5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5c0:	c3                   	ret    
c001d5c1:	90                   	nop

c001d5c2 <Video::getHeight()>:
c001d5c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d5cc:	c3                   	ret    
c001d5cd:	90                   	nop

c001d5ce <Video::drawCursor(int, int, unsigned int*, int)>:
c001d5ce:	55                   	push   ebp
c001d5cf:	57                   	push   edi
c001d5d0:	56                   	push   esi
c001d5d1:	53                   	push   ebx
c001d5d2:	83 ec 2c             	sub    esp,0x2c
c001d5d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d5d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d5dd:	83 f8 01             	cmp    eax,0x1
c001d5e0:	19 c9                	sbb    ecx,ecx
c001d5e2:	31 db                	xor    ebx,ebx
c001d5e4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d5e8:	89 ce                	mov    esi,ecx
c001d5ea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d5f2:	f7 d6                	not    esi
c001d5f4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d5fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d5fe:	01 d8                	add    eax,ebx
c001d600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d604:	57                   	push   edi
c001d605:	e8 b8 ff ff ff       	call   c001d5c2 <Video::getHeight()>
c001d60a:	59                   	pop    ecx
c001d60b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d60f:	7e 70                	jle    c001d681 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d611:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d615:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d619:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d61c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d620:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d624:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d62b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d62f:	89 e8                	mov    eax,ebp
c001d631:	83 c0 20             	add    eax,0x20
c001d634:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d638:	57                   	push   edi
c001d639:	e8 78 ff ff ff       	call   c001d5b6 <Video::getWidth()>
c001d63e:	5a                   	pop    edx
c001d63f:	39 c5                	cmp    ebp,eax
c001d641:	7d 34                	jge    c001d677 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d643:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d648:	74 05                	je     c001d64f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d64a:	8b 07                	mov    eax,DWORD PTR [edi]
c001d64c:	56                   	push   esi
c001d64d:	eb 0d                	jmp    c001d65c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d64f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d654:	74 12                	je     c001d668 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d656:	8b 07                	mov    eax,DWORD PTR [edi]
c001d658:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d65c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d660:	55                   	push   ebp
c001d661:	57                   	push   edi
c001d662:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d66c:	45                   	inc    ebp
c001d66d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d671:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d675:	75 c1                	jne    c001d638 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d677:	43                   	inc    ebx
c001d678:	83 fb 20             	cmp    ebx,0x20
c001d67b:	0f 85 79 ff ff ff    	jne    c001d5fa <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d681:	83 c4 2c             	add    esp,0x2c
c001d684:	5b                   	pop    ebx
c001d685:	5e                   	pop    esi
c001d686:	5f                   	pop    edi
c001d687:	5d                   	pop    ebp
c001d688:	c3                   	ret    
c001d689:	90                   	nop

c001d68a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d68a:	55                   	push   ebp
c001d68b:	57                   	push   edi
c001d68c:	56                   	push   esi
c001d68d:	53                   	push   ebx
c001d68e:	83 ec 48             	sub    esp,0x48
c001d691:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d695:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d699:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d69d:	c1 e0 08             	shl    eax,0x8
c001d6a0:	01 d0                	add    eax,edx
c001d6a2:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d6a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6aa:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d6ae:	c1 e0 08             	shl    eax,0x8
c001d6b1:	01 d0                	add    eax,edx
c001d6b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6bb:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d6c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d6c8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d6cf:	50                   	push   eax
c001d6d0:	e8 c2 8d ff ff       	call   c0016497 <malloc>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	85 c0                	test   eax,eax
c001d6da:	89 c5                	mov    ebp,eax
c001d6dc:	75 10                	jne    c001d6ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d6de:	83 ec 0c             	sub    esp,0xc
c001d6e1:	68 80 23 03 c0       	push   0xc0032380
c001d6e6:	e8 6b 2b 00 00       	call   c0020256 <KePanic(char const*)>
c001d6eb:	83 c4 10             	add    esp,0x10
c001d6ee:	52                   	push   edx
c001d6ef:	bf 12 00 00 00       	mov    edi,0x12
c001d6f4:	52                   	push   edx
c001d6f5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d6f9:	50                   	push   eax
c001d6fa:	68 90 23 03 c0       	push   0xc0032390
c001d6ff:	e8 ca bb ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001d704:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d707:	83 e0 20             	and    eax,0x20
c001d70a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d70e:	85 c0                	test   eax,eax
c001d710:	59                   	pop    ecx
c001d711:	0f 94 c0             	sete   al
c001d714:	0f b6 c0             	movzx  eax,al
c001d717:	5e                   	pop    esi
c001d718:	50                   	push   eax
c001d719:	68 9a 23 03 c0       	push   0xc003239a
c001d71e:	e8 ab bb ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001d723:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d727:	83 c4 10             	add    esp,0x10
c001d72a:	85 c0                	test   eax,eax
c001d72c:	89 c2                	mov    edx,eax
c001d72e:	74 11                	je     c001d741 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d730:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d734:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d738:	c1 ff 03             	sar    edi,0x3
c001d73b:	0f af f9             	imul   edi,ecx
c001d73e:	83 c7 12             	add    edi,0x12
c001d741:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d746:	74 07                	je     c001d74f <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d748:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d74d:	75 12                	jne    c001d761 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d74f:	83 ec 0c             	sub    esp,0xc
c001d752:	68 a8 23 03 c0       	push   0xc00323a8
c001d757:	e8 72 bb ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001d75c:	e9 aa 02 00 00       	jmp    c001da0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001d761:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d765:	83 f9 02             	cmp    ecx,0x2
c001d768:	74 0e                	je     c001d778 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001d76a:	83 f9 0a             	cmp    ecx,0xa
c001d76d:	0f 84 d1 00 00 00    	je     c001d844 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001d773:	e9 7e 02 00 00       	jmp    c001d9f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001d778:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d77d:	75 0e                	jne    c001d78d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d77f:	84 d2                	test   dl,dl
c001d781:	75 0a                	jne    c001d78d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d783:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d786:	83 e8 18             	sub    eax,0x18
c001d789:	a8 f7                	test   al,0xf7
c001d78b:	74 0d                	je     c001d79a <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001d78d:	83 ec 0c             	sub    esp,0xc
c001d790:	68 bd 23 03 c0       	push   0xc00323bd
c001d795:	e9 64 02 00 00       	jmp    c001d9fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d79a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7a2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d7a7:	31 c0                	xor    eax,eax
c001d7a9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d7ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d7b5:	89 c6                	mov    esi,eax
c001d7b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d7bc:	75 15                	jne    c001d7d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d7be:	99                   	cdq    
c001d7bf:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d7c3:	85 d2                	test   edx,edx
c001d7c5:	75 0c                	jne    c001d7d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d7c7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001d7cb:	29 c6                	sub    esi,eax
c001d7cd:	4e                   	dec    esi
c001d7ce:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001d7d3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d7d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7df:	75 0c                	jne    c001d7ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001d7e1:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001d7e6:	c1 e2 18             	shl    edx,0x18
c001d7e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d7ed:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001d7f2:	8d 46 01             	lea    eax,[esi+0x1]
c001d7f5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001d7f9:	c1 e1 10             	shl    ecx,0x10
c001d7fc:	89 ca                	mov    edx,ecx
c001d7fe:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001d803:	c1 e1 08             	shl    ecx,0x8
c001d806:	09 d1                	or     ecx,edx
c001d808:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d80c:	09 d1                	or     ecx,edx
c001d80e:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001d812:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001d816:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d81a:	c1 fa 03             	sar    edx,0x3
c001d81d:	01 d7                	add    edi,edx
c001d81f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d823:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001d827:	7e 04                	jle    c001d82d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001d829:	89 c6                	mov    esi,eax
c001d82b:	eb 8a                	jmp    c001d7b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001d82d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001d831:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d835:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d839:	0f 8f 6e ff ff ff    	jg     c001d7ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001d83f:	e9 ce 01 00 00       	jmp    c001da12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d844:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d849:	75 0e                	jne    c001d859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d84b:	85 c0                	test   eax,eax
c001d84d:	75 0a                	jne    c001d859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d84f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d852:	83 e8 18             	sub    eax,0x18
c001d855:	a8 f7                	test   al,0xf7
c001d857:	74 0d                	je     c001d866 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001d859:	83 ec 0c             	sub    esp,0xc
c001d85c:	68 cb 23 03 c0       	push   0xc00323cb
c001d861:	e9 98 01 00 00       	jmp    c001d9fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d866:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d86e:	31 c9                	xor    ecx,ecx
c001d870:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d878:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001d87c:	0f 8d 90 01 00 00    	jge    c001da12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d882:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d886:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d88a:	0f 8e 82 01 00 00    	jle    c001da12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d890:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d894:	8d 77 01             	lea    esi,[edi+0x1]
c001d897:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d89b:	83 fa 7f             	cmp    edx,0x7f
c001d89e:	89 d0                	mov    eax,edx
c001d8a0:	0f 8e a3 00 00 00    	jle    c001d949 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001d8a6:	83 e0 7f             	and    eax,0x7f
c001d8a9:	31 d2                	xor    edx,edx
c001d8ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8af:	40                   	inc    eax
c001d8b0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8b8:	75 08                	jne    c001d8c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001d8ba:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001d8bf:	c1 e2 18             	shl    edx,0x18
c001d8c2:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001d8c7:	c1 e0 10             	shl    eax,0x10
c001d8ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8ce:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001d8d3:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d8d7:	c1 e0 08             	shl    eax,0x8
c001d8da:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d8de:	09 f8                	or     eax,edi
c001d8e0:	31 ff                	xor    edi,edi
c001d8e2:	09 d0                	or     eax,edx
c001d8e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d8ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8f1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001d8f6:	75 1d                	jne    c001d915 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d8f8:	89 c8                	mov    eax,ecx
c001d8fa:	99                   	cdq    
c001d8fb:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d8ff:	85 d2                	test   edx,edx
c001d901:	75 12                	jne    c001d915 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d903:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d907:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d90b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d90f:	49                   	dec    ecx
c001d910:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d915:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d919:	8d 51 01             	lea    edx,[ecx+0x1]
c001d91c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001d920:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d924:	8d 47 01             	lea    eax,[edi+0x1]
c001d927:	7e 06                	jle    c001d92f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001d929:	89 c7                	mov    edi,eax
c001d92b:	89 d1                	mov    ecx,edx
c001d92d:	eb c2                	jmp    c001d8f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001d92f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d933:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d937:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d93b:	c1 f8 03             	sar    eax,0x3
c001d93e:	01 c6                	add    esi,eax
c001d940:	89 d1                	mov    ecx,edx
c001d942:	89 f7                	mov    edi,esi
c001d944:	e9 2f ff ff ff       	jmp    c001d878 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001d949:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d955:	40                   	inc    eax
c001d956:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d95a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d95f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d963:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d968:	75 1d                	jne    c001d987 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d96a:	89 c8                	mov    eax,ecx
c001d96c:	99                   	cdq    
c001d96d:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d971:	85 d2                	test   edx,edx
c001d973:	75 12                	jne    c001d987 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d975:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d979:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d97d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d981:	49                   	dec    ecx
c001d982:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d987:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d98b:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d993:	75 0c                	jne    c001d9a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001d995:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001d99a:	c1 e7 18             	shl    edi,0x18
c001d99d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d9a1:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d9a6:	8d 51 01             	lea    edx,[ecx+0x1]
c001d9a9:	c1 e0 10             	shl    eax,0x10
c001d9ac:	89 c7                	mov    edi,eax
c001d9ae:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001d9b3:	c1 e0 08             	shl    eax,0x8
c001d9b6:	09 f8                	or     eax,edi
c001d9b8:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d9bc:	09 f8                	or     eax,edi
c001d9be:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d9c2:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9ca:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d9ce:	c1 f8 03             	sar    eax,0x3
c001d9d1:	01 c6                	add    esi,eax
c001d9d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9d7:	40                   	inc    eax
c001d9d8:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001d9dc:	7e 0b                	jle    c001d9e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001d9de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9e2:	89 d1                	mov    ecx,edx
c001d9e4:	e9 7a ff ff ff       	jmp    c001d963 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001d9e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9ed:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d9f1:	e9 4a ff ff ff       	jmp    c001d940 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001d9f6:	50                   	push   eax
c001d9f7:	50                   	push   eax
c001d9f8:	51                   	push   ecx
c001d9f9:	68 da 23 03 c0       	push   0xc00323da
c001d9fe:	e8 cb b8 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001da03:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da06:	e8 9c 8a ff ff       	call   c00164a7 <free>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	31 ed                	xor    ebp,ebp
c001da10:	eb 14                	jmp    c001da26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001da12:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001da16:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001da1a:	89 18                	mov    DWORD PTR [eax],ebx
c001da1c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001da20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da24:	89 18                	mov    DWORD PTR [eax],ebx
c001da26:	83 c4 3c             	add    esp,0x3c
c001da29:	89 e8                	mov    eax,ebp
c001da2b:	5b                   	pop    ebx
c001da2c:	5e                   	pop    esi
c001da2d:	5f                   	pop    edi
c001da2e:	5d                   	pop    ebp
c001da2f:	c3                   	ret    

c001da30 <Video::putTGA(int, int, unsigned char*, int)>:
c001da30:	55                   	push   ebp
c001da31:	57                   	push   edi
c001da32:	56                   	push   esi
c001da33:	53                   	push   ebx
c001da34:	83 ec 28             	sub    esp,0x28
c001da37:	8d 44 24 18          	lea    eax,[esp+0x18]
c001da3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da3f:	50                   	push   eax
c001da40:	8d 44 24 18          	lea    eax,[esp+0x18]
c001da44:	50                   	push   eax
c001da45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001da49:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001da4d:	55                   	push   ebp
c001da4e:	e8 37 fc ff ff       	call   c001d68a <Video::tgaParse(unsigned char*, int, int*, int*)>
c001da53:	83 c4 20             	add    esp,0x20
c001da56:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001da5a:	85 c0                	test   eax,eax
c001da5c:	74 3b                	je     c001da99 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001da5e:	89 c6                	mov    esi,eax
c001da60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001da64:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001da68:	39 d8                	cmp    eax,ebx
c001da6a:	7e 2d                	jle    c001da99 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001da6c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001da70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001da74:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001da78:	39 f8                	cmp    eax,edi
c001da7a:	7e 1a                	jle    c001da96 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001da7c:	83 c6 04             	add    esi,0x4
c001da7f:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001da82:	85 c0                	test   eax,eax
c001da84:	79 0d                	jns    c001da93 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001da86:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001da89:	50                   	push   eax
c001da8a:	53                   	push   ebx
c001da8b:	57                   	push   edi
c001da8c:	55                   	push   ebp
c001da8d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	47                   	inc    edi
c001da94:	eb da                	jmp    c001da70 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001da96:	43                   	inc    ebx
c001da97:	eb c7                	jmp    c001da60 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001da99:	83 c4 1c             	add    esp,0x1c
c001da9c:	5b                   	pop    ebx
c001da9d:	5e                   	pop    esi
c001da9e:	5f                   	pop    edi
c001da9f:	5d                   	pop    ebp
c001daa0:	c3                   	ret    
c001daa1:	66 90                	xchg   ax,ax
c001daa3:	90                   	nop

c001daa4 <ACPI::close(int, int, void*)>:
c001daa4:	83 ec 1c             	sub    esp,0x1c
c001daa7:	83 ec 0c             	sub    esp,0xc
c001daaa:	68 3c 24 03 c0       	push   0xc003243c
c001daaf:	e8 1a b8 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001dab4:	83 c4 10             	add    esp,0x10
c001dab7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dabf:	74 1b                	je     c001dadc <ACPI::close(int, int, void*)+0x38>
c001dac1:	83 ec 0c             	sub    esp,0xc
c001dac4:	68 4b 24 03 c0       	push   0xc003244b
c001dac9:	e8 00 b8 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001dace:	83 c4 10             	add    esp,0x10
c001dad1:	b8 00 00 00 00       	mov    eax,0x0
c001dad6:	e9 01 01 00 00       	jmp    c001dbdc <ACPI::close(int, int, void*)+0x138>
c001dadb:	90                   	nop
c001dadc:	83 ec 0c             	sub    esp,0xc
c001dadf:	68 5c 24 03 c0       	push   0xc003245c
c001dae4:	e8 e5 b7 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001dae9:	83 c4 10             	add    esp,0x10
c001daec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001daf1:	75 45                	jne    c001db38 <ACPI::close(int, int, void*)+0x94>
c001daf3:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001daf8:	83 ec 08             	sub    esp,0x8
c001dafb:	50                   	push   eax
c001dafc:	68 6b 24 03 c0       	push   0xc003246b
c001db01:	e8 c8 b7 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001db06:	83 c4 10             	add    esp,0x10
c001db09:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db0e:	85 c0                	test   eax,eax
c001db10:	74 0a                	je     c001db1c <ACPI::close(int, int, void*)+0x78>
c001db12:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db17:	ff d0                	call   eax
c001db19:	8d 76 00             	lea    esi,[esi+0x0]
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	68 3c 26 03 c0       	push   0xc003263c
c001db24:	e8 2d 27 00 00       	call   c0020256 <KePanic(char const*)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db31:	e9 a6 00 00 00       	jmp    c001dbdc <ACPI::close(int, int, void*)+0x138>
c001db36:	66 90                	xchg   ax,ax
c001db38:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001db3d:	0f 85 81 00 00 00    	jne    c001dbc4 <ACPI::close(int, int, void*)+0x120>
c001db43:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db48:	83 ec 08             	sub    esp,0x8
c001db4b:	50                   	push   eax
c001db4c:	68 89 24 03 c0       	push   0xc0032489
c001db51:	e8 78 b7 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001db5e:	85 c0                	test   eax,eax
c001db60:	74 0a                	je     c001db6c <ACPI::close(int, int, void*)+0xc8>
c001db62:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001db67:	ff d0                	call   eax
c001db69:	8d 76 00             	lea    esi,[esi+0x0]
c001db6c:	83 ec 0c             	sub    esp,0xc
c001db6f:	68 a4 24 03 c0       	push   0xc00324a4
c001db74:	e8 55 b7 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001db81:	8d 76 00             	lea    esi,[esi+0x0]
c001db84:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db89:	83 e0 02             	and    eax,0x2
c001db8c:	74 1e                	je     c001dbac <ACPI::close(int, int, void*)+0x108>
c001db8e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001db95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db99:	89 c2                	mov    edx,eax
c001db9b:	ec                   	in     al,dx
c001db9c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dba0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dba4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dba8:	eb da                	jmp    c001db84 <ACPI::close(int, int, void*)+0xe0>
c001dbaa:	66 90                	xchg   ax,ax
c001dbac:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001dbb3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dbb8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dbbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbc0:	ee                   	out    dx,al
c001dbc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc4:	83 ec 0c             	sub    esp,0xc
c001dbc7:	68 b6 24 03 c0       	push   0xc00324b6
c001dbcc:	e8 fd b6 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dbdc:	83 c4 1c             	add    esp,0x1c
c001dbdf:	c3                   	ret    

c001dbe0 <findRSDP()>:
c001dbe0:	83 ec 1c             	sub    esp,0x1c
c001dbe3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbe8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbee:	83 e0 04             	and    eax,0x4
c001dbf1:	0f b6 c0             	movzx  eax,al
c001dbf4:	85 c0                	test   eax,eax
c001dbf6:	75 08                	jne    c001dc00 <findRSDP()+0x20>
c001dbf8:	b8 00 00 00 00       	mov    eax,0x0
c001dbfd:	eb 75                	jmp    c001dc74 <findRSDP()+0x94>
c001dbff:	90                   	nop
c001dc00:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001dc05:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dc0a:	7f 1c                	jg     c001dc28 <findRSDP()+0x48>
c001dc0c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dc11:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dc17:	83 e2 fb             	and    edx,0xfffffffb
c001dc1a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dc20:	b8 00 00 00 00       	mov    eax,0x0
c001dc25:	eb 4d                	jmp    c001dc74 <findRSDP()+0x94>
c001dc27:	90                   	nop
c001dc28:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dc30:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dc38:	77 32                	ja     c001dc6c <findRSDP()+0x8c>
c001dc3a:	83 ec 04             	sub    esp,0x4
c001dc3d:	6a 08                	push   0x8
c001dc3f:	68 c5 24 03 c0       	push   0xc00324c5
c001dc44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc48:	e8 33 27 fe ff       	call   c0000380 <memcmp>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	85 c0                	test   eax,eax
c001dc52:	0f 94 c0             	sete   al
c001dc55:	0f b6 c0             	movzx  eax,al
c001dc58:	85 c0                	test   eax,eax
c001dc5a:	74 08                	je     c001dc64 <findRSDP()+0x84>
c001dc5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc60:	eb 12                	jmp    c001dc74 <findRSDP()+0x94>
c001dc62:	66 90                	xchg   ax,ax
c001dc64:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dc69:	eb c5                	jmp    c001dc30 <findRSDP()+0x50>
c001dc6b:	90                   	nop
c001dc6c:	b8 00 00 00 00       	mov    eax,0x0
c001dc71:	8d 76 00             	lea    esi,[esi+0x0]
c001dc74:	83 c4 1c             	add    esp,0x1c
c001dc77:	c3                   	ret    

c001dc78 <loadACPITables(unsigned char*)>:
c001dc78:	57                   	push   edi
c001dc79:	56                   	push   esi
c001dc7a:	53                   	push   ebx
c001dc7b:	83 ec 60             	sub    esp,0x60
c001dc7e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dc83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dc89:	83 e0 04             	and    eax,0x4
c001dc8c:	0f b6 c0             	movzx  eax,al
c001dc8f:	85 c0                	test   eax,eax
c001dc91:	0f 84 41 02 00 00    	je     c001ded8 <loadACPITables(unsigned char*)+0x260>
c001dc97:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dc9c:	0f b6 c0             	movzx  eax,al
c001dc9f:	85 c0                	test   eax,eax
c001dca1:	74 79                	je     c001dd1c <loadACPITables(unsigned char*)+0xa4>
c001dca3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dca7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dcab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dcaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dcb2:	83 e8 24             	sub    eax,0x24
c001dcb5:	c1 e8 03             	shr    eax,0x3
c001dcb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dcbc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dcc4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dcc8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dccc:	0f 8d ba 00 00 00    	jge    c001dd8c <loadACPITables(unsigned char*)+0x114>
c001dcd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dcd6:	83 c0 24             	add    eax,0x24
c001dcd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dcdd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dce1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dce5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dce9:	c1 e0 03             	shl    eax,0x3
c001dcec:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dcf0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dcf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dcf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcf9:	89 c1                	mov    ecx,eax
c001dcfb:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dd00:	8d 50 01             	lea    edx,[eax+0x1]
c001dd03:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dd09:	89 ca                	mov    edx,ecx
c001dd0b:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd12:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dd17:	eb ab                	jmp    c001dcc4 <loadACPITables(unsigned char*)+0x4c>
c001dd19:	8d 76 00             	lea    esi,[esi+0x0]
c001dd1c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dd20:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd2b:	83 e8 24             	sub    eax,0x24
c001dd2e:	c1 e8 02             	shr    eax,0x2
c001dd31:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dd35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dd3d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd40:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dd44:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dd48:	7d 42                	jge    c001dd8c <loadACPITables(unsigned char*)+0x114>
c001dd4a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dd4e:	83 c0 24             	add    eax,0x24
c001dd51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dd55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd59:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dd5d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dd61:	c1 e0 02             	shl    eax,0x2
c001dd64:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dd68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd6e:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dd73:	8d 50 01             	lea    edx,[eax+0x1]
c001dd76:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dd7c:	89 ca                	mov    edx,ecx
c001dd7e:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd85:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dd8a:	eb b4                	jmp    c001dd40 <loadACPITables(unsigned char*)+0xc8>
c001dd8c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dd94:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dd99:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dd9d:	0f 8d 39 01 00 00    	jge    c001dedc <loadACPITables(unsigned char*)+0x264>
c001dda3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dda7:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001ddae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ddba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbe:	25 ff 0f 00 00       	and    eax,0xfff
c001ddc3:	89 c6                	mov    esi,eax
c001ddc5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddcb:	83 ec 0c             	sub    esp,0xc
c001ddce:	6a 01                	push   0x1
c001ddd0:	e8 e4 a1 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dddc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dde2:	83 ec 0c             	sub    esp,0xc
c001dde5:	6a 01                	push   0x1
c001dde7:	6a 01                	push   0x1
c001dde9:	50                   	push   eax
c001ddea:	52                   	push   edx
c001ddeb:	53                   	push   ebx
c001ddec:	e8 db aa ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ddf1:	83 c4 20             	add    esp,0x20
c001ddf4:	09 f0                	or     eax,esi
c001ddf6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddfa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ddfe:	c1 e0 03             	shl    eax,0x3
c001de01:	05 20 f4 03 c0       	add    eax,0xc003f420
c001de06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de12:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001de1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de2e:	89 c6                	mov    esi,eax
c001de30:	89 d7                	mov    edi,edx
c001de32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de34:	89 c8                	mov    eax,ecx
c001de36:	89 fa                	mov    edx,edi
c001de38:	89 f3                	mov    ebx,esi
c001de3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001de3e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001de51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de55:	05 00 10 00 00       	add    eax,0x1000
c001de5a:	c1 e8 0c             	shr    eax,0xc
c001de5d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de6d:	25 ff 0f 00 00       	and    eax,0xfff
c001de72:	89 c6                	mov    esi,eax
c001de74:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001de81:	e8 33 a1 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001de8d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de93:	83 ec 0c             	sub    esp,0xc
c001de96:	6a 01                	push   0x1
c001de98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de9c:	50                   	push   eax
c001de9d:	52                   	push   edx
c001de9e:	53                   	push   ebx
c001de9f:	e8 28 aa ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dea4:	83 c4 20             	add    esp,0x20
c001dea7:	09 f0                	or     eax,esi
c001dea9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb1:	83 ec 0c             	sub    esp,0xc
c001deb4:	50                   	push   eax
c001deb5:	e8 13 a4 ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dec1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dec5:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001decc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001ded1:	e9 be fe ff ff       	jmp    c001dd94 <loadACPITables(unsigned char*)+0x11c>
c001ded6:	66 90                	xchg   ax,ax
c001ded8:	90                   	nop
c001ded9:	8d 76 00             	lea    esi,[esi+0x0]
c001dedc:	83 c4 60             	add    esp,0x60
c001dedf:	5b                   	pop    ebx
c001dee0:	5e                   	pop    esi
c001dee1:	5f                   	pop    edi
c001dee2:	c3                   	ret    
c001dee3:	90                   	nop

c001dee4 <findRSDT(unsigned char*)>:
c001dee4:	57                   	push   edi
c001dee5:	56                   	push   esi
c001dee6:	53                   	push   ebx
c001dee7:	83 ec 50             	sub    esp,0x50
c001deea:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001deef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001def5:	83 e0 04             	and    eax,0x4
c001def8:	0f b6 c0             	movzx  eax,al
c001defb:	85 c0                	test   eax,eax
c001defd:	75 0d                	jne    c001df0c <findRSDT(unsigned char*)+0x28>
c001deff:	b8 00 00 00 00       	mov    eax,0x0
c001df04:	e9 2b 01 00 00       	jmp    c001e034 <findRSDT(unsigned char*)+0x150>
c001df09:	8d 76 00             	lea    esi,[esi+0x0]
c001df0c:	89 e0                	mov    eax,esp
c001df0e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001df12:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001df16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001df1a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001df22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001df2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df32:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001df36:	89 c6                	mov    esi,eax
c001df38:	89 d7                	mov    edi,edx
c001df3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df3c:	89 c8                	mov    eax,ecx
c001df3e:	89 fa                	mov    edx,edi
c001df40:	89 f3                	mov    ebx,esi
c001df42:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001df46:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001df4a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df4e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df52:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001df56:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001df5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df66:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df6e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df72:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df76:	25 ff 0f 00 00       	and    eax,0xfff
c001df7b:	89 c6                	mov    esi,eax
c001df7d:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	6a 02                	push   0x2
c001df88:	e8 2c a0 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df94:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df9a:	83 ec 0c             	sub    esp,0xc
c001df9d:	6a 01                	push   0x1
c001df9f:	6a 02                	push   0x2
c001dfa1:	50                   	push   eax
c001dfa2:	52                   	push   edx
c001dfa3:	53                   	push   ebx
c001dfa4:	e8 23 a9 ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfa9:	83 c4 20             	add    esp,0x20
c001dfac:	09 f0                	or     eax,esi
c001dfae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dfb2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfb6:	25 ff 0f 00 00       	and    eax,0xfff
c001dfbb:	89 c6                	mov    esi,eax
c001dfbd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	6a 02                	push   0x2
c001dfc8:	e8 ec 9f ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c001dfcd:	83 c4 10             	add    esp,0x10
c001dfd0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfd4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dfda:	83 ec 0c             	sub    esp,0xc
c001dfdd:	6a 01                	push   0x1
c001dfdf:	6a 02                	push   0x2
c001dfe1:	50                   	push   eax
c001dfe2:	52                   	push   edx
c001dfe3:	53                   	push   ebx
c001dfe4:	e8 e3 a8 ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfe9:	83 c4 20             	add    esp,0x20
c001dfec:	09 f0                	or     eax,esi
c001dfee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dff2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001dff7:	85 c0                	test   eax,eax
c001dff9:	75 11                	jne    c001e00c <findRSDT(unsigned char*)+0x128>
c001dffb:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e002:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e006:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e00a:	eb 24                	jmp    c001e030 <findRSDT(unsigned char*)+0x14c>
c001e00c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e011:	83 f8 02             	cmp    eax,0x2
c001e014:	75 12                	jne    c001e028 <findRSDT(unsigned char*)+0x144>
c001e016:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e01d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e021:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e025:	eb 09                	jmp    c001e030 <findRSDT(unsigned char*)+0x14c>
c001e027:	90                   	nop
c001e028:	b8 00 00 00 00       	mov    eax,0x0
c001e02d:	eb 05                	jmp    c001e034 <findRSDT(unsigned char*)+0x150>
c001e02f:	90                   	nop
c001e030:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e034:	83 c4 50             	add    esp,0x50
c001e037:	5b                   	pop    ebx
c001e038:	5e                   	pop    esi
c001e039:	5f                   	pop    edi
c001e03a:	c3                   	ret    
c001e03b:	90                   	nop

c001e03c <findDataTable(unsigned char*, char*)>:
c001e03c:	83 ec 1c             	sub    esp,0x1c
c001e03f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e044:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e04a:	83 e0 04             	and    eax,0x4
c001e04d:	0f b6 c0             	movzx  eax,al
c001e050:	85 c0                	test   eax,eax
c001e052:	75 08                	jne    c001e05c <findDataTable(unsigned char*, char*)+0x20>
c001e054:	b8 00 00 00 00       	mov    eax,0x0
c001e059:	eb 5d                	jmp    c001e0b8 <findDataTable(unsigned char*, char*)+0x7c>
c001e05b:	90                   	nop
c001e05c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e064:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e069:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e06d:	7d 41                	jge    c001e0b0 <findDataTable(unsigned char*, char*)+0x74>
c001e06f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e073:	c1 e0 03             	shl    eax,0x3
c001e076:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e07b:	83 ec 04             	sub    esp,0x4
c001e07e:	6a 04                	push   0x4
c001e080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e084:	50                   	push   eax
c001e085:	e8 f6 22 fe ff       	call   c0000380 <memcmp>
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	85 c0                	test   eax,eax
c001e08f:	0f 94 c0             	sete   al
c001e092:	0f b6 c0             	movzx  eax,al
c001e095:	85 c0                	test   eax,eax
c001e097:	74 0f                	je     c001e0a8 <findDataTable(unsigned char*, char*)+0x6c>
c001e099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e09d:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e0a4:	eb 12                	jmp    c001e0b8 <findDataTable(unsigned char*, char*)+0x7c>
c001e0a6:	66 90                	xchg   ax,ax
c001e0a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e0ad:	eb b5                	jmp    c001e064 <findDataTable(unsigned char*, char*)+0x28>
c001e0af:	90                   	nop
c001e0b0:	b8 00 00 00 00       	mov    eax,0x0
c001e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e0b8:	83 c4 1c             	add    esp,0x1c
c001e0bb:	c3                   	ret    

c001e0bc <scanMADT()>:
c001e0bc:	53                   	push   ebx
c001e0bd:	83 ec 38             	sub    esp,0x38
c001e0c0:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e0c5:	25 00 04 00 00       	and    eax,0x400
c001e0ca:	74 14                	je     c001e0e0 <scanMADT()+0x24>
c001e0cc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0d7:	83 e2 fb             	and    edx,0xfffffffb
c001e0da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0e0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e0eb:	83 e0 04             	and    eax,0x4
c001e0ee:	0f b6 c0             	movzx  eax,al
c001e0f1:	85 c0                	test   eax,eax
c001e0f3:	0f 84 6b 04 00 00    	je     c001e564 <scanMADT()+0x4a8>
c001e0f9:	e8 e2 fa ff ff       	call   c001dbe0 <findRSDP()>
c001e0fe:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e103:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e108:	85 c0                	test   eax,eax
c001e10a:	75 1c                	jne    c001e128 <scanMADT()+0x6c>
c001e10c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e111:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e117:	83 e2 fb             	and    edx,0xfffffffb
c001e11a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e120:	e9 47 04 00 00       	jmp    c001e56c <scanMADT()+0x4b0>
c001e125:	8d 76 00             	lea    esi,[esi+0x0]
c001e128:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e12d:	83 ec 0c             	sub    esp,0xc
c001e130:	50                   	push   eax
c001e131:	e8 ae fd ff ff       	call   c001dee4 <findRSDT(unsigned char*)>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e13e:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e143:	85 c0                	test   eax,eax
c001e145:	75 19                	jne    c001e160 <scanMADT()+0xa4>
c001e147:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e14c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e152:	83 e2 fb             	and    edx,0xfffffffb
c001e155:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e15b:	e9 0c 04 00 00       	jmp    c001e56c <scanMADT()+0x4b0>
c001e160:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e165:	83 ec 0c             	sub    esp,0xc
c001e168:	50                   	push   eax
c001e169:	e8 0a fb ff ff       	call   c001dc78 <loadACPITables(unsigned char*)>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e176:	83 ec 08             	sub    esp,0x8
c001e179:	68 ce 24 03 c0       	push   0xc00324ce
c001e17e:	50                   	push   eax
c001e17f:	e8 b8 fe ff ff       	call   c001e03c <findDataTable(unsigned char*, char*)>
c001e184:	83 c4 10             	add    esp,0x10
c001e187:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e18b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e190:	75 1a                	jne    c001e1ac <scanMADT()+0xf0>
c001e192:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e197:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e19d:	83 e2 fe             	and    edx,0xfffffffe
c001e1a0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e1a6:	e9 c1 03 00 00       	jmp    c001e56c <scanMADT()+0x4b0>
c001e1ab:	90                   	nop
c001e1ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e1b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1bb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e1bf:	0f 87 a7 03 00 00    	ja     c001e56c <scanMADT()+0x4b0>
c001e1c5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e1cd:	0f 87 99 03 00 00    	ja     c001e56c <scanMADT()+0x4b0>
c001e1d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1df:	8d 50 01             	lea    edx,[eax+0x1]
c001e1e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e1ee:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e1f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1f6:	8d 50 01             	lea    edx,[eax+0x1]
c001e1f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e201:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e205:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e209:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e20e:	83 f8 02             	cmp    eax,0x2
c001e211:	0f 86 51 03 00 00    	jbe    c001e568 <scanMADT()+0x4ac>
c001e217:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e21c:	85 c0                	test   eax,eax
c001e21e:	75 58                	jne    c001e278 <scanMADT()+0x1bc>
c001e220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e224:	8d 50 01             	lea    edx,[eax+0x1]
c001e227:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e22b:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e231:	0f b6 d2             	movzx  edx,dl
c001e234:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e238:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e23c:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e242:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e246:	8d 50 01             	lea    edx,[eax+0x1]
c001e249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e24d:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e253:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e256:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e25c:	0f b6 d2             	movzx  edx,dl
c001e25f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e263:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e267:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e26d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e272:	e9 d9 02 00 00       	jmp    c001e550 <scanMADT()+0x494>
c001e277:	90                   	nop
c001e278:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e27d:	83 f8 01             	cmp    eax,0x1
c001e280:	0f 85 1a 01 00 00    	jne    c001e3a0 <scanMADT()+0x2e4>
c001e286:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e28a:	8d 50 01             	lea    edx,[eax+0x1]
c001e28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e291:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e297:	0f b6 d2             	movzx  edx,dl
c001e29a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e29e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e2a2:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e2a8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e2ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2b5:	01 d0                	add    eax,edx
c001e2b7:	83 c0 2c             	add    eax,0x2c
c001e2ba:	8a 00                	mov    al,BYTE PTR [eax]
c001e2bc:	0f b6 d0             	movzx  edx,al
c001e2bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2c3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e2c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e2ce:	0f b6 c0             	movzx  eax,al
c001e2d1:	c1 e0 08             	shl    eax,0x8
c001e2d4:	89 d1                	mov    ecx,edx
c001e2d6:	09 c1                	or     ecx,eax
c001e2d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2dc:	8d 50 02             	lea    edx,[eax+0x2]
c001e2df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2e3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2e7:	0f b6 c0             	movzx  eax,al
c001e2ea:	c1 e0 10             	shl    eax,0x10
c001e2ed:	09 c1                	or     ecx,eax
c001e2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2f3:	8d 50 03             	lea    edx,[eax+0x3]
c001e2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2fe:	0f b6 c0             	movzx  eax,al
c001e301:	c1 e0 18             	shl    eax,0x18
c001e304:	09 c1                	or     ecx,eax
c001e306:	89 ca                	mov    edx,ecx
c001e308:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e30d:	0f b6 c0             	movzx  eax,al
c001e310:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e317:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e31c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e324:	01 d0                	add    eax,edx
c001e326:	83 c0 2c             	add    eax,0x2c
c001e329:	8a 00                	mov    al,BYTE PTR [eax]
c001e32b:	0f b6 d0             	movzx  edx,al
c001e32e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e332:	8d 48 01             	lea    ecx,[eax+0x1]
c001e335:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e339:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e33d:	0f b6 c0             	movzx  eax,al
c001e340:	c1 e0 08             	shl    eax,0x8
c001e343:	89 d1                	mov    ecx,edx
c001e345:	09 c1                	or     ecx,eax
c001e347:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e34b:	8d 50 02             	lea    edx,[eax+0x2]
c001e34e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e352:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e356:	0f b6 c0             	movzx  eax,al
c001e359:	c1 e0 10             	shl    eax,0x10
c001e35c:	09 c1                	or     ecx,eax
c001e35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e362:	8d 50 03             	lea    edx,[eax+0x3]
c001e365:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e369:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e36d:	0f b6 c0             	movzx  eax,al
c001e370:	c1 e0 18             	shl    eax,0x18
c001e373:	09 c1                	or     ecx,eax
c001e375:	89 ca                	mov    edx,ecx
c001e377:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e37c:	0f b6 c0             	movzx  eax,al
c001e37f:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e386:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e38b:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e390:	83 c0 01             	add    eax,0x1
c001e393:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e398:	e9 b3 01 00 00       	jmp    c001e550 <scanMADT()+0x494>
c001e39d:	8d 76 00             	lea    esi,[esi+0x0]
c001e3a0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3a5:	83 f8 02             	cmp    eax,0x2
c001e3a8:	0f 85 ea 00 00 00    	jne    c001e498 <scanMADT()+0x3dc>
c001e3ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3b2:	8d 50 01             	lea    edx,[eax+0x1]
c001e3b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3c1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e3c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3c9:	8d 50 01             	lea    edx,[eax+0x1]
c001e3cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3d4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e3dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3e4:	01 d0                	add    eax,edx
c001e3e6:	83 c0 2c             	add    eax,0x2c
c001e3e9:	8a 00                	mov    al,BYTE PTR [eax]
c001e3eb:	0f b6 d0             	movzx  edx,al
c001e3ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3f2:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e3fd:	0f b6 c0             	movzx  eax,al
c001e400:	c1 e0 08             	shl    eax,0x8
c001e403:	89 d1                	mov    ecx,edx
c001e405:	09 c1                	or     ecx,eax
c001e407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e40b:	8d 50 02             	lea    edx,[eax+0x2]
c001e40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e412:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e416:	0f b6 c0             	movzx  eax,al
c001e419:	c1 e0 10             	shl    eax,0x10
c001e41c:	09 c1                	or     ecx,eax
c001e41e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e422:	8d 50 03             	lea    edx,[eax+0x3]
c001e425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e429:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e42d:	0f b6 c0             	movzx  eax,al
c001e430:	c1 e0 18             	shl    eax,0x18
c001e433:	09 c8                	or     eax,ecx
c001e435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e439:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e43e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e446:	01 d0                	add    eax,edx
c001e448:	83 c0 2c             	add    eax,0x2c
c001e44b:	8a 00                	mov    al,BYTE PTR [eax]
c001e44d:	0f b6 d0             	movzx  edx,al
c001e450:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e454:	8d 48 01             	lea    ecx,[eax+0x1]
c001e457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e45b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e45f:	0f b6 c0             	movzx  eax,al
c001e462:	c1 e0 08             	shl    eax,0x8
c001e465:	09 d0                	or     eax,edx
c001e467:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e46c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e471:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e476:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e47a:	88 90 e8 3c 03 c0    	mov    BYTE PTR [eax-0x3ffcc318],dl
c001e480:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e485:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e48a:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e492:	e9 b9 00 00 00       	jmp    c001e550 <scanMADT()+0x494>
c001e497:	90                   	nop
c001e498:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e49d:	83 f8 04             	cmp    eax,0x4
c001e4a0:	0f 85 9a 00 00 00    	jne    c001e540 <scanMADT()+0x484>
c001e4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4aa:	8d 50 01             	lea    edx,[eax+0x1]
c001e4ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e4b9:	0f b6 c0             	movzx  eax,al
c001e4bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4c8:	01 d0                	add    eax,edx
c001e4ca:	83 c0 2c             	add    eax,0x2c
c001e4cd:	8a 00                	mov    al,BYTE PTR [eax]
c001e4cf:	0f b6 d0             	movzx  edx,al
c001e4d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4d6:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e4e1:	0f b6 c0             	movzx  eax,al
c001e4e4:	c1 e0 08             	shl    eax,0x8
c001e4e7:	09 d0                	or     eax,edx
c001e4e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4ed:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e4f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4f6:	8d 50 01             	lea    edx,[eax+0x1]
c001e4f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e501:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e505:	0f b6 c0             	movzx  eax,al
c001e508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e510:	c1 e0 08             	shl    eax,0x8
c001e513:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e517:	89 c1                	mov    ecx,eax
c001e519:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e51d:	c1 e0 18             	shl    eax,0x18
c001e520:	89 c3                	mov    ebx,eax
c001e522:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e527:	8d 50 01             	lea    edx,[eax+0x1]
c001e52a:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e530:	09 d9                	or     ecx,ebx
c001e532:	89 ca                	mov    edx,ecx
c001e534:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e53b:	eb 13                	jmp    c001e550 <scanMADT()+0x494>
c001e53d:	8d 76 00             	lea    esi,[esi+0x0]
c001e540:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e545:	83 f8 05             	cmp    eax,0x5
c001e548:	75 06                	jne    c001e550 <scanMADT()+0x494>
c001e54a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e54f:	90                   	nop
c001e550:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e555:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e559:	01 d0                	add    eax,edx
c001e55b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e55f:	e9 50 fc ff ff       	jmp    c001e1b4 <scanMADT()+0xf8>
c001e564:	90                   	nop
c001e565:	eb 05                	jmp    c001e56c <scanMADT()+0x4b0>
c001e567:	90                   	nop
c001e568:	90                   	nop
c001e569:	8d 76 00             	lea    esi,[esi+0x0]
c001e56c:	83 c4 38             	add    esp,0x38
c001e56f:	5b                   	pop    ebx
c001e570:	c3                   	ret    
c001e571:	90                   	nop
c001e572:	66 90                	xchg   ax,ax

c001e574 <ACPI::ACPI()>:
c001e574:	83 ec 0c             	sub    esp,0xc
c001e577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57b:	83 ec 08             	sub    esp,0x8
c001e57e:	68 d3 24 03 c0       	push   0xc00324d3
c001e583:	50                   	push   eax
c001e584:	e8 3d cf ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	ba e0 26 03 c0       	mov    edx,0xc00326e0
c001e591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e595:	89 10                	mov    DWORD PTR [eax],edx
c001e597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e5be:	e8 f9 fa ff ff       	call   c001e0bc <scanMADT()>
c001e5c3:	90                   	nop
c001e5c4:	83 c4 0c             	add    esp,0xc
c001e5c7:	c3                   	ret    

c001e5c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e5c8:	83 ec 2c             	sub    esp,0x2c
c001e5cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e5cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e5d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5d7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e5db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e5e0:	88 c8                	mov    al,cl
c001e5e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e5e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e5eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e5f3:	90                   	nop
c001e5f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e5fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e602:	0f 8d b0 00 00 00    	jge    c001e6b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e608:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e60c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e610:	83 c2 2a             	add    edx,0x2a
c001e613:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e617:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e61c:	0f b7 c0             	movzx  eax,ax
c001e61f:	39 c2                	cmp    edx,eax
c001e621:	0f 85 85 00 00 00    	jne    c001e6ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e627:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e62b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e62f:	83 c2 2a             	add    edx,0x2a
c001e632:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e636:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e63b:	0f b6 c0             	movzx  eax,al
c001e63e:	39 c2                	cmp    edx,eax
c001e640:	75 6a                	jne    c001e6ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e642:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e647:	85 c0                	test   eax,eax
c001e649:	74 3d                	je     c001e688 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e64b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e64f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e653:	83 c2 2a             	add    edx,0x2a
c001e656:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e65a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e661:	39 c2                	cmp    edx,eax
c001e663:	74 13                	je     c001e678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e665:	83 ec 0c             	sub    esp,0xc
c001e668:	68 60 26 03 c0       	push   0xc0032660
c001e66d:	e8 e4 1b 00 00       	call   c0020256 <KePanic(char const*)>
c001e672:	83 c4 10             	add    esp,0x10
c001e675:	8d 76 00             	lea    esi,[esi+0x0]
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	68 d8 24 03 c0       	push   0xc00324d8
c001e680:	e8 d1 1b 00 00       	call   c0020256 <KePanic(char const*)>
c001e685:	83 c4 10             	add    esp,0x10
c001e688:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e68c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e690:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e694:	83 c2 2a             	add    edx,0x2a
c001e697:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e69b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e69d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e6a0:	89 01                	mov    DWORD PTR [ecx],eax
c001e6a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6a5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6aa:	66 90                	xchg   ax,ax
c001e6ac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e6b1:	e9 3e ff ff ff       	jmp    c001e5f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e6b6:	66 90                	xchg   ax,ax
c001e6b8:	90                   	nop
c001e6b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e6bd:	83 c4 2c             	add    esp,0x2c
c001e6c0:	c2 04 00             	ret    0x4
c001e6c3:	90                   	nop

c001e6c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e6c4:	83 ec 1c             	sub    esp,0x1c
c001e6c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e6cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e6d8:	88 c8                	mov    al,cl
c001e6da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e6de:	88 d0                	mov    al,dl
c001e6e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e6e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f2:	83 c2 2a             	add    edx,0x2a
c001e6f5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e6f9:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e701:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e70b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e70e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e712:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e71b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e721:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e725:	83 c0 01             	add    eax,0x1
c001e728:	88 c1                	mov    cl,al
c001e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72e:	83 c2 2a             	add    edx,0x2a
c001e731:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e739:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e743:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e746:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e74a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e74e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e752:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e758:	8d 50 01             	lea    edx,[eax+0x1]
c001e75b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e75f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e769:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e76f:	3d 00 02 00 00       	cmp    eax,0x200
c001e774:	75 12                	jne    c001e788 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e776:	83 ec 0c             	sub    esp,0xc
c001e779:	68 e7 24 03 c0       	push   0xc00324e7
c001e77e:	e8 d3 1a 00 00       	call   c0020256 <KePanic(char const*)>
c001e783:	83 c4 10             	add    esp,0x10
c001e786:	66 90                	xchg   ax,ax
c001e788:	90                   	nop
c001e789:	83 c4 1c             	add    esp,0x1c
c001e78c:	c3                   	ret    
c001e78d:	90                   	nop
c001e78e:	66 90                	xchg   ax,ax

c001e790 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e790:	b8 00 00 00 00       	mov    eax,0x0
c001e795:	c3                   	ret    
c001e796:	66 90                	xchg   ax,ax

c001e798 <ACPI::detectPCI()>:
c001e798:	53                   	push   ebx
c001e799:	83 ec 28             	sub    esp,0x28
c001e79c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e7a1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e7a6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e7ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e7b1:	83 e0 04             	and    eax,0x4
c001e7b4:	0f b6 c0             	movzx  eax,al
c001e7b7:	85 c0                	test   eax,eax
c001e7b9:	74 2d                	je     c001e7e8 <ACPI::detectPCI()+0x50>
c001e7bb:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e7c0:	83 ec 08             	sub    esp,0x8
c001e7c3:	68 04 25 03 c0       	push   0xc0032504
c001e7c8:	50                   	push   eax
c001e7c9:	e8 6e f8 ff ff       	call   c001e03c <findDataTable(unsigned char*, char*)>
c001e7ce:	83 c4 10             	add    esp,0x10
c001e7d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e7d5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e7da:	74 0c                	je     c001e7e8 <ACPI::detectPCI()+0x50>
c001e7dc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7e1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e7f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7f4:	8a 00                	mov    al,BYTE PTR [eax]
c001e7f6:	0f b6 c0             	movzx  eax,al
c001e7f9:	83 f8 01             	cmp    eax,0x1
c001e7fc:	75 0e                	jne    c001e80c <ACPI::detectPCI()+0x74>
c001e7fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e803:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e808:	eb 2e                	jmp    c001e838 <ACPI::detectPCI()+0xa0>
c001e80a:	66 90                	xchg   ax,ax
c001e80c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e810:	8a 00                	mov    al,BYTE PTR [eax]
c001e812:	0f b6 c0             	movzx  eax,al
c001e815:	83 f8 02             	cmp    eax,0x2
c001e818:	75 1e                	jne    c001e838 <ACPI::detectPCI()+0xa0>
c001e81a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e81f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e824:	85 c0                	test   eax,eax
c001e826:	74 10                	je     c001e838 <ACPI::detectPCI()+0xa0>
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	68 90 26 03 c0       	push   0xc0032690
c001e830:	e8 21 1a 00 00       	call   c0020256 <KePanic(char const*)>
c001e835:	83 c4 10             	add    esp,0x10
c001e838:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e83c:	83 f0 01             	xor    eax,0x1
c001e83f:	0f b6 c0             	movzx  eax,al
c001e842:	85 c0                	test   eax,eax
c001e844:	74 46                	je     c001e88c <ACPI::detectPCI()+0xf4>
c001e846:	e8 e5 18 fe ff       	call   c0000130 <manualPCIProbe>
c001e84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e84f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e854:	75 0e                	jne    c001e864 <ACPI::detectPCI()+0xcc>
c001e856:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e85b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e860:	eb 2a                	jmp    c001e88c <ACPI::detectPCI()+0xf4>
c001e862:	66 90                	xchg   ax,ax
c001e864:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e869:	75 21                	jne    c001e88c <ACPI::detectPCI()+0xf4>
c001e86b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e870:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e875:	85 c0                	test   eax,eax
c001e877:	74 13                	je     c001e88c <ACPI::detectPCI()+0xf4>
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	68 90 26 03 c0       	push   0xc0032690
c001e881:	e8 d0 19 00 00       	call   c0020256 <KePanic(char const*)>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	8d 76 00             	lea    esi,[esi+0x0]
c001e88c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e891:	85 c0                	test   eax,eax
c001e893:	0f 84 87 00 00 00    	je     c001e920 <ACPI::detectPCI()+0x188>
c001e899:	83 ec 0c             	sub    esp,0xc
c001e89c:	68 09 25 03 c0       	push   0xc0032509
c001e8a1:	e8 4f 12 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001e8a6:	83 c4 10             	add    esp,0x10
c001e8a9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e8b1:	83 ec 0c             	sub    esp,0xc
c001e8b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8b8:	e8 da 7b ff ff       	call   c0016497 <malloc>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	89 c3                	mov    ebx,eax
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	53                   	push   ebx
c001e8c6:	e8 27 b8 00 00       	call   c002a0f2 <PCI::PCI()>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e8d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8d6:	83 ec 08             	sub    esp,0x8
c001e8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8dd:	50                   	push   eax
c001e8de:	e8 81 ca ff ff       	call   c001b364 <Device::addChild(Device*)>
c001e8e3:	83 c4 10             	add    esp,0x10
c001e8e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ec:	83 c0 08             	add    eax,0x8
c001e8ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e8f6:	85 d2                	test   edx,edx
c001e8f8:	74 0a                	je     c001e904 <ACPI::detectPCI()+0x16c>
c001e8fa:	ba 01 00 00 00       	mov    edx,0x1
c001e8ff:	eb 0b                	jmp    c001e90c <ACPI::detectPCI()+0x174>
c001e901:	8d 76 00             	lea    esi,[esi+0x0]
c001e904:	ba 02 00 00 00       	mov    edx,0x2
c001e909:	8d 76 00             	lea    esi,[esi+0x0]
c001e90c:	6a 00                	push   0x0
c001e90e:	6a 00                	push   0x0
c001e910:	52                   	push   edx
c001e911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e915:	ff d0                	call   eax
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	e9 91 00 00 00       	jmp    c001e9b0 <ACPI::detectPCI()+0x218>
c001e91f:	90                   	nop
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	68 21 25 03 c0       	push   0xc0032521
c001e928:	e8 c8 11 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e937:	83 ec 0c             	sub    esp,0xc
c001e93a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e93e:	e8 54 7b ff ff       	call   c0016497 <malloc>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	89 c3                	mov    ebx,eax
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	53                   	push   ebx
c001e94c:	e8 49 c3 00 00       	call   c002ac9a <IDE::IDE()>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e958:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e95c:	83 ec 08             	sub    esp,0x8
c001e95f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e963:	50                   	push   eax
c001e964:	e8 fb c9 ff ff       	call   c001b364 <Device::addChild(Device*)>
c001e969:	83 c4 10             	add    esp,0x10
c001e96c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e970:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e97a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e97e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e987:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e98b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e998:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99a:	83 c0 08             	add    eax,0x8
c001e99d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99f:	6a 00                	push   0x0
c001e9a1:	6a 00                	push   0x0
c001e9a3:	6a 00                	push   0x0
c001e9a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9a9:	ff d0                	call   eax
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	66 90                	xchg   ax,ax
c001e9b0:	90                   	nop
c001e9b1:	83 c4 28             	add    esp,0x28
c001e9b4:	5b                   	pop    ebx
c001e9b5:	c3                   	ret    
c001e9b6:	66 90                	xchg   ax,ax

c001e9b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e9b8:	83 ec 1c             	sub    esp,0x1c
c001e9bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e9bf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e9c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e9c6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e9cb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e9d0:	83 ec 08             	sub    esp,0x8
c001e9d3:	52                   	push   edx
c001e9d4:	50                   	push   eax
c001e9d5:	e8 86 71 ff ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c001e9da:	83 c4 10             	add    esp,0x10
c001e9dd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e9e1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e9e6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e9eb:	83 ec 04             	sub    esp,0x4
c001e9ee:	6a 01                	push   0x1
c001e9f0:	52                   	push   edx
c001e9f1:	50                   	push   eax
c001e9f2:	e8 81 72 ff ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	90                   	nop
c001e9fb:	83 c4 1c             	add    esp,0x1c
c001e9fe:	c3                   	ret    
c001e9ff:	90                   	nop

c001ea00 <ACPI::sleep()>:
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ea08:	85 c0                	test   eax,eax
c001ea0a:	74 08                	je     c001ea14 <ACPI::sleep()+0x14>
c001ea0c:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ea11:	ff d0                	call   eax
c001ea13:	90                   	nop
c001ea14:	90                   	nop
c001ea15:	83 c4 0c             	add    esp,0xc
c001ea18:	c3                   	ret    
c001ea19:	90                   	nop
c001ea1a:	66 90                	xchg   ax,ax

c001ea1c <ACPI::open(int, int, void*)>:
c001ea1c:	55                   	push   ebp
c001ea1d:	89 e5                	mov    ebp,esp
c001ea1f:	53                   	push   ebx
c001ea20:	81 ec 74 01 00 00    	sub    esp,0x174
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea2c:	e8 67 fd ff ff       	call   c001e798 <ACPI::detectPCI()>
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	68 b8 26 03 c0       	push   0xc00326b8
c001ea3c:	e8 b4 10 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001ea41:	83 c4 10             	add    esp,0x10
c001ea44:	b8 4c 05 00 00       	mov    eax,0x54c
c001ea49:	8a 00                	mov    al,BYTE PTR [eax]
c001ea4b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001ea4e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ea52:	83 f8 01             	cmp    eax,0x1
c001ea55:	75 15                	jne    c001ea6c <ACPI::open(int, int, void*)+0x50>
c001ea57:	83 ec 0c             	sub    esp,0xc
c001ea5a:	68 36 25 03 c0       	push   0xc0032536
c001ea5f:	e8 25 53 00 00       	call   c0023d89 <Thr::loadKernelSymbolTable(char const*)>
c001ea64:	83 c4 10             	add    esp,0x10
c001ea67:	eb 33                	jmp    c001ea9c <ACPI::open(int, int, void*)+0x80>
c001ea69:	8d 76 00             	lea    esi,[esi+0x0]
c001ea6c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ea70:	3d bb 00 00 00       	cmp    eax,0xbb
c001ea75:	75 15                	jne    c001ea8c <ACPI::open(int, int, void*)+0x70>
c001ea77:	83 ec 0c             	sub    esp,0xc
c001ea7a:	68 54 25 03 c0       	push   0xc0032554
c001ea7f:	e8 05 53 00 00       	call   c0023d89 <Thr::loadKernelSymbolTable(char const*)>
c001ea84:	83 c4 10             	add    esp,0x10
c001ea87:	eb 13                	jmp    c001ea9c <ACPI::open(int, int, void*)+0x80>
c001ea89:	8d 76 00             	lea    esi,[esi+0x0]
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	68 72 25 03 c0       	push   0xc0032572
c001ea94:	e8 bd 17 00 00       	call   c0020256 <KePanic(char const*)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eaa0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001eaa7:	83 ec 0c             	sub    esp,0xc
c001eaaa:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001eaad:	e8 e5 79 ff ff       	call   c0016497 <malloc>
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	89 c3                	mov    ebx,eax
c001eab7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eabc:	83 ec 04             	sub    esp,0x4
c001eabf:	50                   	push   eax
c001eac0:	68 8c 25 03 c0       	push   0xc003258c
c001eac5:	53                   	push   ebx
c001eac6:	e8 1b ba ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ead1:	83 ec 08             	sub    esp,0x8
c001ead4:	6a 01                	push   0x1
c001ead6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ead9:	e8 26 ba ff ff       	call   c001a504 <File::open(FileOpenMode)>
c001eade:	83 c4 10             	add    esp,0x10
c001eae1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001eae4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001eae8:	75 12                	jne    c001eafc <ACPI::open(int, int, void*)+0xe0>
c001eaea:	83 ec 0c             	sub    esp,0xc
c001eaed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001eaf0:	e8 6d ba ff ff       	call   c001a562 <File::close()>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	eb 06                	jmp    c001eb00 <ACPI::open(int, int, void*)+0xe4>
c001eafa:	66 90                	xchg   ax,ax
c001eafc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001eb00:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001eb04:	74 16                	je     c001eb1c <ACPI::open(int, int, void*)+0x100>
c001eb06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb09:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0b:	83 c0 08             	add    eax,0x8
c001eb0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb10:	83 ec 0c             	sub    esp,0xc
c001eb13:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001eb16:	ff d0                	call   eax
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	90                   	nop
c001eb1c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb1f:	83 f0 01             	xor    eax,0x1
c001eb22:	0f b6 c0             	movzx  eax,al
c001eb25:	85 c0                	test   eax,eax
c001eb27:	74 3b                	je     c001eb64 <ACPI::open(int, int, void*)+0x148>
c001eb29:	83 ec 0c             	sub    esp,0xc
c001eb2c:	68 aa 25 03 c0       	push   0xc00325aa
c001eb31:	e8 bf 0f 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	83 ec 04             	sub    esp,0x4
c001eb3c:	6a 0c                	push   0xc
c001eb3e:	68 c5 25 03 c0       	push   0xc00325c5
c001eb43:	68 d6 25 03 c0       	push   0xc00325d6
c001eb48:	e8 73 44 00 00       	call   c0022fc0 <Reg::readIntWithDefault(char*, char*, int)>
c001eb4d:	83 c4 10             	add    esp,0x10
c001eb50:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb53:	83 ec 0c             	sub    esp,0xc
c001eb56:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001eb59:	e8 80 96 ff ff       	call   c00181de <Virt::setupPageSwapping(int)>
c001eb5e:	83 c4 10             	add    esp,0x10
c001eb61:	8d 76 00             	lea    esi,[esi+0x0]
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	68 04 10 03 c0       	push   0xc0031004
c001eb6c:	e8 84 0f 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb77:	83 ec 08             	sub    esp,0x8
c001eb7a:	6a 13                	push   0x13
c001eb7c:	50                   	push   eax
c001eb7d:	e8 10 cb ff ff       	call   c001b692 <getDevicesOfType(DeviceType)>
c001eb82:	83 c4 0c             	add    esp,0xc
c001eb85:	8d 76 00             	lea    esi,[esi+0x0]
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb8e:	50                   	push   eax
c001eb8f:	e8 4c 03 01 00       	call   c002eee0 <LinkedList<Device>::isEmpty()>
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	83 f0 01             	xor    eax,0x1
c001eb9a:	0f b6 c0             	movzx  eax,al
c001eb9d:	85 c0                	test   eax,eax
c001eb9f:	0f 84 1f 01 00 00    	je     c001ecc4 <ACPI::open(int, int, void*)+0x2a8>
c001eba5:	83 ec 0c             	sub    esp,0xc
c001eba8:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ebab:	50                   	push   eax
c001ebac:	e8 4b 03 01 00       	call   c002eefc <LinkedList<Device>::getFirstElement()>
c001ebb1:	83 c4 10             	add    esp,0x10
c001ebb4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ebb7:	83 ec 0c             	sub    esp,0xc
c001ebba:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ebbd:	50                   	push   eax
c001ebbe:	e8 41 03 01 00       	call   c002ef04 <LinkedList<Device>::removeFirst()>
c001ebc3:	83 c4 10             	add    esp,0x10
c001ebc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ebc9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ebcc:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ebcf:	b8 24 00 00 00       	mov    eax,0x24
c001ebd4:	83 e0 fc             	and    eax,0xfffffffc
c001ebd7:	89 c3                	mov    ebx,eax
c001ebd9:	b8 00 00 00 00       	mov    eax,0x0
c001ebde:	66 90                	xchg   ax,ax
c001ebe0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ebe7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ebee:	83 c0 04             	add    eax,0x4
c001ebf1:	39 d8                	cmp    eax,ebx
c001ebf3:	72 eb                	jb     c001ebe0 <ACPI::open(int, int, void*)+0x1c4>
c001ebf5:	83 ec 08             	sub    esp,0x8
c001ebf8:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001ebfe:	50                   	push   eax
c001ebff:	83 ec 24             	sub    esp,0x24
c001ec02:	89 e1                	mov    ecx,esp
c001ec04:	b8 24 00 00 00       	mov    eax,0x24
c001ec09:	83 e0 fc             	and    eax,0xfffffffc
c001ec0c:	89 c3                	mov    ebx,eax
c001ec0e:	b8 00 00 00 00       	mov    eax,0x0
c001ec13:	90                   	nop
c001ec14:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001ec1b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001ec1e:	83 c0 04             	add    eax,0x4
c001ec21:	39 d8                	cmp    eax,ebx
c001ec23:	72 ef                	jb     c001ec14 <ACPI::open(int, int, void*)+0x1f8>
c001ec25:	e8 b0 b9 00 00       	call   c002a5da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ec2a:	83 c4 30             	add    esp,0x30
c001ec2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec30:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001ec34:	0f 84 4e ff ff ff    	je     c001eb88 <ACPI::open(int, int, void*)+0x16c>
c001ec3a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001ec41:	83 ec 0c             	sub    esp,0xc
c001ec44:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001ec47:	e8 4b 78 ff ff       	call   c0016497 <malloc>
c001ec4c:	83 c4 10             	add    esp,0x10
c001ec4f:	89 c3                	mov    ebx,eax
c001ec51:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec56:	83 ec 04             	sub    esp,0x4
c001ec59:	50                   	push   eax
c001ec5a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ec5d:	53                   	push   ebx
c001ec5e:	e8 83 b8 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001ec63:	83 c4 10             	add    esp,0x10
c001ec66:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ec6f:	e8 54 bb ff ff       	call   c001a7c8 <File::exists()>
c001ec74:	83 c4 10             	add    esp,0x10
c001ec77:	0f b6 c0             	movzx  eax,al
c001ec7a:	85 c0                	test   eax,eax
c001ec7c:	74 22                	je     c001eca0 <ACPI::open(int, int, void*)+0x284>
c001ec7e:	83 ec 08             	sub    esp,0x8
c001ec81:	6a 01                	push   0x1
c001ec83:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ec86:	e8 80 5b 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	83 ec 08             	sub    esp,0x8
c001ec91:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001ec94:	50                   	push   eax
c001ec95:	e8 d2 5d 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eca0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001eca4:	0f 84 de fe ff ff    	je     c001eb88 <ACPI::open(int, int, void*)+0x16c>
c001ecaa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecad:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecaf:	83 c0 08             	add    eax,0x8
c001ecb2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ecba:	ff d0                	call   eax
c001ecbc:	83 c4 10             	add    esp,0x10
c001ecbf:	e9 c4 fe ff ff       	jmp    c001eb88 <ACPI::open(int, int, void*)+0x16c>
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ecca:	50                   	push   eax
c001eccb:	e8 0c 02 01 00       	call   c002eedc <LinkedList<Device>::~LinkedList()>
c001ecd0:	83 c4 10             	add    esp,0x10
c001ecd3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ecd9:	83 ec 08             	sub    esp,0x8
c001ecdc:	6a 01                	push   0x1
c001ecde:	68 dd 25 03 c0       	push   0xc00325dd
c001ece3:	e8 23 5b 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001ece8:	83 c4 10             	add    esp,0x10
c001eceb:	83 ec 08             	sub    esp,0x8
c001ecee:	53                   	push   ebx
c001ecef:	50                   	push   eax
c001ecf0:	e8 77 5d 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001ecf5:	83 c4 10             	add    esp,0x10
c001ecf8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ecfd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ed03:	83 e0 04             	and    eax,0x4
c001ed06:	0f b6 c0             	movzx  eax,al
c001ed09:	85 c0                	test   eax,eax
c001ed0b:	0f 84 e3 00 00 00    	je     c001edf4 <ACPI::open(int, int, void*)+0x3d8>
c001ed11:	83 ec 0c             	sub    esp,0xc
c001ed14:	68 fa 25 03 c0       	push   0xc00325fa
c001ed19:	e8 d7 0d 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001ed1e:	83 c4 10             	add    esp,0x10
c001ed21:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001ed28:	83 ec 0c             	sub    esp,0xc
c001ed2b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001ed2e:	e8 64 77 ff ff       	call   c0016497 <malloc>
c001ed33:	83 c4 10             	add    esp,0x10
c001ed36:	89 c3                	mov    ebx,eax
c001ed38:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed3d:	83 ec 04             	sub    esp,0x4
c001ed40:	50                   	push   eax
c001ed41:	68 17 26 03 c0       	push   0xc0032617
c001ed46:	53                   	push   ebx
c001ed47:	e8 9a b7 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001ed52:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ed56:	74 1c                	je     c001ed74 <ACPI::open(int, int, void*)+0x358>
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ed5e:	e8 65 ba ff ff       	call   c001a7c8 <File::exists()>
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	0f b6 c0             	movzx  eax,al
c001ed69:	85 c0                	test   eax,eax
c001ed6b:	74 07                	je     c001ed74 <ACPI::open(int, int, void*)+0x358>
c001ed6d:	b0 01                	mov    al,0x1
c001ed6f:	eb 07                	jmp    c001ed78 <ACPI::open(int, int, void*)+0x35c>
c001ed71:	8d 76 00             	lea    esi,[esi+0x0]
c001ed74:	b0 00                	mov    al,0x0
c001ed76:	66 90                	xchg   ax,ax
c001ed78:	0f b6 c0             	movzx  eax,al
c001ed7b:	85 c0                	test   eax,eax
c001ed7d:	74 21                	je     c001eda0 <ACPI::open(int, int, void*)+0x384>
c001ed7f:	83 ec 08             	sub    esp,0x8
c001ed82:	6a 01                	push   0x1
c001ed84:	68 17 26 03 c0       	push   0xc0032617
c001ed89:	e8 7d 5a 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	83 ec 08             	sub    esp,0x8
c001ed94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed97:	50                   	push   eax
c001ed98:	e8 cf 5c 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001eda4:	74 1e                	je     c001edc4 <ACPI::open(int, int, void*)+0x3a8>
c001eda6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001edaa:	74 18                	je     c001edc4 <ACPI::open(int, int, void*)+0x3a8>
c001edac:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001edaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb1:	83 c0 08             	add    eax,0x8
c001edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb6:	83 ec 0c             	sub    esp,0xc
c001edb9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001edbc:	ff d0                	call   eax
c001edbe:	83 c4 10             	add    esp,0x10
c001edc1:	8d 76 00             	lea    esi,[esi+0x0]
c001edc4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001edc9:	83 ec 08             	sub    esp,0x8
c001edcc:	68 34 26 03 c0       	push   0xc0032634
c001edd1:	50                   	push   eax
c001edd2:	e8 65 f2 ff ff       	call   c001e03c <findDataTable(unsigned char*, char*)>
c001edd7:	83 c4 10             	add    esp,0x10
c001edda:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001eddd:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001ede1:	74 11                	je     c001edf4 <ACPI::open(int, int, void*)+0x3d8>
c001ede3:	83 ec 08             	sub    esp,0x8
c001ede6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ede9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edec:	e8 c7 fb ff ff       	call   c001e9b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	b8 00 00 00 00       	mov    eax,0x0
c001edf9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001edfc:	c9                   	leave  
c001edfd:	c3                   	ret    

c001edfe <CPU::close(int, int, void*)>:
c001edfe:	31 c0                	xor    eax,eax
c001ee00:	c3                   	ret    
c001ee01:	90                   	nop

c001ee02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ee02:	60                   	pusha  
c001ee03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee0f:	9c                   	pushf  
c001ee10:	fa                   	cli    
c001ee11:	0f 09                	wbinvd 
c001ee13:	0f 30                	wrmsr  
c001ee15:	9d                   	popf   
c001ee16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee1a:	89 02                	mov    DWORD PTR [edx],eax
c001ee1c:	61                   	popa   
c001ee1d:	c3                   	ret    

c001ee1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ee1e:	60                   	pusha  
c001ee1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee23:	9c                   	pushf  
c001ee24:	fa                   	cli    
c001ee25:	0f 09                	wbinvd 
c001ee27:	31 c0                	xor    eax,eax
c001ee29:	31 d2                	xor    edx,edx
c001ee2b:	0f 32                	rdmsr  
c001ee2d:	9d                   	popf   
c001ee2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee32:	89 02                	mov    DWORD PTR [edx],eax
c001ee34:	61                   	popa   
c001ee35:	c3                   	ret    

c001ee36 <CPU::AMD_K6_writeback(int, int, int)>:
c001ee36:	56                   	push   esi
c001ee37:	53                   	push   ebx
c001ee38:	83 ec 10             	sub    esp,0x10
c001ee3b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ee40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee44:	75 5d                	jne    c001eea3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee46:	83 f8 08             	cmp    eax,0x8
c001ee49:	75 09                	jne    c001ee54 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ee4b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ee50:	7e 13                	jle    c001ee65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee52:	eb 30                	jmp    c001ee84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee54:	83 f8 06             	cmp    eax,0x6
c001ee57:	7c 4a                	jl     c001eea3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee59:	83 f8 07             	cmp    eax,0x7
c001ee5c:	7e 07                	jle    c001ee65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee5e:	83 f8 09             	cmp    eax,0x9
c001ee61:	74 21                	je     c001ee84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee63:	eb 3e                	jmp    c001eea3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee65:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ee6b:	89 e6                	mov    esi,esp
c001ee6d:	56                   	push   esi
c001ee6e:	68 82 00 00 c0       	push   0xc0000082
c001ee73:	e8 a6 ff ff ff       	call   c001ee1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee78:	c1 eb 15             	shr    ebx,0x15
c001ee7b:	56                   	push   esi
c001ee7c:	83 e3 7e             	and    ebx,0x7e
c001ee7f:	6a 00                	push   0x0
c001ee81:	53                   	push   ebx
c001ee82:	eb 12                	jmp    c001ee96 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ee84:	89 e3                	mov    ebx,esp
c001ee86:	53                   	push   ebx
c001ee87:	68 82 00 00 c0       	push   0xc0000082
c001ee8c:	e8 8d ff ff ff       	call   c001ee1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee91:	53                   	push   ebx
c001ee92:	6a 00                	push   0x0
c001ee94:	6a 00                	push   0x0
c001ee96:	68 82 00 00 c0       	push   0xc0000082
c001ee9b:	e8 62 ff ff ff       	call   c001ee02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001eea0:	83 c4 18             	add    esp,0x18
c001eea3:	83 c4 10             	add    esp,0x10
c001eea6:	5b                   	pop    ebx
c001eea7:	5e                   	pop    esi
c001eea8:	c3                   	ret    
c001eea9:	90                   	nop

c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001eeaa:	55                   	push   ebp
c001eeab:	57                   	push   edi
c001eeac:	56                   	push   esi
c001eead:	53                   	push   ebx
c001eeae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eeb2:	39 05 f8 3c 03 c0    	cmp    DWORD PTR ds:0xc0033cf8,eax
c001eeb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eebc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eec0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eec4:	75 23                	jne    c001eee9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001eec6:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001eecb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eecf:	89 06                	mov    DWORD PTR [esi],eax
c001eed1:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001eed6:	89 07                	mov    DWORD PTR [edi],eax
c001eed8:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eedd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001eee0:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001eee5:	89 02                	mov    DWORD PTR [edx],eax
c001eee7:	eb 3f                	jmp    c001ef28 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001eee9:	31 c9                	xor    ecx,ecx
c001eeeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eeef:	0f a2                	cpuid  
c001eef1:	89 06                	mov    DWORD PTR [esi],eax
c001eef3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eef7:	89 1f                	mov    DWORD PTR [edi],ebx
c001eef9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001eefc:	89 10                	mov    DWORD PTR [eax],edx
c001eefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef02:	a3 f8 3c 03 c0       	mov    ds:0xc0033cf8,eax
c001ef07:	8b 06                	mov    eax,DWORD PTR [esi]
c001ef09:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ef0e:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef10:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ef15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ef18:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ef1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef21:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef23:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ef28:	5b                   	pop    ebx
c001ef29:	5e                   	pop    esi
c001ef2a:	5f                   	pop    edi
c001ef2b:	5d                   	pop    ebp
c001ef2c:	c3                   	ret    
c001ef2d:	90                   	nop

c001ef2e <CPU::cpuidCheckEDX(unsigned int)>:
c001ef2e:	83 ec 10             	sub    esp,0x10
c001ef31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef35:	50                   	push   eax
c001ef36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef3a:	50                   	push   eax
c001ef3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef3f:	50                   	push   eax
c001ef40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef44:	50                   	push   eax
c001ef45:	6a 01                	push   0x1
c001ef47:	e8 5e ff ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef50:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ef54:	0f 95 c0             	setne  al
c001ef57:	83 c4 24             	add    esp,0x24
c001ef5a:	c3                   	ret    
c001ef5b:	90                   	nop

c001ef5c <CPU::cpuidCheckECX(unsigned int)>:
c001ef5c:	83 ec 10             	sub    esp,0x10
c001ef5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef63:	50                   	push   eax
c001ef64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef68:	50                   	push   eax
c001ef69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef6d:	50                   	push   eax
c001ef6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef72:	50                   	push   eax
c001ef73:	6a 01                	push   0x1
c001ef75:	e8 30 ff ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef7e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef82:	0f 95 c0             	setne  al
c001ef85:	83 c4 24             	add    esp,0x24
c001ef88:	c3                   	ret    
c001ef89:	90                   	nop

c001ef8a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001ef8a:	83 ec 10             	sub    esp,0x10
c001ef8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef91:	50                   	push   eax
c001ef92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef96:	50                   	push   eax
c001ef97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef9b:	50                   	push   eax
c001ef9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa0:	50                   	push   eax
c001efa1:	6a 07                	push   0x7
c001efa3:	e8 02 ff ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efac:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001efb0:	0f 95 c0             	setne  al
c001efb3:	83 c4 24             	add    esp,0x24
c001efb6:	c3                   	ret    
c001efb7:	90                   	nop

c001efb8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001efb8:	83 ec 10             	sub    esp,0x10
c001efbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efbf:	50                   	push   eax
c001efc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efc4:	50                   	push   eax
c001efc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efc9:	50                   	push   eax
c001efca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efce:	50                   	push   eax
c001efcf:	6a 07                	push   0x7
c001efd1:	e8 d4 fe ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efda:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001efde:	0f 95 c0             	setne  al
c001efe1:	83 c4 24             	add    esp,0x24
c001efe4:	c3                   	ret    
c001efe5:	90                   	nop

c001efe6 <CPU::CPU()>:
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efed:	83 ec 08             	sub    esp,0x8
c001eff0:	68 f5 27 03 c0       	push   0xc00327f5
c001eff5:	50                   	push   eax
c001eff6:	e8 cb c4 ff ff       	call   c001b4c6 <Device::Device(char const*)>
c001effb:	83 c4 10             	add    esp,0x10
c001effe:	ba 88 28 03 c0       	mov    edx,0xc0032888
c001f003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f007:	89 10                	mov    DWORD PTR [eax],edx
c001f009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01b:	05 78 01 00 00       	add    eax,0x178
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	50                   	push   eax
c001f024:	e8 19 6d ff ff       	call   c0015d42 <GDT::GDT()>
c001f029:	83 c4 10             	add    esp,0x10
c001f02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f030:	05 7c 09 00 00       	add    eax,0x97c
c001f035:	83 ec 0c             	sub    esp,0xc
c001f038:	50                   	push   eax
c001f039:	e8 52 6f ff ff       	call   c0015f90 <IDT::IDT()>
c001f03e:	83 c4 10             	add    esp,0x10
c001f041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f045:	05 7c 11 00 00       	add    eax,0x117c
c001f04a:	83 ec 0c             	sub    esp,0xc
c001f04d:	50                   	push   eax
c001f04e:	e8 9d 88 ff ff       	call   c00178f0 <TSS::TSS()>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f065:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f06f:	90                   	nop
c001f070:	83 c4 0c             	add    esp,0xc
c001f073:	c3                   	ret    

c001f074 <CPU::displayFeatures()>:
c001f074:	c3                   	ret    
c001f075:	90                   	nop

c001f076 <CPU::detectFeatures()>:
c001f076:	55                   	push   ebp
c001f077:	57                   	push   edi
c001f078:	56                   	push   esi
c001f079:	53                   	push   ebx
c001f07a:	83 ec 30             	sub    esp,0x30
c001f07d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f081:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f08b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f091:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f098:	6a 0d                	push   0xd
c001f09a:	6a 00                	push   0x0
c001f09c:	55                   	push   ebp
c001f09d:	e8 4e 14 fe ff       	call   c00004f0 <memset>
c001f0a2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f0b1:	0f 84 db 05 00 00    	je     c001f692 <CPU::detectFeatures()+0x61c>
c001f0b7:	83 ec 0c             	sub    esp,0xc
c001f0ba:	89 ef                	mov    edi,ebp
c001f0bc:	6a 10                	push   0x10
c001f0be:	e8 6b fe ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f0c3:	83 e0 01             	and    eax,0x1
c001f0c6:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0c9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0cf:	83 e0 fd             	and    eax,0xfffffffd
c001f0d2:	09 d0                	or     eax,edx
c001f0d4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0da:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f0e1:	e8 48 fe ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f0e6:	83 e0 01             	and    eax,0x1
c001f0e9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f0f0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0f6:	83 e0 fb             	and    eax,0xfffffffb
c001f0f9:	09 d0                	or     eax,edx
c001f0fb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f101:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f108:	e8 21 fe ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f10d:	83 e0 01             	and    eax,0x1
c001f110:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f117:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f11d:	83 e0 f7             	and    eax,0xfffffff7
c001f120:	09 d0                	or     eax,edx
c001f122:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f128:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f12f:	e8 fa fd ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f134:	83 e0 01             	and    eax,0x1
c001f137:	c1 e0 04             	shl    eax,0x4
c001f13a:	89 c2                	mov    edx,eax
c001f13c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f142:	83 e0 ef             	and    eax,0xffffffef
c001f145:	09 d0                	or     eax,edx
c001f147:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f14d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f154:	e8 d5 fd ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f159:	83 e0 01             	and    eax,0x1
c001f15c:	c1 e0 05             	shl    eax,0x5
c001f15f:	89 c2                	mov    edx,eax
c001f161:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f167:	83 e0 df             	and    eax,0xffffffdf
c001f16a:	09 d0                	or     eax,edx
c001f16c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f172:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f179:	e8 b0 fd ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f17e:	83 e0 01             	and    eax,0x1
c001f181:	8d 14 00             	lea    edx,[eax+eax*1]
c001f184:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f18a:	83 e0 fd             	and    eax,0xfffffffd
c001f18d:	09 d0                	or     eax,edx
c001f18f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f195:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f19c:	e8 8d fd ff ff       	call   c001ef2e <CPU::cpuidCheckEDX(unsigned int)>
c001f1a1:	83 e0 01             	and    eax,0x1
c001f1a4:	c1 e0 06             	shl    eax,0x6
c001f1a7:	89 c2                	mov    edx,eax
c001f1a9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f1af:	83 e0 bf             	and    eax,0xffffffbf
c001f1b2:	09 d0                	or     eax,edx
c001f1b4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f1ba:	58                   	pop    eax
c001f1bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1bf:	50                   	push   eax
c001f1c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1c4:	50                   	push   eax
c001f1c5:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f1c9:	56                   	push   esi
c001f1ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1ce:	50                   	push   eax
c001f1cf:	6a 00                	push   0x0
c001f1d1:	e8 d4 fc ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1d6:	b8 04 00 00 00       	mov    eax,0x4
c001f1db:	89 c1                	mov    ecx,eax
c001f1dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1df:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f1e5:	89 c1                	mov    ecx,eax
c001f1e7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f1eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1ed:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f1f3:	89 c1                	mov    ecx,eax
c001f1f5:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f1f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1fb:	83 c4 18             	add    esp,0x18
c001f1fe:	68 04 27 03 c0       	push   0xc0032704
c001f203:	55                   	push   ebp
c001f204:	e8 77 15 fe ff       	call   c0000780 <strcmp>
c001f209:	83 c4 10             	add    esp,0x10
c001f20c:	85 c0                	test   eax,eax
c001f20e:	75 0f                	jne    c001f21f <CPU::detectFeatures()+0x1a9>
c001f210:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f21a:	e9 22 02 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f21f:	50                   	push   eax
c001f220:	50                   	push   eax
c001f221:	68 11 27 03 c0       	push   0xc0032711
c001f226:	55                   	push   ebp
c001f227:	e8 54 15 fe ff       	call   c0000780 <strcmp>
c001f22c:	83 c4 10             	add    esp,0x10
c001f22f:	85 c0                	test   eax,eax
c001f231:	74 dd                	je     c001f210 <CPU::detectFeatures()+0x19a>
c001f233:	50                   	push   eax
c001f234:	50                   	push   eax
c001f235:	68 1e 27 03 c0       	push   0xc003271e
c001f23a:	55                   	push   ebp
c001f23b:	e8 40 15 fe ff       	call   c0000780 <strcmp>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	85 c0                	test   eax,eax
c001f245:	74 2a                	je     c001f271 <CPU::detectFeatures()+0x1fb>
c001f247:	50                   	push   eax
c001f248:	50                   	push   eax
c001f249:	68 2b 27 03 c0       	push   0xc003272b
c001f24e:	55                   	push   ebp
c001f24f:	e8 2c 15 fe ff       	call   c0000780 <strcmp>
c001f254:	83 c4 10             	add    esp,0x10
c001f257:	85 c0                	test   eax,eax
c001f259:	74 16                	je     c001f271 <CPU::detectFeatures()+0x1fb>
c001f25b:	50                   	push   eax
c001f25c:	50                   	push   eax
c001f25d:	68 38 27 03 c0       	push   0xc0032738
c001f262:	55                   	push   ebp
c001f263:	e8 18 15 fe ff       	call   c0000780 <strcmp>
c001f268:	83 c4 10             	add    esp,0x10
c001f26b:	85 c0                	test   eax,eax
c001f26d:	74 48                	je     c001f2b7 <CPU::detectFeatures()+0x241>
c001f26f:	eb 0f                	jmp    c001f280 <CPU::detectFeatures()+0x20a>
c001f271:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f27b:	e9 c1 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f280:	50                   	push   eax
c001f281:	50                   	push   eax
c001f282:	68 45 27 03 c0       	push   0xc0032745
c001f287:	55                   	push   ebp
c001f288:	e8 f3 14 fe ff       	call   c0000780 <strcmp>
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	85 c0                	test   eax,eax
c001f292:	74 23                	je     c001f2b7 <CPU::detectFeatures()+0x241>
c001f294:	57                   	push   edi
c001f295:	57                   	push   edi
c001f296:	68 52 27 03 c0       	push   0xc0032752
c001f29b:	55                   	push   ebp
c001f29c:	e8 df 14 fe ff       	call   c0000780 <strcmp>
c001f2a1:	83 c4 10             	add    esp,0x10
c001f2a4:	85 c0                	test   eax,eax
c001f2a6:	75 1e                	jne    c001f2c6 <CPU::detectFeatures()+0x250>
c001f2a8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f2b2:	e9 8a 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f2b7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f2c1:	e9 7b 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f2c6:	56                   	push   esi
c001f2c7:	56                   	push   esi
c001f2c8:	68 5f 27 03 c0       	push   0xc003275f
c001f2cd:	55                   	push   ebp
c001f2ce:	e8 ad 14 fe ff       	call   c0000780 <strcmp>
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	85 c0                	test   eax,eax
c001f2d8:	75 0f                	jne    c001f2e9 <CPU::detectFeatures()+0x273>
c001f2da:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f2e4:	e9 58 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f2e9:	51                   	push   ecx
c001f2ea:	51                   	push   ecx
c001f2eb:	68 1e 27 03 c0       	push   0xc003271e
c001f2f0:	55                   	push   ebp
c001f2f1:	e8 8a 14 fe ff       	call   c0000780 <strcmp>
c001f2f6:	83 c4 10             	add    esp,0x10
c001f2f9:	85 c0                	test   eax,eax
c001f2fb:	75 0f                	jne    c001f30c <CPU::detectFeatures()+0x296>
c001f2fd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f307:	e9 35 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f30c:	52                   	push   edx
c001f30d:	52                   	push   edx
c001f30e:	68 6c 27 03 c0       	push   0xc003276c
c001f313:	55                   	push   ebp
c001f314:	e8 67 14 fe ff       	call   c0000780 <strcmp>
c001f319:	83 c4 10             	add    esp,0x10
c001f31c:	85 c0                	test   eax,eax
c001f31e:	75 0f                	jne    c001f32f <CPU::detectFeatures()+0x2b9>
c001f320:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f32a:	e9 12 01 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f32f:	50                   	push   eax
c001f330:	50                   	push   eax
c001f331:	68 79 27 03 c0       	push   0xc0032779
c001f336:	55                   	push   ebp
c001f337:	e8 44 14 fe ff       	call   c0000780 <strcmp>
c001f33c:	83 c4 10             	add    esp,0x10
c001f33f:	85 c0                	test   eax,eax
c001f341:	75 0f                	jne    c001f352 <CPU::detectFeatures()+0x2dc>
c001f343:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f34d:	e9 ef 00 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f352:	50                   	push   eax
c001f353:	50                   	push   eax
c001f354:	68 86 27 03 c0       	push   0xc0032786
c001f359:	55                   	push   ebp
c001f35a:	e8 21 14 fe ff       	call   c0000780 <strcmp>
c001f35f:	83 c4 10             	add    esp,0x10
c001f362:	85 c0                	test   eax,eax
c001f364:	75 0f                	jne    c001f375 <CPU::detectFeatures()+0x2ff>
c001f366:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f370:	e9 cc 00 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f375:	50                   	push   eax
c001f376:	50                   	push   eax
c001f377:	68 93 27 03 c0       	push   0xc0032793
c001f37c:	55                   	push   ebp
c001f37d:	e8 fe 13 fe ff       	call   c0000780 <strcmp>
c001f382:	83 c4 10             	add    esp,0x10
c001f385:	85 c0                	test   eax,eax
c001f387:	75 0f                	jne    c001f398 <CPU::detectFeatures()+0x322>
c001f389:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f393:	e9 a9 00 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f398:	50                   	push   eax
c001f399:	50                   	push   eax
c001f39a:	68 a0 27 03 c0       	push   0xc00327a0
c001f39f:	55                   	push   ebp
c001f3a0:	e8 db 13 fe ff       	call   c0000780 <strcmp>
c001f3a5:	83 c4 10             	add    esp,0x10
c001f3a8:	85 c0                	test   eax,eax
c001f3aa:	75 0f                	jne    c001f3bb <CPU::detectFeatures()+0x345>
c001f3ac:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f3b6:	e9 86 00 00 00       	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f3bb:	50                   	push   eax
c001f3bc:	50                   	push   eax
c001f3bd:	68 ad 27 03 c0       	push   0xc00327ad
c001f3c2:	55                   	push   ebp
c001f3c3:	e8 b8 13 fe ff       	call   c0000780 <strcmp>
c001f3c8:	83 c4 10             	add    esp,0x10
c001f3cb:	85 c0                	test   eax,eax
c001f3cd:	75 0c                	jne    c001f3db <CPU::detectFeatures()+0x365>
c001f3cf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f3d9:	eb 66                	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f3db:	50                   	push   eax
c001f3dc:	50                   	push   eax
c001f3dd:	68 ba 27 03 c0       	push   0xc00327ba
c001f3e2:	55                   	push   ebp
c001f3e3:	e8 98 13 fe ff       	call   c0000780 <strcmp>
c001f3e8:	83 c4 10             	add    esp,0x10
c001f3eb:	85 c0                	test   eax,eax
c001f3ed:	75 0c                	jne    c001f3fb <CPU::detectFeatures()+0x385>
c001f3ef:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f3f9:	eb 46                	jmp    c001f441 <CPU::detectFeatures()+0x3cb>
c001f3fb:	57                   	push   edi
c001f3fc:	57                   	push   edi
c001f3fd:	68 c7 27 03 c0       	push   0xc00327c7
c001f402:	55                   	push   ebp
c001f403:	e8 78 13 fe ff       	call   c0000780 <strcmp>
c001f408:	83 c4 10             	add    esp,0x10
c001f40b:	85 c0                	test   eax,eax
c001f40d:	74 e0                	je     c001f3ef <CPU::detectFeatures()+0x379>
c001f40f:	56                   	push   esi
c001f410:	56                   	push   esi
c001f411:	68 d4 27 03 c0       	push   0xc00327d4
c001f416:	55                   	push   ebp
c001f417:	e8 64 13 fe ff       	call   c0000780 <strcmp>
c001f41c:	83 c4 10             	add    esp,0x10
c001f41f:	85 c0                	test   eax,eax
c001f421:	74 cc                	je     c001f3ef <CPU::detectFeatures()+0x379>
c001f423:	51                   	push   ecx
c001f424:	51                   	push   ecx
c001f425:	68 e1 27 03 c0       	push   0xc00327e1
c001f42a:	55                   	push   ebp
c001f42b:	e8 50 13 fe ff       	call   c0000780 <strcmp>
c001f430:	83 c4 10             	add    esp,0x10
c001f433:	85 c0                	test   eax,eax
c001f435:	74 b8                	je     c001f3ef <CPU::detectFeatures()+0x379>
c001f437:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f441:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f446:	0f 86 be 00 00 00    	jbe    c001f50a <CPU::detectFeatures()+0x494>
c001f44c:	83 ec 0c             	sub    esp,0xc
c001f44f:	68 80 00 00 00       	push   0x80
c001f454:	e8 31 fb ff ff       	call   c001ef8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f459:	83 e0 01             	and    eax,0x1
c001f45c:	c1 e0 06             	shl    eax,0x6
c001f45f:	89 c2                	mov    edx,eax
c001f461:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f467:	83 e0 bf             	and    eax,0xffffffbf
c001f46a:	09 d0                	or     eax,edx
c001f46c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f472:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f479:	e8 0c fb ff ff       	call   c001ef8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f47e:	83 e0 01             	and    eax,0x1
c001f481:	c1 e0 04             	shl    eax,0x4
c001f484:	89 c2                	mov    edx,eax
c001f486:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f48c:	83 e0 ef             	and    eax,0xffffffef
c001f48f:	09 d0                	or     eax,edx
c001f491:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f497:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f49e:	e8 e7 fa ff ff       	call   c001ef8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f4a3:	89 c2                	mov    edx,eax
c001f4a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4ab:	c1 e2 07             	shl    edx,0x7
c001f4ae:	83 e0 7f             	and    eax,0x7f
c001f4b1:	09 d0                	or     eax,edx
c001f4b3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4b9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f4c0:	e8 f3 fa ff ff       	call   c001efb8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4c5:	83 e0 01             	and    eax,0x1
c001f4c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f4cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4d5:	83 e0 f7             	and    eax,0xfffffff7
c001f4d8:	09 d0                	or     eax,edx
c001f4da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4e0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f4e7:	e8 cc fa ff ff       	call   c001efb8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4ec:	83 c4 10             	add    esp,0x10
c001f4ef:	83 e0 01             	and    eax,0x1
c001f4f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f4f9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4ff:	83 e0 fb             	and    eax,0xfffffffb
c001f502:	09 d0                	or     eax,edx
c001f504:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f50a:	83 ec 0c             	sub    esp,0xc
c001f50d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f511:	50                   	push   eax
c001f512:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f516:	50                   	push   eax
c001f517:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f51b:	57                   	push   edi
c001f51c:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f520:	56                   	push   esi
c001f521:	6a 01                	push   0x1
c001f523:	e8 82 f9 ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f52c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f532:	89 c1                	mov    ecx,eax
c001f534:	83 e1 0f             	and    ecx,0xf
c001f537:	83 e2 f0             	and    edx,0xfffffff0
c001f53a:	09 ca                	or     edx,ecx
c001f53c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f542:	89 c2                	mov    edx,eax
c001f544:	c1 ea 04             	shr    edx,0x4
c001f547:	83 e2 0f             	and    edx,0xf
c001f54a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f54e:	89 d1                	mov    ecx,edx
c001f550:	83 c4 20             	add    esp,0x20
c001f553:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f559:	c1 e1 06             	shl    ecx,0x6
c001f55c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f562:	09 ca                	or     edx,ecx
c001f564:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f56b:	89 c2                	mov    edx,eax
c001f56d:	c1 ea 08             	shr    edx,0x8
c001f570:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f576:	83 e2 0f             	and    edx,0xf
c001f579:	89 d5                	mov    ebp,edx
c001f57b:	83 e5 03             	and    ebp,0x3
c001f57e:	c1 e5 06             	shl    ebp,0x6
c001f581:	83 e1 3f             	and    ecx,0x3f
c001f584:	09 e9                	or     ecx,ebp
c001f586:	89 d5                	mov    ebp,edx
c001f588:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f58e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f594:	c1 ed 02             	shr    ebp,0x2
c001f597:	83 e1 c0             	and    ecx,0xffffffc0
c001f59a:	09 e9                	or     ecx,ebp
c001f59c:	89 c5                	mov    ebp,eax
c001f59e:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f5a4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f5aa:	c1 ed 08             	shr    ebp,0x8
c001f5ad:	83 e5 30             	and    ebp,0x30
c001f5b0:	83 e1 cf             	and    ecx,0xffffffcf
c001f5b3:	09 e9                	or     ecx,ebp
c001f5b5:	83 fa 06             	cmp    edx,0x6
c001f5b8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f5be:	74 05                	je     c001f5c5 <CPU::detectFeatures()+0x54f>
c001f5c0:	83 fa 0f             	cmp    edx,0xf
c001f5c3:	75 64                	jne    c001f629 <CPU::detectFeatures()+0x5b3>
c001f5c5:	89 c1                	mov    ecx,eax
c001f5c7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f5cd:	c1 e9 10             	shr    ecx,0x10
c001f5d0:	c1 e1 04             	shl    ecx,0x4
c001f5d3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f5d7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f5dd:	0f b6 c9             	movzx  ecx,cl
c001f5e0:	c1 e1 06             	shl    ecx,0x6
c001f5e3:	09 e9                	or     ecx,ebp
c001f5e5:	83 fa 0f             	cmp    edx,0xf
c001f5e8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f5ef:	75 38                	jne    c001f629 <CPU::detectFeatures()+0x5b3>
c001f5f1:	c1 e8 14             	shr    eax,0x14
c001f5f4:	83 c0 0f             	add    eax,0xf
c001f5f7:	0f b6 c0             	movzx  eax,al
c001f5fa:	89 c2                	mov    edx,eax
c001f5fc:	c1 e8 02             	shr    eax,0x2
c001f5ff:	83 e2 03             	and    edx,0x3
c001f602:	89 d1                	mov    ecx,edx
c001f604:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f60a:	c1 e1 06             	shl    ecx,0x6
c001f60d:	83 e2 3f             	and    edx,0x3f
c001f610:	09 ca                	or     edx,ecx
c001f612:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f618:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f61e:	83 e2 c0             	and    edx,0xffffffc0
c001f621:	09 d0                	or     eax,edx
c001f623:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f629:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f62f:	83 ec 0c             	sub    esp,0xc
c001f632:	83 c8 07             	or     eax,0x7
c001f635:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f63b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f63f:	50                   	push   eax
c001f640:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f644:	55                   	push   ebp
c001f645:	57                   	push   edi
c001f646:	56                   	push   esi
c001f647:	68 00 00 00 80       	push   0x80000000
c001f64c:	e8 59 f8 ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f651:	83 c4 20             	add    esp,0x20
c001f654:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f65c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f660:	76 1e                	jbe    c001f680 <CPU::detectFeatures()+0x60a>
c001f662:	83 ec 0c             	sub    esp,0xc
c001f665:	50                   	push   eax
c001f666:	55                   	push   ebp
c001f667:	57                   	push   edi
c001f668:	56                   	push   esi
c001f669:	68 01 00 00 80       	push   0x80000001
c001f66e:	e8 37 f8 ff ff       	call   c001eeaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f673:	83 c4 20             	add    esp,0x20
c001f676:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f680:	52                   	push   edx
c001f681:	52                   	push   edx
c001f682:	68 ed 27 03 c0       	push   0xc00327ed
c001f687:	53                   	push   ebx
c001f688:	e8 2b be ff ff       	call   c001b4b8 <Device::setName(char const*)>
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	eb 69                	jmp    c001f6fb <CPU::detectFeatures()+0x685>
c001f692:	50                   	push   eax
c001f693:	50                   	push   eax
c001f694:	68 52 27 03 c0       	push   0xc0032752
c001f699:	55                   	push   ebp
c001f69a:	e8 b1 0f fe ff       	call   c0000650 <strcpy>
c001f69f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f6a9:	e8 15 0b fe ff       	call   c00001c3 <is486>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	85 c0                	test   eax,eax
c001f6b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6b9:	74 1f                	je     c001f6da <CPU::detectFeatures()+0x664>
c001f6bb:	83 c8 07             	or     eax,0x7
c001f6be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6c4:	0f 20 c0             	mov    eax,cr0
c001f6c7:	83 e0 14             	and    eax,0x14
c001f6ca:	83 f8 04             	cmp    eax,0x4
c001f6cd:	75 10                	jne    c001f6df <CPU::detectFeatures()+0x669>
c001f6cf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6d5:	83 e0 fd             	and    eax,0xfffffffd
c001f6d8:	eb 1b                	jmp    c001f6f5 <CPU::detectFeatures()+0x67f>
c001f6da:	83 e0 f8             	and    eax,0xfffffff8
c001f6dd:	eb df                	jmp    c001f6be <CPU::detectFeatures()+0x648>
c001f6df:	e8 ba 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f6e4:	83 e0 01             	and    eax,0x1
c001f6e7:	8d 14 00             	lea    edx,[eax+eax*1]
c001f6ea:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6f0:	83 e0 fd             	and    eax,0xfffffffd
c001f6f3:	09 d0                	or     eax,edx
c001f6f5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f6fb:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f702:	74 17                	je     c001f71b <CPU::detectFeatures()+0x6a5>
c001f704:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f70a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f710:	83 c8 10             	or     eax,0x10
c001f713:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f719:	eb 20                	jmp    c001f73b <CPU::detectFeatures()+0x6c5>
c001f71b:	e8 7e 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f720:	83 e0 01             	and    eax,0x1
c001f723:	8d 14 00             	lea    edx,[eax+eax*1]
c001f726:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f72c:	83 e0 fd             	and    eax,0xfffffffd
c001f72f:	09 d0                	or     eax,edx
c001f731:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f737:	a8 02                	test   al,0x2
c001f739:	75 c9                	jne    c001f704 <CPU::detectFeatures()+0x68e>
c001f73b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f742:	83 c4 2c             	add    esp,0x2c
c001f745:	5b                   	pop    ebx
c001f746:	5e                   	pop    esi
c001f747:	5f                   	pop    edi
c001f748:	5d                   	pop    ebp
c001f749:	c3                   	ret    

c001f74a <CPU::setupSMEP()>:
c001f74a:	0f 20 e0             	mov    eax,cr4
c001f74d:	0d 00 00 10 00       	or     eax,0x100000
c001f752:	0f 22 e0             	mov    cr4,eax
c001f755:	c3                   	ret    

c001f756 <CPU::setupUMIP()>:
c001f756:	0f 20 e0             	mov    eax,cr4
c001f759:	80 cc 08             	or     ah,0x8
c001f75c:	0f 22 e0             	mov    cr4,eax
c001f75f:	c3                   	ret    

c001f760 <CPU::setupTSC()>:
c001f760:	0f 20 e0             	mov    eax,cr4
c001f763:	83 c8 04             	or     eax,0x4
c001f766:	0f 22 e0             	mov    cr4,eax
c001f769:	c3                   	ret    

c001f76a <CPU::setupLargePages()>:
c001f76a:	0f 20 e0             	mov    eax,cr4
c001f76d:	83 c8 10             	or     eax,0x10
c001f770:	0f 22 e0             	mov    cr4,eax
c001f773:	c3                   	ret    

c001f774 <CPU::setupPAT()>:
c001f774:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f779:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f780:	74 2c                	je     c001f7ae <CPU::setupPAT()+0x3a>
c001f782:	53                   	push   ebx
c001f783:	83 ec 10             	sub    esp,0x10
c001f786:	68 77 02 00 00       	push   0x277
c001f78b:	50                   	push   eax
c001f78c:	e8 17 63 ff ff       	call   c0015aa8 <Computer::rdmsr(unsigned int)>
c001f791:	83 e2 f8             	and    edx,0xfffffff8
c001f794:	83 ca 01             	or     edx,0x1
c001f797:	52                   	push   edx
c001f798:	50                   	push   eax
c001f799:	68 77 02 00 00       	push   0x277
c001f79e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f7a4:	e8 2b 63 ff ff       	call   c0015ad4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f7a9:	83 c4 28             	add    esp,0x28
c001f7ac:	5b                   	pop    ebx
c001f7ad:	c3                   	ret    
c001f7ae:	c3                   	ret    
c001f7af:	90                   	nop

c001f7b0 <CPU::setupMTRR()>:
c001f7b0:	c3                   	ret    
c001f7b1:	90                   	nop

c001f7b2 <CPU::setupGlobalPages()>:
c001f7b2:	0f 20 e0             	mov    eax,cr4
c001f7b5:	0c 80                	or     al,0x80
c001f7b7:	0f 22 e0             	mov    cr4,eax
c001f7ba:	c3                   	ret    
c001f7bb:	90                   	nop

c001f7bc <CPU::allowUsermodeDataAccess()>:
c001f7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7c7:	74 03                	je     c001f7cc <CPU::allowUsermodeDataAccess()+0x10>
c001f7c9:	0f 01 cb             	stac   
c001f7cc:	c3                   	ret    
c001f7cd:	90                   	nop

c001f7ce <CPU::prohibitUsermodeDataAccess()>:
c001f7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7d9:	74 03                	je     c001f7de <CPU::prohibitUsermodeDataAccess()+0x10>
c001f7db:	0f 01 ca             	clac   
c001f7de:	c3                   	ret    
c001f7df:	90                   	nop

c001f7e0 <CPU::setupSMAP()>:
c001f7e0:	0f 20 e0             	mov    eax,cr4
c001f7e3:	0d 00 00 20 00       	or     eax,0x200000
c001f7e8:	0f 22 e0             	mov    cr4,eax
c001f7eb:	eb e1                	jmp    c001f7ce <CPU::prohibitUsermodeDataAccess()>
c001f7ed:	90                   	nop

c001f7ee <CPU::setupFeatures()>:
c001f7ee:	53                   	push   ebx
c001f7ef:	83 ec 08             	sub    esp,0x8
c001f7f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7f6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f7fd:	74 18                	je     c001f817 <CPU::setupFeatures()+0x29>
c001f7ff:	83 ec 0c             	sub    esp,0xc
c001f802:	68 f9 27 03 c0       	push   0xc00327f9
c001f807:	e8 c2 9a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001f80c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f80f:	e8 42 ff ff ff       	call   c001f756 <CPU::setupUMIP()>
c001f814:	83 c4 10             	add    esp,0x10
c001f817:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f81e:	74 18                	je     c001f838 <CPU::setupFeatures()+0x4a>
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	68 03 28 03 c0       	push   0xc0032803
c001f828:	e8 a1 9a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001f82d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f830:	e8 2b ff ff ff       	call   c001f760 <CPU::setupTSC()>
c001f835:	83 c4 10             	add    esp,0x10
c001f838:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f83f:	74 18                	je     c001f859 <CPU::setupFeatures()+0x6b>
c001f841:	83 ec 0c             	sub    esp,0xc
c001f844:	68 0c 28 03 c0       	push   0xc003280c
c001f849:	e8 80 9a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001f84e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f851:	e8 14 ff ff ff       	call   c001f76a <CPU::setupLargePages()>
c001f856:	83 c4 10             	add    esp,0x10
c001f859:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f860:	74 18                	je     c001f87a <CPU::setupFeatures()+0x8c>
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	68 15 28 03 c0       	push   0xc0032815
c001f86a:	e8 5f 9a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001f86f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f872:	e8 3b ff ff ff       	call   c001f7b2 <CPU::setupGlobalPages()>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f881:	74 18                	je     c001f89b <CPU::setupFeatures()+0xad>
c001f883:	83 ec 0c             	sub    esp,0xc
c001f886:	68 27 28 03 c0       	push   0xc0032827
c001f88b:	e8 3e 9a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001f890:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f893:	e8 dc fe ff ff       	call   c001f774 <CPU::setupPAT()>
c001f898:	83 c4 10             	add    esp,0x10
c001f89b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f8a2:	74 11                	je     c001f8b5 <CPU::setupFeatures()+0xc7>
c001f8a4:	c7 44 24 10 30 28 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032830
c001f8ac:	83 c4 08             	add    esp,0x8
c001f8af:	5b                   	pop    ebx
c001f8b0:	e9 19 9a ff ff       	jmp    c00192ce <Dbg::kprintf(char const*, ...)>
c001f8b5:	83 c4 08             	add    esp,0x8
c001f8b8:	5b                   	pop    ebx
c001f8b9:	c3                   	ret    

c001f8ba <CPU::open(int, int, void*)>:
c001f8ba:	55                   	push   ebp
c001f8bb:	57                   	push   edi
c001f8bc:	56                   	push   esi
c001f8bd:	53                   	push   ebx
c001f8be:	83 ec 18             	sub    esp,0x18
c001f8c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f8c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8cd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f8d3:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f8d9:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f8df:	50                   	push   eax
c001f8e0:	e8 bf 64 ff ff       	call   c0015da4 <GDT::setup()>
c001f8e5:	83 c4 0c             	add    esp,0xc
c001f8e8:	6a 00                	push   0x0
c001f8ea:	68 ef be ad de       	push   0xdeadbeef
c001f8ef:	55                   	push   ebp
c001f8f0:	e8 3f 80 ff ff       	call   c0017934 <TSS::setup(unsigned long, unsigned long)>
c001f8f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f8f8:	e8 17 80 ff ff       	call   c0017914 <TSS::flush()>
c001f8fd:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f903:	89 04 24             	mov    DWORD PTR [esp],eax
c001f906:	e8 fb 66 ff ff       	call   c0016006 <IDT::setup()>
c001f90b:	b8 00 04 00 00       	mov    eax,0x400
c001f910:	0f 23 f8             	mov    db7,eax
c001f913:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f91d:	e8 84 6e ff ff       	call   c00167a6 <Phys::allocatePage()>
c001f922:	83 c4 10             	add    esp,0x10
c001f925:	85 f6                	test   esi,esi
c001f927:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f92d:	89 38                	mov    DWORD PTR [eax],edi
c001f92f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f935:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f938:	74 10                	je     c001f94a <CPU::open(int, int, void*)+0x90>
c001f93a:	50                   	push   eax
c001f93b:	50                   	push   eax
c001f93c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f942:	56                   	push   esi
c001f943:	e8 08 89 ff ff       	call   c0018250 <VAS::setCPUSpecific(unsigned long)>
c001f948:	eb 0d                	jmp    c001f957 <CPU::open(int, int, void*)+0x9d>
c001f94a:	83 ec 0c             	sub    esp,0xc
c001f94d:	68 3a 28 03 c0       	push   0xc003283a
c001f952:	e8 ff 08 00 00       	call   c0020256 <KePanic(char const*)>
c001f957:	83 c4 10             	add    esp,0x10
c001f95a:	83 ec 0c             	sub    esp,0xc
c001f95d:	68 48 28 03 c0       	push   0xc0032848
c001f962:	e8 8e 01 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001f967:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f96a:	e8 07 f7 ff ff       	call   c001f076 <CPU::detectFeatures()>
c001f96f:	c7 04 24 6b 28 03 c0 	mov    DWORD PTR [esp],0xc003286b
c001f976:	e8 7a 01 00 00       	call   c001faf5 <KeSetBootMessage(char const*)>
c001f97b:	e8 43 77 00 00       	call   c00270c3 <HalInitialise()>
c001f980:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f985:	83 e0 10             	and    eax,0x10
c001f988:	83 f8 01             	cmp    eax,0x1
c001f98b:	19 c0                	sbb    eax,eax
c001f98d:	83 e0 46             	and    eax,0x46
c001f990:	83 c0 1e             	add    eax,0x1e
c001f993:	89 04 24             	mov    DWORD PTR [esp],eax
c001f996:	e8 06 d4 ff ff       	call   c001cda1 <setupTimer(int)>
c001f99b:	83 c4 10             	add    esp,0x10
c001f99e:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f9a5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f9ab:	74 0c                	je     c001f9b9 <CPU::open(int, int, void*)+0xff>
c001f9ad:	83 ec 0c             	sub    esp,0xc
c001f9b0:	53                   	push   ebx
c001f9b1:	e8 38 fe ff ff       	call   c001f7ee <CPU::setupFeatures()>
c001f9b6:	83 c4 10             	add    esp,0x10
c001f9b9:	83 c4 0c             	add    esp,0xc
c001f9bc:	31 c0                	xor    eax,eax
c001f9be:	5b                   	pop    ebx
c001f9bf:	5e                   	pop    esi
c001f9c0:	5f                   	pop    edi
c001f9c1:	5d                   	pop    ebp
c001f9c2:	c3                   	ret    

c001f9c3 <KeInitialiseAtexit()>:
c001f9c3:	83 ec 10             	sub    esp,0x10
c001f9c6:	6a 60                	push   0x60
c001f9c8:	6a 00                	push   0x0
c001f9ca:	68 20 f9 03 c0       	push   0xc003f920
c001f9cf:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f9d9:	e8 12 0b fe ff       	call   c00004f0 <memset>
c001f9de:	83 c4 1c             	add    esp,0x1c
c001f9e1:	c3                   	ret    

c001f9e2 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f9e2:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f9e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9eb:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f9f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9f6:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f9fd:	40                   	inc    eax
c001f9fe:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fa03:	83 f8 17             	cmp    eax,0x17
c001fa06:	7e 0d                	jle    c001fa15 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fa08:	c7 44 24 04 ac 28 03 c0 	mov    DWORD PTR [esp+0x4],0xc00328ac
c001fa10:	e9 41 08 00 00       	jmp    c0020256 <KePanic(char const*)>
c001fa15:	c3                   	ret    

c001fa16 <KeExecuteAtexit()>:
c001fa16:	53                   	push   ebx
c001fa17:	31 db                	xor    ebx,ebx
c001fa19:	83 ec 08             	sub    esp,0x8
c001fa1c:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fa22:	7e 50                	jle    c001fa74 <KeExecuteAtexit()+0x5e>
c001fa24:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fa2b:	85 c0                	test   eax,eax
c001fa2d:	74 42                	je     c001fa71 <KeExecuteAtexit()+0x5b>
c001fa2f:	51                   	push   ecx
c001fa30:	50                   	push   eax
c001fa31:	53                   	push   ebx
c001fa32:	68 c5 28 03 c0       	push   0xc00328c5
c001fa37:	e8 92 98 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001fa3c:	58                   	pop    eax
c001fa3d:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fa44:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fa4b:	c7 04 24 e7 28 03 c0 	mov    DWORD PTR [esp],0xc00328e7
c001fa52:	e8 77 98 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001fa57:	c7 04 24 93 3a 03 c0 	mov    DWORD PTR [esp],0xc0033a93
c001fa5e:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fa69:	e8 60 98 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	43                   	inc    ebx
c001fa72:	eb a8                	jmp    c001fa1c <KeExecuteAtexit()+0x6>
c001fa74:	83 c4 08             	add    esp,0x8
c001fa77:	5b                   	pop    ebx
c001fa78:	c3                   	ret    

c001fa79 <KeDisplaySplashScreen()>:
c001fa79:	55                   	push   ebp
c001fa7a:	bd 05 00 00 00       	mov    ebp,0x5
c001fa7f:	57                   	push   edi
c001fa80:	bf 0a 00 00 00       	mov    edi,0xa
c001fa85:	56                   	push   esi
c001fa86:	31 f6                	xor    esi,esi
c001fa88:	53                   	push   ebx
c001fa89:	31 db                	xor    ebx,ebx
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	0f b6 96 00 3d 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc300]
c001fa95:	85 d2                	test   edx,edx
c001fa97:	89 d0                	mov    eax,edx
c001fa99:	74 52                	je     c001faed <KeDisplaySplashScreen()+0x74>
c001fa9b:	80 bb 36 3d 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc2ca],0xdb
c001faa2:	75 13                	jne    c001fab7 <KeDisplaySplashScreen()+0x3e>
c001faa4:	0f b6 8b 35 3d 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc2cb]
c001faab:	83 e1 fe             	and    ecx,0xfffffffe
c001faae:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fab4:	75 01                	jne    c001fab7 <KeDisplaySplashScreen()+0x3e>
c001fab6:	47                   	inc    edi
c001fab7:	83 fa 0d             	cmp    edx,0xd
c001faba:	74 28                	je     c001fae4 <KeDisplaySplashScreen()+0x6b>
c001fabc:	83 fa 0a             	cmp    edx,0xa
c001fabf:	75 0a                	jne    c001facb <KeDisplaySplashScreen()+0x52>
c001fac1:	45                   	inc    ebp
c001fac2:	bf 0a 00 00 00       	mov    edi,0xa
c001fac7:	31 db                	xor    ebx,ebx
c001fac9:	eb 19                	jmp    c001fae4 <KeDisplaySplashScreen()+0x6b>
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	0f be c0             	movsx  eax,al
c001fad1:	55                   	push   ebp
c001fad2:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fad5:	43                   	inc    ebx
c001fad6:	52                   	push   edx
c001fad7:	6a 00                	push   0x0
c001fad9:	6a 0e                	push   0xe
c001fadb:	50                   	push   eax
c001fadc:	e8 5f 82 00 00       	call   c0027d40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fae1:	83 c4 20             	add    esp,0x20
c001fae4:	46                   	inc    esi
c001fae5:	81 fe 42 01 00 00    	cmp    esi,0x142
c001faeb:	75 a1                	jne    c001fa8e <KeDisplaySplashScreen()+0x15>
c001faed:	83 c4 0c             	add    esp,0xc
c001faf0:	5b                   	pop    ebx
c001faf1:	5e                   	pop    esi
c001faf2:	5f                   	pop    edi
c001faf3:	5d                   	pop    ebp
c001faf4:	c3                   	ret    

c001faf5 <KeSetBootMessage(char const*)>:
c001faf5:	57                   	push   edi
c001faf6:	56                   	push   esi
c001faf7:	53                   	push   ebx
c001faf8:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fafe:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fb05:	68 9e 00 00 00       	push   0x9e
c001fb0a:	6a 00                	push   0x0
c001fb0c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fb10:	56                   	push   esi
c001fb11:	e8 da 09 fe ff       	call   c00004f0 <memset>
c001fb16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb19:	e8 62 0a fe ff       	call   c0000580 <strlen>
c001fb1e:	ba 50 00 00 00       	mov    edx,0x50
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	31 c9                	xor    ecx,ecx
c001fb28:	29 c2                	sub    edx,eax
c001fb2a:	83 e2 fe             	and    edx,0xfffffffe
c001fb2d:	01 f2                	add    edx,esi
c001fb2f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fb34:	84 c0                	test   al,al
c001fb36:	74 0a                	je     c001fb42 <KeSetBootMessage(char const*)+0x4d>
c001fb38:	80 cc 0f             	or     ah,0xf
c001fb3b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fb3f:	41                   	inc    ecx
c001fb40:	eb ed                	jmp    c001fb2f <KeSetBootMessage(char const*)+0x3a>
c001fb42:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fb47:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fb4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb4e:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fb54:	5b                   	pop    ebx
c001fb55:	5e                   	pop    esi
c001fb56:	5f                   	pop    edi
c001fb57:	c3                   	ret    

c001fb58 <CUnlockScheduler>:
c001fb58:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb5d:	83 e8 01             	sub    eax,0x1
c001fb60:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb65:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb6a:	85 c0                	test   eax,eax
c001fb6c:	75 02                	jne    c001fb70 <CUnlockScheduler+0x18>
c001fb6e:	fb                   	sti    
c001fb6f:	90                   	nop
c001fb70:	90                   	nop
c001fb71:	c3                   	ret    
c001fb72:	66 90                	xchg   ax,ax

c001fb74 <CLockScheduler>:
c001fb74:	fa                   	cli    
c001fb75:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb7a:	83 c0 01             	add    eax,0x1
c001fb7d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb82:	90                   	nop
c001fb83:	c3                   	ret    

c001fb84 <CPrintf>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	83 ec 08             	sub    esp,0x8
c001fb8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb8e:	68 70 fb 02 c0       	push   0xc002fb70
c001fb93:	e8 36 97 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	90                   	nop
c001fb9c:	83 c4 0c             	add    esp,0xc
c001fb9f:	c3                   	ret    

c001fba0 <Krnl::handlePowerButton()>:
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	e8 09 07 00 00       	call   c00202b1 <KeHandlePowerButton()>
c001fba8:	90                   	nop
c001fba9:	83 c4 0c             	add    esp,0xc
c001fbac:	c3                   	ret    
c001fbad:	8d 76 00             	lea    esi,[esi+0x0]

c001fbb0 <Krnl::handleSleepButton()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	e8 2e 07 00 00       	call   c00202e6 <KeHandleSleepButton()>
c001fbb8:	90                   	nop
c001fbb9:	83 c4 0c             	add    esp,0xc
c001fbbc:	c3                   	ret    

c001fbbd <KeCalculateCRC32(unsigned char*, int)>:
c001fbbd:	53                   	push   ebx
c001fbbe:	83 c8 ff             	or     eax,0xffffffff
c001fbc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbc5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbc9:	01 cb                	add    ebx,ecx
c001fbcb:	39 d9                	cmp    ecx,ebx
c001fbcd:	74 15                	je     c001fbe4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fbcf:	41                   	inc    ecx
c001fbd0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fbd3:	31 c2                	xor    edx,eax
c001fbd5:	c1 e8 08             	shr    eax,0x8
c001fbd8:	0f b6 d2             	movzx  edx,dl
c001fbdb:	33 04 95 60 3e 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc1a0]
c001fbe2:	eb e7                	jmp    c001fbcb <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fbe4:	5b                   	pop    ebx
c001fbe5:	f7 d0                	not    eax
c001fbe7:	c3                   	ret    

c001fbe8 <EnvVarContainer::getEnv(char const*)>:
c001fbe8:	57                   	push   edi
c001fbe9:	56                   	push   esi
c001fbea:	53                   	push   ebx
c001fbeb:	31 db                	xor    ebx,ebx
c001fbed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbf1:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fbf3:	7e 2b                	jle    c001fc20 <EnvVarContainer::getEnv(char const*)+0x38>
c001fbf5:	50                   	push   eax
c001fbf6:	50                   	push   eax
c001fbf7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fbfa:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fc01:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fc04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc08:	e8 73 0b fe ff       	call   c0000780 <strcmp>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	85 c0                	test   eax,eax
c001fc12:	75 09                	jne    c001fc1d <EnvVarContainer::getEnv(char const*)+0x35>
c001fc14:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc17:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fc1b:	eb 05                	jmp    c001fc22 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fc1d:	43                   	inc    ebx
c001fc1e:	eb d1                	jmp    c001fbf1 <EnvVarContainer::getEnv(char const*)+0x9>
c001fc20:	31 c0                	xor    eax,eax
c001fc22:	5b                   	pop    ebx
c001fc23:	5e                   	pop    esi
c001fc24:	5f                   	pop    edi
c001fc25:	c3                   	ret    

c001fc26 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fc26:	55                   	push   ebp
c001fc27:	57                   	push   edi
c001fc28:	56                   	push   esi
c001fc29:	53                   	push   ebx
c001fc2a:	83 ec 28             	sub    esp,0x28
c001fc2d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fc31:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fc35:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc39:	56                   	push   esi
c001fc3a:	e8 41 09 fe ff       	call   c0000580 <strlen>
c001fc3f:	40                   	inc    eax
c001fc40:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc43:	e8 4f 68 ff ff       	call   c0016497 <malloc>
c001fc48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc4f:	e8 2c 09 fe ff       	call   c0000580 <strlen>
c001fc54:	40                   	inc    eax
c001fc55:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc58:	e8 3a 68 ff ff       	call   c0016497 <malloc>
c001fc5d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc64:	e8 17 09 fe ff       	call   c0000580 <strlen>
c001fc69:	83 c4 0c             	add    esp,0xc
c001fc6c:	40                   	inc    eax
c001fc6d:	50                   	push   eax
c001fc6e:	6a 00                	push   0x0
c001fc70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc74:	e8 77 08 fe ff       	call   c00004f0 <memset>
c001fc79:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc7c:	e8 ff 08 fe ff       	call   c0000580 <strlen>
c001fc81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fc85:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc8d:	89 de                	mov    esi,ebx
c001fc8f:	e8 ec 08 fe ff       	call   c0000580 <strlen>
c001fc94:	83 c4 0c             	add    esp,0xc
c001fc97:	40                   	inc    eax
c001fc98:	50                   	push   eax
c001fc99:	6a 00                	push   0x0
c001fc9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc9f:	e8 4c 08 fe ff       	call   c00004f0 <memset>
c001fca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fca7:	e8 d4 08 fe ff       	call   c0000580 <strlen>
c001fcac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fcb0:	8d 48 01             	lea    ecx,[eax+0x1]
c001fcb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fcb8:	40                   	inc    eax
c001fcb9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fcbc:	c1 e0 03             	shl    eax,0x3
c001fcbf:	5a                   	pop    edx
c001fcc0:	59                   	pop    ecx
c001fcc1:	50                   	push   eax
c001fcc2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fcc5:	e8 b9 67 ff ff       	call   c0016483 <realloc>
c001fcca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fccd:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fcd1:	b9 08 00 00 00       	mov    ecx,0x8
c001fcd6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fcd9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fcdd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcdf:	83 c4 2c             	add    esp,0x2c
c001fce2:	5b                   	pop    ebx
c001fce3:	5e                   	pop    esi
c001fce4:	5f                   	pop    edi
c001fce5:	5d                   	pop    ebp
c001fce6:	c3                   	ret    
c001fce7:	90                   	nop

c001fce8 <EnvVarContainer::deleteEnv(char const*)>:
c001fce8:	c3                   	ret    
c001fce9:	90                   	nop

c001fcea <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fcea:	55                   	push   ebp
c001fceb:	57                   	push   edi
c001fcec:	56                   	push   esi
c001fced:	53                   	push   ebx
c001fcee:	81 ec 38 01 00 00    	sub    esp,0x138
c001fcf4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fcfb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fd02:	68 14 01 00 00       	push   0x114
c001fd07:	e8 8b 67 ff ff       	call   c0016497 <malloc>
c001fd0c:	83 c4 0c             	add    esp,0xc
c001fd0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd12:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fd19:	89 c3                	mov    ebx,eax
c001fd1b:	50                   	push   eax
c001fd1c:	e8 c5 a7 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c001fd21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd24:	e8 9f aa ff ff       	call   c001a7c8 <File::exists()>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	84 c0                	test   al,al
c001fd2e:	75 31                	jne    c001fd61 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fd30:	50                   	push   eax
c001fd31:	50                   	push   eax
c001fd32:	6a 12                	push   0x12
c001fd34:	53                   	push   ebx
c001fd35:	e8 ca a7 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c001fd3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd3c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fd3f:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd42:	e8 39 08 fe ff       	call   c0000580 <strlen>
c001fd47:	5a                   	pop    edx
c001fd48:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fd4c:	52                   	push   edx
c001fd4d:	31 d2                	xor    edx,edx
c001fd4f:	56                   	push   esi
c001fd50:	52                   	push   edx
c001fd51:	50                   	push   eax
c001fd52:	53                   	push   ebx
c001fd53:	ff d7                	call   edi
c001fd55:	83 c4 14             	add    esp,0x14
c001fd58:	53                   	push   ebx
c001fd59:	e8 04 a8 ff ff       	call   c001a562 <File::close()>
c001fd5e:	83 c4 10             	add    esp,0x10
c001fd61:	56                   	push   esi
c001fd62:	31 f6                	xor    esi,esi
c001fd64:	68 00 01 00 00       	push   0x100
c001fd69:	6a 00                	push   0x0
c001fd6b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fd6f:	50                   	push   eax
c001fd70:	e8 7b 07 fe ff       	call   c00004f0 <memset>
c001fd75:	5f                   	pop    edi
c001fd76:	58                   	pop    eax
c001fd77:	6a 01                	push   0x1
c001fd79:	53                   	push   ebx
c001fd7a:	e8 85 a7 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fd99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd9b:	52                   	push   edx
c001fd9c:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001fda0:	51                   	push   ecx
c001fda1:	6a 00                	push   0x0
c001fda3:	6a 01                	push   0x1
c001fda5:	53                   	push   ebx
c001fda6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fda9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fdae:	83 c4 20             	add    esp,0x20
c001fdb1:	85 c0                	test   eax,eax
c001fdb3:	89 c1                	mov    ecx,eax
c001fdb5:	0f 84 36 01 00 00    	je     c001fef1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fdbb:	83 f8 0d             	cmp    eax,0xd
c001fdbe:	0f 84 22 01 00 00    	je     c001fee6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fdc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fdc9:	0f 84 f0 00 00 00    	je     c001febf <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fdcf:	83 f8 0a             	cmp    eax,0xa
c001fdd2:	74 13                	je     c001fde7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fdd4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdd9:	74 0c                	je     c001fde7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fddb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fde1:	0f 8e f6 00 00 00    	jle    c001fedd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fde7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdeb:	83 ec 0c             	sub    esp,0xc
c001fdee:	8d 78 01             	lea    edi,[eax+0x1]
c001fdf1:	57                   	push   edi
c001fdf2:	e8 a0 66 ff ff       	call   c0016497 <malloc>
c001fdf7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fdfb:	8d 56 04             	lea    edx,[esi+0x4]
c001fdfe:	89 14 24             	mov    DWORD PTR [esp],edx
c001fe01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fe09:	e8 89 66 ff ff       	call   c0016497 <malloc>
c001fe0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fe12:	83 c4 0c             	add    esp,0xc
c001fe15:	57                   	push   edi
c001fe16:	6a 00                	push   0x0
c001fe18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fe1c:	e8 cf 06 fe ff       	call   c00004f0 <memset>
c001fe21:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe25:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fe29:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe36:	52                   	push   edx
c001fe37:	6a 00                	push   0x0
c001fe39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe3d:	e8 ae 06 fe ff       	call   c00004f0 <memset>
c001fe42:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe46:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fe4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe4d:	e8 2e 07 fe ff       	call   c0000580 <strlen>
c001fe52:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fe56:	89 c1                	mov    ecx,eax
c001fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe5a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fe5d:	83 c4 10             	add    esp,0x10
c001fe60:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fe63:	40                   	inc    eax
c001fe64:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fe67:	85 d2                	test   edx,edx
c001fe69:	75 0c                	jne    c001fe77 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	6a 08                	push   0x8
c001fe70:	e8 22 66 ff ff       	call   c0016497 <malloc>
c001fe75:	eb 0c                	jmp    c001fe83 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fe77:	51                   	push   ecx
c001fe78:	51                   	push   ecx
c001fe79:	c1 e0 03             	shl    eax,0x3
c001fe7c:	50                   	push   eax
c001fe7d:	52                   	push   edx
c001fe7e:	e8 00 66 ff ff       	call   c0016483 <realloc>
c001fe83:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fe86:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fe89:	83 c4 10             	add    esp,0x10
c001fe8c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fe8f:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fe93:	b9 08 00 00 00       	mov    ecx,0x8
c001fe98:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fe9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe9e:	50                   	push   eax
c001fe9f:	31 f6                	xor    esi,esi
c001fea1:	68 00 01 00 00       	push   0x100
c001fea6:	6a 00                	push   0x0
c001fea8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001feac:	50                   	push   eax
c001fead:	e8 3e 06 fe ff       	call   c00004f0 <memset>
c001feb2:	83 c4 10             	add    esp,0x10
c001feb5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001febd:	eb 27                	jmp    c001fee6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001febf:	83 f8 3d             	cmp    eax,0x3d
c001fec2:	74 1e                	je     c001fee2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fec4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001feca:	7f 07                	jg     c001fed3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fecc:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001fed0:	46                   	inc    esi
c001fed1:	eb 13                	jmp    c001fee6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fed3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fedb:	eb 09                	jmp    c001fee6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fedd:	83 f8 3d             	cmp    eax,0x3d
c001fee0:	75 ea                	jne    c001fecc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fee2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fee6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001feeb:	0f 85 99 fe ff ff    	jne    c001fd8a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	53                   	push   ebx
c001fef5:	e8 68 a6 ff ff       	call   c001a562 <File::close()>
c001fefa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fefc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001feff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ff02:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ff08:	5b                   	pop    ebx
c001ff09:	5e                   	pop    esi
c001ff0a:	5f                   	pop    edi
c001ff0b:	5d                   	pop    ebp
c001ff0c:	c3                   	ret    
c001ff0d:	90                   	nop

c001ff0e <EnvVarContainer::__loadSystem()>:
c001ff0e:	83 ec 10             	sub    esp,0x10
c001ff11:	68 60 42 03 c0       	push   0xc0034260
c001ff16:	68 ec 28 03 c0       	push   0xc00328ec
c001ff1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1f:	e8 c6 fd ff ff       	call   c001fcea <EnvVarContainer::loadFrom(char const*, char const*)>
c001ff24:	83 c4 1c             	add    esp,0x1c
c001ff27:	c3                   	ret    

c001ff28 <EnvVarContainer::__loadUser()>:
c001ff28:	c3                   	ret    
c001ff29:	90                   	nop

c001ff2a <EnvVarContainer::EnvVarContainer(Process*)>:
c001ff2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff3c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff4a:	90                   	nop
c001ff4b:	c3                   	ret    

c001ff4c <EnvVarContainer::~EnvVarContainer()>:
c001ff4c:	83 ec 0c             	sub    esp,0xc
c001ff4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff56:	85 c0                	test   eax,eax
c001ff58:	74 1d                	je     c001ff77 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff60:	85 c0                	test   eax,eax
c001ff62:	74 13                	je     c001ff77 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	50                   	push   eax
c001ff6f:	e8 33 65 ff ff       	call   c00164a7 <free>
c001ff74:	83 c4 10             	add    esp,0x10
c001ff77:	90                   	nop
c001ff78:	83 c4 0c             	add    esp,0xc
c001ff7b:	c3                   	ret    

c001ff7c <KeGetEnv(Process*, char const*)>:
c001ff7c:	53                   	push   ebx
c001ff7d:	83 ec 08             	sub    esp,0x8
c001ff80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff84:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001ff8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff8e:	74 04                	je     c001ff94 <KeGetEnv(Process*, char const*)+0x18>
c001ff90:	85 c0                	test   eax,eax
c001ff92:	75 0b                	jne    c001ff9f <KeGetEnv(Process*, char const*)+0x23>
c001ff94:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ff99:	85 c0                	test   eax,eax
c001ff9b:	75 19                	jne    c001ffb6 <KeGetEnv(Process*, char const*)+0x3a>
c001ff9d:	eb 27                	jmp    c001ffc6 <KeGetEnv(Process*, char const*)+0x4a>
c001ff9f:	52                   	push   edx
c001ffa0:	52                   	push   edx
c001ffa1:	53                   	push   ebx
c001ffa2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ffa8:	e8 3b fc ff ff       	call   c001fbe8 <EnvVarContainer::getEnv(char const*)>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	85 c0                	test   eax,eax
c001ffb2:	75 28                	jne    c001ffdc <KeGetEnv(Process*, char const*)+0x60>
c001ffb4:	eb de                	jmp    c001ff94 <KeGetEnv(Process*, char const*)+0x18>
c001ffb6:	52                   	push   edx
c001ffb7:	52                   	push   edx
c001ffb8:	53                   	push   ebx
c001ffb9:	50                   	push   eax
c001ffba:	e8 29 fc ff ff       	call   c001fbe8 <EnvVarContainer::getEnv(char const*)>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	85 c0                	test   eax,eax
c001ffc4:	75 16                	jne    c001ffdc <KeGetEnv(Process*, char const*)+0x60>
c001ffc6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ffca:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ffcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ffd3:	83 c4 08             	add    esp,0x8
c001ffd6:	5b                   	pop    ebx
c001ffd7:	e9 0c fc ff ff       	jmp    c001fbe8 <EnvVarContainer::getEnv(char const*)>
c001ffdc:	83 c4 08             	add    esp,0x8
c001ffdf:	5b                   	pop    ebx
c001ffe0:	c3                   	ret    

c001ffe1 <KeSetEnvSystem(char const*, char const*)>:
c001ffe1:	83 ec 10             	sub    esp,0x10
c001ffe4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffe8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffec:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001fff2:	e8 2f fc ff ff       	call   c001fc26 <EnvVarContainer::setEnv(char const*, char const*)>
c001fff7:	83 c4 1c             	add    esp,0x1c
c001fffa:	c3                   	ret    

c001fffb <KeSetEnvUser(char const*, char const*)>:
c001fffb:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020000:	85 c0                	test   eax,eax
c0020002:	74 15                	je     c0020019 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020004:	83 ec 10             	sub    esp,0x10
c0020007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002000b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002000f:	50                   	push   eax
c0020010:	e8 11 fc ff ff       	call   c001fc26 <EnvVarContainer::setEnv(char const*, char const*)>
c0020015:	83 c4 1c             	add    esp,0x1c
c0020018:	c3                   	ret    
c0020019:	c3                   	ret    

c002001a <KeSetEnvProcess(Process*, char const*, char const*)>:
c002001a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020024:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020028:	e9 f9 fb ff ff       	jmp    c001fc26 <EnvVarContainer::setEnv(char const*, char const*)>

c002002d <KeDeleteEnvSystem(char const*)>:
c002002d:	c3                   	ret    

c002002e <KeDeleteEnvUser(char const*)>:
c002002e:	c3                   	ret    

c002002f <KeDeleteEnvProcess(Process*, char const*)>:
c002002f:	c3                   	ret    

c0020030 <KeNewProcessEnv(Process*)>:
c0020030:	83 ec 28             	sub    esp,0x28
c0020033:	6a 0c                	push   0xc
c0020035:	e8 5d 64 ff ff       	call   c0016497 <malloc>
c002003a:	5a                   	pop    edx
c002003b:	59                   	pop    ecx
c002003c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020040:	50                   	push   eax
c0020041:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020045:	e8 e0 fe ff ff       	call   c001ff2a <EnvVarContainer::EnvVarContainer(Process*)>
c002004a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002004e:	83 c4 2c             	add    esp,0x2c
c0020051:	c3                   	ret    

c0020052 <KeCopyProcessEnv(Process*, Process*)>:
c0020052:	57                   	push   edi
c0020053:	56                   	push   esi
c0020054:	53                   	push   ebx
c0020055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0020062:	6a 0c                	push   0xc
c0020064:	e8 2e 64 ff ff       	call   c0016497 <malloc>
c0020069:	89 c3                	mov    ebx,eax
c002006b:	58                   	pop    eax
c002006c:	5a                   	pop    edx
c002006d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020071:	53                   	push   ebx
c0020072:	e8 b3 fe ff ff       	call   c001ff2a <EnvVarContainer::EnvVarContainer(Process*)>
c0020077:	8b 07                	mov    eax,DWORD PTR [edi]
c0020079:	89 03                	mov    DWORD PTR [ebx],eax
c002007b:	c1 e0 03             	shl    eax,0x3
c002007e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020081:	e8 11 64 ff ff       	call   c0016497 <malloc>
c0020086:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0020089:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002008b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c002008e:	89 c7                	mov    edi,eax
c0020090:	c1 e1 03             	shl    ecx,0x3
c0020093:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020095:	83 c4 10             	add    esp,0x10
c0020098:	89 d8                	mov    eax,ebx
c002009a:	5b                   	pop    ebx
c002009b:	5e                   	pop    esi
c002009c:	5f                   	pop    edi
c002009d:	c3                   	ret    

c002009e <KeLoadSystemEnv()>:
c002009e:	53                   	push   ebx
c002009f:	83 ec 14             	sub    esp,0x14
c00200a2:	6a 0c                	push   0xc
c00200a4:	e8 ee 63 ff ff       	call   c0016497 <malloc>
c00200a9:	89 c3                	mov    ebx,eax
c00200ab:	58                   	pop    eax
c00200ac:	5a                   	pop    edx
c00200ad:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200b3:	53                   	push   ebx
c00200b4:	e8 71 fe ff ff       	call   c001ff2a <EnvVarContainer::EnvVarContainer(Process*)>
c00200b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200bc:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00200c2:	e8 47 fe ff ff       	call   c001ff0e <EnvVarContainer::__loadSystem()>
c00200c7:	83 c4 18             	add    esp,0x18
c00200ca:	5b                   	pop    ebx
c00200cb:	c3                   	ret    

c00200cc <KeLoadUserEnv()>:
c00200cc:	53                   	push   ebx
c00200cd:	83 ec 14             	sub    esp,0x14
c00200d0:	6a 0c                	push   0xc
c00200d2:	e8 c0 63 ff ff       	call   c0016497 <malloc>
c00200d7:	89 c3                	mov    ebx,eax
c00200d9:	58                   	pop    eax
c00200da:	5a                   	pop    edx
c00200db:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200e1:	53                   	push   ebx
c00200e2:	e8 43 fe ff ff       	call   c001ff2a <EnvVarContainer::EnvVarContainer(Process*)>
c00200e7:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c00200ed:	83 c4 18             	add    esp,0x18
c00200f0:	5b                   	pop    ebx
c00200f1:	c3                   	ret    

c00200f2 <KeFlushEnv()>:
c00200f2:	c3                   	ret    

c00200f3 <KeGetProcessTotalEnvCount(Process*)>:
c00200f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f7:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c00200fd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020103:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020108:	8b 00                	mov    eax,DWORD PTR [eax]
c002010a:	03 01                	add    eax,DWORD PTR [ecx]
c002010c:	85 d2                	test   edx,edx
c002010e:	74 02                	je     c0020112 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020110:	03 02                	add    eax,DWORD PTR [edx]
c0020112:	c3                   	ret    

c0020113 <KeGetProcessEnvPair(Process*, int)>:
c0020113:	57                   	push   edi
c0020114:	56                   	push   esi
c0020115:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002011b:	53                   	push   ebx
c002011c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020120:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020124:	85 f6                	test   esi,esi
c0020126:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002012a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020130:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020132:	75 16                	jne    c002014a <KeGetProcessEnvPair(Process*, int)+0x37>
c0020134:	39 c2                	cmp    edx,eax
c0020136:	7c 16                	jl     c002014e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020138:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002013e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020140:	01 c6                	add    esi,eax
c0020142:	39 d6                	cmp    esi,edx
c0020144:	7e 3c                	jle    c0020182 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020146:	29 c2                	sub    edx,eax
c0020148:	eb 04                	jmp    c002014e <KeGetProcessEnvPair(Process*, int)+0x3b>
c002014a:	39 c2                	cmp    edx,eax
c002014c:	7d 05                	jge    c0020153 <KeGetProcessEnvPair(Process*, int)+0x40>
c002014e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020151:	eb 20                	jmp    c0020173 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020153:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020155:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020158:	39 d1                	cmp    ecx,edx
c002015a:	7e 04                	jle    c0020160 <KeGetProcessEnvPair(Process*, int)+0x4d>
c002015c:	29 c2                	sub    edx,eax
c002015e:	eb 10                	jmp    c0020170 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020160:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c0020166:	03 0e                	add    ecx,DWORD PTR [esi]
c0020168:	39 d1                	cmp    ecx,edx
c002016a:	7e 16                	jle    c0020182 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002016c:	29 c2                	sub    edx,eax
c002016e:	29 fa                	sub    edx,edi
c0020170:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020173:	8d 14 d0             	lea    edx,[eax+edx*8]
c0020176:	8b 02                	mov    eax,DWORD PTR [edx]
c0020178:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002017b:	89 03                	mov    DWORD PTR [ebx],eax
c002017d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020180:	eb 1d                	jmp    c002019f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0020182:	83 ec 0c             	sub    esp,0xc
c0020185:	68 0e 29 03 c0       	push   0xc003290e
c002018a:	e8 c7 00 00 00       	call   c0020256 <KePanic(char const*)>
c002018f:	83 c4 10             	add    esp,0x10
c0020192:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020198:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002019f:	89 d8                	mov    eax,ebx
c00201a1:	5b                   	pop    ebx
c00201a2:	5e                   	pop    esi
c00201a3:	5f                   	pop    edi
c00201a4:	c2 04 00             	ret    0x4

c00201a7 <CPU::current()>:
c00201a7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00201ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201b2:	c3                   	ret    

c00201b3 <operator new(unsigned long)>:
c00201b3:	e9 df 62 ff ff       	jmp    c0016497 <malloc>

c00201b8 <operator delete(void*)>:
c00201b8:	e9 fa 62 ff ff       	jmp    c00164b7 <rfree>

c00201bd <disableIRQs()>:
c00201bd:	fa                   	cli    
c00201be:	c3                   	ret    

c00201bf <enableIRQs()>:
c00201bf:	fb                   	sti    
c00201c0:	c3                   	ret    

c00201c1 <lockScheduler()>:
c00201c1:	fa                   	cli    
c00201c2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201c8:	c3                   	ret    

c00201c9 <unlockScheduler()>:
c00201c9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201ce:	48                   	dec    eax
c00201cf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201d4:	75 01                	jne    c00201d7 <unlockScheduler()+0xe>
c00201d6:	fb                   	sti    
c00201d7:	c3                   	ret    

c00201d8 <lockStuff()>:
c00201d8:	fa                   	cli    
c00201d9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201df:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c00201e5:	c3                   	ret    

c00201e6 <unlockStuff()>:
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00201ee:	48                   	dec    eax
c00201ef:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00201f4:	75 18                	jne    c002020e <unlockStuff()+0x28>
c00201f6:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c00201fd:	74 0f                	je     c002020e <unlockStuff()+0x28>
c00201ff:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020209:	e8 8e 50 00 00       	call   c002529c <schedule()>
c002020e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020213:	48                   	dec    eax
c0020214:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020219:	75 01                	jne    c002021c <unlockStuff()+0x36>
c002021b:	fb                   	sti    
c002021c:	83 c4 0c             	add    esp,0xc
c002021f:	c3                   	ret    

c0020220 <Virt::getAKernelVAS()>:
c0020220:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020225:	c3                   	ret    

c0020226 <__not_memcpy>:
c0020226:	57                   	push   edi
c0020227:	56                   	push   esi
c0020228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002022c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020230:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020234:	89 c7                	mov    edi,eax
c0020236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020238:	5e                   	pop    esi
c0020239:	5f                   	pop    edi
c002023a:	c3                   	ret    
c002023b:	90                   	nop

c002023c <Mutex::Mutex()>:
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020243:	83 ec 08             	sub    esp,0x8
c0020246:	6a 01                	push   0x1
c0020248:	50                   	push   eax
c0020249:	e8 ae 03 00 00       	call   c00205fc <Semaphore::Semaphore(int)>
c002024e:	83 c4 10             	add    esp,0x10
c0020251:	90                   	nop
c0020252:	83 c4 0c             	add    esp,0xc
c0020255:	c3                   	ret    

c0020256 <KePanic(char const*)>:
c0020256:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c002025d:	e9 32 6d 00 00       	jmp    c0026f94 <HalPanic(char const*)>

c0020262 <KePowerThread(void*)>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002026a:	48                   	dec    eax
c002026b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020270:	75 01                	jne    c0020273 <KePowerThread(void*)+0x11>
c0020272:	fb                   	sti    
c0020273:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002027a:	83 ec 0c             	sub    esp,0xc
c002027d:	6a 0a                	push   0xa
c002027f:	e8 04 52 00 00       	call   c0025488 <sleep(unsigned int)>
c0020284:	83 c4 10             	add    esp,0x10
c0020287:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c002028e:	eb e3                	jmp    c0020273 <KePowerThread(void*)+0x11>

c0020290 <KeChangePowerSettings(PowerSettings)>:
c0020290:	57                   	push   edi
c0020291:	b9 09 00 00 00       	mov    ecx,0x9
c0020296:	56                   	push   esi
c0020297:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c002029c:	fc                   	cld    
c002029d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00202a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202a3:	5e                   	pop    esi
c00202a4:	5f                   	pop    edi
c00202a5:	c3                   	ret    

c00202a6 <KeUserIOReceived()>:
c00202a6:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00202b0:	c3                   	ret    

c00202b1 <KeHandlePowerButton()>:
c00202b1:	83 ec 0c             	sub    esp,0xc
c00202b4:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00202b9:	83 f8 02             	cmp    eax,0x2
c00202bc:	75 10                	jne    c00202ce <KeHandlePowerButton()+0x1d>
c00202be:	83 ec 0c             	sub    esp,0xc
c00202c1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202c7:	e8 44 58 ff ff       	call   c0015b10 <Computer::shutdown()>
c00202cc:	eb 11                	jmp    c00202df <KeHandlePowerButton()+0x2e>
c00202ce:	48                   	dec    eax
c00202cf:	75 11                	jne    c00202e2 <KeHandlePowerButton()+0x31>
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202da:	e8 61 58 ff ff       	call   c0015b40 <Computer::sleep()>
c00202df:	83 c4 10             	add    esp,0x10
c00202e2:	83 c4 0c             	add    esp,0xc
c00202e5:	c3                   	ret    

c00202e6 <KeHandleSleepButton()>:
c00202e6:	83 ec 0c             	sub    esp,0xc
c00202e9:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c00202ee:	83 f8 02             	cmp    eax,0x2
c00202f1:	75 10                	jne    c0020303 <KeHandleSleepButton()+0x1d>
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202fc:	e8 0f 58 ff ff       	call   c0015b10 <Computer::shutdown()>
c0020301:	eb 11                	jmp    c0020314 <KeHandleSleepButton()+0x2e>
c0020303:	48                   	dec    eax
c0020304:	75 11                	jne    c0020317 <KeHandleSleepButton()+0x31>
c0020306:	83 ec 0c             	sub    esp,0xc
c0020309:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002030f:	e8 2c 58 ff ff       	call   c0015b40 <Computer::sleep()>
c0020314:	83 c4 10             	add    esp,0x10
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

c002031b <KeSetupPowerManager()>:
c002031b:	83 ec 0c             	sub    esp,0xc
c002031e:	68 f0 00 00 00       	push   0xf0
c0020323:	6a 00                	push   0x0
c0020325:	68 62 02 02 c0       	push   0xc0020262
c002032a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020330:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002033a:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020341:	e8 0a 4d 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c0020346:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020350:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002035a:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020364:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c002036e:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c0020378:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020382:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c002038c:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c0020396:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00203a0:	83 c4 1c             	add    esp,0x1c
c00203a3:	c3                   	ret    

c00203a4 <KeRand()>:
c00203a4:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00203ae:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00203b8:	53                   	push   ebx
c00203b9:	01 c1                	add    ecx,eax
c00203bb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00203c0:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00203c6:	01 ca                	add    edx,ecx
c00203c8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00203cd:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00203d2:	83 d2 00             	adc    edx,0x0
c00203d5:	0f b7 da             	movzx  ebx,dx
c00203d8:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00203de:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00203e2:	5b                   	pop    ebx
c00203e3:	c3                   	ret    

c00203e4 <KeSeedRand(unsigned int)>:
c00203e4:	53                   	push   ebx
c00203e5:	83 ec 08             	sub    esp,0x8
c00203e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203ec:	e8 c2 6e 00 00       	call   c00272b3 <HalGetRand()>
c00203f1:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c00203fb:	31 d8                	xor    eax,ebx
c00203fd:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020402:	e8 9d ff ff ff       	call   c00203a4 <KeRand()>
c0020407:	83 c4 08             	add    esp,0x8
c002040a:	5b                   	pop    ebx
c002040b:	eb 97                	jmp    c00203a4 <KeRand()>

c002040d <KeInitRand()>:
c002040d:	83 ec 0c             	sub    esp,0xc
c0020410:	e8 93 6c 00 00       	call   c00270a8 <HalQueryPerformanceCounter()>
c0020415:	0f 20 da             	mov    edx,cr3
c0020418:	0f 22 da             	mov    cr3,edx
c002041b:	0f 20 da             	mov    edx,cr3
c002041e:	0f 22 da             	mov    cr3,edx
c0020421:	0f 20 da             	mov    edx,cr3
c0020424:	0f 22 da             	mov    cr3,edx
c0020427:	0f 20 da             	mov    edx,cr3
c002042a:	0f 22 da             	mov    cr3,edx
c002042d:	83 ec 0c             	sub    esp,0xc
c0020430:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020435:	50                   	push   eax
c0020436:	e8 a9 ff ff ff       	call   c00203e4 <KeSeedRand(unsigned int)>
c002043b:	83 c4 1c             	add    esp,0x1c
c002043e:	c3                   	ret    
c002043f:	90                   	nop

c0020440 <KeResolveCompatibilitySymbol(char*)>:
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	83 ec 08             	sub    esp,0x8
c0020446:	68 28 29 03 c0       	push   0xc0032928
c002044b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044f:	e8 2c 03 fe ff       	call   c0000780 <strcmp>
c0020454:	83 c4 10             	add    esp,0x10
c0020457:	85 c0                	test   eax,eax
c0020459:	0f 94 c0             	sete   al
c002045c:	0f b6 c0             	movzx  eax,al
c002045f:	85 c0                	test   eax,eax
c0020461:	74 0d                	je     c0020470 <KeResolveCompatibilitySymbol(char*)+0x30>
c0020463:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020468:	e9 8b 01 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002046d:	8d 76 00             	lea    esi,[esi+0x0]
c0020470:	83 ec 08             	sub    esp,0x8
c0020473:	68 31 29 03 c0       	push   0xc0032931
c0020478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047c:	e8 ff 02 fe ff       	call   c0000780 <strcmp>
c0020481:	83 c4 10             	add    esp,0x10
c0020484:	85 c0                	test   eax,eax
c0020486:	0f 94 c0             	sete   al
c0020489:	0f b6 c0             	movzx  eax,al
c002048c:	85 c0                	test   eax,eax
c002048e:	74 0c                	je     c002049c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0020490:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0020495:	e9 5e 01 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002049a:	66 90                	xchg   ax,ax
c002049c:	83 ec 08             	sub    esp,0x8
c002049f:	68 3b 29 03 c0       	push   0xc003293b
c00204a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a8:	e8 d3 02 fe ff       	call   c0000780 <strcmp>
c00204ad:	83 c4 10             	add    esp,0x10
c00204b0:	85 c0                	test   eax,eax
c00204b2:	0f 94 c0             	sete   al
c00204b5:	0f b6 c0             	movzx  eax,al
c00204b8:	85 c0                	test   eax,eax
c00204ba:	74 0c                	je     c00204c8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00204bc:	b8 34 e4 02 c0       	mov    eax,0xc002e434
c00204c1:	e9 32 01 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204c6:	66 90                	xchg   ax,ax
c00204c8:	83 ec 08             	sub    esp,0x8
c00204cb:	68 44 29 03 c0       	push   0xc0032944
c00204d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204d4:	e8 a7 02 fe ff       	call   c0000780 <strcmp>
c00204d9:	83 c4 10             	add    esp,0x10
c00204dc:	85 c0                	test   eax,eax
c00204de:	0f 94 c0             	sete   al
c00204e1:	0f b6 c0             	movzx  eax,al
c00204e4:	85 c0                	test   eax,eax
c00204e6:	74 0c                	je     c00204f4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00204e8:	b8 56 02 02 c0       	mov    eax,0xc0020256
c00204ed:	e9 06 01 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204f2:	66 90                	xchg   ax,ax
c00204f4:	83 ec 08             	sub    esp,0x8
c00204f7:	68 57 29 03 c0       	push   0xc0032957
c00204fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020500:	e8 7b 02 fe ff       	call   c0000780 <strcmp>
c0020505:	83 c4 10             	add    esp,0x10
c0020508:	85 c0                	test   eax,eax
c002050a:	0f 94 c0             	sete   al
c002050d:	0f b6 c0             	movzx  eax,al
c0020510:	85 c0                	test   eax,eax
c0020512:	74 0c                	je     c0020520 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020514:	b8 f5 fa 01 c0       	mov    eax,0xc001faf5
c0020519:	e9 da 00 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002051e:	66 90                	xchg   ax,ax
c0020520:	83 ec 08             	sub    esp,0x8
c0020523:	68 74 29 03 c0       	push   0xc0032974
c0020528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002052c:	e8 4f 02 fe ff       	call   c0000780 <strcmp>
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	85 c0                	test   eax,eax
c0020536:	0f 94 c0             	sete   al
c0020539:	0f b6 c0             	movzx  eax,al
c002053c:	85 c0                	test   eax,eax
c002053e:	74 0c                	je     c002054c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020540:	b8 00 e8 02 c0       	mov    eax,0xc002e800
c0020545:	e9 ae 00 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002054a:	66 90                	xchg   ax,ax
c002054c:	83 ec 08             	sub    esp,0x8
c002054f:	68 7e 29 03 c0       	push   0xc003297e
c0020554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020558:	e8 23 02 fe ff       	call   c0000780 <strcmp>
c002055d:	83 c4 10             	add    esp,0x10
c0020560:	85 c0                	test   eax,eax
c0020562:	0f 94 c0             	sete   al
c0020565:	0f b6 c0             	movzx  eax,al
c0020568:	85 c0                	test   eax,eax
c002056a:	74 0c                	je     c0020578 <KeResolveCompatibilitySymbol(char*)+0x138>
c002056c:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0020571:	e9 82 00 00 00       	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020576:	66 90                	xchg   ax,ax
c0020578:	83 ec 08             	sub    esp,0x8
c002057b:	68 87 29 03 c0       	push   0xc0032987
c0020580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020584:	e8 f7 01 fe ff       	call   c0000780 <strcmp>
c0020589:	83 c4 10             	add    esp,0x10
c002058c:	85 c0                	test   eax,eax
c002058e:	0f 94 c0             	sete   al
c0020591:	0f b6 c0             	movzx  eax,al
c0020594:	85 c0                	test   eax,eax
c0020596:	74 08                	je     c00205a0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0020598:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c002059d:	eb 59                	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002059f:	90                   	nop
c00205a0:	83 ec 08             	sub    esp,0x8
c00205a3:	68 9f 29 03 c0       	push   0xc003299f
c00205a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205ac:	e8 cf 01 fe ff       	call   c0000780 <strcmp>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	85 c0                	test   eax,eax
c00205b6:	0f 94 c0             	sete   al
c00205b9:	0f b6 c0             	movzx  eax,al
c00205bc:	85 c0                	test   eax,eax
c00205be:	74 08                	je     c00205c8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00205c0:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205c5:	eb 31                	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205c7:	90                   	nop
c00205c8:	83 ec 08             	sub    esp,0x8
c00205cb:	68 ac 29 03 c0       	push   0xc00329ac
c00205d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d4:	e8 a7 01 fe ff       	call   c0000780 <strcmp>
c00205d9:	83 c4 10             	add    esp,0x10
c00205dc:	85 c0                	test   eax,eax
c00205de:	0f 94 c0             	sete   al
c00205e1:	0f b6 c0             	movzx  eax,al
c00205e4:	85 c0                	test   eax,eax
c00205e6:	74 08                	je     c00205f0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00205e8:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c00205ed:	eb 09                	jmp    c00205f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205ef:	90                   	nop
c00205f0:	b8 00 00 00 00       	mov    eax,0x0
c00205f5:	8d 76 00             	lea    esi,[esi+0x0]
c00205f8:	83 c4 0c             	add    esp,0xc
c00205fb:	c3                   	ret    

c00205fc <Semaphore::Semaphore(int)>:
c00205fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020604:	89 10                	mov    DWORD PTR [eax],edx
c0020606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002060a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020615:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020620:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020627:	90                   	nop
c0020628:	c3                   	ret    
c0020629:	90                   	nop
c002062a:	66 90                	xchg   ax,ax

c002062c <Semaphore::tryAcquire()>:
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	fa                   	cli    
c0020630:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020635:	83 c0 01             	add    eax,0x1
c0020638:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002063d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020642:	83 c0 01             	add    eax,0x1
c0020645:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020655:	8b 00                	mov    eax,DWORD PTR [eax]
c0020657:	39 c2                	cmp    edx,eax
c0020659:	7d 5d                	jge    c00206b8 <Semaphore::tryAcquire()+0x8c>
c002065b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020662:	8d 50 01             	lea    edx,[eax+0x1]
c0020665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020669:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002066c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020671:	83 e8 01             	sub    eax,0x1
c0020674:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020679:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002067e:	85 c0                	test   eax,eax
c0020680:	75 1a                	jne    c002069c <Semaphore::tryAcquire()+0x70>
c0020682:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020687:	85 c0                	test   eax,eax
c0020689:	74 11                	je     c002069c <Semaphore::tryAcquire()+0x70>
c002068b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020695:	e8 02 4c 00 00       	call   c002529c <schedule()>
c002069a:	66 90                	xchg   ax,ax
c002069c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206a1:	83 e8 01             	sub    eax,0x1
c00206a4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206a9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206ae:	85 c0                	test   eax,eax
c00206b0:	75 02                	jne    c00206b4 <Semaphore::tryAcquire()+0x88>
c00206b2:	fb                   	sti    
c00206b3:	90                   	nop
c00206b4:	b0 01                	mov    al,0x1
c00206b6:	eb 4c                	jmp    c0020704 <Semaphore::tryAcquire()+0xd8>
c00206b8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206bd:	83 e8 01             	sub    eax,0x1
c00206c0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206c5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206ca:	85 c0                	test   eax,eax
c00206cc:	75 1a                	jne    c00206e8 <Semaphore::tryAcquire()+0xbc>
c00206ce:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206d3:	85 c0                	test   eax,eax
c00206d5:	74 11                	je     c00206e8 <Semaphore::tryAcquire()+0xbc>
c00206d7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206e1:	e8 b6 4b 00 00       	call   c002529c <schedule()>
c00206e6:	66 90                	xchg   ax,ax
c00206e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206ed:	83 e8 01             	sub    eax,0x1
c00206f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206f5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206fa:	85 c0                	test   eax,eax
c00206fc:	75 02                	jne    c0020700 <Semaphore::tryAcquire()+0xd4>
c00206fe:	fb                   	sti    
c00206ff:	90                   	nop
c0020700:	b0 00                	mov    al,0x0
c0020702:	66 90                	xchg   ax,ax
c0020704:	83 c4 0c             	add    esp,0xc
c0020707:	c3                   	ret    

c0020708 <Semaphore::assertLocked(char const*)>:
c0020708:	83 ec 0c             	sub    esp,0xc
c002070b:	fa                   	cli    
c002070c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020711:	83 c0 01             	add    eax,0x1
c0020714:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020719:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002071e:	83 c0 01             	add    eax,0x1
c0020721:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002072a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002072d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020731:	8b 00                	mov    eax,DWORD PTR [eax]
c0020733:	39 c2                	cmp    edx,eax
c0020735:	7d 11                	jge    c0020748 <Semaphore::assertLocked(char const*)+0x40>
c0020737:	83 ec 0c             	sub    esp,0xc
c002073a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002073e:	e8 13 fb ff ff       	call   c0020256 <KePanic(char const*)>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	66 90                	xchg   ax,ax
c0020748:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002074d:	83 e8 01             	sub    eax,0x1
c0020750:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020755:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002075a:	85 c0                	test   eax,eax
c002075c:	75 1a                	jne    c0020778 <Semaphore::assertLocked(char const*)+0x70>
c002075e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020763:	85 c0                	test   eax,eax
c0020765:	74 11                	je     c0020778 <Semaphore::assertLocked(char const*)+0x70>
c0020767:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020771:	e8 26 4b 00 00       	call   c002529c <schedule()>
c0020776:	66 90                	xchg   ax,ax
c0020778:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002077d:	83 e8 01             	sub    eax,0x1
c0020780:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020785:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002078a:	85 c0                	test   eax,eax
c002078c:	75 02                	jne    c0020790 <Semaphore::assertLocked(char const*)+0x88>
c002078e:	fb                   	sti    
c002078f:	90                   	nop
c0020790:	90                   	nop
c0020791:	83 c4 0c             	add    esp,0xc
c0020794:	c3                   	ret    
c0020795:	90                   	nop
c0020796:	66 90                	xchg   ax,ax

c0020798 <Semaphore::acquire(int)>:
c0020798:	83 ec 1c             	sub    esp,0x1c
c002079b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207a0:	0f 84 9a 00 00 00    	je     c0020840 <Semaphore::acquire(int)+0xa8>
c00207a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207ae:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00207b3:	90                   	nop
c00207b4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00207b9:	85 c0                	test   eax,eax
c00207bb:	74 77                	je     c0020834 <Semaphore::acquire(int)+0x9c>
c00207bd:	83 ec 0c             	sub    esp,0xc
c00207c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207c4:	e8 63 fe ff ff       	call   c002062c <Semaphore::tryAcquire()>
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	83 f0 01             	xor    eax,0x1
c00207cf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00207d3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00207d7:	83 f0 01             	xor    eax,0x1
c00207da:	0f b6 c0             	movzx  eax,al
c00207dd:	85 c0                	test   eax,eax
c00207df:	75 4f                	jne    c0020830 <Semaphore::acquire(int)+0x98>
c00207e1:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00207e6:	7f 2c                	jg     c0020814 <Semaphore::acquire(int)+0x7c>
c00207e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207ec:	89 d0                	mov    eax,edx
c00207ee:	c1 e0 02             	shl    eax,0x2
c00207f1:	01 d0                	add    eax,edx
c00207f3:	d1 e0                	shl    eax,1
c00207f5:	83 ec 0c             	sub    esp,0xc
c00207f8:	50                   	push   eax
c00207f9:	e8 76 4c 00 00       	call   c0025474 <milliTenthSleep(unsigned int)>
c00207fe:	83 c4 10             	add    esp,0x10
c0020801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020805:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020809:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020811:	eb a1                	jmp    c00207b4 <Semaphore::acquire(int)+0x1c>
c0020813:	90                   	nop
c0020814:	83 ec 0c             	sub    esp,0xc
c0020817:	68 90 01 00 00       	push   0x190
c002081c:	e8 53 4c 00 00       	call   c0025474 <milliTenthSleep(unsigned int)>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020829:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c002082e:	eb 84                	jmp    c00207b4 <Semaphore::acquire(int)+0x1c>
c0020830:	90                   	nop
c0020831:	8d 76 00             	lea    esi,[esi+0x0]
c0020834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020838:	e9 ff 00 00 00       	jmp    c002093c <Semaphore::acquire(int)+0x1a4>
c002083d:	8d 76 00             	lea    esi,[esi+0x0]
c0020840:	fa                   	cli    
c0020841:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020846:	83 c0 01             	add    eax,0x1
c0020849:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002084e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020853:	83 c0 01             	add    eax,0x1
c0020856:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002085b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002085f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020866:	8b 00                	mov    eax,DWORD PTR [eax]
c0020868:	39 c2                	cmp    edx,eax
c002086a:	7d 14                	jge    c0020880 <Semaphore::acquire(int)+0xe8>
c002086c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020870:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020873:	8d 50 01             	lea    edx,[eax+0x1]
c0020876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002087a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002087d:	eb 6d                	jmp    c00208ec <Semaphore::acquire(int)+0x154>
c002087f:	90                   	nop
c0020880:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020885:	8b 00                	mov    eax,DWORD PTR [eax]
c0020887:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002088e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020895:	85 c0                	test   eax,eax
c0020897:	75 13                	jne    c00208ac <Semaphore::acquire(int)+0x114>
c0020899:	b8 00 20 00 c2       	mov    eax,0xc2002000
c002089e:	8b 10                	mov    edx,DWORD PTR [eax]
c00208a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208a7:	eb 17                	jmp    c00208c0 <Semaphore::acquire(int)+0x128>
c00208a9:	8d 76 00             	lea    esi,[esi+0x0]
c00208ac:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00208b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208b8:	8b 12                	mov    edx,DWORD PTR [edx]
c00208ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00208bd:	8d 76 00             	lea    esi,[esi+0x0]
c00208c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00208c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208ce:	83 ec 0c             	sub    esp,0xc
c00208d1:	68 bc 29 03 c0       	push   0xc00329bc
c00208d6:	e8 f3 89 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	83 ec 0c             	sub    esp,0xc
c00208e1:	6a 05                	push   0x5
c00208e3:	e8 70 4a 00 00       	call   c0025358 <blockTask(TaskState)>
c00208e8:	83 c4 10             	add    esp,0x10
c00208eb:	90                   	nop
c00208ec:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208f1:	83 e8 01             	sub    eax,0x1
c00208f4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208f9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208fe:	85 c0                	test   eax,eax
c0020900:	75 1a                	jne    c002091c <Semaphore::acquire(int)+0x184>
c0020902:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020907:	85 c0                	test   eax,eax
c0020909:	74 11                	je     c002091c <Semaphore::acquire(int)+0x184>
c002090b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020915:	e8 82 49 00 00       	call   c002529c <schedule()>
c002091a:	66 90                	xchg   ax,ax
c002091c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020921:	83 e8 01             	sub    eax,0x1
c0020924:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020929:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002092e:	85 c0                	test   eax,eax
c0020930:	75 02                	jne    c0020934 <Semaphore::acquire(int)+0x19c>
c0020932:	fb                   	sti    
c0020933:	90                   	nop
c0020934:	b8 00 00 00 00       	mov    eax,0x0
c0020939:	8d 76 00             	lea    esi,[esi+0x0]
c002093c:	83 c4 1c             	add    esp,0x1c
c002093f:	c3                   	ret    

c0020940 <Semaphore::acquire()>:
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	83 ec 08             	sub    esp,0x8
c0020946:	6a 00                	push   0x0
c0020948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002094c:	e8 47 fe ff ff       	call   c0020798 <Semaphore::acquire(int)>
c0020951:	83 c4 10             	add    esp,0x10
c0020954:	90                   	nop
c0020955:	83 c4 0c             	add    esp,0xc
c0020958:	c3                   	ret    
c0020959:	90                   	nop
c002095a:	66 90                	xchg   ax,ax

c002095c <Semaphore::release()>:
c002095c:	83 ec 1c             	sub    esp,0x1c
c002095f:	fa                   	cli    
c0020960:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020965:	83 c0 01             	add    eax,0x1
c0020968:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002096d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020972:	83 c0 01             	add    eax,0x1
c0020975:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002097a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002097e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020981:	85 c0                	test   eax,eax
c0020983:	74 2b                	je     c00209b0 <Semaphore::release()+0x54>
c0020985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020989:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002098c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020994:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002099b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002099e:	83 ec 0c             	sub    esp,0xc
c00209a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209a5:	e8 de 4b 00 00       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c00209aa:	83 c4 10             	add    esp,0x10
c00209ad:	eb 15                	jmp    c00209c4 <Semaphore::release()+0x68>
c00209af:	90                   	nop
c00209b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00209ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209c1:	8d 76 00             	lea    esi,[esi+0x0]
c00209c4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209c9:	83 e8 01             	sub    eax,0x1
c00209cc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209d1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209d6:	85 c0                	test   eax,eax
c00209d8:	75 1a                	jne    c00209f4 <Semaphore::release()+0x98>
c00209da:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209df:	85 c0                	test   eax,eax
c00209e1:	74 11                	je     c00209f4 <Semaphore::release()+0x98>
c00209e3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00209ed:	e8 aa 48 00 00       	call   c002529c <schedule()>
c00209f2:	66 90                	xchg   ax,ax
c00209f4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209f9:	83 e8 01             	sub    eax,0x1
c00209fc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a06:	85 c0                	test   eax,eax
c0020a08:	75 02                	jne    c0020a0c <Semaphore::release()+0xb0>
c0020a0a:	fb                   	sti    
c0020a0b:	90                   	nop
c0020a0c:	90                   	nop
c0020a0d:	83 c4 1c             	add    esp,0x1c
c0020a10:	c3                   	ret    

c0020a11 <KiSigKill(int)>:
c0020a11:	83 ec 0c             	sub    esp,0xc
c0020a14:	6a 00                	push   0x0
c0020a16:	6a 00                	push   0x0
c0020a18:	6a ff                	push   0xffffffff
c0020a1a:	6a 01                	push   0x1
c0020a1c:	e8 31 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a21:	83 c4 1c             	add    esp,0x1c
c0020a24:	c3                   	ret    

c0020a25 <KiDefaultSignalHandlerIgnore(int)>:
c0020a25:	c3                   	ret    

c0020a26 <KiDefaultSignalHandlerPause(int)>:
c0020a26:	57                   	push   edi
c0020a27:	b9 07 00 00 00       	mov    ecx,0x7
c0020a2c:	56                   	push   esi
c0020a2d:	be 17 2a 03 c0       	mov    esi,0xc0032a17
c0020a32:	83 ec 24             	sub    esp,0x24
c0020a35:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a39:	fc                   	cld    
c0020a3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a3c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a40:	50                   	push   eax
c0020a41:	6a 00                	push   0x0
c0020a43:	6a 00                	push   0x0
c0020a45:	6a 27                	push   0x27
c0020a47:	e8 06 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a4c:	83 c4 34             	add    esp,0x34
c0020a4f:	5e                   	pop    esi
c0020a50:	5f                   	pop    edi
c0020a51:	c3                   	ret    

c0020a52 <KiDefaultSignalHandlerResume(int)>:
c0020a52:	57                   	push   edi
c0020a53:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020a58:	56                   	push   esi
c0020a59:	be 33 2a 03 c0       	mov    esi,0xc0032a33
c0020a5e:	83 ec 24             	sub    esp,0x24
c0020a61:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020a65:	fc                   	cld    
c0020a66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a68:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020a6c:	50                   	push   eax
c0020a6d:	6a 00                	push   0x0
c0020a6f:	6a 00                	push   0x0
c0020a71:	6a 27                	push   0x27
c0020a73:	e8 da 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a78:	83 c4 34             	add    esp,0x34
c0020a7b:	5e                   	pop    esi
c0020a7c:	5f                   	pop    edi
c0020a7d:	c3                   	ret    

c0020a7e <KeDeinitSignals(SigHandlerBlock*)>:
c0020a7e:	e9 24 5a ff ff       	jmp    c00164a7 <free>

c0020a83 <KeInitSignals()>:
c0020a83:	53                   	push   ebx
c0020a84:	83 ec 14             	sub    esp,0x14
c0020a87:	68 c8 00 00 00       	push   0xc8
c0020a8c:	e8 06 5a ff ff       	call   c0016497 <malloc>
c0020a91:	83 c4 0c             	add    esp,0xc
c0020a94:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020a9e:	89 c3                	mov    ebx,eax
c0020aa0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020aaa:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020ab0:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020ab4:	6a 20                	push   0x20
c0020ab6:	6a 00                	push   0x0
c0020ab8:	50                   	push   eax
c0020ab9:	e8 32 fa fd ff       	call   c00004f0 <memset>
c0020abe:	83 c4 0c             	add    esp,0xc
c0020ac1:	6a 44                	push   0x44
c0020ac3:	6a 00                	push   0x0
c0020ac5:	53                   	push   ebx
c0020ac6:	e8 25 fa fd ff       	call   c00004f0 <memset>
c0020acb:	83 c4 18             	add    esp,0x18
c0020ace:	89 d8                	mov    eax,ebx
c0020ad0:	5b                   	pop    ebx
c0020ad1:	c3                   	ret    

c0020ad2 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020ad2:	53                   	push   ebx
c0020ad3:	b8 01 00 00 00       	mov    eax,0x1
c0020ad8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020adc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ae0:	83 f9 10             	cmp    ecx,0x10
c0020ae3:	7f 21                	jg     c0020b06 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae9:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020aec:	89 03                	mov    DWORD PTR [ebx],eax
c0020aee:	b8 01 00 00 00       	mov    eax,0x1
c0020af3:	d3 e0                	shl    eax,cl
c0020af5:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020af9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020afc:	31 c0                	xor    eax,eax
c0020afe:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020b06:	5b                   	pop    ebx
c0020b07:	c3                   	ret    

c0020b08 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020b08:	55                   	push   ebp
c0020b09:	57                   	push   edi
c0020b0a:	bf 08 00 00 00       	mov    edi,0x8
c0020b0f:	56                   	push   esi
c0020b10:	53                   	push   ebx
c0020b11:	83 ec 18             	sub    esp,0x18
c0020b14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b18:	68 50 2a 03 c0       	push   0xc0032a50
c0020b1d:	e8 ac 87 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0020b22:	83 c4 10             	add    esp,0x10
c0020b25:	31 c9                	xor    ecx,ecx
c0020b27:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b2e:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020b34:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020b38:	99                   	cdq    
c0020b39:	f7 ff                	idiv   edi
c0020b3b:	8d 42 24             	lea    eax,[edx+0x24]
c0020b3e:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020b42:	85 f6                	test   esi,esi
c0020b44:	75 1a                	jne    c0020b60 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020b46:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020b4a:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020b4e:	50                   	push   eax
c0020b4f:	50                   	push   eax
c0020b50:	52                   	push   edx
c0020b51:	68 61 2a 03 c0       	push   0xc0032a61
c0020b56:	e8 73 87 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0020b5b:	83 c4 10             	add    esp,0x10
c0020b5e:	eb 1b                	jmp    c0020b7b <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020b60:	41                   	inc    ecx
c0020b61:	83 f9 08             	cmp    ecx,0x8
c0020b64:	75 ce                	jne    c0020b34 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	be 01 00 00 00       	mov    esi,0x1
c0020b6e:	68 82 2a 03 c0       	push   0xc0032a82
c0020b73:	e8 56 87 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0020b78:	83 c4 10             	add    esp,0x10
c0020b7b:	83 c4 0c             	add    esp,0xc
c0020b7e:	89 f0                	mov    eax,esi
c0020b80:	5b                   	pop    ebx
c0020b81:	5e                   	pop    esi
c0020b82:	5f                   	pop    edi
c0020b83:	5d                   	pop    ebp
c0020b84:	c3                   	ret    

c0020b85 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020b85:	55                   	push   ebp
c0020b86:	57                   	push   edi
c0020b87:	56                   	push   esi
c0020b88:	53                   	push   ebx
c0020b89:	51                   	push   ecx
c0020b8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020b8e:	85 db                	test   ebx,ebx
c0020b90:	0f 84 bc 00 00 00    	je     c0020c52 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b96:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020b9d:	0f 84 af 00 00 00    	je     c0020c52 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ba3:	31 c9                	xor    ecx,ecx
c0020ba5:	bf 08 00 00 00       	mov    edi,0x8
c0020baa:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020bb0:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020bb3:	99                   	cdq    
c0020bb4:	f7 ff                	idiv   edi
c0020bb6:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020bbd:	85 ed                	test   ebp,ebp
c0020bbf:	0f 84 9e 00 00 00    	je     c0020c63 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020bc5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020bcb:	89 e9                	mov    ecx,ebp
c0020bcd:	bf 01 00 00 00       	mov    edi,0x1
c0020bd2:	d3 e7                	shl    edi,cl
c0020bd4:	31 c9                	xor    ecx,ecx
c0020bd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0020bd9:	b8 01 00 00 00       	mov    eax,0x1
c0020bde:	d3 e0                	shl    eax,cl
c0020be0:	85 04 24             	test   DWORD PTR [esp],eax
c0020be3:	74 06                	je     c0020beb <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020be5:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020be9:	75 67                	jne    c0020c52 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020beb:	41                   	inc    ecx
c0020bec:	83 f9 11             	cmp    ecx,0x11
c0020bef:	75 e8                	jne    c0020bd9 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020bf1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020bf4:	46                   	inc    esi
c0020bf5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020bfb:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020c06:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020c0d:	09 f8                	or     eax,edi
c0020c0f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020c15:	31 c0                	xor    eax,eax
c0020c17:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020c1f:	74 09                	je     c0020c2a <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020c21:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020c28:	eb 06                	jmp    c0020c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020c2a:	40                   	inc    eax
c0020c2b:	83 f8 08             	cmp    eax,0x8
c0020c2e:	75 e7                	jne    c0020c17 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020c30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c34:	83 fd 09             	cmp    ebp,0x9
c0020c37:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020c3a:	89 2a                	mov    DWORD PTR [edx],ebp
c0020c3c:	75 07                	jne    c0020c45 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020c3e:	b8 11 0a 02 c0       	mov    eax,0xc0020a11
c0020c43:	eb 31                	jmp    c0020c76 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c45:	83 f8 01             	cmp    eax,0x1
c0020c48:	75 0c                	jne    c0020c56 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020c4a:	f7 d7                	not    edi
c0020c4c:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020c52:	31 c0                	xor    eax,eax
c0020c54:	eb 20                	jmp    c0020c76 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c56:	85 c0                	test   eax,eax
c0020c58:	75 1c                	jne    c0020c76 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c5a:	8b 04 ad c0 42 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbd40]
c0020c61:	eb 13                	jmp    c0020c76 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c63:	41                   	inc    ecx
c0020c64:	46                   	inc    esi
c0020c65:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c6b:	83 f9 08             	cmp    ecx,0x8
c0020c6e:	0f 85 36 ff ff ff    	jne    c0020baa <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020c74:	eb dc                	jmp    c0020c52 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c76:	5a                   	pop    edx
c0020c77:	5b                   	pop    ebx
c0020c78:	5e                   	pop    esi
c0020c79:	5f                   	pop    edi
c0020c7a:	5d                   	pop    ebp
c0020c7b:	c3                   	ret    

c0020c7c <KiCheckSignalZ>:
c0020c7c:	83 ec 10             	sub    esp,0x10
c0020c7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c83:	50                   	push   eax
c0020c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c8c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020c92:	e8 ee fe ff ff       	call   c0020b85 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020c97:	5a                   	pop    edx
c0020c98:	31 d2                	xor    edx,edx
c0020c9a:	59                   	pop    ecx
c0020c9b:	85 c0                	test   eax,eax
c0020c9d:	74 19                	je     c0020cb8 <KiCheckSignalZ+0x3c>
c0020c9f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020ca5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ca8:	89 02                	mov    DWORD PTR [edx],eax
c0020caa:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020cb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cb5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020cb8:	89 d0                	mov    eax,edx
c0020cba:	83 c4 10             	add    esp,0x10
c0020cbd:	c3                   	ret    

c0020cbe <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020cbe:	56                   	push   esi
c0020cbf:	53                   	push   ebx
c0020cc0:	bb 01 00 00 00       	mov    ebx,0x1
c0020cc5:	52                   	push   edx
c0020cc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cce:	d3 e3                	shl    ebx,cl
c0020cd0:	83 f9 10             	cmp    ecx,0x10
c0020cd3:	7f 08                	jg     c0020cdd <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020cd5:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020cdb:	75 10                	jne    c0020ced <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020cdd:	83 ec 0c             	sub    esp,0xc
c0020ce0:	68 93 2a 03 c0       	push   0xc0032a93
c0020ce5:	e8 6c f5 ff ff       	call   c0020256 <KePanic(char const*)>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	f7 d3                	not    ebx
c0020cef:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020cf5:	58                   	pop    eax
c0020cf6:	5b                   	pop    ebx
c0020cf7:	5e                   	pop    esi
c0020cf8:	c3                   	ret    

c0020cf9 <KiFinishSignalZ>:
c0020cf9:	53                   	push   ebx
c0020cfa:	83 ec 10             	sub    esp,0x10
c0020cfd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d01:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d0c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020d12:	e8 a7 ff ff ff       	call   c0020cbe <KeCompleteSignal(SigHandlerBlock*, int)>
c0020d17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020d1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020d24:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020d2b:	83 c4 18             	add    esp,0x18
c0020d2e:	5b                   	pop    ebx
c0020d2f:	c3                   	ret    

c0020d30 <SysSeekDir(regs*)>:
c0020d30:	31 c0                	xor    eax,eax
c0020d32:	31 d2                	xor    edx,edx
c0020d34:	c3                   	ret    

c0020d35 <SysTellDir(regs*)>:
c0020d35:	31 c0                	xor    eax,eax
c0020d37:	31 d2                	xor    edx,edx
c0020d39:	c3                   	ret    

c0020d3a <SysVerify(regs*)>:
c0020d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d3e:	31 d2                	xor    edx,edx
c0020d40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d43:	c3                   	ret    

c0020d44 <SysGetArgc(regs*)>:
c0020d44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d4c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020d52:	89 c2                	mov    edx,eax
c0020d54:	c1 fa 1f             	sar    edx,0x1f
c0020d57:	c3                   	ret    

c0020d58 <SysTTYName(regs*)>:
c0020d58:	b8 01 00 00 00       	mov    eax,0x1
c0020d5d:	31 d2                	xor    edx,edx
c0020d5f:	c3                   	ret    

c0020d60 <SysFormatDisk(regs*)>:
c0020d60:	56                   	push   esi
c0020d61:	53                   	push   ebx
c0020d62:	83 ec 04             	sub    esp,0x4
c0020d65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d69:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020d6f:	eb 2a                	jmp    c0020d9b <SysFormatDisk(regs*)+0x3b>
c0020d71:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020d74:	83 ec 0c             	sub    esp,0xc
c0020d77:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020d7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020d7c:	51                   	push   ecx
c0020d7d:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020d80:	51                   	push   ecx
c0020d81:	50                   	push   eax
c0020d82:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020d89:	50                   	push   eax
c0020d8a:	53                   	push   ebx
c0020d8b:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020d8e:	83 c4 20             	add    esp,0x20
c0020d91:	83 f8 08             	cmp    eax,0x8
c0020d94:	89 c1                	mov    ecx,eax
c0020d96:	75 14                	jne    c0020dac <SysFormatDisk(regs*)+0x4c>
c0020d98:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020d9b:	85 db                	test   ebx,ebx
c0020d9d:	75 d2                	jne    c0020d71 <SysFormatDisk(regs*)+0x11>
c0020d9f:	b8 03 00 00 00       	mov    eax,0x3
c0020da4:	31 d2                	xor    edx,edx
c0020da6:	83 c4 04             	add    esp,0x4
c0020da9:	5b                   	pop    ebx
c0020daa:	5e                   	pop    esi
c0020dab:	c3                   	ret    
c0020dac:	85 c0                	test   eax,eax
c0020dae:	74 13                	je     c0020dc3 <SysFormatDisk(regs*)+0x63>
c0020db0:	31 d2                	xor    edx,edx
c0020db2:	83 f9 09             	cmp    ecx,0x9
c0020db5:	b8 01 00 00 00       	mov    eax,0x1
c0020dba:	74 ea                	je     c0020da6 <SysFormatDisk(regs*)+0x46>
c0020dbc:	b8 02 00 00 00       	mov    eax,0x2
c0020dc1:	eb e1                	jmp    c0020da4 <SysFormatDisk(regs*)+0x44>
c0020dc3:	31 c0                	xor    eax,eax
c0020dc5:	eb dd                	jmp    c0020da4 <SysFormatDisk(regs*)+0x44>

c0020dc7 <SysSetDiskVolumeLabel(regs*)>:
c0020dc7:	56                   	push   esi
c0020dc8:	53                   	push   ebx
c0020dc9:	83 ec 04             	sub    esp,0x4
c0020dcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020dd0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020dd3:	83 f8 19             	cmp    eax,0x19
c0020dd6:	77 33                	ja     c0020e0b <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dd8:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020ddf:	85 c9                	test   ecx,ecx
c0020de1:	74 28                	je     c0020e0b <SysSetDiskVolumeLabel(regs*)+0x44>
c0020de3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020de6:	85 db                	test   ebx,ebx
c0020de8:	74 21                	je     c0020e0b <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dea:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020df0:	85 d2                	test   edx,edx
c0020df2:	74 17                	je     c0020e0b <SysSetDiskVolumeLabel(regs*)+0x44>
c0020df4:	8b 32                	mov    esi,DWORD PTR [edx]
c0020df6:	53                   	push   ebx
c0020df7:	50                   	push   eax
c0020df8:	51                   	push   ecx
c0020df9:	52                   	push   edx
c0020dfa:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020dfd:	83 c4 10             	add    esp,0x10
c0020e00:	83 c4 04             	add    esp,0x4
c0020e03:	5b                   	pop    ebx
c0020e04:	5e                   	pop    esi
c0020e05:	89 c2                	mov    edx,eax
c0020e07:	c1 fa 1f             	sar    edx,0x1f
c0020e0a:	c3                   	ret    
c0020e0b:	83 c4 04             	add    esp,0x4
c0020e0e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e13:	5b                   	pop    ebx
c0020e14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e19:	5e                   	pop    esi
c0020e1a:	c3                   	ret    

c0020e1b <SysGetDiskVolumeLabel(regs*)>:
c0020e1b:	57                   	push   edi
c0020e1c:	56                   	push   esi
c0020e1d:	53                   	push   ebx
c0020e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e22:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e25:	83 fa 19             	cmp    edx,0x19
c0020e28:	77 3c                	ja     c0020e66 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e2a:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020e31:	85 c9                	test   ecx,ecx
c0020e33:	74 31                	je     c0020e66 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e35:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e38:	85 db                	test   ebx,ebx
c0020e3a:	74 2a                	je     c0020e66 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e3c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020e3f:	85 f6                	test   esi,esi
c0020e41:	74 23                	je     c0020e66 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e43:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020e49:	85 c0                	test   eax,eax
c0020e4b:	74 19                	je     c0020e66 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e4d:	83 ec 0c             	sub    esp,0xc
c0020e50:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e52:	56                   	push   esi
c0020e53:	53                   	push   ebx
c0020e54:	52                   	push   edx
c0020e55:	51                   	push   ecx
c0020e56:	50                   	push   eax
c0020e57:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020e5a:	83 c4 20             	add    esp,0x20
c0020e5d:	5b                   	pop    ebx
c0020e5e:	5e                   	pop    esi
c0020e5f:	89 c2                	mov    edx,eax
c0020e61:	c1 fa 1f             	sar    edx,0x1f
c0020e64:	5f                   	pop    edi
c0020e65:	c3                   	ret    
c0020e66:	5b                   	pop    ebx
c0020e67:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e71:	5e                   	pop    esi
c0020e72:	5f                   	pop    edi
c0020e73:	c3                   	ret    

c0020e74 <SysShutdown(regs*)>:
c0020e74:	57                   	push   edi
c0020e75:	56                   	push   esi
c0020e76:	83 ec 04             	sub    esp,0x4
c0020e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020e80:	85 c0                	test   eax,eax
c0020e82:	74 1e                	je     c0020ea2 <SysShutdown(regs*)+0x2e>
c0020e84:	83 f8 01             	cmp    eax,0x1
c0020e87:	74 5f                	je     c0020ee8 <SysShutdown(regs*)+0x74>
c0020e89:	83 f8 02             	cmp    eax,0x2
c0020e8c:	be ff ff ff ff       	mov    esi,0xffffffff
c0020e91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020e96:	74 32                	je     c0020eca <SysShutdown(regs*)+0x56>
c0020e98:	83 c4 04             	add    esp,0x4
c0020e9b:	89 f0                	mov    eax,esi
c0020e9d:	5e                   	pop    esi
c0020e9e:	89 fa                	mov    edx,edi
c0020ea0:	5f                   	pop    edi
c0020ea1:	c3                   	ret    
c0020ea2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ea7:	be ff ff ff ff       	mov    esi,0xffffffff
c0020eac:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020eb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0020eb3:	6a 00                	push   0x0
c0020eb5:	6a 00                	push   0x0
c0020eb7:	6a 00                	push   0x0
c0020eb9:	50                   	push   eax
c0020eba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ebd:	83 c4 10             	add    esp,0x10
c0020ec0:	89 f0                	mov    eax,esi
c0020ec2:	83 c4 04             	add    esp,0x4
c0020ec5:	89 fa                	mov    edx,edi
c0020ec7:	5e                   	pop    esi
c0020ec8:	5f                   	pop    edi
c0020ec9:	c3                   	ret    
c0020eca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ecf:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ed1:	6a 00                	push   0x0
c0020ed3:	6a 00                	push   0x0
c0020ed5:	6a 01                	push   0x1
c0020ed7:	50                   	push   eax
c0020ed8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020edb:	83 c4 10             	add    esp,0x10
c0020ede:	89 f0                	mov    eax,esi
c0020ee0:	83 c4 04             	add    esp,0x4
c0020ee3:	89 fa                	mov    edx,edi
c0020ee5:	5e                   	pop    esi
c0020ee6:	5f                   	pop    edi
c0020ee7:	c3                   	ret    
c0020ee8:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020eed:	85 c0                	test   eax,eax
c0020eef:	74 02                	je     c0020ef3 <SysShutdown(regs*)+0x7f>
c0020ef1:	ff d0                	call   eax
c0020ef3:	31 f6                	xor    esi,esi
c0020ef5:	83 c4 04             	add    esp,0x4
c0020ef8:	89 f0                	mov    eax,esi
c0020efa:	31 ff                	xor    edi,edi
c0020efc:	5e                   	pop    esi
c0020efd:	89 fa                	mov    edx,edi
c0020eff:	5f                   	pop    edi
c0020f00:	c3                   	ret    

c0020f01 <SysRealpath(regs*)>:
c0020f01:	53                   	push   ebx
c0020f02:	83 ec 08             	sub    esp,0x8
c0020f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f09:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0020f0c:	85 c9                	test   ecx,ecx
c0020f0e:	74 36                	je     c0020f46 <SysRealpath(regs*)+0x45>
c0020f10:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020f13:	31 d2                	xor    edx,edx
c0020f15:	b8 01 00 00 00       	mov    eax,0x1
c0020f1a:	85 db                	test   ebx,ebx
c0020f1c:	75 05                	jne    c0020f23 <SysRealpath(regs*)+0x22>
c0020f1e:	83 c4 08             	add    esp,0x8
c0020f21:	5b                   	pop    ebx
c0020f22:	c3                   	ret    
c0020f23:	6a 00                	push   0x0
c0020f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f2d:	05 0c 01 00 00       	add    eax,0x10c
c0020f32:	50                   	push   eax
c0020f33:	51                   	push   ecx
c0020f34:	53                   	push   ebx
c0020f35:	e8 a0 92 ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	31 c0                	xor    eax,eax
c0020f3f:	31 d2                	xor    edx,edx
c0020f41:	83 c4 08             	add    esp,0x8
c0020f44:	5b                   	pop    ebx
c0020f45:	c3                   	ret    
c0020f46:	b8 01 00 00 00       	mov    eax,0x1
c0020f4b:	31 d2                	xor    edx,edx
c0020f4d:	eb f2                	jmp    c0020f41 <SysRealpath(regs*)+0x40>

c0020f4f <SysReadDir(regs*)>:
c0020f4f:	53                   	push   ebx
c0020f50:	83 ec 18             	sub    esp,0x18
c0020f53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f57:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020f5a:	83 f8 02             	cmp    eax,0x2
c0020f5d:	76 4f                	jbe    c0020fae <SysReadDir(regs*)+0x5f>
c0020f5f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020f66:	77 52                	ja     c0020fba <SysReadDir(regs*)+0x6b>
c0020f68:	83 ec 0c             	sub    esp,0xc
c0020f6b:	50                   	push   eax
c0020f6c:	e8 ee 6e ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c0020f71:	83 c4 10             	add    esp,0x10
c0020f74:	85 c0                	test   eax,eax
c0020f76:	74 42                	je     c0020fba <SysReadDir(regs*)+0x6b>
c0020f78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f80:	83 ec 0c             	sub    esp,0xc
c0020f83:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020f87:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f89:	51                   	push   ecx
c0020f8a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020f8d:	51                   	push   ecx
c0020f8e:	6a 00                	push   0x0
c0020f90:	68 10 01 00 00       	push   0x110
c0020f95:	50                   	push   eax
c0020f96:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020f99:	83 c4 20             	add    esp,0x20
c0020f9c:	85 c0                	test   eax,eax
c0020f9e:	89 c1                	mov    ecx,eax
c0020fa0:	74 27                	je     c0020fc9 <SysReadDir(regs*)+0x7a>
c0020fa2:	31 d2                	xor    edx,edx
c0020fa4:	83 f9 07             	cmp    ecx,0x7
c0020fa7:	b8 02 00 00 00       	mov    eax,0x2
c0020fac:	75 16                	jne    c0020fc4 <SysReadDir(regs*)+0x75>
c0020fae:	b8 01 00 00 00       	mov    eax,0x1
c0020fb3:	31 d2                	xor    edx,edx
c0020fb5:	83 c4 18             	add    esp,0x18
c0020fb8:	5b                   	pop    ebx
c0020fb9:	c3                   	ret    
c0020fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fc4:	83 c4 18             	add    esp,0x18
c0020fc7:	5b                   	pop    ebx
c0020fc8:	c3                   	ret    
c0020fc9:	31 c0                	xor    eax,eax
c0020fcb:	31 d2                	xor    edx,edx
c0020fcd:	eb e6                	jmp    c0020fb5 <SysReadDir(regs*)+0x66>

c0020fcf <SysIsATTY(regs*)>:
c0020fcf:	83 ec 0c             	sub    esp,0xc
c0020fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fd9:	83 f8 02             	cmp    eax,0x2
c0020fdc:	76 07                	jbe    c0020fe5 <SysIsATTY(regs*)+0x16>
c0020fde:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020fe3:	75 26                	jne    c002100b <SysIsATTY(regs*)+0x3c>
c0020fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020ff3:	85 c0                	test   eax,eax
c0020ff5:	74 24                	je     c002101b <SysIsATTY(regs*)+0x4c>
c0020ff7:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	50                   	push   eax
c0020ffd:	ff 12                	call   DWORD PTR [edx]
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	31 d2                	xor    edx,edx
c0021004:	83 c4 0c             	add    esp,0xc
c0021007:	0f b6 c0             	movzx  eax,al
c002100a:	c3                   	ret    
c002100b:	83 ec 0c             	sub    esp,0xc
c002100e:	50                   	push   eax
c002100f:	e8 4b 6e ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c0021014:	83 c4 10             	add    esp,0x10
c0021017:	85 c0                	test   eax,eax
c0021019:	75 dc                	jne    c0020ff7 <SysIsATTY(regs*)+0x28>
c002101b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021020:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021025:	83 c4 0c             	add    esp,0xc
c0021028:	c3                   	ret    

c0021029 <SysSeek(regs*)>:
c0021029:	56                   	push   esi
c002102a:	53                   	push   ebx
c002102b:	83 ec 04             	sub    esp,0x4
c002102e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021032:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021035:	8d 71 fd             	lea    esi,[ecx-0x3]
c0021038:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c002103e:	77 33                	ja     c0021073 <SysSeek(regs*)+0x4a>
c0021040:	83 ec 0c             	sub    esp,0xc
c0021043:	51                   	push   ecx
c0021044:	e8 16 6e ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c0021049:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002104c:	83 c4 0c             	add    esp,0xc
c002104f:	31 db                	xor    ebx,ebx
c0021051:	53                   	push   ebx
c0021052:	51                   	push   ecx
c0021053:	50                   	push   eax
c0021054:	e8 69 95 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0021059:	83 c4 10             	add    esp,0x10
c002105c:	85 c0                	test   eax,eax
c002105e:	0f 95 c0             	setne  al
c0021061:	31 d2                	xor    edx,edx
c0021063:	0f b6 c0             	movzx  eax,al
c0021066:	f7 d8                	neg    eax
c0021068:	83 d2 00             	adc    edx,0x0
c002106b:	83 c4 04             	add    esp,0x4
c002106e:	5b                   	pop    ebx
c002106f:	f7 da                	neg    edx
c0021071:	5e                   	pop    esi
c0021072:	c3                   	ret    
c0021073:	83 c4 04             	add    esp,0x4
c0021076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002107b:	5b                   	pop    ebx
c002107c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021081:	5e                   	pop    esi
c0021082:	c3                   	ret    

c0021083 <SysTell(regs*)>:
c0021083:	53                   	push   ebx
c0021084:	83 ec 08             	sub    esp,0x8
c0021087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002108b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002108e:	83 f8 02             	cmp    eax,0x2
c0021091:	76 4e                	jbe    c00210e1 <SysTell(regs*)+0x5e>
c0021093:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021098:	76 19                	jbe    c00210b3 <SysTell(regs*)+0x30>
c002109a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002109d:	31 d2                	xor    edx,edx
c002109f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210ac:	83 c4 08             	add    esp,0x8
c00210af:	31 c0                	xor    eax,eax
c00210b1:	5b                   	pop    ebx
c00210b2:	c3                   	ret    
c00210b3:	83 ec 0c             	sub    esp,0xc
c00210b6:	50                   	push   eax
c00210b7:	e8 a3 6d ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c00210bc:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00210bf:	5a                   	pop    edx
c00210c0:	59                   	pop    ecx
c00210c1:	53                   	push   ebx
c00210c2:	50                   	push   eax
c00210c3:	e8 a6 95 ff ff       	call   c001a66e <File::tell(unsigned long long*)>
c00210c8:	83 c4 10             	add    esp,0x10
c00210cb:	85 c0                	test   eax,eax
c00210cd:	0f 95 c0             	setne  al
c00210d0:	31 d2                	xor    edx,edx
c00210d2:	0f b6 c0             	movzx  eax,al
c00210d5:	f7 d8                	neg    eax
c00210d7:	83 d2 00             	adc    edx,0x0
c00210da:	83 c4 08             	add    esp,0x8
c00210dd:	5b                   	pop    ebx
c00210de:	f7 da                	neg    edx
c00210e0:	c3                   	ret    
c00210e1:	83 c4 08             	add    esp,0x8
c00210e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210e9:	5b                   	pop    ebx
c00210ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210ef:	c3                   	ret    

c00210f0 <SysSize(regs*)>:
c00210f0:	53                   	push   ebx
c00210f1:	83 ec 18             	sub    esp,0x18
c00210f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00210f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210fb:	83 f8 02             	cmp    eax,0x2
c00210fe:	76 54                	jbe    c0021154 <SysSize(regs*)+0x64>
c0021100:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021105:	76 19                	jbe    c0021120 <SysSize(regs*)+0x30>
c0021107:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002110a:	31 d2                	xor    edx,edx
c002110c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021112:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021119:	83 c4 18             	add    esp,0x18
c002111c:	31 c0                	xor    eax,eax
c002111e:	5b                   	pop    ebx
c002111f:	c3                   	ret    
c0021120:	83 ec 0c             	sub    esp,0xc
c0021123:	50                   	push   eax
c0021124:	e8 36 6d ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c0021129:	83 c4 0c             	add    esp,0xc
c002112c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021130:	52                   	push   edx
c0021131:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021134:	52                   	push   edx
c0021135:	50                   	push   eax
c0021136:	e8 cb 96 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c002113b:	83 c4 10             	add    esp,0x10
c002113e:	85 c0                	test   eax,eax
c0021140:	0f 95 c0             	setne  al
c0021143:	31 d2                	xor    edx,edx
c0021145:	0f b6 c0             	movzx  eax,al
c0021148:	f7 d8                	neg    eax
c002114a:	83 d2 00             	adc    edx,0x0
c002114d:	83 c4 18             	add    esp,0x18
c0021150:	5b                   	pop    ebx
c0021151:	f7 da                	neg    edx
c0021153:	c3                   	ret    
c0021154:	83 c4 18             	add    esp,0x18
c0021157:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002115c:	5b                   	pop    ebx
c002115d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021162:	c3                   	ret    

c0021163 <SysSizeFromFilename(regs*)>:
c0021163:	55                   	push   ebp
c0021164:	57                   	push   edi
c0021165:	56                   	push   esi
c0021166:	53                   	push   ebx
c0021167:	81 ec 4c 02 00 00    	sub    esp,0x24c
c002116d:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0021174:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021177:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002117a:	85 f6                	test   esi,esi
c002117c:	89 f8                	mov    eax,edi
c002117e:	74 09                	je     c0021189 <SysSizeFromFilename(regs*)+0x26>
c0021180:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021186:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021189:	83 f8 02             	cmp    eax,0x2
c002118c:	0f 86 ca 00 00 00    	jbe    c002125c <SysSizeFromFilename(regs*)+0xf9>
c0021192:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021197:	76 1f                	jbe    c00211b8 <SysSizeFromFilename(regs*)+0x55>
c0021199:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002119c:	31 d2                	xor    edx,edx
c002119e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ab:	31 c0                	xor    eax,eax
c00211ad:	81 c4 4c 02 00 00    	add    esp,0x24c
c00211b3:	5b                   	pop    ebx
c00211b4:	5e                   	pop    esi
c00211b5:	5f                   	pop    edi
c00211b6:	5d                   	pop    ebp
c00211b7:	c3                   	ret    
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	68 14 01 00 00       	push   0x114
c00211c0:	e8 d2 52 ff ff       	call   c0016497 <malloc>
c00211c5:	6a 01                	push   0x1
c00211c7:	89 c5                	mov    ebp,eax
c00211c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211ce:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00211d1:	51                   	push   ecx
c00211d2:	57                   	push   edi
c00211d3:	55                   	push   ebp
c00211d4:	e8 2f 92 ff ff       	call   c001a408 <File::File(char const*, Process*, bool)>
c00211d9:	83 c4 1c             	add    esp,0x1c
c00211dc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00211e0:	50                   	push   eax
c00211e1:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00211e4:	53                   	push   ebx
c00211e5:	55                   	push   ebp
c00211e6:	e8 1b 96 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	85 ed                	test   ebp,ebp
c00211f0:	89 c3                	mov    ebx,eax
c00211f2:	74 0d                	je     c0021201 <SysSizeFromFilename(regs*)+0x9e>
c00211f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00211f7:	83 ec 0c             	sub    esp,0xc
c00211fa:	55                   	push   ebp
c00211fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	85 db                	test   ebx,ebx
c0021203:	75 57                	jne    c002125c <SysSizeFromFilename(regs*)+0xf9>
c0021205:	6a 00                	push   0x0
c0021207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002120c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002120f:	05 0c 01 00 00       	add    eax,0x10c
c0021214:	50                   	push   eax
c0021215:	57                   	push   edi
c0021216:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002121d:	53                   	push   ebx
c002121e:	e8 b7 8f ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021223:	58                   	pop    eax
c0021224:	5a                   	pop    edx
c0021225:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021229:	50                   	push   eax
c002122a:	53                   	push   ebx
c002122b:	e8 12 8a ff ff       	call   c0019c42 <KeDereferenceSymlink(char const*, char*)>
c0021230:	83 c4 10             	add    esp,0x10
c0021233:	ba 00 00 00 00       	mov    edx,0x0
c0021238:	83 f8 01             	cmp    eax,0x1
c002123b:	b8 00 00 00 00       	mov    eax,0x0
c0021240:	74 2f                	je     c0021271 <SysSizeFromFilename(regs*)+0x10e>
c0021242:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021247:	74 3b                	je     c0021284 <SysSizeFromFilename(regs*)+0x121>
c0021249:	85 f6                	test   esi,esi
c002124b:	0f 84 5c ff ff ff    	je     c00211ad <SysSizeFromFilename(regs*)+0x4a>
c0021251:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021257:	e9 51 ff ff ff       	jmp    c00211ad <SysSizeFromFilename(regs*)+0x4a>
c002125c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021262:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021267:	5b                   	pop    ebx
c0021268:	ba ff ff ff ff       	mov    edx,0xffffffff
c002126d:	5e                   	pop    esi
c002126e:	5f                   	pop    edi
c002126f:	5d                   	pop    ebp
c0021270:	c3                   	ret    
c0021271:	85 f6                	test   esi,esi
c0021273:	0f 84 34 ff ff ff    	je     c00211ad <SysSizeFromFilename(regs*)+0x4a>
c0021279:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002127f:	e9 29 ff ff ff       	jmp    c00211ad <SysSizeFromFilename(regs*)+0x4a>
c0021284:	85 f6                	test   esi,esi
c0021286:	0f 84 21 ff ff ff    	je     c00211ad <SysSizeFromFilename(regs*)+0x4a>
c002128c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021292:	e9 16 ff ff ff       	jmp    c00211ad <SysSizeFromFilename(regs*)+0x4a>

c0021297 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021297:	55                   	push   ebp
c0021298:	57                   	push   edi
c0021299:	56                   	push   esi
c002129a:	53                   	push   ebx
c002129b:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00212a1:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00212a8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00212ab:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00212ae:	85 f6                	test   esi,esi
c00212b0:	89 f8                	mov    eax,edi
c00212b2:	74 09                	je     c00212bd <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00212b4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212bd:	83 f8 02             	cmp    eax,0x2
c00212c0:	0f 86 ca 00 00 00    	jbe    c0021390 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00212c6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212cb:	76 1f                	jbe    c00212ec <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00212cd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212d0:	31 d2                	xor    edx,edx
c00212d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212df:	31 c0                	xor    eax,eax
c00212e1:	81 c4 4c 02 00 00    	add    esp,0x24c
c00212e7:	5b                   	pop    ebx
c00212e8:	5e                   	pop    esi
c00212e9:	5f                   	pop    edi
c00212ea:	5d                   	pop    ebp
c00212eb:	c3                   	ret    
c00212ec:	83 ec 0c             	sub    esp,0xc
c00212ef:	68 14 01 00 00       	push   0x114
c00212f4:	e8 9e 51 ff ff       	call   c0016497 <malloc>
c00212f9:	6a 00                	push   0x0
c00212fb:	89 c5                	mov    ebp,eax
c00212fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021302:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021305:	51                   	push   ecx
c0021306:	57                   	push   edi
c0021307:	55                   	push   ebp
c0021308:	e8 fb 90 ff ff       	call   c001a408 <File::File(char const*, Process*, bool)>
c002130d:	83 c4 1c             	add    esp,0x1c
c0021310:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021314:	50                   	push   eax
c0021315:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021318:	53                   	push   ebx
c0021319:	55                   	push   ebp
c002131a:	e8 e7 94 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c002131f:	83 c4 10             	add    esp,0x10
c0021322:	85 ed                	test   ebp,ebp
c0021324:	89 c3                	mov    ebx,eax
c0021326:	74 0d                	je     c0021335 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0021328:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002132b:	83 ec 0c             	sub    esp,0xc
c002132e:	55                   	push   ebp
c002132f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	85 db                	test   ebx,ebx
c0021337:	75 57                	jne    c0021390 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021339:	6a 00                	push   0x0
c002133b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021340:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021343:	05 0c 01 00 00       	add    eax,0x10c
c0021348:	50                   	push   eax
c0021349:	57                   	push   edi
c002134a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021351:	53                   	push   ebx
c0021352:	e8 83 8e ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021357:	58                   	pop    eax
c0021358:	5a                   	pop    edx
c0021359:	8d 44 24 18          	lea    eax,[esp+0x18]
c002135d:	50                   	push   eax
c002135e:	53                   	push   ebx
c002135f:	e8 de 88 ff ff       	call   c0019c42 <KeDereferenceSymlink(char const*, char*)>
c0021364:	83 c4 10             	add    esp,0x10
c0021367:	ba 00 00 00 00       	mov    edx,0x0
c002136c:	83 f8 01             	cmp    eax,0x1
c002136f:	b8 00 00 00 00       	mov    eax,0x0
c0021374:	74 2f                	je     c00213a5 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0021376:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002137b:	74 3b                	je     c00213b8 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c002137d:	85 f6                	test   esi,esi
c002137f:	0f 84 5c ff ff ff    	je     c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021385:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002138b:	e9 51 ff ff ff       	jmp    c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021390:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021396:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002139b:	5b                   	pop    ebx
c002139c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213a1:	5e                   	pop    esi
c00213a2:	5f                   	pop    edi
c00213a3:	5d                   	pop    ebp
c00213a4:	c3                   	ret    
c00213a5:	85 f6                	test   esi,esi
c00213a7:	0f 84 34 ff ff ff    	je     c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213ad:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00213b3:	e9 29 ff ff ff       	jmp    c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213b8:	85 f6                	test   esi,esi
c00213ba:	0f 84 21 ff ff ff    	je     c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213c0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213c6:	e9 16 ff ff ff       	jmp    c00212e1 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00213cb <SysClose(regs*)>:
c00213cb:	53                   	push   ebx
c00213cc:	83 ec 08             	sub    esp,0x8
c00213cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213d6:	83 f8 02             	cmp    eax,0x2
c00213d9:	76 41                	jbe    c002141c <SysClose(regs*)+0x51>
c00213db:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00213e1:	83 fa 01             	cmp    edx,0x1
c00213e4:	76 2d                	jbe    c0021413 <SysClose(regs*)+0x48>
c00213e6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213eb:	77 2f                	ja     c002141c <SysClose(regs*)+0x51>
c00213ed:	83 ec 0c             	sub    esp,0xc
c00213f0:	50                   	push   eax
c00213f1:	e8 69 6a ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c00213f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00213f9:	89 c3                	mov    ebx,eax
c00213fb:	e8 62 91 ff ff       	call   c001a562 <File::close()>
c0021400:	83 c4 10             	add    esp,0x10
c0021403:	85 db                	test   ebx,ebx
c0021405:	74 0c                	je     c0021413 <SysClose(regs*)+0x48>
c0021407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021409:	83 ec 0c             	sub    esp,0xc
c002140c:	53                   	push   ebx
c002140d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021410:	83 c4 10             	add    esp,0x10
c0021413:	83 c4 08             	add    esp,0x8
c0021416:	31 c0                	xor    eax,eax
c0021418:	5b                   	pop    ebx
c0021419:	31 d2                	xor    edx,edx
c002141b:	c3                   	ret    
c002141c:	83 c4 08             	add    esp,0x8
c002141f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021424:	5b                   	pop    ebx
c0021425:	ba ff ff ff ff       	mov    edx,0xffffffff
c002142a:	c3                   	ret    

c002142b <SysOpenDir(regs*)>:
c002142b:	56                   	push   esi
c002142c:	53                   	push   ebx
c002142d:	83 ec 04             	sub    esp,0x4
c0021430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021434:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021437:	85 c9                	test   ecx,ecx
c0021439:	74 5d                	je     c0021498 <SysOpenDir(regs*)+0x6d>
c002143b:	83 ec 0c             	sub    esp,0xc
c002143e:	68 14 01 00 00       	push   0x114
c0021443:	e8 4f 50 ff ff       	call   c0016497 <malloc>
c0021448:	83 c4 0c             	add    esp,0xc
c002144b:	89 c6                	mov    esi,eax
c002144d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021452:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021455:	50                   	push   eax
c0021456:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021459:	52                   	push   edx
c002145a:	56                   	push   esi
c002145b:	e8 66 95 ff ff       	call   c001a9c6 <Directory::Directory(char const*, Process*)>
c0021460:	83 c4 10             	add    esp,0x10
c0021463:	85 f6                	test   esi,esi
c0021465:	74 31                	je     c0021498 <SysOpenDir(regs*)+0x6d>
c0021467:	83 ec 0c             	sub    esp,0xc
c002146a:	56                   	push   esi
c002146b:	e8 1e 96 ff ff       	call   c001aa8e <Directory::open()>
c0021470:	83 c4 10             	add    esp,0x10
c0021473:	85 c0                	test   eax,eax
c0021475:	75 21                	jne    c0021498 <SysOpenDir(regs*)+0x6d>
c0021477:	83 ec 0c             	sub    esp,0xc
c002147a:	56                   	push   esi
c002147b:	e8 e2 66 ff ff       	call   c0017b62 <UnixFile::getFileDescriptor()>
c0021480:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021483:	83 c4 10             	add    esp,0x10
c0021486:	89 02                	mov    DWORD PTR [edx],eax
c0021488:	c1 f8 1f             	sar    eax,0x1f
c002148b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002148e:	83 c4 04             	add    esp,0x4
c0021491:	31 c0                	xor    eax,eax
c0021493:	5b                   	pop    ebx
c0021494:	31 d2                	xor    edx,edx
c0021496:	5e                   	pop    esi
c0021497:	c3                   	ret    
c0021498:	83 c4 04             	add    esp,0x4
c002149b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214a0:	5b                   	pop    ebx
c00214a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214a6:	5e                   	pop    esi
c00214a7:	c3                   	ret    

c00214a8 <SysMakeDir(regs*)>:
c00214a8:	56                   	push   esi
c00214a9:	53                   	push   ebx
c00214aa:	83 ec 10             	sub    esp,0x10
c00214ad:	68 14 01 00 00       	push   0x114
c00214b2:	e8 e0 4f ff ff       	call   c0016497 <malloc>
c00214b7:	83 c4 0c             	add    esp,0xc
c00214ba:	89 c3                	mov    ebx,eax
c00214bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214c4:	50                   	push   eax
c00214c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214c9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00214cc:	52                   	push   edx
c00214cd:	53                   	push   ebx
c00214ce:	e8 f3 94 ff ff       	call   c001a9c6 <Directory::Directory(char const*, Process*)>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	85 db                	test   ebx,ebx
c00214d8:	74 2c                	je     c0021506 <SysMakeDir(regs*)+0x5e>
c00214da:	83 ec 0c             	sub    esp,0xc
c00214dd:	53                   	push   ebx
c00214de:	e8 8b 97 ff ff       	call   c001ac6e <Directory::create()>
c00214e3:	89 c6                	mov    esi,eax
c00214e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00214e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00214ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00214ed:	83 c4 10             	add    esp,0x10
c00214f0:	31 c0                	xor    eax,eax
c00214f2:	85 f6                	test   esi,esi
c00214f4:	0f 95 c0             	setne  al
c00214f7:	31 d2                	xor    edx,edx
c00214f9:	f7 d8                	neg    eax
c00214fb:	83 d2 00             	adc    edx,0x0
c00214fe:	83 c4 04             	add    esp,0x4
c0021501:	5b                   	pop    ebx
c0021502:	f7 da                	neg    edx
c0021504:	5e                   	pop    esi
c0021505:	c3                   	ret    
c0021506:	83 c4 04             	add    esp,0x4
c0021509:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002150e:	5b                   	pop    ebx
c002150f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021514:	5e                   	pop    esi
c0021515:	c3                   	ret    

c0021516 <SysCloseDir(regs*)>:
c0021516:	53                   	push   ebx
c0021517:	ba ff ff ff ff       	mov    edx,0xffffffff
c002151c:	83 ec 08             	sub    esp,0x8
c002151f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021523:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0021526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002152b:	8d 59 fd             	lea    ebx,[ecx-0x3]
c002152e:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0021534:	77 2a                	ja     c0021560 <SysCloseDir(regs*)+0x4a>
c0021536:	83 ec 0c             	sub    esp,0xc
c0021539:	51                   	push   ecx
c002153a:	e8 20 69 ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c002153f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021542:	89 c3                	mov    ebx,eax
c0021544:	e8 a1 95 ff ff       	call   c001aaea <Directory::close()>
c0021549:	83 c4 10             	add    esp,0x10
c002154c:	85 db                	test   ebx,ebx
c002154e:	74 0c                	je     c002155c <SysCloseDir(regs*)+0x46>
c0021550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021552:	83 ec 0c             	sub    esp,0xc
c0021555:	53                   	push   ebx
c0021556:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021559:	83 c4 10             	add    esp,0x10
c002155c:	31 c0                	xor    eax,eax
c002155e:	31 d2                	xor    edx,edx
c0021560:	83 c4 08             	add    esp,0x8
c0021563:	5b                   	pop    ebx
c0021564:	c3                   	ret    

c0021565 <SysWait(regs*)>:
c0021565:	83 ec 10             	sub    esp,0x10
c0021568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002156c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c002156f:	52                   	push   edx
c0021570:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021573:	51                   	push   ecx
c0021574:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021577:	50                   	push   eax
c0021578:	e8 13 3e 00 00       	call   c0025390 <waitTask(int, int*, int)>
c002157d:	83 c4 1c             	add    esp,0x1c
c0021580:	89 c2                	mov    edx,eax
c0021582:	c1 fa 1f             	sar    edx,0x1f
c0021585:	c3                   	ret    

c0021586 <SysNotImpl(regs*)>:
c0021586:	83 ec 18             	sub    esp,0x18
c0021589:	68 a4 2a 03 c0       	push   0xc0032aa4
c002158e:	e8 c3 ec ff ff       	call   c0020256 <KePanic(char const*)>
c0021593:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021598:	ba ff ff ff ff       	mov    edx,0xffffffff
c002159d:	83 c4 1c             	add    esp,0x1c
c00215a0:	c3                   	ret    

c00215a1 <SysPanic(regs*)>:
c00215a1:	83 ec 18             	sub    esp,0x18
c00215a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00215ab:	50                   	push   eax
c00215ac:	e8 a5 ec ff ff       	call   c0020256 <KePanic(char const*)>
c00215b1:	b8 01 00 00 00       	mov    eax,0x1
c00215b6:	31 d2                	xor    edx,edx
c00215b8:	83 c4 1c             	add    esp,0x1c
c00215bb:	c3                   	ret    

c00215bc <SysRmdir(regs*)>:
c00215bc:	56                   	push   esi
c00215bd:	53                   	push   ebx
c00215be:	83 ec 10             	sub    esp,0x10
c00215c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215c5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00215c8:	68 14 01 00 00       	push   0x114
c00215cd:	e8 c5 4e ff ff       	call   c0016497 <malloc>
c00215d2:	6a 00                	push   0x0
c00215d4:	89 c3                	mov    ebx,eax
c00215d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215de:	50                   	push   eax
c00215df:	56                   	push   esi
c00215e0:	53                   	push   ebx
c00215e1:	e8 22 8e ff ff       	call   c001a408 <File::File(char const*, Process*, bool)>
c00215e6:	83 c4 14             	add    esp,0x14
c00215e9:	53                   	push   ebx
c00215ea:	e8 e3 90 ff ff       	call   c001a6d2 <File::unlink()>
c00215ef:	83 c4 10             	add    esp,0x10
c00215f2:	85 db                	test   ebx,ebx
c00215f4:	89 c6                	mov    esi,eax
c00215f6:	74 0c                	je     c0021604 <SysRmdir(regs*)+0x48>
c00215f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215fa:	83 ec 0c             	sub    esp,0xc
c00215fd:	53                   	push   ebx
c00215fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021601:	83 c4 10             	add    esp,0x10
c0021604:	31 c0                	xor    eax,eax
c0021606:	85 f6                	test   esi,esi
c0021608:	0f 95 c0             	setne  al
c002160b:	31 d2                	xor    edx,edx
c002160d:	f7 d8                	neg    eax
c002160f:	83 d2 00             	adc    edx,0x0
c0021612:	83 c4 04             	add    esp,0x4
c0021615:	5b                   	pop    ebx
c0021616:	f7 da                	neg    edx
c0021618:	5e                   	pop    esi
c0021619:	c3                   	ret    

c002161a <SysUnlink(regs*)>:
c002161a:	56                   	push   esi
c002161b:	53                   	push   ebx
c002161c:	83 ec 10             	sub    esp,0x10
c002161f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021623:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021626:	68 14 01 00 00       	push   0x114
c002162b:	e8 67 4e ff ff       	call   c0016497 <malloc>
c0021630:	6a 00                	push   0x0
c0021632:	89 c3                	mov    ebx,eax
c0021634:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021639:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002163c:	50                   	push   eax
c002163d:	56                   	push   esi
c002163e:	53                   	push   ebx
c002163f:	e8 c4 8d ff ff       	call   c001a408 <File::File(char const*, Process*, bool)>
c0021644:	83 c4 14             	add    esp,0x14
c0021647:	53                   	push   ebx
c0021648:	e8 85 90 ff ff       	call   c001a6d2 <File::unlink()>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	85 db                	test   ebx,ebx
c0021652:	89 c6                	mov    esi,eax
c0021654:	74 0c                	je     c0021662 <SysUnlink(regs*)+0x48>
c0021656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	53                   	push   ebx
c002165c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	31 c0                	xor    eax,eax
c0021664:	85 f6                	test   esi,esi
c0021666:	0f 95 c0             	setne  al
c0021669:	31 d2                	xor    edx,edx
c002166b:	f7 d8                	neg    eax
c002166d:	83 d2 00             	adc    edx,0x0
c0021670:	83 c4 04             	add    esp,0x4
c0021673:	5b                   	pop    ebx
c0021674:	f7 da                	neg    edx
c0021676:	5e                   	pop    esi
c0021677:	c3                   	ret    

c0021678 <SysGetArgv(regs*)>:
c0021678:	83 ec 0c             	sub    esp,0xc
c002167b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002167f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021682:	85 c0                	test   eax,eax
c0021684:	78 2c                	js     c00216b2 <SysGetArgv(regs*)+0x3a>
c0021686:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002168c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002168f:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021695:	7d 1b                	jge    c00216b2 <SysGetArgv(regs*)+0x3a>
c0021697:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c002169e:	85 c0                	test   eax,eax
c00216a0:	74 18                	je     c00216ba <SysGetArgv(regs*)+0x42>
c00216a2:	83 ec 08             	sub    esp,0x8
c00216a5:	50                   	push   eax
c00216a6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00216a9:	50                   	push   eax
c00216aa:	e8 a1 ef fd ff       	call   c0000650 <strcpy>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	31 c0                	xor    eax,eax
c00216b4:	31 d2                	xor    edx,edx
c00216b6:	83 c4 0c             	add    esp,0xc
c00216b9:	c3                   	ret    
c00216ba:	b8 01 00 00 00       	mov    eax,0x1
c00216bf:	31 d2                	xor    edx,edx
c00216c1:	83 c4 0c             	add    esp,0xc
c00216c4:	c3                   	ret    

c00216c5 <SysUSleep(regs*)>:
c00216c5:	83 ec 1c             	sub    esp,0x1c
c00216c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00216cc:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00216cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00216d2:	6a 00                	push   0x0
c00216d4:	6a 64                	push   0x64
c00216d6:	52                   	push   edx
c00216d7:	50                   	push   eax
c00216d8:	e8 23 d0 00 00       	call   c002e700 <__udivdi3>
c00216dd:	83 c4 14             	add    esp,0x14
c00216e0:	50                   	push   eax
c00216e1:	e8 8e 3d 00 00       	call   c0025474 <milliTenthSleep(unsigned int)>
c00216e6:	31 c0                	xor    eax,eax
c00216e8:	31 d2                	xor    edx,edx
c00216ea:	83 c4 1c             	add    esp,0x1c
c00216ed:	c3                   	ret    

c00216ee <SysSpawn(regs*)>:
c00216ee:	56                   	push   esi
c00216ef:	53                   	push   ebx
c00216f0:	83 ec 04             	sub    esp,0x4
c00216f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216f7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216fa:	85 f6                	test   esi,esi
c00216fc:	75 0a                	jne    c0021708 <SysSpawn(regs*)+0x1a>
c00216fe:	83 c4 04             	add    esp,0x4
c0021701:	31 c0                	xor    eax,eax
c0021703:	5b                   	pop    ebx
c0021704:	31 d2                	xor    edx,edx
c0021706:	5e                   	pop    esi
c0021707:	c3                   	ret    
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	68 24 07 00 00       	push   0x724
c0021710:	e8 82 4d ff ff       	call   c0016497 <malloc>
c0021715:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021718:	83 c4 10             	add    esp,0x10
c002171b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002171e:	89 c6                	mov    esi,eax
c0021720:	31 c0                	xor    eax,eax
c0021722:	85 c9                	test   ecx,ecx
c0021724:	75 08                	jne    c002172e <SysSpawn(regs*)+0x40>
c0021726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002172b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002172e:	52                   	push   edx
c002172f:	50                   	push   eax
c0021730:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021733:	50                   	push   eax
c0021734:	56                   	push   esi
c0021735:	e8 e2 34 00 00       	call   c0024c1c <Process::Process(char const*, Process*, char**)>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021744:	75 b8                	jne    c00216fe <SysSpawn(regs*)+0x10>
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	56                   	push   esi
c002174a:	e8 09 3a 00 00       	call   c0025158 <Process::createUserThread()>
c002174f:	8b 06                	mov    eax,DWORD PTR [esi]
c0021751:	83 c4 10             	add    esp,0x10
c0021754:	83 c4 04             	add    esp,0x4
c0021757:	5b                   	pop    ebx
c0021758:	89 c2                	mov    edx,eax
c002175a:	c1 fa 1f             	sar    edx,0x1f
c002175d:	5e                   	pop    esi
c002175e:	c3                   	ret    

c002175f <SysGetEnv(regs*)>:
c002175f:	57                   	push   edi
c0021760:	56                   	push   esi
c0021761:	53                   	push   ebx
c0021762:	83 ec 1c             	sub    esp,0x1c
c0021765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002176a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002176e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021771:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021774:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021777:	51                   	push   ecx
c0021778:	e8 76 e9 ff ff       	call   c00200f3 <KeGetProcessTotalEnvCount(Process*)>
c002177d:	83 c4 10             	add    esp,0x10
c0021780:	39 c7                	cmp    edi,eax
c0021782:	7c 12                	jl     c0021796 <SysGetEnv(regs*)+0x37>
c0021784:	31 c0                	xor    eax,eax
c0021786:	31 d2                	xor    edx,edx
c0021788:	85 f6                	test   esi,esi
c002178a:	74 03                	je     c002178f <SysGetEnv(regs*)+0x30>
c002178c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	5b                   	pop    ebx
c0021793:	5e                   	pop    esi
c0021794:	5f                   	pop    edi
c0021795:	c3                   	ret    
c0021796:	8d 44 24 08          	lea    eax,[esp+0x8]
c002179a:	83 ec 04             	sub    esp,0x4
c002179d:	57                   	push   edi
c002179e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00217a4:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00217a7:	57                   	push   edi
c00217a8:	50                   	push   eax
c00217a9:	e8 65 e9 ff ff       	call   c0020113 <KeGetProcessEnvPair(Process*, int)>
c00217ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00217b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00217b9:	83 c4 0c             	add    esp,0xc
c00217bc:	85 d2                	test   edx,edx
c00217be:	75 23                	jne    c00217e3 <SysGetEnv(regs*)+0x84>
c00217c0:	83 ec 0c             	sub    esp,0xc
c00217c3:	50                   	push   eax
c00217c4:	e8 b7 ed fd ff       	call   c0000580 <strlen>
c00217c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00217cc:	89 c3                	mov    ebx,eax
c00217ce:	e8 ad ed fd ff       	call   c0000580 <strlen>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	31 d2                	xor    edx,edx
c00217d8:	83 c4 10             	add    esp,0x10
c00217db:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00217df:	5b                   	pop    ebx
c00217e0:	5e                   	pop    esi
c00217e1:	5f                   	pop    edi
c00217e2:	c3                   	ret    
c00217e3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217e6:	83 ec 08             	sub    esp,0x8
c00217e9:	50                   	push   eax
c00217ea:	56                   	push   esi
c00217eb:	e8 60 ee fd ff       	call   c0000650 <strcpy>
c00217f0:	58                   	pop    eax
c00217f1:	5a                   	pop    edx
c00217f2:	68 be 2a 03 c0       	push   0xc0032abe
c00217f7:	56                   	push   esi
c00217f8:	e8 73 f0 fd ff       	call   c0000870 <strcat>
c00217fd:	59                   	pop    ecx
c00217fe:	5b                   	pop    ebx
c00217ff:	57                   	push   edi
c0021800:	56                   	push   esi
c0021801:	e8 6a f0 fd ff       	call   c0000870 <strcat>
c0021806:	83 c4 10             	add    esp,0x10
c0021809:	31 c0                	xor    eax,eax
c002180b:	83 c4 10             	add    esp,0x10
c002180e:	31 d2                	xor    edx,edx
c0021810:	5b                   	pop    ebx
c0021811:	5e                   	pop    esi
c0021812:	5f                   	pop    edi
c0021813:	c3                   	ret    

c0021814 <SysSetFatAttrib(regs*)>:
c0021814:	57                   	push   edi
c0021815:	56                   	push   esi
c0021816:	53                   	push   ebx
c0021817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002181b:	83 ec 0c             	sub    esp,0xc
c002181e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021821:	68 14 01 00 00       	push   0x114
c0021826:	e8 6c 4c ff ff       	call   c0016497 <malloc>
c002182b:	83 c4 0c             	add    esp,0xc
c002182e:	89 c3                	mov    ebx,eax
c0021830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021838:	50                   	push   eax
c0021839:	57                   	push   edi
c002183a:	53                   	push   ebx
c002183b:	e8 a6 8c ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0021840:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021843:	83 c4 0c             	add    esp,0xc
c0021846:	0f b6 d4             	movzx  edx,ah
c0021849:	0f b6 c0             	movzx  eax,al
c002184c:	52                   	push   edx
c002184d:	50                   	push   eax
c002184e:	53                   	push   ebx
c002184f:	e8 18 8f ff ff       	call   c001a76c <File::chfatattr(unsigned char, unsigned char)>
c0021854:	83 c4 10             	add    esp,0x10
c0021857:	85 db                	test   ebx,ebx
c0021859:	89 c6                	mov    esi,eax
c002185b:	74 0c                	je     c0021869 <SysSetFatAttrib(regs*)+0x55>
c002185d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002185f:	83 ec 0c             	sub    esp,0xc
c0021862:	53                   	push   ebx
c0021863:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021866:	83 c4 10             	add    esp,0x10
c0021869:	5b                   	pop    ebx
c002186a:	31 c0                	xor    eax,eax
c002186c:	85 f6                	test   esi,esi
c002186e:	0f 95 c0             	setne  al
c0021871:	31 d2                	xor    edx,edx
c0021873:	5e                   	pop    esi
c0021874:	f7 d8                	neg    eax
c0021876:	83 d2 00             	adc    edx,0x0
c0021879:	f7 da                	neg    edx
c002187b:	5f                   	pop    edi
c002187c:	c3                   	ret    

c002187d <SysPipe(regs*)>:
c002187d:	57                   	push   edi
c002187e:	56                   	push   esi
c002187f:	53                   	push   ebx
c0021880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021884:	83 ec 0c             	sub    esp,0xc
c0021887:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c002188a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002188d:	6a 20                	push   0x20
c002188f:	e8 03 4c ff ff       	call   c0016497 <malloc>
c0021894:	89 c3                	mov    ebx,eax
c0021896:	58                   	pop    eax
c0021897:	5a                   	pop    edx
c0021898:	68 00 50 00 00       	push   0x5000
c002189d:	53                   	push   ebx
c002189e:	e8 5f 55 ff ff       	call   c0016e02 <Pipe::Pipe(int)>
c00218a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218a6:	e8 b7 62 ff ff       	call   c0017b62 <UnixFile::getFileDescriptor()>
c00218ab:	89 07                	mov    DWORD PTR [edi],eax
c00218ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218b0:	e8 ad 62 ff ff       	call   c0017b62 <UnixFile::getFileDescriptor()>
c00218b5:	83 c4 10             	add    esp,0x10
c00218b8:	31 d2                	xor    edx,edx
c00218ba:	89 06                	mov    DWORD PTR [esi],eax
c00218bc:	31 c0                	xor    eax,eax
c00218be:	5b                   	pop    ebx
c00218bf:	5e                   	pop    esi
c00218c0:	5f                   	pop    edi
c00218c1:	c3                   	ret    

c00218c2 <SysGetUnixTime(regs*)>:
c00218c2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00218c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218d1:	e9 dc 95 ff ff       	jmp    c001aeb2 <Clock::timeInSecondsLocal()>

c00218d6 <string_ends_with(char const*, char const*)>:
c00218d6:	57                   	push   edi
c00218d7:	56                   	push   esi
c00218d8:	53                   	push   ebx
c00218d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218dd:	83 ec 0c             	sub    esp,0xc
c00218e0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218e4:	53                   	push   ebx
c00218e5:	e8 96 ec fd ff       	call   c0000580 <strlen>
c00218ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00218ed:	89 c6                	mov    esi,eax
c00218ef:	e8 8c ec fd ff       	call   c0000580 <strlen>
c00218f4:	83 c4 10             	add    esp,0x10
c00218f7:	31 d2                	xor    edx,edx
c00218f9:	39 c6                	cmp    esi,eax
c00218fb:	7d 06                	jge    c0021903 <string_ends_with(char const*, char const*)+0x2d>
c00218fd:	5b                   	pop    ebx
c00218fe:	89 d0                	mov    eax,edx
c0021900:	5e                   	pop    esi
c0021901:	5f                   	pop    edi
c0021902:	c3                   	ret    
c0021903:	83 ec 08             	sub    esp,0x8
c0021906:	29 c6                	sub    esi,eax
c0021908:	57                   	push   edi
c0021909:	01 f3                	add    ebx,esi
c002190b:	53                   	push   ebx
c002190c:	e8 6f ee fd ff       	call   c0000780 <strcmp>
c0021911:	83 c4 10             	add    esp,0x10
c0021914:	31 d2                	xor    edx,edx
c0021916:	5b                   	pop    ebx
c0021917:	5e                   	pop    esi
c0021918:	85 c0                	test   eax,eax
c002191a:	5f                   	pop    edi
c002191b:	0f 94 c2             	sete   dl
c002191e:	89 d0                	mov    eax,edx
c0021920:	c3                   	ret    

c0021921 <SysOpen(regs*)>:
c0021921:	56                   	push   esi
c0021922:	53                   	push   ebx
c0021923:	81 ec 04 01 00 00    	sub    esp,0x104
c0021929:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021930:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021933:	85 c0                	test   eax,eax
c0021935:	0f 84 c4 01 00 00    	je     c0021aff <SysOpen(regs*)+0x1de>
c002193b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002193e:	85 c0                	test   eax,eax
c0021940:	0f 84 b9 01 00 00    	je     c0021aff <SysOpen(regs*)+0x1de>
c0021946:	6a 00                	push   0x0
c0021948:	68 c0 2a 03 c0       	push   0xc0032ac0
c002194d:	50                   	push   eax
c002194e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021952:	56                   	push   esi
c0021953:	e8 82 88 ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021958:	89 34 24             	mov    DWORD PTR [esp],esi
c002195b:	e8 20 ec fd ff       	call   c0000580 <strlen>
c0021960:	83 c4 10             	add    esp,0x10
c0021963:	83 e8 01             	sub    eax,0x1
c0021966:	74 29                	je     c0021991 <SysOpen(regs*)+0x70>
c0021968:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c002196c:	83 fa 2e             	cmp    edx,0x2e
c002196f:	74 1c                	je     c002198d <SysOpen(regs*)+0x6c>
c0021971:	83 fa 3a             	cmp    edx,0x3a
c0021974:	74 17                	je     c002198d <SysOpen(regs*)+0x6c>
c0021976:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c002197a:	83 e8 01             	sub    eax,0x1
c002197d:	74 12                	je     c0021991 <SysOpen(regs*)+0x70>
c002197f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021983:	83 fa 3a             	cmp    edx,0x3a
c0021986:	74 05                	je     c002198d <SysOpen(regs*)+0x6c>
c0021988:	83 fa 2e             	cmp    edx,0x2e
c002198b:	75 e9                	jne    c0021976 <SysOpen(regs*)+0x55>
c002198d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021991:	83 ec 08             	sub    esp,0x8
c0021994:	68 c4 2a 03 c0       	push   0xc0032ac4
c0021999:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002199c:	50                   	push   eax
c002199d:	e8 34 ff ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c00219a2:	83 c4 10             	add    esp,0x10
c00219a5:	85 c0                	test   eax,eax
c00219a7:	74 1d                	je     c00219c6 <SysOpen(regs*)+0xa5>
c00219a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00219ac:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00219b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219b9:	81 c4 04 01 00 00    	add    esp,0x104
c00219bf:	31 c0                	xor    eax,eax
c00219c1:	5b                   	pop    ebx
c00219c2:	31 d2                	xor    edx,edx
c00219c4:	5e                   	pop    esi
c00219c5:	c3                   	ret    
c00219c6:	83 ec 08             	sub    esp,0x8
c00219c9:	68 c9 2a 03 c0       	push   0xc0032ac9
c00219ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219d1:	50                   	push   eax
c00219d2:	e8 ff fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c00219d7:	83 c4 10             	add    esp,0x10
c00219da:	85 c0                	test   eax,eax
c00219dc:	75 cb                	jne    c00219a9 <SysOpen(regs*)+0x88>
c00219de:	83 ec 08             	sub    esp,0x8
c00219e1:	68 c5 2a 03 c0       	push   0xc0032ac5
c00219e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219e9:	50                   	push   eax
c00219ea:	e8 91 ed fd ff       	call   c0000780 <strcmp>
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	85 c0                	test   eax,eax
c00219f4:	74 b3                	je     c00219a9 <SysOpen(regs*)+0x88>
c00219f6:	83 ec 08             	sub    esp,0x8
c00219f9:	68 c4 2a 03 c0       	push   0xc0032ac4
c00219fe:	56                   	push   esi
c00219ff:	e8 d2 fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a04:	83 c4 10             	add    esp,0x10
c0021a07:	85 c0                	test   eax,eax
c0021a09:	75 9e                	jne    c00219a9 <SysOpen(regs*)+0x88>
c0021a0b:	83 ec 08             	sub    esp,0x8
c0021a0e:	68 ce 2a 03 c0       	push   0xc0032ace
c0021a13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a16:	50                   	push   eax
c0021a17:	e8 ba fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	85 c0                	test   eax,eax
c0021a21:	0f 85 eb 00 00 00    	jne    c0021b12 <SysOpen(regs*)+0x1f1>
c0021a27:	83 ec 08             	sub    esp,0x8
c0021a2a:	68 d3 2a 03 c0       	push   0xc0032ad3
c0021a2f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a32:	50                   	push   eax
c0021a33:	e8 9e fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	85 c0                	test   eax,eax
c0021a3d:	0f 85 cf 00 00 00    	jne    c0021b12 <SysOpen(regs*)+0x1f1>
c0021a43:	83 ec 08             	sub    esp,0x8
c0021a46:	68 cf 2a 03 c0       	push   0xc0032acf
c0021a4b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021a4e:	51                   	push   ecx
c0021a4f:	e8 2c ed fd ff       	call   c0000780 <strcmp>
c0021a54:	83 c4 10             	add    esp,0x10
c0021a57:	85 c0                	test   eax,eax
c0021a59:	0f 84 b3 00 00 00    	je     c0021b12 <SysOpen(regs*)+0x1f1>
c0021a5f:	83 ec 08             	sub    esp,0x8
c0021a62:	68 ce 2a 03 c0       	push   0xc0032ace
c0021a67:	56                   	push   esi
c0021a68:	e8 69 fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	85 c0                	test   eax,eax
c0021a72:	0f 85 9a 00 00 00    	jne    c0021b12 <SysOpen(regs*)+0x1f1>
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	68 14 01 00 00       	push   0x114
c0021a80:	e8 12 4a ff ff       	call   c0016497 <malloc>
c0021a85:	83 c4 0c             	add    esp,0xc
c0021a88:	89 c6                	mov    esi,eax
c0021a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a92:	50                   	push   eax
c0021a93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021a96:	52                   	push   edx
c0021a97:	56                   	push   esi
c0021a98:	e8 49 8a ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0021a9d:	83 c4 10             	add    esp,0x10
c0021aa0:	85 f6                	test   esi,esi
c0021aa2:	74 5b                	je     c0021aff <SysOpen(regs*)+0x1de>
c0021aa4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021aa7:	0f b6 c2             	movzx  eax,dl
c0021aaa:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021aad:	89 d0                	mov    eax,edx
c0021aaf:	83 e0 01             	and    eax,0x1
c0021ab2:	f6 c2 02             	test   dl,0x2
c0021ab5:	74 03                	je     c0021aba <SysOpen(regs*)+0x199>
c0021ab7:	83 c8 02             	or     eax,0x2
c0021aba:	f6 c2 04             	test   dl,0x4
c0021abd:	74 03                	je     c0021ac2 <SysOpen(regs*)+0x1a1>
c0021abf:	83 c8 04             	or     eax,0x4
c0021ac2:	f6 c2 08             	test   dl,0x8
c0021ac5:	74 03                	je     c0021aca <SysOpen(regs*)+0x1a9>
c0021ac7:	83 c8 0a             	or     eax,0xa
c0021aca:	80 e2 10             	and    dl,0x10
c0021acd:	74 03                	je     c0021ad2 <SysOpen(regs*)+0x1b1>
c0021acf:	83 c8 12             	or     eax,0x12
c0021ad2:	83 ec 08             	sub    esp,0x8
c0021ad5:	50                   	push   eax
c0021ad6:	56                   	push   esi
c0021ad7:	e8 28 8a ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0021adc:	83 c4 10             	add    esp,0x10
c0021adf:	85 c0                	test   eax,eax
c0021ae1:	75 1c                	jne    c0021aff <SysOpen(regs*)+0x1de>
c0021ae3:	83 ec 0c             	sub    esp,0xc
c0021ae6:	56                   	push   esi
c0021ae7:	e8 76 60 ff ff       	call   c0017b62 <UnixFile::getFileDescriptor()>
c0021aec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021aef:	83 c4 10             	add    esp,0x10
c0021af2:	89 02                	mov    DWORD PTR [edx],eax
c0021af4:	c1 f8 1f             	sar    eax,0x1f
c0021af7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021afa:	e9 ba fe ff ff       	jmp    c00219b9 <SysOpen(regs*)+0x98>
c0021aff:	81 c4 04 01 00 00    	add    esp,0x104
c0021b05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b0a:	5b                   	pop    ebx
c0021b0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021b10:	5e                   	pop    esi
c0021b11:	c3                   	ret    
c0021b12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b15:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021b1b:	e9 92 fe ff ff       	jmp    c00219b2 <SysOpen(regs*)+0x91>

c0021b20 <KeSystemCall(regs*, void*)>:
c0021b20:	53                   	push   ebx
c0021b21:	83 ec 08             	sub    esp,0x8
c0021b24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b28:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021b2b:	83 f8 3e             	cmp    eax,0x3e
c0021b2e:	77 16                	ja     c0021b46 <KeSystemCall(regs*, void*)+0x26>
c0021b30:	8b 14 85 20 43 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbce0]
c0021b37:	85 d2                	test   edx,edx
c0021b39:	74 0b                	je     c0021b46 <KeSystemCall(regs*, void*)+0x26>
c0021b3b:	83 ec 0c             	sub    esp,0xc
c0021b3e:	53                   	push   ebx
c0021b3f:	ff d2                	call   edx
c0021b41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021b44:	eb 0d                	jmp    c0021b53 <KeSystemCall(regs*, void*)+0x33>
c0021b46:	52                   	push   edx
c0021b47:	52                   	push   edx
c0021b48:	50                   	push   eax
c0021b49:	68 d8 2a 03 c0       	push   0xc0032ad8
c0021b4e:	e8 7b 77 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021b5b:	83 c4 08             	add    esp,0x8
c0021b5e:	31 d2                	xor    edx,edx
c0021b60:	5b                   	pop    ebx
c0021b61:	c3                   	ret    
c0021b62:	66 90                	xchg   ax,ax

c0021b64 <KeSwitchEndian16(unsigned short)>:
c0021b64:	83 ec 04             	sub    esp,0x4
c0021b67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021b6f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b73:	c1 f8 08             	sar    eax,0x8
c0021b76:	89 c2                	mov    edx,eax
c0021b78:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b7c:	c1 e0 08             	shl    eax,0x8
c0021b7f:	09 d0                	or     eax,edx
c0021b81:	83 c4 04             	add    esp,0x4
c0021b84:	c3                   	ret    
c0021b85:	8d 76 00             	lea    esi,[esi+0x0]

c0021b88 <KeSwitchEndian32(unsigned int)>:
c0021b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b8c:	c1 e8 18             	shr    eax,0x18
c0021b8f:	89 c2                	mov    edx,eax
c0021b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b95:	c1 e0 08             	shl    eax,0x8
c0021b98:	25 00 00 ff 00       	and    eax,0xff0000
c0021b9d:	09 c2                	or     edx,eax
c0021b9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba3:	c1 e8 08             	shr    eax,0x8
c0021ba6:	25 00 ff 00 00       	and    eax,0xff00
c0021bab:	09 c2                	or     edx,eax
c0021bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb1:	c1 e0 18             	shl    eax,0x18
c0021bb4:	09 d0                	or     eax,edx
c0021bb6:	c3                   	ret    
c0021bb7:	90                   	nop

c0021bb8 <EthernetCRC32(unsigned char*, int)>:
c0021bb8:	83 ec 10             	sub    esp,0x10
c0021bbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bc0:	75 0a                	jne    c0021bcc <EthernetCRC32(unsigned char*, int)+0x14>
c0021bc2:	b8 00 00 00 00       	mov    eax,0x0
c0021bc7:	e9 8c 00 00 00       	jmp    c0021c58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bcc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021bd1:	7f 09                	jg     c0021bdc <EthernetCRC32(unsigned char*, int)+0x24>
c0021bd3:	b8 00 00 00 00       	mov    eax,0x0
c0021bd8:	eb 7e                	jmp    c0021c58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bda:	66 90                	xchg   ax,ax
c0021bdc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021be4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bf0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021bf4:	7d 5a                	jge    c0021c50 <EthernetCRC32(unsigned char*, int)+0x98>
c0021bf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bfe:	01 d0                	add    eax,edx
c0021c00:	8a 00                	mov    al,BYTE PTR [eax]
c0021c02:	0f b6 c0             	movzx  eax,al
c0021c05:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021c09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c11:	8d 76 00             	lea    esi,[esi+0x0]
c0021c14:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021c19:	7f 2d                	jg     c0021c48 <EthernetCRC32(unsigned char*, int)+0x90>
c0021c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1f:	83 e0 01             	and    eax,0x1
c0021c22:	74 10                	je     c0021c34 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c28:	d1 e8                	shr    eax,1
c0021c2a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021c2f:	eb 0b                	jmp    c0021c3c <EthernetCRC32(unsigned char*, int)+0x84>
c0021c31:	8d 76 00             	lea    esi,[esi+0x0]
c0021c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c38:	d1 e8                	shr    eax,1
c0021c3a:	66 90                	xchg   ax,ax
c0021c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c40:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021c45:	eb cd                	jmp    c0021c14 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021c47:	90                   	nop
c0021c48:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021c4d:	eb 9d                	jmp    c0021bec <EthernetCRC32(unsigned char*, int)+0x34>
c0021c4f:	90                   	nop
c0021c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c54:	f7 d0                	not    eax
c0021c56:	66 90                	xchg   ax,ax
c0021c58:	83 c4 10             	add    esp,0x10
c0021c5b:	c3                   	ret    

c0021c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021c5c:	83 ec 2c             	sub    esp,0x2c
c0021c5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c77:	0f b7 c0             	movzx  eax,ax
c0021c7a:	3d 06 08 00 00       	cmp    eax,0x806
c0021c7f:	75 13                	jne    c0021c94 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021c81:	83 ec 0c             	sub    esp,0xc
c0021c84:	68 ec 2a 03 c0       	push   0xc0032aec
c0021c89:	e8 40 76 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0021c8e:	83 c4 10             	add    esp,0x10
c0021c91:	eb 25                	jmp    c0021cb8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c93:	90                   	nop
c0021c94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c9b:	0f b7 c0             	movzx  eax,ax
c0021c9e:	3d 00 08 00 00       	cmp    eax,0x800
c0021ca3:	75 13                	jne    c0021cb8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021ca5:	83 ec 0c             	sub    esp,0xc
c0021ca8:	68 02 2b 03 c0       	push   0xc0032b02
c0021cad:	e8 1c 76 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0021cb2:	83 c4 10             	add    esp,0x10
c0021cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cb8:	90                   	nop
c0021cb9:	83 c4 2c             	add    esp,0x2c
c0021cbc:	c3                   	ret    
c0021cbd:	66 90                	xchg   ax,ax
c0021cbf:	90                   	nop

c0021cc0 <KeNetCreateSemaphore>:
c0021cc0:	53                   	push   ebx
c0021cc1:	83 ec 18             	sub    esp,0x18
c0021cc4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021ccc:	83 ec 0c             	sub    esp,0xc
c0021ccf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cd3:	e8 bf 47 ff ff       	call   c0016497 <malloc>
c0021cd8:	83 c4 10             	add    esp,0x10
c0021cdb:	89 c3                	mov    ebx,eax
c0021cdd:	83 ec 08             	sub    esp,0x8
c0021ce0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ce4:	53                   	push   ebx
c0021ce5:	e8 12 e9 ff ff       	call   c00205fc <Semaphore::Semaphore(int)>
c0021cea:	83 c4 10             	add    esp,0x10
c0021ced:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021cf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cf9:	89 10                	mov    DWORD PTR [eax],edx
c0021cfb:	90                   	nop
c0021cfc:	83 c4 18             	add    esp,0x18
c0021cff:	5b                   	pop    ebx
c0021d00:	c3                   	ret    
c0021d01:	8d 76 00             	lea    esi,[esi+0x0]

c0021d04 <KeNetFreeSemaphore>:
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d0d:	83 ec 08             	sub    esp,0x8
c0021d10:	6a 10                	push   0x10
c0021d12:	50                   	push   eax
c0021d13:	e8 b8 74 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c0021d18:	83 c4 10             	add    esp,0x10
c0021d1b:	90                   	nop
c0021d1c:	83 c4 0c             	add    esp,0xc
c0021d1f:	c3                   	ret    

c0021d20 <KeNetSignalSemaphore>:
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d29:	83 ec 0c             	sub    esp,0xc
c0021d2c:	50                   	push   eax
c0021d2d:	e8 2a ec ff ff       	call   c002095c <Semaphore::release()>
c0021d32:	83 c4 10             	add    esp,0x10
c0021d35:	90                   	nop
c0021d36:	83 c4 0c             	add    esp,0xc
c0021d39:	c3                   	ret    
c0021d3a:	66 90                	xchg   ax,ax

c0021d3c <KeNetWaitSemaphore>:
c0021d3c:	83 ec 0c             	sub    esp,0xc
c0021d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d45:	83 ec 08             	sub    esp,0x8
c0021d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d4c:	50                   	push   eax
c0021d4d:	e8 46 ea ff ff       	call   c0020798 <Semaphore::acquire(int)>
c0021d52:	83 c4 10             	add    esp,0x10
c0021d55:	83 c4 0c             	add    esp,0xc
c0021d58:	c3                   	ret    
c0021d59:	8d 76 00             	lea    esi,[esi+0x0]

c0021d5c <KeNetCreateThread>:
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021d64:	68 80 00 00 00       	push   0x80
c0021d69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d71:	50                   	push   eax
c0021d72:	e8 d9 32 00 00       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	90                   	nop
c0021d7b:	83 c4 0c             	add    esp,0xc
c0021d7e:	c3                   	ret    
c0021d7f:	90                   	nop

c0021d80 <KeCPanic>:
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	83 ec 0c             	sub    esp,0xc
c0021d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d8a:	e8 c7 e4 ff ff       	call   c0020256 <KePanic(char const*)>
c0021d8f:	83 c4 10             	add    esp,0x10
c0021d92:	90                   	nop
c0021d93:	83 c4 0c             	add    esp,0xc
c0021d96:	c3                   	ret    

c0021d97 <CmOpen(char const*)>:
c0021d97:	57                   	push   edi
c0021d98:	56                   	push   esi
c0021d99:	53                   	push   ebx
c0021d9a:	83 ec 1c             	sub    esp,0x1c
c0021d9d:	6a 30                	push   0x30
c0021d9f:	e8 f3 46 ff ff       	call   c0016497 <malloc>
c0021da4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021dab:	89 c3                	mov    ebx,eax
c0021dad:	e8 e5 46 ff ff       	call   c0016497 <malloc>
c0021db2:	83 c4 0c             	add    esp,0xc
c0021db5:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021dbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021dbf:	89 c6                	mov    esi,eax
c0021dc1:	50                   	push   eax
c0021dc2:	e8 1f 87 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0021dc7:	83 c4 0c             	add    esp,0xc
c0021dca:	89 33                	mov    DWORD PTR [ebx],esi
c0021dcc:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021dd0:	50                   	push   eax
c0021dd1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021dd5:	50                   	push   eax
c0021dd6:	56                   	push   esi
c0021dd7:	e8 2a 8a ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c0021ddc:	5a                   	pop    edx
c0021ddd:	59                   	pop    ecx
c0021dde:	6a 01                	push   0x1
c0021de0:	ff 33                	push   DWORD PTR [ebx]
c0021de2:	e8 1d 87 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0021de7:	5e                   	pop    esi
c0021de8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dec:	e8 a6 46 ff ff       	call   c0016497 <malloc>
c0021df1:	5a                   	pop    edx
c0021df2:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021df6:	89 c7                	mov    edi,eax
c0021df8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0021dfc:	56                   	push   esi
c0021dfd:	57                   	push   edi
c0021dfe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e06:	50                   	push   eax
c0021e07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e0a:	83 c4 14             	add    esp,0x14
c0021e0d:	ff 33                	push   DWORD PTR [ebx]
c0021e0f:	e8 4e 87 ff ff       	call   c001a562 <File::close()>
c0021e14:	59                   	pop    ecx
c0021e15:	58                   	pop    eax
c0021e16:	6a 13                	push   0x13
c0021e18:	ff 33                	push   DWORD PTR [ebx]
c0021e1a:	e8 e5 86 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0021e1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e21:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e23:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e26:	57                   	push   edi
c0021e27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e2f:	50                   	push   eax
c0021e30:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021e33:	83 c4 14             	add    esp,0x14
c0021e36:	57                   	push   edi
c0021e37:	e8 6b 46 ff ff       	call   c00164a7 <free>
c0021e3c:	83 c4 10             	add    esp,0x10
c0021e3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021e42:	75 10                	jne    c0021e54 <CmOpen(char const*)+0xbd>
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	68 17 2b 03 c0       	push   0xc0032b17
c0021e4c:	e8 05 e4 ff ff       	call   c0020256 <KePanic(char const*)>
c0021e51:	83 c4 10             	add    esp,0x10
c0021e54:	50                   	push   eax
c0021e55:	6a 00                	push   0x0
c0021e57:	6a 00                	push   0x0
c0021e59:	ff 33                	push   DWORD PTR [ebx]
c0021e5b:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021e5e:	e8 5f 87 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0021e63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e67:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e6a:	57                   	push   edi
c0021e6b:	6a 00                	push   0x0
c0021e6d:	6a 2b                	push   0x2b
c0021e6f:	50                   	push   eax
c0021e70:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e73:	83 c4 1c             	add    esp,0x1c
c0021e76:	6a 00                	push   0x0
c0021e78:	6a 00                	push   0x0
c0021e7a:	ff 33                	push   DWORD PTR [ebx]
c0021e7c:	e8 41 87 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0021e81:	83 c4 0c             	add    esp,0xc
c0021e84:	6a 08                	push   0x8
c0021e86:	68 28 2b 03 c0       	push   0xc0032b28
c0021e8b:	57                   	push   edi
c0021e8c:	e8 ef e4 fd ff       	call   c0000380 <memcmp>
c0021e91:	83 c4 10             	add    esp,0x10
c0021e94:	85 c0                	test   eax,eax
c0021e96:	74 10                	je     c0021ea8 <CmOpen(char const*)+0x111>
c0021e98:	83 ec 0c             	sub    esp,0xc
c0021e9b:	68 31 2b 03 c0       	push   0xc0032b31
c0021ea0:	e8 b1 e3 ff ff       	call   c0020256 <KePanic(char const*)>
c0021ea5:	83 c4 10             	add    esp,0x10
c0021ea8:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021eac:	83 c4 10             	add    esp,0x10
c0021eaf:	89 d8                	mov    eax,ebx
c0021eb1:	5b                   	pop    ebx
c0021eb2:	5e                   	pop    esi
c0021eb3:	5f                   	pop    edi
c0021eb4:	c3                   	ret    

c0021eb5 <CmClose(Reghive_Tag*)>:
c0021eb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eb9:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021ebd:	74 0b                	je     c0021eca <CmClose(Reghive_Tag*)+0x15>
c0021ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ec1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ec5:	e9 98 86 ff ff       	jmp    c001a562 <File::close()>
c0021eca:	c3                   	ret    

c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ecb:	53                   	push   ebx
c0021ecc:	83 ec 18             	sub    esp,0x18
c0021ecf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ed3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ed7:	74 29                	je     c0021f02 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ed9:	50                   	push   eax
c0021eda:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021edf:	99                   	cdq    
c0021ee0:	52                   	push   edx
c0021ee1:	50                   	push   eax
c0021ee2:	ff 33                	push   DWORD PTR [ebx]
c0021ee4:	e8 d9 86 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0021ee9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021eeb:	5a                   	pop    edx
c0021eec:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021ef0:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ef2:	51                   	push   ecx
c0021ef3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021ef7:	6a 00                	push   0x0
c0021ef9:	6a 2b                	push   0x2b
c0021efb:	50                   	push   eax
c0021efc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021eff:	83 c4 20             	add    esp,0x20
c0021f02:	83 c4 18             	add    esp,0x18
c0021f05:	5b                   	pop    ebx
c0021f06:	c3                   	ret    

c0021f07 <CmGetString(Reghive_Tag*, int, char*)>:
c0021f07:	55                   	push   ebp
c0021f08:	57                   	push   edi
c0021f09:	56                   	push   esi
c0021f0a:	53                   	push   ebx
c0021f0b:	31 db                	xor    ebx,ebx
c0021f0d:	83 ec 70             	sub    esp,0x70
c0021f10:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021f14:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021f1b:	50                   	push   eax
c0021f1c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f23:	55                   	push   ebp
c0021f24:	e8 a2 ff ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f29:	83 c4 10             	add    esp,0x10
c0021f2c:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021f31:	c1 e0 08             	shl    eax,0x8
c0021f34:	89 c2                	mov    edx,eax
c0021f36:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021f3b:	09 d0                	or     eax,edx
c0021f3d:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021f42:	c1 e0 08             	shl    eax,0x8
c0021f45:	09 d0                	or     eax,edx
c0021f47:	74 25                	je     c0021f6e <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021f49:	52                   	push   edx
c0021f4a:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021f4e:	52                   	push   edx
c0021f4f:	6b fb 0d             	imul   edi,ebx,0xd
c0021f52:	50                   	push   eax
c0021f53:	55                   	push   ebp
c0021f54:	e8 72 ff ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f59:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021f5d:	b9 27 00 00 00       	mov    ecx,0x27
c0021f62:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021f69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f6b:	83 c4 10             	add    esp,0x10
c0021f6e:	83 c3 03             	add    ebx,0x3
c0021f71:	83 fb 15             	cmp    ebx,0x15
c0021f74:	75 b6                	jne    c0021f2c <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021f76:	83 c4 6c             	add    esp,0x6c
c0021f79:	5b                   	pop    ebx
c0021f7a:	5e                   	pop    esi
c0021f7b:	5f                   	pop    edi
c0021f7c:	5d                   	pop    ebp
c0021f7d:	c3                   	ret    

c0021f7e <CmEnterDirectory(Reghive_Tag*, int)>:
c0021f7e:	83 ec 40             	sub    esp,0x40
c0021f81:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021f85:	50                   	push   eax
c0021f86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f8e:	e8 38 ff ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f93:	83 c4 10             	add    esp,0x10
c0021f96:	83 c8 ff             	or     eax,0xffffffff
c0021f99:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021f9e:	75 19                	jne    c0021fb9 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021fa0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021fa5:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021faa:	c1 e0 08             	shl    eax,0x8
c0021fad:	09 c2                	or     edx,eax
c0021faf:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021fb4:	c1 e0 10             	shl    eax,0x10
c0021fb7:	09 d0                	or     eax,edx
c0021fb9:	83 c4 3c             	add    esp,0x3c
c0021fbc:	c3                   	ret    

c0021fbd <CmGetNext(Reghive_Tag*, int)>:
c0021fbd:	83 ec 40             	sub    esp,0x40
c0021fc0:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fc4:	50                   	push   eax
c0021fc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fcd:	e8 f9 fe ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021fd2:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021fd7:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021fdc:	c1 e0 08             	shl    eax,0x8
c0021fdf:	09 c2                	or     edx,eax
c0021fe1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021fe6:	83 c4 4c             	add    esp,0x4c
c0021fe9:	c1 e0 10             	shl    eax,0x10
c0021fec:	09 d0                	or     eax,edx
c0021fee:	c3                   	ret    

c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021fef:	53                   	push   ebx
c0021ff0:	83 ec 18             	sub    esp,0x18
c0021ff3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ff7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ffb:	74 29                	je     c0022026 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ffd:	50                   	push   eax
c0021ffe:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022003:	99                   	cdq    
c0022004:	52                   	push   edx
c0022005:	50                   	push   eax
c0022006:	ff 33                	push   DWORD PTR [ebx]
c0022008:	e8 b5 85 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c002200d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002200f:	5a                   	pop    edx
c0022010:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022014:	8b 10                	mov    edx,DWORD PTR [eax]
c0022016:	51                   	push   ecx
c0022017:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002201b:	6a 00                	push   0x0
c002201d:	6a 2b                	push   0x2b
c002201f:	50                   	push   eax
c0022020:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022023:	83 c4 20             	add    esp,0x20
c0022026:	83 c4 18             	add    esp,0x18
c0022029:	5b                   	pop    ebx
c002202a:	c3                   	ret    

c002202b <CmFreeExtent(Reghive_Tag*, int)>:
c002202b:	53                   	push   ebx
c002202c:	83 ec 3c             	sub    esp,0x3c
c002202f:	6a 2b                	push   0x2b
c0022031:	6a 00                	push   0x0
c0022033:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022037:	53                   	push   ebx
c0022038:	e8 b3 e4 fd ff       	call   c00004f0 <memset>
c002203d:	83 c4 0c             	add    esp,0xc
c0022040:	53                   	push   ebx
c0022041:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022045:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022049:	e8 a1 ff ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002204e:	83 c4 48             	add    esp,0x48
c0022051:	5b                   	pop    ebx
c0022052:	c3                   	ret    

c0022053 <CmUpdateHeader(Reghive_Tag*)>:
c0022053:	83 ec 0c             	sub    esp,0xc
c0022056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002205e:	74 10                	je     c0022070 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022060:	52                   	push   edx
c0022061:	8d 50 05             	lea    edx,[eax+0x5]
c0022064:	52                   	push   edx
c0022065:	6a 00                	push   0x0
c0022067:	50                   	push   eax
c0022068:	e8 82 ff ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002206d:	83 c4 10             	add    esp,0x10
c0022070:	83 c4 0c             	add    esp,0xc
c0022073:	c3                   	ret    

c0022074 <CmExpand(Reghive_Tag*, int)>:
c0022074:	55                   	push   ebp
c0022075:	57                   	push   edi
c0022076:	83 cf ff             	or     edi,0xffffffff
c0022079:	56                   	push   esi
c002207a:	53                   	push   ebx
c002207b:	83 ec 3c             	sub    esp,0x3c
c002207e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0022082:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0022086:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002208a:	74 59                	je     c00220e5 <CmExpand(Reghive_Tag*, int)+0x71>
c002208c:	50                   	push   eax
c002208d:	31 d2                	xor    edx,edx
c002208f:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0022093:	31 ff                	xor    edi,edi
c0022095:	52                   	push   edx
c0022096:	50                   	push   eax
c0022097:	ff 33                	push   DWORD PTR [ebx]
c0022099:	e8 24 85 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c002209e:	83 c4 0c             	add    esp,0xc
c00220a1:	6a 2b                	push   0x2b
c00220a3:	6a 00                	push   0x0
c00220a5:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00220a9:	55                   	push   ebp
c00220aa:	e8 41 e4 fd ff       	call   c00004f0 <memset>
c00220af:	83 c4 10             	add    esp,0x10
c00220b2:	39 f7                	cmp    edi,esi
c00220b4:	7d 1b                	jge    c00220d1 <CmExpand(Reghive_Tag*, int)+0x5d>
c00220b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	47                   	inc    edi
c00220bc:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00220c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00220c2:	51                   	push   ecx
c00220c3:	55                   	push   ebp
c00220c4:	6a 00                	push   0x0
c00220c6:	6a 2b                	push   0x2b
c00220c8:	50                   	push   eax
c00220c9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220cc:	83 c4 20             	add    esp,0x20
c00220cf:	eb e1                	jmp    c00220b2 <CmExpand(Reghive_Tag*, int)+0x3e>
c00220d1:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c00220d4:	83 ec 0c             	sub    esp,0xc
c00220d7:	01 fe                	add    esi,edi
c00220d9:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00220dc:	53                   	push   ebx
c00220dd:	e8 71 ff ff ff       	call   c0022053 <CmUpdateHeader(Reghive_Tag*)>
c00220e2:	83 c4 10             	add    esp,0x10
c00220e5:	83 c4 3c             	add    esp,0x3c
c00220e8:	89 f8                	mov    eax,edi
c00220ea:	5b                   	pop    ebx
c00220eb:	5e                   	pop    esi
c00220ec:	5f                   	pop    edi
c00220ed:	5d                   	pop    ebp
c00220ee:	c3                   	ret    

c00220ef <CmFindUnusedExtent(Reghive_Tag*)>:
c00220ef:	55                   	push   ebp
c00220f0:	57                   	push   edi
c00220f1:	56                   	push   esi
c00220f2:	53                   	push   ebx
c00220f3:	83 cb ff             	or     ebx,0xffffffff
c00220f6:	83 ec 1c             	sub    esp,0x1c
c00220f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00220fd:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022101:	74 68                	je     c002216b <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022103:	51                   	push   ecx
c0022104:	be 2b 00 00 00       	mov    esi,0x2b
c0022109:	6a 00                	push   0x0
c002210b:	31 ff                	xor    edi,edi
c002210d:	6a 00                	push   0x0
c002210f:	31 db                	xor    ebx,ebx
c0022111:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022114:	e8 a9 84 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0022119:	83 c4 10             	add    esp,0x10
c002211c:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c002211f:	76 3b                	jbe    c002215c <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022121:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022124:	83 ec 0c             	sub    esp,0xc
c0022127:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002212b:	8b 10                	mov    edx,DWORD PTR [eax]
c002212d:	51                   	push   ecx
c002212e:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022132:	51                   	push   ecx
c0022133:	6a 00                	push   0x0
c0022135:	6a 01                	push   0x1
c0022137:	50                   	push   eax
c0022138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002213b:	83 c4 20             	add    esp,0x20
c002213e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022143:	74 26                	je     c002216b <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022145:	52                   	push   edx
c0022146:	43                   	inc    ebx
c0022147:	57                   	push   edi
c0022148:	56                   	push   esi
c0022149:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002214c:	e8 71 84 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0022151:	83 c6 2b             	add    esi,0x2b
c0022154:	83 d7 00             	adc    edi,0x0
c0022157:	83 c4 10             	add    esp,0x10
c002215a:	eb c0                	jmp    c002211c <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002215c:	50                   	push   eax
c002215d:	50                   	push   eax
c002215e:	6a 40                	push   0x40
c0022160:	55                   	push   ebp
c0022161:	e8 0e ff ff ff       	call   c0022074 <CmExpand(Reghive_Tag*, int)>
c0022166:	83 c4 10             	add    esp,0x10
c0022169:	89 c3                	mov    ebx,eax
c002216b:	83 c4 1c             	add    esp,0x1c
c002216e:	89 d8                	mov    eax,ebx
c0022170:	5b                   	pop    ebx
c0022171:	5e                   	pop    esi
c0022172:	5f                   	pop    edi
c0022173:	5d                   	pop    ebp
c0022174:	c3                   	ret    

c0022175 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022175:	55                   	push   ebp
c0022176:	57                   	push   edi
c0022177:	56                   	push   esi
c0022178:	53                   	push   ebx
c0022179:	81 ec 88 00 00 00    	sub    esp,0x88
c002217f:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0022186:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002218d:	e8 5d ff ff ff       	call   c00220ef <CmFindUnusedExtent(Reghive_Tag*)>
c0022192:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022196:	83 c4 0c             	add    esp,0xc
c0022199:	6a 2b                	push   0x2b
c002219b:	6a 00                	push   0x0
c002219d:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00221a1:	55                   	push   ebp
c00221a2:	e8 49 e3 fd ff       	call   c00004f0 <memset>
c00221a7:	83 c4 10             	add    esp,0x10
c00221aa:	85 db                	test   ebx,ebx
c00221ac:	74 12                	je     c00221c0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00221ae:	51                   	push   ecx
c00221af:	55                   	push   ebp
c00221b0:	53                   	push   ebx
c00221b1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221b8:	e8 0e fd ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221bd:	83 c4 10             	add    esp,0x10
c00221c0:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00221c4:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00221cb:	b9 2b 00 00 00       	mov    ecx,0x2b
c00221d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221d2:	85 db                	test   ebx,ebx
c00221d4:	74 49                	je     c002221f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00221d6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00221db:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00221e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221e4:	c1 e0 08             	shl    eax,0x8
c00221e7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00221ed:	09 c8                	or     eax,ecx
c00221ef:	74 11                	je     c0022202 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00221f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00221f5:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00221f9:	c1 e8 10             	shr    eax,0x10
c00221fc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022200:	eb 0f                	jmp    c0022211 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022202:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022207:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002220c:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022211:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022215:	c1 ea 08             	shr    edx,0x8
c0022218:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002221d:	eb 0f                	jmp    c002222e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c002221f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022224:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022229:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002222e:	52                   	push   edx
c002222f:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022233:	50                   	push   eax
c0022234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022238:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002223f:	e8 ab fd ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022244:	83 c4 10             	add    esp,0x10
c0022247:	85 db                	test   ebx,ebx
c0022249:	74 12                	je     c002225d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002224b:	50                   	push   eax
c002224c:	55                   	push   ebp
c002224d:	53                   	push   ebx
c002224e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022255:	e8 95 fd ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002225a:	83 c4 10             	add    esp,0x10
c002225d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022261:	83 c4 7c             	add    esp,0x7c
c0022264:	5b                   	pop    ebx
c0022265:	5e                   	pop    esi
c0022266:	5f                   	pop    edi
c0022267:	5d                   	pop    ebp
c0022268:	c3                   	ret    

c0022269 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022269:	55                   	push   ebp
c002226a:	57                   	push   edi
c002226b:	56                   	push   esi
c002226c:	53                   	push   ebx
c002226d:	bb 27 00 00 00       	mov    ebx,0x27
c0022272:	81 ec 88 00 00 00    	sub    esp,0x88
c0022278:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c002227f:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0022286:	e8 f5 e2 fd ff       	call   c0000580 <strlen>
c002228b:	8d 48 26             	lea    ecx,[eax+0x26]
c002228e:	89 c8                	mov    eax,ecx
c0022290:	99                   	cdq    
c0022291:	f7 fb                	idiv   ebx
c0022293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022297:	83 c4 10             	add    esp,0x10
c002229a:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00222a0:	7e 10                	jle    c00222b2 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00222a2:	83 ec 0c             	sub    esp,0xc
c00222a5:	68 42 2b 03 c0       	push   0xc0032b42
c00222aa:	e8 a7 df ff ff       	call   c0020256 <KePanic(char const*)>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	53                   	push   ebx
c00222b3:	31 ed                	xor    ebp,ebp
c00222b5:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00222b9:	53                   	push   ebx
c00222ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222c1:	57                   	push   edi
c00222c2:	e8 04 fc ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222c7:	83 c4 10             	add    esp,0x10
c00222ca:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00222ce:	89 f0                	mov    eax,esi
c00222d0:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00222d4:	c1 e0 08             	shl    eax,0x8
c00222d7:	09 c6                	or     esi,eax
c00222d9:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00222dd:	c1 e6 08             	shl    esi,0x8
c00222e0:	09 c6                	or     esi,eax
c00222e2:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00222e6:	7e 72                	jle    c002235a <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00222e8:	85 f6                	test   esi,esi
c00222ea:	75 25                	jne    c0022311 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00222ec:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00222f1:	8d 44 24 45          	lea    eax,[esp+0x45]
c00222f5:	50                   	push   eax
c00222f6:	6a 00                	push   0x0
c00222f8:	6a 00                	push   0x0
c00222fa:	57                   	push   edi
c00222fb:	e8 75 fe ff ff       	call   c0022175 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022300:	83 c4 10             	add    esp,0x10
c0022303:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022306:	89 c6                	mov    esi,eax
c0022308:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c002230b:	c1 f8 10             	sar    eax,0x10
c002230e:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022311:	51                   	push   ecx
c0022312:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022316:	52                   	push   edx
c0022317:	56                   	push   esi
c0022318:	57                   	push   edi
c0022319:	e8 ad fb ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002231e:	83 c4 0c             	add    esp,0xc
c0022321:	6a 27                	push   0x27
c0022323:	6a 00                	push   0x0
c0022325:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022329:	51                   	push   ecx
c002232a:	e8 c1 e1 fd ff       	call   c00004f0 <memset>
c002232f:	6b c5 27             	imul   eax,ebp,0x27
c0022332:	83 c4 0c             	add    esp,0xc
c0022335:	6a 27                	push   0x27
c0022337:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002233e:	50                   	push   eax
c002233f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022343:	51                   	push   ecx
c0022344:	e8 47 e3 fd ff       	call   c0000690 <strncpy>
c0022349:	83 c4 0c             	add    esp,0xc
c002234c:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022350:	52                   	push   edx
c0022351:	56                   	push   esi
c0022352:	57                   	push   edi
c0022353:	e8 97 fc ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022358:	eb 19                	jmp    c0022373 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c002235a:	85 f6                	test   esi,esi
c002235c:	74 18                	je     c0022376 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c002235e:	52                   	push   edx
c002235f:	52                   	push   edx
c0022360:	56                   	push   esi
c0022361:	57                   	push   edi
c0022362:	e8 c4 fc ff ff       	call   c002202b <CmFreeExtent(Reghive_Tag*, int)>
c0022367:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c002236b:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c002236f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022373:	83 c4 10             	add    esp,0x10
c0022376:	45                   	inc    ebp
c0022377:	83 c3 03             	add    ebx,0x3
c002237a:	83 fd 07             	cmp    ebp,0x7
c002237d:	0f 85 47 ff ff ff    	jne    c00222ca <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0022383:	50                   	push   eax
c0022384:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022388:	50                   	push   eax
c0022389:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022390:	57                   	push   edi
c0022391:	e8 59 fc ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022396:	81 c4 8c 00 00 00    	add    esp,0x8c
c002239c:	5b                   	pop    ebx
c002239d:	5e                   	pop    esi
c002239e:	5f                   	pop    edi
c002239f:	5d                   	pop    ebp
c00223a0:	c3                   	ret    

c00223a1 <CmGetMatch(char*, char*, bool, bool*)>:
c00223a1:	56                   	push   esi
c00223a2:	53                   	push   ebx
c00223a3:	50                   	push   eax
c00223a4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223a9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00223ad:	74 25                	je     c00223d4 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00223af:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00223b2:	31 db                	xor    ebx,ebx
c00223b4:	50                   	push   eax
c00223b5:	50                   	push   eax
c00223b6:	8d 04 9d 20 44 03 c0 	lea    eax,[ebx*4-0x3ffcbbe0]
c00223bd:	50                   	push   eax
c00223be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223c2:	e8 b9 e3 fd ff       	call   c0000780 <strcmp>
c00223c7:	83 c4 10             	add    esp,0x10
c00223ca:	85 c0                	test   eax,eax
c00223cc:	74 2e                	je     c00223fc <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223ce:	43                   	inc    ebx
c00223cf:	83 fb 3f             	cmp    ebx,0x3f
c00223d2:	75 e0                	jne    c00223b4 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00223d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00223d7:	31 db                	xor    ebx,ebx
c00223d9:	51                   	push   ecx
c00223da:	51                   	push   ecx
c00223db:	8d 04 9d 20 44 03 c0 	lea    eax,[ebx*4-0x3ffcbbe0]
c00223e2:	50                   	push   eax
c00223e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223e7:	e8 94 e3 fd ff       	call   c0000780 <strcmp>
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	85 c0                	test   eax,eax
c00223f1:	74 09                	je     c00223fc <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223f3:	43                   	inc    ebx
c00223f4:	83 fb 3f             	cmp    ebx,0x3f
c00223f7:	75 e0                	jne    c00223d9 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00223f9:	83 cb ff             	or     ebx,0xffffffff
c00223fc:	5a                   	pop    edx
c00223fd:	89 d8                	mov    eax,ebx
c00223ff:	5b                   	pop    ebx
c0022400:	5e                   	pop    esi
c0022401:	c3                   	ret    

c0022402 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0022402:	55                   	push   ebp
c0022403:	31 c0                	xor    eax,eax
c0022405:	57                   	push   edi
c0022406:	56                   	push   esi
c0022407:	53                   	push   ebx
c0022408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002240c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022410:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022414:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022418:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002241a:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002241d:	83 fd 1f             	cmp    ebp,0x1f
c0022420:	7f 0b                	jg     c002242d <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022422:	0f b6 c2             	movzx  eax,dl
c0022425:	d3 e0                	shl    eax,cl
c0022427:	09 07                	or     DWORD PTR [edi],eax
c0022429:	b0 01                	mov    al,0x1
c002242b:	01 33                	add    DWORD PTR [ebx],esi
c002242d:	5b                   	pop    ebx
c002242e:	5e                   	pop    esi
c002242f:	5f                   	pop    edi
c0022430:	5d                   	pop    ebp
c0022431:	c3                   	ret    

c0022432 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022432:	57                   	push   edi
c0022433:	56                   	push   esi
c0022434:	53                   	push   ebx
c0022435:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022439:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002243d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022441:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022445:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022447:	7c 17                	jl     c0022460 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022449:	8b 17                	mov    edx,DWORD PTR [edi]
c002244b:	b8 01 00 00 00       	mov    eax,0x1
c0022450:	d3 e0                	shl    eax,cl
c0022452:	48                   	dec    eax
c0022453:	21 d0                	and    eax,edx
c0022455:	d3 ea                	shr    edx,cl
c0022457:	89 17                	mov    DWORD PTR [edi],edx
c0022459:	29 0b                	sub    DWORD PTR [ebx],ecx
c002245b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002245e:	eb 05                	jmp    c0022465 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022460:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022463:	31 c0                	xor    eax,eax
c0022465:	5b                   	pop    ebx
c0022466:	5e                   	pop    esi
c0022467:	5f                   	pop    edi
c0022468:	c3                   	ret    

c0022469 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022469:	83 ec 40             	sub    esp,0x40
c002246c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022470:	50                   	push   eax
c0022471:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022475:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022479:	e8 4d fa ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002247e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022482:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0022486:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c002248a:	89 10                	mov    DWORD PTR [eax],edx
c002248c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002248f:	83 c4 4c             	add    esp,0x4c
c0022492:	c3                   	ret    

c0022493 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0022493:	55                   	push   ebp
c0022494:	57                   	push   edi
c0022495:	56                   	push   esi
c0022496:	53                   	push   ebx
c0022497:	83 ec 40             	sub    esp,0x40
c002249a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002249e:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00224a2:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00224a6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00224aa:	53                   	push   ebx
c00224ab:	56                   	push   esi
c00224ac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224b0:	e8 16 fa ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224b5:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00224b9:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00224bd:	83 c4 0c             	add    esp,0xc
c00224c0:	53                   	push   ebx
c00224c1:	56                   	push   esi
c00224c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224c6:	e8 24 fb ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224cb:	83 c4 4c             	add    esp,0x4c
c00224ce:	5b                   	pop    ebx
c00224cf:	5e                   	pop    esi
c00224d0:	5f                   	pop    edi
c00224d1:	5d                   	pop    ebp
c00224d2:	c3                   	ret    

c00224d3 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00224d3:	55                   	push   ebp
c00224d4:	57                   	push   edi
c00224d5:	56                   	push   esi
c00224d6:	31 f6                	xor    esi,esi
c00224d8:	53                   	push   ebx
c00224d9:	31 db                	xor    ebx,ebx
c00224db:	83 ec 40             	sub    esp,0x40
c00224de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00224e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00224ee:	6a 12                	push   0x12
c00224f0:	68 ee 00 00 00       	push   0xee
c00224f5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00224f9:	e8 f2 df fd ff       	call   c00004f0 <memset>
c00224fe:	83 c4 10             	add    esp,0x10
c0022501:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022505:	6a 08                	push   0x8
c0022507:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002250b:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c002250f:	50                   	push   eax
c0022510:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022514:	55                   	push   ebp
c0022515:	57                   	push   edi
c0022516:	e8 e7 fe ff ff       	call   c0022402 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002251b:	83 c4 10             	add    esp,0x10
c002251e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022522:	50                   	push   eax
c0022523:	6a 06                	push   0x6
c0022525:	55                   	push   ebp
c0022526:	57                   	push   edi
c0022527:	e8 06 ff ff ff       	call   c0022432 <CmGetShift(unsigned int*, int*, int, bool*)>
c002252c:	83 c4 10             	add    esp,0x10
c002252f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022534:	74 07                	je     c002253d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022536:	46                   	inc    esi
c0022537:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c002253b:	eb e1                	jmp    c002251e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002253d:	43                   	inc    ebx
c002253e:	83 fb 12             	cmp    ebx,0x12
c0022541:	75 c2                	jne    c0022505 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022543:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022547:	31 f6                	xor    esi,esi
c0022549:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002254c:	50                   	push   eax
c002254d:	50                   	push   eax
c002254e:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0022553:	46                   	inc    esi
c0022554:	8d 04 85 20 44 03 c0 	lea    eax,[eax*4-0x3ffcbbe0]
c002255b:	50                   	push   eax
c002255c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022560:	e8 0b e3 fd ff       	call   c0000870 <strcat>
c0022565:	83 c4 10             	add    esp,0x10
c0022568:	83 fe 18             	cmp    esi,0x18
c002256b:	75 df                	jne    c002254c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c002256d:	83 c4 3c             	add    esp,0x3c
c0022570:	31 c0                	xor    eax,eax
c0022572:	5b                   	pop    ebx
c0022573:	5e                   	pop    esi
c0022574:	5f                   	pop    edi
c0022575:	5d                   	pop    ebp
c0022576:	c3                   	ret    

c0022577 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022577:	83 ec 40             	sub    esp,0x40
c002257a:	8d 44 24 09          	lea    eax,[esp+0x9]
c002257e:	50                   	push   eax
c002257f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022583:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022587:	e8 3f f9 ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002258c:	58                   	pop    eax
c002258d:	5a                   	pop    edx
c002258e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022592:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022596:	50                   	push   eax
c0022597:	e8 37 ff ff ff       	call   c00224d3 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c002259c:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00225a1:	83 c4 4c             	add    esp,0x4c
c00225a4:	c3                   	ret    

c00225a5 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00225a5:	55                   	push   ebp
c00225a6:	57                   	push   edi
c00225a7:	56                   	push   esi
c00225a8:	53                   	push   ebx
c00225a9:	31 db                	xor    ebx,ebx
c00225ab:	83 ec 70             	sub    esp,0x70
c00225ae:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00225b5:	6a 30                	push   0x30
c00225b7:	6a 00                	push   0x0
c00225b9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00225bd:	56                   	push   esi
c00225be:	e8 2d df fd ff       	call   c00004f0 <memset>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	83 ec 0c             	sub    esp,0xc
c00225c9:	57                   	push   edi
c00225ca:	e8 b1 df fd ff       	call   c0000580 <strlen>
c00225cf:	83 c4 10             	add    esp,0x10
c00225d2:	39 d8                	cmp    eax,ebx
c00225d4:	76 16                	jbe    c00225ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00225d6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00225da:	83 ec 0c             	sub    esp,0xc
c00225dd:	50                   	push   eax
c00225de:	e8 7d e3 fd ff       	call   c0000960 <toupper>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00225e9:	43                   	inc    ebx
c00225ea:	eb da                	jmp    c00225c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00225ec:	52                   	push   edx
c00225ed:	31 db                	xor    ebx,ebx
c00225ef:	6a 18                	push   0x18
c00225f1:	31 ff                	xor    edi,edi
c00225f3:	6a 3f                	push   0x3f
c00225f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00225f9:	50                   	push   eax
c00225fa:	e8 f1 de fd ff       	call   c00004f0 <memset>
c00225ff:	83 c4 10             	add    esp,0x10
c0022602:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022606:	8d 74 24 10          	lea    esi,[esp+0x10]
c002260a:	84 c0                	test   al,al
c002260c:	0f 84 af 00 00 00    	je     c00226c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022612:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022616:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022619:	83 ec 0c             	sub    esp,0xc
c002261c:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0022621:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022625:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022629:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c002262e:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022632:	56                   	push   esi
c0022633:	e8 48 df fd ff       	call   c0000580 <strlen>
c0022638:	83 c4 10             	add    esp,0x10
c002263b:	85 c0                	test   eax,eax
c002263d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022641:	74 0b                	je     c002264e <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022643:	50                   	push   eax
c0022644:	6a 01                	push   0x1
c0022646:	56                   	push   esi
c0022647:	8d 44 24 20          	lea    eax,[esp+0x20]
c002264b:	50                   	push   eax
c002264c:	eb 0a                	jmp    c0022658 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c002264e:	50                   	push   eax
c002264f:	6a 00                	push   0x0
c0022651:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022655:	50                   	push   eax
c0022656:	6a 00                	push   0x0
c0022658:	e8 44 fd ff ff       	call   c00223a1 <CmGetMatch(char*, char*, bool, bool*)>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	83 f8 ff             	cmp    eax,0xffffffff
c0022663:	75 1a                	jne    c002267f <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022665:	83 ec 0c             	sub    esp,0xc
c0022668:	68 57 2b 03 c0       	push   0xc0032b57
c002266d:	e8 e4 db ff ff       	call   c0020256 <KePanic(char const*)>
c0022672:	83 c4 10             	add    esp,0x10
c0022675:	b8 02 00 00 00       	mov    eax,0x2
c002267a:	e9 bb 00 00 00       	jmp    c002273a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c002267f:	83 ff 18             	cmp    edi,0x18
c0022682:	75 1a                	jne    c002269e <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022684:	83 ec 0c             	sub    esp,0xc
c0022687:	68 6c 2b 03 c0       	push   0xc0032b6c
c002268c:	e8 c5 db ff ff       	call   c0020256 <KePanic(char const*)>
c0022691:	83 c4 10             	add    esp,0x10
c0022694:	b8 01 00 00 00       	mov    eax,0x1
c0022699:	e9 9c 00 00 00       	jmp    c002273a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c002269e:	47                   	inc    edi
c002269f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00226a4:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00226a8:	0f 45 dd             	cmovne ebx,ebp
c00226ab:	83 ec 0c             	sub    esp,0xc
c00226ae:	56                   	push   esi
c00226af:	e8 cc de fd ff       	call   c0000580 <strlen>
c00226b4:	83 c4 10             	add    esp,0x10
c00226b7:	85 c0                	test   eax,eax
c00226b9:	74 06                	je     c00226c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00226bb:	43                   	inc    ebx
c00226bc:	e9 41 ff ff ff       	jmp    c0022602 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00226c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226c9:	31 db                	xor    ebx,ebx
c00226cb:	31 ff                	xor    edi,edi
c00226cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00226d5:	50                   	push   eax
c00226d6:	6a 12                	push   0x12
c00226d8:	68 ee 00 00 00       	push   0xee
c00226dd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00226e4:	e8 07 de fd ff       	call   c00004f0 <memset>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00226f0:	83 fb 17             	cmp    ebx,0x17
c00226f3:	7e 26                	jle    c002271b <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00226f5:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00226f9:	50                   	push   eax
c00226fa:	6a 08                	push   0x8
c00226fc:	55                   	push   ebp
c00226fd:	56                   	push   esi
c00226fe:	e8 2f fd ff ff       	call   c0022432 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022703:	83 c4 10             	add    esp,0x10
c0022706:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002270b:	74 26                	je     c0022733 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c002270d:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022714:	4b                   	dec    ebx
c0022715:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022718:	47                   	inc    edi
c0022719:	eb 1c                	jmp    c0022737 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c002271b:	6a 06                	push   0x6
c002271d:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022722:	50                   	push   eax
c0022723:	55                   	push   ebp
c0022724:	56                   	push   esi
c0022725:	e8 d8 fc ff ff       	call   c0022402 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002272a:	83 c4 10             	add    esp,0x10
c002272d:	84 c0                	test   al,al
c002272f:	75 06                	jne    c0022737 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022731:	eb c2                	jmp    c00226f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022733:	31 c0                	xor    eax,eax
c0022735:	eb 03                	jmp    c002273a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022737:	43                   	inc    ebx
c0022738:	eb b2                	jmp    c00226ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c002273a:	83 c4 6c             	add    esp,0x6c
c002273d:	5b                   	pop    ebx
c002273e:	5e                   	pop    esi
c002273f:	5f                   	pop    edi
c0022740:	5d                   	pop    ebp
c0022741:	c3                   	ret    

c0022742 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022742:	53                   	push   ebx
c0022743:	83 ec 3c             	sub    esp,0x3c
c0022746:	6a 2b                	push   0x2b
c0022748:	6a 00                	push   0x0
c002274a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002274e:	53                   	push   ebx
c002274f:	e8 9c dd fd ff       	call   c00004f0 <memset>
c0022754:	58                   	pop    eax
c0022755:	5a                   	pop    edx
c0022756:	8d 44 24 11          	lea    eax,[esp+0x11]
c002275a:	50                   	push   eax
c002275b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002275f:	e8 41 fe ff ff       	call   c00225a5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022764:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022769:	83 c4 0c             	add    esp,0xc
c002276c:	6a 15                	push   0x15
c002276e:	6a 00                	push   0x0
c0022770:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022774:	50                   	push   eax
c0022775:	e8 76 dd fd ff       	call   c00004f0 <memset>
c002277a:	53                   	push   ebx
c002277b:	6a 00                	push   0x0
c002277d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022781:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022785:	e8 eb f9 ff ff       	call   c0022175 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002278a:	83 c4 58             	add    esp,0x58
c002278d:	5b                   	pop    ebx
c002278e:	c3                   	ret    

c002278f <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c002278f:	56                   	push   esi
c0022790:	53                   	push   ebx
c0022791:	83 ec 48             	sub    esp,0x48
c0022794:	6a 12                	push   0x12
c0022796:	68 ff 00 00 00       	push   0xff
c002279b:	8d 74 24 0f          	lea    esi,[esp+0xf]
c002279f:	56                   	push   esi
c00227a0:	e8 4b dd fd ff       	call   c00004f0 <memset>
c00227a5:	5a                   	pop    edx
c00227a6:	59                   	pop    ecx
c00227a7:	56                   	push   esi
c00227a8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227ac:	e8 f4 fd ff ff       	call   c00225a5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227b1:	83 c4 10             	add    esp,0x10
c00227b4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00227b8:	85 db                	test   ebx,ebx
c00227ba:	74 42                	je     c00227fe <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00227bc:	50                   	push   eax
c00227bd:	8d 44 24 19          	lea    eax,[esp+0x19]
c00227c1:	50                   	push   eax
c00227c2:	53                   	push   ebx
c00227c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227c7:	e8 ff f6 ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227cc:	83 c4 0c             	add    esp,0xc
c00227cf:	6a 12                	push   0x12
c00227d1:	8d 44 24 21          	lea    eax,[esp+0x21]
c00227d5:	50                   	push   eax
c00227d6:	56                   	push   esi
c00227d7:	e8 a4 db fd ff       	call   c0000380 <memcmp>
c00227dc:	83 c4 10             	add    esp,0x10
c00227df:	85 c0                	test   eax,eax
c00227e1:	74 1e                	je     c0022801 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00227e3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00227e8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00227ed:	c1 e3 08             	shl    ebx,0x8
c00227f0:	09 d8                	or     eax,ebx
c00227f2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00227f7:	c1 e3 10             	shl    ebx,0x10
c00227fa:	09 c3                	or     ebx,eax
c00227fc:	eb ba                	jmp    c00227b8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00227fe:	83 cb ff             	or     ebx,0xffffffff
c0022801:	83 c4 44             	add    esp,0x44
c0022804:	89 d8                	mov    eax,ebx
c0022806:	5b                   	pop    ebx
c0022807:	5e                   	pop    esi
c0022808:	c3                   	ret    

c0022809 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022809:	57                   	push   edi
c002280a:	56                   	push   esi
c002280b:	53                   	push   ebx
c002280c:	83 ec 34             	sub    esp,0x34
c002280f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022813:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022817:	6a 2b                	push   0x2b
c0022819:	6a 00                	push   0x0
c002281b:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002281f:	53                   	push   ebx
c0022820:	e8 cb dc fd ff       	call   c00004f0 <memset>
c0022825:	58                   	pop    eax
c0022826:	5a                   	pop    edx
c0022827:	8d 44 24 11          	lea    eax,[esp+0x11]
c002282b:	50                   	push   eax
c002282c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022830:	e8 70 fd ff ff       	call   c00225a5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022835:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022839:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002283d:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022841:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022845:	53                   	push   ebx
c0022846:	6a 00                	push   0x0
c0022848:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002284c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022850:	e8 20 f9 ff ff       	call   c0022175 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022855:	83 c4 50             	add    esp,0x50
c0022858:	5b                   	pop    ebx
c0022859:	5e                   	pop    esi
c002285a:	5f                   	pop    edi
c002285b:	c3                   	ret    

c002285c <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002285c:	55                   	push   ebp
c002285d:	57                   	push   edi
c002285e:	56                   	push   esi
c002285f:	53                   	push   ebx
c0022860:	83 ec 40             	sub    esp,0x40
c0022863:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022867:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002286b:	6a 2b                	push   0x2b
c002286d:	6a 00                	push   0x0
c002286f:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022873:	56                   	push   esi
c0022874:	e8 77 dc fd ff       	call   c00004f0 <memset>
c0022879:	5f                   	pop    edi
c002287a:	89 ef                	mov    edi,ebp
c002287c:	58                   	pop    eax
c002287d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022881:	50                   	push   eax
c0022882:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022886:	e8 1a fd ff ff       	call   c00225a5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c002288b:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022890:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022895:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c002289a:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c002289f:	83 c4 10             	add    esp,0x10
c00228a2:	85 ed                	test   ebp,ebp
c00228a4:	74 14                	je     c00228ba <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228a6:	51                   	push   ecx
c00228a7:	51                   	push   ecx
c00228a8:	57                   	push   edi
c00228a9:	53                   	push   ebx
c00228aa:	e8 0e f7 ff ff       	call   c0021fbd <CmGetNext(Reghive_Tag*, int)>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	85 c0                	test   eax,eax
c00228b4:	74 04                	je     c00228ba <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228b6:	89 c7                	mov    edi,eax
c00228b8:	eb e8                	jmp    c00228a2 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00228ba:	56                   	push   esi
c00228bb:	6a 00                	push   0x0
c00228bd:	57                   	push   edi
c00228be:	53                   	push   ebx
c00228bf:	e8 b1 f8 ff ff       	call   c0022175 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00228c4:	83 c4 0c             	add    esp,0xc
c00228c7:	56                   	push   esi
c00228c8:	50                   	push   eax
c00228c9:	89 c7                	mov    edi,eax
c00228cb:	53                   	push   ebx
c00228cc:	e8 fa f5 ff ff       	call   c0021ecb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00228d1:	58                   	pop    eax
c00228d2:	5a                   	pop    edx
c00228d3:	6a 6c                	push   0x6c
c00228d5:	6a 00                	push   0x0
c00228d7:	6a 00                	push   0x0
c00228d9:	68 7d 2b 03 c0       	push   0xc0032b7d
c00228de:	57                   	push   edi
c00228df:	53                   	push   ebx
c00228e0:	e8 24 ff ff ff       	call   c0022809 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00228e5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00228e9:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00228ed:	c1 e8 10             	shr    eax,0x10
c00228f0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00228f4:	83 c4 1c             	add    esp,0x1c
c00228f7:	56                   	push   esi
c00228f8:	57                   	push   edi
c00228f9:	53                   	push   ebx
c00228fa:	e8 f0 f6 ff ff       	call   c0021fef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00228ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022904:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022909:	c1 e0 08             	shl    eax,0x8
c002290c:	09 c2                	or     edx,eax
c002290e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022913:	83 c4 4c             	add    esp,0x4c
c0022916:	5b                   	pop    ebx
c0022917:	5e                   	pop    esi
c0022918:	c1 e0 10             	shl    eax,0x10
c002291b:	09 d0                	or     eax,edx
c002291d:	5f                   	pop    edi
c002291e:	5d                   	pop    ebp
c002291f:	c3                   	ret    

c0022920 <zStrtok(char*, char const*)>:
c0022920:	55                   	push   ebp
c0022921:	57                   	push   edi
c0022922:	56                   	push   esi
c0022923:	53                   	push   ebx
c0022924:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002292c:	85 db                	test   ebx,ebx
c002292e:	74 2f                	je     c002295f <zStrtok(char*, char const*)+0x3f>
c0022930:	85 c0                	test   eax,eax
c0022932:	75 09                	jne    c002293d <zStrtok(char*, char const*)+0x1d>
c0022934:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022939:	85 c0                	test   eax,eax
c002293b:	74 50                	je     c002298d <zStrtok(char*, char const*)+0x6d>
c002293d:	31 c9                	xor    ecx,ecx
c002293f:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022943:	74 03                	je     c0022948 <zStrtok(char*, char const*)+0x28>
c0022945:	41                   	inc    ecx
c0022946:	eb f7                	jmp    c002293f <zStrtok(char*, char const*)+0x1f>
c0022948:	31 d2                	xor    edx,edx
c002294a:	39 ca                	cmp    edx,ecx
c002294c:	74 15                	je     c0022963 <zStrtok(char*, char const*)+0x43>
c002294e:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022952:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022955:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022958:	39 ee                	cmp    esi,ebp
c002295a:	74 13                	je     c002296f <zStrtok(char*, char const*)+0x4f>
c002295c:	42                   	inc    edx
c002295d:	eb eb                	jmp    c002294a <zStrtok(char*, char const*)+0x2a>
c002295f:	31 c0                	xor    eax,eax
c0022961:	eb 2a                	jmp    c002298d <zStrtok(char*, char const*)+0x6d>
c0022963:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002296d:	eb 1e                	jmp    c002298d <zStrtok(char*, char const*)+0x6d>
c002296f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022972:	39 ce                	cmp    esi,ecx
c0022974:	75 0a                	jne    c0022980 <zStrtok(char*, char const*)+0x60>
c0022976:	40                   	inc    eax
c0022977:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c002297c:	89 d8                	mov    eax,ebx
c002297e:	eb 0d                	jmp    c002298d <zStrtok(char*, char const*)+0x6d>
c0022980:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022983:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022987:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c002298d:	5b                   	pop    ebx
c002298e:	5e                   	pop    esi
c002298f:	5f                   	pop    edi
c0022990:	5d                   	pop    ebp
c0022991:	c3                   	ret    

c0022992 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022992:	57                   	push   edi
c0022993:	56                   	push   esi
c0022994:	53                   	push   ebx
c0022995:	81 ec 08 01 00 00    	sub    esp,0x108
c002299b:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00229a2:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00229a9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00229ad:	53                   	push   ebx
c00229ae:	e8 9d dc fd ff       	call   c0000650 <strcpy>
c00229b3:	59                   	pop    ecx
c00229b4:	5e                   	pop    esi
c00229b5:	68 1f 2f 03 c0       	push   0xc0032f1f
c00229ba:	53                   	push   ebx
c00229bb:	bb 01 00 00 00       	mov    ebx,0x1
c00229c0:	e8 5b ff ff ff       	call   c0022920 <zStrtok(char*, char const*)>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	85 c0                	test   eax,eax
c00229ca:	74 3b                	je     c0022a07 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229cc:	52                   	push   edx
c00229cd:	50                   	push   eax
c00229ce:	6a 01                	push   0x1
c00229d0:	57                   	push   edi
c00229d1:	e8 b9 fd ff ff       	call   c002278f <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00229d6:	59                   	pop    ecx
c00229d7:	5e                   	pop    esi
c00229d8:	89 c3                	mov    ebx,eax
c00229da:	68 1f 2f 03 c0       	push   0xc0032f1f
c00229df:	6a 00                	push   0x0
c00229e1:	e8 3a ff ff ff       	call   c0022920 <zStrtok(char*, char const*)>
c00229e6:	83 c4 10             	add    esp,0x10
c00229e9:	85 c0                	test   eax,eax
c00229eb:	89 c6                	mov    esi,eax
c00229ed:	74 18                	je     c0022a07 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229ef:	52                   	push   edx
c00229f0:	52                   	push   edx
c00229f1:	53                   	push   ebx
c00229f2:	57                   	push   edi
c00229f3:	e8 86 f5 ff ff       	call   c0021f7e <CmEnterDirectory(Reghive_Tag*, int)>
c00229f8:	83 c4 10             	add    esp,0x10
c00229fb:	83 f8 ff             	cmp    eax,0xffffffff
c00229fe:	89 c3                	mov    ebx,eax
c0022a00:	74 05                	je     c0022a07 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022a02:	50                   	push   eax
c0022a03:	56                   	push   esi
c0022a04:	53                   	push   ebx
c0022a05:	eb c9                	jmp    c00229d0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022a07:	81 c4 00 01 00 00    	add    esp,0x100
c0022a0d:	89 d8                	mov    eax,ebx
c0022a0f:	5b                   	pop    ebx
c0022a10:	5e                   	pop    esi
c0022a11:	5f                   	pop    edi
c0022a12:	c3                   	ret    

c0022a13 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022a13:	55                   	push   ebp
c0022a14:	57                   	push   edi
c0022a15:	56                   	push   esi
c0022a16:	53                   	push   ebx
c0022a17:	83 ec 5c             	sub    esp,0x5c
c0022a1a:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022a1e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022a22:	85 db                	test   ebx,ebx
c0022a24:	0f 8e 84 00 00 00    	jle    c0022aae <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022a2a:	57                   	push   edi
c0022a2b:	31 ed                	xor    ebp,ebp
c0022a2d:	6a 32                	push   0x32
c0022a2f:	6a 00                	push   0x0
c0022a31:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022a35:	57                   	push   edi
c0022a36:	e8 b5 da fd ff       	call   c00004f0 <memset>
c0022a3b:	83 c4 0c             	add    esp,0xc
c0022a3e:	57                   	push   edi
c0022a3f:	53                   	push   ebx
c0022a40:	56                   	push   esi
c0022a41:	e8 31 fb ff ff       	call   c0022577 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022a46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022a51:	7d 13                	jge    c0022a66 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022a53:	83 ec 0c             	sub    esp,0xc
c0022a56:	45                   	inc    ebp
c0022a57:	68 a3 32 03 c0       	push   0xc00332a3
c0022a5c:	e8 6d 68 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0022a61:	83 c4 10             	add    esp,0x10
c0022a64:	eb e7                	jmp    c0022a4d <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022a66:	51                   	push   ecx
c0022a67:	57                   	push   edi
c0022a68:	53                   	push   ebx
c0022a69:	68 83 2b 03 c0       	push   0xc0032b83
c0022a6e:	e8 5b 68 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0022a73:	83 c4 10             	add    esp,0x10
c0022a76:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022a7b:	75 1e                	jne    c0022a9b <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022a7d:	52                   	push   edx
c0022a7e:	52                   	push   edx
c0022a7f:	53                   	push   ebx
c0022a80:	56                   	push   esi
c0022a81:	e8 f8 f4 ff ff       	call   c0021f7e <CmEnterDirectory(Reghive_Tag*, int)>
c0022a86:	83 c4 0c             	add    esp,0xc
c0022a89:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022a8d:	8d 51 04             	lea    edx,[ecx+0x4]
c0022a90:	52                   	push   edx
c0022a91:	50                   	push   eax
c0022a92:	56                   	push   esi
c0022a93:	e8 7b ff ff ff       	call   c0022a13 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022a98:	83 c4 10             	add    esp,0x10
c0022a9b:	50                   	push   eax
c0022a9c:	50                   	push   eax
c0022a9d:	53                   	push   ebx
c0022a9e:	56                   	push   esi
c0022a9f:	e8 19 f5 ff ff       	call   c0021fbd <CmGetNext(Reghive_Tag*, int)>
c0022aa4:	83 c4 10             	add    esp,0x10
c0022aa7:	89 c3                	mov    ebx,eax
c0022aa9:	e9 74 ff ff ff       	jmp    c0022a22 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022aae:	83 c4 5c             	add    esp,0x5c
c0022ab1:	5b                   	pop    ebx
c0022ab2:	5e                   	pop    esi
c0022ab3:	5f                   	pop    edi
c0022ab4:	5d                   	pop    ebp
c0022ab5:	c3                   	ret    

c0022ab6 <CmSplitFinalSlashInPlace(char*)>:
c0022ab6:	53                   	push   ebx
c0022ab7:	83 ec 14             	sub    esp,0x14
c0022aba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022abe:	53                   	push   ebx
c0022abf:	e8 bc da fd ff       	call   c0000580 <strlen>
c0022ac4:	83 c4 10             	add    esp,0x10
c0022ac7:	48                   	dec    eax
c0022ac8:	85 c0                	test   eax,eax
c0022aca:	74 15                	je     c0022ae1 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022acc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022ad0:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022ad3:	75 09                	jne    c0022ade <CmSplitFinalSlashInPlace(char*)+0x28>
c0022ad5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022ad8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022adc:	eb 05                	jmp    c0022ae3 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022ade:	48                   	dec    eax
c0022adf:	eb e7                	jmp    c0022ac8 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022ae1:	31 c0                	xor    eax,eax
c0022ae3:	83 c4 08             	add    esp,0x8
c0022ae6:	5b                   	pop    ebx
c0022ae7:	c3                   	ret    

c0022ae8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022ae8:	55                   	push   ebp
c0022ae9:	57                   	push   edi
c0022aea:	56                   	push   esi
c0022aeb:	53                   	push   ebx
c0022aec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022af2:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022af9:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0022afc:	8d 43 01             	lea    eax,[ebx+0x1]
c0022aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b03:	89 f0                	mov    eax,esi
c0022b05:	3c 40                	cmp    al,0x40
c0022b07:	75 1b                	jne    c0022b24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022b09:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022b0c:	85 c0                	test   eax,eax
c0022b0e:	74 08                	je     c0022b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022b10:	83 f8 3a             	cmp    eax,0x3a
c0022b13:	74 03                	je     c0022b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022b15:	43                   	inc    ebx
c0022b16:	eb f1                	jmp    c0022b09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022b18:	85 c0                	test   eax,eax
c0022b1a:	0f 84 45 01 00 00    	je     c0022c65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b20:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022b23:	43                   	inc    ebx
c0022b24:	50                   	push   eax
c0022b25:	6a 40                	push   0x40
c0022b27:	6a 00                	push   0x0
c0022b29:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b2d:	50                   	push   eax
c0022b2e:	e8 bd d9 fd ff       	call   c00004f0 <memset>
c0022b33:	89 f1                	mov    ecx,esi
c0022b35:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022b3c:	31 c0                	xor    eax,eax
c0022b3e:	83 c4 10             	add    esp,0x10
c0022b41:	0f be f1             	movsx  esi,cl
c0022b44:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022b47:	85 d2                	test   edx,edx
c0022b49:	89 d1                	mov    ecx,edx
c0022b4b:	0f 84 14 01 00 00    	je     c0022c65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b51:	3d c7 00 00 00       	cmp    eax,0xc7
c0022b56:	0f 8f 09 01 00 00    	jg     c0022c65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b5c:	83 fa 0a             	cmp    edx,0xa
c0022b5f:	0f 85 f1 00 00 00    	jne    c0022c56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022b65:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022b6a:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022b6f:	89 c8                	mov    eax,ecx
c0022b71:	a8 df                	test   al,0xdf
c0022b73:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022b78:	83 f9 23             	cmp    ecx,0x23
c0022b7b:	0f 94 c2             	sete   dl
c0022b7e:	89 d5                	mov    ebp,edx
c0022b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b84:	09 ea                	or     edx,ebp
c0022b86:	80 e2 01             	and    dl,0x1
c0022b89:	75 47                	jne    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022b8b:	83 e8 09             	sub    eax,0x9
c0022b8e:	3c 01                	cmp    al,0x1
c0022b90:	76 40                	jbe    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022b92:	83 f9 5b             	cmp    ecx,0x5b
c0022b95:	75 42                	jne    c0022bd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022b97:	83 fe 40             	cmp    esi,0x40
c0022b9a:	75 36                	jne    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022b9c:	83 ec 0c             	sub    esp,0xc
c0022b9f:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022ba3:	55                   	push   ebp
c0022ba4:	e8 d7 d9 fd ff       	call   c0000580 <strlen>
c0022ba9:	83 c4 10             	add    esp,0x10
c0022bac:	83 f8 3f             	cmp    eax,0x3f
c0022baf:	0f 87 b0 00 00 00    	ja     c0022c65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022bb5:	50                   	push   eax
c0022bb6:	50                   	push   eax
c0022bb7:	55                   	push   ebp
c0022bb8:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022bbc:	55                   	push   ebp
c0022bbd:	e8 8e da fd ff       	call   c0000650 <strcpy>
c0022bc2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022bc5:	e8 b6 d9 fd ff       	call   c0000580 <strlen>
c0022bca:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022bcf:	83 c4 10             	add    esp,0x10
c0022bd2:	31 d2                	xor    edx,edx
c0022bd4:	e9 84 00 00 00       	jmp    c0022c5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022bd9:	83 fe 40             	cmp    esi,0x40
c0022bdc:	74 06                	je     c0022be4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022bde:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022be2:	eb 19                	jmp    c0022bfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022be4:	51                   	push   ecx
c0022be5:	51                   	push   ecx
c0022be6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022bea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022bee:	50                   	push   eax
c0022bef:	e8 8c db fd ff       	call   c0000780 <strcmp>
c0022bf4:	83 c4 10             	add    esp,0x10
c0022bf7:	85 c0                	test   eax,eax
c0022bf9:	75 d7                	jne    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022bfb:	eb e1                	jmp    c0022bde <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022bfd:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022c00:	85 c9                	test   ecx,ecx
c0022c02:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022c07:	83 f9 3d             	cmp    ecx,0x3d
c0022c0a:	0f 94 c0             	sete   al
c0022c0d:	89 c5                	mov    ebp,eax
c0022c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c13:	09 e8                	or     eax,ebp
c0022c15:	a8 01                	test   al,0x1
c0022c17:	89 c5                	mov    ebp,eax
c0022c19:	75 03                	jne    c0022c1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022c1b:	42                   	inc    edx
c0022c1c:	eb df                	jmp    c0022bfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022c1e:	85 c9                	test   ecx,ecx
c0022c20:	74 43                	je     c0022c65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c26:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022c29:	52                   	push   edx
c0022c2a:	52                   	push   edx
c0022c2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022c2f:	50                   	push   eax
c0022c30:	53                   	push   ebx
c0022c31:	e8 4a db fd ff       	call   c0000780 <strcmp>
c0022c36:	83 c4 10             	add    esp,0x10
c0022c39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c3d:	85 c0                	test   eax,eax
c0022c3f:	75 91                	jne    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022c41:	50                   	push   eax
c0022c42:	42                   	inc    edx
c0022c43:	50                   	push   eax
c0022c44:	52                   	push   edx
c0022c45:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022c4c:	e8 ff d9 fd ff       	call   c0000650 <strcpy>
c0022c51:	83 c4 10             	add    esp,0x10
c0022c54:	eb 11                	jmp    c0022c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022c56:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0022c5d:	47                   	inc    edi
c0022c5e:	89 d0                	mov    eax,edx
c0022c60:	e9 df fe ff ff       	jmp    c0022b44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022c65:	31 ed                	xor    ebp,ebp
c0022c67:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c6d:	89 e8                	mov    eax,ebp
c0022c6f:	5b                   	pop    ebx
c0022c70:	5e                   	pop    esi
c0022c71:	5f                   	pop    edi
c0022c72:	5d                   	pop    ebp
c0022c73:	c3                   	ret    

c0022c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022c74:	57                   	push   edi
c0022c75:	56                   	push   esi
c0022c76:	53                   	push   ebx
c0022c77:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022c7d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022c84:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022c8b:	53                   	push   ebx
c0022c8c:	e8 ef d8 fd ff       	call   c0000580 <strlen>
c0022c91:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c94:	89 c7                	mov    edi,eax
c0022c96:	e8 e5 d8 fd ff       	call   c0000580 <strlen>
c0022c9b:	83 c4 10             	add    esp,0x10
c0022c9e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022ca2:	3d ff 00 00 00       	cmp    eax,0xff
c0022ca7:	0f 87 d3 00 00 00    	ja     c0022d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022cad:	57                   	push   edi
c0022cae:	57                   	push   edi
c0022caf:	56                   	push   esi
c0022cb0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022cb4:	56                   	push   esi
c0022cb5:	e8 96 d9 fd ff       	call   c0000650 <strcpy>
c0022cba:	58                   	pop    eax
c0022cbb:	5a                   	pop    edx
c0022cbc:	68 1f 2f 03 c0       	push   0xc0032f1f
c0022cc1:	56                   	push   esi
c0022cc2:	e8 a9 db fd ff       	call   c0000870 <strcat>
c0022cc7:	59                   	pop    ecx
c0022cc8:	5f                   	pop    edi
c0022cc9:	53                   	push   ebx
c0022cca:	56                   	push   esi
c0022ccb:	e8 a0 db fd ff       	call   c0000870 <strcat>
c0022cd0:	58                   	pop    eax
c0022cd1:	5a                   	pop    edx
c0022cd2:	68 8d 2b 03 c0       	push   0xc0032b8d
c0022cd7:	56                   	push   esi
c0022cd8:	e8 93 db fd ff       	call   c0000870 <strcat>
c0022cdd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022ce4:	e8 ae 37 ff ff       	call   c0016497 <malloc>
c0022ce9:	83 c4 0c             	add    esp,0xc
c0022cec:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022cf2:	56                   	push   esi
c0022cf3:	50                   	push   eax
c0022cf4:	89 c3                	mov    ebx,eax
c0022cf6:	e8 eb 77 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	85 db                	test   ebx,ebx
c0022d00:	74 7e                	je     c0022d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022d02:	51                   	push   ecx
c0022d03:	51                   	push   ecx
c0022d04:	6a 01                	push   0x1
c0022d06:	53                   	push   ebx
c0022d07:	e8 f8 77 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0022d0c:	83 c4 10             	add    esp,0x10
c0022d0f:	85 c0                	test   eax,eax
c0022d11:	74 08                	je     c0022d1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022d13:	83 ec 0c             	sub    esp,0xc
c0022d16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d18:	53                   	push   ebx
c0022d19:	eb 5f                	jmp    c0022d7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022d1b:	52                   	push   edx
c0022d1c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022d20:	50                   	push   eax
c0022d21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022d25:	50                   	push   eax
c0022d26:	53                   	push   ebx
c0022d27:	e8 da 7a ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c0022d2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022d30:	83 c4 10             	add    esp,0x10
c0022d33:	89 c1                	mov    ecx,eax
c0022d35:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022d39:	74 31                	je     c0022d6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d3b:	83 ec 0c             	sub    esp,0xc
c0022d3e:	50                   	push   eax
c0022d3f:	e8 53 37 ff ff       	call   c0016497 <malloc>
c0022d44:	89 c6                	mov    esi,eax
c0022d46:	58                   	pop    eax
c0022d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d49:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022d4d:	52                   	push   edx
c0022d4e:	56                   	push   esi
c0022d4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d57:	53                   	push   ebx
c0022d58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022d5b:	83 c4 20             	add    esp,0x20
c0022d5e:	85 c0                	test   eax,eax
c0022d60:	75 0a                	jne    c0022d6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d66:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022d6a:	74 18                	je     c0022d84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022d6c:	83 ec 0c             	sub    esp,0xc
c0022d6f:	53                   	push   ebx
c0022d70:	e8 ed 77 ff ff       	call   c001a562 <File::close()>
c0022d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d7d:	83 c4 10             	add    esp,0x10
c0022d80:	31 c0                	xor    eax,eax
c0022d82:	eb 3b                	jmp    c0022dbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022d84:	83 ec 0c             	sub    esp,0xc
c0022d87:	53                   	push   ebx
c0022d88:	e8 d5 77 ff ff       	call   c001a562 <File::close()>
c0022d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d95:	83 c4 0c             	add    esp,0xc
c0022d98:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022d9f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022da6:	56                   	push   esi
c0022da7:	e8 3c fd ff ff       	call   c0022ae8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022dac:	89 34 24             	mov    DWORD PTR [esp],esi
c0022daf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022db3:	e8 ef 36 ff ff       	call   c00164a7 <free>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022dbf:	81 c4 20 01 00 00    	add    esp,0x120
c0022dc5:	5b                   	pop    ebx
c0022dc6:	5e                   	pop    esi
c0022dc7:	5f                   	pop    edi
c0022dc8:	c3                   	ret    

c0022dc9 <Reg::getLine(char*, char*, char*)>:
c0022dc9:	57                   	push   edi
c0022dca:	56                   	push   esi
c0022dcb:	53                   	push   ebx
c0022dcc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022dd0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022dd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022dd8:	57                   	push   edi
c0022dd9:	56                   	push   esi
c0022dda:	53                   	push   ebx
c0022ddb:	68 92 2b 03 c0       	push   0xc0032b92
c0022de0:	e8 8f fe ff ff       	call   c0022c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022de5:	83 c4 10             	add    esp,0x10
c0022de8:	84 c0                	test   al,al
c0022dea:	75 10                	jne    c0022dfc <Reg::getLine(char*, char*, char*)+0x33>
c0022dec:	57                   	push   edi
c0022ded:	56                   	push   esi
c0022dee:	53                   	push   ebx
c0022def:	68 b7 2b 03 c0       	push   0xc0032bb7
c0022df4:	e8 7b fe ff ff       	call   c0022c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022df9:	83 c4 10             	add    esp,0x10
c0022dfc:	5b                   	pop    ebx
c0022dfd:	5e                   	pop    esi
c0022dfe:	5f                   	pop    edi
c0022dff:	c3                   	ret    

c0022e00 <Reg::readInt(char*, char*, int*)>:
c0022e00:	55                   	push   ebp
c0022e01:	57                   	push   edi
c0022e02:	56                   	push   esi
c0022e03:	53                   	push   ebx
c0022e04:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022e0a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022e0e:	55                   	push   ebp
c0022e0f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e16:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e1d:	e8 a7 ff ff ff       	call   c0022dc9 <Reg::getLine(char*, char*, char*)>
c0022e22:	83 c4 10             	add    esp,0x10
c0022e25:	84 c0                	test   al,al
c0022e27:	0f 84 b6 00 00 00    	je     c0022ee3 <Reg::readInt(char*, char*, int*)+0xe3>
c0022e2d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022e32:	83 fa 2b             	cmp    edx,0x2b
c0022e35:	74 0c                	je     c0022e43 <Reg::readInt(char*, char*, int*)+0x43>
c0022e37:	83 fa 2d             	cmp    edx,0x2d
c0022e3a:	75 0e                	jne    c0022e4a <Reg::readInt(char*, char*, int*)+0x4a>
c0022e3c:	ba 01 00 00 00       	mov    edx,0x1
c0022e41:	eb 0b                	jmp    c0022e4e <Reg::readInt(char*, char*, int*)+0x4e>
c0022e43:	ba 01 00 00 00       	mov    edx,0x1
c0022e48:	eb 02                	jmp    c0022e4c <Reg::readInt(char*, char*, int*)+0x4c>
c0022e4a:	31 d2                	xor    edx,edx
c0022e4c:	31 c0                	xor    eax,eax
c0022e4e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022e53:	be 0a 00 00 00       	mov    esi,0xa
c0022e58:	75 21                	jne    c0022e7b <Reg::readInt(char*, char*, int*)+0x7b>
c0022e5a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022e5f:	83 f9 78             	cmp    ecx,0x78
c0022e62:	75 0a                	jne    c0022e6e <Reg::readInt(char*, char*, int*)+0x6e>
c0022e64:	83 c2 02             	add    edx,0x2
c0022e67:	be 10 00 00 00       	mov    esi,0x10
c0022e6c:	eb 0d                	jmp    c0022e7b <Reg::readInt(char*, char*, int*)+0x7b>
c0022e6e:	83 f9 62             	cmp    ecx,0x62
c0022e71:	75 08                	jne    c0022e7b <Reg::readInt(char*, char*, int*)+0x7b>
c0022e73:	83 c2 02             	add    edx,0x2
c0022e76:	be 02 00 00 00       	mov    esi,0x2
c0022e7b:	01 d5                	add    ebp,edx
c0022e7d:	31 d2                	xor    edx,edx
c0022e7f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022e83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022e87:	85 c9                	test   ecx,ecx
c0022e89:	0f 94 c3             	sete   bl
c0022e8c:	83 f9 0d             	cmp    ecx,0xd
c0022e8f:	89 df                	mov    edi,ebx
c0022e91:	0f 94 c3             	sete   bl
c0022e94:	09 df                	or     edi,ebx
c0022e96:	89 fb                	mov    ebx,edi
c0022e98:	83 e7 01             	and    edi,0x1
c0022e9b:	75 35                	jne    c0022ed2 <Reg::readInt(char*, char*, int*)+0xd2>
c0022e9d:	0f af d6             	imul   edx,esi
c0022ea0:	83 fe 10             	cmp    esi,0x10
c0022ea3:	75 26                	jne    c0022ecb <Reg::readInt(char*, char*, int*)+0xcb>
c0022ea5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ea9:	83 ef 41             	sub    edi,0x41
c0022eac:	89 fb                	mov    ebx,edi
c0022eae:	80 fb 05             	cmp    bl,0x5
c0022eb1:	77 06                	ja     c0022eb9 <Reg::readInt(char*, char*, int*)+0xb9>
c0022eb3:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022eb7:	eb 16                	jmp    c0022ecf <Reg::readInt(char*, char*, int*)+0xcf>
c0022eb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ebd:	83 eb 61             	sub    ebx,0x61
c0022ec0:	80 fb 05             	cmp    bl,0x5
c0022ec3:	77 06                	ja     c0022ecb <Reg::readInt(char*, char*, int*)+0xcb>
c0022ec5:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022ec9:	eb 04                	jmp    c0022ecf <Reg::readInt(char*, char*, int*)+0xcf>
c0022ecb:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022ecf:	45                   	inc    ebp
c0022ed0:	eb ad                	jmp    c0022e7f <Reg::readInt(char*, char*, int*)+0x7f>
c0022ed2:	84 c0                	test   al,al
c0022ed4:	74 02                	je     c0022ed8 <Reg::readInt(char*, char*, int*)+0xd8>
c0022ed6:	f7 da                	neg    edx
c0022ed8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022edf:	89 10                	mov    DWORD PTR [eax],edx
c0022ee1:	88 d8                	mov    al,bl
c0022ee3:	81 c4 ec 00 00 00    	add    esp,0xec
c0022ee9:	5b                   	pop    ebx
c0022eea:	5e                   	pop    esi
c0022eeb:	5f                   	pop    edi
c0022eec:	5d                   	pop    ebp
c0022eed:	c3                   	ret    

c0022eee <Reg::readString(char*, char*, char*, int)>:
c0022eee:	57                   	push   edi
c0022eef:	56                   	push   esi
c0022ef0:	53                   	push   ebx
c0022ef1:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022ef7:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022efb:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022f02:	57                   	push   edi
c0022f03:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f0a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f11:	e8 b3 fe ff ff       	call   c0022dc9 <Reg::getLine(char*, char*, char*)>
c0022f16:	83 c4 10             	add    esp,0x10
c0022f19:	84 c0                	test   al,al
c0022f1b:	89 c6                	mov    esi,eax
c0022f1d:	74 44                	je     c0022f63 <Reg::readString(char*, char*, char*, int)+0x75>
c0022f1f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022f26:	31 c0                	xor    eax,eax
c0022f28:	4a                   	dec    edx
c0022f29:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022f2c:	84 c9                	test   cl,cl
c0022f2e:	74 0f                	je     c0022f3f <Reg::readString(char*, char*, char*, int)+0x51>
c0022f30:	39 c2                	cmp    edx,eax
c0022f32:	7e 0b                	jle    c0022f3f <Reg::readString(char*, char*, char*, int)+0x51>
c0022f34:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022f37:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022f3c:	40                   	inc    eax
c0022f3d:	eb ea                	jmp    c0022f29 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022f3f:	83 ec 0c             	sub    esp,0xc
c0022f42:	53                   	push   ebx
c0022f43:	e8 38 d6 fd ff       	call   c0000580 <strlen>
c0022f48:	83 c4 10             	add    esp,0x10
c0022f4b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022f50:	75 11                	jne    c0022f63 <Reg::readString(char*, char*, char*, int)+0x75>
c0022f52:	83 ec 0c             	sub    esp,0xc
c0022f55:	53                   	push   ebx
c0022f56:	e8 25 d6 fd ff       	call   c0000580 <strlen>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022f63:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022f69:	89 f0                	mov    eax,esi
c0022f6b:	5b                   	pop    ebx
c0022f6c:	5e                   	pop    esi
c0022f6d:	5f                   	pop    edi
c0022f6e:	c3                   	ret    

c0022f6f <Reg::readBool(char*, char*, bool*)>:
c0022f6f:	83 ec 20             	sub    esp,0x20
c0022f72:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022f76:	50                   	push   eax
c0022f77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f7f:	e8 7c fe ff ff       	call   c0022e00 <Reg::readInt(char*, char*, int*)>
c0022f84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022f88:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022f8d:	0f 95 02             	setne  BYTE PTR [edx]
c0022f90:	83 c4 2c             	add    esp,0x2c
c0022f93:	c3                   	ret    

c0022f94 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022f94:	53                   	push   ebx
c0022f95:	83 ec 1c             	sub    esp,0x1c
c0022f98:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022f9c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022fa0:	50                   	push   eax
c0022fa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fa9:	e8 c1 ff ff ff       	call   c0022f6f <Reg::readBool(char*, char*, bool*)>
c0022fae:	83 c4 10             	add    esp,0x10
c0022fb1:	84 c0                	test   al,al
c0022fb3:	74 04                	je     c0022fb9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022fb5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022fb9:	83 c4 18             	add    esp,0x18
c0022fbc:	88 d8                	mov    al,bl
c0022fbe:	5b                   	pop    ebx
c0022fbf:	c3                   	ret    

c0022fc0 <Reg::readIntWithDefault(char*, char*, int)>:
c0022fc0:	53                   	push   ebx
c0022fc1:	83 ec 1c             	sub    esp,0x1c
c0022fc4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022fc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fcc:	50                   	push   eax
c0022fcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fd5:	e8 26 fe ff ff       	call   c0022e00 <Reg::readInt(char*, char*, int*)>
c0022fda:	83 c4 10             	add    esp,0x10
c0022fdd:	84 c0                	test   al,al
c0022fdf:	74 04                	je     c0022fe5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022fe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022fe5:	83 c4 18             	add    esp,0x18
c0022fe8:	89 d8                	mov    eax,ebx
c0022fea:	5b                   	pop    ebx
c0022feb:	c3                   	ret    

c0022fec <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022fec:	57                   	push   edi
c0022fed:	56                   	push   esi
c0022fee:	53                   	push   ebx
c0022fef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022ff3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ff7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022ffb:	56                   	push   esi
c0022ffc:	57                   	push   edi
c0022ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023005:	e8 e4 fe ff ff       	call   c0022eee <Reg::readString(char*, char*, char*, int)>
c002300a:	83 c4 10             	add    esp,0x10
c002300d:	84 c0                	test   al,al
c002300f:	75 16                	jne    c0023027 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023011:	50                   	push   eax
c0023012:	56                   	push   esi
c0023013:	6a 00                	push   0x0
c0023015:	57                   	push   edi
c0023016:	e8 d5 d4 fd ff       	call   c00004f0 <memset>
c002301b:	8d 4e ff             	lea    ecx,[esi-0x1]
c002301e:	89 de                	mov    esi,ebx
c0023020:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023022:	83 c4 10             	add    esp,0x10
c0023025:	89 df                	mov    edi,ebx
c0023027:	5b                   	pop    ebx
c0023028:	89 f8                	mov    eax,edi
c002302a:	5e                   	pop    esi
c002302b:	5f                   	pop    edi
c002302c:	c3                   	ret    

c002302d <SysEject(regs*)>:
c002302d:	83 ec 0c             	sub    esp,0xc
c0023030:	83 ca ff             	or     edx,0xffffffff
c0023033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023037:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002303a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002303f:	83 e9 41             	sub    ecx,0x41
c0023042:	83 f9 19             	cmp    ecx,0x19
c0023045:	77 18                	ja     c002305f <SysEject(regs*)+0x32>
c0023047:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002304e:	85 c9                	test   ecx,ecx
c0023050:	74 0d                	je     c002305f <SysEject(regs*)+0x32>
c0023052:	83 ec 0c             	sub    esp,0xc
c0023055:	51                   	push   ecx
c0023056:	e8 95 96 ff ff       	call   c001c6f0 <LogicalDisk::eject()>
c002305b:	83 c4 10             	add    esp,0x10
c002305e:	99                   	cdq    
c002305f:	83 c4 0c             	add    esp,0xc
c0023062:	c3                   	ret    

c0023063 <SysExit(regs*)>:
c0023063:	83 ec 18             	sub    esp,0x18
c0023066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002306a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002306d:	e8 9e 29 00 00       	call   c0025a10 <terminateTask(int)>
c0023072:	83 c8 ff             	or     eax,0xffffffff
c0023075:	83 c4 1c             	add    esp,0x1c
c0023078:	89 c2                	mov    edx,eax
c002307a:	c3                   	ret    

c002307b <SysGetCwd(regs*)>:
c002307b:	83 ec 10             	sub    esp,0x10
c002307e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023082:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023085:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023088:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002308d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023090:	e8 f1 70 ff ff       	call   c001a186 <Fs::getcwd(Process*, char*, int)>
c0023095:	83 c4 1c             	add    esp,0x1c
c0023098:	99                   	cdq    
c0023099:	c3                   	ret    

c002309a <SysGetPID(regs*)>:
c002309a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002309f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00230a4:	99                   	cdq    
c00230a5:	c3                   	ret    

c00230a6 <SysGetRAMData(regs*)>:
c00230a6:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00230b0:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00230b6:	99                   	cdq    
c00230b7:	f7 f9                	idiv   ecx
c00230b9:	c1 e0 18             	shl    eax,0x18
c00230bc:	09 c8                	or     eax,ecx
c00230be:	99                   	cdq    
c00230bf:	c3                   	ret    

c00230c0 <SysGetVGAPtr(regs*)>:
c00230c0:	55                   	push   ebp
c00230c1:	57                   	push   edi
c00230c2:	56                   	push   esi
c00230c3:	53                   	push   ebx
c00230c4:	83 ec 18             	sub    esp,0x18
c00230c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00230cb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00230ce:	e8 09 24 00 00       	call   c00254dc <Thr::processFromPID(int)>
c00230d3:	83 c4 10             	add    esp,0x10
c00230d6:	89 c1                	mov    ecx,eax
c00230d8:	b8 01 00 00 00       	mov    eax,0x1
c00230dd:	85 c9                	test   ecx,ecx
c00230df:	74 57                	je     c0023138 <SysGetVGAPtr(regs*)+0x78>
c00230e1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00230e5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00230eb:	74 0c                	je     c00230f9 <SysGetVGAPtr(regs*)+0x39>
c00230ed:	83 ec 0c             	sub    esp,0xc
c00230f0:	55                   	push   ebp
c00230f1:	e8 3d 40 ff ff       	call   c0017133 <setActiveTerminal(VgaText*)>
c00230f6:	83 c4 10             	add    esp,0x10
c00230f9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00230fc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023101:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023104:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023106:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0023109:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002310c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023112:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023115:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023118:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c002311e:	50                   	push   eax
c002311f:	50                   	push   eax
c0023120:	68 d2 2b 03 c0       	push   0xc0032bd2
c0023125:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023128:	05 a8 0f 00 00       	add    eax,0xfa8
c002312d:	50                   	push   eax
c002312e:	e8 1d d5 fd ff       	call   c0000650 <strcpy>
c0023133:	83 c4 10             	add    esp,0x10
c0023136:	31 c0                	xor    eax,eax
c0023138:	83 c4 0c             	add    esp,0xc
c002313b:	31 d2                	xor    edx,edx
c002313d:	5b                   	pop    ebx
c002313e:	5e                   	pop    esi
c002313f:	5f                   	pop    edi
c0023140:	5d                   	pop    ebp
c0023141:	c3                   	ret    
c0023142:	66 90                	xchg   ax,ax

c0023144 <SysKill(regs*)>:
c0023144:	53                   	push   ebx
c0023145:	83 ec 08             	sub    esp,0x8
c0023148:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002314c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023150:	75 16                	jne    c0023168 <SysKill(regs*)+0x24>
c0023152:	83 ec 0c             	sub    esp,0xc
c0023155:	68 dc 2b 03 c0       	push   0xc0032bdc
c002315a:	e8 f7 d0 ff ff       	call   c0020256 <KePanic(char const*)>
c002315f:	83 c4 10             	add    esp,0x10
c0023162:	e9 89 00 00 00       	jmp    c00231f0 <SysKill(regs*)+0xac>
c0023167:	90                   	nop
c0023168:	83 ec 0c             	sub    esp,0xc
c002316b:	68 ec 01 04 c0       	push   0xc00401ec
c0023170:	e8 77 bb 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023175:	8d 76 00             	lea    esi,[esi+0x0]
c0023178:	83 c4 10             	add    esp,0x10
c002317b:	85 c0                	test   eax,eax
c002317d:	74 19                	je     c0023198 <SysKill(regs*)+0x54>
c002317f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023182:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023185:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023187:	74 33                	je     c00231bc <SysKill(regs*)+0x78>
c0023189:	52                   	push   edx
c002318a:	52                   	push   edx
c002318b:	50                   	push   eax
c002318c:	68 ec 01 04 c0       	push   0xc00401ec
c0023191:	e8 76 be 00 00       	call   c002f00c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023196:	eb e0                	jmp    c0023178 <SysKill(regs*)+0x34>
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	68 e0 01 04 c0       	push   0xc00401e0
c00231a0:	e8 47 bb 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00231a5:	8d 76 00             	lea    esi,[esi+0x0]
c00231a8:	83 c4 10             	add    esp,0x10
c00231ab:	85 c0                	test   eax,eax
c00231ad:	74 41                	je     c00231f0 <SysKill(regs*)+0xac>
c00231af:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00231b2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00231b5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00231b7:	75 27                	jne    c00231e0 <SysKill(regs*)+0x9c>
c00231b9:	8d 76 00             	lea    esi,[esi+0x0]
c00231bc:	51                   	push   ecx
c00231bd:	51                   	push   ecx
c00231be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00231c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231c9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00231cf:	e8 34 d9 ff ff       	call   c0020b08 <KeRaiseSignal(SigHandlerBlock*, int)>
c00231d4:	83 c4 10             	add    esp,0x10
c00231d7:	31 c0                	xor    eax,eax
c00231d9:	31 d2                	xor    edx,edx
c00231db:	eb 1b                	jmp    c00231f8 <SysKill(regs*)+0xb4>
c00231dd:	8d 76 00             	lea    esi,[esi+0x0]
c00231e0:	52                   	push   edx
c00231e1:	52                   	push   edx
c00231e2:	50                   	push   eax
c00231e3:	68 e0 01 04 c0       	push   0xc00401e0
c00231e8:	e8 1f be 00 00       	call   c002f00c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231ed:	eb b9                	jmp    c00231a8 <SysKill(regs*)+0x64>
c00231ef:	90                   	nop
c00231f0:	83 c8 ff             	or     eax,0xffffffff
c00231f3:	89 c2                	mov    edx,eax
c00231f5:	8d 76 00             	lea    esi,[esi+0x0]
c00231f8:	83 c4 08             	add    esp,0x8
c00231fb:	5b                   	pop    ebx
c00231fc:	c3                   	ret    

c00231fd <SysLoadDLL(regs*)>:
c00231fd:	56                   	push   esi
c00231fe:	31 d2                	xor    edx,edx
c0023200:	53                   	push   ebx
c0023201:	b8 01 00 00 00       	mov    eax,0x1
c0023206:	51                   	push   ecx
c0023207:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002320b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002320f:	0f 84 8c 00 00 00    	je     c00232a1 <SysLoadDLL(regs*)+0xa4>
c0023215:	83 ec 0c             	sub    esp,0xc
c0023218:	68 14 01 00 00       	push   0x114
c002321d:	e8 75 32 ff ff       	call   c0016497 <malloc>
c0023222:	83 c4 0c             	add    esp,0xc
c0023225:	89 c3                	mov    ebx,eax
c0023227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002322c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002322f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023232:	53                   	push   ebx
c0023233:	e8 ae 72 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0023238:	83 c4 10             	add    esp,0x10
c002323b:	31 d2                	xor    edx,edx
c002323d:	85 db                	test   ebx,ebx
c002323f:	b8 02 00 00 00       	mov    eax,0x2
c0023244:	74 5b                	je     c00232a1 <SysLoadDLL(regs*)+0xa4>
c0023246:	83 ec 0c             	sub    esp,0xc
c0023249:	53                   	push   ebx
c002324a:	e8 79 75 ff ff       	call   c001a7c8 <File::exists()>
c002324f:	83 c4 10             	add    esp,0x10
c0023252:	84 c0                	test   al,al
c0023254:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023256:	75 11                	jne    c0023269 <SysLoadDLL(regs*)+0x6c>
c0023258:	83 ec 0c             	sub    esp,0xc
c002325b:	53                   	push   ebx
c002325c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	b8 03 00 00 00       	mov    eax,0x3
c0023267:	eb 36                	jmp    c002329f <SysLoadDLL(regs*)+0xa2>
c0023269:	83 ec 0c             	sub    esp,0xc
c002326c:	53                   	push   ebx
c002326d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023270:	58                   	pop    eax
c0023271:	5a                   	pop    edx
c0023272:	6a 00                	push   0x0
c0023274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023277:	e8 8f 15 00 00       	call   c002480b <Thr::loadDLL(char const*, bool)>
c002327c:	83 c4 10             	add    esp,0x10
c002327f:	31 d2                	xor    edx,edx
c0023281:	89 c1                	mov    ecx,eax
c0023283:	b8 04 00 00 00       	mov    eax,0x4
c0023288:	85 c9                	test   ecx,ecx
c002328a:	74 15                	je     c00232a1 <SysLoadDLL(regs*)+0xa4>
c002328c:	53                   	push   ebx
c002328d:	53                   	push   ebx
c002328e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023294:	51                   	push   ecx
c0023295:	e8 d2 17 00 00       	call   c0024a6c <Thr::executeDLL(unsigned long, void*)>
c002329a:	83 c4 10             	add    esp,0x10
c002329d:	31 c0                	xor    eax,eax
c002329f:	31 d2                	xor    edx,edx
c00232a1:	59                   	pop    ecx
c00232a2:	5b                   	pop    ebx
c00232a3:	5e                   	pop    esi
c00232a4:	c3                   	ret    

c00232a5 <SysRead(regs*)>:
c00232a5:	57                   	push   edi
c00232a6:	56                   	push   esi
c00232a7:	53                   	push   ebx
c00232a8:	83 ec 10             	sub    esp,0x10
c00232ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00232af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00232b2:	83 f8 02             	cmp    eax,0x2
c00232b5:	77 10                	ja     c00232c7 <SysRead(regs*)+0x22>
c00232b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232bf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00232c5:	eb 0e                	jmp    c00232d5 <SysRead(regs*)+0x30>
c00232c7:	83 ec 0c             	sub    esp,0xc
c00232ca:	50                   	push   eax
c00232cb:	e8 8f 4b ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c00232d0:	83 c4 10             	add    esp,0x10
c00232d3:	89 c1                	mov    ecx,eax
c00232d5:	83 c8 ff             	or     eax,0xffffffff
c00232d8:	85 c9                	test   ecx,ecx
c00232da:	89 c2                	mov    edx,eax
c00232dc:	74 28                	je     c0023306 <SysRead(regs*)+0x61>
c00232de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00232e6:	83 ec 0c             	sub    esp,0xc
c00232e9:	31 ff                	xor    edi,edi
c00232eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00232ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00232f1:	52                   	push   edx
c00232f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232f5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00232f8:	57                   	push   edi
c00232f9:	56                   	push   esi
c00232fa:	51                   	push   ecx
c00232fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00232fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023302:	83 c4 20             	add    esp,0x20
c0023305:	99                   	cdq    
c0023306:	83 c4 10             	add    esp,0x10
c0023309:	5b                   	pop    ebx
c002330a:	5e                   	pop    esi
c002330b:	5f                   	pop    edi
c002330c:	c3                   	ret    

c002330d <SysRegisterSignal(regs*)>:
c002330d:	83 ec 18             	sub    esp,0x18
c0023310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023314:	6a 00                	push   0x0
c0023316:	6a 00                	push   0x0
c0023318:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002331b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002331e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023323:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023326:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002332c:	e8 a1 d7 ff ff       	call   c0020ad2 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023331:	83 c4 2c             	add    esp,0x2c
c0023334:	99                   	cdq    
c0023335:	c3                   	ret    

c0023336 <SysRegistryGetTypeFromPath(regs*)>:
c0023336:	57                   	push   edi
c0023337:	56                   	push   esi
c0023338:	53                   	push   ebx
c0023339:	81 ec 38 01 00 00    	sub    esp,0x138
c002333f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023346:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023349:	68 fd 2b 03 c0       	push   0xc0032bfd
c002334e:	e8 7b 5f ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023353:	5a                   	pop    edx
c0023354:	59                   	pop    ecx
c0023355:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023358:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002335b:	e8 32 f6 ff ff       	call   c0022992 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023360:	5f                   	pop    edi
c0023361:	5a                   	pop    edx
c0023362:	89 c6                	mov    esi,eax
c0023364:	50                   	push   eax
c0023365:	68 1d 2c 03 c0       	push   0xc0032c1d
c002336a:	e8 5f 5f ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002336f:	83 c4 10             	add    esp,0x10
c0023372:	85 f6                	test   esi,esi
c0023374:	74 28                	je     c002339e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023376:	50                   	push   eax
c0023377:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002337b:	57                   	push   edi
c002337c:	56                   	push   esi
c002337d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023380:	e8 f2 f1 ff ff       	call   c0022577 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023385:	83 c4 0c             	add    esp,0xc
c0023388:	57                   	push   edi
c0023389:	50                   	push   eax
c002338a:	89 c3                	mov    ebx,eax
c002338c:	68 25 2c 03 c0       	push   0xc0032c25
c0023391:	e8 38 5f ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023396:	89 d8                	mov    eax,ebx
c0023398:	83 c4 10             	add    esp,0x10
c002339b:	99                   	cdq    
c002339c:	eb 05                	jmp    c00233a3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002339e:	83 c8 ff             	or     eax,0xffffffff
c00233a1:	89 c2                	mov    edx,eax
c00233a3:	81 c4 30 01 00 00    	add    esp,0x130
c00233a9:	5b                   	pop    ebx
c00233aa:	5e                   	pop    esi
c00233ab:	5f                   	pop    edi
c00233ac:	c3                   	ret    

c00233ad <SysRegistryReadExtent(regs*)>:
c00233ad:	83 ec 1c             	sub    esp,0x1c
c00233b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00233b4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00233b7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00233ba:	85 c0                	test   eax,eax
c00233bc:	79 1f                	jns    c00233dd <SysRegistryReadExtent(regs*)+0x30>
c00233be:	52                   	push   edx
c00233bf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00233c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00233c8:	52                   	push   edx
c00233c9:	50                   	push   eax
c00233ca:	51                   	push   ecx
c00233cb:	e8 99 f0 ff ff       	call   c0022469 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00233d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00233d8:	83 c4 10             	add    esp,0x10
c00233db:	eb 14                	jmp    c00233f1 <SysRegistryReadExtent(regs*)+0x44>
c00233dd:	83 ec 04             	sub    esp,0x4
c00233e0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00233e3:	50                   	push   eax
c00233e4:	51                   	push   ecx
c00233e5:	e8 1d eb ff ff       	call   c0021f07 <CmGetString(Reghive_Tag*, int, char*)>
c00233ea:	83 c4 10             	add    esp,0x10
c00233ed:	31 c0                	xor    eax,eax
c00233ef:	31 d2                	xor    edx,edx
c00233f1:	83 c4 1c             	add    esp,0x1c
c00233f4:	c3                   	ret    

c00233f5 <SysRegistryPathToExtentLookup(regs*)>:
c00233f5:	53                   	push   ebx
c00233f6:	83 ec 10             	sub    esp,0x10
c00233f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023400:	68 3b 2c 03 c0       	push   0xc0032c3b
c0023405:	e8 c4 5e ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002340a:	58                   	pop    eax
c002340b:	5a                   	pop    edx
c002340c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002340f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023412:	e8 7b f5 ff ff       	call   c0022992 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023417:	83 c4 18             	add    esp,0x18
c002341a:	5b                   	pop    ebx
c002341b:	99                   	cdq    
c002341c:	c3                   	ret    

c002341d <SysRegistryEnterDirectory(regs*)>:
c002341d:	53                   	push   ebx
c002341e:	83 ec 10             	sub    esp,0x10
c0023421:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023425:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023428:	68 5e 2c 03 c0       	push   0xc0032c5e
c002342d:	e8 9c 5e ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023432:	58                   	pop    eax
c0023433:	5a                   	pop    edx
c0023434:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023437:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002343a:	e8 3f eb ff ff       	call   c0021f7e <CmEnterDirectory(Reghive_Tag*, int)>
c002343f:	83 c4 18             	add    esp,0x18
c0023442:	5b                   	pop    ebx
c0023443:	99                   	cdq    
c0023444:	c3                   	ret    

c0023445 <SysRegistryGetNext(regs*)>:
c0023445:	53                   	push   ebx
c0023446:	83 ec 10             	sub    esp,0x10
c0023449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002344d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023450:	68 7c 2c 03 c0       	push   0xc0032c7c
c0023455:	e8 74 5e ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002345a:	58                   	pop    eax
c002345b:	5a                   	pop    edx
c002345c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002345f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023462:	e8 56 eb ff ff       	call   c0021fbd <CmGetNext(Reghive_Tag*, int)>
c0023467:	83 c4 18             	add    esp,0x18
c002346a:	5b                   	pop    ebx
c002346b:	99                   	cdq    
c002346c:	c3                   	ret    

c002346d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c002346d:	57                   	push   edi
c002346e:	56                   	push   esi
c002346f:	53                   	push   ebx
c0023470:	81 ec 34 01 00 00    	sub    esp,0x134
c0023476:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c002347d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023481:	57                   	push   edi
c0023482:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023485:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023488:	e8 ea f0 ff ff       	call   c0022577 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002348d:	89 c3                	mov    ebx,eax
c002348f:	58                   	pop    eax
c0023490:	5a                   	pop    edx
c0023491:	57                   	push   edi
c0023492:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023495:	e8 b6 d1 fd ff       	call   c0000650 <strcpy>
c002349a:	81 c4 40 01 00 00    	add    esp,0x140
c00234a0:	89 d8                	mov    eax,ebx
c00234a2:	5b                   	pop    ebx
c00234a3:	99                   	cdq    
c00234a4:	5e                   	pop    esi
c00234a5:	5f                   	pop    edi
c00234a6:	c3                   	ret    

c00234a7 <SysRegistryOpen(regs*)>:
c00234a7:	83 ec 18             	sub    esp,0x18
c00234aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00234b1:	e8 e1 e8 ff ff       	call   c0021d97 <CmOpen(char const*)>
c00234b6:	83 c4 1c             	add    esp,0x1c
c00234b9:	99                   	cdq    
c00234ba:	c3                   	ret    

c00234bb <SysRegistryClose(regs*)>:
c00234bb:	83 ec 18             	sub    esp,0x18
c00234be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00234c5:	e8 eb e9 ff ff       	call   c0021eb5 <CmClose(Reghive_Tag*)>
c00234ca:	31 c0                	xor    eax,eax
c00234cc:	31 d2                	xor    edx,edx
c00234ce:	83 c4 1c             	add    esp,0x1c
c00234d1:	c3                   	ret    

c00234d2 <SysSbrk(regs*)>:
c00234d2:	56                   	push   esi
c00234d3:	53                   	push   ebx
c00234d4:	50                   	push   eax
c00234d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234e1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00234e4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00234ea:	85 db                	test   ebx,ebx
c00234ec:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00234ef:	74 02                	je     c00234f3 <SysSbrk(regs*)+0x21>
c00234f1:	79 06                	jns    c00234f9 <SysSbrk(regs*)+0x27>
c00234f3:	89 f0                	mov    eax,esi
c00234f5:	31 d2                	xor    edx,edx
c00234f7:	eb 2a                	jmp    c0023523 <SysSbrk(regs*)+0x51>
c00234f9:	83 c8 ff             	or     eax,0xffffffff
c00234fc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023502:	89 c2                	mov    edx,eax
c0023504:	77 1d                	ja     c0023523 <SysSbrk(regs*)+0x51>
c0023506:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c002350c:	50                   	push   eax
c002350d:	68 07 0c 00 00       	push   0xc07
c0023512:	c1 ea 0c             	shr    edx,0xc
c0023515:	52                   	push   edx
c0023516:	51                   	push   ecx
c0023517:	e8 ae 52 ff ff       	call   c00187ca <VAS::allocatePages(int, int)>
c002351c:	89 f0                	mov    eax,esi
c002351e:	31 d2                	xor    edx,edx
c0023520:	83 c4 10             	add    esp,0x10
c0023523:	59                   	pop    ecx
c0023524:	5b                   	pop    ebx
c0023525:	5e                   	pop    esi
c0023526:	c3                   	ret    

c0023527 <SysSetCwd(regs*)>:
c0023527:	83 ec 14             	sub    esp,0x14
c002352a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002352e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023536:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023539:	e8 29 73 ff ff       	call   c001a867 <Fs::setcwd(Process*, char*)>
c002353e:	83 c4 1c             	add    esp,0x1c
c0023541:	99                   	cdq    
c0023542:	c3                   	ret    

c0023543 <SysSetTime(regs*)>:
c0023543:	55                   	push   ebp
c0023544:	31 c9                	xor    ecx,ecx
c0023546:	57                   	push   edi
c0023547:	bd 0c 00 00 00       	mov    ebp,0xc
c002354c:	56                   	push   esi
c002354d:	53                   	push   ebx
c002354e:	31 db                	xor    ebx,ebx
c0023550:	83 ec 10             	sub    esp,0x10
c0023553:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023557:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002355a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002355d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023560:	89 c2                	mov    edx,eax
c0023562:	c1 e8 05             	shr    eax,0x5
c0023565:	83 e2 1f             	and    edx,0x1f
c0023568:	42                   	inc    edx
c0023569:	81 ef 6c 07 00 00    	sub    edi,0x76c
c002356f:	c1 e7 10             	shl    edi,0x10
c0023572:	88 d1                	mov    cl,dl
c0023574:	31 d2                	xor    edx,edx
c0023576:	f7 f5                	div    ebp
c0023578:	89 dd                	mov    ebp,ebx
c002357a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023580:	88 d5                	mov    ch,dl
c0023582:	31 d2                	xor    edx,edx
c0023584:	0f b7 c1             	movzx  eax,cx
c0023587:	09 f8                	or     eax,edi
c0023589:	bf 3c 00 00 00       	mov    edi,0x3c
c002358e:	89 c1                	mov    ecx,eax
c0023590:	89 f0                	mov    eax,esi
c0023592:	f7 f7                	div    edi
c0023594:	c1 e2 10             	shl    edx,0x10
c0023597:	09 d5                	or     ebp,edx
c0023599:	31 d2                	xor    edx,edx
c002359b:	f7 f7                	div    edi
c002359d:	89 eb                	mov    ebx,ebp
c002359f:	bf 10 0e 00 00       	mov    edi,0xe10
c00235a4:	89 f0                	mov    eax,esi
c00235a6:	88 d7                	mov    bh,dl
c00235a8:	31 d2                	xor    edx,edx
c00235aa:	f7 f7                	div    edi
c00235ac:	bf 18 00 00 00       	mov    edi,0x18
c00235b1:	31 d2                	xor    edx,edx
c00235b3:	f7 f7                	div    edi
c00235b5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00235ba:	88 d3                	mov    bl,dl
c00235bc:	53                   	push   ebx
c00235bd:	51                   	push   ecx
c00235be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00235c4:	e8 af 7a ff ff       	call   c001b078 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00235c9:	83 c4 1c             	add    esp,0x1c
c00235cc:	31 d2                	xor    edx,edx
c00235ce:	5b                   	pop    ebx
c00235cf:	5e                   	pop    esi
c00235d0:	83 f0 01             	xor    eax,0x1
c00235d3:	5f                   	pop    edi
c00235d4:	0f b6 c0             	movzx  eax,al
c00235d7:	5d                   	pop    ebp
c00235d8:	c3                   	ret    

c00235d9 <SysSymlink(regs*)>:
c00235d9:	56                   	push   esi
c00235da:	83 c8 ff             	or     eax,0xffffffff
c00235dd:	53                   	push   ebx
c00235de:	89 c2                	mov    edx,eax
c00235e0:	81 ec 34 02 00 00    	sub    esp,0x234
c00235e6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00235ed:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00235f1:	74 50                	je     c0023643 <SysSymlink(regs*)+0x6a>
c00235f3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00235f6:	85 c9                	test   ecx,ecx
c00235f8:	74 49                	je     c0023643 <SysSymlink(regs*)+0x6a>
c00235fa:	6a 01                	push   0x1
c00235fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023601:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023604:	05 0c 01 00 00       	add    eax,0x10c
c0023609:	50                   	push   eax
c002360a:	51                   	push   ecx
c002360b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002360f:	56                   	push   esi
c0023610:	e8 c5 6b ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023615:	6a 01                	push   0x1
c0023617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002361c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002361f:	05 0c 01 00 00       	add    eax,0x10c
c0023624:	50                   	push   eax
c0023625:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023628:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002362f:	53                   	push   ebx
c0023630:	e8 a5 6b ff ff       	call   c001a1da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023635:	83 c4 18             	add    esp,0x18
c0023638:	56                   	push   esi
c0023639:	53                   	push   ebx
c002363a:	e8 aa 67 ff ff       	call   c0019de9 <KeCreateSymlink(char const*, char const*)>
c002363f:	83 c4 10             	add    esp,0x10
c0023642:	99                   	cdq    
c0023643:	81 c4 34 02 00 00    	add    esp,0x234
c0023649:	5b                   	pop    ebx
c002364a:	5e                   	pop    esi
c002364b:	c3                   	ret    

c002364c <SysTimezone(regs*)>:
c002364c:	53                   	push   ebx
c002364d:	83 ec 08             	sub    esp,0x8
c0023650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023654:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023658:	75 17                	jne    c0023671 <SysTimezone(regs*)+0x25>
c002365a:	83 ec 0c             	sub    esp,0xc
c002365d:	68 93 2c 03 c0       	push   0xc0032c93
c0023662:	e8 67 5c ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023667:	83 c8 ff             	or     eax,0xffffffff
c002366a:	83 c4 10             	add    esp,0x10
c002366d:	89 c2                	mov    edx,eax
c002366f:	eb 20                	jmp    c0023691 <SysTimezone(regs*)+0x45>
c0023671:	83 ec 0c             	sub    esp,0xc
c0023674:	68 a8 2c 03 c0       	push   0xc0032ca8
c0023679:	e8 50 5c ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002367e:	58                   	pop    eax
c002367f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023682:	e8 55 77 ff ff       	call   c001addc <User::loadClockSettings(int)>
c0023687:	83 c4 10             	add    esp,0x10
c002368a:	b8 01 00 00 00       	mov    eax,0x1
c002368f:	31 d2                	xor    edx,edx
c0023691:	83 c4 08             	add    esp,0x8
c0023694:	5b                   	pop    ebx
c0023695:	c3                   	ret    

c0023696 <SysTruncate(regs*)>:
c0023696:	55                   	push   ebp
c0023697:	57                   	push   edi
c0023698:	31 ff                	xor    edi,edi
c002369a:	56                   	push   esi
c002369b:	53                   	push   ebx
c002369c:	83 ec 0c             	sub    esp,0xc
c002369f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00236a3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00236a6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00236aa:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00236ad:	89 ce                	mov    esi,ecx
c00236af:	0f 84 9a 00 00 00    	je     c002374f <SysTruncate(regs*)+0xb9>
c00236b5:	83 ec 0c             	sub    esp,0xc
c00236b8:	68 14 01 00 00       	push   0x114
c00236bd:	e8 d5 2d ff ff       	call   c0016497 <malloc>
c00236c2:	83 c4 0c             	add    esp,0xc
c00236c5:	89 c3                	mov    ebx,eax
c00236c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236cf:	55                   	push   ebp
c00236d0:	53                   	push   ebx
c00236d1:	e8 10 6e ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c00236d6:	83 c4 10             	add    esp,0x10
c00236d9:	31 d2                	xor    edx,edx
c00236db:	85 db                	test   ebx,ebx
c00236dd:	b8 03 00 00 00       	mov    eax,0x3
c00236e2:	0f 84 a2 00 00 00    	je     c002378a <SysTruncate(regs*)+0xf4>
c00236e8:	51                   	push   ecx
c00236e9:	51                   	push   ecx
c00236ea:	6a 02                	push   0x2
c00236ec:	53                   	push   ebx
c00236ed:	e8 12 6e ff ff       	call   c001a504 <File::open(FileOpenMode)>
c00236f2:	83 c4 10             	add    esp,0x10
c00236f5:	85 c0                	test   eax,eax
c00236f7:	74 13                	je     c002370c <SysTruncate(regs*)+0x76>
c00236f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236fb:	83 ec 0c             	sub    esp,0xc
c00236fe:	53                   	push   ebx
c00236ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023702:	83 c4 10             	add    esp,0x10
c0023705:	b8 04 00 00 00       	mov    eax,0x4
c002370a:	eb 7c                	jmp    c0023788 <SysTruncate(regs*)+0xf2>
c002370c:	52                   	push   edx
c002370d:	57                   	push   edi
c002370e:	56                   	push   esi
c002370f:	53                   	push   ebx
c0023710:	e8 03 6f ff ff       	call   c001a618 <File::truncate(unsigned long long)>
c0023715:	83 c4 10             	add    esp,0x10
c0023718:	85 c0                	test   eax,eax
c002371a:	74 1b                	je     c0023737 <SysTruncate(regs*)+0xa1>
c002371c:	83 ec 0c             	sub    esp,0xc
c002371f:	53                   	push   ebx
c0023720:	e8 3d 6e ff ff       	call   c001a562 <File::close()>
c0023725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023727:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002372a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002372d:	83 c4 10             	add    esp,0x10
c0023730:	b8 05 00 00 00       	mov    eax,0x5
c0023735:	eb 51                	jmp    c0023788 <SysTruncate(regs*)+0xf2>
c0023737:	83 ec 0c             	sub    esp,0xc
c002373a:	53                   	push   ebx
c002373b:	e8 22 6e ff ff       	call   c001a562 <File::close()>
c0023740:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023742:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023745:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023748:	83 c4 10             	add    esp,0x10
c002374b:	31 c0                	xor    eax,eax
c002374d:	eb 39                	jmp    c0023788 <SysTruncate(regs*)+0xf2>
c002374f:	31 d2                	xor    edx,edx
c0023751:	83 fd 02             	cmp    ebp,0x2
c0023754:	b8 01 00 00 00       	mov    eax,0x1
c0023759:	7e 2f                	jle    c002378a <SysTruncate(regs*)+0xf4>
c002375b:	83 ec 0c             	sub    esp,0xc
c002375e:	51                   	push   ecx
c002375f:	e8 fb 46 ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c0023764:	83 c4 10             	add    esp,0x10
c0023767:	31 d2                	xor    edx,edx
c0023769:	89 c1                	mov    ecx,eax
c002376b:	b8 02 00 00 00       	mov    eax,0x2
c0023770:	85 c9                	test   ecx,ecx
c0023772:	74 16                	je     c002378a <SysTruncate(regs*)+0xf4>
c0023774:	50                   	push   eax
c0023775:	57                   	push   edi
c0023776:	56                   	push   esi
c0023777:	51                   	push   ecx
c0023778:	e8 9b 6e ff ff       	call   c001a618 <File::truncate(unsigned long long)>
c002377d:	83 c4 10             	add    esp,0x10
c0023780:	85 c0                	test   eax,eax
c0023782:	0f 95 c0             	setne  al
c0023785:	0f b6 c0             	movzx  eax,al
c0023788:	31 d2                	xor    edx,edx
c002378a:	83 c4 0c             	add    esp,0xc
c002378d:	5b                   	pop    ebx
c002378e:	5e                   	pop    esi
c002378f:	5f                   	pop    edi
c0023790:	5d                   	pop    ebp
c0023791:	c3                   	ret    

c0023792 <SysWrite(regs*)>:
c0023792:	57                   	push   edi
c0023793:	56                   	push   esi
c0023794:	53                   	push   ebx
c0023795:	83 ec 10             	sub    esp,0x10
c0023798:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002379c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002379f:	83 f8 02             	cmp    eax,0x2
c00237a2:	77 10                	ja     c00237b4 <SysWrite(regs*)+0x22>
c00237a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237ac:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00237b2:	eb 0e                	jmp    c00237c2 <SysWrite(regs*)+0x30>
c00237b4:	83 ec 0c             	sub    esp,0xc
c00237b7:	50                   	push   eax
c00237b8:	e8 a2 46 ff ff       	call   c0017e5f <KeGetFileFromDescriptor(int)>
c00237bd:	83 c4 10             	add    esp,0x10
c00237c0:	89 c1                	mov    ecx,eax
c00237c2:	83 c8 ff             	or     eax,0xffffffff
c00237c5:	85 c9                	test   ecx,ecx
c00237c7:	89 c2                	mov    edx,eax
c00237c9:	74 28                	je     c00237f3 <SysWrite(regs*)+0x61>
c00237cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237d3:	83 ec 0c             	sub    esp,0xc
c00237d6:	31 ff                	xor    edi,edi
c00237d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00237dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00237de:	52                   	push   edx
c00237df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00237e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00237e5:	57                   	push   edi
c00237e6:	56                   	push   esi
c00237e7:	51                   	push   ecx
c00237e8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00237eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00237ef:	83 c4 20             	add    esp,0x20
c00237f2:	99                   	cdq    
c00237f3:	83 c4 10             	add    esp,0x10
c00237f6:	5b                   	pop    ebx
c00237f7:	5e                   	pop    esi
c00237f8:	5f                   	pop    edi
c00237f9:	c3                   	ret    

c00237fa <SysWsbe(regs*)>:
c00237fa:	57                   	push   edi
c00237fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0023800:	56                   	push   esi
c0023801:	be e7 2c 03 c0       	mov    esi,0xc0032ce7
c0023806:	53                   	push   ebx
c0023807:	83 ec 30             	sub    esp,0x30
c002380a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002380e:	fc                   	cld    
c002380f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023811:	83 ec 0c             	sub    esp,0xc
c0023814:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002381d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023820:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023826:	8b 06                	mov    eax,DWORD PTR [esi]
c0023828:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002382b:	57                   	push   edi
c002382c:	e8 4f cd fd ff       	call   c0000580 <strlen>
c0023831:	5a                   	pop    edx
c0023832:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023836:	52                   	push   edx
c0023837:	31 d2                	xor    edx,edx
c0023839:	57                   	push   edi
c002383a:	52                   	push   edx
c002383b:	50                   	push   eax
c002383c:	56                   	push   esi
c002383d:	ff d3                	call   ebx
c002383f:	83 c4 14             	add    esp,0x14
c0023842:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023846:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023849:	e8 c2 21 00 00       	call   c0025a10 <terminateTask(int)>
c002384e:	83 c4 40             	add    esp,0x40
c0023851:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023856:	5b                   	pop    ebx
c0023857:	31 d2                	xor    edx,edx
c0023859:	5e                   	pop    esi
c002385a:	5f                   	pop    edi
c002385b:	c3                   	ret    

c002385c <SysYield(regs*)>:
c002385c:	83 ec 0c             	sub    esp,0xc
c002385f:	fa                   	cli    
c0023860:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023866:	e8 31 1a 00 00       	call   c002529c <schedule()>
c002386b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023870:	48                   	dec    eax
c0023871:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023876:	75 01                	jne    c0023879 <SysYield(regs*)+0x1d>
c0023878:	fb                   	sti    
c0023879:	31 c0                	xor    eax,eax
c002387b:	31 d2                	xor    edx,edx
c002387d:	83 c4 0c             	add    esp,0xc
c0023880:	c3                   	ret    

c0023881 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023881:	55                   	push   ebp
c0023882:	57                   	push   edi
c0023883:	56                   	push   esi
c0023884:	53                   	push   ebx
c0023885:	81 ec 2c 10 00 00    	sub    esp,0x102c
c002388b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023896:	74 3b                	je     c00238d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023898:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00238a0:	74 31                	je     c00238d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00238a2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00238aa:	75 27                	jne    c00238d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00238ac:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00238b3:	05 00 10 00 00       	add    eax,0x1000
c00238b8:	89 c2                	mov    edx,eax
c00238ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00238bf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00238c6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00238cc:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00238d3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00238da:	83 ec 0c             	sub    esp,0xc
c00238dd:	6a 01                	push   0x1
c00238df:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00238e5:	e8 cf 46 ff ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c00238ea:	83 c4 10             	add    esp,0x10
c00238ed:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00238f3:	89 c3                	mov    ebx,eax
c00238f5:	0f 86 26 01 00 00    	jbe    c0023a21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00238fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023903:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c002390a:	c1 ee 0c             	shr    esi,0xc
c002390d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023911:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023918:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c002391f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023923:	29 ef                	sub    edi,ebp
c0023925:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023929:	0f 83 f9 00 00 00    	jae    c0023a28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c002392f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023935:	b8 00 10 00 00       	mov    eax,0x1000
c002393a:	0f 47 f8             	cmova  edi,eax
c002393d:	83 ec 0c             	sub    esp,0xc
c0023940:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023947:	31 d2                	xor    edx,edx
c0023949:	8b 08                	mov    ecx,DWORD PTR [eax]
c002394b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002394f:	50                   	push   eax
c0023950:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023954:	56                   	push   esi
c0023955:	52                   	push   edx
c0023956:	57                   	push   edi
c0023957:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c002395e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023961:	83 c4 20             	add    esp,0x20
c0023964:	85 c0                	test   eax,eax
c0023966:	75 06                	jne    c002396e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023968:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002396c:	74 13                	je     c0023981 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c002396e:	83 ec 0c             	sub    esp,0xc
c0023971:	53                   	push   ebx
c0023972:	e8 56 49 ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c0023977:	83 c4 10             	add    esp,0x10
c002397a:	31 c0                	xor    eax,eax
c002397c:	e9 7c 01 00 00       	jmp    c0023afd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023981:	fa                   	cli    
c0023982:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023988:	e8 19 2e ff ff       	call   c00167a6 <Phys::allocatePage()>
c002398d:	6a 07                	push   0x7
c002398f:	53                   	push   ebx
c0023990:	50                   	push   eax
c0023991:	89 c7                	mov    edi,eax
c0023993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023998:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002399b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239a1:	e8 1c 4d ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00239a6:	83 c4 0c             	add    esp,0xc
c00239a9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00239b0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239b6:	6a 00                	push   0x0
c00239b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c6:	e8 5d 4b ff ff       	call   c0018528 <VAS::mapOtherVASIn(bool, VAS*)>
c00239cb:	58                   	pop    eax
c00239cc:	5a                   	pop    edx
c00239cd:	68 07 0c 00 00       	push   0xc07
c00239d2:	55                   	push   ebp
c00239d3:	57                   	push   edi
c00239d4:	89 df                	mov    edi,ebx
c00239d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239e3:	6a 00                	push   0x0
c00239e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239f3:	e8 2e 4f ff ff       	call   c0018926 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239f8:	b9 00 10 00 00       	mov    ecx,0x1000
c00239fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00239ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023a04:	83 c4 20             	add    esp,0x20
c0023a07:	48                   	dec    eax
c0023a08:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023a0d:	85 c0                	test   eax,eax
c0023a0f:	75 01                	jne    c0023a12 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023a11:	fb                   	sti    
c0023a12:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023a16:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023a1c:	e9 f0 fe ff ff       	jmp    c0023911 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023a21:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023a28:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023a2f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023a35:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023a3b:	0f 86 ae 00 00 00    	jbe    c0023aef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023a41:	fa                   	cli    
c0023a42:	51                   	push   ecx
c0023a43:	31 ff                	xor    edi,edi
c0023a45:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023a4c:	c1 ee 0c             	shr    esi,0xc
c0023a4f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a55:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a5b:	6a 00                	push   0x0
c0023a5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a65:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a6b:	e8 b8 4a ff ff       	call   c0018528 <VAS::mapOtherVASIn(bool, VAS*)>
c0023a70:	83 c4 10             	add    esp,0x10
c0023a73:	e8 2e 2d ff ff       	call   c00167a6 <Phys::allocatePage()>
c0023a78:	47                   	inc    edi
c0023a79:	6a 07                	push   0x7
c0023a7b:	53                   	push   ebx
c0023a7c:	50                   	push   eax
c0023a7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023a87:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023a8a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023a90:	e8 2d 4c ff ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023a95:	58                   	pop    eax
c0023a96:	5a                   	pop    edx
c0023a97:	68 07 0c 00 00       	push   0xc07
c0023a9c:	55                   	push   ebp
c0023a9d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023aa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023aa7:	50                   	push   eax
c0023aa8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023aaf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ab5:	6a 00                	push   0x0
c0023ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023abc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023abf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ac5:	e8 5c 4e ff ff       	call   c0018926 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023aca:	83 c4 1c             	add    esp,0x1c
c0023acd:	68 00 10 00 00       	push   0x1000
c0023ad2:	6a 00                	push   0x0
c0023ad4:	53                   	push   ebx
c0023ad5:	e8 16 ca fd ff       	call   c00004f0 <memset>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	39 fe                	cmp    esi,edi
c0023adf:	77 92                	ja     c0023a73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0023ae1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023ae6:	48                   	dec    eax
c0023ae7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023aec:	75 01                	jne    c0023aef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023aee:	fb                   	sti    
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	53                   	push   ebx
c0023af3:	e8 d5 47 ff ff       	call   c00182cd <Virt::freeKernelVirtualPages(unsigned long)>
c0023af8:	83 c4 10             	add    esp,0x10
c0023afb:	b0 01                	mov    al,0x1
c0023afd:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023b03:	5b                   	pop    ebx
c0023b04:	5e                   	pop    esi
c0023b05:	5f                   	pop    edi
c0023b06:	5d                   	pop    ebp
c0023b07:	c3                   	ret    

c0023b08 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023b08:	55                   	push   ebp
c0023b09:	57                   	push   edi
c0023b0a:	56                   	push   esi
c0023b0b:	53                   	push   ebx
c0023b0c:	83 ec 48             	sub    esp,0x48
c0023b0f:	68 14 01 00 00       	push   0x114
c0023b14:	e8 7e 29 ff ff       	call   c0016497 <malloc>
c0023b19:	83 c4 0c             	add    esp,0xc
c0023b1c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023b20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023b24:	89 c7                	mov    edi,eax
c0023b26:	50                   	push   eax
c0023b27:	e8 ba 69 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0023b2c:	58                   	pop    eax
c0023b2d:	5a                   	pop    edx
c0023b2e:	6a 01                	push   0x1
c0023b30:	57                   	push   edi
c0023b31:	e8 ce 69 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0023b36:	83 c4 10             	add    esp,0x10
c0023b39:	85 c0                	test   eax,eax
c0023b3b:	0f 85 4c 01 00 00    	jne    c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b41:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	6a 34                	push   0x34
c0023b4e:	e8 44 29 ff ff       	call   c0016497 <malloc>
c0023b53:	89 c3                	mov    ebx,eax
c0023b55:	58                   	pop    eax
c0023b56:	8b 07                	mov    eax,DWORD PTR [edi]
c0023b58:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023b5c:	56                   	push   esi
c0023b5d:	53                   	push   ebx
c0023b5e:	6a 00                	push   0x0
c0023b60:	6a 34                	push   0x34
c0023b62:	57                   	push   edi
c0023b63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023b66:	83 c4 20             	add    esp,0x20
c0023b69:	85 c0                	test   eax,eax
c0023b6b:	0f 85 1c 01 00 00    	jne    c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b71:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023b77:	0f 85 10 01 00 00    	jne    c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023b80:	85 c0                	test   eax,eax
c0023b82:	0f 84 05 01 00 00    	je     c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b88:	31 d2                	xor    edx,edx
c0023b8a:	55                   	push   ebp
c0023b8b:	52                   	push   edx
c0023b8c:	50                   	push   eax
c0023b8d:	57                   	push   edi
c0023b8e:	e8 2f 6a ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023b93:	83 c4 10             	add    esp,0x10
c0023b96:	85 c0                	test   eax,eax
c0023b98:	0f 85 ef 00 00 00    	jne    c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b9e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ba8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023bac:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bb0:	0f af c2             	imul   eax,edx
c0023bb3:	50                   	push   eax
c0023bb4:	e8 de 28 ff ff       	call   c0016497 <malloc>
c0023bb9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023bbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0023bbe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023bc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023bc6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bca:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bce:	0f af c2             	imul   eax,edx
c0023bd1:	99                   	cdq    
c0023bd2:	52                   	push   edx
c0023bd3:	50                   	push   eax
c0023bd4:	57                   	push   edi
c0023bd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023bd8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023bdb:	83 c4 20             	add    esp,0x20
c0023bde:	85 c0                	test   eax,eax
c0023be0:	0f 84 a7 00 00 00    	je     c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023be6:	31 d2                	xor    edx,edx
c0023be8:	51                   	push   ecx
c0023be9:	52                   	push   edx
c0023bea:	50                   	push   eax
c0023beb:	57                   	push   edi
c0023bec:	e8 d1 69 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023bf1:	83 c4 10             	add    esp,0x10
c0023bf4:	85 c0                	test   eax,eax
c0023bf6:	0f 85 91 00 00 00    	jne    c0023c8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023bfc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c00:	83 ec 0c             	sub    esp,0xc
c0023c03:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c07:	0f af c2             	imul   eax,edx
c0023c0a:	50                   	push   eax
c0023c0b:	e8 87 28 ff ff       	call   c0016497 <malloc>
c0023c10:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023c12:	89 34 24             	mov    DWORD PTR [esp],esi
c0023c15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c1d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c21:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c25:	0f af c2             	imul   eax,edx
c0023c28:	99                   	cdq    
c0023c29:	52                   	push   edx
c0023c2a:	50                   	push   eax
c0023c2b:	57                   	push   edi
c0023c2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c2f:	83 c4 20             	add    esp,0x20
c0023c32:	31 c9                	xor    ecx,ecx
c0023c34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c3c:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023c40:	0f b7 e9             	movzx  ebp,cx
c0023c43:	0f 83 86 00 00 00    	jae    c0023ccf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023c49:	c1 e5 05             	shl    ebp,0x5
c0023c4c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023c50:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023c54:	75 73                	jne    c0023cc9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023c56:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023c5d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023c60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c64:	52                   	push   edx
c0023c65:	31 d2                	xor    edx,edx
c0023c67:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023c6a:	52                   	push   edx
c0023c6b:	50                   	push   eax
c0023c6c:	57                   	push   edi
c0023c6d:	e8 50 69 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023c72:	83 c4 10             	add    esp,0x10
c0023c75:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023c79:	85 c0                	test   eax,eax
c0023c7b:	74 17                	je     c0023c94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023c7d:	83 ec 0c             	sub    esp,0xc
c0023c80:	68 13 2d 03 c0       	push   0xc0032d13
c0023c85:	e8 44 56 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023c8a:	83 c4 10             	add    esp,0x10
c0023c8d:	31 c0                	xor    eax,eax
c0023c8f:	e9 8b 00 00 00       	jmp    c0023d1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023c94:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023c98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023c9b:	83 ec 0c             	sub    esp,0xc
c0023c9e:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023ca1:	50                   	push   eax
c0023ca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023ca6:	56                   	push   esi
c0023ca7:	57                   	push   edi
c0023ca8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023cac:	e8 d0 fb ff ff       	call   c0023881 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023cb1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023cb5:	83 c4 20             	add    esp,0x20
c0023cb8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0023cbc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023cc0:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0023cc5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0023cc9:	41                   	inc    ecx
c0023cca:	e9 6d ff ff ff       	jmp    c0023c3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023ccf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0023cd3:	83 ec 0c             	sub    esp,0xc
c0023cd6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cde:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023ce4:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023cea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023cef:	05 00 10 00 00       	add    eax,0x1000
c0023cf4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cfb:	e8 a7 27 ff ff       	call   c00164a7 <free>
c0023d00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d03:	e8 9f 27 ff ff       	call   c00164a7 <free>
c0023d08:	58                   	pop    eax
c0023d09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d0d:	e8 95 27 ff ff       	call   c00164a7 <free>
c0023d12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023d15:	e8 48 68 ff ff       	call   c001a562 <File::close()>
c0023d1a:	83 c4 10             	add    esp,0x10
c0023d1d:	b0 01                	mov    al,0x1
c0023d1f:	83 c4 3c             	add    esp,0x3c
c0023d22:	5b                   	pop    ebx
c0023d23:	5e                   	pop    esi
c0023d24:	5f                   	pop    edi
c0023d25:	5d                   	pop    ebp
c0023d26:	c3                   	ret    

c0023d27 <Thr::runtimeReferenceHelper()>:
c0023d27:	83 ec 18             	sub    esp,0x18
c0023d2a:	68 1b 2d 03 c0       	push   0xc0032d1b
c0023d2f:	e8 9a 55 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0023d34:	fa                   	cli    
c0023d35:	83 c4 10             	add    esp,0x10
c0023d38:	eb fe                	jmp    c0023d38 <Thr::runtimeReferenceHelper()+0x11>

c0023d3a <Thr::getAddressOfKernelSymbol(char const*)>:
c0023d3a:	57                   	push   edi
c0023d3b:	56                   	push   esi
c0023d3c:	53                   	push   ebx
c0023d3d:	31 db                	xor    ebx,ebx
c0023d3f:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023d45:	7e 3c                	jle    c0023d83 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023d47:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023d4e:	31 ff                	xor    edi,edi
c0023d50:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023d57:	7e 27                	jle    c0023d80 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023d59:	50                   	push   eax
c0023d5a:	50                   	push   eax
c0023d5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d61:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023d68:	50                   	push   eax
c0023d69:	e8 12 ca fd ff       	call   c0000780 <strcmp>
c0023d6e:	83 c4 10             	add    esp,0x10
c0023d71:	85 c0                	test   eax,eax
c0023d73:	75 05                	jne    c0023d7a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023d75:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023d78:	eb 0b                	jmp    c0023d85 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023d7a:	83 c6 10             	add    esi,0x10
c0023d7d:	47                   	inc    edi
c0023d7e:	eb d0                	jmp    c0023d50 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023d80:	43                   	inc    ebx
c0023d81:	eb bc                	jmp    c0023d3f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023d83:	31 c0                	xor    eax,eax
c0023d85:	5b                   	pop    ebx
c0023d86:	5e                   	pop    esi
c0023d87:	5f                   	pop    edi
c0023d88:	c3                   	ret    

c0023d89 <Thr::loadKernelSymbolTable(char const*)>:
c0023d89:	55                   	push   ebp
c0023d8a:	57                   	push   edi
c0023d8b:	56                   	push   esi
c0023d8c:	53                   	push   ebx
c0023d8d:	83 ec 68             	sub    esp,0x68
c0023d90:	68 14 01 00 00       	push   0x114
c0023d95:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023d9b:	e8 f7 26 ff ff       	call   c0016497 <malloc>
c0023da0:	83 c4 0c             	add    esp,0xc
c0023da3:	56                   	push   esi
c0023da4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023da8:	89 c3                	mov    ebx,eax
c0023daa:	50                   	push   eax
c0023dab:	e8 36 67 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0023db0:	5e                   	pop    esi
c0023db1:	5f                   	pop    edi
c0023db2:	6a 01                	push   0x1
c0023db4:	53                   	push   ebx
c0023db5:	e8 4a 67 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0023dba:	83 c4 10             	add    esp,0x10
c0023dbd:	85 c0                	test   eax,eax
c0023dbf:	74 0a                	je     c0023dcb <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023dc1:	83 ec 0c             	sub    esp,0xc
c0023dc4:	68 3d 2d 03 c0       	push   0xc0032d3d
c0023dc9:	eb 34                	jmp    c0023dff <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023dcb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023dd3:	83 ec 0c             	sub    esp,0xc
c0023dd6:	6a 34                	push   0x34
c0023dd8:	e8 ba 26 ff ff       	call   c0016497 <malloc>
c0023ddd:	59                   	pop    ecx
c0023dde:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023de2:	89 c7                	mov    edi,eax
c0023de4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023de6:	56                   	push   esi
c0023de7:	57                   	push   edi
c0023de8:	6a 00                	push   0x0
c0023dea:	6a 34                	push   0x34
c0023dec:	53                   	push   ebx
c0023ded:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023df0:	83 c4 20             	add    esp,0x20
c0023df3:	85 c0                	test   eax,eax
c0023df5:	74 17                	je     c0023e0e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023df7:	83 ec 0c             	sub    esp,0xc
c0023dfa:	68 54 2d 03 c0       	push   0xc0032d54
c0023dff:	e8 52 c4 ff ff       	call   c0020256 <KePanic(char const*)>
c0023e04:	83 c4 10             	add    esp,0x10
c0023e07:	31 c0                	xor    eax,eax
c0023e09:	e9 31 02 00 00       	jmp    c002403f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023e0e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023e14:	75 e1                	jne    c0023df7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e16:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023e19:	85 c0                	test   eax,eax
c0023e1b:	74 da                	je     c0023df7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e1d:	52                   	push   edx
c0023e1e:	31 d2                	xor    edx,edx
c0023e20:	52                   	push   edx
c0023e21:	50                   	push   eax
c0023e22:	53                   	push   ebx
c0023e23:	e8 9a 67 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023e28:	83 c4 10             	add    esp,0x10
c0023e2b:	85 c0                	test   eax,eax
c0023e2d:	75 c8                	jne    c0023df7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e2f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e33:	83 ec 0c             	sub    esp,0xc
c0023e36:	31 ed                	xor    ebp,ebp
c0023e38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e3c:	0f af c2             	imul   eax,edx
c0023e3f:	50                   	push   eax
c0023e40:	e8 52 26 ff ff       	call   c0016497 <malloc>
c0023e45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e52:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e5a:	0f af c2             	imul   eax,edx
c0023e5d:	99                   	cdq    
c0023e5e:	52                   	push   edx
c0023e5f:	50                   	push   eax
c0023e60:	53                   	push   ebx
c0023e61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e64:	83 c4 20             	add    esp,0x20
c0023e67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023e6f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023e77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023e7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023e87:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023e8b:	0f b7 f5             	movzx  esi,bp
c0023e8e:	0f 83 a7 00 00 00    	jae    c0023f3b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023e94:	6b f6 28             	imul   esi,esi,0x28
c0023e97:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023e9b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023ea2:	50                   	push   eax
c0023ea3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023ea7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023eab:	8b 16                	mov    edx,DWORD PTR [esi]
c0023ead:	6b c0 28             	imul   eax,eax,0x28
c0023eb0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023eb4:	89 d0                	mov    eax,edx
c0023eb6:	31 d2                	xor    edx,edx
c0023eb8:	52                   	push   edx
c0023eb9:	50                   	push   eax
c0023eba:	53                   	push   ebx
c0023ebb:	e8 02 67 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023ec0:	83 c4 0c             	add    esp,0xc
c0023ec3:	6a 20                	push   0x20
c0023ec5:	6a 00                	push   0x0
c0023ec7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ecb:	52                   	push   edx
c0023ecc:	e8 1f c6 fd ff       	call   c00004f0 <memset>
c0023ed1:	58                   	pop    eax
c0023ed2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ed4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023ed8:	51                   	push   ecx
c0023ed9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023edd:	52                   	push   edx
c0023ede:	6a 00                	push   0x0
c0023ee0:	6a 1f                	push   0x1f
c0023ee2:	53                   	push   ebx
c0023ee3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ee6:	83 c4 18             	add    esp,0x18
c0023ee9:	68 6b 2d 03 c0       	push   0xc0032d6b
c0023eee:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ef2:	52                   	push   edx
c0023ef3:	e8 88 c8 fd ff       	call   c0000780 <strcmp>
c0023ef8:	83 c4 10             	add    esp,0x10
c0023efb:	85 c0                	test   eax,eax
c0023efd:	75 0f                	jne    c0023f0e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023eff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f0e:	50                   	push   eax
c0023f0f:	50                   	push   eax
c0023f10:	68 73 2d 03 c0       	push   0xc0032d73
c0023f15:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023f19:	50                   	push   eax
c0023f1a:	e8 61 c8 fd ff       	call   c0000780 <strcmp>
c0023f1f:	83 c4 10             	add    esp,0x10
c0023f22:	85 c0                	test   eax,eax
c0023f24:	75 0f                	jne    c0023f35 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023f26:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f35:	45                   	inc    ebp
c0023f36:	e9 4c ff ff ff       	jmp    c0023e87 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023f3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023f40:	75 10                	jne    c0023f52 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023f42:	83 ec 0c             	sub    esp,0xc
c0023f45:	68 7b 2d 03 c0       	push   0xc0032d7b
c0023f4a:	e8 07 c3 ff ff       	call   c0020256 <KePanic(char const*)>
c0023f4f:	83 c4 10             	add    esp,0x10
c0023f52:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023f57:	75 10                	jne    c0023f69 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023f59:	83 ec 0c             	sub    esp,0xc
c0023f5c:	68 7b 2d 03 c0       	push   0xc0032d7b
c0023f61:	e8 f0 c2 ff ff       	call   c0020256 <KePanic(char const*)>
c0023f66:	83 c4 10             	add    esp,0x10
c0023f69:	50                   	push   eax
c0023f6a:	31 d2                	xor    edx,edx
c0023f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f70:	52                   	push   edx
c0023f71:	50                   	push   eax
c0023f72:	53                   	push   ebx
c0023f73:	e8 4a 66 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023f78:	5a                   	pop    edx
c0023f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023f7d:	e8 15 25 ff ff       	call   c0016497 <malloc>
c0023f82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023f86:	31 c9                	xor    ecx,ecx
c0023f88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f8e:	5e                   	pop    esi
c0023f8f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023f93:	55                   	push   ebp
c0023f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f98:	51                   	push   ecx
c0023f99:	52                   	push   edx
c0023f9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023f9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023fa2:	53                   	push   ebx
c0023fa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fa6:	83 c4 14             	add    esp,0x14
c0023fa9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023fad:	e8 e5 24 ff ff       	call   c0016497 <malloc>
c0023fb2:	89 c6                	mov    esi,eax
c0023fb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fb9:	56                   	push   esi
c0023fba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023fbe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023fc2:	51                   	push   ecx
c0023fc3:	52                   	push   edx
c0023fc4:	53                   	push   ebx
c0023fc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fcc:	83 c4 1c             	add    esp,0x1c
c0023fcf:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023fd5:	c1 e8 04             	shr    eax,0x4
c0023fd8:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fe3:	31 d2                	xor    edx,edx
c0023fe5:	52                   	push   edx
c0023fe6:	50                   	push   eax
c0023fe7:	53                   	push   ebx
c0023fe8:	e8 d5 65 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0023fed:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023fef:	31 d2                	xor    edx,edx
c0023ff1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023ff4:	56                   	push   esi
c0023ff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ff9:	52                   	push   edx
c0023ffa:	50                   	push   eax
c0023ffb:	53                   	push   ebx
c0023ffc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023fff:	83 c4 14             	add    esp,0x14
c0024002:	53                   	push   ebx
c0024003:	e8 5a 65 ff ff       	call   c001a562 <File::close()>
c0024008:	5d                   	pop    ebp
c0024009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002400d:	e8 95 24 ff ff       	call   c00164a7 <free>
c0024012:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024015:	e8 8d 24 ff ff       	call   c00164a7 <free>
c002401a:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c002401f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024023:	83 c4 10             	add    esp,0x10
c0024026:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002402d:	8d 50 01             	lea    edx,[eax+0x1]
c0024030:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024037:	b0 01                	mov    al,0x1
c0024039:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c002403f:	83 c4 5c             	add    esp,0x5c
c0024042:	5b                   	pop    ebx
c0024043:	5e                   	pop    esi
c0024044:	5f                   	pop    edi
c0024045:	5d                   	pop    ebp
c0024046:	c3                   	ret    

c0024047 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024047:	55                   	push   ebp
c0024048:	57                   	push   edi
c0024049:	56                   	push   esi
c002404a:	53                   	push   ebx
c002404b:	81 ec 68 03 00 00    	sub    esp,0x368
c0024051:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0024058:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c002405e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0024062:	68 14 01 00 00       	push   0x114
c0024067:	e8 2b 24 ff ff       	call   c0016497 <malloc>
c002406c:	83 c4 0c             	add    esp,0xc
c002406f:	56                   	push   esi
c0024070:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0024077:	50                   	push   eax
c0024078:	89 c3                	mov    ebx,eax
c002407a:	e8 67 64 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c002407f:	5f                   	pop    edi
c0024080:	5d                   	pop    ebp
c0024081:	6a 01                	push   0x1
c0024083:	53                   	push   ebx
c0024084:	e8 7b 64 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0024089:	83 c4 10             	add    esp,0x10
c002408c:	85 c0                	test   eax,eax
c002408e:	0f 85 b3 06 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024094:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002409c:	83 ec 0c             	sub    esp,0xc
c002409f:	6a 34                	push   0x34
c00240a1:	e8 f1 23 ff ff       	call   c0016497 <malloc>
c00240a6:	5e                   	pop    esi
c00240a7:	8d 74 24 54          	lea    esi,[esp+0x54]
c00240ab:	89 c5                	mov    ebp,eax
c00240ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240af:	56                   	push   esi
c00240b0:	55                   	push   ebp
c00240b1:	6a 00                	push   0x0
c00240b3:	6a 34                	push   0x34
c00240b5:	53                   	push   ebx
c00240b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00240b9:	83 c4 20             	add    esp,0x20
c00240bc:	85 c0                	test   eax,eax
c00240be:	0f 85 83 06 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240c4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00240cb:	0f 85 76 06 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240d1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00240d4:	85 c0                	test   eax,eax
c00240d6:	0f 84 6b 06 00 00    	je     c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240dc:	31 d2                	xor    edx,edx
c00240de:	51                   	push   ecx
c00240df:	52                   	push   edx
c00240e0:	50                   	push   eax
c00240e1:	53                   	push   ebx
c00240e2:	e8 db 64 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c00240e7:	83 c4 10             	add    esp,0x10
c00240ea:	85 c0                	test   eax,eax
c00240ec:	0f 85 55 06 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240f2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00240f5:	83 ec 0c             	sub    esp,0xc
c00240f8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00240fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024100:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024104:	0f af c2             	imul   eax,edx
c0024107:	50                   	push   eax
c0024108:	e8 8a 23 ff ff       	call   c0016497 <malloc>
c002410d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002410f:	89 34 24             	mov    DWORD PTR [esp],esi
c0024112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002411a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002411e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024122:	0f af c2             	imul   eax,edx
c0024125:	99                   	cdq    
c0024126:	52                   	push   edx
c0024127:	50                   	push   eax
c0024128:	53                   	push   ebx
c0024129:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002412c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c002412f:	83 c4 20             	add    esp,0x20
c0024132:	85 c0                	test   eax,eax
c0024134:	0f 84 0d 06 00 00    	je     c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002413a:	52                   	push   edx
c002413b:	31 d2                	xor    edx,edx
c002413d:	52                   	push   edx
c002413e:	50                   	push   eax
c002413f:	53                   	push   ebx
c0024140:	e8 7d 64 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0024145:	83 c4 10             	add    esp,0x10
c0024148:	85 c0                	test   eax,eax
c002414a:	0f 85 f7 05 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024150:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024154:	83 ec 0c             	sub    esp,0xc
c0024157:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c002415b:	0f af c2             	imul   eax,edx
c002415e:	50                   	push   eax
c002415f:	e8 33 23 ff ff       	call   c0016497 <malloc>
c0024164:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024166:	89 34 24             	mov    DWORD PTR [esp],esi
c0024169:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002416d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024171:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024175:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024179:	0f af c2             	imul   eax,edx
c002417c:	99                   	cdq    
c002417d:	52                   	push   edx
c002417e:	50                   	push   eax
c002417f:	53                   	push   ebx
c0024180:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024183:	83 c4 20             	add    esp,0x20
c0024186:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002418c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002418f:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0024193:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0024197:	73 78                	jae    c0024211 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0024199:	c1 e7 05             	shl    edi,0x5
c002419c:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00241a0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00241a3:	75 63                	jne    c0024208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00241a5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00241a8:	31 d2                	xor    edx,edx
c00241aa:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00241ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241b1:	50                   	push   eax
c00241b2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00241b5:	52                   	push   edx
c00241b6:	50                   	push   eax
c00241b7:	53                   	push   ebx
c00241b8:	e8 05 64 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c00241bd:	83 c4 10             	add    esp,0x10
c00241c0:	85 c0                	test   eax,eax
c00241c2:	0f 85 7f 05 00 00    	jne    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00241c8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00241cf:	83 ec 0c             	sub    esp,0xc
c00241d2:	31 d2                	xor    edx,edx
c00241d4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00241d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00241da:	01 c6                	add    esi,eax
c00241dc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00241e3:	50                   	push   eax
c00241e4:	56                   	push   esi
c00241e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241e9:	52                   	push   edx
c00241ea:	50                   	push   eax
c00241eb:	53                   	push   ebx
c00241ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241ef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00241f2:	83 c4 1c             	add    esp,0x1c
c00241f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00241f8:	50                   	push   eax
c00241f9:	6a 00                	push   0x0
c00241fb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00241ff:	56                   	push   esi
c0024200:	e8 eb c2 fd ff       	call   c00004f0 <memset>
c0024205:	83 c4 10             	add    esp,0x10
c0024208:	66 ff 04 24          	inc    WORD PTR [esp]
c002420c:	e9 7b ff ff ff       	jmp    c002418c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0024211:	50                   	push   eax
c0024212:	68 00 01 00 00       	push   0x100
c0024217:	6a 00                	push   0x0
c0024219:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002421d:	50                   	push   eax
c002421e:	e8 cd c2 fd ff       	call   c00004f0 <memset>
c0024223:	83 c4 0c             	add    esp,0xc
c0024226:	68 00 01 00 00       	push   0x100
c002422b:	6a 00                	push   0x0
c002422d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024234:	50                   	push   eax
c0024235:	e8 b6 c2 fd ff       	call   c00004f0 <memset>
c002423a:	83 c4 10             	add    esp,0x10
c002423d:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0024244:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002424b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024253:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002425b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024263:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002426b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002426f:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0024273:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0024278:	0f 83 16 01 00 00    	jae    c0024394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c002427e:	6b ff 28             	imul   edi,edi,0x28
c0024281:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0024285:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0024288:	51                   	push   ecx
c0024289:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c002428d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024291:	8b 07                	mov    eax,DWORD PTR [edi]
c0024293:	6b d2 28             	imul   edx,edx,0x28
c0024296:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c002429a:	31 d2                	xor    edx,edx
c002429c:	52                   	push   edx
c002429d:	50                   	push   eax
c002429e:	53                   	push   ebx
c002429f:	e8 1e 63 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c00242a4:	83 c4 0c             	add    esp,0xc
c00242a7:	6a 20                	push   0x20
c00242a9:	6a 00                	push   0x0
c00242ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242b2:	51                   	push   ecx
c00242b3:	e8 38 c2 fd ff       	call   c00004f0 <memset>
c00242b8:	58                   	pop    eax
c00242b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00242bf:	52                   	push   edx
c00242c0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00242c7:	51                   	push   ecx
c00242c8:	6a 00                	push   0x0
c00242ca:	6a 1f                	push   0x1f
c00242cc:	53                   	push   ebx
c00242cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242d0:	83 c4 1c             	add    esp,0x1c
c00242d3:	6a 09                	push   0x9
c00242d5:	68 95 2d 03 c0       	push   0xc0032d95
c00242da:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242e1:	51                   	push   ecx
c00242e2:	e8 99 c0 fd ff       	call   c0000380 <memcmp>
c00242e7:	83 c4 10             	add    esp,0x10
c00242ea:	85 c0                	test   eax,eax
c00242ec:	75 1a                	jne    c0024308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00242ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00242f1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00242f4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00242f8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00242fb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024302:	89 d0                	mov    eax,edx
c0024304:	40                   	inc    eax
c0024305:	89 04 24             	mov    DWORD PTR [esp],eax
c0024308:	52                   	push   edx
c0024309:	6a 09                	push   0x9
c002430b:	68 9f 2d 03 c0       	push   0xc0032d9f
c0024310:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024317:	50                   	push   eax
c0024318:	e8 63 c0 fd ff       	call   c0000380 <memcmp>
c002431d:	83 c4 10             	add    esp,0x10
c0024320:	85 c0                	test   eax,eax
c0024322:	75 1a                	jne    c002433e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0024324:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002432a:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c002432e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024331:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0024338:	89 c8                	mov    eax,ecx
c002433a:	40                   	inc    eax
c002433b:	89 04 24             	mov    DWORD PTR [esp],eax
c002433e:	50                   	push   eax
c002433f:	50                   	push   eax
c0024340:	68 6b 2d 03 c0       	push   0xc0032d6b
c0024345:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002434c:	50                   	push   eax
c002434d:	e8 2e c4 fd ff       	call   c0000780 <strcmp>
c0024352:	83 c4 10             	add    esp,0x10
c0024355:	85 c0                	test   eax,eax
c0024357:	75 0b                	jne    c0024364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0024359:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c002435d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024360:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024364:	50                   	push   eax
c0024365:	50                   	push   eax
c0024366:	68 73 2d 03 c0       	push   0xc0032d73
c002436b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024372:	50                   	push   eax
c0024373:	e8 08 c4 fd ff       	call   c0000780 <strcmp>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	85 c0                	test   eax,eax
c002437d:	75 0b                	jne    c002438a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c002437f:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0024383:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024386:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002438a:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c002438f:	e9 d7 fe ff ff       	jmp    c002426b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0024394:	50                   	push   eax
c0024395:	31 d2                	xor    edx,edx
c0024397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002439b:	52                   	push   edx
c002439c:	50                   	push   eax
c002439d:	53                   	push   ebx
c002439e:	e8 1f 62 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c00243a3:	58                   	pop    eax
c00243a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243a8:	e8 ea 20 ff ff       	call   c0016497 <malloc>
c00243ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00243af:	31 d2                	xor    edx,edx
c00243b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00243b5:	58                   	pop    eax
c00243b6:	8d 74 24 54          	lea    esi,[esp+0x54]
c00243ba:	56                   	push   esi
c00243bb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00243bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243c3:	52                   	push   edx
c00243c4:	50                   	push   eax
c00243c5:	53                   	push   ebx
c00243c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243c9:	83 c4 14             	add    esp,0x14
c00243cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243d0:	e8 c2 20 ff ff       	call   c0016497 <malloc>
c00243d5:	31 d2                	xor    edx,edx
c00243d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00243db:	83 c4 0c             	add    esp,0xc
c00243de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243e2:	52                   	push   edx
c00243e3:	50                   	push   eax
c00243e4:	53                   	push   ebx
c00243e5:	e8 d8 61 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c00243ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00243ec:	31 d2                	xor    edx,edx
c00243ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00243f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00243f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00243f9:	52                   	push   edx
c00243fa:	50                   	push   eax
c00243fb:	53                   	push   ebx
c00243fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243ff:	83 c4 20             	add    esp,0x20
c0024402:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0024407:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002440f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024413:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024417:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002441a:	0f 84 2b 03 00 00    	je     c002474b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0024420:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0024427:	31 d2                	xor    edx,edx
c0024429:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002442d:	c1 e8 03             	shr    eax,0x3
c0024430:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0024434:	51                   	push   ecx
c0024435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024439:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002443d:	52                   	push   edx
c002443e:	50                   	push   eax
c002443f:	53                   	push   ebx
c0024440:	e8 7d 61 ff ff       	call   c001a5c2 <File::seek(unsigned long long)>
c0024445:	5e                   	pop    esi
c0024446:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002444a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024451:	e8 41 20 ff ff       	call   c0016497 <malloc>
c0024456:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024458:	31 d2                	xor    edx,edx
c002445a:	89 c7                	mov    edi,eax
c002445c:	58                   	pop    eax
c002445d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024461:	50                   	push   eax
c0024462:	57                   	push   edi
c0024463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024467:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002446e:	52                   	push   edx
c002446f:	50                   	push   eax
c0024470:	53                   	push   ebx
c0024471:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024474:	83 c4 20             	add    esp,0x20
c0024477:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002447f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024483:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0024487:	0f 8d a5 02 00 00    	jge    c0024732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c002448d:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0024492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024496:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0024499:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002449d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244a1:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00244a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00244a9:	c1 e8 08             	shr    eax,0x8
c00244ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00244b0:	89 c2                	mov    edx,eax
c00244b2:	c1 e2 04             	shl    edx,0x4
c00244b5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00244b9:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00244bc:	85 f6                	test   esi,esi
c00244be:	0f 85 cf 00 00 00    	jne    c0024593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00244c4:	83 ec 0c             	sub    esp,0xc
c00244c7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00244cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244cf:	03 02                	add    eax,DWORD PTR [edx]
c00244d1:	50                   	push   eax
c00244d2:	e8 63 f8 ff ff       	call   c0023d3a <Thr::getAddressOfKernelSymbol(char const*)>
c00244d7:	83 c4 10             	add    esp,0x10
c00244da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00244de:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00244e3:	85 c0                	test   eax,eax
c00244e5:	89 c6                	mov    esi,eax
c00244e7:	0f 85 a6 00 00 00    	jne    c0024593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00244ed:	83 ec 0c             	sub    esp,0xc
c00244f0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00244f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244f8:	03 02                	add    eax,DWORD PTR [edx]
c00244fa:	50                   	push   eax
c00244fb:	e8 40 bf ff ff       	call   c0020440 <KeResolveCompatibilitySymbol(char*)>
c0024500:	83 c4 10             	add    esp,0x10
c0024503:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024507:	85 c0                	test   eax,eax
c0024509:	89 c6                	mov    esi,eax
c002450b:	0f 85 82 00 00 00    	jne    c0024593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024511:	50                   	push   eax
c0024512:	50                   	push   eax
c0024513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024517:	03 02                	add    eax,DWORD PTR [edx]
c0024519:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002451d:	50                   	push   eax
c002451e:	68 a9 2d 03 c0       	push   0xc0032da9
c0024523:	e8 a6 4d ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0024528:	58                   	pop    eax
c0024529:	5a                   	pop    edx
c002452a:	68 c3 2d 03 c0       	push   0xc0032dc3
c002452f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024536:	51                   	push   ecx
c0024537:	e8 14 c1 fd ff       	call   c0000650 <strcpy>
c002453c:	59                   	pop    ecx
c002453d:	58                   	pop    eax
c002453e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024542:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024546:	03 02                	add    eax,DWORD PTR [edx]
c0024548:	50                   	push   eax
c0024549:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024550:	51                   	push   ecx
c0024551:	e8 1a c3 fd ff       	call   c0000870 <strcat>
c0024556:	58                   	pop    eax
c0024557:	5a                   	pop    edx
c0024558:	68 5d 2e 03 c0       	push   0xc0032e5d
c002455d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024564:	51                   	push   ecx
c0024565:	e8 06 c3 fd ff       	call   c0000870 <strcat>
c002456a:	83 c4 10             	add    esp,0x10
c002456d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024572:	0f 84 77 01 00 00    	je     c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024578:	83 ec 0c             	sub    esp,0xc
c002457b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024582:	51                   	push   ecx
c0024583:	e8 ce bc ff ff       	call   c0020256 <KePanic(char const*)>
c0024588:	83 c4 10             	add    esp,0x10
c002458b:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c002458f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024593:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0024598:	83 f8 01             	cmp    eax,0x1
c002459b:	0f 85 9b 00 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00245a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00245a5:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00245ac:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00245b0:	01 d0                	add    eax,edx
c00245b2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00245ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00245be:	0f 94 c0             	sete   al
c00245c1:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00245c9:	0f 94 c1             	sete   cl
c00245cc:	09 c1                	or     ecx,eax
c00245ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00245d2:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00245d7:	0f b6 c9             	movzx  ecx,cl
c00245da:	8b 00                	mov    eax,DWORD PTR [eax]
c00245dc:	74 41                	je     c002461f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00245de:	8d 14 06             	lea    edx,[esi+eax*1]
c00245e1:	85 c9                	test   ecx,ecx
c00245e3:	75 15                	jne    c00245fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00245e5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00245e9:	66 83 f8 0c          	cmp    ax,0xc
c00245ed:	76 05                	jbe    c00245f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00245ef:	b8 0c 00 00 00       	mov    eax,0xc
c00245f4:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00245f8:	76 37                	jbe    c0024631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00245fa:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00245ff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024603:	0f 84 e6 00 00 00    	je     c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024609:	83 ec 0c             	sub    esp,0xc
c002460c:	68 da 2d 03 c0       	push   0xc0032dda
c0024611:	e8 40 bc ff ff       	call   c0020256 <KePanic(char const*)>
c0024616:	83 c4 10             	add    esp,0x10
c0024619:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002461d:	eb 12                	jmp    c0024631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002461f:	01 c2                	add    edx,eax
c0024621:	85 c9                	test   ecx,ecx
c0024623:	75 0c                	jne    c0024631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024625:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024629:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c002462d:	77 02                	ja     c0024631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002462f:	01 f2                	add    edx,esi
c0024631:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024635:	89 10                	mov    DWORD PTR [eax],edx
c0024637:	e9 ed 00 00 00       	jmp    c0024729 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002463c:	83 f8 02             	cmp    eax,0x2
c002463f:	0f 85 81 00 00 00    	jne    c00246c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0024645:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002464c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0024650:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0024654:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c002465c:	74 21                	je     c002467f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c002465e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024666:	74 17                	je     c002467f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024668:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c002466c:	ba 0a 00 00 00       	mov    edx,0xa
c0024671:	83 f9 0e             	cmp    ecx,0xe
c0024674:	77 03                	ja     c0024679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0024676:	8d 51 fc             	lea    edx,[ecx-0x4]
c0024679:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c002467d:	76 1f                	jbe    c002469e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c002467f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024688:	74 65                	je     c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c002468a:	83 ec 0c             	sub    esp,0xc
c002468d:	68 f6 2d 03 c0       	push   0xc0032df6
c0024692:	e8 bf bb ff ff       	call   c0020256 <KePanic(char const*)>
c0024697:	83 c4 10             	add    esp,0x10
c002469a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002469e:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00246a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00246a5:	74 15                	je     c00246bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00246a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00246ab:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00246b2:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00246b6:	01 d1                	add    ecx,edx
c00246b8:	01 ce                	add    esi,ecx
c00246ba:	eb 06                	jmp    c00246c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00246bc:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00246c0:	01 d6                	add    esi,edx
c00246c2:	89 30                	mov    DWORD PTR [eax],esi
c00246c4:	eb 63                	jmp    c0024729 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00246c6:	56                   	push   esi
c00246c7:	56                   	push   esi
c00246c8:	50                   	push   eax
c00246c9:	68 12 2e 03 c0       	push   0xc0032e12
c00246ce:	e8 fb 4b ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00246d3:	83 c4 10             	add    esp,0x10
c00246d6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00246db:	74 12                	je     c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00246dd:	83 ec 0c             	sub    esp,0xc
c00246e0:	68 1d 2e 03 c0       	push   0xc0032e1d
c00246e5:	e8 6c bb ff ff       	call   c0020256 <KePanic(char const*)>
c00246ea:	83 c4 10             	add    esp,0x10
c00246ed:	eb 3a                	jmp    c0024729 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00246ef:	83 ec 0c             	sub    esp,0xc
c00246f2:	53                   	push   ebx
c00246f3:	e8 6a 5e ff ff       	call   c001a562 <File::close()>
c00246f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00246fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024700:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024703:	e8 9f 1d ff ff       	call   c00164a7 <free>
c0024708:	59                   	pop    ecx
c0024709:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002470d:	e8 95 1d ff ff       	call   c00164a7 <free>
c0024712:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024715:	e8 8d 1d ff ff       	call   c00164a7 <free>
c002471a:	5b                   	pop    ebx
c002471b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002471f:	e8 83 1d ff ff       	call   c00164a7 <free>
c0024724:	83 c4 10             	add    esp,0x10
c0024727:	eb 1e                	jmp    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024729:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c002472d:	e9 4d fd ff ff       	jmp    c002447f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0024732:	83 ec 0c             	sub    esp,0xc
c0024735:	57                   	push   edi
c0024736:	e8 6c 1d ff ff       	call   c00164a7 <free>
c002473b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c002473f:	83 c4 10             	add    esp,0x10
c0024742:	e9 cc fc ff ff       	jmp    c0024413 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024747:	31 c0                	xor    eax,eax
c0024749:	eb 32                	jmp    c002477d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c002474b:	83 ec 0c             	sub    esp,0xc
c002474e:	53                   	push   ebx
c002474f:	e8 0e 5e ff ff       	call   c001a562 <File::close()>
c0024754:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024756:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024759:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002475c:	58                   	pop    eax
c002475d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024761:	e8 41 1d ff ff       	call   c00164a7 <free>
c0024766:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024769:	e8 39 1d ff ff       	call   c00164a7 <free>
c002476e:	5a                   	pop    edx
c002476f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024773:	e8 2f 1d ff ff       	call   c00164a7 <free>
c0024778:	83 c4 10             	add    esp,0x10
c002477b:	b0 01                	mov    al,0x1
c002477d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024783:	5b                   	pop    ebx
c0024784:	5e                   	pop    esi
c0024785:	5f                   	pop    edi
c0024786:	5d                   	pop    ebp
c0024787:	c3                   	ret    

c0024788 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024788:	56                   	push   esi
c0024789:	31 d2                	xor    edx,edx
c002478b:	53                   	push   ebx
c002478c:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024792:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024796:	39 d3                	cmp    ebx,edx
c0024798:	7e 1b                	jle    c00247b5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c002479a:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c00247a1:	39 c8                	cmp    eax,ecx
c00247a3:	77 0d                	ja     c00247b2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00247a5:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00247ac:	01 c6                	add    esi,eax
c00247ae:	39 ce                	cmp    esi,ecx
c00247b0:	77 05                	ja     c00247b7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00247b2:	42                   	inc    edx
c00247b3:	eb e1                	jmp    c0024796 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00247b5:	31 c0                	xor    eax,eax
c00247b7:	5b                   	pop    ebx
c00247b8:	5e                   	pop    esi
c00247b9:	c3                   	ret    

c00247ba <Thr::getDriverNameFromAddress(unsigned long)>:
c00247ba:	53                   	push   ebx
c00247bb:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00247c1:	31 c0                	xor    eax,eax
c00247c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247c7:	39 c3                	cmp    ebx,eax
c00247c9:	7e 22                	jle    c00247ed <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00247cb:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00247d2:	39 ca                	cmp    edx,ecx
c00247d4:	77 14                	ja     c00247ea <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247d6:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00247dd:	39 ca                	cmp    edx,ecx
c00247df:	76 09                	jbe    c00247ea <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247e1:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00247e8:	eb 05                	jmp    c00247ef <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00247ea:	40                   	inc    eax
c00247eb:	eb da                	jmp    c00247c7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00247ed:	31 c0                	xor    eax,eax
c00247ef:	5b                   	pop    ebx
c00247f0:	c3                   	ret    

c00247f1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00247f1:	53                   	push   ebx
c00247f2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00247f6:	53                   	push   ebx
c00247f7:	e8 8c ff ff ff       	call   c0024788 <Thr::getDriverBaseFromAddress(unsigned long)>
c00247fc:	5a                   	pop    edx
c00247fd:	31 d2                	xor    edx,edx
c00247ff:	85 c0                	test   eax,eax
c0024801:	74 04                	je     c0024807 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024803:	89 da                	mov    edx,ebx
c0024805:	29 c2                	sub    edx,eax
c0024807:	5b                   	pop    ebx
c0024808:	89 d0                	mov    eax,edx
c002480a:	c3                   	ret    

c002480b <Thr::loadDLL(char const*, bool)>:
c002480b:	55                   	push   ebp
c002480c:	57                   	push   edi
c002480d:	56                   	push   esi
c002480e:	53                   	push   ebx
c002480f:	81 ec 34 01 00 00    	sub    esp,0x134
c0024815:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c002481c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024823:	56                   	push   esi
c0024824:	68 35 2e 03 c0       	push   0xc0032e35
c0024829:	e8 a0 4a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002482e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024835:	e8 5d 1c ff ff       	call   c0016497 <malloc>
c002483a:	83 c4 0c             	add    esp,0xc
c002483d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024843:	56                   	push   esi
c0024844:	50                   	push   eax
c0024845:	89 c3                	mov    ebx,eax
c0024847:	e8 9a 5c ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c002484c:	83 c4 10             	add    esp,0x10
c002484f:	85 db                	test   ebx,ebx
c0024851:	75 3c                	jne    c002488f <Thr::loadDLL(char const*, bool)+0x84>
c0024853:	89 e8                	mov    eax,ebp
c0024855:	84 c0                	test   al,al
c0024857:	0f 84 02 02 00 00    	je     c0024a5f <Thr::loadDLL(char const*, bool)+0x254>
c002485d:	50                   	push   eax
c002485e:	50                   	push   eax
c002485f:	68 46 2e 03 c0       	push   0xc0032e46
c0024864:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024868:	57                   	push   edi
c0024869:	e8 e2 bd fd ff       	call   c0000650 <strcpy>
c002486e:	58                   	pop    eax
c002486f:	5a                   	pop    edx
c0024870:	56                   	push   esi
c0024871:	57                   	push   edi
c0024872:	e8 f9 bf fd ff       	call   c0000870 <strcat>
c0024877:	59                   	pop    ecx
c0024878:	58                   	pop    eax
c0024879:	68 5d 2e 03 c0       	push   0xc0032e5d
c002487e:	57                   	push   edi
c002487f:	e8 ec bf fd ff       	call   c0000870 <strcat>
c0024884:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024887:	e8 ca b9 ff ff       	call   c0020256 <KePanic(char const*)>
c002488c:	83 c4 10             	add    esp,0x10
c002488f:	50                   	push   eax
c0024890:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024894:	50                   	push   eax
c0024895:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024899:	50                   	push   eax
c002489a:	53                   	push   ebx
c002489b:	e8 66 5f ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c00248a0:	83 c4 10             	add    esp,0x10
c00248a3:	85 db                	test   ebx,ebx
c00248a5:	89 c7                	mov    edi,eax
c00248a7:	74 0c                	je     c00248b5 <Thr::loadDLL(char const*, bool)+0xaa>
c00248a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00248ab:	83 ec 0c             	sub    esp,0xc
c00248ae:	53                   	push   ebx
c00248af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248b2:	83 c4 10             	add    esp,0x10
c00248b5:	83 ec 0c             	sub    esp,0xc
c00248b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00248bd:	50                   	push   eax
c00248be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248c6:	57                   	push   edi
c00248c7:	68 5f 2e 03 c0       	push   0xc0032e5f
c00248cc:	e8 fd 49 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00248d1:	83 c4 20             	add    esp,0x20
c00248d4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00248d9:	75 0a                	jne    c00248e5 <Thr::loadDLL(char const*, bool)+0xda>
c00248db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248df:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00248e3:	75 3e                	jne    c0024923 <Thr::loadDLL(char const*, bool)+0x118>
c00248e5:	89 e8                	mov    eax,ebp
c00248e7:	31 db                	xor    ebx,ebx
c00248e9:	84 c0                	test   al,al
c00248eb:	0f 84 6e 01 00 00    	je     c0024a5f <Thr::loadDLL(char const*, bool)+0x254>
c00248f1:	50                   	push   eax
c00248f2:	50                   	push   eax
c00248f3:	68 80 2e 03 c0       	push   0xc0032e80
c00248f8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00248fc:	53                   	push   ebx
c00248fd:	e8 4e bd fd ff       	call   c0000650 <strcpy>
c0024902:	58                   	pop    eax
c0024903:	5a                   	pop    edx
c0024904:	56                   	push   esi
c0024905:	53                   	push   ebx
c0024906:	e8 65 bf fd ff       	call   c0000870 <strcat>
c002490b:	59                   	pop    ecx
c002490c:	5f                   	pop    edi
c002490d:	68 5d 2e 03 c0       	push   0xc0032e5d
c0024912:	53                   	push   ebx
c0024913:	e8 58 bf fd ff       	call   c0000870 <strcat>
c0024918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002491b:	e8 36 b9 ff ff       	call   c0020256 <KePanic(char const*)>
c0024920:	83 c4 10             	add    esp,0x10
c0024923:	53                   	push   ebx
c0024924:	6a 03                	push   0x3
c0024926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002492a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002492e:	05 ff 0f 00 00       	add    eax,0xfff
c0024933:	83 d2 00             	adc    edx,0x0
c0024936:	0f ac d0 0c          	shrd   eax,edx,0xc
c002493a:	50                   	push   eax
c002493b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024941:	e8 84 3e ff ff       	call   c00187ca <VAS::allocatePages(int, int)>
c0024946:	89 c3                	mov    ebx,eax
c0024948:	58                   	pop    eax
c0024949:	5a                   	pop    edx
c002494a:	53                   	push   ebx
c002494b:	68 a2 12 03 c0       	push   0xc00312a2
c0024950:	e8 79 49 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0024955:	89 34 24             	mov    DWORD PTR [esp],esi
c0024958:	e8 23 bc fd ff       	call   c0000580 <strlen>
c002495d:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c0024963:	40                   	inc    eax
c0024964:	89 04 24             	mov    DWORD PTR [esp],eax
c0024967:	e8 2b 1b ff ff       	call   c0016497 <malloc>
c002496c:	59                   	pop    ecx
c002496d:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c0024974:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024979:	5f                   	pop    edi
c002497a:	56                   	push   esi
c002497b:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024982:	e8 c9 bc fd ff       	call   c0000650 <strcpy>
c0024987:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c002498c:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024993:	8d 50 01             	lea    edx,[eax+0x1]
c0024996:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c002499c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00249a0:	83 c4 0c             	add    esp,0xc
c00249a3:	6a 01                	push   0x1
c00249a5:	53                   	push   ebx
c00249a6:	56                   	push   esi
c00249a7:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00249ae:	e8 94 f6 ff ff       	call   c0024047 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00249b3:	83 c4 10             	add    esp,0x10
c00249b6:	89 c7                	mov    edi,eax
c00249b8:	89 f8                	mov    eax,edi
c00249ba:	83 f0 01             	xor    eax,0x1
c00249bd:	84 c0                	test   al,al
c00249bf:	74 18                	je     c00249d9 <Thr::loadDLL(char const*, bool)+0x1ce>
c00249c1:	89 e8                	mov    eax,ebp
c00249c3:	84 c0                	test   al,al
c00249c5:	74 12                	je     c00249d9 <Thr::loadDLL(char const*, bool)+0x1ce>
c00249c7:	83 ec 0c             	sub    esp,0xc
c00249ca:	68 99 2e 03 c0       	push   0xc0032e99
c00249cf:	e8 82 b8 ff ff       	call   c0020256 <KePanic(char const*)>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	eb 06                	jmp    c00249df <Thr::loadDLL(char const*, bool)+0x1d4>
c00249d9:	89 f8                	mov    eax,edi
c00249db:	84 c0                	test   al,al
c00249dd:	75 10                	jne    c00249ef <Thr::loadDLL(char const*, bool)+0x1e4>
c00249df:	83 ec 0c             	sub    esp,0xc
c00249e2:	68 b8 2e 03 c0       	push   0xc0032eb8
c00249e7:	e8 6a b8 ff ff       	call   c0020256 <KePanic(char const*)>
c00249ec:	83 c4 10             	add    esp,0x10
c00249ef:	31 f6                	xor    esi,esi
c00249f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249f9:	05 ff 0f 00 00       	add    eax,0xfff
c00249fe:	83 d2 00             	adc    edx,0x0
c0024a01:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a09:	c1 ea 0c             	shr    edx,0xc
c0024a0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024a10:	ba 00 00 00 00       	mov    edx,0x0
c0024a15:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024a19:	89 d0                	mov    eax,edx
c0024a1b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024a1f:	73 32                	jae    c0024a53 <Thr::loadDLL(char const*, bool)+0x248>
c0024a21:	50                   	push   eax
c0024a22:	50                   	push   eax
c0024a23:	89 f0                	mov    eax,esi
c0024a25:	c1 e0 0c             	shl    eax,0xc
c0024a28:	01 d8                	add    eax,ebx
c0024a2a:	50                   	push   eax
c0024a2b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024a31:	e8 78 38 ff ff       	call   c00182ae <VAS::getPageTableEntry(unsigned long)>
c0024a36:	83 c4 10             	add    esp,0x10
c0024a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a3b:	a8 60                	test   al,0x60
c0024a3d:	75 11                	jne    c0024a50 <Thr::loadDLL(char const*, bool)+0x245>
c0024a3f:	83 ec 0c             	sub    esp,0xc
c0024a42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024a47:	50                   	push   eax
c0024a48:	e8 f0 1c ff ff       	call   c001673d <Phys::freePage(unsigned long)>
c0024a4d:	83 c4 10             	add    esp,0x10
c0024a50:	46                   	inc    esi
c0024a51:	eb 9e                	jmp    c00249f1 <Thr::loadDLL(char const*, bool)+0x1e6>
c0024a53:	89 f8                	mov    eax,edi
c0024a55:	84 c0                	test   al,al
c0024a57:	b8 00 00 00 00       	mov    eax,0x0
c0024a5c:	0f 44 d8             	cmove  ebx,eax
c0024a5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024a65:	89 d8                	mov    eax,ebx
c0024a67:	5b                   	pop    ebx
c0024a68:	5e                   	pop    esi
c0024a69:	5f                   	pop    edi
c0024a6a:	5d                   	pop    ebp
c0024a6b:	c3                   	ret    

c0024a6c <Thr::executeDLL(unsigned long, void*)>:
c0024a6c:	56                   	push   esi
c0024a6d:	53                   	push   ebx
c0024a6e:	52                   	push   edx
c0024a6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024a77:	85 db                	test   ebx,ebx
c0024a79:	75 10                	jne    c0024a8b <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024a7b:	83 ec 0c             	sub    esp,0xc
c0024a7e:	68 d4 2e 03 c0       	push   0xc0032ed4
c0024a83:	e8 ce b7 ff ff       	call   c0020256 <KePanic(char const*)>
c0024a88:	83 c4 10             	add    esp,0x10
c0024a8b:	50                   	push   eax
c0024a8c:	50                   	push   eax
c0024a8d:	53                   	push   ebx
c0024a8e:	68 fe 2e 03 c0       	push   0xc0032efe
c0024a93:	e8 36 48 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0024a98:	89 d8                	mov    eax,ebx
c0024a9a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024a9e:	83 c4 14             	add    esp,0x14
c0024aa1:	5b                   	pop    ebx
c0024aa2:	5e                   	pop    esi
c0024aa3:	ff e0                	jmp    eax
c0024aa5:	66 90                	xchg   ax,ax
c0024aa7:	90                   	nop

c0024aa8 <userModeEntryPoint(void*)>:
c0024aa8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024aad:	83 e8 01             	sub    eax,0x1
c0024ab0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024ab5:	75 01                	jne    c0024ab8 <userModeEntryPoint(void*)+0x10>
c0024ab7:	fb                   	sti    
c0024ab8:	fb                   	sti    
c0024ab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024abe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024ac1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024ac7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024acb:	e9 6f b7 fd ff       	jmp    c000023f <goToUsermode>

c0024ad0 <changeTSS>:
c0024ad0:	83 ec 14             	sub    esp,0x14
c0024ad3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ad8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024adb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024ae0:	c1 e2 15             	shl    edx,0x15
c0024ae3:	29 d0                	sub    eax,edx
c0024ae5:	50                   	push   eax
c0024ae6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024aeb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024af1:	05 7c 11 00 00       	add    eax,0x117c
c0024af6:	50                   	push   eax
c0024af7:	e8 04 2e ff ff       	call   c0017900 <TSS::setESP(unsigned long)>
c0024afc:	83 c4 1c             	add    esp,0x1c
c0024aff:	c3                   	ret    

c0024b00 <switchToThread(ThreadControlBlock*)>:
c0024b00:	57                   	push   edi
c0024b01:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024b07:	56                   	push   esi
c0024b08:	53                   	push   ebx
c0024b09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b0d:	85 c9                	test   ecx,ecx
c0024b0f:	0f 85 8b 00 00 00    	jne    c0024ba0 <switchToThread(ThreadControlBlock*)+0xa0>
c0024b15:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024b19:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024b1f:	74 7b                	je     c0024b9c <switchToThread(ThreadControlBlock*)+0x9c>
c0024b21:	b8 00 04 00 00       	mov    eax,0x400
c0024b26:	29 d0                	sub    eax,edx
c0024b28:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024b2b:	d1 f8                	sar    eax,1
c0024b2d:	01 d0                	add    eax,edx
c0024b2f:	90                   	nop
c0024b30:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024b33:	e8 70 25 00 00       	call   c00270a8 <HalQueryPerformanceCounter()>
c0024b38:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024b3d:	89 c6                	mov    esi,eax
c0024b3f:	89 d7                	mov    edi,edx
c0024b41:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024b47:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024b4c:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024b52:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024b58:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024b5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024b64:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024b6a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024b70:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024b73:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024b76:	01 c6                	add    esi,eax
c0024b78:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024b7b:	11 d7                	adc    edi,edx
c0024b7d:	83 ec 0c             	sub    esp,0xc
c0024b80:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024b83:	53                   	push   ebx
c0024b84:	e8 ee b6 fd ff       	call   c0000277 <switchToThreadASM>
c0024b89:	0f 20 c0             	mov    eax,cr0
c0024b8c:	83 c8 08             	or     eax,0x8
c0024b8f:	0f 22 c0             	mov    cr0,eax
c0024b92:	83 c4 10             	add    esp,0x10
c0024b95:	5b                   	pop    ebx
c0024b96:	5e                   	pop    esi
c0024b97:	5f                   	pop    edi
c0024b98:	c3                   	ret    
c0024b99:	8d 76 00             	lea    esi,[esi+0x0]
c0024b9c:	31 c0                	xor    eax,eax
c0024b9e:	eb 90                	jmp    c0024b30 <switchToThread(ThreadControlBlock*)+0x30>
c0024ba0:	5b                   	pop    ebx
c0024ba1:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024bab:	5e                   	pop    esi
c0024bac:	5f                   	pop    edi
c0024bad:	c3                   	ret    
c0024bae:	66 90                	xchg   ax,ax

c0024bb0 <Process::addArgs(char**)>:
c0024bb0:	57                   	push   edi
c0024bb1:	56                   	push   esi
c0024bb2:	53                   	push   ebx
c0024bb3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024bb7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024bbb:	85 f6                	test   esi,esi
c0024bbd:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024bc7:	74 4f                	je     c0024c18 <Process::addArgs(char**)+0x68>
c0024bc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0024bcb:	85 c0                	test   eax,eax
c0024bcd:	74 49                	je     c0024c18 <Process::addArgs(char**)+0x68>
c0024bcf:	31 db                	xor    ebx,ebx
c0024bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0024bd4:	83 ec 0c             	sub    esp,0xc
c0024bd7:	50                   	push   eax
c0024bd8:	e8 a3 b9 fd ff       	call   c0000580 <strlen>
c0024bdd:	83 c0 01             	add    eax,0x1
c0024be0:	89 04 24             	mov    DWORD PTR [esp],eax
c0024be3:	e8 af 18 ff ff       	call   c0016497 <malloc>
c0024be8:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024bef:	5a                   	pop    edx
c0024bf0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024bf3:	83 c3 01             	add    ebx,0x1
c0024bf6:	59                   	pop    ecx
c0024bf7:	52                   	push   edx
c0024bf8:	50                   	push   eax
c0024bf9:	e8 52 ba fd ff       	call   c0000650 <strcpy>
c0024bfe:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024c04:	83 c4 10             	add    esp,0x10
c0024c07:	83 c1 01             	add    ecx,0x1
c0024c0a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024c10:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024c13:	85 c0                	test   eax,eax
c0024c15:	75 bd                	jne    c0024bd4 <Process::addArgs(char**)+0x24>
c0024c17:	90                   	nop
c0024c18:	5b                   	pop    ebx
c0024c19:	5e                   	pop    esi
c0024c1a:	5f                   	pop    edi
c0024c1b:	c3                   	ret    

c0024c1c <Process::Process(char const*, Process*, char**)>:
c0024c1c:	56                   	push   esi
c0024c1d:	53                   	push   ebx
c0024c1e:	83 ec 14             	sub    esp,0x14
c0024c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c25:	05 0c 02 00 00       	add    eax,0x20c
c0024c2a:	bb 07 00 00 00       	mov    ebx,0x7
c0024c2f:	89 c6                	mov    esi,eax
c0024c31:	8d 76 00             	lea    esi,[esi+0x0]
c0024c34:	85 db                	test   ebx,ebx
c0024c36:	78 14                	js     c0024c4c <Process::Process(char const*, Process*, char**)+0x30>
c0024c38:	83 ec 0c             	sub    esp,0xc
c0024c3b:	56                   	push   esi
c0024c3c:	e8 d7 a3 00 00       	call   c002f018 <ThreadControlBlock::ThreadControlBlock()>
c0024c41:	83 c4 10             	add    esp,0x10
c0024c44:	83 c6 5f             	add    esi,0x5f
c0024c47:	83 eb 01             	sub    ebx,0x1
c0024c4a:	eb e8                	jmp    c0024c34 <Process::Process(char const*, Process*, char**)+0x18>
c0024c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c69:	e8 c2 b3 ff ff       	call   c0020030 <KeNewProcessEnv(Process*)>
c0024c6e:	83 c4 10             	add    esp,0x10
c0024c71:	89 c2                	mov    edx,eax
c0024c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024c8a:	a1 20 45 03 c0       	mov    eax,ds:0xc0034520
c0024c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0024c92:	89 15 20 45 03 c0    	mov    DWORD PTR ds:0xc0034520,edx
c0024c98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024c9c:	89 02                	mov    DWORD PTR [edx],eax
c0024c9e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024ca6:	83 ec 0c             	sub    esp,0xc
c0024ca9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024cad:	e8 e5 17 ff ff       	call   c0016497 <malloc>
c0024cb2:	83 c4 10             	add    esp,0x10
c0024cb5:	89 c3                	mov    ebx,eax
c0024cb7:	83 ec 08             	sub    esp,0x8
c0024cba:	6a 00                	push   0x0
c0024cbc:	53                   	push   ebx
c0024cbd:	e8 54 3d ff ff       	call   c0018a16 <VAS::VAS(bool)>
c0024cc2:	83 c4 10             	add    esp,0x10
c0024cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cc9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cd3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024cdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ce1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024ce5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ceb:	e8 93 bd ff ff       	call   c0020a83 <KeInitSignals()>
c0024cf0:	89 c2                	mov    edx,eax
c0024cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cf6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d06:	85 c0                	test   eax,eax
c0024d08:	74 42                	je     c0024d4c <Process::Process(char const*, Process*, char**)+0x130>
c0024d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d0e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d14:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d1e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d38:	05 0c 01 00 00       	add    eax,0x10c
c0024d3d:	83 ec 08             	sub    esp,0x8
c0024d40:	52                   	push   edx
c0024d41:	50                   	push   eax
c0024d42:	e8 09 b9 fd ff       	call   c0000650 <strcpy>
c0024d47:	83 c4 10             	add    esp,0x10
c0024d4a:	eb 64                	jmp    c0024db0 <Process::Process(char const*, Process*, char**)+0x194>
c0024d4c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024d54:	83 ec 0c             	sub    esp,0xc
c0024d57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024d5b:	e8 37 17 ff ff       	call   c0016497 <malloc>
c0024d60:	83 c4 10             	add    esp,0x10
c0024d63:	89 c3                	mov    ebx,eax
c0024d65:	83 ec 08             	sub    esp,0x8
c0024d68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d6c:	53                   	push   ebx
c0024d6d:	e8 be 28 ff ff       	call   c0017630 <VgaText::VgaText(char const*)>
c0024d72:	83 c4 10             	add    esp,0x10
c0024d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d79:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024d89:	83 ec 0c             	sub    esp,0xc
c0024d8c:	50                   	push   eax
c0024d8d:	e8 4c 21 ff ff       	call   c0016ede <addToTerminalCycle(VgaText*)>
c0024d92:	83 c4 10             	add    esp,0x10
c0024d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d99:	05 0c 01 00 00       	add    eax,0x10c
c0024d9e:	83 ec 08             	sub    esp,0x8
c0024da1:	68 1d 2f 03 c0       	push   0xc0032f1d
c0024da6:	50                   	push   eax
c0024da7:	e8 a4 b8 fd ff       	call   c0000650 <strcpy>
c0024dac:	83 c4 10             	add    esp,0x10
c0024daf:	90                   	nop
c0024db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024db4:	83 c0 0c             	add    eax,0xc
c0024db7:	83 ec 08             	sub    esp,0x8
c0024dba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dbe:	50                   	push   eax
c0024dbf:	e8 8c b8 fd ff       	call   c0000650 <strcpy>
c0024dc4:	83 c4 10             	add    esp,0x10
c0024dc7:	83 ec 08             	sub    esp,0x8
c0024dca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024dce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dd2:	e8 d9 fd ff ff       	call   c0024bb0 <Process::addArgs(char**)>
c0024dd7:	83 c4 10             	add    esp,0x10
c0024dda:	83 ec 08             	sub    esp,0x8
c0024ddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024de1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024de5:	e8 1e ed ff ff       	call   c0023b08 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024dea:	83 c4 10             	add    esp,0x10
c0024ded:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024df1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024df5:	83 f0 01             	xor    eax,0x1
c0024df8:	88 c2                	mov    dl,al
c0024dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dfe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024e04:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024e09:	83 ec 04             	sub    esp,0x4
c0024e0c:	50                   	push   eax
c0024e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e11:	68 74 2f 03 c0       	push   0xc0032f74
c0024e16:	e8 b3 44 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0024e1b:	83 c4 10             	add    esp,0x10
c0024e1e:	90                   	nop
c0024e1f:	83 c4 14             	add    esp,0x14
c0024e22:	5b                   	pop    ebx
c0024e23:	5e                   	pop    esi
c0024e24:	c3                   	ret    
c0024e25:	90                   	nop
c0024e26:	66 90                	xchg   ax,ax

c0024e28 <Process::Process(bool, char const*, Process*, char**)>:
c0024e28:	56                   	push   esi
c0024e29:	53                   	push   ebx
c0024e2a:	83 ec 24             	sub    esp,0x24
c0024e2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024e31:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e39:	05 0c 02 00 00       	add    eax,0x20c
c0024e3e:	bb 07 00 00 00       	mov    ebx,0x7
c0024e43:	89 c6                	mov    esi,eax
c0024e45:	8d 76 00             	lea    esi,[esi+0x0]
c0024e48:	85 db                	test   ebx,ebx
c0024e4a:	78 14                	js     c0024e60 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024e4c:	83 ec 0c             	sub    esp,0xc
c0024e4f:	56                   	push   esi
c0024e50:	e8 c3 a1 00 00       	call   c002f018 <ThreadControlBlock::ThreadControlBlock()>
c0024e55:	83 c4 10             	add    esp,0x10
c0024e58:	83 c6 5f             	add    esi,0x5f
c0024e5b:	83 eb 01             	sub    ebx,0x1
c0024e5e:	eb e8                	jmp    c0024e48 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024e60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e64:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e6f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e76:	83 ec 0c             	sub    esp,0xc
c0024e79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e7d:	e8 ae b1 ff ff       	call   c0020030 <KeNewProcessEnv(Process*)>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	89 c2                	mov    edx,eax
c0024e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e8b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e95:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e9e:	a1 20 45 03 c0       	mov    eax,ds:0xc0034520
c0024ea3:	8d 50 01             	lea    edx,[eax+0x1]
c0024ea6:	89 15 20 45 03 c0    	mov    DWORD PTR ds:0xc0034520,edx
c0024eac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024eb0:	89 02                	mov    DWORD PTR [edx],eax
c0024eb2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024eba:	83 ec 0c             	sub    esp,0xc
c0024ebd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024ec1:	e8 d1 15 ff ff       	call   c0016497 <malloc>
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	89 c3                	mov    ebx,eax
c0024ecb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024ed0:	83 ec 08             	sub    esp,0x8
c0024ed3:	50                   	push   eax
c0024ed4:	53                   	push   ebx
c0024ed5:	e8 3c 3b ff ff       	call   c0018a16 <VAS::VAS(bool)>
c0024eda:	83 c4 10             	add    esp,0x10
c0024edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ee1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ee7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eeb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ef9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024efd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024f03:	e8 7b bb ff ff       	call   c0020a83 <KeInitSignals()>
c0024f08:	89 c2                	mov    edx,eax
c0024f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f0e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f18:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f1e:	85 c0                	test   eax,eax
c0024f20:	74 42                	je     c0024f64 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024f22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f26:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f2c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f36:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024f3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f50:	05 0c 01 00 00       	add    eax,0x10c
c0024f55:	83 ec 08             	sub    esp,0x8
c0024f58:	52                   	push   edx
c0024f59:	50                   	push   eax
c0024f5a:	e8 f1 b6 fd ff       	call   c0000650 <strcpy>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	eb 64                	jmp    c0024fc8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024f64:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024f6c:	83 ec 0c             	sub    esp,0xc
c0024f6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024f73:	e8 1f 15 ff ff       	call   c0016497 <malloc>
c0024f78:	83 c4 10             	add    esp,0x10
c0024f7b:	89 c3                	mov    ebx,eax
c0024f7d:	83 ec 08             	sub    esp,0x8
c0024f80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f84:	53                   	push   ebx
c0024f85:	e8 a6 26 ff ff       	call   c0017630 <VgaText::VgaText(char const*)>
c0024f8a:	83 c4 10             	add    esp,0x10
c0024f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f91:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024fa1:	83 ec 0c             	sub    esp,0xc
c0024fa4:	50                   	push   eax
c0024fa5:	e8 34 1f ff ff       	call   c0016ede <addToTerminalCycle(VgaText*)>
c0024faa:	83 c4 10             	add    esp,0x10
c0024fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fb1:	05 0c 01 00 00       	add    eax,0x10c
c0024fb6:	83 ec 08             	sub    esp,0x8
c0024fb9:	68 1d 2f 03 c0       	push   0xc0032f1d
c0024fbe:	50                   	push   eax
c0024fbf:	e8 8c b6 fd ff       	call   c0000650 <strcpy>
c0024fc4:	83 c4 10             	add    esp,0x10
c0024fc7:	90                   	nop
c0024fc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fcc:	83 c0 0c             	add    eax,0xc
c0024fcf:	83 ec 08             	sub    esp,0x8
c0024fd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024fd6:	50                   	push   eax
c0024fd7:	e8 74 b6 fd ff       	call   c0000650 <strcpy>
c0024fdc:	83 c4 10             	add    esp,0x10
c0024fdf:	83 ec 08             	sub    esp,0x8
c0024fe2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024fe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fea:	e8 c1 fb ff ff       	call   c0024bb0 <Process::addArgs(char**)>
c0024fef:	83 c4 10             	add    esp,0x10
c0024ff2:	90                   	nop
c0024ff3:	83 c4 24             	add    esp,0x24
c0024ff6:	5b                   	pop    ebx
c0024ff7:	5e                   	pop    esi
c0024ff8:	c3                   	ret    
c0024ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0024ffc <taskStartupFunction>:
c0024ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025001:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025004:	c3                   	ret    
c0025005:	8d 76 00             	lea    esi,[esi+0x0]

c0025008 <KeDisablePreemption()>:
c0025008:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002500d:	85 c0                	test   eax,eax
c002500f:	75 13                	jne    c0025024 <KeDisablePreemption()+0x1c>
c0025011:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0025017:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002501e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025024:	83 c0 01             	add    eax,0x1
c0025027:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002502c:	c3                   	ret    
c002502d:	8d 76 00             	lea    esi,[esi+0x0]

c0025030 <KeRestorePreemption()>:
c0025030:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025035:	83 e8 01             	sub    eax,0x1
c0025038:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002503d:	75 0d                	jne    c002504c <KeRestorePreemption()+0x1c>
c002503f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025044:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025049:	8d 76 00             	lea    esi,[esi+0x0]
c002504c:	c3                   	ret    
c002504d:	90                   	nop
c002504e:	66 90                	xchg   ax,ax

c0025050 <Process::createThread(void (*)(void*), void*, int)>:
c0025050:	57                   	push   edi
c0025051:	31 c9                	xor    ecx,ecx
c0025053:	56                   	push   esi
c0025054:	53                   	push   ebx
c0025055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025059:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0025060:	89 f2                	mov    edx,esi
c0025062:	66 90                	xchg   ax,ax
c0025064:	0f b7 c2             	movzx  eax,dx
c0025067:	80 e2 01             	and    dl,0x1
c002506a:	74 14                	je     c0025080 <Process::createThread(void (*)(void*), void*, int)+0x30>
c002506c:	d1 f8                	sar    eax,1
c002506e:	83 c1 01             	add    ecx,0x1
c0025071:	83 f9 10             	cmp    ecx,0x10
c0025074:	89 c2                	mov    edx,eax
c0025076:	75 ec                	jne    c0025064 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025078:	31 db                	xor    ebx,ebx
c002507a:	89 d8                	mov    eax,ebx
c002507c:	5b                   	pop    ebx
c002507d:	5e                   	pop    esi
c002507e:	5f                   	pop    edi
c002507f:	c3                   	ret    
c0025080:	b8 01 00 00 00       	mov    eax,0x1
c0025085:	d3 e0                	shl    eax,cl
c0025087:	09 c6                	or     esi,eax
c0025089:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0025090:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0025093:	c1 e0 05             	shl    eax,0x5
c0025096:	29 c8                	sub    eax,ecx
c0025098:	01 d8                	add    eax,ebx
c002509a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00250a1:	75 0d                	jne    c00250b0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00250a3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00250ad:	8d 76 00             	lea    esi,[esi+0x0]
c00250b0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250b6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00250b9:	83 ec 0c             	sub    esp,0xc
c00250bc:	c1 e6 05             	shl    esi,0x5
c00250bf:	29 ce                	sub    esi,ecx
c00250c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00250c4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00250c7:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00250cd:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00250d3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00250d9:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00250e0:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00250e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00250ea:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00250f0:	89 ca                	mov    edx,ecx
c00250f2:	f7 da                	neg    edx
c00250f4:	c1 e2 15             	shl    edx,0x15
c00250f7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00250fd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025103:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0025107:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025111:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025117:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002511b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025121:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c002512b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025135:	68 00 01 00 00       	push   0x100
c002513a:	e8 58 13 ff ff       	call   c0016497 <malloc>
c002513f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0025142:	58                   	pop    eax
c0025143:	5a                   	pop    edx
c0025144:	53                   	push   ebx
c0025145:	68 ec 01 04 c0       	push   0xc00401ec
c002514a:	e8 61 9c 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002514f:	83 c4 10             	add    esp,0x10
c0025152:	89 d8                	mov    eax,ebx
c0025154:	5b                   	pop    ebx
c0025155:	5e                   	pop    esi
c0025156:	5f                   	pop    edi
c0025157:	c3                   	ret    

c0025158 <Process::createUserThread()>:
c0025158:	83 ec 0c             	sub    esp,0xc
c002515b:	68 80 00 00 00       	push   0x80
c0025160:	6a 00                	push   0x0
c0025162:	68 a8 4a 02 c0       	push   0xc0024aa8
c0025167:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002516b:	50                   	push   eax
c002516c:	e8 df fe ff ff       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c0025171:	83 c4 1c             	add    esp,0x1c
c0025174:	c3                   	ret    
c0025175:	8d 76 00             	lea    esi,[esi+0x0]

c0025178 <setupMultitasking(void (*)())>:
c0025178:	56                   	push   esi
c0025179:	53                   	push   ebx
c002517a:	83 ec 04             	sub    esp,0x4
c002517d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025181:	eb 11                	jmp    c0025194 <setupMultitasking(void (*)())+0x1c>
c0025183:	90                   	nop
c0025184:	83 ec 0c             	sub    esp,0xc
c0025187:	68 ec 01 04 c0       	push   0xc00401ec
c002518c:	e8 63 9b 00 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025191:	83 c4 10             	add    esp,0x10
c0025194:	83 ec 0c             	sub    esp,0xc
c0025197:	68 ec 01 04 c0       	push   0xc00401ec
c002519c:	e8 2f 9b 00 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00251a1:	83 c4 10             	add    esp,0x10
c00251a4:	84 c0                	test   al,al
c00251a6:	74 dc                	je     c0025184 <setupMultitasking(void (*)())+0xc>
c00251a8:	83 ec 0c             	sub    esp,0xc
c00251ab:	68 24 07 00 00       	push   0x724
c00251b0:	e8 e2 12 ff ff       	call   c0016497 <malloc>
c00251b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00251bc:	6a 00                	push   0x0
c00251be:	68 21 2f 03 c0       	push   0xc0032f21
c00251c3:	6a 01                	push   0x1
c00251c5:	50                   	push   eax
c00251c6:	89 c3                	mov    ebx,eax
c00251c8:	e8 5b fc ff ff       	call   c0024e28 <Process::Process(bool, char const*, Process*, char**)>
c00251cd:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00251d3:	83 c4 14             	add    esp,0x14
c00251d6:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00251dc:	50                   	push   eax
c00251dd:	e8 51 1f ff ff       	call   c0017133 <setActiveTerminal(VgaText*)>
c00251e2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00251e9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00251f3:	83 c8 01             	or     eax,0x1
c00251f6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00251fd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025203:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0025206:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025210:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025216:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025220:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025226:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025230:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002523a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025240:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025246:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025250:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002525a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025261:	e8 31 12 ff ff       	call   c0016497 <malloc>
c0025266:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002526c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025272:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025278:	5a                   	pop    edx
c0025279:	59                   	pop    ecx
c002527a:	68 1d 2f 03 c0       	push   0xc0032f1d
c002527f:	50                   	push   eax
c0025280:	e8 cb b3 fd ff       	call   c0000650 <strcpy>
c0025285:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002528c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025290:	83 c4 14             	add    esp,0x14
c0025293:	5b                   	pop    ebx
c0025294:	5e                   	pop    esi
c0025295:	e9 cf af fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002529a:	66 90                	xchg   ax,ax

c002529c <schedule()>:
c002529c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c00252a2:	85 d2                	test   edx,edx
c00252a4:	74 0e                	je     c00252b4 <schedule()+0x18>
c00252a6:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00252b0:	c3                   	ret    
c00252b1:	8d 76 00             	lea    esi,[esi+0x0]
c00252b4:	53                   	push   ebx
c00252b5:	83 ec 14             	sub    esp,0x14
c00252b8:	68 ec 01 04 c0       	push   0xc00401ec
c00252bd:	e8 0e 9a 00 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00252c2:	83 c4 10             	add    esp,0x10
c00252c5:	84 c0                	test   al,al
c00252c7:	75 3f                	jne    c0025308 <schedule()+0x6c>
c00252c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00252d1:	83 fa 01             	cmp    edx,0x1
c00252d4:	74 3a                	je     c0025310 <schedule()+0x74>
c00252d6:	66 90                	xchg   ax,ax
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	68 ec 01 04 c0       	push   0xc00401ec
c00252e0:	e8 07 9a 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00252e5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00252ec:	89 c3                	mov    ebx,eax
c00252ee:	e8 01 9a 00 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00252f3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00252fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252fd:	e8 fe f7 ff ff       	call   c0024b00 <switchToThread(ThreadControlBlock*)>
c0025302:	83 c4 10             	add    esp,0x10
c0025305:	8d 76 00             	lea    esi,[esi+0x0]
c0025308:	83 c4 08             	add    esp,0x8
c002530b:	5b                   	pop    ebx
c002530c:	c3                   	ret    
c002530d:	8d 76 00             	lea    esi,[esi+0x0]
c0025310:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025317:	83 ec 08             	sub    esp,0x8
c002531a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002531f:	50                   	push   eax
c0025320:	68 ec 01 04 c0       	push   0xc00401ec
c0025325:	e8 86 9a 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002532a:	83 c4 10             	add    esp,0x10
c002532d:	eb a9                	jmp    c00252d8 <schedule()+0x3c>
c002532f:	90                   	nop

c0025330 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025330:	83 ec 0c             	sub    esp,0xc
c0025333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002533c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002533f:	e8 58 ff ff ff       	call   c002529c <schedule()>
c0025344:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025349:	83 e8 01             	sub    eax,0x1
c002534c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025351:	75 01                	jne    c0025354 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025353:	fb                   	sti    
c0025354:	83 c4 0c             	add    esp,0xc
c0025357:	c3                   	ret    

c0025358 <blockTask(TaskState)>:
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	fa                   	cli    
c002535c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025361:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025365:	83 c0 01             	add    eax,0x1
c0025368:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002536d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025372:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025375:	e8 22 ff ff ff       	call   c002529c <schedule()>
c002537a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002537f:	83 e8 01             	sub    eax,0x1
c0025382:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025387:	75 03                	jne    c002538c <blockTask(TaskState)+0x34>
c0025389:	fb                   	sti    
c002538a:	66 90                	xchg   ax,ax
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

c0025390 <waitTask(int, int*, int)>:
c0025390:	83 ec 18             	sub    esp,0x18
c0025393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002539c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002539f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00253a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253a8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00253ab:	6a 07                	push   0x7
c00253ad:	e8 a6 ff ff ff       	call   c0025358 <blockTask(TaskState)>
c00253b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253b7:	83 c4 10             	add    esp,0x10
c00253ba:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00253bd:	85 d2                	test   edx,edx
c00253bf:	74 0b                	je     c00253cc <waitTask(int, int*, int)+0x3c>
c00253c1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00253c4:	89 02                	mov    DWORD PTR [edx],eax
c00253c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253cb:	90                   	nop
c00253cc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00253cf:	83 c4 0c             	add    esp,0xc
c00253d2:	c3                   	ret    
c00253d3:	90                   	nop

c00253d4 <milliTenthSleepUntil(unsigned int)>:
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253db:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00253e1:	76 05                	jbe    c00253e8 <milliTenthSleepUntil(unsigned int)+0x14>
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    
c00253e8:	fa                   	cli    
c00253e9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00253ef:	83 ec 08             	sub    esp,0x8
c00253f2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00253f8:	83 c2 01             	add    edx,0x1
c00253fb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025401:	83 c1 01             	add    ecx,0x1
c0025404:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002540a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025410:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025418:	50                   	push   eax
c0025419:	68 e0 01 04 c0       	push   0xc00401e0
c002541e:	e8 8d 99 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025423:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002542a:	e8 29 ff ff ff       	call   c0025358 <blockTask(TaskState)>
c002542f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	83 e8 01             	sub    eax,0x1
c002543a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002543f:	85 c0                	test   eax,eax
c0025441:	75 09                	jne    c002544c <milliTenthSleepUntil(unsigned int)+0x78>
c0025443:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025448:	85 c0                	test   eax,eax
c002544a:	75 14                	jne    c0025460 <milliTenthSleepUntil(unsigned int)+0x8c>
c002544c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025451:	83 e8 01             	sub    eax,0x1
c0025454:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025459:	75 89                	jne    c00253e4 <milliTenthSleepUntil(unsigned int)+0x10>
c002545b:	fb                   	sti    
c002545c:	83 c4 0c             	add    esp,0xc
c002545f:	c3                   	ret    
c0025460:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002546a:	e8 2d fe ff ff       	call   c002529c <schedule()>
c002546f:	eb db                	jmp    c002544c <milliTenthSleepUntil(unsigned int)+0x78>
c0025471:	8d 76 00             	lea    esi,[esi+0x0]

c0025474 <milliTenthSleep(unsigned int)>:
c0025474:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025478:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c002547d:	01 c2                	add    edx,eax
c002547f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025483:	e9 4c ff ff ff       	jmp    c00253d4 <milliTenthSleepUntil(unsigned int)>

c0025488 <sleep(unsigned int)>:
c0025488:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0025490:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025494:	eb de                	jmp    c0025474 <milliTenthSleep(unsigned int)>
c0025496:	66 90                	xchg   ax,ax

c0025498 <taskReturned>:
c0025498:	83 ec 18             	sub    esp,0x18
c002549b:	68 a0 2f 03 c0       	push   0xc0032fa0
c00254a0:	e8 b1 ad ff ff       	call   c0020256 <KePanic(char const*)>
c00254a5:	83 c4 10             	add    esp,0x10
c00254a8:	83 ec 0c             	sub    esp,0xc
c00254ab:	6a 02                	push   0x2
c00254ad:	e8 a6 fe ff ff       	call   c0025358 <blockTask(TaskState)>
c00254b2:	fa                   	cli    
c00254b3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254b8:	83 c0 01             	add    eax,0x1
c00254bb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254c0:	e8 d7 fd ff ff       	call   c002529c <schedule()>
c00254c5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254ca:	83 c4 10             	add    esp,0x10
c00254cd:	83 e8 01             	sub    eax,0x1
c00254d0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254d5:	85 c0                	test   eax,eax
c00254d7:	75 cf                	jne    c00254a8 <taskReturned+0x10>
c00254d9:	fb                   	sti    
c00254da:	eb cc                	jmp    c00254a8 <taskReturned+0x10>

c00254dc <Thr::processFromPID(int)>:
c00254dc:	57                   	push   edi
c00254dd:	56                   	push   esi
c00254de:	53                   	push   ebx
c00254df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254e3:	fa                   	cli    
c00254e4:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	68 ec 01 04 c0       	push   0xc00401ec
c00254f2:	83 c1 01             	add    ecx,0x1
c00254f5:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00254fb:	e8 ec 97 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025500:	83 c4 10             	add    esp,0x10
c0025503:	89 c7                	mov    edi,eax
c0025505:	eb 15                	jmp    c002551c <Thr::processFromPID(int)+0x40>
c0025507:	90                   	nop
c0025508:	83 ec 0c             	sub    esp,0xc
c002550b:	68 ec 01 04 c0       	push   0xc00401ec
c0025510:	e8 d7 97 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025515:	83 c4 10             	add    esp,0x10
c0025518:	39 f8                	cmp    eax,edi
c002551a:	74 50                	je     c002556c <Thr::processFromPID(int)+0x90>
c002551c:	83 ec 0c             	sub    esp,0xc
c002551f:	68 ec 01 04 c0       	push   0xc00401ec
c0025524:	e8 c3 97 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025529:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025530:	89 c3                	mov    ebx,eax
c0025532:	e8 bd 97 00 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025537:	58                   	pop    eax
c0025538:	5a                   	pop    edx
c0025539:	53                   	push   ebx
c002553a:	68 ec 01 04 c0       	push   0xc00401ec
c002553f:	e8 6c 98 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025544:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025547:	83 c4 10             	add    esp,0x10
c002554a:	39 30                	cmp    DWORD PTR [eax],esi
c002554c:	75 ba                	jne    c0025508 <Thr::processFromPID(int)+0x2c>
c002554e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025553:	83 e8 01             	sub    eax,0x1
c0025556:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002555b:	74 0b                	je     c0025568 <Thr::processFromPID(int)+0x8c>
c002555d:	8d 76 00             	lea    esi,[esi+0x0]
c0025560:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025563:	90                   	nop
c0025564:	5b                   	pop    ebx
c0025565:	5e                   	pop    esi
c0025566:	5f                   	pop    edi
c0025567:	c3                   	ret    
c0025568:	fb                   	sti    
c0025569:	eb f5                	jmp    c0025560 <Thr::processFromPID(int)+0x84>
c002556b:	90                   	nop
c002556c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025571:	8d 50 ff             	lea    edx,[eax-0x1]
c0025574:	31 c0                	xor    eax,eax
c0025576:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002557c:	85 d2                	test   edx,edx
c002557e:	75 e4                	jne    c0025564 <Thr::processFromPID(int)+0x88>
c0025580:	fb                   	sti    
c0025581:	5b                   	pop    ebx
c0025582:	5e                   	pop    esi
c0025583:	5f                   	pop    edi
c0025584:	c3                   	ret    
c0025585:	8d 76 00             	lea    esi,[esi+0x0]

c0025588 <unblockTask(ThreadControlBlock*)>:
c0025588:	53                   	push   ebx
c0025589:	83 ec 08             	sub    esp,0x8
c002558c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025590:	fa                   	cli    
c0025591:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025596:	83 c0 01             	add    eax,0x1
c0025599:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002559e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00255a1:	85 c0                	test   eax,eax
c00255a3:	74 67                	je     c002560c <unblockTask(ThreadControlBlock*)+0x84>
c00255a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00255a8:	83 f8 01             	cmp    eax,0x1
c00255ab:	74 37                	je     c00255e4 <unblockTask(ThreadControlBlock*)+0x5c>
c00255ad:	83 ec 0c             	sub    esp,0xc
c00255b0:	68 ec 01 04 c0       	push   0xc00401ec
c00255b5:	e8 32 97 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00255ba:	83 c4 10             	add    esp,0x10
c00255bd:	85 c0                	test   eax,eax
c00255bf:	75 1b                	jne    c00255dc <unblockTask(ThreadControlBlock*)+0x54>
c00255c1:	eb 5d                	jmp    c0025620 <unblockTask(ThreadControlBlock*)+0x98>
c00255c3:	90                   	nop
c00255c4:	83 ec 08             	sub    esp,0x8
c00255c7:	50                   	push   eax
c00255c8:	68 ec 01 04 c0       	push   0xc00401ec
c00255cd:	e8 3a 9a 00 00       	call   c002f00c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00255d2:	83 c4 10             	add    esp,0x10
c00255d5:	85 c0                	test   eax,eax
c00255d7:	74 47                	je     c0025620 <unblockTask(ThreadControlBlock*)+0x98>
c00255d9:	8d 76 00             	lea    esi,[esi+0x0]
c00255dc:	39 c3                	cmp    ebx,eax
c00255de:	75 e4                	jne    c00255c4 <unblockTask(ThreadControlBlock*)+0x3c>
c00255e0:	eb 12                	jmp    c00255f4 <unblockTask(ThreadControlBlock*)+0x6c>
c00255e2:	66 90                	xchg   ax,ax
c00255e4:	83 ec 0c             	sub    esp,0xc
c00255e7:	68 3f 2f 03 c0       	push   0xc0032f3f
c00255ec:	e8 dd 3c ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00255f1:	83 c4 10             	add    esp,0x10
c00255f4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255f9:	83 e8 01             	sub    eax,0x1
c00255fc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025601:	75 01                	jne    c0025604 <unblockTask(ThreadControlBlock*)+0x7c>
c0025603:	fb                   	sti    
c0025604:	83 c4 08             	add    esp,0x8
c0025607:	5b                   	pop    ebx
c0025608:	c3                   	ret    
c0025609:	8d 76 00             	lea    esi,[esi+0x0]
c002560c:	83 ec 0c             	sub    esp,0xc
c002560f:	68 28 2f 03 c0       	push   0xc0032f28
c0025614:	e8 b5 3c ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0025619:	83 c4 10             	add    esp,0x10
c002561c:	eb d6                	jmp    c00255f4 <unblockTask(ThreadControlBlock*)+0x6c>
c002561e:	66 90                	xchg   ax,ax
c0025620:	83 ec 08             	sub    esp,0x8
c0025623:	53                   	push   ebx
c0025624:	68 ec 01 04 c0       	push   0xc00401ec
c0025629:	e8 82 97 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002562e:	83 c4 10             	add    esp,0x10
c0025631:	eb c1                	jmp    c00255f4 <unblockTask(ThreadControlBlock*)+0x6c>
c0025633:	90                   	nop

c0025634 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025634:	55                   	push   ebp
c0025635:	57                   	push   edi
c0025636:	56                   	push   esi
c0025637:	53                   	push   ebx
c0025638:	83 ec 1c             	sub    esp,0x1c
c002563b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002563f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025642:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025648:	85 ed                	test   ebp,ebp
c002564a:	7e 28                	jle    c0025674 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c002564c:	31 f6                	xor    esi,esi
c002564e:	66 90                	xchg   ax,ax
c0025650:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025657:	83 ec 0c             	sub    esp,0xc
c002565a:	83 c6 01             	add    esi,0x1
c002565d:	57                   	push   edi
c002565e:	e8 44 0e ff ff       	call   c00164a7 <free>
c0025663:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025666:	83 c4 10             	add    esp,0x10
c0025669:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002566f:	7f df                	jg     c0025650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025671:	8d 76 00             	lea    esi,[esi+0x0]
c0025674:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002567e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025683:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025686:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025689:	d3 c0                	rol    eax,cl
c002568b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025692:	21 c8                	and    eax,ecx
c0025694:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c002569b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002569e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00256a6:	89 f7                	mov    edi,esi
c00256a8:	0f 85 72 01 00 00    	jne    c0025820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00256ae:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00256b4:	85 ed                	test   ebp,ebp
c00256b6:	74 1c                	je     c00256d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	55                   	push   ebp
c00256bc:	e8 8b a8 ff ff       	call   c001ff4c <EnvVarContainer::~EnvVarContainer()>
c00256c1:	59                   	pop    ecx
c00256c2:	5e                   	pop    esi
c00256c3:	6a 0c                	push   0xc
c00256c5:	55                   	push   ebp
c00256c6:	e8 05 3b ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c00256cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00256ce:	83 c4 10             	add    esp,0x10
c00256d1:	89 f7                	mov    edi,esi
c00256d3:	90                   	nop
c00256d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256da:	85 c0                	test   eax,eax
c00256dc:	0f 84 b2 00 00 00    	je     c0025794 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256e2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00256e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256e9:	31 c9                	xor    ecx,ecx
c00256eb:	eb 17                	jmp    c0025704 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00256ed:	8d 76 00             	lea    esi,[esi+0x0]
c00256f0:	83 c1 01             	add    ecx,0x1
c00256f3:	83 f9 10             	cmp    ecx,0x10
c00256f6:	0f 84 98 00 00 00    	je     c0025794 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025702:	66 90                	xchg   ax,ax
c0025704:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c002570b:	d3 fa                	sar    edx,cl
c002570d:	80 e2 01             	and    dl,0x1
c0025710:	74 de                	je     c00256f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025712:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025715:	c1 e2 05             	shl    edx,0x5
c0025718:	29 ca                	sub    edx,ecx
c002571a:	01 d0                	add    eax,edx
c002571c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025722:	83 fd 07             	cmp    ebp,0x7
c0025725:	75 c9                	jne    c00256f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025727:	05 40 02 00 00       	add    eax,0x240
c002572c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c002572f:	83 fd ff             	cmp    ebp,0xffffffff
c0025732:	0f 8c f0 00 00 00    	jl     c0025828 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025738:	0f 84 ae 01 00 00    	je     c00258ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002573e:	85 ed                	test   ebp,ebp
c0025740:	0f 84 92 01 00 00    	je     c00258d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025746:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025748:	75 a6                	jne    c00256f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002574a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002574e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025754:	01 d0                	add    eax,edx
c0025756:	66 90                	xchg   ax,ax
c0025758:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002575c:	83 ec 0c             	sub    esp,0xc
c002575f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025765:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025768:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002576e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025775:	50                   	push   eax
c0025776:	e8 0d fe ff ff       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c002577b:	83 c4 10             	add    esp,0x10
c002577e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025781:	89 f7                	mov    edi,esi
c0025783:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025787:	83 c1 01             	add    ecx,0x1
c002578a:	83 f9 10             	cmp    ecx,0x10
c002578d:	0f 85 69 ff ff ff    	jne    c00256fc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025793:	90                   	nop
c0025794:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c002579a:	85 c0                	test   eax,eax
c002579c:	74 62                	je     c0025800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002579e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00257a4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00257aa:	74 54                	je     c0025800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00257ac:	83 ec 0c             	sub    esp,0xc
c00257af:	68 ec 01 04 c0       	push   0xc00401ec
c00257b4:	e8 33 95 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257b9:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257c0:	89 c7                	mov    edi,eax
c00257c2:	e8 09 95 00 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00257c7:	83 c4 10             	add    esp,0x10
c00257ca:	84 c0                	test   al,al
c00257cc:	0f 84 ce 00 00 00    	je     c00258a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00257d2:	66 90                	xchg   ax,ax
c00257d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257d7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00257dd:	85 d2                	test   edx,edx
c00257df:	74 0f                	je     c00257f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00257e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00257e3:	83 ec 0c             	sub    esp,0xc
c00257e6:	52                   	push   edx
c00257e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00257ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257ed:	83 c4 10             	add    esp,0x10
c00257f0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00257fa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00257fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025800:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025806:	85 db                	test   ebx,ebx
c0025808:	74 16                	je     c0025820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002580a:	83 ec 0c             	sub    esp,0xc
c002580d:	53                   	push   ebx
c002580e:	e8 41 2d ff ff       	call   c0018554 <VAS::~VAS()>
c0025813:	58                   	pop    eax
c0025814:	5a                   	pop    edx
c0025815:	6a 14                	push   0x14
c0025817:	53                   	push   ebx
c0025818:	e8 b3 39 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002581d:	83 c4 10             	add    esp,0x10
c0025820:	83 c4 1c             	add    esp,0x1c
c0025823:	5b                   	pop    ebx
c0025824:	5e                   	pop    esi
c0025825:	5f                   	pop    edi
c0025826:	5d                   	pop    ebp
c0025827:	c3                   	ret    
c0025828:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002582c:	83 ec 0c             	sub    esp,0xc
c002582f:	68 d4 2f 03 c0       	push   0xc0032fd4
c0025834:	e8 1d aa ff ff       	call   c0020256 <KePanic(char const*)>
c0025839:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002583c:	83 c4 10             	add    esp,0x10
c002583f:	89 f7                	mov    edi,esi
c0025841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025845:	e9 a6 fe ff ff       	jmp    c00256f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002584a:	66 90                	xchg   ax,ax
c002584c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025852:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025858:	75 1e                	jne    c0025878 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002585a:	83 ec 0c             	sub    esp,0xc
c002585d:	68 3c 30 03 c0       	push   0xc003303c
c0025862:	e8 67 3a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0025867:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002586e:	e8 e5 fa ff ff       	call   c0025358 <blockTask(TaskState)>
c0025873:	83 c4 10             	add    esp,0x10
c0025876:	66 90                	xchg   ax,ax
c0025878:	83 ec 08             	sub    esp,0x8
c002587b:	56                   	push   esi
c002587c:	68 ec 01 04 c0       	push   0xc00401ec
c0025881:	e8 2a 95 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025886:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002588d:	e8 5a 94 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025892:	83 c4 10             	add    esp,0x10
c0025895:	39 f8                	cmp    eax,edi
c0025897:	0f 84 37 ff ff ff    	je     c00257d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c002589d:	8d 76 00             	lea    esi,[esi+0x0]
c00258a0:	83 ec 0c             	sub    esp,0xc
c00258a3:	68 ec 01 04 c0       	push   0xc00401ec
c00258a8:	e8 3f 94 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00258ad:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00258b4:	89 c6                	mov    esi,eax
c00258b6:	e8 39 94 00 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00258bb:	83 c4 10             	add    esp,0x10
c00258be:	39 f3                	cmp    ebx,esi
c00258c0:	74 b6                	je     c0025878 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00258c2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00258c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258c8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00258ce:	75 a8                	jne    c0025878 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00258d0:	e9 77 ff ff ff       	jmp    c002584c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00258d5:	8d 76 00             	lea    esi,[esi+0x0]
c00258d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258dc:	83 ec 0c             	sub    esp,0xc
c00258df:	68 08 30 03 c0       	push   0xc0033008
c00258e4:	e9 4b ff ff ff       	jmp    c0025834 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00258e9:	8d 76 00             	lea    esi,[esi+0x0]
c00258ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258f0:	8b 36                	mov    esi,DWORD PTR [esi]
c00258f2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00258f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258f8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00258fe:	01 d7                	add    edi,edx
c0025900:	89 f8                	mov    eax,edi
c0025902:	e9 51 fe ff ff       	jmp    c0025758 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025907:	90                   	nop

c0025908 <cleanerTaskFunction(void*)>:
c0025908:	53                   	push   ebx
c0025909:	83 ec 08             	sub    esp,0x8
c002590c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025911:	83 e8 01             	sub    eax,0x1
c0025914:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025919:	75 01                	jne    c002591c <cleanerTaskFunction(void*)+0x14>
c002591b:	fb                   	sti    
c002591c:	fa                   	cli    
c002591d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025922:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025929:	8d 50 01             	lea    edx,[eax+0x1]
c002592c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025932:	0f 84 c4 00 00 00    	je     c00259fc <cleanerTaskFunction(void*)+0xf4>
c0025938:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002593d:	85 c0                	test   eax,eax
c002593f:	75 03                	jne    c0025944 <cleanerTaskFunction(void*)+0x3c>
c0025941:	fb                   	sti    
c0025942:	66 90                	xchg   ax,ax
c0025944:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c002594b:	fa                   	cli    
c002594c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025952:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025958:	83 c2 01             	add    edx,0x1
c002595b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025961:	83 c1 01             	add    ecx,0x1
c0025964:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002596a:	fa                   	cli    
c002596b:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025971:	83 c3 01             	add    ebx,0x1
c0025974:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c002597a:	eb 28                	jmp    c00259a4 <cleanerTaskFunction(void*)+0x9c>
c002597c:	83 ec 0c             	sub    esp,0xc
c002597f:	68 d4 01 04 c0       	push   0xc00401d4
c0025984:	e8 63 93 00 00       	call   c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025989:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025990:	89 c3                	mov    ebx,eax
c0025992:	e8 5d 93 00 00       	call   c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002599a:	e8 95 fc ff ff       	call   c0025634 <cleanupTerminatedTask(ThreadControlBlock*)>
c002599f:	83 c4 10             	add    esp,0x10
c00259a2:	66 90                	xchg   ax,ax
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	68 d4 01 04 c0       	push   0xc00401d4
c00259ac:	e8 1f 93 00 00       	call   c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	84 c0                	test   al,al
c00259b6:	74 c4                	je     c002597c <cleanerTaskFunction(void*)+0x74>
c00259b8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259bd:	83 e8 01             	sub    eax,0x1
c00259c0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259c5:	75 01                	jne    c00259c8 <cleanerTaskFunction(void*)+0xc0>
c00259c7:	fb                   	sti    
c00259c8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00259cd:	83 e8 01             	sub    eax,0x1
c00259d0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00259d5:	0f 85 31 ff ff ff    	jne    c002590c <cleanerTaskFunction(void*)+0x4>
c00259db:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00259e0:	85 c0                	test   eax,eax
c00259e2:	0f 84 24 ff ff ff    	je     c002590c <cleanerTaskFunction(void*)+0x4>
c00259e8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259f2:	e8 a5 f8 ff ff       	call   c002529c <schedule()>
c00259f7:	e9 10 ff ff ff       	jmp    c002590c <cleanerTaskFunction(void*)+0x4>
c00259fc:	83 ec 0c             	sub    esp,0xc
c00259ff:	6a 02                	push   0x2
c0025a01:	e8 2a f9 ff ff       	call   c0025330 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025a06:	83 c4 10             	add    esp,0x10
c0025a09:	e9 36 ff ff ff       	jmp    c0025944 <cleanerTaskFunction(void*)+0x3c>
c0025a0e:	66 90                	xchg   ax,ax

c0025a10 <terminateTask(int)>:
c0025a10:	83 ec 14             	sub    esp,0x14
c0025a13:	fa                   	cli    
c0025a14:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025a1a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025a20:	83 c2 01             	add    edx,0x1
c0025a23:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025a29:	83 c1 01             	add    ecx,0x1
c0025a2c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025a32:	fa                   	cli    
c0025a33:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a3c:	83 c0 01             	add    eax,0x1
c0025a3f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a49:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a51:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025a54:	50                   	push   eax
c0025a55:	68 d4 01 04 c0       	push   0xc00401d4
c0025a5a:	e8 51 93 00 00       	call   c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a64:	83 c4 10             	add    esp,0x10
c0025a67:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025a6e:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025a73:	85 c0                	test   eax,eax
c0025a75:	74 65                	je     c0025adc <terminateTask(int)+0xcc>
c0025a77:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025a7e:	83 ec 0c             	sub    esp,0xc
c0025a81:	50                   	push   eax
c0025a82:	e8 01 fb ff ff       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c0025a87:	83 c4 10             	add    esp,0x10
c0025a8a:	66 90                	xchg   ax,ax
c0025a8c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a91:	83 e8 01             	sub    eax,0x1
c0025a94:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a99:	75 01                	jne    c0025a9c <terminateTask(int)+0x8c>
c0025a9b:	fb                   	sti    
c0025a9c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025aa1:	83 e8 01             	sub    eax,0x1
c0025aa4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025aa9:	75 09                	jne    c0025ab4 <terminateTask(int)+0xa4>
c0025aab:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025ab2:	75 3c                	jne    c0025af0 <terminateTask(int)+0xe0>
c0025ab4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ab9:	83 e8 01             	sub    eax,0x1
c0025abc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ac1:	75 01                	jne    c0025ac4 <terminateTask(int)+0xb4>
c0025ac3:	fb                   	sti    
c0025ac4:	fa                   	cli    
c0025ac5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025aca:	83 c0 01             	add    eax,0x1
c0025acd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ad2:	66 90                	xchg   ax,ax
c0025ad4:	e8 c3 f7 ff ff       	call   c002529c <schedule()>
c0025ad9:	eb d9                	jmp    c0025ab4 <terminateTask(int)+0xa4>
c0025adb:	90                   	nop
c0025adc:	83 ec 0c             	sub    esp,0xc
c0025adf:	68 56 2f 03 c0       	push   0xc0032f56
c0025ae4:	e8 e5 37 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0025ae9:	83 c4 10             	add    esp,0x10
c0025aec:	eb 9e                	jmp    c0025a8c <terminateTask(int)+0x7c>
c0025aee:	66 90                	xchg   ax,ax
c0025af0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025afa:	eb d8                	jmp    c0025ad4 <terminateTask(int)+0xc4>

c0025afc <Thr::terminateFromIRQ(int)>:
c0025afc:	83 ec 18             	sub    esp,0x18
c0025aff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b03:	50                   	push   eax
c0025b04:	e8 07 ff ff ff       	call   c0025a10 <terminateTask(int)>
c0025b09:	8d 76 00             	lea    esi,[esi+0x0]

c0025b0c <__static_initialization_and_destruction_0(int, int)>:
c0025b0c:	83 ec 0c             	sub    esp,0xc
c0025b0f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025b14:	0f 85 8e 00 00 00    	jne    c0025ba8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b1a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025b22:	0f 85 80 00 00 00    	jne    c0025ba8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b28:	83 ec 0c             	sub    esp,0xc
c0025b2b:	68 ec 01 04 c0       	push   0xc00401ec
c0025b30:	e8 2f 95 00 00       	call   c002f064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b35:	83 c4 10             	add    esp,0x10
c0025b38:	83 ec 04             	sub    esp,0x4
c0025b3b:	68 18 3c 03 c0       	push   0xc0033c18
c0025b40:	68 ec 01 04 c0       	push   0xc00401ec
c0025b45:	68 14 f0 02 c0       	push   0xc002f014
c0025b4a:	e8 31 36 ff ff       	call   c0019180 <__cxa_atexit>
c0025b4f:	83 c4 10             	add    esp,0x10
c0025b52:	83 ec 0c             	sub    esp,0xc
c0025b55:	68 e0 01 04 c0       	push   0xc00401e0
c0025b5a:	e8 05 95 00 00       	call   c002f064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b5f:	83 c4 10             	add    esp,0x10
c0025b62:	83 ec 04             	sub    esp,0x4
c0025b65:	68 18 3c 03 c0       	push   0xc0033c18
c0025b6a:	68 e0 01 04 c0       	push   0xc00401e0
c0025b6f:	68 14 f0 02 c0       	push   0xc002f014
c0025b74:	e8 07 36 ff ff       	call   c0019180 <__cxa_atexit>
c0025b79:	83 c4 10             	add    esp,0x10
c0025b7c:	83 ec 0c             	sub    esp,0xc
c0025b7f:	68 d4 01 04 c0       	push   0xc00401d4
c0025b84:	e8 db 94 00 00       	call   c002f064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b89:	83 c4 10             	add    esp,0x10
c0025b8c:	83 ec 04             	sub    esp,0x4
c0025b8f:	68 18 3c 03 c0       	push   0xc0033c18
c0025b94:	68 d4 01 04 c0       	push   0xc00401d4
c0025b99:	68 14 f0 02 c0       	push   0xc002f014
c0025b9e:	e8 dd 35 ff ff       	call   c0019180 <__cxa_atexit>
c0025ba3:	83 c4 10             	add    esp,0x10
c0025ba6:	66 90                	xchg   ax,ax
c0025ba8:	90                   	nop
c0025ba9:	83 c4 0c             	add    esp,0xc
c0025bac:	c3                   	ret    
c0025bad:	8d 76 00             	lea    esi,[esi+0x0]

c0025bb0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025bb0:	83 ec 0c             	sub    esp,0xc
c0025bb3:	83 ec 08             	sub    esp,0x8
c0025bb6:	68 ff ff 00 00       	push   0xffff
c0025bbb:	6a 01                	push   0x1
c0025bbd:	e8 4a ff ff ff       	call   c0025b0c <__static_initialization_and_destruction_0(int, int)>
c0025bc2:	83 c4 10             	add    esp,0x10
c0025bc5:	83 c4 0c             	add    esp,0xc
c0025bc8:	c3                   	ret    

c0025bc9 <Vm::inbv(unsigned short)>:
c0025bc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025bcd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025bd2:	75 06                	jne    c0025bda <Vm::inbv(unsigned short)+0x11>
c0025bd4:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025bd9:	c3                   	ret    
c0025bda:	ec                   	in     al,dx
c0025bdb:	c3                   	ret    

c0025bdc <Vm::outbv(unsigned short, unsigned char)>:
c0025bdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025be4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025be9:	75 25                	jne    c0025c10 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025beb:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025bf1:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025bf7:	8d 51 01             	lea    edx,[ecx+0x1]
c0025bfa:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025c00:	83 fa 20             	cmp    edx,0x20
c0025c03:	75 0c                	jne    c0025c11 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025c05:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025c0f:	c3                   	ret    
c0025c10:	ee                   	out    dx,al
c0025c11:	c3                   	ret    

c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025c12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c1c:	c1 e0 04             	shl    eax,0x4
c0025c1f:	01 d0                	add    eax,edx
c0025c21:	c3                   	ret    

c0025c22 <Vm::getSegment(unsigned int)>:
c0025c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c26:	c1 e8 10             	shr    eax,0x10
c0025c29:	c3                   	ret    

c0025c2a <Vm::getOffset(unsigned int)>:
c0025c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c2e:	c3                   	ret    

c0025c2f <Vm::mainloop2()>:
c0025c2f:	83 ec 18             	sub    esp,0x18
c0025c32:	fa                   	cli    
c0025c33:	6a 02                	push   0x2
c0025c35:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c3b:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025c42:	e8 e9 f6 ff ff       	call   c0025330 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c4c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025c50:	52                   	push   edx
c0025c51:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025c55:	52                   	push   edx
c0025c56:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025c5a:	52                   	push   edx
c0025c5b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025c5f:	50                   	push   eax
c0025c60:	e8 aa a5 fd ff       	call   c000020f <goToVM86>
c0025c65:	83 c4 2c             	add    esp,0x2c
c0025c68:	c3                   	ret    

c0025c69 <Vm::mainVm8086Loop(void*)>:
c0025c69:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c6e:	48                   	dec    eax
c0025c6f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c74:	75 01                	jne    c0025c77 <Vm::mainVm8086Loop(void*)+0xe>
c0025c76:	fb                   	sti    
c0025c77:	eb b6                	jmp    c0025c2f <Vm::mainloop2()>

c0025c79 <Vm::mainloop3(unsigned long)>:
c0025c79:	83 ec 18             	sub    esp,0x18
c0025c7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c80:	fa                   	cli    
c0025c81:	6a 02                	push   0x2
c0025c83:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c89:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025c90:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025c95:	e8 96 f6 ff ff       	call   c0025330 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c9a:	83 c4 1c             	add    esp,0x1c
c0025c9d:	eb 90                	jmp    c0025c2f <Vm::mainloop2()>

c0025c9f <Vm::initialise8086()>:
c0025c9f:	83 ec 0c             	sub    esp,0xc
c0025ca2:	68 80 00 00 00       	push   0x80
c0025ca7:	6a 00                	push   0x0
c0025ca9:	68 69 5c 02 c0       	push   0xc0025c69
c0025cae:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025cb4:	e8 97 f3 ff ff       	call   c0025050 <Process::createThread(void (*)(void*), void*, int)>
c0025cb9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025cc0:	68 00 01 00 00       	push   0x100
c0025cc5:	6a 00                	push   0x0
c0025cc7:	6a 00                	push   0x0
c0025cc9:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025cce:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025cd3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025cd9:	e8 ee 2b ff ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025cde:	83 c4 2c             	add    esp,0x2c
c0025ce1:	c3                   	ret    

c0025ce2 <Vm::finish8086()>:
c0025ce2:	53                   	push   ebx
c0025ce3:	83 ec 08             	sub    esp,0x8
c0025ce6:	fa                   	cli    
c0025ce7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ced:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025cf4:	75 15                	jne    c0025d0b <Vm::finish8086()+0x29>
c0025cf6:	e8 a1 f5 ff ff       	call   c002529c <schedule()>
c0025cfb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d00:	48                   	dec    eax
c0025d01:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d06:	75 de                	jne    c0025ce6 <Vm::finish8086()+0x4>
c0025d08:	fb                   	sti    
c0025d09:	eb db                	jmp    c0025ce6 <Vm::finish8086()+0x4>
c0025d0b:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025d12:	83 ec 0c             	sub    esp,0xc
c0025d15:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025d1b:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d21:	e8 62 f8 ff ff       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c0025d26:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d2b:	83 c4 10             	add    esp,0x10
c0025d2e:	8d 50 ff             	lea    edx,[eax-0x1]
c0025d31:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025d37:	85 d2                	test   edx,edx
c0025d39:	75 01                	jne    c0025d3c <Vm::finish8086()+0x5a>
c0025d3b:	fb                   	sti    
c0025d3c:	83 c4 08             	add    esp,0x8
c0025d3f:	89 d8                	mov    eax,ebx
c0025d41:	5b                   	pop    ebx
c0025d42:	c3                   	ret    

c0025d43 <Vm::getOutput8086(unsigned char*)>:
c0025d43:	57                   	push   edi
c0025d44:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025d4a:	56                   	push   esi
c0025d4b:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025d50:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d56:	5e                   	pop    esi
c0025d57:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025d5c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d66:	5f                   	pop    edi
c0025d67:	c3                   	ret    

c0025d68 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d68:	55                   	push   ebp
c0025d69:	57                   	push   edi
c0025d6a:	56                   	push   esi
c0025d6b:	53                   	push   ebx
c0025d6c:	83 ec 0c             	sub    esp,0xc
c0025d6f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025d73:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025d77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d7f:	fa                   	cli    
c0025d80:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d86:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025d8d:	75 15                	jne    c0025da4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025d8f:	e8 08 f5 ff ff       	call   c002529c <schedule()>
c0025d94:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d99:	48                   	dec    eax
c0025d9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d9f:	75 de                	jne    c0025d7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025da1:	fb                   	sti    
c0025da2:	eb db                	jmp    c0025d7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025da4:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025dae:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025db3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025db7:	0f b7 ff             	movzx  edi,di
c0025dba:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025dbe:	0f b7 f6             	movzx  esi,si
c0025dc1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025dc5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025dc9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025dcd:	50                   	push   eax
c0025dce:	6a 20                	push   0x20
c0025dd0:	6a 00                	push   0x0
c0025dd2:	68 40 02 04 c0       	push   0xc0040240
c0025dd7:	e8 14 a7 fd ff       	call   c00004f0 <memset>
c0025ddc:	5a                   	pop    edx
c0025ddd:	59                   	pop    ecx
c0025dde:	57                   	push   edi
c0025ddf:	56                   	push   esi
c0025de0:	e8 2d fe ff ff       	call   c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025de5:	83 c4 10             	add    esp,0x10
c0025de8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025dec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025df0:	89 c7                	mov    edi,eax
c0025df2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025df4:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025dfb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e00:	48                   	dec    eax
c0025e01:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e06:	75 01                	jne    c0025e09 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025e08:	fb                   	sti    
c0025e09:	83 ec 0c             	sub    esp,0xc
c0025e0c:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025e12:	e8 71 f7 ff ff       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c0025e17:	83 c4 1c             	add    esp,0x1c
c0025e1a:	b0 01                	mov    al,0x1
c0025e1c:	5b                   	pop    ebx
c0025e1d:	5e                   	pop    esi
c0025e1e:	5f                   	pop    edi
c0025e1f:	5d                   	pop    ebp
c0025e20:	c3                   	ret    

c0025e21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025e21:	55                   	push   ebp
c0025e22:	57                   	push   edi
c0025e23:	56                   	push   esi
c0025e24:	53                   	push   ebx
c0025e25:	83 ec 34             	sub    esp,0x34
c0025e28:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025e2c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025e30:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025e34:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025e38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e40:	68 64 30 03 c0       	push   0xc0033064
c0025e45:	e8 84 34 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	fa                   	cli    
c0025e4e:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025e54:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e5a:	84 db                	test   bl,bl
c0025e5c:	75 15                	jne    c0025e73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025e5e:	e8 39 f4 ff ff       	call   c002529c <schedule()>
c0025e63:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e68:	48                   	dec    eax
c0025e69:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e6e:	75 dd                	jne    c0025e4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e70:	fb                   	sti    
c0025e71:	eb da                	jmp    c0025e4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e73:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025e81:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025e86:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025e8a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025e8e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025e92:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025e96:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025e9a:	50                   	push   eax
c0025e9b:	6a 20                	push   0x20
c0025e9d:	6a 00                	push   0x0
c0025e9f:	68 40 02 04 c0       	push   0xc0040240
c0025ea4:	e8 47 a6 fd ff       	call   c00004f0 <memset>
c0025ea9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025eb0:	e8 e2 05 ff ff       	call   c0016497 <malloc>
c0025eb5:	83 c4 0c             	add    esp,0xc
c0025eb8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ebe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025ec2:	89 c5                	mov    ebp,eax
c0025ec4:	50                   	push   eax
c0025ec5:	e8 1c 46 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c0025eca:	83 c4 10             	add    esp,0x10
c0025ecd:	85 ed                	test   ebp,ebp
c0025ecf:	75 0a                	jne    c0025edb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025ed1:	83 ec 0c             	sub    esp,0xc
c0025ed4:	68 86 30 03 c0       	push   0xc0033086
c0025ed9:	eb 2b                	jmp    c0025f06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025edb:	50                   	push   eax
c0025edc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025ee0:	50                   	push   eax
c0025ee1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025ee5:	50                   	push   eax
c0025ee6:	55                   	push   ebp
c0025ee7:	e8 1a 49 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c0025eec:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025ef0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025ef4:	83 c4 10             	add    esp,0x10
c0025ef7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025efc:	74 27                	je     c0025f25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025efe:	83 ec 0c             	sub    esp,0xc
c0025f01:	68 9a 30 03 c0       	push   0xc003309a
c0025f06:	e8 4b a3 ff ff       	call   c0020256 <KePanic(char const*)>
c0025f0b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f10:	83 c4 10             	add    esp,0x10
c0025f13:	48                   	dec    eax
c0025f14:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f19:	85 c0                	test   eax,eax
c0025f1b:	75 01                	jne    c0025f1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f1d:	fb                   	sti    
c0025f1e:	31 db                	xor    ebx,ebx
c0025f20:	e9 90 00 00 00       	jmp    c0025fb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f25:	51                   	push   ecx
c0025f26:	51                   	push   ecx
c0025f27:	6a 01                	push   0x1
c0025f29:	55                   	push   ebp
c0025f2a:	e8 d5 45 ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0025f2f:	83 c4 10             	add    esp,0x10
c0025f32:	85 c0                	test   eax,eax
c0025f34:	74 26                	je     c0025f5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025f36:	83 ec 0c             	sub    esp,0xc
c0025f39:	68 b3 30 03 c0       	push   0xc00330b3
c0025f3e:	e8 13 a3 ff ff       	call   c0020256 <KePanic(char const*)>
c0025f43:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f48:	83 c4 10             	add    esp,0x10
c0025f4b:	48                   	dec    eax
c0025f4c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f51:	85 c0                	test   eax,eax
c0025f53:	75 c9                	jne    c0025f1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f55:	fb                   	sti    
c0025f56:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025f5a:	eb 59                	jmp    c0025fb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f5c:	50                   	push   eax
c0025f5d:	0f b7 ff             	movzx  edi,di
c0025f60:	50                   	push   eax
c0025f61:	0f b7 f6             	movzx  esi,si
c0025f64:	57                   	push   edi
c0025f65:	56                   	push   esi
c0025f66:	e8 a7 fc ff ff       	call   c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025f6b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0025f6e:	5a                   	pop    edx
c0025f6f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0025f73:	56                   	push   esi
c0025f74:	50                   	push   eax
c0025f75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f7d:	55                   	push   ebp
c0025f7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0025f81:	83 c4 14             	add    esp,0x14
c0025f84:	55                   	push   ebp
c0025f85:	e8 d8 45 ff ff       	call   c001a562 <File::close()>
c0025f8a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f8f:	83 c4 10             	add    esp,0x10
c0025f92:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025f99:	48                   	dec    eax
c0025f9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f9f:	85 c0                	test   eax,eax
c0025fa1:	75 01                	jne    c0025fa4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025fa3:	fb                   	sti    
c0025fa4:	83 ec 0c             	sub    esp,0xc
c0025fa7:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025fad:	e8 d6 f5 ff ff       	call   c0025588 <unblockTask(ThreadControlBlock*)>
c0025fb2:	83 c4 10             	add    esp,0x10
c0025fb5:	83 c4 2c             	add    esp,0x2c
c0025fb8:	88 d8                	mov    al,bl
c0025fba:	5b                   	pop    ebx
c0025fbb:	5e                   	pop    esi
c0025fbc:	5f                   	pop    edi
c0025fbd:	5d                   	pop    ebp
c0025fbe:	c3                   	ret    

c0025fbf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025fbf:	57                   	push   edi
c0025fc0:	56                   	push   esi
c0025fc1:	53                   	push   ebx
c0025fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025fca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025fce:	83 e8 06             	sub    eax,0x6
c0025fd1:	0f b7 c0             	movzx  eax,ax
c0025fd4:	50                   	push   eax
c0025fd5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025fda:	50                   	push   eax
c0025fdb:	e8 32 fc ff ff       	call   c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025fe0:	5a                   	pop    edx
c0025fe1:	59                   	pop    ecx
c0025fe2:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025fe5:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025fe8:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025feb:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ff1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ff4:	8d 51 02             	lea    edx,[ecx+0x2]
c0025ff7:	66 89 10             	mov    WORD PTR [eax],dx
c0025ffa:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025ffe:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026002:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0026006:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0026009:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c002600d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026013:	89 f1                	mov    ecx,esi
c0026015:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0026019:	89 f2                	mov    edx,esi
c002601b:	0f b6 d6             	movzx  edx,dh
c002601e:	0f b6 f1             	movzx  esi,cl
c0026021:	74 0a                	je     c002602d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0026023:	c1 e2 08             	shl    edx,0x8
c0026026:	09 f2                	or     edx,esi
c0026028:	80 ce 02             	or     dh,0x2
c002602b:	eb 08                	jmp    c0026035 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c002602d:	c1 e2 08             	shl    edx,0x8
c0026030:	09 f2                	or     edx,esi
c0026032:	80 e6 fd             	and    dh,0xfd
c0026035:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002603e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026042:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002604a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c002604d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026055:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026058:	5b                   	pop    ebx
c0026059:	5e                   	pop    esi
c002605a:	5f                   	pop    edi
c002605b:	c3                   	ret    

c002605c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c002605c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026061:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026066:	c1 e0 04             	shl    eax,0x4
c0026069:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c002606c:	c3                   	ret    

c002606d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c002606d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026072:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026077:	c1 e0 04             	shl    eax,0x4
c002607a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c002607e:	c3                   	ret    

c002607f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c002607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026084:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026089:	c1 e0 04             	shl    eax,0x4
c002608c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c002608f:	c3                   	ret    

c0026090 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026090:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026095:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002609a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002609e:	c1 e0 04             	shl    eax,0x4
c00260a1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00260a4:	c3                   	ret    

c00260a5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00260a5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260aa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260b3:	c1 e0 04             	shl    eax,0x4
c00260b6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00260ba:	c3                   	ret    

c00260bb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00260bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260c9:	c1 e0 04             	shl    eax,0x4
c00260cc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00260cf:	c3                   	ret    

c00260d0 <Vm::faultHandler(regs*)>:
c00260d0:	55                   	push   ebp
c00260d1:	57                   	push   edi
c00260d2:	56                   	push   esi
c00260d3:	53                   	push   ebx
c00260d4:	83 ec 2c             	sub    esp,0x2c
c00260d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00260db:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00260de:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00260e2:	0f b7 f8             	movzx  edi,ax
c00260e5:	0f b7 c0             	movzx  eax,ax
c00260e8:	52                   	push   edx
c00260e9:	50                   	push   eax
c00260ea:	e8 23 fb ff ff       	call   c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>
c00260ef:	5a                   	pop    edx
c00260f0:	59                   	pop    ecx
c00260f1:	89 c1                	mov    ecx,eax
c00260f3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00260f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260fa:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00260ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026103:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026106:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002610a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c002610f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026117:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002611b:	e8 f2 fa ff ff       	call   c0025c12 <Vm::realToLinear(unsigned short, unsigned short)>
c0026120:	5e                   	pop    esi
c0026121:	be 06 00 00 00       	mov    esi,0x6
c0026126:	5d                   	pop    ebp
c0026127:	31 ed                	xor    ebp,ebp
c0026129:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002612e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026131:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026137:	0f 84 74 02 00 00    	je     c00263b1 <Vm::faultHandler(regs*)+0x2e1>
c002613d:	0f 87 94 00 00 00    	ja     c00261d7 <Vm::faultHandler(regs*)+0x107>
c0026143:	83 fa 66             	cmp    edx,0x66
c0026146:	0f 84 e2 01 00 00    	je     c002632e <Vm::faultHandler(regs*)+0x25e>
c002614c:	77 47                	ja     c0026195 <Vm::faultHandler(regs*)+0xc5>
c002614e:	83 fa 36             	cmp    edx,0x36
c0026151:	0f 84 ca 01 00 00    	je     c0026321 <Vm::faultHandler(regs*)+0x251>
c0026157:	77 1a                	ja     c0026173 <Vm::faultHandler(regs*)+0xa3>
c0026159:	83 fa 26             	cmp    edx,0x26
c002615c:	0f 84 98 01 00 00    	je     c00262fa <Vm::faultHandler(regs*)+0x22a>
c0026162:	83 fa 2e             	cmp    edx,0x2e
c0026165:	0f 85 27 06 00 00    	jne    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c002616b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002616e:	31 f6                	xor    esi,esi
c0026170:	41                   	inc    ecx
c0026171:	eb bb                	jmp    c002612e <Vm::faultHandler(regs*)+0x5e>
c0026173:	83 fa 64             	cmp    edx,0x64
c0026176:	0f 84 8b 01 00 00    	je     c0026307 <Vm::faultHandler(regs*)+0x237>
c002617c:	0f 87 92 01 00 00    	ja     c0026314 <Vm::faultHandler(regs*)+0x244>
c0026182:	83 fa 3e             	cmp    edx,0x3e
c0026185:	0f 85 07 06 00 00    	jne    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c002618b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002618e:	be 01 00 00 00       	mov    esi,0x1
c0026193:	eb db                	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c0026195:	83 fa 6d             	cmp    edx,0x6d
c0026198:	0f 84 34 03 00 00    	je     c00264d2 <Vm::faultHandler(regs*)+0x402>
c002619e:	77 17                	ja     c00261b7 <Vm::faultHandler(regs*)+0xe7>
c00261a0:	83 fa 67             	cmp    edx,0x67
c00261a3:	0f 84 92 01 00 00    	je     c002633b <Vm::faultHandler(regs*)+0x26b>
c00261a9:	83 fa 6c             	cmp    edx,0x6c
c00261ac:	0f 84 b1 02 00 00    	je     c0026463 <Vm::faultHandler(regs*)+0x393>
c00261b2:	e9 db 05 00 00       	jmp    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c00261b7:	83 fa 6f             	cmp    edx,0x6f
c00261ba:	0f 84 40 04 00 00    	je     c0026600 <Vm::faultHandler(regs*)+0x530>
c00261c0:	0f 82 a2 03 00 00    	jb     c0026568 <Vm::faultHandler(regs*)+0x498>
c00261c6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00261cc:	0f 84 76 01 00 00    	je     c0026348 <Vm::faultHandler(regs*)+0x278>
c00261d2:	e9 bb 05 00 00       	jmp    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c00261d7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00261dd:	0f 84 57 05 00 00    	je     c002673a <Vm::faultHandler(regs*)+0x66a>
c00261e3:	0f 87 a9 00 00 00    	ja     c0026292 <Vm::faultHandler(regs*)+0x1c2>
c00261e9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00261ef:	0f 84 d6 04 00 00    	je     c00266cb <Vm::faultHandler(regs*)+0x5fb>
c00261f5:	77 78                	ja     c002626f <Vm::faultHandler(regs*)+0x19f>
c00261f7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00261fd:	0f 84 0e 02 00 00    	je     c0026411 <Vm::faultHandler(regs*)+0x341>
c0026203:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026209:	0f 85 83 05 00 00    	jne    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c002620f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0026213:	89 d1                	mov    ecx,edx
c0026215:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026218:	c1 e1 08             	shl    ecx,0x8
c002621b:	09 ca                	or     edx,ecx
c002621d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026220:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026224:	89 d1                	mov    ecx,edx
c0026226:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002622a:	c1 e1 08             	shl    ecx,0x8
c002622d:	09 ca                	or     edx,ecx
c002622f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026232:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026236:	89 d1                	mov    ecx,edx
c0026238:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002623c:	c1 e1 08             	shl    ecx,0x8
c002623f:	09 ca                	or     edx,ecx
c0026241:	81 ca 00 02 02 00    	or     edx,0x20200
c0026247:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002624a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002624e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026254:	d1 e8                	shr    eax,1
c0026256:	83 e0 01             	and    eax,0x1
c0026259:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002625c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002625f:	83 c0 06             	add    eax,0x6
c0026262:	25 ff ff 00 00       	and    eax,0xffff
c0026267:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002626a:	e9 1f 05 00 00       	jmp    c002678e <Vm::faultHandler(regs*)+0x6be>
c002626f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026275:	0f 84 95 04 00 00    	je     c0026710 <Vm::faultHandler(regs*)+0x640>
c002627b:	0f 82 66 04 00 00    	jb     c00266e7 <Vm::faultHandler(regs*)+0x617>
c0026281:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026287:	0f 84 9a 04 00 00    	je     c0026727 <Vm::faultHandler(regs*)+0x657>
c002628d:	e9 00 05 00 00       	jmp    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c0026292:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026298:	0f 84 dd 04 00 00    	je     c002677b <Vm::faultHandler(regs*)+0x6ab>
c002629e:	77 2e                	ja     c00262ce <Vm::faultHandler(regs*)+0x1fe>
c00262a0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00262a6:	0f 84 aa 04 00 00    	je     c0026756 <Vm::faultHandler(regs*)+0x686>
c00262ac:	81 fa ee 00 00 00    	cmp    edx,0xee
c00262b2:	0f 85 da 04 00 00    	jne    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c00262b8:	50                   	push   eax
c00262b9:	50                   	push   eax
c00262ba:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00262be:	50                   	push   eax
c00262bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00262c3:	50                   	push   eax
c00262c4:	e8 13 f9 ff ff       	call   c0025bdc <Vm::outbv(unsigned short, unsigned char)>
c00262c9:	e9 a5 04 00 00       	jmp    c0026773 <Vm::faultHandler(regs*)+0x6a3>
c00262ce:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00262d4:	0f 84 6d 01 00 00    	je     c0026447 <Vm::faultHandler(regs*)+0x377>
c00262da:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00262e0:	0f 84 6f 01 00 00    	je     c0026455 <Vm::faultHandler(regs*)+0x385>
c00262e6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00262ec:	0f 85 a0 04 00 00    	jne    c0026792 <Vm::faultHandler(regs*)+0x6c2>
c00262f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262f5:	e9 76 fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c00262fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262fd:	be 02 00 00 00       	mov    esi,0x2
c0026302:	e9 69 fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c0026307:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002630a:	be 03 00 00 00       	mov    esi,0x3
c002630f:	e9 5c fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c0026314:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026317:	be 04 00 00 00       	mov    esi,0x4
c002631c:	e9 4f fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c0026321:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026324:	be 05 00 00 00       	mov    esi,0x5
c0026329:	e9 42 fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c002632e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026331:	bd 01 00 00 00       	mov    ebp,0x1
c0026336:	e9 35 fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c002633b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002633e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026343:	e9 28 fe ff ff       	jmp    c0026170 <Vm::faultHandler(regs*)+0xa0>
c0026348:	83 e5 01             	and    ebp,0x1
c002634b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002634e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026352:	74 30                	je     c0026384 <Vm::faultHandler(regs*)+0x2b4>
c0026354:	83 e9 04             	sub    ecx,0x4
c0026357:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002635d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026363:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026366:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026369:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002636f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026373:	0f 84 12 04 00 00    	je     c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026379:	80 ce 02             	or     dh,0x2
c002637c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002637f:	e9 07 04 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026384:	83 e9 02             	sub    ecx,0x2
c0026387:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002638d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026390:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026394:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002639a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002639e:	74 05                	je     c00263a5 <Vm::faultHandler(regs*)+0x2d5>
c00263a0:	80 ce 02             	or     dh,0x2
c00263a3:	eb 03                	jmp    c00263a8 <Vm::faultHandler(regs*)+0x2d8>
c00263a5:	80 e6 fd             	and    dh,0xfd
c00263a8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00263ac:	e9 da 03 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c00263b1:	83 e5 01             	and    ebp,0x1
c00263b4:	74 2a                	je     c00263e0 <Vm::faultHandler(regs*)+0x310>
c00263b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00263b8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00263be:	81 ca 00 02 02 00    	or     edx,0x20200
c00263c4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263cf:	c1 e8 09             	shr    eax,0x9
c00263d2:	83 e0 01             	and    eax,0x1
c00263d5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263d8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263db:	83 c0 04             	add    eax,0x4
c00263de:	eb 24                	jmp    c0026404 <Vm::faultHandler(regs*)+0x334>
c00263e0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00263e3:	81 ca 00 02 02 00    	or     edx,0x20200
c00263e9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263ec:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00263ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263f5:	c1 e8 09             	shr    eax,0x9
c00263f8:	83 e0 01             	and    eax,0x1
c00263fb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263fe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026401:	83 c0 02             	add    eax,0x2
c0026404:	25 ff ff 00 00       	and    eax,0xffff
c0026409:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002640c:	e9 7a 03 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026411:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026415:	3d ee 00 00 00       	cmp    eax,0xee
c002641a:	75 10                	jne    c002642c <Vm::faultHandler(regs*)+0x35c>
c002641c:	83 ec 0c             	sub    esp,0xc
c002641f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026422:	e8 52 f8 ff ff       	call   c0025c79 <Vm::mainloop3(unsigned long)>
c0026427:	e9 4a 03 00 00       	jmp    c0026776 <Vm::faultHandler(regs*)+0x6a6>
c002642c:	83 ec 0c             	sub    esp,0xc
c002642f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026437:	51                   	push   ecx
c0026438:	50                   	push   eax
c0026439:	53                   	push   ebx
c002643a:	e8 80 fb ff ff       	call   c0025fbf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002643f:	83 c4 20             	add    esp,0x20
c0026442:	e9 47 03 00 00       	jmp    c002678e <Vm::faultHandler(regs*)+0x6be>
c0026447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002644c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026450:	e9 36 03 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002645a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002645e:	e9 28 03 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026463:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026468:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002646b:	74 2b                	je     c0026498 <Vm::faultHandler(regs*)+0x3c8>
c002646d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026474:	76 22                	jbe    c0026498 <Vm::faultHandler(regs*)+0x3c8>
c0026476:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002647a:	50                   	push   eax
c002647b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002647f:	50                   	push   eax
c0026480:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026484:	50                   	push   eax
c0026485:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026489:	50                   	push   eax
c002648a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002648e:	50                   	push   eax
c002648f:	6a 6c                	push   0x6c
c0026491:	6a 6c                	push   0x6c
c0026493:	e9 c0 01 00 00       	jmp    c0026658 <Vm::faultHandler(regs*)+0x588>
c0026498:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002649c:	83 ec 0c             	sub    esp,0xc
c002649f:	0f b7 f6             	movzx  esi,si
c00264a2:	50                   	push   eax
c00264a3:	e8 21 f7 ff ff       	call   c0025bc9 <Vm::inbv(unsigned short)>
c00264a8:	83 c4 0c             	add    esp,0xc
c00264ab:	0f b6 c0             	movzx  eax,al
c00264ae:	50                   	push   eax
c00264af:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00264b3:	50                   	push   eax
c00264b4:	56                   	push   esi
c00264b5:	e8 d6 fb ff ff       	call   c0026090 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00264ba:	83 c4 10             	add    esp,0x10
c00264bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264c0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264c4:	74 03                	je     c00264c9 <Vm::faultHandler(regs*)+0x3f9>
c00264c6:	48                   	dec    eax
c00264c7:	eb 01                	jmp    c00264ca <Vm::faultHandler(regs*)+0x3fa>
c00264c9:	40                   	inc    eax
c00264ca:	0f b7 c0             	movzx  eax,ax
c00264cd:	e9 8e 00 00 00       	jmp    c0026560 <Vm::faultHandler(regs*)+0x490>
c00264d2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00264d7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00264da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264dd:	74 29                	je     c0026508 <Vm::faultHandler(regs*)+0x438>
c00264df:	3d ff ff 00 00       	cmp    eax,0xffff
c00264e4:	76 22                	jbe    c0026508 <Vm::faultHandler(regs*)+0x438>
c00264e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264ea:	50                   	push   eax
c00264eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264ef:	50                   	push   eax
c00264f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264f4:	50                   	push   eax
c00264f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264f9:	50                   	push   eax
c00264fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264fe:	50                   	push   eax
c00264ff:	6a 6d                	push   0x6d
c0026501:	6a 6d                	push   0x6d
c0026503:	e9 50 01 00 00       	jmp    c0026658 <Vm::faultHandler(regs*)+0x588>
c0026508:	83 e5 01             	and    ebp,0x1
c002650b:	0f b7 c8             	movzx  ecx,ax
c002650e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026511:	0f b7 f6             	movzx  esi,si
c0026514:	74 1e                	je     c0026534 <Vm::faultHandler(regs*)+0x464>
c0026516:	ed                   	in     eax,dx
c0026517:	55                   	push   ebp
c0026518:	50                   	push   eax
c0026519:	51                   	push   ecx
c002651a:	56                   	push   esi
c002651b:	e8 9b fb ff ff       	call   c00260bb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026520:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026523:	83 c4 10             	add    esp,0x10
c0026526:	8d 50 04             	lea    edx,[eax+0x4]
c0026529:	83 e8 04             	sub    eax,0x4
c002652c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026532:	eb 20                	jmp    c0026554 <Vm::faultHandler(regs*)+0x484>
c0026534:	66 ed                	in     ax,dx
c0026536:	57                   	push   edi
c0026537:	0f b7 c0             	movzx  eax,ax
c002653a:	50                   	push   eax
c002653b:	51                   	push   ecx
c002653c:	56                   	push   esi
c002653d:	e8 63 fb ff ff       	call   c00260a5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026545:	83 c4 10             	add    esp,0x10
c0026548:	8d 50 02             	lea    edx,[eax+0x2]
c002654b:	83 e8 02             	sub    eax,0x2
c002654e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026554:	25 ff ff 00 00       	and    eax,0xffff
c0026559:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002655d:	0f 44 c2             	cmove  eax,edx
c0026560:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026563:	e9 23 02 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026568:	8d 46 ff             	lea    eax,[esi-0x1]
c002656b:	0f b6 f0             	movzx  esi,al
c002656e:	83 fe 05             	cmp    esi,0x5
c0026571:	77 23                	ja     c0026596 <Vm::faultHandler(regs*)+0x4c6>
c0026573:	ff 24 b5 28 31 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcced8]
c002657a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c002657f:	eb 15                	jmp    c0026596 <Vm::faultHandler(regs*)+0x4c6>
c0026581:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026585:	eb 0f                	jmp    c0026596 <Vm::faultHandler(regs*)+0x4c6>
c0026587:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c002658b:	eb 09                	jmp    c0026596 <Vm::faultHandler(regs*)+0x4c6>
c002658d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026591:	eb 03                	jmp    c0026596 <Vm::faultHandler(regs*)+0x4c6>
c0026593:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026596:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002659b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002659e:	74 29                	je     c00265c9 <Vm::faultHandler(regs*)+0x4f9>
c00265a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00265a5:	76 22                	jbe    c00265c9 <Vm::faultHandler(regs*)+0x4f9>
c00265a7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00265ab:	50                   	push   eax
c00265ac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00265b0:	50                   	push   eax
c00265b1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00265b5:	50                   	push   eax
c00265b6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00265ba:	50                   	push   eax
c00265bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265bf:	50                   	push   eax
c00265c0:	6a 6e                	push   0x6e
c00265c2:	6a 6e                	push   0x6e
c00265c4:	e9 8f 00 00 00       	jmp    c0026658 <Vm::faultHandler(regs*)+0x588>
c00265c9:	52                   	push   edx
c00265ca:	0f b7 c0             	movzx  eax,ax
c00265cd:	52                   	push   edx
c00265ce:	50                   	push   eax
c00265cf:	57                   	push   edi
c00265d0:	e8 87 fa ff ff       	call   c002605c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00265d5:	59                   	pop    ecx
c00265d6:	5e                   	pop    esi
c00265d7:	0f b6 c0             	movzx  eax,al
c00265da:	50                   	push   eax
c00265db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00265df:	50                   	push   eax
c00265e0:	e8 f7 f5 ff ff       	call   c0025bdc <Vm::outbv(unsigned short, unsigned char)>
c00265e5:	83 c4 10             	add    esp,0x10
c00265e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00265eb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00265ef:	74 03                	je     c00265f4 <Vm::faultHandler(regs*)+0x524>
c00265f1:	48                   	dec    eax
c00265f2:	eb 01                	jmp    c00265f5 <Vm::faultHandler(regs*)+0x525>
c00265f4:	40                   	inc    eax
c00265f5:	0f b7 c0             	movzx  eax,ax
c00265f8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00265fb:	e9 8b 01 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026600:	8d 46 ff             	lea    eax,[esi-0x1]
c0026603:	0f b6 f0             	movzx  esi,al
c0026606:	83 fe 05             	cmp    esi,0x5
c0026609:	77 1e                	ja     c0026629 <Vm::faultHandler(regs*)+0x559>
c002660b:	ff 24 b5 40 31 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccec0]
c0026612:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026616:	eb 11                	jmp    c0026629 <Vm::faultHandler(regs*)+0x559>
c0026618:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c002661b:	eb 0c                	jmp    c0026629 <Vm::faultHandler(regs*)+0x559>
c002661d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026620:	eb 07                	jmp    c0026629 <Vm::faultHandler(regs*)+0x559>
c0026622:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026625:	eb 02                	jmp    c0026629 <Vm::faultHandler(regs*)+0x559>
c0026627:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026629:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002662e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026631:	74 37                	je     c002666a <Vm::faultHandler(regs*)+0x59a>
c0026633:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026639:	76 2f                	jbe    c002666a <Vm::faultHandler(regs*)+0x59a>
c002663b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002663f:	50                   	push   eax
c0026640:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026644:	50                   	push   eax
c0026645:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026649:	50                   	push   eax
c002664a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002664e:	50                   	push   eax
c002664f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026653:	50                   	push   eax
c0026654:	6a 6f                	push   0x6f
c0026656:	6a 6f                	push   0x6f
c0026658:	68 cc 30 03 c0       	push   0xc00330cc
c002665d:	e8 6c 2c ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026662:	83 c4 20             	add    esp,0x20
c0026665:	e9 86 01 00 00       	jmp    c00267f0 <Vm::faultHandler(regs*)+0x720>
c002666a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002666d:	0f b7 d7             	movzx  edx,di
c0026670:	0f b7 c6             	movzx  eax,si
c0026673:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026676:	81 e1 00 04 00 00    	and    ecx,0x400
c002667c:	83 e5 01             	and    ebp,0x1
c002667f:	74 1c                	je     c002669d <Vm::faultHandler(regs*)+0x5cd>
c0026681:	55                   	push   ebp
c0026682:	55                   	push   ebp
c0026683:	50                   	push   eax
c0026684:	52                   	push   edx
c0026685:	e8 f5 f9 ff ff       	call   c002607f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002668a:	83 c4 10             	add    esp,0x10
c002668d:	89 fa                	mov    edx,edi
c002668f:	ef                   	out    dx,eax
c0026690:	8d 46 04             	lea    eax,[esi+0x4]
c0026693:	83 ee 04             	sub    esi,0x4
c0026696:	25 ff ff 00 00       	and    eax,0xffff
c002669b:	eb 1b                	jmp    c00266b8 <Vm::faultHandler(regs*)+0x5e8>
c002669d:	55                   	push   ebp
c002669e:	55                   	push   ebp
c002669f:	50                   	push   eax
c00266a0:	52                   	push   edx
c00266a1:	e8 c7 f9 ff ff       	call   c002606d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00266a6:	83 c4 10             	add    esp,0x10
c00266a9:	89 fa                	mov    edx,edi
c00266ab:	66 ef                	out    dx,ax
c00266ad:	8d 46 02             	lea    eax,[esi+0x2]
c00266b0:	83 ee 02             	sub    esi,0x2
c00266b3:	25 ff ff 00 00       	and    eax,0xffff
c00266b8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00266be:	85 c9                	test   ecx,ecx
c00266c0:	0f 44 f0             	cmove  esi,eax
c00266c3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00266c6:	e9 c0 00 00 00       	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c00266cb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00266d2:	83 ec 0c             	sub    esp,0xc
c00266d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266d9:	50                   	push   eax
c00266da:	e8 ea f4 ff ff       	call   c0025bc9 <Vm::inbv(unsigned short)>
c00266df:	0f b6 c0             	movzx  eax,al
c00266e2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00266e5:	eb 3a                	jmp    c0026721 <Vm::faultHandler(regs*)+0x651>
c00266e7:	83 e5 01             	and    ebp,0x1
c00266ea:	74 07                	je     c00266f3 <Vm::faultHandler(regs*)+0x623>
c00266ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266f0:	ed                   	in     eax,dx
c00266f1:	eb 14                	jmp    c0026707 <Vm::faultHandler(regs*)+0x637>
c00266f3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00266f6:	66 31 f6             	xor    si,si
c00266f9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00266fc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026700:	66 ed                	in     ax,dx
c0026702:	0f b7 c0             	movzx  eax,ax
c0026705:	09 f0                	or     eax,esi
c0026707:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002670a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002670e:	eb 7e                	jmp    c002678e <Vm::faultHandler(regs*)+0x6be>
c0026710:	52                   	push   edx
c0026711:	52                   	push   edx
c0026712:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026716:	50                   	push   eax
c0026717:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002671b:	50                   	push   eax
c002671c:	e8 bb f4 ff ff       	call   c0025bdc <Vm::outbv(unsigned short, unsigned char)>
c0026721:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026725:	eb 4f                	jmp    c0026776 <Vm::faultHandler(regs*)+0x6a6>
c0026727:	83 e5 01             	and    ebp,0x1
c002672a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c002672d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026731:	74 03                	je     c0026736 <Vm::faultHandler(regs*)+0x666>
c0026733:	ef                   	out    dx,eax
c0026734:	eb d4                	jmp    c002670a <Vm::faultHandler(regs*)+0x63a>
c0026736:	66 ef                	out    dx,ax
c0026738:	eb d0                	jmp    c002670a <Vm::faultHandler(regs*)+0x63a>
c002673a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002673e:	83 ec 0c             	sub    esp,0xc
c0026741:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026748:	50                   	push   eax
c0026749:	e8 7b f4 ff ff       	call   c0025bc9 <Vm::inbv(unsigned short)>
c002674e:	0f b6 c0             	movzx  eax,al
c0026751:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026754:	eb 1d                	jmp    c0026773 <Vm::faultHandler(regs*)+0x6a3>
c0026756:	83 e5 01             	and    ebp,0x1
c0026759:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002675c:	74 03                	je     c0026761 <Vm::faultHandler(regs*)+0x691>
c002675e:	ed                   	in     eax,dx
c002675f:	eb 0d                	jmp    c002676e <Vm::faultHandler(regs*)+0x69e>
c0026761:	66 ed                	in     ax,dx
c0026763:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026766:	0f b7 c0             	movzx  eax,ax
c0026769:	66 31 d2             	xor    dx,dx
c002676c:	09 d0                	or     eax,edx
c002676e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026771:	eb 18                	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026773:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026776:	83 c4 10             	add    esp,0x10
c0026779:	eb 13                	jmp    c002678e <Vm::faultHandler(regs*)+0x6be>
c002677b:	83 e5 01             	and    ebp,0x1
c002677e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026781:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026784:	74 03                	je     c0026789 <Vm::faultHandler(regs*)+0x6b9>
c0026786:	ef                   	out    dx,eax
c0026787:	eb 02                	jmp    c002678b <Vm::faultHandler(regs*)+0x6bb>
c0026789:	66 ef                	out    dx,ax
c002678b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002678e:	b0 01                	mov    al,0x1
c0026790:	eb 60                	jmp    c00267f2 <Vm::faultHandler(regs*)+0x722>
c0026792:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026796:	50                   	push   eax
c0026797:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002679b:	50                   	push   eax
c002679c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00267a0:	50                   	push   eax
c00267a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00267a5:	50                   	push   eax
c00267a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00267aa:	50                   	push   eax
c00267ab:	52                   	push   edx
c00267ac:	52                   	push   edx
c00267ad:	68 f9 30 03 c0       	push   0xc00330f9
c00267b2:	e8 17 2b ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00267b7:	83 c4 20             	add    esp,0x20
c00267ba:	83 ec 0c             	sub    esp,0xc
c00267bd:	6a 60                	push   0x60
c00267bf:	e8 05 f4 ff ff       	call   c0025bc9 <Vm::inbv(unsigned short)>
c00267c4:	83 c4 10             	add    esp,0x10
c00267c7:	0f b6 d0             	movzx  edx,al
c00267ca:	83 fa 1c             	cmp    edx,0x1c
c00267cd:	74 05                	je     c00267d4 <Vm::faultHandler(regs*)+0x704>
c00267cf:	83 fa 5a             	cmp    edx,0x5a
c00267d2:	75 e6                	jne    c00267ba <Vm::faultHandler(regs*)+0x6ea>
c00267d4:	0f b6 c0             	movzx  eax,al
c00267d7:	83 f8 1c             	cmp    eax,0x1c
c00267da:	74 05                	je     c00267e1 <Vm::faultHandler(regs*)+0x711>
c00267dc:	83 f8 5a             	cmp    eax,0x5a
c00267df:	75 0f                	jne    c00267f0 <Vm::faultHandler(regs*)+0x720>
c00267e1:	83 ec 0c             	sub    esp,0xc
c00267e4:	6a 60                	push   0x60
c00267e6:	e8 de f3 ff ff       	call   c0025bc9 <Vm::inbv(unsigned short)>
c00267eb:	83 c4 10             	add    esp,0x10
c00267ee:	eb e4                	jmp    c00267d4 <Vm::faultHandler(regs*)+0x704>
c00267f0:	31 c0                	xor    eax,eax
c00267f2:	83 c4 2c             	add    esp,0x2c
c00267f5:	5b                   	pop    ebx
c00267f6:	5e                   	pop    esi
c00267f7:	5f                   	pop    edi
c00267f8:	5d                   	pop    ebp
c00267f9:	c3                   	ret    

c00267fa <noCopro(unsigned long)>:
c00267fa:	c3                   	ret    

c00267fb <nmiHandler(regs*, void*)>:
c00267fb:	83 ec 0c             	sub    esp,0xc
c00267fe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026803:	83 ec 0c             	sub    esp,0xc
c0026806:	50                   	push   eax
c0026807:	e8 90 f4 fe ff       	call   c0015c9c <Computer::handleNMI()>
c002680c:	83 c4 10             	add    esp,0x10
c002680f:	90                   	nop
c0026810:	83 c4 0c             	add    esp,0xc
c0026813:	c3                   	ret    

c0026814 <doubleFault(regs*, void*)>:
c0026814:	55                   	push   ebp
c0026815:	89 e5                	mov    ebp,esp
c0026817:	83 ec 08             	sub    esp,0x8
c002681a:	83 ec 0c             	sub    esp,0xc
c002681d:	68 58 31 03 c0       	push   0xc0033158
c0026822:	e8 2f 9a ff ff       	call   c0020256 <KePanic(char const*)>
c0026827:	83 c4 10             	add    esp,0x10
c002682a:	90                   	nop
c002682b:	c9                   	leave  
c002682c:	c3                   	ret    

c002682d <displayDebugInfo(regs*)>:
c002682d:	83 ec 1c             	sub    esp,0x1c
c0026830:	0f 20 c0             	mov    eax,cr0
c0026833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026837:	0f 20 d0             	mov    eax,cr2
c002683a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002683e:	0f 20 d8             	mov    eax,cr3
c0026841:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026845:	0f 20 e0             	mov    eax,cr4
c0026848:	89 04 24             	mov    DWORD PTR [esp],eax
c002684b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002684f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026852:	83 ec 08             	sub    esp,0x8
c0026855:	50                   	push   eax
c0026856:	68 74 31 03 c0       	push   0xc0033174
c002685b:	e8 6e 2a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026860:	83 c4 10             	add    esp,0x10
c0026863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026867:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002686a:	83 ec 08             	sub    esp,0x8
c002686d:	50                   	push   eax
c002686e:	68 65 31 03 c0       	push   0xc0033165
c0026873:	e8 56 2a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026878:	83 c4 10             	add    esp,0x10
c002687b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002687f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026882:	83 ec 08             	sub    esp,0x8
c0026885:	50                   	push   eax
c0026886:	68 70 31 03 c0       	push   0xc0033170
c002688b:	e8 3e 2a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026890:	83 c4 10             	add    esp,0x10
c0026893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026897:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002689a:	83 ec 08             	sub    esp,0x8
c002689d:	50                   	push   eax
c002689e:	68 7f 31 03 c0       	push   0xc003317f
c00268a3:	e8 26 2a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00268a8:	83 c4 10             	add    esp,0x10
c00268ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268af:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00268b2:	83 ec 08             	sub    esp,0x8
c00268b5:	50                   	push   eax
c00268b6:	68 8a 31 03 c0       	push   0xc003318a
c00268bb:	e8 0e 2a ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00268c0:	83 c4 10             	add    esp,0x10
c00268c3:	83 ec 08             	sub    esp,0x8
c00268c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00268ca:	68 95 31 03 c0       	push   0xc0033195
c00268cf:	e8 fa 29 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00268d4:	83 c4 10             	add    esp,0x10
c00268d7:	83 ec 08             	sub    esp,0x8
c00268da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00268de:	68 a0 31 03 c0       	push   0xc00331a0
c00268e3:	e8 e6 29 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00268e8:	83 c4 10             	add    esp,0x10
c00268eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268ef:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268f2:	c1 e0 05             	shl    eax,0x5
c00268f5:	8d 90 40 45 03 c0    	lea    edx,[eax-0x3ffcbac0]
c00268fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268ff:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026902:	83 ec 04             	sub    esp,0x4
c0026905:	52                   	push   edx
c0026906:	50                   	push   eax
c0026907:	68 ab 31 03 c0       	push   0xc00331ab
c002690c:	e8 bd 29 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026911:	83 c4 10             	add    esp,0x10
c0026914:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026919:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002691f:	83 ec 0c             	sub    esp,0xc
c0026922:	50                   	push   eax
c0026923:	e8 0b 08 ff ff       	call   c0017133 <setActiveTerminal(VgaText*)>
c0026928:	83 c4 10             	add    esp,0x10
c002692b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026930:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026936:	83 ec 08             	sub    esp,0x8
c0026939:	68 ba 31 03 c0       	push   0xc00331ba
c002693e:	50                   	push   eax
c002693f:	e8 2c 0b ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026944:	83 c4 10             	add    esp,0x10
c0026947:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002694c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026952:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026956:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026959:	83 ec 08             	sub    esp,0x8
c002695c:	52                   	push   edx
c002695d:	50                   	push   eax
c002695e:	e8 c7 0a ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026963:	83 c4 10             	add    esp,0x10
c0026966:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002696b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026971:	83 ec 08             	sub    esp,0x8
c0026974:	68 c8 31 03 c0       	push   0xc00331c8
c0026979:	50                   	push   eax
c002697a:	e8 f1 0a ff ff       	call   c0017470 <VgaText::puts(char const*)>
c002697f:	83 c4 10             	add    esp,0x10
c0026982:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026987:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002698d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026992:	8b 12                	mov    edx,DWORD PTR [edx]
c0026994:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026997:	83 c2 0c             	add    edx,0xc
c002699a:	83 ec 08             	sub    esp,0x8
c002699d:	52                   	push   edx
c002699e:	50                   	push   eax
c002699f:	e8 cc 0a ff ff       	call   c0017470 <VgaText::puts(char const*)>
c00269a4:	83 c4 10             	add    esp,0x10
c00269a7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269b2:	83 ec 08             	sub    esp,0x8
c00269b5:	68 d1 31 03 c0       	push   0xc00331d1
c00269ba:	50                   	push   eax
c00269bb:	e8 b0 0a ff ff       	call   c0017470 <VgaText::puts(char const*)>
c00269c0:	83 c4 10             	add    esp,0x10
c00269c3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269d2:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00269d5:	83 ec 08             	sub    esp,0x8
c00269d8:	52                   	push   edx
c00269d9:	50                   	push   eax
c00269da:	e8 4b 0a ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c00269df:	83 c4 10             	add    esp,0x10
c00269e2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ed:	83 ec 08             	sub    esp,0x8
c00269f0:	68 d9 31 03 c0       	push   0xc00331d9
c00269f5:	50                   	push   eax
c00269f6:	e8 75 0a ff ff       	call   c0017470 <VgaText::puts(char const*)>
c00269fb:	83 c4 10             	add    esp,0x10
c00269fe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a0d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026a10:	83 ec 08             	sub    esp,0x8
c0026a13:	52                   	push   edx
c0026a14:	50                   	push   eax
c0026a15:	e8 10 0a ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026a1a:	83 c4 10             	add    esp,0x10
c0026a1d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a28:	83 ec 08             	sub    esp,0x8
c0026a2b:	68 e1 31 03 c0       	push   0xc00331e1
c0026a30:	50                   	push   eax
c0026a31:	e8 3a 0a ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026a36:	83 c4 10             	add    esp,0x10
c0026a39:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a48:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026a4b:	83 ec 08             	sub    esp,0x8
c0026a4e:	52                   	push   edx
c0026a4f:	50                   	push   eax
c0026a50:	e8 d5 09 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026a55:	83 c4 10             	add    esp,0x10
c0026a58:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a63:	83 ec 08             	sub    esp,0x8
c0026a66:	68 e9 31 03 c0       	push   0xc00331e9
c0026a6b:	50                   	push   eax
c0026a6c:	e8 ff 09 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026a71:	83 c4 10             	add    esp,0x10
c0026a74:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a83:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026a86:	83 ec 08             	sub    esp,0x8
c0026a89:	52                   	push   edx
c0026a8a:	50                   	push   eax
c0026a8b:	e8 9a 09 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026a90:	83 c4 10             	add    esp,0x10
c0026a93:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a9e:	83 ec 08             	sub    esp,0x8
c0026aa1:	68 f1 31 03 c0       	push   0xc00331f1
c0026aa6:	50                   	push   eax
c0026aa7:	e8 c4 09 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026aac:	83 c4 10             	add    esp,0x10
c0026aaf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026aba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026abe:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026ac1:	83 ec 08             	sub    esp,0x8
c0026ac4:	52                   	push   edx
c0026ac5:	50                   	push   eax
c0026ac6:	e8 5f 09 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026acb:	83 c4 10             	add    esp,0x10
c0026ace:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ad3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ad9:	83 ec 08             	sub    esp,0x8
c0026adc:	68 f9 31 03 c0       	push   0xc00331f9
c0026ae1:	50                   	push   eax
c0026ae2:	e8 89 09 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026ae7:	83 c4 10             	add    esp,0x10
c0026aea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026af5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026af9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026afc:	83 ec 08             	sub    esp,0x8
c0026aff:	52                   	push   edx
c0026b00:	50                   	push   eax
c0026b01:	e8 24 09 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026b06:	83 c4 10             	add    esp,0x10
c0026b09:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b14:	83 ec 08             	sub    esp,0x8
c0026b17:	68 01 32 03 c0       	push   0xc0033201
c0026b1c:	50                   	push   eax
c0026b1d:	e8 4e 09 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026b22:	83 c4 10             	add    esp,0x10
c0026b25:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b30:	83 ec 08             	sub    esp,0x8
c0026b33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026b37:	50                   	push   eax
c0026b38:	e8 ed 08 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026b3d:	83 c4 10             	add    esp,0x10
c0026b40:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b4b:	83 ec 08             	sub    esp,0x8
c0026b4e:	68 0a 32 03 c0       	push   0xc003320a
c0026b53:	50                   	push   eax
c0026b54:	e8 17 09 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026b59:	83 c4 10             	add    esp,0x10
c0026b5c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b67:	83 ec 08             	sub    esp,0x8
c0026b6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b6e:	50                   	push   eax
c0026b6f:	e8 b6 08 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026b74:	83 c4 10             	add    esp,0x10
c0026b77:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b82:	83 ec 08             	sub    esp,0x8
c0026b85:	68 12 32 03 c0       	push   0xc0033212
c0026b8a:	50                   	push   eax
c0026b8b:	e8 e0 08 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0026b90:	83 c4 10             	add    esp,0x10
c0026b93:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b9e:	83 ec 08             	sub    esp,0x8
c0026ba1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026ba5:	50                   	push   eax
c0026ba6:	e8 7f 08 ff ff       	call   c001742a <VgaText::putx(unsigned int)>
c0026bab:	83 c4 10             	add    esp,0x10
c0026bae:	fa                   	cli    
c0026baf:	f4                   	hlt    
c0026bb0:	eb fe                	jmp    c0026bb0 <displayDebugInfo(regs*)+0x383>

c0026bb2 <HalSystemIdle()>:
c0026bb2:	56                   	push   esi
c0026bb3:	53                   	push   ebx
c0026bb4:	83 ec 14             	sub    esp,0x14
c0026bb7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bc2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026bc8:	83 e0 04             	and    eax,0x4
c0026bcb:	0f b6 c0             	movzx  eax,al
c0026bce:	85 c0                	test   eax,eax
c0026bd0:	0f 95 c0             	setne  al
c0026bd3:	0f b6 c0             	movzx  eax,al
c0026bd6:	85 c0                	test   eax,eax
c0026bd8:	74 4c                	je     c0026c26 <HalSystemIdle()+0x74>
c0026bda:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bdf:	83 ec 08             	sub    esp,0x8
c0026be2:	68 e1 00 00 00       	push   0xe1
c0026be7:	50                   	push   eax
c0026be8:	e8 bb ee fe ff       	call   c0015aa8 <Computer::rdmsr(unsigned int)>
c0026bed:	83 c4 10             	add    esp,0x10
c0026bf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bf4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bf8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026c01:	83 e2 02             	and    edx,0x2
c0026c04:	89 d3                	mov    ebx,edx
c0026c06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c0a:	83 e2 00             	and    edx,0x0
c0026c0d:	89 d6                	mov    esi,edx
c0026c0f:	56                   	push   esi
c0026c10:	53                   	push   ebx
c0026c11:	68 e1 00 00 00       	push   0xe1
c0026c16:	50                   	push   eax
c0026c17:	e8 b8 ee fe ff       	call   c0015ad4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026c1c:	83 c4 10             	add    esp,0x10
c0026c1f:	e8 70 95 fd ff       	call   c0000194 <doTPAUSE>
c0026c24:	eb 01                	jmp    c0026c27 <HalSystemIdle()+0x75>
c0026c26:	f4                   	hlt    
c0026c27:	90                   	nop
c0026c28:	83 c4 14             	add    esp,0x14
c0026c2b:	5b                   	pop    ebx
c0026c2c:	5e                   	pop    esi
c0026c2d:	c3                   	ret    

c0026c2e <displayProgramFault(char const*)>:
c0026c2e:	83 ec 0c             	sub    esp,0xc
c0026c31:	83 ec 0c             	sub    esp,0xc
c0026c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c38:	e8 91 26 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026c3d:	83 c4 10             	add    esp,0x10
c0026c40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c50:	85 c0                	test   eax,eax
c0026c52:	74 21                	je     c0026c75 <displayProgramFault(char const*)+0x47>
c0026c54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c64:	6a 04                	push   0x4
c0026c66:	6a 0f                	push   0xf
c0026c68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c6c:	50                   	push   eax
c0026c6d:	e8 70 08 ff ff       	call   c00174e2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026c72:	83 c4 10             	add    esp,0x10
c0026c75:	90                   	nop
c0026c76:	83 c4 0c             	add    esp,0xc
c0026c79:	c3                   	ret    

c0026c7a <gpFault(regs*, void*)>:
c0026c7a:	83 ec 1c             	sub    esp,0x1c
c0026c7d:	c7 05 74 02 04 c0 d0 60 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc00260d0
c0026c87:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c8c:	85 c0                	test   eax,eax
c0026c8e:	74 1e                	je     c0026cae <gpFault(regs*, void*)+0x34>
c0026c90:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c95:	83 ec 0c             	sub    esp,0xc
c0026c98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c9c:	ff d0                	call   eax
c0026c9e:	83 c4 10             	add    esp,0x10
c0026ca1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026ca5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026caa:	85 c0                	test   eax,eax
c0026cac:	75 2e                	jne    c0026cdc <gpFault(regs*, void*)+0x62>
c0026cae:	83 ec 0c             	sub    esp,0xc
c0026cb1:	68 1a 32 03 c0       	push   0xc003321a
c0026cb6:	e8 73 ff ff ff       	call   c0026c2e <displayProgramFault(char const*)>
c0026cbb:	83 c4 10             	add    esp,0x10
c0026cbe:	83 ec 0c             	sub    esp,0xc
c0026cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026cc5:	e8 63 fb ff ff       	call   c002682d <displayDebugInfo(regs*)>
c0026cca:	83 c4 10             	add    esp,0x10
c0026ccd:	83 ec 0c             	sub    esp,0xc
c0026cd0:	6a 00                	push   0x0
c0026cd2:	e8 25 ee ff ff       	call   c0025afc <Thr::terminateFromIRQ(int)>
c0026cd7:	83 c4 10             	add    esp,0x10
c0026cda:	eb 01                	jmp    c0026cdd <gpFault(regs*, void*)+0x63>
c0026cdc:	90                   	nop
c0026cdd:	83 c4 1c             	add    esp,0x1c
c0026ce0:	c3                   	ret    

c0026ce1 <pgFault(regs*, void*)>:
c0026ce1:	83 ec 1c             	sub    esp,0x1c
c0026ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ce8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026ceb:	0f 20 d0             	mov    eax,cr2
c0026cee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026cf6:	83 ec 04             	sub    esp,0x4
c0026cf9:	52                   	push   edx
c0026cfa:	50                   	push   eax
c0026cfb:	68 f8 32 03 c0       	push   0xc00332f8
c0026d00:	e8 c9 25 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026d05:	83 c4 10             	add    esp,0x10
c0026d08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026d12:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026d18:	0f 20 d2             	mov    edx,cr2
c0026d1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026d1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026d23:	83 ec 08             	sub    esp,0x8
c0026d26:	52                   	push   edx
c0026d27:	50                   	push   eax
c0026d28:	e8 11 20 ff ff       	call   c0018d3e <VAS::tryLoadBackOffDisk(unsigned long)>
c0026d2d:	83 c4 10             	add    esp,0x10
c0026d30:	0f b6 c0             	movzx  eax,al
c0026d33:	85 c0                	test   eax,eax
c0026d35:	75 2e                	jne    c0026d65 <pgFault(regs*, void*)+0x84>
c0026d37:	83 ec 0c             	sub    esp,0xc
c0026d3a:	68 33 32 03 c0       	push   0xc0033233
c0026d3f:	e8 ea fe ff ff       	call   c0026c2e <displayProgramFault(char const*)>
c0026d44:	83 c4 10             	add    esp,0x10
c0026d47:	83 ec 0c             	sub    esp,0xc
c0026d4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d4e:	e8 da fa ff ff       	call   c002682d <displayDebugInfo(regs*)>
c0026d53:	83 c4 10             	add    esp,0x10
c0026d56:	83 ec 0c             	sub    esp,0xc
c0026d59:	6a 00                	push   0x0
c0026d5b:	e8 9c ed ff ff       	call   c0025afc <Thr::terminateFromIRQ(int)>
c0026d60:	83 c4 10             	add    esp,0x10
c0026d63:	eb 01                	jmp    c0026d66 <pgFault(regs*, void*)+0x85>
c0026d65:	90                   	nop
c0026d66:	83 c4 1c             	add    esp,0x1c
c0026d69:	c3                   	ret    

c0026d6a <otherISRHandler(regs*, void*)>:
c0026d6a:	83 ec 0c             	sub    esp,0xc
c0026d6d:	83 ec 0c             	sub    esp,0xc
c0026d70:	68 20 33 03 c0       	push   0xc0033320
c0026d75:	e8 b4 fe ff ff       	call   c0026c2e <displayProgramFault(char const*)>
c0026d7a:	83 c4 10             	add    esp,0x10
c0026d7d:	83 ec 0c             	sub    esp,0xc
c0026d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d84:	e8 a4 fa ff ff       	call   c002682d <displayDebugInfo(regs*)>
c0026d89:	83 c4 10             	add    esp,0x10
c0026d8c:	83 ec 0c             	sub    esp,0xc
c0026d8f:	6a 00                	push   0x0
c0026d91:	e8 66 ed ff ff       	call   c0025afc <Thr::terminateFromIRQ(int)>
c0026d96:	83 c4 10             	add    esp,0x10
c0026d99:	90                   	nop
c0026d9a:	83 c4 0c             	add    esp,0xc
c0026d9d:	c3                   	ret    

c0026d9e <opcodeFault(regs*, void*)>:
c0026d9e:	55                   	push   ebp
c0026d9f:	89 e5                	mov    ebp,esp
c0026da1:	83 ec 08             	sub    esp,0x8
c0026da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026da7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026daa:	83 ec 08             	sub    esp,0x8
c0026dad:	50                   	push   eax
c0026dae:	68 3e 32 03 c0       	push   0xc003323e
c0026db3:	e8 16 25 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026db8:	83 c4 10             	add    esp,0x10
c0026dbb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026dc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026dc6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026dcc:	0f b6 c0             	movzx  eax,al
c0026dcf:	85 c0                	test   eax,eax
c0026dd1:	74 21                	je     c0026df4 <opcodeFault(regs*, void*)+0x56>
c0026dd3:	83 ec 0c             	sub    esp,0xc
c0026dd6:	68 48 33 03 c0       	push   0xc0033348
c0026ddb:	e8 ee 24 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026de0:	83 c4 10             	add    esp,0x10
c0026de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026de6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026de9:	8d 50 19             	lea    edx,[eax+0x19]
c0026dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026def:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026df2:	eb 2b                	jmp    c0026e1f <opcodeFault(regs*, void*)+0x81>
c0026df4:	83 ec 0c             	sub    esp,0xc
c0026df7:	68 4c 32 03 c0       	push   0xc003324c
c0026dfc:	e8 2d fe ff ff       	call   c0026c2e <displayProgramFault(char const*)>
c0026e01:	83 c4 10             	add    esp,0x10
c0026e04:	83 ec 0c             	sub    esp,0xc
c0026e07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e0a:	e8 1e fa ff ff       	call   c002682d <displayDebugInfo(regs*)>
c0026e0f:	83 c4 10             	add    esp,0x10
c0026e12:	83 ec 0c             	sub    esp,0xc
c0026e15:	6a 00                	push   0x0
c0026e17:	e8 e0 ec ff ff       	call   c0025afc <Thr::terminateFromIRQ(int)>
c0026e1c:	83 c4 10             	add    esp,0x10
c0026e1f:	c9                   	leave  
c0026e20:	c3                   	ret    

c0026e21 <i386SaveCoprocessor(void*)>:
c0026e21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e25:	83 c0 3f             	add    eax,0x3f
c0026e28:	83 e0 c0             	and    eax,0xffffffc0
c0026e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e2f:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026e35 <i386LoadCoprocessor(void*)>:
c0026e35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e39:	83 c0 3f             	add    eax,0x3f
c0026e3c:	83 e0 c0             	and    eax,0xffffffc0
c0026e3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e43:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026e49 <x87EmulHandler(regs*, void*)>:
c0026e49:	53                   	push   ebx
c0026e4a:	83 ec 08             	sub    esp,0x8
c0026e4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e52:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026e56:	74 10                	je     c0026e68 <x87EmulHandler(regs*, void*)+0x1f>
c0026e58:	83 ec 0c             	sub    esp,0xc
c0026e5b:	68 59 32 03 c0       	push   0xc0033259
c0026e60:	e8 f1 93 ff ff       	call   c0020256 <KePanic(char const*)>
c0026e65:	83 c4 10             	add    esp,0x10
c0026e68:	0f 20 c0             	mov    eax,cr0
c0026e6b:	a8 08                	test   al,0x8
c0026e6d:	74 59                	je     c0026ec8 <x87EmulHandler(regs*, void*)+0x7f>
c0026e6f:	0f 06                	clts   
c0026e71:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e76:	85 c0                	test   eax,eax
c0026e78:	74 0e                	je     c0026e88 <x87EmulHandler(regs*, void*)+0x3f>
c0026e7a:	83 ec 0c             	sub    esp,0xc
c0026e7d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e80:	e8 9c ff ff ff       	call   c0026e21 <i386SaveCoprocessor(void*)>
c0026e85:	83 c4 10             	add    esp,0x10
c0026e88:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026e8e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026e92:	75 12                	jne    c0026ea6 <x87EmulHandler(regs*, void*)+0x5d>
c0026e94:	83 ec 0c             	sub    esp,0xc
c0026e97:	68 40 02 00 00       	push   0x240
c0026e9c:	e8 f6 f5 fe ff       	call   c0016497 <malloc>
c0026ea1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026ea4:	eb 10                	jmp    c0026eb6 <x87EmulHandler(regs*, void*)+0x6d>
c0026ea6:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026eab:	83 ec 0c             	sub    esp,0xc
c0026eae:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026eb1:	e8 7f ff ff ff       	call   c0026e35 <i386LoadCoprocessor(void*)>
c0026eb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026ebb:	83 c4 10             	add    esp,0x10
c0026ebe:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026ec3:	83 c4 08             	add    esp,0x8
c0026ec6:	5b                   	pop    ebx
c0026ec7:	c3                   	ret    
c0026ec8:	83 ec 0c             	sub    esp,0xc
c0026ecb:	68 6d 32 03 c0       	push   0xc003326d
c0026ed0:	e8 f9 23 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026ed5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026edd:	83 c4 18             	add    esp,0x18
c0026ee0:	5b                   	pop    ebx
c0026ee1:	e9 16 ec ff ff       	jmp    c0025afc <Thr::terminateFromIRQ(int)>

c0026ee6 <HalInitialiseCoprocessor()>:
c0026ee6:	83 ec 10             	sub    esp,0x10
c0026ee9:	6a 00                	push   0x0
c0026eeb:	68 49 6e 02 c0       	push   0xc0026e49
c0026ef0:	6a 07                	push   0x7
c0026ef2:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026efc:	e8 ad 49 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026f01:	e8 0a 71 00 00       	call   c002e010 <avxDetect>
c0026f06:	83 c4 10             	add    esp,0x10
c0026f09:	85 c0                	test   eax,eax
c0026f0b:	74 1c                	je     c0026f29 <HalInitialiseCoprocessor()+0x43>
c0026f0d:	c7 05 70 02 04 c0 3a e0 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e03a
c0026f17:	c7 05 6c 02 04 c0 4b e0 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e04b
c0026f21:	83 c4 0c             	add    esp,0xc
c0026f24:	e9 33 71 00 00       	jmp    c002e05c <avxInit>
c0026f29:	e8 52 74 00 00       	call   c002e380 <sseDetect>
c0026f2e:	85 c0                	test   eax,eax
c0026f30:	74 1c                	je     c0026f4e <HalInitialiseCoprocessor()+0x68>
c0026f32:	c7 05 70 02 04 c0 98 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e398
c0026f3c:	c7 05 6c 02 04 c0 a0 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e3a0
c0026f46:	83 c4 0c             	add    esp,0xc
c0026f49:	e9 5a 74 00 00       	jmp    c002e3a8 <sseInit>
c0026f4e:	e8 73 74 00 00       	call   c002e3c6 <x87Detect>
c0026f53:	85 c0                	test   eax,eax
c0026f55:	74 1c                	je     c0026f73 <HalInitialiseCoprocessor()+0x8d>
c0026f57:	c7 05 70 02 04 c0 e1 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e3e1
c0026f61:	c7 05 6c 02 04 c0 e8 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e3e8
c0026f6b:	83 c4 0c             	add    esp,0xc
c0026f6e:	e9 7c 74 00 00       	jmp    c002e3ef <x87Init>
c0026f73:	c7 05 70 02 04 c0 fa 67 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00267fa
c0026f7d:	c7 05 6c 02 04 c0 fa 67 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00267fa
c0026f87:	0f 20 c0             	mov    eax,cr0
c0026f8a:	83 c8 04             	or     eax,0x4
c0026f8d:	0f 22 c0             	mov    cr0,eax
c0026f90:	83 c4 0c             	add    esp,0xc
c0026f93:	c3                   	ret    

c0026f94 <HalPanic(char const*)>:
c0026f94:	53                   	push   ebx
c0026f95:	83 ec 10             	sub    esp,0x10
c0026f98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026f9c:	fa                   	cli    
c0026f9d:	53                   	push   ebx
c0026f9e:	68 83 32 03 c0       	push   0xc0033283
c0026fa3:	e8 26 23 ff ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0026fa8:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026fad:	83 c4 10             	add    esp,0x10
c0026fb0:	85 c0                	test   eax,eax
c0026fb2:	74 09                	je     c0026fbd <HalPanic(char const*)+0x29>
c0026fb4:	83 ec 0c             	sub    esp,0xc
c0026fb7:	53                   	push   ebx
c0026fb8:	ff d0                	call   eax
c0026fba:	83 c4 10             	add    esp,0x10
c0026fbd:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026fc2:	85 c0                	test   eax,eax
c0026fc4:	0f 84 dc 00 00 00    	je     c00270a6 <HalPanic(char const*)+0x112>
c0026fca:	52                   	push   edx
c0026fcb:	6a 01                	push   0x1
c0026fcd:	6a 0f                	push   0xf
c0026fcf:	50                   	push   eax
c0026fd0:	e8 b9 ff fe ff       	call   c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026fd5:	59                   	pop    ecx
c0026fd6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fdc:	e8 9d 01 ff ff       	call   c001717e <VgaText::clearScreen()>
c0026fe1:	58                   	pop    eax
c0026fe2:	5a                   	pop    edx
c0026fe3:	68 54 13 03 c0       	push   0xc0031354
c0026fe8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fee:	e8 d3 ff fe ff       	call   c0016fc6 <VgaText::setTitle(char*)>
c0026ff3:	83 c4 0c             	add    esp,0xc
c0026ff6:	6a 01                	push   0x1
c0026ff8:	6a 0f                	push   0xf
c0026ffa:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027000:	e8 89 ff fe ff       	call   c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027005:	59                   	pop    ecx
c0027006:	58                   	pop    eax
c0027007:	68 9c 32 03 c0       	push   0xc003329c
c002700c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027012:	e8 59 04 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0027017:	83 c4 0c             	add    esp,0xc
c002701a:	6a 0f                	push   0xf
c002701c:	6a 01                	push   0x1
c002701e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027024:	e8 65 ff fe ff       	call   c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027029:	58                   	pop    eax
c002702a:	5a                   	pop    edx
c002702b:	68 a5 32 03 c0       	push   0xc00332a5
c0027030:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027036:	e8 35 04 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c002703b:	83 c4 0c             	add    esp,0xc
c002703e:	6a 01                	push   0x1
c0027040:	6a 0f                	push   0xf
c0027042:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027048:	e8 41 ff fe ff       	call   c0016f8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002704d:	59                   	pop    ecx
c002704e:	58                   	pop    eax
c002704f:	68 e9 32 03 c0       	push   0xc00332e9
c0027054:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002705a:	e8 11 04 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c002705f:	58                   	pop    eax
c0027060:	5a                   	pop    edx
c0027061:	68 b2 32 03 c0       	push   0xc00332b2
c0027066:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002706c:	e8 ff 03 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0027071:	59                   	pop    ecx
c0027072:	58                   	pop    eax
c0027073:	68 ec 32 03 c0       	push   0xc00332ec
c0027078:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002707e:	e8 ed 03 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0027083:	58                   	pop    eax
c0027084:	5a                   	pop    edx
c0027085:	53                   	push   ebx
c0027086:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002708c:	e8 df 03 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c0027091:	59                   	pop    ecx
c0027092:	5b                   	pop    ebx
c0027093:	68 e9 32 03 c0       	push   0xc00332e9
c0027098:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002709e:	e8 cd 03 ff ff       	call   c0017470 <VgaText::puts(char const*)>
c00270a3:	83 c4 10             	add    esp,0x10
c00270a6:	eb fe                	jmp    c00270a6 <HalPanic(char const*)+0x112>

c00270a8 <HalQueryPerformanceCounter()>:
c00270a8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00270ad:	31 d2                	xor    edx,edx
c00270af:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00270b5:	31 c0                	xor    eax,eax
c00270b7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00270be:	74 02                	je     c00270c2 <HalQueryPerformanceCounter()+0x1a>
c00270c0:	0f 31                	rdtsc  
c00270c2:	c3                   	ret    

c00270c3 <HalInitialise()>:
c00270c3:	53                   	push   ebx
c00270c4:	83 ec 08             	sub    esp,0x8
c00270c7:	e8 19 4a ff ff       	call   c001bae5 <setupINTS()>
c00270cc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00270d1:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c00270d8:	75 0f                	jne    c00270e9 <HalInitialise()+0x26>
c00270da:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270e0:	83 e2 fe             	and    edx,0xfffffffe
c00270e3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270e9:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c00270f0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270f6:	83 e2 fe             	and    edx,0xfffffffe
c00270f9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270ff:	e8 a0 02 00 00       	call   c00273a4 <picOpen()>
c0027104:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002710b:	74 0a                	je     c0027117 <HalInitialise()+0x54>
c002710d:	e8 e2 01 00 00       	call   c00272f4 <picDisable()>
c0027112:	e8 63 68 00 00       	call   c002d97a <apicOpen()>
c0027117:	50                   	push   eax
c0027118:	bb 0f 00 00 00       	mov    ebx,0xf
c002711d:	6a 00                	push   0x0
c002711f:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027124:	6a 00                	push   0x0
c0027126:	e8 83 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c002712b:	83 c4 0c             	add    esp,0xc
c002712e:	6a 00                	push   0x0
c0027130:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027135:	6a 01                	push   0x1
c0027137:	e8 72 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c002713c:	83 c4 0c             	add    esp,0xc
c002713f:	6a 00                	push   0x0
c0027141:	68 fb 67 02 c0       	push   0xc00267fb
c0027146:	6a 02                	push   0x2
c0027148:	e8 61 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c002714d:	83 c4 0c             	add    esp,0xc
c0027150:	6a 00                	push   0x0
c0027152:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027157:	6a 03                	push   0x3
c0027159:	e8 50 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c002715e:	83 c4 0c             	add    esp,0xc
c0027161:	6a 00                	push   0x0
c0027163:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027168:	6a 04                	push   0x4
c002716a:	e8 3f 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c002716f:	83 c4 0c             	add    esp,0xc
c0027172:	6a 00                	push   0x0
c0027174:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027179:	6a 05                	push   0x5
c002717b:	e8 2e 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027180:	83 c4 0c             	add    esp,0xc
c0027183:	6a 00                	push   0x0
c0027185:	68 9e 6d 02 c0       	push   0xc0026d9e
c002718a:	6a 06                	push   0x6
c002718c:	e8 1d 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027191:	83 c4 0c             	add    esp,0xc
c0027194:	6a 00                	push   0x0
c0027196:	68 14 68 02 c0       	push   0xc0026814
c002719b:	6a 08                	push   0x8
c002719d:	e8 0c 47 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271a2:	83 c4 0c             	add    esp,0xc
c00271a5:	6a 00                	push   0x0
c00271a7:	68 6a 6d 02 c0       	push   0xc0026d6a
c00271ac:	6a 09                	push   0x9
c00271ae:	e8 fb 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271b3:	83 c4 0c             	add    esp,0xc
c00271b6:	6a 00                	push   0x0
c00271b8:	68 6a 6d 02 c0       	push   0xc0026d6a
c00271bd:	6a 0a                	push   0xa
c00271bf:	e8 ea 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271c4:	83 c4 0c             	add    esp,0xc
c00271c7:	6a 00                	push   0x0
c00271c9:	68 6a 6d 02 c0       	push   0xc0026d6a
c00271ce:	6a 0b                	push   0xb
c00271d0:	e8 d9 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271d5:	83 c4 0c             	add    esp,0xc
c00271d8:	6a 00                	push   0x0
c00271da:	68 7a 6c 02 c0       	push   0xc0026c7a
c00271df:	6a 0d                	push   0xd
c00271e1:	e8 c8 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271e6:	83 c4 0c             	add    esp,0xc
c00271e9:	6a 00                	push   0x0
c00271eb:	68 e1 6c 02 c0       	push   0xc0026ce1
c00271f0:	6a 0e                	push   0xe
c00271f2:	e8 b7 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271f7:	83 c4 10             	add    esp,0x10
c00271fa:	50                   	push   eax
c00271fb:	6a 00                	push   0x0
c00271fd:	68 6a 6d 02 c0       	push   0xc0026d6a
c0027202:	53                   	push   ebx
c0027203:	43                   	inc    ebx
c0027204:	e8 a5 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027209:	83 c4 10             	add    esp,0x10
c002720c:	83 fb 1e             	cmp    ebx,0x1e
c002720f:	75 e9                	jne    c00271fa <HalInitialise()+0x137>
c0027211:	50                   	push   eax
c0027212:	6a 00                	push   0x0
c0027214:	68 20 1b 02 c0       	push   0xc0021b20
c0027219:	6a 60                	push   0x60
c002721b:	e8 8e 46 ff ff       	call   c001b8ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027220:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027225:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c002722f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027236:	e8 5c f2 fe ff       	call   c0016497 <malloc>
c002723b:	89 04 24             	mov    DWORD PTR [esp],eax
c002723e:	89 c3                	mov    ebx,eax
c0027240:	e8 37 09 00 00       	call   c0027b7c <RTC::RTC()>
c0027245:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002724f:	5a                   	pop    edx
c0027250:	59                   	pop    ecx
c0027251:	53                   	push   ebx
c0027252:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027258:	e8 07 41 ff ff       	call   c001b364 <Device::addChild(Device*)>
c002725d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002725f:	6a 00                	push   0x0
c0027261:	6a 00                	push   0x0
c0027263:	6a 00                	push   0x0
c0027265:	53                   	push   ebx
c0027266:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027269:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002726e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027274:	83 c4 28             	add    esp,0x28
c0027277:	5b                   	pop    ebx
c0027278:	c3                   	ret    

c0027279 <HalMakeBeep(int)>:
c0027279:	53                   	push   ebx
c002727a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c002727e:	85 db                	test   ebx,ebx
c0027280:	75 07                	jne    c0027289 <HalMakeBeep(int)+0x10>
c0027282:	e4 61                	in     al,0x61
c0027284:	83 e0 fc             	and    eax,0xfffffffc
c0027287:	eb 26                	jmp    c00272af <HalMakeBeep(int)+0x36>
c0027289:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002728e:	99                   	cdq    
c002728f:	f7 fb                	idiv   ebx
c0027291:	89 c1                	mov    ecx,eax
c0027293:	b0 b6                	mov    al,0xb6
c0027295:	e6 43                	out    0x43,al
c0027297:	88 c8                	mov    al,cl
c0027299:	e6 42                	out    0x42,al
c002729b:	89 c8                	mov    eax,ecx
c002729d:	c1 e8 08             	shr    eax,0x8
c00272a0:	e6 42                	out    0x42,al
c00272a2:	e4 61                	in     al,0x61
c00272a4:	89 c2                	mov    edx,eax
c00272a6:	83 ca 03             	or     edx,0x3
c00272a9:	38 d0                	cmp    al,dl
c00272ab:	74 04                	je     c00272b1 <HalMakeBeep(int)+0x38>
c00272ad:	88 d0                	mov    al,dl
c00272af:	e6 61                	out    0x61,al
c00272b1:	5b                   	pop    ebx
c00272b2:	c3                   	ret    

c00272b3 <HalGetRand()>:
c00272b3:	31 c0                	xor    eax,eax
c00272b5:	c3                   	ret    

c00272b6 <HalEndOfInterrupt(int)>:
c00272b6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00272bd:	74 23                	je     c00272e2 <HalEndOfInterrupt(int)+0x2c>
c00272bf:	83 ec 14             	sub    esp,0x14
c00272c2:	6a 1b                	push   0x1b
c00272c4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272ca:	e8 d9 e7 fe ff       	call   c0015aa8 <Computer::rdmsr(unsigned int)>
c00272cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00272d4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00272de:	83 c4 1c             	add    esp,0x1c
c00272e1:	c3                   	ret    
c00272e2:	e9 41 02 00 00       	jmp    c0027528 <picEOI(int)>

c00272e7 <HalRestart()>:
c00272e7:	c3                   	ret    

c00272e8 <HalShutdown()>:
c00272e8:	c3                   	ret    

c00272e9 <HalSleep()>:
c00272e9:	c3                   	ret    
c00272ea:	66 90                	xchg   ax,ax

c00272ec <picIoWait()>:
c00272ec:	eb 00                	jmp    c00272ee <picIoWait()+0x2>
c00272ee:	eb 00                	jmp    c00272f0 <picIoWait()+0x4>
c00272f0:	90                   	nop
c00272f1:	c3                   	ret    
c00272f2:	66 90                	xchg   ax,ax

c00272f4 <picDisable()>:
c00272f4:	83 ec 10             	sub    esp,0x10
c00272f7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00272fe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0027303:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027307:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002730c:	ee                   	out    dx,al
c002730d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0027314:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027319:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002731d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0027322:	ee                   	out    dx,al
c0027323:	90                   	nop
c0027324:	83 c4 10             	add    esp,0x10
c0027327:	c3                   	ret    

c0027328 <picGetIRQReg(int)>:
c0027328:	83 ec 10             	sub    esp,0x10
c002732b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002732f:	0f b6 c0             	movzx  eax,al
c0027332:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027339:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c002733d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027341:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027346:	ee                   	out    dx,al
c0027347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002734b:	0f b6 c0             	movzx  eax,al
c002734e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027355:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027359:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002735d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027362:	ee                   	out    dx,al
c0027363:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002736a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002736f:	89 c2                	mov    edx,eax
c0027371:	ec                   	in     al,dx
c0027372:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027376:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002737a:	0f b6 c0             	movzx  eax,al
c002737d:	c1 e0 08             	shl    eax,0x8
c0027380:	89 c1                	mov    ecx,eax
c0027382:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027389:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002738e:	89 c2                	mov    edx,eax
c0027390:	ec                   	in     al,dx
c0027391:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027395:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027399:	0f b6 c0             	movzx  eax,al
c002739c:	09 c8                	or     eax,ecx
c002739e:	83 c4 10             	add    esp,0x10
c00273a1:	c3                   	ret    
c00273a2:	66 90                	xchg   ax,ax

c00273a4 <picOpen()>:
c00273a4:	83 ec 50             	sub    esp,0x50
c00273a7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00273ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00273b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00273b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00273bb:	ee                   	out    dx,al
c00273bc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00273c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00273c8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00273cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273d0:	ee                   	out    dx,al
c00273d1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00273d9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00273e1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00273e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00273ec:	89 c2                	mov    edx,eax
c00273ee:	ec                   	in     al,dx
c00273ef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00273f3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00273f7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00273fb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0027402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027406:	89 c2                	mov    edx,eax
c0027408:	ec                   	in     al,dx
c0027409:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002740d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027411:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0027415:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c002741c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027421:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027425:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027429:	ee                   	out    dx,al
c002742a:	e8 bd fe ff ff       	call   c00272ec <picIoWait()>
c002742f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027436:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002743b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c002743f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027443:	ee                   	out    dx,al
c0027444:	e8 a3 fe ff ff       	call   c00272ec <picIoWait()>
c0027449:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002744d:	0f b6 c0             	movzx  eax,al
c0027450:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027457:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002745b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002745f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027463:	ee                   	out    dx,al
c0027464:	e8 83 fe ff ff       	call   c00272ec <picIoWait()>
c0027469:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002746d:	0f b6 c0             	movzx  eax,al
c0027470:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027477:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002747b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002747f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027483:	ee                   	out    dx,al
c0027484:	e8 63 fe ff ff       	call   c00272ec <picIoWait()>
c0027489:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027490:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027495:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027499:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002749d:	ee                   	out    dx,al
c002749e:	e8 49 fe ff ff       	call   c00272ec <picIoWait()>
c00274a3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00274aa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00274af:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00274b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00274b7:	ee                   	out    dx,al
c00274b8:	e8 2f fe ff ff       	call   c00272ec <picIoWait()>
c00274bd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00274c4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00274c9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00274cd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00274d1:	ee                   	out    dx,al
c00274d2:	e8 15 fe ff ff       	call   c00272ec <picIoWait()>
c00274d7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00274de:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00274e3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00274e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00274eb:	ee                   	out    dx,al
c00274ec:	e8 fb fd ff ff       	call   c00272ec <picIoWait()>
c00274f1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00274f6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00274fd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027501:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027505:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027509:	ee                   	out    dx,al
c002750a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c002750f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027516:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002751a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c002751e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027522:	ee                   	out    dx,al
c0027523:	90                   	nop
c0027524:	83 c4 50             	add    esp,0x50
c0027527:	c3                   	ret    

c0027528 <picEOI(int)>:
c0027528:	83 ec 10             	sub    esp,0x10
c002752b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027530:	75 1e                	jne    c0027550 <picEOI(int)+0x28>
c0027532:	6a 0b                	push   0xb
c0027534:	e8 ef fd ff ff       	call   c0027328 <picGetIRQReg(int)>
c0027539:	83 c4 04             	add    esp,0x4
c002753c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027541:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027546:	25 80 00 00 00       	and    eax,0x80
c002754b:	74 73                	je     c00275c0 <picEOI(int)+0x98>
c002754d:	8d 76 00             	lea    esi,[esi+0x0]
c0027550:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027555:	75 31                	jne    c0027588 <picEOI(int)+0x60>
c0027557:	6a 0b                	push   0xb
c0027559:	e8 ca fd ff ff       	call   c0027328 <picGetIRQReg(int)>
c002755e:	83 c4 04             	add    esp,0x4
c0027561:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002756a:	98                   	cwde   
c002756b:	85 c0                	test   eax,eax
c002756d:	78 19                	js     c0027588 <picEOI(int)+0x60>
c002756f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027576:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002757b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002757f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027584:	ee                   	out    dx,al
c0027585:	eb 3d                	jmp    c00275c4 <picEOI(int)+0x9c>
c0027587:	90                   	nop
c0027588:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c002758d:	7e 19                	jle    c00275a8 <picEOI(int)+0x80>
c002758f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027596:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002759b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002759f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00275a4:	ee                   	out    dx,al
c00275a5:	8d 76 00             	lea    esi,[esi+0x0]
c00275a8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00275af:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00275b4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00275b8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00275bd:	ee                   	out    dx,al
c00275be:	eb 04                	jmp    c00275c4 <picEOI(int)+0x9c>
c00275c0:	90                   	nop
c00275c1:	8d 76 00             	lea    esi,[esi+0x0]
c00275c4:	83 c4 10             	add    esp,0x10
c00275c7:	c3                   	ret    

c00275c8 <RTC::open(int, int, void*)>:
c00275c8:	31 c0                	xor    eax,eax
c00275ca:	c3                   	ret    
c00275cb:	90                   	nop

c00275cc <RTC::close(int, int, void*)>:
c00275cc:	31 c0                	xor    eax,eax
c00275ce:	c3                   	ret    
c00275cf:	90                   	nop

c00275d0 <RTC::timeInSecondsUTC()>:
c00275d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00275da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00275e0:	c3                   	ret    
c00275e1:	90                   	nop

c00275e2 <RTC::timeInDatetimeUTC()>:
c00275e2:	53                   	push   ebx
c00275e3:	83 ec 14             	sub    esp,0x14
c00275e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00275ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00275f0:	50                   	push   eax
c00275f1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00275f4:	83 c4 0c             	add    esp,0xc
c00275f7:	52                   	push   edx
c00275f8:	50                   	push   eax
c00275f9:	53                   	push   ebx
c00275fa:	e8 d9 3a ff ff       	call   c001b0d8 <secondsToDatetime(unsigned long long)>
c00275ff:	89 d8                	mov    eax,ebx
c0027601:	83 c4 14             	add    esp,0x14
c0027604:	5b                   	pop    ebx
c0027605:	c2 04 00             	ret    0x4

c0027608 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027608:	56                   	push   esi
c0027609:	53                   	push   ebx
c002760a:	83 ec 14             	sub    esp,0x14
c002760d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027611:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027613:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027616:	8d 44 24 08          	lea    eax,[esp+0x8]
c002761a:	52                   	push   edx
c002761b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002761f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027623:	50                   	push   eax
c0027624:	e8 af 3a ff ff       	call   c001b0d8 <secondsToDatetime(unsigned long long)>
c0027629:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c002762d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027635:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027639:	89 f0                	mov    eax,esi
c002763b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002763f:	83 c4 20             	add    esp,0x20
c0027642:	5b                   	pop    ebx
c0027643:	5e                   	pop    esi
c0027644:	ff e0                	jmp    eax

c0027646 <RTC::~RTC()>:
c0027646:	83 ec 0c             	sub    esp,0xc
c0027649:	ba 88 33 03 c0       	mov    edx,0xc0033388
c002764e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027652:	89 10                	mov    DWORD PTR [eax],edx
c0027654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027658:	83 ec 0c             	sub    esp,0xc
c002765b:	50                   	push   eax
c002765c:	e8 03 38 ff ff       	call   c001ae64 <Clock::~Clock()>
c0027661:	83 c4 10             	add    esp,0x10
c0027664:	90                   	nop
c0027665:	83 c4 0c             	add    esp,0xc
c0027668:	c3                   	ret    
c0027669:	90                   	nop

c002766a <RTC::~RTC()>:
c002766a:	83 ec 0c             	sub    esp,0xc
c002766d:	83 ec 0c             	sub    esp,0xc
c0027670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027674:	e8 cd ff ff ff       	call   c0027646 <RTC::~RTC()>
c0027679:	83 c4 10             	add    esp,0x10
c002767c:	83 ec 08             	sub    esp,0x8
c002767f:	68 60 01 00 00       	push   0x160
c0027684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027688:	e8 43 1b ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002768d:	83 c4 10             	add    esp,0x10
c0027690:	83 c4 0c             	add    esp,0xc
c0027693:	c3                   	ret    

c0027694 <RTC::get_update_in_progress_flag()>:
c0027694:	83 ec 14             	sub    esp,0x14
c0027697:	6a 0a                	push   0xa
c0027699:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002769f:	e8 bc e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00276a4:	83 c4 1c             	add    esp,0x1c
c00276a7:	0f b6 c0             	movzx  eax,al
c00276aa:	c1 e8 07             	shr    eax,0x7
c00276ad:	c3                   	ret    

c00276ae <RTC::completeRTCRefresh()>:
c00276ae:	55                   	push   ebp
c00276af:	57                   	push   edi
c00276b0:	56                   	push   esi
c00276b1:	53                   	push   ebx
c00276b2:	83 ec 3c             	sub    esp,0x3c
c00276b5:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00276bb:	83 ec 0c             	sub    esp,0xc
c00276be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00276c2:	e8 cd ff ff ff       	call   c0027694 <RTC::get_update_in_progress_flag()>
c00276c7:	83 c4 10             	add    esp,0x10
c00276ca:	84 c0                	test   al,al
c00276cc:	74 0e                	je     c00276dc <RTC::completeRTCRefresh()+0x2e>
c00276ce:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00276d4:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00276da:	73 df                	jae    c00276bb <RTC::completeRTCRefresh()+0xd>
c00276dc:	50                   	push   eax
c00276dd:	50                   	push   eax
c00276de:	6a 00                	push   0x0
c00276e0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276e6:	e8 75 e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00276eb:	89 c7                	mov    edi,eax
c00276ed:	58                   	pop    eax
c00276ee:	5a                   	pop    edx
c00276ef:	6a 02                	push   0x2
c00276f1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276f7:	e8 64 e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00276fc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027700:	59                   	pop    ecx
c0027701:	5b                   	pop    ebx
c0027702:	6a 04                	push   0x4
c0027704:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002770a:	e8 51 e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c002770f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027713:	5e                   	pop    esi
c0027714:	5d                   	pop    ebp
c0027715:	6a 07                	push   0x7
c0027717:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002771d:	e8 3e e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027722:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027726:	58                   	pop    eax
c0027727:	5a                   	pop    edx
c0027728:	6a 08                	push   0x8
c002772a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027730:	e8 2b e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027735:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027739:	59                   	pop    ecx
c002773a:	5b                   	pop    ebx
c002773b:	6a 09                	push   0x9
c002773d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027743:	e8 18 e4 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027748:	0f b6 c0             	movzx  eax,al
c002774b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002774f:	83 c4 10             	add    esp,0x10
c0027752:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027758:	83 ec 0c             	sub    esp,0xc
c002775b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002775f:	e8 30 ff ff ff       	call   c0027694 <RTC::get_update_in_progress_flag()>
c0027764:	83 c4 10             	add    esp,0x10
c0027767:	84 c0                	test   al,al
c0027769:	74 0e                	je     c0027779 <RTC::completeRTCRefresh()+0xcb>
c002776b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027771:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027777:	73 df                	jae    c0027758 <RTC::completeRTCRefresh()+0xaa>
c0027779:	51                   	push   ecx
c002777a:	51                   	push   ecx
c002777b:	6a 00                	push   0x0
c002777d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027783:	e8 d8 e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027788:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002778c:	5b                   	pop    ebx
c002778d:	5e                   	pop    esi
c002778e:	6a 02                	push   0x2
c0027790:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027796:	e8 c5 e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c002779b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002779f:	5d                   	pop    ebp
c00277a0:	58                   	pop    eax
c00277a1:	6a 04                	push   0x4
c00277a3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277a9:	e8 b2 e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00277ae:	88 c3                	mov    bl,al
c00277b0:	58                   	pop    eax
c00277b1:	5a                   	pop    edx
c00277b2:	6a 07                	push   0x7
c00277b4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277ba:	e8 a1 e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00277bf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00277c3:	59                   	pop    ecx
c00277c4:	5e                   	pop    esi
c00277c5:	6a 08                	push   0x8
c00277c7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277cd:	e8 8e e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00277d2:	5d                   	pop    ebp
c00277d3:	89 c6                	mov    esi,eax
c00277d5:	58                   	pop    eax
c00277d6:	6a 09                	push   0x9
c00277d8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277de:	e8 7d e3 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c00277e3:	89 f9                	mov    ecx,edi
c00277e5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00277e9:	83 c4 10             	add    esp,0x10
c00277ec:	0f b6 e8             	movzx  ebp,al
c00277ef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00277f4:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00277f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00277fc:	74 27                	je     c0027825 <RTC::completeRTCRefresh()+0x177>
c00277fe:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027802:	89 f0                	mov    eax,esi
c0027804:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027808:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002780c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027810:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027814:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027818:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002781c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027820:	e9 2d ff ff ff       	jmp    c0027752 <RTC::completeRTCRefresh()+0xa4>
c0027825:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002782a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002782e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027832:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027836:	75 c6                	jne    c00277fe <RTC::completeRTCRefresh()+0x150>
c0027838:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002783d:	89 f1                	mov    ecx,esi
c002783f:	0f b6 fb             	movzx  edi,bl
c0027842:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027846:	0f b6 c9             	movzx  ecx,cl
c0027849:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c002784d:	89 f1                	mov    ecx,esi
c002784f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027853:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027857:	0f 94 c2             	sete   dl
c002785a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c002785e:	0f 94 c0             	sete   al
c0027861:	21 d0                	and    eax,edx
c0027863:	31 d2                	xor    edx,edx
c0027865:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027869:	0f 94 c2             	sete   dl
c002786c:	85 c2                	test   edx,eax
c002786e:	74 8e                	je     c00277fe <RTC::completeRTCRefresh()+0x150>
c0027870:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027874:	75 88                	jne    c00277fe <RTC::completeRTCRefresh()+0x150>
c0027876:	52                   	push   edx
c0027877:	52                   	push   edx
c0027878:	6a 0b                	push   0xb
c002787a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027880:	e8 db e2 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027885:	83 c4 10             	add    esp,0x10
c0027888:	a8 04                	test   al,0x4
c002788a:	75 7a                	jne    c0027906 <RTC::completeRTCRefresh()+0x258>
c002788c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027890:	c1 ef 04             	shr    edi,0x4
c0027893:	83 e6 0f             	and    esi,0xf
c0027896:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002789a:	c1 ed 04             	shr    ebp,0x4
c002789d:	6b ed 0a             	imul   ebp,ebp,0xa
c00278a0:	c1 ea 04             	shr    edx,0x4
c00278a3:	6b d2 0a             	imul   edx,edx,0xa
c00278a6:	83 e1 0f             	and    ecx,0xf
c00278a9:	01 d1                	add    ecx,edx
c00278ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00278af:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00278b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00278b7:	c1 ea 04             	shr    edx,0x4
c00278ba:	6b d2 0a             	imul   edx,edx,0xa
c00278bd:	83 e1 0f             	and    ecx,0xf
c00278c0:	01 d1                	add    ecx,edx
c00278c2:	89 fa                	mov    edx,edi
c00278c4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00278c8:	83 e2 07             	and    edx,0x7
c00278cb:	89 d9                	mov    ecx,ebx
c00278cd:	6b d2 0a             	imul   edx,edx,0xa
c00278d0:	83 e1 0f             	and    ecx,0xf
c00278d3:	83 e3 80             	and    ebx,0xffffff80
c00278d6:	01 d1                	add    ecx,edx
c00278d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00278dc:	09 cb                	or     ebx,ecx
c00278de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00278e2:	c1 ea 04             	shr    edx,0x4
c00278e5:	6b d2 0a             	imul   edx,edx,0xa
c00278e8:	83 e1 0f             	and    ecx,0xf
c00278eb:	01 d1                	add    ecx,edx
c00278ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00278f1:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00278f5:	c1 ea 04             	shr    edx,0x4
c00278f8:	6b d2 0a             	imul   edx,edx,0xa
c00278fb:	01 d6                	add    esi,edx
c00278fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027901:	83 e2 0f             	and    edx,0xf
c0027904:	01 d5                	add    ebp,edx
c0027906:	a8 02                	test   al,0x2
c0027908:	75 15                	jne    c002791f <RTC::completeRTCRefresh()+0x271>
c002790a:	f6 c3 80             	test   bl,0x80
c002790d:	74 10                	je     c002791f <RTC::completeRTCRefresh()+0x271>
c002790f:	83 e3 7f             	and    ebx,0x7f
c0027912:	b9 18 00 00 00       	mov    ecx,0x18
c0027917:	8d 43 0c             	lea    eax,[ebx+0xc]
c002791a:	99                   	cdq    
c002791b:	f7 f9                	idiv   ecx
c002791d:	88 d3                	mov    bl,dl
c002791f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027925:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c002792b:	77 06                	ja     c0027933 <RTC::completeRTCRefresh()+0x285>
c002792d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027933:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027938:	31 c9                	xor    ecx,ecx
c002793a:	31 d2                	xor    edx,edx
c002793c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027940:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027944:	89 cd                	mov    ebp,ecx
c0027946:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c002794a:	c1 e7 10             	shl    edi,0x10
c002794d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027953:	c1 e0 10             	shl    eax,0x10
c0027956:	09 c5                	or     ebp,eax
c0027958:	89 e9                	mov    ecx,ebp
c002795a:	0f b7 c2             	movzx  eax,dx
c002795d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027961:	09 f8                	or     eax,edi
c0027963:	89 c2                	mov    edx,eax
c0027965:	50                   	push   eax
c0027966:	50                   	push   eax
c0027967:	88 d9                	mov    cl,bl
c0027969:	51                   	push   ecx
c002796a:	52                   	push   edx
c002796b:	e8 e3 35 ff ff       	call   c001af53 <datetimeToSeconds(datetime_t)>
c0027970:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027974:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c002797a:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027980:	83 c4 4c             	add    esp,0x4c
c0027983:	5b                   	pop    ebx
c0027984:	5e                   	pop    esi
c0027985:	5f                   	pop    edi
c0027986:	5d                   	pop    ebp
c0027987:	c3                   	ret    

c0027988 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027988:	55                   	push   ebp
c0027989:	57                   	push   edi
c002798a:	56                   	push   esi
c002798b:	53                   	push   ebx
c002798c:	83 ec 30             	sub    esp,0x30
c002798f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027993:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027997:	6a 00                	push   0x0
c0027999:	6a 00                	push   0x0
c002799b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a1:	e8 d2 e2 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279a6:	83 c4 0c             	add    esp,0xc
c00279a9:	6a 00                	push   0x0
c00279ab:	6a 02                	push   0x2
c00279ad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b3:	e8 c0 e2 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279b8:	89 f8                	mov    eax,edi
c00279ba:	89 f9                	mov    ecx,edi
c00279bc:	0f b6 c4             	movzx  eax,ah
c00279bf:	31 d2                	xor    edx,edx
c00279c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00279c5:	c1 e9 10             	shr    ecx,0x10
c00279c8:	89 f0                	mov    eax,esi
c00279ca:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279ce:	89 f0                	mov    eax,esi
c00279d0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00279d4:	0f b6 c4             	movzx  eax,ah
c00279d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00279db:	89 f0                	mov    eax,esi
c00279dd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00279e1:	c1 e8 10             	shr    eax,0x10
c00279e4:	b9 64 00 00 00       	mov    ecx,0x64
c00279e9:	f7 f1                	div    ecx
c00279eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00279ef:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00279f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00279f7:	59                   	pop    ecx
c00279f8:	5b                   	pop    ebx
c00279f9:	89 fb                	mov    ebx,edi
c00279fb:	6a 0b                	push   0xb
c00279fd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a03:	e8 58 e1 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027a08:	83 c4 10             	add    esp,0x10
c0027a0b:	a8 04                	test   al,0x4
c0027a0d:	89 c5                	mov    ebp,eax
c0027a0f:	75 6e                	jne    c0027a7f <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027a11:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027a15:	31 d2                	xor    edx,edx
c0027a17:	0f b6 c1             	movzx  eax,cl
c0027a1a:	b9 0a 00 00 00       	mov    ecx,0xa
c0027a1f:	f7 f1                	div    ecx
c0027a21:	c1 e0 04             	shl    eax,0x4
c0027a24:	09 d0                	or     eax,edx
c0027a26:	31 d2                	xor    edx,edx
c0027a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027a2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027a31:	f7 f1                	div    ecx
c0027a33:	c1 e0 04             	shl    eax,0x4
c0027a36:	09 d0                	or     eax,edx
c0027a38:	31 d2                	xor    edx,edx
c0027a3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027a3e:	0f b6 c3             	movzx  eax,bl
c0027a41:	f7 f1                	div    ecx
c0027a43:	c1 e0 04             	shl    eax,0x4
c0027a46:	09 d0                	or     eax,edx
c0027a48:	31 d2                	xor    edx,edx
c0027a4a:	89 c3                	mov    ebx,eax
c0027a4c:	89 f0                	mov    eax,esi
c0027a4e:	0f b6 c0             	movzx  eax,al
c0027a51:	f7 f1                	div    ecx
c0027a53:	c1 e0 04             	shl    eax,0x4
c0027a56:	09 d0                	or     eax,edx
c0027a58:	31 d2                	xor    edx,edx
c0027a5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027a5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a63:	f7 f1                	div    ecx
c0027a65:	c1 e0 04             	shl    eax,0x4
c0027a68:	09 d0                	or     eax,edx
c0027a6a:	31 d2                	xor    edx,edx
c0027a6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027a70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027a74:	f7 f1                	div    ecx
c0027a76:	c1 e0 04             	shl    eax,0x4
c0027a79:	09 d0                	or     eax,edx
c0027a7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027a7f:	83 e5 02             	and    ebp,0x2
c0027a82:	75 1e                	jne    c0027aa2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a84:	0f b6 c3             	movzx  eax,bl
c0027a87:	83 f8 0b             	cmp    eax,0xb
c0027a8a:	76 10                	jbe    c0027a9c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027a8c:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027a8f:	84 d2                	test   dl,dl
c0027a91:	88 d3                	mov    bl,dl
c0027a93:	75 02                	jne    c0027a97 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027a95:	b3 0c                	mov    bl,0xc
c0027a97:	83 cb 80             	or     ebx,0xffffff80
c0027a9a:	eb 06                	jmp    c0027aa2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a9c:	85 c0                	test   eax,eax
c0027a9e:	75 02                	jne    c0027aa2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027aa0:	b3 0c                	mov    bl,0xc
c0027aa2:	50                   	push   eax
c0027aa3:	0f b6 db             	movzx  ebx,bl
c0027aa6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027aab:	52                   	push   edx
c0027aac:	6a 00                	push   0x0
c0027aae:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ab4:	e8 bf e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ab9:	83 c4 0c             	add    esp,0xc
c0027abc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ac1:	50                   	push   eax
c0027ac2:	6a 02                	push   0x2
c0027ac4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027aca:	e8 a9 e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027acf:	83 c4 0c             	add    esp,0xc
c0027ad2:	53                   	push   ebx
c0027ad3:	6a 04                	push   0x4
c0027ad5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027adb:	e8 98 e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ae0:	83 c4 0c             	add    esp,0xc
c0027ae3:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027ae8:	52                   	push   edx
c0027ae9:	6a 07                	push   0x7
c0027aeb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027af1:	e8 82 e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027af6:	83 c4 0c             	add    esp,0xc
c0027af9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027afe:	50                   	push   eax
c0027aff:	6a 08                	push   0x8
c0027b01:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b07:	e8 6c e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b0c:	83 c4 0c             	add    esp,0xc
c0027b0f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027b14:	55                   	push   ebp
c0027b15:	6a 09                	push   0x9
c0027b17:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b1d:	e8 56 e1 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b22:	5a                   	pop    edx
c0027b23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027b27:	e8 82 fb ff ff       	call   c00276ae <RTC::completeRTCRefresh()>
c0027b2c:	83 c4 3c             	add    esp,0x3c
c0027b2f:	b0 01                	mov    al,0x1
c0027b31:	5b                   	pop    ebx
c0027b32:	5e                   	pop    esi
c0027b33:	5f                   	pop    edi
c0027b34:	5d                   	pop    ebp
c0027b35:	c3                   	ret    

c0027b36 <rtcIRQHandler(regs*, void*)>:
c0027b36:	53                   	push   ebx
c0027b37:	83 ec 10             	sub    esp,0x10
c0027b3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027b3e:	6a 0c                	push   0xc
c0027b40:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b46:	e8 15 e0 fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027b4b:	83 c4 10             	add    esp,0x10
c0027b4e:	a8 80                	test   al,0x80
c0027b50:	74 24                	je     c0027b76 <rtcIRQHandler(regs*, void*)+0x40>
c0027b52:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027b59:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027b60:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027b67:	75 0d                	jne    c0027b76 <rtcIRQHandler(regs*, void*)+0x40>
c0027b69:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027b6d:	83 c4 08             	add    esp,0x8
c0027b70:	5b                   	pop    ebx
c0027b71:	e9 38 fb ff ff       	jmp    c00276ae <RTC::completeRTCRefresh()>
c0027b76:	83 c4 08             	add    esp,0x8
c0027b79:	5b                   	pop    ebx
c0027b7a:	c3                   	ret    
c0027b7b:	90                   	nop

c0027b7c <RTC::RTC()>:
c0027b7c:	83 ec 1c             	sub    esp,0x1c
c0027b7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b83:	83 ec 08             	sub    esp,0x8
c0027b86:	68 6b 33 03 c0       	push   0xc003336b
c0027b8b:	50                   	push   eax
c0027b8c:	e8 9d 32 ff ff       	call   c001ae2e <Clock::Clock(char const*)>
c0027b91:	83 c4 10             	add    esp,0x10
c0027b94:	ba 88 33 03 c0       	mov    edx,0xc0033388
c0027b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b9d:	89 10                	mov    DWORD PTR [eax],edx
c0027b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027ba3:	83 ec 0c             	sub    esp,0xc
c0027ba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027baa:	6a 01                	push   0x1
c0027bac:	68 36 7b 02 c0       	push   0xc0027b36
c0027bb1:	6a 08                	push   0x8
c0027bb3:	50                   	push   eax
c0027bb4:	e8 57 37 ff ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027bb9:	83 c4 20             	add    esp,0x20
c0027bbc:	89 c2                	mov    edx,eax
c0027bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bc2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027bc8:	fa                   	cli    
c0027bc9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027bce:	83 c0 01             	add    eax,0x1
c0027bd1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027bd6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027bdb:	83 ec 08             	sub    esp,0x8
c0027bde:	6a 0b                	push   0xb
c0027be0:	50                   	push   eax
c0027be1:	e8 7a df fe ff       	call   c0015b60 <Computer::readCMOS(unsigned char)>
c0027be6:	83 c4 10             	add    esp,0x10
c0027be9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027bed:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027bf2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027bf6:	83 ca 10             	or     edx,0x10
c0027bf9:	0f b6 d2             	movzx  edx,dl
c0027bfc:	83 ec 04             	sub    esp,0x4
c0027bff:	52                   	push   edx
c0027c00:	6a 0b                	push   0xb
c0027c02:	50                   	push   eax
c0027c03:	e8 70 e0 fe ff       	call   c0015c78 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c08:	83 c4 10             	add    esp,0x10
c0027c0b:	83 ec 0c             	sub    esp,0xc
c0027c0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027c12:	e8 97 fa ff ff       	call   c00276ae <RTC::completeRTCRefresh()>
c0027c17:	83 c4 10             	add    esp,0x10
c0027c1a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c1f:	83 e8 01             	sub    eax,0x1
c0027c22:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027c27:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c2c:	85 c0                	test   eax,eax
c0027c2e:	75 01                	jne    c0027c31 <RTC::RTC()+0xb5>
c0027c30:	fb                   	sti    
c0027c31:	90                   	nop
c0027c32:	83 c4 1c             	add    esp,0x1c
c0027c35:	c3                   	ret    
c0027c36:	66 90                	xchg   ax,ax

c0027c38 <HalConsoleScroll(int, int)>:
c0027c38:	83 ec 10             	sub    esp,0x10
c0027c3b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027c43:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027c4b:	90                   	nop
c0027c4c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c51:	0f 8f e1 00 00 00    	jg     c0027d38 <HalConsoleScroll(int, int)+0x100>
c0027c57:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027c5f:	90                   	nop
c0027c60:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027c68:	0f 8f be 00 00 00    	jg     c0027d2c <HalConsoleScroll(int, int)+0xf4>
c0027c6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c72:	89 d0                	mov    eax,edx
c0027c74:	c1 e0 02             	shl    eax,0x2
c0027c77:	01 d0                	add    eax,edx
c0027c79:	c1 e0 05             	shl    eax,0x5
c0027c7c:	89 c2                	mov    edx,eax
c0027c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c82:	01 d0                	add    eax,edx
c0027c84:	89 c2                	mov    edx,eax
c0027c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c8a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027c8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c91:	89 d0                	mov    eax,edx
c0027c93:	c1 e0 02             	shl    eax,0x2
c0027c96:	01 d0                	add    eax,edx
c0027c98:	c1 e0 05             	shl    eax,0x5
c0027c9b:	89 c2                	mov    edx,eax
c0027c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ca1:	01 d0                	add    eax,edx
c0027ca3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027ca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cad:	01 d0                	add    eax,edx
c0027caf:	8a 11                	mov    dl,BYTE PTR [ecx]
c0027cb1:	88 10                	mov    BYTE PTR [eax],dl
c0027cb3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027cb8:	75 66                	jne    c0027d20 <HalConsoleScroll(int, int)+0xe8>
c0027cba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cbe:	83 e0 01             	and    eax,0x1
c0027cc1:	74 39                	je     c0027cfc <HalConsoleScroll(int, int)+0xc4>
c0027cc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027cc7:	83 e0 0f             	and    eax,0xf
c0027cca:	88 c2                	mov    dl,al
c0027ccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027cd0:	c1 e0 04             	shl    eax,0x4
c0027cd3:	09 d0                	or     eax,edx
c0027cd5:	88 c1                	mov    cl,al
c0027cd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027cdb:	89 d0                	mov    eax,edx
c0027cdd:	c1 e0 02             	shl    eax,0x2
c0027ce0:	01 d0                	add    eax,edx
c0027ce2:	c1 e0 05             	shl    eax,0x5
c0027ce5:	89 c2                	mov    edx,eax
c0027ce7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ceb:	01 d0                	add    eax,edx
c0027ced:	89 c2                	mov    edx,eax
c0027cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cf3:	01 d0                	add    eax,edx
c0027cf5:	88 ca                	mov    dl,cl
c0027cf7:	88 10                	mov    BYTE PTR [eax],dl
c0027cf9:	eb 25                	jmp    c0027d20 <HalConsoleScroll(int, int)+0xe8>
c0027cfb:	90                   	nop
c0027cfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d00:	89 d0                	mov    eax,edx
c0027d02:	c1 e0 02             	shl    eax,0x2
c0027d05:	01 d0                	add    eax,edx
c0027d07:	c1 e0 05             	shl    eax,0x5
c0027d0a:	89 c2                	mov    edx,eax
c0027d0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d10:	01 d0                	add    eax,edx
c0027d12:	89 c2                	mov    edx,eax
c0027d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d18:	01 d0                	add    eax,edx
c0027d1a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d20:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027d25:	e9 36 ff ff ff       	jmp    c0027c60 <HalConsoleScroll(int, int)+0x28>
c0027d2a:	66 90                	xchg   ax,ax
c0027d2c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027d31:	e9 16 ff ff ff       	jmp    c0027c4c <HalConsoleScroll(int, int)+0x14>
c0027d36:	66 90                	xchg   ax,ax
c0027d38:	90                   	nop
c0027d39:	83 c4 10             	add    esp,0x10
c0027d3c:	c3                   	ret    
c0027d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0027d40 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027d40:	83 ec 14             	sub    esp,0x14
c0027d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d47:	88 04 24             	mov    BYTE PTR [esp],al
c0027d4a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027d4d:	0f b6 c0             	movzx  eax,al
c0027d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d54:	89 d1                	mov    ecx,edx
c0027d56:	83 e1 0f             	and    ecx,0xf
c0027d59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027d5d:	c1 e2 04             	shl    edx,0x4
c0027d60:	0f b6 d2             	movzx  edx,dl
c0027d63:	09 ca                	or     edx,ecx
c0027d65:	c1 e2 08             	shl    edx,0x8
c0027d68:	09 d0                	or     eax,edx
c0027d6a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027d6f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027d77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027d7b:	89 d0                	mov    eax,edx
c0027d7d:	c1 e0 02             	shl    eax,0x2
c0027d80:	01 d0                	add    eax,edx
c0027d82:	c1 e0 04             	shl    eax,0x4
c0027d85:	89 c2                	mov    edx,eax
c0027d87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d8b:	01 d0                	add    eax,edx
c0027d8d:	d1 e0                	shl    eax,1
c0027d8f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027d97:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0027d9c:	66 89 10             	mov    WORD PTR [eax],dx
c0027d9f:	90                   	nop
c0027da0:	83 c4 14             	add    esp,0x14
c0027da3:	c3                   	ret    

c0027da4 <HalConsoleCursorUpdate(int, int)>:
c0027da4:	83 ec 20             	sub    esp,0x20
c0027da7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027dab:	89 c2                	mov    edx,eax
c0027dad:	c1 e2 02             	shl    edx,0x2
c0027db0:	01 d0                	add    eax,edx
c0027db2:	c1 e0 04             	shl    eax,0x4
c0027db5:	89 c2                	mov    edx,eax
c0027db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027dbb:	01 d0                	add    eax,edx
c0027dbd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027dc2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027dc9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027dce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027dd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027dd6:	ee                   	out    dx,al
c0027dd7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027ddc:	0f b6 c0             	movzx  eax,al
c0027ddf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027de6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027dea:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027dee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027df2:	ee                   	out    dx,al
c0027df3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027dfa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027dff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027e03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027e07:	ee                   	out    dx,al
c0027e08:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027e0d:	c1 e8 08             	shr    eax,0x8
c0027e10:	0f b6 c0             	movzx  eax,al
c0027e13:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027e1a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027e1e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027e22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027e26:	ee                   	out    dx,al
c0027e27:	90                   	nop
c0027e28:	83 c4 20             	add    esp,0x20
c0027e2b:	c3                   	ret    

c0027e2c <FAT::getName()>:
c0027e2c:	b8 bc 33 03 c0       	mov    eax,0xc00333bc
c0027e31:	c3                   	ret    
c0027e32:	66 90                	xchg   ax,ax

c0027e34 <FAT::tell(void*, unsigned long long*)>:
c0027e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e39:	75 09                	jne    c0027e44 <FAT::tell(void*, unsigned long long*)+0x10>
c0027e3b:	b8 04 00 00 00       	mov    eax,0x4
c0027e40:	c3                   	ret    
c0027e41:	8d 76 00             	lea    esi,[esi+0x0]
c0027e44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e49:	75 09                	jne    c0027e54 <FAT::tell(void*, unsigned long long*)+0x20>
c0027e4b:	b8 04 00 00 00       	mov    eax,0x4
c0027e50:	c3                   	ret    
c0027e51:	8d 76 00             	lea    esi,[esi+0x0]
c0027e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027e5b:	ba 00 00 00 00       	mov    edx,0x0
c0027e60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e64:	89 01                	mov    DWORD PTR [ecx],eax
c0027e66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e69:	b8 00 00 00 00       	mov    eax,0x0
c0027e6e:	c3                   	ret    
c0027e6f:	90                   	nop

c0027e70 <FAT::stat(void*, unsigned long long*)>:
c0027e70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e75:	75 09                	jne    c0027e80 <FAT::stat(void*, unsigned long long*)+0x10>
c0027e77:	b8 04 00 00 00       	mov    eax,0x4
c0027e7c:	c3                   	ret    
c0027e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0027e80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e85:	75 09                	jne    c0027e90 <FAT::stat(void*, unsigned long long*)+0x20>
c0027e87:	b8 04 00 00 00       	mov    eax,0x4
c0027e8c:	c3                   	ret    
c0027e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0027e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027e97:	ba 00 00 00 00       	mov    edx,0x0
c0027e9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027ea0:	89 01                	mov    DWORD PTR [ecx],eax
c0027ea2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027ea5:	b8 00 00 00 00       	mov    eax,0x0
c0027eaa:	c3                   	ret    
c0027eab:	90                   	nop

c0027eac <FAT::~FAT()>:
c0027eac:	83 ec 0c             	sub    esp,0xc
c0027eaf:	ba 08 34 03 c0       	mov    edx,0xc0033408
c0027eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb8:	89 10                	mov    DWORD PTR [eax],edx
c0027eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ebe:	83 ec 0c             	sub    esp,0xc
c0027ec1:	50                   	push   eax
c0027ec2:	e8 8d 22 ff ff       	call   c001a154 <Filesystem::~Filesystem()>
c0027ec7:	83 c4 10             	add    esp,0x10
c0027eca:	90                   	nop
c0027ecb:	83 c4 0c             	add    esp,0xc
c0027ece:	c3                   	ret    
c0027ecf:	90                   	nop

c0027ed0 <FAT::~FAT()>:
c0027ed0:	83 ec 0c             	sub    esp,0xc
c0027ed3:	83 ec 0c             	sub    esp,0xc
c0027ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eda:	e8 cd ff ff ff       	call   c0027eac <FAT::~FAT()>
c0027edf:	83 c4 10             	add    esp,0x10
c0027ee2:	83 ec 08             	sub    esp,0x8
c0027ee5:	6a 08                	push   0x8
c0027ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eeb:	e8 e0 12 ff ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c0027ef0:	83 c4 10             	add    esp,0x10
c0027ef3:	83 c4 0c             	add    esp,0xc
c0027ef6:	c3                   	ret    
c0027ef7:	90                   	nop

c0027ef8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027ef8:	83 ec 1c             	sub    esp,0x1c
c0027efb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027f02:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027f07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f0b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f12:	83 f8 ff             	cmp    eax,0xffffffff
c0027f15:	75 35                	jne    c0027f4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027f17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f1b:	88 c2                	mov    dl,al
c0027f1d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f22:	01 d0                	add    eax,edx
c0027f24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f28:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f32:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f39:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f42:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f49:	eb 19                	jmp    c0027f64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027f4b:	90                   	nop
c0027f4c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f50:	88 c2                	mov    dl,al
c0027f52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f56:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f5d:	01 d0                	add    eax,edx
c0027f5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f63:	90                   	nop
c0027f64:	83 ec 04             	sub    esp,0x4
c0027f67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f6f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027f73:	50                   	push   eax
c0027f74:	e8 32 d2 fd ff       	call   c00051ab <f_getlabel>
c0027f79:	83 c4 10             	add    esp,0x10
c0027f7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027f80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027f85:	75 09                	jne    c0027f90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027f87:	b8 00 00 00 00       	mov    eax,0x0
c0027f8c:	eb 0a                	jmp    c0027f98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027f8e:	66 90                	xchg   ax,ax
c0027f90:	b8 01 00 00 00       	mov    eax,0x1
c0027f95:	8d 76 00             	lea    esi,[esi+0x0]
c0027f98:	83 c4 1c             	add    esp,0x1c
c0027f9b:	c3                   	ret    

c0027f9c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027f9c:	53                   	push   ebx
c0027f9d:	83 ec 58             	sub    esp,0x58
c0027fa0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027fa8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027fac:	b9 00 00 00 00       	mov    ecx,0x0
c0027fb1:	b8 3c 00 00 00       	mov    eax,0x3c
c0027fb6:	83 e0 f8             	and    eax,0xfffffff8
c0027fb9:	89 c3                	mov    ebx,eax
c0027fbb:	b8 00 00 00 00       	mov    eax,0x0
c0027fc0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0027fc4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0027fc8:	83 c0 08             	add    eax,0x8
c0027fcb:	39 d8                	cmp    eax,ebx
c0027fcd:	72 f1                	jb     c0027fc0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0027fcf:	01 c2                	add    edx,eax
c0027fd1:	89 0a                	mov    DWORD PTR [edx],ecx
c0027fd3:	83 c2 04             	add    edx,0x4
c0027fd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fda:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027fe1:	83 f8 ff             	cmp    eax,0xffffffff
c0027fe4:	75 36                	jne    c002801c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0027fe6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027fea:	88 c2                	mov    dl,al
c0027fec:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ff1:	01 d0                	add    eax,edx
c0027ff3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027ff7:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ffd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028001:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028008:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002800d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0028011:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028018:	eb 1a                	jmp    c0028034 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c002801a:	66 90                	xchg   ax,ax
c002801c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028020:	88 c2                	mov    dl,al
c0028022:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028026:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002802d:	01 d0                	add    eax,edx
c002802f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028033:	90                   	nop
c0028034:	83 ec 08             	sub    esp,0x8
c0028037:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002803b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002803f:	50                   	push   eax
c0028040:	e8 2b 88 fd ff       	call   c0000870 <strcat>
c0028045:	83 c4 10             	add    esp,0x10
c0028048:	83 ec 0c             	sub    esp,0xc
c002804b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002804f:	50                   	push   eax
c0028050:	e8 aa d2 fd ff       	call   c00052ff <f_setlabel>
c0028055:	83 c4 10             	add    esp,0x10
c0028058:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002805c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028061:	75 09                	jne    c002806c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0028063:	b8 00 00 00 00       	mov    eax,0x0
c0028068:	eb 0a                	jmp    c0028074 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c002806a:	66 90                	xchg   ax,ax
c002806c:	b8 01 00 00 00       	mov    eax,0x1
c0028071:	8d 76 00             	lea    esi,[esi+0x0]
c0028074:	83 c4 58             	add    esp,0x58
c0028077:	5b                   	pop    ebx
c0028078:	c3                   	ret    
c0028079:	90                   	nop
c002807a:	66 90                	xchg   ax,ax

c002807c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002807c:	83 ec 2c             	sub    esp,0x2c
c002807f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028087:	83 ec 08             	sub    esp,0x8
c002808a:	68 e0 33 03 c0       	push   0xc00333e0
c002808f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028093:	e8 e8 86 fd ff       	call   c0000780 <strcmp>
c0028098:	83 c4 10             	add    esp,0x10
c002809b:	85 c0                	test   eax,eax
c002809d:	0f 94 c0             	sete   al
c00280a0:	0f b6 c0             	movzx  eax,al
c00280a3:	85 c0                	test   eax,eax
c00280a5:	74 0d                	je     c00280b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00280a7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280af:	e9 c0 00 00 00       	jmp    c0028174 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280b4:	83 ec 08             	sub    esp,0x8
c00280b7:	68 d2 33 03 c0       	push   0xc00333d2
c00280bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280c0:	e8 bb 86 fd ff       	call   c0000780 <strcmp>
c00280c5:	83 c4 10             	add    esp,0x10
c00280c8:	85 c0                	test   eax,eax
c00280ca:	0f 94 c0             	sete   al
c00280cd:	0f b6 c0             	movzx  eax,al
c00280d0:	85 c0                	test   eax,eax
c00280d2:	74 10                	je     c00280e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00280d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280dc:	e9 93 00 00 00       	jmp    c0028174 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280e1:	8d 76 00             	lea    esi,[esi+0x0]
c00280e4:	83 ec 08             	sub    esp,0x8
c00280e7:	68 d8 33 03 c0       	push   0xc00333d8
c00280ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280f0:	e8 8b 86 fd ff       	call   c0000780 <strcmp>
c00280f5:	83 c4 10             	add    esp,0x10
c00280f8:	85 c0                	test   eax,eax
c00280fa:	0f 94 c0             	sete   al
c00280fd:	0f b6 c0             	movzx  eax,al
c0028100:	85 c0                	test   eax,eax
c0028102:	74 0c                	je     c0028110 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028104:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002810c:	eb 66                	jmp    c0028174 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002810e:	66 90                	xchg   ax,ax
c0028110:	83 ec 08             	sub    esp,0x8
c0028113:	68 8c f5 02 c0       	push   0xc002f58c
c0028118:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002811c:	e8 5f 86 fd ff       	call   c0000780 <strcmp>
c0028121:	83 c4 10             	add    esp,0x10
c0028124:	85 c0                	test   eax,eax
c0028126:	0f 94 c0             	sete   al
c0028129:	0f b6 c0             	movzx  eax,al
c002812c:	85 c0                	test   eax,eax
c002812e:	74 0c                	je     c002813c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028130:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028138:	eb 3a                	jmp    c0028174 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002813a:	66 90                	xchg   ax,ax
c002813c:	83 ec 08             	sub    esp,0x8
c002813f:	68 de 33 03 c0       	push   0xc00333de
c0028144:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028148:	e8 33 86 fd ff       	call   c0000780 <strcmp>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	85 c0                	test   eax,eax
c0028152:	0f 94 c0             	sete   al
c0028155:	0f b6 c0             	movzx  eax,al
c0028158:	85 c0                	test   eax,eax
c002815a:	74 0c                	je     c0028168 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c002815c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028164:	eb 0e                	jmp    c0028174 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028166:	66 90                	xchg   ax,ax
c0028168:	b8 08 00 00 00       	mov    eax,0x8
c002816d:	e9 ea 00 00 00       	jmp    c002825c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028172:	66 90                	xchg   ax,ax
c0028174:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002817b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028180:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028184:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002818b:	83 f8 ff             	cmp    eax,0xffffffff
c002818e:	75 34                	jne    c00281c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028190:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028194:	88 c2                	mov    dl,al
c0028196:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002819b:	01 d0                	add    eax,edx
c002819d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00281a1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281ab:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281b2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00281bb:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281c2:	eb 18                	jmp    c00281dc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00281c4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00281c8:	88 c2                	mov    dl,al
c00281ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281ce:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281d5:	01 d0                	add    eax,edx
c00281d7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00281db:	90                   	nop
c00281dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00281e0:	88 04 24             	mov    BYTE PTR [esp],al
c00281e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00281e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00281eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00281f3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00281f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028200:	83 ec 0c             	sub    esp,0xc
c0028203:	68 00 20 00 00       	push   0x2000
c0028208:	e8 8a e2 fe ff       	call   c0016497 <malloc>
c002820d:	83 c4 10             	add    esp,0x10
c0028210:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028214:	68 00 20 00 00       	push   0x2000
c0028219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002821d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028221:	50                   	push   eax
c0028222:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0028226:	50                   	push   eax
c0028227:	e8 d0 d3 fd ff       	call   c00055fc <f_mkfs>
c002822c:	83 c4 10             	add    esp,0x10
c002822f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028233:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028238:	75 0a                	jne    c0028244 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c002823a:	b8 00 00 00 00       	mov    eax,0x0
c002823f:	eb 1b                	jmp    c002825c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028241:	8d 76 00             	lea    esi,[esi+0x0]
c0028244:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028249:	75 09                	jne    c0028254 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002824b:	b8 09 00 00 00       	mov    eax,0x9
c0028250:	eb 0a                	jmp    c002825c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028252:	66 90                	xchg   ax,ax
c0028254:	b8 01 00 00 00       	mov    eax,0x1
c0028259:	8d 76 00             	lea    esi,[esi+0x0]
c002825c:	83 c4 2c             	add    esp,0x2c
c002825f:	c3                   	ret    

c0028260 <FAT::tryMount(LogicalDisk*, int)>:
c0028260:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028266:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002826b:	83 f8 14             	cmp    eax,0x14
c002826e:	75 18                	jne    c0028288 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028270:	83 ec 0c             	sub    esp,0xc
c0028273:	68 e4 33 03 c0       	push   0xc00333e4
c0028278:	e8 d9 7f ff ff       	call   c0020256 <KePanic(char const*)>
c002827d:	83 c4 10             	add    esp,0x10
c0028280:	b0 00                	mov    al,0x0
c0028282:	e9 ed 01 00 00       	jmp    c0028474 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028287:	90                   	nop
c0028288:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002828f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028295:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002829b:	3d 00 02 00 00       	cmp    eax,0x200
c00282a0:	74 0a                	je     c00282ac <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00282a2:	b0 00                	mov    al,0x0
c00282a4:	e9 cb 01 00 00       	jmp    c0028474 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282a9:	8d 76 00             	lea    esi,[esi+0x0]
c00282ac:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00282b4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00282bb:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00282c2:	83 f8 ff             	cmp    eax,0xffffffff
c00282c5:	74 09                	je     c00282d0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00282c7:	b0 01                	mov    al,0x1
c00282c9:	e9 a6 01 00 00       	jmp    c0028474 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282ce:	66 90                	xchg   ax,ax
c00282d0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00282da:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00282e2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00282e9:	88 c2                	mov    dl,al
c00282eb:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282f0:	01 d0                	add    eax,edx
c00282f2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00282f9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00282ff:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028306:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002830d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028312:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028319:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	68 34 02 00 00       	push   0x234
c0028328:	e8 6a e1 fe ff       	call   c0016497 <malloc>
c002832d:	83 c4 10             	add    esp,0x10
c0028330:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028337:	83 ec 04             	sub    esp,0x4
c002833a:	6a 00                	push   0x0
c002833c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028343:	50                   	push   eax
c0028344:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002834b:	e8 a6 ba fd ff       	call   c0003df6 <f_mount>
c0028350:	83 c4 10             	add    esp,0x10
c0028353:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002835a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028362:	74 1c                	je     c0028380 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028364:	83 ec 0c             	sub    esp,0xc
c0028367:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002836e:	e8 44 e1 fe ff       	call   c00164b7 <rfree>
c0028373:	83 c4 10             	add    esp,0x10
c0028376:	b0 00                	mov    al,0x0
c0028378:	e9 f7 00 00 00       	jmp    c0028474 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002837d:	8d 76 00             	lea    esi,[esi+0x0]
c0028380:	83 ec 04             	sub    esp,0x4
c0028383:	68 00 01 00 00       	push   0x100
c0028388:	6a 00                	push   0x0
c002838a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028391:	50                   	push   eax
c0028392:	e8 59 81 fd ff       	call   c00004f0 <memset>
c0028397:	83 c4 10             	add    esp,0x10
c002839a:	83 ec 08             	sub    esp,0x8
c002839d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00283a4:	50                   	push   eax
c00283a5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00283ac:	50                   	push   eax
c00283ad:	e8 be 84 fd ff       	call   c0000870 <strcat>
c00283b2:	83 c4 10             	add    esp,0x10
c00283b5:	83 ec 08             	sub    esp,0x8
c00283b8:	68 f2 33 03 c0       	push   0xc00333f2
c00283bd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00283c4:	50                   	push   eax
c00283c5:	e8 a6 84 fd ff       	call   c0000870 <strcat>
c00283ca:	83 c4 10             	add    esp,0x10
c00283cd:	83 ec 04             	sub    esp,0x4
c00283d0:	6a 01                	push   0x1
c00283d2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00283d9:	50                   	push   eax
c00283da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283de:	50                   	push   eax
c00283df:	e8 74 ba fd ff       	call   c0003e58 <f_open>
c00283e4:	83 c4 10             	add    esp,0x10
c00283e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00283ee:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00283f5:	85 c0                	test   eax,eax
c00283f7:	74 0b                	je     c0028404 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00283f9:	78 31                	js     c002842c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283fb:	83 e8 04             	sub    eax,0x4
c00283fe:	83 f8 01             	cmp    eax,0x1
c0028401:	77 29                	ja     c002842c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028403:	90                   	nop
c0028404:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c002840c:	83 ec 0c             	sub    esp,0xc
c002840f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028413:	50                   	push   eax
c0028414:	e8 ef c1 fd ff       	call   c0004608 <f_close>
c0028419:	83 c4 10             	add    esp,0x10
c002841c:	90                   	nop
c002841d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0028425:	85 c0                	test   eax,eax
c0028427:	74 43                	je     c002846c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028429:	eb 31                	jmp    c002845c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c002842b:	90                   	nop
c002842c:	83 ec 0c             	sub    esp,0xc
c002842f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028436:	e8 7c e0 fe ff       	call   c00164b7 <rfree>
c002843b:	83 c4 10             	add    esp,0x10
c002843e:	83 ec 04             	sub    esp,0x4
c0028441:	6a 00                	push   0x0
c0028443:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002844a:	50                   	push   eax
c002844b:	6a 00                	push   0x0
c002844d:	e8 a4 b9 fd ff       	call   c0003df6 <f_mount>
c0028452:	83 c4 10             	add    esp,0x10
c0028455:	b0 00                	mov    al,0x0
c0028457:	eb 1b                	jmp    c0028474 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028459:	8d 76 00             	lea    esi,[esi+0x0]
c002845c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028461:	83 c0 01             	add    eax,0x1
c0028464:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028469:	8d 76 00             	lea    esi,[esi+0x0]
c002846c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028473:	90                   	nop
c0028474:	81 c4 4c 03 00 00    	add    esp,0x34c
c002847a:	c3                   	ret    
c002847b:	90                   	nop

c002847c <FAT::allocateSwapfile(char const*, int)>:
c002847c:	55                   	push   ebp
c002847d:	57                   	push   edi
c002847e:	56                   	push   esi
c002847f:	53                   	push   ebx
c0028480:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028486:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028491:	83 ec 0c             	sub    esp,0xc
c0028494:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002849b:	e8 f7 df fe ff       	call   c0016497 <malloc>
c00284a0:	83 c4 10             	add    esp,0x10
c00284a3:	89 c7                	mov    edi,eax
c00284a5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00284aa:	83 ec 04             	sub    esp,0x4
c00284ad:	50                   	push   eax
c00284ae:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00284b5:	57                   	push   edi
c00284b6:	e8 2b 20 ff ff       	call   c001a4e6 <File::File(char const*, Process*)>
c00284bb:	83 c4 10             	add    esp,0x10
c00284be:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00284c5:	83 ec 04             	sub    esp,0x4
c00284c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00284cc:	50                   	push   eax
c00284cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00284d1:	50                   	push   eax
c00284d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284d9:	e8 28 23 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c00284de:	83 c4 10             	add    esp,0x10
c00284e1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00284e8:	c1 e0 14             	shl    eax,0x14
c00284eb:	89 c7                	mov    edi,eax
c00284ed:	89 c5                	mov    ebp,eax
c00284ef:	c1 fd 1f             	sar    ebp,0x1f
c00284f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fa:	89 f9                	mov    ecx,edi
c00284fc:	31 c1                	xor    ecx,eax
c00284fe:	89 cb                	mov    ebx,ecx
c0028500:	89 e9                	mov    ecx,ebp
c0028502:	31 d1                	xor    ecx,edx
c0028504:	89 ce                	mov    esi,ecx
c0028506:	89 f0                	mov    eax,esi
c0028508:	09 d8                	or     eax,ebx
c002850a:	0f 84 9c 00 00 00    	je     c00285ac <FAT::allocateSwapfile(char const*, int)+0x130>
c0028510:	83 ec 0c             	sub    esp,0xc
c0028513:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002851a:	e8 b3 21 ff ff       	call   c001a6d2 <File::unlink()>
c002851f:	83 c4 10             	add    esp,0x10
c0028522:	83 ec 08             	sub    esp,0x8
c0028525:	6a 12                	push   0x12
c0028527:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002852e:	e8 d1 1f ff ff       	call   c001a504 <File::open(FileOpenMode)>
c0028533:	83 c4 10             	add    esp,0x10
c0028536:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002853d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028543:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002854a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028551:	c1 e0 14             	shl    eax,0x14
c0028554:	83 ec 04             	sub    esp,0x4
c0028557:	6a 01                	push   0x1
c0028559:	50                   	push   eax
c002855a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028561:	e8 29 cf fd ff       	call   c000548f <f_expand>
c0028566:	83 c4 10             	add    esp,0x10
c0028569:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028570:	8b 00                	mov    eax,DWORD PTR [eax]
c0028572:	83 c0 10             	add    eax,0x10
c0028575:	8b 00                	mov    eax,DWORD PTR [eax]
c0028577:	83 ec 0c             	sub    esp,0xc
c002857a:	8d 54 24 24          	lea    edx,[esp+0x24]
c002857e:	52                   	push   edx
c002857f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028583:	52                   	push   edx
c0028584:	6a 00                	push   0x0
c0028586:	68 00 04 00 00       	push   0x400
c002858b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028592:	ff d0                	call   eax
c0028594:	83 c4 20             	add    esp,0x20
c0028597:	83 ec 0c             	sub    esp,0xc
c002859a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285a1:	e8 bc 1f ff ff       	call   c001a562 <File::close()>
c00285a6:	83 c4 10             	add    esp,0x10
c00285a9:	8d 76 00             	lea    esi,[esi+0x0]
c00285ac:	83 ec 08             	sub    esp,0x8
c00285af:	6a 01                	push   0x1
c00285b1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285b8:	e8 47 1f ff ff       	call   c001a504 <File::open(FileOpenMode)>
c00285bd:	83 c4 10             	add    esp,0x10
c00285c0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00285c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00285c9:	83 c0 0c             	add    eax,0xc
c00285cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00285ce:	83 ec 0c             	sub    esp,0xc
c00285d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00285d5:	52                   	push   edx
c00285d6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00285da:	52                   	push   edx
c00285db:	6a 00                	push   0x0
c00285dd:	6a 04                	push   0x4
c00285df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00285e6:	ff d0                	call   eax
c00285e8:	83 c4 20             	add    esp,0x20
c00285eb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00285f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00285f8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00285ff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028606:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028609:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002861a:	e8 43 1f ff ff       	call   c001a562 <File::close()>
c002861f:	83 c4 10             	add    esp,0x10
c0028622:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028629:	ba 00 00 00 00       	mov    edx,0x0
c002862e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028634:	5b                   	pop    ebx
c0028635:	5e                   	pop    esi
c0028636:	5f                   	pop    edi
c0028637:	5d                   	pop    ebp
c0028638:	c3                   	ret    
c0028639:	90                   	nop
c002863a:	66 90                	xchg   ax,ax

c002863c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002863c:	57                   	push   edi
c002863d:	56                   	push   esi
c002863e:	53                   	push   ebx
c002863f:	81 ec 50 02 00 00    	sub    esp,0x250
c0028645:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002864d:	74 0d                	je     c002865c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002864f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028657:	75 0f                	jne    c0028668 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028659:	8d 76 00             	lea    esi,[esi+0x0]
c002865c:	b8 04 00 00 00       	mov    eax,0x4
c0028661:	e9 3a 01 00 00       	jmp    c00287a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028666:	66 90                	xchg   ax,ax
c0028668:	83 ec 08             	sub    esp,0x8
c002866b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028672:	50                   	push   eax
c0028673:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002867a:	e8 55 c2 fd ff       	call   c00048d4 <f_readdir>
c002867f:	83 c4 10             	add    esp,0x10
c0028682:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028689:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028690:	83 ec 0c             	sub    esp,0xc
c0028693:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002869a:	83 c0 16             	add    eax,0x16
c002869d:	50                   	push   eax
c002869e:	e8 dd 7e fd ff       	call   c0000580 <strlen>
c00286a3:	83 c4 10             	add    esp,0x10
c00286a6:	ba 00 00 00 00       	mov    edx,0x0
c00286ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00286b3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00286ba:	0f b6 c0             	movzx  eax,al
c00286bd:	83 e0 10             	and    eax,0x10
c00286c0:	74 0a                	je     c00286cc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00286c2:	b8 02 00 00 00       	mov    eax,0x2
c00286c7:	eb 0b                	jmp    c00286d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00286c9:	8d 76 00             	lea    esi,[esi+0x0]
c00286cc:	b8 01 00 00 00       	mov    eax,0x1
c00286d1:	8d 76 00             	lea    esi,[esi+0x0]
c00286d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00286d8:	83 ec 08             	sub    esp,0x8
c00286db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00286e2:	83 c0 16             	add    eax,0x16
c00286e5:	50                   	push   eax
c00286e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00286ea:	83 c0 10             	add    eax,0x10
c00286ed:	50                   	push   eax
c00286ee:	e8 5d 7f fd ff       	call   c0000650 <strcpy>
c00286f3:	83 c4 10             	add    esp,0x10
c00286f6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00286fd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028704:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028708:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002870f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028716:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002871d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028724:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002872b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028732:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028739:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028740:	89 c6                	mov    esi,eax
c0028742:	89 d7                	mov    edi,edx
c0028744:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028746:	89 c8                	mov    eax,ecx
c0028748:	89 fa                	mov    edx,edi
c002874a:	89 f3                	mov    ebx,esi
c002874c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028753:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002875a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028761:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028768:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002876e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028775:	0f be c0             	movsx  eax,al
c0028778:	85 c0                	test   eax,eax
c002877a:	75 08                	jne    c0028784 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c002877c:	b8 07 00 00 00       	mov    eax,0x7
c0028781:	eb 1d                	jmp    c00287a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028783:	90                   	nop
c0028784:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002878b:	85 c0                	test   eax,eax
c002878d:	75 09                	jne    c0028798 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002878f:	b8 00 00 00 00       	mov    eax,0x0
c0028794:	eb 0a                	jmp    c00287a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028796:	66 90                	xchg   ax,ax
c0028798:	b8 01 00 00 00       	mov    eax,0x1
c002879d:	8d 76 00             	lea    esi,[esi+0x0]
c00287a0:	81 c4 50 02 00 00    	add    esp,0x250
c00287a6:	5b                   	pop    ebx
c00287a7:	5e                   	pop    esi
c00287a8:	5f                   	pop    edi
c00287a9:	c3                   	ret    
c00287aa:	66 90                	xchg   ax,ax

c00287ac <FAT::read(void*, unsigned long, void*, int*)>:
c00287ac:	83 ec 1c             	sub    esp,0x1c
c00287af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287b4:	74 0a                	je     c00287c0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00287b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00287bb:	75 0b                	jne    c00287c8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00287bd:	8d 76 00             	lea    esi,[esi+0x0]
c00287c0:	b8 04 00 00 00       	mov    eax,0x4
c00287c5:	eb 41                	jmp    c0028808 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00287c7:	90                   	nop
c00287c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287cc:	50                   	push   eax
c00287cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00287d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00287d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287d9:	e8 3d b9 fd ff       	call   c000411b <f_read>
c00287de:	83 c4 10             	add    esp,0x10
c00287e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287e9:	89 c2                	mov    edx,eax
c00287eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00287ef:	89 10                	mov    DWORD PTR [eax],edx
c00287f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287f5:	85 c0                	test   eax,eax
c00287f7:	75 07                	jne    c0028800 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00287f9:	b8 00 00 00 00       	mov    eax,0x0
c00287fe:	eb 08                	jmp    c0028808 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028800:	b8 01 00 00 00       	mov    eax,0x1
c0028805:	8d 76 00             	lea    esi,[esi+0x0]
c0028808:	83 c4 1c             	add    esp,0x1c
c002880b:	c3                   	ret    

c002880c <FAT::write(void*, unsigned long, void*, int*)>:
c002880c:	83 ec 1c             	sub    esp,0x1c
c002880f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028814:	74 0a                	je     c0028820 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028816:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002881b:	75 0b                	jne    c0028828 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c002881d:	8d 76 00             	lea    esi,[esi+0x0]
c0028820:	b8 04 00 00 00       	mov    eax,0x4
c0028825:	eb 41                	jmp    c0028868 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028827:	90                   	nop
c0028828:	8d 44 24 08          	lea    eax,[esp+0x8]
c002882c:	50                   	push   eax
c002882d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028835:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028839:	e8 be ba fd ff       	call   c00042fc <f_write>
c002883e:	83 c4 10             	add    esp,0x10
c0028841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028849:	89 c2                	mov    edx,eax
c002884b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002884f:	89 10                	mov    DWORD PTR [eax],edx
c0028851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028855:	85 c0                	test   eax,eax
c0028857:	75 07                	jne    c0028860 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028859:	b8 00 00 00 00       	mov    eax,0x0
c002885e:	eb 08                	jmp    c0028868 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028860:	b8 01 00 00 00       	mov    eax,0x1
c0028865:	8d 76 00             	lea    esi,[esi+0x0]
c0028868:	83 c4 1c             	add    esp,0x1c
c002886b:	c3                   	ret    

c002886c <FAT::close(void*)>:
c002886c:	83 ec 1c             	sub    esp,0x1c
c002886f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028874:	75 0a                	jne    c0028880 <FAT::close(void*)+0x14>
c0028876:	b8 04 00 00 00       	mov    eax,0x4
c002887b:	eb 3f                	jmp    c00288bc <FAT::close(void*)+0x50>
c002887d:	8d 76 00             	lea    esi,[esi+0x0]
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028887:	e8 7c bd fd ff       	call   c0004608 <f_close>
c002888c:	83 c4 10             	add    esp,0x10
c002888f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028893:	83 ec 0c             	sub    esp,0xc
c0028896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002889a:	e8 08 dc fe ff       	call   c00164a7 <free>
c002889f:	83 c4 10             	add    esp,0x10
c00288a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288a6:	85 c0                	test   eax,eax
c00288a8:	75 0a                	jne    c00288b4 <FAT::close(void*)+0x48>
c00288aa:	b8 00 00 00 00       	mov    eax,0x0
c00288af:	eb 0b                	jmp    c00288bc <FAT::close(void*)+0x50>
c00288b1:	8d 76 00             	lea    esi,[esi+0x0]
c00288b4:	b8 01 00 00 00       	mov    eax,0x1
c00288b9:	8d 76 00             	lea    esi,[esi+0x0]
c00288bc:	83 c4 1c             	add    esp,0x1c
c00288bf:	c3                   	ret    

c00288c0 <FAT::closeDir(void*)>:
c00288c0:	83 ec 1c             	sub    esp,0x1c
c00288c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00288c8:	75 0a                	jne    c00288d4 <FAT::closeDir(void*)+0x14>
c00288ca:	b8 04 00 00 00       	mov    eax,0x4
c00288cf:	eb 3f                	jmp    c0028910 <FAT::closeDir(void*)+0x50>
c00288d1:	8d 76 00             	lea    esi,[esi+0x0]
c00288d4:	83 ec 0c             	sub    esp,0xc
c00288d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288db:	e8 d2 bf fd ff       	call   c00048b2 <f_closedir>
c00288e0:	83 c4 10             	add    esp,0x10
c00288e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288e7:	83 ec 0c             	sub    esp,0xc
c00288ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288ee:	e8 b4 db fe ff       	call   c00164a7 <free>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288fa:	85 c0                	test   eax,eax
c00288fc:	75 0a                	jne    c0028908 <FAT::closeDir(void*)+0x48>
c00288fe:	b8 00 00 00 00       	mov    eax,0x0
c0028903:	eb 0b                	jmp    c0028910 <FAT::closeDir(void*)+0x50>
c0028905:	8d 76 00             	lea    esi,[esi+0x0]
c0028908:	b8 01 00 00 00       	mov    eax,0x1
c002890d:	8d 76 00             	lea    esi,[esi+0x0]
c0028910:	83 c4 1c             	add    esp,0x1c
c0028913:	c3                   	ret    

c0028914 <FAT::truncate(void*, unsigned long long)>:
c0028914:	83 ec 2c             	sub    esp,0x2c
c0028917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002891b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002891f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028927:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002892c:	75 0a                	jne    c0028938 <FAT::truncate(void*, unsigned long long)+0x24>
c002892e:	b8 04 00 00 00       	mov    eax,0x4
c0028933:	eb 47                	jmp    c002897c <FAT::truncate(void*, unsigned long long)+0x68>
c0028935:	8d 76 00             	lea    esi,[esi+0x0]
c0028938:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002893c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002893f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028943:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002894b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002894f:	83 ec 08             	sub    esp,0x8
c0028952:	50                   	push   eax
c0028953:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028957:	e8 db bc fd ff       	call   c0004637 <f_lseek>
c002895c:	83 c4 10             	add    esp,0x10
c002895f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028967:	85 c0                	test   eax,eax
c0028969:	75 09                	jne    c0028974 <FAT::truncate(void*, unsigned long long)+0x60>
c002896b:	b8 00 00 00 00       	mov    eax,0x0
c0028970:	eb 0a                	jmp    c002897c <FAT::truncate(void*, unsigned long long)+0x68>
c0028972:	66 90                	xchg   ax,ax
c0028974:	b8 01 00 00 00       	mov    eax,0x1
c0028979:	8d 76 00             	lea    esi,[esi+0x0]
c002897c:	83 c4 2c             	add    esp,0x2c
c002897f:	c3                   	ret    

c0028980 <FAT::seek(void*, unsigned long long)>:
c0028980:	83 ec 2c             	sub    esp,0x2c
c0028983:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002898b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002898f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028993:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028998:	75 0a                	jne    c00289a4 <FAT::seek(void*, unsigned long long)+0x24>
c002899a:	b8 04 00 00 00       	mov    eax,0x4
c002899f:	eb 33                	jmp    c00289d4 <FAT::seek(void*, unsigned long long)+0x54>
c00289a1:	8d 76 00             	lea    esi,[esi+0x0]
c00289a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289a8:	83 ec 08             	sub    esp,0x8
c00289ab:	50                   	push   eax
c00289ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00289b0:	e8 82 bc fd ff       	call   c0004637 <f_lseek>
c00289b5:	83 c4 10             	add    esp,0x10
c00289b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00289bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00289c0:	85 c0                	test   eax,eax
c00289c2:	75 08                	jne    c00289cc <FAT::seek(void*, unsigned long long)+0x4c>
c00289c4:	b8 00 00 00 00       	mov    eax,0x0
c00289c9:	eb 09                	jmp    c00289d4 <FAT::seek(void*, unsigned long long)+0x54>
c00289cb:	90                   	nop
c00289cc:	b8 01 00 00 00       	mov    eax,0x1
c00289d1:	8d 76 00             	lea    esi,[esi+0x0]
c00289d4:	83 c4 2c             	add    esp,0x2c
c00289d7:	c3                   	ret    

c00289d8 <fatWrapperReadDisk>:
c00289d8:	53                   	push   ebx
c00289d9:	83 ec 18             	sub    esp,0x18
c00289dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00289e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289e9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00289f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00289f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00289f8:	ba 00 00 00 00       	mov    edx,0x0
c00289fd:	83 ec 0c             	sub    esp,0xc
c0028a00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a04:	53                   	push   ebx
c0028a05:	52                   	push   edx
c0028a06:	50                   	push   eax
c0028a07:	51                   	push   ecx
c0028a08:	e8 4d 3d ff ff       	call   c001c75a <LogicalDisk::read(unsigned long long, int, void*)>
c0028a0d:	83 c4 20             	add    esp,0x20
c0028a10:	83 c4 18             	add    esp,0x18
c0028a13:	5b                   	pop    ebx
c0028a14:	c3                   	ret    
c0028a15:	8d 76 00             	lea    esi,[esi+0x0]

c0028a18 <fatWrapperWriteDisk>:
c0028a18:	53                   	push   ebx
c0028a19:	83 ec 18             	sub    esp,0x18
c0028a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028a24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a29:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028a30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028a34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028a38:	ba 00 00 00 00       	mov    edx,0x0
c0028a3d:	83 ec 0c             	sub    esp,0xc
c0028a40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a44:	53                   	push   ebx
c0028a45:	52                   	push   edx
c0028a46:	50                   	push   eax
c0028a47:	51                   	push   ecx
c0028a48:	e8 79 3d ff ff       	call   c001c7c6 <LogicalDisk::write(unsigned long long, int, void*)>
c0028a4d:	83 c4 20             	add    esp,0x20
c0028a50:	83 c4 18             	add    esp,0x18
c0028a53:	5b                   	pop    ebx
c0028a54:	c3                   	ret    
c0028a55:	8d 76 00             	lea    esi,[esi+0x0]

c0028a58 <fatWrapperIoctl>:
c0028a58:	53                   	push   ebx
c0028a59:	83 ec 28             	sub    esp,0x28
c0028a5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a60:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028a64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028a68:	88 d0                	mov    al,dl
c0028a6a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028a6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a73:	83 f8 02             	cmp    eax,0x2
c0028a76:	75 34                	jne    c0028aac <fatWrapperIoctl+0x54>
c0028a78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028a80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a85:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a8c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028a98:	89 c2                	mov    edx,eax
c0028a9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028a9e:	66 89 10             	mov    WORD PTR [eax],dx
c0028aa1:	b8 00 00 00 00       	mov    eax,0x0
c0028aa6:	e9 c5 00 00 00       	jmp    c0028b70 <fatWrapperIoctl+0x118>
c0028aab:	90                   	nop
c0028aac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ab1:	83 f8 01             	cmp    eax,0x1
c0028ab4:	75 6a                	jne    c0028b20 <fatWrapperIoctl+0xc8>
c0028ab6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028abe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ac3:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028aca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028ad0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028ad6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028adc:	89 c8                	mov    eax,ecx
c0028ade:	89 da                	mov    edx,ebx
c0028ae0:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028ae4:	c1 e0 0a             	shl    eax,0xa
c0028ae7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028aec:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028af3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028af9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028aff:	89 cb                	mov    ebx,ecx
c0028b01:	c1 fb 1f             	sar    ebx,0x1f
c0028b04:	53                   	push   ebx
c0028b05:	51                   	push   ecx
c0028b06:	52                   	push   edx
c0028b07:	50                   	push   eax
c0028b08:	e8 f3 5b 00 00       	call   c002e700 <__udivdi3>
c0028b0d:	83 c4 10             	add    esp,0x10
c0028b10:	89 c2                	mov    edx,eax
c0028b12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028b16:	89 10                	mov    DWORD PTR [eax],edx
c0028b18:	b8 00 00 00 00       	mov    eax,0x0
c0028b1d:	eb 51                	jmp    c0028b70 <fatWrapperIoctl+0x118>
c0028b1f:	90                   	nop
c0028b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b25:	85 c0                	test   eax,eax
c0028b27:	75 07                	jne    c0028b30 <fatWrapperIoctl+0xd8>
c0028b29:	b8 00 00 00 00       	mov    eax,0x0
c0028b2e:	eb 40                	jmp    c0028b70 <fatWrapperIoctl+0x118>
c0028b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b35:	83 f8 03             	cmp    eax,0x3
c0028b38:	75 1a                	jne    c0028b54 <fatWrapperIoctl+0xfc>
c0028b3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b46:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028b4c:	b8 00 00 00 00       	mov    eax,0x0
c0028b51:	eb 1d                	jmp    c0028b70 <fatWrapperIoctl+0x118>
c0028b53:	90                   	nop
c0028b54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b59:	83 f8 04             	cmp    eax,0x4
c0028b5c:	75 0a                	jne    c0028b68 <fatWrapperIoctl+0x110>
c0028b5e:	b8 00 00 00 00       	mov    eax,0x0
c0028b63:	eb 0b                	jmp    c0028b70 <fatWrapperIoctl+0x118>
c0028b65:	8d 76 00             	lea    esi,[esi+0x0]
c0028b68:	b8 04 00 00 00       	mov    eax,0x4
c0028b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b70:	83 c4 28             	add    esp,0x28
c0028b73:	5b                   	pop    ebx
c0028b74:	c3                   	ret    
c0028b75:	90                   	nop
c0028b76:	66 90                	xchg   ax,ax

c0028b78 <FAT::FAT()>:
c0028b78:	83 ec 1c             	sub    esp,0x1c
c0028b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b7f:	83 ec 0c             	sub    esp,0xc
c0028b82:	50                   	push   eax
c0028b83:	e8 a8 15 ff ff       	call   c001a130 <Filesystem::Filesystem()>
c0028b88:	83 c4 10             	add    esp,0x10
c0028b8b:	ba 08 34 03 c0       	mov    edx,0xc0033408
c0028b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b94:	89 10                	mov    DWORD PTR [eax],edx
c0028b96:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028ba0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028ba8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028bad:	7f 19                	jg     c0028bc8 <FAT::FAT()+0x50>
c0028baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028bb3:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028bbe:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028bc3:	eb e3                	jmp    c0028ba8 <FAT::FAT()+0x30>
c0028bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc8:	90                   	nop
c0028bc9:	83 c4 1c             	add    esp,0x1c
c0028bcc:	c3                   	ret    
c0028bcd:	90                   	nop
c0028bce:	66 90                	xchg   ax,ax

c0028bd0 <FAT::fixFilepath(char*)>:
c0028bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bd4:	8a 00                	mov    al,BYTE PTR [eax]
c0028bd6:	0f be c0             	movsx  eax,al
c0028bd9:	83 f8 40             	cmp    eax,0x40
c0028bdc:	7e 2e                	jle    c0028c0c <FAT::fixFilepath(char*)+0x3c>
c0028bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028be2:	8a 00                	mov    al,BYTE PTR [eax]
c0028be4:	83 e8 41             	sub    eax,0x41
c0028be7:	88 c2                	mov    dl,al
c0028be9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bed:	88 10                	mov    BYTE PTR [eax],dl
c0028bef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bf3:	8a 00                	mov    al,BYTE PTR [eax]
c0028bf5:	0f be c0             	movsx  eax,al
c0028bf8:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028bff:	83 c0 30             	add    eax,0x30
c0028c02:	88 c2                	mov    dl,al
c0028c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c08:	88 10                	mov    BYTE PTR [eax],dl
c0028c0a:	66 90                	xchg   ax,ax
c0028c0c:	90                   	nop
c0028c0d:	c3                   	ret    
c0028c0e:	66 90                	xchg   ax,ax

c0028c10 <FAT::open(char const*, void**, FileOpenMode)>:
c0028c10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c1e:	74 0c                	je     c0028c2c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028c20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c28:	75 0e                	jne    c0028c38 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028c2a:	66 90                	xchg   ax,ax
c0028c2c:	b8 04 00 00 00       	mov    eax,0x4
c0028c31:	e9 46 01 00 00       	jmp    c0028d7c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c36:	66 90                	xchg   ax,ax
c0028c38:	83 ec 08             	sub    esp,0x8
c0028c3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c46:	50                   	push   eax
c0028c47:	e8 04 7a fd ff       	call   c0000650 <strcpy>
c0028c4c:	83 c4 10             	add    esp,0x10
c0028c4f:	83 ec 08             	sub    esp,0x8
c0028c52:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028c56:	50                   	push   eax
c0028c57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c5e:	e8 6d ff ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c0028c63:	83 c4 10             	add    esp,0x10
c0028c66:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028c6e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c75:	83 e0 01             	and    eax,0x1
c0028c78:	74 12                	je     c0028c8c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028c7a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c81:	83 c8 01             	or     eax,0x1
c0028c84:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c8b:	90                   	nop
c0028c8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c93:	83 e0 04             	and    eax,0x4
c0028c96:	74 24                	je     c0028cbc <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028c98:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c9f:	83 c8 30             	or     eax,0x30
c0028ca2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ca9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cb0:	83 c8 02             	or     eax,0x2
c0028cb3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cba:	66 90                	xchg   ax,ax
c0028cbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028cc3:	83 e0 02             	and    eax,0x2
c0028cc6:	74 14                	je     c0028cdc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028cc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ccf:	83 c8 02             	or     eax,0x2
c0028cd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cdc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ce3:	83 e0 08             	and    eax,0x8
c0028ce6:	74 14                	je     c0028cfc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028ce8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cef:	83 c8 04             	or     eax,0x4
c0028cf2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028d03:	83 e0 10             	and    eax,0x10
c0028d06:	74 14                	je     c0028d1c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028d08:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028d0f:	83 c8 08             	or     eax,0x8
c0028d12:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028d19:	8d 76 00             	lea    esi,[esi+0x0]
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	68 28 02 00 00       	push   0x228
c0028d24:	e8 6e d7 fe ff       	call   c0016497 <malloc>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	89 c2                	mov    edx,eax
c0028d2e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d35:	89 10                	mov    DWORD PTR [eax],edx
c0028d37:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028d3f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d48:	83 ec 04             	sub    esp,0x4
c0028d4b:	52                   	push   edx
c0028d4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028d50:	52                   	push   edx
c0028d51:	50                   	push   eax
c0028d52:	e8 01 b1 fd ff       	call   c0003e58 <f_open>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028d61:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028d69:	74 09                	je     c0028d74 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028d6b:	b8 01 00 00 00       	mov    eax,0x1
c0028d70:	eb 0a                	jmp    c0028d7c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028d72:	66 90                	xchg   ax,ax
c0028d74:	b8 00 00 00 00       	mov    eax,0x0
c0028d79:	8d 76 00             	lea    esi,[esi+0x0]
c0028d7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d82:	c3                   	ret    
c0028d83:	90                   	nop

c0028d84 <FAT::openDir(char const*, void**)>:
c0028d84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028d8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028d92:	74 0c                	je     c0028da0 <FAT::openDir(char const*, void**)+0x1c>
c0028d94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028d9c:	75 0e                	jne    c0028dac <FAT::openDir(char const*, void**)+0x28>
c0028d9e:	66 90                	xchg   ax,ax
c0028da0:	b8 04 00 00 00       	mov    eax,0x4
c0028da5:	e9 82 00 00 00       	jmp    c0028e2c <FAT::openDir(char const*, void**)+0xa8>
c0028daa:	66 90                	xchg   ax,ax
c0028dac:	83 ec 08             	sub    esp,0x8
c0028daf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028db6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028dba:	50                   	push   eax
c0028dbb:	e8 90 78 fd ff       	call   c0000650 <strcpy>
c0028dc0:	83 c4 10             	add    esp,0x10
c0028dc3:	83 ec 08             	sub    esp,0x8
c0028dc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028dca:	50                   	push   eax
c0028dcb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028dd2:	e8 f9 fd ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	6a 30                	push   0x30
c0028ddf:	e8 b3 d6 fe ff       	call   c0016497 <malloc>
c0028de4:	83 c4 10             	add    esp,0x10
c0028de7:	89 c2                	mov    edx,eax
c0028de9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028df0:	89 10                	mov    DWORD PTR [eax],edx
c0028df2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dfb:	83 ec 08             	sub    esp,0x8
c0028dfe:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028e02:	52                   	push   edx
c0028e03:	50                   	push   eax
c0028e04:	e8 de b9 fd ff       	call   c00047e7 <f_opendir>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e13:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028e1b:	74 07                	je     c0028e24 <FAT::openDir(char const*, void**)+0xa0>
c0028e1d:	b8 01 00 00 00       	mov    eax,0x1
c0028e22:	eb 08                	jmp    c0028e2c <FAT::openDir(char const*, void**)+0xa8>
c0028e24:	b8 00 00 00 00       	mov    eax,0x0
c0028e29:	8d 76 00             	lea    esi,[esi+0x0]
c0028e2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e32:	c3                   	ret    
c0028e33:	90                   	nop

c0028e34 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028e34:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028e3a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028e42:	75 0c                	jne    c0028e50 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028e44:	b8 04 00 00 00       	mov    eax,0x4
c0028e49:	e9 d6 00 00 00       	jmp    c0028f24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e4e:	66 90                	xchg   ax,ax
c0028e50:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028e58:	75 0a                	jne    c0028e64 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028e5a:	b8 04 00 00 00       	mov    eax,0x4
c0028e5f:	e9 c0 00 00 00       	jmp    c0028f24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e64:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028e6c:	75 0a                	jne    c0028e78 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028e6e:	b8 04 00 00 00       	mov    eax,0x4
c0028e73:	e9 ac 00 00 00       	jmp    c0028f24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e78:	83 ec 08             	sub    esp,0x8
c0028e7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e82:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e89:	50                   	push   eax
c0028e8a:	e8 c1 77 fd ff       	call   c0000650 <strcpy>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 ec 08             	sub    esp,0x8
c0028e95:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028e9c:	50                   	push   eax
c0028e9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028ea4:	e8 27 fd ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 ec 08             	sub    esp,0x8
c0028eaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028eb3:	50                   	push   eax
c0028eb4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028ebb:	50                   	push   eax
c0028ebc:	e8 a5 ba fd ff       	call   c0004966 <f_stat>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028ecb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028ed2:	85 c0                	test   eax,eax
c0028ed4:	74 0a                	je     c0028ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028ed6:	83 f8 04             	cmp    eax,0x4
c0028ed9:	74 39                	je     c0028f14 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028edb:	eb 3f                	jmp    c0028f1c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028edd:	8d 76 00             	lea    esi,[esi+0x0]
c0028ee0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028ee4:	0f b6 c0             	movzx  eax,al
c0028ee7:	83 e0 10             	and    eax,0x10
c0028eea:	0f 95 c2             	setne  dl
c0028eed:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028ef4:	88 10                	mov    BYTE PTR [eax],dl
c0028ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028efa:	ba 00 00 00 00       	mov    edx,0x0
c0028eff:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028f06:	89 01                	mov    DWORD PTR [ecx],eax
c0028f08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028f0b:	b8 00 00 00 00       	mov    eax,0x0
c0028f10:	eb 12                	jmp    c0028f24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028f12:	66 90                	xchg   ax,ax
c0028f14:	b8 02 00 00 00       	mov    eax,0x2
c0028f19:	eb 09                	jmp    c0028f24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028f1b:	90                   	nop
c0028f1c:	b8 01 00 00 00       	mov    eax,0x1
c0028f21:	8d 76 00             	lea    esi,[esi+0x0]
c0028f24:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028f2a:	c3                   	ret    
c0028f2b:	90                   	nop

c0028f2c <FAT::unlink(char const*)>:
c0028f2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028f32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028f3a:	75 08                	jne    c0028f44 <FAT::unlink(char const*)+0x18>
c0028f3c:	b8 04 00 00 00       	mov    eax,0x4
c0028f41:	eb 61                	jmp    c0028fa4 <FAT::unlink(char const*)+0x78>
c0028f43:	90                   	nop
c0028f44:	83 ec 08             	sub    esp,0x8
c0028f47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f52:	50                   	push   eax
c0028f53:	e8 f8 76 fd ff       	call   c0000650 <strcpy>
c0028f58:	83 c4 10             	add    esp,0x10
c0028f5b:	83 ec 08             	sub    esp,0x8
c0028f5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f62:	50                   	push   eax
c0028f63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f6a:	e8 61 fc ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f79:	50                   	push   eax
c0028f7a:	e8 59 bc fd ff       	call   c0004bd8 <f_unlink>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028f89:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028f90:	85 c0                	test   eax,eax
c0028f92:	75 08                	jne    c0028f9c <FAT::unlink(char const*)+0x70>
c0028f94:	b8 00 00 00 00       	mov    eax,0x0
c0028f99:	eb 09                	jmp    c0028fa4 <FAT::unlink(char const*)+0x78>
c0028f9b:	90                   	nop
c0028f9c:	b8 01 00 00 00       	mov    eax,0x1
c0028fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0028fa4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028faa:	c3                   	ret    
c0028fab:	90                   	nop

c0028fac <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028fac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028fb2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0028fb9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0028fc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028fc4:	88 d0                	mov    al,dl
c0028fc6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028fca:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028fd2:	75 0c                	jne    c0028fe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0028fd4:	b8 04 00 00 00       	mov    eax,0x4
c0028fd9:	e9 7e 01 00 00       	jmp    c002915c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0028fde:	66 90                	xchg   ax,ax
c0028fe0:	83 ec 08             	sub    esp,0x8
c0028fe3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028fea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028fee:	50                   	push   eax
c0028fef:	e8 5c 76 fd ff       	call   c0000650 <strcpy>
c0028ff4:	83 c4 10             	add    esp,0x10
c0028ff7:	83 ec 08             	sub    esp,0x8
c0028ffa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028ffe:	50                   	push   eax
c0028fff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0029006:	e8 c5 fb ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c002900b:	83 c4 10             	add    esp,0x10
c002900e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0029016:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002901e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029023:	83 e0 01             	and    eax,0x1
c0029026:	74 14                	je     c002903c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0029028:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002902f:	83 c8 01             	or     eax,0x1
c0029032:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029039:	8d 76 00             	lea    esi,[esi+0x0]
c002903c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029041:	83 e0 02             	and    eax,0x2
c0029044:	74 12                	je     c0029058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0029046:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002904d:	83 c8 20             	or     eax,0x20
c0029050:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029057:	90                   	nop
c0029058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002905d:	83 e0 04             	and    eax,0x4
c0029060:	74 12                	je     c0029074 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0029062:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029069:	83 c8 04             	or     eax,0x4
c002906c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029073:	90                   	nop
c0029074:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029079:	83 e0 08             	and    eax,0x8
c002907c:	74 12                	je     c0029090 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c002907e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029085:	83 c8 02             	or     eax,0x2
c0029088:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002908f:	90                   	nop
c0029090:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029095:	83 e0 01             	and    eax,0x1
c0029098:	74 12                	je     c00290ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c002909a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290a1:	83 c8 01             	or     eax,0x1
c00290a4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290ab:	90                   	nop
c00290ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290b1:	83 e0 02             	and    eax,0x2
c00290b4:	74 12                	je     c00290c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c00290b6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290bd:	83 c8 20             	or     eax,0x20
c00290c0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290c7:	90                   	nop
c00290c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290cd:	83 e0 04             	and    eax,0x4
c00290d0:	74 12                	je     c00290e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c00290d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290d9:	83 c8 04             	or     eax,0x4
c00290dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290e3:	90                   	nop
c00290e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290e9:	83 e0 08             	and    eax,0x8
c00290ec:	74 12                	je     c0029100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c00290ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290f5:	83 c8 02             	or     eax,0x2
c00290f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290ff:	90                   	nop
c0029100:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0029107:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002910e:	09 d0                	or     eax,edx
c0029110:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029117:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002911f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0029127:	83 ec 04             	sub    esp,0x4
c002912a:	52                   	push   edx
c002912b:	50                   	push   eax
c002912c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029130:	50                   	push   eax
c0029131:	e8 15 bf fd ff       	call   c000504b <f_chmod>
c0029136:	83 c4 10             	add    esp,0x10
c0029139:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029140:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0029147:	85 c0                	test   eax,eax
c0029149:	75 09                	jne    c0029154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c002914b:	b8 00 00 00 00       	mov    eax,0x0
c0029150:	eb 0a                	jmp    c002915c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029152:	66 90                	xchg   ax,ax
c0029154:	b8 01 00 00 00       	mov    eax,0x1
c0029159:	8d 76 00             	lea    esi,[esi+0x0]
c002915c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029162:	c3                   	ret    
c0029163:	90                   	nop

c0029164 <FAT::rename(char const*, char const*)>:
c0029164:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002916a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029172:	74 0c                	je     c0029180 <FAT::rename(char const*, char const*)+0x1c>
c0029174:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002917c:	75 0e                	jne    c002918c <FAT::rename(char const*, char const*)+0x28>
c002917e:	66 90                	xchg   ax,ax
c0029180:	b8 04 00 00 00       	mov    eax,0x4
c0029185:	e9 9e 00 00 00       	jmp    c0029228 <FAT::rename(char const*, char const*)+0xc4>
c002918a:	66 90                	xchg   ax,ax
c002918c:	83 ec 08             	sub    esp,0x8
c002918f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029196:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002919d:	50                   	push   eax
c002919e:	e8 ad 74 fd ff       	call   c0000650 <strcpy>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 ec 08             	sub    esp,0x8
c00291a9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00291b0:	50                   	push   eax
c00291b1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00291b8:	e8 13 fa ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	83 ec 08             	sub    esp,0x8
c00291c3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00291ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291ce:	50                   	push   eax
c00291cf:	e8 7c 74 fd ff       	call   c0000650 <strcpy>
c00291d4:	83 c4 10             	add    esp,0x10
c00291d7:	83 ec 08             	sub    esp,0x8
c00291da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291de:	50                   	push   eax
c00291df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00291e6:	e8 e5 f9 ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	83 ec 08             	sub    esp,0x8
c00291f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291f5:	50                   	push   eax
c00291f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00291fd:	50                   	push   eax
c00291fe:	e8 90 bc fd ff       	call   c0004e93 <f_rename>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002920d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0029214:	85 c0                	test   eax,eax
c0029216:	75 08                	jne    c0029220 <FAT::rename(char const*, char const*)+0xbc>
c0029218:	b8 00 00 00 00       	mov    eax,0x0
c002921d:	eb 09                	jmp    c0029228 <FAT::rename(char const*, char const*)+0xc4>
c002921f:	90                   	nop
c0029220:	b8 01 00 00 00       	mov    eax,0x1
c0029225:	8d 76 00             	lea    esi,[esi+0x0]
c0029228:	81 c4 1c 02 00 00    	add    esp,0x21c
c002922e:	c3                   	ret    
c002922f:	90                   	nop

c0029230 <FAT::mkdir(char const*)>:
c0029230:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029236:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002923e:	75 08                	jne    c0029248 <FAT::mkdir(char const*)+0x18>
c0029240:	b8 04 00 00 00       	mov    eax,0x4
c0029245:	eb 61                	jmp    c00292a8 <FAT::mkdir(char const*)+0x78>
c0029247:	90                   	nop
c0029248:	83 ec 08             	sub    esp,0x8
c002924b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029252:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029256:	50                   	push   eax
c0029257:	e8 f4 73 fd ff       	call   c0000650 <strcpy>
c002925c:	83 c4 10             	add    esp,0x10
c002925f:	83 ec 08             	sub    esp,0x8
c0029262:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029266:	50                   	push   eax
c0029267:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002926e:	e8 5d f9 ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c0029273:	83 c4 10             	add    esp,0x10
c0029276:	83 ec 0c             	sub    esp,0xc
c0029279:	8d 44 24 18          	lea    eax,[esp+0x18]
c002927d:	50                   	push   eax
c002927e:	e8 75 ba fd ff       	call   c0004cf8 <f_mkdir>
c0029283:	83 c4 10             	add    esp,0x10
c0029286:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002928d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029294:	85 c0                	test   eax,eax
c0029296:	75 08                	jne    c00292a0 <FAT::mkdir(char const*)+0x70>
c0029298:	b8 00 00 00 00       	mov    eax,0x0
c002929d:	eb 09                	jmp    c00292a8 <FAT::mkdir(char const*)+0x78>
c002929f:	90                   	nop
c00292a0:	b8 01 00 00 00       	mov    eax,0x1
c00292a5:	8d 76 00             	lea    esi,[esi+0x0]
c00292a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00292ae:	c3                   	ret    
c00292af:	90                   	nop

c00292b0 <FAT::exists(char const*)>:
c00292b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00292b6:	83 ec 08             	sub    esp,0x8
c00292b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00292c4:	50                   	push   eax
c00292c5:	e8 86 73 fd ff       	call   c0000650 <strcpy>
c00292ca:	83 c4 10             	add    esp,0x10
c00292cd:	83 ec 08             	sub    esp,0x8
c00292d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00292d4:	50                   	push   eax
c00292d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292dc:	e8 ef f8 ff ff       	call   c0028bd0 <FAT::fixFilepath(char*)>
c00292e1:	83 c4 10             	add    esp,0x10
c00292e4:	83 ec 08             	sub    esp,0x8
c00292e7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00292ee:	50                   	push   eax
c00292ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c00292f3:	50                   	push   eax
c00292f4:	e8 6d b6 fd ff       	call   c0004966 <f_stat>
c00292f9:	83 c4 10             	add    esp,0x10
c00292fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029303:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002930a:	85 c0                	test   eax,eax
c002930c:	75 06                	jne    c0029314 <FAT::exists(char const*)+0x64>
c002930e:	b0 01                	mov    al,0x1
c0029310:	eb 06                	jmp    c0029318 <FAT::exists(char const*)+0x68>
c0029312:	66 90                	xchg   ax,ax
c0029314:	b0 00                	mov    al,0x0
c0029316:	66 90                	xchg   ax,ax
c0029318:	81 c4 2c 02 00 00    	add    esp,0x22c
c002931e:	c3                   	ret    
c002931f:	90                   	nop

c0029320 <isoReadDiscSectorHelper>:
c0029320:	83 ec 2c             	sub    esp,0x2c
c0029323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0029327:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002932b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029330:	83 e8 41             	sub    eax,0x41
c0029333:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002933a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002933e:	ba 00 00 00 00       	mov    edx,0x0
c0029343:	83 ec 0c             	sub    esp,0xc
c0029346:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002934a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002934e:	52                   	push   edx
c002934f:	50                   	push   eax
c0029350:	51                   	push   ecx
c0029351:	e8 04 34 ff ff       	call   c001c75a <LogicalDisk::read(unsigned long long, int, void*)>
c0029356:	83 c4 20             	add    esp,0x20
c0029359:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002935d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029362:	74 0c                	je     c0029370 <isoReadDiscSectorHelper+0x50>
c0029364:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029368:	c1 e0 0b             	shl    eax,0xb
c002936b:	eb 0b                	jmp    c0029378 <isoReadDiscSectorHelper+0x58>
c002936d:	8d 76 00             	lea    esi,[esi+0x0]
c0029370:	b8 00 00 00 00       	mov    eax,0x0
c0029375:	8d 76 00             	lea    esi,[esi+0x0]
c0029378:	83 c4 2c             	add    esp,0x2c
c002937b:	c3                   	ret    

c002937c <iso_kprintf>:
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	83 ec 08             	sub    esp,0x8
c0029382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029386:	68 b6 31 03 c0       	push   0xc00331b6
c002938b:	e8 3e ff fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0029390:	83 c4 10             	add    esp,0x10
c0029393:	90                   	nop
c0029394:	83 c4 0c             	add    esp,0xc
c0029397:	c3                   	ret    

c0029398 <iso_kprintfd>:
c0029398:	83 ec 0c             	sub    esp,0xc
c002939b:	83 ec 08             	sub    esp,0x8
c002939e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00293a2:	68 ea 17 03 c0       	push   0xc00317ea
c00293a7:	e8 22 ff fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00293ac:	83 c4 10             	add    esp,0x10
c00293af:	90                   	nop
c00293b0:	83 c4 0c             	add    esp,0xc
c00293b3:	c3                   	ret    

c00293b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00293b4:	b8 08 00 00 00       	mov    eax,0x8
c00293b9:	c3                   	ret    

c00293ba <ISO9660::truncate(void*, unsigned long long)>:
c00293ba:	b8 01 00 00 00       	mov    eax,0x1
c00293bf:	c3                   	ret    

c00293c0 <ISO9660::getName()>:
c00293c0:	b8 6c 34 03 c0       	mov    eax,0xc003346c
c00293c5:	c3                   	ret    

c00293c6 <ISO9660::closeDir(void*)>:
c00293c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00293cc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00293cf:	90                   	nop

c00293d0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00293d0:	b8 01 00 00 00       	mov    eax,0x1
c00293d5:	c3                   	ret    

c00293d6 <ISO9660::unlink(char const*)>:
c00293d6:	b8 01 00 00 00       	mov    eax,0x1
c00293db:	c3                   	ret    

c00293dc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00293dc:	b8 03 00 00 00       	mov    eax,0x3
c00293e1:	c3                   	ret    

c00293e2 <ISO9660::rename(char const*, char const*)>:
c00293e2:	b8 01 00 00 00       	mov    eax,0x1
c00293e7:	c3                   	ret    

c00293e8 <ISO9660::mkdir(char const*)>:
c00293e8:	b8 01 00 00 00       	mov    eax,0x1
c00293ed:	c3                   	ret    

c00293ee <ISO9660::~ISO9660()>:
c00293ee:	83 ec 0c             	sub    esp,0xc
c00293f1:	ba ac 35 03 c0       	mov    edx,0xc00335ac
c00293f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fa:	89 10                	mov    DWORD PTR [eax],edx
c00293fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029400:	83 ec 0c             	sub    esp,0xc
c0029403:	50                   	push   eax
c0029404:	e8 4b 0d ff ff       	call   c001a154 <Filesystem::~Filesystem()>
c0029409:	83 c4 10             	add    esp,0x10
c002940c:	90                   	nop
c002940d:	83 c4 0c             	add    esp,0xc
c0029410:	c3                   	ret    
c0029411:	90                   	nop

c0029412 <ISO9660::~ISO9660()>:
c0029412:	83 ec 0c             	sub    esp,0xc
c0029415:	83 ec 0c             	sub    esp,0xc
c0029418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002941c:	e8 cd ff ff ff       	call   c00293ee <ISO9660::~ISO9660()>
c0029421:	83 c4 10             	add    esp,0x10
c0029424:	83 ec 08             	sub    esp,0x8
c0029427:	6a 08                	push   0x8
c0029429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002942d:	e8 9e fd fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c0029432:	83 c4 10             	add    esp,0x10
c0029435:	83 c4 0c             	add    esp,0xc
c0029438:	c3                   	ret    
c0029439:	90                   	nop

c002943a <ISO9660::exists(char const*)>:
c002943a:	83 ec 18             	sub    esp,0x18
c002943d:	68 87 34 03 c0       	push   0xc0033487
c0029442:	e8 0f 6e ff ff       	call   c0020256 <KePanic(char const*)>
c0029447:	31 c0                	xor    eax,eax
c0029449:	83 c4 1c             	add    esp,0x1c
c002944c:	c3                   	ret    
c002944d:	90                   	nop

c002944e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002944e:	56                   	push   esi
c002944f:	53                   	push   ebx
c0029450:	53                   	push   ebx
c0029451:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029455:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029459:	85 db                	test   ebx,ebx
c002945b:	0f 84 ca 00 00 00    	je     c002952b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029461:	85 f6                	test   esi,esi
c0029463:	0f 84 c2 00 00 00    	je     c002952b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029469:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002946e:	b8 03 00 00 00       	mov    eax,0x3
c0029473:	0f 85 b7 00 00 00    	jne    c0029530 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029479:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002947b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029481:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029488:	74 1b                	je     c00294a5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002948a:	85 c0                	test   eax,eax
c002948c:	74 10                	je     c002949e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002948e:	83 ec 0c             	sub    esp,0xc
c0029491:	68 a5 34 03 c0       	push   0xc00334a5
c0029496:	e8 bb 6d ff ff       	call   c0020256 <KePanic(char const*)>
c002949b:	83 c4 10             	add    esp,0x10
c002949e:	8a 03                	mov    al,BYTE PTR [ebx]
c00294a0:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00294a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00294a8:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00294af:	85 c0                	test   eax,eax
c00294b1:	74 09                	je     c00294bc <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00294b3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00294ba:	74 48                	je     c0029504 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00294bc:	83 ec 0c             	sub    esp,0xc
c00294bf:	68 b5 34 03 c0       	push   0xc00334b5
c00294c4:	e8 05 fe fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00294c9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00294cc:	83 c4 10             	add    esp,0x10
c00294cf:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00294d6:	85 c0                	test   eax,eax
c00294d8:	74 17                	je     c00294f1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00294da:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00294e1:	83 ec 0c             	sub    esp,0xc
c00294e4:	68 d5 34 03 c0       	push   0xc00334d5
c00294e9:	e8 e0 fd fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00294ee:	83 c4 10             	add    esp,0x10
c00294f1:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00294f8:	83 ec 0c             	sub    esp,0xc
c00294fb:	50                   	push   eax
c00294fc:	e8 1e d7 fd ff       	call   c0006c1f <init_percd>
c0029501:	83 c4 10             	add    esp,0x10
c0029504:	51                   	push   ecx
c0029505:	83 c3 03             	add    ebx,0x3
c0029508:	51                   	push   ecx
c0029509:	6a 00                	push   0x0
c002950b:	53                   	push   ebx
c002950c:	e8 d1 d1 fd ff       	call   c00066e2 <iso_open>
c0029511:	83 c4 10             	add    esp,0x10
c0029514:	89 c2                	mov    edx,eax
c0029516:	b8 01 00 00 00       	mov    eax,0x1
c002951b:	83 fa ff             	cmp    edx,0xffffffff
c002951e:	74 10                	je     c0029530 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029520:	83 c2 32             	add    edx,0x32
c0029523:	31 c0                	xor    eax,eax
c0029525:	01 d2                	add    edx,edx
c0029527:	89 16                	mov    DWORD PTR [esi],edx
c0029529:	eb 05                	jmp    c0029530 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002952b:	b8 04 00 00 00       	mov    eax,0x4
c0029530:	5a                   	pop    edx
c0029531:	5b                   	pop    ebx
c0029532:	5e                   	pop    esi
c0029533:	c3                   	ret    

c0029534 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029534:	53                   	push   ebx
c0029535:	83 ec 08             	sub    esp,0x8
c0029538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002953c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029540:	85 c0                	test   eax,eax
c0029542:	74 2d                	je     c0029571 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029544:	85 db                	test   ebx,ebx
c0029546:	74 29                	je     c0029571 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029548:	52                   	push   edx
c0029549:	b9 02 00 00 00       	mov    ecx,0x2
c002954e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029552:	99                   	cdq    
c0029553:	f7 f9                	idiv   ecx
c0029555:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029559:	83 e8 32             	sub    eax,0x32
c002955c:	50                   	push   eax
c002955d:	e8 28 d2 fd ff       	call   c000678a <iso_read>
c0029562:	83 c4 10             	add    esp,0x10
c0029565:	89 03                	mov    DWORD PTR [ebx],eax
c0029567:	09 d0                	or     eax,edx
c0029569:	0f 94 c0             	sete   al
c002956c:	0f b6 c0             	movzx  eax,al
c002956f:	eb 05                	jmp    c0029576 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029571:	b8 04 00 00 00       	mov    eax,0x4
c0029576:	83 c4 08             	add    esp,0x8
c0029579:	5b                   	pop    ebx
c002957a:	c3                   	ret    
c002957b:	90                   	nop

c002957c <ISO9660::seek(void*, unsigned long long)>:
c002957c:	57                   	push   edi
c002957d:	b8 04 00 00 00       	mov    eax,0x4
c0029582:	56                   	push   esi
c0029583:	51                   	push   ecx
c0029584:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029588:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002958c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029590:	85 d2                	test   edx,edx
c0029592:	74 26                	je     c00295ba <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029594:	89 d0                	mov    eax,edx
c0029596:	b9 02 00 00 00       	mov    ecx,0x2
c002959b:	6a 00                	push   0x0
c002959d:	99                   	cdq    
c002959e:	f7 f9                	idiv   ecx
c00295a0:	57                   	push   edi
c00295a1:	56                   	push   esi
c00295a2:	83 e8 32             	sub    eax,0x32
c00295a5:	50                   	push   eax
c00295a6:	e8 f5 d2 fd ff       	call   c00068a0 <iso_seek>
c00295ab:	83 c4 10             	add    esp,0x10
c00295ae:	31 f0                	xor    eax,esi
c00295b0:	31 fa                	xor    edx,edi
c00295b2:	09 d0                	or     eax,edx
c00295b4:	0f 95 c0             	setne  al
c00295b7:	0f b6 c0             	movzx  eax,al
c00295ba:	5a                   	pop    edx
c00295bb:	5e                   	pop    esi
c00295bc:	5f                   	pop    edi
c00295bd:	c3                   	ret    

c00295be <ISO9660::tell(void*, unsigned long long*)>:
c00295be:	53                   	push   ebx
c00295bf:	83 ec 08             	sub    esp,0x8
c00295c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00295c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00295ca:	85 c0                	test   eax,eax
c00295cc:	74 24                	je     c00295f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00295ce:	85 db                	test   ebx,ebx
c00295d0:	74 20                	je     c00295f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00295d2:	b9 02 00 00 00       	mov    ecx,0x2
c00295d7:	99                   	cdq    
c00295d8:	f7 f9                	idiv   ecx
c00295da:	83 ec 0c             	sub    esp,0xc
c00295dd:	83 e8 32             	sub    eax,0x32
c00295e0:	50                   	push   eax
c00295e1:	e8 3e d3 fd ff       	call   c0006924 <iso_tell>
c00295e6:	83 c4 10             	add    esp,0x10
c00295e9:	89 03                	mov    DWORD PTR [ebx],eax
c00295eb:	31 c0                	xor    eax,eax
c00295ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00295f0:	eb 05                	jmp    c00295f7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00295f2:	b8 04 00 00 00       	mov    eax,0x4
c00295f7:	83 c4 08             	add    esp,0x8
c00295fa:	5b                   	pop    ebx
c00295fb:	c3                   	ret    

c00295fc <ISO9660::stat(void*, unsigned long long*)>:
c00295fc:	56                   	push   esi
c00295fd:	53                   	push   ebx
c00295fe:	83 ec 10             	sub    esp,0x10
c0029601:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029605:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029609:	68 f9 34 03 c0       	push   0xc00334f9
c002960e:	e8 bb fc fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0029613:	83 c4 10             	add    esp,0x10
c0029616:	85 db                	test   ebx,ebx
c0029618:	74 2a                	je     c0029644 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002961a:	85 f6                	test   esi,esi
c002961c:	74 26                	je     c0029644 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002961e:	89 d8                	mov    eax,ebx
c0029620:	b9 02 00 00 00       	mov    ecx,0x2
c0029625:	99                   	cdq    
c0029626:	83 ec 0c             	sub    esp,0xc
c0029629:	f7 f9                	idiv   ecx
c002962b:	83 e8 32             	sub    eax,0x32
c002962e:	50                   	push   eax
c002962f:	e8 21 d3 fd ff       	call   c0006955 <iso_total>
c0029634:	83 c4 10             	add    esp,0x10
c0029637:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c002963e:	89 06                	mov    DWORD PTR [esi],eax
c0029640:	31 c0                	xor    eax,eax
c0029642:	eb 05                	jmp    c0029649 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029644:	b8 04 00 00 00       	mov    eax,0x4
c0029649:	5a                   	pop    edx
c002964a:	5b                   	pop    ebx
c002964b:	5e                   	pop    esi
c002964c:	c3                   	ret    
c002964d:	90                   	nop

c002964e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002964e:	55                   	push   ebp
c002964f:	57                   	push   edi
c0029650:	56                   	push   esi
c0029651:	53                   	push   ebx
c0029652:	83 ec 18             	sub    esp,0x18
c0029655:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029659:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002965d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029661:	68 01 35 03 c0       	push   0xc0033501
c0029666:	e8 63 fc fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002966b:	83 c4 10             	add    esp,0x10
c002966e:	85 ff                	test   edi,edi
c0029670:	0f 94 c0             	sete   al
c0029673:	85 f6                	test   esi,esi
c0029675:	0f 94 c2             	sete   dl
c0029678:	09 d0                	or     eax,edx
c002967a:	a8 01                	test   al,0x1
c002967c:	0f 85 dd 00 00 00    	jne    c002975f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029682:	85 db                	test   ebx,ebx
c0029684:	0f 84 d5 00 00 00    	je     c002975f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002968a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002968d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029693:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002969a:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296a1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00296a3:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00296a9:	74 1b                	je     c00296c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00296ab:	85 c0                	test   eax,eax
c00296ad:	74 10                	je     c00296bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00296af:	83 ec 0c             	sub    esp,0xc
c00296b2:	68 a5 34 03 c0       	push   0xc00334a5
c00296b7:	e8 9a 6b ff ff       	call   c0020256 <KePanic(char const*)>
c00296bc:	83 c4 10             	add    esp,0x10
c00296bf:	8a 03                	mov    al,BYTE PTR [ebx]
c00296c1:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296c9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296d0:	85 c0                	test   eax,eax
c00296d2:	74 09                	je     c00296dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00296d4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296db:	74 51                	je     c002972e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00296dd:	83 ec 0c             	sub    esp,0xc
c00296e0:	68 09 35 03 c0       	push   0xc0033509
c00296e5:	e8 e4 fb fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00296ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00296f8:	74 21                	je     c002971b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00296fa:	83 ec 0c             	sub    esp,0xc
c00296fd:	68 29 35 03 c0       	push   0xc0033529
c0029702:	e8 c7 fb fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c0029707:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002970a:	83 c4 10             	add    esp,0x10
c002970d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029714:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002971b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029722:	83 ec 0c             	sub    esp,0xc
c0029725:	50                   	push   eax
c0029726:	e8 f4 d4 fd ff       	call   c0006c1f <init_percd>
c002972b:	83 c4 10             	add    esp,0x10
c002972e:	52                   	push   edx
c002972f:	83 c3 03             	add    ebx,0x3
c0029732:	52                   	push   edx
c0029733:	6a 00                	push   0x0
c0029735:	53                   	push   ebx
c0029736:	e8 a7 cf fd ff       	call   c00066e2 <iso_open>
c002973b:	83 c4 10             	add    esp,0x10
c002973e:	83 f8 ff             	cmp    eax,0xffffffff
c0029741:	89 c5                	mov    ebp,eax
c0029743:	75 21                	jne    c0029766 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029745:	50                   	push   eax
c0029746:	50                   	push   eax
c0029747:	6a 01                	push   0x1
c0029749:	53                   	push   ebx
c002974a:	e8 93 cf fd ff       	call   c00066e2 <iso_open>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	ba 02 00 00 00       	mov    edx,0x2
c0029757:	40                   	inc    eax
c0029758:	74 2b                	je     c0029785 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002975a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002975d:	eb 24                	jmp    c0029783 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c002975f:	ba 04 00 00 00       	mov    edx,0x4
c0029764:	eb 1f                	jmp    c0029785 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029766:	83 ec 0c             	sub    esp,0xc
c0029769:	50                   	push   eax
c002976a:	e8 e6 d1 fd ff       	call   c0006955 <iso_total>
c002976f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029776:	89 07                	mov    DWORD PTR [edi],eax
c0029778:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002977b:	e8 ec cf fd ff       	call   c000676c <iso_close>
c0029780:	83 c4 10             	add    esp,0x10
c0029783:	31 d2                	xor    edx,edx
c0029785:	83 c4 0c             	add    esp,0xc
c0029788:	89 d0                	mov    eax,edx
c002978a:	5b                   	pop    ebx
c002978b:	5e                   	pop    esi
c002978c:	5f                   	pop    edi
c002978d:	5d                   	pop    ebp
c002978e:	c3                   	ret    
c002978f:	90                   	nop

c0029790 <ISO9660::close(void*)>:
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	b8 04 00 00 00       	mov    eax,0x4
c0029798:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002979c:	85 d2                	test   edx,edx
c002979e:	74 1b                	je     c00297bb <ISO9660::close(void*)+0x2b>
c00297a0:	89 d0                	mov    eax,edx
c00297a2:	b9 02 00 00 00       	mov    ecx,0x2
c00297a7:	99                   	cdq    
c00297a8:	83 ec 0c             	sub    esp,0xc
c00297ab:	f7 f9                	idiv   ecx
c00297ad:	83 e8 32             	sub    eax,0x32
c00297b0:	50                   	push   eax
c00297b1:	e8 b6 cf fd ff       	call   c000676c <iso_close>
c00297b6:	83 c4 10             	add    esp,0x10
c00297b9:	31 c0                	xor    eax,eax
c00297bb:	83 c4 0c             	add    esp,0xc
c00297be:	c3                   	ret    
c00297bf:	90                   	nop

c00297c0 <ISO9660::openDir(char const*, void**)>:
c00297c0:	56                   	push   esi
c00297c1:	53                   	push   ebx
c00297c2:	50                   	push   eax
c00297c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00297c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00297cb:	85 db                	test   ebx,ebx
c00297cd:	0f 84 bd 00 00 00    	je     c0029890 <ISO9660::openDir(char const*, void**)+0xd0>
c00297d3:	85 f6                	test   esi,esi
c00297d5:	0f 84 b5 00 00 00    	je     c0029890 <ISO9660::openDir(char const*, void**)+0xd0>
c00297db:	8a 13                	mov    dl,BYTE PTR [ebx]
c00297dd:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00297e3:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00297ea:	74 1b                	je     c0029807 <ISO9660::openDir(char const*, void**)+0x47>
c00297ec:	85 c0                	test   eax,eax
c00297ee:	74 10                	je     c0029800 <ISO9660::openDir(char const*, void**)+0x40>
c00297f0:	83 ec 0c             	sub    esp,0xc
c00297f3:	68 a5 34 03 c0       	push   0xc00334a5
c00297f8:	e8 59 6a ff ff       	call   c0020256 <KePanic(char const*)>
c00297fd:	83 c4 10             	add    esp,0x10
c0029800:	8a 03                	mov    al,BYTE PTR [ebx]
c0029802:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029807:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002980a:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029811:	85 c0                	test   eax,eax
c0029813:	74 10                	je     c0029825 <ISO9660::openDir(char const*, void**)+0x65>
c0029815:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002981c:	74 1a                	je     c0029838 <ISO9660::openDir(char const*, void**)+0x78>
c002981e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029825:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002982c:	83 ec 0c             	sub    esp,0xc
c002982f:	50                   	push   eax
c0029830:	e8 ea d3 fd ff       	call   c0006c1f <init_percd>
c0029835:	83 c4 10             	add    esp,0x10
c0029838:	50                   	push   eax
c0029839:	83 c3 03             	add    ebx,0x3
c002983c:	50                   	push   eax
c002983d:	6a 01                	push   0x1
c002983f:	53                   	push   ebx
c0029840:	e8 9d ce fd ff       	call   c00066e2 <iso_open>
c0029845:	83 c4 10             	add    esp,0x10
c0029848:	83 f8 ff             	cmp    eax,0xffffffff
c002984b:	89 c3                	mov    ebx,eax
c002984d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029852:	75 1c                	jne    c0029870 <ISO9660::openDir(char const*, void**)+0xb0>
c0029854:	53                   	push   ebx
c0029855:	53                   	push   ebx
c0029856:	68 4d 35 03 c0       	push   0xc003354d
c002985b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029861:	e8 0a dc fe ff       	call   c0017470 <VgaText::puts(char const*)>
c0029866:	83 c4 10             	add    esp,0x10
c0029869:	b8 01 00 00 00       	mov    eax,0x1
c002986e:	eb 25                	jmp    c0029895 <ISO9660::openDir(char const*, void**)+0xd5>
c0029870:	51                   	push   ecx
c0029871:	01 db                	add    ebx,ebx
c0029873:	51                   	push   ecx
c0029874:	83 c3 65             	add    ebx,0x65
c0029877:	68 60 35 03 c0       	push   0xc0033560
c002987c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029882:	e8 e9 db fe ff       	call   c0017470 <VgaText::puts(char const*)>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	31 c0                	xor    eax,eax
c002988c:	89 1e                	mov    DWORD PTR [esi],ebx
c002988e:	eb 05                	jmp    c0029895 <ISO9660::openDir(char const*, void**)+0xd5>
c0029890:	b8 04 00 00 00       	mov    eax,0x4
c0029895:	5a                   	pop    edx
c0029896:	5b                   	pop    ebx
c0029897:	5e                   	pop    esi
c0029898:	c3                   	ret    
c0029899:	90                   	nop

c002989a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002989a:	55                   	push   ebp
c002989b:	57                   	push   edi
c002989c:	56                   	push   esi
c002989d:	53                   	push   ebx
c002989e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00298a4:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00298ab:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00298b2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00298b9:	85 db                	test   ebx,ebx
c00298bb:	0f 84 e4 00 00 00    	je     c00299a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00298c1:	85 ed                	test   ebp,ebp
c00298c3:	0f 84 dc 00 00 00    	je     c00299a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00298c9:	83 ec 0c             	sub    esp,0xc
c00298cc:	68 73 35 03 c0       	push   0xc0033573
c00298d1:	e8 f8 f9 fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c00298d6:	89 d8                	mov    eax,ebx
c00298d8:	b9 02 00 00 00       	mov    ecx,0x2
c00298dd:	99                   	cdq    
c00298de:	f7 f9                	idiv   ecx
c00298e0:	83 e8 32             	sub    eax,0x32
c00298e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00298e6:	e8 bc d0 fd ff       	call   c00069a7 <iso_readdir>
c00298eb:	83 c4 10             	add    esp,0x10
c00298ee:	85 c0                	test   eax,eax
c00298f0:	89 c3                	mov    ebx,eax
c00298f2:	75 38                	jne    c002992c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00298f4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00298f9:	53                   	push   ebx
c00298fa:	53                   	push   ebx
c00298fb:	68 7e 35 03 c0       	push   0xc003357e
c0029900:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029906:	e8 65 db fe ff       	call   c0017470 <VgaText::puts(char const*)>
c002990b:	83 c4 0c             	add    esp,0xc
c002990e:	68 10 01 00 00       	push   0x110
c0029913:	6a 00                	push   0x0
c0029915:	57                   	push   edi
c0029916:	e8 d5 6b fd ff       	call   c00004f0 <memset>
c002991b:	83 c4 10             	add    esp,0x10
c002991e:	b8 01 00 00 00       	mov    eax,0x1
c0029923:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c002992a:	eb 7e                	jmp    c00299aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c002992c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029932:	8d 70 08             	lea    esi,[eax+0x8]
c0029935:	83 ec 0c             	sub    esp,0xc
c0029938:	56                   	push   esi
c0029939:	e8 42 6c fd ff       	call   c0000580 <strlen>
c002993e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029946:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002994a:	83 c4 10             	add    esp,0x10
c002994d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029951:	75 0a                	jne    c002995d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029953:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029956:	b8 02 00 00 00       	mov    eax,0x2
c002995b:	74 05                	je     c0029962 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c002995d:	b8 01 00 00 00       	mov    eax,0x1
c0029962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029966:	50                   	push   eax
c0029967:	50                   	push   eax
c0029968:	56                   	push   esi
c0029969:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002996d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029971:	50                   	push   eax
c0029972:	e8 d9 6c fd ff       	call   c0000650 <strcpy>
c0029977:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002997e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029980:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0029987:	5a                   	pop    edx
c0029988:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002998d:	59                   	pop    ecx
c002998e:	68 91 35 03 c0       	push   0xc0033591
c0029993:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029999:	e8 d2 da fe ff       	call   c0017470 <VgaText::puts(char const*)>
c002999e:	83 c4 10             	add    esp,0x10
c00299a1:	31 c0                	xor    eax,eax
c00299a3:	eb 05                	jmp    c00299aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00299a5:	b8 04 00 00 00       	mov    eax,0x4
c00299aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c00299b0:	5b                   	pop    ebx
c00299b1:	5e                   	pop    esi
c00299b2:	5f                   	pop    edi
c00299b3:	5d                   	pop    ebp
c00299b4:	c3                   	ret    

c00299b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00299b5:	57                   	push   edi
c00299b6:	56                   	push   esi
c00299b7:	53                   	push   ebx
c00299b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00299bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00299c0:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c00299c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00299ca:	0f be cb             	movsx  ecx,bl
c00299cd:	75 0b                	jne    c00299da <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00299cf:	0f be 05 e0 47 03 c0 	movsx  eax,BYTE PTR ds:0xc00347e0
c00299d6:	39 c8                	cmp    eax,ecx
c00299d8:	74 47                	je     c0029a21 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00299da:	83 ec 0c             	sub    esp,0xc
c00299dd:	31 d2                	xor    edx,edx
c00299df:	68 a0 03 04 c0       	push   0xc00403a0
c00299e4:	6a 01                	push   0x1
c00299e6:	52                   	push   edx
c00299e7:	56                   	push   esi
c00299e8:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00299ef:	e8 66 2d ff ff       	call   c001c75a <LogicalDisk::read(unsigned long long, int, void*)>
c00299f4:	83 c4 20             	add    esp,0x20
c00299f7:	85 c0                	test   eax,eax
c00299f9:	75 0e                	jne    c0029a09 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00299fb:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029a01:	88 1d e0 47 03 c0    	mov    BYTE PTR ds:0xc00347e0,bl
c0029a07:	eb 18                	jmp    c0029a21 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029a09:	50                   	push   eax
c0029a0a:	68 00 08 00 00       	push   0x800
c0029a0f:	6a 00                	push   0x0
c0029a11:	57                   	push   edi
c0029a12:	e8 d9 6a fd ff       	call   c00004f0 <memset>
c0029a17:	83 c4 10             	add    esp,0x10
c0029a1a:	b8 01 00 00 00       	mov    eax,0x1
c0029a1f:	eb 0e                	jmp    c0029a2f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029a21:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029a26:	b9 00 08 00 00       	mov    ecx,0x800
c0029a2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029a2d:	31 c0                	xor    eax,eax
c0029a2f:	5b                   	pop    ebx
c0029a30:	5e                   	pop    esi
c0029a31:	5f                   	pop    edi
c0029a32:	c3                   	ret    
c0029a33:	90                   	nop

c0029a34 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029a34:	53                   	push   ebx
c0029a35:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029a3b:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029a45:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029a4c:	8d 58 41             	lea    ebx,[eax+0x41]
c0029a4f:	0f be db             	movsx  ebx,bl
c0029a52:	53                   	push   ebx
c0029a53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029a57:	50                   	push   eax
c0029a58:	6a 10                	push   0x10
c0029a5a:	e8 56 ff ff ff       	call   c00299b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029a5f:	83 c4 10             	add    esp,0x10
c0029a62:	31 d2                	xor    edx,edx
c0029a64:	85 c0                	test   eax,eax
c0029a66:	75 33                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a68:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029a6d:	75 2c                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a6f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029a74:	75 25                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a76:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029a7b:	75 1e                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a7d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029a82:	75 17                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a84:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029a89:	75 10                	jne    c0029a9b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a8b:	83 ec 0c             	sub    esp,0xc
c0029a8e:	53                   	push   ebx
c0029a8f:	e8 8b d1 fd ff       	call   c0006c1f <init_percd>
c0029a94:	83 c4 10             	add    esp,0x10
c0029a97:	40                   	inc    eax
c0029a98:	0f 95 c2             	setne  dl
c0029a9b:	81 c4 08 08 00 00    	add    esp,0x808
c0029aa1:	88 d0                	mov    al,dl
c0029aa3:	5b                   	pop    ebx
c0029aa4:	c3                   	ret    
c0029aa5:	90                   	nop

c0029aa6 <ISO9660::ISO9660()>:
c0029aa6:	83 ec 0c             	sub    esp,0xc
c0029aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aad:	83 ec 0c             	sub    esp,0xc
c0029ab0:	50                   	push   eax
c0029ab1:	e8 7a 06 ff ff       	call   c001a130 <Filesystem::Filesystem()>
c0029ab6:	83 c4 10             	add    esp,0x10
c0029ab9:	ba ac 35 03 c0       	mov    edx,0xc00335ac
c0029abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac2:	89 10                	mov    DWORD PTR [eax],edx
c0029ac4:	e8 68 d2 fd ff       	call   c0006d31 <fs_iso9660_init>
c0029ac9:	90                   	nop
c0029aca:	83 c4 0c             	add    esp,0xc
c0029acd:	c3                   	ret    

c0029ace <SoundCard::beginPlayback()>:
c0029ace:	c7 44 24 04 10 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033610
c0029ad6:	e9 7b 67 ff ff       	jmp    c0020256 <KePanic(char const*)>
c0029adb:	90                   	nop

c0029adc <SoundCard::stopPlayback()>:
c0029adc:	c7 44 24 04 10 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033610
c0029ae4:	e9 6d 67 ff ff       	jmp    c0020256 <KePanic(char const*)>
c0029ae9:	90                   	nop

c0029aea <SoundCard::SoundCard(char const*)>:
c0029aea:	83 ec 1c             	sub    esp,0x1c
c0029aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029af1:	83 ec 08             	sub    esp,0x8
c0029af4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029af8:	50                   	push   eax
c0029af9:	e8 c8 19 ff ff       	call   c001b4c6 <Device::Device(char const*)>
c0029afe:	83 c4 10             	add    esp,0x10
c0029b01:	ba 5c 36 03 c0       	mov    edx,0xc003365c
c0029b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b0a:	89 10                	mov    DWORD PTR [eax],edx
c0029b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b10:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b1b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b29:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b37:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b45:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029b4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029b57:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029b5c:	7f 1a                	jg     c0029b78 <SoundCard::SoundCard(char const*)+0x8e>
c0029b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029b66:	83 c2 54             	add    edx,0x54
c0029b69:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029b71:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029b76:	eb df                	jmp    c0029b57 <SoundCard::SoundCard(char const*)+0x6d>
c0029b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b7c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b83:	90                   	nop
c0029b84:	83 c4 1c             	add    esp,0x1c
c0029b87:	c3                   	ret    

c0029b88 <SoundCard::~SoundCard()>:
c0029b88:	83 ec 0c             	sub    esp,0xc
c0029b8b:	ba 5c 36 03 c0       	mov    edx,0xc003365c
c0029b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b94:	89 10                	mov    DWORD PTR [eax],edx
c0029b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9a:	83 ec 0c             	sub    esp,0xc
c0029b9d:	50                   	push   eax
c0029b9e:	e8 c3 16 ff ff       	call   c001b266 <Device::~Device()>
c0029ba3:	83 c4 10             	add    esp,0x10
c0029ba6:	90                   	nop
c0029ba7:	83 c4 0c             	add    esp,0xc
c0029baa:	c3                   	ret    
c0029bab:	90                   	nop

c0029bac <SoundCard::~SoundCard()>:
c0029bac:	83 ec 0c             	sub    esp,0xc
c0029baf:	83 ec 0c             	sub    esp,0xc
c0029bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb6:	e8 cd ff ff ff       	call   c0029b88 <SoundCard::~SoundCard()>
c0029bbb:	83 c4 10             	add    esp,0x10
c0029bbe:	83 ec 08             	sub    esp,0x8
c0029bc1:	68 e8 01 00 00       	push   0x1e8
c0029bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bca:	e8 01 f6 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c0029bcf:	83 c4 10             	add    esp,0x10
c0029bd2:	83 c4 0c             	add    esp,0xc
c0029bd5:	c3                   	ret    

c0029bd6 <SoundCard::configureRates(int, int, int)>:
c0029bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029bda:	31 c0                	xor    eax,eax
c0029bdc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029be3:	75 20                	jne    c0029c05 <SoundCard::configureRates(int, int, int)+0x2f>
c0029be5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029be9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029bf3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bfd:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029c03:	b0 01                	mov    al,0x1
c0029c05:	c3                   	ret    

c0029c06 <SoundCard::getSamples16(int, short*)>:
c0029c06:	55                   	push   ebp
c0029c07:	57                   	push   edi
c0029c08:	31 ff                	xor    edi,edi
c0029c0a:	56                   	push   esi
c0029c0b:	53                   	push   ebx
c0029c0c:	31 db                	xor    ebx,ebx
c0029c0e:	83 ec 10             	sub    esp,0x10
c0029c11:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029c15:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c19:	8d 04 36             	lea    eax,[esi+esi*1]
c0029c1c:	50                   	push   eax
c0029c1d:	6a 00                	push   0x0
c0029c1f:	55                   	push   ebp
c0029c20:	e8 cb 68 fd ff       	call   c00004f0 <memset>
c0029c25:	83 c4 10             	add    esp,0x10
c0029c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029c2c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0029c33:	85 c0                	test   eax,eax
c0029c35:	74 1a                	je     c0029c51 <SoundCard::getSamples16(int, short*)+0x4b>
c0029c37:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c3b:	75 14                	jne    c0029c51 <SoundCard::getSamples16(int, short*)+0x4b>
c0029c3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029c41:	55                   	push   ebp
c0029c42:	56                   	push   esi
c0029c43:	50                   	push   eax
c0029c44:	e8 f3 02 00 00       	call   c0029f3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029c49:	83 c4 10             	add    esp,0x10
c0029c4c:	39 c3                	cmp    ebx,eax
c0029c4e:	0f 4c d8             	cmovl  ebx,eax
c0029c51:	47                   	inc    edi
c0029c52:	83 ff 20             	cmp    edi,0x20
c0029c55:	75 d1                	jne    c0029c28 <SoundCard::getSamples16(int, short*)+0x22>
c0029c57:	83 c4 0c             	add    esp,0xc
c0029c5a:	89 d8                	mov    eax,ebx
c0029c5c:	5b                   	pop    ebx
c0029c5d:	5e                   	pop    esi
c0029c5e:	5f                   	pop    edi
c0029c5f:	5d                   	pop    ebp
c0029c60:	c3                   	ret    
c0029c61:	90                   	nop

c0029c62 <SoundCard::getSamples32(int, int*)>:
c0029c62:	55                   	push   ebp
c0029c63:	57                   	push   edi
c0029c64:	31 ff                	xor    edi,edi
c0029c66:	56                   	push   esi
c0029c67:	31 f6                	xor    esi,esi
c0029c69:	53                   	push   ebx
c0029c6a:	83 ec 10             	sub    esp,0x10
c0029c6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029c71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c75:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029c79:	c1 e0 02             	shl    eax,0x2
c0029c7c:	50                   	push   eax
c0029c7d:	6a 00                	push   0x0
c0029c7f:	55                   	push   ebp
c0029c80:	e8 6b 68 fd ff       	call   c00004f0 <memset>
c0029c85:	83 c4 10             	add    esp,0x10
c0029c88:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029c8f:	85 c0                	test   eax,eax
c0029c91:	74 1a                	je     c0029cad <SoundCard::getSamples32(int, int*)+0x4b>
c0029c93:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c97:	75 14                	jne    c0029cad <SoundCard::getSamples32(int, int*)+0x4b>
c0029c99:	53                   	push   ebx
c0029c9a:	55                   	push   ebp
c0029c9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029c9f:	50                   	push   eax
c0029ca0:	e8 67 03 00 00       	call   c002a00c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029ca5:	83 c4 10             	add    esp,0x10
c0029ca8:	39 c6                	cmp    esi,eax
c0029caa:	0f 4c f0             	cmovl  esi,eax
c0029cad:	47                   	inc    edi
c0029cae:	83 ff 20             	cmp    edi,0x20
c0029cb1:	75 d5                	jne    c0029c88 <SoundCard::getSamples32(int, int*)+0x26>
c0029cb3:	85 f6                	test   esi,esi
c0029cb5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029cbc:	75 0f                	jne    c0029ccd <SoundCard::getSamples32(int, int*)+0x6b>
c0029cbe:	85 c0                	test   eax,eax
c0029cc0:	74 1b                	je     c0029cdd <SoundCard::getSamples32(int, int*)+0x7b>
c0029cc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029cc4:	83 ec 0c             	sub    esp,0xc
c0029cc7:	53                   	push   ebx
c0029cc8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029ccb:	eb 0d                	jmp    c0029cda <SoundCard::getSamples32(int, int*)+0x78>
c0029ccd:	85 c0                	test   eax,eax
c0029ccf:	75 0c                	jne    c0029cdd <SoundCard::getSamples32(int, int*)+0x7b>
c0029cd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029cd3:	83 ec 0c             	sub    esp,0xc
c0029cd6:	53                   	push   ebx
c0029cd7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029cda:	83 c4 10             	add    esp,0x10
c0029cdd:	83 c4 0c             	add    esp,0xc
c0029ce0:	89 f0                	mov    eax,esi
c0029ce2:	5b                   	pop    ebx
c0029ce3:	5e                   	pop    esi
c0029ce4:	5f                   	pop    edi
c0029ce5:	5d                   	pop    ebp
c0029ce6:	c3                   	ret    
c0029ce7:	90                   	nop

c0029ce8 <SoundCard::addChannel(SoundPort*)>:
c0029ce8:	83 ec 0c             	sub    esp,0xc
c0029ceb:	31 c0                	xor    eax,eax
c0029ced:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029cf1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029cf9:	74 1b                	je     c0029d16 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029cfb:	40                   	inc    eax
c0029cfc:	83 f8 20             	cmp    eax,0x20
c0029cff:	75 f0                	jne    c0029cf1 <SoundCard::addChannel(SoundPort*)+0x9>
c0029d01:	83 ec 0c             	sub    esp,0xc
c0029d04:	68 35 36 03 c0       	push   0xc0033635
c0029d09:	e8 48 65 ff ff       	call   c0020256 <KePanic(char const*)>
c0029d0e:	83 c4 10             	add    esp,0x10
c0029d11:	83 c8 ff             	or     eax,0xffffffff
c0029d14:	eb 0b                	jmp    c0029d21 <SoundCard::addChannel(SoundPort*)+0x39>
c0029d16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029d1a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029d21:	83 c4 0c             	add    esp,0xc
c0029d24:	c3                   	ret    
c0029d25:	90                   	nop

c0029d26 <SoundCard::removeChannel(int)>:
c0029d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d2e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029d39:	c3                   	ret    
c0029d3a:	66 90                	xchg   ax,ax

c0029d3c <SoundPort::SoundPort(int, int, int, int)>:
c0029d3c:	83 ec 0c             	sub    esp,0xc
c0029d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d43:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d4e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d5a:	89 10                	mov    DWORD PTR [eax],edx
c0029d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029d6f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029d72:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029d77:	75 13                	jne    c0029d8c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0029d7f:	05 a0 0f 00 00       	add    eax,0xfa0
c0029d84:	d1 e0                	shl    eax,1
c0029d86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029d8a:	66 90                	xchg   ax,ax
c0029d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029d94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d9b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029da6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029da9:	c1 e0 02             	shl    eax,0x2
c0029dac:	83 ec 0c             	sub    esp,0xc
c0029daf:	50                   	push   eax
c0029db0:	e8 e2 c6 fe ff       	call   c0016497 <malloc>
c0029db5:	83 c4 10             	add    esp,0x10
c0029db8:	89 c2                	mov    edx,eax
c0029dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029dc1:	90                   	nop
c0029dc2:	83 c4 0c             	add    esp,0xc
c0029dc5:	c3                   	ret    
c0029dc6:	66 90                	xchg   ax,ax

c0029dc8 <SoundPort::~SoundPort()>:
c0029dc8:	83 ec 0c             	sub    esp,0xc
c0029dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029dd2:	85 c0                	test   eax,eax
c0029dd4:	74 1e                	je     c0029df4 <SoundPort::~SoundPort()+0x2c>
c0029dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029ddd:	83 ec 0c             	sub    esp,0xc
c0029de0:	50                   	push   eax
c0029de1:	e8 c1 c6 fe ff       	call   c00164a7 <free>
c0029de6:	83 c4 10             	add    esp,0x10
c0029de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ded:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029df4:	90                   	nop
c0029df5:	83 c4 0c             	add    esp,0xc
c0029df8:	c3                   	ret    
c0029df9:	90                   	nop
c0029dfa:	66 90                	xchg   ax,ax

c0029dfc <SoundPort::unpause()>:
c0029dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e00:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029e04:	c3                   	ret    
c0029e05:	90                   	nop
c0029e06:	66 90                	xchg   ax,ax

c0029e08 <SoundPort::pause()>:
c0029e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e0c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029e10:	c3                   	ret    
c0029e11:	90                   	nop
c0029e12:	66 90                	xchg   ax,ax

c0029e14 <SoundPort::getBufferUsed()>:
c0029e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029e1b:	c3                   	ret    

c0029e1c <SoundPort::getBufferSize()>:
c0029e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029e23:	c3                   	ret    

c0029e24 <SoundPort::buffer16(short*, int)>:
c0029e24:	55                   	push   ebp
c0029e25:	57                   	push   edi
c0029e26:	56                   	push   esi
c0029e27:	53                   	push   ebx
c0029e28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029e2c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029e30:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029e33:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029e36:	74 68                	je     c0029ea0 <SoundPort::buffer16(short*, int)+0x7c>
c0029e38:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029e3c:	85 c9                	test   ecx,ecx
c0029e3e:	7e 60                	jle    c0029ea0 <SoundPort::buffer16(short*, int)+0x7c>
c0029e40:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029e44:	8d 70 01             	lea    esi,[eax+0x1]
c0029e47:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029e4a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029e4d:	c1 e1 0f             	shl    ecx,0xf
c0029e50:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029e53:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e56:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e59:	74 4d                	je     c0029ea8 <SoundPort::buffer16(short*, int)+0x84>
c0029e5b:	31 f6                	xor    esi,esi
c0029e5d:	eb 21                	jmp    c0029e80 <SoundPort::buffer16(short*, int)+0x5c>
c0029e5f:	90                   	nop
c0029e60:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029e65:	8d 79 01             	lea    edi,[ecx+0x1]
c0029e68:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029e6b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029e6e:	c1 e3 0f             	shl    ebx,0xf
c0029e71:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029e74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e7a:	74 1c                	je     c0029e98 <SoundPort::buffer16(short*, int)+0x74>
c0029e7c:	89 c6                	mov    esi,eax
c0029e7e:	66 90                	xchg   ax,ax
c0029e80:	8d 46 01             	lea    eax,[esi+0x1]
c0029e83:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029e87:	75 d7                	jne    c0029e60 <SoundPort::buffer16(short*, int)+0x3c>
c0029e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0029e90:	5b                   	pop    ebx
c0029e91:	5e                   	pop    esi
c0029e92:	5f                   	pop    edi
c0029e93:	5d                   	pop    ebp
c0029e94:	c3                   	ret    
c0029e95:	8d 76 00             	lea    esi,[esi+0x0]
c0029e98:	5b                   	pop    ebx
c0029e99:	8d 46 02             	lea    eax,[esi+0x2]
c0029e9c:	5e                   	pop    esi
c0029e9d:	5f                   	pop    edi
c0029e9e:	5d                   	pop    ebp
c0029e9f:	c3                   	ret    
c0029ea0:	5b                   	pop    ebx
c0029ea1:	31 c0                	xor    eax,eax
c0029ea3:	5e                   	pop    esi
c0029ea4:	5f                   	pop    edi
c0029ea5:	5d                   	pop    ebp
c0029ea6:	c3                   	ret    
c0029ea7:	90                   	nop
c0029ea8:	b8 01 00 00 00       	mov    eax,0x1
c0029ead:	eb e1                	jmp    c0029e90 <SoundPort::buffer16(short*, int)+0x6c>
c0029eaf:	90                   	nop

c0029eb0 <SoundPort::buffer32(int*, int)>:
c0029eb0:	55                   	push   ebp
c0029eb1:	57                   	push   edi
c0029eb2:	56                   	push   esi
c0029eb3:	53                   	push   ebx
c0029eb4:	83 ec 04             	sub    esp,0x4
c0029eb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ebf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029ec3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ec6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ec9:	89 04 24             	mov    DWORD PTR [esp],eax
c0029ecc:	74 5a                	je     c0029f28 <SoundPort::buffer32(int*, int)+0x78>
c0029ece:	85 c0                	test   eax,eax
c0029ed0:	7e 56                	jle    c0029f28 <SoundPort::buffer32(int*, int)+0x78>
c0029ed2:	8d 71 01             	lea    esi,[ecx+0x1]
c0029ed5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029ed8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029edb:	8b 37                	mov    esi,DWORD PTR [edi]
c0029edd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029ee0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ee3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ee6:	74 4c                	je     c0029f34 <SoundPort::buffer32(int*, int)+0x84>
c0029ee8:	31 f6                	xor    esi,esi
c0029eea:	eb 1c                	jmp    c0029f08 <SoundPort::buffer32(int*, int)+0x58>
c0029eec:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029eef:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029ef2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029ef5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029ef8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029efc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029eff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029f02:	74 18                	je     c0029f1c <SoundPort::buffer32(int*, int)+0x6c>
c0029f04:	89 de                	mov    esi,ebx
c0029f06:	66 90                	xchg   ax,ax
c0029f08:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029f0b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029f0e:	75 dc                	jne    c0029eec <SoundPort::buffer32(int*, int)+0x3c>
c0029f10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029f13:	90                   	nop
c0029f14:	83 c4 04             	add    esp,0x4
c0029f17:	5b                   	pop    ebx
c0029f18:	5e                   	pop    esi
c0029f19:	5f                   	pop    edi
c0029f1a:	5d                   	pop    ebp
c0029f1b:	c3                   	ret    
c0029f1c:	8d 46 02             	lea    eax,[esi+0x2]
c0029f1f:	83 c4 04             	add    esp,0x4
c0029f22:	5b                   	pop    ebx
c0029f23:	5e                   	pop    esi
c0029f24:	5f                   	pop    edi
c0029f25:	5d                   	pop    ebp
c0029f26:	c3                   	ret    
c0029f27:	90                   	nop
c0029f28:	83 c4 04             	add    esp,0x4
c0029f2b:	31 c0                	xor    eax,eax
c0029f2d:	5b                   	pop    ebx
c0029f2e:	5e                   	pop    esi
c0029f2f:	5f                   	pop    edi
c0029f30:	5d                   	pop    ebp
c0029f31:	c3                   	ret    
c0029f32:	66 90                	xchg   ax,ax
c0029f34:	b8 01 00 00 00       	mov    eax,0x1
c0029f39:	eb d9                	jmp    c0029f14 <SoundPort::buffer32(int*, int)+0x64>
c0029f3b:	90                   	nop

c0029f3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029f3c:	55                   	push   ebp
c0029f3d:	57                   	push   edi
c0029f3e:	56                   	push   esi
c0029f3f:	53                   	push   ebx
c0029f40:	83 ec 0c             	sub    esp,0xc
c0029f43:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029f47:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029f4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029f4f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0029f53:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029f59:	39 03                	cmp    DWORD PTR [ebx],eax
c0029f5b:	74 13                	je     c0029f70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0029f5d:	83 ec 0c             	sub    esp,0xc
c0029f60:	68 88 36 03 c0       	push   0xc0033688
c0029f65:	e8 ec 62 ff ff       	call   c0020256 <KePanic(char const*)>
c0029f6a:	83 c4 10             	add    esp,0x10
c0029f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0029f70:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029f76:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f79:	74 11                	je     c0029f8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0029f7b:	83 ec 0c             	sub    esp,0xc
c0029f7e:	68 c7 36 03 c0       	push   0xc00336c7
c0029f83:	e8 ce 62 ff ff       	call   c0020256 <KePanic(char const*)>
c0029f88:	83 c4 10             	add    esp,0x10
c0029f8b:	90                   	nop
c0029f8c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029f92:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f95:	74 11                	je     c0029fa8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0029f97:	83 ec 0c             	sub    esp,0xc
c0029f9a:	68 c7 36 03 c0       	push   0xc00336c7
c0029f9f:	e8 b2 62 ff ff       	call   c0020256 <KePanic(char const*)>
c0029fa4:	83 c4 10             	add    esp,0x10
c0029fa7:	90                   	nop
c0029fa8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0029fab:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0029faf:	85 f6                	test   esi,esi
c0029fb1:	7e 2d                	jle    c0029fe0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0029fb3:	31 c0                	xor    eax,eax
c0029fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0029fb8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029fbb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0029fbe:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0029fc4:	85 c9                	test   ecx,ecx
c0029fc6:	0f 49 d1             	cmovns edx,ecx
c0029fc9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0029fcd:	c1 fa 0f             	sar    edx,0xf
c0029fd0:	01 d1                	add    ecx,edx
c0029fd2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0029fd6:	83 c0 01             	add    eax,0x1
c0029fd9:	39 f0                	cmp    eax,esi
c0029fdb:	75 db                	jne    c0029fb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0029fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0029fe0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029fe3:	83 ec 04             	sub    esp,0x4
c0029fe6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029fe9:	29 f0                	sub    eax,esi
c0029feb:	c1 e0 02             	shl    eax,0x2
c0029fee:	50                   	push   eax
c0029fef:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029ff2:	50                   	push   eax
c0029ff3:	52                   	push   edx
c0029ff4:	e8 d7 63 fd ff       	call   c00003d0 <memmove>
c0029ff9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029ffc:	29 f0                	sub    eax,esi
c0029ffe:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a001:	83 c4 1c             	add    esp,0x1c
c002a004:	89 f0                	mov    eax,esi
c002a006:	5b                   	pop    ebx
c002a007:	5e                   	pop    esi
c002a008:	5f                   	pop    edi
c002a009:	5d                   	pop    ebp
c002a00a:	c3                   	ret    
c002a00b:	90                   	nop

c002a00c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a00c:	55                   	push   ebp
c002a00d:	57                   	push   edi
c002a00e:	56                   	push   esi
c002a00f:	53                   	push   ebx
c002a010:	83 ec 0c             	sub    esp,0xc
c002a013:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a017:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a01b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a01f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a023:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a029:	39 03                	cmp    DWORD PTR [ebx],eax
c002a02b:	74 13                	je     c002a040 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c002a02d:	83 ec 0c             	sub    esp,0xc
c002a030:	68 a8 36 03 c0       	push   0xc00336a8
c002a035:	e8 1c 62 ff ff       	call   c0020256 <KePanic(char const*)>
c002a03a:	83 c4 10             	add    esp,0x10
c002a03d:	8d 76 00             	lea    esi,[esi+0x0]
c002a040:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a046:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a049:	74 11                	je     c002a05c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c002a04b:	83 ec 0c             	sub    esp,0xc
c002a04e:	68 e3 36 03 c0       	push   0xc00336e3
c002a053:	e8 fe 61 ff ff       	call   c0020256 <KePanic(char const*)>
c002a058:	83 c4 10             	add    esp,0x10
c002a05b:	90                   	nop
c002a05c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a062:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a065:	74 11                	je     c002a078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002a067:	83 ec 0c             	sub    esp,0xc
c002a06a:	68 e3 36 03 c0       	push   0xc00336e3
c002a06f:	e8 e2 61 ff ff       	call   c0020256 <KePanic(char const*)>
c002a074:	83 c4 10             	add    esp,0x10
c002a077:	90                   	nop
c002a078:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c002a07b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c002a07f:	85 ff                	test   edi,edi
c002a081:	7e 21                	jle    c002a0a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002a083:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a08a:	31 c0                	xor    eax,eax
c002a08c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a08f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002a092:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a095:	01 d5                	add    ebp,edx
c002a097:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c002a09a:	83 c0 04             	add    eax,0x4
c002a09d:	39 c1                	cmp    ecx,eax
c002a09f:	75 eb                	jne    c002a08c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c002a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c002a0a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a0a7:	83 ec 04             	sub    esp,0x4
c002a0aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a0ad:	29 f8                	sub    eax,edi
c002a0af:	c1 e0 02             	shl    eax,0x2
c002a0b2:	50                   	push   eax
c002a0b3:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a0b6:	50                   	push   eax
c002a0b7:	52                   	push   edx
c002a0b8:	e8 13 63 fd ff       	call   c00003d0 <memmove>
c002a0bd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a0c0:	29 f8                	sub    eax,edi
c002a0c2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a0c5:	83 c4 1c             	add    esp,0x1c
c002a0c8:	89 f8                	mov    eax,edi
c002a0ca:	5b                   	pop    ebx
c002a0cb:	5e                   	pop    esi
c002a0cc:	5f                   	pop    edi
c002a0cd:	5d                   	pop    ebp
c002a0ce:	c3                   	ret    
c002a0cf:	90                   	nop

c002a0d0 <PCI::open(int, int, void*)>:
c002a0d0:	83 ec 18             	sub    esp,0x18
c002a0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a0d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a0db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a0e1:	8b 10                	mov    edx,DWORD PTR [eax]
c002a0e3:	50                   	push   eax
c002a0e4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a0e7:	31 c0                	xor    eax,eax
c002a0e9:	83 c4 1c             	add    esp,0x1c
c002a0ec:	c3                   	ret    
c002a0ed:	90                   	nop

c002a0ee <PCI::close(int, int, void*)>:
c002a0ee:	31 c0                	xor    eax,eax
c002a0f0:	c3                   	ret    
c002a0f1:	90                   	nop

c002a0f2 <PCI::PCI()>:
c002a0f2:	83 ec 0c             	sub    esp,0xc
c002a0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0f9:	83 ec 08             	sub    esp,0x8
c002a0fc:	68 ff 36 03 c0       	push   0xc00336ff
c002a101:	50                   	push   eax
c002a102:	e8 b9 0b ff ff       	call   c001acc0 <Bus::Bus(char const*)>
c002a107:	83 c4 10             	add    esp,0x10
c002a10a:	ba a8 37 03 c0       	mov    edx,0xc00337a8
c002a10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a113:	89 10                	mov    DWORD PTR [eax],edx
c002a115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a119:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a127:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a130:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a136:	0f b6 d0             	movzx  edx,al
c002a139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a13d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a148:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a14e:	0f b6 d0             	movzx  edx,al
c002a151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a155:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a15e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a164:	8d 50 01             	lea    edx,[eax+0x1]
c002a167:	88 d1                	mov    cl,dl
c002a169:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a16d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a173:	0f b6 d0             	movzx  edx,al
c002a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a17a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a17e:	83 c9 c0             	or     ecx,0xffffffc0
c002a181:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a185:	90                   	nop
c002a186:	83 c4 0c             	add    esp,0xc
c002a189:	c3                   	ret    

c002a18a <PCI::readBAR8(unsigned int, int)>:
c002a18a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a192:	f6 c2 01             	test   dl,0x1
c002a195:	74 07                	je     c002a19e <PCI::readBAR8(unsigned int, int)+0x14>
c002a197:	83 e2 fc             	and    edx,0xfffffffc
c002a19a:	01 c2                	add    edx,eax
c002a19c:	ec                   	in     al,dx
c002a19d:	c3                   	ret    
c002a19e:	83 e2 f0             	and    edx,0xfffffff0
c002a1a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a1a4:	c3                   	ret    
c002a1a5:	90                   	nop

c002a1a6 <PCI::readBAR16(unsigned int, int)>:
c002a1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1ae:	f6 c2 01             	test   dl,0x1
c002a1b1:	74 08                	je     c002a1bb <PCI::readBAR16(unsigned int, int)+0x15>
c002a1b3:	83 e2 fc             	and    edx,0xfffffffc
c002a1b6:	01 c2                	add    edx,eax
c002a1b8:	66 ed                	in     ax,dx
c002a1ba:	c3                   	ret    
c002a1bb:	83 e2 f0             	and    edx,0xfffffff0
c002a1be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a1c2:	c3                   	ret    
c002a1c3:	90                   	nop

c002a1c4 <PCI::readBAR32(unsigned int, int)>:
c002a1c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1cc:	f6 c2 01             	test   dl,0x1
c002a1cf:	74 07                	je     c002a1d8 <PCI::readBAR32(unsigned int, int)+0x14>
c002a1d1:	83 e2 fc             	and    edx,0xfffffffc
c002a1d4:	01 c2                	add    edx,eax
c002a1d6:	ed                   	in     eax,dx
c002a1d7:	c3                   	ret    
c002a1d8:	83 e2 f0             	and    edx,0xfffffff0
c002a1db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a1de:	c3                   	ret    
c002a1df:	90                   	nop

c002a1e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a1e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1ec:	f6 c2 01             	test   dl,0x1
c002a1ef:	74 07                	je     c002a1f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a1f1:	83 e2 fc             	and    edx,0xfffffffc
c002a1f4:	01 ca                	add    edx,ecx
c002a1f6:	ee                   	out    dx,al
c002a1f7:	c3                   	ret    
c002a1f8:	83 e2 f0             	and    edx,0xfffffff0
c002a1fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a1fe:	c3                   	ret    
c002a1ff:	90                   	nop

c002a200 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a208:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a20c:	f6 c2 01             	test   dl,0x1
c002a20f:	74 08                	je     c002a219 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a211:	83 e2 fc             	and    edx,0xfffffffc
c002a214:	01 ca                	add    edx,ecx
c002a216:	66 ef                	out    dx,ax
c002a218:	c3                   	ret    
c002a219:	83 e2 f0             	and    edx,0xfffffff0
c002a21c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a220:	c3                   	ret    
c002a221:	90                   	nop

c002a222 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a222:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a22a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a22e:	f6 c2 01             	test   dl,0x1
c002a231:	74 07                	je     c002a23a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a233:	83 e2 fc             	and    edx,0xfffffffc
c002a236:	01 ca                	add    edx,ecx
c002a238:	ef                   	out    dx,eax
c002a239:	c3                   	ret    
c002a23a:	83 e2 f0             	and    edx,0xfffffff0
c002a23d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a240:	c3                   	ret    
c002a241:	90                   	nop

c002a242 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a242:	55                   	push   ebp
c002a243:	57                   	push   edi
c002a244:	56                   	push   esi
c002a245:	53                   	push   ebx
c002a246:	83 ec 0c             	sub    esp,0xc
c002a249:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a24e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a252:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a256:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a25a:	83 fe 07             	cmp    esi,0x7
c002a25d:	76 10                	jbe    c002a26f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a25f:	83 ec 0c             	sub    esp,0xc
c002a262:	68 07 37 03 c0       	push   0xc0033707
c002a267:	e8 ea 5f ff ff       	call   c0020256 <KePanic(char const*)>
c002a26c:	83 c4 10             	add    esp,0x10
c002a26f:	0f b6 db             	movzx  ebx,bl
c002a272:	83 fb 0f             	cmp    ebx,0xf
c002a275:	76 10                	jbe    c002a287 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a277:	83 ec 0c             	sub    esp,0xc
c002a27a:	68 37 37 03 c0       	push   0xc0033737
c002a27f:	e8 d2 5f ff ff       	call   c0020256 <KePanic(char const*)>
c002a284:	83 c4 10             	add    esp,0x10
c002a287:	8d 04 36             	lea    eax,[esi+esi*1]
c002a28a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a28f:	83 c8 f0             	or     eax,0xfffffff0
c002a292:	ee                   	out    dx,al
c002a293:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a298:	89 e8                	mov    eax,ebp
c002a29a:	ee                   	out    dx,al
c002a29b:	89 f9                	mov    ecx,edi
c002a29d:	89 d8                	mov    eax,ebx
c002a29f:	0f b6 d9             	movzx  ebx,cl
c002a2a2:	83 c4 0c             	add    esp,0xc
c002a2a5:	c1 e0 08             	shl    eax,0x8
c002a2a8:	83 e3 fc             	and    ebx,0xfffffffc
c002a2ab:	09 d8                	or     eax,ebx
c002a2ad:	5b                   	pop    ebx
c002a2ae:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a2b3:	5e                   	pop    esi
c002a2b4:	5f                   	pop    edi
c002a2b5:	5d                   	pop    ebp
c002a2b6:	c3                   	ret    
c002a2b7:	90                   	nop

c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a2b8:	57                   	push   edi
c002a2b9:	56                   	push   esi
c002a2ba:	53                   	push   ebx
c002a2bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a2bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a2c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a2c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a2cb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a2d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a2d5:	83 ff 01             	cmp    edi,0x1
c002a2d8:	75 3f                	jne    c002a319 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a2da:	89 de                	mov    esi,ebx
c002a2dc:	0f b6 c0             	movzx  eax,al
c002a2df:	c1 e0 10             	shl    eax,0x10
c002a2e2:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a2e8:	0f b6 c9             	movzx  ecx,cl
c002a2eb:	09 f0                	or     eax,esi
c002a2ed:	c1 e1 08             	shl    ecx,0x8
c002a2f0:	0f b6 d2             	movzx  edx,dl
c002a2f3:	c1 e2 0b             	shl    edx,0xb
c002a2f6:	09 c8                	or     eax,ecx
c002a2f8:	09 d0                	or     eax,edx
c002a2fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a2ff:	0d 00 00 00 80       	or     eax,0x80000000
c002a304:	ef                   	out    dx,eax
c002a305:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a30a:	ed                   	in     eax,dx
c002a30b:	83 e3 02             	and    ebx,0x2
c002a30e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a315:	d3 e8                	shr    eax,cl
c002a317:	eb 44                	jmp    c002a35d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a319:	83 ff 02             	cmp    edi,0x2
c002a31c:	75 2d                	jne    c002a34b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a31e:	83 ec 0c             	sub    esp,0xc
c002a321:	0f b6 fb             	movzx  edi,bl
c002a324:	57                   	push   edi
c002a325:	0f b6 c9             	movzx  ecx,cl
c002a328:	51                   	push   ecx
c002a329:	0f b6 d2             	movzx  edx,dl
c002a32c:	52                   	push   edx
c002a32d:	0f b6 c0             	movzx  eax,al
c002a330:	50                   	push   eax
c002a331:	56                   	push   esi
c002a332:	e8 0b ff ff ff       	call   c002a242 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a337:	89 c2                	mov    edx,eax
c002a339:	ed                   	in     eax,dx
c002a33a:	83 e3 02             	and    ebx,0x2
c002a33d:	83 c4 20             	add    esp,0x20
c002a340:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a347:	d3 e8                	shr    eax,cl
c002a349:	eb 12                	jmp    c002a35d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a34b:	83 ec 0c             	sub    esp,0xc
c002a34e:	68 67 37 03 c0       	push   0xc0033767
c002a353:	e8 fe 5e ff ff       	call   c0020256 <KePanic(char const*)>
c002a358:	83 c4 10             	add    esp,0x10
c002a35b:	31 c0                	xor    eax,eax
c002a35d:	5b                   	pop    ebx
c002a35e:	5e                   	pop    esi
c002a35f:	5f                   	pop    edi
c002a360:	c3                   	ret    
c002a361:	90                   	nop

c002a362 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a362:	83 ec 18             	sub    esp,0x18
c002a365:	6a 00                	push   0x0
c002a367:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a36c:	50                   	push   eax
c002a36d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a372:	50                   	push   eax
c002a373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a378:	50                   	push   eax
c002a379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a37d:	e8 36 ff ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a382:	83 c4 2c             	add    esp,0x2c
c002a385:	c3                   	ret    

c002a386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a386:	83 ec 18             	sub    esp,0x18
c002a389:	6a 0e                	push   0xe
c002a38b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a390:	50                   	push   eax
c002a391:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a396:	50                   	push   eax
c002a397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a39c:	50                   	push   eax
c002a39d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3a1:	e8 12 ff ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3a6:	83 c4 2c             	add    esp,0x2c
c002a3a9:	0f b6 c0             	movzx  eax,al
c002a3ac:	c3                   	ret    
c002a3ad:	90                   	nop

c002a3ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a3ae:	55                   	push   ebp
c002a3af:	57                   	push   edi
c002a3b0:	56                   	push   esi
c002a3b1:	53                   	push   ebx
c002a3b2:	83 ec 18             	sub    esp,0x18
c002a3b5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a3ba:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a3bf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a3c4:	6a 0a                	push   0xa
c002a3c6:	56                   	push   esi
c002a3c7:	55                   	push   ebp
c002a3c8:	57                   	push   edi
c002a3c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a3cd:	e8 e6 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3d2:	83 c4 14             	add    esp,0x14
c002a3d5:	6a 0a                	push   0xa
c002a3d7:	56                   	push   esi
c002a3d8:	55                   	push   ebp
c002a3d9:	57                   	push   edi
c002a3da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a3de:	89 c3                	mov    ebx,eax
c002a3e0:	0f b6 db             	movzx  ebx,bl
c002a3e3:	e8 d0 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3e8:	83 c4 2c             	add    esp,0x2c
c002a3eb:	25 00 ff 00 00       	and    eax,0xff00
c002a3f0:	09 d8                	or     eax,ebx
c002a3f2:	5b                   	pop    ebx
c002a3f3:	5e                   	pop    esi
c002a3f4:	5f                   	pop    edi
c002a3f5:	5d                   	pop    ebp
c002a3f6:	c3                   	ret    
c002a3f7:	90                   	nop

c002a3f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a3f8:	83 ec 18             	sub    esp,0x18
c002a3fb:	6a 08                	push   0x8
c002a3fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a402:	50                   	push   eax
c002a403:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a408:	50                   	push   eax
c002a409:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a40e:	50                   	push   eax
c002a40f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a413:	e8 a0 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a418:	83 c4 2c             	add    esp,0x2c
c002a41b:	0f b6 c4             	movzx  eax,ah
c002a41e:	c3                   	ret    
c002a41f:	90                   	nop

c002a420 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a420:	83 ec 18             	sub    esp,0x18
c002a423:	6a 08                	push   0x8
c002a425:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a42a:	50                   	push   eax
c002a42b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a430:	50                   	push   eax
c002a431:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a436:	50                   	push   eax
c002a437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a43b:	e8 78 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a440:	83 c4 2c             	add    esp,0x2c
c002a443:	c3                   	ret    

c002a444 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a444:	83 ec 18             	sub    esp,0x18
c002a447:	6a 3c                	push   0x3c
c002a449:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a44e:	50                   	push   eax
c002a44f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a454:	50                   	push   eax
c002a455:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a45a:	50                   	push   eax
c002a45b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a45f:	e8 54 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a464:	83 c4 2c             	add    esp,0x2c
c002a467:	c3                   	ret    

c002a468 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a468:	83 ec 18             	sub    esp,0x18
c002a46b:	6a 18                	push   0x18
c002a46d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a472:	50                   	push   eax
c002a473:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a478:	50                   	push   eax
c002a479:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a47e:	50                   	push   eax
c002a47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a483:	e8 30 fe ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a488:	83 c4 2c             	add    esp,0x2c
c002a48b:	0f b6 c4             	movzx  eax,ah
c002a48e:	c3                   	ret    
c002a48f:	90                   	nop

c002a490 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a490:	55                   	push   ebp
c002a491:	57                   	push   edi
c002a492:	56                   	push   esi
c002a493:	53                   	push   ebx
c002a494:	83 ec 28             	sub    esp,0x28
c002a497:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a49b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a4a0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a4a5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a4aa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a4b1:	8d 43 12             	lea    eax,[ebx+0x12]
c002a4b4:	83 c3 10             	add    ebx,0x10
c002a4b7:	0f b6 c0             	movzx  eax,al
c002a4ba:	0f b6 db             	movzx  ebx,bl
c002a4bd:	50                   	push   eax
c002a4be:	51                   	push   ecx
c002a4bf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a4c3:	57                   	push   edi
c002a4c4:	55                   	push   ebp
c002a4c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a4c9:	e8 ea fd ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4ce:	83 c4 14             	add    esp,0x14
c002a4d1:	53                   	push   ebx
c002a4d2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a4d6:	51                   	push   ecx
c002a4d7:	89 c6                	mov    esi,eax
c002a4d9:	57                   	push   edi
c002a4da:	55                   	push   ebp
c002a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a4df:	c1 e6 10             	shl    esi,0x10
c002a4e2:	e8 d1 fd ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4e7:	83 c4 3c             	add    esp,0x3c
c002a4ea:	5b                   	pop    ebx
c002a4eb:	0f b7 c0             	movzx  eax,ax
c002a4ee:	09 f0                	or     eax,esi
c002a4f0:	5e                   	pop    esi
c002a4f1:	5f                   	pop    edi
c002a4f2:	5d                   	pop    ebp
c002a4f3:	c3                   	ret    

c002a4f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a4f4:	55                   	push   ebp
c002a4f5:	57                   	push   edi
c002a4f6:	56                   	push   esi
c002a4f7:	53                   	push   ebx
c002a4f8:	83 ec 0c             	sub    esp,0xc
c002a4fb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a4ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a503:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a507:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a50b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a511:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a515:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a519:	83 f9 01             	cmp    ecx,0x1
c002a51c:	75 5d                	jne    c002a57b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a51e:	0f b6 c8             	movzx  ecx,al
c002a521:	89 f0                	mov    eax,esi
c002a523:	25 fc 00 00 00       	and    eax,0xfc
c002a528:	0f b6 d2             	movzx  edx,dl
c002a52b:	c1 e1 10             	shl    ecx,0x10
c002a52e:	c1 e2 0b             	shl    edx,0xb
c002a531:	09 c1                	or     ecx,eax
c002a533:	89 f8                	mov    eax,edi
c002a535:	0f b6 f8             	movzx  edi,al
c002a538:	c1 e7 08             	shl    edi,0x8
c002a53b:	09 f9                	or     ecx,edi
c002a53d:	09 d1                	or     ecx,edx
c002a53f:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a544:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a54a:	89 c8                	mov    eax,ecx
c002a54c:	ef                   	out    dx,eax
c002a54d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a552:	ed                   	in     eax,dx
c002a553:	83 e6 02             	and    esi,0x2
c002a556:	0f b7 db             	movzx  ebx,bx
c002a559:	74 0a                	je     c002a565 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a55b:	c1 e3 10             	shl    ebx,0x10
c002a55e:	0f b7 d0             	movzx  edx,ax
c002a561:	09 d3                	or     ebx,edx
c002a563:	eb 05                	jmp    c002a56a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a565:	66 31 c0             	xor    ax,ax
c002a568:	09 c3                	or     ebx,eax
c002a56a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a56f:	89 c8                	mov    eax,ecx
c002a571:	ef                   	out    dx,eax
c002a572:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a577:	89 d8                	mov    eax,ebx
c002a579:	eb 41                	jmp    c002a5bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a57b:	83 f9 02             	cmp    ecx,0x2
c002a57e:	75 45                	jne    c002a5c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a580:	89 f1                	mov    ecx,esi
c002a582:	83 ec 0c             	sub    esp,0xc
c002a585:	0f b6 f1             	movzx  esi,cl
c002a588:	89 f9                	mov    ecx,edi
c002a58a:	56                   	push   esi
c002a58b:	0f b6 f9             	movzx  edi,cl
c002a58e:	57                   	push   edi
c002a58f:	0f b6 d2             	movzx  edx,dl
c002a592:	52                   	push   edx
c002a593:	0f b6 c0             	movzx  eax,al
c002a596:	50                   	push   eax
c002a597:	55                   	push   ebp
c002a598:	e8 a5 fc ff ff       	call   c002a242 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a59d:	89 c2                	mov    edx,eax
c002a59f:	ed                   	in     eax,dx
c002a5a0:	83 c4 20             	add    esp,0x20
c002a5a3:	f6 c2 02             	test   dl,0x2
c002a5a6:	0f b7 db             	movzx  ebx,bx
c002a5a9:	74 0c                	je     c002a5b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a5ab:	0f b7 c8             	movzx  ecx,ax
c002a5ae:	89 d8                	mov    eax,ebx
c002a5b0:	c1 e0 10             	shl    eax,0x10
c002a5b3:	09 c8                	or     eax,ecx
c002a5b5:	eb 05                	jmp    c002a5bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a5b7:	66 31 c0             	xor    ax,ax
c002a5ba:	09 d8                	or     eax,ebx
c002a5bc:	ef                   	out    dx,eax
c002a5bd:	83 c4 0c             	add    esp,0xc
c002a5c0:	5b                   	pop    ebx
c002a5c1:	5e                   	pop    esi
c002a5c2:	5f                   	pop    edi
c002a5c3:	5d                   	pop    ebp
c002a5c4:	c3                   	ret    
c002a5c5:	c7 44 24 20 67 37 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033767
c002a5cd:	83 c4 0c             	add    esp,0xc
c002a5d0:	5b                   	pop    ebx
c002a5d1:	5e                   	pop    esi
c002a5d2:	5f                   	pop    edi
c002a5d3:	5d                   	pop    ebp
c002a5d4:	e9 7d 5c ff ff       	jmp    c0020256 <KePanic(char const*)>
c002a5d9:	90                   	nop

c002a5da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a5da:	55                   	push   ebp
c002a5db:	57                   	push   edi
c002a5dc:	56                   	push   esi
c002a5dd:	53                   	push   ebx
c002a5de:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a5e4:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a5eb:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a5f2:	0f 85 bd 00 00 00    	jne    c002a6b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a5f8:	83 ec 0c             	sub    esp,0xc
c002a5fb:	68 14 01 00 00       	push   0x114
c002a600:	e8 92 be fe ff       	call   c0016497 <malloc>
c002a605:	83 c4 0c             	add    esp,0xc
c002a608:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a60e:	68 6d 37 03 c0       	push   0xc003376d
c002a613:	50                   	push   eax
c002a614:	89 c3                	mov    ebx,eax
c002a616:	e8 cb fe fe ff       	call   c001a4e6 <File::File(char const*, Process*)>
c002a61b:	83 c4 10             	add    esp,0x10
c002a61e:	85 db                	test   ebx,ebx
c002a620:	0f 84 6b 02 00 00    	je     c002a891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a626:	57                   	push   edi
c002a627:	57                   	push   edi
c002a628:	6a 01                	push   0x1
c002a62a:	53                   	push   ebx
c002a62b:	e8 d4 fe fe ff       	call   c001a504 <File::open(FileOpenMode)>
c002a630:	83 c4 10             	add    esp,0x10
c002a633:	85 c0                	test   eax,eax
c002a635:	0f 85 56 02 00 00    	jne    c002a891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a63b:	52                   	push   edx
c002a63c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a640:	50                   	push   eax
c002a641:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a645:	50                   	push   eax
c002a646:	53                   	push   ebx
c002a647:	e8 ba 01 ff ff       	call   c001a806 <File::stat(unsigned long long*, bool*)>
c002a64c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a650:	40                   	inc    eax
c002a651:	89 04 24             	mov    DWORD PTR [esp],eax
c002a654:	e8 3e be fe ff       	call   c0016497 <malloc>
c002a659:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a65d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a661:	59                   	pop    ecx
c002a662:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a667:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a669:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a66d:	51                   	push   ecx
c002a66e:	50                   	push   eax
c002a66f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a673:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a677:	53                   	push   ebx
c002a678:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a67b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a67f:	83 c4 20             	add    esp,0x20
c002a682:	89 c8                	mov    eax,ecx
c002a684:	99                   	cdq    
c002a685:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a689:	0f 85 02 02 00 00    	jne    c002a891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a68f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a693:	0f 85 f8 01 00 00    	jne    c002a891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a699:	83 ec 0c             	sub    esp,0xc
c002a69c:	53                   	push   ebx
c002a69d:	e8 c0 fe fe ff       	call   c001a562 <File::close()>
c002a6a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a6a6:	83 c4 10             	add    esp,0x10
c002a6a9:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a6b0:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a6b5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a6bd:	31 c9                	xor    ecx,ecx
c002a6bf:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a6c6:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a6cc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a6d3:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a6d9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a6de:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a6e6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a6eb:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a6f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a6f7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a6ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a703:	39 cd                	cmp    ebp,ecx
c002a705:	0f 8e 86 01 00 00    	jle    c002a891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a70b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a70e:	d4 40                	aam    0x40
c002a710:	d5 39                	aad    0x39
c002a712:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a716:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a71a:	d4 40                	aam    0x40
c002a71c:	d5 39                	aad    0x39
c002a71e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a722:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a726:	d4 40                	aam    0x40
c002a728:	d5 39                	aad    0x39
c002a72a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a72e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a732:	d4 40                	aam    0x40
c002a734:	d5 39                	aad    0x39
c002a736:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a73a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a73e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a742:	3c 56                	cmp    al,0x56
c002a744:	74 47                	je     c002a78d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a746:	d4 40                	aam    0x40
c002a748:	d5 39                	aad    0x39
c002a74a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a74d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a751:	0f b6 db             	movzx  ebx,bl
c002a754:	c1 e3 04             	shl    ebx,0x4
c002a757:	d4 40                	aam    0x40
c002a759:	d5 39                	aad    0x39
c002a75b:	83 e8 30             	sub    eax,0x30
c002a75e:	0f b6 c0             	movzx  eax,al
c002a761:	09 c3                	or     ebx,eax
c002a763:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a767:	c1 e3 04             	shl    ebx,0x4
c002a76a:	d4 40                	aam    0x40
c002a76c:	d5 39                	aad    0x39
c002a76e:	83 e8 30             	sub    eax,0x30
c002a771:	0f b6 c0             	movzx  eax,al
c002a774:	09 c3                	or     ebx,eax
c002a776:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002a77a:	c1 e3 04             	shl    ebx,0x4
c002a77d:	d4 40                	aam    0x40
c002a77f:	d5 39                	aad    0x39
c002a781:	83 e8 30             	sub    eax,0x30
c002a784:	0f b6 c0             	movzx  eax,al
c002a787:	09 c3                	or     ebx,eax
c002a789:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002a78d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002a791:	80 fb 58             	cmp    bl,0x58
c002a794:	74 49                	je     c002a7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002a796:	88 d8                	mov    al,bl
c002a798:	d4 40                	aam    0x40
c002a79a:	d5 39                	aad    0x39
c002a79c:	83 e8 30             	sub    eax,0x30
c002a79f:	0f b6 f8             	movzx  edi,al
c002a7a2:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002a7a6:	c1 e7 04             	shl    edi,0x4
c002a7a9:	d4 40                	aam    0x40
c002a7ab:	d5 39                	aad    0x39
c002a7ad:	83 e8 30             	sub    eax,0x30
c002a7b0:	0f b6 c0             	movzx  eax,al
c002a7b3:	09 c7                	or     edi,eax
c002a7b5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002a7b9:	c1 e7 04             	shl    edi,0x4
c002a7bc:	d4 40                	aam    0x40
c002a7be:	d5 39                	aad    0x39
c002a7c0:	83 e8 30             	sub    eax,0x30
c002a7c3:	0f b6 c0             	movzx  eax,al
c002a7c6:	09 c7                	or     edi,eax
c002a7c8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002a7cc:	c1 e7 04             	shl    edi,0x4
c002a7cf:	d4 40                	aam    0x40
c002a7d1:	d5 39                	aad    0x39
c002a7d3:	83 e8 30             	sub    eax,0x30
c002a7d6:	0f b6 c0             	movzx  eax,al
c002a7d9:	09 c7                	or     edi,eax
c002a7db:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002a7df:	8d 41 10             	lea    eax,[ecx+0x10]
c002a7e2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a7e6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002a7ea:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a7ee:	83 f9 0a             	cmp    ecx,0xa
c002a7f1:	74 07                	je     c002a7fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002a7f3:	47                   	inc    edi
c002a7f4:	39 c5                	cmp    ebp,eax
c002a7f6:	75 16                	jne    c002a80e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002a7f8:	89 e8                	mov    eax,ebp
c002a7fa:	83 f9 0a             	cmp    ecx,0xa
c002a7fd:	0f 94 c1             	sete   cl
c002a800:	0f b6 c9             	movzx  ecx,cl
c002a803:	01 c1                	add    ecx,eax
c002a805:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a80a:	75 0f                	jne    c002a81b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002a80c:	eb 1c                	jmp    c002a82a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002a80e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a811:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002a815:	40                   	inc    eax
c002a816:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002a819:	eb cb                	jmp    c002a7e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002a81b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a81f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a824:	0f 85 d9 fe ff ff    	jne    c002a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a82a:	80 fb 58             	cmp    bl,0x58
c002a82d:	74 10                	je     c002a83f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002a82f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a834:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002a839:	0f 85 c4 fe ff ff    	jne    c002a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a83f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a843:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002a847:	83 e8 30             	sub    eax,0x30
c002a84a:	c1 e0 04             	shl    eax,0x4
c002a84d:	83 eb 30             	sub    ebx,0x30
c002a850:	09 d8                	or     eax,ebx
c002a852:	0f b6 c0             	movzx  eax,al
c002a855:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a859:	0f 85 a4 fe ff ff    	jne    c002a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a85f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a863:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a867:	83 e8 30             	sub    eax,0x30
c002a86a:	c1 e0 04             	shl    eax,0x4
c002a86d:	83 eb 30             	sub    ebx,0x30
c002a870:	09 d8                	or     eax,ebx
c002a872:	0f b6 c0             	movzx  eax,al
c002a875:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a879:	0f 85 84 fe ff ff    	jne    c002a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a87f:	50                   	push   eax
c002a880:	50                   	push   eax
c002a881:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a885:	50                   	push   eax
c002a886:	56                   	push   esi
c002a887:	e8 c4 5d fd ff       	call   c0000650 <strcpy>
c002a88c:	83 c4 10             	add    esp,0x10
c002a88f:	eb 05                	jmp    c002a896 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002a891:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002a894:	31 f6                	xor    esi,esi
c002a896:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a89c:	89 f0                	mov    eax,esi
c002a89e:	5b                   	pop    ebx
c002a89f:	5e                   	pop    esi
c002a8a0:	5f                   	pop    edi
c002a8a1:	5d                   	pop    ebp
c002a8a2:	c3                   	ret    
c002a8a3:	90                   	nop

c002a8a4 <PCI::checkBus(unsigned char)>:
c002a8a4:	56                   	push   esi
c002a8a5:	53                   	push   ebx
c002a8a6:	31 db                	xor    ebx,ebx
c002a8a8:	51                   	push   ecx
c002a8a9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a8ae:	52                   	push   edx
c002a8af:	53                   	push   ebx
c002a8b0:	43                   	inc    ebx
c002a8b1:	56                   	push   esi
c002a8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a8b6:	e8 0f 03 00 00       	call   c002abca <PCI::checkDevice(unsigned char, unsigned char)>
c002a8bb:	83 c4 10             	add    esp,0x10
c002a8be:	83 fb 20             	cmp    ebx,0x20
c002a8c1:	75 eb                	jne    c002a8ae <PCI::checkBus(unsigned char)+0xa>
c002a8c3:	58                   	pop    eax
c002a8c4:	5b                   	pop    ebx
c002a8c5:	5e                   	pop    esi
c002a8c6:	c3                   	ret    
c002a8c7:	90                   	nop

c002a8c8 <PCI::foundDevice(PCIDeviceInfo)>:
c002a8c8:	55                   	push   ebp
c002a8c9:	57                   	push   edi
c002a8ca:	56                   	push   esi
c002a8cb:	53                   	push   ebx
c002a8cc:	83 ec 1c             	sub    esp,0x1c
c002a8cf:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a8d4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a8d8:	3d ff ff 00 00       	cmp    eax,0xffff
c002a8dd:	0f 84 63 01 00 00    	je     c002aa46 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a8e3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a8e8:	66 3d 06 04          	cmp    ax,0x406
c002a8ec:	75 2c                	jne    c002a91a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a8ee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a8f3:	50                   	push   eax
c002a8f4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a8f9:	50                   	push   eax
c002a8fa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a8ff:	50                   	push   eax
c002a900:	53                   	push   ebx
c002a901:	e8 62 fb ff ff       	call   c002a468 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a906:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a90a:	0f b6 c0             	movzx  eax,al
c002a90d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a911:	83 c4 2c             	add    esp,0x2c
c002a914:	5b                   	pop    ebx
c002a915:	5e                   	pop    esi
c002a916:	5f                   	pop    edi
c002a917:	5d                   	pop    ebp
c002a918:	eb 8a                	jmp    c002a8a4 <PCI::checkBus(unsigned char)>
c002a91a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002a91f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a925:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002a929:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a92d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002a931:	85 d2                	test   edx,edx
c002a933:	74 34                	je     c002a969 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002a935:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a938:	85 c9                	test   ecx,ecx
c002a93a:	74 29                	je     c002a965 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a93c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002a942:	31 f5                	xor    ebp,esi
c002a944:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002a94a:	75 19                	jne    c002a965 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a94c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002a952:	75 11                	jne    c002a965 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a954:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a95b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002a95f:	0f 84 e1 00 00 00    	je     c002aa46 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a965:	8b 12                	mov    edx,DWORD PTR [edx]
c002a967:	eb c8                	jmp    c002a931 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a969:	3d 01 06 00 00       	cmp    eax,0x601
c002a96e:	75 19                	jne    c002a989 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002a970:	83 ec 0c             	sub    esp,0xc
c002a973:	68 64 01 00 00       	push   0x164
c002a978:	e8 1a bb fe ff       	call   c0016497 <malloc>
c002a97d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a980:	89 c5                	mov    ebp,eax
c002a982:	e8 ab 0e 00 00       	call   c002b832 <SATABus::SATABus()>
c002a987:	eb 1e                	jmp    c002a9a7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002a989:	3d 01 01 00 00       	cmp    eax,0x101
c002a98e:	75 62                	jne    c002a9f2 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002a990:	83 ec 0c             	sub    esp,0xc
c002a993:	68 70 02 00 00       	push   0x270
c002a998:	e8 fa ba fe ff       	call   c0016497 <malloc>
c002a99d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a9a0:	89 c5                	mov    ebp,eax
c002a9a2:	e8 f3 02 00 00       	call   c002ac9a <IDE::IDE()>
c002a9a7:	58                   	pop    eax
c002a9a8:	5a                   	pop    edx
c002a9a9:	55                   	push   ebp
c002a9aa:	53                   	push   ebx
c002a9ab:	e8 b4 09 ff ff       	call   c001b364 <Device::addChild(Device*)>
c002a9b0:	83 ec 1c             	sub    esp,0x1c
c002a9b3:	b9 09 00 00 00       	mov    ecx,0x9
c002a9b8:	fc                   	cld    
c002a9b9:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a9bd:	89 e7                	mov    edi,esp
c002a9bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a9c1:	55                   	push   ebp
c002a9c2:	e8 e3 08 ff ff       	call   c001b2aa <Device::preOpenPCI(PCIDeviceInfo)>
c002a9c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a9ca:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a9ce:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a9d6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a9de:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a9e6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a9e9:	83 c4 4c             	add    esp,0x4c
c002a9ec:	5b                   	pop    ebx
c002a9ed:	5e                   	pop    esi
c002a9ee:	5f                   	pop    edi
c002a9ef:	5d                   	pop    ebp
c002a9f0:	ff e0                	jmp    eax
c002a9f2:	83 ec 0c             	sub    esp,0xc
c002a9f5:	68 58 01 00 00       	push   0x158
c002a9fa:	e8 98 ba fe ff       	call   c0016497 <malloc>
c002a9ff:	5a                   	pop    edx
c002aa00:	59                   	pop    ecx
c002aa01:	68 86 37 03 c0       	push   0xc0033786
c002aa06:	50                   	push   eax
c002aa07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002aa0b:	e8 08 0c ff ff       	call   c001b618 <DriverlessDevice::DriverlessDevice(char const*)>
c002aa10:	5e                   	pop    esi
c002aa11:	5f                   	pop    edi
c002aa12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002aa16:	50                   	push   eax
c002aa17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002aa1b:	53                   	push   ebx
c002aa1c:	e8 43 09 ff ff       	call   c001b364 <Device::addChild(Device*)>
c002aa21:	83 c4 10             	add    esp,0x10
c002aa24:	b9 09 00 00 00       	mov    ecx,0x9
c002aa29:	fc                   	cld    
c002aa2a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002aa2e:	89 fe                	mov    esi,edi
c002aa30:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aa32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002aa36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aa3a:	83 c4 1c             	add    esp,0x1c
c002aa3d:	5b                   	pop    ebx
c002aa3e:	5e                   	pop    esi
c002aa3f:	5f                   	pop    edi
c002aa40:	5d                   	pop    ebp
c002aa41:	e9 64 08 ff ff       	jmp    c001b2aa <Device::preOpenPCI(PCIDeviceInfo)>
c002aa46:	83 c4 1c             	add    esp,0x1c
c002aa49:	5b                   	pop    ebx
c002aa4a:	5e                   	pop    esi
c002aa4b:	5f                   	pop    edi
c002aa4c:	5d                   	pop    ebp
c002aa4d:	c3                   	ret    

c002aa4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002aa4e:	55                   	push   ebp
c002aa4f:	57                   	push   edi
c002aa50:	56                   	push   esi
c002aa51:	53                   	push   ebx
c002aa52:	83 ec 68             	sub    esp,0x68
c002aa55:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002aa5c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002aa60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002aa64:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002aa6b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002aa70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aa74:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002aa7b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002aa80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aa84:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002aa89:	6a 0c                	push   0xc
c002aa8b:	57                   	push   edi
c002aa8c:	53                   	push   ebx
c002aa8d:	56                   	push   esi
c002aa8e:	55                   	push   ebp
c002aa8f:	e8 24 f8 ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa94:	83 c4 20             	add    esp,0x20
c002aa97:	57                   	push   edi
c002aa98:	53                   	push   ebx
c002aa99:	56                   	push   esi
c002aa9a:	55                   	push   ebp
c002aa9b:	e8 0e f9 ff ff       	call   c002a3ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002aaa0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002aaa5:	57                   	push   edi
c002aaa6:	53                   	push   ebx
c002aaa7:	56                   	push   esi
c002aaa8:	55                   	push   ebp
c002aaa9:	e8 96 f9 ff ff       	call   c002a444 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002aaae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002aab2:	83 c4 14             	add    esp,0x14
c002aab5:	6a 3c                	push   0x3c
c002aab7:	57                   	push   edi
c002aab8:	53                   	push   ebx
c002aab9:	56                   	push   esi
c002aaba:	55                   	push   ebp
c002aabb:	e8 f8 f7 ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aac0:	0f b6 c4             	movzx  eax,ah
c002aac3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aac7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002aacb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002aacf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002aad4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002aada:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002aae0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aae4:	83 c4 20             	add    esp,0x20
c002aae7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002aaec:	74 30                	je     c002ab1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aaee:	31 c0                	xor    eax,eax
c002aaf0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002aaf4:	7e 28                	jle    c002ab1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aaf6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002aafe:	39 cb                	cmp    ebx,ecx
c002ab00:	75 19                	jne    c002ab1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ab02:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002ab0a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002ab0e:	75 0b                	jne    c002ab1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ab10:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002ab17:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002ab1b:	40                   	inc    eax
c002ab1c:	eb d2                	jmp    c002aaf0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002ab1e:	31 d2                	xor    edx,edx
c002ab20:	83 ec 0c             	sub    esp,0xc
c002ab23:	57                   	push   edi
c002ab24:	53                   	push   ebx
c002ab25:	56                   	push   esi
c002ab26:	52                   	push   edx
c002ab27:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002ab2b:	55                   	push   ebp
c002ab2c:	e8 5f f9 ff ff       	call   c002a490 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002ab35:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002ab39:	42                   	inc    edx
c002ab3a:	83 c4 20             	add    esp,0x20
c002ab3d:	83 fa 06             	cmp    edx,0x6
c002ab40:	75 de                	jne    c002ab20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002ab42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002ab46:	83 ec 0c             	sub    esp,0xc
c002ab49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ab4d:	c1 e2 08             	shl    edx,0x8
c002ab50:	0f b6 c4             	movzx  eax,ah
c002ab53:	09 d0                	or     eax,edx
c002ab55:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002ab5a:	6a 02                	push   0x2
c002ab5c:	57                   	push   edi
c002ab5d:	53                   	push   ebx
c002ab5e:	56                   	push   esi
c002ab5f:	55                   	push   ebp
c002ab60:	e8 53 f7 ff ff       	call   c002a2b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab65:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ab6a:	83 c4 20             	add    esp,0x20
c002ab6d:	57                   	push   edi
c002ab6e:	53                   	push   ebx
c002ab6f:	56                   	push   esi
c002ab70:	55                   	push   ebp
c002ab71:	e8 82 f8 ff ff       	call   c002a3f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ab76:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ab7a:	57                   	push   edi
c002ab7b:	53                   	push   ebx
c002ab7c:	56                   	push   esi
c002ab7d:	55                   	push   ebp
c002ab7e:	e8 df f7 ff ff       	call   c002a362 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab83:	b9 09 00 00 00       	mov    ecx,0x9
c002ab88:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ab8d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ab91:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ab95:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ab99:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ab9d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002aba1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002aba5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002aba9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002abad:	83 ec 0c             	sub    esp,0xc
c002abb0:	fc                   	cld    
c002abb1:	8d 74 24 58          	lea    esi,[esp+0x58]
c002abb5:	89 e7                	mov    edi,esp
c002abb7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002abb9:	55                   	push   ebp
c002abba:	e8 09 fd ff ff       	call   c002a8c8 <PCI::foundDevice(PCIDeviceInfo)>
c002abbf:	81 c4 8c 00 00 00    	add    esp,0x8c
c002abc5:	5b                   	pop    ebx
c002abc6:	5e                   	pop    esi
c002abc7:	5f                   	pop    edi
c002abc8:	5d                   	pop    ebp
c002abc9:	c3                   	ret    

c002abca <PCI::checkDevice(unsigned char, unsigned char)>:
c002abca:	55                   	push   ebp
c002abcb:	57                   	push   edi
c002abcc:	56                   	push   esi
c002abcd:	53                   	push   ebx
c002abce:	83 ec 0c             	sub    esp,0xc
c002abd1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002abd6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002abdb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002abdf:	6a 00                	push   0x0
c002abe1:	56                   	push   esi
c002abe2:	57                   	push   edi
c002abe3:	55                   	push   ebp
c002abe4:	e8 79 f7 ff ff       	call   c002a362 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002abe9:	6a 00                	push   0x0
c002abeb:	56                   	push   esi
c002abec:	57                   	push   edi
c002abed:	55                   	push   ebp
c002abee:	e8 5b fe ff ff       	call   c002aa4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002abf3:	83 c4 20             	add    esp,0x20
c002abf6:	6a 00                	push   0x0
c002abf8:	56                   	push   esi
c002abf9:	57                   	push   edi
c002abfa:	55                   	push   ebp
c002abfb:	e8 86 f7 ff ff       	call   c002a386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ac00:	83 c4 10             	add    esp,0x10
c002ac03:	a8 80                	test   al,0x80
c002ac05:	74 2d                	je     c002ac34 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ac07:	bb 01 00 00 00       	mov    ebx,0x1
c002ac0c:	53                   	push   ebx
c002ac0d:	56                   	push   esi
c002ac0e:	57                   	push   edi
c002ac0f:	55                   	push   ebp
c002ac10:	e8 4d f7 ff ff       	call   c002a362 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac15:	83 c4 10             	add    esp,0x10
c002ac18:	0f b7 c0             	movzx  eax,ax
c002ac1b:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac20:	74 0c                	je     c002ac2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ac22:	53                   	push   ebx
c002ac23:	56                   	push   esi
c002ac24:	57                   	push   edi
c002ac25:	55                   	push   ebp
c002ac26:	e8 23 fe ff ff       	call   c002aa4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ac2b:	83 c4 10             	add    esp,0x10
c002ac2e:	43                   	inc    ebx
c002ac2f:	83 fb 08             	cmp    ebx,0x8
c002ac32:	75 d8                	jne    c002ac0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ac34:	83 c4 0c             	add    esp,0xc
c002ac37:	5b                   	pop    ebx
c002ac38:	5e                   	pop    esi
c002ac39:	5f                   	pop    edi
c002ac3a:	5d                   	pop    ebp
c002ac3b:	c3                   	ret    

c002ac3c <PCI::detect()>:
c002ac3c:	56                   	push   esi
c002ac3d:	53                   	push   ebx
c002ac3e:	53                   	push   ebx
c002ac3f:	31 db                	xor    ebx,ebx
c002ac41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ac45:	6a 00                	push   0x0
c002ac47:	6a 00                	push   0x0
c002ac49:	6a 00                	push   0x0
c002ac4b:	56                   	push   esi
c002ac4c:	e8 35 f7 ff ff       	call   c002a386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ac51:	83 c4 10             	add    esp,0x10
c002ac54:	a8 80                	test   al,0x80
c002ac56:	75 21                	jne    c002ac79 <PCI::detect()+0x3d>
c002ac58:	51                   	push   ecx
c002ac59:	51                   	push   ecx
c002ac5a:	6a 00                	push   0x0
c002ac5c:	56                   	push   esi
c002ac5d:	e8 42 fc ff ff       	call   c002a8a4 <PCI::checkBus(unsigned char)>
c002ac62:	83 c4 10             	add    esp,0x10
c002ac65:	eb 2a                	jmp    c002ac91 <PCI::detect()+0x55>
c002ac67:	52                   	push   edx
c002ac68:	52                   	push   edx
c002ac69:	53                   	push   ebx
c002ac6a:	43                   	inc    ebx
c002ac6b:	56                   	push   esi
c002ac6c:	e8 33 fc ff ff       	call   c002a8a4 <PCI::checkBus(unsigned char)>
c002ac71:	83 c4 10             	add    esp,0x10
c002ac74:	83 fb 08             	cmp    ebx,0x8
c002ac77:	74 18                	je     c002ac91 <PCI::detect()+0x55>
c002ac79:	53                   	push   ebx
c002ac7a:	6a 00                	push   0x0
c002ac7c:	6a 00                	push   0x0
c002ac7e:	56                   	push   esi
c002ac7f:	e8 de f6 ff ff       	call   c002a362 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac84:	83 c4 10             	add    esp,0x10
c002ac87:	0f b7 c0             	movzx  eax,ax
c002ac8a:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac8f:	74 d6                	je     c002ac67 <PCI::detect()+0x2b>
c002ac91:	58                   	pop    eax
c002ac92:	5b                   	pop    ebx
c002ac93:	5e                   	pop    esi
c002ac94:	c3                   	ret    
c002ac95:	90                   	nop

c002ac96 <IDE::close(int, int, void*)>:
c002ac96:	83 c8 ff             	or     eax,0xffffffff
c002ac99:	c3                   	ret    

c002ac9a <IDE::IDE()>:
c002ac9a:	83 ec 0c             	sub    esp,0xc
c002ac9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aca1:	83 ec 08             	sub    esp,0x8
c002aca4:	68 cc 37 03 c0       	push   0xc00337cc
c002aca9:	50                   	push   eax
c002acaa:	e8 0d 0a ff ff       	call   c001b6bc <HardDiskController::HardDiskController(char const*)>
c002acaf:	83 c4 10             	add    esp,0x10
c002acb2:	ba 5c 38 03 c0       	mov    edx,0xc003385c
c002acb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002acbb:	89 10                	mov    DWORD PTR [eax],edx
c002acbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002acc1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002acc8:	90                   	nop
c002acc9:	83 c4 0c             	add    esp,0xc
c002accc:	c3                   	ret    
c002accd:	90                   	nop

c002acce <IDE::prepareInterrupt(unsigned char)>:
c002acce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002acd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002acd7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002acdf:	c3                   	ret    

c002ace0 <selectDrive(unsigned char, unsigned char)>:
c002ace0:	c3                   	ret    
c002ace1:	90                   	nop

c002ace2 <IDE::getBase(unsigned char)>:
c002ace2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ace7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002aceb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002acf3:	c3                   	ret    

c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002acf4:	55                   	push   ebp
c002acf5:	57                   	push   edi
c002acf6:	56                   	push   esi
c002acf7:	53                   	push   ebx
c002acf8:	83 ec 1c             	sub    esp,0x1c
c002acfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002acff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002ad03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ad07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ad0b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ad0e:	80 f9 03             	cmp    cl,0x3
c002ad11:	77 4f                	ja     c002ad62 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ad13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ad17:	0f b6 f2             	movzx  esi,dl
c002ad1a:	0f b6 db             	movzx  ebx,bl
c002ad1d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002ad20:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002ad25:	80 ca 80             	or     dl,0x80
c002ad28:	52                   	push   edx
c002ad29:	6a 0c                	push   0xc
c002ad2b:	56                   	push   esi
c002ad2c:	57                   	push   edi
c002ad2d:	e8 c2 ff ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad32:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002ad37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002ad3b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002ad3f:	ee                   	out    dx,al
c002ad40:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002ad45:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002ad49:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002ad4d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ad55:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ad59:	83 c4 2c             	add    esp,0x2c
c002ad5c:	5b                   	pop    ebx
c002ad5d:	5e                   	pop    esi
c002ad5e:	5f                   	pop    edi
c002ad5f:	5d                   	pop    ebp
c002ad60:	eb 92                	jmp    c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad62:	0f b6 cb             	movzx  ecx,bl
c002ad65:	83 f9 07             	cmp    ecx,0x7
c002ad68:	77 12                	ja     c002ad7c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ad6a:	0f b6 d2             	movzx  edx,dl
c002ad6d:	0f b6 db             	movzx  ebx,bl
c002ad70:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002ad78:	01 da                	add    edx,ebx
c002ad7a:	eb 2f                	jmp    c002adab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad7c:	83 f9 0d             	cmp    ecx,0xd
c002ad7f:	77 13                	ja     c002ad94 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ad81:	0f b6 d2             	movzx  edx,dl
c002ad84:	0f b6 db             	movzx  ebx,bl
c002ad87:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002ad8e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ad92:	eb 17                	jmp    c002adab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad94:	83 f9 15             	cmp    ecx,0x15
c002ad97:	77 13                	ja     c002adac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ad99:	0f b6 d2             	movzx  edx,dl
c002ad9c:	0f b6 db             	movzx  ebx,bl
c002ad9f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002ada7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002adab:	ee                   	out    dx,al
c002adac:	83 c4 1c             	add    esp,0x1c
c002adaf:	5b                   	pop    ebx
c002adb0:	5e                   	pop    esi
c002adb1:	5f                   	pop    edi
c002adb2:	5d                   	pop    ebp
c002adb3:	c3                   	ret    

c002adb4 <IDE::read(unsigned char, unsigned char)>:
c002adb4:	57                   	push   edi
c002adb5:	56                   	push   esi
c002adb6:	53                   	push   ebx
c002adb7:	83 ec 10             	sub    esp,0x10
c002adba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002adbe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002adc2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002adc6:	8d 42 f8             	lea    eax,[edx-0x8]
c002adc9:	3c 03                	cmp    al,0x3
c002adcb:	77 48                	ja     c002ae15 <IDE::read(unsigned char, unsigned char)+0x61>
c002adcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002add1:	0f b6 f1             	movzx  esi,cl
c002add4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002add7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002addc:	0c 80                	or     al,0x80
c002adde:	50                   	push   eax
c002addf:	6a 0c                	push   0xc
c002ade1:	56                   	push   esi
c002ade2:	53                   	push   ebx
c002ade3:	e8 0c ff ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ade8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002adec:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002adf1:	0f b6 d2             	movzx  edx,dl
c002adf4:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002adf8:	ec                   	in     al,dx
c002adf9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002adfd:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002ae02:	52                   	push   edx
c002ae03:	6a 0c                	push   0xc
c002ae05:	56                   	push   esi
c002ae06:	53                   	push   ebx
c002ae07:	e8 e8 fe ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ae0c:	83 c4 20             	add    esp,0x20
c002ae0f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002ae13:	eb 4c                	jmp    c002ae61 <IDE::read(unsigned char, unsigned char)+0xad>
c002ae15:	0f b6 f2             	movzx  esi,dl
c002ae18:	83 fe 07             	cmp    esi,0x7
c002ae1b:	77 12                	ja     c002ae2f <IDE::read(unsigned char, unsigned char)+0x7b>
c002ae1d:	0f b6 c9             	movzx  ecx,cl
c002ae20:	0f b6 d2             	movzx  edx,dl
c002ae23:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002ae2b:	01 c2                	add    edx,eax
c002ae2d:	eb 31                	jmp    c002ae60 <IDE::read(unsigned char, unsigned char)+0xac>
c002ae2f:	83 fe 0d             	cmp    esi,0xd
c002ae32:	77 13                	ja     c002ae47 <IDE::read(unsigned char, unsigned char)+0x93>
c002ae34:	0f b6 c9             	movzx  ecx,cl
c002ae37:	0f b6 d2             	movzx  edx,dl
c002ae3a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002ae41:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ae45:	eb 19                	jmp    c002ae60 <IDE::read(unsigned char, unsigned char)+0xac>
c002ae47:	31 c0                	xor    eax,eax
c002ae49:	83 fe 15             	cmp    esi,0x15
c002ae4c:	77 13                	ja     c002ae61 <IDE::read(unsigned char, unsigned char)+0xad>
c002ae4e:	0f b6 c9             	movzx  ecx,cl
c002ae51:	0f b6 d2             	movzx  edx,dl
c002ae54:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002ae5c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ae60:	ec                   	in     al,dx
c002ae61:	83 c4 10             	add    esp,0x10
c002ae64:	5b                   	pop    ebx
c002ae65:	5e                   	pop    esi
c002ae66:	5f                   	pop    edi
c002ae67:	c3                   	ret    

c002ae68 <IDE::waitInterrupt(unsigned char)>:
c002ae68:	55                   	push   ebp
c002ae69:	57                   	push   edi
c002ae6a:	56                   	push   esi
c002ae6b:	53                   	push   ebx
c002ae6c:	31 db                	xor    ebx,ebx
c002ae6e:	83 ec 0c             	sub    esp,0xc
c002ae71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002ae75:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002ae7a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ae82:	89 e8                	mov    eax,ebp
c002ae84:	84 c0                	test   al,al
c002ae86:	75 30                	jne    c002aeb8 <IDE::waitInterrupt(unsigned char)+0x50>
c002ae88:	50                   	push   eax
c002ae89:	6a 0c                	push   0xc
c002ae8b:	56                   	push   esi
c002ae8c:	57                   	push   edi
c002ae8d:	e8 22 ff ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002ae92:	83 c4 10             	add    esp,0x10
c002ae95:	a8 01                	test   al,0x1
c002ae97:	75 27                	jne    c002aec0 <IDE::waitInterrupt(unsigned char)+0x58>
c002ae99:	f6 c3 04             	test   bl,0x4
c002ae9c:	75 12                	jne    c002aeb0 <IDE::waitInterrupt(unsigned char)+0x48>
c002ae9e:	83 fb 32             	cmp    ebx,0x32
c002aea1:	7e 0d                	jle    c002aeb0 <IDE::waitInterrupt(unsigned char)+0x48>
c002aea3:	83 ec 0c             	sub    esp,0xc
c002aea6:	6a 64                	push   0x64
c002aea8:	e8 c7 a5 ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002aead:	83 c4 10             	add    esp,0x10
c002aeb0:	83 fb 3c             	cmp    ebx,0x3c
c002aeb3:	74 0b                	je     c002aec0 <IDE::waitInterrupt(unsigned char)+0x58>
c002aeb5:	43                   	inc    ebx
c002aeb6:	eb c2                	jmp    c002ae7a <IDE::waitInterrupt(unsigned char)+0x12>
c002aeb8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002aec0:	83 c4 0c             	add    esp,0xc
c002aec3:	89 e8                	mov    eax,ebp
c002aec5:	5b                   	pop    ebx
c002aec6:	5e                   	pop    esi
c002aec7:	5f                   	pop    edi
c002aec8:	5d                   	pop    ebp
c002aec9:	c3                   	ret    

c002aeca <ideChannel0IRQHandler(regs*, void*)>:
c002aeca:	83 ec 10             	sub    esp,0x10
c002aecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aed1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002aed8:	6a 07                	push   0x7
c002aeda:	6a 00                	push   0x0
c002aedc:	50                   	push   eax
c002aedd:	e8 d2 fe ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002aee2:	83 c4 1c             	add    esp,0x1c
c002aee5:	c3                   	ret    

c002aee6 <ideChannel1IRQHandler(regs*, void*)>:
c002aee6:	83 ec 10             	sub    esp,0x10
c002aee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aeed:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002aef4:	6a 07                	push   0x7
c002aef6:	6a 01                	push   0x1
c002aef8:	50                   	push   eax
c002aef9:	e8 b6 fe ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002aefe:	83 c4 1c             	add    esp,0x1c
c002af01:	c3                   	ret    

c002af02 <IDE::enableIRQs(unsigned char, bool)>:
c002af02:	57                   	push   edi
c002af03:	b8 02 00 00 00       	mov    eax,0x2
c002af08:	56                   	push   esi
c002af09:	53                   	push   ebx
c002af0a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002af0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002af13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002af17:	74 02                	je     c002af1b <IDE::enableIRQs(unsigned char, bool)+0x19>
c002af19:	31 c0                	xor    eax,eax
c002af1b:	0f b6 db             	movzx  ebx,bl
c002af1e:	bf 04 00 00 00       	mov    edi,0x4
c002af23:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002af2a:	50                   	push   eax
c002af2b:	6a 0c                	push   0xc
c002af2d:	53                   	push   ebx
c002af2e:	56                   	push   esi
c002af2f:	e8 c0 fd ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af34:	83 c4 10             	add    esp,0x10
c002af37:	50                   	push   eax
c002af38:	6a 0c                	push   0xc
c002af3a:	53                   	push   ebx
c002af3b:	56                   	push   esi
c002af3c:	e8 73 fe ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002af41:	83 c4 10             	add    esp,0x10
c002af44:	4f                   	dec    edi
c002af45:	75 f0                	jne    c002af37 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002af47:	5b                   	pop    ebx
c002af48:	5e                   	pop    esi
c002af49:	5f                   	pop    edi
c002af4a:	c3                   	ret    
c002af4b:	90                   	nop

c002af4c <IDE::open(int, int, void*)>:
c002af4c:	55                   	push   ebp
c002af4d:	57                   	push   edi
c002af4e:	56                   	push   esi
c002af4f:	53                   	push   ebx
c002af50:	83 ec 1c             	sub    esp,0x1c
c002af53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002af57:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002af5e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002af67:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002af70:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002af77:	0f 85 da 02 00 00    	jne    c002b257 <IDE::open(int, int, void*)+0x30b>
c002af7d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002af83:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002af87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002af8b:	83 e0 7f             	and    eax,0x7f
c002af8e:	83 f8 05             	cmp    eax,0x5
c002af91:	74 05                	je     c002af98 <IDE::open(int, int, void*)+0x4c>
c002af93:	83 f8 0f             	cmp    eax,0xf
c002af96:	75 32                	jne    c002afca <IDE::open(int, int, void*)+0x7e>
c002af98:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002af9e:	83 e0 fc             	and    eax,0xfffffffc
c002afa1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002afa8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002afae:	83 e0 fc             	and    eax,0xfffffffc
c002afb1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002afb8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002afbe:	83 e0 fc             	and    eax,0xfffffffc
c002afc1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002afc8:	eb 14                	jmp    c002afde <IDE::open(int, int, void*)+0x92>
c002afca:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002afd4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002afde:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002afe5:	bf f8 0c 00 00       	mov    edi,0xcf8
c002afea:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002aff1:	89 fa                	mov    edx,edi
c002aff3:	89 f1                	mov    ecx,esi
c002aff5:	c1 e1 10             	shl    ecx,0x10
c002aff8:	89 e8                	mov    eax,ebp
c002affa:	c1 e0 0b             	shl    eax,0xb
c002affd:	09 c1                	or     ecx,eax
c002afff:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b006:	c1 e0 08             	shl    eax,0x8
c002b009:	09 c1                	or     ecx,eax
c002b00b:	89 c8                	mov    eax,ecx
c002b00d:	0d 08 00 00 80       	or     eax,0x80000008
c002b012:	ef                   	out    dx,eax
c002b013:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b018:	ed                   	in     eax,dx
c002b019:	c1 e8 10             	shr    eax,0x10
c002b01c:	3d ff ff 00 00       	cmp    eax,0xffff
c002b021:	0f 84 f9 00 00 00    	je     c002b120 <IDE::open(int, int, void*)+0x1d4>
c002b027:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b02d:	89 fa                	mov    edx,edi
c002b02f:	89 c8                	mov    eax,ecx
c002b031:	ef                   	out    dx,eax
c002b032:	b0 fe                	mov    al,0xfe
c002b034:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b039:	ee                   	out    dx,al
c002b03a:	89 c8                	mov    eax,ecx
c002b03c:	89 fa                	mov    edx,edi
c002b03e:	ef                   	out    dx,eax
c002b03f:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b044:	ed                   	in     eax,dx
c002b045:	3c fe                	cmp    al,0xfe
c002b047:	0f 85 a4 00 00 00    	jne    c002b0f1 <IDE::open(int, int, void*)+0x1a5>
c002b04d:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b053:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b05a:	74 30                	je     c002b08c <IDE::open(int, int, void*)+0x140>
c002b05c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b062:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b066:	83 ec 0c             	sub    esp,0xc
c002b069:	40                   	inc    eax
c002b06a:	0f b6 c0             	movzx  eax,al
c002b06d:	50                   	push   eax
c002b06e:	55                   	push   ebp
c002b06f:	56                   	push   esi
c002b070:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b076:	51                   	push   ecx
c002b077:	e8 4c 35 ff ff       	call   c001e5c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b07c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b081:	83 c4 1c             	add    esp,0x1c
c002b084:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b08a:	eb 0a                	jmp    c002b096 <IDE::open(int, int, void*)+0x14a>
c002b08c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b096:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b09d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002b0a2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b0a9:	89 ea                	mov    edx,ebp
c002b0ab:	c1 e1 10             	shl    ecx,0x10
c002b0ae:	c1 e0 08             	shl    eax,0x8
c002b0b1:	09 c1                	or     ecx,eax
c002b0b3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b0ba:	c1 e0 0b             	shl    eax,0xb
c002b0bd:	09 c1                	or     ecx,eax
c002b0bf:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b0c5:	89 c8                	mov    eax,ecx
c002b0c7:	ef                   	out    dx,eax
c002b0c8:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002b0ce:	be fc 0c 00 00       	mov    esi,0xcfc
c002b0d3:	89 f2                	mov    edx,esi
c002b0d5:	89 f8                	mov    eax,edi
c002b0d7:	ee                   	out    dx,al
c002b0d8:	89 c8                	mov    eax,ecx
c002b0da:	89 ea                	mov    edx,ebp
c002b0dc:	ef                   	out    dx,eax
c002b0dd:	89 f2                	mov    edx,esi
c002b0df:	ed                   	in     eax,dx
c002b0e0:	0f b6 c0             	movzx  eax,al
c002b0e3:	39 f8                	cmp    eax,edi
c002b0e5:	74 49                	je     c002b130 <IDE::open(int, int, void*)+0x1e4>
c002b0e7:	83 ec 0c             	sub    esp,0xc
c002b0ea:	68 e4 37 03 c0       	push   0xc00337e4
c002b0ef:	eb 37                	jmp    c002b128 <IDE::open(int, int, void*)+0x1dc>
c002b0f1:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b0fa:	75 1a                	jne    c002b116 <IDE::open(int, int, void*)+0x1ca>
c002b0fc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002b101:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b106:	74 05                	je     c002b10d <IDE::open(int, int, void*)+0x1c1>
c002b108:	83 c0 80             	add    eax,0xffffff80
c002b10b:	75 09                	jne    c002b116 <IDE::open(int, int, void*)+0x1ca>
c002b10d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b114:	eb 1a                	jmp    c002b130 <IDE::open(int, int, void*)+0x1e4>
c002b116:	83 ec 0c             	sub    esp,0xc
c002b119:	68 ec 37 03 c0       	push   0xc00337ec
c002b11e:	eb 08                	jmp    c002b128 <IDE::open(int, int, void*)+0x1dc>
c002b120:	83 ec 0c             	sub    esp,0xc
c002b123:	68 1d 38 03 c0       	push   0xc003381d
c002b128:	e8 29 51 ff ff       	call   c0020256 <KePanic(char const*)>
c002b12d:	83 c4 10             	add    esp,0x10
c002b130:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b137:	74 1a                	je     c002b153 <IDE::open(int, int, void*)+0x207>
c002b139:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b13f:	83 e0 fc             	and    eax,0xfffffffc
c002b142:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b149:	83 c0 08             	add    eax,0x8
c002b14c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b153:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b159:	89 c2                	mov    edx,eax
c002b15b:	83 e2 0f             	and    edx,0xf
c002b15e:	83 fa 08             	cmp    edx,0x8
c002b161:	75 0a                	jne    c002b16d <IDE::open(int, int, void*)+0x221>
c002b163:	83 e8 02             	sub    eax,0x2
c002b166:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b16d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b173:	89 c2                	mov    edx,eax
c002b175:	83 e2 0f             	and    edx,0xf
c002b178:	83 fa 08             	cmp    edx,0x8
c002b17b:	75 0a                	jne    c002b187 <IDE::open(int, int, void*)+0x23b>
c002b17d:	83 e8 02             	sub    eax,0x2
c002b180:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b187:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b18e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b195:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b198:	89 d0                	mov    eax,edx
c002b19a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b19e:	8d 7a 01             	lea    edi,[edx+0x1]
c002b1a1:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b1a5:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b1a9:	83 e1 3f             	and    ecx,0x3f
c002b1ac:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b1b0:	89 f9                	mov    ecx,edi
c002b1b2:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b1b9:	8d 78 02             	lea    edi,[eax+0x2]
c002b1bc:	0f b6 c9             	movzx  ecx,cl
c002b1bf:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b1c2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b1c6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b1ca:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b1ce:	83 e2 3f             	and    edx,0x3f
c002b1d1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b1d5:	89 f9                	mov    ecx,edi
c002b1d7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b1dd:	8d 78 03             	lea    edi,[eax+0x3]
c002b1e0:	0f b6 d1             	movzx  edx,cl
c002b1e3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b1e6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b1ea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1ee:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b1f2:	83 e1 3f             	and    ecx,0x3f
c002b1f5:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b1f9:	89 f9                	mov    ecx,edi
c002b1fb:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b201:	8d 78 04             	lea    edi,[eax+0x4]
c002b204:	0f b6 c9             	movzx  ecx,cl
c002b207:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b20a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b20e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b212:	89 fa                	mov    edx,edi
c002b214:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b21a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b21e:	83 e2 3f             	and    edx,0x3f
c002b221:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b225:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b22c:	66 85 f6             	test   si,si
c002b22f:	74 65                	je     c002b296 <IDE::open(int, int, void*)+0x34a>
c002b231:	89 f9                	mov    ecx,edi
c002b233:	83 c0 05             	add    eax,0x5
c002b236:	0f b6 d1             	movzx  edx,cl
c002b239:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b23c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b240:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b244:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b24a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b24e:	83 e0 3f             	and    eax,0x3f
c002b251:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b255:	eb 3f                	jmp    c002b296 <IDE::open(int, int, void*)+0x34a>
c002b257:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b25e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b264:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b26b:	05 06 02 00 00       	add    eax,0x206
c002b270:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b277:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b27e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b285:	05 06 02 00 00       	add    eax,0x206
c002b28a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b291:	e9 bd fe ff ff       	jmp    c002b153 <IDE::open(int, int, void*)+0x207>
c002b296:	50                   	push   eax
c002b297:	50                   	push   eax
c002b298:	6a 00                	push   0x0
c002b29a:	53                   	push   ebx
c002b29b:	e8 2e fa ff ff       	call   c002acce <IDE::prepareInterrupt(unsigned char)>
c002b2a0:	5a                   	pop    edx
c002b2a1:	59                   	pop    ecx
c002b2a2:	6a 01                	push   0x1
c002b2a4:	53                   	push   ebx
c002b2a5:	e8 24 fa ff ff       	call   c002acce <IDE::prepareInterrupt(unsigned char)>
c002b2aa:	83 c4 0c             	add    esp,0xc
c002b2ad:	6a 00                	push   0x0
c002b2af:	6a 00                	push   0x0
c002b2b1:	53                   	push   ebx
c002b2b2:	e8 4b fc ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002b2b7:	83 c4 0c             	add    esp,0xc
c002b2ba:	6a 00                	push   0x0
c002b2bc:	6a 01                	push   0x1
c002b2be:	53                   	push   ebx
c002b2bf:	e8 3e fc ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002b2c4:	83 c4 10             	add    esp,0x10
c002b2c7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b2ce:	74 34                	je     c002b304 <IDE::open(int, int, void*)+0x3b8>
c002b2d0:	83 ec 0c             	sub    esp,0xc
c002b2d3:	53                   	push   ebx
c002b2d4:	6a 01                	push   0x1
c002b2d6:	68 ca ae 02 c0       	push   0xc002aeca
c002b2db:	6a 0e                	push   0xe
c002b2dd:	53                   	push   ebx
c002b2de:	e8 2d 00 ff ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2e3:	83 c4 14             	add    esp,0x14
c002b2e6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b2ec:	53                   	push   ebx
c002b2ed:	6a 01                	push   0x1
c002b2ef:	68 e6 ae 02 c0       	push   0xc002aee6
c002b2f4:	6a 0f                	push   0xf
c002b2f6:	53                   	push   ebx
c002b2f7:	e8 14 00 ff ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2fc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b302:	eb 38                	jmp    c002b33c <IDE::open(int, int, void*)+0x3f0>
c002b304:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b30e:	83 ec 0c             	sub    esp,0xc
c002b311:	53                   	push   ebx
c002b312:	6a 00                	push   0x0
c002b314:	68 ca ae 02 c0       	push   0xc002aeca
c002b319:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b31f:	53                   	push   ebx
c002b320:	e8 eb ff fe ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b325:	83 c4 14             	add    esp,0x14
c002b328:	53                   	push   ebx
c002b329:	6a 00                	push   0x0
c002b32b:	68 e6 ae 02 c0       	push   0xc002aee6
c002b330:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b336:	53                   	push   ebx
c002b337:	e8 d4 ff fe ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b33c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b33e:	83 c4 20             	add    esp,0x20
c002b341:	83 ec 0c             	sub    esp,0xc
c002b344:	53                   	push   ebx
c002b345:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b348:	83 c4 0c             	add    esp,0xc
c002b34b:	6a 07                	push   0x7
c002b34d:	6a 00                	push   0x0
c002b34f:	53                   	push   ebx
c002b350:	e8 5f fa ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b355:	83 c4 0c             	add    esp,0xc
c002b358:	6a 07                	push   0x7
c002b35a:	6a 01                	push   0x1
c002b35c:	53                   	push   ebx
c002b35d:	e8 52 fa ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b362:	83 c4 0c             	add    esp,0xc
c002b365:	6a 01                	push   0x1
c002b367:	6a 00                	push   0x0
c002b369:	53                   	push   ebx
c002b36a:	e8 93 fb ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002b36f:	83 c4 0c             	add    esp,0xc
c002b372:	6a 01                	push   0x1
c002b374:	6a 01                	push   0x1
c002b376:	53                   	push   ebx
c002b377:	e8 86 fb ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002b37c:	83 c4 2c             	add    esp,0x2c
c002b37f:	31 c0                	xor    eax,eax
c002b381:	5b                   	pop    ebx
c002b382:	5e                   	pop    esi
c002b383:	5f                   	pop    edi
c002b384:	5d                   	pop    ebp
c002b385:	c3                   	ret    

c002b386 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b386:	55                   	push   ebp
c002b387:	57                   	push   edi
c002b388:	56                   	push   esi
c002b389:	53                   	push   ebx
c002b38a:	83 ec 1c             	sub    esp,0x1c
c002b38d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b391:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b395:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b399:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b39d:	8d 42 f8             	lea    eax,[edx-0x8]
c002b3a0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b3a4:	3c 03                	cmp    al,0x3
c002b3a6:	77 5a                	ja     c002b402 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b3a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b3ac:	0f b6 db             	movzx  ebx,bl
c002b3af:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b3b3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b3b6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b3bb:	0c 80                	or     al,0x80
c002b3bd:	50                   	push   eax
c002b3be:	6a 0c                	push   0xc
c002b3c0:	53                   	push   ebx
c002b3c1:	56                   	push   esi
c002b3c2:	e8 2d f9 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b3cb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b3d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b3d4:	0f b6 d2             	movzx  edx,dl
c002b3d7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b3db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b3dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b3e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b3e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b3ea:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b3f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b3f6:	83 c4 2c             	add    esp,0x2c
c002b3f9:	5b                   	pop    ebx
c002b3fa:	5e                   	pop    esi
c002b3fb:	5f                   	pop    edi
c002b3fc:	5d                   	pop    ebp
c002b3fd:	e9 f2 f8 ff ff       	jmp    c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b402:	0f b6 c2             	movzx  eax,dl
c002b405:	83 f8 07             	cmp    eax,0x7
c002b408:	77 12                	ja     c002b41c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b40a:	0f b6 db             	movzx  ebx,bl
c002b40d:	0f b6 c2             	movzx  eax,dl
c002b410:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b418:	01 c2                	add    edx,eax
c002b41a:	eb 2f                	jmp    c002b44b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b41c:	83 f8 0d             	cmp    eax,0xd
c002b41f:	77 13                	ja     c002b434 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b421:	0f b6 db             	movzx  ebx,bl
c002b424:	0f b6 d2             	movzx  edx,dl
c002b427:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b42e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b432:	eb 17                	jmp    c002b44b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b434:	83 f8 15             	cmp    eax,0x15
c002b437:	77 14                	ja     c002b44d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b439:	0f b6 db             	movzx  ebx,bl
c002b43c:	0f b6 d2             	movzx  edx,dl
c002b43f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b447:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b44b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b44d:	83 c4 1c             	add    esp,0x1c
c002b450:	5b                   	pop    ebx
c002b451:	5e                   	pop    esi
c002b452:	5f                   	pop    edi
c002b453:	5d                   	pop    ebp
c002b454:	c3                   	ret    
c002b455:	90                   	nop

c002b456 <IDE::detect()>:
c002b456:	55                   	push   ebp
c002b457:	57                   	push   edi
c002b458:	56                   	push   esi
c002b459:	53                   	push   ebx
c002b45a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b460:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b467:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b46e:	0f 85 9e 02 00 00    	jne    c002b712 <IDE::detect()+0x2bc>
c002b474:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b47b:	31 f6                	xor    esi,esi
c002b47d:	31 ff                	xor    edi,edi
c002b47f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b487:	89 f8                	mov    eax,edi
c002b489:	c1 e0 06             	shl    eax,0x6
c002b48c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b494:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b498:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b4a0:	c1 e0 04             	shl    eax,0x4
c002b4a3:	83 c8 a0             	or     eax,0xffffffa0
c002b4a6:	0f b6 c0             	movzx  eax,al
c002b4a9:	50                   	push   eax
c002b4aa:	6a 06                	push   0x6
c002b4ac:	56                   	push   esi
c002b4ad:	53                   	push   ebx
c002b4ae:	e8 41 f8 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b4b3:	83 c4 0c             	add    esp,0xc
c002b4b6:	6a 0c                	push   0xc
c002b4b8:	56                   	push   esi
c002b4b9:	53                   	push   ebx
c002b4ba:	e8 f5 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b4bf:	83 c4 0c             	add    esp,0xc
c002b4c2:	6a 0c                	push   0xc
c002b4c4:	56                   	push   esi
c002b4c5:	53                   	push   ebx
c002b4c6:	e8 e9 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b4cb:	83 c4 0c             	add    esp,0xc
c002b4ce:	6a 0c                	push   0xc
c002b4d0:	56                   	push   esi
c002b4d1:	53                   	push   ebx
c002b4d2:	e8 dd f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b4d7:	83 c4 0c             	add    esp,0xc
c002b4da:	6a 0c                	push   0xc
c002b4dc:	56                   	push   esi
c002b4dd:	53                   	push   ebx
c002b4de:	e8 d1 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b4e3:	68 ec 00 00 00       	push   0xec
c002b4e8:	6a 07                	push   0x7
c002b4ea:	56                   	push   esi
c002b4eb:	53                   	push   ebx
c002b4ec:	e8 03 f8 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b4f1:	83 c4 1c             	add    esp,0x1c
c002b4f4:	6a 0c                	push   0xc
c002b4f6:	56                   	push   esi
c002b4f7:	53                   	push   ebx
c002b4f8:	e8 b7 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b4fd:	83 c4 0c             	add    esp,0xc
c002b500:	6a 0c                	push   0xc
c002b502:	56                   	push   esi
c002b503:	53                   	push   ebx
c002b504:	e8 ab f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b509:	83 c4 0c             	add    esp,0xc
c002b50c:	6a 0c                	push   0xc
c002b50e:	56                   	push   esi
c002b50f:	53                   	push   ebx
c002b510:	e8 9f f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b515:	83 c4 0c             	add    esp,0xc
c002b518:	6a 0c                	push   0xc
c002b51a:	56                   	push   esi
c002b51b:	53                   	push   ebx
c002b51c:	e8 93 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b521:	83 c4 0c             	add    esp,0xc
c002b524:	6a 0c                	push   0xc
c002b526:	56                   	push   esi
c002b527:	53                   	push   ebx
c002b528:	e8 87 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b52d:	83 c4 10             	add    esp,0x10
c002b530:	84 c0                	test   al,al
c002b532:	0f 84 61 01 00 00    	je     c002b699 <IDE::detect()+0x243>
c002b538:	31 ed                	xor    ebp,ebp
c002b53a:	50                   	push   eax
c002b53b:	6a 0c                	push   0xc
c002b53d:	56                   	push   esi
c002b53e:	53                   	push   ebx
c002b53f:	e8 70 f8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b544:	83 c4 10             	add    esp,0x10
c002b547:	a8 01                	test   al,0x1
c002b549:	0f 85 6b 01 00 00    	jne    c002b6ba <IDE::detect()+0x264>
c002b54f:	a8 80                	test   al,0x80
c002b551:	75 04                	jne    c002b557 <IDE::detect()+0x101>
c002b553:	a8 08                	test   al,0x8
c002b555:	75 23                	jne    c002b57a <IDE::detect()+0x124>
c002b557:	45                   	inc    ebp
c002b558:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b55e:	7e da                	jle    c002b53a <IDE::detect()+0xe4>
c002b560:	83 ec 0c             	sub    esp,0xc
c002b563:	6a 32                	push   0x32
c002b565:	e8 0a 9f ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002b56a:	83 c4 10             	add    esp,0x10
c002b56d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b573:	75 c5                	jne    c002b53a <IDE::detect()+0xe4>
c002b575:	e9 40 01 00 00       	jmp    c002b6ba <IDE::detect()+0x264>
c002b57a:	31 c9                	xor    ecx,ecx
c002b57c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b580:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b584:	83 ec 0c             	sub    esp,0xc
c002b587:	68 80 00 00 00       	push   0x80
c002b58c:	55                   	push   ebp
c002b58d:	6a 00                	push   0x0
c002b58f:	56                   	push   esi
c002b590:	53                   	push   ebx
c002b591:	e8 f0 fd ff ff       	call   c002b386 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b596:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b59b:	89 f8                	mov    eax,edi
c002b59d:	c1 e0 06             	shl    eax,0x6
c002b5a0:	01 d8                	add    eax,ebx
c002b5a2:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b5a9:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b5b0:	89 d1                	mov    ecx,edx
c002b5b2:	89 f2                	mov    edx,esi
c002b5b4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b5ba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b5be:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b5c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b5c8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b5cf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b5d7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b5de:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b5e6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b5ec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b5f3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b5f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b5fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b601:	83 c4 20             	add    esp,0x20
c002b604:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b607:	83 c5 02             	add    ebp,0x2
c002b60a:	83 c0 02             	add    eax,0x2
c002b60d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b613:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b616:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b61c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b620:	75 e2                	jne    c002b604 <IDE::detect()+0x1ae>
c002b622:	89 f8                	mov    eax,edi
c002b624:	c1 e0 06             	shl    eax,0x6
c002b627:	01 d8                	add    eax,ebx
c002b629:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b630:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b637:	c1 ea 09             	shr    edx,0x9
c002b63a:	83 e2 01             	and    edx,0x1
c002b63d:	80 e1 01             	and    cl,0x1
c002b640:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b646:	75 22                	jne    c002b66a <IDE::detect()+0x214>
c002b648:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b64f:	74 47                	je     c002b698 <IDE::detect()+0x242>
c002b651:	83 ec 0c             	sub    esp,0xc
c002b654:	68 7c 01 00 00       	push   0x17c
c002b659:	e8 39 ae fe ff       	call   c0016497 <malloc>
c002b65e:	89 04 24             	mov    DWORD PTR [esp],eax
c002b661:	89 c5                	mov    ebp,eax
c002b663:	e8 2a 05 00 00       	call   c002bb92 <ATA::ATA()>
c002b668:	eb 17                	jmp    c002b681 <IDE::detect()+0x22b>
c002b66a:	83 ec 0c             	sub    esp,0xc
c002b66d:	68 84 01 00 00       	push   0x184
c002b672:	e8 20 ae fe ff       	call   c0016497 <malloc>
c002b677:	89 04 24             	mov    DWORD PTR [esp],eax
c002b67a:	89 c5                	mov    ebp,eax
c002b67c:	e8 83 0e 00 00       	call   c002c504 <ATAPI::ATAPI()>
c002b681:	5a                   	pop    edx
c002b682:	59                   	pop    ecx
c002b683:	55                   	push   ebp
c002b684:	53                   	push   ebx
c002b685:	e8 da fc fe ff       	call   c001b364 <Device::addChild(Device*)>
c002b68a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b68d:	53                   	push   ebx
c002b68e:	57                   	push   edi
c002b68f:	6a 00                	push   0x0
c002b691:	55                   	push   ebp
c002b692:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b695:	83 c4 20             	add    esp,0x20
c002b698:	47                   	inc    edi
c002b699:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b69e:	74 0d                	je     c002b6ad <IDE::detect()+0x257>
c002b6a0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b6a8:	e9 da fd ff ff       	jmp    c002b487 <IDE::detect()+0x31>
c002b6ad:	4e                   	dec    esi
c002b6ae:	74 62                	je     c002b712 <IDE::detect()+0x2bc>
c002b6b0:	be 01 00 00 00       	mov    esi,0x1
c002b6b5:	e9 c5 fd ff ff       	jmp    c002b47f <IDE::detect()+0x29>
c002b6ba:	50                   	push   eax
c002b6bb:	6a 04                	push   0x4
c002b6bd:	56                   	push   esi
c002b6be:	53                   	push   ebx
c002b6bf:	e8 f0 f6 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b6c4:	83 c4 0c             	add    esp,0xc
c002b6c7:	6a 05                	push   0x5
c002b6c9:	56                   	push   esi
c002b6ca:	53                   	push   ebx
c002b6cb:	89 c5                	mov    ebp,eax
c002b6cd:	e8 e2 f6 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b6d2:	89 e9                	mov    ecx,ebp
c002b6d4:	83 c4 10             	add    esp,0x10
c002b6d7:	0f b6 e9             	movzx  ebp,cl
c002b6da:	83 fd 14             	cmp    ebp,0x14
c002b6dd:	74 2d                	je     c002b70c <IDE::detect()+0x2b6>
c002b6df:	83 fd 69             	cmp    ebp,0x69
c002b6e2:	75 b5                	jne    c002b699 <IDE::detect()+0x243>
c002b6e4:	3c 96                	cmp    al,0x96
c002b6e6:	75 b1                	jne    c002b699 <IDE::detect()+0x243>
c002b6e8:	68 a1 00 00 00       	push   0xa1
c002b6ed:	6a 07                	push   0x7
c002b6ef:	56                   	push   esi
c002b6f0:	53                   	push   ebx
c002b6f1:	e8 fe f5 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b6f6:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b6fd:	e8 72 9d ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002b702:	83 c4 10             	add    esp,0x10
c002b705:	b1 01                	mov    cl,0x1
c002b707:	e9 70 fe ff ff       	jmp    c002b57c <IDE::detect()+0x126>
c002b70c:	3c eb                	cmp    al,0xeb
c002b70e:	75 cf                	jne    c002b6df <IDE::detect()+0x289>
c002b710:	eb d6                	jmp    c002b6e8 <IDE::detect()+0x292>
c002b712:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b718:	5b                   	pop    ebx
c002b719:	5e                   	pop    esi
c002b71a:	5f                   	pop    edi
c002b71b:	5d                   	pop    ebp
c002b71c:	c3                   	ret    
c002b71d:	90                   	nop

c002b71e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b71e:	55                   	push   ebp
c002b71f:	57                   	push   edi
c002b720:	56                   	push   esi
c002b721:	53                   	push   ebx
c002b722:	83 ec 1c             	sub    esp,0x1c
c002b725:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b729:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b72d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b735:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b739:	88 c3                	mov    bl,al
c002b73b:	25 ff 00 00 00       	and    eax,0xff
c002b740:	0f 84 88 00 00 00    	je     c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b746:	83 ec 0c             	sub    esp,0xc
c002b749:	89 c7                	mov    edi,eax
c002b74b:	68 47 38 03 c0       	push   0xc0033847
c002b750:	e8 79 db fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002b755:	83 c4 10             	add    esp,0x10
c002b758:	83 ff 01             	cmp    edi,0x1
c002b75b:	74 6b                	je     c002b7c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b75d:	83 ff 02             	cmp    edi,0x2
c002b760:	75 58                	jne    c002b7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b762:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b767:	50                   	push   eax
c002b768:	6a 01                	push   0x1
c002b76a:	01 ff                	add    edi,edi
c002b76c:	09 fe                	or     esi,edi
c002b76e:	89 f0                	mov    eax,esi
c002b770:	0f b6 f0             	movzx  esi,al
c002b773:	c1 e6 06             	shl    esi,0x6
c002b776:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b77e:	50                   	push   eax
c002b77f:	55                   	push   ebp
c002b780:	e8 2f f6 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b785:	83 c4 10             	add    esp,0x10
c002b788:	a8 01                	test   al,0x1
c002b78a:	74 02                	je     c002b78e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b78c:	b3 07                	mov    bl,0x7
c002b78e:	a8 02                	test   al,0x2
c002b790:	74 02                	je     c002b794 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b792:	b3 03                	mov    bl,0x3
c002b794:	a8 04                	test   al,0x4
c002b796:	74 02                	je     c002b79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b798:	b3 14                	mov    bl,0x14
c002b79a:	a8 08                	test   al,0x8
c002b79c:	74 02                	je     c002b7a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b79e:	b3 03                	mov    bl,0x3
c002b7a0:	a8 10                	test   al,0x10
c002b7a2:	74 02                	je     c002b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b7a4:	b3 15                	mov    bl,0x15
c002b7a6:	a8 20                	test   al,0x20
c002b7a8:	74 02                	je     c002b7ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b7aa:	b3 03                	mov    bl,0x3
c002b7ac:	a8 40                	test   al,0x40
c002b7ae:	74 02                	je     c002b7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b7b0:	b3 16                	mov    bl,0x16
c002b7b2:	a8 80                	test   al,0x80
c002b7b4:	74 18                	je     c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7b6:	b3 0d                	mov    bl,0xd
c002b7b8:	eb 14                	jmp    c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7ba:	83 ff 03             	cmp    edi,0x3
c002b7bd:	74 0d                	je     c002b7cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b7bf:	83 ff 04             	cmp    edi,0x4
c002b7c2:	75 0a                	jne    c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7c4:	b3 08                	mov    bl,0x8
c002b7c6:	eb 06                	jmp    c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7c8:	b3 13                	mov    bl,0x13
c002b7ca:	eb 02                	jmp    c002b7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7cc:	b3 17                	mov    bl,0x17
c002b7ce:	83 c4 1c             	add    esp,0x1c
c002b7d1:	88 d8                	mov    al,bl
c002b7d3:	5b                   	pop    ebx
c002b7d4:	5e                   	pop    esi
c002b7d5:	5f                   	pop    edi
c002b7d6:	5d                   	pop    ebp
c002b7d7:	c3                   	ret    

c002b7d8 <IDE::polling(unsigned char, unsigned int)>:
c002b7d8:	57                   	push   edi
c002b7d9:	56                   	push   esi
c002b7da:	53                   	push   ebx
c002b7db:	bb 04 00 00 00       	mov    ebx,0x4
c002b7e0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b7e4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b7e9:	52                   	push   edx
c002b7ea:	6a 0c                	push   0xc
c002b7ec:	56                   	push   esi
c002b7ed:	57                   	push   edi
c002b7ee:	e8 c1 f5 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b7f3:	83 c4 10             	add    esp,0x10
c002b7f6:	4b                   	dec    ebx
c002b7f7:	75 f0                	jne    c002b7e9 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b7f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b7fe:	50                   	push   eax
c002b7ff:	6a 0c                	push   0xc
c002b801:	56                   	push   esi
c002b802:	57                   	push   edi
c002b803:	e8 ac f5 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002b808:	83 c4 10             	add    esp,0x10
c002b80b:	a8 01                	test   al,0x1
c002b80d:	75 17                	jne    c002b826 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b80f:	a8 20                	test   al,0x20
c002b811:	75 0f                	jne    c002b822 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b813:	4b                   	dec    ebx
c002b814:	74 10                	je     c002b826 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b816:	a8 80                	test   al,0x80
c002b818:	75 e4                	jne    c002b7fe <IDE::polling(unsigned char, unsigned int)+0x26>
c002b81a:	a8 08                	test   al,0x8
c002b81c:	74 e0                	je     c002b7fe <IDE::polling(unsigned char, unsigned int)+0x26>
c002b81e:	31 c0                	xor    eax,eax
c002b820:	eb 06                	jmp    c002b828 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b822:	b0 01                	mov    al,0x1
c002b824:	eb 02                	jmp    c002b828 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b826:	b0 02                	mov    al,0x2
c002b828:	5b                   	pop    ebx
c002b829:	5e                   	pop    esi
c002b82a:	5f                   	pop    edi
c002b82b:	c3                   	ret    

c002b82c <SATABus::close(int, int, void*)>:
c002b82c:	31 c0                	xor    eax,eax
c002b82e:	c3                   	ret    
c002b82f:	90                   	nop

c002b830 <SATABus::detect()>:
c002b830:	c3                   	ret    
c002b831:	90                   	nop

c002b832 <SATABus::SATABus()>:
c002b832:	83 ec 0c             	sub    esp,0xc
c002b835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b839:	83 ec 08             	sub    esp,0x8
c002b83c:	68 80 38 03 c0       	push   0xc0033880
c002b841:	50                   	push   eax
c002b842:	e8 75 fe fe ff       	call   c001b6bc <HardDiskController::HardDiskController(char const*)>
c002b847:	83 c4 10             	add    esp,0x10
c002b84a:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c002b84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b853:	89 10                	mov    DWORD PTR [eax],edx
c002b855:	83 ec 0c             	sub    esp,0xc
c002b858:	6a 50                	push   0x50
c002b85a:	e8 16 b0 fe ff       	call   c0016875 <Phys::allocateContiguousPages(int)>
c002b85f:	83 c4 10             	add    esp,0x10
c002b862:	89 c2                	mov    edx,eax
c002b864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b868:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b86e:	83 ec 0c             	sub    esp,0xc
c002b871:	6a 50                	push   0x50
c002b873:	e8 41 c7 fe ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c002b878:	83 c4 10             	add    esp,0x10
c002b87b:	89 c2                	mov    edx,eax
c002b87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b881:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b887:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b88c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b890:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b896:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b89a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b8a0:	83 ec 0c             	sub    esp,0xc
c002b8a3:	6a 03                	push   0x3
c002b8a5:	6a 50                	push   0x50
c002b8a7:	51                   	push   ecx
c002b8a8:	52                   	push   edx
c002b8a9:	50                   	push   eax
c002b8aa:	e8 1d d0 fe ff       	call   c00188cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b8af:	83 c4 20             	add    esp,0x20
c002b8b2:	90                   	nop
c002b8b3:	83 c4 0c             	add    esp,0xc
c002b8b6:	c3                   	ret    
c002b8b7:	90                   	nop

c002b8b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b8b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8bc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b8bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b8c2:	09 c2                	or     edx,eax
c002b8c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b8c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b8ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b8d0:	31 c0                	xor    eax,eax
c002b8d2:	c1 e9 08             	shr    ecx,0x8
c002b8d5:	83 e1 0f             	and    ecx,0xf
c002b8d8:	39 c8                	cmp    eax,ecx
c002b8da:	74 0a                	je     c002b8e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b8dc:	f6 c2 01             	test   dl,0x1
c002b8df:	74 08                	je     c002b8e9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b8e1:	d1 ea                	shr    edx,1
c002b8e3:	40                   	inc    eax
c002b8e4:	eb f2                	jmp    c002b8d8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b8e6:	83 c8 ff             	or     eax,0xffffffff
c002b8e9:	c3                   	ret    

c002b8ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b8ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b8ee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b8f1:	89 c2                	mov    edx,eax
c002b8f3:	c1 ea 08             	shr    edx,0x8
c002b8f6:	83 e2 0f             	and    edx,0xf
c002b8f9:	4a                   	dec    edx
c002b8fa:	75 32                	jne    c002b92e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b8fc:	83 e0 0f             	and    eax,0xf
c002b8ff:	83 f8 03             	cmp    eax,0x3
c002b902:	75 2a                	jne    c002b92e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b904:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b907:	b8 02 00 00 00       	mov    eax,0x2
c002b90c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b912:	74 1c                	je     c002b930 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b914:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b91a:	b8 04 00 00 00       	mov    eax,0x4
c002b91f:	74 0f                	je     c002b930 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b921:	31 c0                	xor    eax,eax
c002b923:	83 fa 03             	cmp    edx,0x3
c002b926:	0f 94 c0             	sete   al
c002b929:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b92d:	c3                   	ret    
c002b92e:	31 c0                	xor    eax,eax
c002b930:	c3                   	ret    
c002b931:	90                   	nop

c002b932 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b936:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b939:	0f ba e2 0f          	bt     edx,0xf
c002b93d:	72 f7                	jb     c002b936 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b93f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b942:	83 ca 10             	or     edx,0x10
c002b945:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b948:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b94b:	83 ca 01             	or     edx,0x1
c002b94e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b951:	c3                   	ret    

c002b952 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b956:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b959:	83 e2 fe             	and    edx,0xfffffffe
c002b95c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b95f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b962:	83 e2 ef             	and    edx,0xffffffef
c002b965:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b968:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b96b:	0f ba e2 0e          	bt     edx,0xe
c002b96f:	72 f7                	jb     c002b968 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b971:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b974:	0f ba e2 0f          	bt     edx,0xf
c002b978:	72 ee                	jb     c002b968 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b97a:	c3                   	ret    
c002b97b:	90                   	nop

c002b97c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b97c:	55                   	push   ebp
c002b97d:	57                   	push   edi
c002b97e:	56                   	push   esi
c002b97f:	53                   	push   ebx
c002b980:	83 ec 1c             	sub    esp,0x1c
c002b983:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b987:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b98b:	53                   	push   ebx
c002b98c:	57                   	push   edi
c002b98d:	e8 c0 ff ff ff       	call   c002b952 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b992:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b996:	83 ec 0c             	sub    esp,0xc
c002b999:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b99f:	c1 e5 0a             	shl    ebp,0xa
c002b9a2:	01 e8                	add    eax,ebp
c002b9a4:	89 03                	mov    DWORD PTR [ebx],eax
c002b9a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b9a8:	68 00 04 00 00       	push   0x400
c002b9ad:	6a 00                	push   0x0
c002b9af:	50                   	push   eax
c002b9b0:	e8 3b 4b fd ff       	call   c00004f0 <memset>
c002b9b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b9bb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002b9bf:	83 c4 1c             	add    esp,0x1c
c002b9c2:	01 e8                	add    eax,ebp
c002b9c4:	89 03                	mov    DWORD PTR [ebx],eax
c002b9c6:	c1 e6 08             	shl    esi,0x8
c002b9c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b9d0:	81 c6 00 80 00 00    	add    esi,0x8000
c002b9d6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b9dc:	01 f0                	add    eax,esi
c002b9de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b9e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b9e4:	68 00 01 00 00       	push   0x100
c002b9e9:	6a 00                	push   0x0
c002b9eb:	50                   	push   eax
c002b9ec:	e8 ff 4a fd ff       	call   c00004f0 <memset>
c002b9f1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b9f7:	31 d2                	xor    edx,edx
c002b9f9:	01 f0                	add    eax,esi
c002b9fb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b9fe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002ba05:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002ba0b:	01 ee                	add    esi,ebp
c002ba0d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002ba11:	83 c4 10             	add    esp,0x10
c002ba14:	c1 e5 0d             	shl    ebp,0xd
c002ba17:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002ba1d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002ba23:	83 c6 20             	add    esi,0x20
c002ba26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ba2a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002ba30:	01 e8                	add    eax,ebp
c002ba32:	01 d0                	add    eax,edx
c002ba34:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002ba37:	52                   	push   edx
c002ba38:	68 00 01 00 00       	push   0x100
c002ba3d:	6a 00                	push   0x0
c002ba3f:	50                   	push   eax
c002ba40:	e8 ab 4a fd ff       	call   c00004f0 <memset>
c002ba45:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002ba4b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002ba52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ba56:	83 c4 10             	add    esp,0x10
c002ba59:	01 e8                	add    eax,ebp
c002ba5b:	01 d0                	add    eax,edx
c002ba5d:	81 c2 00 01 00 00    	add    edx,0x100
c002ba63:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002ba66:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002ba6c:	75 af                	jne    c002ba1d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002ba6e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba75:	50                   	push   eax
c002ba76:	50                   	push   eax
c002ba77:	53                   	push   ebx
c002ba78:	57                   	push   edi
c002ba79:	e8 b4 fe ff ff       	call   c002b932 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002ba7e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba85:	83 c4 2c             	add    esp,0x2c
c002ba88:	5b                   	pop    ebx
c002ba89:	5e                   	pop    esi
c002ba8a:	5f                   	pop    edi
c002ba8b:	5d                   	pop    ebp
c002ba8c:	c3                   	ret    
c002ba8d:	90                   	nop

c002ba8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002ba8e:	55                   	push   ebp
c002ba8f:	57                   	push   edi
c002ba90:	56                   	push   esi
c002ba91:	53                   	push   ebx
c002ba92:	31 db                	xor    ebx,ebx
c002ba94:	83 ec 0c             	sub    esp,0xc
c002ba97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ba9b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002ba9f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002baa2:	f7 c7 01 00 00 00    	test   edi,0x1
c002baa8:	74 7a                	je     c002bb24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002baaa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002baae:	89 d8                	mov    eax,ebx
c002bab0:	c1 e0 07             	shl    eax,0x7
c002bab3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002baba:	55                   	push   ebp
c002babb:	56                   	push   esi
c002babc:	e8 29 fe ff ff       	call   c002b8ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bac1:	5a                   	pop    edx
c002bac2:	59                   	pop    ecx
c002bac3:	83 f8 01             	cmp    eax,0x1
c002bac6:	75 21                	jne    c002bae9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bac8:	50                   	push   eax
c002bac9:	53                   	push   ebx
c002baca:	55                   	push   ebp
c002bacb:	56                   	push   esi
c002bacc:	e8 ab fe ff ff       	call   c002b97c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bad1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bad8:	e8 ba a9 fe ff       	call   c0016497 <malloc>
c002badd:	89 04 24             	mov    DWORD PTR [esp],eax
c002bae0:	89 c5                	mov    ebp,eax
c002bae2:	e8 e3 10 00 00       	call   c002cbca <SATA::SATA()>
c002bae7:	eb 24                	jmp    c002bb0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bae9:	83 f8 04             	cmp    eax,0x4
c002baec:	75 36                	jne    c002bb24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002baee:	51                   	push   ecx
c002baef:	53                   	push   ebx
c002baf0:	55                   	push   ebp
c002baf1:	56                   	push   esi
c002baf2:	e8 85 fe ff ff       	call   c002b97c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002baf7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bafe:	e8 94 a9 fe ff       	call   c0016497 <malloc>
c002bb03:	89 04 24             	mov    DWORD PTR [esp],eax
c002bb06:	89 c5                	mov    ebp,eax
c002bb08:	e8 4b 18 00 00       	call   c002d358 <SATAPI::SATAPI()>
c002bb0d:	58                   	pop    eax
c002bb0e:	5a                   	pop    edx
c002bb0f:	55                   	push   ebp
c002bb10:	56                   	push   esi
c002bb11:	e8 4e f8 fe ff       	call   c001b364 <Device::addChild(Device*)>
c002bb16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bb19:	56                   	push   esi
c002bb1a:	6a 00                	push   0x0
c002bb1c:	53                   	push   ebx
c002bb1d:	55                   	push   ebp
c002bb1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bb21:	83 c4 20             	add    esp,0x20
c002bb24:	d1 ef                	shr    edi,1
c002bb26:	43                   	inc    ebx
c002bb27:	83 fb 20             	cmp    ebx,0x20
c002bb2a:	0f 85 72 ff ff ff    	jne    c002baa2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bb30:	83 c4 0c             	add    esp,0xc
c002bb33:	5b                   	pop    ebx
c002bb34:	5e                   	pop    esi
c002bb35:	5f                   	pop    edi
c002bb36:	5d                   	pop    ebp
c002bb37:	c3                   	ret    

c002bb38 <SATABus::open(int, int, void*)>:
c002bb38:	53                   	push   ebx
c002bb39:	83 ec 08             	sub    esp,0x8
c002bb3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb40:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bb46:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bb4c:	e8 b7 94 ff ff       	call   c0025008 <KeDisablePreemption()>
c002bb51:	52                   	push   edx
c002bb52:	52                   	push   edx
c002bb53:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bb59:	53                   	push   ebx
c002bb5a:	e8 2f ff ff ff       	call   c002ba8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bb5f:	e8 cc 94 ff ff       	call   c0025030 <KeRestorePreemption()>
c002bb64:	83 c4 18             	add    esp,0x18
c002bb67:	31 c0                	xor    eax,eax
c002bb69:	5b                   	pop    ebx
c002bb6a:	c3                   	ret    
c002bb6b:	90                   	nop

c002bb6c <ATA::close(int, int, void*)>:
c002bb6c:	83 ec 0c             	sub    esp,0xc
c002bb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bb79:	85 c0                	test   eax,eax
c002bb7b:	74 0c                	je     c002bb89 <ATA::close(int, int, void*)+0x1d>
c002bb7d:	8b 10                	mov    edx,DWORD PTR [eax]
c002bb7f:	83 ec 0c             	sub    esp,0xc
c002bb82:	50                   	push   eax
c002bb83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bb86:	83 c4 10             	add    esp,0x10
c002bb89:	31 c0                	xor    eax,eax
c002bb8b:	83 c4 0c             	add    esp,0xc
c002bb8e:	c3                   	ret    
c002bb8f:	90                   	nop

c002bb90 <ATA::powerSaving(PowerSavingLevel)>:
c002bb90:	c3                   	ret    
c002bb91:	90                   	nop

c002bb92 <ATA::ATA()>:
c002bb92:	83 ec 0c             	sub    esp,0xc
c002bb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb99:	83 ec 04             	sub    esp,0x4
c002bb9c:	68 00 02 00 00       	push   0x200
c002bba1:	68 85 39 03 c0       	push   0xc0033985
c002bba6:	50                   	push   eax
c002bba7:	e8 9a fb fe ff       	call   c001b746 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bbac:	83 c4 10             	add    esp,0x10
c002bbaf:	ba ec 38 03 c0       	mov    edx,0xc00338ec
c002bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bbb8:	89 10                	mov    DWORD PTR [eax],edx
c002bbba:	90                   	nop
c002bbbb:	83 c4 0c             	add    esp,0xc
c002bbbe:	c3                   	ret    
c002bbbf:	90                   	nop

c002bbc0 <ATA::flush(bool)>:
c002bbc0:	53                   	push   ebx
c002bbc1:	83 ec 08             	sub    esp,0x8
c002bbc4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bbc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bbcd:	83 f8 01             	cmp    eax,0x1
c002bbd0:	19 c0                	sbb    eax,eax
c002bbd2:	83 e0 fd             	and    eax,0xfffffffd
c002bbd5:	05 ea 00 00 00       	add    eax,0xea
c002bbda:	50                   	push   eax
c002bbdb:	6a 07                	push   0x7
c002bbdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bbe4:	50                   	push   eax
c002bbe5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bbeb:	e8 04 f1 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bbf0:	83 c4 0c             	add    esp,0xc
c002bbf3:	6a 00                	push   0x0
c002bbf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bbfc:	50                   	push   eax
c002bbfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc03:	e8 d0 fb ff ff       	call   c002b7d8 <IDE::polling(unsigned char, unsigned int)>
c002bc08:	83 c4 18             	add    esp,0x18
c002bc0b:	5b                   	pop    ebx
c002bc0c:	c3                   	ret    
c002bc0d:	90                   	nop

c002bc0e <ATA::readyForCommand()>:
c002bc0e:	56                   	push   esi
c002bc0f:	53                   	push   ebx
c002bc10:	53                   	push   ebx
c002bc11:	31 db                	xor    ebx,ebx
c002bc13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bc17:	51                   	push   ecx
c002bc18:	6a 0c                	push   0xc
c002bc1a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bc21:	50                   	push   eax
c002bc22:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bc28:	e8 87 f1 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002bc2d:	83 c4 10             	add    esp,0x10
c002bc30:	a8 88                	test   al,0x88
c002bc32:	74 1f                	je     c002bc53 <ATA::readyForCommand()+0x45>
c002bc34:	43                   	inc    ebx
c002bc35:	83 fb 63             	cmp    ebx,0x63
c002bc38:	7e dd                	jle    c002bc17 <ATA::readyForCommand()+0x9>
c002bc3a:	83 ec 0c             	sub    esp,0xc
c002bc3d:	6a 0a                	push   0xa
c002bc3f:	e8 30 98 ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002bc44:	83 c4 10             	add    esp,0x10
c002bc47:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bc4d:	75 c8                	jne    c002bc17 <ATA::readyForCommand()+0x9>
c002bc4f:	31 c0                	xor    eax,eax
c002bc51:	eb 02                	jmp    c002bc55 <ATA::readyForCommand()+0x47>
c002bc53:	b0 01                	mov    al,0x1
c002bc55:	5a                   	pop    edx
c002bc56:	5b                   	pop    ebx
c002bc57:	5e                   	pop    esi
c002bc58:	c3                   	ret    
c002bc59:	90                   	nop

c002bc5a <ATA::access(unsigned long long, int, void*, bool)>:
c002bc5a:	55                   	push   ebp
c002bc5b:	57                   	push   edi
c002bc5c:	56                   	push   esi
c002bc5d:	53                   	push   ebx
c002bc5e:	83 ec 2c             	sub    esp,0x2c
c002bc61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bc65:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bc69:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bc6d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bc71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bc75:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bc79:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002bc7d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bc83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bc87:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bc8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bc91:	c1 e0 06             	shl    eax,0x6
c002bc94:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bc9c:	74 5b                	je     c002bcf9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002bc9e:	89 fa                	mov    edx,edi
c002bca0:	89 f0                	mov    eax,esi
c002bca2:	c1 ea 1c             	shr    edx,0x1c
c002bca5:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002bca9:	89 d1                	mov    ecx,edx
c002bcab:	09 c1                	or     ecx,eax
c002bcad:	74 25                	je     c002bcd4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bcaf:	31 ed                	xor    ebp,ebp
c002bcb1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bcb8:	89 fa                	mov    edx,edi
c002bcba:	89 f0                	mov    eax,esi
c002bcbc:	0f ad d0             	shrd   eax,edx,cl
c002bcbf:	d3 ea                	shr    edx,cl
c002bcc1:	f6 c1 20             	test   cl,0x20
c002bcc4:	74 02                	je     c002bcc8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bcc6:	89 d0                	mov    eax,edx
c002bcc8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bccc:	45                   	inc    ebp
c002bccd:	83 fd 06             	cmp    ebp,0x6
c002bcd0:	75 df                	jne    c002bcb1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bcd2:	eb 71                	jmp    c002bd45 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002bcd4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bcd9:	89 f0                	mov    eax,esi
c002bcdb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bce2:	0f ac f8 10          	shrd   eax,edi,0x10
c002bce6:	bf 01 00 00 00       	mov    edi,0x1
c002bceb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bcef:	c1 ee 18             	shr    esi,0x18
c002bcf2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bcf7:	eb 53                	jmp    c002bd4c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bcf9:	6a 00                	push   0x0
c002bcfb:	6a 3f                	push   0x3f
c002bcfd:	57                   	push   edi
c002bcfe:	56                   	push   esi
c002bcff:	e8 fc 2a 00 00       	call   c002e800 <__umoddi3>
c002bd04:	83 c4 10             	add    esp,0x10
c002bd07:	40                   	inc    eax
c002bd08:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bd0c:	6a 00                	push   0x0
c002bd0e:	68 f0 03 00 00       	push   0x3f0
c002bd13:	57                   	push   edi
c002bd14:	56                   	push   esi
c002bd15:	e8 e6 29 00 00       	call   c002e700 <__udivdi3>
c002bd1a:	83 c4 10             	add    esp,0x10
c002bd1d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bd22:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bd29:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bd2e:	6a 00                	push   0x0
c002bd30:	6a 3f                	push   0x3f
c002bd32:	57                   	push   edi
c002bd33:	31 ff                	xor    edi,edi
c002bd35:	56                   	push   esi
c002bd36:	e8 c5 29 00 00       	call   c002e700 <__udivdi3>
c002bd3b:	83 c4 10             	add    esp,0x10
c002bd3e:	83 e0 0f             	and    eax,0xf
c002bd41:	89 c6                	mov    esi,eax
c002bd43:	eb 07                	jmp    c002bd4c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bd45:	31 f6                	xor    esi,esi
c002bd47:	bf 02 00 00 00       	mov    edi,0x2
c002bd4c:	50                   	push   eax
c002bd4d:	6a 00                	push   0x0
c002bd4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd56:	50                   	push   eax
c002bd57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bd5b:	e8 a2 f1 ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002bd60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bd63:	e8 a6 fe ff ff       	call   c002bc0e <ATA::readyForCommand()>
c002bd68:	83 c4 10             	add    esp,0x10
c002bd6b:	84 c0                	test   al,al
c002bd6d:	75 0a                	jne    c002bd79 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002bd6f:	be 01 00 00 00       	mov    esi,0x1
c002bd74:	e9 9b 02 00 00       	jmp    c002c014 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bd79:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bd7f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bd85:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bd8c:	c1 e0 04             	shl    eax,0x4
c002bd8f:	09 c6                	or     esi,eax
c002bd91:	f7 c7 03 00 00 00    	test   edi,0x3
c002bd97:	75 05                	jne    c002bd9e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002bd99:	83 ce a0             	or     esi,0xffffffa0
c002bd9c:	eb 03                	jmp    c002bda1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bd9e:	83 ce e0             	or     esi,0xffffffe0
c002bda1:	89 f0                	mov    eax,esi
c002bda3:	0f b6 f0             	movzx  esi,al
c002bda6:	56                   	push   esi
c002bda7:	6a 06                	push   0x6
c002bda9:	51                   	push   ecx
c002bdaa:	52                   	push   edx
c002bdab:	e8 44 ef ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdb0:	83 c4 10             	add    esp,0x10
c002bdb3:	6a 00                	push   0x0
c002bdb5:	6a 01                	push   0x1
c002bdb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdbe:	50                   	push   eax
c002bdbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdc5:	e8 2a ef ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdca:	89 f8                	mov    eax,edi
c002bdcc:	83 c4 10             	add    esp,0x10
c002bdcf:	0f b6 f0             	movzx  esi,al
c002bdd2:	83 fe 02             	cmp    esi,0x2
c002bdd5:	75 6e                	jne    c002be45 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002bdd7:	6a 00                	push   0x0
c002bdd9:	6a 08                	push   0x8
c002bddb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bde2:	50                   	push   eax
c002bde3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bde9:	e8 06 ef ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdee:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bdf3:	50                   	push   eax
c002bdf4:	6a 09                	push   0x9
c002bdf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdfd:	50                   	push   eax
c002bdfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be04:	e8 eb ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be09:	83 c4 20             	add    esp,0x20
c002be0c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002be11:	50                   	push   eax
c002be12:	6a 0a                	push   0xa
c002be14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be1b:	50                   	push   eax
c002be1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be22:	e8 cd ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be27:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002be2c:	50                   	push   eax
c002be2d:	6a 0b                	push   0xb
c002be2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be36:	50                   	push   eax
c002be37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be3d:	e8 b2 ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be42:	83 c4 20             	add    esp,0x20
c002be45:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002be4a:	50                   	push   eax
c002be4b:	6a 02                	push   0x2
c002be4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be54:	50                   	push   eax
c002be55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be5b:	e8 94 ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be60:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002be65:	50                   	push   eax
c002be66:	6a 03                	push   0x3
c002be68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be6f:	50                   	push   eax
c002be70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be76:	e8 79 ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be7b:	83 c4 20             	add    esp,0x20
c002be7e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002be83:	50                   	push   eax
c002be84:	6a 04                	push   0x4
c002be86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be8d:	50                   	push   eax
c002be8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be94:	e8 5b ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002be9e:	50                   	push   eax
c002be9f:	6a 05                	push   0x5
c002bea1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bea8:	50                   	push   eax
c002bea9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002beaf:	e8 40 ee ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002beb4:	83 c4 20             	add    esp,0x20
c002beb7:	83 fe 02             	cmp    esi,0x2
c002beba:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002bebf:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002bec4:	85 c9                	test   ecx,ecx
c002bec6:	74 07                	je     c002becf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002bec8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002becd:	75 47                	jne    c002bf16 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002becf:	89 f8                	mov    eax,edi
c002bed1:	0f b6 f8             	movzx  edi,al
c002bed4:	31 c0                	xor    eax,eax
c002bed6:	83 ff 02             	cmp    edi,0x2
c002bed9:	0f 95 c0             	setne  al
c002bedc:	89 c6                	mov    esi,eax
c002bede:	74 0c                	je     c002beec <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002bee0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bee5:	b8 30 00 00 00       	mov    eax,0x30
c002beea:	75 2f                	jne    c002bf1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002beec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bef0:	83 f2 01             	xor    edx,0x1
c002bef3:	85 c9                	test   ecx,ecx
c002bef5:	74 09                	je     c002bf00 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002bef7:	84 d2                	test   dl,dl
c002bef9:	b8 24 00 00 00       	mov    eax,0x24
c002befe:	75 1b                	jne    c002bf1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bf00:	85 f6                	test   esi,esi
c002bf02:	0f 84 67 fe ff ff    	je     c002bd6f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bf08:	84 d2                	test   dl,dl
c002bf0a:	b8 20 00 00 00       	mov    eax,0x20
c002bf0f:	75 0a                	jne    c002bf1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bf11:	e9 59 fe ff ff       	jmp    c002bd6f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bf16:	b8 34 00 00 00       	mov    eax,0x34
c002bf1b:	50                   	push   eax
c002bf1c:	6a 07                	push   0x7
c002bf1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf25:	50                   	push   eax
c002bf26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf2c:	e8 c3 ed ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf31:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002bf35:	83 c4 10             	add    esp,0x10
c002bf38:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002bf3d:	85 f6                	test   esi,esi
c002bf3f:	0f 84 b5 00 00 00    	je     c002bffa <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002bf45:	50                   	push   eax
c002bf46:	6a 01                	push   0x1
c002bf48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf4f:	50                   	push   eax
c002bf50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf56:	e8 7d f8 ff ff       	call   c002b7d8 <IDE::polling(unsigned char, unsigned int)>
c002bf5b:	83 c4 10             	add    esp,0x10
c002bf5e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bf64:	0f b6 c0             	movzx  eax,al
c002bf67:	85 c0                	test   eax,eax
c002bf69:	74 1f                	je     c002bf8a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002bf6b:	50                   	push   eax
c002bf6c:	89 c6                	mov    esi,eax
c002bf6e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bf75:	0f b6 d2             	movzx  edx,dl
c002bf78:	50                   	push   eax
c002bf79:	52                   	push   edx
c002bf7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf80:	e8 99 f7 ff ff       	call   c002b71e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bf85:	e9 87 00 00 00       	jmp    c002c011 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002bf8a:	85 ed                	test   ebp,ebp
c002bf8c:	74 3b                	je     c002bfc9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002bf8e:	31 ff                	xor    edi,edi
c002bf90:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bf94:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002bf98:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002bf9d:	50                   	push   eax
c002bf9e:	50                   	push   eax
c002bf9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfa6:	50                   	push   eax
c002bfa7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfad:	e8 30 ed ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002bfb2:	89 c2                	mov    edx,eax
c002bfb4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002bfb9:	66 ef                	out    dx,ax
c002bfbb:	47                   	inc    edi
c002bfbc:	83 c4 10             	add    esp,0x10
c002bfbf:	81 ff 00 01 00 00    	cmp    edi,0x100
c002bfc5:	75 c9                	jne    c002bf90 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002bfc7:	eb 23                	jmp    c002bfec <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002bfc9:	51                   	push   ecx
c002bfca:	0f b6 d2             	movzx  edx,dl
c002bfcd:	51                   	push   ecx
c002bfce:	52                   	push   edx
c002bfcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfd5:	e8 08 ed ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002bfda:	b9 00 01 00 00       	mov    ecx,0x100
c002bfdf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bfe3:	89 c2                	mov    edx,eax
c002bfe5:	fc                   	cld    
c002bfe6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bfe9:	83 c4 10             	add    esp,0x10
c002bfec:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bff4:	4e                   	dec    esi
c002bff5:	e9 43 ff ff ff       	jmp    c002bf3d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002bffa:	31 f6                	xor    esi,esi
c002bffc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c001:	74 11                	je     c002c014 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c003:	50                   	push   eax
c002c004:	50                   	push   eax
c002c005:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002c00a:	50                   	push   eax
c002c00b:	53                   	push   ebx
c002c00c:	e8 af fb ff ff       	call   c002bbc0 <ATA::flush(bool)>
c002c011:	83 c4 10             	add    esp,0x10
c002c014:	83 c4 2c             	add    esp,0x2c
c002c017:	89 f0                	mov    eax,esi
c002c019:	5b                   	pop    ebx
c002c01a:	5e                   	pop    esi
c002c01b:	5f                   	pop    edi
c002c01c:	5d                   	pop    ebp
c002c01d:	c3                   	ret    

c002c01e <ATA::detectCHS()>:
c002c01e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c022:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c028:	c1 e0 06             	shl    eax,0x6
c002c02b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c031:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c03b:	c7 44 24 04 d0 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc00338d0
c002c043:	e9 0e 42 ff ff       	jmp    c0020256 <KePanic(char const*)>

c002c048 <ATA::open(int, int, void*)>:
c002c048:	53                   	push   ebx
c002c049:	83 ec 08             	sub    esp,0x8
c002c04c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c050:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c054:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c058:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c05e:	c1 e0 06             	shl    eax,0x6
c002c061:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c067:	01 d0                	add    eax,edx
c002c069:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c070:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c076:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c07d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c087:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c08e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c094:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c09b:	75 0c                	jne    c002c0a9 <ATA::open(int, int, void*)+0x61>
c002c09d:	83 ec 0c             	sub    esp,0xc
c002c0a0:	53                   	push   ebx
c002c0a1:	e8 78 ff ff ff       	call   c002c01e <ATA::detectCHS()>
c002c0a6:	83 c4 10             	add    esp,0x10
c002c0a9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c0af:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c0b5:	c1 e0 06             	shl    eax,0x6
c002c0b8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c0bf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c0c9:	d1 e8                	shr    eax,1
c002c0cb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c0d1:	6a 04                	push   0x4
c002c0d3:	6a 0c                	push   0xc
c002c0d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0dc:	50                   	push   eax
c002c0dd:	52                   	push   edx
c002c0de:	e8 11 ec ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0e3:	90                   	nop
c002c0e4:	90                   	nop
c002c0e5:	6a 00                	push   0x0
c002c0e7:	6a 0c                	push   0xc
c002c0e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0f0:	50                   	push   eax
c002c0f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0f7:	e8 f8 eb ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0fc:	83 c4 14             	add    esp,0x14
c002c0ff:	53                   	push   ebx
c002c100:	e8 a9 f6 fe ff       	call   c001b7ae <PhysicalDisk::startCache()>
c002c105:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c108:	e8 e5 08 ff ff       	call   c001c9f2 <createPartitionsForDisk(PhysicalDisk*)>
c002c10d:	83 c4 18             	add    esp,0x18
c002c110:	31 c0                	xor    eax,eax
c002c112:	5b                   	pop    ebx
c002c113:	c3                   	ret    

c002c114 <combineCharAndColour(char, unsigned char)>:
c002c114:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c119:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c11f:	c1 e0 08             	shl    eax,0x8
c002c122:	09 d0                	or     eax,edx
c002c124:	c3                   	ret    

c002c125 <combineColours(unsigned char, unsigned char)>:
c002c125:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c12a:	c1 e0 04             	shl    eax,0x4
c002c12d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c131:	c3                   	ret    

c002c132 <ATA::read(unsigned long long, int, void*)>:
c002c132:	55                   	push   ebp
c002c133:	57                   	push   edi
c002c134:	56                   	push   esi
c002c135:	be 04 00 00 00       	mov    esi,0x4
c002c13a:	53                   	push   ebx
c002c13b:	83 ec 0c             	sub    esp,0xc
c002c13e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c142:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c146:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c14a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c14e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c151:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c157:	0f 87 a1 01 00 00    	ja     c002c2fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c15d:	85 c9                	test   ecx,ecx
c002c15f:	be 06 00 00 00       	mov    esi,0x6
c002c164:	0f 84 94 01 00 00    	je     c002c2fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c16a:	55                   	push   ebp
c002c16b:	55                   	push   ebp
c002c16c:	6a 00                	push   0x0
c002c16e:	51                   	push   ecx
c002c16f:	53                   	push   ebx
c002c170:	52                   	push   edx
c002c171:	50                   	push   eax
c002c172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c176:	e8 df fa ff ff       	call   c002bc5a <ATA::access(unsigned long long, int, void*, bool)>
c002c17b:	83 c4 20             	add    esp,0x20
c002c17e:	85 c0                	test   eax,eax
c002c180:	89 c6                	mov    esi,eax
c002c182:	0f 85 71 01 00 00    	jne    c002c2f9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c188:	50                   	push   eax
c002c189:	bd 10 27 00 00       	mov    ebp,0x2710
c002c18e:	50                   	push   eax
c002c18f:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c195:	6a 0f                	push   0xf
c002c197:	6a 00                	push   0x0
c002c199:	89 da                	mov    edx,ebx
c002c19b:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c1a1:	e8 7f ff ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002c1a6:	59                   	pop    ecx
c002c1a7:	b9 0a 00 00 00       	mov    ecx,0xa
c002c1ac:	5b                   	pop    ebx
c002c1ad:	0f b6 d8             	movzx  ebx,al
c002c1b0:	89 d0                	mov    eax,edx
c002c1b2:	53                   	push   ebx
c002c1b3:	99                   	cdq    
c002c1b4:	f7 fd                	idiv   ebp
c002c1b6:	99                   	cdq    
c002c1b7:	f7 f9                	idiv   ecx
c002c1b9:	83 c2 30             	add    edx,0x30
c002c1bc:	0f b6 d2             	movzx  edx,dl
c002c1bf:	52                   	push   edx
c002c1c0:	e8 4f ff ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c1c5:	5f                   	pop    edi
c002c1c6:	bf e8 03 00 00       	mov    edi,0x3e8
c002c1cb:	5a                   	pop    edx
c002c1cc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c1d2:	53                   	push   ebx
c002c1d3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c1d8:	99                   	cdq    
c002c1d9:	f7 ff                	idiv   edi
c002c1db:	99                   	cdq    
c002c1dc:	f7 f9                	idiv   ecx
c002c1de:	8d 42 30             	lea    eax,[edx+0x30]
c002c1e1:	0f b6 c0             	movzx  eax,al
c002c1e4:	50                   	push   eax
c002c1e5:	e8 2a ff ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c1ea:	5f                   	pop    edi
c002c1eb:	bf 64 00 00 00       	mov    edi,0x64
c002c1f0:	5a                   	pop    edx
c002c1f1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c1f7:	53                   	push   ebx
c002c1f8:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c1fd:	99                   	cdq    
c002c1fe:	f7 ff                	idiv   edi
c002c200:	99                   	cdq    
c002c201:	f7 f9                	idiv   ecx
c002c203:	8d 42 30             	lea    eax,[edx+0x30]
c002c206:	0f b6 c0             	movzx  eax,al
c002c209:	50                   	push   eax
c002c20a:	e8 05 ff ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c20f:	5a                   	pop    edx
c002c210:	5a                   	pop    edx
c002c211:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c217:	53                   	push   ebx
c002c218:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c21d:	99                   	cdq    
c002c21e:	f7 f9                	idiv   ecx
c002c220:	99                   	cdq    
c002c221:	f7 f9                	idiv   ecx
c002c223:	8d 42 30             	lea    eax,[edx+0x30]
c002c226:	0f b6 c0             	movzx  eax,al
c002c229:	50                   	push   eax
c002c22a:	e8 e5 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c22f:	5a                   	pop    edx
c002c230:	5a                   	pop    edx
c002c231:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c237:	53                   	push   ebx
c002c238:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c23d:	99                   	cdq    
c002c23e:	f7 f9                	idiv   ecx
c002c240:	83 c2 30             	add    edx,0x30
c002c243:	0f b6 d2             	movzx  edx,dl
c002c246:	52                   	push   edx
c002c247:	e8 c8 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c24c:	5a                   	pop    edx
c002c24d:	5a                   	pop    edx
c002c24e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c254:	53                   	push   ebx
c002c255:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c25a:	99                   	cdq    
c002c25b:	f7 fd                	idiv   ebp
c002c25d:	99                   	cdq    
c002c25e:	f7 f9                	idiv   ecx
c002c260:	8d 42 30             	lea    eax,[edx+0x30]
c002c263:	0f b6 c0             	movzx  eax,al
c002c266:	50                   	push   eax
c002c267:	e8 a8 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c26c:	5d                   	pop    ebp
c002c26d:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c272:	5a                   	pop    edx
c002c273:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c279:	53                   	push   ebx
c002c27a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c27f:	99                   	cdq    
c002c280:	f7 fd                	idiv   ebp
c002c282:	99                   	cdq    
c002c283:	f7 f9                	idiv   ecx
c002c285:	8d 42 30             	lea    eax,[edx+0x30]
c002c288:	0f b6 c0             	movzx  eax,al
c002c28b:	50                   	push   eax
c002c28c:	e8 83 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c291:	5d                   	pop    ebp
c002c292:	5a                   	pop    edx
c002c293:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c299:	53                   	push   ebx
c002c29a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c29f:	99                   	cdq    
c002c2a0:	f7 ff                	idiv   edi
c002c2a2:	99                   	cdq    
c002c2a3:	f7 f9                	idiv   ecx
c002c2a5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2a8:	0f b6 c0             	movzx  eax,al
c002c2ab:	50                   	push   eax
c002c2ac:	e8 63 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c2b1:	5f                   	pop    edi
c002c2b2:	5d                   	pop    ebp
c002c2b3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c2b9:	53                   	push   ebx
c002c2ba:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2bf:	99                   	cdq    
c002c2c0:	f7 f9                	idiv   ecx
c002c2c2:	99                   	cdq    
c002c2c3:	f7 f9                	idiv   ecx
c002c2c5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2c8:	0f b6 c0             	movzx  eax,al
c002c2cb:	50                   	push   eax
c002c2cc:	e8 43 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c2d1:	5a                   	pop    edx
c002c2d2:	5f                   	pop    edi
c002c2d3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c2d9:	53                   	push   ebx
c002c2da:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2df:	99                   	cdq    
c002c2e0:	f7 f9                	idiv   ecx
c002c2e2:	83 c2 30             	add    edx,0x30
c002c2e5:	0f b6 d2             	movzx  edx,dl
c002c2e8:	52                   	push   edx
c002c2e9:	e8 26 fe ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c2ee:	83 c4 10             	add    esp,0x10
c002c2f1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c2f7:	eb 05                	jmp    c002c2fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c2f9:	be 01 00 00 00       	mov    esi,0x1
c002c2fe:	83 c4 0c             	add    esp,0xc
c002c301:	89 f0                	mov    eax,esi
c002c303:	5b                   	pop    ebx
c002c304:	5e                   	pop    esi
c002c305:	5f                   	pop    edi
c002c306:	5d                   	pop    ebp
c002c307:	c3                   	ret    

c002c308 <ATA::write(unsigned long long, int, void*)>:
c002c308:	55                   	push   ebp
c002c309:	57                   	push   edi
c002c30a:	56                   	push   esi
c002c30b:	be 04 00 00 00       	mov    esi,0x4
c002c310:	53                   	push   ebx
c002c311:	83 ec 0c             	sub    esp,0xc
c002c314:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c318:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c31c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c320:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c324:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c327:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c32d:	0f 87 9c 01 00 00    	ja     c002c4cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c333:	85 c9                	test   ecx,ecx
c002c335:	be 06 00 00 00       	mov    esi,0x6
c002c33a:	0f 84 8f 01 00 00    	je     c002c4cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c340:	55                   	push   ebp
c002c341:	55                   	push   ebp
c002c342:	6a 01                	push   0x1
c002c344:	51                   	push   ecx
c002c345:	53                   	push   ebx
c002c346:	52                   	push   edx
c002c347:	50                   	push   eax
c002c348:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c34c:	e8 09 f9 ff ff       	call   c002bc5a <ATA::access(unsigned long long, int, void*, bool)>
c002c351:	83 c4 20             	add    esp,0x20
c002c354:	85 c0                	test   eax,eax
c002c356:	89 c6                	mov    esi,eax
c002c358:	0f 85 6c 01 00 00    	jne    c002c4ca <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c35e:	50                   	push   eax
c002c35f:	bd 10 27 00 00       	mov    ebp,0x2710
c002c364:	50                   	push   eax
c002c365:	6a 0f                	push   0xf
c002c367:	6a 00                	push   0x0
c002c369:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c36f:	e8 b1 fd ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002c374:	5a                   	pop    edx
c002c375:	59                   	pop    ecx
c002c376:	b9 0a 00 00 00       	mov    ecx,0xa
c002c37b:	0f b6 d8             	movzx  ebx,al
c002c37e:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c383:	53                   	push   ebx
c002c384:	99                   	cdq    
c002c385:	f7 fd                	idiv   ebp
c002c387:	99                   	cdq    
c002c388:	f7 f9                	idiv   ecx
c002c38a:	8d 42 30             	lea    eax,[edx+0x30]
c002c38d:	0f b6 c0             	movzx  eax,al
c002c390:	50                   	push   eax
c002c391:	e8 7e fd ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c396:	5f                   	pop    edi
c002c397:	bf e8 03 00 00       	mov    edi,0x3e8
c002c39c:	5a                   	pop    edx
c002c39d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c3a3:	53                   	push   ebx
c002c3a4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3a9:	99                   	cdq    
c002c3aa:	f7 ff                	idiv   edi
c002c3ac:	99                   	cdq    
c002c3ad:	f7 f9                	idiv   ecx
c002c3af:	8d 42 30             	lea    eax,[edx+0x30]
c002c3b2:	0f b6 c0             	movzx  eax,al
c002c3b5:	50                   	push   eax
c002c3b6:	e8 59 fd ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c3bb:	5f                   	pop    edi
c002c3bc:	bf 64 00 00 00       	mov    edi,0x64
c002c3c1:	5a                   	pop    edx
c002c3c2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c3c8:	53                   	push   ebx
c002c3c9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3ce:	99                   	cdq    
c002c3cf:	f7 ff                	idiv   edi
c002c3d1:	99                   	cdq    
c002c3d2:	f7 f9                	idiv   ecx
c002c3d4:	8d 42 30             	lea    eax,[edx+0x30]
c002c3d7:	0f b6 c0             	movzx  eax,al
c002c3da:	50                   	push   eax
c002c3db:	e8 34 fd ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c3e0:	5a                   	pop    edx
c002c3e1:	5a                   	pop    edx
c002c3e2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c3e8:	53                   	push   ebx
c002c3e9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3ee:	99                   	cdq    
c002c3ef:	f7 f9                	idiv   ecx
c002c3f1:	99                   	cdq    
c002c3f2:	f7 f9                	idiv   ecx
c002c3f4:	8d 42 30             	lea    eax,[edx+0x30]
c002c3f7:	0f b6 c0             	movzx  eax,al
c002c3fa:	50                   	push   eax
c002c3fb:	e8 14 fd ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c400:	5a                   	pop    edx
c002c401:	5a                   	pop    edx
c002c402:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c408:	53                   	push   ebx
c002c409:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c40e:	99                   	cdq    
c002c40f:	f7 f9                	idiv   ecx
c002c411:	83 c2 30             	add    edx,0x30
c002c414:	0f b6 d2             	movzx  edx,dl
c002c417:	52                   	push   edx
c002c418:	e8 f7 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c41d:	5a                   	pop    edx
c002c41e:	5a                   	pop    edx
c002c41f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c425:	53                   	push   ebx
c002c426:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c42b:	99                   	cdq    
c002c42c:	f7 fd                	idiv   ebp
c002c42e:	99                   	cdq    
c002c42f:	f7 f9                	idiv   ecx
c002c431:	8d 42 30             	lea    eax,[edx+0x30]
c002c434:	0f b6 c0             	movzx  eax,al
c002c437:	50                   	push   eax
c002c438:	e8 d7 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c43d:	5d                   	pop    ebp
c002c43e:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c443:	5a                   	pop    edx
c002c444:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c44a:	53                   	push   ebx
c002c44b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c450:	99                   	cdq    
c002c451:	f7 fd                	idiv   ebp
c002c453:	99                   	cdq    
c002c454:	f7 f9                	idiv   ecx
c002c456:	8d 42 30             	lea    eax,[edx+0x30]
c002c459:	0f b6 c0             	movzx  eax,al
c002c45c:	50                   	push   eax
c002c45d:	e8 b2 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c462:	5d                   	pop    ebp
c002c463:	5a                   	pop    edx
c002c464:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c46a:	53                   	push   ebx
c002c46b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c470:	99                   	cdq    
c002c471:	f7 ff                	idiv   edi
c002c473:	99                   	cdq    
c002c474:	f7 f9                	idiv   ecx
c002c476:	8d 42 30             	lea    eax,[edx+0x30]
c002c479:	0f b6 c0             	movzx  eax,al
c002c47c:	50                   	push   eax
c002c47d:	e8 92 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c482:	5f                   	pop    edi
c002c483:	5d                   	pop    ebp
c002c484:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c48a:	53                   	push   ebx
c002c48b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c490:	99                   	cdq    
c002c491:	f7 f9                	idiv   ecx
c002c493:	99                   	cdq    
c002c494:	f7 f9                	idiv   ecx
c002c496:	8d 42 30             	lea    eax,[edx+0x30]
c002c499:	0f b6 c0             	movzx  eax,al
c002c49c:	50                   	push   eax
c002c49d:	e8 72 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c4a2:	5a                   	pop    edx
c002c4a3:	5f                   	pop    edi
c002c4a4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c4aa:	53                   	push   ebx
c002c4ab:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4b0:	99                   	cdq    
c002c4b1:	f7 f9                	idiv   ecx
c002c4b3:	83 c2 30             	add    edx,0x30
c002c4b6:	0f b6 d2             	movzx  edx,dl
c002c4b9:	52                   	push   edx
c002c4ba:	e8 55 fc ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002c4bf:	83 c4 10             	add    esp,0x10
c002c4c2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c4c8:	eb 05                	jmp    c002c4cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4ca:	be 01 00 00 00       	mov    esi,0x1
c002c4cf:	83 c4 0c             	add    esp,0xc
c002c4d2:	89 f0                	mov    eax,esi
c002c4d4:	5b                   	pop    ebx
c002c4d5:	5e                   	pop    esi
c002c4d6:	5f                   	pop    edi
c002c4d7:	5d                   	pop    ebp
c002c4d8:	c3                   	ret    
c002c4d9:	90                   	nop

c002c4da <ATAPI::write(unsigned long long, int, void*)>:
c002c4da:	b8 03 00 00 00       	mov    eax,0x3
c002c4df:	c3                   	ret    

c002c4e0 <ATAPI::close(int, int, void*)>:
c002c4e0:	83 ec 0c             	sub    esp,0xc
c002c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c4e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c4ed:	85 c0                	test   eax,eax
c002c4ef:	74 0c                	je     c002c4fd <ATAPI::close(int, int, void*)+0x1d>
c002c4f1:	8b 10                	mov    edx,DWORD PTR [eax]
c002c4f3:	83 ec 0c             	sub    esp,0xc
c002c4f6:	50                   	push   eax
c002c4f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c4fa:	83 c4 10             	add    esp,0x10
c002c4fd:	31 c0                	xor    eax,eax
c002c4ff:	83 c4 0c             	add    esp,0xc
c002c502:	c3                   	ret    
c002c503:	90                   	nop

c002c504 <ATAPI::ATAPI()>:
c002c504:	83 ec 0c             	sub    esp,0xc
c002c507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c50b:	83 ec 04             	sub    esp,0x4
c002c50e:	68 00 08 00 00       	push   0x800
c002c513:	68 25 3a 03 c0       	push   0xc0033a25
c002c518:	50                   	push   eax
c002c519:	e8 28 f2 fe ff       	call   c001b746 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c51e:	83 c4 10             	add    esp,0x10
c002c521:	ba 34 39 03 c0       	mov    edx,0xc0033934
c002c526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c52a:	89 10                	mov    DWORD PTR [eax],edx
c002c52c:	90                   	nop
c002c52d:	83 c4 0c             	add    esp,0xc
c002c530:	c3                   	ret    
c002c531:	90                   	nop

c002c532 <ATAPI::readyForCommand()>:
c002c532:	56                   	push   esi
c002c533:	53                   	push   ebx
c002c534:	53                   	push   ebx
c002c535:	31 db                	xor    ebx,ebx
c002c537:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c53b:	51                   	push   ecx
c002c53c:	6a 0c                	push   0xc
c002c53e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c545:	50                   	push   eax
c002c546:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c54c:	e8 63 e8 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002c551:	83 c4 10             	add    esp,0x10
c002c554:	a8 88                	test   al,0x88
c002c556:	74 25                	je     c002c57d <ATAPI::readyForCommand()+0x4b>
c002c558:	43                   	inc    ebx
c002c559:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c55f:	7e da                	jle    c002c53b <ATAPI::readyForCommand()+0x9>
c002c561:	83 ec 0c             	sub    esp,0xc
c002c564:	68 5e 01 00 00       	push   0x15e
c002c569:	e8 06 8f ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002c56e:	83 c4 10             	add    esp,0x10
c002c571:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c577:	75 c2                	jne    c002c53b <ATAPI::readyForCommand()+0x9>
c002c579:	31 c0                	xor    eax,eax
c002c57b:	eb 02                	jmp    c002c57f <ATAPI::readyForCommand()+0x4d>
c002c57d:	b0 01                	mov    al,0x1
c002c57f:	5a                   	pop    edx
c002c580:	5b                   	pop    ebx
c002c581:	5e                   	pop    esi
c002c582:	c3                   	ret    
c002c583:	90                   	nop

c002c584 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c584:	55                   	push   ebp
c002c585:	57                   	push   edi
c002c586:	56                   	push   esi
c002c587:	53                   	push   ebx
c002c588:	83 ec 20             	sub    esp,0x20
c002c58b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c58f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c593:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c597:	6a 01                	push   0x1
c002c599:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5a0:	50                   	push   eax
c002c5a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a7:	e8 56 e9 ff ff       	call   c002af02 <IDE::enableIRQs(unsigned char, bool)>
c002c5ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5b3:	59                   	pop    ecx
c002c5b4:	5e                   	pop    esi
c002c5b5:	50                   	push   eax
c002c5b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5bc:	e8 0d e7 ff ff       	call   c002acce <IDE::prepareInterrupt(unsigned char)>
c002c5c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c5c4:	e8 69 ff ff ff       	call   c002c532 <ATAPI::readyForCommand()>
c002c5c9:	83 c4 10             	add    esp,0x10
c002c5cc:	84 c0                	test   al,al
c002c5ce:	75 0a                	jne    c002c5da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c5d0:	bb 01 00 00 00       	mov    ebx,0x1
c002c5d5:	e9 5f 02 00 00       	jmp    c002c839 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c5da:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c5e0:	c1 e0 04             	shl    eax,0x4
c002c5e3:	0f b6 c0             	movzx  eax,al
c002c5e6:	50                   	push   eax
c002c5e7:	6a 06                	push   0x6
c002c5e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5f0:	50                   	push   eax
c002c5f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5f7:	e8 f8 e6 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5fc:	6a 00                	push   0x0
c002c5fe:	6a 01                	push   0x1
c002c600:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c607:	50                   	push   eax
c002c608:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c60e:	e8 e1 e6 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c613:	83 c4 20             	add    esp,0x20
c002c616:	0f b6 c3             	movzx  eax,bl
c002c619:	50                   	push   eax
c002c61a:	0f b6 df             	movzx  ebx,bh
c002c61d:	6a 04                	push   0x4
c002c61f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c626:	50                   	push   eax
c002c627:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c62d:	e8 c2 e6 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c632:	53                   	push   ebx
c002c633:	6a 05                	push   0x5
c002c635:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c63c:	50                   	push   eax
c002c63d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c643:	e8 ac e6 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c648:	83 c4 20             	add    esp,0x20
c002c64b:	68 a0 00 00 00       	push   0xa0
c002c650:	6a 07                	push   0x7
c002c652:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c659:	50                   	push   eax
c002c65a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c660:	e8 8f e6 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c665:	83 c4 0c             	add    esp,0xc
c002c668:	6a 01                	push   0x1
c002c66a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c671:	50                   	push   eax
c002c672:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c678:	e8 5b f1 ff ff       	call   c002b7d8 <IDE::polling(unsigned char, unsigned int)>
c002c67d:	83 c4 10             	add    esp,0x10
c002c680:	0f b6 d8             	movzx  ebx,al
c002c683:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c689:	85 db                	test   ebx,ebx
c002c68b:	74 20                	je     c002c6ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c68d:	53                   	push   ebx
c002c68e:	0f b6 c0             	movzx  eax,al
c002c691:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c698:	52                   	push   edx
c002c699:	50                   	push   eax
c002c69a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6a0:	e8 79 f0 ff ff       	call   c002b71e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c6a5:	83 c4 10             	add    esp,0x10
c002c6a8:	e9 8c 01 00 00       	jmp    c002c839 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c6ad:	52                   	push   edx
c002c6ae:	0f b6 c0             	movzx  eax,al
c002c6b1:	52                   	push   edx
c002c6b2:	50                   	push   eax
c002c6b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6b9:	e8 24 e6 ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002c6be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c6c2:	b9 06 00 00 00       	mov    ecx,0x6
c002c6c7:	89 c2                	mov    edx,eax
c002c6c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c6cc:	89 e8                	mov    eax,ebp
c002c6ce:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c6d2:	83 c4 10             	add    esp,0x10
c002c6d5:	0f b6 c0             	movzx  eax,al
c002c6d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c6dc:	85 db                	test   ebx,ebx
c002c6de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c6e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c6eb:	0f 84 eb 00 00 00    	je     c002c7dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c6f1:	55                   	push   ebp
c002c6f2:	55                   	push   ebp
c002c6f3:	52                   	push   edx
c002c6f4:	50                   	push   eax
c002c6f5:	e8 6e e7 ff ff       	call   c002ae68 <IDE::waitInterrupt(unsigned char)>
c002c6fa:	83 c4 10             	add    esp,0x10
c002c6fd:	84 c0                	test   al,al
c002c6ff:	0f 84 cb fe ff ff    	je     c002c5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c705:	56                   	push   esi
c002c706:	56                   	push   esi
c002c707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c70e:	50                   	push   eax
c002c70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c715:	e8 b4 e5 ff ff       	call   c002acce <IDE::prepareInterrupt(unsigned char)>
c002c71a:	83 c4 0c             	add    esp,0xc
c002c71d:	6a 04                	push   0x4
c002c71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c726:	50                   	push   eax
c002c727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c72d:	e8 82 e6 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002c732:	83 c4 0c             	add    esp,0xc
c002c735:	6a 05                	push   0x5
c002c737:	89 c6                	mov    esi,eax
c002c739:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c740:	50                   	push   eax
c002c741:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c747:	e8 68 e6 ff ff       	call   c002adb4 <IDE::read(unsigned char, unsigned char)>
c002c74c:	83 c4 10             	add    esp,0x10
c002c74f:	0f b6 e8             	movzx  ebp,al
c002c752:	89 f0                	mov    eax,esi
c002c754:	c1 e5 08             	shl    ebp,0x8
c002c757:	0f b6 f0             	movzx  esi,al
c002c75a:	09 f5                	or     ebp,esi
c002c75c:	31 f6                	xor    esi,esi
c002c75e:	d1 fd                	sar    ebp,1
c002c760:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c765:	74 5c                	je     c002c7c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c767:	39 ee                	cmp    esi,ebp
c002c769:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c76f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c776:	75 0d                	jne    c002c785 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002c778:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002c77b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002c77f:	4b                   	dec    ebx
c002c780:	e9 57 ff ff ff       	jmp    c002c6dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002c785:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002c789:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002c78d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002c792:	51                   	push   ecx
c002c793:	51                   	push   ecx
c002c794:	52                   	push   edx
c002c795:	50                   	push   eax
c002c796:	e8 47 e5 ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002c79b:	89 c2                	mov    edx,eax
c002c79d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002c7a2:	66 ef                	out    dx,ax
c002c7a4:	46                   	inc    esi
c002c7a5:	83 c4 10             	add    esp,0x10
c002c7a8:	eb bd                	jmp    c002c767 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002c7aa:	51                   	push   ecx
c002c7ab:	51                   	push   ecx
c002c7ac:	52                   	push   edx
c002c7ad:	50                   	push   eax
c002c7ae:	e8 2f e5 ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002c7b3:	89 c2                	mov    edx,eax
c002c7b5:	66 ed                	in     ax,dx
c002c7b7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002c7bb:	83 c4 10             	add    esp,0x10
c002c7be:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002c7c2:	46                   	inc    esi
c002c7c3:	39 ee                	cmp    esi,ebp
c002c7c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c7cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c7d2:	75 d6                	jne    c002c7aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002c7d4:	01 f6                	add    esi,esi
c002c7d6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002c7da:	eb a3                	jmp    c002c77f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002c7dc:	51                   	push   ecx
c002c7dd:	51                   	push   ecx
c002c7de:	52                   	push   edx
c002c7df:	50                   	push   eax
c002c7e0:	e8 83 e6 ff ff       	call   c002ae68 <IDE::waitInterrupt(unsigned char)>
c002c7e5:	83 c4 10             	add    esp,0x10
c002c7e8:	84 c0                	test   al,al
c002c7ea:	0f 84 e0 fd ff ff    	je     c002c5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c7f0:	52                   	push   edx
c002c7f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c7f6:	52                   	push   edx
c002c7f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7fe:	50                   	push   eax
c002c7ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c805:	e8 c4 e4 ff ff       	call   c002acce <IDE::prepareInterrupt(unsigned char)>
c002c80a:	83 c4 10             	add    esp,0x10
c002c80d:	50                   	push   eax
c002c80e:	50                   	push   eax
c002c80f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c816:	50                   	push   eax
c002c817:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c81d:	e8 c0 e4 ff ff       	call   c002ace2 <IDE::getBase(unsigned char)>
c002c822:	8d 50 07             	lea    edx,[eax+0x7]
c002c825:	ec                   	in     al,dx
c002c826:	83 c4 10             	add    esp,0x10
c002c829:	a8 88                	test   al,0x88
c002c82b:	74 0a                	je     c002c837 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002c82d:	4b                   	dec    ebx
c002c82e:	75 dd                	jne    c002c80d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002c830:	bb 02 00 00 00       	mov    ebx,0x2
c002c835:	eb 02                	jmp    c002c839 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c837:	31 db                	xor    ebx,ebx
c002c839:	83 c4 1c             	add    esp,0x1c
c002c83c:	89 d8                	mov    eax,ebx
c002c83e:	5b                   	pop    ebx
c002c83f:	5e                   	pop    esi
c002c840:	5f                   	pop    edi
c002c841:	5d                   	pop    ebp
c002c842:	c3                   	ret    
c002c843:	90                   	nop

c002c844 <ATAPI::diskRemoved()>:
c002c844:	53                   	push   ebx
c002c845:	83 ec 14             	sub    esp,0x14
c002c848:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c84c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c853:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c859:	e8 82 fe fe ff       	call   c001c6e0 <LogicalDisk::unmount()>
c002c85e:	58                   	pop    eax
c002c85f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c865:	e8 56 08 ff ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c002c86a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c874:	83 c4 18             	add    esp,0x18
c002c877:	5b                   	pop    ebx
c002c878:	e9 33 08 ff ff       	jmp    c001d0b0 <VCache::invalidateReadBuffer()>
c002c87d:	90                   	nop

c002c87e <ATAPI::eject()>:
c002c87e:	57                   	push   edi
c002c87f:	b9 03 00 00 00       	mov    ecx,0x3
c002c884:	53                   	push   ebx
c002c885:	83 ec 14             	sub    esp,0x14
c002c888:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c88c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c890:	fc                   	cld    
c002c891:	31 c0                	xor    eax,eax
c002c893:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c895:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c89a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c89f:	50                   	push   eax
c002c8a0:	50                   	push   eax
c002c8a1:	6a 00                	push   0x0
c002c8a3:	6a 00                	push   0x0
c002c8a5:	6a 00                	push   0x0
c002c8a7:	6a 02                	push   0x2
c002c8a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c8ad:	50                   	push   eax
c002c8ae:	53                   	push   ebx
c002c8af:	e8 d0 fc ff ff       	call   c002c584 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c8b4:	83 c4 14             	add    esp,0x14
c002c8b7:	53                   	push   ebx
c002c8b8:	e8 87 ff ff ff       	call   c002c844 <ATAPI::diskRemoved()>
c002c8bd:	83 c4 24             	add    esp,0x24
c002c8c0:	31 c0                	xor    eax,eax
c002c8c2:	5b                   	pop    ebx
c002c8c3:	5f                   	pop    edi
c002c8c4:	c3                   	ret    
c002c8c5:	90                   	nop

c002c8c6 <ATAPI::diskInserted()>:
c002c8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c8ca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c8d1:	c3                   	ret    

c002c8d2 <ATAPI::detectMedia()>:
c002c8d2:	56                   	push   esi
c002c8d3:	53                   	push   ebx
c002c8d4:	83 ec 28             	sub    esp,0x28
c002c8d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c8db:	6a 0c                	push   0xc
c002c8dd:	6a 00                	push   0x0
c002c8df:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c8e3:	56                   	push   esi
c002c8e4:	e8 07 3c fd ff       	call   c00004f0 <memset>
c002c8e9:	58                   	pop    eax
c002c8ea:	5a                   	pop    edx
c002c8eb:	6a 00                	push   0x0
c002c8ed:	6a 00                	push   0x0
c002c8ef:	6a 00                	push   0x0
c002c8f1:	6a 00                	push   0x0
c002c8f3:	56                   	push   esi
c002c8f4:	53                   	push   ebx
c002c8f5:	e8 8a fc ff ff       	call   c002c584 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c8fa:	83 c4 1c             	add    esp,0x1c
c002c8fd:	6a 0c                	push   0xc
c002c8ff:	6a 00                	push   0x0
c002c901:	56                   	push   esi
c002c902:	e8 e9 3b fd ff       	call   c00004f0 <memset>
c002c907:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c90c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c911:	59                   	pop    ecx
c002c912:	58                   	pop    eax
c002c913:	6a 01                	push   0x1
c002c915:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c919:	50                   	push   eax
c002c91a:	6a 00                	push   0x0
c002c91c:	6a 12                	push   0x12
c002c91e:	56                   	push   esi
c002c91f:	53                   	push   ebx
c002c920:	e8 5f fc ff ff       	call   c002c584 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c925:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c929:	83 c4 20             	add    esp,0x20
c002c92c:	83 e0 7f             	and    eax,0x7f
c002c92f:	83 f8 70             	cmp    eax,0x70
c002c932:	74 15                	je     c002c949 <ATAPI::detectMedia()+0x77>
c002c934:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c93b:	75 0c                	jne    c002c949 <ATAPI::detectMedia()+0x77>
c002c93d:	83 ec 0c             	sub    esp,0xc
c002c940:	53                   	push   ebx
c002c941:	e8 80 ff ff ff       	call   c002c8c6 <ATAPI::diskInserted()>
c002c946:	83 c4 10             	add    esp,0x10
c002c949:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c94d:	83 e0 0f             	and    eax,0xf
c002c950:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c955:	0f b6 c0             	movzx  eax,al
c002c958:	75 19                	jne    c002c973 <ATAPI::detectMedia()+0xa1>
c002c95a:	83 f8 02             	cmp    eax,0x2
c002c95d:	75 14                	jne    c002c973 <ATAPI::detectMedia()+0xa1>
c002c95f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c966:	74 24                	je     c002c98c <ATAPI::detectMedia()+0xba>
c002c968:	83 ec 0c             	sub    esp,0xc
c002c96b:	53                   	push   ebx
c002c96c:	e8 d3 fe ff ff       	call   c002c844 <ATAPI::diskRemoved()>
c002c971:	eb 16                	jmp    c002c989 <ATAPI::detectMedia()+0xb7>
c002c973:	85 c0                	test   eax,eax
c002c975:	75 15                	jne    c002c98c <ATAPI::detectMedia()+0xba>
c002c977:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c97e:	75 0c                	jne    c002c98c <ATAPI::detectMedia()+0xba>
c002c980:	83 ec 0c             	sub    esp,0xc
c002c983:	53                   	push   ebx
c002c984:	e8 3d ff ff ff       	call   c002c8c6 <ATAPI::diskInserted()>
c002c989:	83 c4 10             	add    esp,0x10
c002c98c:	83 c4 24             	add    esp,0x24
c002c98f:	5b                   	pop    ebx
c002c990:	5e                   	pop    esi
c002c991:	c3                   	ret    

c002c992 <ATAPI::open(int, int, void*)>:
c002c992:	56                   	push   esi
c002c993:	53                   	push   ebx
c002c994:	50                   	push   eax
c002c995:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c99d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c9a1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c9a7:	c1 e0 06             	shl    eax,0x6
c002c9aa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c9b0:	01 d0                	add    eax,edx
c002c9b2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c9b9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c9bf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c9c6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c9d0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c9d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c9dd:	6a 04                	push   0x4
c002c9df:	6a 0c                	push   0xc
c002c9e1:	51                   	push   ecx
c002c9e2:	52                   	push   edx
c002c9e3:	e8 0c e3 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c9e8:	90                   	nop
c002c9e9:	90                   	nop
c002c9ea:	6a 00                	push   0x0
c002c9ec:	6a 0c                	push   0xc
c002c9ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c9f5:	50                   	push   eax
c002c9f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c9fc:	e8 f3 e2 ff ff       	call   c002acf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ca01:	83 c4 14             	add    esp,0x14
c002ca04:	68 78 01 00 00       	push   0x178
c002ca09:	e8 89 9a fe ff       	call   c0016497 <malloc>
c002ca0e:	83 c4 0c             	add    esp,0xc
c002ca11:	6a 00                	push   0x0
c002ca13:	68 ff ff ff 7f       	push   0x7fffffff
c002ca18:	6a 00                	push   0x0
c002ca1a:	6a 00                	push   0x0
c002ca1c:	53                   	push   ebx
c002ca1d:	68 d7 3a 03 c0       	push   0xc0033ad7
c002ca22:	89 c6                	mov    esi,eax
c002ca24:	50                   	push   eax
c002ca25:	e8 f4 fa fe ff       	call   c001c51e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ca2a:	83 c4 14             	add    esp,0x14
c002ca2d:	56                   	push   esi
c002ca2e:	e8 ab fb fe ff       	call   c001c5de <LogicalDisk::assignDriveLetter()>
c002ca33:	5a                   	pop    edx
c002ca34:	59                   	pop    ecx
c002ca35:	0f be c0             	movsx  eax,al
c002ca38:	50                   	push   eax
c002ca39:	68 1c 39 03 c0       	push   0xc003391c
c002ca3e:	e8 8b c8 fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002ca43:	58                   	pop    eax
c002ca44:	5a                   	pop    edx
c002ca45:	56                   	push   esi
c002ca46:	53                   	push   ebx
c002ca47:	e8 18 e9 fe ff       	call   c001b364 <Device::addChild(Device*)>
c002ca4c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002ca52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca55:	e8 54 ed fe ff       	call   c001b7ae <PhysicalDisk::startCache()>
c002ca5a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ca61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca64:	e8 69 fe ff ff       	call   c002c8d2 <ATAPI::detectMedia()>
c002ca69:	83 c4 14             	add    esp,0x14
c002ca6c:	31 c0                	xor    eax,eax
c002ca6e:	5b                   	pop    ebx
c002ca6f:	5e                   	pop    esi
c002ca70:	c3                   	ret    
c002ca71:	90                   	nop

c002ca72 <ATAPI::read(unsigned long long, int, void*)>:
c002ca72:	55                   	push   ebp
c002ca73:	57                   	push   edi
c002ca74:	56                   	push   esi
c002ca75:	53                   	push   ebx
c002ca76:	83 ec 1c             	sub    esp,0x1c
c002ca79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ca7d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002ca81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002ca85:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ca8c:	74 3c                	je     c002caca <ATAPI::read(unsigned long long, int, void*)+0x58>
c002ca8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ca92:	b9 03 00 00 00       	mov    ecx,0x3
c002ca97:	fc                   	cld    
c002ca98:	31 c0                	xor    eax,eax
c002ca9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca9c:	89 e8                	mov    eax,ebp
c002ca9e:	0f ce                	bswap  esi
c002caa0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002caa4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002caa9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002caad:	50                   	push   eax
c002caae:	50                   	push   eax
c002caaf:	55                   	push   ebp
c002cab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cab4:	c1 e5 0b             	shl    ebp,0xb
c002cab7:	6a 00                	push   0x0
c002cab9:	55                   	push   ebp
c002caba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cabe:	50                   	push   eax
c002cabf:	53                   	push   ebx
c002cac0:	e8 bf fa ff ff       	call   c002c584 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cac5:	83 c4 20             	add    esp,0x20
c002cac8:	eb 1a                	jmp    c002cae4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002caca:	83 ec 0c             	sub    esp,0xc
c002cacd:	53                   	push   ebx
c002cace:	e8 ff fd ff ff       	call   c002c8d2 <ATAPI::detectMedia()>
c002cad3:	83 c4 10             	add    esp,0x10
c002cad6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cadd:	75 af                	jne    c002ca8e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cadf:	b8 02 00 00 00       	mov    eax,0x2
c002cae4:	83 c4 1c             	add    esp,0x1c
c002cae7:	5b                   	pop    ebx
c002cae8:	5e                   	pop    esi
c002cae9:	5f                   	pop    edi
c002caea:	5d                   	pop    ebp
c002caeb:	c3                   	ret    

c002caec <SATA::close(int, int, void*)>:
c002caec:	83 ec 0c             	sub    esp,0xc
c002caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002caf3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002caf9:	85 c0                	test   eax,eax
c002cafb:	74 0c                	je     c002cb09 <SATA::close(int, int, void*)+0x1d>
c002cafd:	8b 10                	mov    edx,DWORD PTR [eax]
c002caff:	83 ec 0c             	sub    esp,0xc
c002cb02:	50                   	push   eax
c002cb03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cb06:	83 c4 10             	add    esp,0x10
c002cb09:	31 c0                	xor    eax,eax
c002cb0b:	83 c4 0c             	add    esp,0xc
c002cb0e:	c3                   	ret    
c002cb0f:	90                   	nop

c002cb10 <SATA::powerSaving(PowerSavingLevel)>:
c002cb10:	c3                   	ret    
c002cb11:	90                   	nop

c002cb12 <SATA::open(int, int, void*)>:
c002cb12:	56                   	push   esi
c002cb13:	53                   	push   ebx
c002cb14:	83 ec 10             	sub    esp,0x10
c002cb17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cb1b:	68 64 39 03 c0       	push   0xc0033964
c002cb20:	e8 a9 c7 fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002cb25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cb29:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cb33:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cb3d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cb43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cb47:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cb51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cb58:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cb5e:	e8 43 9c fe ff       	call   c00167a6 <Phys::allocatePage()>
c002cb63:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cb69:	89 c6                	mov    esi,eax
c002cb6b:	e8 36 9c fe ff       	call   c00167a6 <Phys::allocatePage()>
c002cb70:	81 c6 00 10 00 00    	add    esi,0x1000
c002cb76:	83 c4 10             	add    esp,0x10
c002cb79:	39 c6                	cmp    esi,eax
c002cb7b:	74 10                	je     c002cb8d <SATA::open(int, int, void*)+0x7b>
c002cb7d:	83 ec 0c             	sub    esp,0xc
c002cb80:	68 70 39 03 c0       	push   0xc0033970
c002cb85:	e8 cc 36 ff ff       	call   c0020256 <KePanic(char const*)>
c002cb8a:	83 c4 10             	add    esp,0x10
c002cb8d:	83 ec 0c             	sub    esp,0xc
c002cb90:	6a 02                	push   0x2
c002cb92:	e8 22 b4 fe ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c002cb97:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cb9d:	6a 03                	push   0x3
c002cb9f:	50                   	push   eax
c002cba0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cba6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cbac:	e8 11 bb fe ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cbb1:	83 c4 14             	add    esp,0x14
c002cbb4:	53                   	push   ebx
c002cbb5:	e8 f4 eb fe ff       	call   c001b7ae <PhysicalDisk::startCache()>
c002cbba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cbbd:	e8 30 fe fe ff       	call   c001c9f2 <createPartitionsForDisk(PhysicalDisk*)>
c002cbc2:	83 c4 14             	add    esp,0x14
c002cbc5:	31 c0                	xor    eax,eax
c002cbc7:	5b                   	pop    ebx
c002cbc8:	5e                   	pop    esi
c002cbc9:	c3                   	ret    

c002cbca <SATA::SATA()>:
c002cbca:	83 ec 0c             	sub    esp,0xc
c002cbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cbd1:	83 ec 04             	sub    esp,0x4
c002cbd4:	68 00 02 00 00       	push   0x200
c002cbd9:	68 84 39 03 c0       	push   0xc0033984
c002cbde:	50                   	push   eax
c002cbdf:	e8 62 eb fe ff       	call   c001b746 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cbe4:	83 c4 10             	add    esp,0x10
c002cbe7:	ba f4 39 03 c0       	mov    edx,0xc00339f4
c002cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cbf0:	89 10                	mov    DWORD PTR [eax],edx
c002cbf2:	90                   	nop
c002cbf3:	83 c4 0c             	add    esp,0xc
c002cbf6:	c3                   	ret    
c002cbf7:	90                   	nop

c002cbf8 <SATA::access(unsigned long long, int, void*, bool)>:
c002cbf8:	55                   	push   ebp
c002cbf9:	57                   	push   edi
c002cbfa:	56                   	push   esi
c002cbfb:	53                   	push   ebx
c002cbfc:	83 ec 2c             	sub    esp,0x2c
c002cbff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002cc03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cc07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cc0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cc0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cc13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cc17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cc1b:	fa                   	cli    
c002cc1c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cc22:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cc27:	7e 10                	jle    c002cc39 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002cc29:	83 ec 0c             	sub    esp,0xc
c002cc2c:	68 94 39 03 c0       	push   0xc0033994
c002cc31:	e8 20 36 ff ff       	call   c0020256 <KePanic(char const*)>
c002cc36:	83 c4 10             	add    esp,0x10
c002cc39:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cc3f:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002cc45:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002cc4b:	89 e8                	mov    eax,ebp
c002cc4d:	c1 e0 07             	shl    eax,0x7
c002cc50:	01 d0                	add    eax,edx
c002cc52:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cc5c:	8d 45 02             	lea    eax,[ebp+0x2]
c002cc5f:	51                   	push   ecx
c002cc60:	c1 e0 07             	shl    eax,0x7
c002cc63:	51                   	push   ecx
c002cc64:	01 d0                	add    eax,edx
c002cc66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002cc6a:	50                   	push   eax
c002cc6b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cc71:	e8 42 ec ff ff       	call   c002b8b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cc76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cc7a:	83 c4 10             	add    esp,0x10
c002cc7d:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002cc82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002cc86:	0f 84 ac 01 00 00    	je     c002ce38 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002cc8c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cc90:	c1 e0 09             	shl    eax,0x9
c002cc93:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cc98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cc9c:	74 0e                	je     c002ccac <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002cc9e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cca4:	89 c1                	mov    ecx,eax
c002cca6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002ccaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ccac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ccb0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002ccb6:	8d 45 02             	lea    eax,[ebp+0x2]
c002ccb9:	c1 e0 07             	shl    eax,0x7
c002ccbc:	01 d0                	add    eax,edx
c002ccbe:	8b 00                	mov    eax,DWORD PTR [eax]
c002ccc0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002ccc6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cccc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002ccd0:	c1 e1 05             	shl    ecx,0x5
c002ccd3:	01 c8                	add    eax,ecx
c002ccd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ccd9:	83 e1 01             	and    ecx,0x1
c002ccdc:	89 ce                	mov    esi,ecx
c002ccde:	8a 08                	mov    cl,BYTE PTR [eax]
c002cce0:	c1 e6 06             	shl    esi,0x6
c002cce3:	83 e1 bf             	and    ecx,0xffffffbf
c002cce6:	09 f1                	or     ecx,esi
c002cce8:	88 08                	mov    BYTE PTR [eax],cl
c002ccea:	8b 08                	mov    ecx,DWORD PTR [eax]
c002ccec:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002ccf2:	81 c9 05 00 01 00    	or     ecx,0x10005
c002ccf8:	89 08                	mov    DWORD PTR [eax],ecx
c002ccfa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cd00:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cd06:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cd0c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cd0f:	50                   	push   eax
c002cd10:	68 90 00 00 00       	push   0x90
c002cd15:	6a 00                	push   0x0
c002cd17:	56                   	push   esi
c002cd18:	e8 d3 37 fd ff       	call   c00004f0 <memset>
c002cd1d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cd23:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cd2d:	83 c4 10             	add    esp,0x10
c002cd30:	48                   	dec    eax
c002cd31:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cd36:	89 c1                	mov    ecx,eax
c002cd38:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cd3e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cd43:	09 c8                	or     eax,ecx
c002cd45:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cd4b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cd51:	83 c8 80             	or     eax,0xffffff80
c002cd54:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cd5a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cd5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cd61:	25 00 7f 00 00       	and    eax,0x7f00
c002cd66:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cd6b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cd70:	66 89 06             	mov    WORD PTR [esi],ax
c002cd73:	b0 35                	mov    al,0x35
c002cd75:	75 02                	jne    c002cd79 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002cd77:	b0 25                	mov    al,0x25
c002cd79:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cd7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cd80:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cd84:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002cd88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cd8c:	c1 e8 10             	shr    eax,0x10
c002cd8f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cd96:	c1 e8 18             	shr    eax,0x18
c002cd99:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cd9c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cda0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cda3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cda7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cdaa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cdae:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cdb2:	89 ee                	mov    esi,ebp
c002cdb4:	31 c0                	xor    eax,eax
c002cdb6:	c1 e6 07             	shl    esi,0x7
c002cdb9:	01 d6                	add    esi,edx
c002cdbb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cdc1:	80 e1 88             	and    cl,0x88
c002cdc4:	74 0a                	je     c002cdd0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cdc6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cdcb:	74 0a                	je     c002cdd7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cdcd:	40                   	inc    eax
c002cdce:	eb eb                	jmp    c002cdbb <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cdd0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cdd5:	75 0a                	jne    c002cde1 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cdd7:	83 ec 0c             	sub    esp,0xc
c002cdda:	68 cd 39 03 c0       	push   0xc00339cd
c002cddf:	eb 34                	jmp    c002ce15 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002cde1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002cde5:	c1 e5 07             	shl    ebp,0x7
c002cde8:	b8 01 00 00 00       	mov    eax,0x1
c002cded:	01 ea                	add    edx,ebp
c002cdef:	d3 e0                	shl    eax,cl
c002cdf1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cdf7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cdfd:	85 c8                	test   eax,ecx
c002cdff:	74 2b                	je     c002ce2c <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002ce01:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002ce07:	0f ba e1 1e          	bt     ecx,0x1e
c002ce0b:	73 ea                	jae    c002cdf7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002ce0d:	83 ec 0c             	sub    esp,0xc
c002ce10:	68 db 39 03 c0       	push   0xc00339db
c002ce15:	e8 b4 c4 fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002ce1a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce1f:	83 c4 10             	add    esp,0x10
c002ce22:	48                   	dec    eax
c002ce23:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce28:	85 c0                	test   eax,eax
c002ce2a:	eb 17                	jmp    c002ce43 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002ce2c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002ce32:	0f ba e0 1e          	bt     eax,0x1e
c002ce36:	73 15                	jae    c002ce4d <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002ce38:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce3d:	48                   	dec    eax
c002ce3e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce43:	75 01                	jne    c002ce46 <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002ce45:	fb                   	sti    
c002ce46:	b8 01 00 00 00       	mov    eax,0x1
c002ce4b:	eb 29                	jmp    c002ce76 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ce4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002ce52:	75 10                	jne    c002ce64 <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002ce54:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002ce5a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002ce5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ce62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ce64:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce69:	48                   	dec    eax
c002ce6a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce6f:	75 03                	jne    c002ce74 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002ce71:	fb                   	sti    
c002ce72:	eb 02                	jmp    c002ce76 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ce74:	31 c0                	xor    eax,eax
c002ce76:	83 c4 2c             	add    esp,0x2c
c002ce79:	5b                   	pop    ebx
c002ce7a:	5e                   	pop    esi
c002ce7b:	5f                   	pop    edi
c002ce7c:	5d                   	pop    ebp
c002ce7d:	c3                   	ret    

c002ce7e <SATA::read(unsigned long long, int, void*)>:
c002ce7e:	55                   	push   ebp
c002ce7f:	57                   	push   edi
c002ce80:	56                   	push   esi
c002ce81:	be 04 00 00 00       	mov    esi,0x4
c002ce86:	53                   	push   ebx
c002ce87:	83 ec 0c             	sub    esp,0xc
c002ce8a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002ce8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ce92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002ce96:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ce9a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002ce9d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cea3:	0f 87 1a 02 00 00    	ja     c002d0c3 <SATA::read(unsigned long long, int, void*)+0x245>
c002cea9:	85 c9                	test   ecx,ecx
c002ceab:	be 06 00 00 00       	mov    esi,0x6
c002ceb0:	0f 84 0d 02 00 00    	je     c002d0c3 <SATA::read(unsigned long long, int, void*)+0x245>
c002ceb6:	56                   	push   esi
c002ceb7:	56                   	push   esi
c002ceb8:	6a 00                	push   0x0
c002ceba:	51                   	push   ecx
c002cebb:	53                   	push   ebx
c002cebc:	52                   	push   edx
c002cebd:	50                   	push   eax
c002cebe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cec2:	e8 31 fd ff ff       	call   c002cbf8 <SATA::access(unsigned long long, int, void*, bool)>
c002cec7:	83 c4 20             	add    esp,0x20
c002ceca:	85 c0                	test   eax,eax
c002cecc:	89 c6                	mov    esi,eax
c002cece:	0f 85 ea 01 00 00    	jne    c002d0be <SATA::read(unsigned long long, int, void*)+0x240>
c002ced4:	50                   	push   eax
c002ced5:	50                   	push   eax
c002ced6:	6a 0f                	push   0xf
c002ced8:	6a 00                	push   0x0
c002ceda:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cee0:	bb 0a 00 00 00       	mov    ebx,0xa
c002cee5:	e8 3b f2 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002ceea:	5a                   	pop    edx
c002ceeb:	59                   	pop    ecx
c002ceec:	b9 10 27 00 00       	mov    ecx,0x2710
c002cef1:	0f b6 c0             	movzx  eax,al
c002cef4:	50                   	push   eax
c002cef5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cefa:	99                   	cdq    
c002cefb:	f7 f9                	idiv   ecx
c002cefd:	99                   	cdq    
c002cefe:	f7 fb                	idiv   ebx
c002cf00:	8d 42 30             	lea    eax,[edx+0x30]
c002cf03:	0f b6 c0             	movzx  eax,al
c002cf06:	50                   	push   eax
c002cf07:	e8 08 f2 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cf0c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cf12:	5f                   	pop    edi
c002cf13:	5d                   	pop    ebp
c002cf14:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cf19:	6a 0f                	push   0xf
c002cf1b:	6a 00                	push   0x0
c002cf1d:	e8 03 f2 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002cf22:	5a                   	pop    edx
c002cf23:	59                   	pop    ecx
c002cf24:	0f b6 c0             	movzx  eax,al
c002cf27:	50                   	push   eax
c002cf28:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf2d:	99                   	cdq    
c002cf2e:	f7 fd                	idiv   ebp
c002cf30:	99                   	cdq    
c002cf31:	f7 fb                	idiv   ebx
c002cf33:	8d 42 30             	lea    eax,[edx+0x30]
c002cf36:	0f b6 c0             	movzx  eax,al
c002cf39:	50                   	push   eax
c002cf3a:	e8 d5 f1 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cf3f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cf45:	5f                   	pop    edi
c002cf46:	bf 64 00 00 00       	mov    edi,0x64
c002cf4b:	58                   	pop    eax
c002cf4c:	6a 0f                	push   0xf
c002cf4e:	6a 00                	push   0x0
c002cf50:	e8 d0 f1 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002cf55:	5a                   	pop    edx
c002cf56:	59                   	pop    ecx
c002cf57:	0f b6 c0             	movzx  eax,al
c002cf5a:	50                   	push   eax
c002cf5b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf60:	99                   	cdq    
c002cf61:	f7 ff                	idiv   edi
c002cf63:	99                   	cdq    
c002cf64:	f7 fb                	idiv   ebx
c002cf66:	8d 42 30             	lea    eax,[edx+0x30]
c002cf69:	0f b6 c0             	movzx  eax,al
c002cf6c:	50                   	push   eax
c002cf6d:	e8 a2 f1 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cf72:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cf78:	58                   	pop    eax
c002cf79:	5a                   	pop    edx
c002cf7a:	6a 0f                	push   0xf
c002cf7c:	6a 00                	push   0x0
c002cf7e:	e8 a2 f1 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002cf83:	59                   	pop    ecx
c002cf84:	5a                   	pop    edx
c002cf85:	0f b6 c0             	movzx  eax,al
c002cf88:	50                   	push   eax
c002cf89:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf8e:	99                   	cdq    
c002cf8f:	f7 fb                	idiv   ebx
c002cf91:	99                   	cdq    
c002cf92:	f7 fb                	idiv   ebx
c002cf94:	8d 42 30             	lea    eax,[edx+0x30]
c002cf97:	0f b6 c0             	movzx  eax,al
c002cf9a:	50                   	push   eax
c002cf9b:	e8 74 f1 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cfa0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cfa6:	59                   	pop    ecx
c002cfa7:	58                   	pop    eax
c002cfa8:	6a 0f                	push   0xf
c002cfaa:	6a 00                	push   0x0
c002cfac:	e8 74 f1 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002cfb1:	5a                   	pop    edx
c002cfb2:	59                   	pop    ecx
c002cfb3:	0f b6 c0             	movzx  eax,al
c002cfb6:	50                   	push   eax
c002cfb7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cfbc:	99                   	cdq    
c002cfbd:	f7 fb                	idiv   ebx
c002cfbf:	83 c2 30             	add    edx,0x30
c002cfc2:	0f b6 d2             	movzx  edx,dl
c002cfc5:	52                   	push   edx
c002cfc6:	e8 49 f1 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cfcb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cfd1:	58                   	pop    eax
c002cfd2:	5a                   	pop    edx
c002cfd3:	6a 0f                	push   0xf
c002cfd5:	6a 00                	push   0x0
c002cfd7:	e8 49 f1 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002cfdc:	59                   	pop    ecx
c002cfdd:	b9 10 27 00 00       	mov    ecx,0x2710
c002cfe2:	5a                   	pop    edx
c002cfe3:	0f b6 c0             	movzx  eax,al
c002cfe6:	50                   	push   eax
c002cfe7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfec:	99                   	cdq    
c002cfed:	f7 f9                	idiv   ecx
c002cfef:	99                   	cdq    
c002cff0:	f7 fb                	idiv   ebx
c002cff2:	8d 42 30             	lea    eax,[edx+0x30]
c002cff5:	0f b6 c0             	movzx  eax,al
c002cff8:	50                   	push   eax
c002cff9:	e8 16 f1 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002cffe:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d004:	59                   	pop    ecx
c002d005:	58                   	pop    eax
c002d006:	6a 0f                	push   0xf
c002d008:	6a 00                	push   0x0
c002d00a:	e8 16 f1 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d00f:	5a                   	pop    edx
c002d010:	59                   	pop    ecx
c002d011:	0f b6 c0             	movzx  eax,al
c002d014:	50                   	push   eax
c002d015:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d01a:	99                   	cdq    
c002d01b:	f7 fd                	idiv   ebp
c002d01d:	99                   	cdq    
c002d01e:	f7 fb                	idiv   ebx
c002d020:	8d 42 30             	lea    eax,[edx+0x30]
c002d023:	0f b6 c0             	movzx  eax,al
c002d026:	50                   	push   eax
c002d027:	e8 e8 f0 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d02c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d032:	5d                   	pop    ebp
c002d033:	58                   	pop    eax
c002d034:	6a 0f                	push   0xf
c002d036:	6a 00                	push   0x0
c002d038:	e8 e8 f0 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d03d:	5a                   	pop    edx
c002d03e:	59                   	pop    ecx
c002d03f:	0f b6 c0             	movzx  eax,al
c002d042:	50                   	push   eax
c002d043:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d048:	99                   	cdq    
c002d049:	f7 ff                	idiv   edi
c002d04b:	99                   	cdq    
c002d04c:	f7 fb                	idiv   ebx
c002d04e:	8d 42 30             	lea    eax,[edx+0x30]
c002d051:	0f b6 c0             	movzx  eax,al
c002d054:	50                   	push   eax
c002d055:	e8 ba f0 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d05a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d060:	5f                   	pop    edi
c002d061:	5d                   	pop    ebp
c002d062:	6a 0f                	push   0xf
c002d064:	6a 00                	push   0x0
c002d066:	e8 ba f0 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d06b:	5a                   	pop    edx
c002d06c:	59                   	pop    ecx
c002d06d:	0f b6 c0             	movzx  eax,al
c002d070:	50                   	push   eax
c002d071:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d076:	99                   	cdq    
c002d077:	f7 fb                	idiv   ebx
c002d079:	99                   	cdq    
c002d07a:	f7 fb                	idiv   ebx
c002d07c:	8d 42 30             	lea    eax,[edx+0x30]
c002d07f:	0f b6 c0             	movzx  eax,al
c002d082:	50                   	push   eax
c002d083:	e8 8c f0 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d088:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d08e:	5f                   	pop    edi
c002d08f:	5d                   	pop    ebp
c002d090:	6a 0f                	push   0xf
c002d092:	6a 00                	push   0x0
c002d094:	e8 8c f0 ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d099:	5a                   	pop    edx
c002d09a:	59                   	pop    ecx
c002d09b:	0f b6 c0             	movzx  eax,al
c002d09e:	50                   	push   eax
c002d09f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0a4:	99                   	cdq    
c002d0a5:	f7 fb                	idiv   ebx
c002d0a7:	83 c2 30             	add    edx,0x30
c002d0aa:	0f b6 d2             	movzx  edx,dl
c002d0ad:	52                   	push   edx
c002d0ae:	e8 61 f0 ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d0b3:	83 c4 10             	add    esp,0x10
c002d0b6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d0bc:	eb 05                	jmp    c002d0c3 <SATA::read(unsigned long long, int, void*)+0x245>
c002d0be:	be 01 00 00 00       	mov    esi,0x1
c002d0c3:	83 c4 0c             	add    esp,0xc
c002d0c6:	89 f0                	mov    eax,esi
c002d0c8:	5b                   	pop    ebx
c002d0c9:	5e                   	pop    esi
c002d0ca:	5f                   	pop    edi
c002d0cb:	5d                   	pop    ebp
c002d0cc:	c3                   	ret    
c002d0cd:	90                   	nop

c002d0ce <SATA::write(unsigned long long, int, void*)>:
c002d0ce:	55                   	push   ebp
c002d0cf:	57                   	push   edi
c002d0d0:	56                   	push   esi
c002d0d1:	53                   	push   ebx
c002d0d2:	83 ec 0c             	sub    esp,0xc
c002d0d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d0d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d0dd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d0e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d0e5:	8d 70 ff             	lea    esi,[eax-0x1]
c002d0e8:	b8 04 00 00 00       	mov    eax,0x4
c002d0ed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d0f3:	0f 87 2c 02 00 00    	ja     c002d325 <SATA::write(unsigned long long, int, void*)+0x257>
c002d0f9:	85 db                	test   ebx,ebx
c002d0fb:	b8 06 00 00 00       	mov    eax,0x6
c002d100:	0f 84 1f 02 00 00    	je     c002d325 <SATA::write(unsigned long long, int, void*)+0x257>
c002d106:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d10a:	c1 e6 09             	shl    esi,0x9
c002d10d:	01 de                	add    esi,ebx
c002d10f:	50                   	push   eax
c002d110:	89 d7                	mov    edi,edx
c002d112:	50                   	push   eax
c002d113:	83 c7 01             	add    edi,0x1
c002d116:	6a 01                	push   0x1
c002d118:	89 cd                	mov    ebp,ecx
c002d11a:	53                   	push   ebx
c002d11b:	83 d5 00             	adc    ebp,0x0
c002d11e:	6a 01                	push   0x1
c002d120:	81 c3 00 02 00 00    	add    ebx,0x200
c002d126:	51                   	push   ecx
c002d127:	52                   	push   edx
c002d128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d12c:	e8 c7 fa ff ff       	call   c002cbf8 <SATA::access(unsigned long long, int, void*, bool)>
c002d131:	83 c4 20             	add    esp,0x20
c002d134:	39 f3                	cmp    ebx,esi
c002d136:	89 fa                	mov    edx,edi
c002d138:	89 e9                	mov    ecx,ebp
c002d13a:	75 d3                	jne    c002d10f <SATA::write(unsigned long long, int, void*)+0x41>
c002d13c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d140:	bd 10 27 00 00       	mov    ebp,0x2710
c002d145:	bb 0a 00 00 00       	mov    ebx,0xa
c002d14a:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d150:	50                   	push   eax
c002d151:	50                   	push   eax
c002d152:	6a 0f                	push   0xf
c002d154:	6a 00                	push   0x0
c002d156:	e8 ca ef ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d15b:	5a                   	pop    edx
c002d15c:	59                   	pop    ecx
c002d15d:	0f b6 c0             	movzx  eax,al
c002d160:	50                   	push   eax
c002d161:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d166:	99                   	cdq    
c002d167:	f7 fd                	idiv   ebp
c002d169:	99                   	cdq    
c002d16a:	f7 fb                	idiv   ebx
c002d16c:	8d 42 30             	lea    eax,[edx+0x30]
c002d16f:	0f b6 c0             	movzx  eax,al
c002d172:	50                   	push   eax
c002d173:	e8 9c ef ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d178:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d17e:	5e                   	pop    esi
c002d17f:	5f                   	pop    edi
c002d180:	bf e8 03 00 00       	mov    edi,0x3e8
c002d185:	6a 0f                	push   0xf
c002d187:	6a 00                	push   0x0
c002d189:	e8 97 ef ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d18e:	5a                   	pop    edx
c002d18f:	59                   	pop    ecx
c002d190:	0f b6 c0             	movzx  eax,al
c002d193:	50                   	push   eax
c002d194:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d199:	99                   	cdq    
c002d19a:	f7 ff                	idiv   edi
c002d19c:	99                   	cdq    
c002d19d:	f7 fb                	idiv   ebx
c002d19f:	8d 42 30             	lea    eax,[edx+0x30]
c002d1a2:	0f b6 c0             	movzx  eax,al
c002d1a5:	50                   	push   eax
c002d1a6:	e8 69 ef ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d1ab:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d1b1:	5e                   	pop    esi
c002d1b2:	be 64 00 00 00       	mov    esi,0x64
c002d1b7:	58                   	pop    eax
c002d1b8:	6a 0f                	push   0xf
c002d1ba:	6a 00                	push   0x0
c002d1bc:	e8 64 ef ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d1c1:	5a                   	pop    edx
c002d1c2:	59                   	pop    ecx
c002d1c3:	0f b6 c0             	movzx  eax,al
c002d1c6:	50                   	push   eax
c002d1c7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1cc:	99                   	cdq    
c002d1cd:	f7 fe                	idiv   esi
c002d1cf:	99                   	cdq    
c002d1d0:	f7 fb                	idiv   ebx
c002d1d2:	8d 42 30             	lea    eax,[edx+0x30]
c002d1d5:	0f b6 c0             	movzx  eax,al
c002d1d8:	50                   	push   eax
c002d1d9:	e8 36 ef ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d1de:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d1e4:	58                   	pop    eax
c002d1e5:	5a                   	pop    edx
c002d1e6:	6a 0f                	push   0xf
c002d1e8:	6a 00                	push   0x0
c002d1ea:	e8 36 ef ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d1ef:	59                   	pop    ecx
c002d1f0:	5a                   	pop    edx
c002d1f1:	0f b6 c0             	movzx  eax,al
c002d1f4:	50                   	push   eax
c002d1f5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1fa:	99                   	cdq    
c002d1fb:	f7 fb                	idiv   ebx
c002d1fd:	99                   	cdq    
c002d1fe:	f7 fb                	idiv   ebx
c002d200:	8d 42 30             	lea    eax,[edx+0x30]
c002d203:	0f b6 c0             	movzx  eax,al
c002d206:	50                   	push   eax
c002d207:	e8 08 ef ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d20c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d212:	59                   	pop    ecx
c002d213:	58                   	pop    eax
c002d214:	6a 0f                	push   0xf
c002d216:	6a 00                	push   0x0
c002d218:	e8 08 ef ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d21d:	5a                   	pop    edx
c002d21e:	59                   	pop    ecx
c002d21f:	0f b6 c0             	movzx  eax,al
c002d222:	50                   	push   eax
c002d223:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d228:	99                   	cdq    
c002d229:	f7 fb                	idiv   ebx
c002d22b:	83 c2 30             	add    edx,0x30
c002d22e:	0f b6 d2             	movzx  edx,dl
c002d231:	52                   	push   edx
c002d232:	e8 dd ee ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d237:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d23d:	58                   	pop    eax
c002d23e:	5a                   	pop    edx
c002d23f:	6a 0f                	push   0xf
c002d241:	6a 00                	push   0x0
c002d243:	e8 dd ee ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d248:	59                   	pop    ecx
c002d249:	5a                   	pop    edx
c002d24a:	0f b6 c0             	movzx  eax,al
c002d24d:	50                   	push   eax
c002d24e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d253:	99                   	cdq    
c002d254:	f7 fd                	idiv   ebp
c002d256:	99                   	cdq    
c002d257:	f7 fb                	idiv   ebx
c002d259:	8d 42 30             	lea    eax,[edx+0x30]
c002d25c:	0f b6 c0             	movzx  eax,al
c002d25f:	50                   	push   eax
c002d260:	e8 af ee ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d265:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d26b:	59                   	pop    ecx
c002d26c:	5d                   	pop    ebp
c002d26d:	6a 0f                	push   0xf
c002d26f:	6a 00                	push   0x0
c002d271:	e8 af ee ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d276:	5a                   	pop    edx
c002d277:	59                   	pop    ecx
c002d278:	0f b6 c0             	movzx  eax,al
c002d27b:	50                   	push   eax
c002d27c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d281:	99                   	cdq    
c002d282:	f7 ff                	idiv   edi
c002d284:	99                   	cdq    
c002d285:	f7 fb                	idiv   ebx
c002d287:	8d 42 30             	lea    eax,[edx+0x30]
c002d28a:	0f b6 c0             	movzx  eax,al
c002d28d:	50                   	push   eax
c002d28e:	e8 81 ee ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d293:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d299:	5f                   	pop    edi
c002d29a:	5d                   	pop    ebp
c002d29b:	6a 0f                	push   0xf
c002d29d:	6a 00                	push   0x0
c002d29f:	e8 81 ee ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d2a4:	5a                   	pop    edx
c002d2a5:	59                   	pop    ecx
c002d2a6:	0f b6 c0             	movzx  eax,al
c002d2a9:	50                   	push   eax
c002d2aa:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2af:	99                   	cdq    
c002d2b0:	f7 fe                	idiv   esi
c002d2b2:	99                   	cdq    
c002d2b3:	f7 fb                	idiv   ebx
c002d2b5:	8d 42 30             	lea    eax,[edx+0x30]
c002d2b8:	0f b6 c0             	movzx  eax,al
c002d2bb:	50                   	push   eax
c002d2bc:	e8 53 ee ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d2c1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d2c7:	5e                   	pop    esi
c002d2c8:	5f                   	pop    edi
c002d2c9:	6a 0f                	push   0xf
c002d2cb:	6a 00                	push   0x0
c002d2cd:	e8 53 ee ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d2d2:	5d                   	pop    ebp
c002d2d3:	5a                   	pop    edx
c002d2d4:	0f b6 c0             	movzx  eax,al
c002d2d7:	50                   	push   eax
c002d2d8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2dd:	99                   	cdq    
c002d2de:	f7 fb                	idiv   ebx
c002d2e0:	99                   	cdq    
c002d2e1:	f7 fb                	idiv   ebx
c002d2e3:	8d 42 30             	lea    eax,[edx+0x30]
c002d2e6:	0f b6 c0             	movzx  eax,al
c002d2e9:	50                   	push   eax
c002d2ea:	e8 25 ee ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d2ef:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d2f5:	59                   	pop    ecx
c002d2f6:	5e                   	pop    esi
c002d2f7:	6a 0f                	push   0xf
c002d2f9:	6a 00                	push   0x0
c002d2fb:	e8 25 ee ff ff       	call   c002c125 <combineColours(unsigned char, unsigned char)>
c002d300:	5f                   	pop    edi
c002d301:	5d                   	pop    ebp
c002d302:	0f b6 c0             	movzx  eax,al
c002d305:	50                   	push   eax
c002d306:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d30b:	99                   	cdq    
c002d30c:	f7 fb                	idiv   ebx
c002d30e:	83 c2 30             	add    edx,0x30
c002d311:	0f b6 d2             	movzx  edx,dl
c002d314:	52                   	push   edx
c002d315:	e8 fa ed ff ff       	call   c002c114 <combineCharAndColour(char, unsigned char)>
c002d31a:	83 c4 10             	add    esp,0x10
c002d31d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d323:	31 c0                	xor    eax,eax
c002d325:	83 c4 0c             	add    esp,0xc
c002d328:	5b                   	pop    ebx
c002d329:	5e                   	pop    esi
c002d32a:	5f                   	pop    edi
c002d32b:	5d                   	pop    ebp
c002d32c:	c3                   	ret    
c002d32d:	90                   	nop

c002d32e <SATAPI::write(unsigned long long, int, void*)>:
c002d32e:	b8 03 00 00 00       	mov    eax,0x3
c002d333:	c3                   	ret    

c002d334 <SATAPI::close(int, int, void*)>:
c002d334:	83 ec 0c             	sub    esp,0xc
c002d337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d33b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d341:	85 c0                	test   eax,eax
c002d343:	74 0c                	je     c002d351 <SATAPI::close(int, int, void*)+0x1d>
c002d345:	8b 10                	mov    edx,DWORD PTR [eax]
c002d347:	83 ec 0c             	sub    esp,0xc
c002d34a:	50                   	push   eax
c002d34b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d34e:	83 c4 10             	add    esp,0x10
c002d351:	31 c0                	xor    eax,eax
c002d353:	83 c4 0c             	add    esp,0xc
c002d356:	c3                   	ret    
c002d357:	90                   	nop

c002d358 <SATAPI::SATAPI()>:
c002d358:	83 ec 0c             	sub    esp,0xc
c002d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d35f:	83 ec 04             	sub    esp,0x4
c002d362:	68 00 08 00 00       	push   0x800
c002d367:	68 24 3a 03 c0       	push   0xc0033a24
c002d36c:	50                   	push   eax
c002d36d:	e8 d4 e3 fe ff       	call   c001b746 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d372:	83 c4 10             	add    esp,0x10
c002d375:	ba 18 3b 03 c0       	mov    edx,0xc0033b18
c002d37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d37e:	89 10                	mov    DWORD PTR [eax],edx
c002d380:	90                   	nop
c002d381:	83 c4 0c             	add    esp,0xc
c002d384:	c3                   	ret    
c002d385:	90                   	nop

c002d386 <SATAPI::diskRemoved()>:
c002d386:	c3                   	ret    
c002d387:	90                   	nop

c002d388 <SATAPI::diskInserted()>:
c002d388:	83 ec 18             	sub    esp,0x18
c002d38b:	68 30 3a 03 c0       	push   0xc0033a30
c002d390:	e8 39 bf fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002d395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d399:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d3a0:	83 c4 1c             	add    esp,0x1c
c002d3a3:	c3                   	ret    

c002d3a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d3a4:	55                   	push   ebp
c002d3a5:	57                   	push   edi
c002d3a6:	56                   	push   esi
c002d3a7:	53                   	push   ebx
c002d3a8:	83 ec 34             	sub    esp,0x34
c002d3ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d3af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d3b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d3b7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d3bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d3bf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d3c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d3cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d3cf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d3d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d3d9:	83 c0 02             	add    eax,0x2
c002d3dc:	c1 e0 07             	shl    eax,0x7
c002d3df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d3e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d3e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d3eb:	c1 e0 07             	shl    eax,0x7
c002d3ee:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d3f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d3f6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d400:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d404:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d40a:	e8 a9 e4 ff ff       	call   c002b8b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d40f:	83 c4 10             	add    esp,0x10
c002d412:	89 c2                	mov    edx,eax
c002d414:	b8 01 00 00 00       	mov    eax,0x1
c002d419:	83 fa ff             	cmp    edx,0xffffffff
c002d41c:	0f 84 5f 02 00 00    	je     c002d681 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d422:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d42a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d430:	8b 00                	mov    eax,DWORD PTR [eax]
c002d432:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d438:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d43e:	89 d1                	mov    ecx,edx
c002d440:	c1 e1 05             	shl    ecx,0x5
c002d443:	01 c8                	add    eax,ecx
c002d445:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d447:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d44d:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d453:	89 08                	mov    DWORD PTR [eax],ecx
c002d455:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d45b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d461:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d467:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d46a:	50                   	push   eax
c002d46b:	68 90 00 00 00       	push   0x90
c002d470:	6a 00                	push   0x0
c002d472:	53                   	push   ebx
c002d473:	e8 78 30 fd ff       	call   c00004f0 <memset>
c002d478:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d47b:	b9 0c 00 00 00       	mov    ecx,0xc
c002d480:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d484:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d486:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d48c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d490:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d494:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d49a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d49e:	48                   	dec    eax
c002d49f:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d4a4:	89 c1                	mov    ecx,eax
c002d4a6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d4ac:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d4b1:	09 c8                	or     eax,ecx
c002d4b3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d4b9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d4bf:	83 c8 80             	or     eax,0xffffff80
c002d4c2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d4c8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d4cb:	25 00 7f 00 00       	and    eax,0x7f00
c002d4d0:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d4d5:	66 89 03             	mov    WORD PTR [ebx],ax
c002d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d4dc:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d4e4:	c1 e8 10             	shr    eax,0x10
c002d4e7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d4ee:	c1 e8 18             	shr    eax,0x18
c002d4f1:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d4f4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d4f8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d4fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d4ff:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d502:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d506:	83 c4 10             	add    esp,0x10
c002d509:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d50d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d511:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d515:	31 c0                	xor    eax,eax
c002d517:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d51d:	80 e1 88             	and    cl,0x88
c002d520:	74 0a                	je     c002d52c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d522:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d527:	74 0a                	je     c002d533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d529:	40                   	inc    eax
c002d52a:	eb eb                	jmp    c002d517 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d52c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d531:	75 43                	jne    c002d576 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d533:	83 ec 0c             	sub    esp,0xc
c002d536:	68 48 3a 03 c0       	push   0xc0033a48
c002d53b:	e8 8e bd fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002d540:	58                   	pop    eax
c002d541:	5a                   	pop    edx
c002d542:	68 5d 3a 03 c0       	push   0xc0033a5d
c002d547:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d54d:	e8 1e 9f fe ff       	call   c0017470 <VgaText::puts(char const*)>
c002d552:	59                   	pop    ecx
c002d553:	5b                   	pop    ebx
c002d554:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d558:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d55e:	e8 ef e3 ff ff       	call   c002b952 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d563:	5e                   	pop    esi
c002d564:	5f                   	pop    edi
c002d565:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d569:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d56f:	e8 be e3 ff ff       	call   c002b932 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d574:	eb 48                	jmp    c002d5be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d576:	b8 01 00 00 00       	mov    eax,0x1
c002d57b:	88 d1                	mov    cl,dl
c002d57d:	d3 e0                	shl    eax,cl
c002d57f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d584:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d58a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d58e:	89 c7                	mov    edi,eax
c002d590:	c1 e3 07             	shl    ebx,0x7
c002d593:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d597:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d59d:	85 c7                	test   edi,eax
c002d59f:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d5a5:	0f 84 a3 00 00 00    	je     c002d64e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d5ab:	0f ba e0 1e          	bt     eax,0x1e
c002d5af:	73 1a                	jae    c002d5cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d5b1:	83 ec 0c             	sub    esp,0xc
c002d5b4:	68 6f 3a 03 c0       	push   0xc0033a6f
c002d5b9:	e8 10 bd fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002d5be:	83 c4 10             	add    esp,0x10
c002d5c1:	b8 01 00 00 00       	mov    eax,0x1
c002d5c6:	e9 b6 00 00 00       	jmp    c002d681 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d5cb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d5d1:	83 f8 0d             	cmp    eax,0xd
c002d5d4:	77 0a                	ja     c002d5e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d5d6:	83 ec 0c             	sub    esp,0xc
c002d5d9:	68 c8 00 00 00       	push   0xc8
c002d5de:	eb 28                	jmp    c002d608 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d5e0:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d5e6:	83 f8 0d             	cmp    eax,0xd
c002d5e9:	77 0a                	ja     c002d5f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d5eb:	83 ec 0c             	sub    esp,0xc
c002d5ee:	68 58 02 00 00       	push   0x258
c002d5f3:	eb 13                	jmp    c002d608 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d5f5:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d5fb:	83 f8 06             	cmp    eax,0x6
c002d5fe:	77 10                	ja     c002d610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d600:	83 ec 0c             	sub    esp,0xc
c002d603:	68 dc 05 00 00       	push   0x5dc
c002d608:	e8 67 7e ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002d60d:	83 c4 10             	add    esp,0x10
c002d610:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d614:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d617:	75 06                	jne    c002d61f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d619:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d61d:	74 15                	je     c002d634 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d61f:	83 fe 06             	cmp    esi,0x6
c002d622:	77 10                	ja     c002d634 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d624:	83 ec 0c             	sub    esp,0xc
c002d627:	68 c4 09 00 00       	push   0x9c4
c002d62c:	e8 43 7e ff ff       	call   c0025474 <milliTenthSleep(unsigned int)>
c002d631:	83 c4 10             	add    esp,0x10
c002d634:	46                   	inc    esi
c002d635:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d63b:	0f 85 56 ff ff ff    	jne    c002d597 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d641:	83 ec 0c             	sub    esp,0xc
c002d644:	68 82 3a 03 c0       	push   0xc0033a82
c002d649:	e9 6b ff ff ff       	jmp    c002d5b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d64e:	0f ba e0 1e          	bt     eax,0x1e
c002d652:	73 0d                	jae    c002d661 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d654:	83 ec 0c             	sub    esp,0xc
c002d657:	68 96 3a 03 c0       	push   0xc0033a96
c002d65c:	e9 58 ff ff ff       	jmp    c002d5b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d661:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d666:	74 17                	je     c002d67f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d668:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d66d:	74 10                	je     c002d67f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d66f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d675:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d679:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d67d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d67f:	31 c0                	xor    eax,eax
c002d681:	83 c4 2c             	add    esp,0x2c
c002d684:	5b                   	pop    ebx
c002d685:	5e                   	pop    esi
c002d686:	5f                   	pop    edi
c002d687:	5d                   	pop    ebp
c002d688:	c3                   	ret    
c002d689:	90                   	nop

c002d68a <SATAPI::eject()>:
c002d68a:	57                   	push   edi
c002d68b:	b9 03 00 00 00       	mov    ecx,0x3
c002d690:	83 ec 18             	sub    esp,0x18
c002d693:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d697:	fc                   	cld    
c002d698:	31 c0                	xor    eax,eax
c002d69a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d69c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d6a1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d6a6:	50                   	push   eax
c002d6a7:	6a 00                	push   0x0
c002d6a9:	6a 00                	push   0x0
c002d6ab:	6a 00                	push   0x0
c002d6ad:	6a 00                	push   0x0
c002d6af:	6a 02                	push   0x2
c002d6b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d6b5:	50                   	push   eax
c002d6b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d6ba:	e8 e5 fc ff ff       	call   c002d3a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d6bf:	83 c4 38             	add    esp,0x38
c002d6c2:	31 c0                	xor    eax,eax
c002d6c4:	5f                   	pop    edi
c002d6c5:	c3                   	ret    

c002d6c6 <SATAPI::detectMedia()>:
c002d6c6:	53                   	push   ebx
c002d6c7:	83 ec 14             	sub    esp,0x14
c002d6ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d6ce:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d6d4:	e8 e7 f9 fe ff       	call   c001d0c0 <VCache::writeWriteBuffer()>
c002d6d9:	59                   	pop    ecx
c002d6da:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d6e0:	e8 cb f9 fe ff       	call   c001d0b0 <VCache::invalidateReadBuffer()>
c002d6e5:	c7 04 24 ab 3a 03 c0 	mov    DWORD PTR [esp],0xc0033aab
c002d6ec:	e8 dd bb fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002d6f1:	83 c4 10             	add    esp,0x10
c002d6f4:	31 c0                	xor    eax,eax
c002d6f6:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d6fd:	85 d2                	test   edx,edx
c002d6ff:	74 0f                	je     c002d710 <SATAPI::detectMedia()+0x4a>
c002d701:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d707:	75 07                	jne    c002d710 <SATAPI::detectMedia()+0x4a>
c002d709:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d710:	40                   	inc    eax
c002d711:	83 f8 1a             	cmp    eax,0x1a
c002d714:	75 e0                	jne    c002d6f6 <SATAPI::detectMedia()+0x30>
c002d716:	83 c4 08             	add    esp,0x8
c002d719:	5b                   	pop    ebx
c002d71a:	c3                   	ret    
c002d71b:	90                   	nop

c002d71c <SATAPI::open(int, int, void*)>:
c002d71c:	56                   	push   esi
c002d71d:	53                   	push   ebx
c002d71e:	51                   	push   ecx
c002d71f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d727:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d731:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d73b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d745:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d74f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d756:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d75c:	e8 45 90 fe ff       	call   c00167a6 <Phys::allocatePage()>
c002d761:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d767:	89 c6                	mov    esi,eax
c002d769:	e8 38 90 fe ff       	call   c00167a6 <Phys::allocatePage()>
c002d76e:	81 c6 00 10 00 00    	add    esi,0x1000
c002d774:	39 c6                	cmp    esi,eax
c002d776:	74 10                	je     c002d788 <SATAPI::open(int, int, void*)+0x6c>
c002d778:	83 ec 0c             	sub    esp,0xc
c002d77b:	68 c0 3a 03 c0       	push   0xc0033ac0
c002d780:	e8 d1 2a ff ff       	call   c0020256 <KePanic(char const*)>
c002d785:	83 c4 10             	add    esp,0x10
c002d788:	83 ec 0c             	sub    esp,0xc
c002d78b:	6a 02                	push   0x2
c002d78d:	e8 27 a8 fe ff       	call   c0017fb9 <Virt::allocateKernelVirtualPages(int)>
c002d792:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d798:	6a 03                	push   0x3
c002d79a:	50                   	push   eax
c002d79b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d7a1:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d7a7:	e8 16 af fe ff       	call   c00186c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d7ac:	83 c4 14             	add    esp,0x14
c002d7af:	68 78 01 00 00       	push   0x178
c002d7b4:	e8 de 8c fe ff       	call   c0016497 <malloc>
c002d7b9:	83 c4 0c             	add    esp,0xc
c002d7bc:	6a 00                	push   0x0
c002d7be:	68 ff ff ff 7f       	push   0x7fffffff
c002d7c3:	6a 00                	push   0x0
c002d7c5:	6a 00                	push   0x0
c002d7c7:	53                   	push   ebx
c002d7c8:	68 d6 3a 03 c0       	push   0xc0033ad6
c002d7cd:	89 c6                	mov    esi,eax
c002d7cf:	50                   	push   eax
c002d7d0:	e8 49 ed fe ff       	call   c001c51e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d7d5:	83 c4 14             	add    esp,0x14
c002d7d8:	56                   	push   esi
c002d7d9:	e8 00 ee fe ff       	call   c001c5de <LogicalDisk::assignDriveLetter()>
c002d7de:	5a                   	pop    edx
c002d7df:	59                   	pop    ecx
c002d7e0:	0f be c0             	movsx  eax,al
c002d7e3:	50                   	push   eax
c002d7e4:	68 1c 39 03 c0       	push   0xc003391c
c002d7e9:	e8 e0 ba fe ff       	call   c00192ce <Dbg::kprintf(char const*, ...)>
c002d7ee:	58                   	pop    eax
c002d7ef:	5a                   	pop    edx
c002d7f0:	56                   	push   esi
c002d7f1:	53                   	push   ebx
c002d7f2:	e8 6d db fe ff       	call   c001b364 <Device::addChild(Device*)>
c002d7f7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d7fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d800:	e8 a9 df fe ff       	call   c001b7ae <PhysicalDisk::startCache()>
c002d805:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d80c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d80f:	e8 b2 fe ff ff       	call   c002d6c6 <SATAPI::detectMedia()>
c002d814:	83 c4 14             	add    esp,0x14
c002d817:	31 c0                	xor    eax,eax
c002d819:	5b                   	pop    ebx
c002d81a:	5e                   	pop    esi
c002d81b:	c3                   	ret    

c002d81c <SATAPI::read(unsigned long long, int, void*)>:
c002d81c:	55                   	push   ebp
c002d81d:	57                   	push   edi
c002d81e:	56                   	push   esi
c002d81f:	53                   	push   ebx
c002d820:	83 ec 3c             	sub    esp,0x3c
c002d823:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002d827:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d82b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002d82f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002d833:	83 fd 04             	cmp    ebp,0x4
c002d836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d83a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d83e:	7e 10                	jle    c002d850 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002d840:	83 ec 0c             	sub    esp,0xc
c002d843:	68 e4 3a 03 c0       	push   0xc0033ae4
c002d848:	e8 09 2a ff ff       	call   c0020256 <KePanic(char const*)>
c002d84d:	83 c4 10             	add    esp,0x10
c002d850:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d856:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d85c:	51                   	push   ecx
c002d85d:	50                   	push   eax
c002d85e:	83 c0 02             	add    eax,0x2
c002d861:	c1 e0 07             	shl    eax,0x7
c002d864:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d86a:	50                   	push   eax
c002d86b:	52                   	push   edx
c002d86c:	e8 0b e1 ff ff       	call   c002b97c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d871:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d875:	b9 03 00 00 00       	mov    ecx,0x3
c002d87a:	fc                   	cld    
c002d87b:	31 c0                	xor    eax,eax
c002d87d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d87f:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d884:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d889:	83 c4 0c             	add    esp,0xc
c002d88c:	6a 00                	push   0x0
c002d88e:	6a 00                	push   0x0
c002d890:	6a 00                	push   0x0
c002d892:	6a 00                	push   0x0
c002d894:	6a 02                	push   0x2
c002d896:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d89a:	50                   	push   eax
c002d89b:	53                   	push   ebx
c002d89c:	e8 03 fb ff ff       	call   c002d3a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d8a1:	83 c4 20             	add    esp,0x20
c002d8a4:	85 c0                	test   eax,eax
c002d8a6:	89 c6                	mov    esi,eax
c002d8a8:	75 46                	jne    c002d8f0 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002d8aa:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d8ae:	b9 03 00 00 00       	mov    ecx,0x3
c002d8b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d8b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d8b9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d8be:	0f c8                	bswap  eax
c002d8c0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d8c4:	89 e8                	mov    eax,ebp
c002d8c6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d8ca:	50                   	push   eax
c002d8cb:	55                   	push   ebp
c002d8cc:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002d8d0:	c1 e5 0b             	shl    ebp,0xb
c002d8d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d8d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d8db:	55                   	push   ebp
c002d8dc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d8e0:	50                   	push   eax
c002d8e1:	53                   	push   ebx
c002d8e2:	e8 bd fa ff ff       	call   c002d3a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d8e7:	83 c4 20             	add    esp,0x20
c002d8ea:	85 c0                	test   eax,eax
c002d8ec:	89 c6                	mov    esi,eax
c002d8ee:	74 0c                	je     c002d8fc <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002d8f0:	83 ec 0c             	sub    esp,0xc
c002d8f3:	53                   	push   ebx
c002d8f4:	e8 cd fd ff ff       	call   c002d6c6 <SATAPI::detectMedia()>
c002d8f9:	83 c4 10             	add    esp,0x10
c002d8fc:	83 c4 3c             	add    esp,0x3c
c002d8ff:	89 f0                	mov    eax,esi
c002d901:	5b                   	pop    ebx
c002d902:	5e                   	pop    esi
c002d903:	5f                   	pop    edi
c002d904:	5d                   	pop    ebp
c002d905:	c3                   	ret    

c002d906 <IOAPIC::close(int, int, void*)>:
c002d906:	b8 00 00 00 00       	mov    eax,0x0
c002d90b:	c3                   	ret    

c002d90c <apicGetBase()>:
c002d90c:	55                   	push   ebp
c002d90d:	89 e5                	mov    ebp,esp
c002d90f:	83 ec 18             	sub    esp,0x18
c002d912:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d917:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d91d:	83 e0 08             	and    eax,0x8
c002d920:	0f b6 c0             	movzx  eax,al
c002d923:	85 c0                	test   eax,eax
c002d925:	75 07                	jne    c002d92e <apicGetBase()+0x22>
c002d927:	b8 00 00 00 00       	mov    eax,0x0
c002d92c:	eb 21                	jmp    c002d94f <apicGetBase()+0x43>
c002d92e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d933:	83 ec 08             	sub    esp,0x8
c002d936:	6a 1b                	push   0x1b
c002d938:	50                   	push   eax
c002d939:	e8 6a 81 fe ff       	call   c0015aa8 <Computer::rdmsr(unsigned int)>
c002d93e:	83 c4 10             	add    esp,0x10
c002d941:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d944:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d947:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d94a:	25 00 00 ff ff       	and    eax,0xffff0000
c002d94f:	c9                   	leave  
c002d950:	c3                   	ret    
c002d951:	90                   	nop

c002d952 <IOAPIC::IOAPIC()>:
c002d952:	83 ec 0c             	sub    esp,0xc
c002d955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d959:	83 ec 08             	sub    esp,0x8
c002d95c:	68 48 3b 03 c0       	push   0xc0033b48
c002d961:	50                   	push   eax
c002d962:	e8 5f db fe ff       	call   c001b4c6 <Device::Device(char const*)>
c002d967:	83 c4 10             	add    esp,0x10
c002d96a:	ba 58 3b 03 c0       	mov    edx,0xc0033b58
c002d96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d973:	89 10                	mov    DWORD PTR [eax],edx
c002d975:	90                   	nop
c002d976:	83 c4 0c             	add    esp,0xc
c002d979:	c3                   	ret    

c002d97a <apicOpen()>:
c002d97a:	55                   	push   ebp
c002d97b:	89 e5                	mov    ebp,esp
c002d97d:	53                   	push   ebx
c002d97e:	83 ec 34             	sub    esp,0x34
c002d981:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d986:	83 f0 01             	xor    eax,0x1
c002d989:	0f b6 c0             	movzx  eax,al
c002d98c:	85 c0                	test   eax,eax
c002d98e:	0f 84 a3 00 00 00    	je     c002da37 <apicOpen()+0xbd>
c002d994:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d998:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d99d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d9a1:	0f b6 c0             	movzx  eax,al
c002d9a4:	39 c2                	cmp    edx,eax
c002d9a6:	0f 83 84 00 00 00    	jae    c002da30 <apicOpen()+0xb6>
c002d9ac:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d9b3:	83 ec 0c             	sub    esp,0xc
c002d9b6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d9b9:	e8 d9 8a fe ff       	call   c0016497 <malloc>
c002d9be:	83 c4 10             	add    esp,0x10
c002d9c1:	89 c3                	mov    ebx,eax
c002d9c3:	83 ec 0c             	sub    esp,0xc
c002d9c6:	53                   	push   ebx
c002d9c7:	e8 86 ff ff ff       	call   c002d952 <IOAPIC::IOAPIC()>
c002d9cc:	83 c4 10             	add    esp,0x10
c002d9cf:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d9d2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d9d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d9d9:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d9e0:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d9e5:	83 c0 01             	add    eax,0x1
c002d9e8:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d9ed:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d9f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d9f8:	83 ec 08             	sub    esp,0x8
c002d9fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d9fe:	50                   	push   eax
c002d9ff:	e8 60 d9 fe ff       	call   c001b364 <Device::addChild(Device*)>
c002da04:	83 c4 10             	add    esp,0x10
c002da07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002da0a:	8b 00                	mov    eax,DWORD PTR [eax]
c002da0c:	83 c0 08             	add    eax,0x8
c002da0f:	8b 00                	mov    eax,DWORD PTR [eax]
c002da11:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002da15:	6a 00                	push   0x0
c002da17:	6a 00                	push   0x0
c002da19:	52                   	push   edx
c002da1a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002da1d:	ff d0                	call   eax
c002da1f:	83 c4 10             	add    esp,0x10
c002da22:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002da25:	83 c0 01             	add    eax,0x1
c002da28:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002da2b:	e9 68 ff ff ff       	jmp    c002d998 <apicOpen()+0x1e>
c002da30:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002da37:	e8 d0 fe ff ff       	call   c002d90c <apicGetBase()>
c002da3c:	05 f0 00 00 00       	add    eax,0xf0
c002da41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002da44:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002da47:	8b 00                	mov    eax,DWORD PTR [eax]
c002da49:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002da4c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002da53:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002da5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002da5d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002da60:	89 10                	mov    DWORD PTR [eax],edx
c002da62:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002da69:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002da6e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002da71:	7d 7c                	jge    c002daef <apicOpen()+0x175>
c002da73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da76:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da7d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002da80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da83:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da8a:	c1 e8 08             	shr    eax,0x8
c002da8d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002da91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da94:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da9b:	c1 e8 18             	shr    eax,0x18
c002da9e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002daa1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002daa5:	3d ff 00 00 00       	cmp    eax,0xff
c002daaa:	75 3a                	jne    c002dae6 <apicOpen()+0x16c>
c002daac:	e8 5b fe ff ff       	call   c002d90c <apicGetBase()>
c002dab1:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dab5:	83 fa 01             	cmp    edx,0x1
c002dab8:	75 07                	jne    c002dac1 <apicOpen()+0x147>
c002daba:	ba 60 03 00 00       	mov    edx,0x360
c002dabf:	eb 05                	jmp    c002dac6 <apicOpen()+0x14c>
c002dac1:	ba 50 03 00 00       	mov    edx,0x350
c002dac6:	01 d0                	add    eax,edx
c002dac8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dacb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dace:	8b 00                	mov    eax,DWORD PTR [eax]
c002dad0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002dad3:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002dada:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002dade:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dae1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002dae4:	89 10                	mov    DWORD PTR [eax],edx
c002dae6:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002daea:	e9 7a ff ff ff       	jmp    c002da69 <apicOpen()+0xef>
c002daef:	90                   	nop
c002daf0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002daf3:	c9                   	leave  
c002daf4:	c3                   	ret    
c002daf5:	90                   	nop

c002daf6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002daf6:	55                   	push   ebp
c002daf7:	89 e5                	mov    ebp,esp
c002daf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dafc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002db02:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002db05:	72 1d                	jb     c002db24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002db07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db0a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002db10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db13:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002db19:	01 d0                	add    eax,edx
c002db1b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002db1e:	73 04                	jae    c002db24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002db20:	b0 01                	mov    al,0x1
c002db22:	eb 02                	jmp    c002db26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002db24:	b0 00                	mov    al,0x0
c002db26:	5d                   	pop    ebp
c002db27:	c3                   	ret    

c002db28 <IOAPIC::read(int)>:
c002db28:	55                   	push   ebp
c002db29:	89 e5                	mov    ebp,esp
c002db2b:	83 ec 10             	sub    esp,0x10
c002db2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002db37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002db3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db3d:	0f b6 d0             	movzx  edx,al
c002db40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db43:	89 10                	mov    DWORD PTR [eax],edx
c002db45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db48:	83 c0 10             	add    eax,0x10
c002db4b:	8b 00                	mov    eax,DWORD PTR [eax]
c002db4d:	c9                   	leave  
c002db4e:	c3                   	ret    
c002db4f:	90                   	nop

c002db50 <IOAPIC::open(int, int, void*)>:
c002db50:	55                   	push   ebp
c002db51:	89 e5                	mov    ebp,esp
c002db53:	57                   	push   edi
c002db54:	56                   	push   esi
c002db55:	53                   	push   ebx
c002db56:	83 ec 04             	sub    esp,0x4
c002db59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002db5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002db65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db68:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002db6e:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002db75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db78:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002db7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db81:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002db87:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002db8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db91:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002db97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db9a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dba3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dba9:	0f b6 f0             	movzx  esi,al
c002dbac:	89 d0                	mov    eax,edx
c002dbae:	ba 00 00 00 00       	mov    edx,0x0
c002dbb3:	89 c7                	mov    edi,eax
c002dbb5:	83 e7 ff             	and    edi,0xffffffff
c002dbb8:	89 f9                	mov    ecx,edi
c002dbba:	0f b6 da             	movzx  ebx,dl
c002dbbd:	89 c8                	mov    eax,ecx
c002dbbf:	89 da                	mov    edx,ebx
c002dbc1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dbc4:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dbc7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dbcb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dbcf:	83 e0 00             	and    eax,0x0
c002dbd2:	09 d0                	or     eax,edx
c002dbd4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dbd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbdb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dbe1:	8d 50 01             	lea    edx,[eax+0x1]
c002dbe4:	88 d1                	mov    cl,dl
c002dbe6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dbe9:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002dbef:	0f b6 d0             	movzx  edx,al
c002dbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbf5:	83 c2 08             	add    edx,0x8
c002dbf8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002dbfc:	0f b6 c9             	movzx  ecx,cl
c002dbff:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002dc05:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002dc09:	6a 01                	push   0x1
c002dc0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc0e:	e8 15 ff ff ff       	call   c002db28 <IOAPIC::read(int)>
c002dc13:	83 c4 08             	add    esp,0x8
c002dc16:	c1 f8 10             	sar    eax,0x10
c002dc19:	0f b6 c0             	movzx  eax,al
c002dc1c:	8d 50 01             	lea    edx,[eax+0x1]
c002dc1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc22:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dc28:	b8 00 00 00 00       	mov    eax,0x0
c002dc2d:	8d 65 f4             	lea    esp,[ebp-0xc]
c002dc30:	5b                   	pop    ebx
c002dc31:	5e                   	pop    esi
c002dc32:	5f                   	pop    edi
c002dc33:	5d                   	pop    ebp
c002dc34:	c3                   	ret    
c002dc35:	90                   	nop

c002dc36 <IOAPIC::write(int, int)>:
c002dc36:	55                   	push   ebp
c002dc37:	89 e5                	mov    ebp,esp
c002dc39:	83 ec 10             	sub    esp,0x10
c002dc3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dc45:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dc48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dc4b:	0f b6 d0             	movzx  edx,al
c002dc4e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dc51:	89 10                	mov    DWORD PTR [eax],edx
c002dc53:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dc56:	8d 50 10             	lea    edx,[eax+0x10]
c002dc59:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dc5c:	89 02                	mov    DWORD PTR [edx],eax
c002dc5e:	90                   	nop
c002dc5f:	c9                   	leave  
c002dc60:	c3                   	ret    
c002dc61:	90                   	nop

c002dc62 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dc62:	55                   	push   ebp
c002dc63:	89 e5                	mov    ebp,esp
c002dc65:	53                   	push   ebx
c002dc66:	83 ec 2c             	sub    esp,0x2c
c002dc69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dc6c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dc6f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dc72:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dc75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dc78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dc7b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dc7e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dc81:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dc84:	88 d8                	mov    al,bl
c002dc86:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002dc89:	88 c8                	mov    al,cl
c002dc8b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002dc8e:	88 d0                	mov    al,dl
c002dc90:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002dc93:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dc97:	83 c0 08             	add    eax,0x8
c002dc9a:	d1 e0                	shl    eax,1
c002dc9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dc9f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dca3:	83 c0 08             	add    eax,0x8
c002dca6:	d1 e0                	shl    eax,1
c002dca8:	83 c0 01             	add    eax,0x1
c002dcab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dcae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dcb1:	50                   	push   eax
c002dcb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dcb5:	e8 6e fe ff ff       	call   c002db28 <IOAPIC::read(int)>
c002dcba:	83 c4 08             	add    esp,0x8
c002dcbd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dcc0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dcc7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dcca:	c1 e0 18             	shl    eax,0x18
c002dccd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dcd0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dcd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dcd6:	52                   	push   edx
c002dcd7:	50                   	push   eax
c002dcd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dcdb:	e8 56 ff ff ff       	call   c002dc36 <IOAPIC::write(int, int)>
c002dce0:	83 c4 0c             	add    esp,0xc
c002dce3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dce6:	50                   	push   eax
c002dce7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dcea:	e8 39 fe ff ff       	call   c002db28 <IOAPIC::read(int)>
c002dcef:	83 c4 08             	add    esp,0x8
c002dcf2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dcf5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dcfc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dd03:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dd0a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dd0e:	85 c0                	test   eax,eax
c002dd10:	74 09                	je     c002dd1b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dd12:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dd19:	eb 07                	jmp    c002dd22 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dd1b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dd22:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dd26:	85 c0                	test   eax,eax
c002dd28:	74 09                	je     c002dd33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dd2a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dd31:	eb 07                	jmp    c002dd3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dd33:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dd3a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dd41:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dd45:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dd48:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dd4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd4e:	52                   	push   edx
c002dd4f:	50                   	push   eax
c002dd50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dd53:	e8 de fe ff ff       	call   c002dc36 <IOAPIC::write(int, int)>
c002dd58:	83 c4 0c             	add    esp,0xc
c002dd5b:	90                   	nop
c002dd5c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dd5f:	c9                   	leave  
c002dd60:	c3                   	ret    
c002dd61:	66 90                	xchg   ax,ax
c002dd63:	90                   	nop

c002dd64 <APICTimer::close(int, int, void*)>:
c002dd64:	b8 00 00 00 00       	mov    eax,0x0
c002dd69:	c3                   	ret    
c002dd6a:	66 90                	xchg   ax,ax

c002dd6c <apicTimerHandler(regs*, void*)>:
c002dd6c:	83 ec 0c             	sub    esp,0xc
c002dd6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd73:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dd75:	b8 10 27 00 00       	mov    eax,0x2710
c002dd7a:	ba 00 00 00 00       	mov    edx,0x0
c002dd7f:	f7 f1                	div    ecx
c002dd81:	83 ec 0c             	sub    esp,0xc
c002dd84:	50                   	push   eax
c002dd85:	e8 52 f0 fe ff       	call   c001cddc <timerHandler(unsigned int)>
c002dd8a:	83 c4 10             	add    esp,0x10
c002dd8d:	90                   	nop
c002dd8e:	83 c4 0c             	add    esp,0xc
c002dd91:	c3                   	ret    
c002dd92:	66 90                	xchg   ax,ax

c002dd94 <APICTimer::open(int, int, void*)>:
c002dd94:	83 ec 0c             	sub    esp,0xc
c002dd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd9d:	83 c0 24             	add    eax,0x24
c002dda0:	8b 00                	mov    eax,DWORD PTR [eax]
c002dda2:	83 ec 08             	sub    esp,0x8
c002dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dda9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ddad:	ff d0                	call   eax
c002ddaf:	83 c4 10             	add    esp,0x10
c002ddb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002ddba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002ddc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ddc8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002ddce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ddd2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002ddd8:	83 ec 0c             	sub    esp,0xc
c002dddb:	51                   	push   ecx
c002dddc:	6a 01                	push   0x1
c002ddde:	68 6c dd 02 c0       	push   0xc002dd6c
c002dde3:	52                   	push   edx
c002dde4:	50                   	push   eax
c002dde5:	e8 26 d5 fe ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002ddea:	83 c4 20             	add    esp,0x20
c002dded:	89 c2                	mov    edx,eax
c002ddef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002ddf9:	b8 00 00 00 00       	mov    eax,0x0
c002ddfe:	83 c4 0c             	add    esp,0xc
c002de01:	c3                   	ret    
c002de02:	66 90                	xchg   ax,ax

c002de04 <APICTimer::write(int)>:
c002de04:	83 ec 0c             	sub    esp,0xc
c002de07:	83 ec 0c             	sub    esp,0xc
c002de0a:	68 7c 3b 03 c0       	push   0xc0033b7c
c002de0f:	e8 42 24 ff ff       	call   c0020256 <KePanic(char const*)>
c002de14:	83 c4 10             	add    esp,0x10
c002de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002de1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002de25:	90                   	nop
c002de26:	83 c4 0c             	add    esp,0xc
c002de29:	c3                   	ret    
c002de2a:	66 90                	xchg   ax,ax

c002de2c <APICTimer::APICTimer()>:
c002de2c:	83 ec 0c             	sub    esp,0xc
c002de2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de33:	83 ec 08             	sub    esp,0x8
c002de36:	68 8c 3b 03 c0       	push   0xc0033b8c
c002de3b:	50                   	push   eax
c002de3c:	e8 cf ee fe ff       	call   c001cd10 <Timer::Timer(char const*)>
c002de41:	83 c4 10             	add    esp,0x10
c002de44:	ba a0 3b 03 c0       	mov    edx,0xc0033ba0
c002de49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de4d:	89 10                	mov    DWORD PTR [eax],edx
c002de4f:	90                   	nop
c002de50:	83 c4 0c             	add    esp,0xc
c002de53:	c3                   	ret    

c002de54 <PIT::write(int)>:
c002de54:	83 ec 10             	sub    esp,0x10
c002de57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002de5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002de5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002de65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002de69:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002de6e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002de73:	89 c2                	mov    edx,eax
c002de75:	c1 fa 1f             	sar    edx,0x1f
c002de78:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002de7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002de80:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002de87:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002de8c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002de90:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002de95:	ee                   	out    dx,al
c002de96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002de9a:	0f b6 c0             	movzx  eax,al
c002de9d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002dea4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dea8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002deac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002deb1:	ee                   	out    dx,al
c002deb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002deb6:	c1 f8 08             	sar    eax,0x8
c002deb9:	0f b6 c0             	movzx  eax,al
c002debc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002dec3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002dec7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002decb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002ded0:	ee                   	out    dx,al
c002ded1:	90                   	nop
c002ded2:	83 c4 10             	add    esp,0x10
c002ded5:	c3                   	ret    
c002ded6:	66 90                	xchg   ax,ax

c002ded8 <pitHandler(regs*, void*)>:
c002ded8:	83 ec 0c             	sub    esp,0xc
c002dedb:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002dee1:	b8 10 27 00 00       	mov    eax,0x2710
c002dee6:	89 c2                	mov    edx,eax
c002dee8:	c1 fa 1f             	sar    edx,0x1f
c002deeb:	f7 f9                	idiv   ecx
c002deed:	83 ec 0c             	sub    esp,0xc
c002def0:	50                   	push   eax
c002def1:	e8 e6 ee fe ff       	call   c001cddc <timerHandler(unsigned int)>
c002def6:	83 c4 10             	add    esp,0x10
c002def9:	90                   	nop
c002defa:	83 c4 0c             	add    esp,0xc
c002defd:	c3                   	ret    
c002defe:	66 90                	xchg   ax,ax

c002df00 <PIT::open(int, int, void*)>:
c002df00:	83 ec 0c             	sub    esp,0xc
c002df03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df07:	8b 00                	mov    eax,DWORD PTR [eax]
c002df09:	83 c0 24             	add    eax,0x24
c002df0c:	8b 00                	mov    eax,DWORD PTR [eax]
c002df0e:	83 ec 08             	sub    esp,0x8
c002df11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df19:	ff d0                	call   eax
c002df1b:	83 c4 10             	add    esp,0x10
c002df1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df22:	83 ec 0c             	sub    esp,0xc
c002df25:	6a 00                	push   0x0
c002df27:	6a 01                	push   0x1
c002df29:	68 d8 de 02 c0       	push   0xc002ded8
c002df2e:	6a 00                	push   0x0
c002df30:	50                   	push   eax
c002df31:	e8 da d3 fe ff       	call   c001b310 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002df36:	83 c4 20             	add    esp,0x20
c002df39:	89 c2                	mov    edx,eax
c002df3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002df45:	b8 00 00 00 00       	mov    eax,0x0
c002df4a:	83 c4 0c             	add    esp,0xc
c002df4d:	c3                   	ret    
c002df4e:	66 90                	xchg   ax,ax

c002df50 <PIT::close(int, int, void*)>:
c002df50:	83 ec 0c             	sub    esp,0xc
c002df53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df57:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df65:	6a 01                	push   0x1
c002df67:	68 d8 de 02 c0       	push   0xc002ded8
c002df6c:	6a 00                	push   0x0
c002df6e:	50                   	push   eax
c002df6f:	e8 d2 d3 fe ff       	call   c001b346 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002df74:	83 c4 10             	add    esp,0x10
c002df77:	b8 00 00 00 00       	mov    eax,0x0
c002df7c:	83 c4 0c             	add    esp,0xc
c002df7f:	c3                   	ret    

c002df80 <PIT::PIT()>:
c002df80:	83 ec 0c             	sub    esp,0xc
c002df83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df87:	83 ec 08             	sub    esp,0x8
c002df8a:	68 c8 3b 03 c0       	push   0xc0033bc8
c002df8f:	50                   	push   eax
c002df90:	e8 7b ed fe ff       	call   c001cd10 <Timer::Timer(char const*)>
c002df95:	83 c4 10             	add    esp,0x10
c002df98:	ba f0 3b 03 c0       	mov    edx,0xc0033bf0
c002df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfa1:	89 10                	mov    DWORD PTR [eax],edx
c002dfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfa7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dfad:	0f b6 d0             	movzx  edx,al
c002dfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfb4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dfc5:	0f b6 d0             	movzx  edx,al
c002dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfcc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002dfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfd5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dfdb:	8d 50 01             	lea    edx,[eax+0x1]
c002dfde:	88 d1                	mov    cl,dl
c002dfe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dfe4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002dfea:	0f b6 d0             	movzx  edx,al
c002dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dff1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002dff5:	83 e1 3f             	and    ecx,0x3f
c002dff8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002dffc:	90                   	nop
c002dffd:	83 c4 0c             	add    esp,0xc
c002e000:	c3                   	ret    
c002e001:	66 90                	xchg   ax,ax
c002e003:	66 90                	xchg   ax,ax
c002e005:	66 90                	xchg   ax,ax
c002e007:	66 90                	xchg   ax,ax
c002e009:	66 90                	xchg   ax,ax
c002e00b:	66 90                	xchg   ax,ax
c002e00d:	66 90                	xchg   ax,ax
c002e00f:	90                   	nop

c002e010 <avxDetect>:
c002e010:	b8 01 00 00 00       	mov    eax,0x1
c002e015:	0f a2                	cpuid  
c002e017:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e01d:	74 15                	je     c002e034 <avxDetect.noAVX>
c002e01f:	b8 01 00 00 00       	mov    eax,0x1
c002e024:	0f a2                	cpuid  
c002e026:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e02c:	74 06                	je     c002e034 <avxDetect.noAVX>
c002e02e:	b8 01 00 00 00       	mov    eax,0x1
c002e033:	c3                   	ret    

c002e034 <avxDetect.noAVX>:
c002e034:	b8 00 00 00 00       	mov    eax,0x0
c002e039:	c3                   	ret    

c002e03a <avxSave>:
c002e03a:	53                   	push   ebx
c002e03b:	52                   	push   edx
c002e03c:	31 c0                	xor    eax,eax
c002e03e:	48                   	dec    eax
c002e03f:	89 c2                	mov    edx,eax
c002e041:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e045:	0f ae 23             	xsave  [ebx]
c002e048:	5a                   	pop    edx
c002e049:	5b                   	pop    ebx
c002e04a:	c3                   	ret    

c002e04b <avxLoad>:
c002e04b:	53                   	push   ebx
c002e04c:	52                   	push   edx
c002e04d:	31 c0                	xor    eax,eax
c002e04f:	48                   	dec    eax
c002e050:	89 c2                	mov    edx,eax
c002e052:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e056:	0f ae 2b             	xrstor [ebx]
c002e059:	5a                   	pop    edx
c002e05a:	5b                   	pop    ebx
c002e05b:	c3                   	ret    

c002e05c <avxInit>:
c002e05c:	e8 47 03 00 00       	call   c002e3a8 <sseInit>
c002e061:	50                   	push   eax
c002e062:	51                   	push   ecx
c002e063:	0f 20 e0             	mov    eax,cr4
c002e066:	0d 00 00 04 00       	or     eax,0x40000
c002e06b:	0f 22 e0             	mov    cr4,eax
c002e06e:	31 c9                	xor    ecx,ecx
c002e070:	0f 01 d0             	xgetbv 
c002e073:	0d 07 00 00 00       	or     eax,0x7
c002e078:	0f 01 d1             	xsetbv 
c002e07b:	59                   	pop    ecx
c002e07c:	58                   	pop    eax
c002e07d:	c3                   	ret    

c002e07e <avxClose>:
c002e07e:	c3                   	ret    
c002e07f:	90                   	nop

c002e080 <isr0>:
c002e080:	fa                   	cli    
c002e081:	68 00 00 00 00       	push   0x0
c002e086:	68 00 00 00 00       	push   0x0
c002e08b:	e9 56 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e090 <isr1>:
c002e090:	fa                   	cli    
c002e091:	6a 00                	push   0x0
c002e093:	6a 01                	push   0x1
c002e095:	e9 4c 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e09a <isr2>:
c002e09a:	fa                   	cli    
c002e09b:	6a 00                	push   0x0
c002e09d:	6a 02                	push   0x2
c002e09f:	e9 42 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0a4 <isr3>:
c002e0a4:	fa                   	cli    
c002e0a5:	6a 00                	push   0x0
c002e0a7:	6a 03                	push   0x3
c002e0a9:	e9 38 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0ae <isr4>:
c002e0ae:	fa                   	cli    
c002e0af:	6a 00                	push   0x0
c002e0b1:	6a 04                	push   0x4
c002e0b3:	e9 2e 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0b8 <isr5>:
c002e0b8:	fa                   	cli    
c002e0b9:	6a 00                	push   0x0
c002e0bb:	6a 05                	push   0x5
c002e0bd:	e9 24 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0c2 <isr6>:
c002e0c2:	fa                   	cli    
c002e0c3:	6a 00                	push   0x0
c002e0c5:	6a 06                	push   0x6
c002e0c7:	e9 1a 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0cc <isr7>:
c002e0cc:	fa                   	cli    
c002e0cd:	6a 00                	push   0x0
c002e0cf:	6a 07                	push   0x7
c002e0d1:	e9 10 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0d6 <isr8>:
c002e0d6:	fa                   	cli    
c002e0d7:	6a 08                	push   0x8
c002e0d9:	e9 08 01 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0de <isr9>:
c002e0de:	fa                   	cli    
c002e0df:	6a 00                	push   0x0
c002e0e1:	6a 09                	push   0x9
c002e0e3:	e9 fe 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0e8 <isr10>:
c002e0e8:	fa                   	cli    
c002e0e9:	6a 0a                	push   0xa
c002e0eb:	e9 f6 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0f0 <isr11>:
c002e0f0:	fa                   	cli    
c002e0f1:	6a 0b                	push   0xb
c002e0f3:	e9 ee 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e0f8 <isr12>:
c002e0f8:	fa                   	cli    
c002e0f9:	6a 0c                	push   0xc
c002e0fb:	e9 e6 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e100 <isr13>:
c002e100:	fa                   	cli    
c002e101:	6a 0d                	push   0xd
c002e103:	53                   	push   ebx
c002e104:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e108:	81 fb d6 e2 02 c0    	cmp    ebx,0xc002e2d6
c002e10e:	5b                   	pop    ebx
c002e10f:	0f 84 c3 01 00 00    	je     c002e2d8 <finishSignal2>
c002e115:	e9 cc 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e11a <isr14>:
c002e11a:	fa                   	cli    
c002e11b:	6a 0e                	push   0xe
c002e11d:	e9 c4 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e122 <isr15>:
c002e122:	fa                   	cli    
c002e123:	6a 00                	push   0x0
c002e125:	6a 0f                	push   0xf
c002e127:	e9 ba 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e12c <isr16>:
c002e12c:	fa                   	cli    
c002e12d:	6a 00                	push   0x0
c002e12f:	6a 10                	push   0x10
c002e131:	e9 b0 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e136 <isr17>:
c002e136:	fa                   	cli    
c002e137:	6a 00                	push   0x0
c002e139:	6a 11                	push   0x11
c002e13b:	e9 a6 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e140 <isr18>:
c002e140:	fa                   	cli    
c002e141:	6a 00                	push   0x0
c002e143:	6a 12                	push   0x12
c002e145:	e9 9c 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e14a <irq3>:
c002e14a:	fa                   	cli    
c002e14b:	6a 00                	push   0x0
c002e14d:	6a 23                	push   0x23
c002e14f:	e9 92 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e154 <irq4>:
c002e154:	fa                   	cli    
c002e155:	6a 00                	push   0x0
c002e157:	6a 24                	push   0x24
c002e159:	e9 88 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e15e <irq5>:
c002e15e:	fa                   	cli    
c002e15f:	6a 00                	push   0x0
c002e161:	6a 25                	push   0x25
c002e163:	e9 7e 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e168 <irq6>:
c002e168:	fa                   	cli    
c002e169:	6a 00                	push   0x0
c002e16b:	6a 26                	push   0x26
c002e16d:	e9 74 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e172 <irq7>:
c002e172:	fa                   	cli    
c002e173:	6a 00                	push   0x0
c002e175:	6a 27                	push   0x27
c002e177:	e9 6a 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e17c <irq8>:
c002e17c:	fa                   	cli    
c002e17d:	6a 00                	push   0x0
c002e17f:	6a 28                	push   0x28
c002e181:	e9 60 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e186 <irq9>:
c002e186:	fa                   	cli    
c002e187:	6a 00                	push   0x0
c002e189:	6a 29                	push   0x29
c002e18b:	e9 56 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e190 <irq10>:
c002e190:	fa                   	cli    
c002e191:	6a 00                	push   0x0
c002e193:	6a 2a                	push   0x2a
c002e195:	e9 4c 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e19a <irq11>:
c002e19a:	fa                   	cli    
c002e19b:	6a 00                	push   0x0
c002e19d:	6a 2b                	push   0x2b
c002e19f:	e9 42 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e1a4 <irq12>:
c002e1a4:	fa                   	cli    
c002e1a5:	6a 00                	push   0x0
c002e1a7:	6a 2c                	push   0x2c
c002e1a9:	e9 38 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e1ae <irq13>:
c002e1ae:	fa                   	cli    
c002e1af:	6a 00                	push   0x0
c002e1b1:	6a 2d                	push   0x2d
c002e1b3:	e9 2e 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e1b8 <irq14>:
c002e1b8:	fa                   	cli    
c002e1b9:	6a 00                	push   0x0
c002e1bb:	6a 2e                	push   0x2e
c002e1bd:	e9 24 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e1c2 <irq15>:
c002e1c2:	fa                   	cli    
c002e1c3:	6a 00                	push   0x0
c002e1c5:	6a 2f                	push   0x2f
c002e1c7:	e9 1a 00 00 00       	jmp    c002e1e6 <int_common_stub>

c002e1cc <irq1>:
c002e1cc:	fa                   	cli    
c002e1cd:	6a 00                	push   0x0
c002e1cf:	6a 21                	push   0x21
c002e1d1:	eb 13                	jmp    c002e1e6 <int_common_stub>

c002e1d3 <irq2>:
c002e1d3:	fa                   	cli    
c002e1d4:	6a 00                	push   0x0
c002e1d6:	6a 22                	push   0x22
c002e1d8:	eb 0c                	jmp    c002e1e6 <int_common_stub>

c002e1da <isr96>:
c002e1da:	6a 00                	push   0x0
c002e1dc:	6a 60                	push   0x60
c002e1de:	fb                   	sti    
c002e1df:	eb 37                	jmp    c002e218 <syscall_common_stub>

c002e1e1 <irq0>:
c002e1e1:	fa                   	cli    
c002e1e2:	6a 00                	push   0x0
c002e1e4:	6a 20                	push   0x20

c002e1e6 <int_common_stub>:
c002e1e6:	60                   	pusha  
c002e1e7:	1e                   	push   ds
c002e1e8:	06                   	push   es
c002e1e9:	0f a0                	push   fs
c002e1eb:	0f a8                	push   gs
c002e1ed:	66 b8 10 00          	mov    ax,0x10
c002e1f1:	66 8e d8             	mov    ds,ax
c002e1f4:	66 8e c0             	mov    es,ax
c002e1f7:	66 8e e0             	mov    fs,ax
c002e1fa:	66 8e e8             	mov    gs,ax
c002e1fd:	54                   	push   esp
c002e1fe:	fc                   	cld    
c002e1ff:	e8 20 d6 fe ff       	call   c001b824 <int_handler>
c002e204:	81 c4 04 00 00 00    	add    esp,0x4
c002e20a:	0f a9                	pop    gs
c002e20c:	0f a1                	pop    fs
c002e20e:	07                   	pop    es
c002e20f:	1f                   	pop    ds
c002e210:	61                   	popa   
c002e211:	81 c4 08 00 00 00    	add    esp,0x8
c002e217:	cf                   	iret   

c002e218 <syscall_common_stub>:
c002e218:	60                   	pusha  
c002e219:	1e                   	push   ds
c002e21a:	06                   	push   es
c002e21b:	0f a0                	push   fs
c002e21d:	0f a8                	push   gs
c002e21f:	66 b8 10 00          	mov    ax,0x10
c002e223:	66 8e d8             	mov    ds,ax
c002e226:	66 8e c0             	mov    es,ax
c002e229:	66 8e e0             	mov    fs,ax
c002e22c:	66 8e e8             	mov    gs,ax
c002e22f:	54                   	push   esp
c002e230:	fc                   	cld    
c002e231:	e8 ee d5 fe ff       	call   c001b824 <int_handler>
c002e236:	81 c4 04 00 00 00    	add    esp,0x4
c002e23c:	0f a9                	pop    gs
c002e23e:	0f a1                	pop    fs
c002e240:	07                   	pop    es
c002e241:	1f                   	pop    ds
c002e242:	e8 35 2a ff ff       	call   c0020c7c <KiCheckSignalZ>
c002e247:	3d 00 00 00 00       	cmp    eax,0x0
c002e24c:	0f 84 c0 00 00 00    	je     c002e312 <skipSignals>
c002e252:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e257:	61                   	popa   
c002e258:	53                   	push   ebx
c002e259:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e25f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e262:	5b                   	pop    ebx
c002e263:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e268:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e26b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e26e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e271:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e274:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e277:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e27a:	81 c4 08 00 00 00    	add    esp,0x8
c002e280:	5e                   	pop    esi
c002e281:	5b                   	pop    ebx
c002e282:	59                   	pop    ecx
c002e283:	5a                   	pop    edx
c002e284:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e287:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e28a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e28d:	52                   	push   edx
c002e28e:	51                   	push   ecx
c002e28f:	53                   	push   ebx
c002e290:	56                   	push   esi
c002e291:	81 ec 08 00 00 00    	sub    esp,0x8
c002e297:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e29a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e29d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e2a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e2a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e2a6:	60                   	pusha  
c002e2a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e2ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e2b0:	89 e3                	mov    ebx,esp
c002e2b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e2b5:	52                   	push   edx
c002e2b6:	68 d6 e2 02 c0       	push   0xc002e2d6
c002e2bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e2be:	89 dc                	mov    esp,ebx
c002e2c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e2c3:	68 23 00 00 00       	push   0x23
c002e2c8:	51                   	push   ecx
c002e2c9:	68 02 02 00 00       	push   0x202
c002e2ce:	68 1b 00 00 00       	push   0x1b
c002e2d3:	ff 36                	push   DWORD PTR [esi]
c002e2d5:	cf                   	iret   

c002e2d6 <finishSignal>:
c002e2d6:	cd 0f                	int    0xf

c002e2d8 <finishSignal2>:
c002e2d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e2de:	e8 16 2a ff ff       	call   c0020cf9 <KiFinishSignalZ>
c002e2e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e2e9:	68 23 00 00 00       	push   0x23
c002e2ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e2f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e2f4:	68 1b 00 00 00       	push   0x1b
c002e2f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e2fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e2ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e302:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e305:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e308:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e30b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e30e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e311:	cf                   	iret   

c002e312 <skipSignals>:
c002e312:	61                   	popa   
c002e313:	81 c4 08 00 00 00    	add    esp,0x8
c002e319:	cf                   	iret   
c002e31a:	90                   	nop
c002e31b:	90                   	nop

c002e31c <irq16>:
c002e31c:	fa                   	cli    
c002e31d:	6a 00                	push   0x0
c002e31f:	6a 30                	push   0x30
c002e321:	e9 c0 fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e326 <irq17>:
c002e326:	fa                   	cli    
c002e327:	6a 00                	push   0x0
c002e329:	6a 31                	push   0x31
c002e32b:	e9 b6 fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e330 <irq18>:
c002e330:	fa                   	cli    
c002e331:	6a 00                	push   0x0
c002e333:	6a 32                	push   0x32
c002e335:	e9 ac fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e33a <irq19>:
c002e33a:	fa                   	cli    
c002e33b:	6a 00                	push   0x0
c002e33d:	6a 33                	push   0x33
c002e33f:	e9 a2 fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e344 <irq20>:
c002e344:	fa                   	cli    
c002e345:	6a 00                	push   0x0
c002e347:	6a 34                	push   0x34
c002e349:	e9 98 fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e34e <irq21>:
c002e34e:	fa                   	cli    
c002e34f:	6a 00                	push   0x0
c002e351:	6a 35                	push   0x35
c002e353:	e9 8e fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e358 <irq22>:
c002e358:	fa                   	cli    
c002e359:	6a 00                	push   0x0
c002e35b:	6a 36                	push   0x36
c002e35d:	e9 84 fe ff ff       	jmp    c002e1e6 <int_common_stub>

c002e362 <irq23>:
c002e362:	fa                   	cli    
c002e363:	6a 00                	push   0x0
c002e365:	6a 37                	push   0x37
c002e367:	e9 7a fe ff ff       	jmp    c002e1e6 <int_common_stub>
c002e36c:	66 90                	xchg   ax,ax
c002e36e:	66 90                	xchg   ax,ax

c002e370 <i386GetRDRAND>:
c002e370:	b9 64 00 00 00       	mov    ecx,0x64

c002e375 <retry>:
c002e375:	0f c7 f0             	rdrand eax
c002e378:	72 05                	jb     c002e37f <retry.done>
c002e37a:	e2 f9                	loop   c002e375 <retry>

c002e37c <retry.fail>:
c002e37c:	31 c0                	xor    eax,eax
c002e37e:	c3                   	ret    

c002e37f <retry.done>:
c002e37f:	c3                   	ret    

c002e380 <sseDetect>:
c002e380:	b8 01 00 00 00       	mov    eax,0x1
c002e385:	0f a2                	cpuid  
c002e387:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e38d:	74 06                	je     c002e395 <sseDetect.noSSE>
c002e38f:	b8 01 00 00 00       	mov    eax,0x1
c002e394:	c3                   	ret    

c002e395 <sseDetect.noSSE>:
c002e395:	31 c0                	xor    eax,eax
c002e397:	c3                   	ret    

c002e398 <sseSave>:
c002e398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e39c:	0f ae 00             	fxsave [eax]
c002e39f:	c3                   	ret    

c002e3a0 <sseLoad>:
c002e3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e3a4:	0f ae 08             	fxrstor [eax]
c002e3a7:	c3                   	ret    

c002e3a8 <sseInit>:
c002e3a8:	e8 42 00 00 00       	call   c002e3ef <x87Init>
c002e3ad:	0f 20 e0             	mov    eax,cr4
c002e3b0:	66 0d 00 06          	or     ax,0x600
c002e3b4:	0f 22 e0             	mov    cr4,eax
c002e3b7:	c3                   	ret    

c002e3b8 <sseClose>:
c002e3b8:	c3                   	ret    
c002e3b9:	66 90                	xchg   ax,ax
c002e3bb:	66 90                	xchg   ax,ax
c002e3bd:	66 90                	xchg   ax,ax
c002e3bf:	90                   	nop

c002e3c0 <value_37F>:
c002e3c0:	7f 03                	jg     c002e3c5 <value_37A+0x1>

c002e3c2 <value_37E>:
c002e3c2:	7e 03                	jle    c002e3c7 <x87Detect+0x1>

c002e3c4 <value_37A>:
c002e3c4:	7a 03                	jp     c002e3c9 <x87Detect+0x3>

c002e3c6 <x87Detect>:
c002e3c6:	b8 01 00 00 00       	mov    eax,0x1
c002e3cb:	0f a2                	cpuid  
c002e3cd:	f7 c2 01 00 00 00    	test   edx,0x1
c002e3d3:	74 06                	je     c002e3db <x87Detect.nox87>
c002e3d5:	b8 01 00 00 00       	mov    eax,0x1
c002e3da:	c3                   	ret    

c002e3db <x87Detect.nox87>:
c002e3db:	b8 00 00 00 00       	mov    eax,0x0
c002e3e0:	c3                   	ret    

c002e3e1 <x87Save>:
c002e3e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e3e5:	dd 30                	fnsave [eax]
c002e3e7:	c3                   	ret    

c002e3e8 <x87Load>:
c002e3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e3ec:	dd 20                	frstor [eax]
c002e3ee:	c3                   	ret    

c002e3ef <x87Init>:
c002e3ef:	0f 20 c0             	mov    eax,cr0
c002e3f2:	66 25 fb ff          	and    ax,0xfffb
c002e3f6:	66 0d 22 00          	or     ax,0x22
c002e3fa:	0f 22 c0             	mov    cr0,eax
c002e3fd:	db e3                	fninit 
c002e3ff:	0f 06                	clts   
c002e401:	d9 2d c4 e3 02 c0    	fldcw  WORD PTR ds:0xc002e3c4
c002e407:	c3                   	ret    

c002e408 <x87Close>:
c002e408:	c3                   	ret    
c002e409:	66 90                	xchg   ax,ax
c002e40b:	90                   	nop

c002e40c <__do_global_ctors_aux>:
c002e40c:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c002e411:	83 f8 ff             	cmp    eax,0xffffffff
c002e414:	74 1a                	je     c002e430 <__do_global_ctors_aux+0x24>
c002e416:	55                   	push   ebp
c002e417:	89 e5                	mov    ebp,esp
c002e419:	53                   	push   ebx
c002e41a:	52                   	push   edx
c002e41b:	bb c0 f3 02 c0       	mov    ebx,0xc002f3c0
c002e420:	ff d0                	call   eax
c002e422:	83 eb 04             	sub    ebx,0x4
c002e425:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e427:	83 f8 ff             	cmp    eax,0xffffffff
c002e42a:	75 f4                	jne    c002e420 <__do_global_ctors_aux+0x14>
c002e42c:	58                   	pop    eax
c002e42d:	5b                   	pop    ebx
c002e42e:	5d                   	pop    ebp
c002e42f:	c3                   	ret    
c002e430:	c3                   	ret    
c002e431:	66 90                	xchg   ax,ax
c002e433:	90                   	nop

c002e434 <__divdi3>:
c002e434:	55                   	push   ebp
c002e435:	57                   	push   edi
c002e436:	56                   	push   esi
c002e437:	53                   	push   ebx
c002e438:	83 ec 1c             	sub    esp,0x1c
c002e43b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e43f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e443:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e446:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e44a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e44e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e452:	85 db                	test   ebx,ebx
c002e454:	0f 88 8e 00 00 00    	js     c002e4e8 <__divdi3+0xb4>
c002e45a:	89 dd                	mov    ebp,ebx
c002e45c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e464:	89 d3                	mov    ebx,edx
c002e466:	85 d2                	test   edx,edx
c002e468:	79 0d                	jns    c002e477 <__divdi3+0x43>
c002e46a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e46e:	f7 d8                	neg    eax
c002e470:	83 d2 00             	adc    edx,0x0
c002e473:	f7 da                	neg    edx
c002e475:	89 d3                	mov    ebx,edx
c002e477:	89 c7                	mov    edi,eax
c002e479:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e47c:	85 db                	test   ebx,ebx
c002e47e:	75 48                	jne    c002e4c8 <__divdi3+0x94>
c002e480:	39 ef                	cmp    edi,ebp
c002e482:	76 24                	jbe    c002e4a8 <__divdi3+0x74>
c002e484:	89 ea                	mov    edx,ebp
c002e486:	f7 f7                	div    edi
c002e488:	89 c1                	mov    ecx,eax
c002e48a:	31 f6                	xor    esi,esi
c002e48c:	89 c8                	mov    eax,ecx
c002e48e:	89 f2                	mov    edx,esi
c002e490:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e494:	85 c9                	test   ecx,ecx
c002e496:	74 07                	je     c002e49f <__divdi3+0x6b>
c002e498:	f7 d8                	neg    eax
c002e49a:	83 d2 00             	adc    edx,0x0
c002e49d:	f7 da                	neg    edx
c002e49f:	83 c4 1c             	add    esp,0x1c
c002e4a2:	5b                   	pop    ebx
c002e4a3:	5e                   	pop    esi
c002e4a4:	5f                   	pop    edi
c002e4a5:	5d                   	pop    ebp
c002e4a6:	c3                   	ret    
c002e4a7:	90                   	nop
c002e4a8:	85 ff                	test   edi,edi
c002e4aa:	75 0b                	jne    c002e4b7 <__divdi3+0x83>
c002e4ac:	b8 01 00 00 00       	mov    eax,0x1
c002e4b1:	31 d2                	xor    edx,edx
c002e4b3:	f7 f3                	div    ebx
c002e4b5:	89 c7                	mov    edi,eax
c002e4b7:	31 d2                	xor    edx,edx
c002e4b9:	89 e8                	mov    eax,ebp
c002e4bb:	f7 f7                	div    edi
c002e4bd:	89 c6                	mov    esi,eax
c002e4bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e4c2:	f7 f7                	div    edi
c002e4c4:	89 c1                	mov    ecx,eax
c002e4c6:	eb c4                	jmp    c002e48c <__divdi3+0x58>
c002e4c8:	39 eb                	cmp    ebx,ebp
c002e4ca:	77 3c                	ja     c002e508 <__divdi3+0xd4>
c002e4cc:	0f bd f3             	bsr    esi,ebx
c002e4cf:	83 f6 1f             	xor    esi,0x1f
c002e4d2:	75 40                	jne    c002e514 <__divdi3+0xe0>
c002e4d4:	39 eb                	cmp    ebx,ebp
c002e4d6:	72 09                	jb     c002e4e1 <__divdi3+0xad>
c002e4d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e4db:	0f 87 97 00 00 00    	ja     c002e578 <__divdi3+0x144>
c002e4e1:	b9 01 00 00 00       	mov    ecx,0x1
c002e4e6:	eb a4                	jmp    c002e48c <__divdi3+0x58>
c002e4e8:	f7 d9                	neg    ecx
c002e4ea:	83 d3 00             	adc    ebx,0x0
c002e4ed:	f7 db                	neg    ebx
c002e4ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e4f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e4f6:	89 dd                	mov    ebp,ebx
c002e4f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e500:	e9 5f ff ff ff       	jmp    c002e464 <__divdi3+0x30>
c002e505:	8d 76 00             	lea    esi,[esi+0x0]
c002e508:	31 f6                	xor    esi,esi
c002e50a:	31 c9                	xor    ecx,ecx
c002e50c:	e9 7b ff ff ff       	jmp    c002e48c <__divdi3+0x58>
c002e511:	8d 76 00             	lea    esi,[esi+0x0]
c002e514:	b8 20 00 00 00       	mov    eax,0x20
c002e519:	29 f0                	sub    eax,esi
c002e51b:	89 f1                	mov    ecx,esi
c002e51d:	d3 e3                	shl    ebx,cl
c002e51f:	89 fa                	mov    edx,edi
c002e521:	88 c1                	mov    cl,al
c002e523:	d3 ea                	shr    edx,cl
c002e525:	09 da                	or     edx,ebx
c002e527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e52b:	89 f1                	mov    ecx,esi
c002e52d:	d3 e7                	shl    edi,cl
c002e52f:	89 eb                	mov    ebx,ebp
c002e531:	88 c1                	mov    cl,al
c002e533:	d3 eb                	shr    ebx,cl
c002e535:	89 f1                	mov    ecx,esi
c002e537:	d3 e5                	shl    ebp,cl
c002e539:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e53c:	88 c1                	mov    cl,al
c002e53e:	d3 ea                	shr    edx,cl
c002e540:	09 d5                	or     ebp,edx
c002e542:	89 e8                	mov    eax,ebp
c002e544:	89 da                	mov    edx,ebx
c002e546:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e54a:	89 d3                	mov    ebx,edx
c002e54c:	89 c5                	mov    ebp,eax
c002e54e:	f7 e7                	mul    edi
c002e550:	39 d3                	cmp    ebx,edx
c002e552:	72 18                	jb     c002e56c <__divdi3+0x138>
c002e554:	74 0a                	je     c002e560 <__divdi3+0x12c>
c002e556:	89 e9                	mov    ecx,ebp
c002e558:	31 f6                	xor    esi,esi
c002e55a:	e9 2d ff ff ff       	jmp    c002e48c <__divdi3+0x58>
c002e55f:	90                   	nop
c002e560:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e563:	89 f1                	mov    ecx,esi
c002e565:	d3 e7                	shl    edi,cl
c002e567:	39 c7                	cmp    edi,eax
c002e569:	73 eb                	jae    c002e556 <__divdi3+0x122>
c002e56b:	90                   	nop
c002e56c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e56f:	31 f6                	xor    esi,esi
c002e571:	e9 16 ff ff ff       	jmp    c002e48c <__divdi3+0x58>
c002e576:	66 90                	xchg   ax,ax
c002e578:	31 c9                	xor    ecx,ecx
c002e57a:	e9 0d ff ff ff       	jmp    c002e48c <__divdi3+0x58>
c002e57f:	90                   	nop

c002e580 <__moddi3>:
c002e580:	55                   	push   ebp
c002e581:	57                   	push   edi
c002e582:	56                   	push   esi
c002e583:	53                   	push   ebx
c002e584:	83 ec 2c             	sub    esp,0x2c
c002e587:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e58b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e58f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e593:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e597:	85 db                	test   ebx,ebx
c002e599:	0f 88 85 00 00 00    	js     c002e624 <__moddi3+0xa4>
c002e59f:	89 de                	mov    esi,ebx
c002e5a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e5a9:	89 d7                	mov    edi,edx
c002e5ab:	85 d2                	test   edx,edx
c002e5ad:	79 09                	jns    c002e5b8 <__moddi3+0x38>
c002e5af:	f7 d8                	neg    eax
c002e5b1:	83 d2 00             	adc    edx,0x0
c002e5b4:	f7 da                	neg    edx
c002e5b6:	89 d7                	mov    edi,edx
c002e5b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e5bc:	89 cd                	mov    ebp,ecx
c002e5be:	85 ff                	test   edi,edi
c002e5c0:	75 52                	jne    c002e614 <__moddi3+0x94>
c002e5c2:	89 c3                	mov    ebx,eax
c002e5c4:	39 f0                	cmp    eax,esi
c002e5c6:	76 24                	jbe    c002e5ec <__moddi3+0x6c>
c002e5c8:	89 c8                	mov    eax,ecx
c002e5ca:	89 f2                	mov    edx,esi
c002e5cc:	f7 f3                	div    ebx
c002e5ce:	89 d6                	mov    esi,edx
c002e5d0:	89 f0                	mov    eax,esi
c002e5d2:	31 d2                	xor    edx,edx
c002e5d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e5d8:	85 c9                	test   ecx,ecx
c002e5da:	74 07                	je     c002e5e3 <__moddi3+0x63>
c002e5dc:	f7 d8                	neg    eax
c002e5de:	83 d2 00             	adc    edx,0x0
c002e5e1:	f7 da                	neg    edx
c002e5e3:	83 c4 2c             	add    esp,0x2c
c002e5e6:	5b                   	pop    ebx
c002e5e7:	5e                   	pop    esi
c002e5e8:	5f                   	pop    edi
c002e5e9:	5d                   	pop    ebp
c002e5ea:	c3                   	ret    
c002e5eb:	90                   	nop
c002e5ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e5f0:	85 db                	test   ebx,ebx
c002e5f2:	75 0d                	jne    c002e601 <__moddi3+0x81>
c002e5f4:	b8 01 00 00 00       	mov    eax,0x1
c002e5f9:	31 d2                	xor    edx,edx
c002e5fb:	f7 f7                	div    edi
c002e5fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e601:	89 f0                	mov    eax,esi
c002e603:	31 d2                	xor    edx,edx
c002e605:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e609:	f7 f7                	div    edi
c002e60b:	89 e8                	mov    eax,ebp
c002e60d:	f7 f7                	div    edi
c002e60f:	89 d6                	mov    esi,edx
c002e611:	eb bd                	jmp    c002e5d0 <__moddi3+0x50>
c002e613:	90                   	nop
c002e614:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e618:	39 f7                	cmp    edi,esi
c002e61a:	76 20                	jbe    c002e63c <__moddi3+0xbc>
c002e61c:	89 c8                	mov    eax,ecx
c002e61e:	89 f2                	mov    edx,esi
c002e620:	eb b2                	jmp    c002e5d4 <__moddi3+0x54>
c002e622:	66 90                	xchg   ax,ax
c002e624:	f7 d9                	neg    ecx
c002e626:	83 d3 00             	adc    ebx,0x0
c002e629:	f7 db                	neg    ebx
c002e62b:	89 de                	mov    esi,ebx
c002e62d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e635:	e9 6f ff ff ff       	jmp    c002e5a9 <__moddi3+0x29>
c002e63a:	66 90                	xchg   ax,ax
c002e63c:	0f bd c7             	bsr    eax,edi
c002e63f:	83 f0 1f             	xor    eax,0x1f
c002e642:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e646:	75 24                	jne    c002e66c <__moddi3+0xec>
c002e648:	39 f7                	cmp    edi,esi
c002e64a:	72 06                	jb     c002e652 <__moddi3+0xd2>
c002e64c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e650:	77 0c                	ja     c002e65e <__moddi3+0xde>
c002e652:	89 e9                	mov    ecx,ebp
c002e654:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e658:	19 fe                	sbb    esi,edi
c002e65a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e65e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e662:	89 f2                	mov    edx,esi
c002e664:	e9 6b ff ff ff       	jmp    c002e5d4 <__moddi3+0x54>
c002e669:	8d 76 00             	lea    esi,[esi+0x0]
c002e66c:	b8 20 00 00 00       	mov    eax,0x20
c002e671:	89 c2                	mov    edx,eax
c002e673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e677:	29 da                	sub    edx,ebx
c002e679:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e67d:	88 d9                	mov    cl,bl
c002e67f:	d3 e7                	shl    edi,cl
c002e681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e685:	88 d1                	mov    cl,dl
c002e687:	d3 e8                	shr    eax,cl
c002e689:	09 c7                	or     edi,eax
c002e68b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e68f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e693:	89 d8                	mov    eax,ebx
c002e695:	88 d9                	mov    cl,bl
c002e697:	d3 e7                	shl    edi,cl
c002e699:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e69d:	89 f3                	mov    ebx,esi
c002e69f:	88 d1                	mov    cl,dl
c002e6a1:	d3 eb                	shr    ebx,cl
c002e6a3:	89 c7                	mov    edi,eax
c002e6a5:	88 c1                	mov    cl,al
c002e6a7:	d3 e6                	shl    esi,cl
c002e6a9:	89 e8                	mov    eax,ebp
c002e6ab:	88 d1                	mov    cl,dl
c002e6ad:	d3 e8                	shr    eax,cl
c002e6af:	09 f0                	or     eax,esi
c002e6b1:	89 f9                	mov    ecx,edi
c002e6b3:	d3 e5                	shl    ebp,cl
c002e6b5:	89 da                	mov    edx,ebx
c002e6b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e6bb:	89 d3                	mov    ebx,edx
c002e6bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e6c1:	89 c6                	mov    esi,eax
c002e6c3:	89 d1                	mov    ecx,edx
c002e6c5:	39 d3                	cmp    ebx,edx
c002e6c7:	72 27                	jb     c002e6f0 <__moddi3+0x170>
c002e6c9:	74 21                	je     c002e6ec <__moddi3+0x16c>
c002e6cb:	29 f5                	sub    ebp,esi
c002e6cd:	19 cb                	sbb    ebx,ecx
c002e6cf:	89 de                	mov    esi,ebx
c002e6d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e6d5:	d3 e6                	shl    esi,cl
c002e6d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e6db:	89 f9                	mov    ecx,edi
c002e6dd:	d3 ed                	shr    ebp,cl
c002e6df:	09 ee                	or     esi,ebp
c002e6e1:	89 f0                	mov    eax,esi
c002e6e3:	d3 eb                	shr    ebx,cl
c002e6e5:	89 da                	mov    edx,ebx
c002e6e7:	e9 e8 fe ff ff       	jmp    c002e5d4 <__moddi3+0x54>
c002e6ec:	39 c5                	cmp    ebp,eax
c002e6ee:	73 db                	jae    c002e6cb <__moddi3+0x14b>
c002e6f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e6f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e6f8:	89 d1                	mov    ecx,edx
c002e6fa:	89 c6                	mov    esi,eax
c002e6fc:	eb cd                	jmp    c002e6cb <__moddi3+0x14b>
c002e6fe:	66 90                	xchg   ax,ax

c002e700 <__udivdi3>:
c002e700:	55                   	push   ebp
c002e701:	57                   	push   edi
c002e702:	56                   	push   esi
c002e703:	53                   	push   ebx
c002e704:	83 ec 1c             	sub    esp,0x1c
c002e707:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e70b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e70f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e713:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e717:	85 d2                	test   edx,edx
c002e719:	75 41                	jne    c002e75c <__udivdi3+0x5c>
c002e71b:	39 f7                	cmp    edi,esi
c002e71d:	76 15                	jbe    c002e734 <__udivdi3+0x34>
c002e71f:	89 e8                	mov    eax,ebp
c002e721:	89 f2                	mov    edx,esi
c002e723:	f7 f7                	div    edi
c002e725:	31 db                	xor    ebx,ebx
c002e727:	89 da                	mov    edx,ebx
c002e729:	83 c4 1c             	add    esp,0x1c
c002e72c:	5b                   	pop    ebx
c002e72d:	5e                   	pop    esi
c002e72e:	5f                   	pop    edi
c002e72f:	5d                   	pop    ebp
c002e730:	c3                   	ret    
c002e731:	8d 76 00             	lea    esi,[esi+0x0]
c002e734:	89 f9                	mov    ecx,edi
c002e736:	85 ff                	test   edi,edi
c002e738:	75 0b                	jne    c002e745 <__udivdi3+0x45>
c002e73a:	b8 01 00 00 00       	mov    eax,0x1
c002e73f:	31 d2                	xor    edx,edx
c002e741:	f7 f7                	div    edi
c002e743:	89 c1                	mov    ecx,eax
c002e745:	31 d2                	xor    edx,edx
c002e747:	89 f0                	mov    eax,esi
c002e749:	f7 f1                	div    ecx
c002e74b:	89 c3                	mov    ebx,eax
c002e74d:	89 e8                	mov    eax,ebp
c002e74f:	f7 f1                	div    ecx
c002e751:	89 da                	mov    edx,ebx
c002e753:	83 c4 1c             	add    esp,0x1c
c002e756:	5b                   	pop    ebx
c002e757:	5e                   	pop    esi
c002e758:	5f                   	pop    edi
c002e759:	5d                   	pop    ebp
c002e75a:	c3                   	ret    
c002e75b:	90                   	nop
c002e75c:	39 f2                	cmp    edx,esi
c002e75e:	77 1c                	ja     c002e77c <__udivdi3+0x7c>
c002e760:	0f bd da             	bsr    ebx,edx
c002e763:	83 f3 1f             	xor    ebx,0x1f
c002e766:	75 24                	jne    c002e78c <__udivdi3+0x8c>
c002e768:	39 f2                	cmp    edx,esi
c002e76a:	72 08                	jb     c002e774 <__udivdi3+0x74>
c002e76c:	39 ef                	cmp    edi,ebp
c002e76e:	0f 87 84 00 00 00    	ja     c002e7f8 <__udivdi3+0xf8>
c002e774:	b8 01 00 00 00       	mov    eax,0x1
c002e779:	eb ac                	jmp    c002e727 <__udivdi3+0x27>
c002e77b:	90                   	nop
c002e77c:	31 db                	xor    ebx,ebx
c002e77e:	31 c0                	xor    eax,eax
c002e780:	89 da                	mov    edx,ebx
c002e782:	83 c4 1c             	add    esp,0x1c
c002e785:	5b                   	pop    ebx
c002e786:	5e                   	pop    esi
c002e787:	5f                   	pop    edi
c002e788:	5d                   	pop    ebp
c002e789:	c3                   	ret    
c002e78a:	66 90                	xchg   ax,ax
c002e78c:	b8 20 00 00 00       	mov    eax,0x20
c002e791:	29 d8                	sub    eax,ebx
c002e793:	88 d9                	mov    cl,bl
c002e795:	d3 e2                	shl    edx,cl
c002e797:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e79b:	89 fa                	mov    edx,edi
c002e79d:	88 c1                	mov    cl,al
c002e79f:	d3 ea                	shr    edx,cl
c002e7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e7a5:	09 d1                	or     ecx,edx
c002e7a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e7ab:	88 d9                	mov    cl,bl
c002e7ad:	d3 e7                	shl    edi,cl
c002e7af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e7b3:	89 f7                	mov    edi,esi
c002e7b5:	88 c1                	mov    cl,al
c002e7b7:	d3 ef                	shr    edi,cl
c002e7b9:	88 d9                	mov    cl,bl
c002e7bb:	d3 e6                	shl    esi,cl
c002e7bd:	89 ea                	mov    edx,ebp
c002e7bf:	88 c1                	mov    cl,al
c002e7c1:	d3 ea                	shr    edx,cl
c002e7c3:	09 d6                	or     esi,edx
c002e7c5:	89 f0                	mov    eax,esi
c002e7c7:	89 fa                	mov    edx,edi
c002e7c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e7cd:	89 d7                	mov    edi,edx
c002e7cf:	89 c6                	mov    esi,eax
c002e7d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e7d5:	39 d7                	cmp    edi,edx
c002e7d7:	72 13                	jb     c002e7ec <__udivdi3+0xec>
c002e7d9:	74 09                	je     c002e7e4 <__udivdi3+0xe4>
c002e7db:	89 f0                	mov    eax,esi
c002e7dd:	31 db                	xor    ebx,ebx
c002e7df:	e9 43 ff ff ff       	jmp    c002e727 <__udivdi3+0x27>
c002e7e4:	88 d9                	mov    cl,bl
c002e7e6:	d3 e5                	shl    ebp,cl
c002e7e8:	39 c5                	cmp    ebp,eax
c002e7ea:	73 ef                	jae    c002e7db <__udivdi3+0xdb>
c002e7ec:	8d 46 ff             	lea    eax,[esi-0x1]
c002e7ef:	31 db                	xor    ebx,ebx
c002e7f1:	e9 31 ff ff ff       	jmp    c002e727 <__udivdi3+0x27>
c002e7f6:	66 90                	xchg   ax,ax
c002e7f8:	31 c0                	xor    eax,eax
c002e7fa:	e9 28 ff ff ff       	jmp    c002e727 <__udivdi3+0x27>
c002e7ff:	90                   	nop

c002e800 <__umoddi3>:
c002e800:	55                   	push   ebp
c002e801:	57                   	push   edi
c002e802:	56                   	push   esi
c002e803:	53                   	push   ebx
c002e804:	83 ec 1c             	sub    esp,0x1c
c002e807:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e80b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e80f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e817:	89 da                	mov    edx,ebx
c002e819:	85 c0                	test   eax,eax
c002e81b:	75 37                	jne    c002e854 <__umoddi3+0x54>
c002e81d:	39 df                	cmp    edi,ebx
c002e81f:	76 13                	jbe    c002e834 <__umoddi3+0x34>
c002e821:	89 f0                	mov    eax,esi
c002e823:	f7 f7                	div    edi
c002e825:	89 d0                	mov    eax,edx
c002e827:	31 d2                	xor    edx,edx
c002e829:	83 c4 1c             	add    esp,0x1c
c002e82c:	5b                   	pop    ebx
c002e82d:	5e                   	pop    esi
c002e82e:	5f                   	pop    edi
c002e82f:	5d                   	pop    ebp
c002e830:	c3                   	ret    
c002e831:	8d 76 00             	lea    esi,[esi+0x0]
c002e834:	89 fd                	mov    ebp,edi
c002e836:	85 ff                	test   edi,edi
c002e838:	75 0b                	jne    c002e845 <__umoddi3+0x45>
c002e83a:	b8 01 00 00 00       	mov    eax,0x1
c002e83f:	31 d2                	xor    edx,edx
c002e841:	f7 f7                	div    edi
c002e843:	89 c5                	mov    ebp,eax
c002e845:	89 d8                	mov    eax,ebx
c002e847:	31 d2                	xor    edx,edx
c002e849:	f7 f5                	div    ebp
c002e84b:	89 f0                	mov    eax,esi
c002e84d:	f7 f5                	div    ebp
c002e84f:	89 d0                	mov    eax,edx
c002e851:	eb d4                	jmp    c002e827 <__umoddi3+0x27>
c002e853:	90                   	nop
c002e854:	89 f1                	mov    ecx,esi
c002e856:	39 d8                	cmp    eax,ebx
c002e858:	76 0a                	jbe    c002e864 <__umoddi3+0x64>
c002e85a:	89 f0                	mov    eax,esi
c002e85c:	83 c4 1c             	add    esp,0x1c
c002e85f:	5b                   	pop    ebx
c002e860:	5e                   	pop    esi
c002e861:	5f                   	pop    edi
c002e862:	5d                   	pop    ebp
c002e863:	c3                   	ret    
c002e864:	0f bd e8             	bsr    ebp,eax
c002e867:	83 f5 1f             	xor    ebp,0x1f
c002e86a:	75 1c                	jne    c002e888 <__umoddi3+0x88>
c002e86c:	39 d8                	cmp    eax,ebx
c002e86e:	72 04                	jb     c002e874 <__umoddi3+0x74>
c002e870:	39 f7                	cmp    edi,esi
c002e872:	77 08                	ja     c002e87c <__umoddi3+0x7c>
c002e874:	89 da                	mov    edx,ebx
c002e876:	29 fe                	sub    esi,edi
c002e878:	19 c2                	sbb    edx,eax
c002e87a:	89 f1                	mov    ecx,esi
c002e87c:	89 c8                	mov    eax,ecx
c002e87e:	83 c4 1c             	add    esp,0x1c
c002e881:	5b                   	pop    ebx
c002e882:	5e                   	pop    esi
c002e883:	5f                   	pop    edi
c002e884:	5d                   	pop    ebp
c002e885:	c3                   	ret    
c002e886:	66 90                	xchg   ax,ax
c002e888:	ba 20 00 00 00       	mov    edx,0x20
c002e88d:	29 ea                	sub    edx,ebp
c002e88f:	89 e9                	mov    ecx,ebp
c002e891:	d3 e0                	shl    eax,cl
c002e893:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e897:	89 f8                	mov    eax,edi
c002e899:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e89d:	88 d1                	mov    cl,dl
c002e89f:	d3 e8                	shr    eax,cl
c002e8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e8a5:	09 c1                	or     ecx,eax
c002e8a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e8ab:	89 e9                	mov    ecx,ebp
c002e8ad:	d3 e7                	shl    edi,cl
c002e8af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e8b3:	89 d8                	mov    eax,ebx
c002e8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e8b9:	88 d1                	mov    cl,dl
c002e8bb:	d3 e8                	shr    eax,cl
c002e8bd:	89 c7                	mov    edi,eax
c002e8bf:	89 e9                	mov    ecx,ebp
c002e8c1:	d3 e3                	shl    ebx,cl
c002e8c3:	89 f0                	mov    eax,esi
c002e8c5:	88 d1                	mov    cl,dl
c002e8c7:	d3 e8                	shr    eax,cl
c002e8c9:	09 d8                	or     eax,ebx
c002e8cb:	89 e9                	mov    ecx,ebp
c002e8cd:	d3 e6                	shl    esi,cl
c002e8cf:	89 f3                	mov    ebx,esi
c002e8d1:	89 fa                	mov    edx,edi
c002e8d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e8d7:	89 d1                	mov    ecx,edx
c002e8d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e8dd:	89 c6                	mov    esi,eax
c002e8df:	89 d7                	mov    edi,edx
c002e8e1:	39 d1                	cmp    ecx,edx
c002e8e3:	72 27                	jb     c002e90c <__umoddi3+0x10c>
c002e8e5:	74 21                	je     c002e908 <__umoddi3+0x108>
c002e8e7:	89 ca                	mov    edx,ecx
c002e8e9:	29 f3                	sub    ebx,esi
c002e8eb:	19 fa                	sbb    edx,edi
c002e8ed:	89 d0                	mov    eax,edx
c002e8ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e8f3:	d3 e0                	shl    eax,cl
c002e8f5:	89 e9                	mov    ecx,ebp
c002e8f7:	d3 eb                	shr    ebx,cl
c002e8f9:	09 d8                	or     eax,ebx
c002e8fb:	d3 ea                	shr    edx,cl
c002e8fd:	83 c4 1c             	add    esp,0x1c
c002e900:	5b                   	pop    ebx
c002e901:	5e                   	pop    esi
c002e902:	5f                   	pop    edi
c002e903:	5d                   	pop    ebp
c002e904:	c3                   	ret    
c002e905:	8d 76 00             	lea    esi,[esi+0x0]
c002e908:	39 c3                	cmp    ebx,eax
c002e90a:	73 db                	jae    c002e8e7 <__umoddi3+0xe7>
c002e90c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e910:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e914:	89 d7                	mov    edi,edx
c002e916:	89 c6                	mov    esi,eax
c002e918:	eb cd                	jmp    c002e8e7 <__umoddi3+0xe7>

Disassembly of section .init:

c002e91a <_init>:
c002e91a:	55                   	push   ebp
c002e91b:	89 e5                	mov    ebp,esp
c002e91d:	e8 d2 17 fd ff       	call   c00000f4 <frame_dummy>
c002e922:	e8 e5 fa ff ff       	call   c002e40c <__do_global_ctors_aux>
c002e927:	5d                   	pop    ebp
c002e928:	c3                   	ret    

Disassembly of section .fini:

c002e929 <_fini>:
c002e929:	55                   	push   ebp
c002e92a:	89 e5                	mov    ebp,esp
c002e92c:	e8 53 17 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e931:	5d                   	pop    ebp
c002e932:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e934 <Computer::~Computer()>:
c002e934:	83 ec 0c             	sub    esp,0xc
c002e937:	ba 64 11 03 c0       	mov    edx,0xc0031164
c002e93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e940:	89 10                	mov    DWORD PTR [eax],edx
c002e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e946:	83 ec 0c             	sub    esp,0xc
c002e949:	50                   	push   eax
c002e94a:	e8 17 c9 fe ff       	call   c001b266 <Device::~Device()>
c002e94f:	83 c4 10             	add    esp,0x10
c002e952:	90                   	nop
c002e953:	83 c4 0c             	add    esp,0xc
c002e956:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e958 <Computer::~Computer()>:
c002e958:	83 ec 0c             	sub    esp,0xc
c002e95b:	83 ec 0c             	sub    esp,0xc
c002e95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e962:	e8 cd ff ff ff       	call   c002e934 <Computer::~Computer()>
c002e967:	83 c4 10             	add    esp,0x10
c002e96a:	83 ec 08             	sub    esp,0x8
c002e96d:	68 70 01 00 00       	push   0x170
c002e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e976:	e8 55 a8 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002e97b:	83 c4 10             	add    esp,0x10
c002e97e:	83 c4 0c             	add    esp,0xc
c002e981:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e982 <idleCommon()>:
c002e982:	83 ec 0c             	sub    esp,0xc
c002e985:	fa                   	cli    
c002e986:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e98c:	e8 0b 69 ff ff       	call   c002529c <schedule()>
c002e991:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e996:	48                   	dec    eax
c002e997:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e99c:	75 01                	jne    c002e99f <idleCommon()+0x1d>
c002e99e:	fb                   	sti    
c002e99f:	83 c4 0c             	add    esp,0xc
c002e9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e9a4 <LinkedList<UnixFile>::~LinkedList()>:
c002e9a4:	90                   	nop
c002e9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e9a6 <LinkedList<UnixFile>::LinkedList()>:
c002e9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9e6:	90                   	nop
c002e9e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e9e8:	83 ec 0c             	sub    esp,0xc
c002e9eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e9f0:	75 10                	jne    c002ea02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e9f2:	83 ec 0c             	sub    esp,0xc
c002e9f5:	68 78 13 03 c0       	push   0xc0031378
c002e9fa:	e8 57 18 ff ff       	call   c0020256 <KePanic(char const*)>
c002e9ff:	83 c4 10             	add    esp,0x10
c002ea02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea06:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea08:	85 c0                	test   eax,eax
c002ea0a:	74 34                	je     c002ea40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea13:	85 c0                	test   eax,eax
c002ea15:	74 29                	je     c002ea40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ea3e:	eb 65                	jmp    c002eaa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea46:	85 c0                	test   eax,eax
c002ea48:	75 4b                	jne    c002ea95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea51:	85 c0                	test   eax,eax
c002ea53:	75 40                	jne    c002ea95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ea55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea5d:	89 10                	mov    DWORD PTR [eax],edx
c002ea5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ea78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea7f:	85 c0                	test   eax,eax
c002ea81:	74 22                	je     c002eaa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea83:	83 ec 0c             	sub    esp,0xc
c002ea86:	68 9a 13 03 c0       	push   0xc003139a
c002ea8b:	e8 c6 17 ff ff       	call   c0020256 <KePanic(char const*)>
c002ea90:	83 c4 10             	add    esp,0x10
c002ea93:	eb 10                	jmp    c002eaa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea95:	83 ec 0c             	sub    esp,0xc
c002ea98:	68 a4 13 03 c0       	push   0xc00313a4
c002ea9d:	e8 b4 17 ff ff       	call   c0020256 <KePanic(char const*)>
c002eaa2:	83 c4 10             	add    esp,0x10
c002eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaac:	8d 50 01             	lea    edx,[eax+0x1]
c002eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eab6:	90                   	nop
c002eab7:	83 c4 0c             	add    esp,0xc
c002eaba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002eabc <LinkedList<UnixFile>::getFirstElement()>:
c002eabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002eac4 <LinkedList<UnixFile>::removeFirst()>:
c002eac4:	83 ec 0c             	sub    esp,0xc
c002eac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eacb:	8b 00                	mov    eax,DWORD PTR [eax]
c002eacd:	85 c0                	test   eax,eax
c002eacf:	75 12                	jne    c002eae3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ead1:	83 ec 0c             	sub    esp,0xc
c002ead4:	68 b0 13 03 c0       	push   0xc00313b0
c002ead9:	e8 78 17 ff ff       	call   c0020256 <KePanic(char const*)>
c002eade:	83 c4 10             	add    esp,0x10
c002eae1:	eb 7e                	jmp    c002eb61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaed:	85 c0                	test   eax,eax
c002eaef:	74 10                	je     c002eb01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002eaf1:	83 ec 0c             	sub    esp,0xc
c002eaf4:	68 fb 13 03 c0       	push   0xc00313fb
c002eaf9:	e8 58 17 ff ff       	call   c0020256 <KePanic(char const*)>
c002eafe:	83 c4 10             	add    esp,0x10
c002eb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb05:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb0a:	85 c0                	test   eax,eax
c002eb0c:	75 33                	jne    c002eb41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb2a:	83 f8 01             	cmp    eax,0x1
c002eb2d:	74 21                	je     c002eb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eb2f:	83 ec 0c             	sub    esp,0xc
c002eb32:	68 d4 13 03 c0       	push   0xc00313d4
c002eb37:	e8 1a 17 ff ff       	call   c0020256 <KePanic(char const*)>
c002eb3c:	83 c4 10             	add    esp,0x10
c002eb3f:	eb 0f                	jmp    c002eb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb45:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002eb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb4e:	89 10                	mov    DWORD PTR [eax],edx
c002eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb57:	8d 50 ff             	lea    edx,[eax-0x1]
c002eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb61:	83 c4 0c             	add    esp,0xc
c002eb64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002eb66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002eb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eb6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002eb6e <DriverlessDevice::~DriverlessDevice()>:
c002eb6e:	ba 28 20 03 c0       	mov    edx,0xc0032028
c002eb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb77:	89 10                	mov    DWORD PTR [eax],edx
c002eb79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb7d:	50                   	push   eax
c002eb7e:	e8 e3 c6 fe ff       	call   c001b266 <Device::~Device()>
c002eb83:	83 c4 04             	add    esp,0x4
c002eb86:	90                   	nop
c002eb87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002eb88 <DriverlessDevice::~DriverlessDevice()>:
c002eb88:	83 ec 0c             	sub    esp,0xc
c002eb8b:	83 ec 0c             	sub    esp,0xc
c002eb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb92:	e8 d7 ff ff ff       	call   c002eb6e <DriverlessDevice::~DriverlessDevice()>
c002eb97:	83 c4 10             	add    esp,0x10
c002eb9a:	83 ec 08             	sub    esp,0x8
c002eb9d:	68 58 01 00 00       	push   0x158
c002eba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eba6:	e8 25 a6 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002ebab:	83 c4 10             	add    esp,0x10
c002ebae:	83 c4 0c             	add    esp,0xc
c002ebb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ebb2 <LinkedList<Device>::addElement(Device*)>:
c002ebb2:	83 ec 0c             	sub    esp,0xc
c002ebb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ebba:	75 10                	jne    c002ebcc <LinkedList<Device>::addElement(Device*)+0x1a>
c002ebbc:	83 ec 0c             	sub    esp,0xc
c002ebbf:	68 78 13 03 c0       	push   0xc0031378
c002ebc4:	e8 8d 16 ff ff       	call   c0020256 <KePanic(char const*)>
c002ebc9:	83 c4 10             	add    esp,0x10
c002ebcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebd2:	85 c0                	test   eax,eax
c002ebd4:	74 3a                	je     c002ec10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ebd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebdd:	85 c0                	test   eax,eax
c002ebdf:	74 2f                	je     c002ec10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ebe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ebfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ec0e:	eb 68                	jmp    c002ec78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec16:	85 c0                	test   eax,eax
c002ec18:	75 4e                	jne    c002ec68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ec1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec21:	85 c0                	test   eax,eax
c002ec23:	75 43                	jne    c002ec68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec2d:	89 10                	mov    DWORD PTR [eax],edx
c002ec2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ec4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec52:	85 c0                	test   eax,eax
c002ec54:	74 22                	je     c002ec78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec56:	83 ec 0c             	sub    esp,0xc
c002ec59:	68 9a 13 03 c0       	push   0xc003139a
c002ec5e:	e8 f3 15 ff ff       	call   c0020256 <KePanic(char const*)>
c002ec63:	83 c4 10             	add    esp,0x10
c002ec66:	eb 10                	jmp    c002ec78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec68:	83 ec 0c             	sub    esp,0xc
c002ec6b:	68 a4 13 03 c0       	push   0xc00313a4
c002ec70:	e8 e1 15 ff ff       	call   c0020256 <KePanic(char const*)>
c002ec75:	83 c4 10             	add    esp,0x10
c002ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec7f:	8d 50 01             	lea    edx,[eax+0x1]
c002ec82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec89:	90                   	nop
c002ec8a:	83 c4 0c             	add    esp,0xc
c002ec8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ec8e <LinkedList<Device>::LinkedList()>:
c002ec8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ecae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ecce:	90                   	nop
c002eccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ecd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ecd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecd6:	85 c0                	test   eax,eax
c002ecd8:	75 0e                	jne    c002ece8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ecda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ece1:	85 c0                	test   eax,eax
c002ece3:	75 03                	jne    c002ece8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ece5:	b0 01                	mov    al,0x1
c002ece7:	c3                   	ret    
c002ece8:	b0 00                	mov    al,0x0
c002ecea:	90                   	nop
c002eceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ecec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecf0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ecf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ecf4:	83 ec 0c             	sub    esp,0xc
c002ecf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfb:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecfd:	85 c0                	test   eax,eax
c002ecff:	75 17                	jne    c002ed18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ed01:	83 ec 0c             	sub    esp,0xc
c002ed04:	68 b0 13 03 c0       	push   0xc00313b0
c002ed09:	e8 48 15 ff ff       	call   c0020256 <KePanic(char const*)>
c002ed0e:	83 c4 10             	add    esp,0x10
c002ed11:	e9 96 00 00 00       	jmp    c002edac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ed16:	66 90                	xchg   ax,ax
c002ed18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ed22:	85 c0                	test   eax,eax
c002ed24:	0f 95 c0             	setne  al
c002ed27:	0f b6 c0             	movzx  eax,al
c002ed2a:	85 c0                	test   eax,eax
c002ed2c:	74 12                	je     c002ed40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ed2e:	83 ec 0c             	sub    esp,0xc
c002ed31:	68 fb 13 03 c0       	push   0xc00313fb
c002ed36:	e8 1b 15 ff ff       	call   c0020256 <KePanic(char const*)>
c002ed3b:	83 c4 10             	add    esp,0x10
c002ed3e:	66 90                	xchg   ax,ax
c002ed40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ed49:	85 c0                	test   eax,eax
c002ed4b:	0f 94 c0             	sete   al
c002ed4e:	0f b6 c0             	movzx  eax,al
c002ed51:	85 c0                	test   eax,eax
c002ed53:	74 33                	je     c002ed88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ed55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed71:	83 f8 01             	cmp    eax,0x1
c002ed74:	74 22                	je     c002ed98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ed76:	83 ec 0c             	sub    esp,0xc
c002ed79:	68 d4 13 03 c0       	push   0xc00313d4
c002ed7e:	e8 d3 14 ff ff       	call   c0020256 <KePanic(char const*)>
c002ed83:	83 c4 10             	add    esp,0x10
c002ed86:	eb 10                	jmp    c002ed98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed95:	89 10                	mov    DWORD PTR [eax],edx
c002ed97:	90                   	nop
c002ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed9f:	8d 50 ff             	lea    edx,[eax-0x1]
c002eda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eda9:	8d 76 00             	lea    esi,[esi+0x0]
c002edac:	83 c4 0c             	add    esp,0xc
c002edaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002edb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002edb0:	83 ec 0c             	sub    esp,0xc
c002edb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002edb8:	75 12                	jne    c002edcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002edba:	83 ec 0c             	sub    esp,0xc
c002edbd:	68 78 13 03 c0       	push   0xc0031378
c002edc2:	e8 8f 14 ff ff       	call   c0020256 <KePanic(char const*)>
c002edc7:	83 c4 10             	add    esp,0x10
c002edca:	66 90                	xchg   ax,ax
c002edcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002edd2:	85 c0                	test   eax,eax
c002edd4:	74 36                	je     c002ee0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002edd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eddd:	85 c0                	test   eax,eax
c002eddf:	74 2b                	je     c002ee0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ede1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ede8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002edef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ee08:	eb 6a                	jmp    c002ee74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee0a:	66 90                	xchg   ax,ax
c002ee0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee10:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee12:	85 c0                	test   eax,eax
c002ee14:	75 4e                	jne    c002ee64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ee16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee1d:	85 c0                	test   eax,eax
c002ee1f:	75 43                	jne    c002ee64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ee21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee29:	89 10                	mov    DWORD PTR [eax],edx
c002ee2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ee36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ee44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee4b:	85 c0                	test   eax,eax
c002ee4d:	74 25                	je     c002ee74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee4f:	83 ec 0c             	sub    esp,0xc
c002ee52:	68 9a 13 03 c0       	push   0xc003139a
c002ee57:	e8 fa 13 ff ff       	call   c0020256 <KePanic(char const*)>
c002ee5c:	83 c4 10             	add    esp,0x10
c002ee5f:	eb 13                	jmp    c002ee74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee61:	8d 76 00             	lea    esi,[esi+0x0]
c002ee64:	83 ec 0c             	sub    esp,0xc
c002ee67:	68 a4 13 03 c0       	push   0xc00313a4
c002ee6c:	e8 e5 13 ff ff       	call   c0020256 <KePanic(char const*)>
c002ee71:	83 c4 10             	add    esp,0x10
c002ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee7b:	8d 50 01             	lea    edx,[eax+0x1]
c002ee7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee85:	90                   	nop
c002ee86:	83 c4 0c             	add    esp,0xc
c002ee89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ee8c <ACPI::~ACPI()>:
c002ee8c:	83 ec 0c             	sub    esp,0xc
c002ee8f:	ba e0 26 03 c0       	mov    edx,0xc00326e0
c002ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee98:	89 10                	mov    DWORD PTR [eax],edx
c002ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee9e:	83 ec 0c             	sub    esp,0xc
c002eea1:	50                   	push   eax
c002eea2:	e8 bf c3 fe ff       	call   c001b266 <Device::~Device()>
c002eea7:	83 c4 10             	add    esp,0x10
c002eeaa:	90                   	nop
c002eeab:	83 c4 0c             	add    esp,0xc
c002eeae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002eeb0 <ACPI::~ACPI()>:
c002eeb0:	83 ec 0c             	sub    esp,0xc
c002eeb3:	83 ec 0c             	sub    esp,0xc
c002eeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeba:	e8 cd ff ff ff       	call   c002ee8c <ACPI::~ACPI()>
c002eebf:	83 c4 10             	add    esp,0x10
c002eec2:	83 ec 08             	sub    esp,0x8
c002eec5:	68 64 12 00 00       	push   0x1264
c002eeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eece:	e8 fd a2 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002eed3:	83 c4 10             	add    esp,0x10
c002eed6:	83 c4 0c             	add    esp,0xc
c002eed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002eedc <LinkedList<Device>::~LinkedList()>:
c002eedc:	90                   	nop
c002eedd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002eee0 <LinkedList<Device>::isEmpty()>:
c002eee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eee4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eee6:	85 c0                	test   eax,eax
c002eee8:	75 0e                	jne    c002eef8 <LinkedList<Device>::isEmpty()+0x18>
c002eeea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eeee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eef1:	85 c0                	test   eax,eax
c002eef3:	75 03                	jne    c002eef8 <LinkedList<Device>::isEmpty()+0x18>
c002eef5:	b0 01                	mov    al,0x1
c002eef7:	c3                   	ret    
c002eef8:	b0 00                	mov    al,0x0
c002eefa:	90                   	nop
c002eefb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002eefc <LinkedList<Device>::getFirstElement()>:
c002eefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef00:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ef04 <LinkedList<Device>::removeFirst()>:
c002ef04:	83 ec 0c             	sub    esp,0xc
c002ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef0b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef0d:	85 c0                	test   eax,eax
c002ef0f:	75 17                	jne    c002ef28 <LinkedList<Device>::removeFirst()+0x24>
c002ef11:	83 ec 0c             	sub    esp,0xc
c002ef14:	68 b0 13 03 c0       	push   0xc00313b0
c002ef19:	e8 38 13 ff ff       	call   c0020256 <KePanic(char const*)>
c002ef1e:	83 c4 10             	add    esp,0x10
c002ef21:	e9 92 00 00 00       	jmp    c002efb8 <LinkedList<Device>::removeFirst()+0xb4>
c002ef26:	66 90                	xchg   ax,ax
c002ef28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ef35:	85 c0                	test   eax,eax
c002ef37:	74 13                	je     c002ef4c <LinkedList<Device>::removeFirst()+0x48>
c002ef39:	83 ec 0c             	sub    esp,0xc
c002ef3c:	68 fb 13 03 c0       	push   0xc00313fb
c002ef41:	e8 10 13 ff ff       	call   c0020256 <KePanic(char const*)>
c002ef46:	83 c4 10             	add    esp,0x10
c002ef49:	8d 76 00             	lea    esi,[esi+0x0]
c002ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ef58:	85 c0                	test   eax,eax
c002ef5a:	75 34                	jne    c002ef90 <LinkedList<Device>::removeFirst()+0x8c>
c002ef5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef78:	83 f8 01             	cmp    eax,0x1
c002ef7b:	74 27                	je     c002efa4 <LinkedList<Device>::removeFirst()+0xa0>
c002ef7d:	83 ec 0c             	sub    esp,0xc
c002ef80:	68 d4 13 03 c0       	push   0xc00313d4
c002ef85:	e8 cc 12 ff ff       	call   c0020256 <KePanic(char const*)>
c002ef8a:	83 c4 10             	add    esp,0x10
c002ef8d:	eb 15                	jmp    c002efa4 <LinkedList<Device>::removeFirst()+0xa0>
c002ef8f:	90                   	nop
c002ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef94:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002ef9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa0:	89 10                	mov    DWORD PTR [eax],edx
c002efa2:	66 90                	xchg   ax,ax
c002efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efab:	8d 50 ff             	lea    edx,[eax-0x1]
c002efae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002efb5:	8d 76 00             	lea    esi,[esi+0x0]
c002efb8:	83 c4 0c             	add    esp,0xc
c002efbb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002efbc <CPU::~CPU()>:
c002efbc:	83 ec 0c             	sub    esp,0xc
c002efbf:	ba 88 28 03 c0       	mov    edx,0xc0032888
c002efc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efc8:	89 10                	mov    DWORD PTR [eax],edx
c002efca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efce:	83 ec 0c             	sub    esp,0xc
c002efd1:	50                   	push   eax
c002efd2:	e8 8f c2 fe ff       	call   c001b266 <Device::~Device()>
c002efd7:	83 c4 10             	add    esp,0x10
c002efda:	90                   	nop
c002efdb:	83 c4 0c             	add    esp,0xc
c002efde:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002efe0 <CPU::~CPU()>:
c002efe0:	83 ec 0c             	sub    esp,0xc
c002efe3:	83 ec 0c             	sub    esp,0xc
c002efe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efea:	e8 cd ff ff ff       	call   c002efbc <CPU::~CPU()>
c002efef:	83 c4 10             	add    esp,0x10
c002eff2:	83 ec 08             	sub    esp,0x8
c002eff5:	68 94 11 00 00       	push   0x1194
c002effa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002effe:	e8 cd a1 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f003:	83 c4 10             	add    esp,0x10
c002f006:	83 c4 0c             	add    esp,0xc
c002f009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f00c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f010:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f014 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f014:	90                   	nop
c002f015:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f018 <ThreadControlBlock::ThreadControlBlock()>:
c002f018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f01c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f027:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f032:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f03d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f048:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f04f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f053:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f05b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f05f:	90                   	nop
c002f060:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f068:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f07d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f09d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f0a4:	90                   	nop
c002f0a5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f0a6 <PCI::~PCI()>:
c002f0a6:	83 ec 0c             	sub    esp,0xc
c002f0a9:	ba a8 37 03 c0       	mov    edx,0xc00337a8
c002f0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b2:	89 10                	mov    DWORD PTR [eax],edx
c002f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b8:	83 ec 0c             	sub    esp,0xc
c002f0bb:	50                   	push   eax
c002f0bc:	e8 37 bc fe ff       	call   c001acf8 <Bus::~Bus()>
c002f0c1:	83 c4 10             	add    esp,0x10
c002f0c4:	90                   	nop
c002f0c5:	83 c4 0c             	add    esp,0xc
c002f0c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f0ca <PCI::~PCI()>:
c002f0ca:	83 ec 0c             	sub    esp,0xc
c002f0cd:	83 ec 0c             	sub    esp,0xc
c002f0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0d4:	e8 cd ff ff ff       	call   c002f0a6 <PCI::~PCI()>
c002f0d9:	83 c4 10             	add    esp,0x10
c002f0dc:	83 ec 08             	sub    esp,0x8
c002f0df:	68 5c 01 00 00       	push   0x15c
c002f0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0e8:	e8 e3 a0 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f0ed:	83 c4 10             	add    esp,0x10
c002f0f0:	83 c4 0c             	add    esp,0xc
c002f0f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f0f4 <IDE::~IDE()>:
c002f0f4:	83 ec 0c             	sub    esp,0xc
c002f0f7:	ba 5c 38 03 c0       	mov    edx,0xc003385c
c002f0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f100:	89 10                	mov    DWORD PTR [eax],edx
c002f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f106:	83 ec 0c             	sub    esp,0xc
c002f109:	50                   	push   eax
c002f10a:	e8 e5 c5 fe ff       	call   c001b6f4 <HardDiskController::~HardDiskController()>
c002f10f:	83 c4 10             	add    esp,0x10
c002f112:	90                   	nop
c002f113:	83 c4 0c             	add    esp,0xc
c002f116:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f118 <IDE::~IDE()>:
c002f118:	83 ec 0c             	sub    esp,0xc
c002f11b:	83 ec 0c             	sub    esp,0xc
c002f11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f122:	e8 cd ff ff ff       	call   c002f0f4 <IDE::~IDE()>
c002f127:	83 c4 10             	add    esp,0x10
c002f12a:	83 ec 08             	sub    esp,0x8
c002f12d:	68 70 02 00 00       	push   0x270
c002f132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f136:	e8 95 a0 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f13b:	83 c4 10             	add    esp,0x10
c002f13e:	83 c4 0c             	add    esp,0xc
c002f141:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f142 <SATABus::~SATABus()>:
c002f142:	83 ec 0c             	sub    esp,0xc
c002f145:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c002f14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f14e:	89 10                	mov    DWORD PTR [eax],edx
c002f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f154:	83 ec 0c             	sub    esp,0xc
c002f157:	50                   	push   eax
c002f158:	e8 97 c5 fe ff       	call   c001b6f4 <HardDiskController::~HardDiskController()>
c002f15d:	83 c4 10             	add    esp,0x10
c002f160:	90                   	nop
c002f161:	83 c4 0c             	add    esp,0xc
c002f164:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f166 <SATABus::~SATABus()>:
c002f166:	83 ec 0c             	sub    esp,0xc
c002f169:	83 ec 0c             	sub    esp,0xc
c002f16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f170:	e8 cd ff ff ff       	call   c002f142 <SATABus::~SATABus()>
c002f175:	83 c4 10             	add    esp,0x10
c002f178:	83 ec 08             	sub    esp,0x8
c002f17b:	68 64 01 00 00       	push   0x164
c002f180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f184:	e8 47 a0 fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f189:	83 c4 10             	add    esp,0x10
c002f18c:	83 c4 0c             	add    esp,0xc
c002f18f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f190 <ATA::~ATA()>:
c002f190:	83 ec 0c             	sub    esp,0xc
c002f193:	ba ec 38 03 c0       	mov    edx,0xc00338ec
c002f198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f19c:	89 10                	mov    DWORD PTR [eax],edx
c002f19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1a2:	83 ec 0c             	sub    esp,0xc
c002f1a5:	50                   	push   eax
c002f1a6:	e8 2b c6 fe ff       	call   c001b7d6 <PhysicalDisk::~PhysicalDisk()>
c002f1ab:	83 c4 10             	add    esp,0x10
c002f1ae:	90                   	nop
c002f1af:	83 c4 0c             	add    esp,0xc
c002f1b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f1b4 <ATA::~ATA()>:
c002f1b4:	83 ec 0c             	sub    esp,0xc
c002f1b7:	83 ec 0c             	sub    esp,0xc
c002f1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1be:	e8 cd ff ff ff       	call   c002f190 <ATA::~ATA()>
c002f1c3:	83 c4 10             	add    esp,0x10
c002f1c6:	83 ec 08             	sub    esp,0x8
c002f1c9:	68 7c 01 00 00       	push   0x17c
c002f1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1d2:	e8 f9 9f fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f1d7:	83 c4 10             	add    esp,0x10
c002f1da:	83 c4 0c             	add    esp,0xc
c002f1dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f1de <ATAPI::~ATAPI()>:
c002f1de:	83 ec 0c             	sub    esp,0xc
c002f1e1:	ba 34 39 03 c0       	mov    edx,0xc0033934
c002f1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ea:	89 10                	mov    DWORD PTR [eax],edx
c002f1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f0:	83 ec 0c             	sub    esp,0xc
c002f1f3:	50                   	push   eax
c002f1f4:	e8 dd c5 fe ff       	call   c001b7d6 <PhysicalDisk::~PhysicalDisk()>
c002f1f9:	83 c4 10             	add    esp,0x10
c002f1fc:	90                   	nop
c002f1fd:	83 c4 0c             	add    esp,0xc
c002f200:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f202 <ATAPI::~ATAPI()>:
c002f202:	83 ec 0c             	sub    esp,0xc
c002f205:	83 ec 0c             	sub    esp,0xc
c002f208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f20c:	e8 cd ff ff ff       	call   c002f1de <ATAPI::~ATAPI()>
c002f211:	83 c4 10             	add    esp,0x10
c002f214:	83 ec 08             	sub    esp,0x8
c002f217:	68 84 01 00 00       	push   0x184
c002f21c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f220:	e8 ab 9f fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f225:	83 c4 10             	add    esp,0x10
c002f228:	83 c4 0c             	add    esp,0xc
c002f22b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f22c <SATA::~SATA()>:
c002f22c:	83 ec 0c             	sub    esp,0xc
c002f22f:	ba f4 39 03 c0       	mov    edx,0xc00339f4
c002f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f238:	89 10                	mov    DWORD PTR [eax],edx
c002f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f23e:	83 ec 0c             	sub    esp,0xc
c002f241:	50                   	push   eax
c002f242:	e8 8f c5 fe ff       	call   c001b7d6 <PhysicalDisk::~PhysicalDisk()>
c002f247:	83 c4 10             	add    esp,0x10
c002f24a:	90                   	nop
c002f24b:	83 c4 0c             	add    esp,0xc
c002f24e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f250 <SATA::~SATA()>:
c002f250:	83 ec 0c             	sub    esp,0xc
c002f253:	83 ec 0c             	sub    esp,0xc
c002f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f25a:	e8 cd ff ff ff       	call   c002f22c <SATA::~SATA()>
c002f25f:	83 c4 10             	add    esp,0x10
c002f262:	83 ec 08             	sub    esp,0x8
c002f265:	68 7c 01 00 00       	push   0x17c
c002f26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f26e:	e8 5d 9f fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f273:	83 c4 10             	add    esp,0x10
c002f276:	83 c4 0c             	add    esp,0xc
c002f279:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f27a <SATAPI::~SATAPI()>:
c002f27a:	83 ec 0c             	sub    esp,0xc
c002f27d:	ba 18 3b 03 c0       	mov    edx,0xc0033b18
c002f282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f286:	89 10                	mov    DWORD PTR [eax],edx
c002f288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f28c:	83 ec 0c             	sub    esp,0xc
c002f28f:	50                   	push   eax
c002f290:	e8 41 c5 fe ff       	call   c001b7d6 <PhysicalDisk::~PhysicalDisk()>
c002f295:	83 c4 10             	add    esp,0x10
c002f298:	90                   	nop
c002f299:	83 c4 0c             	add    esp,0xc
c002f29c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f29e <SATAPI::~SATAPI()>:
c002f29e:	83 ec 0c             	sub    esp,0xc
c002f2a1:	83 ec 0c             	sub    esp,0xc
c002f2a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2a8:	e8 cd ff ff ff       	call   c002f27a <SATAPI::~SATAPI()>
c002f2ad:	83 c4 10             	add    esp,0x10
c002f2b0:	83 ec 08             	sub    esp,0x8
c002f2b3:	68 84 01 00 00       	push   0x184
c002f2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2bc:	e8 0f 9f fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f2c1:	83 c4 10             	add    esp,0x10
c002f2c4:	83 c4 0c             	add    esp,0xc
c002f2c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f2c8 <IOAPIC::~IOAPIC()>:
c002f2c8:	83 ec 0c             	sub    esp,0xc
c002f2cb:	ba 58 3b 03 c0       	mov    edx,0xc0033b58
c002f2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2d4:	89 10                	mov    DWORD PTR [eax],edx
c002f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2da:	83 ec 0c             	sub    esp,0xc
c002f2dd:	50                   	push   eax
c002f2de:	e8 83 bf fe ff       	call   c001b266 <Device::~Device()>
c002f2e3:	83 c4 10             	add    esp,0x10
c002f2e6:	90                   	nop
c002f2e7:	83 c4 0c             	add    esp,0xc
c002f2ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f2ec <IOAPIC::~IOAPIC()>:
c002f2ec:	83 ec 0c             	sub    esp,0xc
c002f2ef:	83 ec 0c             	sub    esp,0xc
c002f2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2f6:	e8 cd ff ff ff       	call   c002f2c8 <IOAPIC::~IOAPIC()>
c002f2fb:	83 c4 10             	add    esp,0x10
c002f2fe:	83 ec 08             	sub    esp,0x8
c002f301:	68 68 01 00 00       	push   0x168
c002f306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f30a:	e8 c1 9e fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f30f:	83 c4 10             	add    esp,0x10
c002f312:	83 c4 0c             	add    esp,0xc
c002f315:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f318 <APICTimer::~APICTimer()>:
c002f318:	83 ec 0c             	sub    esp,0xc
c002f31b:	ba a0 3b 03 c0       	mov    edx,0xc0033ba0
c002f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f324:	89 10                	mov    DWORD PTR [eax],edx
c002f326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f32a:	83 ec 0c             	sub    esp,0xc
c002f32d:	50                   	push   eax
c002f32e:	e8 15 da fe ff       	call   c001cd48 <Timer::~Timer()>
c002f333:	83 c4 10             	add    esp,0x10
c002f336:	90                   	nop
c002f337:	83 c4 0c             	add    esp,0xc
c002f33a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f33c <APICTimer::~APICTimer()>:
c002f33c:	83 ec 0c             	sub    esp,0xc
c002f33f:	83 ec 0c             	sub    esp,0xc
c002f342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f346:	e8 cd ff ff ff       	call   c002f318 <APICTimer::~APICTimer()>
c002f34b:	83 c4 10             	add    esp,0x10
c002f34e:	83 ec 08             	sub    esp,0x8
c002f351:	68 60 01 00 00       	push   0x160
c002f356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f35a:	e8 71 9e fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f35f:	83 c4 10             	add    esp,0x10
c002f362:	83 c4 0c             	add    esp,0xc
c002f365:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f368 <PIT::~PIT()>:
c002f368:	83 ec 0c             	sub    esp,0xc
c002f36b:	ba f0 3b 03 c0       	mov    edx,0xc0033bf0
c002f370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f374:	89 10                	mov    DWORD PTR [eax],edx
c002f376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f37a:	83 ec 0c             	sub    esp,0xc
c002f37d:	50                   	push   eax
c002f37e:	e8 c5 d9 fe ff       	call   c001cd48 <Timer::~Timer()>
c002f383:	83 c4 10             	add    esp,0x10
c002f386:	90                   	nop
c002f387:	83 c4 0c             	add    esp,0xc
c002f38a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f38c <PIT::~PIT()>:
c002f38c:	83 ec 0c             	sub    esp,0xc
c002f38f:	83 ec 0c             	sub    esp,0xc
c002f392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f396:	e8 cd ff ff ff       	call   c002f368 <PIT::~PIT()>
c002f39b:	83 c4 10             	add    esp,0x10
c002f39e:	83 ec 08             	sub    esp,0x8
c002f3a1:	68 5c 01 00 00       	push   0x15c
c002f3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3aa:	e8 21 9e fe ff       	call   c00191d0 <operator delete(void*, unsigned long)>
c002f3af:	83 c4 10             	add    esp,0x10
c002f3b2:	83 c4 0c             	add    esp,0xc
c002f3b5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be db 29 03 c0       	mov    esi,0xc00329db
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be f7 29 03 c0       	mov    esi,0xc00329f7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
