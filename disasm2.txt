
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 36 02 c0       	mov    eax,0xc0023644
c0000025:	3d 44 36 02 c0       	cmp    eax,0xc0023644
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 36 02 c0       	push   0xc0023644
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 36 02 c0       	mov    eax,0xc0023644
c0000051:	2d 44 36 02 c0       	sub    eax,0xc0023644
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 36 02 c0       	push   0xc0023644
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb dc fd 01 c0       	mov    ebx,0xc001fddc
c0000097:	81 eb d8 fd 01 c0    	sub    ebx,0xc001fdd8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d8 fd 01 c0       	mov    esi,0xc001fdd8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 36 02 c0       	push   0xc0023644
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 36 02 c0       	push   0xc0023644
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 4f 01 00       	call   c0015288 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 4f 01 00       	call   c0015288 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c6 54 01 00       	call   c00157b4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 61 5b 01 00       	call   c0015e58 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b9 0d 01 00       	jmp    c0011138 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 fd 01 c0 02 	test   BYTE PTR [edx-0x3ffe0220],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 fd 01 c0 01 	test   BYTE PTR [edx-0x3ffe0220],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 fd 01 c0 08 	test   BYTE PTR [edx-0x3ffe0220],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 fd 01 c0 08 	test   BYTE PTR [edx-0x3ffe0220],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 fd 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0220],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 fd 01 c0 01 	test   BYTE PTR [edx-0x3ffe0220],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 e4 fe 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe011c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 4a 76 01 00       	jmp    c0019424 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 74 76 01 00       	jmp    c0019464 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 95 76 01 00       	jmp    c00194a4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 40 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdffc0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 40 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffc0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 5c 26 02 c0       	mov    edx,0xc002265c
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba fc fe 01 c0       	mov    edx,0xc001fefc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 02 ff 01 c0       	mov    eax,0xc001ff02
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf c0 ff 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0040]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 0b ff 01 c0       	mov    eax,0xc001ff0b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 40 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdffc0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 80 ff 01 c0       	mov    ebx,0xc001ff80
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 70 ff 01 c0       	mov    eax,0xc001ff70
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 12 ff 01 c0       	mov    edx,0xc001ff12
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 1e ff 01 c0       	mov    edx,0xc001ff1e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 32 ff 01 c0       	mov    edx,0xc001ff32
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 60 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020360
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 60 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020360
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 60 01 02 c0       	mov    eax,0xc0020160
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 a0 00 02 c0       	mov    eax,0xc00200a0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 60 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffa0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 60 04 02 c0       	push   0xc0020460
c0006147:	e8 7c 3c 01 00       	call   c0019dc8 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 6e 04 02 c0       	push   0xc002046e
c000617f:	e8 44 3c 01 00       	call   c0019dc8 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 ad 3b 01 00       	call   c0019d6c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 7d 04 02 c0       	push   0xc002047d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 80 04 02 c0       	push   0xc0020480
c000682f:	e8 94 35 01 00       	call   c0019dc8 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 a2 35 01 00       	call   c0019de4 <iso_kprintfd>
c0006842:	c7 04 24 85 04 02 c0 	mov    DWORD PTR [esp],0xc0020485
c0006849:	e8 7a 35 01 00       	call   c0019dc8 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 8a 35 01 00       	call   c0019de4 <iso_kprintfd>
c000685a:	c7 04 24 8b 04 02 c0 	mov    DWORD PTR [esp],0xc002048b
c0006861:	e8 62 35 01 00       	call   c0019dc8 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 72 35 01 00       	call   c0019de4 <iso_kprintfd>
c0006872:	c7 04 24 91 04 02 c0 	mov    DWORD PTR [esp],0xc0020491
c0006879:	e8 4a 35 01 00       	call   c0019dc8 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 5a 35 01 00       	call   c0019de4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 7d 04 02 c0       	push   0xc002047d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 9a 04 02 c0       	push   0xc002049a
c0006a52:	e8 71 33 01 00       	call   c0019dc8 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 a5 04 02 c0       	push   0xc00204a5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ac 04 02 c0       	push   0xc00204ac
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 b3 04 02 c0       	push   0xc00204b3
c0006b69:	e8 5a 32 01 00       	call   c0019dc8 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 be 04 02 c0       	push   0xc00204be
c0006b84:	e8 3f 32 01 00       	call   c0019dc8 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 2d 9d 00 00       	call   c00109c1 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 4f 5a 00 00       	call   c000c6f2 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 cf 04 02 c0       	push   0xc00204cf
c0006cd4:	e8 9f 9d 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cf3:	50                   	push   eax
c0006cf4:	68 e8 04 02 c0       	push   0xc00204e8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 df e8 00 00       	call   c00155e0 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1f 75 00 c0       	push   0xc000751f
c0006d10:	53                   	push   ebx
c0006d11:	e8 ee ea 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 c8 62 01 c0       	push   0xc00162c8
c0006d25:	52                   	push   edx
c0006d26:	e8 d9 ea 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 20             	add    esp,0x20
c0006d2e:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d35:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d3a:	e8 c5 a5 00 00       	call   c0011304 <KeInitRand()>
c0006d3f:	83 ec 0c             	sub    esp,0xc
c0006d42:	68 e4 05 02 c0       	push   0xc00205e4
c0006d47:	e8 2c 9d 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006d4c:	e8 9a f9 00 00       	call   c00166eb <Vm::initialise8086()>
c0006d51:	e8 6a 47 00 00       	call   c000b4c0 <Fs::initVFS()>
c0006d56:	e8 6b 41 00 00       	call   c000aec6 <KeInitialiseSymlinks()>
c0006d5b:	c7 04 24 f5 04 02 c0 	mov    DWORD PTR [esp],0xc00204f5
c0006d62:	e8 11 9d 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006d67:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d6c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d72:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d74:	6a 00                	push   0x0
c0006d76:	6a 00                	push   0x0
c0006d78:	6a 00                	push   0x0
c0006d7a:	50                   	push   eax
c0006d7b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d7e:	83 c4 14             	add    esp,0x14
c0006d81:	68 e4 05 02 c0       	push   0xc00205e4
c0006d86:	e8 ed 9c 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006d8b:	e8 20 a2 00 00       	call   c0010fb0 <KeLoadSystemEnv()>
c0006d90:	e8 7d a4 00 00       	call   c0011212 <KeSetupPowerManager()>
c0006d95:	83 c4 0c             	add    esp,0xc
c0006d98:	6a 3a                	push   0x3a
c0006d9a:	68 0f 05 02 c0       	push   0xc002050f
c0006d9f:	68 18 05 02 c0       	push   0xc0020518
c0006da4:	e8 65 ca 00 00       	call   c001380e <Reg::readIntWithDefault(char*, char*, int)>
c0006da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006dac:	e8 9b 52 00 00       	call   c000c04c <User::loadClockSettings(int)>
c0006db1:	c7 04 24 08 06 02 c0 	mov    DWORD PTR [esp],0xc0020608
c0006db8:	e8 bb 9c 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006dbd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dc2:	59                   	pop    ecx
c0006dc3:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc9:	53                   	push   ebx
c0006dca:	e8 21 59 00 00       	call   c000c6f0 <Device::loadDriversForAll()>
c0006dcf:	c7 04 24 20 05 02 c0 	mov    DWORD PTR [esp],0xc0020520
c0006dd6:	e8 9d 9c 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0006ddb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006de1:	58                   	pop    eax
c0006de2:	5a                   	pop    edx
c0006de3:	6a 01                	push   0x1
c0006de5:	68 31 05 02 c0       	push   0xc0020531
c0006dea:	e8 f5 e1 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c0006def:	59                   	pop    ecx
c0006df0:	5a                   	pop    edx
c0006df1:	53                   	push   ebx
c0006df2:	50                   	push   eax
c0006df3:	e8 2c e4 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c0006df8:	83 c4 10             	add    esp,0x10
c0006dfb:	83 ec 0c             	sub    esp,0xc
c0006dfe:	6a 02                	push   0x2
c0006e00:	e8 4b ee 00 00       	call   c0015c50 <blockTask(TaskState)>
c0006e05:	83 c4 10             	add    esp,0x10
c0006e08:	eb f1                	jmp    c0006dfb <Krnl::firstTask()+0x131>

c0006e0a <Computer::Computer()>:
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e11:	83 ec 08             	sub    esp,0x8
c0006e14:	68 4d 05 02 c0       	push   0xc002054d
c0006e19:	50                   	push   eax
c0006e1a:	e8 4d 59 00 00       	call   c000c76c <Device::Device(char const*)>
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	ba 54 06 02 c0       	mov    edx,0xc0020654
c0006e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2b:	89 10                	mov    DWORD PTR [eax],edx
c0006e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e31:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e53:	83 ca 04             	or     edx,0x4
c0006e56:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e66:	0f b6 d0             	movzx  edx,al
c0006e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e78:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7e:	0f b6 d0             	movzx  edx,al
c0006e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e85:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e94:	8d 50 01             	lea    edx,[eax+0x1]
c0006e97:	88 d1                	mov    cl,dl
c0006e99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea3:	0f b6 d0             	movzx  edx,al
c0006ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eaa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eae:	83 e1 3f             	and    ecx,0x3f
c0006eb1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb5:	90                   	nop
c0006eb6:	83 c4 0c             	add    esp,0xc
c0006eb9:	c3                   	ret    

c0006eba <Computer::setBootMessage(char const*)>:
c0006eba:	c3                   	ret    
c0006ebb:	90                   	nop

c0006ebc <Computer::detectFeatures()>:
c0006ebc:	55                   	push   ebp
c0006ebd:	57                   	push   edi
c0006ebe:	56                   	push   esi
c0006ebf:	53                   	push   ebx
c0006ec0:	83 ec 1c             	sub    esp,0x1c
c0006ec3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecd:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed9:	e8 1b 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ede:	31 d2                	xor    edx,edx
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee8:	0f 95 c2             	setne  dl
c0006eeb:	d1 e2                	shl    edx,1
c0006eed:	83 e0 fd             	and    eax,0xfffffffd
c0006ef0:	09 d0                	or     eax,edx
c0006ef2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef8:	a8 02                	test   al,0x2
c0006efa:	75 51                	jne    c0006f4d <Computer::detectFeatures()+0x91>
c0006efc:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f03:	74 0f                	je     c0006f14 <Computer::detectFeatures()+0x58>
c0006f05:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f0b:	83 e0 fb             	and    eax,0xfffffffb
c0006f0e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f14:	e8 bd 7e 01 00       	call   c001edd6 <x87Detect>
c0006f19:	83 e0 01             	and    eax,0x1
c0006f1c:	c1 e0 04             	shl    eax,0x4
c0006f1f:	89 c2                	mov    edx,eax
c0006f21:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f27:	83 e0 ef             	and    eax,0xffffffef
c0006f2a:	09 d0                	or     eax,edx
c0006f2c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f32:	a8 10                	test   al,0x10
c0006f34:	88 c2                	mov    dl,al
c0006f36:	0f 85 33 01 00 00    	jne    c000706f <Computer::detectFeatures()+0x1b3>
c0006f3c:	80 e2 80             	and    dl,0x80
c0006f3f:	0f 85 4c 01 00 00    	jne    c0007091 <Computer::detectFeatures()+0x1d5>
c0006f45:	83 c4 1c             	add    esp,0x1c
c0006f48:	5b                   	pop    ebx
c0006f49:	5e                   	pop    esi
c0006f4a:	5f                   	pop    edi
c0006f4b:	5d                   	pop    ebp
c0006f4c:	c3                   	ret    
c0006f4d:	83 ec 0c             	sub    esp,0xc
c0006f50:	6a 20                	push   0x20
c0006f52:	e8 7f 8f 00 00       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f57:	83 e0 01             	and    eax,0x1
c0006f5a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f61:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f67:	83 e0 f7             	and    eax,0xfffffff7
c0006f6a:	09 d0                	or     eax,edx
c0006f6c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f72:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f79:	e8 58 8f 00 00       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7e:	89 c2                	mov    edx,eax
c0006f80:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f86:	83 e2 01             	and    edx,0x1
c0006f89:	83 e0 fe             	and    eax,0xfffffffe
c0006f8c:	09 d0                	or     eax,edx
c0006f8e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f94:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f9b:	e8 36 8f 00 00       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fa0:	89 c2                	mov    edx,eax
c0006fa2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa8:	c1 e2 07             	shl    edx,0x7
c0006fab:	83 e0 7f             	and    eax,0x7f
c0006fae:	09 d0                	or     eax,edx
c0006fb0:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb6:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbd:	e8 14 8f 00 00       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc2:	83 c4 10             	add    esp,0x10
c0006fc5:	83 e0 01             	and    eax,0x1
c0006fc8:	c1 e0 05             	shl    eax,0x5
c0006fcb:	89 c2                	mov    edx,eax
c0006fcd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd3:	83 e0 df             	and    eax,0xffffffdf
c0006fd6:	09 d0                	or     eax,edx
c0006fd8:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe8:	0f 84 c9 00 00 00    	je     c00070b7 <Computer::detectFeatures()+0x1fb>
c0006fee:	83 e0 fe             	and    eax,0xfffffffe
c0006ff1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffd:	89 c2                	mov    edx,eax
c0006fff:	83 e2 09             	and    edx,0x9
c0007002:	83 fa 01             	cmp    edx,0x1
c0007005:	75 09                	jne    c0007010 <Computer::detectFeatures()+0x154>
c0007007:	83 e0 fe             	and    eax,0xfffffffe
c000700a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007017:	50                   	push   eax
c0007018:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701c:	55                   	push   ebp
c000701d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007021:	57                   	push   edi
c0007022:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007026:	56                   	push   esi
c0007027:	68 00 00 00 80       	push   0x80000000
c000702c:	e8 21 8e 00 00       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007031:	83 c4 20             	add    esp,0x20
c0007034:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000703b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703f:	0f 86 b7 fe ff ff    	jbe    c0006efc <Computer::detectFeatures()+0x40>
c0007045:	83 ec 0c             	sub    esp,0xc
c0007048:	50                   	push   eax
c0007049:	55                   	push   ebp
c000704a:	57                   	push   edi
c000704b:	56                   	push   esi
c000704c:	68 01 00 00 80       	push   0x80000001
c0007051:	e8 fc 8d 00 00       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007056:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705c:	83 c4 20             	add    esp,0x20
c000705f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007064:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000706a:	e9 8d fe ff ff       	jmp    c0006efc <Computer::detectFeatures()+0x40>
c000706f:	e8 1c 7d 01 00       	call   c001ed90 <absolutelyNoChanceInHell>
c0007074:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000707a:	83 e2 7f             	and    edx,0x7f
c000707d:	c1 e0 07             	shl    eax,0x7
c0007080:	09 c2                	or     edx,eax
c0007082:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007088:	80 e2 80             	and    dl,0x80
c000708b:	0f 84 b4 fe ff ff    	je     c0006f45 <Computer::detectFeatures()+0x89>
c0007091:	e8 6a 79 01 00       	call   c001ea00 <avxDetect>
c0007096:	83 e0 01             	and    eax,0x1
c0007099:	c1 e0 05             	shl    eax,0x5
c000709c:	89 c2                	mov    edx,eax
c000709e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a4:	83 e0 df             	and    eax,0xffffffdf
c00070a7:	09 d0                	or     eax,edx
c00070a9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070af:	83 c4 1c             	add    esp,0x1c
c00070b2:	5b                   	pop    ebx
c00070b3:	5e                   	pop    esi
c00070b4:	5f                   	pop    edi
c00070b5:	5d                   	pop    ebp
c00070b6:	c3                   	ret    
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	68 00 02 00 00       	push   0x200
c00070bf:	e8 12 8e 00 00       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c00070c4:	83 c4 10             	add    esp,0x10
c00070c7:	89 c2                	mov    edx,eax
c00070c9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cf:	83 e2 01             	and    edx,0x1
c00070d2:	83 e0 fe             	and    eax,0xfffffffe
c00070d5:	09 d0                	or     eax,edx
c00070d7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070dd:	e9 15 ff ff ff       	jmp    c0006ff7 <Computer::detectFeatures()+0x13b>

c00070e2 <Computer::displayFeatures()>:
c00070e2:	c3                   	ret    
c00070e3:	90                   	nop

c00070e4 <Computer::rdmsr(unsigned int)>:
c00070e4:	83 ec 0c             	sub    esp,0xc
c00070e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070eb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f2:	74 0a                	je     c00070fe <Computer::rdmsr(unsigned int)+0x1a>
c00070f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f8:	0f 32                	rdmsr  
c00070fa:	83 c4 0c             	add    esp,0xc
c00070fd:	c3                   	ret    
c00070fe:	83 ec 0c             	sub    esp,0xc
c0007101:	68 56 05 02 c0       	push   0xc0020556
c0007106:	e8 42 a0 00 00       	call   c001114d <KePanic(char const*)>
c000710b:	83 c4 10             	add    esp,0x10
c000710e:	eb e4                	jmp    c00070f4 <Computer::rdmsr(unsigned int)+0x10>

c0007110 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007110:	57                   	push   edi
c0007111:	56                   	push   esi
c0007112:	83 ec 04             	sub    esp,0x4
c0007115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007119:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007121:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007128:	74 10                	je     c000713a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000712a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712e:	89 f0                	mov    eax,esi
c0007130:	89 fa                	mov    edx,edi
c0007132:	0f 30                	wrmsr  
c0007134:	83 c4 04             	add    esp,0x4
c0007137:	5e                   	pop    esi
c0007138:	5f                   	pop    edi
c0007139:	c3                   	ret    
c000713a:	83 ec 0c             	sub    esp,0xc
c000713d:	68 5c 05 02 c0       	push   0xc002055c
c0007142:	e8 06 a0 00 00       	call   c001114d <KePanic(char const*)>
c0007147:	83 c4 10             	add    esp,0x10
c000714a:	eb de                	jmp    c000712a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714c <Computer::shutdown()>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007153:	8b 10                	mov    edx,DWORD PTR [eax]
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	6a 00                	push   0x0
c000715b:	50                   	push   eax
c000715c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715f:	83 c4 1c             	add    esp,0x1c
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <Computer::restart()>:
c0007164:	83 ec 0c             	sub    esp,0xc
c0007167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716b:	8b 10                	mov    edx,DWORD PTR [eax]
c000716d:	6a 00                	push   0x0
c000716f:	6a 00                	push   0x0
c0007171:	6a 01                	push   0x1
c0007173:	50                   	push   eax
c0007174:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007177:	83 c4 1c             	add    esp,0x1c
c000717a:	c3                   	ret    
c000717b:	90                   	nop

c000717c <Computer::sleep()>:
c000717c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007180:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718a:	e9 19 88 00 00       	jmp    c000f9a8 <ACPI::sleep()>
c000718f:	90                   	nop

c0007190 <Computer::nmiEnabled()>:
c0007190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007194:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000719a:	c3                   	ret    
c000719b:	90                   	nop

c000719c <Computer::readCMOS(unsigned char)>:
c000719c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00071a0:	31 d2                	xor    edx,edx
c00071a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ad:	75 02                	jne    c00071b1 <Computer::readCMOS(unsigned char)+0x15>
c00071af:	b2 80                	mov    dl,0x80
c00071b1:	09 d0                	or     eax,edx
c00071b3:	e6 70                	out    0x70,al
c00071b5:	e4 71                	in     al,0x71
c00071b7:	c3                   	ret    

c00071b8 <Computer::enableNMI(bool)>:
c00071b8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071c0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ce:	eb cc                	jmp    c000719c <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 10             	sub    esp,0x10
c00071d5:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071e0:	68 62 05 02 c0       	push   0xc0020562
c00071e5:	0f 94 05 a0 2e 02 c0 	sete   BYTE PTR ds:0xc0022ea0
c00071ec:	e8 87 98 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c00071f1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f8:	e8 d6 08 00 00       	call   c0007ad3 <malloc>
c00071fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007200:	89 c6                	mov    esi,eax
c0007202:	e8 15 83 00 00       	call   c000f51c <ACPI::ACPI()>
c0007207:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720d:	58                   	pop    eax
c000720e:	5a                   	pop    edx
c000720f:	56                   	push   esi
c0007210:	53                   	push   ebx
c0007211:	e8 be 53 00 00       	call   c000c5d4 <Device::addChild(Device*)>
c0007216:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007219:	e8 9e fc ff ff       	call   c0006ebc <Computer::detectFeatures()>
c000721e:	59                   	pop    ecx
c000721f:	5e                   	pop    esi
c0007220:	6a 01                	push   0x1
c0007222:	53                   	push   ebx
c0007223:	e8 90 ff ff ff       	call   c00071b8 <Computer::enableNMI(bool)>
c0007228:	c7 04 24 7a 05 02 c0 	mov    DWORD PTR [esp],0xc002057a
c000722f:	e8 44 98 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0007234:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000723b:	e8 93 08 00 00       	call   c0007ad3 <malloc>
c0007240:	89 04 24             	mov    DWORD PTR [esp],eax
c0007243:	89 c6                	mov    esi,eax
c0007245:	e8 44 8d 00 00       	call   c000ff8e <CPU::CPU()>
c000724a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007250:	58                   	pop    eax
c0007251:	5a                   	pop    edx
c0007252:	56                   	push   esi
c0007253:	53                   	push   ebx
c0007254:	e8 7b 53 00 00       	call   c000c5d4 <Device::addChild(Device*)>
c0007259:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007263:	8b 10                	mov    edx,DWORD PTR [eax]
c0007265:	51                   	push   ecx
c0007266:	6a 00                	push   0x0
c0007268:	6a 00                	push   0x0
c000726a:	50                   	push   eax
c000726b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	68 28 06 02 c0       	push   0xc0020628
c0007276:	e8 fd 97 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000727b:	e8 b2 06 01 00       	call   c0017932 <HalInitialiseCoprocessor()>
c0007280:	c7 04 24 94 05 02 c0 	mov    DWORD PTR [esp],0xc0020594
c0007287:	e8 ec 97 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000728c:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007293:	e8 94 e6 00 00       	call   c001592c <setupMultitasking(void (*)())>
c0007298:	83 c4 14             	add    esp,0x14
c000729b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072a0:	5b                   	pop    ebx
c00072a1:	5e                   	pop    esi
c00072a2:	c3                   	ret    
c00072a3:	90                   	nop

c00072a4 <Computer::disableNMI()>:
c00072a4:	6a 00                	push   0x0
c00072a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072aa:	50                   	push   eax
c00072ab:	e8 08 ff ff ff       	call   c00071b8 <Computer::enableNMI(bool)>
c00072b0:	5a                   	pop    edx
c00072b1:	59                   	pop    ecx
c00072b2:	c3                   	ret    
c00072b3:	90                   	nop

c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b4:	53                   	push   ebx
c00072b5:	b2 80                	mov    dl,0x80
c00072b7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072ca:	74 02                	je     c00072ce <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072cc:	31 d2                	xor    edx,edx
c00072ce:	09 d0                	or     eax,edx
c00072d0:	e6 70                	out    0x70,al
c00072d2:	88 c8                	mov    al,cl
c00072d4:	e6 71                	out    0x71,al
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <Computer::handleNMI()>:
c00072d8:	56                   	push   esi
c00072d9:	53                   	push   ebx
c00072da:	83 ec 10             	sub    esp,0x10
c00072dd:	e4 92                	in     al,0x92
c00072df:	89 c6                	mov    esi,eax
c00072e1:	e4 61                	in     al,0x61
c00072e3:	68 af 05 02 c0       	push   0xc00205af
c00072e8:	88 c3                	mov    bl,al
c00072ea:	e8 1b 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ef:	83 c4 10             	add    esp,0x10
c00072f2:	83 e6 10             	and    esi,0x10
c00072f5:	75 10                	jne    c0007307 <Computer::handleNMI()+0x2f>
c00072f7:	f6 c3 40             	test   bl,0x40
c00072fa:	75 20                	jne    c000731c <Computer::handleNMI()+0x44>
c00072fc:	80 e3 80             	and    bl,0x80
c00072ff:	75 30                	jne    c0007331 <Computer::handleNMI()+0x59>
c0007301:	83 c4 04             	add    esp,0x4
c0007304:	5b                   	pop    ebx
c0007305:	5e                   	pop    esi
c0007306:	c3                   	ret    
c0007307:	83 ec 0c             	sub    esp,0xc
c000730a:	68 c0 05 02 c0       	push   0xc00205c0
c000730f:	e8 39 9e 00 00       	call   c001114d <KePanic(char const*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	f6 c3 40             	test   bl,0x40
c000731a:	74 e0                	je     c00072fc <Computer::handleNMI()+0x24>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 cd 05 02 c0       	push   0xc00205cd
c0007324:	e8 24 9e 00 00       	call   c001114d <KePanic(char const*)>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	80 e3 80             	and    bl,0x80
c000732f:	74 d0                	je     c0007301 <Computer::handleNMI()+0x29>
c0007331:	c7 44 24 10 d7 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205d7
c0007339:	83 c4 04             	add    esp,0x4
c000733c:	5b                   	pop    ebx
c000733d:	5e                   	pop    esi
c000733e:	e9 0a 9e 00 00       	jmp    c001114d <KePanic(char const*)>
c0007343:	90                   	nop

c0007344 <GDTEntry::setBase(unsigned int)>:
c0007344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734c:	89 c1                	mov    ecx,eax
c000734e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007352:	c1 e9 10             	shr    ecx,0x10
c0007355:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007358:	c1 e8 18             	shr    eax,0x18
c000735b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735e:	c3                   	ret    
c000735f:	90                   	nop

c0007360 <GDTEntry::setLimit(unsigned int)>:
c0007360:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007368:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000736b:	66 89 01             	mov    WORD PTR [ecx],ax
c000736e:	c1 e8 10             	shr    eax,0x10
c0007371:	83 e0 0f             	and    eax,0xf
c0007374:	83 e2 f0             	and    edx,0xfffffff0
c0007377:	09 d0                	or     eax,edx
c0007379:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737c:	c3                   	ret    
c000737d:	90                   	nop

c000737e <GDT::GDT()>:
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007392:	90                   	nop
c0007393:	c3                   	ret    

c0007394 <GDT::addEntry(GDTEntry)>:
c0007394:	53                   	push   ebx
c0007395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007399:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00073aa:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ae:	c1 e0 03             	shl    eax,0x3
c00073b1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b3:	5b                   	pop    ebx
c00073b4:	c3                   	ret    
c00073b5:	90                   	nop

c00073b6 <GDT::getNumberOfEntries()>:
c00073b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00073bc:	c3                   	ret    
c00073bd:	90                   	nop

c00073be <GDT::flush()>:
c00073be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c4:	83 c0 04             	add    eax,0x4
c00073c7:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073cc:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d3:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073da:	e9 7b 8f ff ff       	jmp    c000035a <loadGDT>
c00073df:	90                   	nop

c00073e0 <GDT::setup()>:
c00073e0:	57                   	push   edi
c00073e1:	56                   	push   esi
c00073e2:	53                   	push   ebx
c00073e3:	83 ec 30             	sub    esp,0x30
c00073e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ea:	6a 00                	push   0x0
c00073ec:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073f0:	56                   	push   esi
c00073f1:	e8 4e ff ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c00073f6:	6a 00                	push   0x0
c00073f8:	56                   	push   esi
c00073f9:	e8 62 ff ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c00073fe:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007406:	6a 00                	push   0x0
c0007408:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740c:	56                   	push   esi
c000740d:	e8 32 ff ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007412:	68 ff ff ff 00       	push   0xffffff
c0007417:	56                   	push   esi
c0007418:	e8 43 ff ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c000741d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007421:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007425:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000742a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007433:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007437:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000743b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743f:	89 f8                	mov    eax,edi
c0007441:	89 fa                	mov    edx,edi
c0007443:	80 e4 f7             	and    ah,0xf7
c0007446:	80 ce 60             	or     dh,0x60
c0007449:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744d:	89 c7                	mov    edi,eax
c000744f:	80 cc 60             	or     ah,0x60
c0007452:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007456:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000745a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007462:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007466:	83 c4 20             	add    esp,0x20
c0007469:	6a 00                	push   0x0
c000746b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746f:	50                   	push   eax
c0007470:	e8 cf fe ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007475:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007479:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007481:	83 e0 3f             	and    eax,0x3f
c0007484:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007488:	6a 00                	push   0x0
c000748a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748e:	50                   	push   eax
c000748f:	e8 b0 fe ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007494:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007498:	83 e0 3f             	and    eax,0x3f
c000749b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	53                   	push   ebx
c00074ab:	e8 e4 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074b0:	83 c4 0c             	add    esp,0xc
c00074b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074bb:	53                   	push   ebx
c00074bc:	e8 d3 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074c1:	83 c4 0c             	add    esp,0xc
c00074c4:	57                   	push   edi
c00074c5:	56                   	push   esi
c00074c6:	53                   	push   ebx
c00074c7:	e8 c8 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d7:	53                   	push   ebx
c00074d8:	e8 b7 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e8:	53                   	push   ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074ee:	83 c4 0c             	add    esp,0xc
c00074f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f9:	53                   	push   ebx
c00074fa:	e8 95 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074ff:	83 c4 0c             	add    esp,0xc
c0007502:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007506:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000750a:	53                   	push   ebx
c000750b:	e8 84 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c0007510:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007513:	e8 a6 fe ff ff       	call   c00073be <GDT::flush()>
c0007518:	83 c4 40             	add    esp,0x40
c000751b:	5b                   	pop    ebx
c000751c:	5e                   	pop    esi
c000751d:	5f                   	pop    edi
c000751e:	c3                   	ret    

c000751f <idleFunction(void*)>:
c000751f:	83 ec 0c             	sub    esp,0xc
c0007522:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007527:	48                   	dec    eax
c0007528:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000752d:	75 01                	jne    c0007530 <idleFunction(void*)+0x11>
c000752f:	fb                   	sti    
c0007530:	e8 c9 00 01 00       	call   c00175fe <HalSystemIdle()>
c0007535:	e8 58 7e 01 00       	call   c001f392 <idleCommon()>
c000753a:	eb f4                	jmp    c0007530 <idleFunction(void*)+0x11>

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 90 ea 01 c0       	push   0xc001ea90
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 a0 ea 01 c0       	push   0xc001eaa0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 aa ea 01 c0       	push   0xc001eaaa
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 b4 ea 01 c0       	push   0xc001eab4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 be ea 01 c0       	push   0xc001eabe
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 c8 ea 01 c0       	push   0xc001eac8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 d2 ea 01 c0       	push   0xc001ead2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 dc ea 01 c0       	push   0xc001eadc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 e6 ea 01 c0       	push   0xc001eae6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 ee ea 01 c0       	push   0xc001eaee
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 f8 ea 01 c0       	push   0xc001eaf8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 00 eb 01 c0       	push   0xc001eb00
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 08 eb 01 c0       	push   0xc001eb08
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 10 eb 01 c0       	push   0xc001eb10
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 2a eb 01 c0       	push   0xc001eb2a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 32 eb 01 c0       	push   0xc001eb32
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 3c eb 01 c0       	push   0xc001eb3c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 46 eb 01 c0       	push   0xc001eb46
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 50 eb 01 c0       	push   0xc001eb50
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 ea eb 01 c0       	push   0xc001ebea
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 f1 eb 01 c0       	push   0xc001ebf1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 dc eb 01 c0       	push   0xc001ebdc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 e3 eb 01 c0       	push   0xc001ebe3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 5a eb 01 c0       	push   0xc001eb5a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 64 eb 01 c0       	push   0xc001eb64
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 6e eb 01 c0       	push   0xc001eb6e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 78 eb 01 c0       	push   0xc001eb78
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 82 eb 01 c0       	push   0xc001eb82
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 8c eb 01 c0       	push   0xc001eb8c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 96 eb 01 c0       	push   0xc001eb96
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 a0 eb 01 c0       	push   0xc001eba0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 aa eb 01 c0       	push   0xc001ebaa
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 b4 eb 01 c0       	push   0xc001ebb4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 be eb 01 c0       	push   0xc001ebbe
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 c8 eb 01 c0       	push   0xc001ebc8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 d2 eb 01 c0       	push   0xc001ebd2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 2c ed 01 c0       	push   0xc001ed2c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 36 ed 01 c0       	push   0xc001ed36
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 40 ed 01 c0       	push   0xc001ed40
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 4a ed 01 c0       	push   0xc001ed4a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 54 ed 01 c0       	push   0xc001ed54
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 5e ed 01 c0       	push   0xc001ed5e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 68 ed 01 c0       	push   0xc001ed68
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 72 ed 01 c0       	push   0xc001ed72
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 e6 ea 01 c0       	push   0xc001eae6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 8c 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e8c
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 8c 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e8c
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 8c 2e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022e8c,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 8c 2e 02 c0       	mov    eax,ds:0xc0022e8c
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 78 06 02 c0       	push   0xc0020678
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 a8 06 02 c0       	push   0xc00206a8
c0007a44:	e8 04 97 00 00       	call   c001114d <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 ad 06 02 c0       	push   0xc00206ad
c0007a5a:	e8 ee 96 00 00       	call   c001114d <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 b4 06 02 c0       	push   0xc00206b4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 76 8e 00 00       	call   c00109fc <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 c4 8d 00 00       	call   c001096b <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 6d 77 01 00       	call   c001f32a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 37 f2 ff ff       	call   c0006e0a <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ec f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 cc 06 02 c0       	push   0xc00206cc
c0007c4b:	e8 fd 94 00 00       	call   c001114d <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 cc 06 02 c0       	push   0xc00206cc
c0007cc5:	e8 83 94 00 00       	call   c001114d <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 90 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e90
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 90 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e90
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 90 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e90
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 71 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020771
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 7d 93 00 00       	jmp    c001114d <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 f4 06 02 c0       	push   0xc00206f4
c0007e54:	e8 f4 92 00 00       	call   c001114d <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 87 07 02 c0       	push   0xc0020787
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 24 07 02 c0       	push   0xc0020724
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 9f 07 02 c0       	push   0xc002079f
c000810a:	e8 3e 90 00 00       	call   c001114d <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 48 07 02 c0       	push   0xc0020748
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 ad 07 02 c0       	push   0xc00207ad
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 0c 08 02 c0       	mov    edx,0xc002080c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 c9 07 02 c0       	push   0xc00207c9
c0008331:	e8 17 8e 00 00       	call   c001114d <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000837a:	e8 d1 d6 00 00       	call   c0015a50 <schedule()>
c000837f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008384:	48                   	dec    eax
c0008385:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 03 6e 01 00       	call   c001f210 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 e6 07 02 c0       	push   0xc00207e6
c0008422:	e8 26 8d 00 00       	call   c001114d <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 0c 08 02 c0       	mov    edx,0xc002080c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 54 08 02 c0       	mov    edx,0xc0020854
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 aa 4f 00 00       	call   c000d4b6 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 be 02 01 00       	call   c00187f0 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 2e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd140]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 2e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd140]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd288]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2b0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 f0 ff 00 00       	call   c0018684 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 4d 00 01 00       	jmp    c001878c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 20 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020820
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 c1 89 00 00       	jmp    c001114d <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 0a 37 00 00       	jmp    c000bff3 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 2e 08 02 c0       	mov    esi,0xc002082e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 64 fb 00 00       	call   c001878c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 54 08 02 c0       	mov    edx,0xc0020854
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 3f 08 02 c0       	push   0xc002083f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 45 08 02 c0       	push   0xc0020845
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 ed e2 ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f8 e2 ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f4 e2 ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 fb e2 ff ff       	call   c00073be <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 1c 09 02 c0       	mov    edx,0xc002091c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 2f 02 c0    	mov    DWORD PTR ds:0xc0022f00,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 0f 62 01 00       	call   c001f3f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 38 09 02 c0       	mov    edx,0xc0020938
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 1c 09 02 c0       	mov    edx,0xc002091c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 0f 61 01 00       	call   c001f4cc <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 03 61 01 00       	call   c001f4d4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 09 60 01 00       	call   c001f3f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 f4 08 02 c0       	push   0xc00208f4
c0009414:	e8 34 7d 00 00       	call   c001114d <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 38 09 02 c0       	mov    edx,0xc0020938
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 0e 60 01 00       	call   c001f4cc <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 9b 60 01 00       	call   c001f576 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 59 5e 01 00       	call   c001f3b6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 88 2e 02 c0       	push   0xc0022e88
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 b4 f3 01 c0       	push   0xc001f3b4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f08
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f08
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f04
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f04,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 4c 09 02 c0       	push   0xc002094c
c0009674:	e8 d4 7a 00 00       	call   c001114d <KePanic(char const*)>
c0009679:	8b 2d 04 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f04
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f0c
c000973e:	8b 0d 14 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f14
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f10
c0009759:	8b 0d 0c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f0c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 e0 0b 02 c0       	push   0xc0020be0
c000979e:	e8 aa 79 00 00       	call   c001114d <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 f7 0b 02 c0       	push   0xc0020bf7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 2f 02 c0    	mov    DWORD PTR ds:0xc0022f10,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f18,0x43
c000984f:	c7 05 0c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f0c,0x8
c0009859:	a3 14 2f 02 c0       	mov    ds:0xc0022f14,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c0009874:	f7 35 0c 2f 02 c0    	div    DWORD PTR ds:0xc0022f0c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 6c 09 02 c0       	push   0xc002096c
c00098af:	e8 99 78 00 00       	call   c001114d <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 0e 0c 02 c0       	push   0xc0020c0e
c0009981:	e8 c7 77 00 00       	call   c001114d <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 90 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020990
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 64 77 00 00       	jmp    c001114d <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 2a 0c 02 c0       	push   0xc0020c2a
c00099f6:	e8 52 77 00 00       	call   c001114d <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 46 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c46
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 08 77 00 00       	jmp    c001114d <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 b4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209b4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009cee:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 d8 09 02 c0       	push   0xc00209d8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 40 0a 02 c0       	push   0xc0020a40
c0009d87:	e8 c1 73 00 00       	call   c001114d <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 64 0a 02 c0       	push   0xc0020a64
c0009e7b:	e8 cd 72 00 00       	call   c001114d <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 90 0a 02 c0       	push   0xc0020a90
c0009fd9:	e8 6f 71 00 00       	call   c001114d <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 5a 26 00 00       	call   c000c868 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 60 0c 02 c0       	push   0xc0020c60
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f18
c000a2e7:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 36 37 00 00       	call   c000da2a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f0c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 b4 0a 02 c0       	push   0xc0020ab4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 6e 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020c6e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 91 0c 02 c0       	push   0xc0020c91
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 7f 0c 02 c0       	push   0xc0020c7f
c000a413:	e8 35 6d 00 00       	call   c001114d <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 e4 0a 02 c0       	push   0xc0020ae4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f18
c000a4bf:	8b 2c 85 dc 93 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6c24]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 f2 34 00 00       	call   c000d9be <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f0c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 04 0b 02 c0       	push   0xc0020b04
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 64 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b64
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 b9 0c 02 c0       	push   0xc0020cb9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 cd 0c 02 c0       	push   0xc0020ccd
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 e0 0c 02 c0       	push   0xc0020ce0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ed 0c 02 c0       	push   0xc0020ced
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 06 0d 02 c0       	push   0xc0020d06
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 06 0d 02 c0       	push   0xc0020d06
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 0e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d0e
c000a7ec:	e8 5c 69 00 00       	call   c001114d <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 26 0d 02 c0       	push   0xc0020d26
c000a7fe:	e8 4a 69 00 00       	call   c001114d <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 3c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf2c4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 8c 0e 02 c0       	push   0xc0020e8c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 a0 0e 02 c0       	push   0xc0020ea0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 aa 0e 02 c0       	push   0xc0020eaa
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 b4 0e 02 c0       	push   0xc0020eb4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 f8 0f 02 c0       	push   0xc0020ff8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 be 0e 02 c0       	push   0xc0020ebe
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 18 10 02 c0       	push   0xc0021018
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 d3 0e 02 c0       	push   0xc0020ed3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ed 0e 02 c0       	push   0xc0020eed
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 40 10 02 c0       	push   0xc0021040
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 f8 0f 02 c0       	push   0xc0020ff8
c000ab78:	e8 d0 65 00 00       	call   c001114d <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 88 10 02 c0       	push   0xc0021088
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 88 10 02 c0       	push   0xc0021088
c000aba7:	e8 a1 65 00 00       	call   c001114d <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 f8 0e 02 c0       	push   0xc0020ef8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 f8 0e 02 c0       	push   0xc0020ef8
c000abd3:	e8 75 65 00 00       	call   c001114d <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 15 0f 02 c0       	push   0xc0020f15
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 15 0f 02 c0       	push   0xc0020f15
c000abff:	e8 49 65 00 00       	call   c001114d <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 a8 10 02 c0       	push   0xc00210a8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 a8 10 02 c0       	push   0xc00210a8
c000ac2b:	e8 1d 65 00 00       	call   c001114d <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 cc 10 02 c0       	push   0xc00210cc
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 cc 10 02 c0       	push   0xc00210cc
c000ac57:	e8 f1 64 00 00       	call   c001114d <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 31 0f 02 c0       	push   0xc0020f31
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 31 0f 02 c0       	push   0xc0020f31
c000ac83:	e8 c5 64 00 00       	call   c001114d <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 4d 0f 02 c0       	push   0xc0020f4d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 4d 0f 02 c0       	push   0xc0020f4d
c000acaf:	e8 99 64 00 00       	call   c001114d <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ec 10 02 c0       	push   0xc00210ec
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ec 10 02 c0       	push   0xc00210ec
c000acdb:	e8 6d 64 00 00       	call   c001114d <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 10 11 02 c0       	push   0xc0021110
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 10 11 02 c0       	push   0xc0021110
c000ad07:	e8 41 64 00 00       	call   c001114d <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateLinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 79 65 00 00       	call   c001129b <KeRand()>
c000ad22:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateLinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 2f 11 02 c0       	push   0xc002112f
c000ad57:	e8 f1 63 00 00       	call   c001114d <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateLinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateLinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000ad97:	68 38 11 02 c0       	push   0xc0021138
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 22 09 00 00       	call   c000b6c6 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 56 11 02 c0       	push   0xc0021156
c000adb3:	e8 95 63 00 00       	call   c001114d <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 04                	push   0x4
c000adbf:	53                   	push   ebx
c000adc0:	e8 bd 09 00 00       	call   c000b782 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 70 11 02 c0       	push   0xc0021170
c000add4:	e8 74 63 00 00       	call   c001114d <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 60 60 02 c0       	add    eax,0xc0026060
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 8a 11 02 c0       	push   0xc002118a
c000ae1b:	e8 2d 63 00 00       	call   c001114d <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 a7 09 00 00       	call   c000b7e0 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 0f             	cmp    eax,0xf
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KeInitialiseSymlinks()>:
c000aec6:	53                   	push   ebx
c000aec7:	83 ec 10             	sub    esp,0x10
c000aeca:	6a 00                	push   0x0
c000aecc:	68 52 ae 00 c0       	push   0xc000ae52
c000aed1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000aedb:	e8 ad 5a 00 00       	call   c001098d <KeRegisterAtexit(void (*)(void*), void*)>
c000aee0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000aee7:	e8 e7 cb ff ff       	call   c0007ad3 <malloc>
c000aeec:	83 c4 0c             	add    esp,0xc
c000aeef:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000aef5:	68 38 11 02 c0       	push   0xc0021138
c000aefa:	50                   	push   eax
c000aefb:	89 c3                	mov    ebx,eax
c000aefd:	e8 c4 07 00 00       	call   c000b6c6 <File::File(char const*, Process*)>
c000af02:	83 c4 10             	add    esp,0x10
c000af05:	85 db                	test   ebx,ebx
c000af07:	75 10                	jne    c000af19 <KeInitialiseSymlinks()+0x53>
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	68 a4 11 02 c0       	push   0xc00211a4
c000af11:	e8 37 62 00 00       	call   c001114d <KePanic(char const*)>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	83 ec 0c             	sub    esp,0xc
c000af1c:	53                   	push   ebx
c000af1d:	e8 24 0b 00 00       	call   c000ba46 <File::exists()>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	84 c0                	test   al,al
c000af27:	75 2d                	jne    c000af56 <KeInitialiseSymlinks()+0x90>
c000af29:	51                   	push   ecx
c000af2a:	51                   	push   ecx
c000af2b:	6a 02                	push   0x2
c000af2d:	53                   	push   ebx
c000af2e:	e8 4f 08 00 00       	call   c000b782 <File::open(FileOpenMode)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	85 c0                	test   eax,eax
c000af38:	74 10                	je     c000af4a <KeInitialiseSymlinks()+0x84>
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	68 a4 11 02 c0       	push   0xc00211a4
c000af42:	e8 06 62 00 00       	call   c001114d <KePanic(char const*)>
c000af47:	83 c4 10             	add    esp,0x10
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	53                   	push   ebx
c000af4e:	e8 8d 08 00 00       	call   c000b7e0 <File::close()>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	85 db                	test   ebx,ebx
c000af58:	74 0c                	je     c000af66 <KeInitialiseSymlinks()+0xa0>
c000af5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af5c:	83 ec 0c             	sub    esp,0xc
c000af5f:	53                   	push   ebx
c000af60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	83 c4 08             	add    esp,0x8
c000af69:	5b                   	pop    ebx
c000af6a:	c3                   	ret    

c000af6b <KiIsSymlinkRegistered(char const*)>:
c000af6b:	31 c0                	xor    eax,eax
c000af6d:	31 d2                	xor    edx,edx
c000af6f:	c3                   	ret    

c000af70 <KeDereferenceSymlink(char const*, char*)>:
c000af70:	55                   	push   ebp
c000af71:	57                   	push   edi
c000af72:	56                   	push   esi
c000af73:	53                   	push   ebx
c000af74:	83 ec 50             	sub    esp,0x50
c000af77:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000af7b:	53                   	push   ebx
c000af7c:	e8 ea ff ff ff       	call   c000af6b <KiIsSymlinkRegistered(char const*)>
c000af81:	5e                   	pop    esi
c000af82:	5f                   	pop    edi
c000af83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af87:	09 d0                	or     eax,edx
c000af89:	75 07                	jne    c000af92 <KeDereferenceSymlink(char const*, char*)+0x22>
c000af8b:	31 db                	xor    ebx,ebx
c000af8d:	e9 8b 01 00 00       	jmp    c000b11d <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000af92:	83 ec 0c             	sub    esp,0xc
c000af95:	89 d7                	mov    edi,edx
c000af97:	68 14 01 00 00       	push   0x114
c000af9c:	e8 32 cb ff ff       	call   c0007ad3 <malloc>
c000afa1:	83 c4 0c             	add    esp,0xc
c000afa4:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000afaa:	53                   	push   ebx
c000afab:	50                   	push   eax
c000afac:	89 c5                	mov    ebp,eax
c000afae:	e8 13 07 00 00       	call   c000b6c6 <File::File(char const*, Process*)>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	85 ed                	test   ebp,ebp
c000afb8:	0f 84 45 01 00 00    	je     c000b103 <KeDereferenceSymlink(char const*, char*)+0x193>
c000afbe:	51                   	push   ecx
c000afbf:	51                   	push   ecx
c000afc0:	6a 01                	push   0x1
c000afc2:	55                   	push   ebp
c000afc3:	e8 ba 07 00 00       	call   c000b782 <File::open(FileOpenMode)>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	85 c0                	test   eax,eax
c000afcd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000afd0:	74 09                	je     c000afdb <KeDereferenceSymlink(char const*, char*)+0x6b>
c000afd2:	83 ec 0c             	sub    esp,0xc
c000afd5:	55                   	push   ebp
c000afd6:	e9 22 01 00 00       	jmp    c000b0fd <KeDereferenceSymlink(char const*, char*)+0x18d>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8d 74 24 28          	lea    esi,[esp+0x28]
c000afe2:	56                   	push   esi
c000afe3:	8d 5c 24 47          	lea    ebx,[esp+0x47]
c000afe7:	53                   	push   ebx
c000afe8:	6a 00                	push   0x0
c000afea:	6a 08                	push   0x8
c000afec:	55                   	push   ebp
c000afed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000aff0:	83 c4 20             	add    esp,0x20
c000aff3:	85 c0                	test   eax,eax
c000aff5:	0f 85 f3 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000affb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b000:	0f 85 e8 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b006:	52                   	push   edx
c000b007:	52                   	push   edx
c000b008:	68 bf 11 02 c0       	push   0xc00211bf
c000b00d:	53                   	push   ebx
c000b00e:	e8 6d 57 ff ff       	call   c0000780 <strcmp>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	85 c0                	test   eax,eax
c000b018:	89 c3                	mov    ebx,eax
c000b01a:	0f 85 ce 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b020:	83 ec 0c             	sub    esp,0xc
c000b023:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b026:	56                   	push   esi
c000b027:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000b02b:	51                   	push   ecx
c000b02c:	6a 00                	push   0x0
c000b02e:	6a 08                	push   0x8
c000b030:	55                   	push   ebp
c000b031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b034:	83 c4 20             	add    esp,0x20
c000b037:	85 c0                	test   eax,eax
c000b039:	0f 85 af 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b03f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b044:	0f 85 a4 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b04a:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000b04e:	0f 85 37 ff ff ff    	jne    c000af8b <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b058:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000b05c:	0f 85 29 ff ff ff    	jne    c000af8b <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b06a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b072:	50                   	push   eax
c000b073:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b077:	50                   	push   eax
c000b078:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b07c:	50                   	push   eax
c000b07d:	55                   	push   ebp
c000b07e:	e8 01 0a 00 00       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b08b:	85 c0                	test   eax,eax
c000b08d:	75 5f                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b08f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b093:	b9 0f 00 00 00       	mov    ecx,0xf
c000b098:	89 c2                	mov    edx,eax
c000b09a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b09e:	39 f1                	cmp    ecx,esi
c000b0a0:	19 fa                	sbb    edx,edi
c000b0a2:	73 4a                	jae    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0a4:	83 c6 f0             	add    esi,0xfffffff0
c000b0a7:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0ac:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b0b0:	83 d7 ff             	adc    edi,0xffffffff
c000b0b3:	39 f1                	cmp    ecx,esi
c000b0b5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b0b9:	19 f8                	sbb    eax,edi
c000b0bb:	72 46                	jb     c000b103 <KeDereferenceSymlink(char const*, char*)+0x193>
c000b0bd:	83 ec 0c             	sub    esp,0xc
c000b0c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b0c3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b0c7:	51                   	push   ecx
c000b0c8:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b0cc:	57                   	push   edi
c000b0cd:	56                   	push   esi
c000b0ce:	55                   	push   ebp
c000b0cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d2:	83 c4 20             	add    esp,0x20
c000b0d5:	85 c0                	test   eax,eax
c000b0d7:	75 15                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0dd:	89 c7                	mov    edi,eax
c000b0df:	c1 ff 1f             	sar    edi,0x1f
c000b0e2:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b0e6:	75 06                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0e8:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b0ec:	74 1a                	je     c000b108 <KeDereferenceSymlink(char const*, char*)+0x198>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	55                   	push   ebp
c000b0f2:	e8 e9 06 00 00       	call   c000b7e0 <File::close()>
c000b0f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b0fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b0fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b100:	83 c4 10             	add    esp,0x10
c000b103:	83 cb ff             	or     ebx,0xffffffff
c000b106:	eb 15                	jmp    c000b11d <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	55                   	push   ebp
c000b10c:	e8 cf 06 00 00       	call   c000b7e0 <File::close()>
c000b111:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b114:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b117:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	83 c4 4c             	add    esp,0x4c
c000b120:	89 d8                	mov    eax,ebx
c000b122:	5b                   	pop    ebx
c000b123:	5e                   	pop    esi
c000b124:	5f                   	pop    edi
c000b125:	5d                   	pop    ebp
c000b126:	c3                   	ret    

c000b127 <KeCreateSymlink(char const*, char const*)>:
c000b127:	55                   	push   ebp
c000b128:	57                   	push   edi
c000b129:	56                   	push   esi
c000b12a:	53                   	push   ebx
c000b12b:	83 ec 38             	sub    esp,0x38
c000b12e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000b132:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b136:	68 14 01 00 00       	push   0x114
c000b13b:	e8 93 c9 ff ff       	call   c0007ad3 <malloc>
c000b140:	83 c4 0c             	add    esp,0xc
c000b143:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b149:	56                   	push   esi
c000b14a:	50                   	push   eax
c000b14b:	89 c3                	mov    ebx,eax
c000b14d:	e8 74 05 00 00       	call   c000b6c6 <File::File(char const*, Process*)>
c000b152:	83 c4 10             	add    esp,0x10
c000b155:	85 db                	test   ebx,ebx
c000b157:	b8 01 00 00 00       	mov    eax,0x1
c000b15c:	0f 84 e9 00 00 00    	je     c000b24b <KeCreateSymlink(char const*, char const*)+0x124>
c000b162:	57                   	push   edi
c000b163:	57                   	push   edi
c000b164:	6a 02                	push   0x2
c000b166:	53                   	push   ebx
c000b167:	e8 16 06 00 00       	call   c000b782 <File::open(FileOpenMode)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	85 c0                	test   eax,eax
c000b171:	74 0b                	je     c000b17e <KeCreateSymlink(char const*, char const*)+0x57>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b178:	53                   	push   ebx
c000b179:	e9 c2 00 00 00       	jmp    c000b240 <KeCreateSymlink(char const*, char const*)+0x119>
c000b17e:	e8 91 fb ff ff       	call   c000ad14 <KiCreateLinkID()>
c000b183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b18b:	51                   	push   ecx
c000b18c:	52                   	push   edx
c000b18d:	50                   	push   eax
c000b18e:	56                   	push   esi
c000b18f:	be c7 11 02 c0       	mov    esi,0xc00211c7
c000b194:	e8 be fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b199:	8d 7c 24 27          	lea    edi,[esp+0x27]
c000b19d:	b9 09 00 00 00       	mov    ecx,0x9
c000b1a2:	fc                   	cld    
c000b1a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1a5:	5e                   	pop    esi
c000b1a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a8:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ac:	56                   	push   esi
c000b1ad:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1b1:	52                   	push   edx
c000b1b2:	6a 00                	push   0x0
c000b1b4:	6a 08                	push   0x8
c000b1b6:	53                   	push   ebx
c000b1b7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1ba:	83 c4 20             	add    esp,0x20
c000b1bd:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1c2:	75 6e                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b1c4:	85 c0                	test   eax,eax
c000b1c6:	75 6a                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cd:	56                   	push   esi
c000b1ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1d2:	52                   	push   edx
c000b1d3:	6a 00                	push   0x0
c000b1d5:	6a 08                	push   0x8
c000b1d7:	53                   	push   ebx
c000b1d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1db:	83 c4 20             	add    esp,0x20
c000b1de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e3:	75 4d                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b1e5:	85 c0                	test   eax,eax
c000b1e7:	75 49                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b1e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1f1:	55                   	push   ebp
c000b1f2:	e8 89 53 ff ff       	call   c0000580 <strlen>
c000b1f7:	31 d2                	xor    edx,edx
c000b1f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1fc:	55                   	push   ebp
c000b1fd:	52                   	push   edx
c000b1fe:	50                   	push   eax
c000b1ff:	53                   	push   ebx
c000b200:	ff d7                	call   edi
c000b202:	83 c4 14             	add    esp,0x14
c000b205:	55                   	push   ebp
c000b206:	89 c6                	mov    esi,eax
c000b208:	e8 73 53 ff ff       	call   c0000580 <strlen>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b214:	75 1c                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b216:	85 f6                	test   esi,esi
c000b218:	75 18                	jne    c000b232 <KeCreateSymlink(char const*, char const*)+0x10b>
c000b21a:	83 ec 0c             	sub    esp,0xc
c000b21d:	53                   	push   ebx
c000b21e:	e8 bd 05 00 00       	call   c000b7e0 <File::close()>
c000b223:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b225:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b228:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	31 c0                	xor    eax,eax
c000b230:	eb 19                	jmp    c000b24b <KeCreateSymlink(char const*, char const*)+0x124>
c000b232:	83 ec 0c             	sub    esp,0xc
c000b235:	53                   	push   ebx
c000b236:	e8 a5 05 00 00       	call   c000b7e0 <File::close()>
c000b23b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b23d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b240:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	b8 01 00 00 00       	mov    eax,0x1
c000b24b:	83 c4 2c             	add    esp,0x2c
c000b24e:	5b                   	pop    ebx
c000b24f:	5e                   	pop    esi
c000b250:	5f                   	pop    edi
c000b251:	5d                   	pop    ebp
c000b252:	c3                   	ret    
c000b253:	90                   	nop

c000b254 <File::read(unsigned long long, void*, int*)>:
c000b254:	53                   	push   ebx
c000b255:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b259:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b25d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b264:	83 f8 19             	cmp    eax,0x19
c000b267:	77 35                	ja     c000b29e <File::read(unsigned long long, void*, int*)+0x4a>
c000b269:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b270:	85 c0                	test   eax,eax
c000b272:	74 2a                	je     c000b29e <File::read(unsigned long long, void*, int*)+0x4a>
c000b274:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b27a:	85 c0                	test   eax,eax
c000b27c:	74 20                	je     c000b29e <File::read(unsigned long long, void*, int*)+0x4a>
c000b27e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b282:	74 21                	je     c000b2a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b284:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b286:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b28a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b290:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b294:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b298:	5b                   	pop    ebx
c000b299:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b29c:	ff e0                	jmp    eax
c000b29e:	b8 0b 00 00 00       	mov    eax,0xb
c000b2a3:	eb 05                	jmp    c000b2aa <File::read(unsigned long long, void*, int*)+0x56>
c000b2a5:	b8 05 00 00 00       	mov    eax,0x5
c000b2aa:	5b                   	pop    ebx
c000b2ab:	c3                   	ret    

c000b2ac <File::write(unsigned long long, void*, int*)>:
c000b2ac:	53                   	push   ebx
c000b2ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2bc:	83 f8 19             	cmp    eax,0x19
c000b2bf:	77 35                	ja     c000b2f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2c1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2c8:	85 c0                	test   eax,eax
c000b2ca:	74 2a                	je     c000b2f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2d2:	85 c0                	test   eax,eax
c000b2d4:	74 20                	je     c000b2f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2da:	74 21                	je     c000b2fd <File::write(unsigned long long, void*, int*)+0x51>
c000b2dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2f0:	5b                   	pop    ebx
c000b2f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b2f4:	ff e0                	jmp    eax
c000b2f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fb:	eb 05                	jmp    c000b302 <File::write(unsigned long long, void*, int*)+0x56>
c000b2fd:	b8 05 00 00 00       	mov    eax,0x5
c000b302:	5b                   	pop    ebx
c000b303:	c3                   	ret    

c000b304 <Directory::read(unsigned long long, void*, int*)>:
c000b304:	53                   	push   ebx
c000b305:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b309:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b30d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b314:	83 f8 19             	cmp    eax,0x19
c000b317:	77 35                	ja     c000b34e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b319:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b320:	85 c0                	test   eax,eax
c000b322:	74 2a                	je     c000b34e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b324:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b32a:	85 c0                	test   eax,eax
c000b32c:	74 20                	je     c000b34e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b32e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b332:	74 21                	je     c000b355 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b334:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b336:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b33a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b340:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b344:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b348:	5b                   	pop    ebx
c000b349:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b34c:	ff e0                	jmp    eax
c000b34e:	b8 0b 00 00 00       	mov    eax,0xb
c000b353:	eb 05                	jmp    c000b35a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b355:	b8 05 00 00 00       	mov    eax,0x5
c000b35a:	5b                   	pop    ebx
c000b35b:	c3                   	ret    

c000b35c <Directory::write(unsigned long long, void*, int*)>:
c000b35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b360:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b367:	b8 0b 00 00 00       	mov    eax,0xb
c000b36c:	83 fa 19             	cmp    edx,0x19
c000b36f:	77 18                	ja     c000b389 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b371:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b378:	85 d2                	test   edx,edx
c000b37a:	74 0d                	je     c000b389 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b37c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b383:	19 c0                	sbb    eax,eax
c000b385:	83 e0 0a             	and    eax,0xa
c000b388:	40                   	inc    eax
c000b389:	c3                   	ret    

c000b38a <File::isAtty()>:
c000b38a:	31 c0                	xor    eax,eax
c000b38c:	c3                   	ret    
c000b38d:	90                   	nop

c000b38e <Directory::isAtty()>:
c000b38e:	31 c0                	xor    eax,eax
c000b390:	c3                   	ret    
c000b391:	90                   	nop

c000b392 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b392:	b8 0a 00 00 00       	mov    eax,0xa
c000b397:	c3                   	ret    

c000b398 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b398:	b8 0a 00 00 00       	mov    eax,0xa
c000b39d:	c3                   	ret    

c000b39e <Filesystem::allocateSwapfile(char const*, int)>:
c000b39e:	31 c0                	xor    eax,eax
c000b3a0:	31 d2                	xor    edx,edx
c000b3a2:	c3                   	ret    
c000b3a3:	90                   	nop

c000b3a4 <File::~File()>:
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000b3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b0:	89 10                	mov    DWORD PTR [eax],edx
c000b3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b6:	83 ec 0c             	sub    esp,0xc
c000b3b9:	50                   	push   eax
c000b3ba:	e8 cd df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	90                   	nop
c000b3c3:	83 c4 0c             	add    esp,0xc
c000b3c6:	c3                   	ret    
c000b3c7:	90                   	nop

c000b3c8 <File::~File()>:
c000b3c8:	83 ec 0c             	sub    esp,0xc
c000b3cb:	83 ec 0c             	sub    esp,0xc
c000b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d2:	e8 cd ff ff ff       	call   c000b3a4 <File::~File()>
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	83 ec 08             	sub    esp,0x8
c000b3dd:	68 14 01 00 00       	push   0x114
c000b3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e6:	e8 21 f4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	83 c4 0c             	add    esp,0xc
c000b3f1:	c3                   	ret    

c000b3f2 <Directory::~Directory()>:
c000b3f2:	83 ec 0c             	sub    esp,0xc
c000b3f5:	ba 60 12 02 c0       	mov    edx,0xc0021260
c000b3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fe:	89 10                	mov    DWORD PTR [eax],edx
c000b400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	50                   	push   eax
c000b408:	e8 7f df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b40d:	83 c4 10             	add    esp,0x10
c000b410:	90                   	nop
c000b411:	83 c4 0c             	add    esp,0xc
c000b414:	c3                   	ret    
c000b415:	90                   	nop

c000b416 <Directory::~Directory()>:
c000b416:	83 ec 0c             	sub    esp,0xc
c000b419:	83 ec 0c             	sub    esp,0xc
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 cd ff ff ff       	call   c000b3f2 <Directory::~Directory()>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 ec 08             	sub    esp,0x8
c000b42b:	68 14 01 00 00       	push   0x114
c000b430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b434:	e8 d3 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	83 c4 0c             	add    esp,0xc
c000b43f:	c3                   	ret    

c000b440 <Filesystem::Filesystem()>:
c000b440:	ba d8 11 02 c0       	mov    edx,0xc00211d8
c000b445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b449:	89 10                	mov    DWORD PTR [eax],edx
c000b44b:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b455:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b45c:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b461:	90                   	nop
c000b462:	c3                   	ret    
c000b463:	90                   	nop

c000b464 <Filesystem::~Filesystem()>:
c000b464:	ba d8 11 02 c0       	mov    edx,0xc00211d8
c000b469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46d:	89 10                	mov    DWORD PTR [eax],edx
c000b46f:	90                   	nop
c000b470:	c3                   	ret    
c000b471:	90                   	nop

c000b472 <Filesystem::~Filesystem()>:
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b479:	e8 e6 ff ff ff       	call   c000b464 <Filesystem::~Filesystem()>
c000b47e:	83 c4 04             	add    esp,0x4
c000b481:	83 ec 08             	sub    esp,0x8
c000b484:	6a 08                	push   0x8
c000b486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48a:	e8 7d f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b48f:	83 c4 10             	add    esp,0x10
c000b492:	83 c4 0c             	add    esp,0xc
c000b495:	c3                   	ret    

c000b496 <Fs::getcwd(Process*, char*, int)>:
c000b496:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b49a:	31 c0                	xor    eax,eax
c000b49c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4a0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4a3:	7d 15                	jge    c000b4ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b4a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4b3:	84 c9                	test   cl,cl
c000b4b5:	74 06                	je     c000b4bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b4b7:	40                   	inc    eax
c000b4b8:	eb e2                	jmp    c000b49c <Fs::getcwd(Process*, char*, int)+0x6>
c000b4ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4bd:	31 c0                	xor    eax,eax
c000b4bf:	c3                   	ret    

c000b4c0 <Fs::initVFS()>:
c000b4c0:	83 ec 18             	sub    esp,0x18
c000b4c3:	6a 08                	push   0x8
c000b4c5:	e8 09 c6 ff ff       	call   c0007ad3 <malloc>
c000b4ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b4cd:	e8 f2 e0 00 00       	call   c00195c4 <FAT::FAT()>
c000b4d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b4d9:	e8 f5 c5 ff ff       	call   c0007ad3 <malloc>
c000b4de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b4e1:	e8 0c f0 00 00       	call   c001a4f2 <ISO9660::ISO9660()>
c000b4e6:	83 c4 1c             	add    esp,0x1c
c000b4e9:	c3                   	ret    

c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b4ea:	55                   	push   ebp
c000b4eb:	57                   	push   edi
c000b4ec:	56                   	push   esi
c000b4ed:	53                   	push   ebx
c000b4ee:	81 ec 20 04 00 00    	sub    esp,0x420
c000b4f4:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b4fb:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b502:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b509:	68 00 04 00 00       	push   0x400
c000b50e:	6a 00                	push   0x0
c000b510:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b514:	56                   	push   esi
c000b515:	e8 d6 4f ff ff       	call   c00004f0 <memset>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b521:	75 0b                	jne    c000b52e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b523:	50                   	push   eax
c000b524:	50                   	push   eax
c000b525:	57                   	push   edi
c000b526:	56                   	push   esi
c000b527:	e8 24 51 ff ff       	call   c0000650 <strcpy>
c000b52c:	eb 45                	jmp    c000b573 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b52e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b531:	83 f8 2f             	cmp    eax,0x2f
c000b534:	74 05                	je     c000b53b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b536:	83 f8 5c             	cmp    eax,0x5c
c000b539:	75 19                	jne    c000b554 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b53b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b53e:	3c 60                	cmp    al,0x60
c000b540:	7e 03                	jle    c000b545 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b542:	83 e8 20             	sub    eax,0x20
c000b545:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b549:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b550:	50                   	push   eax
c000b551:	50                   	push   eax
c000b552:	eb 18                	jmp    c000b56c <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b554:	50                   	push   eax
c000b555:	50                   	push   eax
c000b556:	55                   	push   ebp
c000b557:	56                   	push   esi
c000b558:	e8 f3 50 ff ff       	call   c0000650 <strcpy>
c000b55d:	5a                   	pop    edx
c000b55e:	59                   	pop    ecx
c000b55f:	68 78 21 02 c0       	push   0xc0022178
c000b564:	56                   	push   esi
c000b565:	e8 06 53 ff ff       	call   c0000870 <strcat>
c000b56a:	5d                   	pop    ebp
c000b56b:	58                   	pop    eax
c000b56c:	57                   	push   edi
c000b56d:	56                   	push   esi
c000b56e:	e8 fd 52 ff ff       	call   c0000870 <strcat>
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b57a:	3c 60                	cmp    al,0x60
c000b57c:	7e 03                	jle    c000b581 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b57e:	83 e8 20             	sub    eax,0x20
c000b581:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b585:	88 03                	mov    BYTE PTR [ebx],al
c000b587:	b8 03 00 00 00       	mov    eax,0x3
c000b58c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b593:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b599:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b59d:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b5a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b5a9:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b5ae:	89 fa                	mov    edx,edi
c000b5b0:	0f be ea             	movsx  ebp,dl
c000b5b3:	85 ed                	test   ebp,ebp
c000b5b5:	0f 84 af 00 00 00    	je     c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5bf:	42                   	inc    edx
c000b5c0:	83 fd 2f             	cmp    ebp,0x2f
c000b5c3:	74 05                	je     c000b5ca <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b5c5:	83 fd 5c             	cmp    ebp,0x5c
c000b5c8:	75 14                	jne    c000b5de <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5ca:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b5cf:	89 c5                	mov    ebp,eax
c000b5d1:	74 0b                	je     c000b5de <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5d3:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b5d7:	40                   	inc    eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	eb c7                	jmp    c000b5a5 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b5de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b5e2:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b5e7:	89 f9                	mov    ecx,edi
c000b5e9:	0f be e9             	movsx  ebp,cl
c000b5ec:	75 63                	jne    c000b651 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b5ee:	83 fd 2e             	cmp    ebp,0x2e
c000b5f1:	75 5e                	jne    c000b651 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b5f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b5f7:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b5fc:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b601:	74 18                	je     c000b61b <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b603:	83 fd 2e             	cmp    ebp,0x2e
c000b606:	74 57                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b608:	89 ca                	mov    edx,ecx
c000b60a:	42                   	inc    edx
c000b60b:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b60f:	83 f9 2f             	cmp    ecx,0x2f
c000b612:	74 f6                	je     c000b60a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b614:	83 f9 5c             	cmp    ecx,0x5c
c000b617:	74 f1                	je     c000b60a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b619:	eb bd                	jmp    c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b61b:	83 fd 2e             	cmp    ebp,0x2e
c000b61e:	74 3f                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b620:	83 f8 03             	cmp    eax,0x3
c000b623:	74 b3                	je     c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b625:	42                   	inc    edx
c000b626:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b62a:	83 f9 2f             	cmp    ecx,0x2f
c000b62d:	74 f6                	je     c000b625 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b62f:	83 f9 5c             	cmp    ecx,0x5c
c000b632:	74 f1                	je     c000b625 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b634:	48                   	dec    eax
c000b635:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b639:	75 06                	jne    c000b641 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b63b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b63f:	eb f3                	jmp    c000b634 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b641:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b645:	74 07                	je     c000b64e <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b647:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b64b:	48                   	dec    eax
c000b64c:	eb f3                	jmp    c000b641 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b64e:	40                   	inc    eax
c000b64f:	eb 87                	jmp    c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b651:	83 fd 2f             	cmp    ebp,0x2f
c000b654:	74 82                	je     c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b656:	83 fd 5c             	cmp    ebp,0x5c
c000b659:	0f 84 79 ff ff ff    	je     c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b65f:	89 f9                	mov    ecx,edi
c000b661:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b664:	40                   	inc    eax
c000b665:	e9 6e ff ff ff       	jmp    c000b5d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b66a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	53                   	push   ebx
c000b672:	e8 09 4f ff ff       	call   c0000580 <strlen>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b67f:	75 26                	jne    c000b6a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b681:	83 ec 0c             	sub    esp,0xc
c000b684:	53                   	push   ebx
c000b685:	e8 f6 4e ff ff       	call   c0000580 <strlen>
c000b68a:	83 c4 10             	add    esp,0x10
c000b68d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b692:	74 26                	je     c000b6ba <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b694:	83 ec 0c             	sub    esp,0xc
c000b697:	53                   	push   ebx
c000b698:	e8 e3 4e ff ff       	call   c0000580 <strlen>
c000b69d:	83 c4 10             	add    esp,0x10
c000b6a0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6a5:	eb c7                	jmp    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b6a7:	83 ec 0c             	sub    esp,0xc
c000b6aa:	53                   	push   ebx
c000b6ab:	e8 d0 4e ff ff       	call   c0000580 <strlen>
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6b8:	74 c7                	je     c000b681 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6ba:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b6c0:	5b                   	pop    ebx
c000b6c1:	5e                   	pop    esi
c000b6c2:	5f                   	pop    edi
c000b6c3:	5d                   	pop    ebp
c000b6c4:	c3                   	ret    
c000b6c5:	90                   	nop

c000b6c6 <File::File(char const*, Process*)>:
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6cd:	83 ec 08             	sub    esp,0x8
c000b6d0:	6a 00                	push   0x0
c000b6d2:	50                   	push   eax
c000b6d3:	e8 ce da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e4:	89 10                	mov    DWORD PTR [eax],edx
c000b6e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f4:	83 c0 0d             	add    eax,0xd
c000b6f7:	83 ec 04             	sub    esp,0x4
c000b6fa:	52                   	push   edx
c000b6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ff:	50                   	push   eax
c000b700:	e8 e5 fd ff ff       	call   c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000b705:	83 c4 10             	add    esp,0x10
c000b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b70f:	83 e8 41             	sub    eax,0x41
c000b712:	88 c2                	mov    dl,al
c000b714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b718:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b722:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b730:	0f b6 c0             	movzx  eax,al
c000b733:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b73a:	85 c0                	test   eax,eax
c000b73c:	74 3e                	je     c000b77c <File::File(char const*, Process*)+0xb6>
c000b73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b742:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b748:	0f b6 c0             	movzx  eax,al
c000b74b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b752:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b758:	85 c0                	test   eax,eax
c000b75a:	75 20                	jne    c000b77c <File::File(char const*, Process*)+0xb6>
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b766:	0f b6 c0             	movzx  eax,al
c000b769:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b770:	83 ec 0c             	sub    esp,0xc
c000b773:	50                   	push   eax
c000b774:	e8 83 21 00 00       	call   c000d8fc <LogicalDisk::mount()>
c000b779:	83 c4 10             	add    esp,0x10
c000b77c:	90                   	nop
c000b77d:	83 c4 0c             	add    esp,0xc
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <File::open(FileOpenMode)>:
c000b782:	53                   	push   ebx
c000b783:	b8 0b 00 00 00       	mov    eax,0xb
c000b788:	83 ec 08             	sub    esp,0x8
c000b78b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b78f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b796:	83 fa 19             	cmp    edx,0x19
c000b799:	77 40                	ja     c000b7db <File::open(FileOpenMode)+0x59>
c000b79b:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7a2:	85 d2                	test   edx,edx
c000b7a4:	74 35                	je     c000b7db <File::open(FileOpenMode)+0x59>
c000b7a6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7ac:	85 d2                	test   edx,edx
c000b7ae:	74 2b                	je     c000b7db <File::open(FileOpenMode)+0x59>
c000b7b0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7b4:	b8 06 00 00 00       	mov    eax,0x6
c000b7b9:	75 20                	jne    c000b7db <File::open(FileOpenMode)+0x59>
c000b7bb:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c7:	51                   	push   ecx
c000b7c8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7cb:	51                   	push   ecx
c000b7cc:	52                   	push   edx
c000b7cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b7d0:	83 c4 10             	add    esp,0x10
c000b7d3:	85 c0                	test   eax,eax
c000b7d5:	75 04                	jne    c000b7db <File::open(FileOpenMode)+0x59>
c000b7d7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7db:	83 c4 08             	add    esp,0x8
c000b7de:	5b                   	pop    ebx
c000b7df:	c3                   	ret    

c000b7e0 <File::close()>:
c000b7e0:	53                   	push   ebx
c000b7e1:	b8 0b 00 00 00       	mov    eax,0xb
c000b7e6:	83 ec 08             	sub    esp,0x8
c000b7e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7f4:	83 f9 19             	cmp    ecx,0x19
c000b7f7:	77 41                	ja     c000b83a <File::close()+0x5a>
c000b7f9:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b800:	85 db                	test   ebx,ebx
c000b802:	74 36                	je     c000b83a <File::close()+0x5a>
c000b804:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b80b:	74 2d                	je     c000b83a <File::close()+0x5a>
c000b80d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b811:	b8 05 00 00 00       	mov    eax,0x5
c000b816:	74 22                	je     c000b83a <File::close()+0x5a>
c000b818:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b81c:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b823:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b829:	53                   	push   ebx
c000b82a:	53                   	push   ebx
c000b82b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b82d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b833:	50                   	push   eax
c000b834:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b837:	83 c4 10             	add    esp,0x10
c000b83a:	83 c4 08             	add    esp,0x8
c000b83d:	5b                   	pop    ebx
c000b83e:	c3                   	ret    
c000b83f:	90                   	nop

c000b840 <File::seek(unsigned long long)>:
c000b840:	56                   	push   esi
c000b841:	b8 0b 00 00 00       	mov    eax,0xb
c000b846:	53                   	push   ebx
c000b847:	51                   	push   ecx
c000b848:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b84c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b850:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b854:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b85b:	83 fa 19             	cmp    edx,0x19
c000b85e:	77 31                	ja     c000b891 <File::seek(unsigned long long)+0x51>
c000b860:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b867:	85 d2                	test   edx,edx
c000b869:	74 26                	je     c000b891 <File::seek(unsigned long long)+0x51>
c000b86b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b871:	85 d2                	test   edx,edx
c000b873:	74 1c                	je     c000b891 <File::seek(unsigned long long)+0x51>
c000b875:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b879:	b8 05 00 00 00       	mov    eax,0x5
c000b87e:	74 11                	je     c000b891 <File::seek(unsigned long long)+0x51>
c000b880:	8b 02                	mov    eax,DWORD PTR [edx]
c000b882:	53                   	push   ebx
c000b883:	51                   	push   ecx
c000b884:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b88a:	52                   	push   edx
c000b88b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b88e:	83 c4 10             	add    esp,0x10
c000b891:	5a                   	pop    edx
c000b892:	5b                   	pop    ebx
c000b893:	5e                   	pop    esi
c000b894:	c3                   	ret    
c000b895:	90                   	nop

c000b896 <File::truncate(unsigned long long)>:
c000b896:	56                   	push   esi
c000b897:	b8 0b 00 00 00       	mov    eax,0xb
c000b89c:	53                   	push   ebx
c000b89d:	51                   	push   ecx
c000b89e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8aa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8b1:	83 fa 19             	cmp    edx,0x19
c000b8b4:	77 31                	ja     c000b8e7 <File::truncate(unsigned long long)+0x51>
c000b8b6:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8bd:	85 d2                	test   edx,edx
c000b8bf:	74 26                	je     c000b8e7 <File::truncate(unsigned long long)+0x51>
c000b8c1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8c7:	85 d2                	test   edx,edx
c000b8c9:	74 1c                	je     c000b8e7 <File::truncate(unsigned long long)+0x51>
c000b8cb:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8cf:	b8 05 00 00 00       	mov    eax,0x5
c000b8d4:	74 11                	je     c000b8e7 <File::truncate(unsigned long long)+0x51>
c000b8d6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8d8:	53                   	push   ebx
c000b8d9:	51                   	push   ecx
c000b8da:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8e0:	52                   	push   edx
c000b8e1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b8e4:	83 c4 10             	add    esp,0x10
c000b8e7:	5a                   	pop    edx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	5e                   	pop    esi
c000b8ea:	c3                   	ret    
c000b8eb:	90                   	nop

c000b8ec <File::tell(unsigned long long*)>:
c000b8ec:	83 ec 0c             	sub    esp,0xc
c000b8ef:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8ff:	83 fa 19             	cmp    edx,0x19
c000b902:	77 34                	ja     c000b938 <File::tell(unsigned long long*)+0x4c>
c000b904:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b90b:	85 d2                	test   edx,edx
c000b90d:	74 29                	je     c000b938 <File::tell(unsigned long long*)+0x4c>
c000b90f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b915:	85 d2                	test   edx,edx
c000b917:	74 1f                	je     c000b938 <File::tell(unsigned long long*)+0x4c>
c000b919:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b91d:	b8 05 00 00 00       	mov    eax,0x5
c000b922:	74 14                	je     c000b938 <File::tell(unsigned long long*)+0x4c>
c000b924:	50                   	push   eax
c000b925:	8b 02                	mov    eax,DWORD PTR [edx]
c000b927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b92b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b931:	52                   	push   edx
c000b932:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b935:	83 c4 10             	add    esp,0x10
c000b938:	83 c4 0c             	add    esp,0xc
c000b93b:	c3                   	ret    

c000b93c <File::rewind()>:
c000b93c:	83 ec 10             	sub    esp,0x10
c000b93f:	6a 00                	push   0x0
c000b941:	6a 00                	push   0x0
c000b943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b947:	e8 f4 fe ff ff       	call   c000b840 <File::seek(unsigned long long)>
c000b94c:	83 c4 1c             	add    esp,0x1c
c000b94f:	c3                   	ret    

c000b950 <File::unlink()>:
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	b8 0b 00 00 00       	mov    eax,0xb
c000b958:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b95c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b963:	83 f9 19             	cmp    ecx,0x19
c000b966:	77 2f                	ja     c000b997 <File::unlink()+0x47>
c000b968:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b96f:	85 c9                	test   ecx,ecx
c000b971:	74 24                	je     c000b997 <File::unlink()+0x47>
c000b973:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b979:	85 c9                	test   ecx,ecx
c000b97b:	74 1a                	je     c000b997 <File::unlink()+0x47>
c000b97d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b981:	b8 06 00 00 00       	mov    eax,0x6
c000b986:	75 0f                	jne    c000b997 <File::unlink()+0x47>
c000b988:	50                   	push   eax
c000b989:	83 c2 0d             	add    edx,0xd
c000b98c:	50                   	push   eax
c000b98d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b98f:	52                   	push   edx
c000b990:	51                   	push   ecx
c000b991:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	83 c4 0c             	add    esp,0xc
c000b99a:	c3                   	ret    
c000b99b:	90                   	nop

c000b99c <File::rename(char const*)>:
c000b99c:	83 ec 0c             	sub    esp,0xc
c000b99f:	b8 0b 00 00 00       	mov    eax,0xb
c000b9a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9af:	83 f9 19             	cmp    ecx,0x19
c000b9b2:	77 32                	ja     c000b9e6 <File::rename(char const*)+0x4a>
c000b9b4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9bb:	85 c9                	test   ecx,ecx
c000b9bd:	74 27                	je     c000b9e6 <File::rename(char const*)+0x4a>
c000b9bf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9c5:	85 c9                	test   ecx,ecx
c000b9c7:	74 1d                	je     c000b9e6 <File::rename(char const*)+0x4a>
c000b9c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9cd:	b8 06 00 00 00       	mov    eax,0x6
c000b9d2:	75 12                	jne    c000b9e6 <File::rename(char const*)+0x4a>
c000b9d4:	50                   	push   eax
c000b9d5:	83 c2 0d             	add    edx,0xd
c000b9d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9de:	52                   	push   edx
c000b9df:	51                   	push   ecx
c000b9e0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b9e3:	83 c4 10             	add    esp,0x10
c000b9e6:	83 c4 0c             	add    esp,0xc
c000b9e9:	c3                   	ret    

c000b9ea <File::chfatattr(unsigned char, unsigned char)>:
c000b9ea:	57                   	push   edi
c000b9eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b9f0:	56                   	push   esi
c000b9f1:	53                   	push   ebx
c000b9f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b9fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba05:	83 f9 19             	cmp    ecx,0x19
c000ba08:	77 37                	ja     c000ba41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba0a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba11:	85 c9                	test   ecx,ecx
c000ba13:	74 2c                	je     c000ba41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba15:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba1b:	85 c9                	test   ecx,ecx
c000ba1d:	74 22                	je     c000ba41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba23:	b8 06 00 00 00       	mov    eax,0x6
c000ba28:	75 17                	jne    c000ba41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba2a:	89 f0                	mov    eax,esi
c000ba2c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba2e:	0f b6 db             	movzx  ebx,bl
c000ba31:	0f b6 f0             	movzx  esi,al
c000ba34:	83 c2 0d             	add    edx,0xd
c000ba37:	56                   	push   esi
c000ba38:	53                   	push   ebx
c000ba39:	52                   	push   edx
c000ba3a:	51                   	push   ecx
c000ba3b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba3e:	83 c4 10             	add    esp,0x10
c000ba41:	5b                   	pop    ebx
c000ba42:	5e                   	pop    esi
c000ba43:	5f                   	pop    edi
c000ba44:	c3                   	ret    
c000ba45:	90                   	nop

c000ba46 <File::exists()>:
c000ba46:	83 ec 0c             	sub    esp,0xc
c000ba49:	31 c0                	xor    eax,eax
c000ba4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba56:	83 f9 19             	cmp    ecx,0x19
c000ba59:	77 24                	ja     c000ba7f <File::exists()+0x39>
c000ba5b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba62:	85 c9                	test   ecx,ecx
c000ba64:	74 19                	je     c000ba7f <File::exists()+0x39>
c000ba66:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba6c:	85 c9                	test   ecx,ecx
c000ba6e:	74 0f                	je     c000ba7f <File::exists()+0x39>
c000ba70:	50                   	push   eax
c000ba71:	83 c2 0d             	add    edx,0xd
c000ba74:	50                   	push   eax
c000ba75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba77:	52                   	push   edx
c000ba78:	51                   	push   ecx
c000ba79:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000ba7c:	83 c4 10             	add    esp,0x10
c000ba7f:	83 c4 0c             	add    esp,0xc
c000ba82:	c3                   	ret    
c000ba83:	90                   	nop

c000ba84 <File::stat(unsigned long long*, bool*)>:
c000ba84:	56                   	push   esi
c000ba85:	53                   	push   ebx
c000ba86:	50                   	push   eax
c000ba87:	b8 0b 00 00 00       	mov    eax,0xb
c000ba8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba9f:	83 f9 19             	cmp    ecx,0x19
c000baa2:	77 3d                	ja     c000bae1 <File::stat(unsigned long long*, bool*)+0x5d>
c000baa4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000baab:	85 c9                	test   ecx,ecx
c000baad:	74 32                	je     c000bae1 <File::stat(unsigned long long*, bool*)+0x5d>
c000baaf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bab5:	85 c9                	test   ecx,ecx
c000bab7:	74 28                	je     c000bae1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bab9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000babd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000babf:	74 13                	je     c000bad4 <File::stat(unsigned long long*, bool*)+0x50>
c000bac1:	83 ec 04             	sub    esp,0x4
c000bac4:	56                   	push   esi
c000bac5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bacb:	51                   	push   ecx
c000bacc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bacf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bad2:	eb 0a                	jmp    c000bade <File::stat(unsigned long long*, bool*)+0x5a>
c000bad4:	53                   	push   ebx
c000bad5:	83 c2 0d             	add    edx,0xd
c000bad8:	56                   	push   esi
c000bad9:	52                   	push   edx
c000bada:	51                   	push   ecx
c000badb:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bade:	83 c4 10             	add    esp,0x10
c000bae1:	5a                   	pop    edx
c000bae2:	5b                   	pop    ebx
c000bae3:	5e                   	pop    esi
c000bae4:	c3                   	ret    

c000bae5 <Fs::setcwd(Process*, char*)>:
c000bae5:	55                   	push   ebp
c000bae6:	57                   	push   edi
c000bae7:	56                   	push   esi
c000bae8:	53                   	push   ebx
c000bae9:	81 ec 20 02 00 00    	sub    esp,0x220
c000baef:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000baf6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bafc:	57                   	push   edi
c000bafd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb04:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb08:	56                   	push   esi
c000bb09:	e8 dc f9 ff ff       	call   c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb0e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb11:	e8 6a 4a ff ff       	call   c0000580 <strlen>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	83 f8 02             	cmp    eax,0x2
c000bb1c:	77 15                	ja     c000bb33 <Fs::setcwd(Process*, char*)+0x4e>
c000bb1e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb23:	83 eb 41             	sub    ebx,0x41
c000bb26:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb2d:	85 c0                	test   eax,eax
c000bb2f:	75 1c                	jne    c000bb4d <Fs::setcwd(Process*, char*)+0x68>
c000bb31:	eb 2f                	jmp    c000bb62 <Fs::setcwd(Process*, char*)+0x7d>
c000bb33:	83 ec 0c             	sub    esp,0xc
c000bb36:	56                   	push   esi
c000bb37:	e8 44 4a ff ff       	call   c0000580 <strlen>
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	83 f8 03             	cmp    eax,0x3
c000bb42:	75 57                	jne    c000bb9b <Fs::setcwd(Process*, char*)+0xb6>
c000bb44:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb49:	75 50                	jne    c000bb9b <Fs::setcwd(Process*, char*)+0xb6>
c000bb4b:	eb d1                	jmp    c000bb1e <Fs::setcwd(Process*, char*)+0x39>
c000bb4d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb54:	75 0c                	jne    c000bb62 <Fs::setcwd(Process*, char*)+0x7d>
c000bb56:	83 ec 0c             	sub    esp,0xc
c000bb59:	50                   	push   eax
c000bb5a:	e8 9d 1d 00 00       	call   c000d8fc <LogicalDisk::mount()>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	83 fb 19             	cmp    ebx,0x19
c000bb65:	b8 03 00 00 00       	mov    eax,0x3
c000bb6a:	0f 87 c6 00 00 00    	ja     c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bb70:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb77:	b8 05 00 00 00       	mov    eax,0x5
c000bb7c:	85 d2                	test   edx,edx
c000bb7e:	0f 84 b2 00 00 00    	je     c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bb84:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bb8b:	b8 06 00 00 00       	mov    eax,0x6
c000bb90:	0f 85 92 00 00 00    	jne    c000bc28 <Fs::setcwd(Process*, char*)+0x143>
c000bb96:	e9 9b 00 00 00       	jmp    c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bb9b:	83 ec 0c             	sub    esp,0xc
c000bb9e:	68 14 01 00 00       	push   0x114
c000bba3:	e8 2b bf ff ff       	call   c0007ad3 <malloc>
c000bba8:	83 c4 0c             	add    esp,0xc
c000bbab:	55                   	push   ebp
c000bbac:	56                   	push   esi
c000bbad:	50                   	push   eax
c000bbae:	89 c3                	mov    ebx,eax
c000bbb0:	e8 11 fb ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c000bbb5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbba:	83 c4 0c             	add    esp,0xc
c000bbbd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbc1:	50                   	push   eax
c000bbc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbc6:	50                   	push   eax
c000bbc7:	53                   	push   ebx
c000bbc8:	e8 b7 fe ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 f8 02             	cmp    eax,0x2
c000bbd3:	74 27                	je     c000bbfc <Fs::setcwd(Process*, char*)+0x117>
c000bbd5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bbda:	75 1c                	jne    c000bbf8 <Fs::setcwd(Process*, char*)+0x113>
c000bbdc:	85 db                	test   ebx,ebx
c000bbde:	b8 02 00 00 00       	mov    eax,0x2
c000bbe3:	74 51                	je     c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bbe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbe7:	83 ec 0c             	sub    esp,0xc
c000bbea:	53                   	push   ebx
c000bbeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	b8 02 00 00 00       	mov    eax,0x2
c000bbf6:	eb 3e                	jmp    c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 1c                	je     c000bc18 <Fs::setcwd(Process*, char*)+0x133>
c000bbfc:	85 db                	test   ebx,ebx
c000bbfe:	b8 01 00 00 00       	mov    eax,0x1
c000bc03:	74 31                	je     c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bc05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc07:	83 ec 0c             	sub    esp,0xc
c000bc0a:	53                   	push   ebx
c000bc0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc0e:	83 c4 10             	add    esp,0x10
c000bc11:	b8 01 00 00 00       	mov    eax,0x1
c000bc16:	eb 1e                	jmp    c000bc36 <Fs::setcwd(Process*, char*)+0x151>
c000bc18:	85 db                	test   ebx,ebx
c000bc1a:	74 0c                	je     c000bc28 <Fs::setcwd(Process*, char*)+0x143>
c000bc1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc1e:	83 ec 0c             	sub    esp,0xc
c000bc21:	53                   	push   ebx
c000bc22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	50                   	push   eax
c000bc29:	50                   	push   eax
c000bc2a:	56                   	push   esi
c000bc2b:	57                   	push   edi
c000bc2c:	e8 1f 4a ff ff       	call   c0000650 <strcpy>
c000bc31:	83 c4 10             	add    esp,0x10
c000bc34:	31 c0                	xor    eax,eax
c000bc36:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc3c:	5b                   	pop    ebx
c000bc3d:	5e                   	pop    esi
c000bc3e:	5f                   	pop    edi
c000bc3f:	5d                   	pop    ebp
c000bc40:	c3                   	ret    
c000bc41:	90                   	nop

c000bc42 <Directory::Directory(char const*, Process*)>:
c000bc42:	83 ec 0c             	sub    esp,0xc
c000bc45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc49:	83 ec 08             	sub    esp,0x8
c000bc4c:	6a 00                	push   0x0
c000bc4e:	50                   	push   eax
c000bc4f:	e8 52 d5 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bc54:	83 c4 10             	add    esp,0x10
c000bc57:	ba 60 12 02 c0       	mov    edx,0xc0021260
c000bc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc60:	89 10                	mov    DWORD PTR [eax],edx
c000bc62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc70:	83 c0 0d             	add    eax,0xd
c000bc73:	83 ec 04             	sub    esp,0x4
c000bc76:	52                   	push   edx
c000bc77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc7b:	50                   	push   eax
c000bc7c:	e8 69 f8 ff ff       	call   c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000bc81:	83 c4 10             	add    esp,0x10
c000bc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc88:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bc8b:	83 e8 41             	sub    eax,0x41
c000bc8e:	88 c2                	mov    dl,al
c000bc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc94:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcac:	0f b6 c0             	movzx  eax,al
c000bcaf:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcb6:	85 c0                	test   eax,eax
c000bcb8:	74 3e                	je     c000bcf8 <Directory::Directory(char const*, Process*)+0xb6>
c000bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcc4:	0f b6 c0             	movzx  eax,al
c000bcc7:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcce:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bcd4:	85 c0                	test   eax,eax
c000bcd6:	75 20                	jne    c000bcf8 <Directory::Directory(char const*, Process*)+0xb6>
c000bcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bce2:	0f b6 c0             	movzx  eax,al
c000bce5:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	50                   	push   eax
c000bcf0:	e8 07 1c 00 00       	call   c000d8fc <LogicalDisk::mount()>
c000bcf5:	83 c4 10             	add    esp,0x10
c000bcf8:	90                   	nop
c000bcf9:	83 c4 0c             	add    esp,0xc
c000bcfc:	c3                   	ret    
c000bcfd:	90                   	nop

c000bcfe <Directory::open()>:
c000bcfe:	53                   	push   ebx
c000bcff:	b8 0b 00 00 00       	mov    eax,0xb
c000bd04:	83 ec 08             	sub    esp,0x8
c000bd07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd0b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd12:	83 fa 19             	cmp    edx,0x19
c000bd15:	77 3d                	ja     c000bd54 <Directory::open()+0x56>
c000bd17:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd1e:	85 d2                	test   edx,edx
c000bd20:	74 32                	je     c000bd54 <Directory::open()+0x56>
c000bd22:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd28:	85 d2                	test   edx,edx
c000bd2a:	74 28                	je     c000bd54 <Directory::open()+0x56>
c000bd2c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd30:	b8 06 00 00 00       	mov    eax,0x6
c000bd35:	75 1d                	jne    c000bd54 <Directory::open()+0x56>
c000bd37:	50                   	push   eax
c000bd38:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd3a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd40:	51                   	push   ecx
c000bd41:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd44:	51                   	push   ecx
c000bd45:	52                   	push   edx
c000bd46:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd49:	83 c4 10             	add    esp,0x10
c000bd4c:	85 c0                	test   eax,eax
c000bd4e:	75 04                	jne    c000bd54 <Directory::open()+0x56>
c000bd50:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd54:	83 c4 08             	add    esp,0x8
c000bd57:	5b                   	pop    ebx
c000bd58:	c3                   	ret    
c000bd59:	90                   	nop

c000bd5a <Directory::close()>:
c000bd5a:	53                   	push   ebx
c000bd5b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd60:	83 ec 08             	sub    esp,0x8
c000bd63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd67:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd6e:	83 f9 19             	cmp    ecx,0x19
c000bd71:	77 41                	ja     c000bdb4 <Directory::close()+0x5a>
c000bd73:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd7a:	85 db                	test   ebx,ebx
c000bd7c:	74 36                	je     c000bdb4 <Directory::close()+0x5a>
c000bd7e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bd85:	74 2d                	je     c000bdb4 <Directory::close()+0x5a>
c000bd87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd8b:	b8 05 00 00 00       	mov    eax,0x5
c000bd90:	74 22                	je     c000bdb4 <Directory::close()+0x5a>
c000bd92:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bd96:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd9d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bda3:	53                   	push   ebx
c000bda4:	53                   	push   ebx
c000bda5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bda7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdad:	50                   	push   eax
c000bdae:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	83 c4 08             	add    esp,0x8
c000bdb7:	5b                   	pop    ebx
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop

c000bdba <Directory::unlink()>:
c000bdba:	83 ec 0c             	sub    esp,0xc
c000bdbd:	b8 0b 00 00 00       	mov    eax,0xb
c000bdc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdcd:	83 f9 19             	cmp    ecx,0x19
c000bdd0:	77 2f                	ja     c000be01 <Directory::unlink()+0x47>
c000bdd2:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdd9:	85 c9                	test   ecx,ecx
c000bddb:	74 24                	je     c000be01 <Directory::unlink()+0x47>
c000bddd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bde3:	85 c9                	test   ecx,ecx
c000bde5:	74 1a                	je     c000be01 <Directory::unlink()+0x47>
c000bde7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdeb:	b8 06 00 00 00       	mov    eax,0x6
c000bdf0:	75 0f                	jne    c000be01 <Directory::unlink()+0x47>
c000bdf2:	50                   	push   eax
c000bdf3:	83 c2 0d             	add    edx,0xd
c000bdf6:	50                   	push   eax
c000bdf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf9:	52                   	push   edx
c000bdfa:	51                   	push   ecx
c000bdfb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdfe:	83 c4 10             	add    esp,0x10
c000be01:	83 c4 0c             	add    esp,0xc
c000be04:	c3                   	ret    
c000be05:	90                   	nop

c000be06 <Directory::rename(char const*)>:
c000be06:	83 ec 0c             	sub    esp,0xc
c000be09:	b8 0b 00 00 00       	mov    eax,0xb
c000be0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be19:	83 f9 19             	cmp    ecx,0x19
c000be1c:	77 32                	ja     c000be50 <Directory::rename(char const*)+0x4a>
c000be1e:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be25:	85 c9                	test   ecx,ecx
c000be27:	74 27                	je     c000be50 <Directory::rename(char const*)+0x4a>
c000be29:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be2f:	85 c9                	test   ecx,ecx
c000be31:	74 1d                	je     c000be50 <Directory::rename(char const*)+0x4a>
c000be33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be37:	b8 06 00 00 00       	mov    eax,0x6
c000be3c:	75 12                	jne    c000be50 <Directory::rename(char const*)+0x4a>
c000be3e:	50                   	push   eax
c000be3f:	83 c2 0d             	add    edx,0xd
c000be42:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be48:	52                   	push   edx
c000be49:	51                   	push   ecx
c000be4a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be4d:	83 c4 10             	add    esp,0x10
c000be50:	83 c4 0c             	add    esp,0xc
c000be53:	c3                   	ret    

c000be54 <Directory::exists()>:
c000be54:	83 ec 0c             	sub    esp,0xc
c000be57:	31 c0                	xor    eax,eax
c000be59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be64:	83 f9 19             	cmp    ecx,0x19
c000be67:	77 24                	ja     c000be8d <Directory::exists()+0x39>
c000be69:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be70:	85 c9                	test   ecx,ecx
c000be72:	74 19                	je     c000be8d <Directory::exists()+0x39>
c000be74:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be7a:	85 c9                	test   ecx,ecx
c000be7c:	74 0f                	je     c000be8d <Directory::exists()+0x39>
c000be7e:	50                   	push   eax
c000be7f:	83 c2 0d             	add    edx,0xd
c000be82:	50                   	push   eax
c000be83:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be85:	52                   	push   edx
c000be86:	51                   	push   ecx
c000be87:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be8a:	83 c4 10             	add    esp,0x10
c000be8d:	83 c4 0c             	add    esp,0xc
c000be90:	c3                   	ret    
c000be91:	90                   	nop

c000be92 <Directory::read(dirent*)>:
c000be92:	83 ec 1c             	sub    esp,0x1c
c000be95:	b8 0b 00 00 00       	mov    eax,0xb
c000be9a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bea5:	83 f9 19             	cmp    ecx,0x19
c000bea8:	77 30                	ja     c000beda <Directory::read(dirent*)+0x48>
c000beaa:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000beb1:	85 c9                	test   ecx,ecx
c000beb3:	74 25                	je     c000beda <Directory::read(dirent*)+0x48>
c000beb5:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bebc:	74 1c                	je     c000beda <Directory::read(dirent*)+0x48>
c000bebe:	83 ec 0c             	sub    esp,0xc
c000bec1:	8b 02                	mov    eax,DWORD PTR [edx]
c000bec3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bec7:	51                   	push   ecx
c000bec8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000becc:	6a 00                	push   0x0
c000bece:	68 10 01 00 00       	push   0x110
c000bed3:	52                   	push   edx
c000bed4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bed7:	83 c4 20             	add    esp,0x20
c000beda:	83 c4 1c             	add    esp,0x1c
c000bedd:	c3                   	ret    

c000bede <Directory::create()>:
c000bede:	83 ec 0c             	sub    esp,0xc
c000bee1:	b8 0b 00 00 00       	mov    eax,0xb
c000bee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bef1:	83 f9 19             	cmp    ecx,0x19
c000bef4:	77 2f                	ja     c000bf25 <Directory::create()+0x47>
c000bef6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000befd:	85 c9                	test   ecx,ecx
c000beff:	74 24                	je     c000bf25 <Directory::create()+0x47>
c000bf01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf07:	85 c9                	test   ecx,ecx
c000bf09:	74 1a                	je     c000bf25 <Directory::create()+0x47>
c000bf0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf0f:	b8 06 00 00 00       	mov    eax,0x6
c000bf14:	75 0f                	jne    c000bf25 <Directory::create()+0x47>
c000bf16:	50                   	push   eax
c000bf17:	83 c2 0d             	add    edx,0xd
c000bf1a:	50                   	push   eax
c000bf1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf1d:	52                   	push   edx
c000bf1e:	51                   	push   ecx
c000bf1f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	83 c4 0c             	add    esp,0xc
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf2a:	b8 0a 00 00 00       	mov    eax,0xa
c000bf2f:	c3                   	ret    

c000bf30 <Bus::Bus(char const*)>:
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf37:	83 ec 08             	sub    esp,0x8
c000bf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3e:	50                   	push   eax
c000bf3f:	e8 28 08 00 00       	call   c000c76c <Device::Device(char const*)>
c000bf44:	83 c4 10             	add    esp,0x10
c000bf47:	ba 7c 12 02 c0       	mov    edx,0xc002127c
c000bf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf50:	89 10                	mov    DWORD PTR [eax],edx
c000bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf56:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf60:	90                   	nop
c000bf61:	83 c4 0c             	add    esp,0xc
c000bf64:	c3                   	ret    
c000bf65:	90                   	nop
c000bf66:	66 90                	xchg   ax,ax

c000bf68 <Bus::~Bus()>:
c000bf68:	83 ec 0c             	sub    esp,0xc
c000bf6b:	ba 7c 12 02 c0       	mov    edx,0xc002127c
c000bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf74:	89 10                	mov    DWORD PTR [eax],edx
c000bf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf7a:	83 ec 0c             	sub    esp,0xc
c000bf7d:	50                   	push   eax
c000bf7e:	e8 53 05 00 00       	call   c000c4d6 <Device::~Device()>
c000bf83:	83 c4 10             	add    esp,0x10
c000bf86:	90                   	nop
c000bf87:	83 c4 0c             	add    esp,0xc
c000bf8a:	c3                   	ret    
c000bf8b:	90                   	nop

c000bf8c <Bus::~Bus()>:
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	83 ec 0c             	sub    esp,0xc
c000bf92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf96:	e8 cd ff ff ff       	call   c000bf68 <Bus::~Bus()>
c000bf9b:	83 c4 10             	add    esp,0x10
c000bf9e:	83 ec 08             	sub    esp,0x8
c000bfa1:	68 58 01 00 00       	push   0x158
c000bfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfaa:	e8 5d e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	83 c4 0c             	add    esp,0xc
c000bfb5:	c3                   	ret    

c000bfb6 <beepThread(void*)>:
c000bfb6:	83 ec 0c             	sub    esp,0xc
c000bfb9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bfbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfc2:	48                   	dec    eax
c000bfc3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bfc8:	75 01                	jne    c000bfcb <beepThread(void*)+0x15>
c000bfca:	fb                   	sti    
c000bfcb:	6b c2 0a             	imul   eax,edx,0xa
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	50                   	push   eax
c000bfd2:	e8 95 9d 00 00       	call   c0015d6c <milliTenthSleep(unsigned int)>
c000bfd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000bfde:	e8 e2 bc 00 00       	call   c0017cc5 <HalMakeBeep(int)>
c000bfe3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000bfeb:	83 c4 1c             	add    esp,0x1c
c000bfee:	e9 5d 9c 00 00       	jmp    c0015c50 <blockTask(TaskState)>

c000bff3 <Krnl::beep(int, int, bool)>:
c000bff3:	56                   	push   esi
c000bff4:	53                   	push   ebx
c000bff5:	83 ec 10             	sub    esp,0x10
c000bff8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bffc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c004:	e8 bc bc 00 00       	call   c0017cc5 <HalMakeBeep(int)>
c000c009:	89 f0                	mov    eax,esi
c000c00b:	83 c4 10             	add    esp,0x10
c000c00e:	84 c0                	test   al,al
c000c010:	74 1e                	je     c000c030 <Krnl::beep(int, int, bool)+0x3d>
c000c012:	6b db 0a             	imul   ebx,ebx,0xa
c000c015:	83 ec 0c             	sub    esp,0xc
c000c018:	53                   	push   ebx
c000c019:	e8 4e 9d 00 00       	call   c0015d6c <milliTenthSleep(unsigned int)>
c000c01e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c026:	83 c4 14             	add    esp,0x14
c000c029:	5b                   	pop    ebx
c000c02a:	5e                   	pop    esi
c000c02b:	e9 95 bc 00 00       	jmp    c0017cc5 <HalMakeBeep(int)>
c000c030:	68 e6 00 00 00       	push   0xe6
c000c035:	53                   	push   ebx
c000c036:	68 b6 bf 00 c0       	push   0xc000bfb6
c000c03b:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c041:	e8 be 97 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c000c046:	83 c4 14             	add    esp,0x14
c000c049:	5b                   	pop    ebx
c000c04a:	5e                   	pop    esi
c000c04b:	c3                   	ret    

c000c04c <User::loadClockSettings(int)>:
c000c04c:	53                   	push   ebx
c000c04d:	83 ec 14             	sub    esp,0x14
c000c050:	68 14 01 00 00       	push   0x114
c000c055:	e8 79 ba ff ff       	call   c0007ad3 <malloc>
c000c05a:	83 c4 0c             	add    esp,0xc
c000c05d:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c063:	68 a0 12 02 c0       	push   0xc00212a0
c000c068:	50                   	push   eax
c000c069:	89 c3                	mov    ebx,eax
c000c06b:	e8 56 f6 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c000c070:	58                   	pop    eax
c000c071:	5a                   	pop    edx
c000c072:	6a 01                	push   0x1
c000c074:	53                   	push   ebx
c000c075:	e8 08 f7 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c000c07a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c07d:	e8 5e f7 ff ff       	call   c000b7e0 <File::close()>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 db                	test   ebx,ebx
c000c087:	74 0f                	je     c000c098 <User::loadClockSettings(int)+0x4c>
c000c089:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c08b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c08f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c092:	83 c4 08             	add    esp,0x8
c000c095:	5b                   	pop    ebx
c000c096:	ff e0                	jmp    eax
c000c098:	83 c4 08             	add    esp,0x8
c000c09b:	5b                   	pop    ebx
c000c09c:	c3                   	ret    
c000c09d:	90                   	nop

c000c09e <Clock::Clock(char const*)>:
c000c09e:	83 ec 0c             	sub    esp,0xc
c000c0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a5:	83 ec 08             	sub    esp,0x8
c000c0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ac:	50                   	push   eax
c000c0ad:	e8 ba 06 00 00       	call   c000c76c <Device::Device(char const*)>
c000c0b2:	83 c4 10             	add    esp,0x10
c000c0b5:	ba c8 12 02 c0       	mov    edx,0xc00212c8
c000c0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0be:	89 10                	mov    DWORD PTR [eax],edx
c000c0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c0ce:	90                   	nop
c000c0cf:	83 c4 0c             	add    esp,0xc
c000c0d2:	c3                   	ret    
c000c0d3:	90                   	nop

c000c0d4 <Clock::~Clock()>:
c000c0d4:	83 ec 0c             	sub    esp,0xc
c000c0d7:	ba c8 12 02 c0       	mov    edx,0xc00212c8
c000c0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e0:	89 10                	mov    DWORD PTR [eax],edx
c000c0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	50                   	push   eax
c000c0ea:	e8 e7 03 00 00       	call   c000c4d6 <Device::~Device()>
c000c0ef:	83 c4 10             	add    esp,0x10
c000c0f2:	90                   	nop
c000c0f3:	83 c4 0c             	add    esp,0xc
c000c0f6:	c3                   	ret    
c000c0f7:	90                   	nop

c000c0f8 <Clock::~Clock()>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	83 ec 0c             	sub    esp,0xc
c000c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c102:	e8 cd ff ff ff       	call   c000c0d4 <Clock::~Clock()>
c000c107:	83 c4 10             	add    esp,0x10
c000c10a:	83 ec 08             	sub    esp,0x8
c000c10d:	68 58 01 00 00       	push   0x158
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 f1 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 c4 0c             	add    esp,0xc
c000c121:	c3                   	ret    

c000c122 <Clock::timeInSecondsLocal()>:
c000c122:	53                   	push   ebx
c000c123:	83 ec 14             	sub    esp,0x14
c000c126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c12a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c12c:	50                   	push   eax
c000c12d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c130:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c137:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c13d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c143:	89 cb                	mov    ebx,ecx
c000c145:	c1 fb 1f             	sar    ebx,0x1f
c000c148:	01 c8                	add    eax,ecx
c000c14a:	11 da                	adc    edx,ebx
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	31 c9                	xor    ecx,ecx
c000c151:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c158:	74 05                	je     c000c15f <Clock::timeInSecondsLocal()+0x3d>
c000c15a:	b9 08 07 00 00       	mov    ecx,0x708
c000c15f:	31 db                	xor    ebx,ebx
c000c161:	01 c8                	add    eax,ecx
c000c163:	11 da                	adc    edx,ebx
c000c165:	83 c4 08             	add    esp,0x8
c000c168:	5b                   	pop    ebx
c000c169:	c3                   	ret    

c000c16a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c16a:	57                   	push   edi
c000c16b:	56                   	push   esi
c000c16c:	53                   	push   ebx
c000c16d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c171:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c175:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c179:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c17b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c17e:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c185:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c18b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c191:	99                   	cdq    
c000c192:	29 c6                	sub    esi,eax
c000c194:	19 d7                	sbb    edi,edx
c000c196:	89 f0                	mov    eax,esi
c000c198:	31 f6                	xor    esi,esi
c000c19a:	89 fa                	mov    edx,edi
c000c19c:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1a3:	74 05                	je     c000c1aa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1a5:	be 08 07 00 00       	mov    esi,0x708
c000c1aa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1ae:	31 ff                	xor    edi,edi
c000c1b0:	29 f0                	sub    eax,esi
c000c1b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1b6:	19 fa                	sbb    edx,edi
c000c1b8:	89 d8                	mov    eax,ebx
c000c1ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1be:	5b                   	pop    ebx
c000c1bf:	5e                   	pop    esi
c000c1c0:	5f                   	pop    edi
c000c1c1:	ff e0                	jmp    eax

c000c1c3 <datetimeToSeconds(datetime_t)>:
c000c1c3:	55                   	push   ebp
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 0c             	sub    esp,0xc
c000c1ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c1ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c1d2:	89 f7                	mov    edi,esi
c000c1d4:	89 f0                	mov    eax,esi
c000c1d6:	0f b6 cf             	movzx  ecx,bh
c000c1d9:	0f b6 c4             	movzx  eax,ah
c000c1dc:	c1 ef 10             	shr    edi,0x10
c000c1df:	89 da                	mov    edx,ebx
c000c1e1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c1e4:	89 f9                	mov    ecx,edi
c000c1e6:	0f b6 f9             	movzx  edi,cl
c000c1e9:	89 f1                	mov    ecx,esi
c000c1eb:	6b c0 3c             	imul   eax,eax,0x3c
c000c1ee:	0f b6 f1             	movzx  esi,cl
c000c1f1:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c1f7:	0f b6 db             	movzx  ebx,bl
c000c1fa:	c1 ea 10             	shr    edx,0x10
c000c1fd:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c203:	01 f8                	add    eax,edi
c000c205:	01 f0                	add    eax,esi
c000c207:	89 04 24             	mov    DWORD PTR [esp],eax
c000c20a:	c1 f8 1f             	sar    eax,0x1f
c000c20d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c211:	89 e8                	mov    eax,ebp
c000c213:	0f b6 c0             	movzx  eax,al
c000c216:	8b 0c 85 00 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffded00]
c000c21d:	83 f8 01             	cmp    eax,0x1
c000c220:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c224:	0f b7 da             	movzx  ebx,dx
c000c227:	76 27                	jbe    c000c250 <datetimeToSeconds(datetime_t)+0x8d>
c000c229:	80 e2 03             	and    dl,0x3
c000c22c:	75 22                	jne    c000c250 <datetimeToSeconds(datetime_t)+0x8d>
c000c22e:	31 d2                	xor    edx,edx
c000c230:	be 64 00 00 00       	mov    esi,0x64
c000c235:	89 d8                	mov    eax,ebx
c000c237:	f7 f6                	div    esi
c000c239:	85 d2                	test   edx,edx
c000c23b:	75 12                	jne    c000c24f <datetimeToSeconds(datetime_t)+0x8c>
c000c23d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c243:	be 90 01 00 00       	mov    esi,0x190
c000c248:	99                   	cdq    
c000c249:	f7 fe                	idiv   esi
c000c24b:	85 d2                	test   edx,edx
c000c24d:	75 01                	jne    c000c250 <datetimeToSeconds(datetime_t)+0x8d>
c000c24f:	41                   	inc    ecx
c000c250:	83 fb 46             	cmp    ebx,0x46
c000c253:	76 48                	jbe    c000c29d <datetimeToSeconds(datetime_t)+0xda>
c000c255:	be 46 00 00 00       	mov    esi,0x46
c000c25a:	bf 64 00 00 00       	mov    edi,0x64
c000c25f:	bd 90 01 00 00       	mov    ebp,0x190
c000c264:	f7 c6 03 00 00 00    	test   esi,0x3
c000c26a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c26f:	75 23                	jne    c000c294 <datetimeToSeconds(datetime_t)+0xd1>
c000c271:	89 f0                	mov    eax,esi
c000c273:	99                   	cdq    
c000c274:	f7 ff                	idiv   edi
c000c276:	b8 6e 01 00 00       	mov    eax,0x16e
c000c27b:	85 d2                	test   edx,edx
c000c27d:	75 15                	jne    c000c294 <datetimeToSeconds(datetime_t)+0xd1>
c000c27f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c285:	99                   	cdq    
c000c286:	f7 fd                	idiv   ebp
c000c288:	83 fa 01             	cmp    edx,0x1
c000c28b:	19 c0                	sbb    eax,eax
c000c28d:	f7 d0                	not    eax
c000c28f:	05 6e 01 00 00       	add    eax,0x16e
c000c294:	46                   	inc    esi
c000c295:	01 c1                	add    ecx,eax
c000c297:	39 de                	cmp    esi,ebx
c000c299:	7c c9                	jl     c000c264 <datetimeToSeconds(datetime_t)+0xa1>
c000c29b:	eb 34                	jmp    c000c2d1 <datetimeToSeconds(datetime_t)+0x10e>
c000c29d:	74 32                	je     c000c2d1 <datetimeToSeconds(datetime_t)+0x10e>
c000c29f:	b8 45 00 00 00       	mov    eax,0x45
c000c2a4:	89 c2                	mov    edx,eax
c000c2a6:	83 e2 03             	and    edx,0x3
c000c2a9:	39 d8                	cmp    eax,ebx
c000c2ab:	7e 0f                	jle    c000c2bc <datetimeToSeconds(datetime_t)+0xf9>
c000c2ad:	83 fa 01             	cmp    edx,0x1
c000c2b0:	19 d2                	sbb    edx,edx
c000c2b2:	48                   	dec    eax
c000c2b3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2ba:	eb e8                	jmp    c000c2a4 <datetimeToSeconds(datetime_t)+0xe1>
c000c2bc:	85 d2                	test   edx,edx
c000c2be:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2c3:	75 0a                	jne    c000c2cf <datetimeToSeconds(datetime_t)+0x10c>
c000c2c5:	83 fb 01             	cmp    ebx,0x1
c000c2c8:	19 c0                	sbb    eax,eax
c000c2ca:	05 6e 01 00 00       	add    eax,0x16e
c000c2cf:	29 c1                	sub    ecx,eax
c000c2d1:	b8 80 51 01 00       	mov    eax,0x15180
c000c2d6:	f7 e9                	imul   ecx
c000c2d8:	03 04 24             	add    eax,DWORD PTR [esp]
c000c2db:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c2df:	83 c4 0c             	add    esp,0xc
c000c2e2:	5b                   	pop    ebx
c000c2e3:	5e                   	pop    esi
c000c2e4:	5f                   	pop    edi
c000c2e5:	5d                   	pop    ebp
c000c2e6:	c3                   	ret    
c000c2e7:	90                   	nop

c000c2e8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c2e8:	57                   	push   edi
c000c2e9:	56                   	push   esi
c000c2ea:	53                   	push   ebx
c000c2eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c2ef:	8b 06                	mov    eax,DWORD PTR [esi]
c000c2f1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c2f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2fc:	e8 c2 fe ff ff       	call   c000c1c3 <datetimeToSeconds(datetime_t)>
c000c301:	59                   	pop    ecx
c000c302:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c309:	5b                   	pop    ebx
c000c30a:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c310:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c316:	89 cb                	mov    ebx,ecx
c000c318:	c1 fb 1f             	sar    ebx,0x1f
c000c31b:	29 c8                	sub    eax,ecx
c000c31d:	19 da                	sbb    edx,ebx
c000c31f:	31 c9                	xor    ecx,ecx
c000c321:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c328:	74 05                	je     c000c32f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c32a:	b9 08 07 00 00       	mov    ecx,0x708
c000c32f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c333:	31 db                	xor    ebx,ebx
c000c335:	29 c8                	sub    eax,ecx
c000c337:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c33b:	19 da                	sbb    edx,ebx
c000c33d:	89 f8                	mov    eax,edi
c000c33f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c343:	5b                   	pop    ebx
c000c344:	5e                   	pop    esi
c000c345:	5f                   	pop    edi
c000c346:	ff e0                	jmp    eax

c000c348 <secondsToDatetime(unsigned long long)>:
c000c348:	55                   	push   ebp
c000c349:	57                   	push   edi
c000c34a:	56                   	push   esi
c000c34b:	53                   	push   ebx
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c353:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c357:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c35b:	6a 00                	push   0x0
c000c35d:	68 80 51 01 00       	push   0x15180
c000c362:	55                   	push   ebp
c000c363:	57                   	push   edi
c000c364:	e8 a7 2d 01 00       	call   c001f110 <__udivdi3>
c000c369:	83 c4 10             	add    esp,0x10
c000c36c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c370:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c376:	6a 00                	push   0x0
c000c378:	68 80 51 01 00       	push   0x15180
c000c37d:	55                   	push   ebp
c000c37e:	57                   	push   edi
c000c37f:	bf 10 0e 00 00       	mov    edi,0xe10
c000c384:	e8 87 2e 01 00       	call   c001f210 <__umoddi3>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	99                   	cdq    
c000c38d:	f7 ff                	idiv   edi
c000c38f:	bf 3c 00 00 00       	mov    edi,0x3c
c000c394:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c397:	89 d0                	mov    eax,edx
c000c399:	99                   	cdq    
c000c39a:	f7 ff                	idiv   edi
c000c39c:	85 db                	test   ebx,ebx
c000c39e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3a1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3a4:	79 11                	jns    c000c3b7 <secondsToDatetime(unsigned long long)+0x6f>
c000c3a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3aa:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3b0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3b5:	eb 07                	jmp    c000c3be <secondsToDatetime(unsigned long long)+0x76>
c000c3b7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3bc:	89 d8                	mov    eax,ebx
c000c3be:	99                   	cdq    
c000c3bf:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3c4:	f7 f9                	idiv   ecx
c000c3c6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3cb:	31 d2                	xor    edx,edx
c000c3cd:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3d6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c3de:	01 c3                	add    ebx,eax
c000c3e0:	89 d8                	mov    eax,ebx
c000c3e2:	f7 f1                	div    ecx
c000c3e4:	31 d2                	xor    edx,edx
c000c3e6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c3e9:	89 d8                	mov    eax,ebx
c000c3eb:	f7 f7                	div    edi
c000c3ed:	31 d2                	xor    edx,edx
c000c3ef:	29 c1                	sub    ecx,eax
c000c3f1:	89 d8                	mov    eax,ebx
c000c3f3:	f7 f5                	div    ebp
c000c3f5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c3fa:	31 d2                	xor    edx,edx
c000c3fc:	29 c1                	sub    ecx,eax
c000c3fe:	89 c8                	mov    eax,ecx
c000c400:	f7 f5                	div    ebp
c000c402:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c407:	31 d2                	xor    edx,edx
c000c409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c40d:	89 c8                	mov    eax,ecx
c000c40f:	f7 f5                	div    ebp
c000c411:	31 d2                	xor    edx,edx
c000c413:	01 c3                	add    ebx,eax
c000c415:	89 c8                	mov    eax,ecx
c000c417:	f7 f7                	div    edi
c000c419:	bf 99 00 00 00       	mov    edi,0x99
c000c41e:	31 d2                	xor    edx,edx
c000c420:	29 c3                	sub    ebx,eax
c000c422:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c42a:	29 c3                	sub    ebx,eax
c000c42c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c42f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c432:	83 c1 02             	add    ecx,0x2
c000c435:	89 c8                	mov    eax,ecx
c000c437:	bb 05 00 00 00       	mov    ebx,0x5
c000c43c:	f7 f7                	div    edi
c000c43e:	31 d2                	xor    edx,edx
c000c440:	89 c7                	mov    edi,eax
c000c442:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c448:	83 c0 02             	add    eax,0x2
c000c44b:	f7 f3                	div    ebx
c000c44d:	89 eb                	mov    ebx,ebp
c000c44f:	29 c3                	sub    ebx,eax
c000c451:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c457:	88 1e                	mov    BYTE PTR [esi],bl
c000c459:	19 c0                	sbb    eax,eax
c000c45b:	31 d2                	xor    edx,edx
c000c45d:	83 e0 0c             	and    eax,0xc
c000c460:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c464:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c46c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c470:	83 f9 01             	cmp    ecx,0x1
c000c473:	0f 96 c2             	setbe  dl
c000c476:	41                   	inc    ecx
c000c477:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c47a:	01 d0                	add    eax,edx
c000c47c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c480:	83 c4 1c             	add    esp,0x1c
c000c483:	89 f0                	mov    eax,esi
c000c485:	5b                   	pop    ebx
c000c486:	5e                   	pop    esi
c000c487:	5f                   	pop    edi
c000c488:	5d                   	pop    ebp
c000c489:	c2 04 00             	ret    0x4

c000c48c <Clock::timeInDatetimeLocal()>:
c000c48c:	53                   	push   ebx
c000c48d:	83 ec 14             	sub    esp,0x14
c000c490:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c494:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c498:	e8 85 fc ff ff       	call   c000c122 <Clock::timeInSecondsLocal()>
c000c49d:	83 c4 0c             	add    esp,0xc
c000c4a0:	52                   	push   edx
c000c4a1:	50                   	push   eax
c000c4a2:	53                   	push   ebx
c000c4a3:	e8 a0 fe ff ff       	call   c000c348 <secondsToDatetime(unsigned long long)>
c000c4a8:	89 d8                	mov    eax,ebx
c000c4aa:	83 c4 14             	add    esp,0x14
c000c4ad:	5b                   	pop    ebx
c000c4ae:	c2 04 00             	ret    0x4
c000c4b1:	90                   	nop

c000c4b2 <Device::hibernate()>:
c000c4b2:	c3                   	ret    
c000c4b3:	90                   	nop

c000c4b4 <Device::wake()>:
c000c4b4:	c3                   	ret    
c000c4b5:	90                   	nop

c000c4b6 <Device::detect()>:
c000c4b6:	c3                   	ret    
c000c4b7:	90                   	nop

c000c4b8 <Device::disableLegacy()>:
c000c4b8:	c3                   	ret    
c000c4b9:	90                   	nop

c000c4ba <Device::powerSaving(PowerSavingLevel)>:
c000c4ba:	c3                   	ret    
c000c4bb:	90                   	nop

c000c4bc <DriverlessDevice::close(int, int, void*)>:
c000c4bc:	31 c0                	xor    eax,eax
c000c4be:	c3                   	ret    
c000c4bf:	90                   	nop

c000c4c0 <DriverlessDevice::detect()>:
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <DriverlessDevice::open(int, int, void*)>:
c000c4c2:	83 ec 18             	sub    esp,0x18
c000c4c5:	68 30 13 02 c0       	push   0xc0021330
c000c4ca:	e8 7e 4c 00 00       	call   c001114d <KePanic(char const*)>
c000c4cf:	83 c8 ff             	or     eax,0xffffffff
c000c4d2:	83 c4 1c             	add    esp,0x1c
c000c4d5:	c3                   	ret    

c000c4d6 <Device::~Device()>:
c000c4d6:	ba 90 13 02 c0       	mov    edx,0xc0021390
c000c4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4df:	89 10                	mov    DWORD PTR [eax],edx
c000c4e1:	90                   	nop
c000c4e2:	c3                   	ret    
c000c4e3:	90                   	nop

c000c4e4 <Device::~Device()>:
c000c4e4:	83 ec 0c             	sub    esp,0xc
c000c4e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c4eb:	e8 e6 ff ff ff       	call   c000c4d6 <Device::~Device()>
c000c4f0:	83 c4 04             	add    esp,0x4
c000c4f3:	83 ec 08             	sub    esp,0x8
c000c4f6:	68 58 01 00 00       	push   0x158
c000c4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ff:	e8 08 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c504:	83 c4 10             	add    esp,0x10
c000c507:	83 c4 0c             	add    esp,0xc
c000c50a:	c3                   	ret    
c000c50b:	90                   	nop

c000c50c <Device::findAndLoadDriver()>:
c000c50c:	c7 44 24 04 4e 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002134e
c000c514:	e9 f1 e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c519:	90                   	nop

c000c51a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c51a:	57                   	push   edi
c000c51b:	b9 09 00 00 00       	mov    ecx,0x9
c000c520:	56                   	push   esi
c000c521:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c525:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c529:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c533:	81 c7 18 01 00 00    	add    edi,0x118
c000c539:	fc                   	cld    
c000c53a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c53c:	5e                   	pop    esi
c000c53d:	5f                   	pop    edi
c000c53e:	c3                   	ret    
c000c53f:	90                   	nop

c000c540 <Device::preOpenACPI(void*, char*, char*)>:
c000c540:	57                   	push   edi
c000c541:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c546:	56                   	push   esi
c000c547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c54b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c54f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c553:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c55d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c563:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c569:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c56b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c571:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c575:	b9 0e 00 00 00       	mov    ecx,0xe
c000c57a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c57c:	5e                   	pop    esi
c000c57d:	5f                   	pop    edi
c000c57e:	c3                   	ret    
c000c57f:	90                   	nop

c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c580:	53                   	push   ebx
c000c581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c585:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c589:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c58d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c591:	0f b6 c0             	movzx  eax,al
c000c594:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c598:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c59c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	e9 aa 05 00 00       	jmp    c000cb54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5aa <Device::getParent()>:
c000c5aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5ae:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5b4:	c3                   	ret    
c000c5b5:	90                   	nop

c000c5b6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5be:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5cf:	e9 f7 06 00 00       	jmp    c000cccb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c5d4 <Device::addChild(Device*)>:
c000c5d4:	53                   	push   ebx
c000c5d5:	83 ec 08             	sub    esp,0x8
c000c5d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5e0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c5e6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c5ec:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c5ee:	85 d2                	test   edx,edx
c000c5f0:	74 04                	je     c000c5f6 <Device::addChild(Device*)+0x22>
c000c5f2:	89 d3                	mov    ebx,edx
c000c5f4:	eb f6                	jmp    c000c5ec <Device::addChild(Device*)+0x18>
c000c5f6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c5f9:	83 ec 0c             	sub    esp,0xc
c000c5fc:	6a 08                	push   0x8
c000c5fe:	e8 d0 b4 ff ff       	call   c0007ad3 <malloc>
c000c603:	89 03                	mov    DWORD PTR [ebx],eax
c000c605:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c60b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c612:	83 c4 18             	add    esp,0x18
c000c615:	5b                   	pop    ebx
c000c616:	c3                   	ret    
c000c617:	90                   	nop

c000c618 <Device::removeAllChildren()>:
c000c618:	56                   	push   esi
c000c619:	53                   	push   ebx
c000c61a:	52                   	push   edx
c000c61b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c61f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c625:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c628:	74 17                	je     c000c641 <Device::removeAllChildren()+0x29>
c000c62a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c62d:	85 c0                	test   eax,eax
c000c62f:	74 0c                	je     c000c63d <Device::removeAllChildren()+0x25>
c000c631:	8b 10                	mov    edx,DWORD PTR [eax]
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	50                   	push   eax
c000c637:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c63f:	eb e4                	jmp    c000c625 <Device::removeAllChildren()+0xd>
c000c641:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c647:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c64d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c653:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c65a:	58                   	pop    eax
c000c65b:	5b                   	pop    ebx
c000c65c:	5e                   	pop    esi
c000c65d:	c3                   	ret    

c000c65e <Device::hibernateAll()>:
c000c65e:	53                   	push   ebx
c000c65f:	83 ec 14             	sub    esp,0x14
c000c662:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c666:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c668:	53                   	push   ebx
c000c669:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c66c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c672:	83 c4 10             	add    esp,0x10
c000c675:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c678:	74 0f                	je     c000c689 <Device::hibernateAll()+0x2b>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c680:	e8 d9 ff ff ff       	call   c000c65e <Device::hibernateAll()>
c000c685:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c687:	eb e9                	jmp    c000c672 <Device::hibernateAll()+0x14>
c000c689:	83 c4 08             	add    esp,0x8
c000c68c:	5b                   	pop    ebx
c000c68d:	c3                   	ret    

c000c68e <Device::wakeAll()>:
c000c68e:	53                   	push   ebx
c000c68f:	83 ec 14             	sub    esp,0x14
c000c692:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c696:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c698:	53                   	push   ebx
c000c699:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c69c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6a8:	74 0f                	je     c000c6b9 <Device::wakeAll()+0x2b>
c000c6aa:	83 ec 0c             	sub    esp,0xc
c000c6ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6b0:	e8 d9 ff ff ff       	call   c000c68e <Device::wakeAll()>
c000c6b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6b7:	eb e9                	jmp    c000c6a2 <Device::wakeAll()+0x14>
c000c6b9:	83 c4 08             	add    esp,0x8
c000c6bc:	5b                   	pop    ebx
c000c6bd:	c3                   	ret    

c000c6be <Device::detectAll()>:
c000c6be:	53                   	push   ebx
c000c6bf:	83 ec 14             	sub    esp,0x14
c000c6c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6c8:	53                   	push   ebx
c000c6c9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6d8:	74 0f                	je     c000c6e9 <Device::detectAll()+0x2b>
c000c6da:	83 ec 0c             	sub    esp,0xc
c000c6dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6e0:	e8 d9 ff ff ff       	call   c000c6be <Device::detectAll()>
c000c6e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6e7:	eb e9                	jmp    c000c6d2 <Device::detectAll()+0x14>
c000c6e9:	83 c4 08             	add    esp,0x8
c000c6ec:	5b                   	pop    ebx
c000c6ed:	c3                   	ret    

c000c6ee <Device::disableLegacyAll()>:
c000c6ee:	c3                   	ret    
c000c6ef:	90                   	nop

c000c6f0 <Device::loadDriversForAll()>:
c000c6f0:	c3                   	ret    
c000c6f1:	90                   	nop

c000c6f2 <Device::closeAll()>:
c000c6f2:	53                   	push   ebx
c000c6f3:	83 ec 08             	sub    esp,0x8
c000c6f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c6fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6fc:	6a 00                	push   0x0
c000c6fe:	6a 00                	push   0x0
c000c700:	6a 00                	push   0x0
c000c702:	53                   	push   ebx
c000c703:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c706:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c712:	74 0f                	je     c000c723 <Device::closeAll()+0x31>
c000c714:	83 ec 0c             	sub    esp,0xc
c000c717:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c71a:	e8 d3 ff ff ff       	call   c000c6f2 <Device::closeAll()>
c000c71f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c721:	eb e9                	jmp    c000c70c <Device::closeAll()+0x1a>
c000c723:	83 c4 08             	add    esp,0x8
c000c726:	5b                   	pop    ebx
c000c727:	c3                   	ret    

c000c728 <Device::powerSavingAll(PowerSavingLevel)>:
c000c728:	56                   	push   esi
c000c729:	53                   	push   ebx
c000c72a:	83 ec 0c             	sub    esp,0xc
c000c72d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c735:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c737:	56                   	push   esi
c000c738:	53                   	push   ebx
c000c739:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c73c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c748:	74 0f                	je     c000c759 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c74a:	52                   	push   edx
c000c74b:	52                   	push   edx
c000c74c:	56                   	push   esi
c000c74d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c750:	e8 d3 ff ff ff       	call   c000c728 <Device::powerSavingAll(PowerSavingLevel)>
c000c755:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c757:	eb e9                	jmp    c000c742 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c759:	58                   	pop    eax
c000c75a:	5b                   	pop    ebx
c000c75b:	5e                   	pop    esi
c000c75c:	c3                   	ret    
c000c75d:	90                   	nop

c000c75e <Device::setName(char const*)>:
c000c75e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c766:	e9 e5 3e ff ff       	jmp    c0000650 <strcpy>
c000c76b:	90                   	nop

c000c76c <Device::Device(char const*)>:
c000c76c:	83 ec 1c             	sub    esp,0x1c
c000c76f:	ba 90 13 02 c0       	mov    edx,0xc0021390
c000c774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c778:	89 10                	mov    DWORD PTR [eax],edx
c000c77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c77e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7b2:	83 ec 08             	sub    esp,0x8
c000c7b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bd:	e8 9c ff ff ff       	call   c000c75e <Device::setName(char const*)>
c000c7c2:	83 c4 10             	add    esp,0x10
c000c7c5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7cd:	83 ec 0c             	sub    esp,0xc
c000c7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7d4:	e8 fa b2 ff ff       	call   c0007ad3 <malloc>
c000c7d9:	83 c4 10             	add    esp,0x10
c000c7dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c7ed:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c7fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c807:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c80d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c818:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c823:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c82e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c83c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c858:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c862:	90                   	nop
c000c863:	83 c4 1c             	add    esp,0x1c
c000c866:	c3                   	ret    
c000c867:	90                   	nop

c000c868 <Device::getName()>:
c000c868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c86c:	05 d0 00 00 00       	add    eax,0xd0
c000c871:	c3                   	ret    

c000c872 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c879:	83 ec 08             	sub    esp,0x8
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	50                   	push   eax
c000c881:	e8 e6 fe ff ff       	call   c000c76c <Device::Device(char const*)>
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	ba bc 13 02 c0       	mov    edx,0xc00213bc
c000c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c892:	89 10                	mov    DWORD PTR [eax],edx
c000c894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c898:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8a2:	90                   	nop
c000c8a3:	83 c4 0c             	add    esp,0xc
c000c8a6:	c3                   	ret    
c000c8a7:	90                   	nop

c000c8a8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8a8:	57                   	push   edi
c000c8a9:	56                   	push   esi
c000c8aa:	53                   	push   ebx
c000c8ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8af:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8b7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8bd:	75 0c                	jne    c000c8cb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8bf:	52                   	push   edx
c000c8c0:	52                   	push   edx
c000c8c1:	53                   	push   ebx
c000c8c2:	56                   	push   esi
c000c8c3:	e8 fa 2c 01 00       	call   c001f5c2 <LinkedList<Device>::addElement(Device*)>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8d4:	74 12                	je     c000c8e8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c8d6:	50                   	push   eax
c000c8d7:	57                   	push   edi
c000c8d8:	56                   	push   esi
c000c8d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8dc:	e8 c7 ff ff ff       	call   c000c8a8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c8e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8e3:	83 c4 10             	add    esp,0x10
c000c8e6:	eb e9                	jmp    c000c8d1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c8e8:	5b                   	pop    ebx
c000c8e9:	5e                   	pop    esi
c000c8ea:	5f                   	pop    edi
c000c8eb:	c3                   	ret    

c000c8ec <getDevicesOfType(DeviceType)>:
c000c8ec:	53                   	push   ebx
c000c8ed:	83 ec 14             	sub    esp,0x14
c000c8f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8f4:	53                   	push   ebx
c000c8f5:	e8 a4 2d 01 00       	call   c001f69e <LinkedList<Device>::LinkedList()>
c000c8fa:	83 c4 0c             	add    esp,0xc
c000c8fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c901:	53                   	push   ebx
c000c902:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c908:	e8 9b ff ff ff       	call   c000c8a8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c90d:	83 c4 18             	add    esp,0x18
c000c910:	89 d8                	mov    eax,ebx
c000c912:	5b                   	pop    ebx
c000c913:	c2 04 00             	ret    0x4
c000c916:	66 90                	xchg   ax,ax

c000c918 <HardDiskController::HardDiskController(char const*)>:
c000c918:	83 ec 0c             	sub    esp,0xc
c000c91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91f:	83 ec 08             	sub    esp,0x8
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	50                   	push   eax
c000c927:	e8 40 fe ff ff       	call   c000c76c <Device::Device(char const*)>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c000c934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c938:	89 10                	mov    DWORD PTR [eax],edx
c000c93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c948:	90                   	nop
c000c949:	83 c4 0c             	add    esp,0xc
c000c94c:	c3                   	ret    
c000c94d:	90                   	nop
c000c94e:	66 90                	xchg   ax,ax

c000c950 <HardDiskController::~HardDiskController()>:
c000c950:	83 ec 0c             	sub    esp,0xc
c000c953:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c000c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95c:	89 10                	mov    DWORD PTR [eax],edx
c000c95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c962:	83 ec 0c             	sub    esp,0xc
c000c965:	50                   	push   eax
c000c966:	e8 6b fb ff ff       	call   c000c4d6 <Device::~Device()>
c000c96b:	83 c4 10             	add    esp,0x10
c000c96e:	90                   	nop
c000c96f:	83 c4 0c             	add    esp,0xc
c000c972:	c3                   	ret    
c000c973:	90                   	nop

c000c974 <HardDiskController::~HardDiskController()>:
c000c974:	83 ec 0c             	sub    esp,0xc
c000c977:	83 ec 0c             	sub    esp,0xc
c000c97a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c97e:	e8 cd ff ff ff       	call   c000c950 <HardDiskController::~HardDiskController()>
c000c983:	83 c4 10             	add    esp,0x10
c000c986:	83 ec 08             	sub    esp,0x8
c000c989:	68 58 01 00 00       	push   0x158
c000c98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c992:	e8 75 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c997:	83 c4 10             	add    esp,0x10
c000c99a:	83 c4 0c             	add    esp,0xc
c000c99d:	c3                   	ret    

c000c99e <PhysicalDisk::eject()>:
c000c99e:	83 c8 ff             	or     eax,0xffffffff
c000c9a1:	c3                   	ret    

c000c9a2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9a2:	83 ec 0c             	sub    esp,0xc
c000c9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a9:	83 ec 08             	sub    esp,0x8
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	50                   	push   eax
c000c9b1:	e8 b6 fd ff ff       	call   c000c76c <Device::Device(char const*)>
c000c9b6:	83 c4 10             	add    esp,0x10
c000c9b9:	ba 14 14 02 c0       	mov    edx,0xc0021414
c000c9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c2:	89 10                	mov    DWORD PTR [eax],edx
c000c9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9de:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca04:	90                   	nop
c000ca05:	83 c4 0c             	add    esp,0xc
c000ca08:	c3                   	ret    
c000ca09:	90                   	nop

c000ca0a <PhysicalDisk::startCache()>:
c000ca0a:	56                   	push   esi
c000ca0b:	53                   	push   ebx
c000ca0c:	83 ec 10             	sub    esp,0x10
c000ca0f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca13:	6a 44                	push   0x44
c000ca15:	e8 b9 b0 ff ff       	call   c0007ad3 <malloc>
c000ca1a:	89 c6                	mov    esi,eax
c000ca1c:	58                   	pop    eax
c000ca1d:	5a                   	pop    edx
c000ca1e:	53                   	push   ebx
c000ca1f:	56                   	push   esi
c000ca20:	e8 83 17 00 00       	call   c000e1a8 <VCache::VCache(PhysicalDisk*)>
c000ca25:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca2b:	83 c4 14             	add    esp,0x14
c000ca2e:	5b                   	pop    ebx
c000ca2f:	5e                   	pop    esi
c000ca30:	c3                   	ret    
c000ca31:	90                   	nop

c000ca32 <PhysicalDisk::~PhysicalDisk()>:
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	ba 14 14 02 c0       	mov    edx,0xc0021414
c000ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3e:	89 10                	mov    DWORD PTR [eax],edx
c000ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca44:	83 ec 0c             	sub    esp,0xc
c000ca47:	50                   	push   eax
c000ca48:	e8 89 fa ff ff       	call   c000c4d6 <Device::~Device()>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	90                   	nop
c000ca51:	83 c4 0c             	add    esp,0xc
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <PhysicalDisk::~PhysicalDisk()>:
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca60:	e8 cd ff ff ff       	call   c000ca32 <PhysicalDisk::~PhysicalDisk()>
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	83 ec 08             	sub    esp,0x8
c000ca6b:	68 6c 01 00 00       	push   0x16c
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	e8 93 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	83 c4 0c             	add    esp,0xc
c000ca7f:	c3                   	ret    

c000ca80 <int_handler>:
c000ca80:	55                   	push   ebp
c000ca81:	57                   	push   edi
c000ca82:	56                   	push   esi
c000ca83:	53                   	push   ebx
c000ca84:	83 ec 0c             	sub    esp,0xc
c000ca87:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000ca8e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ca92:	74 0b                	je     c000ca9f <int_handler+0x1f>
c000ca94:	fa                   	cli    
c000ca95:	f4                   	hlt    
c000ca96:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000ca9d:	75 f5                	jne    c000ca94 <int_handler+0x14>
c000ca9f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000caa2:	8d 46 e0             	lea    eax,[esi-0x20]
c000caa5:	83 f8 17             	cmp    eax,0x17
c000caa8:	76 40                	jbe    c000caea <int_handler+0x6a>
c000caaa:	c1 e6 04             	shl    esi,0x4
c000caad:	31 db                	xor    ebx,ebx
c000caaf:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cab5:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cabb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cabf:	85 c0                	test   eax,eax
c000cac1:	74 13                	je     c000cad6 <int_handler+0x56>
c000cac3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cac7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000caca:	74 2c                	je     c000caf8 <int_handler+0x78>
c000cacc:	83 ec 08             	sub    esp,0x8
c000cacf:	52                   	push   edx
c000cad0:	57                   	push   edi
c000cad1:	ff d0                	call   eax
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	83 c3 01             	add    ebx,0x1
c000cad9:	83 fb 04             	cmp    ebx,0x4
c000cadc:	75 dd                	jne    c000cabb <int_handler+0x3b>
c000cade:	83 c4 0c             	add    esp,0xc
c000cae1:	31 c0                	xor    eax,eax
c000cae3:	5b                   	pop    ebx
c000cae4:	31 d2                	xor    edx,edx
c000cae6:	5e                   	pop    esi
c000cae7:	5f                   	pop    edi
c000cae8:	5d                   	pop    ebp
c000cae9:	c3                   	ret    
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	50                   	push   eax
c000caee:	e8 0f b2 00 00       	call   c0017d02 <HalEndOfInterrupt(int)>
c000caf3:	83 c4 10             	add    esp,0x10
c000caf6:	eb b2                	jmp    c000caaa <int_handler+0x2a>
c000caf8:	83 ec 08             	sub    esp,0x8
c000cafb:	52                   	push   edx
c000cafc:	57                   	push   edi
c000cafd:	ff d0                	call   eax
c000caff:	83 c4 10             	add    esp,0x10
c000cb02:	83 c4 0c             	add    esp,0xc
c000cb05:	5b                   	pop    ebx
c000cb06:	5e                   	pop    esi
c000cb07:	5f                   	pop    edi
c000cb08:	5d                   	pop    ebp
c000cb09:	c3                   	ret    

c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb0a:	56                   	push   esi
c000cb0b:	31 c0                	xor    eax,eax
c000cb0d:	53                   	push   ebx
c000cb0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb16:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb1a:	89 ca                	mov    edx,ecx
c000cb1c:	c1 e2 04             	shl    edx,0x4
c000cb1f:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb27:	74 17                	je     c000cb40 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb29:	83 c0 01             	add    eax,0x1
c000cb2c:	83 f8 04             	cmp    eax,0x4
c000cb2f:	75 ee                	jne    c000cb1f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb31:	c7 44 24 0c 44 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021444
c000cb39:	5b                   	pop    ebx
c000cb3a:	5e                   	pop    esi
c000cb3b:	e9 0d 46 00 00       	jmp    c001114d <KePanic(char const*)>
c000cb40:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb43:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb4a:	5b                   	pop    ebx
c000cb4b:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb52:	5e                   	pop    esi
c000cb53:	c3                   	ret    

c000cb54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb54:	55                   	push   ebp
c000cb55:	57                   	push   edi
c000cb56:	56                   	push   esi
c000cb57:	53                   	push   ebx
c000cb58:	83 ec 0c             	sub    esp,0xc
c000cb5b:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb61:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cb65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb69:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb70:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cb73:	74 57                	je     c000cbcc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cb75:	84 c0                	test   al,al
c000cb77:	89 c7                	mov    edi,eax
c000cb79:	74 1d                	je     c000cb98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cb7b:	83 fe 0f             	cmp    esi,0xf
c000cb7e:	0f 8f d9 00 00 00    	jg     c000cc5d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cb84:	0f b6 b6 48 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd0b8]
c000cb8b:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cb93:	d1 ef                	shr    edi,1
c000cb95:	83 e7 01             	and    edi,0x1
c000cb98:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cb9d:	83 ec 08             	sub    esp,0x8
c000cba0:	31 db                	xor    ebx,ebx
c000cba2:	50                   	push   eax
c000cba3:	68 51 14 02 c0       	push   0xc0021451
c000cba8:	e8 5d dd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cbad:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbb2:	83 c4 10             	add    esp,0x10
c000cbb5:	85 c0                	test   eax,eax
c000cbb7:	7f 59                	jg     c000cc12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cbb9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbbc:	83 ec 0c             	sub    esp,0xc
c000cbbf:	68 68 14 02 c0       	push   0xc0021468
c000cbc4:	e8 84 45 00 00       	call   c001114d <KePanic(char const*)>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	89 e8                	mov    eax,ebp
c000cbce:	31 d2                	xor    edx,edx
c000cbd0:	c1 e0 04             	shl    eax,0x4
c000cbd3:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbda:	85 c9                	test   ecx,ecx
c000cbdc:	0f 84 92 00 00 00    	je     c000cc74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cbe2:	83 c2 01             	add    edx,0x1
c000cbe5:	83 fa 04             	cmp    edx,0x4
c000cbe8:	75 e9                	jne    c000cbd3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cbea:	83 ec 0c             	sub    esp,0xc
c000cbed:	68 bc 14 02 c0       	push   0xc00214bc
c000cbf2:	e8 56 45 00 00       	call   c001114d <KePanic(char const*)>
c000cbf7:	83 c4 10             	add    esp,0x10
c000cbfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cbff:	83 c4 0c             	add    esp,0xc
c000cc02:	5b                   	pop    ebx
c000cc03:	5e                   	pop    esi
c000cc04:	5f                   	pop    edi
c000cc05:	5d                   	pop    ebp
c000cc06:	c3                   	ret    
c000cc07:	83 c3 01             	add    ebx,0x1
c000cc0a:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc10:	7e a7                	jle    c000cbb9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc12:	8b 2c 9d 80 ae 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5180]
c000cc19:	83 ec 08             	sub    esp,0x8
c000cc1c:	56                   	push   esi
c000cc1d:	55                   	push   ebp
c000cc1e:	e8 c9 18 01 00       	call   c001e4ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	84 c0                	test   al,al
c000cc28:	74 dd                	je     c000cc07 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc2a:	89 f8                	mov    eax,edi
c000cc2c:	83 ec 04             	sub    esp,0x4
c000cc2f:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc36:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc39:	0f b6 f8             	movzx  edi,al
c000cc3c:	57                   	push   edi
c000cc3d:	89 e8                	mov    eax,ebp
c000cc3f:	6a 00                	push   0x0
c000cc41:	0f b6 c0             	movzx  eax,al
c000cc44:	50                   	push   eax
c000cc45:	89 f0                	mov    eax,esi
c000cc47:	6a 00                	push   0x0
c000cc49:	0f b6 c0             	movzx  eax,al
c000cc4c:	6a 00                	push   0x0
c000cc4e:	50                   	push   eax
c000cc4f:	53                   	push   ebx
c000cc50:	e8 03 1a 01 00       	call   c001e658 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc55:	83 c4 20             	add    esp,0x20
c000cc58:	e9 6f ff ff ff       	jmp    c000cbcc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc5d:	83 ec 0c             	sub    esp,0xc
c000cc60:	31 ff                	xor    edi,edi
c000cc62:	68 84 14 02 c0       	push   0xc0021484
c000cc67:	e8 e1 44 00 00       	call   c001114d <KePanic(char const*)>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	e9 24 ff ff ff       	jmp    c000cb98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cc74:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cc77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cc7b:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cc82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cc86:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000cc8d:	83 c4 0c             	add    esp,0xc
c000cc90:	89 f0                	mov    eax,esi
c000cc92:	5b                   	pop    ebx
c000cc93:	5e                   	pop    esi
c000cc94:	5f                   	pop    edi
c000cc95:	5d                   	pop    ebp
c000cc96:	c3                   	ret    

c000cc97 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cc97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cc9f:	c1 e0 04             	shl    eax,0x4
c000cca2:	8d 50 10             	lea    edx,[eax+0x10]
c000cca5:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000ccab:	74 08                	je     c000ccb5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccad:	83 c0 04             	add    eax,0x4
c000ccb0:	39 d0                	cmp    eax,edx
c000ccb2:	75 f1                	jne    c000cca5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccb4:	c3                   	ret    
c000ccb5:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000ccbf:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000ccc9:	eb e2                	jmp    c000ccad <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cccb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cccb:	56                   	push   esi
c000cccc:	53                   	push   ebx
c000cccd:	83 ec 04             	sub    esp,0x4
c000ccd0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccdd:	74 0e                	je     c000cced <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ccdf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cce4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cceb:	75 34                	jne    c000cd21 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cced:	8d 43 20             	lea    eax,[ebx+0x20]
c000ccf0:	c1 e0 04             	shl    eax,0x4
c000ccf3:	8d 50 10             	lea    edx,[eax+0x10]
c000ccf6:	39 b0 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],esi
c000ccfc:	74 0d                	je     c000cd0b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ccfe:	83 c0 04             	add    eax,0x4
c000cd01:	39 d0                	cmp    eax,edx
c000cd03:	75 f1                	jne    c000ccf6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd05:	83 c4 04             	add    esp,0x4
c000cd08:	5b                   	pop    ebx
c000cd09:	5e                   	pop    esi
c000cd0a:	c3                   	ret    
c000cd0b:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd15:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd1f:	eb dd                	jmp    c000ccfe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd21:	83 fb 0f             	cmp    ebx,0xf
c000cd24:	7f 09                	jg     c000cd2f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd26:	0f b6 9b 48 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd0b8]
c000cd2d:	eb be                	jmp    c000cced <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd2f:	83 ec 0c             	sub    esp,0xc
c000cd32:	68 75 14 02 c0       	push   0xc0021475
c000cd37:	e8 11 44 00 00       	call   c001114d <KePanic(char const*)>
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	eb ac                	jmp    c000cced <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cd41 <setupINTS()>:
c000cd41:	31 c0                	xor    eax,eax
c000cd43:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd4d:	83 c0 10             	add    eax,0x10
c000cd50:	c7 80 70 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f90],0x0
c000cd5a:	c7 80 74 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f8c],0x0
c000cd64:	c7 80 74 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f8c],0x0
c000cd6e:	c7 80 78 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f88],0x0
c000cd78:	c7 80 78 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f88],0x0
c000cd82:	c7 80 7c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f84],0x0
c000cd8c:	c7 80 7c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f84],0x0
c000cd96:	3d 00 10 00 00       	cmp    eax,0x1000
c000cd9b:	75 a6                	jne    c000cd43 <setupINTS()+0x2>
c000cd9d:	c3                   	ret    

c000cd9e <convertLegacyIRQNumber(int)>:
c000cd9e:	83 ec 0c             	sub    esp,0xc
c000cda1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdab:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdb2:	74 0c                	je     c000cdc0 <convertLegacyIRQNumber(int)+0x22>
c000cdb4:	83 f8 0f             	cmp    eax,0xf
c000cdb7:	7f 0b                	jg     c000cdc4 <convertLegacyIRQNumber(int)+0x26>
c000cdb9:	0f b6 80 48 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd0b8]
c000cdc0:	83 c4 0c             	add    esp,0xc
c000cdc3:	c3                   	ret    
c000cdc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	68 84 14 02 c0       	push   0xc0021484
c000cdd0:	e8 78 43 00 00       	call   c001114d <KePanic(char const*)>
c000cdd5:	83 c4 10             	add    esp,0x10
c000cdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddc:	83 c4 0c             	add    esp,0xc
c000cddf:	c3                   	ret    

c000cde0 <startGUI(void*)>:
c000cde0:	55                   	push   ebp
c000cde1:	89 e5                	mov    ebp,esp
c000cde3:	53                   	push   ebx
c000cde4:	83 ec 04             	sub    esp,0x4
c000cde7:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cdec:	83 e8 01             	sub    eax,0x1
c000cdef:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cdf4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cdf9:	85 c0                	test   eax,eax
c000cdfb:	75 01                	jne    c000cdfe <startGUI(void*)+0x1e>
c000cdfd:	fb                   	sti    
c000cdfe:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce04:	83 ec 08             	sub    esp,0x8
c000ce07:	6a 01                	push   0x1
c000ce09:	68 e1 14 02 c0       	push   0xc00214e1
c000ce0e:	e8 d1 81 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	83 ec 08             	sub    esp,0x8
c000ce19:	53                   	push   ebx
c000ce1a:	50                   	push   eax
c000ce1b:	e8 04 84 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000ce20:	83 c4 10             	add    esp,0x10
c000ce23:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce29:	83 ec 08             	sub    esp,0x8
c000ce2c:	6a 01                	push   0x1
c000ce2e:	68 fb 14 02 c0       	push   0xc00214fb
c000ce33:	e8 ac 81 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	83 ec 08             	sub    esp,0x8
c000ce3e:	53                   	push   ebx
c000ce3f:	50                   	push   eax
c000ce40:	e8 df 83 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	90                   	nop
c000ce49:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce4c:	c9                   	leave  
c000ce4d:	c3                   	ret    

c000ce4e <startGUIVESA(void*)>:
c000ce4e:	55                   	push   ebp
c000ce4f:	89 e5                	mov    ebp,esp
c000ce51:	53                   	push   ebx
c000ce52:	83 ec 04             	sub    esp,0x4
c000ce55:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce5a:	83 e8 01             	sub    eax,0x1
c000ce5d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce62:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce67:	85 c0                	test   eax,eax
c000ce69:	75 01                	jne    c000ce6c <startGUIVESA(void*)+0x1e>
c000ce6b:	fb                   	sti    
c000ce6c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce72:	83 ec 08             	sub    esp,0x8
c000ce75:	6a 01                	push   0x1
c000ce77:	68 19 15 02 c0       	push   0xc0021519
c000ce7c:	e8 63 81 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	53                   	push   ebx
c000ce88:	50                   	push   eax
c000ce89:	e8 96 83 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000ce8e:	83 c4 10             	add    esp,0x10
c000ce91:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce97:	83 ec 08             	sub    esp,0x8
c000ce9a:	6a 01                	push   0x1
c000ce9c:	68 fb 14 02 c0       	push   0xc00214fb
c000cea1:	e8 3e 81 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000cea6:	83 c4 10             	add    esp,0x10
c000cea9:	83 ec 08             	sub    esp,0x8
c000ceac:	53                   	push   ebx
c000cead:	50                   	push   eax
c000ceae:	e8 71 83 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	90                   	nop
c000ceb7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ceba:	c9                   	leave  
c000cebb:	c3                   	ret    

c000cebc <sendKeyToTerminal(unsigned char)>:
c000cebc:	55                   	push   ebp
c000cebd:	89 e5                	mov    ebp,esp
c000cebf:	83 ec 28             	sub    esp,0x28
c000cec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cec8:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cecd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ced1:	83 ec 08             	sub    esp,0x8
c000ced4:	52                   	push   edx
c000ced5:	50                   	push   eax
c000ced6:	e8 e1 be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cee2:	83 f8 0a             	cmp    eax,0xa
c000cee5:	74 16                	je     c000cefd <sendKeyToTerminal(unsigned char)+0x41>
c000cee7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000ceeb:	83 f8 03             	cmp    eax,0x3
c000ceee:	74 0d                	je     c000cefd <sendKeyToTerminal(unsigned char)+0x41>
c000cef0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cef4:	83 f8 1c             	cmp    eax,0x1c
c000cef7:	0f 85 97 00 00 00    	jne    c000cf94 <sendKeyToTerminal(unsigned char)+0xd8>
c000cefd:	fa                   	cli    
c000cefe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf03:	83 c0 01             	add    eax,0x1
c000cf06:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf0b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf10:	83 c0 01             	add    eax,0x1
c000cf13:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf18:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf20:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf2a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf2e:	74 1f                	je     c000cf4f <sendKeyToTerminal(unsigned char)+0x93>
c000cf30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf33:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf3f:	83 ec 0c             	sub    esp,0xc
c000cf42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf45:	e8 fe 8f 00 00       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c000cf4a:	83 c4 10             	add    esp,0x10
c000cf4d:	eb db                	jmp    c000cf2a <sendKeyToTerminal(unsigned char)+0x6e>
c000cf4f:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf54:	83 e8 01             	sub    eax,0x1
c000cf57:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf5c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf61:	85 c0                	test   eax,eax
c000cf63:	75 18                	jne    c000cf7d <sendKeyToTerminal(unsigned char)+0xc1>
c000cf65:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf6a:	85 c0                	test   eax,eax
c000cf6c:	74 0f                	je     c000cf7d <sendKeyToTerminal(unsigned char)+0xc1>
c000cf6e:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf78:	e8 d3 8a 00 00       	call   c0015a50 <schedule()>
c000cf7d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf82:	83 e8 01             	sub    eax,0x1
c000cf85:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf8a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf8f:	85 c0                	test   eax,eax
c000cf91:	75 01                	jne    c000cf94 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf93:	fb                   	sti    
c000cf94:	90                   	nop
c000cf95:	c9                   	leave  
c000cf96:	c3                   	ret    

c000cf97 <sendKeyboardToken(KeyboardToken)>:
c000cf97:	55                   	push   ebp
c000cf98:	89 e5                	mov    ebp,esp
c000cf9a:	83 ec 18             	sub    esp,0x18
c000cf9d:	e8 fb 41 00 00       	call   c001119d <KeUserIOReceived()>
c000cfa2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfa8:	0f b7 c0             	movzx  eax,ax
c000cfab:	83 f2 01             	xor    edx,0x1
c000cfae:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfb4:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfb9:	85 c0                	test   eax,eax
c000cfbb:	74 24                	je     c000cfe1 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfbd:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000cfc3:	83 ec 04             	sub    esp,0x4
c000cfc6:	68 a0 90 02 c0       	push   0xc00290a0
c000cfcb:	83 ec 08             	sub    esp,0x8
c000cfce:	89 e0                	mov    eax,esp
c000cfd0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000cfd3:	89 08                	mov    DWORD PTR [eax],ecx
c000cfd5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000cfd8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cfdc:	ff d2                	call   edx
c000cfde:	83 c4 10             	add    esp,0x10
c000cfe1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cfe5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000cfe8:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000cfed:	0f b6 d2             	movzx  edx,dl
c000cff0:	0f b6 c0             	movzx  eax,al
c000cff3:	39 c2                	cmp    edx,eax
c000cff5:	74 1c                	je     c000d013 <sendKeyboardToken(KeyboardToken)+0x7c>
c000cff7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000cffa:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000cfff:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d004:	0f b6 c0             	movzx  eax,al
c000d007:	83 ec 0c             	sub    esp,0xc
c000d00a:	50                   	push   eax
c000d00b:	e8 08 b5 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d016:	0f b6 c0             	movzx  eax,al
c000d019:	85 c0                	test   eax,eax
c000d01b:	0f 84 da 00 00 00    	je     c000d0fb <sendKeyboardToken(KeyboardToken)+0x164>
c000d021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d024:	0f b7 c0             	movzx  eax,ax
c000d027:	3d 18 03 00 00       	cmp    eax,0x318
c000d02c:	75 06                	jne    c000d034 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d02e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d037:	0f b7 c0             	movzx  eax,ax
c000d03a:	3d 19 03 00 00       	cmp    eax,0x319
c000d03f:	75 06                	jne    c000d047 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d041:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04a:	0f b7 c0             	movzx  eax,ax
c000d04d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d052:	75 06                	jne    c000d05a <sendKeyboardToken(KeyboardToken)+0xc3>
c000d054:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d05a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05d:	0f b7 c0             	movzx  eax,ax
c000d060:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d065:	75 06                	jne    c000d06d <sendKeyboardToken(KeyboardToken)+0xd6>
c000d067:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d070:	0f b7 c0             	movzx  eax,ax
c000d073:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d078:	75 06                	jne    c000d080 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d07a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d083:	0f b7 c0             	movzx  eax,ax
c000d086:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d08b:	75 06                	jne    c000d093 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d08d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d096:	0f b7 c0             	movzx  eax,ax
c000d099:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d09e:	75 06                	jne    c000d0a6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0a0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a9:	0f b7 c0             	movzx  eax,ax
c000d0ac:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0b1:	75 06                	jne    c000d0b9 <sendKeyboardToken(KeyboardToken)+0x122>
c000d0b3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0bc:	0f b7 c0             	movzx  eax,ax
c000d0bf:	3d 20 03 00 00       	cmp    eax,0x320
c000d0c4:	75 06                	jne    c000d0cc <sendKeyboardToken(KeyboardToken)+0x135>
c000d0c6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0cf:	0f b7 c0             	movzx  eax,ax
c000d0d2:	3d 21 03 00 00       	cmp    eax,0x321
c000d0d7:	75 06                	jne    c000d0df <sendKeyboardToken(KeyboardToken)+0x148>
c000d0d9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d0df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e2:	0f b7 c0             	movzx  eax,ax
c000d0e5:	3d 22 03 00 00       	cmp    eax,0x322
c000d0ea:	0f 85 f1 00 00 00    	jne    c000d1e1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d0f0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d0f6:	e9 e6 00 00 00       	jmp    c000d1e1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d0fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0fe:	0f b7 c0             	movzx  eax,ax
c000d101:	3d 18 03 00 00       	cmp    eax,0x318
c000d106:	75 0a                	jne    c000d112 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d108:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d10e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d115:	0f b7 c0             	movzx  eax,ax
c000d118:	3d 19 03 00 00       	cmp    eax,0x319
c000d11d:	75 0a                	jne    c000d129 <sendKeyboardToken(KeyboardToken)+0x192>
c000d11f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d125:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d12c:	0f b7 c0             	movzx  eax,ax
c000d12f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d134:	75 0a                	jne    c000d140 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d136:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d13c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d143:	0f b7 c0             	movzx  eax,ax
c000d146:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d14b:	75 0a                	jne    c000d157 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d14d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d153:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15a:	0f b7 c0             	movzx  eax,ax
c000d15d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d162:	75 0a                	jne    c000d16e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d164:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d16a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d171:	0f b7 c0             	movzx  eax,ax
c000d174:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d179:	75 0a                	jne    c000d185 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d17b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d181:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d188:	0f b7 c0             	movzx  eax,ax
c000d18b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d190:	75 0a                	jne    c000d19c <sendKeyboardToken(KeyboardToken)+0x205>
c000d192:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d198:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d19c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d19f:	0f b7 c0             	movzx  eax,ax
c000d1a2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1a7:	75 0a                	jne    c000d1b3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1a9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b6:	0f b7 c0             	movzx  eax,ax
c000d1b9:	3d 20 03 00 00       	cmp    eax,0x320
c000d1be:	75 0a                	jne    c000d1ca <sendKeyboardToken(KeyboardToken)+0x233>
c000d1c0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cd:	0f b7 c0             	movzx  eax,ax
c000d1d0:	3d 21 03 00 00       	cmp    eax,0x321
c000d1d5:	75 0a                	jne    c000d1e1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1d7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d1dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e4:	0f b7 c0             	movzx  eax,ax
c000d1e7:	3d 00 02 00 00       	cmp    eax,0x200
c000d1ec:	75 2f                	jne    c000d21d <sendKeyboardToken(KeyboardToken)+0x286>
c000d1ee:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d1f3:	83 f0 01             	xor    eax,0x1
c000d1f6:	0f b6 c0             	movzx  eax,al
c000d1f9:	85 c0                	test   eax,eax
c000d1fb:	74 20                	je     c000d21d <sendKeyboardToken(KeyboardToken)+0x286>
c000d1fd:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d202:	6a 01                	push   0x1
c000d204:	6a 00                	push   0x0
c000d206:	68 e0 cd 00 c0       	push   0xc000cde0
c000d20b:	50                   	push   eax
c000d20c:	e8 f3 85 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c000d211:	83 c4 10             	add    esp,0x10
c000d214:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d21b:	eb 3a                	jmp    c000d257 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d21d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d220:	0f b7 c0             	movzx  eax,ax
c000d223:	3d 01 02 00 00       	cmp    eax,0x201
c000d228:	75 2d                	jne    c000d257 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d22a:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d22f:	83 f0 01             	xor    eax,0x1
c000d232:	0f b6 c0             	movzx  eax,al
c000d235:	85 c0                	test   eax,eax
c000d237:	74 1e                	je     c000d257 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d239:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d23e:	6a 01                	push   0x1
c000d240:	6a 00                	push   0x0
c000d242:	68 4e ce 00 c0       	push   0xc000ce4e
c000d247:	50                   	push   eax
c000d248:	e8 b7 85 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25a:	0f b7 c0             	movzx  eax,ax
c000d25d:	3d 25 03 00 00       	cmp    eax,0x325
c000d262:	75 06                	jne    c000d26a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d264:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d26a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26d:	0f b7 c0             	movzx  eax,ax
c000d270:	3d 24 03 00 00       	cmp    eax,0x324
c000d275:	75 06                	jne    c000d27d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d277:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d27d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d280:	0f b7 c0             	movzx  eax,ax
c000d283:	3d 23 03 00 00       	cmp    eax,0x323
c000d288:	75 06                	jne    c000d290 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d28a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d293:	0f b7 c0             	movzx  eax,ax
c000d296:	3d 26 03 00 00       	cmp    eax,0x326
c000d29b:	75 06                	jne    c000d2a3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d29d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a6:	0f b7 c0             	movzx  eax,ax
c000d2a9:	3d 27 03 00 00       	cmp    eax,0x327
c000d2ae:	75 06                	jne    c000d2b6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2b0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b9:	0f b7 c0             	movzx  eax,ax
c000d2bc:	3d 22 03 00 00       	cmp    eax,0x322
c000d2c1:	75 06                	jne    c000d2c9 <sendKeyboardToken(KeyboardToken)+0x332>
c000d2c3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2c9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2cd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2d0:	83 f0 01             	xor    eax,0x1
c000d2d3:	0f b6 c0             	movzx  eax,al
c000d2d6:	85 c0                	test   eax,eax
c000d2d8:	74 7c                	je     c000d356 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d2da:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d2df:	0f b6 c0             	movzx  eax,al
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	74 43                	je     c000d329 <sendKeyboardToken(KeyboardToken)+0x392>
c000d2e6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d2ea:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d2ee:	85 c0                	test   eax,eax
c000d2f0:	74 2b                	je     c000d31d <sendKeyboardToken(KeyboardToken)+0x386>
c000d2f2:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d2f8:	89 d0                	mov    eax,edx
c000d2fa:	c1 e0 02             	shl    eax,0x2
c000d2fd:	01 d0                	add    eax,edx
c000d2ff:	d1 e0                	shl    eax,1
c000d301:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d309:	0f b7 c0             	movzx  eax,ax
c000d30c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d30f:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d314:	01 d0                	add    eax,edx
c000d316:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d31b:	eb 71                	jmp    c000d38e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d31d:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d327:	eb 65                	jmp    c000d38e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d329:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d32e:	85 c0                	test   eax,eax
c000d330:	74 18                	je     c000d34a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d332:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d337:	0f b6 c0             	movzx  eax,al
c000d33a:	83 ec 0c             	sub    esp,0xc
c000d33d:	50                   	push   eax
c000d33e:	e8 79 fb ff ff       	call   c000cebc <sendKeyToTerminal(unsigned char)>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d34a:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d354:	eb 38                	jmp    c000d38e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d359:	0f b7 c0             	movzx  eax,ax
c000d35c:	3d 01 01 00 00       	cmp    eax,0x101
c000d361:	75 2b                	jne    c000d38e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d363:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d368:	85 c0                	test   eax,eax
c000d36a:	74 18                	je     c000d384 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d36c:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d371:	0f b6 c0             	movzx  eax,al
c000d374:	83 ec 0c             	sub    esp,0xc
c000d377:	50                   	push   eax
c000d378:	e8 3f fb ff ff       	call   c000cebc <sendKeyToTerminal(unsigned char)>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d384:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d38e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d391:	83 f0 01             	xor    eax,0x1
c000d394:	0f b6 c0             	movzx  eax,al
c000d397:	85 c0                	test   eax,eax
c000d399:	74 5a                	je     c000d3f5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d39b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d39e:	83 f0 01             	xor    eax,0x1
c000d3a1:	0f b6 c0             	movzx  eax,al
c000d3a4:	85 c0                	test   eax,eax
c000d3a6:	74 4d                	je     c000d3f5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3a8:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3ad:	83 f0 01             	xor    eax,0x1
c000d3b0:	0f b6 c0             	movzx  eax,al
c000d3b3:	85 c0                	test   eax,eax
c000d3b5:	74 3e                	je     c000d3f5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ba:	0f b7 c0             	movzx  eax,ax
c000d3bd:	83 f8 1f             	cmp    eax,0x1f
c000d3c0:	76 0b                	jbe    c000d3cd <sendKeyboardToken(KeyboardToken)+0x436>
c000d3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c5:	0f b7 c0             	movzx  eax,ax
c000d3c8:	83 f8 7e             	cmp    eax,0x7e
c000d3cb:	76 16                	jbe    c000d3e3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d0:	0f b7 c0             	movzx  eax,ax
c000d3d3:	83 f8 0a             	cmp    eax,0xa
c000d3d6:	74 0b                	je     c000d3e3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3db:	0f b7 c0             	movzx  eax,ax
c000d3de:	83 f8 08             	cmp    eax,0x8
c000d3e1:	75 12                	jne    c000d3f5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e6:	0f b6 c0             	movzx  eax,al
c000d3e9:	83 ec 0c             	sub    esp,0xc
c000d3ec:	50                   	push   eax
c000d3ed:	e8 ca fa ff ff       	call   c000cebc <sendKeyToTerminal(unsigned char)>
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3f8:	83 f0 01             	xor    eax,0x1
c000d3fb:	0f b6 c0             	movzx  eax,al
c000d3fe:	85 c0                	test   eax,eax
c000d400:	74 5d                	je     c000d45f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d402:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d405:	83 f0 01             	xor    eax,0x1
c000d408:	0f b6 c0             	movzx  eax,al
c000d40b:	85 c0                	test   eax,eax
c000d40d:	74 50                	je     c000d45f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d40f:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d414:	0f b6 c0             	movzx  eax,al
c000d417:	85 c0                	test   eax,eax
c000d419:	74 44                	je     c000d45f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41e:	0f b7 c0             	movzx  eax,ax
c000d421:	83 f8 3f             	cmp    eax,0x3f
c000d424:	76 39                	jbe    c000d45f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	0f b7 c0             	movzx  eax,ax
c000d42c:	83 f8 7f             	cmp    eax,0x7f
c000d42f:	77 2e                	ja     c000d45f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d434:	88 c2                	mov    dl,al
c000d436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d439:	0f b7 c0             	movzx  eax,ax
c000d43c:	83 f8 5f             	cmp    eax,0x5f
c000d43f:	76 04                	jbe    c000d445 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d441:	b0 20                	mov    al,0x20
c000d443:	eb 02                	jmp    c000d447 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d445:	b0 00                	mov    al,0x0
c000d447:	89 d1                	mov    ecx,edx
c000d449:	29 c1                	sub    ecx,eax
c000d44b:	89 c8                	mov    eax,ecx
c000d44d:	83 e8 40             	sub    eax,0x40
c000d450:	0f b6 c0             	movzx  eax,al
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	50                   	push   eax
c000d457:	e8 60 fa ff ff       	call   c000cebc <sendKeyToTerminal(unsigned char)>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d462:	0f b7 c0             	movzx  eax,ax
c000d465:	3d 00 03 00 00       	cmp    eax,0x300
c000d46a:	75 12                	jne    c000d47e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d46c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d46f:	83 f0 01             	xor    eax,0x1
c000d472:	0f b6 c0             	movzx  eax,al
c000d475:	85 c0                	test   eax,eax
c000d477:	74 05                	je     c000d47e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d479:	e8 9b b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d47e:	90                   	nop
c000d47f:	c9                   	leave  
c000d480:	c3                   	ret    

c000d481 <clearInternalKeybuffer(VgaText*)>:
c000d481:	55                   	push   ebp
c000d482:	89 e5                	mov    ebp,esp
c000d484:	83 ec 08             	sub    esp,0x8
c000d487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48a:	05 02 01 00 00       	add    eax,0x102
c000d48f:	83 ec 0c             	sub    esp,0xc
c000d492:	50                   	push   eax
c000d493:	e8 e8 30 ff ff       	call   c0000580 <strlen>
c000d498:	83 c4 10             	add    esp,0x10
c000d49b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d49e:	81 c2 02 01 00 00    	add    edx,0x102
c000d4a4:	83 ec 04             	sub    esp,0x4
c000d4a7:	50                   	push   eax
c000d4a8:	6a 00                	push   0x0
c000d4aa:	52                   	push   edx
c000d4ab:	e8 40 30 ff ff       	call   c00004f0 <memset>
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	90                   	nop
c000d4b4:	c9                   	leave  
c000d4b5:	c3                   	ret    

c000d4b6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4b6:	55                   	push   ebp
c000d4b7:	89 e5                	mov    ebp,esp
c000d4b9:	83 ec 18             	sub    esp,0x18
c000d4bc:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4c1:	85 c0                	test   eax,eax
c000d4c3:	74 2a                	je     c000d4ef <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4c5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4cb:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000d4d1:	83 ec 04             	sub    esp,0x4
c000d4d4:	68 a0 90 02 c0       	push   0xc00290a0
c000d4d9:	83 ec 08             	sub    esp,0x8
c000d4dc:	89 e0                	mov    eax,esp
c000d4de:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d4e1:	89 08                	mov    DWORD PTR [eax],ecx
c000d4e3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d4e6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d4ea:	ff d2                	call   edx
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	fb                   	sti    
c000d4f0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d4f7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d4fb:	0f 84 0d 01 00 00    	je     c000d60e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d50a:	0f be c0             	movsx  eax,al
c000d50d:	85 c0                	test   eax,eax
c000d50f:	75 2c                	jne    c000d53d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d511:	fa                   	cli    
c000d512:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d517:	83 c0 01             	add    eax,0x1
c000d51a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d51f:	e8 2c 85 00 00       	call   c0015a50 <schedule()>
c000d524:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d529:	83 e8 01             	sub    eax,0x1
c000d52c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d531:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d536:	85 c0                	test   eax,eax
c000d538:	75 c7                	jne    c000d501 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d53a:	fb                   	sti    
c000d53b:	eb c4                	jmp    c000d501 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d53d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d540:	8d 50 01             	lea    edx,[eax+0x1]
c000d543:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d546:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d549:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d54f:	88 10                	mov    BYTE PTR [eax],dl
c000d551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d554:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d55a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d55d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d561:	83 f8 03             	cmp    eax,0x3
c000d564:	75 1e                	jne    c000d584 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d566:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d56b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d56d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d570:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d576:	83 ec 08             	sub    esp,0x8
c000d579:	6a 02                	push   0x2
c000d57b:	50                   	push   eax
c000d57c:	e8 6a 40 00 00       	call   c00115eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d588:	83 f8 1c             	cmp    eax,0x1c
c000d58b:	75 1e                	jne    c000d5ab <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d58d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d597:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d59d:	83 ec 08             	sub    esp,0x8
c000d5a0:	6a 09                	push   0x9
c000d5a2:	50                   	push   eax
c000d5a3:	e8 43 40 00 00       	call   c00115eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ae:	05 02 01 00 00       	add    eax,0x102
c000d5b3:	83 ec 0c             	sub    esp,0xc
c000d5b6:	50                   	push   eax
c000d5b7:	e8 c4 2f ff ff       	call   c0000580 <strlen>
c000d5bc:	83 c4 10             	add    esp,0x10
c000d5bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5c2:	81 c2 02 01 00 00    	add    edx,0x102
c000d5c8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5ce:	81 c2 02 01 00 00    	add    edx,0x102
c000d5d4:	83 ec 04             	sub    esp,0x4
c000d5d7:	50                   	push   eax
c000d5d8:	51                   	push   ecx
c000d5d9:	52                   	push   edx
c000d5da:	e8 f1 2d ff ff       	call   c00003d0 <memmove>
c000d5df:	83 c4 10             	add    esp,0x10
c000d5e2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d5e6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d5ea:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5ee:	83 f8 0a             	cmp    eax,0xa
c000d5f1:	74 16                	je     c000d609 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d5f3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5f7:	83 f8 03             	cmp    eax,0x3
c000d5fa:	74 0d                	je     c000d609 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d5fc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d600:	83 f8 1c             	cmp    eax,0x1c
c000d603:	0f 85 ee fe ff ff    	jne    c000d4f7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d60c:	eb 03                	jmp    c000d611 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d60e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d611:	c9                   	leave  
c000d612:	c3                   	ret    
c000d613:	90                   	nop

c000d614 <Keyboard::Keyboard(char const*)>:
c000d614:	83 ec 0c             	sub    esp,0xc
c000d617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d61b:	83 ec 08             	sub    esp,0x8
c000d61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d622:	50                   	push   eax
c000d623:	e8 44 f1 ff ff       	call   c000c76c <Device::Device(char const*)>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	ba 3c 15 02 c0       	mov    edx,0xc002153c
c000d630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d634:	89 10                	mov    DWORD PTR [eax],edx
c000d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d63a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d644:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d64b:	90                   	nop
c000d64c:	83 c4 0c             	add    esp,0xc
c000d64f:	c3                   	ret    

c000d650 <Keyboard::~Keyboard()>:
c000d650:	83 ec 0c             	sub    esp,0xc
c000d653:	ba 3c 15 02 c0       	mov    edx,0xc002153c
c000d658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65c:	89 10                	mov    DWORD PTR [eax],edx
c000d65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	50                   	push   eax
c000d666:	e8 6b ee ff ff       	call   c000c4d6 <Device::~Device()>
c000d66b:	83 c4 10             	add    esp,0x10
c000d66e:	90                   	nop
c000d66f:	83 c4 0c             	add    esp,0xc
c000d672:	c3                   	ret    
c000d673:	90                   	nop

c000d674 <Keyboard::~Keyboard()>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	83 ec 0c             	sub    esp,0xc
c000d67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67e:	e8 cd ff ff ff       	call   c000d650 <Keyboard::~Keyboard()>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	83 ec 08             	sub    esp,0x8
c000d689:	68 5c 01 00 00       	push   0x15c
c000d68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d692:	e8 75 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	83 c4 0c             	add    esp,0xc
c000d69d:	c3                   	ret    

c000d69e <LogicalDisk::close(int, int, void*)>:
c000d69e:	83 c8 ff             	or     eax,0xffffffff
c000d6a1:	c3                   	ret    

c000d6a2 <LogicalDisk::~LogicalDisk()>:
c000d6a2:	83 ec 0c             	sub    esp,0xc
c000d6a5:	ba b4 15 02 c0       	mov    edx,0xc00215b4
c000d6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ae:	89 10                	mov    DWORD PTR [eax],edx
c000d6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	50                   	push   eax
c000d6b8:	e8 19 ee ff ff       	call   c000c4d6 <Device::~Device()>
c000d6bd:	83 c4 10             	add    esp,0x10
c000d6c0:	90                   	nop
c000d6c1:	83 c4 0c             	add    esp,0xc
c000d6c4:	c3                   	ret    
c000d6c5:	90                   	nop

c000d6c6 <LogicalDisk::~LogicalDisk()>:
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	83 ec 0c             	sub    esp,0xc
c000d6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d0:	e8 cd ff ff ff       	call   c000d6a2 <LogicalDisk::~LogicalDisk()>
c000d6d5:	83 c4 10             	add    esp,0x10
c000d6d8:	83 ec 08             	sub    esp,0x8
c000d6db:	68 78 01 00 00       	push   0x178
c000d6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e4:	e8 23 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	83 c4 0c             	add    esp,0xc
c000d6ef:	c3                   	ret    

c000d6f0 <LogicalDisk::open(int, int, void*)>:
c000d6f0:	83 ec 18             	sub    esp,0x18
c000d6f3:	68 68 15 02 c0       	push   0xc0021568
c000d6f8:	e8 50 3a 00 00       	call   c001114d <KePanic(char const*)>
c000d6fd:	83 c8 ff             	or     eax,0xffffffff
c000d700:	83 c4 1c             	add    esp,0x1c
c000d703:	c3                   	ret    

c000d704 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d704:	53                   	push   ebx
c000d705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d70d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d711:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d717:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d71d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d723:	77 10                	ja     c000d735 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d725:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d72b:	89 d3                	mov    ebx,edx
c000d72d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d733:	72 05                	jb     c000d73a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d735:	83 c8 ff             	or     eax,0xffffffff
c000d738:	89 c2                	mov    edx,eax
c000d73a:	5b                   	pop    ebx
c000d73b:	c3                   	ret    

c000d73c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d73c:	56                   	push   esi
c000d73d:	83 c8 ff             	or     eax,0xffffffff
c000d740:	53                   	push   ebx
c000d741:	89 c2                	mov    edx,eax
c000d743:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d747:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d74b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d74f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d755:	77 27                	ja     c000d77e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d757:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d75d:	89 d8                	mov    eax,ebx
c000d75f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d765:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d76a:	89 c2                	mov    edx,eax
c000d76c:	73 10                	jae    c000d77e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d76e:	89 c8                	mov    eax,ecx
c000d770:	89 da                	mov    edx,ebx
c000d772:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d778:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d77e:	5b                   	pop    ebx
c000d77f:	5e                   	pop    esi
c000d780:	c3                   	ret    
c000d781:	90                   	nop

c000d782 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d782:	83 ec 1c             	sub    esp,0x1c
c000d785:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d795:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d799:	89 04 24             	mov    DWORD PTR [esp],eax
c000d79c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a8:	83 ec 08             	sub    esp,0x8
c000d7ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7af:	50                   	push   eax
c000d7b0:	e8 b7 ef ff ff       	call   c000c76c <Device::Device(char const*)>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	ba b4 15 02 c0       	mov    edx,0xc00215b4
c000d7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c1:	89 10                	mov    DWORD PTR [eax],edx
c000d7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7dd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d7f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d7f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d7fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7fe:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d804:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d80a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d80e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d811:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d815:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d81b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d825:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d829:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d833:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d83d:	90                   	nop
c000d83e:	83 c4 1c             	add    esp,0x1c
c000d841:	c3                   	ret    

c000d842 <LogicalDisk::assignDriveLetter()>:
c000d842:	55                   	push   ebp
c000d843:	57                   	push   edi
c000d844:	56                   	push   esi
c000d845:	53                   	push   ebx
c000d846:	83 ec 14             	sub    esp,0x14
c000d849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d84d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d853:	b0 41                	mov    al,0x41
c000d855:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d85b:	84 d2                	test   dl,dl
c000d85d:	75 02                	jne    c000d861 <LogicalDisk::assignDriveLetter()+0x1f>
c000d85f:	b0 43                	mov    al,0x43
c000d861:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d867:	0f b6 ca             	movzx  ecx,dl
c000d86a:	0f be e8             	movsx  ebp,al
c000d86d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d871:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d875:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d87b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d87f:	3c 43                	cmp    al,0x43
c000d881:	75 10                	jne    c000d893 <LogicalDisk::assignDriveLetter()+0x51>
c000d883:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d88a:	75 5a                	jne    c000d8e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d88c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d891:	75 53                	jne    c000d8e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d893:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d896:	ba 01 00 00 00       	mov    edx,0x1
c000d89b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d89e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8a1:	d3 e2                	shl    edx,cl
c000d8a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8a7:	89 d7                	mov    edi,edx
c000d8a9:	89 d6                	mov    esi,edx
c000d8ab:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8af:	c1 ff 1f             	sar    edi,0x1f
c000d8b2:	21 f9                	and    ecx,edi
c000d8b4:	09 d1                	or     ecx,edx
c000d8b6:	75 2e                	jne    c000d8e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8bc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8c0:	09 f2                	or     edx,esi
c000d8c2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8c5:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d8cf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8d5:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d8dc:	09 fa                	or     edx,edi
c000d8de:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d8e4:	eb 0d                	jmp    c000d8f3 <LogicalDisk::assignDriveLetter()+0xb1>
c000d8e6:	8d 50 01             	lea    edx,[eax+0x1]
c000d8e9:	45                   	inc    ebp
c000d8ea:	80 fa 5b             	cmp    dl,0x5b
c000d8ed:	88 d0                	mov    al,dl
c000d8ef:	75 8e                	jne    c000d87f <LogicalDisk::assignDriveLetter()+0x3d>
c000d8f1:	31 c0                	xor    eax,eax
c000d8f3:	83 c4 14             	add    esp,0x14
c000d8f6:	5b                   	pop    ebx
c000d8f7:	5e                   	pop    esi
c000d8f8:	5f                   	pop    edi
c000d8f9:	5d                   	pop    ebp
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <LogicalDisk::mount()>:
c000d8fc:	56                   	push   esi
c000d8fd:	53                   	push   ebx
c000d8fe:	53                   	push   ebx
c000d8ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d903:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d909:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d913:	85 db                	test   ebx,ebx
c000d915:	74 27                	je     c000d93e <LogicalDisk::mount()+0x42>
c000d917:	51                   	push   ecx
c000d918:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d91f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d921:	83 e8 41             	sub    eax,0x41
c000d924:	50                   	push   eax
c000d925:	56                   	push   esi
c000d926:	53                   	push   ebx
c000d927:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	84 c0                	test   al,al
c000d92f:	74 08                	je     c000d939 <LogicalDisk::mount()+0x3d>
c000d931:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d937:	eb 07                	jmp    c000d940 <LogicalDisk::mount()+0x44>
c000d939:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d93c:	eb d5                	jmp    c000d913 <LogicalDisk::mount()+0x17>
c000d93e:	31 c0                	xor    eax,eax
c000d940:	5a                   	pop    edx
c000d941:	5b                   	pop    ebx
c000d942:	5e                   	pop    esi
c000d943:	c3                   	ret    

c000d944 <LogicalDisk::unmount()>:
c000d944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d948:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d952:	c3                   	ret    
c000d953:	90                   	nop

c000d954 <LogicalDisk::eject()>:
c000d954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d958:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d95e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d960:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d964:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d967:	90                   	nop

c000d968 <LogicalDisk::unassignDriveLetter()>:
c000d968:	57                   	push   edi
c000d969:	56                   	push   esi
c000d96a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d96e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d975:	85 c9                	test   ecx,ecx
c000d977:	75 0f                	jne    c000d988 <LogicalDisk::unassignDriveLetter()+0x20>
c000d979:	c7 44 24 0c 8c 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc002158c
c000d981:	5e                   	pop    esi
c000d982:	5f                   	pop    edi
c000d983:	e9 c5 37 00 00       	jmp    c001114d <KePanic(char const*)>
c000d988:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d98f:	83 e9 41             	sub    ecx,0x41
c000d992:	b8 01 00 00 00       	mov    eax,0x1
c000d997:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9a2:	d3 e0                	shl    eax,cl
c000d9a4:	89 c7                	mov    edi,eax
c000d9a6:	f7 d0                	not    eax
c000d9a8:	c1 ff 1f             	sar    edi,0x1f
c000d9ab:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9b1:	89 fe                	mov    esi,edi
c000d9b3:	f7 d6                	not    esi
c000d9b5:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9bb:	5e                   	pop    esi
c000d9bc:	5f                   	pop    edi
c000d9bd:	c3                   	ret    

c000d9be <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9be:	57                   	push   edi
c000d9bf:	56                   	push   esi
c000d9c0:	53                   	push   ebx
c000d9c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9d7:	77 41                	ja     c000da1a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9d9:	99                   	cdq    
c000d9da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d9e0:	01 c8                	add    eax,ecx
c000d9e2:	11 da                	adc    edx,ebx
c000d9e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d9ea:	19 d7                	sbb    edi,edx
c000d9ec:	72 33                	jb     c000da21 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d9ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d9f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d9fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d9fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da02:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da12:	5b                   	pop    ebx
c000da13:	5e                   	pop    esi
c000da14:	5f                   	pop    edi
c000da15:	e9 d4 0a 00 00       	jmp    c000e4ee <VCache::read(unsigned long long, int, void*)>
c000da1a:	b8 05 00 00 00       	mov    eax,0x5
c000da1f:	eb 05                	jmp    c000da26 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da21:	b8 07 00 00 00       	mov    eax,0x7
c000da26:	5b                   	pop    ebx
c000da27:	5e                   	pop    esi
c000da28:	5f                   	pop    edi
c000da29:	c3                   	ret    

c000da2a <LogicalDisk::write(unsigned long long, int, void*)>:
c000da2a:	57                   	push   edi
c000da2b:	56                   	push   esi
c000da2c:	53                   	push   ebx
c000da2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da43:	77 41                	ja     c000da86 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da45:	99                   	cdq    
c000da46:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da4c:	01 c8                	add    eax,ecx
c000da4e:	11 da                	adc    edx,ebx
c000da50:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da56:	19 d7                	sbb    edi,edx
c000da58:	72 33                	jb     c000da8d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da5a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da60:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da6a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da6e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da7e:	5b                   	pop    ebx
c000da7f:	5e                   	pop    esi
c000da80:	5f                   	pop    edi
c000da81:	e9 6e 09 00 00       	jmp    c000e3f4 <VCache::write(unsigned long long, int, void*)>
c000da86:	b8 05 00 00 00       	mov    eax,0x5
c000da8b:	eb 05                	jmp    c000da92 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000da8d:	b8 07 00 00 00       	mov    eax,0x7
c000da92:	5b                   	pop    ebx
c000da93:	5e                   	pop    esi
c000da94:	5f                   	pop    edi
c000da95:	c3                   	ret    
c000da96:	66 90                	xchg   ax,ax

c000da98 <Mouse::Mouse(char const*)>:
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9f:	83 ec 08             	sub    esp,0x8
c000daa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daa6:	50                   	push   eax
c000daa7:	e8 c0 ec ff ff       	call   c000c76c <Device::Device(char const*)>
c000daac:	83 c4 10             	add    esp,0x10
c000daaf:	ba e0 15 02 c0       	mov    edx,0xc00215e0
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	89 10                	mov    DWORD PTR [eax],edx
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dac8:	90                   	nop
c000dac9:	83 c4 0c             	add    esp,0xc
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop
c000dace:	66 90                	xchg   ax,ax

c000dad0 <Mouse::~Mouse()>:
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	ba e0 15 02 c0       	mov    edx,0xc00215e0
c000dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadc:	89 10                	mov    DWORD PTR [eax],edx
c000dade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae2:	83 ec 0c             	sub    esp,0xc
c000dae5:	50                   	push   eax
c000dae6:	e8 eb e9 ff ff       	call   c000c4d6 <Device::~Device()>
c000daeb:	83 c4 10             	add    esp,0x10
c000daee:	90                   	nop
c000daef:	83 c4 0c             	add    esp,0xc
c000daf2:	c3                   	ret    
c000daf3:	90                   	nop

c000daf4 <Mouse::~Mouse()>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	83 ec 0c             	sub    esp,0xc
c000dafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafe:	e8 cd ff ff ff       	call   c000dad0 <Mouse::~Mouse()>
c000db03:	83 c4 10             	add    esp,0x10
c000db06:	83 ec 08             	sub    esp,0x8
c000db09:	68 58 01 00 00       	push   0x158
c000db0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db12:	e8 f5 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	83 c4 0c             	add    esp,0xc
c000db1d:	c3                   	ret    

c000db1e <NIC::getMAC()>:
c000db1e:	31 c0                	xor    eax,eax
c000db20:	31 d2                	xor    edx,edx
c000db22:	c3                   	ret    
c000db23:	90                   	nop

c000db24 <NIC::write(int, unsigned char*, int*)>:
c000db24:	b8 01 00 00 00       	mov    eax,0x1
c000db29:	c3                   	ret    

c000db2a <NIC::NIC(char const*)>:
c000db2a:	83 ec 0c             	sub    esp,0xc
c000db2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db31:	83 ec 08             	sub    esp,0x8
c000db34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db38:	50                   	push   eax
c000db39:	e8 2e ec ff ff       	call   c000c76c <Device::Device(char const*)>
c000db3e:	83 c4 10             	add    esp,0x10
c000db41:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c000db46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4a:	89 10                	mov    DWORD PTR [eax],edx
c000db4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db50:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db5a:	90                   	nop
c000db5b:	83 c4 0c             	add    esp,0xc
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <NIC::~NIC()>:
c000db60:	83 ec 0c             	sub    esp,0xc
c000db63:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	89 10                	mov    DWORD PTR [eax],edx
c000db6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db72:	83 ec 0c             	sub    esp,0xc
c000db75:	50                   	push   eax
c000db76:	e8 5b e9 ff ff       	call   c000c4d6 <Device::~Device()>
c000db7b:	83 c4 10             	add    esp,0x10
c000db7e:	90                   	nop
c000db7f:	83 c4 0c             	add    esp,0xc
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <NIC::~NIC()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8e:	e8 cd ff ff ff       	call   c000db60 <NIC::~NIC()>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	83 ec 08             	sub    esp,0x8
c000db99:	68 58 01 00 00       	push   0x158
c000db9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba2:	e8 65 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	83 c4 0c             	add    esp,0xc
c000dbad:	c3                   	ret    

c000dbae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbae:	55                   	push   ebp
c000dbaf:	57                   	push   edi
c000dbb0:	56                   	push   esi
c000dbb1:	53                   	push   ebx
c000dbb2:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbb8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dbbf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dbc6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dbcd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dbd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbd8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbdc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dbe3:	e8 80 ec ff ff       	call   c000c868 <Device::getName()>
c000dbe8:	5a                   	pop    edx
c000dbe9:	59                   	pop    ecx
c000dbea:	50                   	push   eax
c000dbeb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbef:	55                   	push   ebp
c000dbf0:	e8 5b 2a ff ff       	call   c0000650 <strcpy>
c000dbf5:	5b                   	pop    ebx
c000dbf6:	58                   	pop    eax
c000dbf7:	68 38 16 02 c0       	push   0xc0021638
c000dbfc:	55                   	push   ebp
c000dbfd:	e8 6e 2c ff ff       	call   c0000870 <strcat>
c000dc02:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc09:	e8 c5 9e ff ff       	call   c0007ad3 <malloc>
c000dc0e:	83 c4 0c             	add    esp,0xc
c000dc11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc19:	89 c3                	mov    ebx,eax
c000dc1b:	57                   	push   edi
c000dc1c:	56                   	push   esi
c000dc1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc24:	55                   	push   ebp
c000dc25:	50                   	push   eax
c000dc26:	e8 57 fb ff ff       	call   c000d782 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc2b:	83 c4 14             	add    esp,0x14
c000dc2e:	53                   	push   ebx
c000dc2f:	e8 0e fc ff ff       	call   c000d842 <LogicalDisk::assignDriveLetter()>
c000dc34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc37:	e8 c0 fc ff ff       	call   c000d8fc <LogicalDisk::mount()>
c000dc3c:	58                   	pop    eax
c000dc3d:	5a                   	pop    edx
c000dc3e:	53                   	push   ebx
c000dc3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc46:	e8 89 e9 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c000dc4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc51:	5b                   	pop    ebx
c000dc52:	5e                   	pop    esi
c000dc53:	5f                   	pop    edi
c000dc54:	5d                   	pop    ebp
c000dc55:	c3                   	ret    

c000dc56 <createPartitionsForDisk(PhysicalDisk*)>:
c000dc56:	55                   	push   ebp
c000dc57:	57                   	push   edi
c000dc58:	56                   	push   esi
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc60:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc67:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc6d:	3d 00 02 00 00       	cmp    eax,0x200
c000dc72:	74 27                	je     c000dc9b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc74:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc7a:	83 ec 10             	sub    esp,0x10
c000dc7d:	99                   	cdq    
c000dc7e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dc84:	52                   	push   edx
c000dc85:	50                   	push   eax
c000dc86:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dc8a:	c1 e6 0a             	shl    esi,0xa
c000dc8d:	89 fd                	mov    ebp,edi
c000dc8f:	55                   	push   ebp
c000dc90:	56                   	push   esi
c000dc91:	e8 7a 14 01 00       	call   c001f110 <__udivdi3>
c000dc96:	e9 b9 00 00 00       	jmp    c000dd54 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dc9b:	83 ec 0c             	sub    esp,0xc
c000dc9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dca0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dca4:	56                   	push   esi
c000dca5:	6a 01                	push   0x1
c000dca7:	6a 00                	push   0x0
c000dca9:	6a 00                	push   0x0
c000dcab:	53                   	push   ebx
c000dcac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcaf:	83 c4 20             	add    esp,0x20
c000dcb2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcba:	75 0a                	jne    c000dcc6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dcbc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dcc4:	74 2c                	je     c000dcf2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dccc:	83 ec 10             	sub    esp,0x10
c000dccf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dcd5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dcdb:	89 f7                	mov    edi,esi
c000dcdd:	c1 ff 1f             	sar    edi,0x1f
c000dce0:	57                   	push   edi
c000dce1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dce5:	56                   	push   esi
c000dce6:	c1 e0 0a             	shl    eax,0xa
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 20 14 01 00       	call   c001f110 <__udivdi3>
c000dcf0:	eb 62                	jmp    c000dd54 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcf2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dcf9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd00:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd07:	89 cf                	mov    edi,ecx
c000dd09:	83 e2 7f             	and    edx,0x7f
c000dd0c:	83 e7 7f             	and    edi,0x7f
c000dd0f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd12:	83 e0 7f             	and    eax,0x7f
c000dd15:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd18:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd1f:	83 e0 7f             	and    eax,0x7f
c000dd22:	01 d0                	add    eax,edx
c000dd24:	84 c0                	test   al,al
c000dd26:	89 c5                	mov    ebp,eax
c000dd28:	74 41                	je     c000dd6b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd2a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd30:	83 ec 10             	sub    esp,0x10
c000dd33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd39:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd3f:	89 f7                	mov    edi,esi
c000dd41:	c1 ff 1f             	sar    edi,0x1f
c000dd44:	57                   	push   edi
c000dd45:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd49:	56                   	push   esi
c000dd4a:	c1 e0 0a             	shl    eax,0xa
c000dd4d:	52                   	push   edx
c000dd4e:	50                   	push   eax
c000dd4f:	e8 bc 13 01 00       	call   c001f110 <__udivdi3>
c000dd54:	83 c4 14             	add    esp,0x14
c000dd57:	52                   	push   edx
c000dd58:	50                   	push   eax
c000dd59:	6a 00                	push   0x0
c000dd5b:	6a 00                	push   0x0
c000dd5d:	53                   	push   ebx
c000dd5e:	e8 4b fe ff ff       	call   c000dbae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd63:	83 c4 20             	add    esp,0x20
c000dd66:	e9 73 01 00 00       	jmp    c000dede <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd6b:	89 f0                	mov    eax,esi
c000dd6d:	31 c9                	xor    ecx,ecx
c000dd6f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd76:	75 02                	jne    c000dd7a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd78:	89 cd                	mov    ebp,ecx
c000dd7a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dd82:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dd89:	83 c0 10             	add    eax,0x10
c000dd8c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dd94:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000dd9b:	c1 e2 08             	shl    edx,0x8
c000dd9e:	c1 e6 10             	shl    esi,0x10
c000dda1:	09 f2                	or     edx,esi
c000dda3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ddaa:	09 f2                	or     edx,esi
c000ddac:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddb3:	c1 e6 18             	shl    esi,0x18
c000ddb6:	09 f2                	or     edx,esi
c000ddb8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ddbf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ddc3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ddca:	c1 e6 10             	shl    esi,0x10
c000ddcd:	c1 e2 08             	shl    edx,0x8
c000ddd0:	09 f2                	or     edx,esi
c000ddd2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ddd9:	09 f2                	or     edx,esi
c000dddb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000dde2:	c1 e6 18             	shl    esi,0x18
c000dde5:	09 f2                	or     edx,esi
c000dde7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ddeb:	41                   	inc    ecx
c000ddec:	83 f9 04             	cmp    ecx,0x4
c000ddef:	0f 85 7a ff ff ff    	jne    c000dd6f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ddf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddf9:	83 f0 01             	xor    eax,0x1
c000ddfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de00:	75 4f                	jne    c000de51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de06:	83 f0 01             	xor    eax,0x1
c000de09:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de0d:	75 42                	jne    c000de51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de0f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de1d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de2b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de31:	89 f7                	mov    edi,esi
c000de33:	c1 ff 1f             	sar    edi,0x1f
c000de36:	57                   	push   edi
c000de37:	56                   	push   esi
c000de38:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de3c:	52                   	push   edx
c000de3d:	c1 e0 0a             	shl    eax,0xa
c000de40:	50                   	push   eax
c000de41:	e8 ca 12 01 00       	call   c001f110 <__udivdi3>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de51:	89 e8                	mov    eax,ebp
c000de53:	0f b6 e8             	movzx  ebp,al
c000de56:	85 ed                	test   ebp,ebp
c000de58:	74 50                	je     c000deaa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de76:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de82:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de8a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000de8e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000de92:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000de96:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000de9a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000de9e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dea2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dea6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000deaa:	31 ed                	xor    ebp,ebp
c000deac:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deb0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000deb4:	89 f8                	mov    eax,edi
c000deb6:	09 f0                	or     eax,esi
c000deb8:	74 1e                	je     c000ded8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000deba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000debe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dec2:	89 d1                	mov    ecx,edx
c000dec4:	09 c1                	or     ecx,eax
c000dec6:	74 10                	je     c000ded8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dec8:	83 ec 0c             	sub    esp,0xc
c000decb:	57                   	push   edi
c000decc:	56                   	push   esi
c000decd:	52                   	push   edx
c000dece:	50                   	push   eax
c000decf:	53                   	push   ebx
c000ded0:	e8 d9 fc ff ff       	call   c000dbae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ded5:	83 c4 20             	add    esp,0x20
c000ded8:	45                   	inc    ebp
c000ded9:	83 fd 04             	cmp    ebp,0x4
c000dedc:	75 ce                	jne    c000deac <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000dede:	81 c4 5c 02 00 00    	add    esp,0x25c
c000dee4:	5b                   	pop    ebx
c000dee5:	5e                   	pop    esi
c000dee6:	5f                   	pop    edi
c000dee7:	5d                   	pop    ebp
c000dee8:	c3                   	ret    
c000dee9:	66 90                	xchg   ax,ax
c000deeb:	90                   	nop

c000deec <Serial::Serial(char const*)>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def3:	83 ec 08             	sub    esp,0x8
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	50                   	push   eax
c000defb:	e8 6c e8 ff ff       	call   c000c76c <Device::Device(char const*)>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0c:	89 10                	mov    DWORD PTR [eax],edx
c000df0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df12:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df1c:	90                   	nop
c000df1d:	83 c4 0c             	add    esp,0xc
c000df20:	c3                   	ret    
c000df21:	90                   	nop
c000df22:	66 90                	xchg   ax,ax

c000df24 <Serial::~Serial()>:
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	83 ec 0c             	sub    esp,0xc
c000df39:	50                   	push   eax
c000df3a:	e8 97 e5 ff ff       	call   c000c4d6 <Device::~Device()>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	90                   	nop
c000df43:	83 c4 0c             	add    esp,0xc
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <Serial::~Serial()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 cd ff ff ff       	call   c000df24 <Serial::~Serial()>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	83 ec 08             	sub    esp,0x8
c000df5d:	68 58 01 00 00       	push   0x158
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	e8 a1 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	c3                   	ret    
c000df72:	66 90                	xchg   ax,ax

c000df74 <Timer::Timer(char const*)>:
c000df74:	83 ec 0c             	sub    esp,0xc
c000df77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7b:	83 ec 08             	sub    esp,0x8
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	50                   	push   eax
c000df83:	e8 e4 e7 ff ff       	call   c000c76c <Device::Device(char const*)>
c000df88:	83 c4 10             	add    esp,0x10
c000df8b:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000df90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df94:	89 10                	mov    DWORD PTR [eax],edx
c000df96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfa4:	90                   	nop
c000dfa5:	83 c4 0c             	add    esp,0xc
c000dfa8:	c3                   	ret    
c000dfa9:	90                   	nop
c000dfaa:	66 90                	xchg   ax,ax

c000dfac <Timer::~Timer()>:
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000dfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb8:	89 10                	mov    DWORD PTR [eax],edx
c000dfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbe:	83 ec 0c             	sub    esp,0xc
c000dfc1:	50                   	push   eax
c000dfc2:	e8 0f e5 ff ff       	call   c000c4d6 <Device::~Device()>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	90                   	nop
c000dfcb:	83 c4 0c             	add    esp,0xc
c000dfce:	c3                   	ret    
c000dfcf:	90                   	nop

c000dfd0 <Timer::~Timer()>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	83 ec 0c             	sub    esp,0xc
c000dfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfda:	e8 cd ff ff ff       	call   c000dfac <Timer::~Timer()>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	83 ec 08             	sub    esp,0x8
c000dfe5:	68 5c 01 00 00       	push   0x15c
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	e8 19 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	83 c4 0c             	add    esp,0xc
c000dff9:	c3                   	ret    

c000dffa <Timer::read()>:
c000dffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dffe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e004:	c3                   	ret    

c000e005 <setupTimer(int)>:
c000e005:	53                   	push   ebx
c000e006:	83 ec 14             	sub    esp,0x14
c000e009:	68 5c 01 00 00       	push   0x15c
c000e00e:	e8 c0 9a ff ff       	call   c0007ad3 <malloc>
c000e013:	89 04 24             	mov    DWORD PTR [esp],eax
c000e016:	89 c3                	mov    ebx,eax
c000e018:	e8 57 09 01 00       	call   c001e974 <PIT::PIT()>
c000e01d:	58                   	pop    eax
c000e01e:	5a                   	pop    edx
c000e01f:	53                   	push   ebx
c000e020:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e026:	e8 a9 e5 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c000e02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e02d:	6a 00                	push   0x0
c000e02f:	6a 00                	push   0x0
c000e031:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e035:	53                   	push   ebx
c000e036:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e039:	83 c4 28             	add    esp,0x28
c000e03c:	89 d8                	mov    eax,ebx
c000e03e:	5b                   	pop    ebx
c000e03f:	c3                   	ret    

c000e040 <timerHandler(unsigned int)>:
c000e040:	56                   	push   esi
c000e041:	53                   	push   ebx
c000e042:	51                   	push   ecx
c000e043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e047:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e04d:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e054:	0f 84 4a 01 00 00    	je     c000e1a4 <timerHandler(unsigned int)+0x164>
c000e05a:	fa                   	cli    
c000e05b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e061:	83 ec 0c             	sub    esp,0xc
c000e064:	68 78 a4 02 c0       	push   0xc002a478
c000e069:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e06f:	e8 6c 16 01 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e074:	83 c4 10             	add    esp,0x10
c000e077:	84 c0                	test   al,al
c000e079:	0f 85 a1 00 00 00    	jne    c000e120 <timerHandler(unsigned int)+0xe0>
c000e07f:	83 ec 0c             	sub    esp,0xc
c000e082:	68 78 a4 02 c0       	push   0xc002a478
c000e087:	e8 70 16 01 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	89 c6                	mov    esi,eax
c000e091:	8d 76 00             	lea    esi,[esi+0x0]
c000e094:	83 ec 0c             	sub    esp,0xc
c000e097:	68 78 a4 02 c0       	push   0xc002a478
c000e09c:	e8 5b 16 01 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0a1:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0a8:	89 c3                	mov    ebx,eax
c000e0aa:	e8 55 16 01 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0af:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0b2:	83 c4 10             	add    esp,0x10
c000e0b5:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0bb:	77 23                	ja     c000e0e0 <timerHandler(unsigned int)+0xa0>
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	53                   	push   ebx
c000e0c1:	e8 82 7e 00 00       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c000e0c6:	83 c4 10             	add    esp,0x10
c000e0c9:	39 de                	cmp    esi,ebx
c000e0cb:	75 27                	jne    c000e0f4 <timerHandler(unsigned int)+0xb4>
c000e0cd:	83 ec 0c             	sub    esp,0xc
c000e0d0:	68 78 a4 02 c0       	push   0xc002a478
c000e0d5:	e8 22 16 01 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0da:	89 c6                	mov    esi,eax
c000e0dc:	eb 12                	jmp    c000e0f0 <timerHandler(unsigned int)+0xb0>
c000e0de:	66 90                	xchg   ax,ax
c000e0e0:	52                   	push   edx
c000e0e1:	52                   	push   edx
c000e0e2:	53                   	push   ebx
c000e0e3:	68 78 a4 02 c0       	push   0xc002a478
c000e0e8:	e8 d3 16 01 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e0f0:	83 c4 10             	add    esp,0x10
c000e0f3:	90                   	nop
c000e0f4:	83 ec 0c             	sub    esp,0xc
c000e0f7:	68 78 a4 02 c0       	push   0xc002a478
c000e0fc:	e8 df 15 01 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e101:	83 c4 10             	add    esp,0x10
c000e104:	84 c0                	test   al,al
c000e106:	75 18                	jne    c000e120 <timerHandler(unsigned int)+0xe0>
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	68 78 a4 02 c0       	push   0xc002a478
c000e110:	e8 e7 15 01 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	39 f0                	cmp    eax,esi
c000e11a:	0f 85 74 ff ff ff    	jne    c000e094 <timerHandler(unsigned int)+0x54>
c000e120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e125:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e129:	74 41                	je     c000e16c <timerHandler(unsigned int)+0x12c>
c000e12b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e132:	74 38                	je     c000e16c <timerHandler(unsigned int)+0x12c>
c000e134:	fa                   	cli    
c000e135:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e13b:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e140:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e146:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e149:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e14f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e152:	72 08                	jb     c000e15c <timerHandler(unsigned int)+0x11c>
c000e154:	e8 f7 78 00 00       	call   c0015a50 <schedule()>
c000e159:	8d 76 00             	lea    esi,[esi+0x0]
c000e15c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e161:	48                   	dec    eax
c000e162:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e167:	75 03                	jne    c000e16c <timerHandler(unsigned int)+0x12c>
c000e169:	fb                   	sti    
c000e16a:	66 90                	xchg   ax,ax
c000e16c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e171:	48                   	dec    eax
c000e172:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e177:	75 1b                	jne    c000e194 <timerHandler(unsigned int)+0x154>
c000e179:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e180:	74 12                	je     c000e194 <timerHandler(unsigned int)+0x154>
c000e182:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e18c:	e8 bf 78 00 00       	call   c0015a50 <schedule()>
c000e191:	8d 76 00             	lea    esi,[esi+0x0]
c000e194:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e199:	48                   	dec    eax
c000e19a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e19f:	75 03                	jne    c000e1a4 <timerHandler(unsigned int)+0x164>
c000e1a1:	fb                   	sti    
c000e1a2:	66 90                	xchg   ax,ax
c000e1a4:	58                   	pop    eax
c000e1a5:	5b                   	pop    ebx
c000e1a6:	5e                   	pop    esi
c000e1a7:	c3                   	ret    

c000e1a8 <VCache::VCache(PhysicalDisk*)>:
c000e1a8:	53                   	push   ebx
c000e1a9:	83 ec 18             	sub    esp,0x18
c000e1ac:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c000e1b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b5:	89 10                	mov    DWORD PTR [eax],edx
c000e1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1bb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1d8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e1df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e1ea:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e200:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e208:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e20f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e222:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e232:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e239:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e241:	83 ec 0c             	sub    esp,0xc
c000e244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e248:	e8 86 98 ff ff       	call   c0007ad3 <malloc>
c000e24d:	83 c4 10             	add    esp,0x10
c000e250:	89 c3                	mov    ebx,eax
c000e252:	83 ec 0c             	sub    esp,0xc
c000e255:	53                   	push   ebx
c000e256:	e8 95 75 00 00       	call   c00157f0 <Mutex::Mutex()>
c000e25b:	83 c4 10             	add    esp,0x10
c000e25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e262:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e269:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e26d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e274:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e27b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e27f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e289:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e28c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e290:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e296:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e29c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2a0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2a3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2aa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2b8:	05 00 02 00 00       	add    eax,0x200
c000e2bd:	c1 e0 03             	shl    eax,0x3
c000e2c0:	83 ec 0c             	sub    esp,0xc
c000e2c3:	50                   	push   eax
c000e2c4:	e8 0a 98 ff ff       	call   c0007ad3 <malloc>
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	89 c2                	mov    edx,eax
c000e2ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2f2:	89 d0                	mov    eax,edx
c000e2f4:	c1 e0 02             	shl    eax,0x2
c000e2f7:	01 d0                	add    eax,edx
c000e2f9:	c1 e0 04             	shl    eax,0x4
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	50                   	push   eax
c000e300:	e8 ce 97 ff ff       	call   c0007ad3 <malloc>
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	89 c2                	mov    edx,eax
c000e30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e311:	90                   	nop
c000e312:	83 c4 18             	add    esp,0x18
c000e315:	5b                   	pop    ebx
c000e316:	c3                   	ret    
c000e317:	90                   	nop

c000e318 <VCache::invalidateReadBuffer()>:
c000e318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e31c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e322:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <VCache::writeWriteBuffer()>:
c000e328:	53                   	push   ebx
c000e329:	83 ec 08             	sub    esp,0x8
c000e32c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e330:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e334:	74 1e                	je     c000e354 <VCache::writeWriteBuffer()+0x2c>
c000e336:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e339:	83 ec 0c             	sub    esp,0xc
c000e33c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e33e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e341:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e344:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e34a:	50                   	push   eax
c000e34b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e34e:	83 c4 20             	add    esp,0x20
c000e351:	8d 76 00             	lea    esi,[esi+0x0]
c000e354:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e35b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e362:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e366:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e36d:	83 c4 08             	add    esp,0x8
c000e370:	5b                   	pop    ebx
c000e371:	c3                   	ret    
c000e372:	66 90                	xchg   ax,ax

c000e374 <VCache::~VCache()>:
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c000e37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e380:	89 10                	mov    DWORD PTR [eax],edx
c000e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e386:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e389:	0f b6 c0             	movzx  eax,al
c000e38c:	85 c0                	test   eax,eax
c000e38e:	74 10                	je     c000e3a0 <VCache::~VCache()+0x2c>
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e397:	e8 8c ff ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c000e39c:	83 c4 10             	add    esp,0x10
c000e39f:	90                   	nop
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3a7:	83 ec 0c             	sub    esp,0xc
c000e3aa:	50                   	push   eax
c000e3ab:	e8 33 97 ff ff       	call   c0007ae3 <free>
c000e3b0:	83 c4 10             	add    esp,0x10
c000e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3ba:	83 ec 0c             	sub    esp,0xc
c000e3bd:	50                   	push   eax
c000e3be:	e8 20 97 ff ff       	call   c0007ae3 <free>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	90                   	nop
c000e3c7:	83 c4 0c             	add    esp,0xc
c000e3ca:	c3                   	ret    
c000e3cb:	90                   	nop

c000e3cc <VCache::~VCache()>:
c000e3cc:	83 ec 0c             	sub    esp,0xc
c000e3cf:	83 ec 0c             	sub    esp,0xc
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	e8 99 ff ff ff       	call   c000e374 <VCache::~VCache()>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	83 ec 08             	sub    esp,0x8
c000e3e1:	6a 44                	push   0x44
c000e3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3e7:	e8 20 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    
c000e3f3:	90                   	nop

c000e3f4 <VCache::write(unsigned long long, int, void*)>:
c000e3f4:	55                   	push   ebp
c000e3f5:	57                   	push   edi
c000e3f6:	56                   	push   esi
c000e3f7:	53                   	push   ebx
c000e3f8:	83 ec 1c             	sub    esp,0x1c
c000e3fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e3ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e403:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e407:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e40b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e40f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e413:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e417:	74 0f                	je     c000e428 <VCache::write(unsigned long long, int, void*)+0x34>
c000e419:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e41d:	53                   	push   ebx
c000e41e:	e8 f5 fe ff ff       	call   c000e318 <VCache::invalidateReadBuffer()>
c000e423:	58                   	pop    eax
c000e424:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e428:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e42c:	74 66                	je     c000e494 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e42e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e435:	99                   	cdq    
c000e436:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e439:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e43c:	89 c6                	mov    esi,eax
c000e43e:	31 ce                	xor    esi,ecx
c000e440:	89 d0                	mov    eax,edx
c000e442:	31 e8                	xor    eax,ebp
c000e444:	09 c6                	or     esi,eax
c000e446:	75 38                	jne    c000e480 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e448:	83 ff 01             	cmp    edi,0x1
c000e44b:	75 33                	jne    c000e480 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e44d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e450:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e454:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e458:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e45e:	0f af f9             	imul   edi,ecx
c000e461:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e464:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e466:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e469:	40                   	inc    eax
c000e46a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e46d:	83 f8 50             	cmp    eax,0x50
c000e470:	75 72                	jne    c000e4e4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e472:	83 ec 0c             	sub    esp,0xc
c000e475:	53                   	push   ebx
c000e476:	e8 ad fe ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	eb 64                	jmp    c000e4e4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e480:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e484:	83 ec 0c             	sub    esp,0xc
c000e487:	53                   	push   ebx
c000e488:	e8 9b fe ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e494:	83 ff 4f             	cmp    edi,0x4f
c000e497:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e49a:	7f 20                	jg     c000e4bc <VCache::write(unsigned long long, int, void*)+0xc8>
c000e49c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e49f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4a3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e4a6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4a9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4ac:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4b0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4b8:	eb 2a                	jmp    c000e4e4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4ba:	66 90                	xchg   ax,ax
c000e4bc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4c6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4ce:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e4d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4d6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4d9:	83 c4 1c             	add    esp,0x1c
c000e4dc:	5b                   	pop    ebx
c000e4dd:	5e                   	pop    esi
c000e4de:	5f                   	pop    edi
c000e4df:	5d                   	pop    ebp
c000e4e0:	ff e0                	jmp    eax
c000e4e2:	66 90                	xchg   ax,ax
c000e4e4:	83 c4 1c             	add    esp,0x1c
c000e4e7:	31 c0                	xor    eax,eax
c000e4e9:	5b                   	pop    ebx
c000e4ea:	5e                   	pop    esi
c000e4eb:	5f                   	pop    edi
c000e4ec:	5d                   	pop    ebp
c000e4ed:	c3                   	ret    

c000e4ee <VCache::read(unsigned long long, int, void*)>:
c000e4ee:	55                   	push   ebp
c000e4ef:	57                   	push   edi
c000e4f0:	56                   	push   esi
c000e4f1:	53                   	push   ebx
c000e4f2:	83 ec 1c             	sub    esp,0x1c
c000e4f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e501:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e505:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e509:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e50d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e511:	74 0d                	je     c000e520 <VCache::read(unsigned long long, int, void*)+0x32>
c000e513:	83 ec 0c             	sub    esp,0xc
c000e516:	57                   	push   edi
c000e517:	e8 0c fe ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	90                   	nop
c000e520:	83 fd 01             	cmp    ebp,0x1
c000e523:	0f 85 93 00 00 00    	jne    c000e5bc <VCache::read(unsigned long long, int, void*)+0xce>
c000e529:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e52c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e533:	89 04 24             	mov    DWORD PTR [esp],eax
c000e536:	0f 85 80 00 00 00    	jne    c000e5bc <VCache::read(unsigned long long, int, void*)+0xce>
c000e53c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e53f:	89 cd                	mov    ebp,ecx
c000e541:	f7 dd                	neg    ebp
c000e543:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e547:	89 e8                	mov    eax,ebp
c000e549:	21 dd                	and    ebp,ebx
c000e54b:	c1 f8 1f             	sar    eax,0x1f
c000e54e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e552:	89 e8                	mov    eax,ebp
c000e554:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e558:	21 f5                	and    ebp,esi
c000e55a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e55e:	89 ea                	mov    edx,ebp
c000e560:	74 2e                	je     c000e590 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e562:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e565:	75 29                	jne    c000e590 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e567:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e56a:	75 24                	jne    c000e590 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e56c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e56f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e575:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e578:	8d 70 ff             	lea    esi,[eax-0x1]
c000e57b:	21 f3                	and    ebx,esi
c000e57d:	0f af d9             	imul   ebx,ecx
c000e580:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e583:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e587:	89 de                	mov    esi,ebx
c000e589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e58b:	31 c0                	xor    eax,eax
c000e58d:	eb 61                	jmp    c000e5f0 <VCache::read(unsigned long long, int, void*)+0x102>
c000e58f:	90                   	nop
c000e590:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e59a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e59e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5a1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e5a3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5a6:	51                   	push   ecx
c000e5a7:	52                   	push   edx
c000e5a8:	50                   	push   eax
c000e5a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ad:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e5b0:	83 c4 20             	add    esp,0x20
c000e5b3:	85 c0                	test   eax,eax
c000e5b5:	75 39                	jne    c000e5f0 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5b7:	eb b3                	jmp    c000e56c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5bc:	83 ec 0c             	sub    esp,0xc
c000e5bf:	57                   	push   edi
c000e5c0:	e8 53 fd ff ff       	call   c000e318 <VCache::invalidateReadBuffer()>
c000e5c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ce:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5d2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5d6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5da:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e5de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5e2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e5e5:	83 c4 2c             	add    esp,0x2c
c000e5e8:	5b                   	pop    ebx
c000e5e9:	5e                   	pop    esi
c000e5ea:	5f                   	pop    edi
c000e5eb:	5d                   	pop    ebp
c000e5ec:	ff e0                	jmp    eax
c000e5ee:	66 90                	xchg   ax,ax
c000e5f0:	83 c4 1c             	add    esp,0x1c
c000e5f3:	5b                   	pop    ebx
c000e5f4:	5e                   	pop    esi
c000e5f5:	5f                   	pop    edi
c000e5f6:	5d                   	pop    ebp
c000e5f7:	c3                   	ret    

c000e5f8 <Video::putrect(int, int, int, int, unsigned int)>:
c000e5f8:	55                   	push   ebp
c000e5f9:	57                   	push   edi
c000e5fa:	56                   	push   esi
c000e5fb:	53                   	push   ebx
c000e5fc:	83 ec 1c             	sub    esp,0x1c
c000e5ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e603:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e607:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e60b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e60f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e617:	01 df                	add    edi,ebx
c000e619:	39 fb                	cmp    ebx,edi
c000e61b:	7d 1f                	jge    c000e63c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e61d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e621:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e625:	7d 12                	jge    c000e639 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e627:	8b 16                	mov    edx,DWORD PTR [esi]
c000e629:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e62d:	53                   	push   ebx
c000e62e:	55                   	push   ebp
c000e62f:	45                   	inc    ebp
c000e630:	56                   	push   esi
c000e631:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	eb e8                	jmp    c000e621 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e639:	43                   	inc    ebx
c000e63a:	eb dd                	jmp    c000e619 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e63c:	83 c4 1c             	add    esp,0x1c
c000e63f:	5b                   	pop    ebx
c000e640:	5e                   	pop    esi
c000e641:	5f                   	pop    edi
c000e642:	5d                   	pop    ebp
c000e643:	c3                   	ret    

c000e644 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e644:	55                   	push   ebp
c000e645:	57                   	push   edi
c000e646:	31 ff                	xor    edi,edi
c000e648:	56                   	push   esi
c000e649:	53                   	push   ebx
c000e64a:	83 ec 1c             	sub    esp,0x1c
c000e64d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e651:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e655:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e65c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e661:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e665:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e669:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e66d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e670:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e674:	01 f9                	add    ecx,edi
c000e676:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e67a:	7d 2f                	jge    c000e6ab <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e67c:	31 f6                	xor    esi,esi
c000e67e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e682:	01 f2                	add    edx,esi
c000e684:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e688:	7d 1a                	jge    c000e6a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e68a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e68d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e690:	46                   	inc    esi
c000e691:	51                   	push   ecx
c000e692:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e696:	52                   	push   edx
c000e697:	55                   	push   ebp
c000e698:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6a2:	eb da                	jmp    c000e67e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6a4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6a8:	47                   	inc    edi
c000e6a9:	eb c5                	jmp    c000e670 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6ab:	83 c4 1c             	add    esp,0x1c
c000e6ae:	5b                   	pop    ebx
c000e6af:	5e                   	pop    esi
c000e6b0:	5f                   	pop    edi
c000e6b1:	5d                   	pop    ebp
c000e6b2:	c3                   	ret    
c000e6b3:	90                   	nop

c000e6b4 <Video::blit(unsigned int*, int, int, int, int)>:
c000e6b4:	55                   	push   ebp
c000e6b5:	ba 00 00 00 00       	mov    edx,0x0
c000e6ba:	57                   	push   edi
c000e6bb:	56                   	push   esi
c000e6bc:	53                   	push   ebx
c000e6bd:	83 ec 1c             	sub    esp,0x1c
c000e6c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6c4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e6c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6cc:	85 c0                	test   eax,eax
c000e6ce:	0f 49 d0             	cmovns edx,eax
c000e6d1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e6d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e6dc:	89 eb                	mov    ebx,ebp
c000e6de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e6e2:	01 ea                	add    edx,ebp
c000e6e4:	39 da                	cmp    edx,ebx
c000e6e6:	7e 54                	jle    c000e73c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e6e8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e6ee:	7c 4c                	jl     c000e73c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e6f0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e6f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6f8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6fc:	01 c1                	add    ecx,eax
c000e6fe:	39 f9                	cmp    ecx,edi
c000e700:	7e 2f                	jle    c000e731 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e702:	83 c2 04             	add    edx,0x4
c000e705:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e70b:	7c 21                	jl     c000e72e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e70d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e711:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e713:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e716:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e71a:	55                   	push   ebp
c000e71b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e71f:	56                   	push   esi
c000e720:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e723:	83 c4 10             	add    esp,0x10
c000e726:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72e:	47                   	inc    edi
c000e72f:	eb c7                	jmp    c000e6f8 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e735:	43                   	inc    ebx
c000e736:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e73a:	eb a2                	jmp    c000e6de <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e73c:	83 c4 1c             	add    esp,0x1c
c000e73f:	5b                   	pop    ebx
c000e740:	5e                   	pop    esi
c000e741:	5f                   	pop    edi
c000e742:	5d                   	pop    ebp
c000e743:	c3                   	ret    

c000e744 <Video::clearScreen(unsigned int)>:
c000e744:	57                   	push   edi
c000e745:	56                   	push   esi
c000e746:	53                   	push   ebx
c000e747:	31 db                	xor    ebx,ebx
c000e749:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e74d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e753:	7e 1f                	jle    c000e774 <Video::clearScreen(unsigned int)+0x30>
c000e755:	31 ff                	xor    edi,edi
c000e757:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e75d:	7e 12                	jle    c000e771 <Video::clearScreen(unsigned int)+0x2d>
c000e75f:	8b 06                	mov    eax,DWORD PTR [esi]
c000e761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e765:	53                   	push   ebx
c000e766:	57                   	push   edi
c000e767:	47                   	inc    edi
c000e768:	56                   	push   esi
c000e769:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e76c:	83 c4 10             	add    esp,0x10
c000e76f:	eb e6                	jmp    c000e757 <Video::clearScreen(unsigned int)+0x13>
c000e771:	43                   	inc    ebx
c000e772:	eb d9                	jmp    c000e74d <Video::clearScreen(unsigned int)+0x9>
c000e774:	5b                   	pop    ebx
c000e775:	5e                   	pop    esi
c000e776:	5f                   	pop    edi
c000e777:	c3                   	ret    

c000e778 <Video::putpixel(int, int, unsigned int)>:
c000e778:	c7 44 24 04 c8 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216c8
c000e780:	e9 c8 29 00 00       	jmp    c001114d <KePanic(char const*)>
c000e785:	90                   	nop

c000e786 <Video::readPixelApprox(int, int)>:
c000e786:	83 ec 18             	sub    esp,0x18
c000e789:	68 e9 16 02 c0       	push   0xc00216e9
c000e78e:	e8 ba 29 00 00       	call   c001114d <KePanic(char const*)>
c000e793:	31 c0                	xor    eax,eax
c000e795:	83 c4 1c             	add    esp,0x1c
c000e798:	c3                   	ret    
c000e799:	90                   	nop

c000e79a <Video::Video(char const*)>:
c000e79a:	83 ec 0c             	sub    esp,0xc
c000e79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a1:	83 ec 08             	sub    esp,0x8
c000e7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7a8:	50                   	push   eax
c000e7a9:	e8 be df ff ff       	call   c000c76c <Device::Device(char const*)>
c000e7ae:	83 c4 10             	add    esp,0x10
c000e7b1:	ba 64 17 02 c0       	mov    edx,0xc0021764
c000e7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ba:	89 10                	mov    DWORD PTR [eax],edx
c000e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7ca:	90                   	nop
c000e7cb:	83 c4 0c             	add    esp,0xc
c000e7ce:	c3                   	ret    
c000e7cf:	90                   	nop

c000e7d0 <Video::~Video()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	ba 64 17 02 c0       	mov    edx,0xc0021764
c000e7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dc:	89 10                	mov    DWORD PTR [eax],edx
c000e7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e2:	83 ec 0c             	sub    esp,0xc
c000e7e5:	50                   	push   eax
c000e7e6:	e8 eb dc ff ff       	call   c000c4d6 <Device::~Device()>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	90                   	nop
c000e7ef:	83 c4 0c             	add    esp,0xc
c000e7f2:	c3                   	ret    
c000e7f3:	90                   	nop

c000e7f4 <Video::~Video()>:
c000e7f4:	83 ec 0c             	sub    esp,0xc
c000e7f7:	83 ec 0c             	sub    esp,0xc
c000e7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fe:	e8 cd ff ff ff       	call   c000e7d0 <Video::~Video()>
c000e803:	83 c4 10             	add    esp,0x10
c000e806:	83 ec 08             	sub    esp,0x8
c000e809:	68 64 01 00 00       	push   0x164
c000e80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e812:	e8 f5 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e817:	83 c4 10             	add    esp,0x10
c000e81a:	83 c4 0c             	add    esp,0xc
c000e81d:	c3                   	ret    

c000e81e <Video::isMonochrome()>:
c000e81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e822:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e828:	c3                   	ret    
c000e829:	90                   	nop

c000e82a <Video::getWidth()>:
c000e82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e834:	c3                   	ret    
c000e835:	90                   	nop

c000e836 <Video::getHeight()>:
c000e836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e83a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e840:	c3                   	ret    
c000e841:	90                   	nop

c000e842 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e842:	55                   	push   ebp
c000e843:	57                   	push   edi
c000e844:	56                   	push   esi
c000e845:	53                   	push   ebx
c000e846:	83 ec 2c             	sub    esp,0x2c
c000e849:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e851:	83 f8 01             	cmp    eax,0x1
c000e854:	19 c9                	sbb    ecx,ecx
c000e856:	31 db                	xor    ebx,ebx
c000e858:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e85c:	89 ce                	mov    esi,ecx
c000e85e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e866:	f7 d6                	not    esi
c000e868:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e86e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e872:	01 d8                	add    eax,ebx
c000e874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e878:	57                   	push   edi
c000e879:	e8 b8 ff ff ff       	call   c000e836 <Video::getHeight()>
c000e87e:	59                   	pop    ecx
c000e87f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e883:	7e 70                	jle    c000e8f5 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e885:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e889:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e88d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e894:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e898:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8a3:	89 e8                	mov    eax,ebp
c000e8a5:	83 c0 20             	add    eax,0x20
c000e8a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8ac:	57                   	push   edi
c000e8ad:	e8 78 ff ff ff       	call   c000e82a <Video::getWidth()>
c000e8b2:	5a                   	pop    edx
c000e8b3:	39 c5                	cmp    ebp,eax
c000e8b5:	7d 34                	jge    c000e8eb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8b7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8bc:	74 05                	je     c000e8c3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8be:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8c0:	56                   	push   esi
c000e8c1:	eb 0d                	jmp    c000e8d0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8c3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8c8:	74 12                	je     c000e8dc <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8d4:	55                   	push   ebp
c000e8d5:	57                   	push   edi
c000e8d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8d9:	83 c4 10             	add    esp,0x10
c000e8dc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e8e0:	45                   	inc    ebp
c000e8e1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e8e5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e8e9:	75 c1                	jne    c000e8ac <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e8eb:	43                   	inc    ebx
c000e8ec:	83 fb 20             	cmp    ebx,0x20
c000e8ef:	0f 85 79 ff ff ff    	jne    c000e86e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e8f5:	83 c4 2c             	add    esp,0x2c
c000e8f8:	5b                   	pop    ebx
c000e8f9:	5e                   	pop    esi
c000e8fa:	5f                   	pop    edi
c000e8fb:	5d                   	pop    ebp
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 28             	sub    esp,0x28
c000e905:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e909:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e90d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e911:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e915:	c1 e7 08             	shl    edi,0x8
c000e918:	01 c7                	add    edi,eax
c000e91a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e91e:	c1 e6 08             	shl    esi,0x8
c000e921:	01 f0                	add    eax,esi
c000e923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e92b:	0f af c7             	imul   eax,edi
c000e92e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e935:	50                   	push   eax
c000e936:	e8 98 91 ff ff       	call   c0007ad3 <malloc>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	85 c0                	test   eax,eax
c000e940:	89 c5                	mov    ebp,eax
c000e942:	75 10                	jne    c000e954 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	68 14 17 02 c0       	push   0xc0021714
c000e94c:	e8 fc 27 00 00       	call   c001114d <KePanic(char const*)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e958:	ba 12 00 00 00       	mov    edx,0x12
c000e95d:	85 c0                	test   eax,eax
c000e95f:	74 11                	je     c000e972 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e961:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e965:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e969:	c1 fa 03             	sar    edx,0x3
c000e96c:	0f af d1             	imul   edx,ecx
c000e96f:	83 c2 12             	add    edx,0x12
c000e972:	85 ff                	test   edi,edi
c000e974:	74 06                	je     c000e97c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e976:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e97a:	75 12                	jne    c000e98e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	68 24 17 02 c0       	push   0xc0021724
c000e984:	e8 81 bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e989:	e9 b8 00 00 00       	jmp    c000ea46 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e98e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e992:	83 f9 02             	cmp    ecx,0x2
c000e995:	0f 85 96 00 00 00    	jne    c000ea31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e99b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9a0:	75 0e                	jne    c000e9b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9a2:	85 c0                	test   eax,eax
c000e9a4:	75 0a                	jne    c000e9b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9a6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9a9:	83 e8 18             	sub    eax,0x18
c000e9ac:	a8 f7                	test   al,0xf7
c000e9ae:	74 0a                	je     c000e9ba <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	68 39 17 02 c0       	push   0xc0021739
c000e9b8:	eb 7f                	jmp    c000ea39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9ca:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e9ce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9da:	75 0c                	jne    c000e9e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e9dc:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e9e1:	c1 e1 18             	shl    ecx,0x18
c000e9e4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e9e8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e9ed:	46                   	inc    esi
c000e9ee:	89 c8                	mov    eax,ecx
c000e9f0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e9f5:	c1 e0 10             	shl    eax,0x10
c000e9f8:	c1 e1 08             	shl    ecx,0x8
c000e9fb:	09 c1                	or     ecx,eax
c000e9fd:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea01:	09 c1                	or     ecx,eax
c000ea03:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea07:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea0b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea0f:	c1 f8 03             	sar    eax,0x3
c000ea12:	01 c2                	add    edx,eax
c000ea14:	89 f0                	mov    eax,esi
c000ea16:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea1a:	39 c7                	cmp    edi,eax
c000ea1c:	7f b0                	jg     c000e9ce <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea26:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea29:	7e 22                	jle    c000ea4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea2b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea2f:	eb 99                	jmp    c000e9ca <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea31:	50                   	push   eax
c000ea32:	50                   	push   eax
c000ea33:	51                   	push   ecx
c000ea34:	68 47 17 02 c0       	push   0xc0021747
c000ea39:	e8 cc be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea3e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ea41:	e8 9d 90 ff ff       	call   c0007ae3 <free>
c000ea46:	83 c4 10             	add    esp,0x10
c000ea49:	31 ed                	xor    ebp,ebp
c000ea4b:	eb 0f                	jmp    c000ea5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea51:	89 38                	mov    DWORD PTR [eax],edi
c000ea53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea57:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ea5a:	89 38                	mov    DWORD PTR [eax],edi
c000ea5c:	83 c4 1c             	add    esp,0x1c
c000ea5f:	89 e8                	mov    eax,ebp
c000ea61:	5b                   	pop    ebx
c000ea62:	5e                   	pop    esi
c000ea63:	5f                   	pop    edi
c000ea64:	5d                   	pop    ebp
c000ea65:	c3                   	ret    

c000ea66 <Video::putTGA(int, int, unsigned char*, int)>:
c000ea66:	55                   	push   ebp
c000ea67:	57                   	push   edi
c000ea68:	56                   	push   esi
c000ea69:	53                   	push   ebx
c000ea6a:	83 ec 28             	sub    esp,0x28
c000ea6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea71:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea75:	50                   	push   eax
c000ea76:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea7a:	50                   	push   eax
c000ea7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea83:	57                   	push   edi
c000ea84:	e8 75 fe ff ff       	call   c000e8fe <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ea89:	83 c4 20             	add    esp,0x20
c000ea8c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea90:	85 c0                	test   eax,eax
c000ea92:	74 35                	je     c000eac9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea94:	89 c6                	mov    esi,eax
c000ea96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea9a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ea9e:	39 d8                	cmp    eax,ebx
c000eaa0:	7e 27                	jle    c000eac9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaa2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaa6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eaaa:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eaae:	39 e9                	cmp    ecx,ebp
c000eab0:	7e 14                	jle    c000eac6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eab2:	83 c6 04             	add    esi,0x4
c000eab5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eab7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eaba:	53                   	push   ebx
c000eabb:	55                   	push   ebp
c000eabc:	45                   	inc    ebp
c000eabd:	57                   	push   edi
c000eabe:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	eb e0                	jmp    c000eaa6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eac6:	43                   	inc    ebx
c000eac7:	eb cd                	jmp    c000ea96 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eac9:	83 c4 1c             	add    esp,0x1c
c000eacc:	5b                   	pop    ebx
c000eacd:	5e                   	pop    esi
c000eace:	5f                   	pop    edi
c000eacf:	5d                   	pop    ebp
c000ead0:	c3                   	ret    
c000ead1:	66 90                	xchg   ax,ax
c000ead3:	90                   	nop

c000ead4 <ACPI::close(int, int, void*)>:
c000ead4:	83 ec 1c             	sub    esp,0x1c
c000ead7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eadf:	74 0b                	je     c000eaec <ACPI::close(int, int, void*)+0x18>
c000eae1:	b8 00 00 00 00       	mov    eax,0x0
c000eae6:	e9 99 00 00 00       	jmp    c000eb84 <ACPI::close(int, int, void*)+0xb0>
c000eaeb:	90                   	nop
c000eaec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eaf1:	75 29                	jne    c000eb1c <ACPI::close(int, int, void*)+0x48>
c000eaf3:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eaf8:	85 c0                	test   eax,eax
c000eafa:	74 08                	je     c000eb04 <ACPI::close(int, int, void*)+0x30>
c000eafc:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb01:	ff d0                	call   eax
c000eb03:	90                   	nop
c000eb04:	83 ec 0c             	sub    esp,0xc
c000eb07:	68 a8 17 02 c0       	push   0xc00217a8
c000eb0c:	e8 3c 26 00 00       	call   c001114d <KePanic(char const*)>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb19:	eb 69                	jmp    c000eb84 <ACPI::close(int, int, void*)+0xb0>
c000eb1b:	90                   	nop
c000eb1c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb21:	75 59                	jne    c000eb7c <ACPI::close(int, int, void*)+0xa8>
c000eb23:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb28:	85 c0                	test   eax,eax
c000eb2a:	74 08                	je     c000eb34 <ACPI::close(int, int, void*)+0x60>
c000eb2c:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb31:	ff d0                	call   eax
c000eb33:	90                   	nop
c000eb34:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb41:	83 e0 02             	and    eax,0x2
c000eb44:	74 1e                	je     c000eb64 <ACPI::close(int, int, void*)+0x90>
c000eb46:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb51:	89 c2                	mov    edx,eax
c000eb53:	ec                   	in     al,dx
c000eb54:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb58:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb60:	eb da                	jmp    c000eb3c <ACPI::close(int, int, void*)+0x68>
c000eb62:	66 90                	xchg   ax,ax
c000eb64:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb6b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb70:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb78:	ee                   	out    dx,al
c000eb79:	8d 76 00             	lea    esi,[esi+0x0]
c000eb7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb81:	8d 76 00             	lea    esi,[esi+0x0]
c000eb84:	83 c4 1c             	add    esp,0x1c
c000eb87:	c3                   	ret    

c000eb88 <findRSDP()>:
c000eb88:	83 ec 1c             	sub    esp,0x1c
c000eb8b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb90:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb96:	83 e0 04             	and    eax,0x4
c000eb99:	0f b6 c0             	movzx  eax,al
c000eb9c:	85 c0                	test   eax,eax
c000eb9e:	75 08                	jne    c000eba8 <findRSDP()+0x20>
c000eba0:	b8 00 00 00 00       	mov    eax,0x0
c000eba5:	eb 75                	jmp    c000ec1c <findRSDP()+0x94>
c000eba7:	90                   	nop
c000eba8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebad:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebb2:	7f 1c                	jg     c000ebd0 <findRSDP()+0x48>
c000ebb4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebb9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebbf:	83 e2 fb             	and    edx,0xfffffffb
c000ebc2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebc8:	b8 00 00 00 00       	mov    eax,0x0
c000ebcd:	eb 4d                	jmp    c000ec1c <findRSDP()+0x94>
c000ebcf:	90                   	nop
c000ebd0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebd8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ebe0:	77 32                	ja     c000ec14 <findRSDP()+0x8c>
c000ebe2:	83 ec 04             	sub    esp,0x4
c000ebe5:	6a 08                	push   0x8
c000ebe7:	68 43 18 02 c0       	push   0xc0021843
c000ebec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebf0:	e8 8b 17 ff ff       	call   c0000380 <memcmp>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	85 c0                	test   eax,eax
c000ebfa:	0f 94 c0             	sete   al
c000ebfd:	0f b6 c0             	movzx  eax,al
c000ec00:	85 c0                	test   eax,eax
c000ec02:	74 08                	je     c000ec0c <findRSDP()+0x84>
c000ec04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec08:	eb 12                	jmp    c000ec1c <findRSDP()+0x94>
c000ec0a:	66 90                	xchg   ax,ax
c000ec0c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec11:	eb c5                	jmp    c000ebd8 <findRSDP()+0x50>
c000ec13:	90                   	nop
c000ec14:	b8 00 00 00 00       	mov    eax,0x0
c000ec19:	8d 76 00             	lea    esi,[esi+0x0]
c000ec1c:	83 c4 1c             	add    esp,0x1c
c000ec1f:	c3                   	ret    

c000ec20 <loadACPITables(unsigned char*)>:
c000ec20:	57                   	push   edi
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	83 ec 60             	sub    esp,0x60
c000ec26:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec31:	83 e0 04             	and    eax,0x4
c000ec34:	0f b6 c0             	movzx  eax,al
c000ec37:	85 c0                	test   eax,eax
c000ec39:	0f 84 41 02 00 00    	je     c000ee80 <loadACPITables(unsigned char*)+0x260>
c000ec3f:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec44:	0f b6 c0             	movzx  eax,al
c000ec47:	85 c0                	test   eax,eax
c000ec49:	74 79                	je     c000ecc4 <loadACPITables(unsigned char*)+0xa4>
c000ec4b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec5a:	83 e8 24             	sub    eax,0x24
c000ec5d:	c1 e8 03             	shr    eax,0x3
c000ec60:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec64:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec70:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec74:	0f 8d ba 00 00 00    	jge    c000ed34 <loadACPITables(unsigned char*)+0x114>
c000ec7a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec7e:	83 c0 24             	add    eax,0x24
c000ec81:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec85:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec8d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec91:	c1 e0 03             	shl    eax,0x3
c000ec94:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ec98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ec9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000eca1:	89 c1                	mov    ecx,eax
c000eca3:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000eca8:	8d 50 01             	lea    edx,[eax+0x1]
c000ecab:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ecb1:	89 ca                	mov    edx,ecx
c000ecb3:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ecba:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ecbf:	eb ab                	jmp    c000ec6c <loadACPITables(unsigned char*)+0x4c>
c000ecc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eccc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecd3:	83 e8 24             	sub    eax,0x24
c000ecd6:	c1 e8 02             	shr    eax,0x2
c000ecd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecdd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ece5:	8d 76 00             	lea    esi,[esi+0x0]
c000ece8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ecec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ecf0:	7d 42                	jge    c000ed34 <loadACPITables(unsigned char*)+0x114>
c000ecf2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecf6:	83 c0 24             	add    eax,0x24
c000ecf9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ecfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed09:	c1 e0 02             	shl    eax,0x2
c000ed0c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed14:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed16:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed1b:	8d 50 01             	lea    edx,[eax+0x1]
c000ed1e:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed24:	89 ca                	mov    edx,ecx
c000ed26:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed2d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed32:	eb b4                	jmp    c000ece8 <loadACPITables(unsigned char*)+0xc8>
c000ed34:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed3c:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed41:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed45:	0f 8d 39 01 00 00    	jge    c000ee84 <loadACPITables(unsigned char*)+0x264>
c000ed4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed4f:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed66:	25 ff 0f 00 00       	and    eax,0xfff
c000ed6b:	89 c6                	mov    esi,eax
c000ed6d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed73:	83 ec 0c             	sub    esp,0xc
c000ed76:	6a 01                	push   0x1
c000ed78:	e8 78 a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed84:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed8a:	83 ec 0c             	sub    esp,0xc
c000ed8d:	6a 01                	push   0x1
c000ed8f:	6a 01                	push   0x1
c000ed91:	50                   	push   eax
c000ed92:	52                   	push   edx
c000ed93:	53                   	push   ebx
c000ed94:	e8 6f b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed99:	83 c4 20             	add    esp,0x20
c000ed9c:	09 f0                	or     eax,esi
c000ed9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eda2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eda6:	c1 e0 03             	shl    eax,0x3
c000eda9:	05 80 95 02 c0       	add    eax,0xc0029580
c000edae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edd2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edd6:	89 c6                	mov    esi,eax
c000edd8:	89 d7                	mov    edi,edx
c000edda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eddc:	89 c8                	mov    eax,ecx
c000edde:	89 fa                	mov    edx,edi
c000ede0:	89 f3                	mov    ebx,esi
c000ede2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ede6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000edea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000edf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edfd:	05 00 10 00 00       	add    eax,0x1000
c000ee02:	c1 e8 0c             	shr    eax,0xc
c000ee05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee15:	25 ff 0f 00 00       	and    eax,0xfff
c000ee1a:	89 c6                	mov    esi,eax
c000ee1c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee22:	83 ec 0c             	sub    esp,0xc
c000ee25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee29:	e8 c7 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee35:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee3b:	83 ec 0c             	sub    esp,0xc
c000ee3e:	6a 01                	push   0x1
c000ee40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee44:	50                   	push   eax
c000ee45:	52                   	push   edx
c000ee46:	53                   	push   ebx
c000ee47:	e8 bc b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee4c:	83 c4 20             	add    esp,0x20
c000ee4f:	09 f0                	or     eax,esi
c000ee51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee59:	83 ec 0c             	sub    esp,0xc
c000ee5c:	50                   	push   eax
c000ee5d:	e8 a7 aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ee62:	83 c4 10             	add    esp,0x10
c000ee65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee6d:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee74:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee79:	e9 be fe ff ff       	jmp    c000ed3c <loadACPITables(unsigned char*)+0x11c>
c000ee7e:	66 90                	xchg   ax,ax
c000ee80:	90                   	nop
c000ee81:	8d 76 00             	lea    esi,[esi+0x0]
c000ee84:	83 c4 60             	add    esp,0x60
c000ee87:	5b                   	pop    ebx
c000ee88:	5e                   	pop    esi
c000ee89:	5f                   	pop    edi
c000ee8a:	c3                   	ret    
c000ee8b:	90                   	nop

c000ee8c <findRSDT(unsigned char*)>:
c000ee8c:	57                   	push   edi
c000ee8d:	56                   	push   esi
c000ee8e:	53                   	push   ebx
c000ee8f:	83 ec 50             	sub    esp,0x50
c000ee92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ee97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee9d:	83 e0 04             	and    eax,0x4
c000eea0:	0f b6 c0             	movzx  eax,al
c000eea3:	85 c0                	test   eax,eax
c000eea5:	75 0d                	jne    c000eeb4 <findRSDT(unsigned char*)+0x28>
c000eea7:	b8 00 00 00 00       	mov    eax,0x0
c000eeac:	e9 2b 01 00 00       	jmp    c000efdc <findRSDT(unsigned char*)+0x150>
c000eeb1:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb4:	89 e0                	mov    eax,esp
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eec2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eeca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eece:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eed2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eed6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eeda:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eede:	89 c6                	mov    esi,eax
c000eee0:	89 d7                	mov    edi,edx
c000eee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eee4:	89 c8                	mov    eax,ecx
c000eee6:	89 fa                	mov    edx,edi
c000eee8:	89 f3                	mov    ebx,esi
c000eeea:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000eeee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000eef2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eef6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eefa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000eefe:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef0e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef16:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef1e:	25 ff 0f 00 00       	and    eax,0xfff
c000ef23:	89 c6                	mov    esi,eax
c000ef25:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef2b:	83 ec 0c             	sub    esp,0xc
c000ef2e:	6a 02                	push   0x2
c000ef30:	e8 c0 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef35:	83 c4 10             	add    esp,0x10
c000ef38:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef3c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef42:	83 ec 0c             	sub    esp,0xc
c000ef45:	6a 01                	push   0x1
c000ef47:	6a 02                	push   0x2
c000ef49:	50                   	push   eax
c000ef4a:	52                   	push   edx
c000ef4b:	53                   	push   ebx
c000ef4c:	e8 b7 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef51:	83 c4 20             	add    esp,0x20
c000ef54:	09 f0                	or     eax,esi
c000ef56:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef5e:	25 ff 0f 00 00       	and    eax,0xfff
c000ef63:	89 c6                	mov    esi,eax
c000ef65:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef6b:	83 ec 0c             	sub    esp,0xc
c000ef6e:	6a 02                	push   0x2
c000ef70:	e8 80 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ef7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef82:	83 ec 0c             	sub    esp,0xc
c000ef85:	6a 01                	push   0x1
c000ef87:	6a 02                	push   0x2
c000ef89:	50                   	push   eax
c000ef8a:	52                   	push   edx
c000ef8b:	53                   	push   ebx
c000ef8c:	e8 77 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef91:	83 c4 20             	add    esp,0x20
c000ef94:	09 f0                	or     eax,esi
c000ef96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef9a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ef9f:	85 c0                	test   eax,eax
c000efa1:	75 11                	jne    c000efb4 <findRSDT(unsigned char*)+0x128>
c000efa3:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000efaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efb2:	eb 24                	jmp    c000efd8 <findRSDT(unsigned char*)+0x14c>
c000efb4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efb9:	83 f8 02             	cmp    eax,0x2
c000efbc:	75 12                	jne    c000efd0 <findRSDT(unsigned char*)+0x144>
c000efbe:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efc5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efc9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efcd:	eb 09                	jmp    c000efd8 <findRSDT(unsigned char*)+0x14c>
c000efcf:	90                   	nop
c000efd0:	b8 00 00 00 00       	mov    eax,0x0
c000efd5:	eb 05                	jmp    c000efdc <findRSDT(unsigned char*)+0x150>
c000efd7:	90                   	nop
c000efd8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efdc:	83 c4 50             	add    esp,0x50
c000efdf:	5b                   	pop    ebx
c000efe0:	5e                   	pop    esi
c000efe1:	5f                   	pop    edi
c000efe2:	c3                   	ret    
c000efe3:	90                   	nop

c000efe4 <findDataTable(unsigned char*, char*)>:
c000efe4:	83 ec 1c             	sub    esp,0x1c
c000efe7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff2:	83 e0 04             	and    eax,0x4
c000eff5:	0f b6 c0             	movzx  eax,al
c000eff8:	85 c0                	test   eax,eax
c000effa:	75 08                	jne    c000f004 <findDataTable(unsigned char*, char*)+0x20>
c000effc:	b8 00 00 00 00       	mov    eax,0x0
c000f001:	eb 5d                	jmp    c000f060 <findDataTable(unsigned char*, char*)+0x7c>
c000f003:	90                   	nop
c000f004:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f00c:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000f011:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f015:	7d 41                	jge    c000f058 <findDataTable(unsigned char*, char*)+0x74>
c000f017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f01b:	c1 e0 03             	shl    eax,0x3
c000f01e:	05 80 95 02 c0       	add    eax,0xc0029580
c000f023:	83 ec 04             	sub    esp,0x4
c000f026:	6a 04                	push   0x4
c000f028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f02c:	50                   	push   eax
c000f02d:	e8 4e 13 ff ff       	call   c0000380 <memcmp>
c000f032:	83 c4 10             	add    esp,0x10
c000f035:	85 c0                	test   eax,eax
c000f037:	0f 94 c0             	sete   al
c000f03a:	0f b6 c0             	movzx  eax,al
c000f03d:	85 c0                	test   eax,eax
c000f03f:	74 0f                	je     c000f050 <findDataTable(unsigned char*, char*)+0x6c>
c000f041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f045:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f04c:	eb 12                	jmp    c000f060 <findDataTable(unsigned char*, char*)+0x7c>
c000f04e:	66 90                	xchg   ax,ax
c000f050:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f055:	eb b5                	jmp    c000f00c <findDataTable(unsigned char*, char*)+0x28>
c000f057:	90                   	nop
c000f058:	b8 00 00 00 00       	mov    eax,0x0
c000f05d:	8d 76 00             	lea    esi,[esi+0x0]
c000f060:	83 c4 1c             	add    esp,0x1c
c000f063:	c3                   	ret    

c000f064 <scanMADT()>:
c000f064:	53                   	push   ebx
c000f065:	83 ec 38             	sub    esp,0x38
c000f068:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f06d:	25 00 04 00 00       	and    eax,0x400
c000f072:	74 14                	je     c000f088 <scanMADT()+0x24>
c000f074:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f079:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f07f:	83 e2 fb             	and    edx,0xfffffffb
c000f082:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f088:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f08d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f093:	83 e0 04             	and    eax,0x4
c000f096:	0f b6 c0             	movzx  eax,al
c000f099:	85 c0                	test   eax,eax
c000f09b:	0f 84 6b 04 00 00    	je     c000f50c <scanMADT()+0x4a8>
c000f0a1:	e8 e2 fa ff ff       	call   c000eb88 <findRSDP()>
c000f0a6:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f0ab:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0b0:	85 c0                	test   eax,eax
c000f0b2:	75 1c                	jne    c000f0d0 <scanMADT()+0x6c>
c000f0b4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0bf:	83 e2 fb             	and    edx,0xfffffffb
c000f0c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0c8:	e9 47 04 00 00       	jmp    c000f514 <scanMADT()+0x4b0>
c000f0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d0:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0d5:	83 ec 0c             	sub    esp,0xc
c000f0d8:	50                   	push   eax
c000f0d9:	e8 ae fd ff ff       	call   c000ee8c <findRSDT(unsigned char*)>
c000f0de:	83 c4 10             	add    esp,0x10
c000f0e1:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f0e6:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0eb:	85 c0                	test   eax,eax
c000f0ed:	75 19                	jne    c000f108 <scanMADT()+0xa4>
c000f0ef:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0f4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0fa:	83 e2 fb             	and    edx,0xfffffffb
c000f0fd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f103:	e9 0c 04 00 00       	jmp    c000f514 <scanMADT()+0x4b0>
c000f108:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f10d:	83 ec 0c             	sub    esp,0xc
c000f110:	50                   	push   eax
c000f111:	e8 0a fb ff ff       	call   c000ec20 <loadACPITables(unsigned char*)>
c000f116:	83 c4 10             	add    esp,0x10
c000f119:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f11e:	83 ec 08             	sub    esp,0x8
c000f121:	68 4c 18 02 c0       	push   0xc002184c
c000f126:	50                   	push   eax
c000f127:	e8 b8 fe ff ff       	call   c000efe4 <findDataTable(unsigned char*, char*)>
c000f12c:	83 c4 10             	add    esp,0x10
c000f12f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f133:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f138:	75 1a                	jne    c000f154 <scanMADT()+0xf0>
c000f13a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f13f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f145:	83 e2 fe             	and    edx,0xfffffffe
c000f148:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f14e:	e9 c1 03 00 00       	jmp    c000f514 <scanMADT()+0x4b0>
c000f153:	90                   	nop
c000f154:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f15c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f163:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f167:	0f 87 a7 03 00 00    	ja     c000f514 <scanMADT()+0x4b0>
c000f16d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f175:	0f 87 99 03 00 00    	ja     c000f514 <scanMADT()+0x4b0>
c000f17b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f17f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f183:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f187:	8d 50 01             	lea    edx,[eax+0x1]
c000f18a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f18e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f192:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f196:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f19a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f19e:	8d 50 01             	lea    edx,[eax+0x1]
c000f1a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1ad:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1b1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1b6:	83 f8 02             	cmp    eax,0x2
c000f1b9:	0f 86 51 03 00 00    	jbe    c000f510 <scanMADT()+0x4ac>
c000f1bf:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1c4:	85 c0                	test   eax,eax
c000f1c6:	75 58                	jne    c000f220 <scanMADT()+0x1bc>
c000f1c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1cc:	8d 50 01             	lea    edx,[eax+0x1]
c000f1cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1d3:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1d9:	0f b6 d2             	movzx  edx,dl
c000f1dc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1e0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1e4:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f1ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f5:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1fb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f1fe:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f204:	0f b6 d2             	movzx  edx,dl
c000f207:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f20b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f20f:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f215:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f21a:	e9 d9 02 00 00       	jmp    c000f4f8 <scanMADT()+0x494>
c000f21f:	90                   	nop
c000f220:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f225:	83 f8 01             	cmp    eax,0x1
c000f228:	0f 85 1a 01 00 00    	jne    c000f348 <scanMADT()+0x2e4>
c000f22e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f232:	8d 50 01             	lea    edx,[eax+0x1]
c000f235:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f239:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f23f:	0f b6 d2             	movzx  edx,dl
c000f242:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f246:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f24a:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f250:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f255:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f259:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f25d:	01 d0                	add    eax,edx
c000f25f:	83 c0 2c             	add    eax,0x2c
c000f262:	8a 00                	mov    al,BYTE PTR [eax]
c000f264:	0f b6 d0             	movzx  edx,al
c000f267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f26b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f26e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f272:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f276:	0f b6 c0             	movzx  eax,al
c000f279:	c1 e0 08             	shl    eax,0x8
c000f27c:	89 d1                	mov    ecx,edx
c000f27e:	09 c1                	or     ecx,eax
c000f280:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f284:	8d 50 02             	lea    edx,[eax+0x2]
c000f287:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f28b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f28f:	0f b6 c0             	movzx  eax,al
c000f292:	c1 e0 10             	shl    eax,0x10
c000f295:	09 c1                	or     ecx,eax
c000f297:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f29b:	8d 50 03             	lea    edx,[eax+0x3]
c000f29e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2a6:	0f b6 c0             	movzx  eax,al
c000f2a9:	c1 e0 18             	shl    eax,0x18
c000f2ac:	09 c1                	or     ecx,eax
c000f2ae:	89 ca                	mov    edx,ecx
c000f2b0:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f2b5:	0f b6 c0             	movzx  eax,al
c000f2b8:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2cc:	01 d0                	add    eax,edx
c000f2ce:	83 c0 2c             	add    eax,0x2c
c000f2d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d3:	0f b6 d0             	movzx  edx,al
c000f2d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2da:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2e5:	0f b6 c0             	movzx  eax,al
c000f2e8:	c1 e0 08             	shl    eax,0x8
c000f2eb:	89 d1                	mov    ecx,edx
c000f2ed:	09 c1                	or     ecx,eax
c000f2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f3:	8d 50 02             	lea    edx,[eax+0x2]
c000f2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2fe:	0f b6 c0             	movzx  eax,al
c000f301:	c1 e0 10             	shl    eax,0x10
c000f304:	09 c1                	or     ecx,eax
c000f306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30a:	8d 50 03             	lea    edx,[eax+0x3]
c000f30d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f311:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f315:	0f b6 c0             	movzx  eax,al
c000f318:	c1 e0 18             	shl    eax,0x18
c000f31b:	09 c1                	or     ecx,eax
c000f31d:	89 ca                	mov    edx,ecx
c000f31f:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f324:	0f b6 c0             	movzx  eax,al
c000f327:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f32e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f333:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f338:	83 c0 01             	add    eax,0x1
c000f33b:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f340:	e9 b3 01 00 00       	jmp    c000f4f8 <scanMADT()+0x494>
c000f345:	8d 76 00             	lea    esi,[esi+0x0]
c000f348:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f34d:	83 f8 02             	cmp    eax,0x2
c000f350:	0f 85 ea 00 00 00    	jne    c000f440 <scanMADT()+0x3dc>
c000f356:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35a:	8d 50 01             	lea    edx,[eax+0x1]
c000f35d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f361:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f365:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f369:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f36d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f371:	8d 50 01             	lea    edx,[eax+0x1]
c000f374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f37c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f380:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f384:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f38c:	01 d0                	add    eax,edx
c000f38e:	83 c0 2c             	add    eax,0x2c
c000f391:	8a 00                	mov    al,BYTE PTR [eax]
c000f393:	0f b6 d0             	movzx  edx,al
c000f396:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f39d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3a5:	0f b6 c0             	movzx  eax,al
c000f3a8:	c1 e0 08             	shl    eax,0x8
c000f3ab:	89 d1                	mov    ecx,edx
c000f3ad:	09 c1                	or     ecx,eax
c000f3af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b3:	8d 50 02             	lea    edx,[eax+0x2]
c000f3b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3be:	0f b6 c0             	movzx  eax,al
c000f3c1:	c1 e0 10             	shl    eax,0x10
c000f3c4:	09 c1                	or     ecx,eax
c000f3c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ca:	8d 50 03             	lea    edx,[eax+0x3]
c000f3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3d5:	0f b6 c0             	movzx  eax,al
c000f3d8:	c1 e0 18             	shl    eax,0x18
c000f3db:	09 c8                	or     eax,ecx
c000f3dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ee:	01 d0                	add    eax,edx
c000f3f0:	83 c0 2c             	add    eax,0x2c
c000f3f3:	8a 00                	mov    al,BYTE PTR [eax]
c000f3f5:	0f b6 d0             	movzx  edx,al
c000f3f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3fc:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f403:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f407:	0f b6 c0             	movzx  eax,al
c000f40a:	c1 e0 08             	shl    eax,0x8
c000f40d:	09 d0                	or     eax,edx
c000f40f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f414:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f419:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f41e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f422:	88 90 48 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd0b8],dl
c000f428:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f42d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f432:	66 89 94 00 20 98 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd67e0],dx
c000f43a:	e9 b9 00 00 00       	jmp    c000f4f8 <scanMADT()+0x494>
c000f43f:	90                   	nop
c000f440:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f445:	83 f8 04             	cmp    eax,0x4
c000f448:	0f 85 9a 00 00 00    	jne    c000f4e8 <scanMADT()+0x484>
c000f44e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f452:	8d 50 01             	lea    edx,[eax+0x1]
c000f455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f459:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f45d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f461:	0f b6 c0             	movzx  eax,al
c000f464:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f468:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f46c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f470:	01 d0                	add    eax,edx
c000f472:	83 c0 2c             	add    eax,0x2c
c000f475:	8a 00                	mov    al,BYTE PTR [eax]
c000f477:	0f b6 d0             	movzx  edx,al
c000f47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f47e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f485:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f489:	0f b6 c0             	movzx  eax,al
c000f48c:	c1 e0 08             	shl    eax,0x8
c000f48f:	09 d0                	or     eax,edx
c000f491:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f495:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f49a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f49e:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4b8:	c1 e0 08             	shl    eax,0x8
c000f4bb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4bf:	89 c1                	mov    ecx,eax
c000f4c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4c5:	c1 e0 18             	shl    eax,0x18
c000f4c8:	89 c3                	mov    ebx,eax
c000f4ca:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4cf:	8d 50 01             	lea    edx,[eax+0x1]
c000f4d2:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4d8:	09 d9                	or     ecx,ebx
c000f4da:	89 ca                	mov    edx,ecx
c000f4dc:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f4e3:	eb 13                	jmp    c000f4f8 <scanMADT()+0x494>
c000f4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4ed:	83 f8 05             	cmp    eax,0x5
c000f4f0:	75 06                	jne    c000f4f8 <scanMADT()+0x494>
c000f4f2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f4f7:	90                   	nop
c000f4f8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f4fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f501:	01 d0                	add    eax,edx
c000f503:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f507:	e9 50 fc ff ff       	jmp    c000f15c <scanMADT()+0xf8>
c000f50c:	90                   	nop
c000f50d:	eb 05                	jmp    c000f514 <scanMADT()+0x4b0>
c000f50f:	90                   	nop
c000f510:	90                   	nop
c000f511:	8d 76 00             	lea    esi,[esi+0x0]
c000f514:	83 c4 38             	add    esp,0x38
c000f517:	5b                   	pop    ebx
c000f518:	c3                   	ret    
c000f519:	90                   	nop
c000f51a:	66 90                	xchg   ax,ax

c000f51c <ACPI::ACPI()>:
c000f51c:	83 ec 0c             	sub    esp,0xc
c000f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f523:	83 ec 08             	sub    esp,0x8
c000f526:	68 51 18 02 c0       	push   0xc0021851
c000f52b:	50                   	push   eax
c000f52c:	e8 3b d2 ff ff       	call   c000c76c <Device::Device(char const*)>
c000f531:	83 c4 10             	add    esp,0x10
c000f534:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c000f539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f53d:	89 10                	mov    DWORD PTR [eax],edx
c000f53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f543:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f54e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f566:	e8 f9 fa ff ff       	call   c000f064 <scanMADT()>
c000f56b:	90                   	nop
c000f56c:	83 c4 0c             	add    esp,0xc
c000f56f:	c3                   	ret    

c000f570 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f570:	83 ec 2c             	sub    esp,0x2c
c000f573:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f577:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f57b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f57f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f583:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f588:	88 c8                	mov    al,cl
c000f58a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f58e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f593:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f59b:	90                   	nop
c000f59c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5a0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5a6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5aa:	0f 8d b0 00 00 00    	jge    c000f660 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5b8:	83 c2 2a             	add    edx,0x2a
c000f5bb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5c4:	0f b7 c0             	movzx  eax,ax
c000f5c7:	39 c2                	cmp    edx,eax
c000f5c9:	0f 85 85 00 00 00    	jne    c000f654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5d7:	83 c2 2a             	add    edx,0x2a
c000f5da:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f5de:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f5e3:	0f b6 c0             	movzx  eax,al
c000f5e6:	39 c2                	cmp    edx,eax
c000f5e8:	75 6a                	jne    c000f654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5ea:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f5ef:	85 c0                	test   eax,eax
c000f5f1:	74 3d                	je     c000f630 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f5f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5fb:	83 c2 2a             	add    edx,0x2a
c000f5fe:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f602:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f609:	39 c2                	cmp    edx,eax
c000f60b:	74 13                	je     c000f620 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f60d:	83 ec 0c             	sub    esp,0xc
c000f610:	68 cc 17 02 c0       	push   0xc00217cc
c000f615:	e8 33 1b 00 00       	call   c001114d <KePanic(char const*)>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	8d 76 00             	lea    esi,[esi+0x0]
c000f620:	83 ec 0c             	sub    esp,0xc
c000f623:	68 56 18 02 c0       	push   0xc0021856
c000f628:	e8 20 1b 00 00       	call   c001114d <KePanic(char const*)>
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f634:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f63c:	83 c2 2a             	add    edx,0x2a
c000f63f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f643:	8b 02                	mov    eax,DWORD PTR [edx]
c000f645:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f648:	89 01                	mov    DWORD PTR [ecx],eax
c000f64a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f64d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f652:	66 90                	xchg   ax,ax
c000f654:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f659:	e9 3e ff ff ff       	jmp    c000f59c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f65e:	66 90                	xchg   ax,ax
c000f660:	90                   	nop
c000f661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f665:	83 c4 2c             	add    esp,0x2c
c000f668:	c2 04 00             	ret    0x4
c000f66b:	90                   	nop

c000f66c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f66c:	83 ec 1c             	sub    esp,0x1c
c000f66f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f673:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f677:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f67b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f680:	88 c8                	mov    al,cl
c000f682:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f686:	88 d0                	mov    al,dl
c000f688:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f690:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f69a:	83 c2 2a             	add    edx,0x2a
c000f69d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f6a1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6ba:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6c9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6cd:	83 c0 01             	add    eax,0x1
c000f6d0:	88 c1                	mov    cl,al
c000f6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d6:	83 c2 2a             	add    edx,0x2a
c000f6d9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6eb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6f2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fa:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f700:	8d 50 01             	lea    edx,[eax+0x1]
c000f703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f707:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f711:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f717:	3d 00 02 00 00       	cmp    eax,0x200
c000f71c:	75 12                	jne    c000f730 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f71e:	83 ec 0c             	sub    esp,0xc
c000f721:	68 65 18 02 c0       	push   0xc0021865
c000f726:	e8 22 1a 00 00       	call   c001114d <KePanic(char const*)>
c000f72b:	83 c4 10             	add    esp,0x10
c000f72e:	66 90                	xchg   ax,ax
c000f730:	90                   	nop
c000f731:	83 c4 1c             	add    esp,0x1c
c000f734:	c3                   	ret    
c000f735:	90                   	nop
c000f736:	66 90                	xchg   ax,ax

c000f738 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f738:	b8 00 00 00 00       	mov    eax,0x0
c000f73d:	c3                   	ret    
c000f73e:	66 90                	xchg   ax,ax

c000f740 <ACPI::detectPCI()>:
c000f740:	53                   	push   ebx
c000f741:	83 ec 28             	sub    esp,0x28
c000f744:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f749:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f74e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f753:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f759:	83 e0 04             	and    eax,0x4
c000f75c:	0f b6 c0             	movzx  eax,al
c000f75f:	85 c0                	test   eax,eax
c000f761:	74 2d                	je     c000f790 <ACPI::detectPCI()+0x50>
c000f763:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	68 82 18 02 c0       	push   0xc0021882
c000f770:	50                   	push   eax
c000f771:	e8 6e f8 ff ff       	call   c000efe4 <findDataTable(unsigned char*, char*)>
c000f776:	83 c4 10             	add    esp,0x10
c000f779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f77d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f782:	74 0c                	je     c000f790 <ACPI::detectPCI()+0x50>
c000f784:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f789:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f78e:	66 90                	xchg   ax,ax
c000f790:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f79c:	8a 00                	mov    al,BYTE PTR [eax]
c000f79e:	0f b6 c0             	movzx  eax,al
c000f7a1:	83 f8 01             	cmp    eax,0x1
c000f7a4:	75 0e                	jne    c000f7b4 <ACPI::detectPCI()+0x74>
c000f7a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7b0:	eb 2e                	jmp    c000f7e0 <ACPI::detectPCI()+0xa0>
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7b8:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ba:	0f b6 c0             	movzx  eax,al
c000f7bd:	83 f8 02             	cmp    eax,0x2
c000f7c0:	75 1e                	jne    c000f7e0 <ACPI::detectPCI()+0xa0>
c000f7c2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7c7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7cc:	85 c0                	test   eax,eax
c000f7ce:	74 10                	je     c000f7e0 <ACPI::detectPCI()+0xa0>
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	68 fc 17 02 c0       	push   0xc00217fc
c000f7d8:	e8 70 19 00 00       	call   c001114d <KePanic(char const*)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f7e4:	83 f0 01             	xor    eax,0x1
c000f7e7:	0f b6 c0             	movzx  eax,al
c000f7ea:	85 c0                	test   eax,eax
c000f7ec:	74 46                	je     c000f834 <ACPI::detectPCI()+0xf4>
c000f7ee:	e8 3d 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f7f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f7fc:	75 0e                	jne    c000f80c <ACPI::detectPCI()+0xcc>
c000f7fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f803:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f808:	eb 2a                	jmp    c000f834 <ACPI::detectPCI()+0xf4>
c000f80a:	66 90                	xchg   ax,ax
c000f80c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f811:	75 21                	jne    c000f834 <ACPI::detectPCI()+0xf4>
c000f813:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f818:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 13                	je     c000f834 <ACPI::detectPCI()+0xf4>
c000f821:	83 ec 0c             	sub    esp,0xc
c000f824:	68 fc 17 02 c0       	push   0xc00217fc
c000f829:	e8 1f 19 00 00       	call   c001114d <KePanic(char const*)>
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	8d 76 00             	lea    esi,[esi+0x0]
c000f834:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f839:	85 c0                	test   eax,eax
c000f83b:	0f 84 87 00 00 00    	je     c000f8c8 <ACPI::detectPCI()+0x188>
c000f841:	83 ec 0c             	sub    esp,0xc
c000f844:	68 87 18 02 c0       	push   0xc0021887
c000f849:	e8 2a 12 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f860:	e8 6e 82 ff ff       	call   c0007ad3 <malloc>
c000f865:	83 c4 10             	add    esp,0x10
c000f868:	89 c3                	mov    ebx,eax
c000f86a:	83 ec 0c             	sub    esp,0xc
c000f86d:	53                   	push   ebx
c000f86e:	e8 cb b2 00 00       	call   c001ab3e <PCI::PCI()>
c000f873:	83 c4 10             	add    esp,0x10
c000f876:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f87a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f87e:	83 ec 08             	sub    esp,0x8
c000f881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f885:	50                   	push   eax
c000f886:	e8 49 cd ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c000f88b:	83 c4 10             	add    esp,0x10
c000f88e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f892:	8b 00                	mov    eax,DWORD PTR [eax]
c000f894:	83 c0 08             	add    eax,0x8
c000f897:	8b 00                	mov    eax,DWORD PTR [eax]
c000f899:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f89e:	85 d2                	test   edx,edx
c000f8a0:	74 0a                	je     c000f8ac <ACPI::detectPCI()+0x16c>
c000f8a2:	ba 01 00 00 00       	mov    edx,0x1
c000f8a7:	eb 0b                	jmp    c000f8b4 <ACPI::detectPCI()+0x174>
c000f8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ac:	ba 02 00 00 00       	mov    edx,0x2
c000f8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b4:	6a 00                	push   0x0
c000f8b6:	6a 00                	push   0x0
c000f8b8:	52                   	push   edx
c000f8b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8bd:	ff d0                	call   eax
c000f8bf:	83 c4 10             	add    esp,0x10
c000f8c2:	e9 91 00 00 00       	jmp    c000f958 <ACPI::detectPCI()+0x218>
c000f8c7:	90                   	nop
c000f8c8:	83 ec 0c             	sub    esp,0xc
c000f8cb:	68 9f 18 02 c0       	push   0xc002189f
c000f8d0:	e8 a3 11 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000f8d5:	83 c4 10             	add    esp,0x10
c000f8d8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f8df:	83 ec 0c             	sub    esp,0xc
c000f8e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8e6:	e8 e8 81 ff ff       	call   c0007ad3 <malloc>
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	89 c3                	mov    ebx,eax
c000f8f0:	83 ec 0c             	sub    esp,0xc
c000f8f3:	53                   	push   ebx
c000f8f4:	e8 ed bd 00 00       	call   c001b6e6 <IDE::IDE()>
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f90b:	50                   	push   eax
c000f90c:	e8 c3 cc ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f918:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f926:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f92f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f933:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f93c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f940:	8b 00                	mov    eax,DWORD PTR [eax]
c000f942:	83 c0 08             	add    eax,0x8
c000f945:	8b 00                	mov    eax,DWORD PTR [eax]
c000f947:	6a 00                	push   0x0
c000f949:	6a 00                	push   0x0
c000f94b:	6a 00                	push   0x0
c000f94d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f951:	ff d0                	call   eax
c000f953:	83 c4 10             	add    esp,0x10
c000f956:	66 90                	xchg   ax,ax
c000f958:	90                   	nop
c000f959:	83 c4 28             	add    esp,0x28
c000f95c:	5b                   	pop    ebx
c000f95d:	c3                   	ret    
c000f95e:	66 90                	xchg   ax,ax

c000f960 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f960:	83 ec 1c             	sub    esp,0x1c
c000f963:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f967:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f96a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f96e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f973:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f978:	83 ec 08             	sub    esp,0x8
c000f97b:	52                   	push   edx
c000f97c:	50                   	push   eax
c000f97d:	e8 1a 78 ff ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c000f982:	83 c4 10             	add    esp,0x10
c000f985:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f989:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f98e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f993:	83 ec 04             	sub    esp,0x4
c000f996:	6a 01                	push   0x1
c000f998:	52                   	push   edx
c000f999:	50                   	push   eax
c000f99a:	e8 15 79 ff ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f99f:	83 c4 10             	add    esp,0x10
c000f9a2:	90                   	nop
c000f9a3:	83 c4 1c             	add    esp,0x1c
c000f9a6:	c3                   	ret    
c000f9a7:	90                   	nop

c000f9a8 <ACPI::sleep()>:
c000f9a8:	83 ec 0c             	sub    esp,0xc
c000f9ab:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9b0:	85 c0                	test   eax,eax
c000f9b2:	74 08                	je     c000f9bc <ACPI::sleep()+0x14>
c000f9b4:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9b9:	ff d0                	call   eax
c000f9bb:	90                   	nop
c000f9bc:	90                   	nop
c000f9bd:	83 c4 0c             	add    esp,0xc
c000f9c0:	c3                   	ret    
c000f9c1:	90                   	nop
c000f9c2:	66 90                	xchg   ax,ax

c000f9c4 <ACPI::open(int, int, void*)>:
c000f9c4:	55                   	push   ebp
c000f9c5:	89 e5                	mov    ebp,esp
c000f9c7:	53                   	push   ebx
c000f9c8:	81 ec 74 01 00 00    	sub    esp,0x174
c000f9ce:	83 ec 0c             	sub    esp,0xc
c000f9d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f9d4:	e8 67 fd ff ff       	call   c000f740 <ACPI::detectPCI()>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	83 ec 0c             	sub    esp,0xc
c000f9df:	68 24 18 02 c0       	push   0xc0021824
c000f9e4:	e8 8f 10 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	b8 4c 05 00 00       	mov    eax,0x54c
c000f9f1:	8a 00                	mov    al,BYTE PTR [eax]
c000f9f3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f9f6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f9fa:	83 f8 01             	cmp    eax,0x1
c000f9fd:	75 15                	jne    c000fa14 <ACPI::open(int, int, void*)+0x50>
c000f9ff:	83 ec 0c             	sub    esp,0xc
c000fa02:	68 b4 18 02 c0       	push   0xc00218b4
c000fa07:	e8 56 4b 00 00       	call   c0014562 <Thr::loadKernelSymbolTable(char const*)>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	eb 33                	jmp    c000fa44 <ACPI::open(int, int, void*)+0x80>
c000fa11:	8d 76 00             	lea    esi,[esi+0x0]
c000fa14:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa18:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa1d:	75 15                	jne    c000fa34 <ACPI::open(int, int, void*)+0x70>
c000fa1f:	83 ec 0c             	sub    esp,0xc
c000fa22:	68 d2 18 02 c0       	push   0xc00218d2
c000fa27:	e8 36 4b 00 00       	call   c0014562 <Thr::loadKernelSymbolTable(char const*)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	eb 13                	jmp    c000fa44 <ACPI::open(int, int, void*)+0x80>
c000fa31:	8d 76 00             	lea    esi,[esi+0x0]
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	68 f0 18 02 c0       	push   0xc00218f0
c000fa3c:	e8 0c 17 00 00       	call   c001114d <KePanic(char const*)>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fa48:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fa4f:	83 ec 0c             	sub    esp,0xc
c000fa52:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fa55:	e8 79 80 ff ff       	call   c0007ad3 <malloc>
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	89 c3                	mov    ebx,eax
c000fa5f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa64:	83 ec 04             	sub    esp,0x4
c000fa67:	50                   	push   eax
c000fa68:	68 0a 19 02 c0       	push   0xc002190a
c000fa6d:	53                   	push   ebx
c000fa6e:	e8 53 bc ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c000fa73:	83 c4 10             	add    esp,0x10
c000fa76:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fa79:	83 ec 08             	sub    esp,0x8
c000fa7c:	6a 01                	push   0x1
c000fa7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa81:	e8 fc bc ff ff       	call   c000b782 <File::open(FileOpenMode)>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fa8c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fa90:	75 12                	jne    c000faa4 <ACPI::open(int, int, void*)+0xe0>
c000fa92:	83 ec 0c             	sub    esp,0xc
c000fa95:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa98:	e8 43 bd ff ff       	call   c000b7e0 <File::close()>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	eb 06                	jmp    c000faa8 <ACPI::open(int, int, void*)+0xe4>
c000faa2:	66 90                	xchg   ax,ax
c000faa4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000faa8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000faac:	74 16                	je     c000fac4 <ACPI::open(int, int, void*)+0x100>
c000faae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fab1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab3:	83 c0 08             	add    eax,0x8
c000fab6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab8:	83 ec 0c             	sub    esp,0xc
c000fabb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fabe:	ff d0                	call   eax
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	90                   	nop
c000fac4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fac7:	83 f0 01             	xor    eax,0x1
c000faca:	0f b6 c0             	movzx  eax,al
c000facd:	85 c0                	test   eax,eax
c000facf:	74 3b                	je     c000fb0c <ACPI::open(int, int, void*)+0x148>
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	68 28 19 02 c0       	push   0xc0021928
c000fad9:	e8 9a 0f 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	83 ec 04             	sub    esp,0x4
c000fae4:	6a 0c                	push   0xc
c000fae6:	68 43 19 02 c0       	push   0xc0021943
c000faeb:	68 54 19 02 c0       	push   0xc0021954
c000faf0:	e8 19 3d 00 00       	call   c001380e <Reg::readIntWithDefault(char*, char*, int)>
c000faf5:	83 c4 10             	add    esp,0x10
c000faf8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb01:	e8 14 9d ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb06:	83 c4 10             	add    esp,0x10
c000fb09:	8d 76 00             	lea    esi,[esi+0x0]
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	68 f5 04 02 c0       	push   0xc00204f5
c000fb14:	e8 5f 0f 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb1f:	83 ec 08             	sub    esp,0x8
c000fb22:	6a 13                	push   0x13
c000fb24:	50                   	push   eax
c000fb25:	e8 c2 cd ff ff       	call   c000c8ec <getDevicesOfType(DeviceType)>
c000fb2a:	83 c4 0c             	add    esp,0xc
c000fb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb30:	83 ec 0c             	sub    esp,0xc
c000fb33:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb36:	50                   	push   eax
c000fb37:	e8 b4 fd 00 00       	call   c001f8f0 <LinkedList<Device>::isEmpty()>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	83 f0 01             	xor    eax,0x1
c000fb42:	0f b6 c0             	movzx  eax,al
c000fb45:	85 c0                	test   eax,eax
c000fb47:	0f 84 1f 01 00 00    	je     c000fc6c <ACPI::open(int, int, void*)+0x2a8>
c000fb4d:	83 ec 0c             	sub    esp,0xc
c000fb50:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb53:	50                   	push   eax
c000fb54:	e8 b3 fd 00 00       	call   c001f90c <LinkedList<Device>::getFirstElement()>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fb5f:	83 ec 0c             	sub    esp,0xc
c000fb62:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb65:	50                   	push   eax
c000fb66:	e8 a9 fd 00 00       	call   c001f914 <LinkedList<Device>::removeFirst()>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fb71:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fb74:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fb77:	b8 24 00 00 00       	mov    eax,0x24
c000fb7c:	83 e0 fc             	and    eax,0xfffffffc
c000fb7f:	89 c3                	mov    ebx,eax
c000fb81:	b8 00 00 00 00       	mov    eax,0x0
c000fb86:	66 90                	xchg   ax,ax
c000fb88:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fb8f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fb96:	83 c0 04             	add    eax,0x4
c000fb99:	39 d8                	cmp    eax,ebx
c000fb9b:	72 eb                	jb     c000fb88 <ACPI::open(int, int, void*)+0x1c4>
c000fb9d:	83 ec 08             	sub    esp,0x8
c000fba0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fba6:	50                   	push   eax
c000fba7:	83 ec 24             	sub    esp,0x24
c000fbaa:	89 e1                	mov    ecx,esp
c000fbac:	b8 24 00 00 00       	mov    eax,0x24
c000fbb1:	83 e0 fc             	and    eax,0xfffffffc
c000fbb4:	89 c3                	mov    ebx,eax
c000fbb6:	b8 00 00 00 00       	mov    eax,0x0
c000fbbb:	90                   	nop
c000fbbc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fbc3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fbc6:	83 c0 04             	add    eax,0x4
c000fbc9:	39 d8                	cmp    eax,ebx
c000fbcb:	72 ef                	jb     c000fbbc <ACPI::open(int, int, void*)+0x1f8>
c000fbcd:	e8 54 b4 00 00       	call   c001b026 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fbd2:	83 c4 30             	add    esp,0x30
c000fbd5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fbd8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fbdc:	0f 84 4e ff ff ff    	je     c000fb30 <ACPI::open(int, int, void*)+0x16c>
c000fbe2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fbef:	e8 df 7e ff ff       	call   c0007ad3 <malloc>
c000fbf4:	83 c4 10             	add    esp,0x10
c000fbf7:	89 c3                	mov    ebx,eax
c000fbf9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fbfe:	83 ec 04             	sub    esp,0x4
c000fc01:	50                   	push   eax
c000fc02:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc05:	53                   	push   ebx
c000fc06:	e8 bb ba ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c000fc0b:	83 c4 10             	add    esp,0x10
c000fc0e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc11:	83 ec 0c             	sub    esp,0xc
c000fc14:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc17:	e8 2a be ff ff       	call   c000ba46 <File::exists()>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	0f b6 c0             	movzx  eax,al
c000fc22:	85 c0                	test   eax,eax
c000fc24:	74 22                	je     c000fc48 <ACPI::open(int, int, void*)+0x284>
c000fc26:	83 ec 08             	sub    esp,0x8
c000fc29:	6a 01                	push   0x1
c000fc2b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc2e:	e8 b1 53 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000fc33:	83 c4 10             	add    esp,0x10
c000fc36:	83 ec 08             	sub    esp,0x8
c000fc39:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc3c:	50                   	push   eax
c000fc3d:	e8 e2 55 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	8d 76 00             	lea    esi,[esi+0x0]
c000fc48:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fc4c:	0f 84 de fe ff ff    	je     c000fb30 <ACPI::open(int, int, void*)+0x16c>
c000fc52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fc55:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc57:	83 c0 08             	add    eax,0x8
c000fc5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5c:	83 ec 0c             	sub    esp,0xc
c000fc5f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc62:	ff d0                	call   eax
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	e9 c4 fe ff ff       	jmp    c000fb30 <ACPI::open(int, int, void*)+0x16c>
c000fc6c:	83 ec 0c             	sub    esp,0xc
c000fc6f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc72:	50                   	push   eax
c000fc73:	e8 74 fc 00 00       	call   c001f8ec <LinkedList<Device>::~LinkedList()>
c000fc78:	83 c4 10             	add    esp,0x10
c000fc7b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fc81:	83 ec 08             	sub    esp,0x8
c000fc84:	6a 01                	push   0x1
c000fc86:	68 5b 19 02 c0       	push   0xc002195b
c000fc8b:	e8 54 53 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000fc90:	83 c4 10             	add    esp,0x10
c000fc93:	83 ec 08             	sub    esp,0x8
c000fc96:	53                   	push   ebx
c000fc97:	50                   	push   eax
c000fc98:	e8 87 55 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fca5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fcab:	83 e0 04             	and    eax,0x4
c000fcae:	0f b6 c0             	movzx  eax,al
c000fcb1:	85 c0                	test   eax,eax
c000fcb3:	0f 84 e3 00 00 00    	je     c000fd9c <ACPI::open(int, int, void*)+0x3d8>
c000fcb9:	83 ec 0c             	sub    esp,0xc
c000fcbc:	68 78 19 02 c0       	push   0xc0021978
c000fcc1:	e8 b2 0d 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c000fcc6:	83 c4 10             	add    esp,0x10
c000fcc9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fcd0:	83 ec 0c             	sub    esp,0xc
c000fcd3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fcd6:	e8 f8 7d ff ff       	call   c0007ad3 <malloc>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	89 c3                	mov    ebx,eax
c000fce0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fce5:	83 ec 04             	sub    esp,0x4
c000fce8:	50                   	push   eax
c000fce9:	68 95 19 02 c0       	push   0xc0021995
c000fcee:	53                   	push   ebx
c000fcef:	e8 d2 b9 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fcfa:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fcfe:	74 1c                	je     c000fd1c <ACPI::open(int, int, void*)+0x358>
c000fd00:	83 ec 0c             	sub    esp,0xc
c000fd03:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd06:	e8 3b bd ff ff       	call   c000ba46 <File::exists()>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	0f b6 c0             	movzx  eax,al
c000fd11:	85 c0                	test   eax,eax
c000fd13:	74 07                	je     c000fd1c <ACPI::open(int, int, void*)+0x358>
c000fd15:	b0 01                	mov    al,0x1
c000fd17:	eb 07                	jmp    c000fd20 <ACPI::open(int, int, void*)+0x35c>
c000fd19:	8d 76 00             	lea    esi,[esi+0x0]
c000fd1c:	b0 00                	mov    al,0x0
c000fd1e:	66 90                	xchg   ax,ax
c000fd20:	0f b6 c0             	movzx  eax,al
c000fd23:	85 c0                	test   eax,eax
c000fd25:	74 21                	je     c000fd48 <ACPI::open(int, int, void*)+0x384>
c000fd27:	83 ec 08             	sub    esp,0x8
c000fd2a:	6a 01                	push   0x1
c000fd2c:	68 95 19 02 c0       	push   0xc0021995
c000fd31:	e8 ae 52 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	83 ec 08             	sub    esp,0x8
c000fd3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd3f:	50                   	push   eax
c000fd40:	e8 df 54 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd4c:	74 1e                	je     c000fd6c <ACPI::open(int, int, void*)+0x3a8>
c000fd4e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd52:	74 18                	je     c000fd6c <ACPI::open(int, int, void*)+0x3a8>
c000fd54:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fd57:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd59:	83 c0 08             	add    eax,0x8
c000fd5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd64:	ff d0                	call   eax
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	8d 76 00             	lea    esi,[esi+0x0]
c000fd6c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fd71:	83 ec 08             	sub    esp,0x8
c000fd74:	68 b2 19 02 c0       	push   0xc00219b2
c000fd79:	50                   	push   eax
c000fd7a:	e8 65 f2 ff ff       	call   c000efe4 <findDataTable(unsigned char*, char*)>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fd85:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fd89:	74 11                	je     c000fd9c <ACPI::open(int, int, void*)+0x3d8>
c000fd8b:	83 ec 08             	sub    esp,0x8
c000fd8e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fd91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd94:	e8 c7 fb ff ff       	call   c000f960 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fd99:	83 c4 10             	add    esp,0x10
c000fd9c:	b8 00 00 00 00       	mov    eax,0x0
c000fda1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fda4:	c9                   	leave  
c000fda5:	c3                   	ret    

c000fda6 <CPU::close(int, int, void*)>:
c000fda6:	31 c0                	xor    eax,eax
c000fda8:	c3                   	ret    
c000fda9:	90                   	nop

c000fdaa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fdaa:	60                   	pusha  
c000fdab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdb7:	9c                   	pushf  
c000fdb8:	fa                   	cli    
c000fdb9:	0f 09                	wbinvd 
c000fdbb:	0f 30                	wrmsr  
c000fdbd:	9d                   	popf   
c000fdbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdc2:	89 02                	mov    DWORD PTR [edx],eax
c000fdc4:	61                   	popa   
c000fdc5:	c3                   	ret    

c000fdc6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fdc6:	60                   	pusha  
c000fdc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdcb:	9c                   	pushf  
c000fdcc:	fa                   	cli    
c000fdcd:	0f 09                	wbinvd 
c000fdcf:	31 c0                	xor    eax,eax
c000fdd1:	31 d2                	xor    edx,edx
c000fdd3:	0f 32                	rdmsr  
c000fdd5:	9d                   	popf   
c000fdd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdda:	89 02                	mov    DWORD PTR [edx],eax
c000fddc:	61                   	popa   
c000fddd:	c3                   	ret    

c000fdde <CPU::AMD_K6_writeback(int, int, int)>:
c000fdde:	56                   	push   esi
c000fddf:	53                   	push   ebx
c000fde0:	83 ec 10             	sub    esp,0x10
c000fde3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdec:	75 5d                	jne    c000fe4b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fdee:	83 f8 08             	cmp    eax,0x8
c000fdf1:	75 09                	jne    c000fdfc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fdf3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fdf8:	7e 13                	jle    c000fe0d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fdfa:	eb 30                	jmp    c000fe2c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fdfc:	83 f8 06             	cmp    eax,0x6
c000fdff:	7c 4a                	jl     c000fe4b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe01:	83 f8 07             	cmp    eax,0x7
c000fe04:	7e 07                	jle    c000fe0d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe06:	83 f8 09             	cmp    eax,0x9
c000fe09:	74 21                	je     c000fe2c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe0b:	eb 3e                	jmp    c000fe4b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe0d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe13:	89 e6                	mov    esi,esp
c000fe15:	56                   	push   esi
c000fe16:	68 82 00 00 c0       	push   0xc0000082
c000fe1b:	e8 a6 ff ff ff       	call   c000fdc6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe20:	c1 eb 15             	shr    ebx,0x15
c000fe23:	56                   	push   esi
c000fe24:	83 e3 7e             	and    ebx,0x7e
c000fe27:	6a 00                	push   0x0
c000fe29:	53                   	push   ebx
c000fe2a:	eb 12                	jmp    c000fe3e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe2c:	89 e3                	mov    ebx,esp
c000fe2e:	53                   	push   ebx
c000fe2f:	68 82 00 00 c0       	push   0xc0000082
c000fe34:	e8 8d ff ff ff       	call   c000fdc6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe39:	53                   	push   ebx
c000fe3a:	6a 00                	push   0x0
c000fe3c:	6a 00                	push   0x0
c000fe3e:	68 82 00 00 c0       	push   0xc0000082
c000fe43:	e8 62 ff ff ff       	call   c000fdaa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fe48:	83 c4 18             	add    esp,0x18
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	5b                   	pop    ebx
c000fe4f:	5e                   	pop    esi
c000fe50:	c3                   	ret    
c000fe51:	90                   	nop

c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fe52:	55                   	push   ebp
c000fe53:	57                   	push   edi
c000fe54:	56                   	push   esi
c000fe55:	53                   	push   ebx
c000fe56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe5a:	39 05 58 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f58,eax
c000fe60:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fe64:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe68:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fe6c:	75 23                	jne    c000fe91 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fe6e:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000fe73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe77:	89 06                	mov    DWORD PTR [esi],eax
c000fe79:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000fe7e:	89 07                	mov    DWORD PTR [edi],eax
c000fe80:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000fe85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe88:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000fe8d:	89 02                	mov    DWORD PTR [edx],eax
c000fe8f:	eb 3f                	jmp    c000fed0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fe91:	31 c9                	xor    ecx,ecx
c000fe93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe97:	0f a2                	cpuid  
c000fe99:	89 06                	mov    DWORD PTR [esi],eax
c000fe9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe9f:	89 1f                	mov    DWORD PTR [edi],ebx
c000fea1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fea4:	89 10                	mov    DWORD PTR [eax],edx
c000fea6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000feaa:	a3 58 2f 02 c0       	mov    ds:0xc0022f58,eax
c000feaf:	8b 06                	mov    eax,DWORD PTR [esi]
c000feb1:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000feb6:	8b 07                	mov    eax,DWORD PTR [edi]
c000feb8:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000febd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fec0:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000fec5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fec9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fecb:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000fed0:	5b                   	pop    ebx
c000fed1:	5e                   	pop    esi
c000fed2:	5f                   	pop    edi
c000fed3:	5d                   	pop    ebp
c000fed4:	c3                   	ret    
c000fed5:	90                   	nop

c000fed6 <CPU::cpuidCheckEDX(unsigned int)>:
c000fed6:	83 ec 10             	sub    esp,0x10
c000fed9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fedd:	50                   	push   eax
c000fede:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fee2:	50                   	push   eax
c000fee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fee7:	50                   	push   eax
c000fee8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000feec:	50                   	push   eax
c000feed:	6a 01                	push   0x1
c000feef:	e8 5e ff ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fef8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000fefc:	0f 95 c0             	setne  al
c000feff:	83 c4 24             	add    esp,0x24
c000ff02:	c3                   	ret    
c000ff03:	90                   	nop

c000ff04 <CPU::cpuidCheckECX(unsigned int)>:
c000ff04:	83 ec 10             	sub    esp,0x10
c000ff07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff0b:	50                   	push   eax
c000ff0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff10:	50                   	push   eax
c000ff11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff15:	50                   	push   eax
c000ff16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff1a:	50                   	push   eax
c000ff1b:	6a 01                	push   0x1
c000ff1d:	e8 30 ff ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff26:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff2a:	0f 95 c0             	setne  al
c000ff2d:	83 c4 24             	add    esp,0x24
c000ff30:	c3                   	ret    
c000ff31:	90                   	nop

c000ff32 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff32:	83 ec 10             	sub    esp,0x10
c000ff35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff39:	50                   	push   eax
c000ff3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff3e:	50                   	push   eax
c000ff3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff43:	50                   	push   eax
c000ff44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff48:	50                   	push   eax
c000ff49:	6a 07                	push   0x7
c000ff4b:	e8 02 ff ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff54:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ff58:	0f 95 c0             	setne  al
c000ff5b:	83 c4 24             	add    esp,0x24
c000ff5e:	c3                   	ret    
c000ff5f:	90                   	nop

c000ff60 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ff60:	83 ec 10             	sub    esp,0x10
c000ff63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff67:	50                   	push   eax
c000ff68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff6c:	50                   	push   eax
c000ff6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff71:	50                   	push   eax
c000ff72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff76:	50                   	push   eax
c000ff77:	6a 07                	push   0x7
c000ff79:	e8 d4 fe ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff82:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff86:	0f 95 c0             	setne  al
c000ff89:	83 c4 24             	add    esp,0x24
c000ff8c:	c3                   	ret    
c000ff8d:	90                   	nop

c000ff8e <CPU::CPU()>:
c000ff8e:	83 ec 0c             	sub    esp,0xc
c000ff91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff95:	83 ec 08             	sub    esp,0x8
c000ff98:	68 d5 1a 02 c0       	push   0xc0021ad5
c000ff9d:	50                   	push   eax
c000ff9e:	e8 c9 c7 ff ff       	call   c000c76c <Device::Device(char const*)>
c000ffa3:	83 c4 10             	add    esp,0x10
c000ffa6:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c000ffab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaf:	89 10                	mov    DWORD PTR [eax],edx
c000ffb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000ffbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc3:	05 78 01 00 00       	add    eax,0x178
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	50                   	push   eax
c000ffcc:	e8 ad 73 ff ff       	call   c000737e <GDT::GDT()>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd8:	05 7c 09 00 00       	add    eax,0x97c
c000ffdd:	83 ec 0c             	sub    esp,0xc
c000ffe0:	50                   	push   eax
c000ffe1:	e8 e6 75 ff ff       	call   c00075cc <IDT::IDT()>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffed:	05 7c 11 00 00       	add    eax,0x117c
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	50                   	push   eax
c000fff6:	e8 31 8f ff ff       	call   c0008f2c <TSS::TSS()>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010002:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001000d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010017:	90                   	nop
c0010018:	83 c4 0c             	add    esp,0xc
c001001b:	c3                   	ret    

c001001c <CPU::displayFeatures()>:
c001001c:	c3                   	ret    
c001001d:	90                   	nop

c001001e <CPU::detectFeatures()>:
c001001e:	55                   	push   ebp
c001001f:	57                   	push   edi
c0010020:	56                   	push   esi
c0010021:	53                   	push   ebx
c0010022:	83 ec 30             	sub    esp,0x30
c0010025:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010029:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010033:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010039:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010040:	6a 0d                	push   0xd
c0010042:	6a 00                	push   0x0
c0010044:	55                   	push   ebp
c0010045:	e8 a6 04 ff ff       	call   c00004f0 <memset>
c001004a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010059:	0f 84 db 05 00 00    	je     c001063a <CPU::detectFeatures()+0x61c>
c001005f:	83 ec 0c             	sub    esp,0xc
c0010062:	89 ef                	mov    edi,ebp
c0010064:	6a 10                	push   0x10
c0010066:	e8 6b fe ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c001006b:	83 e0 01             	and    eax,0x1
c001006e:	8d 14 00             	lea    edx,[eax+eax*1]
c0010071:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010077:	83 e0 fd             	and    eax,0xfffffffd
c001007a:	09 d0                	or     eax,edx
c001007c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010082:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010089:	e8 48 fe ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c001008e:	83 e0 01             	and    eax,0x1
c0010091:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010098:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001009e:	83 e0 fb             	and    eax,0xfffffffb
c00100a1:	09 d0                	or     eax,edx
c00100a3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100a9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00100b0:	e8 21 fe ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c00100b5:	83 e0 01             	and    eax,0x1
c00100b8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00100bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100c5:	83 e0 f7             	and    eax,0xfffffff7
c00100c8:	09 d0                	or     eax,edx
c00100ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100d0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00100d7:	e8 fa fd ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c00100dc:	83 e0 01             	and    eax,0x1
c00100df:	c1 e0 04             	shl    eax,0x4
c00100e2:	89 c2                	mov    edx,eax
c00100e4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100ea:	83 e0 ef             	and    eax,0xffffffef
c00100ed:	09 d0                	or     eax,edx
c00100ef:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100f5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00100fc:	e8 d5 fd ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0010101:	83 e0 01             	and    eax,0x1
c0010104:	c1 e0 05             	shl    eax,0x5
c0010107:	89 c2                	mov    edx,eax
c0010109:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001010f:	83 e0 df             	and    eax,0xffffffdf
c0010112:	09 d0                	or     eax,edx
c0010114:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001011a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010121:	e8 b0 fd ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0010126:	83 e0 01             	and    eax,0x1
c0010129:	8d 14 00             	lea    edx,[eax+eax*1]
c001012c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010132:	83 e0 fd             	and    eax,0xfffffffd
c0010135:	09 d0                	or     eax,edx
c0010137:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001013d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010144:	e8 8d fd ff ff       	call   c000fed6 <CPU::cpuidCheckEDX(unsigned int)>
c0010149:	83 e0 01             	and    eax,0x1
c001014c:	c1 e0 06             	shl    eax,0x6
c001014f:	89 c2                	mov    edx,eax
c0010151:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010157:	83 e0 bf             	and    eax,0xffffffbf
c001015a:	09 d0                	or     eax,edx
c001015c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010162:	58                   	pop    eax
c0010163:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010167:	50                   	push   eax
c0010168:	8d 44 24 28          	lea    eax,[esp+0x28]
c001016c:	50                   	push   eax
c001016d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010171:	56                   	push   esi
c0010172:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010176:	50                   	push   eax
c0010177:	6a 00                	push   0x0
c0010179:	e8 d4 fc ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001017e:	b8 04 00 00 00       	mov    eax,0x4
c0010183:	89 c1                	mov    ecx,eax
c0010185:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010187:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001018d:	89 c1                	mov    ecx,eax
c001018f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010193:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010195:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	8d 74 24 38          	lea    esi,[esp+0x38]
c00101a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101a3:	83 c4 18             	add    esp,0x18
c00101a6:	68 e4 19 02 c0       	push   0xc00219e4
c00101ab:	55                   	push   ebp
c00101ac:	e8 cf 05 ff ff       	call   c0000780 <strcmp>
c00101b1:	83 c4 10             	add    esp,0x10
c00101b4:	85 c0                	test   eax,eax
c00101b6:	75 0f                	jne    c00101c7 <CPU::detectFeatures()+0x1a9>
c00101b8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00101c2:	e9 22 02 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c00101c7:	50                   	push   eax
c00101c8:	50                   	push   eax
c00101c9:	68 f1 19 02 c0       	push   0xc00219f1
c00101ce:	55                   	push   ebp
c00101cf:	e8 ac 05 ff ff       	call   c0000780 <strcmp>
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	85 c0                	test   eax,eax
c00101d9:	74 dd                	je     c00101b8 <CPU::detectFeatures()+0x19a>
c00101db:	50                   	push   eax
c00101dc:	50                   	push   eax
c00101dd:	68 fe 19 02 c0       	push   0xc00219fe
c00101e2:	55                   	push   ebp
c00101e3:	e8 98 05 ff ff       	call   c0000780 <strcmp>
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	85 c0                	test   eax,eax
c00101ed:	74 2a                	je     c0010219 <CPU::detectFeatures()+0x1fb>
c00101ef:	50                   	push   eax
c00101f0:	50                   	push   eax
c00101f1:	68 0b 1a 02 c0       	push   0xc0021a0b
c00101f6:	55                   	push   ebp
c00101f7:	e8 84 05 ff ff       	call   c0000780 <strcmp>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	85 c0                	test   eax,eax
c0010201:	74 16                	je     c0010219 <CPU::detectFeatures()+0x1fb>
c0010203:	50                   	push   eax
c0010204:	50                   	push   eax
c0010205:	68 18 1a 02 c0       	push   0xc0021a18
c001020a:	55                   	push   ebp
c001020b:	e8 70 05 ff ff       	call   c0000780 <strcmp>
c0010210:	83 c4 10             	add    esp,0x10
c0010213:	85 c0                	test   eax,eax
c0010215:	74 48                	je     c001025f <CPU::detectFeatures()+0x241>
c0010217:	eb 0f                	jmp    c0010228 <CPU::detectFeatures()+0x20a>
c0010219:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010223:	e9 c1 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c0010228:	50                   	push   eax
c0010229:	50                   	push   eax
c001022a:	68 25 1a 02 c0       	push   0xc0021a25
c001022f:	55                   	push   ebp
c0010230:	e8 4b 05 ff ff       	call   c0000780 <strcmp>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	85 c0                	test   eax,eax
c001023a:	74 23                	je     c001025f <CPU::detectFeatures()+0x241>
c001023c:	57                   	push   edi
c001023d:	57                   	push   edi
c001023e:	68 32 1a 02 c0       	push   0xc0021a32
c0010243:	55                   	push   ebp
c0010244:	e8 37 05 ff ff       	call   c0000780 <strcmp>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	85 c0                	test   eax,eax
c001024e:	75 1e                	jne    c001026e <CPU::detectFeatures()+0x250>
c0010250:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001025a:	e9 8a 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c001025f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010269:	e9 7b 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c001026e:	56                   	push   esi
c001026f:	56                   	push   esi
c0010270:	68 3f 1a 02 c0       	push   0xc0021a3f
c0010275:	55                   	push   ebp
c0010276:	e8 05 05 ff ff       	call   c0000780 <strcmp>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	85 c0                	test   eax,eax
c0010280:	75 0f                	jne    c0010291 <CPU::detectFeatures()+0x273>
c0010282:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001028c:	e9 58 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c0010291:	51                   	push   ecx
c0010292:	51                   	push   ecx
c0010293:	68 fe 19 02 c0       	push   0xc00219fe
c0010298:	55                   	push   ebp
c0010299:	e8 e2 04 ff ff       	call   c0000780 <strcmp>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	85 c0                	test   eax,eax
c00102a3:	75 0f                	jne    c00102b4 <CPU::detectFeatures()+0x296>
c00102a5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00102af:	e9 35 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c00102b4:	52                   	push   edx
c00102b5:	52                   	push   edx
c00102b6:	68 4c 1a 02 c0       	push   0xc0021a4c
c00102bb:	55                   	push   ebp
c00102bc:	e8 bf 04 ff ff       	call   c0000780 <strcmp>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	85 c0                	test   eax,eax
c00102c6:	75 0f                	jne    c00102d7 <CPU::detectFeatures()+0x2b9>
c00102c8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00102d2:	e9 12 01 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c00102d7:	50                   	push   eax
c00102d8:	50                   	push   eax
c00102d9:	68 59 1a 02 c0       	push   0xc0021a59
c00102de:	55                   	push   ebp
c00102df:	e8 9c 04 ff ff       	call   c0000780 <strcmp>
c00102e4:	83 c4 10             	add    esp,0x10
c00102e7:	85 c0                	test   eax,eax
c00102e9:	75 0f                	jne    c00102fa <CPU::detectFeatures()+0x2dc>
c00102eb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00102f5:	e9 ef 00 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c00102fa:	50                   	push   eax
c00102fb:	50                   	push   eax
c00102fc:	68 66 1a 02 c0       	push   0xc0021a66
c0010301:	55                   	push   ebp
c0010302:	e8 79 04 ff ff       	call   c0000780 <strcmp>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	85 c0                	test   eax,eax
c001030c:	75 0f                	jne    c001031d <CPU::detectFeatures()+0x2ff>
c001030e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010318:	e9 cc 00 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c001031d:	50                   	push   eax
c001031e:	50                   	push   eax
c001031f:	68 73 1a 02 c0       	push   0xc0021a73
c0010324:	55                   	push   ebp
c0010325:	e8 56 04 ff ff       	call   c0000780 <strcmp>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	85 c0                	test   eax,eax
c001032f:	75 0f                	jne    c0010340 <CPU::detectFeatures()+0x322>
c0010331:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001033b:	e9 a9 00 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c0010340:	50                   	push   eax
c0010341:	50                   	push   eax
c0010342:	68 80 1a 02 c0       	push   0xc0021a80
c0010347:	55                   	push   ebp
c0010348:	e8 33 04 ff ff       	call   c0000780 <strcmp>
c001034d:	83 c4 10             	add    esp,0x10
c0010350:	85 c0                	test   eax,eax
c0010352:	75 0f                	jne    c0010363 <CPU::detectFeatures()+0x345>
c0010354:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001035e:	e9 86 00 00 00       	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c0010363:	50                   	push   eax
c0010364:	50                   	push   eax
c0010365:	68 8d 1a 02 c0       	push   0xc0021a8d
c001036a:	55                   	push   ebp
c001036b:	e8 10 04 ff ff       	call   c0000780 <strcmp>
c0010370:	83 c4 10             	add    esp,0x10
c0010373:	85 c0                	test   eax,eax
c0010375:	75 0c                	jne    c0010383 <CPU::detectFeatures()+0x365>
c0010377:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010381:	eb 66                	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c0010383:	50                   	push   eax
c0010384:	50                   	push   eax
c0010385:	68 9a 1a 02 c0       	push   0xc0021a9a
c001038a:	55                   	push   ebp
c001038b:	e8 f0 03 ff ff       	call   c0000780 <strcmp>
c0010390:	83 c4 10             	add    esp,0x10
c0010393:	85 c0                	test   eax,eax
c0010395:	75 0c                	jne    c00103a3 <CPU::detectFeatures()+0x385>
c0010397:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00103a1:	eb 46                	jmp    c00103e9 <CPU::detectFeatures()+0x3cb>
c00103a3:	57                   	push   edi
c00103a4:	57                   	push   edi
c00103a5:	68 a7 1a 02 c0       	push   0xc0021aa7
c00103aa:	55                   	push   ebp
c00103ab:	e8 d0 03 ff ff       	call   c0000780 <strcmp>
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	85 c0                	test   eax,eax
c00103b5:	74 e0                	je     c0010397 <CPU::detectFeatures()+0x379>
c00103b7:	56                   	push   esi
c00103b8:	56                   	push   esi
c00103b9:	68 b4 1a 02 c0       	push   0xc0021ab4
c00103be:	55                   	push   ebp
c00103bf:	e8 bc 03 ff ff       	call   c0000780 <strcmp>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	85 c0                	test   eax,eax
c00103c9:	74 cc                	je     c0010397 <CPU::detectFeatures()+0x379>
c00103cb:	51                   	push   ecx
c00103cc:	51                   	push   ecx
c00103cd:	68 c1 1a 02 c0       	push   0xc0021ac1
c00103d2:	55                   	push   ebp
c00103d3:	e8 a8 03 ff ff       	call   c0000780 <strcmp>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	85 c0                	test   eax,eax
c00103dd:	74 b8                	je     c0010397 <CPU::detectFeatures()+0x379>
c00103df:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00103e9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00103ee:	0f 86 be 00 00 00    	jbe    c00104b2 <CPU::detectFeatures()+0x494>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 80 00 00 00       	push   0x80
c00103fc:	e8 31 fb ff ff       	call   c000ff32 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010401:	83 e0 01             	and    eax,0x1
c0010404:	c1 e0 06             	shl    eax,0x6
c0010407:	89 c2                	mov    edx,eax
c0010409:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001040f:	83 e0 bf             	and    eax,0xffffffbf
c0010412:	09 d0                	or     eax,edx
c0010414:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001041a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010421:	e8 0c fb ff ff       	call   c000ff32 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010426:	83 e0 01             	and    eax,0x1
c0010429:	c1 e0 04             	shl    eax,0x4
c001042c:	89 c2                	mov    edx,eax
c001042e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010434:	83 e0 ef             	and    eax,0xffffffef
c0010437:	09 d0                	or     eax,edx
c0010439:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001043f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010446:	e8 e7 fa ff ff       	call   c000ff32 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001044b:	89 c2                	mov    edx,eax
c001044d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010453:	c1 e2 07             	shl    edx,0x7
c0010456:	83 e0 7f             	and    eax,0x7f
c0010459:	09 d0                	or     eax,edx
c001045b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010461:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010468:	e8 f3 fa ff ff       	call   c000ff60 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001046d:	83 e0 01             	and    eax,0x1
c0010470:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010477:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001047d:	83 e0 f7             	and    eax,0xfffffff7
c0010480:	09 d0                	or     eax,edx
c0010482:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010488:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001048f:	e8 cc fa ff ff       	call   c000ff60 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010494:	83 c4 10             	add    esp,0x10
c0010497:	83 e0 01             	and    eax,0x1
c001049a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104a1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104a7:	83 e0 fb             	and    eax,0xfffffffb
c00104aa:	09 d0                	or     eax,edx
c00104ac:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104b2:	83 ec 0c             	sub    esp,0xc
c00104b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104b9:	50                   	push   eax
c00104ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104be:	50                   	push   eax
c00104bf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00104c3:	57                   	push   edi
c00104c4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104c8:	56                   	push   esi
c00104c9:	6a 01                	push   0x1
c00104cb:	e8 82 f9 ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104d4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00104da:	89 c1                	mov    ecx,eax
c00104dc:	83 e1 0f             	and    ecx,0xf
c00104df:	83 e2 f0             	and    edx,0xfffffff0
c00104e2:	09 ca                	or     edx,ecx
c00104e4:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00104ea:	89 c2                	mov    edx,eax
c00104ec:	c1 ea 04             	shr    edx,0x4
c00104ef:	83 e2 0f             	and    edx,0xf
c00104f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00104f6:	89 d1                	mov    ecx,edx
c00104f8:	83 c4 20             	add    esp,0x20
c00104fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010501:	c1 e1 06             	shl    ecx,0x6
c0010504:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001050a:	09 ca                	or     edx,ecx
c001050c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010513:	89 c2                	mov    edx,eax
c0010515:	c1 ea 08             	shr    edx,0x8
c0010518:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001051e:	83 e2 0f             	and    edx,0xf
c0010521:	89 d5                	mov    ebp,edx
c0010523:	83 e5 03             	and    ebp,0x3
c0010526:	c1 e5 06             	shl    ebp,0x6
c0010529:	83 e1 3f             	and    ecx,0x3f
c001052c:	09 e9                	or     ecx,ebp
c001052e:	89 d5                	mov    ebp,edx
c0010530:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010536:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001053c:	c1 ed 02             	shr    ebp,0x2
c001053f:	83 e1 c0             	and    ecx,0xffffffc0
c0010542:	09 e9                	or     ecx,ebp
c0010544:	89 c5                	mov    ebp,eax
c0010546:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001054c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010552:	c1 ed 08             	shr    ebp,0x8
c0010555:	83 e5 30             	and    ebp,0x30
c0010558:	83 e1 cf             	and    ecx,0xffffffcf
c001055b:	09 e9                	or     ecx,ebp
c001055d:	83 fa 06             	cmp    edx,0x6
c0010560:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010566:	74 05                	je     c001056d <CPU::detectFeatures()+0x54f>
c0010568:	83 fa 0f             	cmp    edx,0xf
c001056b:	75 64                	jne    c00105d1 <CPU::detectFeatures()+0x5b3>
c001056d:	89 c1                	mov    ecx,eax
c001056f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010575:	c1 e9 10             	shr    ecx,0x10
c0010578:	c1 e1 04             	shl    ecx,0x4
c001057b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001057f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010585:	0f b6 c9             	movzx  ecx,cl
c0010588:	c1 e1 06             	shl    ecx,0x6
c001058b:	09 e9                	or     ecx,ebp
c001058d:	83 fa 0f             	cmp    edx,0xf
c0010590:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010597:	75 38                	jne    c00105d1 <CPU::detectFeatures()+0x5b3>
c0010599:	c1 e8 14             	shr    eax,0x14
c001059c:	83 c0 0f             	add    eax,0xf
c001059f:	0f b6 c0             	movzx  eax,al
c00105a2:	89 c2                	mov    edx,eax
c00105a4:	c1 e8 02             	shr    eax,0x2
c00105a7:	83 e2 03             	and    edx,0x3
c00105aa:	89 d1                	mov    ecx,edx
c00105ac:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00105b2:	c1 e1 06             	shl    ecx,0x6
c00105b5:	83 e2 3f             	and    edx,0x3f
c00105b8:	09 ca                	or     edx,ecx
c00105ba:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00105c0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00105c6:	83 e2 c0             	and    edx,0xffffffc0
c00105c9:	09 d0                	or     eax,edx
c00105cb:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00105d1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105d7:	83 ec 0c             	sub    esp,0xc
c00105da:	83 c8 07             	or     eax,0x7
c00105dd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105e3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e7:	50                   	push   eax
c00105e8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00105ec:	55                   	push   ebp
c00105ed:	57                   	push   edi
c00105ee:	56                   	push   esi
c00105ef:	68 00 00 00 80       	push   0x80000000
c00105f4:	e8 59 f8 ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105f9:	83 c4 20             	add    esp,0x20
c00105fc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010604:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010608:	76 1e                	jbe    c0010628 <CPU::detectFeatures()+0x60a>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	50                   	push   eax
c001060e:	55                   	push   ebp
c001060f:	57                   	push   edi
c0010610:	56                   	push   esi
c0010611:	68 01 00 00 80       	push   0x80000001
c0010616:	e8 37 f8 ff ff       	call   c000fe52 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001061b:	83 c4 20             	add    esp,0x20
c001061e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010628:	52                   	push   edx
c0010629:	52                   	push   edx
c001062a:	68 cd 1a 02 c0       	push   0xc0021acd
c001062f:	53                   	push   ebx
c0010630:	e8 29 c1 ff ff       	call   c000c75e <Device::setName(char const*)>
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	eb 69                	jmp    c00106a3 <CPU::detectFeatures()+0x685>
c001063a:	50                   	push   eax
c001063b:	50                   	push   eax
c001063c:	68 32 1a 02 c0       	push   0xc0021a32
c0010641:	55                   	push   ebp
c0010642:	e8 09 00 ff ff       	call   c0000650 <strcpy>
c0010647:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010651:	e8 6d fb fe ff       	call   c00001c3 <is486>
c0010656:	83 c4 10             	add    esp,0x10
c0010659:	85 c0                	test   eax,eax
c001065b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010661:	74 1f                	je     c0010682 <CPU::detectFeatures()+0x664>
c0010663:	83 c8 07             	or     eax,0x7
c0010666:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001066c:	0f 20 c0             	mov    eax,cr0
c001066f:	83 e0 14             	and    eax,0x14
c0010672:	83 f8 04             	cmp    eax,0x4
c0010675:	75 10                	jne    c0010687 <CPU::detectFeatures()+0x669>
c0010677:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001067d:	83 e0 fd             	and    eax,0xfffffffd
c0010680:	eb 1b                	jmp    c001069d <CPU::detectFeatures()+0x67f>
c0010682:	83 e0 f8             	and    eax,0xfffffff8
c0010685:	eb df                	jmp    c0010666 <CPU::detectFeatures()+0x648>
c0010687:	e8 12 fb fe ff       	call   c000019e <hasLegacyFPU>
c001068c:	83 e0 01             	and    eax,0x1
c001068f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010692:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010698:	83 e0 fd             	and    eax,0xfffffffd
c001069b:	09 d0                	or     eax,edx
c001069d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106a3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00106aa:	74 17                	je     c00106c3 <CPU::detectFeatures()+0x6a5>
c00106ac:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00106b2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00106b8:	83 c8 10             	or     eax,0x10
c00106bb:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00106c1:	eb 20                	jmp    c00106e3 <CPU::detectFeatures()+0x6c5>
c00106c3:	e8 d6 fa fe ff       	call   c000019e <hasLegacyFPU>
c00106c8:	83 e0 01             	and    eax,0x1
c00106cb:	8d 14 00             	lea    edx,[eax+eax*1]
c00106ce:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106d4:	83 e0 fd             	and    eax,0xfffffffd
c00106d7:	09 d0                	or     eax,edx
c00106d9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106df:	a8 02                	test   al,0x2
c00106e1:	75 c9                	jne    c00106ac <CPU::detectFeatures()+0x68e>
c00106e3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00106ea:	83 c4 2c             	add    esp,0x2c
c00106ed:	5b                   	pop    ebx
c00106ee:	5e                   	pop    esi
c00106ef:	5f                   	pop    edi
c00106f0:	5d                   	pop    ebp
c00106f1:	c3                   	ret    

c00106f2 <CPU::setupSMEP()>:
c00106f2:	0f 20 e0             	mov    eax,cr4
c00106f5:	0d 00 00 10 00       	or     eax,0x100000
c00106fa:	0f 22 e0             	mov    cr4,eax
c00106fd:	c3                   	ret    

c00106fe <CPU::setupUMIP()>:
c00106fe:	0f 20 e0             	mov    eax,cr4
c0010701:	80 cc 08             	or     ah,0x8
c0010704:	0f 22 e0             	mov    cr4,eax
c0010707:	c3                   	ret    

c0010708 <CPU::setupTSC()>:
c0010708:	0f 20 e0             	mov    eax,cr4
c001070b:	83 c8 04             	or     eax,0x4
c001070e:	0f 22 e0             	mov    cr4,eax
c0010711:	c3                   	ret    

c0010712 <CPU::setupLargePages()>:
c0010712:	0f 20 e0             	mov    eax,cr4
c0010715:	83 c8 10             	or     eax,0x10
c0010718:	0f 22 e0             	mov    cr4,eax
c001071b:	c3                   	ret    

c001071c <CPU::setupPAT()>:
c001071c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010721:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010728:	74 2c                	je     c0010756 <CPU::setupPAT()+0x3a>
c001072a:	53                   	push   ebx
c001072b:	83 ec 10             	sub    esp,0x10
c001072e:	68 77 02 00 00       	push   0x277
c0010733:	50                   	push   eax
c0010734:	e8 ab 69 ff ff       	call   c00070e4 <Computer::rdmsr(unsigned int)>
c0010739:	83 e2 f8             	and    edx,0xfffffff8
c001073c:	83 ca 01             	or     edx,0x1
c001073f:	52                   	push   edx
c0010740:	50                   	push   eax
c0010741:	68 77 02 00 00       	push   0x277
c0010746:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001074c:	e8 bf 69 ff ff       	call   c0007110 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010751:	83 c4 28             	add    esp,0x28
c0010754:	5b                   	pop    ebx
c0010755:	c3                   	ret    
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <CPU::setupMTRR()>:
c0010758:	c3                   	ret    
c0010759:	90                   	nop

c001075a <CPU::setupGlobalPages()>:
c001075a:	0f 20 e0             	mov    eax,cr4
c001075d:	0c 80                	or     al,0x80
c001075f:	0f 22 e0             	mov    cr4,eax
c0010762:	c3                   	ret    
c0010763:	90                   	nop

c0010764 <CPU::allowUsermodeDataAccess()>:
c0010764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010768:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001076f:	74 03                	je     c0010774 <CPU::allowUsermodeDataAccess()+0x10>
c0010771:	0f 01 cb             	stac   
c0010774:	c3                   	ret    
c0010775:	90                   	nop

c0010776 <CPU::prohibitUsermodeDataAccess()>:
c0010776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001077a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010781:	74 03                	je     c0010786 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010783:	0f 01 ca             	clac   
c0010786:	c3                   	ret    
c0010787:	90                   	nop

c0010788 <CPU::setupSMAP()>:
c0010788:	0f 20 e0             	mov    eax,cr4
c001078b:	0d 00 00 20 00       	or     eax,0x200000
c0010790:	0f 22 e0             	mov    cr4,eax
c0010793:	eb e1                	jmp    c0010776 <CPU::prohibitUsermodeDataAccess()>
c0010795:	90                   	nop

c0010796 <CPU::setupFeatures()>:
c0010796:	53                   	push   ebx
c0010797:	83 ec 08             	sub    esp,0x8
c001079a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001079e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00107a5:	74 18                	je     c00107bf <CPU::setupFeatures()+0x29>
c00107a7:	83 ec 0c             	sub    esp,0xc
c00107aa:	68 d9 1a 02 c0       	push   0xc0021ad9
c00107af:	e8 56 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107b7:	e8 42 ff ff ff       	call   c00106fe <CPU::setupUMIP()>
c00107bc:	83 c4 10             	add    esp,0x10
c00107bf:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00107c6:	74 18                	je     c00107e0 <CPU::setupFeatures()+0x4a>
c00107c8:	83 ec 0c             	sub    esp,0xc
c00107cb:	68 e3 1a 02 c0       	push   0xc0021ae3
c00107d0:	e8 35 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107d8:	e8 2b ff ff ff       	call   c0010708 <CPU::setupTSC()>
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00107e7:	74 18                	je     c0010801 <CPU::setupFeatures()+0x6b>
c00107e9:	83 ec 0c             	sub    esp,0xc
c00107ec:	68 ec 1a 02 c0       	push   0xc0021aec
c00107f1:	e8 14 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107f9:	e8 14 ff ff ff       	call   c0010712 <CPU::setupLargePages()>
c00107fe:	83 c4 10             	add    esp,0x10
c0010801:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010808:	74 18                	je     c0010822 <CPU::setupFeatures()+0x8c>
c001080a:	83 ec 0c             	sub    esp,0xc
c001080d:	68 f5 1a 02 c0       	push   0xc0021af5
c0010812:	e8 f3 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001081a:	e8 3b ff ff ff       	call   c001075a <CPU::setupGlobalPages()>
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010829:	74 18                	je     c0010843 <CPU::setupFeatures()+0xad>
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	68 07 1b 02 c0       	push   0xc0021b07
c0010833:	e8 d2 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010838:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001083b:	e8 dc fe ff ff       	call   c001071c <CPU::setupPAT()>
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001084a:	74 11                	je     c001085d <CPU::setupFeatures()+0xc7>
c001084c:	c7 44 24 10 10 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b10
c0010854:	83 c4 08             	add    esp,0x8
c0010857:	5b                   	pop    ebx
c0010858:	e9 ad a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c001085d:	83 c4 08             	add    esp,0x8
c0010860:	5b                   	pop    ebx
c0010861:	c3                   	ret    

c0010862 <CPU::open(int, int, void*)>:
c0010862:	55                   	push   ebp
c0010863:	57                   	push   edi
c0010864:	56                   	push   esi
c0010865:	53                   	push   ebx
c0010866:	83 ec 18             	sub    esp,0x18
c0010869:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001086d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010871:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010875:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001087b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010881:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010887:	50                   	push   eax
c0010888:	e8 53 6b ff ff       	call   c00073e0 <GDT::setup()>
c001088d:	83 c4 0c             	add    esp,0xc
c0010890:	6a 00                	push   0x0
c0010892:	68 ef be ad de       	push   0xdeadbeef
c0010897:	55                   	push   ebp
c0010898:	e8 d3 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c001089d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00108a0:	e8 ab 86 ff ff       	call   c0008f50 <TSS::flush()>
c00108a5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00108ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ae:	e8 8f 6d ff ff       	call   c0007642 <IDT::setup()>
c00108b3:	b8 00 04 00 00       	mov    eax,0x400
c00108b8:	0f 23 f8             	mov    db7,eax
c00108bb:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00108c5:	e8 18 75 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	85 f6                	test   esi,esi
c00108cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00108d5:	89 38                	mov    DWORD PTR [eax],edi
c00108d7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00108dd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00108e0:	74 10                	je     c00108f2 <CPU::open(int, int, void*)+0x90>
c00108e2:	50                   	push   eax
c00108e3:	50                   	push   eax
c00108e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00108ea:	56                   	push   esi
c00108eb:	e8 9c 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c00108f0:	eb 0d                	jmp    c00108ff <CPU::open(int, int, void*)+0x9d>
c00108f2:	83 ec 0c             	sub    esp,0xc
c00108f5:	68 1a 1b 02 c0       	push   0xc0021b1a
c00108fa:	e8 4e 08 00 00       	call   c001114d <KePanic(char const*)>
c00108ff:	83 c4 10             	add    esp,0x10
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	68 28 1b 02 c0       	push   0xc0021b28
c001090a:	e8 69 01 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c001090f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010912:	e8 07 f7 ff ff       	call   c001001e <CPU::detectFeatures()>
c0010917:	c7 04 24 4b 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b4b
c001091e:	e8 55 01 00 00       	call   c0010a78 <KeSetBootMessage(char const*)>
c0010923:	e8 e7 71 00 00       	call   c0017b0f <HalInitialise()>
c0010928:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c001092d:	83 e0 10             	and    eax,0x10
c0010930:	83 f8 01             	cmp    eax,0x1
c0010933:	19 c0                	sbb    eax,eax
c0010935:	83 e0 46             	and    eax,0x46
c0010938:	83 c0 1e             	add    eax,0x1e
c001093b:	89 04 24             	mov    DWORD PTR [esp],eax
c001093e:	e8 c2 d6 ff ff       	call   c000e005 <setupTimer(int)>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c001094d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010953:	74 0c                	je     c0010961 <CPU::open(int, int, void*)+0xff>
c0010955:	83 ec 0c             	sub    esp,0xc
c0010958:	53                   	push   ebx
c0010959:	e8 38 fe ff ff       	call   c0010796 <CPU::setupFeatures()>
c001095e:	83 c4 10             	add    esp,0x10
c0010961:	83 c4 0c             	add    esp,0xc
c0010964:	31 c0                	xor    eax,eax
c0010966:	5b                   	pop    ebx
c0010967:	5e                   	pop    esi
c0010968:	5f                   	pop    edi
c0010969:	5d                   	pop    ebp
c001096a:	c3                   	ret    

c001096b <KeInitialiseAtexit()>:
c001096b:	83 ec 10             	sub    esp,0x10
c001096e:	68 00 01 00 00       	push   0x100
c0010973:	6a 00                	push   0x0
c0010975:	68 20 9b 02 c0       	push   0xc0029b20
c001097a:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c0010984:	e8 67 fb fe ff       	call   c00004f0 <memset>
c0010989:	83 c4 1c             	add    esp,0x1c
c001098c:	c3                   	ret    

c001098d <KeRegisterAtexit(void (*)(void*), void*)>:
c001098d:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0010992:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010996:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c001099d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109a1:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c00109a8:	40                   	inc    eax
c00109a9:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c00109ae:	83 f8 3f             	cmp    eax,0x3f
c00109b1:	7e 0d                	jle    c00109c0 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c00109b3:	c7 44 24 04 8c 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8c
c00109bb:	e9 8d 07 00 00       	jmp    c001114d <KePanic(char const*)>
c00109c0:	c3                   	ret    

c00109c1 <KeExecuteAtexit()>:
c00109c1:	53                   	push   ebx
c00109c2:	31 db                	xor    ebx,ebx
c00109c4:	83 ec 08             	sub    esp,0x8
c00109c7:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c00109cd:	7e 28                	jle    c00109f7 <KeExecuteAtexit()+0x36>
c00109cf:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c00109d6:	85 c0                	test   eax,eax
c00109d8:	74 1a                	je     c00109f4 <KeExecuteAtexit()+0x33>
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c00109e4:	ff d0                	call   eax
c00109e6:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c00109f1:	83 c4 10             	add    esp,0x10
c00109f4:	43                   	inc    ebx
c00109f5:	eb d0                	jmp    c00109c7 <KeExecuteAtexit()+0x6>
c00109f7:	83 c4 08             	add    esp,0x8
c00109fa:	5b                   	pop    ebx
c00109fb:	c3                   	ret    

c00109fc <KeDisplaySplashScreen()>:
c00109fc:	55                   	push   ebp
c00109fd:	bd 05 00 00 00       	mov    ebp,0x5
c0010a02:	57                   	push   edi
c0010a03:	bf 0a 00 00 00       	mov    edi,0xa
c0010a08:	56                   	push   esi
c0010a09:	31 f6                	xor    esi,esi
c0010a0b:	53                   	push   ebx
c0010a0c:	31 db                	xor    ebx,ebx
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	0f b6 96 60 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd0a0]
c0010a18:	85 d2                	test   edx,edx
c0010a1a:	89 d0                	mov    eax,edx
c0010a1c:	74 52                	je     c0010a70 <KeDisplaySplashScreen()+0x74>
c0010a1e:	80 bb 96 2f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd06a],0xdb
c0010a25:	75 13                	jne    c0010a3a <KeDisplaySplashScreen()+0x3e>
c0010a27:	0f b6 8b 95 2f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd06b]
c0010a2e:	83 e1 fe             	and    ecx,0xfffffffe
c0010a31:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010a37:	75 01                	jne    c0010a3a <KeDisplaySplashScreen()+0x3e>
c0010a39:	47                   	inc    edi
c0010a3a:	83 fa 0d             	cmp    edx,0xd
c0010a3d:	74 28                	je     c0010a67 <KeDisplaySplashScreen()+0x6b>
c0010a3f:	83 fa 0a             	cmp    edx,0xa
c0010a42:	75 0a                	jne    c0010a4e <KeDisplaySplashScreen()+0x52>
c0010a44:	45                   	inc    ebp
c0010a45:	bf 0a 00 00 00       	mov    edi,0xa
c0010a4a:	31 db                	xor    ebx,ebx
c0010a4c:	eb 19                	jmp    c0010a67 <KeDisplaySplashScreen()+0x6b>
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	0f be c0             	movsx  eax,al
c0010a54:	55                   	push   ebp
c0010a55:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010a58:	43                   	inc    ebx
c0010a59:	52                   	push   edx
c0010a5a:	6a 00                	push   0x0
c0010a5c:	6a 0e                	push   0xe
c0010a5e:	50                   	push   eax
c0010a5f:	e8 28 7d 00 00       	call   c001878c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010a64:	83 c4 20             	add    esp,0x20
c0010a67:	46                   	inc    esi
c0010a68:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010a6e:	75 a1                	jne    c0010a11 <KeDisplaySplashScreen()+0x15>
c0010a70:	83 c4 0c             	add    esp,0xc
c0010a73:	5b                   	pop    ebx
c0010a74:	5e                   	pop    esi
c0010a75:	5f                   	pop    edi
c0010a76:	5d                   	pop    ebp
c0010a77:	c3                   	ret    

c0010a78 <KeSetBootMessage(char const*)>:
c0010a78:	57                   	push   edi
c0010a79:	56                   	push   esi
c0010a7a:	53                   	push   ebx
c0010a7b:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010a81:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010a88:	68 9e 00 00 00       	push   0x9e
c0010a8d:	6a 00                	push   0x0
c0010a8f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010a93:	56                   	push   esi
c0010a94:	e8 57 fa fe ff       	call   c00004f0 <memset>
c0010a99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a9c:	e8 df fa fe ff       	call   c0000580 <strlen>
c0010aa1:	ba 50 00 00 00       	mov    edx,0x50
c0010aa6:	83 c4 10             	add    esp,0x10
c0010aa9:	31 c9                	xor    ecx,ecx
c0010aab:	29 c2                	sub    edx,eax
c0010aad:	83 e2 fe             	and    edx,0xfffffffe
c0010ab0:	01 f2                	add    edx,esi
c0010ab2:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ab7:	84 c0                	test   al,al
c0010ab9:	74 0a                	je     c0010ac5 <KeSetBootMessage(char const*)+0x4d>
c0010abb:	80 cc 0f             	or     ah,0xf
c0010abe:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ac2:	41                   	inc    ecx
c0010ac3:	eb ed                	jmp    c0010ab2 <KeSetBootMessage(char const*)+0x3a>
c0010ac5:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010aca:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010acf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ad1:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	5f                   	pop    edi
c0010ada:	c3                   	ret    
c0010adb:	90                   	nop

c0010adc <Krnl::handlePowerButton()>:
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	e8 c4 06 00 00       	call   c00111a8 <KeHandlePowerButton()>
c0010ae4:	90                   	nop
c0010ae5:	83 c4 0c             	add    esp,0xc
c0010ae8:	c3                   	ret    
c0010ae9:	8d 76 00             	lea    esi,[esi+0x0]

c0010aec <Krnl::handleSleepButton()>:
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	e8 e9 06 00 00       	call   c00111dd <KeHandleSleepButton()>
c0010af4:	90                   	nop
c0010af5:	83 c4 0c             	add    esp,0xc
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <EnvVarContainer::getEnv(char const*)>:
c0010afa:	57                   	push   edi
c0010afb:	56                   	push   esi
c0010afc:	53                   	push   ebx
c0010afd:	31 db                	xor    ebx,ebx
c0010aff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b03:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b05:	7e 2b                	jle    c0010b32 <EnvVarContainer::getEnv(char const*)+0x38>
c0010b07:	50                   	push   eax
c0010b08:	50                   	push   eax
c0010b09:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b0c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b13:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010b16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b1a:	e8 61 fc fe ff       	call   c0000780 <strcmp>
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	85 c0                	test   eax,eax
c0010b24:	75 09                	jne    c0010b2f <EnvVarContainer::getEnv(char const*)+0x35>
c0010b26:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b29:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010b2d:	eb 05                	jmp    c0010b34 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010b2f:	43                   	inc    ebx
c0010b30:	eb d1                	jmp    c0010b03 <EnvVarContainer::getEnv(char const*)+0x9>
c0010b32:	31 c0                	xor    eax,eax
c0010b34:	5b                   	pop    ebx
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	c3                   	ret    

c0010b38 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010b38:	55                   	push   ebp
c0010b39:	57                   	push   edi
c0010b3a:	56                   	push   esi
c0010b3b:	53                   	push   ebx
c0010b3c:	83 ec 28             	sub    esp,0x28
c0010b3f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010b43:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010b47:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010b4b:	56                   	push   esi
c0010b4c:	e8 2f fa fe ff       	call   c0000580 <strlen>
c0010b51:	40                   	inc    eax
c0010b52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b55:	e8 79 6f ff ff       	call   c0007ad3 <malloc>
c0010b5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b61:	e8 1a fa fe ff       	call   c0000580 <strlen>
c0010b66:	40                   	inc    eax
c0010b67:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b6a:	e8 64 6f ff ff       	call   c0007ad3 <malloc>
c0010b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b76:	e8 05 fa fe ff       	call   c0000580 <strlen>
c0010b7b:	83 c4 0c             	add    esp,0xc
c0010b7e:	40                   	inc    eax
c0010b7f:	50                   	push   eax
c0010b80:	6a 00                	push   0x0
c0010b82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010b86:	e8 65 f9 fe ff       	call   c00004f0 <memset>
c0010b8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b8e:	e8 ed f9 fe ff       	call   c0000580 <strlen>
c0010b93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010b97:	8d 48 01             	lea    ecx,[eax+0x1]
c0010b9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b9f:	89 de                	mov    esi,ebx
c0010ba1:	e8 da f9 fe ff       	call   c0000580 <strlen>
c0010ba6:	83 c4 0c             	add    esp,0xc
c0010ba9:	40                   	inc    eax
c0010baa:	50                   	push   eax
c0010bab:	6a 00                	push   0x0
c0010bad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010bb1:	e8 3a f9 fe ff       	call   c00004f0 <memset>
c0010bb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb9:	e8 c2 f9 fe ff       	call   c0000580 <strlen>
c0010bbe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bc2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010bca:	40                   	inc    eax
c0010bcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010bce:	c1 e0 03             	shl    eax,0x3
c0010bd1:	5a                   	pop    edx
c0010bd2:	59                   	pop    ecx
c0010bd3:	50                   	push   eax
c0010bd4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010bd7:	e8 e3 6e ff ff       	call   c0007abf <realloc>
c0010bdc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010bdf:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010be3:	b9 08 00 00 00       	mov    ecx,0x8
c0010be8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010beb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010bef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bf1:	83 c4 2c             	add    esp,0x2c
c0010bf4:	5b                   	pop    ebx
c0010bf5:	5e                   	pop    esi
c0010bf6:	5f                   	pop    edi
c0010bf7:	5d                   	pop    ebp
c0010bf8:	c3                   	ret    
c0010bf9:	90                   	nop

c0010bfa <EnvVarContainer::deleteEnv(char const*)>:
c0010bfa:	c3                   	ret    
c0010bfb:	90                   	nop

c0010bfc <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010bfc:	55                   	push   ebp
c0010bfd:	57                   	push   edi
c0010bfe:	56                   	push   esi
c0010bff:	53                   	push   ebx
c0010c00:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c06:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c0d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010c14:	68 14 01 00 00       	push   0x114
c0010c19:	e8 b5 6e ff ff       	call   c0007ad3 <malloc>
c0010c1e:	83 c4 0c             	add    esp,0xc
c0010c21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010c24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010c2b:	89 c3                	mov    ebx,eax
c0010c2d:	50                   	push   eax
c0010c2e:	e8 93 aa ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0010c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c36:	e8 0b ae ff ff       	call   c000ba46 <File::exists()>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	84 c0                	test   al,al
c0010c40:	75 31                	jne    c0010c73 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010c42:	50                   	push   eax
c0010c43:	50                   	push   eax
c0010c44:	6a 12                	push   0x12
c0010c46:	53                   	push   ebx
c0010c47:	e8 36 ab ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0010c4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c4e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010c51:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c54:	e8 27 f9 fe ff       	call   c0000580 <strlen>
c0010c59:	5a                   	pop    edx
c0010c5a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010c5e:	52                   	push   edx
c0010c5f:	31 d2                	xor    edx,edx
c0010c61:	56                   	push   esi
c0010c62:	52                   	push   edx
c0010c63:	50                   	push   eax
c0010c64:	53                   	push   ebx
c0010c65:	ff d7                	call   edi
c0010c67:	83 c4 14             	add    esp,0x14
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 70 ab ff ff       	call   c000b7e0 <File::close()>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	56                   	push   esi
c0010c74:	31 f6                	xor    esi,esi
c0010c76:	68 00 01 00 00       	push   0x100
c0010c7b:	6a 00                	push   0x0
c0010c7d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010c81:	50                   	push   eax
c0010c82:	e8 69 f8 fe ff       	call   c00004f0 <memset>
c0010c87:	5f                   	pop    edi
c0010c88:	58                   	pop    eax
c0010c89:	6a 01                	push   0x1
c0010c8b:	53                   	push   ebx
c0010c8c:	e8 f1 aa ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0010c91:	83 c4 10             	add    esp,0x10
c0010c94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010c9c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ca4:	83 ec 0c             	sub    esp,0xc
c0010ca7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010cab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cad:	52                   	push   edx
c0010cae:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010cb2:	51                   	push   ecx
c0010cb3:	6a 00                	push   0x0
c0010cb5:	6a 01                	push   0x1
c0010cb7:	53                   	push   ebx
c0010cb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010cbb:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010cc0:	83 c4 20             	add    esp,0x20
c0010cc3:	85 c0                	test   eax,eax
c0010cc5:	89 c1                	mov    ecx,eax
c0010cc7:	0f 84 36 01 00 00    	je     c0010e03 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010ccd:	83 f8 0d             	cmp    eax,0xd
c0010cd0:	0f 84 22 01 00 00    	je     c0010df8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010cd6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010cdb:	0f 84 f0 00 00 00    	je     c0010dd1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010ce1:	83 f8 0a             	cmp    eax,0xa
c0010ce4:	74 13                	je     c0010cf9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ce6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ceb:	74 0c                	je     c0010cf9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ced:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010cf3:	0f 8e f6 00 00 00    	jle    c0010def <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010cf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cfd:	83 ec 0c             	sub    esp,0xc
c0010d00:	8d 78 01             	lea    edi,[eax+0x1]
c0010d03:	57                   	push   edi
c0010d04:	e8 ca 6d ff ff       	call   c0007ad3 <malloc>
c0010d09:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d0d:	8d 56 04             	lea    edx,[esi+0x4]
c0010d10:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d13:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010d1b:	e8 b3 6d ff ff       	call   c0007ad3 <malloc>
c0010d20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010d24:	83 c4 0c             	add    esp,0xc
c0010d27:	57                   	push   edi
c0010d28:	6a 00                	push   0x0
c0010d2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010d2e:	e8 bd f7 fe ff       	call   c00004f0 <memset>
c0010d33:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d37:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d3b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010d3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d41:	83 c4 0c             	add    esp,0xc
c0010d44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010d48:	52                   	push   edx
c0010d49:	6a 00                	push   0x0
c0010d4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d4f:	e8 9c f7 fe ff       	call   c00004f0 <memset>
c0010d54:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d58:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010d5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d5f:	e8 1c f8 fe ff       	call   c0000580 <strlen>
c0010d64:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010d68:	89 c1                	mov    ecx,eax
c0010d6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010d75:	40                   	inc    eax
c0010d76:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d79:	85 d2                	test   edx,edx
c0010d7b:	75 0c                	jne    c0010d89 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010d7d:	83 ec 0c             	sub    esp,0xc
c0010d80:	6a 08                	push   0x8
c0010d82:	e8 4c 6d ff ff       	call   c0007ad3 <malloc>
c0010d87:	eb 0c                	jmp    c0010d95 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010d89:	51                   	push   ecx
c0010d8a:	51                   	push   ecx
c0010d8b:	c1 e0 03             	shl    eax,0x3
c0010d8e:	50                   	push   eax
c0010d8f:	52                   	push   edx
c0010d90:	e8 2a 6d ff ff       	call   c0007abf <realloc>
c0010d95:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010da1:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010da5:	b9 08 00 00 00       	mov    ecx,0x8
c0010daa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010dae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010db0:	50                   	push   eax
c0010db1:	31 f6                	xor    esi,esi
c0010db3:	68 00 01 00 00       	push   0x100
c0010db8:	6a 00                	push   0x0
c0010dba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dbe:	50                   	push   eax
c0010dbf:	e8 2c f7 fe ff       	call   c00004f0 <memset>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010dcf:	eb 27                	jmp    c0010df8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010dd1:	83 f8 3d             	cmp    eax,0x3d
c0010dd4:	74 1e                	je     c0010df4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010dd6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010ddc:	7f 07                	jg     c0010de5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010dde:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010de2:	46                   	inc    esi
c0010de3:	eb 13                	jmp    c0010df8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010de5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010ded:	eb 09                	jmp    c0010df8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010def:	83 f8 3d             	cmp    eax,0x3d
c0010df2:	75 ea                	jne    c0010dde <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010df4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010df8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010dfd:	0f 85 99 fe ff ff    	jne    c0010c9c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e03:	83 ec 0c             	sub    esp,0xc
c0010e06:	53                   	push   ebx
c0010e07:	e8 d4 a9 ff ff       	call   c000b7e0 <File::close()>
c0010e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e14:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010e1a:	5b                   	pop    ebx
c0010e1b:	5e                   	pop    esi
c0010e1c:	5f                   	pop    edi
c0010e1d:	5d                   	pop    ebp
c0010e1e:	c3                   	ret    
c0010e1f:	90                   	nop

c0010e20 <EnvVarContainer::__loadSystem()>:
c0010e20:	83 ec 10             	sub    esp,0x10
c0010e23:	68 c0 30 02 c0       	push   0xc00230c0
c0010e28:	68 a5 1b 02 c0       	push   0xc0021ba5
c0010e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e31:	e8 c6 fd ff ff       	call   c0010bfc <EnvVarContainer::loadFrom(char const*, char const*)>
c0010e36:	83 c4 1c             	add    esp,0x1c
c0010e39:	c3                   	ret    

c0010e3a <EnvVarContainer::__loadUser()>:
c0010e3a:	c3                   	ret    
c0010e3b:	90                   	nop

c0010e3c <EnvVarContainer::EnvVarContainer(Process*)>:
c0010e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e5c:	90                   	nop
c0010e5d:	c3                   	ret    

c0010e5e <EnvVarContainer::~EnvVarContainer()>:
c0010e5e:	83 ec 0c             	sub    esp,0xc
c0010e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e68:	85 c0                	test   eax,eax
c0010e6a:	74 1d                	je     c0010e89 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e72:	85 c0                	test   eax,eax
c0010e74:	74 13                	je     c0010e89 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	50                   	push   eax
c0010e81:	e8 5d 6c ff ff       	call   c0007ae3 <free>
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	90                   	nop
c0010e8a:	83 c4 0c             	add    esp,0xc
c0010e8d:	c3                   	ret    

c0010e8e <KeGetEnv(Process*, char const*)>:
c0010e8e:	53                   	push   ebx
c0010e8f:	83 ec 08             	sub    esp,0x8
c0010e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e96:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010e9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ea0:	74 04                	je     c0010ea6 <KeGetEnv(Process*, char const*)+0x18>
c0010ea2:	85 c0                	test   eax,eax
c0010ea4:	75 0b                	jne    c0010eb1 <KeGetEnv(Process*, char const*)+0x23>
c0010ea6:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010eab:	85 c0                	test   eax,eax
c0010ead:	75 19                	jne    c0010ec8 <KeGetEnv(Process*, char const*)+0x3a>
c0010eaf:	eb 27                	jmp    c0010ed8 <KeGetEnv(Process*, char const*)+0x4a>
c0010eb1:	52                   	push   edx
c0010eb2:	52                   	push   edx
c0010eb3:	53                   	push   ebx
c0010eb4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010eba:	e8 3b fc ff ff       	call   c0010afa <EnvVarContainer::getEnv(char const*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	75 28                	jne    c0010eee <KeGetEnv(Process*, char const*)+0x60>
c0010ec6:	eb de                	jmp    c0010ea6 <KeGetEnv(Process*, char const*)+0x18>
c0010ec8:	52                   	push   edx
c0010ec9:	52                   	push   edx
c0010eca:	53                   	push   ebx
c0010ecb:	50                   	push   eax
c0010ecc:	e8 29 fc ff ff       	call   c0010afa <EnvVarContainer::getEnv(char const*)>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	85 c0                	test   eax,eax
c0010ed6:	75 16                	jne    c0010eee <KeGetEnv(Process*, char const*)+0x60>
c0010ed8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010edc:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010ee1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ee5:	83 c4 08             	add    esp,0x8
c0010ee8:	5b                   	pop    ebx
c0010ee9:	e9 0c fc ff ff       	jmp    c0010afa <EnvVarContainer::getEnv(char const*)>
c0010eee:	83 c4 08             	add    esp,0x8
c0010ef1:	5b                   	pop    ebx
c0010ef2:	c3                   	ret    

c0010ef3 <KeSetEnvSystem(char const*, char const*)>:
c0010ef3:	83 ec 10             	sub    esp,0x10
c0010ef6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010efa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010efe:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010f04:	e8 2f fc ff ff       	call   c0010b38 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f09:	83 c4 1c             	add    esp,0x1c
c0010f0c:	c3                   	ret    

c0010f0d <KeSetEnvUser(char const*, char const*)>:
c0010f0d:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f12:	85 c0                	test   eax,eax
c0010f14:	74 15                	je     c0010f2b <KeSetEnvUser(char const*, char const*)+0x1e>
c0010f16:	83 ec 10             	sub    esp,0x10
c0010f19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f21:	50                   	push   eax
c0010f22:	e8 11 fc ff ff       	call   c0010b38 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f27:	83 c4 1c             	add    esp,0x1c
c0010f2a:	c3                   	ret    
c0010f2b:	c3                   	ret    

c0010f2c <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f30:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f3a:	e9 f9 fb ff ff       	jmp    c0010b38 <EnvVarContainer::setEnv(char const*, char const*)>

c0010f3f <KeDeleteEnvSystem(char const*)>:
c0010f3f:	c3                   	ret    

c0010f40 <KeDeleteEnvUser(char const*)>:
c0010f40:	c3                   	ret    

c0010f41 <KeDeleteEnvProcess(Process*, char const*)>:
c0010f41:	c3                   	ret    

c0010f42 <KeNewProcessEnv(Process*)>:
c0010f42:	83 ec 28             	sub    esp,0x28
c0010f45:	6a 0c                	push   0xc
c0010f47:	e8 87 6b ff ff       	call   c0007ad3 <malloc>
c0010f4c:	5a                   	pop    edx
c0010f4d:	59                   	pop    ecx
c0010f4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f52:	50                   	push   eax
c0010f53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f57:	e8 e0 fe ff ff       	call   c0010e3c <EnvVarContainer::EnvVarContainer(Process*)>
c0010f5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f60:	83 c4 2c             	add    esp,0x2c
c0010f63:	c3                   	ret    

c0010f64 <KeCopyProcessEnv(Process*, Process*)>:
c0010f64:	57                   	push   edi
c0010f65:	56                   	push   esi
c0010f66:	53                   	push   ebx
c0010f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010f74:	6a 0c                	push   0xc
c0010f76:	e8 58 6b ff ff       	call   c0007ad3 <malloc>
c0010f7b:	89 c3                	mov    ebx,eax
c0010f7d:	58                   	pop    eax
c0010f7e:	5a                   	pop    edx
c0010f7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f83:	53                   	push   ebx
c0010f84:	e8 b3 fe ff ff       	call   c0010e3c <EnvVarContainer::EnvVarContainer(Process*)>
c0010f89:	8b 07                	mov    eax,DWORD PTR [edi]
c0010f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0010f8d:	c1 e0 03             	shl    eax,0x3
c0010f90:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f93:	e8 3b 6b ff ff       	call   c0007ad3 <malloc>
c0010f98:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010f9b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010f9d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010fa0:	89 c7                	mov    edi,eax
c0010fa2:	c1 e1 03             	shl    ecx,0x3
c0010fa5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fa7:	83 c4 10             	add    esp,0x10
c0010faa:	89 d8                	mov    eax,ebx
c0010fac:	5b                   	pop    ebx
c0010fad:	5e                   	pop    esi
c0010fae:	5f                   	pop    edi
c0010faf:	c3                   	ret    

c0010fb0 <KeLoadSystemEnv()>:
c0010fb0:	53                   	push   ebx
c0010fb1:	83 ec 14             	sub    esp,0x14
c0010fb4:	6a 0c                	push   0xc
c0010fb6:	e8 18 6b ff ff       	call   c0007ad3 <malloc>
c0010fbb:	89 c3                	mov    ebx,eax
c0010fbd:	58                   	pop    eax
c0010fbe:	5a                   	pop    edx
c0010fbf:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0010fc5:	53                   	push   ebx
c0010fc6:	e8 71 fe ff ff       	call   c0010e3c <EnvVarContainer::EnvVarContainer(Process*)>
c0010fcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fce:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0010fd4:	e8 47 fe ff ff       	call   c0010e20 <EnvVarContainer::__loadSystem()>
c0010fd9:	83 c4 18             	add    esp,0x18
c0010fdc:	5b                   	pop    ebx
c0010fdd:	c3                   	ret    

c0010fde <KeLoadUserEnv()>:
c0010fde:	53                   	push   ebx
c0010fdf:	83 ec 14             	sub    esp,0x14
c0010fe2:	6a 0c                	push   0xc
c0010fe4:	e8 ea 6a ff ff       	call   c0007ad3 <malloc>
c0010fe9:	89 c3                	mov    ebx,eax
c0010feb:	58                   	pop    eax
c0010fec:	5a                   	pop    edx
c0010fed:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0010ff3:	53                   	push   ebx
c0010ff4:	e8 43 fe ff ff       	call   c0010e3c <EnvVarContainer::EnvVarContainer(Process*)>
c0010ff9:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c0010fff:	83 c4 18             	add    esp,0x18
c0011002:	5b                   	pop    ebx
c0011003:	c3                   	ret    

c0011004 <KeFlushEnv()>:
c0011004:	c3                   	ret    

c0011005 <KeGetProcessTotalEnvCount(Process*)>:
c0011005:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011009:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c001100f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011015:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c001101a:	8b 00                	mov    eax,DWORD PTR [eax]
c001101c:	03 01                	add    eax,DWORD PTR [ecx]
c001101e:	85 d2                	test   edx,edx
c0011020:	74 02                	je     c0011024 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011022:	03 02                	add    eax,DWORD PTR [edx]
c0011024:	c3                   	ret    

c0011025 <KeGetProcessEnvPair(Process*, int)>:
c0011025:	57                   	push   edi
c0011026:	56                   	push   esi
c0011027:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c001102d:	53                   	push   ebx
c001102e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011032:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011036:	85 f6                	test   esi,esi
c0011038:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001103c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011042:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011044:	75 16                	jne    c001105c <KeGetProcessEnvPair(Process*, int)+0x37>
c0011046:	39 c2                	cmp    edx,eax
c0011048:	7c 16                	jl     c0011060 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001104a:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c0011050:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011052:	01 c6                	add    esi,eax
c0011054:	39 d6                	cmp    esi,edx
c0011056:	7e 3c                	jle    c0011094 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011058:	29 c2                	sub    edx,eax
c001105a:	eb 04                	jmp    c0011060 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001105c:	39 c2                	cmp    edx,eax
c001105e:	7d 05                	jge    c0011065 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011060:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011063:	eb 20                	jmp    c0011085 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011065:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011067:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001106a:	39 d1                	cmp    ecx,edx
c001106c:	7e 04                	jle    c0011072 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001106e:	29 c2                	sub    edx,eax
c0011070:	eb 10                	jmp    c0011082 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011072:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c0011078:	03 0e                	add    ecx,DWORD PTR [esi]
c001107a:	39 d1                	cmp    ecx,edx
c001107c:	7e 16                	jle    c0011094 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001107e:	29 c2                	sub    edx,eax
c0011080:	29 fa                	sub    edx,edi
c0011082:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011085:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011088:	8b 02                	mov    eax,DWORD PTR [edx]
c001108a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001108d:	89 03                	mov    DWORD PTR [ebx],eax
c001108f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011092:	eb 1d                	jmp    c00110b1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011094:	83 ec 0c             	sub    esp,0xc
c0011097:	68 c7 1b 02 c0       	push   0xc0021bc7
c001109c:	e8 ac 00 00 00       	call   c001114d <KePanic(char const*)>
c00110a1:	83 c4 10             	add    esp,0x10
c00110a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00110aa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00110b1:	89 d8                	mov    eax,ebx
c00110b3:	5b                   	pop    ebx
c00110b4:	5e                   	pop    esi
c00110b5:	5f                   	pop    edi
c00110b6:	c2 04 00             	ret    0x4

c00110b9 <CPU::current()>:
c00110b9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00110be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110c4:	c3                   	ret    

c00110c5 <operator new(unsigned long)>:
c00110c5:	e9 09 6a ff ff       	jmp    c0007ad3 <malloc>

c00110ca <operator delete(void*)>:
c00110ca:	e9 24 6a ff ff       	jmp    c0007af3 <rfree>

c00110cf <disableIRQs()>:
c00110cf:	fa                   	cli    
c00110d0:	c3                   	ret    

c00110d1 <enableIRQs()>:
c00110d1:	fb                   	sti    
c00110d2:	c3                   	ret    

c00110d3 <lockScheduler()>:
c00110d3:	fa                   	cli    
c00110d4:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00110da:	c3                   	ret    

c00110db <unlockScheduler()>:
c00110db:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00110e0:	48                   	dec    eax
c00110e1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00110e6:	75 01                	jne    c00110e9 <unlockScheduler()+0xe>
c00110e8:	fb                   	sti    
c00110e9:	c3                   	ret    

c00110ea <lockStuff()>:
c00110ea:	fa                   	cli    
c00110eb:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00110f1:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c00110f7:	c3                   	ret    

c00110f8 <unlockStuff()>:
c00110f8:	83 ec 0c             	sub    esp,0xc
c00110fb:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0011100:	48                   	dec    eax
c0011101:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0011106:	75 18                	jne    c0011120 <unlockStuff()+0x28>
c0011108:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c001110f:	74 0f                	je     c0011120 <unlockStuff()+0x28>
c0011111:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001111b:	e8 30 49 00 00       	call   c0015a50 <schedule()>
c0011120:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011125:	48                   	dec    eax
c0011126:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001112b:	75 01                	jne    c001112e <unlockStuff()+0x36>
c001112d:	fb                   	sti    
c001112e:	83 c4 0c             	add    esp,0xc
c0011131:	c3                   	ret    

c0011132 <Virt::getAKernelVAS()>:
c0011132:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011137:	c3                   	ret    

c0011138 <__not_memcpy>:
c0011138:	57                   	push   edi
c0011139:	56                   	push   esi
c001113a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011142:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011146:	89 c7                	mov    edi,eax
c0011148:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001114a:	5e                   	pop    esi
c001114b:	5f                   	pop    edi
c001114c:	c3                   	ret    

c001114d <KePanic(char const*)>:
c001114d:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c0011154:	e9 87 68 00 00       	jmp    c00179e0 <HalPanic(char const*)>

c0011159 <KePowerThread(void*)>:
c0011159:	83 ec 0c             	sub    esp,0xc
c001115c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011161:	48                   	dec    eax
c0011162:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011167:	75 01                	jne    c001116a <KePowerThread(void*)+0x11>
c0011169:	fb                   	sti    
c001116a:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011171:	83 ec 0c             	sub    esp,0xc
c0011174:	6a 0a                	push   0xa
c0011176:	e8 05 4c 00 00       	call   c0015d80 <sleep(unsigned int)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c0011185:	eb e3                	jmp    c001116a <KePowerThread(void*)+0x11>

c0011187 <KeChangePowerSettings(PowerSettings)>:
c0011187:	57                   	push   edi
c0011188:	b9 09 00 00 00       	mov    ecx,0x9
c001118d:	56                   	push   esi
c001118e:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c0011193:	fc                   	cld    
c0011194:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011198:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001119a:	5e                   	pop    esi
c001119b:	5f                   	pop    edi
c001119c:	c3                   	ret    

c001119d <KeUserIOReceived()>:
c001119d:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00111a7:	c3                   	ret    

c00111a8 <KeHandlePowerButton()>:
c00111a8:	83 ec 0c             	sub    esp,0xc
c00111ab:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c00111b0:	83 f8 02             	cmp    eax,0x2
c00111b3:	75 10                	jne    c00111c5 <KeHandlePowerButton()+0x1d>
c00111b5:	83 ec 0c             	sub    esp,0xc
c00111b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111be:	e8 89 5f ff ff       	call   c000714c <Computer::shutdown()>
c00111c3:	eb 11                	jmp    c00111d6 <KeHandlePowerButton()+0x2e>
c00111c5:	48                   	dec    eax
c00111c6:	75 11                	jne    c00111d9 <KeHandlePowerButton()+0x31>
c00111c8:	83 ec 0c             	sub    esp,0xc
c00111cb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111d1:	e8 a6 5f ff ff       	call   c000717c <Computer::sleep()>
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	83 c4 0c             	add    esp,0xc
c00111dc:	c3                   	ret    

c00111dd <KeHandleSleepButton()>:
c00111dd:	83 ec 0c             	sub    esp,0xc
c00111e0:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c00111e5:	83 f8 02             	cmp    eax,0x2
c00111e8:	75 10                	jne    c00111fa <KeHandleSleepButton()+0x1d>
c00111ea:	83 ec 0c             	sub    esp,0xc
c00111ed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111f3:	e8 54 5f ff ff       	call   c000714c <Computer::shutdown()>
c00111f8:	eb 11                	jmp    c001120b <KeHandleSleepButton()+0x2e>
c00111fa:	48                   	dec    eax
c00111fb:	75 11                	jne    c001120e <KeHandleSleepButton()+0x31>
c00111fd:	83 ec 0c             	sub    esp,0xc
c0011200:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011206:	e8 71 5f ff ff       	call   c000717c <Computer::sleep()>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	83 c4 0c             	add    esp,0xc
c0011211:	c3                   	ret    

c0011212 <KeSetupPowerManager()>:
c0011212:	83 ec 0c             	sub    esp,0xc
c0011215:	68 f0 00 00 00       	push   0xf0
c001121a:	6a 00                	push   0x0
c001121c:	68 59 11 01 c0       	push   0xc0011159
c0011221:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011227:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011231:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011238:	e8 c7 45 00 00       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c001123d:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c0011247:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c0011251:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c001125b:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011265:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c001126f:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c0011279:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c0011283:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c001128d:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c0011297:	83 c4 1c             	add    esp,0x1c
c001129a:	c3                   	ret    

c001129b <KeRand()>:
c001129b:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c00112a5:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c00112af:	53                   	push   ebx
c00112b0:	01 c1                	add    ecx,eax
c00112b2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00112b7:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c00112bd:	01 ca                	add    edx,ecx
c00112bf:	05 ef 04 b5 00       	add    eax,0xb504ef
c00112c4:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00112c9:	83 d2 00             	adc    edx,0x0
c00112cc:	0f b7 da             	movzx  ebx,dx
c00112cf:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c00112d5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00112d9:	5b                   	pop    ebx
c00112da:	c3                   	ret    

c00112db <KeSeedRand(unsigned int)>:
c00112db:	53                   	push   ebx
c00112dc:	83 ec 08             	sub    esp,0x8
c00112df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112e3:	e8 17 6a 00 00       	call   c0017cff <HalGetRand()>
c00112e8:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c00112f2:	31 d8                	xor    eax,ebx
c00112f4:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00112f9:	e8 9d ff ff ff       	call   c001129b <KeRand()>
c00112fe:	83 c4 08             	add    esp,0x8
c0011301:	5b                   	pop    ebx
c0011302:	eb 97                	jmp    c001129b <KeRand()>

c0011304 <KeInitRand()>:
c0011304:	83 ec 0c             	sub    esp,0xc
c0011307:	e8 e8 67 00 00       	call   c0017af4 <HalQueryPerformanceCounter()>
c001130c:	0f 20 da             	mov    edx,cr3
c001130f:	0f 22 da             	mov    cr3,edx
c0011312:	0f 20 da             	mov    edx,cr3
c0011315:	0f 22 da             	mov    cr3,edx
c0011318:	0f 20 da             	mov    edx,cr3
c001131b:	0f 22 da             	mov    cr3,edx
c001131e:	0f 20 da             	mov    edx,cr3
c0011321:	0f 22 da             	mov    cr3,edx
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	35 03 8a 95 38       	xor    eax,0x38958a03
c001132c:	50                   	push   eax
c001132d:	e8 a9 ff ff ff       	call   c00112db <KeSeedRand(unsigned int)>
c0011332:	83 c4 1c             	add    esp,0x1c
c0011335:	c3                   	ret    
c0011336:	66 90                	xchg   ax,ax

c0011338 <KeResolveCompatibilitySymbol(char*)>:
c0011338:	83 ec 0c             	sub    esp,0xc
c001133b:	83 ec 08             	sub    esp,0x8
c001133e:	68 e1 1b 02 c0       	push   0xc0021be1
c0011343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011347:	e8 34 f4 fe ff       	call   c0000780 <strcmp>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	85 c0                	test   eax,eax
c0011351:	0f 94 c0             	sete   al
c0011354:	0f b6 c0             	movzx  eax,al
c0011357:	85 c0                	test   eax,eax
c0011359:	74 0d                	je     c0011368 <KeResolveCompatibilitySymbol(char*)+0x30>
c001135b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011360:	e9 8b 01 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011365:	8d 76 00             	lea    esi,[esi+0x0]
c0011368:	83 ec 08             	sub    esp,0x8
c001136b:	68 ea 1b 02 c0       	push   0xc0021bea
c0011370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011374:	e8 07 f4 fe ff       	call   c0000780 <strcmp>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	85 c0                	test   eax,eax
c001137e:	0f 94 c0             	sete   al
c0011381:	0f b6 c0             	movzx  eax,al
c0011384:	85 c0                	test   eax,eax
c0011386:	74 0c                	je     c0011394 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011388:	b8 10 f1 01 c0       	mov    eax,0xc001f110
c001138d:	e9 5e 01 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011392:	66 90                	xchg   ax,ax
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	68 f4 1b 02 c0       	push   0xc0021bf4
c001139c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a0:	e8 db f3 fe ff       	call   c0000780 <strcmp>
c00113a5:	83 c4 10             	add    esp,0x10
c00113a8:	85 c0                	test   eax,eax
c00113aa:	0f 94 c0             	sete   al
c00113ad:	0f b6 c0             	movzx  eax,al
c00113b0:	85 c0                	test   eax,eax
c00113b2:	74 0c                	je     c00113c0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00113b4:	b8 44 ee 01 c0       	mov    eax,0xc001ee44
c00113b9:	e9 32 01 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113be:	66 90                	xchg   ax,ax
c00113c0:	83 ec 08             	sub    esp,0x8
c00113c3:	68 fd 1b 02 c0       	push   0xc0021bfd
c00113c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cc:	e8 af f3 fe ff       	call   c0000780 <strcmp>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	85 c0                	test   eax,eax
c00113d6:	0f 94 c0             	sete   al
c00113d9:	0f b6 c0             	movzx  eax,al
c00113dc:	85 c0                	test   eax,eax
c00113de:	74 0c                	je     c00113ec <KeResolveCompatibilitySymbol(char*)+0xb4>
c00113e0:	b8 4d 11 01 c0       	mov    eax,0xc001114d
c00113e5:	e9 06 01 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113ea:	66 90                	xchg   ax,ax
c00113ec:	83 ec 08             	sub    esp,0x8
c00113ef:	68 10 1c 02 c0       	push   0xc0021c10
c00113f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f8:	e8 83 f3 fe ff       	call   c0000780 <strcmp>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	85 c0                	test   eax,eax
c0011402:	0f 94 c0             	sete   al
c0011405:	0f b6 c0             	movzx  eax,al
c0011408:	85 c0                	test   eax,eax
c001140a:	74 0c                	je     c0011418 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001140c:	b8 78 0a 01 c0       	mov    eax,0xc0010a78
c0011411:	e9 da 00 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011416:	66 90                	xchg   ax,ax
c0011418:	83 ec 08             	sub    esp,0x8
c001141b:	68 2d 1c 02 c0       	push   0xc0021c2d
c0011420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011424:	e8 57 f3 fe ff       	call   c0000780 <strcmp>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	85 c0                	test   eax,eax
c001142e:	0f 94 c0             	sete   al
c0011431:	0f b6 c0             	movzx  eax,al
c0011434:	85 c0                	test   eax,eax
c0011436:	74 0c                	je     c0011444 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011438:	b8 10 f2 01 c0       	mov    eax,0xc001f210
c001143d:	e9 ae 00 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011442:	66 90                	xchg   ax,ax
c0011444:	83 ec 08             	sub    esp,0x8
c0011447:	68 37 1c 02 c0       	push   0xc0021c37
c001144c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011450:	e8 2b f3 fe ff       	call   c0000780 <strcmp>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	85 c0                	test   eax,eax
c001145a:	0f 94 c0             	sete   al
c001145d:	0f b6 c0             	movzx  eax,al
c0011460:	85 c0                	test   eax,eax
c0011462:	74 0c                	je     c0011470 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011464:	b8 90 ef 01 c0       	mov    eax,0xc001ef90
c0011469:	e9 82 00 00 00       	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001146e:	66 90                	xchg   ax,ax
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	68 40 1c 02 c0       	push   0xc0021c40
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	e8 ff f2 fe ff       	call   c0000780 <strcmp>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	85 c0                	test   eax,eax
c0011486:	0f 94 c0             	sete   al
c0011489:	0f b6 c0             	movzx  eax,al
c001148c:	85 c0                	test   eax,eax
c001148e:	74 08                	je     c0011498 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011490:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011495:	eb 59                	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011497:	90                   	nop
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	68 58 1c 02 c0       	push   0xc0021c58
c00114a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a4:	e8 d7 f2 fe ff       	call   c0000780 <strcmp>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	85 c0                	test   eax,eax
c00114ae:	0f 94 c0             	sete   al
c00114b1:	0f b6 c0             	movzx  eax,al
c00114b4:	85 c0                	test   eax,eax
c00114b6:	74 08                	je     c00114c0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00114b8:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114bd:	eb 31                	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114bf:	90                   	nop
c00114c0:	83 ec 08             	sub    esp,0x8
c00114c3:	68 65 1c 02 c0       	push   0xc0021c65
c00114c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cc:	e8 af f2 fe ff       	call   c0000780 <strcmp>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	85 c0                	test   eax,eax
c00114d6:	0f 94 c0             	sete   al
c00114d9:	0f b6 c0             	movzx  eax,al
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 08                	je     c00114e8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00114e0:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00114e5:	eb 09                	jmp    c00114f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114e7:	90                   	nop
c00114e8:	b8 00 00 00 00       	mov    eax,0x0
c00114ed:	8d 76 00             	lea    esi,[esi+0x0]
c00114f0:	83 c4 0c             	add    esp,0xc
c00114f3:	c3                   	ret    

c00114f4 <KiSigKill(int)>:
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	6a 00                	push   0x0
c00114f9:	6a 00                	push   0x0
c00114fb:	6a ff                	push   0xffffffff
c00114fd:	6a 01                	push   0x1
c00114ff:	e8 4e 2b 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011504:	83 c4 1c             	add    esp,0x1c
c0011507:	c3                   	ret    

c0011508 <KiDefaultSignalHandlerIgnore(int)>:
c0011508:	c3                   	ret    

c0011509 <KiDefaultSignalHandlerPause(int)>:
c0011509:	57                   	push   edi
c001150a:	b9 07 00 00 00       	mov    ecx,0x7
c001150f:	56                   	push   esi
c0011510:	be ae 1c 02 c0       	mov    esi,0xc0021cae
c0011515:	83 ec 24             	sub    esp,0x24
c0011518:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001151c:	fc                   	cld    
c001151d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001151f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011523:	50                   	push   eax
c0011524:	6a 00                	push   0x0
c0011526:	6a 00                	push   0x0
c0011528:	6a 27                	push   0x27
c001152a:	e8 23 2b 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001152f:	83 c4 34             	add    esp,0x34
c0011532:	5e                   	pop    esi
c0011533:	5f                   	pop    edi
c0011534:	c3                   	ret    

c0011535 <KiDefaultSignalHandlerResume(int)>:
c0011535:	57                   	push   edi
c0011536:	b9 1d 00 00 00       	mov    ecx,0x1d
c001153b:	56                   	push   esi
c001153c:	be ca 1c 02 c0       	mov    esi,0xc0021cca
c0011541:	83 ec 24             	sub    esp,0x24
c0011544:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011548:	fc                   	cld    
c0011549:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001154b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001154f:	50                   	push   eax
c0011550:	6a 00                	push   0x0
c0011552:	6a 00                	push   0x0
c0011554:	6a 27                	push   0x27
c0011556:	e8 f7 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001155b:	83 c4 34             	add    esp,0x34
c001155e:	5e                   	pop    esi
c001155f:	5f                   	pop    edi
c0011560:	c3                   	ret    

c0011561 <KeDeinitSignals(SigHandlerBlock*)>:
c0011561:	e9 7d 65 ff ff       	jmp    c0007ae3 <free>

c0011566 <KeInitSignals()>:
c0011566:	53                   	push   ebx
c0011567:	83 ec 14             	sub    esp,0x14
c001156a:	68 c8 00 00 00       	push   0xc8
c001156f:	e8 5f 65 ff ff       	call   c0007ad3 <malloc>
c0011574:	83 c4 0c             	add    esp,0xc
c0011577:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011581:	89 c3                	mov    ebx,eax
c0011583:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001158d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011593:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011597:	6a 20                	push   0x20
c0011599:	6a 00                	push   0x0
c001159b:	50                   	push   eax
c001159c:	e8 4f ef fe ff       	call   c00004f0 <memset>
c00115a1:	83 c4 0c             	add    esp,0xc
c00115a4:	6a 44                	push   0x44
c00115a6:	6a 00                	push   0x0
c00115a8:	53                   	push   ebx
c00115a9:	e8 42 ef fe ff       	call   c00004f0 <memset>
c00115ae:	83 c4 18             	add    esp,0x18
c00115b1:	89 d8                	mov    eax,ebx
c00115b3:	5b                   	pop    ebx
c00115b4:	c3                   	ret    

c00115b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00115b5:	53                   	push   ebx
c00115b6:	b8 01 00 00 00       	mov    eax,0x1
c00115bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115c3:	83 f9 10             	cmp    ecx,0x10
c00115c6:	7f 21                	jg     c00115e9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00115c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115cc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00115cf:	89 03                	mov    DWORD PTR [ebx],eax
c00115d1:	b8 01 00 00 00       	mov    eax,0x1
c00115d6:	d3 e0                	shl    eax,cl
c00115d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00115dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00115df:	31 c0                	xor    eax,eax
c00115e1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00115e9:	5b                   	pop    ebx
c00115ea:	c3                   	ret    

c00115eb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00115eb:	55                   	push   ebp
c00115ec:	57                   	push   edi
c00115ed:	bf 08 00 00 00       	mov    edi,0x8
c00115f2:	56                   	push   esi
c00115f3:	53                   	push   ebx
c00115f4:	83 ec 18             	sub    esp,0x18
c00115f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115fb:	68 e7 1c 02 c0       	push   0xc0021ce7
c0011600:	e8 05 93 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	31 c9                	xor    ecx,ecx
c001160a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011611:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011617:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001161b:	99                   	cdq    
c001161c:	f7 ff                	idiv   edi
c001161e:	8d 42 24             	lea    eax,[edx+0x24]
c0011621:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011625:	85 f6                	test   esi,esi
c0011627:	75 1a                	jne    c0011643 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011629:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001162d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011631:	50                   	push   eax
c0011632:	50                   	push   eax
c0011633:	52                   	push   edx
c0011634:	68 f8 1c 02 c0       	push   0xc0021cf8
c0011639:	e8 cc 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001163e:	83 c4 10             	add    esp,0x10
c0011641:	eb 1b                	jmp    c001165e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011643:	41                   	inc    ecx
c0011644:	83 f9 08             	cmp    ecx,0x8
c0011647:	75 ce                	jne    c0011617 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011649:	83 ec 0c             	sub    esp,0xc
c001164c:	be 01 00 00 00       	mov    esi,0x1
c0011651:	68 19 1d 02 c0       	push   0xc0021d19
c0011656:	e8 af 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	83 c4 0c             	add    esp,0xc
c0011661:	89 f0                	mov    eax,esi
c0011663:	5b                   	pop    ebx
c0011664:	5e                   	pop    esi
c0011665:	5f                   	pop    edi
c0011666:	5d                   	pop    ebp
c0011667:	c3                   	ret    

c0011668 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011668:	55                   	push   ebp
c0011669:	57                   	push   edi
c001166a:	56                   	push   esi
c001166b:	53                   	push   ebx
c001166c:	51                   	push   ecx
c001166d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011671:	85 db                	test   ebx,ebx
c0011673:	0f 84 bc 00 00 00    	je     c0011735 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011679:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011680:	0f 84 af 00 00 00    	je     c0011735 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011686:	31 c9                	xor    ecx,ecx
c0011688:	bf 08 00 00 00       	mov    edi,0x8
c001168d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011693:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011696:	99                   	cdq    
c0011697:	f7 ff                	idiv   edi
c0011699:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00116a0:	85 ed                	test   ebp,ebp
c00116a2:	0f 84 9e 00 00 00    	je     c0011746 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00116a8:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00116ae:	89 e9                	mov    ecx,ebp
c00116b0:	bf 01 00 00 00       	mov    edi,0x1
c00116b5:	d3 e7                	shl    edi,cl
c00116b7:	31 c9                	xor    ecx,ecx
c00116b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00116bc:	b8 01 00 00 00       	mov    eax,0x1
c00116c1:	d3 e0                	shl    eax,cl
c00116c3:	85 04 24             	test   DWORD PTR [esp],eax
c00116c6:	74 06                	je     c00116ce <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00116c8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00116cc:	75 67                	jne    c0011735 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116ce:	41                   	inc    ecx
c00116cf:	83 f9 11             	cmp    ecx,0x11
c00116d2:	75 e8                	jne    c00116bc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00116d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116d7:	46                   	inc    esi
c00116d8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00116de:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00116e9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00116f0:	09 f8                	or     eax,edi
c00116f2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00116f8:	31 c0                	xor    eax,eax
c00116fa:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011702:	74 09                	je     c001170d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011704:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001170b:	eb 06                	jmp    c0011713 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001170d:	40                   	inc    eax
c001170e:	83 f8 08             	cmp    eax,0x8
c0011711:	75 e7                	jne    c00116fa <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011713:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011717:	83 fd 09             	cmp    ebp,0x9
c001171a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001171d:	89 2a                	mov    DWORD PTR [edx],ebp
c001171f:	75 07                	jne    c0011728 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011721:	b8 f4 14 01 c0       	mov    eax,0xc00114f4
c0011726:	eb 31                	jmp    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011728:	83 f8 01             	cmp    eax,0x1
c001172b:	75 0c                	jne    c0011739 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001172d:	f7 d7                	not    edi
c001172f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011735:	31 c0                	xor    eax,eax
c0011737:	eb 20                	jmp    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011739:	85 c0                	test   eax,eax
c001173b:	75 1c                	jne    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001173d:	8b 04 ad 20 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcee0]
c0011744:	eb 13                	jmp    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011746:	41                   	inc    ecx
c0011747:	46                   	inc    esi
c0011748:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001174e:	83 f9 08             	cmp    ecx,0x8
c0011751:	0f 85 36 ff ff ff    	jne    c001168d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011757:	eb dc                	jmp    c0011735 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011759:	5a                   	pop    edx
c001175a:	5b                   	pop    ebx
c001175b:	5e                   	pop    esi
c001175c:	5f                   	pop    edi
c001175d:	5d                   	pop    ebp
c001175e:	c3                   	ret    

c001175f <KiCheckSignalZ>:
c001175f:	83 ec 10             	sub    esp,0x10
c0011762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011766:	50                   	push   eax
c0011767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001176c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001176f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011775:	e8 ee fe ff ff       	call   c0011668 <KeCheckSignal(SigHandlerBlock*, int*)>
c001177a:	5a                   	pop    edx
c001177b:	31 d2                	xor    edx,edx
c001177d:	59                   	pop    ecx
c001177e:	85 c0                	test   eax,eax
c0011780:	74 19                	je     c001179b <KiCheckSignalZ+0x3c>
c0011782:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011788:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001178b:	89 02                	mov    DWORD PTR [edx],eax
c001178d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011798:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001179b:	89 d0                	mov    eax,edx
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c3                   	ret    

c00117a1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00117a1:	56                   	push   esi
c00117a2:	53                   	push   ebx
c00117a3:	bb 01 00 00 00       	mov    ebx,0x1
c00117a8:	52                   	push   edx
c00117a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00117ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117b1:	d3 e3                	shl    ebx,cl
c00117b3:	83 f9 10             	cmp    ecx,0x10
c00117b6:	7f 08                	jg     c00117c0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00117b8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00117be:	75 10                	jne    c00117d0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00117c0:	83 ec 0c             	sub    esp,0xc
c00117c3:	68 2a 1d 02 c0       	push   0xc0021d2a
c00117c8:	e8 80 f9 ff ff       	call   c001114d <KePanic(char const*)>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	f7 d3                	not    ebx
c00117d2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00117d8:	58                   	pop    eax
c00117d9:	5b                   	pop    ebx
c00117da:	5e                   	pop    esi
c00117db:	c3                   	ret    

c00117dc <KiFinishSignalZ>:
c00117dc:	53                   	push   ebx
c00117dd:	83 ec 10             	sub    esp,0x10
c00117e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117e4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00117e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117ef:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00117f5:	e8 a7 ff ff ff       	call   c00117a1 <KeCompleteSignal(SigHandlerBlock*, int)>
c00117fa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011800:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011807:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001180e:	83 c4 18             	add    esp,0x18
c0011811:	5b                   	pop    ebx
c0011812:	c3                   	ret    

c0011813 <SysSeekDir(regs*)>:
c0011813:	31 c0                	xor    eax,eax
c0011815:	31 d2                	xor    edx,edx
c0011817:	c3                   	ret    

c0011818 <SysTellDir(regs*)>:
c0011818:	31 c0                	xor    eax,eax
c001181a:	31 d2                	xor    edx,edx
c001181c:	c3                   	ret    

c001181d <SysVerify(regs*)>:
c001181d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011821:	31 d2                	xor    edx,edx
c0011823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011826:	c3                   	ret    

c0011827 <SysGetArgc(regs*)>:
c0011827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001182c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001182f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011835:	89 c2                	mov    edx,eax
c0011837:	c1 fa 1f             	sar    edx,0x1f
c001183a:	c3                   	ret    

c001183b <SysTTYName(regs*)>:
c001183b:	b8 01 00 00 00       	mov    eax,0x1
c0011840:	31 d2                	xor    edx,edx
c0011842:	c3                   	ret    

c0011843 <SysFormatDisk(regs*)>:
c0011843:	56                   	push   esi
c0011844:	53                   	push   ebx
c0011845:	83 ec 04             	sub    esp,0x4
c0011848:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001184c:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c0011852:	eb 2a                	jmp    c001187e <SysFormatDisk(regs*)+0x3b>
c0011854:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001185d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001185f:	51                   	push   ecx
c0011860:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011863:	51                   	push   ecx
c0011864:	50                   	push   eax
c0011865:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001186c:	50                   	push   eax
c001186d:	53                   	push   ebx
c001186e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011871:	83 c4 20             	add    esp,0x20
c0011874:	83 f8 08             	cmp    eax,0x8
c0011877:	89 c1                	mov    ecx,eax
c0011879:	75 14                	jne    c001188f <SysFormatDisk(regs*)+0x4c>
c001187b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001187e:	85 db                	test   ebx,ebx
c0011880:	75 d2                	jne    c0011854 <SysFormatDisk(regs*)+0x11>
c0011882:	b8 03 00 00 00       	mov    eax,0x3
c0011887:	31 d2                	xor    edx,edx
c0011889:	83 c4 04             	add    esp,0x4
c001188c:	5b                   	pop    ebx
c001188d:	5e                   	pop    esi
c001188e:	c3                   	ret    
c001188f:	85 c0                	test   eax,eax
c0011891:	74 13                	je     c00118a6 <SysFormatDisk(regs*)+0x63>
c0011893:	31 d2                	xor    edx,edx
c0011895:	83 f9 09             	cmp    ecx,0x9
c0011898:	b8 01 00 00 00       	mov    eax,0x1
c001189d:	74 ea                	je     c0011889 <SysFormatDisk(regs*)+0x46>
c001189f:	b8 02 00 00 00       	mov    eax,0x2
c00118a4:	eb e1                	jmp    c0011887 <SysFormatDisk(regs*)+0x44>
c00118a6:	31 c0                	xor    eax,eax
c00118a8:	eb dd                	jmp    c0011887 <SysFormatDisk(regs*)+0x44>

c00118aa <SysSetDiskVolumeLabel(regs*)>:
c00118aa:	56                   	push   esi
c00118ab:	53                   	push   ebx
c00118ac:	83 ec 04             	sub    esp,0x4
c00118af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00118b6:	83 f8 19             	cmp    eax,0x19
c00118b9:	77 33                	ja     c00118ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00118bb:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00118c2:	85 c9                	test   ecx,ecx
c00118c4:	74 28                	je     c00118ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00118c6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00118c9:	85 db                	test   ebx,ebx
c00118cb:	74 21                	je     c00118ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00118cd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00118d3:	85 d2                	test   edx,edx
c00118d5:	74 17                	je     c00118ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00118d7:	8b 32                	mov    esi,DWORD PTR [edx]
c00118d9:	53                   	push   ebx
c00118da:	50                   	push   eax
c00118db:	51                   	push   ecx
c00118dc:	52                   	push   edx
c00118dd:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	83 c4 04             	add    esp,0x4
c00118e6:	5b                   	pop    ebx
c00118e7:	5e                   	pop    esi
c00118e8:	89 c2                	mov    edx,eax
c00118ea:	c1 fa 1f             	sar    edx,0x1f
c00118ed:	c3                   	ret    
c00118ee:	83 c4 04             	add    esp,0x4
c00118f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00118f6:	5b                   	pop    ebx
c00118f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118fc:	5e                   	pop    esi
c00118fd:	c3                   	ret    

c00118fe <SysGetDiskVolumeLabel(regs*)>:
c00118fe:	57                   	push   edi
c00118ff:	56                   	push   esi
c0011900:	53                   	push   ebx
c0011901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011905:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011908:	83 fa 19             	cmp    edx,0x19
c001190b:	77 3c                	ja     c0011949 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001190d:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c0011914:	85 c9                	test   ecx,ecx
c0011916:	74 31                	je     c0011949 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011918:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001191b:	85 db                	test   ebx,ebx
c001191d:	74 2a                	je     c0011949 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001191f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011922:	85 f6                	test   esi,esi
c0011924:	74 23                	je     c0011949 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011926:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001192c:	85 c0                	test   eax,eax
c001192e:	74 19                	je     c0011949 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011930:	83 ec 0c             	sub    esp,0xc
c0011933:	8b 38                	mov    edi,DWORD PTR [eax]
c0011935:	56                   	push   esi
c0011936:	53                   	push   ebx
c0011937:	52                   	push   edx
c0011938:	51                   	push   ecx
c0011939:	50                   	push   eax
c001193a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001193d:	83 c4 20             	add    esp,0x20
c0011940:	5b                   	pop    ebx
c0011941:	5e                   	pop    esi
c0011942:	89 c2                	mov    edx,eax
c0011944:	c1 fa 1f             	sar    edx,0x1f
c0011947:	5f                   	pop    edi
c0011948:	c3                   	ret    
c0011949:	5b                   	pop    ebx
c001194a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001194f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011954:	5e                   	pop    esi
c0011955:	5f                   	pop    edi
c0011956:	c3                   	ret    

c0011957 <SysShutdown(regs*)>:
c0011957:	57                   	push   edi
c0011958:	56                   	push   esi
c0011959:	83 ec 04             	sub    esp,0x4
c001195c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011960:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011963:	85 c0                	test   eax,eax
c0011965:	74 1e                	je     c0011985 <SysShutdown(regs*)+0x2e>
c0011967:	83 f8 01             	cmp    eax,0x1
c001196a:	74 5f                	je     c00119cb <SysShutdown(regs*)+0x74>
c001196c:	83 f8 02             	cmp    eax,0x2
c001196f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011974:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011979:	74 32                	je     c00119ad <SysShutdown(regs*)+0x56>
c001197b:	83 c4 04             	add    esp,0x4
c001197e:	89 f0                	mov    eax,esi
c0011980:	5e                   	pop    esi
c0011981:	89 fa                	mov    edx,edi
c0011983:	5f                   	pop    edi
c0011984:	c3                   	ret    
c0011985:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001198a:	be ff ff ff ff       	mov    esi,0xffffffff
c001198f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011994:	8b 10                	mov    edx,DWORD PTR [eax]
c0011996:	6a 00                	push   0x0
c0011998:	6a 00                	push   0x0
c001199a:	6a 00                	push   0x0
c001199c:	50                   	push   eax
c001199d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119a0:	83 c4 10             	add    esp,0x10
c00119a3:	89 f0                	mov    eax,esi
c00119a5:	83 c4 04             	add    esp,0x4
c00119a8:	89 fa                	mov    edx,edi
c00119aa:	5e                   	pop    esi
c00119ab:	5f                   	pop    edi
c00119ac:	c3                   	ret    
c00119ad:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00119b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00119b4:	6a 00                	push   0x0
c00119b6:	6a 00                	push   0x0
c00119b8:	6a 01                	push   0x1
c00119ba:	50                   	push   eax
c00119bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	89 f0                	mov    eax,esi
c00119c3:	83 c4 04             	add    esp,0x4
c00119c6:	89 fa                	mov    edx,edi
c00119c8:	5e                   	pop    esi
c00119c9:	5f                   	pop    edi
c00119ca:	c3                   	ret    
c00119cb:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c00119d0:	85 c0                	test   eax,eax
c00119d2:	74 02                	je     c00119d6 <SysShutdown(regs*)+0x7f>
c00119d4:	ff d0                	call   eax
c00119d6:	31 f6                	xor    esi,esi
c00119d8:	83 c4 04             	add    esp,0x4
c00119db:	89 f0                	mov    eax,esi
c00119dd:	31 ff                	xor    edi,edi
c00119df:	5e                   	pop    esi
c00119e0:	89 fa                	mov    edx,edi
c00119e2:	5f                   	pop    edi
c00119e3:	c3                   	ret    

c00119e4 <SysRealpath(regs*)>:
c00119e4:	53                   	push   ebx
c00119e5:	83 ec 08             	sub    esp,0x8
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00119ef:	85 c9                	test   ecx,ecx
c00119f1:	74 37                	je     c0011a2a <SysRealpath(regs*)+0x46>
c00119f3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00119f6:	31 d2                	xor    edx,edx
c00119f8:	b8 01 00 00 00       	mov    eax,0x1
c00119fd:	85 db                	test   ebx,ebx
c00119ff:	75 05                	jne    c0011a06 <SysRealpath(regs*)+0x22>
c0011a01:	83 c4 08             	add    esp,0x8
c0011a04:	5b                   	pop    ebx
c0011a05:	c3                   	ret    
c0011a06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a0b:	83 ec 04             	sub    esp,0x4
c0011a0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a11:	05 0c 01 00 00       	add    eax,0x10c
c0011a16:	50                   	push   eax
c0011a17:	51                   	push   ecx
c0011a18:	53                   	push   ebx
c0011a19:	e8 cc 9a ff ff       	call   c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	31 c0                	xor    eax,eax
c0011a23:	31 d2                	xor    edx,edx
c0011a25:	83 c4 08             	add    esp,0x8
c0011a28:	5b                   	pop    ebx
c0011a29:	c3                   	ret    
c0011a2a:	b8 01 00 00 00       	mov    eax,0x1
c0011a2f:	31 d2                	xor    edx,edx
c0011a31:	eb f2                	jmp    c0011a25 <SysRealpath(regs*)+0x41>

c0011a33 <SysReadDir(regs*)>:
c0011a33:	53                   	push   ebx
c0011a34:	83 ec 18             	sub    esp,0x18
c0011a37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a3e:	83 f8 02             	cmp    eax,0x2
c0011a41:	76 4f                	jbe    c0011a92 <SysReadDir(regs*)+0x5f>
c0011a43:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011a4a:	77 52                	ja     c0011a9e <SysReadDir(regs*)+0x6b>
c0011a4c:	83 ec 0c             	sub    esp,0xc
c0011a4f:	50                   	push   eax
c0011a50:	e8 46 7a ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	85 c0                	test   eax,eax
c0011a5a:	74 42                	je     c0011a9e <SysReadDir(regs*)+0x6b>
c0011a5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a64:	83 ec 0c             	sub    esp,0xc
c0011a67:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011a6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a6d:	51                   	push   ecx
c0011a6e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a71:	51                   	push   ecx
c0011a72:	6a 00                	push   0x0
c0011a74:	68 10 01 00 00       	push   0x110
c0011a79:	50                   	push   eax
c0011a7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a7d:	83 c4 20             	add    esp,0x20
c0011a80:	85 c0                	test   eax,eax
c0011a82:	89 c1                	mov    ecx,eax
c0011a84:	74 27                	je     c0011aad <SysReadDir(regs*)+0x7a>
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	83 f9 07             	cmp    ecx,0x7
c0011a8b:	b8 02 00 00 00       	mov    eax,0x2
c0011a90:	75 16                	jne    c0011aa8 <SysReadDir(regs*)+0x75>
c0011a92:	b8 01 00 00 00       	mov    eax,0x1
c0011a97:	31 d2                	xor    edx,edx
c0011a99:	83 c4 18             	add    esp,0x18
c0011a9c:	5b                   	pop    ebx
c0011a9d:	c3                   	ret    
c0011a9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011aa3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aa8:	83 c4 18             	add    esp,0x18
c0011aab:	5b                   	pop    ebx
c0011aac:	c3                   	ret    
c0011aad:	31 c0                	xor    eax,eax
c0011aaf:	31 d2                	xor    edx,edx
c0011ab1:	eb e6                	jmp    c0011a99 <SysReadDir(regs*)+0x66>

c0011ab3 <SysIsATTY(regs*)>:
c0011ab3:	83 ec 0c             	sub    esp,0xc
c0011ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011abd:	83 f8 02             	cmp    eax,0x2
c0011ac0:	76 07                	jbe    c0011ac9 <SysIsATTY(regs*)+0x16>
c0011ac2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ac7:	75 26                	jne    c0011aef <SysIsATTY(regs*)+0x3c>
c0011ac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ace:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ad1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ad7:	85 c0                	test   eax,eax
c0011ad9:	74 24                	je     c0011aff <SysIsATTY(regs*)+0x4c>
c0011adb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011add:	83 ec 0c             	sub    esp,0xc
c0011ae0:	50                   	push   eax
c0011ae1:	ff 12                	call   DWORD PTR [edx]
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	31 d2                	xor    edx,edx
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	0f b6 c0             	movzx  eax,al
c0011aee:	c3                   	ret    
c0011aef:	83 ec 0c             	sub    esp,0xc
c0011af2:	50                   	push   eax
c0011af3:	e8 a3 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	85 c0                	test   eax,eax
c0011afd:	75 dc                	jne    c0011adb <SysIsATTY(regs*)+0x28>
c0011aff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b09:	83 c4 0c             	add    esp,0xc
c0011b0c:	c3                   	ret    

c0011b0d <SysSeek(regs*)>:
c0011b0d:	56                   	push   esi
c0011b0e:	53                   	push   ebx
c0011b0f:	83 ec 04             	sub    esp,0x4
c0011b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b16:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b19:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011b1c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011b22:	77 33                	ja     c0011b57 <SysSeek(regs*)+0x4a>
c0011b24:	83 ec 0c             	sub    esp,0xc
c0011b27:	51                   	push   ecx
c0011b28:	e8 6e 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b2d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011b30:	83 c4 0c             	add    esp,0xc
c0011b33:	31 db                	xor    ebx,ebx
c0011b35:	53                   	push   ebx
c0011b36:	51                   	push   ecx
c0011b37:	50                   	push   eax
c0011b38:	e8 03 9d ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	85 c0                	test   eax,eax
c0011b42:	0f 95 c0             	setne  al
c0011b45:	31 d2                	xor    edx,edx
c0011b47:	0f b6 c0             	movzx  eax,al
c0011b4a:	f7 d8                	neg    eax
c0011b4c:	83 d2 00             	adc    edx,0x0
c0011b4f:	83 c4 04             	add    esp,0x4
c0011b52:	5b                   	pop    ebx
c0011b53:	f7 da                	neg    edx
c0011b55:	5e                   	pop    esi
c0011b56:	c3                   	ret    
c0011b57:	83 c4 04             	add    esp,0x4
c0011b5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b5f:	5b                   	pop    ebx
c0011b60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b65:	5e                   	pop    esi
c0011b66:	c3                   	ret    

c0011b67 <SysTell(regs*)>:
c0011b67:	53                   	push   ebx
c0011b68:	83 ec 08             	sub    esp,0x8
c0011b6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b72:	83 f8 02             	cmp    eax,0x2
c0011b75:	76 4e                	jbe    c0011bc5 <SysTell(regs*)+0x5e>
c0011b77:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b7c:	76 19                	jbe    c0011b97 <SysTell(regs*)+0x30>
c0011b7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b81:	31 d2                	xor    edx,edx
c0011b83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b90:	83 c4 08             	add    esp,0x8
c0011b93:	31 c0                	xor    eax,eax
c0011b95:	5b                   	pop    ebx
c0011b96:	c3                   	ret    
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	50                   	push   eax
c0011b9b:	e8 fb 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ba0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011ba3:	5a                   	pop    edx
c0011ba4:	59                   	pop    ecx
c0011ba5:	53                   	push   ebx
c0011ba6:	50                   	push   eax
c0011ba7:	e8 40 9d ff ff       	call   c000b8ec <File::tell(unsigned long long*)>
c0011bac:	83 c4 10             	add    esp,0x10
c0011baf:	85 c0                	test   eax,eax
c0011bb1:	0f 95 c0             	setne  al
c0011bb4:	31 d2                	xor    edx,edx
c0011bb6:	0f b6 c0             	movzx  eax,al
c0011bb9:	f7 d8                	neg    eax
c0011bbb:	83 d2 00             	adc    edx,0x0
c0011bbe:	83 c4 08             	add    esp,0x8
c0011bc1:	5b                   	pop    ebx
c0011bc2:	f7 da                	neg    edx
c0011bc4:	c3                   	ret    
c0011bc5:	83 c4 08             	add    esp,0x8
c0011bc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bcd:	5b                   	pop    ebx
c0011bce:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd3:	c3                   	ret    

c0011bd4 <SysSize(regs*)>:
c0011bd4:	53                   	push   ebx
c0011bd5:	83 ec 18             	sub    esp,0x18
c0011bd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bdf:	83 f8 02             	cmp    eax,0x2
c0011be2:	76 54                	jbe    c0011c38 <SysSize(regs*)+0x64>
c0011be4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011be9:	76 19                	jbe    c0011c04 <SysSize(regs*)+0x30>
c0011beb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bee:	31 d2                	xor    edx,edx
c0011bf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011bf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bfd:	83 c4 18             	add    esp,0x18
c0011c00:	31 c0                	xor    eax,eax
c0011c02:	5b                   	pop    ebx
c0011c03:	c3                   	ret    
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	50                   	push   eax
c0011c08:	e8 8e 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c0d:	83 c4 0c             	add    esp,0xc
c0011c10:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c14:	52                   	push   edx
c0011c15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c18:	52                   	push   edx
c0011c19:	50                   	push   eax
c0011c1a:	e8 65 9e ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c0011c1f:	83 c4 10             	add    esp,0x10
c0011c22:	85 c0                	test   eax,eax
c0011c24:	0f 95 c0             	setne  al
c0011c27:	31 d2                	xor    edx,edx
c0011c29:	0f b6 c0             	movzx  eax,al
c0011c2c:	f7 d8                	neg    eax
c0011c2e:	83 d2 00             	adc    edx,0x0
c0011c31:	83 c4 18             	add    esp,0x18
c0011c34:	5b                   	pop    ebx
c0011c35:	f7 da                	neg    edx
c0011c37:	c3                   	ret    
c0011c38:	83 c4 18             	add    esp,0x18
c0011c3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c40:	5b                   	pop    ebx
c0011c41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c46:	c3                   	ret    

c0011c47 <SysSizeFromFilename(regs*)>:
c0011c47:	57                   	push   edi
c0011c48:	56                   	push   esi
c0011c49:	53                   	push   ebx
c0011c4a:	83 ec 10             	sub    esp,0x10
c0011c4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011c51:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011c54:	83 fb 02             	cmp    ebx,0x2
c0011c57:	0f 86 83 00 00 00    	jbe    c0011ce0 <SysSizeFromFilename(regs*)+0x99>
c0011c5d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011c63:	76 1b                	jbe    c0011c80 <SysSizeFromFilename(regs*)+0x39>
c0011c65:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c68:	31 d2                	xor    edx,edx
c0011c6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	31 c0                	xor    eax,eax
c0011c7c:	5b                   	pop    ebx
c0011c7d:	5e                   	pop    esi
c0011c7e:	5f                   	pop    edi
c0011c7f:	c3                   	ret    
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	68 14 01 00 00       	push   0x114
c0011c88:	e8 46 5e ff ff       	call   c0007ad3 <malloc>
c0011c8d:	83 c4 0c             	add    esp,0xc
c0011c90:	89 c7                	mov    edi,eax
c0011c92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c9a:	50                   	push   eax
c0011c9b:	53                   	push   ebx
c0011c9c:	57                   	push   edi
c0011c9d:	e8 24 9a ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0011ca2:	83 c4 0c             	add    esp,0xc
c0011ca5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011ca9:	50                   	push   eax
c0011caa:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011cad:	52                   	push   edx
c0011cae:	57                   	push   edi
c0011caf:	e8 d0 9d ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 ff                	test   edi,edi
c0011cb9:	89 c3                	mov    ebx,eax
c0011cbb:	74 0c                	je     c0011cc9 <SysSizeFromFilename(regs*)+0x82>
c0011cbd:	8b 07                	mov    eax,DWORD PTR [edi]
c0011cbf:	83 ec 0c             	sub    esp,0xc
c0011cc2:	57                   	push   edi
c0011cc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cc6:	83 c4 10             	add    esp,0x10
c0011cc9:	31 c0                	xor    eax,eax
c0011ccb:	85 db                	test   ebx,ebx
c0011ccd:	0f 95 c0             	setne  al
c0011cd0:	31 d2                	xor    edx,edx
c0011cd2:	f7 d8                	neg    eax
c0011cd4:	83 d2 00             	adc    edx,0x0
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	5b                   	pop    ebx
c0011cdb:	f7 da                	neg    edx
c0011cdd:	5e                   	pop    esi
c0011cde:	5f                   	pop    edi
c0011cdf:	c3                   	ret    
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ce8:	5b                   	pop    ebx
c0011ce9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cee:	5e                   	pop    esi
c0011cef:	5f                   	pop    edi
c0011cf0:	c3                   	ret    

c0011cf1 <SysClose(regs*)>:
c0011cf1:	53                   	push   ebx
c0011cf2:	83 ec 08             	sub    esp,0x8
c0011cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cfc:	83 f8 02             	cmp    eax,0x2
c0011cff:	76 41                	jbe    c0011d42 <SysClose(regs*)+0x51>
c0011d01:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d07:	83 fa 01             	cmp    edx,0x1
c0011d0a:	76 2d                	jbe    c0011d39 <SysClose(regs*)+0x48>
c0011d0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d11:	77 2f                	ja     c0011d42 <SysClose(regs*)+0x51>
c0011d13:	83 ec 0c             	sub    esp,0xc
c0011d16:	50                   	push   eax
c0011d17:	e8 7f 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d1f:	89 c3                	mov    ebx,eax
c0011d21:	e8 ba 9a ff ff       	call   c000b7e0 <File::close()>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	85 db                	test   ebx,ebx
c0011d2b:	74 0c                	je     c0011d39 <SysClose(regs*)+0x48>
c0011d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d2f:	83 ec 0c             	sub    esp,0xc
c0011d32:	53                   	push   ebx
c0011d33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	83 c4 08             	add    esp,0x8
c0011d3c:	31 c0                	xor    eax,eax
c0011d3e:	5b                   	pop    ebx
c0011d3f:	31 d2                	xor    edx,edx
c0011d41:	c3                   	ret    
c0011d42:	83 c4 08             	add    esp,0x8
c0011d45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d4a:	5b                   	pop    ebx
c0011d4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d50:	c3                   	ret    

c0011d51 <SysOpenDir(regs*)>:
c0011d51:	56                   	push   esi
c0011d52:	53                   	push   ebx
c0011d53:	83 ec 04             	sub    esp,0x4
c0011d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d5a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d5d:	85 c9                	test   ecx,ecx
c0011d5f:	74 5d                	je     c0011dbe <SysOpenDir(regs*)+0x6d>
c0011d61:	83 ec 0c             	sub    esp,0xc
c0011d64:	68 14 01 00 00       	push   0x114
c0011d69:	e8 65 5d ff ff       	call   c0007ad3 <malloc>
c0011d6e:	83 c4 0c             	add    esp,0xc
c0011d71:	89 c6                	mov    esi,eax
c0011d73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7b:	50                   	push   eax
c0011d7c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011d7f:	52                   	push   edx
c0011d80:	56                   	push   esi
c0011d81:	e8 bc 9e ff ff       	call   c000bc42 <Directory::Directory(char const*, Process*)>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	85 f6                	test   esi,esi
c0011d8b:	74 31                	je     c0011dbe <SysOpenDir(regs*)+0x6d>
c0011d8d:	83 ec 0c             	sub    esp,0xc
c0011d90:	56                   	push   esi
c0011d91:	e8 68 9f ff ff       	call   c000bcfe <Directory::open()>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	85 c0                	test   eax,eax
c0011d9b:	75 21                	jne    c0011dbe <SysOpenDir(regs*)+0x6d>
c0011d9d:	83 ec 0c             	sub    esp,0xc
c0011da0:	56                   	push   esi
c0011da1:	e8 f8 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011da6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	89 02                	mov    DWORD PTR [edx],eax
c0011dae:	c1 f8 1f             	sar    eax,0x1f
c0011db1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011db4:	83 c4 04             	add    esp,0x4
c0011db7:	31 c0                	xor    eax,eax
c0011db9:	5b                   	pop    ebx
c0011dba:	31 d2                	xor    edx,edx
c0011dbc:	5e                   	pop    esi
c0011dbd:	c3                   	ret    
c0011dbe:	83 c4 04             	add    esp,0x4
c0011dc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dc6:	5b                   	pop    ebx
c0011dc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dcc:	5e                   	pop    esi
c0011dcd:	c3                   	ret    

c0011dce <SysMakeDir(regs*)>:
c0011dce:	56                   	push   esi
c0011dcf:	53                   	push   ebx
c0011dd0:	83 ec 10             	sub    esp,0x10
c0011dd3:	68 14 01 00 00       	push   0x114
c0011dd8:	e8 f6 5c ff ff       	call   c0007ad3 <malloc>
c0011ddd:	83 c4 0c             	add    esp,0xc
c0011de0:	89 c3                	mov    ebx,eax
c0011de2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011de7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dea:	50                   	push   eax
c0011deb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011def:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011df2:	52                   	push   edx
c0011df3:	53                   	push   ebx
c0011df4:	e8 49 9e ff ff       	call   c000bc42 <Directory::Directory(char const*, Process*)>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	85 db                	test   ebx,ebx
c0011dfe:	74 2c                	je     c0011e2c <SysMakeDir(regs*)+0x5e>
c0011e00:	83 ec 0c             	sub    esp,0xc
c0011e03:	53                   	push   ebx
c0011e04:	e8 d5 a0 ff ff       	call   c000bede <Directory::create()>
c0011e09:	89 c6                	mov    esi,eax
c0011e0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	31 c0                	xor    eax,eax
c0011e18:	85 f6                	test   esi,esi
c0011e1a:	0f 95 c0             	setne  al
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	f7 d8                	neg    eax
c0011e21:	83 d2 00             	adc    edx,0x0
c0011e24:	83 c4 04             	add    esp,0x4
c0011e27:	5b                   	pop    ebx
c0011e28:	f7 da                	neg    edx
c0011e2a:	5e                   	pop    esi
c0011e2b:	c3                   	ret    
c0011e2c:	83 c4 04             	add    esp,0x4
c0011e2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e34:	5b                   	pop    ebx
c0011e35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e3a:	5e                   	pop    esi
c0011e3b:	c3                   	ret    

c0011e3c <SysCloseDir(regs*)>:
c0011e3c:	53                   	push   ebx
c0011e3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011e4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e51:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011e54:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011e5a:	77 2a                	ja     c0011e86 <SysCloseDir(regs*)+0x4a>
c0011e5c:	83 ec 0c             	sub    esp,0xc
c0011e5f:	51                   	push   ecx
c0011e60:	e8 36 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e65:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e68:	89 c3                	mov    ebx,eax
c0011e6a:	e8 eb 9e ff ff       	call   c000bd5a <Directory::close()>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	85 db                	test   ebx,ebx
c0011e74:	74 0c                	je     c0011e82 <SysCloseDir(regs*)+0x46>
c0011e76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	53                   	push   ebx
c0011e7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e7f:	83 c4 10             	add    esp,0x10
c0011e82:	31 c0                	xor    eax,eax
c0011e84:	31 d2                	xor    edx,edx
c0011e86:	83 c4 08             	add    esp,0x8
c0011e89:	5b                   	pop    ebx
c0011e8a:	c3                   	ret    

c0011e8b <SysWait(regs*)>:
c0011e8b:	83 ec 10             	sub    esp,0x10
c0011e8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e92:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e95:	52                   	push   edx
c0011e96:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011e99:	51                   	push   ecx
c0011e9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e9d:	50                   	push   eax
c0011e9e:	e8 e5 3d 00 00       	call   c0015c88 <waitTask(int, int*, int)>
c0011ea3:	83 c4 1c             	add    esp,0x1c
c0011ea6:	89 c2                	mov    edx,eax
c0011ea8:	c1 fa 1f             	sar    edx,0x1f
c0011eab:	c3                   	ret    

c0011eac <SysNotImpl(regs*)>:
c0011eac:	83 ec 18             	sub    esp,0x18
c0011eaf:	68 3b 1d 02 c0       	push   0xc0021d3b
c0011eb4:	e8 94 f2 ff ff       	call   c001114d <KePanic(char const*)>
c0011eb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ebe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec3:	83 c4 1c             	add    esp,0x1c
c0011ec6:	c3                   	ret    

c0011ec7 <SysPanic(regs*)>:
c0011ec7:	83 ec 18             	sub    esp,0x18
c0011eca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ece:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ed1:	50                   	push   eax
c0011ed2:	e8 76 f2 ff ff       	call   c001114d <KePanic(char const*)>
c0011ed7:	b8 01 00 00 00       	mov    eax,0x1
c0011edc:	31 d2                	xor    edx,edx
c0011ede:	83 c4 1c             	add    esp,0x1c
c0011ee1:	c3                   	ret    

c0011ee2 <SysRmdir(regs*)>:
c0011ee2:	56                   	push   esi
c0011ee3:	53                   	push   ebx
c0011ee4:	83 ec 10             	sub    esp,0x10
c0011ee7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eeb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011eee:	68 14 01 00 00       	push   0x114
c0011ef3:	e8 db 5b ff ff       	call   c0007ad3 <malloc>
c0011ef8:	83 c4 0c             	add    esp,0xc
c0011efb:	89 c3                	mov    ebx,eax
c0011efd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f05:	50                   	push   eax
c0011f06:	56                   	push   esi
c0011f07:	53                   	push   ebx
c0011f08:	e8 b9 97 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0011f0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f10:	e8 3b 9a ff ff       	call   c000b950 <File::unlink()>
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	85 db                	test   ebx,ebx
c0011f1a:	89 c6                	mov    esi,eax
c0011f1c:	74 0c                	je     c0011f2a <SysRmdir(regs*)+0x48>
c0011f1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	53                   	push   ebx
c0011f24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	31 c0                	xor    eax,eax
c0011f2c:	85 f6                	test   esi,esi
c0011f2e:	0f 95 c0             	setne  al
c0011f31:	31 d2                	xor    edx,edx
c0011f33:	f7 d8                	neg    eax
c0011f35:	83 d2 00             	adc    edx,0x0
c0011f38:	83 c4 04             	add    esp,0x4
c0011f3b:	5b                   	pop    ebx
c0011f3c:	f7 da                	neg    edx
c0011f3e:	5e                   	pop    esi
c0011f3f:	c3                   	ret    

c0011f40 <SysUnlink(regs*)>:
c0011f40:	56                   	push   esi
c0011f41:	53                   	push   ebx
c0011f42:	83 ec 10             	sub    esp,0x10
c0011f45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f49:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f4c:	68 14 01 00 00       	push   0x114
c0011f51:	e8 7d 5b ff ff       	call   c0007ad3 <malloc>
c0011f56:	83 c4 0c             	add    esp,0xc
c0011f59:	89 c3                	mov    ebx,eax
c0011f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f63:	50                   	push   eax
c0011f64:	56                   	push   esi
c0011f65:	53                   	push   ebx
c0011f66:	e8 5b 97 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0011f6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f6e:	e8 dd 99 ff ff       	call   c000b950 <File::unlink()>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	85 db                	test   ebx,ebx
c0011f78:	89 c6                	mov    esi,eax
c0011f7a:	74 0c                	je     c0011f88 <SysUnlink(regs*)+0x48>
c0011f7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	53                   	push   ebx
c0011f82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	31 c0                	xor    eax,eax
c0011f8a:	85 f6                	test   esi,esi
c0011f8c:	0f 95 c0             	setne  al
c0011f8f:	31 d2                	xor    edx,edx
c0011f91:	f7 d8                	neg    eax
c0011f93:	83 d2 00             	adc    edx,0x0
c0011f96:	83 c4 04             	add    esp,0x4
c0011f99:	5b                   	pop    ebx
c0011f9a:	f7 da                	neg    edx
c0011f9c:	5e                   	pop    esi
c0011f9d:	c3                   	ret    

c0011f9e <SysGetArgv(regs*)>:
c0011f9e:	83 ec 0c             	sub    esp,0xc
c0011fa1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fa5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011fa8:	85 c0                	test   eax,eax
c0011faa:	78 2c                	js     c0011fd8 <SysGetArgv(regs*)+0x3a>
c0011fac:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011fb2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011fb5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011fbb:	7d 1b                	jge    c0011fd8 <SysGetArgv(regs*)+0x3a>
c0011fbd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011fc4:	85 c0                	test   eax,eax
c0011fc6:	74 18                	je     c0011fe0 <SysGetArgv(regs*)+0x42>
c0011fc8:	83 ec 08             	sub    esp,0x8
c0011fcb:	50                   	push   eax
c0011fcc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011fcf:	50                   	push   eax
c0011fd0:	e8 7b e6 fe ff       	call   c0000650 <strcpy>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	31 c0                	xor    eax,eax
c0011fda:	31 d2                	xor    edx,edx
c0011fdc:	83 c4 0c             	add    esp,0xc
c0011fdf:	c3                   	ret    
c0011fe0:	b8 01 00 00 00       	mov    eax,0x1
c0011fe5:	31 d2                	xor    edx,edx
c0011fe7:	83 c4 0c             	add    esp,0xc
c0011fea:	c3                   	ret    

c0011feb <SysUSleep(regs*)>:
c0011feb:	83 ec 1c             	sub    esp,0x1c
c0011fee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ff2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011ff5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011ff8:	6a 00                	push   0x0
c0011ffa:	6a 64                	push   0x64
c0011ffc:	52                   	push   edx
c0011ffd:	50                   	push   eax
c0011ffe:	e8 0d d1 00 00       	call   c001f110 <__udivdi3>
c0012003:	83 c4 14             	add    esp,0x14
c0012006:	50                   	push   eax
c0012007:	e8 60 3d 00 00       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001200c:	31 c0                	xor    eax,eax
c001200e:	31 d2                	xor    edx,edx
c0012010:	83 c4 1c             	add    esp,0x1c
c0012013:	c3                   	ret    

c0012014 <SysSpawn(regs*)>:
c0012014:	56                   	push   esi
c0012015:	53                   	push   ebx
c0012016:	83 ec 04             	sub    esp,0x4
c0012019:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001201d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012020:	85 f6                	test   esi,esi
c0012022:	75 0a                	jne    c001202e <SysSpawn(regs*)+0x1a>
c0012024:	83 c4 04             	add    esp,0x4
c0012027:	31 c0                	xor    eax,eax
c0012029:	5b                   	pop    ebx
c001202a:	31 d2                	xor    edx,edx
c001202c:	5e                   	pop    esi
c001202d:	c3                   	ret    
c001202e:	83 ec 0c             	sub    esp,0xc
c0012031:	68 24 07 00 00       	push   0x724
c0012036:	e8 98 5a ff ff       	call   c0007ad3 <malloc>
c001203b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012044:	89 c6                	mov    esi,eax
c0012046:	31 c0                	xor    eax,eax
c0012048:	85 c9                	test   ecx,ecx
c001204a:	75 08                	jne    c0012054 <SysSpawn(regs*)+0x40>
c001204c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012051:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012054:	52                   	push   edx
c0012055:	50                   	push   eax
c0012056:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012059:	50                   	push   eax
c001205a:	56                   	push   esi
c001205b:	e8 74 33 00 00       	call   c00153d4 <Process::Process(char const*, Process*, char**)>
c0012060:	83 c4 10             	add    esp,0x10
c0012063:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001206a:	75 b8                	jne    c0012024 <SysSpawn(regs*)+0x10>
c001206c:	83 ec 0c             	sub    esp,0xc
c001206f:	56                   	push   esi
c0012070:	e8 97 38 00 00       	call   c001590c <Process::createUserThread()>
c0012075:	8b 06                	mov    eax,DWORD PTR [esi]
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	83 c4 04             	add    esp,0x4
c001207d:	5b                   	pop    ebx
c001207e:	89 c2                	mov    edx,eax
c0012080:	c1 fa 1f             	sar    edx,0x1f
c0012083:	5e                   	pop    esi
c0012084:	c3                   	ret    

c0012085 <SysGetEnv(regs*)>:
c0012085:	57                   	push   edi
c0012086:	56                   	push   esi
c0012087:	53                   	push   ebx
c0012088:	83 ec 1c             	sub    esp,0x1c
c001208b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012090:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012094:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012097:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001209a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001209d:	51                   	push   ecx
c001209e:	e8 62 ef ff ff       	call   c0011005 <KeGetProcessTotalEnvCount(Process*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	39 c7                	cmp    edi,eax
c00120a8:	7c 12                	jl     c00120bc <SysGetEnv(regs*)+0x37>
c00120aa:	31 c0                	xor    eax,eax
c00120ac:	31 d2                	xor    edx,edx
c00120ae:	85 f6                	test   esi,esi
c00120b0:	74 03                	je     c00120b5 <SysGetEnv(regs*)+0x30>
c00120b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	5b                   	pop    ebx
c00120b9:	5e                   	pop    esi
c00120ba:	5f                   	pop    edi
c00120bb:	c3                   	ret    
c00120bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00120c0:	83 ec 04             	sub    esp,0x4
c00120c3:	57                   	push   edi
c00120c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120ca:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00120cd:	57                   	push   edi
c00120ce:	50                   	push   eax
c00120cf:	e8 51 ef ff ff       	call   c0011025 <KeGetProcessEnvPair(Process*, int)>
c00120d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00120df:	83 c4 0c             	add    esp,0xc
c00120e2:	85 d2                	test   edx,edx
c00120e4:	75 23                	jne    c0012109 <SysGetEnv(regs*)+0x84>
c00120e6:	83 ec 0c             	sub    esp,0xc
c00120e9:	50                   	push   eax
c00120ea:	e8 91 e4 fe ff       	call   c0000580 <strlen>
c00120ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120f2:	89 c3                	mov    ebx,eax
c00120f4:	e8 87 e4 fe ff       	call   c0000580 <strlen>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	31 d2                	xor    edx,edx
c00120fe:	83 c4 10             	add    esp,0x10
c0012101:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012105:	5b                   	pop    ebx
c0012106:	5e                   	pop    esi
c0012107:	5f                   	pop    edi
c0012108:	c3                   	ret    
c0012109:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001210c:	83 ec 08             	sub    esp,0x8
c001210f:	50                   	push   eax
c0012110:	56                   	push   esi
c0012111:	e8 3a e5 fe ff       	call   c0000650 <strcpy>
c0012116:	58                   	pop    eax
c0012117:	5a                   	pop    edx
c0012118:	68 55 1d 02 c0       	push   0xc0021d55
c001211d:	56                   	push   esi
c001211e:	e8 4d e7 fe ff       	call   c0000870 <strcat>
c0012123:	59                   	pop    ecx
c0012124:	5b                   	pop    ebx
c0012125:	57                   	push   edi
c0012126:	56                   	push   esi
c0012127:	e8 44 e7 fe ff       	call   c0000870 <strcat>
c001212c:	83 c4 10             	add    esp,0x10
c001212f:	31 c0                	xor    eax,eax
c0012131:	83 c4 10             	add    esp,0x10
c0012134:	31 d2                	xor    edx,edx
c0012136:	5b                   	pop    ebx
c0012137:	5e                   	pop    esi
c0012138:	5f                   	pop    edi
c0012139:	c3                   	ret    

c001213a <SysSetFatAttrib(regs*)>:
c001213a:	57                   	push   edi
c001213b:	56                   	push   esi
c001213c:	53                   	push   ebx
c001213d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012141:	83 ec 0c             	sub    esp,0xc
c0012144:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012147:	68 14 01 00 00       	push   0x114
c001214c:	e8 82 59 ff ff       	call   c0007ad3 <malloc>
c0012151:	83 c4 0c             	add    esp,0xc
c0012154:	89 c3                	mov    ebx,eax
c0012156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001215b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001215e:	50                   	push   eax
c001215f:	57                   	push   edi
c0012160:	53                   	push   ebx
c0012161:	e8 60 95 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0012166:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012169:	83 c4 0c             	add    esp,0xc
c001216c:	0f b6 d4             	movzx  edx,ah
c001216f:	0f b6 c0             	movzx  eax,al
c0012172:	52                   	push   edx
c0012173:	50                   	push   eax
c0012174:	53                   	push   ebx
c0012175:	e8 70 98 ff ff       	call   c000b9ea <File::chfatattr(unsigned char, unsigned char)>
c001217a:	83 c4 10             	add    esp,0x10
c001217d:	85 db                	test   ebx,ebx
c001217f:	89 c6                	mov    esi,eax
c0012181:	74 0c                	je     c001218f <SysSetFatAttrib(regs*)+0x55>
c0012183:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012185:	83 ec 0c             	sub    esp,0xc
c0012188:	53                   	push   ebx
c0012189:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	5b                   	pop    ebx
c0012190:	31 c0                	xor    eax,eax
c0012192:	85 f6                	test   esi,esi
c0012194:	0f 95 c0             	setne  al
c0012197:	31 d2                	xor    edx,edx
c0012199:	5e                   	pop    esi
c001219a:	f7 d8                	neg    eax
c001219c:	83 d2 00             	adc    edx,0x0
c001219f:	f7 da                	neg    edx
c00121a1:	5f                   	pop    edi
c00121a2:	c3                   	ret    

c00121a3 <SysPipe(regs*)>:
c00121a3:	57                   	push   edi
c00121a4:	56                   	push   esi
c00121a5:	53                   	push   ebx
c00121a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00121b0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00121b3:	6a 20                	push   0x20
c00121b5:	e8 19 59 ff ff       	call   c0007ad3 <malloc>
c00121ba:	89 c3                	mov    ebx,eax
c00121bc:	58                   	pop    eax
c00121bd:	5a                   	pop    edx
c00121be:	68 00 50 00 00       	push   0x5000
c00121c3:	53                   	push   ebx
c00121c4:	e8 75 62 ff ff       	call   c000843e <Pipe::Pipe(int)>
c00121c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121cc:	e8 cd 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121d1:	89 07                	mov    DWORD PTR [edi],eax
c00121d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121d6:	e8 c3 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121db:	83 c4 10             	add    esp,0x10
c00121de:	31 d2                	xor    edx,edx
c00121e0:	89 06                	mov    DWORD PTR [esi],eax
c00121e2:	31 c0                	xor    eax,eax
c00121e4:	5b                   	pop    ebx
c00121e5:	5e                   	pop    esi
c00121e6:	5f                   	pop    edi
c00121e7:	c3                   	ret    

c00121e8 <SysGetUnixTime(regs*)>:
c00121e8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00121ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00121f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121f7:	e9 26 9f ff ff       	jmp    c000c122 <Clock::timeInSecondsLocal()>

c00121fc <string_ends_with(char const*, char const*)>:
c00121fc:	57                   	push   edi
c00121fd:	56                   	push   esi
c00121fe:	53                   	push   ebx
c00121ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012203:	83 ec 0c             	sub    esp,0xc
c0012206:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001220a:	53                   	push   ebx
c001220b:	e8 70 e3 fe ff       	call   c0000580 <strlen>
c0012210:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012213:	89 c6                	mov    esi,eax
c0012215:	e8 66 e3 fe ff       	call   c0000580 <strlen>
c001221a:	83 c4 10             	add    esp,0x10
c001221d:	31 d2                	xor    edx,edx
c001221f:	39 c6                	cmp    esi,eax
c0012221:	7d 06                	jge    c0012229 <string_ends_with(char const*, char const*)+0x2d>
c0012223:	5b                   	pop    ebx
c0012224:	89 d0                	mov    eax,edx
c0012226:	5e                   	pop    esi
c0012227:	5f                   	pop    edi
c0012228:	c3                   	ret    
c0012229:	83 ec 08             	sub    esp,0x8
c001222c:	29 c6                	sub    esi,eax
c001222e:	57                   	push   edi
c001222f:	01 f3                	add    ebx,esi
c0012231:	53                   	push   ebx
c0012232:	e8 49 e5 fe ff       	call   c0000780 <strcmp>
c0012237:	83 c4 10             	add    esp,0x10
c001223a:	31 d2                	xor    edx,edx
c001223c:	5b                   	pop    ebx
c001223d:	5e                   	pop    esi
c001223e:	85 c0                	test   eax,eax
c0012240:	5f                   	pop    edi
c0012241:	0f 94 c2             	sete   dl
c0012244:	89 d0                	mov    eax,edx
c0012246:	c3                   	ret    

c0012247 <SysOpen(regs*)>:
c0012247:	56                   	push   esi
c0012248:	53                   	push   ebx
c0012249:	81 ec 04 01 00 00    	sub    esp,0x104
c001224f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012256:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012259:	85 c0                	test   eax,eax
c001225b:	0f 84 c5 01 00 00    	je     c0012426 <SysOpen(regs*)+0x1df>
c0012261:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012264:	85 c0                	test   eax,eax
c0012266:	0f 84 ba 01 00 00    	je     c0012426 <SysOpen(regs*)+0x1df>
c001226c:	83 ec 04             	sub    esp,0x4
c001226f:	68 57 1d 02 c0       	push   0xc0021d57
c0012274:	50                   	push   eax
c0012275:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012279:	56                   	push   esi
c001227a:	e8 6b 92 ff ff       	call   c000b4ea <Fs::standardiseFiles(char*, char const*, char const*)>
c001227f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012282:	e8 f9 e2 fe ff       	call   c0000580 <strlen>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	83 e8 01             	sub    eax,0x1
c001228d:	74 29                	je     c00122b8 <SysOpen(regs*)+0x71>
c001228f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012293:	83 fa 2e             	cmp    edx,0x2e
c0012296:	74 1c                	je     c00122b4 <SysOpen(regs*)+0x6d>
c0012298:	83 fa 3a             	cmp    edx,0x3a
c001229b:	74 17                	je     c00122b4 <SysOpen(regs*)+0x6d>
c001229d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00122a1:	83 e8 01             	sub    eax,0x1
c00122a4:	74 12                	je     c00122b8 <SysOpen(regs*)+0x71>
c00122a6:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00122aa:	83 fa 3a             	cmp    edx,0x3a
c00122ad:	74 05                	je     c00122b4 <SysOpen(regs*)+0x6d>
c00122af:	83 fa 2e             	cmp    edx,0x2e
c00122b2:	75 e9                	jne    c001229d <SysOpen(regs*)+0x56>
c00122b4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00122b8:	83 ec 08             	sub    esp,0x8
c00122bb:	68 5b 1d 02 c0       	push   0xc0021d5b
c00122c0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122c3:	50                   	push   eax
c00122c4:	e8 33 ff ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c00122c9:	83 c4 10             	add    esp,0x10
c00122cc:	85 c0                	test   eax,eax
c00122ce:	74 1d                	je     c00122ed <SysOpen(regs*)+0xa6>
c00122d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122d3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00122d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122e0:	81 c4 04 01 00 00    	add    esp,0x104
c00122e6:	31 c0                	xor    eax,eax
c00122e8:	5b                   	pop    ebx
c00122e9:	31 d2                	xor    edx,edx
c00122eb:	5e                   	pop    esi
c00122ec:	c3                   	ret    
c00122ed:	83 ec 08             	sub    esp,0x8
c00122f0:	68 60 1d 02 c0       	push   0xc0021d60
c00122f5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122f8:	50                   	push   eax
c00122f9:	e8 fe fe ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c00122fe:	83 c4 10             	add    esp,0x10
c0012301:	85 c0                	test   eax,eax
c0012303:	75 cb                	jne    c00122d0 <SysOpen(regs*)+0x89>
c0012305:	83 ec 08             	sub    esp,0x8
c0012308:	68 5c 1d 02 c0       	push   0xc0021d5c
c001230d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012310:	50                   	push   eax
c0012311:	e8 6a e4 fe ff       	call   c0000780 <strcmp>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	85 c0                	test   eax,eax
c001231b:	74 b3                	je     c00122d0 <SysOpen(regs*)+0x89>
c001231d:	83 ec 08             	sub    esp,0x8
c0012320:	68 5b 1d 02 c0       	push   0xc0021d5b
c0012325:	56                   	push   esi
c0012326:	e8 d1 fe ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	85 c0                	test   eax,eax
c0012330:	75 9e                	jne    c00122d0 <SysOpen(regs*)+0x89>
c0012332:	83 ec 08             	sub    esp,0x8
c0012335:	68 65 1d 02 c0       	push   0xc0021d65
c001233a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001233d:	50                   	push   eax
c001233e:	e8 b9 fe ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	85 c0                	test   eax,eax
c0012348:	0f 85 eb 00 00 00    	jne    c0012439 <SysOpen(regs*)+0x1f2>
c001234e:	83 ec 08             	sub    esp,0x8
c0012351:	68 6a 1d 02 c0       	push   0xc0021d6a
c0012356:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012359:	50                   	push   eax
c001235a:	e8 9d fe ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c001235f:	83 c4 10             	add    esp,0x10
c0012362:	85 c0                	test   eax,eax
c0012364:	0f 85 cf 00 00 00    	jne    c0012439 <SysOpen(regs*)+0x1f2>
c001236a:	83 ec 08             	sub    esp,0x8
c001236d:	68 66 1d 02 c0       	push   0xc0021d66
c0012372:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012375:	51                   	push   ecx
c0012376:	e8 05 e4 fe ff       	call   c0000780 <strcmp>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	85 c0                	test   eax,eax
c0012380:	0f 84 b3 00 00 00    	je     c0012439 <SysOpen(regs*)+0x1f2>
c0012386:	83 ec 08             	sub    esp,0x8
c0012389:	68 65 1d 02 c0       	push   0xc0021d65
c001238e:	56                   	push   esi
c001238f:	e8 68 fe ff ff       	call   c00121fc <string_ends_with(char const*, char const*)>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	85 c0                	test   eax,eax
c0012399:	0f 85 9a 00 00 00    	jne    c0012439 <SysOpen(regs*)+0x1f2>
c001239f:	83 ec 0c             	sub    esp,0xc
c00123a2:	68 14 01 00 00       	push   0x114
c00123a7:	e8 27 57 ff ff       	call   c0007ad3 <malloc>
c00123ac:	83 c4 0c             	add    esp,0xc
c00123af:	89 c6                	mov    esi,eax
c00123b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123b9:	50                   	push   eax
c00123ba:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123bd:	52                   	push   edx
c00123be:	56                   	push   esi
c00123bf:	e8 02 93 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	85 f6                	test   esi,esi
c00123c9:	74 5b                	je     c0012426 <SysOpen(regs*)+0x1df>
c00123cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123ce:	0f b6 c2             	movzx  eax,dl
c00123d1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00123d4:	89 d0                	mov    eax,edx
c00123d6:	83 e0 01             	and    eax,0x1
c00123d9:	f6 c2 02             	test   dl,0x2
c00123dc:	74 03                	je     c00123e1 <SysOpen(regs*)+0x19a>
c00123de:	83 c8 02             	or     eax,0x2
c00123e1:	f6 c2 04             	test   dl,0x4
c00123e4:	74 03                	je     c00123e9 <SysOpen(regs*)+0x1a2>
c00123e6:	83 c8 04             	or     eax,0x4
c00123e9:	f6 c2 08             	test   dl,0x8
c00123ec:	74 03                	je     c00123f1 <SysOpen(regs*)+0x1aa>
c00123ee:	83 c8 0a             	or     eax,0xa
c00123f1:	80 e2 10             	and    dl,0x10
c00123f4:	74 03                	je     c00123f9 <SysOpen(regs*)+0x1b2>
c00123f6:	83 c8 12             	or     eax,0x12
c00123f9:	83 ec 08             	sub    esp,0x8
c00123fc:	50                   	push   eax
c00123fd:	56                   	push   esi
c00123fe:	e8 7f 93 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0012403:	83 c4 10             	add    esp,0x10
c0012406:	85 c0                	test   eax,eax
c0012408:	75 1c                	jne    c0012426 <SysOpen(regs*)+0x1df>
c001240a:	83 ec 0c             	sub    esp,0xc
c001240d:	56                   	push   esi
c001240e:	e8 8b 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012413:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	89 02                	mov    DWORD PTR [edx],eax
c001241b:	c1 f8 1f             	sar    eax,0x1f
c001241e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012421:	e9 ba fe ff ff       	jmp    c00122e0 <SysOpen(regs*)+0x99>
c0012426:	81 c4 04 01 00 00    	add    esp,0x104
c001242c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012431:	5b                   	pop    ebx
c0012432:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012437:	5e                   	pop    esi
c0012438:	c3                   	ret    
c0012439:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001243c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012442:	e9 92 fe ff ff       	jmp    c00122d9 <SysOpen(regs*)+0x92>

c0012447 <KeSystemCall(regs*, void*)>:
c0012447:	53                   	push   ebx
c0012448:	83 ec 08             	sub    esp,0x8
c001244b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001244f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012452:	83 f8 3b             	cmp    eax,0x3b
c0012455:	77 16                	ja     c001246d <KeSystemCall(regs*, void*)+0x26>
c0012457:	8b 14 85 80 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce80]
c001245e:	85 d2                	test   edx,edx
c0012460:	74 0b                	je     c001246d <KeSystemCall(regs*, void*)+0x26>
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	53                   	push   ebx
c0012466:	ff d2                	call   edx
c0012468:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001246b:	eb 0d                	jmp    c001247a <KeSystemCall(regs*, void*)+0x33>
c001246d:	52                   	push   edx
c001246e:	52                   	push   edx
c001246f:	50                   	push   eax
c0012470:	68 6f 1d 02 c0       	push   0xc0021d6f
c0012475:	e8 90 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001247a:	83 c4 10             	add    esp,0x10
c001247d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012482:	83 c4 08             	add    esp,0x8
c0012485:	31 d2                	xor    edx,edx
c0012487:	5b                   	pop    ebx
c0012488:	c3                   	ret    
c0012489:	66 90                	xchg   ax,ax
c001248b:	90                   	nop

c001248c <KeSwitchEndian16(unsigned short)>:
c001248c:	83 ec 04             	sub    esp,0x4
c001248f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012493:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012497:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001249b:	c1 f8 08             	sar    eax,0x8
c001249e:	89 c2                	mov    edx,eax
c00124a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124a4:	c1 e0 08             	shl    eax,0x8
c00124a7:	09 d0                	or     eax,edx
c00124a9:	83 c4 04             	add    esp,0x4
c00124ac:	c3                   	ret    
c00124ad:	8d 76 00             	lea    esi,[esi+0x0]

c00124b0 <KeSwitchEndian32(unsigned int)>:
c00124b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124b4:	c1 e8 18             	shr    eax,0x18
c00124b7:	89 c2                	mov    edx,eax
c00124b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124bd:	c1 e0 08             	shl    eax,0x8
c00124c0:	25 00 00 ff 00       	and    eax,0xff0000
c00124c5:	09 c2                	or     edx,eax
c00124c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124cb:	c1 e8 08             	shr    eax,0x8
c00124ce:	25 00 ff 00 00       	and    eax,0xff00
c00124d3:	09 c2                	or     edx,eax
c00124d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d9:	c1 e0 18             	shl    eax,0x18
c00124dc:	09 d0                	or     eax,edx
c00124de:	c3                   	ret    
c00124df:	90                   	nop

c00124e0 <EthernetCRC32(unsigned char*, int)>:
c00124e0:	83 ec 10             	sub    esp,0x10
c00124e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00124e8:	75 0a                	jne    c00124f4 <EthernetCRC32(unsigned char*, int)+0x14>
c00124ea:	b8 00 00 00 00       	mov    eax,0x0
c00124ef:	e9 8c 00 00 00       	jmp    c0012580 <EthernetCRC32(unsigned char*, int)+0xa0>
c00124f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00124f9:	7f 09                	jg     c0012504 <EthernetCRC32(unsigned char*, int)+0x24>
c00124fb:	b8 00 00 00 00       	mov    eax,0x0
c0012500:	eb 7e                	jmp    c0012580 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012502:	66 90                	xchg   ax,ax
c0012504:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001250c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012518:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001251c:	7d 5a                	jge    c0012578 <EthernetCRC32(unsigned char*, int)+0x98>
c001251e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012522:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012526:	01 d0                	add    eax,edx
c0012528:	8a 00                	mov    al,BYTE PTR [eax]
c001252a:	0f b6 c0             	movzx  eax,al
c001252d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012531:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012539:	8d 76 00             	lea    esi,[esi+0x0]
c001253c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012541:	7f 2d                	jg     c0012570 <EthernetCRC32(unsigned char*, int)+0x90>
c0012543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012547:	83 e0 01             	and    eax,0x1
c001254a:	74 10                	je     c001255c <EthernetCRC32(unsigned char*, int)+0x7c>
c001254c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012550:	d1 e8                	shr    eax,1
c0012552:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012557:	eb 0b                	jmp    c0012564 <EthernetCRC32(unsigned char*, int)+0x84>
c0012559:	8d 76 00             	lea    esi,[esi+0x0]
c001255c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012560:	d1 e8                	shr    eax,1
c0012562:	66 90                	xchg   ax,ax
c0012564:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012568:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001256d:	eb cd                	jmp    c001253c <EthernetCRC32(unsigned char*, int)+0x5c>
c001256f:	90                   	nop
c0012570:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012575:	eb 9d                	jmp    c0012514 <EthernetCRC32(unsigned char*, int)+0x34>
c0012577:	90                   	nop
c0012578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001257c:	f7 d0                	not    eax
c001257e:	66 90                	xchg   ax,ax
c0012580:	83 c4 10             	add    esp,0x10
c0012583:	c3                   	ret    

c0012584 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012584:	83 ec 2c             	sub    esp,0x2c
c0012587:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001258b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012594:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012598:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001259c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001259f:	0f b7 c0             	movzx  eax,ax
c00125a2:	3d 06 08 00 00       	cmp    eax,0x806
c00125a7:	75 13                	jne    c00125bc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00125a9:	83 ec 0c             	sub    esp,0xc
c00125ac:	68 83 1d 02 c0       	push   0xc0021d83
c00125b1:	e8 54 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125b6:	83 c4 10             	add    esp,0x10
c00125b9:	eb 25                	jmp    c00125e0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125bb:	90                   	nop
c00125bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125c3:	0f b7 c0             	movzx  eax,ax
c00125c6:	3d 00 08 00 00       	cmp    eax,0x800
c00125cb:	75 13                	jne    c00125e0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	68 99 1d 02 c0       	push   0xc0021d99
c00125d5:	e8 30 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	8d 76 00             	lea    esi,[esi+0x0]
c00125e0:	90                   	nop
c00125e1:	83 c4 2c             	add    esp,0x2c
c00125e4:	c3                   	ret    

c00125e5 <CmOpen(char const*)>:
c00125e5:	57                   	push   edi
c00125e6:	56                   	push   esi
c00125e7:	53                   	push   ebx
c00125e8:	83 ec 1c             	sub    esp,0x1c
c00125eb:	6a 30                	push   0x30
c00125ed:	e8 e1 54 ff ff       	call   c0007ad3 <malloc>
c00125f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00125f9:	89 c3                	mov    ebx,eax
c00125fb:	e8 d3 54 ff ff       	call   c0007ad3 <malloc>
c0012600:	83 c4 0c             	add    esp,0xc
c0012603:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0012609:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001260d:	89 c6                	mov    esi,eax
c001260f:	50                   	push   eax
c0012610:	e8 b1 90 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0012615:	83 c4 0c             	add    esp,0xc
c0012618:	89 33                	mov    DWORD PTR [ebx],esi
c001261a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001261e:	50                   	push   eax
c001261f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012623:	50                   	push   eax
c0012624:	56                   	push   esi
c0012625:	e8 5a 94 ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c001262a:	5a                   	pop    edx
c001262b:	59                   	pop    ecx
c001262c:	6a 01                	push   0x1
c001262e:	ff 33                	push   DWORD PTR [ebx]
c0012630:	e8 4d 91 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0012635:	5e                   	pop    esi
c0012636:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001263a:	e8 94 54 ff ff       	call   c0007ad3 <malloc>
c001263f:	5a                   	pop    edx
c0012640:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012644:	89 c7                	mov    edi,eax
c0012646:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012648:	8b 10                	mov    edx,DWORD PTR [eax]
c001264a:	56                   	push   esi
c001264b:	57                   	push   edi
c001264c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012650:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012654:	50                   	push   eax
c0012655:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012658:	83 c4 14             	add    esp,0x14
c001265b:	ff 33                	push   DWORD PTR [ebx]
c001265d:	e8 7e 91 ff ff       	call   c000b7e0 <File::close()>
c0012662:	59                   	pop    ecx
c0012663:	58                   	pop    eax
c0012664:	6a 13                	push   0x13
c0012666:	ff 33                	push   DWORD PTR [ebx]
c0012668:	e8 15 91 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c001266d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001266f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012671:	89 34 24             	mov    DWORD PTR [esp],esi
c0012674:	57                   	push   edi
c0012675:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012679:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001267d:	50                   	push   eax
c001267e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012681:	83 c4 14             	add    esp,0x14
c0012684:	57                   	push   edi
c0012685:	e8 59 54 ff ff       	call   c0007ae3 <free>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012690:	75 10                	jne    c00126a2 <CmOpen(char const*)+0xbd>
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	68 ae 1d 02 c0       	push   0xc0021dae
c001269a:	e8 ae ea ff ff       	call   c001114d <KePanic(char const*)>
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	50                   	push   eax
c00126a3:	6a 00                	push   0x0
c00126a5:	6a 00                	push   0x0
c00126a7:	ff 33                	push   DWORD PTR [ebx]
c00126a9:	8d 7b 05             	lea    edi,[ebx+0x5]
c00126ac:	e8 8f 91 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00126b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00126b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00126b8:	57                   	push   edi
c00126b9:	6a 00                	push   0x0
c00126bb:	6a 2b                	push   0x2b
c00126bd:	50                   	push   eax
c00126be:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126c1:	83 c4 1c             	add    esp,0x1c
c00126c4:	6a 00                	push   0x0
c00126c6:	6a 00                	push   0x0
c00126c8:	ff 33                	push   DWORD PTR [ebx]
c00126ca:	e8 71 91 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00126cf:	83 c4 0c             	add    esp,0xc
c00126d2:	6a 08                	push   0x8
c00126d4:	68 bf 1d 02 c0       	push   0xc0021dbf
c00126d9:	57                   	push   edi
c00126da:	e8 a1 dc fe ff       	call   c0000380 <memcmp>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	85 c0                	test   eax,eax
c00126e4:	74 10                	je     c00126f6 <CmOpen(char const*)+0x111>
c00126e6:	83 ec 0c             	sub    esp,0xc
c00126e9:	68 c8 1d 02 c0       	push   0xc0021dc8
c00126ee:	e8 5a ea ff ff       	call   c001114d <KePanic(char const*)>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00126fa:	83 c4 10             	add    esp,0x10
c00126fd:	89 d8                	mov    eax,ebx
c00126ff:	5b                   	pop    ebx
c0012700:	5e                   	pop    esi
c0012701:	5f                   	pop    edi
c0012702:	c3                   	ret    

c0012703 <CmClose(Reghive_Tag*)>:
c0012703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012707:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001270b:	74 0b                	je     c0012718 <CmClose(Reghive_Tag*)+0x15>
c001270d:	8b 00                	mov    eax,DWORD PTR [eax]
c001270f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012713:	e9 c8 90 ff ff       	jmp    c000b7e0 <File::close()>
c0012718:	c3                   	ret    

c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012719:	53                   	push   ebx
c001271a:	83 ec 18             	sub    esp,0x18
c001271d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012721:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012725:	74 29                	je     c0012750 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012727:	50                   	push   eax
c0012728:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001272d:	99                   	cdq    
c001272e:	52                   	push   edx
c001272f:	50                   	push   eax
c0012730:	ff 33                	push   DWORD PTR [ebx]
c0012732:	e8 09 91 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0012737:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012739:	5a                   	pop    edx
c001273a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001273e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012740:	51                   	push   ecx
c0012741:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012745:	6a 00                	push   0x0
c0012747:	6a 2b                	push   0x2b
c0012749:	50                   	push   eax
c001274a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001274d:	83 c4 20             	add    esp,0x20
c0012750:	83 c4 18             	add    esp,0x18
c0012753:	5b                   	pop    ebx
c0012754:	c3                   	ret    

c0012755 <CmGetString(Reghive_Tag*, int, char*)>:
c0012755:	55                   	push   ebp
c0012756:	57                   	push   edi
c0012757:	56                   	push   esi
c0012758:	53                   	push   ebx
c0012759:	31 db                	xor    ebx,ebx
c001275b:	83 ec 70             	sub    esp,0x70
c001275e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012762:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012769:	50                   	push   eax
c001276a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012771:	55                   	push   ebp
c0012772:	e8 a2 ff ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001277f:	c1 e0 08             	shl    eax,0x8
c0012782:	89 c2                	mov    edx,eax
c0012784:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012789:	09 d0                	or     eax,edx
c001278b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012790:	c1 e0 08             	shl    eax,0x8
c0012793:	09 d0                	or     eax,edx
c0012795:	74 25                	je     c00127bc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012797:	52                   	push   edx
c0012798:	8d 54 24 39          	lea    edx,[esp+0x39]
c001279c:	52                   	push   edx
c001279d:	6b fb 0d             	imul   edi,ebx,0xd
c00127a0:	50                   	push   eax
c00127a1:	55                   	push   ebp
c00127a2:	e8 72 ff ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127a7:	8d 74 24 49          	lea    esi,[esp+0x49]
c00127ab:	b9 27 00 00 00       	mov    ecx,0x27
c00127b0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00127b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	83 c3 03             	add    ebx,0x3
c00127bf:	83 fb 15             	cmp    ebx,0x15
c00127c2:	75 b6                	jne    c001277a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00127c4:	83 c4 6c             	add    esp,0x6c
c00127c7:	5b                   	pop    ebx
c00127c8:	5e                   	pop    esi
c00127c9:	5f                   	pop    edi
c00127ca:	5d                   	pop    ebp
c00127cb:	c3                   	ret    

c00127cc <CmEnterDirectory(Reghive_Tag*, int)>:
c00127cc:	83 ec 40             	sub    esp,0x40
c00127cf:	8d 44 24 09          	lea    eax,[esp+0x9]
c00127d3:	50                   	push   eax
c00127d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127dc:	e8 38 ff ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	83 c8 ff             	or     eax,0xffffffff
c00127e7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00127ec:	75 19                	jne    c0012807 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00127ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00127f3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00127f8:	c1 e0 08             	shl    eax,0x8
c00127fb:	09 c2                	or     edx,eax
c00127fd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012802:	c1 e0 10             	shl    eax,0x10
c0012805:	09 d0                	or     eax,edx
c0012807:	83 c4 3c             	add    esp,0x3c
c001280a:	c3                   	ret    

c001280b <CmGetNext(Reghive_Tag*, int)>:
c001280b:	83 ec 40             	sub    esp,0x40
c001280e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012812:	50                   	push   eax
c0012813:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012817:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001281b:	e8 f9 fe ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012820:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012825:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001282a:	c1 e0 08             	shl    eax,0x8
c001282d:	09 c2                	or     edx,eax
c001282f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012834:	83 c4 4c             	add    esp,0x4c
c0012837:	c1 e0 10             	shl    eax,0x10
c001283a:	09 d0                	or     eax,edx
c001283c:	c3                   	ret    

c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001283d:	53                   	push   ebx
c001283e:	83 ec 18             	sub    esp,0x18
c0012841:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012845:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012849:	74 29                	je     c0012874 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001284b:	50                   	push   eax
c001284c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012851:	99                   	cdq    
c0012852:	52                   	push   edx
c0012853:	50                   	push   eax
c0012854:	ff 33                	push   DWORD PTR [ebx]
c0012856:	e8 e5 8f ff ff       	call   c000b840 <File::seek(unsigned long long)>
c001285b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001285d:	5a                   	pop    edx
c001285e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012862:	8b 10                	mov    edx,DWORD PTR [eax]
c0012864:	51                   	push   ecx
c0012865:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012869:	6a 00                	push   0x0
c001286b:	6a 2b                	push   0x2b
c001286d:	50                   	push   eax
c001286e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012871:	83 c4 20             	add    esp,0x20
c0012874:	83 c4 18             	add    esp,0x18
c0012877:	5b                   	pop    ebx
c0012878:	c3                   	ret    

c0012879 <CmFreeExtent(Reghive_Tag*, int)>:
c0012879:	53                   	push   ebx
c001287a:	83 ec 3c             	sub    esp,0x3c
c001287d:	6a 2b                	push   0x2b
c001287f:	6a 00                	push   0x0
c0012881:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012885:	53                   	push   ebx
c0012886:	e8 65 dc fe ff       	call   c00004f0 <memset>
c001288b:	83 c4 0c             	add    esp,0xc
c001288e:	53                   	push   ebx
c001288f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012893:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012897:	e8 a1 ff ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001289c:	83 c4 48             	add    esp,0x48
c001289f:	5b                   	pop    ebx
c00128a0:	c3                   	ret    

c00128a1 <CmUpdateHeader(Reghive_Tag*)>:
c00128a1:	83 ec 0c             	sub    esp,0xc
c00128a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128ac:	74 10                	je     c00128be <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00128ae:	52                   	push   edx
c00128af:	8d 50 05             	lea    edx,[eax+0x5]
c00128b2:	52                   	push   edx
c00128b3:	6a 00                	push   0x0
c00128b5:	50                   	push   eax
c00128b6:	e8 82 ff ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	83 c4 0c             	add    esp,0xc
c00128c1:	c3                   	ret    

c00128c2 <CmExpand(Reghive_Tag*, int)>:
c00128c2:	55                   	push   ebp
c00128c3:	57                   	push   edi
c00128c4:	83 cf ff             	or     edi,0xffffffff
c00128c7:	56                   	push   esi
c00128c8:	53                   	push   ebx
c00128c9:	83 ec 3c             	sub    esp,0x3c
c00128cc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00128d0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00128d4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128d8:	74 59                	je     c0012933 <CmExpand(Reghive_Tag*, int)+0x71>
c00128da:	50                   	push   eax
c00128db:	31 d2                	xor    edx,edx
c00128dd:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00128e1:	31 ff                	xor    edi,edi
c00128e3:	52                   	push   edx
c00128e4:	50                   	push   eax
c00128e5:	ff 33                	push   DWORD PTR [ebx]
c00128e7:	e8 54 8f ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00128ec:	83 c4 0c             	add    esp,0xc
c00128ef:	6a 2b                	push   0x2b
c00128f1:	6a 00                	push   0x0
c00128f3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00128f7:	55                   	push   ebp
c00128f8:	e8 f3 db fe ff       	call   c00004f0 <memset>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	39 f7                	cmp    edi,esi
c0012902:	7d 1b                	jge    c001291f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012904:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012906:	83 ec 0c             	sub    esp,0xc
c0012909:	47                   	inc    edi
c001290a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001290e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012910:	51                   	push   ecx
c0012911:	55                   	push   ebp
c0012912:	6a 00                	push   0x0
c0012914:	6a 2b                	push   0x2b
c0012916:	50                   	push   eax
c0012917:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001291a:	83 c4 20             	add    esp,0x20
c001291d:	eb e1                	jmp    c0012900 <CmExpand(Reghive_Tag*, int)+0x3e>
c001291f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012922:	83 ec 0c             	sub    esp,0xc
c0012925:	01 fe                	add    esi,edi
c0012927:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001292a:	53                   	push   ebx
c001292b:	e8 71 ff ff ff       	call   c00128a1 <CmUpdateHeader(Reghive_Tag*)>
c0012930:	83 c4 10             	add    esp,0x10
c0012933:	83 c4 3c             	add    esp,0x3c
c0012936:	89 f8                	mov    eax,edi
c0012938:	5b                   	pop    ebx
c0012939:	5e                   	pop    esi
c001293a:	5f                   	pop    edi
c001293b:	5d                   	pop    ebp
c001293c:	c3                   	ret    

c001293d <CmFindUnusedExtent(Reghive_Tag*)>:
c001293d:	55                   	push   ebp
c001293e:	57                   	push   edi
c001293f:	56                   	push   esi
c0012940:	53                   	push   ebx
c0012941:	83 cb ff             	or     ebx,0xffffffff
c0012944:	83 ec 1c             	sub    esp,0x1c
c0012947:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001294b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001294f:	74 68                	je     c00129b9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012951:	51                   	push   ecx
c0012952:	be 2b 00 00 00       	mov    esi,0x2b
c0012957:	6a 00                	push   0x0
c0012959:	31 ff                	xor    edi,edi
c001295b:	6a 00                	push   0x0
c001295d:	31 db                	xor    ebx,ebx
c001295f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012962:	e8 d9 8e ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001296d:	76 3b                	jbe    c00129aa <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001296f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012972:	83 ec 0c             	sub    esp,0xc
c0012975:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012979:	8b 10                	mov    edx,DWORD PTR [eax]
c001297b:	51                   	push   ecx
c001297c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012980:	51                   	push   ecx
c0012981:	6a 00                	push   0x0
c0012983:	6a 01                	push   0x1
c0012985:	50                   	push   eax
c0012986:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012989:	83 c4 20             	add    esp,0x20
c001298c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012991:	74 26                	je     c00129b9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012993:	52                   	push   edx
c0012994:	43                   	inc    ebx
c0012995:	57                   	push   edi
c0012996:	56                   	push   esi
c0012997:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001299a:	e8 a1 8e ff ff       	call   c000b840 <File::seek(unsigned long long)>
c001299f:	83 c6 2b             	add    esi,0x2b
c00129a2:	83 d7 00             	adc    edi,0x0
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	eb c0                	jmp    c001296a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00129aa:	50                   	push   eax
c00129ab:	50                   	push   eax
c00129ac:	6a 40                	push   0x40
c00129ae:	55                   	push   ebp
c00129af:	e8 0e ff ff ff       	call   c00128c2 <CmExpand(Reghive_Tag*, int)>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	89 c3                	mov    ebx,eax
c00129b9:	83 c4 1c             	add    esp,0x1c
c00129bc:	89 d8                	mov    eax,ebx
c00129be:	5b                   	pop    ebx
c00129bf:	5e                   	pop    esi
c00129c0:	5f                   	pop    edi
c00129c1:	5d                   	pop    ebp
c00129c2:	c3                   	ret    

c00129c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00129c3:	55                   	push   ebp
c00129c4:	57                   	push   edi
c00129c5:	56                   	push   esi
c00129c6:	53                   	push   ebx
c00129c7:	81 ec 88 00 00 00    	sub    esp,0x88
c00129cd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00129d4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00129db:	e8 5d ff ff ff       	call   c001293d <CmFindUnusedExtent(Reghive_Tag*)>
c00129e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129e4:	83 c4 0c             	add    esp,0xc
c00129e7:	6a 2b                	push   0x2b
c00129e9:	6a 00                	push   0x0
c00129eb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00129ef:	55                   	push   ebp
c00129f0:	e8 fb da fe ff       	call   c00004f0 <memset>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	85 db                	test   ebx,ebx
c00129fa:	74 12                	je     c0012a0e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00129fc:	51                   	push   ecx
c00129fd:	55                   	push   ebp
c00129fe:	53                   	push   ebx
c00129ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a06:	e8 0e fd ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a12:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012a19:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012a1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a20:	85 db                	test   ebx,ebx
c0012a22:	74 49                	je     c0012a6d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012a24:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012a29:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012a2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a32:	c1 e0 08             	shl    eax,0x8
c0012a35:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012a3b:	09 c8                	or     eax,ecx
c0012a3d:	74 11                	je     c0012a50 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012a3f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012a43:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012a47:	c1 e8 10             	shr    eax,0x10
c0012a4a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012a4e:	eb 0f                	jmp    c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012a50:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a55:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a5a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012a5f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012a63:	c1 ea 08             	shr    edx,0x8
c0012a66:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012a6b:	eb 0f                	jmp    c0012a7c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012a6d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a72:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a77:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012a7c:	52                   	push   edx
c0012a7d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012a81:	50                   	push   eax
c0012a82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a86:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a8d:	e8 ab fd ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	85 db                	test   ebx,ebx
c0012a97:	74 12                	je     c0012aab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012a99:	50                   	push   eax
c0012a9a:	55                   	push   ebp
c0012a9b:	53                   	push   ebx
c0012a9c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012aa3:	e8 95 fd ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012aa8:	83 c4 10             	add    esp,0x10
c0012aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012aaf:	83 c4 7c             	add    esp,0x7c
c0012ab2:	5b                   	pop    ebx
c0012ab3:	5e                   	pop    esi
c0012ab4:	5f                   	pop    edi
c0012ab5:	5d                   	pop    ebp
c0012ab6:	c3                   	ret    

c0012ab7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012ab7:	55                   	push   ebp
c0012ab8:	57                   	push   edi
c0012ab9:	56                   	push   esi
c0012aba:	53                   	push   ebx
c0012abb:	bb 27 00 00 00       	mov    ebx,0x27
c0012ac0:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ac6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012acd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012ad4:	e8 a7 da fe ff       	call   c0000580 <strlen>
c0012ad9:	8d 48 26             	lea    ecx,[eax+0x26]
c0012adc:	89 c8                	mov    eax,ecx
c0012ade:	99                   	cdq    
c0012adf:	f7 fb                	idiv   ebx
c0012ae1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012aee:	7e 10                	jle    c0012b00 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	68 d9 1d 02 c0       	push   0xc0021dd9
c0012af8:	e8 50 e6 ff ff       	call   c001114d <KePanic(char const*)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	53                   	push   ebx
c0012b01:	31 ed                	xor    ebp,ebp
c0012b03:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b07:	53                   	push   ebx
c0012b08:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b0f:	57                   	push   edi
c0012b10:	e8 04 fc ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012b1c:	89 f0                	mov    eax,esi
c0012b1e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012b22:	c1 e0 08             	shl    eax,0x8
c0012b25:	09 c6                	or     esi,eax
c0012b27:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012b2b:	c1 e6 08             	shl    esi,0x8
c0012b2e:	09 c6                	or     esi,eax
c0012b30:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012b34:	7e 72                	jle    c0012ba8 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012b36:	85 f6                	test   esi,esi
c0012b38:	75 25                	jne    c0012b5f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012b3a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012b3f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012b43:	50                   	push   eax
c0012b44:	6a 00                	push   0x0
c0012b46:	6a 00                	push   0x0
c0012b48:	57                   	push   edi
c0012b49:	e8 75 fe ff ff       	call   c00129c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b4e:	83 c4 10             	add    esp,0x10
c0012b51:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012b54:	89 c6                	mov    esi,eax
c0012b56:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012b59:	c1 f8 10             	sar    eax,0x10
c0012b5c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012b5f:	51                   	push   ecx
c0012b60:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012b64:	52                   	push   edx
c0012b65:	56                   	push   esi
c0012b66:	57                   	push   edi
c0012b67:	e8 ad fb ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b6c:	83 c4 0c             	add    esp,0xc
c0012b6f:	6a 27                	push   0x27
c0012b71:	6a 00                	push   0x0
c0012b73:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012b77:	51                   	push   ecx
c0012b78:	e8 73 d9 fe ff       	call   c00004f0 <memset>
c0012b7d:	6b c5 27             	imul   eax,ebp,0x27
c0012b80:	83 c4 0c             	add    esp,0xc
c0012b83:	6a 27                	push   0x27
c0012b85:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012b8c:	50                   	push   eax
c0012b8d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012b91:	51                   	push   ecx
c0012b92:	e8 f9 da fe ff       	call   c0000690 <strncpy>
c0012b97:	83 c4 0c             	add    esp,0xc
c0012b9a:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012b9e:	52                   	push   edx
c0012b9f:	56                   	push   esi
c0012ba0:	57                   	push   edi
c0012ba1:	e8 97 fc ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba6:	eb 19                	jmp    c0012bc1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012ba8:	85 f6                	test   esi,esi
c0012baa:	74 18                	je     c0012bc4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012bac:	52                   	push   edx
c0012bad:	52                   	push   edx
c0012bae:	56                   	push   esi
c0012baf:	57                   	push   edi
c0012bb0:	e8 c4 fc ff ff       	call   c0012879 <CmFreeExtent(Reghive_Tag*, int)>
c0012bb5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012bb9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012bbd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012bc1:	83 c4 10             	add    esp,0x10
c0012bc4:	45                   	inc    ebp
c0012bc5:	83 c3 03             	add    ebx,0x3
c0012bc8:	83 fd 07             	cmp    ebp,0x7
c0012bcb:	0f 85 47 ff ff ff    	jne    c0012b18 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012bd1:	50                   	push   eax
c0012bd2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012bd6:	50                   	push   eax
c0012bd7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bde:	57                   	push   edi
c0012bdf:	e8 59 fc ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012be4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012bea:	5b                   	pop    ebx
c0012beb:	5e                   	pop    esi
c0012bec:	5f                   	pop    edi
c0012bed:	5d                   	pop    ebp
c0012bee:	c3                   	ret    

c0012bef <CmGetMatch(char*, char*, bool, bool*)>:
c0012bef:	56                   	push   esi
c0012bf0:	53                   	push   ebx
c0012bf1:	50                   	push   eax
c0012bf2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012bf7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012bfb:	74 25                	je     c0012c22 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012bfd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c00:	31 db                	xor    ebx,ebx
c0012c02:	50                   	push   eax
c0012c03:	50                   	push   eax
c0012c04:	8d 04 9d 80 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd80]
c0012c0b:	50                   	push   eax
c0012c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c10:	e8 6b db fe ff       	call   c0000780 <strcmp>
c0012c15:	83 c4 10             	add    esp,0x10
c0012c18:	85 c0                	test   eax,eax
c0012c1a:	74 2e                	je     c0012c4a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c1c:	43                   	inc    ebx
c0012c1d:	83 fb 3f             	cmp    ebx,0x3f
c0012c20:	75 e0                	jne    c0012c02 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012c22:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012c25:	31 db                	xor    ebx,ebx
c0012c27:	51                   	push   ecx
c0012c28:	51                   	push   ecx
c0012c29:	8d 04 9d 80 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd80]
c0012c30:	50                   	push   eax
c0012c31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c35:	e8 46 db fe ff       	call   c0000780 <strcmp>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	85 c0                	test   eax,eax
c0012c3f:	74 09                	je     c0012c4a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c41:	43                   	inc    ebx
c0012c42:	83 fb 3f             	cmp    ebx,0x3f
c0012c45:	75 e0                	jne    c0012c27 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012c47:	83 cb ff             	or     ebx,0xffffffff
c0012c4a:	5a                   	pop    edx
c0012c4b:	89 d8                	mov    eax,ebx
c0012c4d:	5b                   	pop    ebx
c0012c4e:	5e                   	pop    esi
c0012c4f:	c3                   	ret    

c0012c50 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012c50:	55                   	push   ebp
c0012c51:	31 c0                	xor    eax,eax
c0012c53:	57                   	push   edi
c0012c54:	56                   	push   esi
c0012c55:	53                   	push   ebx
c0012c56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c5a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c66:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012c68:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012c6b:	83 fd 1f             	cmp    ebp,0x1f
c0012c6e:	7f 0b                	jg     c0012c7b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012c70:	0f b6 c2             	movzx  eax,dl
c0012c73:	d3 e0                	shl    eax,cl
c0012c75:	09 07                	or     DWORD PTR [edi],eax
c0012c77:	b0 01                	mov    al,0x1
c0012c79:	01 33                	add    DWORD PTR [ebx],esi
c0012c7b:	5b                   	pop    ebx
c0012c7c:	5e                   	pop    esi
c0012c7d:	5f                   	pop    edi
c0012c7e:	5d                   	pop    ebp
c0012c7f:	c3                   	ret    

c0012c80 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012c80:	57                   	push   edi
c0012c81:	56                   	push   esi
c0012c82:	53                   	push   ebx
c0012c83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012c8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012c8f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c93:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012c95:	7c 17                	jl     c0012cae <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012c97:	8b 17                	mov    edx,DWORD PTR [edi]
c0012c99:	b8 01 00 00 00       	mov    eax,0x1
c0012c9e:	d3 e0                	shl    eax,cl
c0012ca0:	48                   	dec    eax
c0012ca1:	21 d0                	and    eax,edx
c0012ca3:	d3 ea                	shr    edx,cl
c0012ca5:	89 17                	mov    DWORD PTR [edi],edx
c0012ca7:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012ca9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012cac:	eb 05                	jmp    c0012cb3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012cae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cb1:	31 c0                	xor    eax,eax
c0012cb3:	5b                   	pop    ebx
c0012cb4:	5e                   	pop    esi
c0012cb5:	5f                   	pop    edi
c0012cb6:	c3                   	ret    

c0012cb7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012cb7:	83 ec 40             	sub    esp,0x40
c0012cba:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012cbe:	50                   	push   eax
c0012cbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012cc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012cc7:	e8 4d fa ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ccc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012cd0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012cd4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012cd8:	89 10                	mov    DWORD PTR [eax],edx
c0012cda:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012cdd:	83 c4 4c             	add    esp,0x4c
c0012ce0:	c3                   	ret    

c0012ce1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012ce1:	55                   	push   ebp
c0012ce2:	57                   	push   edi
c0012ce3:	56                   	push   esi
c0012ce4:	53                   	push   ebx
c0012ce5:	83 ec 40             	sub    esp,0x40
c0012ce8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012cec:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012cf0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012cf4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012cf8:	53                   	push   ebx
c0012cf9:	56                   	push   esi
c0012cfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012cfe:	e8 16 fa ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d03:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d07:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d0b:	83 c4 0c             	add    esp,0xc
c0012d0e:	53                   	push   ebx
c0012d0f:	56                   	push   esi
c0012d10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d14:	e8 24 fb ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d19:	83 c4 4c             	add    esp,0x4c
c0012d1c:	5b                   	pop    ebx
c0012d1d:	5e                   	pop    esi
c0012d1e:	5f                   	pop    edi
c0012d1f:	5d                   	pop    ebp
c0012d20:	c3                   	ret    

c0012d21 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012d21:	55                   	push   ebp
c0012d22:	57                   	push   edi
c0012d23:	56                   	push   esi
c0012d24:	31 f6                	xor    esi,esi
c0012d26:	53                   	push   ebx
c0012d27:	31 db                	xor    ebx,ebx
c0012d29:	83 ec 40             	sub    esp,0x40
c0012d2c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d3c:	6a 12                	push   0x12
c0012d3e:	68 ee 00 00 00       	push   0xee
c0012d43:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012d47:	e8 a4 d7 fe ff       	call   c00004f0 <memset>
c0012d4c:	83 c4 10             	add    esp,0x10
c0012d4f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012d53:	6a 08                	push   0x8
c0012d55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d59:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012d5d:	50                   	push   eax
c0012d5e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d62:	55                   	push   ebp
c0012d63:	57                   	push   edi
c0012d64:	e8 e7 fe ff ff       	call   c0012c50 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012d69:	83 c4 10             	add    esp,0x10
c0012d6c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012d70:	50                   	push   eax
c0012d71:	6a 06                	push   0x6
c0012d73:	55                   	push   ebp
c0012d74:	57                   	push   edi
c0012d75:	e8 06 ff ff ff       	call   c0012c80 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d82:	74 07                	je     c0012d8b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012d84:	46                   	inc    esi
c0012d85:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012d89:	eb e1                	jmp    c0012d6c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012d8b:	43                   	inc    ebx
c0012d8c:	83 fb 12             	cmp    ebx,0x12
c0012d8f:	75 c2                	jne    c0012d53 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012d91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d95:	31 f6                	xor    esi,esi
c0012d97:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012d9a:	50                   	push   eax
c0012d9b:	50                   	push   eax
c0012d9c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012da1:	46                   	inc    esi
c0012da2:	8d 04 85 80 32 02 c0 	lea    eax,[eax*4-0x3ffdcd80]
c0012da9:	50                   	push   eax
c0012daa:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dae:	e8 bd da fe ff       	call   c0000870 <strcat>
c0012db3:	83 c4 10             	add    esp,0x10
c0012db6:	83 fe 18             	cmp    esi,0x18
c0012db9:	75 df                	jne    c0012d9a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012dbb:	83 c4 3c             	add    esp,0x3c
c0012dbe:	31 c0                	xor    eax,eax
c0012dc0:	5b                   	pop    ebx
c0012dc1:	5e                   	pop    esi
c0012dc2:	5f                   	pop    edi
c0012dc3:	5d                   	pop    ebp
c0012dc4:	c3                   	ret    

c0012dc5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012dc5:	83 ec 40             	sub    esp,0x40
c0012dc8:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dcc:	50                   	push   eax
c0012dcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dd5:	e8 3f f9 ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dda:	58                   	pop    eax
c0012ddb:	5a                   	pop    edx
c0012ddc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012de0:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012de4:	50                   	push   eax
c0012de5:	e8 37 ff ff ff       	call   c0012d21 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012dea:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012def:	83 c4 4c             	add    esp,0x4c
c0012df2:	c3                   	ret    

c0012df3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012df3:	55                   	push   ebp
c0012df4:	57                   	push   edi
c0012df5:	56                   	push   esi
c0012df6:	53                   	push   ebx
c0012df7:	31 db                	xor    ebx,ebx
c0012df9:	83 ec 70             	sub    esp,0x70
c0012dfc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e03:	6a 30                	push   0x30
c0012e05:	6a 00                	push   0x0
c0012e07:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e0b:	56                   	push   esi
c0012e0c:	e8 df d6 fe ff       	call   c00004f0 <memset>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	83 ec 0c             	sub    esp,0xc
c0012e17:	57                   	push   edi
c0012e18:	e8 63 d7 fe ff       	call   c0000580 <strlen>
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	39 d8                	cmp    eax,ebx
c0012e22:	76 16                	jbe    c0012e3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012e24:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	50                   	push   eax
c0012e2c:	e8 2f db fe ff       	call   c0000960 <toupper>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012e37:	43                   	inc    ebx
c0012e38:	eb da                	jmp    c0012e14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012e3a:	52                   	push   edx
c0012e3b:	31 db                	xor    ebx,ebx
c0012e3d:	6a 18                	push   0x18
c0012e3f:	31 ff                	xor    edi,edi
c0012e41:	6a 3f                	push   0x3f
c0012e43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e47:	50                   	push   eax
c0012e48:	e8 a3 d6 fe ff       	call   c00004f0 <memset>
c0012e4d:	83 c4 10             	add    esp,0x10
c0012e50:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012e54:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012e58:	84 c0                	test   al,al
c0012e5a:	0f 84 af 00 00 00    	je     c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012e60:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012e64:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e67:	83 ec 0c             	sub    esp,0xc
c0012e6a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012e6f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012e73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012e77:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012e7c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012e80:	56                   	push   esi
c0012e81:	e8 fa d6 fe ff       	call   c0000580 <strlen>
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	85 c0                	test   eax,eax
c0012e8b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e8f:	74 0b                	je     c0012e9c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012e91:	50                   	push   eax
c0012e92:	6a 01                	push   0x1
c0012e94:	56                   	push   esi
c0012e95:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e99:	50                   	push   eax
c0012e9a:	eb 0a                	jmp    c0012ea6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012e9c:	50                   	push   eax
c0012e9d:	6a 00                	push   0x0
c0012e9f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012ea3:	50                   	push   eax
c0012ea4:	6a 00                	push   0x0
c0012ea6:	e8 44 fd ff ff       	call   c0012bef <CmGetMatch(char*, char*, bool, bool*)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	83 f8 ff             	cmp    eax,0xffffffff
c0012eb1:	75 1a                	jne    c0012ecd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012eb3:	83 ec 0c             	sub    esp,0xc
c0012eb6:	68 ee 1d 02 c0       	push   0xc0021dee
c0012ebb:	e8 8d e2 ff ff       	call   c001114d <KePanic(char const*)>
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	b8 02 00 00 00       	mov    eax,0x2
c0012ec8:	e9 bb 00 00 00       	jmp    c0012f88 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012ecd:	83 ff 18             	cmp    edi,0x18
c0012ed0:	75 1a                	jne    c0012eec <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012ed2:	83 ec 0c             	sub    esp,0xc
c0012ed5:	68 03 1e 02 c0       	push   0xc0021e03
c0012eda:	e8 6e e2 ff ff       	call   c001114d <KePanic(char const*)>
c0012edf:	83 c4 10             	add    esp,0x10
c0012ee2:	b8 01 00 00 00       	mov    eax,0x1
c0012ee7:	e9 9c 00 00 00       	jmp    c0012f88 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012eec:	47                   	inc    edi
c0012eed:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ef2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012ef6:	0f 45 dd             	cmovne ebx,ebp
c0012ef9:	83 ec 0c             	sub    esp,0xc
c0012efc:	56                   	push   esi
c0012efd:	e8 7e d6 fe ff       	call   c0000580 <strlen>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	85 c0                	test   eax,eax
c0012f07:	74 06                	je     c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f09:	43                   	inc    ebx
c0012f0a:	e9 41 ff ff ff       	jmp    c0012e50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f0f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012f17:	31 db                	xor    ebx,ebx
c0012f19:	31 ff                	xor    edi,edi
c0012f1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f23:	50                   	push   eax
c0012f24:	6a 12                	push   0x12
c0012f26:	68 ee 00 00 00       	push   0xee
c0012f2b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012f32:	e8 b9 d5 fe ff       	call   c00004f0 <memset>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012f3e:	83 fb 17             	cmp    ebx,0x17
c0012f41:	7e 26                	jle    c0012f69 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012f43:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f47:	50                   	push   eax
c0012f48:	6a 08                	push   0x8
c0012f4a:	55                   	push   ebp
c0012f4b:	56                   	push   esi
c0012f4c:	e8 2f fd ff ff       	call   c0012c80 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f59:	74 26                	je     c0012f81 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012f5b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012f62:	4b                   	dec    ebx
c0012f63:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012f66:	47                   	inc    edi
c0012f67:	eb 1c                	jmp    c0012f85 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012f69:	6a 06                	push   0x6
c0012f6b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012f70:	50                   	push   eax
c0012f71:	55                   	push   ebp
c0012f72:	56                   	push   esi
c0012f73:	e8 d8 fc ff ff       	call   c0012c50 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	84 c0                	test   al,al
c0012f7d:	75 06                	jne    c0012f85 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012f7f:	eb c2                	jmp    c0012f43 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012f81:	31 c0                	xor    eax,eax
c0012f83:	eb 03                	jmp    c0012f88 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f85:	43                   	inc    ebx
c0012f86:	eb b2                	jmp    c0012f3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012f88:	83 c4 6c             	add    esp,0x6c
c0012f8b:	5b                   	pop    ebx
c0012f8c:	5e                   	pop    esi
c0012f8d:	5f                   	pop    edi
c0012f8e:	5d                   	pop    ebp
c0012f8f:	c3                   	ret    

c0012f90 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012f90:	53                   	push   ebx
c0012f91:	83 ec 3c             	sub    esp,0x3c
c0012f94:	6a 2b                	push   0x2b
c0012f96:	6a 00                	push   0x0
c0012f98:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f9c:	53                   	push   ebx
c0012f9d:	e8 4e d5 fe ff       	call   c00004f0 <memset>
c0012fa2:	58                   	pop    eax
c0012fa3:	5a                   	pop    edx
c0012fa4:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012fa8:	50                   	push   eax
c0012fa9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012fad:	e8 41 fe ff ff       	call   c0012df3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012fb2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012fb7:	83 c4 0c             	add    esp,0xc
c0012fba:	6a 15                	push   0x15
c0012fbc:	6a 00                	push   0x0
c0012fbe:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012fc2:	50                   	push   eax
c0012fc3:	e8 28 d5 fe ff       	call   c00004f0 <memset>
c0012fc8:	53                   	push   ebx
c0012fc9:	6a 00                	push   0x0
c0012fcb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fcf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fd3:	e8 eb f9 ff ff       	call   c00129c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012fd8:	83 c4 58             	add    esp,0x58
c0012fdb:	5b                   	pop    ebx
c0012fdc:	c3                   	ret    

c0012fdd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012fdd:	56                   	push   esi
c0012fde:	53                   	push   ebx
c0012fdf:	83 ec 48             	sub    esp,0x48
c0012fe2:	6a 12                	push   0x12
c0012fe4:	68 ff 00 00 00       	push   0xff
c0012fe9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012fed:	56                   	push   esi
c0012fee:	e8 fd d4 fe ff       	call   c00004f0 <memset>
c0012ff3:	5a                   	pop    edx
c0012ff4:	59                   	pop    ecx
c0012ff5:	56                   	push   esi
c0012ff6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012ffa:	e8 f4 fd ff ff       	call   c0012df3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012fff:	83 c4 10             	add    esp,0x10
c0013002:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013006:	85 db                	test   ebx,ebx
c0013008:	74 42                	je     c001304c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001300a:	50                   	push   eax
c001300b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001300f:	50                   	push   eax
c0013010:	53                   	push   ebx
c0013011:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013015:	e8 ff f6 ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001301a:	83 c4 0c             	add    esp,0xc
c001301d:	6a 12                	push   0x12
c001301f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013023:	50                   	push   eax
c0013024:	56                   	push   esi
c0013025:	e8 56 d3 fe ff       	call   c0000380 <memcmp>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	85 c0                	test   eax,eax
c001302f:	74 1e                	je     c001304f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013031:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013036:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001303b:	c1 e3 08             	shl    ebx,0x8
c001303e:	09 d8                	or     eax,ebx
c0013040:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013045:	c1 e3 10             	shl    ebx,0x10
c0013048:	09 c3                	or     ebx,eax
c001304a:	eb ba                	jmp    c0013006 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001304c:	83 cb ff             	or     ebx,0xffffffff
c001304f:	83 c4 44             	add    esp,0x44
c0013052:	89 d8                	mov    eax,ebx
c0013054:	5b                   	pop    ebx
c0013055:	5e                   	pop    esi
c0013056:	c3                   	ret    

c0013057 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013057:	57                   	push   edi
c0013058:	56                   	push   esi
c0013059:	53                   	push   ebx
c001305a:	83 ec 34             	sub    esp,0x34
c001305d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013061:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013065:	6a 2b                	push   0x2b
c0013067:	6a 00                	push   0x0
c0013069:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001306d:	53                   	push   ebx
c001306e:	e8 7d d4 fe ff       	call   c00004f0 <memset>
c0013073:	58                   	pop    eax
c0013074:	5a                   	pop    edx
c0013075:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013079:	50                   	push   eax
c001307a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001307e:	e8 70 fd ff ff       	call   c0012df3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013083:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013087:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001308b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001308f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013093:	53                   	push   ebx
c0013094:	6a 00                	push   0x0
c0013096:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001309a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001309e:	e8 20 f9 ff ff       	call   c00129c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130a3:	83 c4 50             	add    esp,0x50
c00130a6:	5b                   	pop    ebx
c00130a7:	5e                   	pop    esi
c00130a8:	5f                   	pop    edi
c00130a9:	c3                   	ret    

c00130aa <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00130aa:	55                   	push   ebp
c00130ab:	57                   	push   edi
c00130ac:	56                   	push   esi
c00130ad:	53                   	push   ebx
c00130ae:	83 ec 40             	sub    esp,0x40
c00130b1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00130b5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130b9:	6a 2b                	push   0x2b
c00130bb:	6a 00                	push   0x0
c00130bd:	8d 74 24 11          	lea    esi,[esp+0x11]
c00130c1:	56                   	push   esi
c00130c2:	e8 29 d4 fe ff       	call   c00004f0 <memset>
c00130c7:	5f                   	pop    edi
c00130c8:	89 ef                	mov    edi,ebp
c00130ca:	58                   	pop    eax
c00130cb:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130cf:	50                   	push   eax
c00130d0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130d4:	e8 1a fd ff ff       	call   c0012df3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130d9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00130de:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00130e3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00130e8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	85 ed                	test   ebp,ebp
c00130f2:	74 14                	je     c0013108 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00130f4:	51                   	push   ecx
c00130f5:	51                   	push   ecx
c00130f6:	57                   	push   edi
c00130f7:	53                   	push   ebx
c00130f8:	e8 0e f7 ff ff       	call   c001280b <CmGetNext(Reghive_Tag*, int)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	85 c0                	test   eax,eax
c0013102:	74 04                	je     c0013108 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013104:	89 c7                	mov    edi,eax
c0013106:	eb e8                	jmp    c00130f0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013108:	56                   	push   esi
c0013109:	6a 00                	push   0x0
c001310b:	57                   	push   edi
c001310c:	53                   	push   ebx
c001310d:	e8 b1 f8 ff ff       	call   c00129c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013112:	83 c4 0c             	add    esp,0xc
c0013115:	56                   	push   esi
c0013116:	50                   	push   eax
c0013117:	89 c7                	mov    edi,eax
c0013119:	53                   	push   ebx
c001311a:	e8 fa f5 ff ff       	call   c0012719 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001311f:	58                   	pop    eax
c0013120:	5a                   	pop    edx
c0013121:	6a 6c                	push   0x6c
c0013123:	6a 00                	push   0x0
c0013125:	6a 00                	push   0x0
c0013127:	68 14 1e 02 c0       	push   0xc0021e14
c001312c:	57                   	push   edi
c001312d:	53                   	push   ebx
c001312e:	e8 24 ff ff ff       	call   c0013057 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013133:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013137:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001313b:	c1 e8 10             	shr    eax,0x10
c001313e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013142:	83 c4 1c             	add    esp,0x1c
c0013145:	56                   	push   esi
c0013146:	57                   	push   edi
c0013147:	53                   	push   ebx
c0013148:	e8 f0 f6 ff ff       	call   c001283d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001314d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013152:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013157:	c1 e0 08             	shl    eax,0x8
c001315a:	09 c2                	or     edx,eax
c001315c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013161:	83 c4 4c             	add    esp,0x4c
c0013164:	5b                   	pop    ebx
c0013165:	5e                   	pop    esi
c0013166:	c1 e0 10             	shl    eax,0x10
c0013169:	09 d0                	or     eax,edx
c001316b:	5f                   	pop    edi
c001316c:	5d                   	pop    ebp
c001316d:	c3                   	ret    

c001316e <zStrtok(char*, char const*)>:
c001316e:	55                   	push   ebp
c001316f:	57                   	push   edi
c0013170:	56                   	push   esi
c0013171:	53                   	push   ebx
c0013172:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001317a:	85 db                	test   ebx,ebx
c001317c:	74 2f                	je     c00131ad <zStrtok(char*, char const*)+0x3f>
c001317e:	85 c0                	test   eax,eax
c0013180:	75 09                	jne    c001318b <zStrtok(char*, char const*)+0x1d>
c0013182:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c0013187:	85 c0                	test   eax,eax
c0013189:	74 50                	je     c00131db <zStrtok(char*, char const*)+0x6d>
c001318b:	31 c9                	xor    ecx,ecx
c001318d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013191:	74 03                	je     c0013196 <zStrtok(char*, char const*)+0x28>
c0013193:	41                   	inc    ecx
c0013194:	eb f7                	jmp    c001318d <zStrtok(char*, char const*)+0x1f>
c0013196:	31 d2                	xor    edx,edx
c0013198:	39 ca                	cmp    edx,ecx
c001319a:	74 15                	je     c00131b1 <zStrtok(char*, char const*)+0x43>
c001319c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00131a0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00131a3:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00131a6:	39 ee                	cmp    esi,ebp
c00131a8:	74 13                	je     c00131bd <zStrtok(char*, char const*)+0x4f>
c00131aa:	42                   	inc    edx
c00131ab:	eb eb                	jmp    c0013198 <zStrtok(char*, char const*)+0x2a>
c00131ad:	31 c0                	xor    eax,eax
c00131af:	eb 2a                	jmp    c00131db <zStrtok(char*, char const*)+0x6d>
c00131b1:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c00131bb:	eb 1e                	jmp    c00131db <zStrtok(char*, char const*)+0x6d>
c00131bd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00131c0:	39 ce                	cmp    esi,ecx
c00131c2:	75 0a                	jne    c00131ce <zStrtok(char*, char const*)+0x60>
c00131c4:	40                   	inc    eax
c00131c5:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c00131ca:	89 d8                	mov    eax,ebx
c00131cc:	eb 0d                	jmp    c00131db <zStrtok(char*, char const*)+0x6d>
c00131ce:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00131d1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00131d5:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c00131db:	5b                   	pop    ebx
c00131dc:	5e                   	pop    esi
c00131dd:	5f                   	pop    edi
c00131de:	5d                   	pop    ebp
c00131df:	c3                   	ret    

c00131e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00131e0:	57                   	push   edi
c00131e1:	56                   	push   esi
c00131e2:	53                   	push   ebx
c00131e3:	81 ec 08 01 00 00    	sub    esp,0x108
c00131e9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00131f0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00131f7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00131fb:	53                   	push   ebx
c00131fc:	e8 4f d4 fe ff       	call   c0000650 <strcpy>
c0013201:	59                   	pop    ecx
c0013202:	5e                   	pop    esi
c0013203:	68 78 21 02 c0       	push   0xc0022178
c0013208:	53                   	push   ebx
c0013209:	bb 01 00 00 00       	mov    ebx,0x1
c001320e:	e8 5b ff ff ff       	call   c001316e <zStrtok(char*, char const*)>
c0013213:	83 c4 10             	add    esp,0x10
c0013216:	85 c0                	test   eax,eax
c0013218:	74 3b                	je     c0013255 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001321a:	52                   	push   edx
c001321b:	50                   	push   eax
c001321c:	6a 01                	push   0x1
c001321e:	57                   	push   edi
c001321f:	e8 b9 fd ff ff       	call   c0012fdd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013224:	59                   	pop    ecx
c0013225:	5e                   	pop    esi
c0013226:	89 c3                	mov    ebx,eax
c0013228:	68 78 21 02 c0       	push   0xc0022178
c001322d:	6a 00                	push   0x0
c001322f:	e8 3a ff ff ff       	call   c001316e <zStrtok(char*, char const*)>
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	85 c0                	test   eax,eax
c0013239:	89 c6                	mov    esi,eax
c001323b:	74 18                	je     c0013255 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001323d:	52                   	push   edx
c001323e:	52                   	push   edx
c001323f:	53                   	push   ebx
c0013240:	57                   	push   edi
c0013241:	e8 86 f5 ff ff       	call   c00127cc <CmEnterDirectory(Reghive_Tag*, int)>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	83 f8 ff             	cmp    eax,0xffffffff
c001324c:	89 c3                	mov    ebx,eax
c001324e:	74 05                	je     c0013255 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013250:	50                   	push   eax
c0013251:	56                   	push   esi
c0013252:	53                   	push   ebx
c0013253:	eb c9                	jmp    c001321e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013255:	81 c4 00 01 00 00    	add    esp,0x100
c001325b:	89 d8                	mov    eax,ebx
c001325d:	5b                   	pop    ebx
c001325e:	5e                   	pop    esi
c001325f:	5f                   	pop    edi
c0013260:	c3                   	ret    

c0013261 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013261:	55                   	push   ebp
c0013262:	57                   	push   edi
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	83 ec 5c             	sub    esp,0x5c
c0013268:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001326c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013270:	85 db                	test   ebx,ebx
c0013272:	0f 8e 84 00 00 00    	jle    c00132fc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013278:	57                   	push   edi
c0013279:	31 ed                	xor    ebp,ebp
c001327b:	6a 32                	push   0x32
c001327d:	6a 00                	push   0x0
c001327f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013283:	57                   	push   edi
c0013284:	e8 67 d2 fe ff       	call   c00004f0 <memset>
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	57                   	push   edi
c001328d:	53                   	push   ebx
c001328e:	56                   	push   esi
c001328f:	e8 31 fb ff ff       	call   c0012dc5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013294:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013298:	83 c4 10             	add    esp,0x10
c001329b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001329f:	7d 13                	jge    c00132b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00132a1:	83 ec 0c             	sub    esp,0xc
c00132a4:	45                   	inc    ebp
c00132a5:	68 1f 25 02 c0       	push   0xc002251f
c00132aa:	e8 5b 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132af:	83 c4 10             	add    esp,0x10
c00132b2:	eb e7                	jmp    c001329b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00132b4:	51                   	push   ecx
c00132b5:	57                   	push   edi
c00132b6:	53                   	push   ebx
c00132b7:	68 1a 1e 02 c0       	push   0xc0021e1a
c00132bc:	e8 49 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00132c9:	75 1e                	jne    c00132e9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00132cb:	52                   	push   edx
c00132cc:	52                   	push   edx
c00132cd:	53                   	push   ebx
c00132ce:	56                   	push   esi
c00132cf:	e8 f8 f4 ff ff       	call   c00127cc <CmEnterDirectory(Reghive_Tag*, int)>
c00132d4:	83 c4 0c             	add    esp,0xc
c00132d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00132db:	8d 51 04             	lea    edx,[ecx+0x4]
c00132de:	52                   	push   edx
c00132df:	50                   	push   eax
c00132e0:	56                   	push   esi
c00132e1:	e8 7b ff ff ff       	call   c0013261 <CmDisplayTree(Reghive_Tag*, int, int)>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	50                   	push   eax
c00132ea:	50                   	push   eax
c00132eb:	53                   	push   ebx
c00132ec:	56                   	push   esi
c00132ed:	e8 19 f5 ff ff       	call   c001280b <CmGetNext(Reghive_Tag*, int)>
c00132f2:	83 c4 10             	add    esp,0x10
c00132f5:	89 c3                	mov    ebx,eax
c00132f7:	e9 74 ff ff ff       	jmp    c0013270 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00132fc:	83 c4 5c             	add    esp,0x5c
c00132ff:	5b                   	pop    ebx
c0013300:	5e                   	pop    esi
c0013301:	5f                   	pop    edi
c0013302:	5d                   	pop    ebp
c0013303:	c3                   	ret    

c0013304 <CmSplitFinalSlashInPlace(char*)>:
c0013304:	53                   	push   ebx
c0013305:	83 ec 14             	sub    esp,0x14
c0013308:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001330c:	53                   	push   ebx
c001330d:	e8 6e d2 fe ff       	call   c0000580 <strlen>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	48                   	dec    eax
c0013316:	85 c0                	test   eax,eax
c0013318:	74 15                	je     c001332f <CmSplitFinalSlashInPlace(char*)+0x2b>
c001331a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001331e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013321:	75 09                	jne    c001332c <CmSplitFinalSlashInPlace(char*)+0x28>
c0013323:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013326:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001332a:	eb 05                	jmp    c0013331 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001332c:	48                   	dec    eax
c001332d:	eb e7                	jmp    c0013316 <CmSplitFinalSlashInPlace(char*)+0x12>
c001332f:	31 c0                	xor    eax,eax
c0013331:	83 c4 08             	add    esp,0x8
c0013334:	5b                   	pop    ebx
c0013335:	c3                   	ret    

c0013336 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013336:	55                   	push   ebp
c0013337:	57                   	push   edi
c0013338:	56                   	push   esi
c0013339:	53                   	push   ebx
c001333a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013340:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013347:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001334a:	8d 43 01             	lea    eax,[ebx+0x1]
c001334d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013351:	89 f0                	mov    eax,esi
c0013353:	3c 40                	cmp    al,0x40
c0013355:	75 1b                	jne    c0013372 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013357:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001335a:	85 c0                	test   eax,eax
c001335c:	74 08                	je     c0013366 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001335e:	83 f8 3a             	cmp    eax,0x3a
c0013361:	74 03                	je     c0013366 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013363:	43                   	inc    ebx
c0013364:	eb f1                	jmp    c0013357 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013366:	85 c0                	test   eax,eax
c0013368:	0f 84 45 01 00 00    	je     c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001336e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013371:	43                   	inc    ebx
c0013372:	50                   	push   eax
c0013373:	6a 40                	push   0x40
c0013375:	6a 00                	push   0x0
c0013377:	8d 44 24 24          	lea    eax,[esp+0x24]
c001337b:	50                   	push   eax
c001337c:	e8 6f d1 fe ff       	call   c00004f0 <memset>
c0013381:	89 f1                	mov    ecx,esi
c0013383:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001338a:	31 c0                	xor    eax,eax
c001338c:	83 c4 10             	add    esp,0x10
c001338f:	0f be f1             	movsx  esi,cl
c0013392:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013395:	85 d2                	test   edx,edx
c0013397:	89 d1                	mov    ecx,edx
c0013399:	0f 84 14 01 00 00    	je     c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001339f:	3d c7 00 00 00       	cmp    eax,0xc7
c00133a4:	0f 8f 09 01 00 00    	jg     c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133aa:	83 fa 0a             	cmp    edx,0xa
c00133ad:	0f 85 f1 00 00 00    	jne    c00134a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00133b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00133b8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00133bd:	89 c8                	mov    eax,ecx
c00133bf:	a8 df                	test   al,0xdf
c00133c1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00133c6:	83 f9 23             	cmp    ecx,0x23
c00133c9:	0f 94 c2             	sete   dl
c00133cc:	89 d5                	mov    ebp,edx
c00133ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00133d2:	09 ea                	or     edx,ebp
c00133d4:	80 e2 01             	and    dl,0x1
c00133d7:	75 47                	jne    c0013420 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133d9:	83 e8 09             	sub    eax,0x9
c00133dc:	3c 01                	cmp    al,0x1
c00133de:	76 40                	jbe    c0013420 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133e0:	83 f9 5b             	cmp    ecx,0x5b
c00133e3:	75 42                	jne    c0013427 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00133e5:	83 fe 40             	cmp    esi,0x40
c00133e8:	75 36                	jne    c0013420 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00133f1:	55                   	push   ebp
c00133f2:	e8 89 d1 fe ff       	call   c0000580 <strlen>
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	83 f8 3f             	cmp    eax,0x3f
c00133fd:	0f 87 b0 00 00 00    	ja     c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013403:	50                   	push   eax
c0013404:	50                   	push   eax
c0013405:	55                   	push   ebp
c0013406:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001340a:	55                   	push   ebp
c001340b:	e8 40 d2 fe ff       	call   c0000650 <strcpy>
c0013410:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013413:	e8 68 d1 fe ff       	call   c0000580 <strlen>
c0013418:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	31 d2                	xor    edx,edx
c0013422:	e9 84 00 00 00       	jmp    c00134ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013427:	83 fe 40             	cmp    esi,0x40
c001342a:	74 06                	je     c0013432 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c001342c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013430:	eb 19                	jmp    c001344b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013432:	51                   	push   ecx
c0013433:	51                   	push   ecx
c0013434:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013438:	8d 44 24 24          	lea    eax,[esp+0x24]
c001343c:	50                   	push   eax
c001343d:	e8 3e d3 fe ff       	call   c0000780 <strcmp>
c0013442:	83 c4 10             	add    esp,0x10
c0013445:	85 c0                	test   eax,eax
c0013447:	75 d7                	jne    c0013420 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013449:	eb e1                	jmp    c001342c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001344b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c001344e:	85 c9                	test   ecx,ecx
c0013450:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013455:	83 f9 3d             	cmp    ecx,0x3d
c0013458:	0f 94 c0             	sete   al
c001345b:	89 c5                	mov    ebp,eax
c001345d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013461:	09 e8                	or     eax,ebp
c0013463:	a8 01                	test   al,0x1
c0013465:	89 c5                	mov    ebp,eax
c0013467:	75 03                	jne    c001346c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013469:	42                   	inc    edx
c001346a:	eb df                	jmp    c001344b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c001346c:	85 c9                	test   ecx,ecx
c001346e:	74 43                	je     c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013470:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013477:	52                   	push   edx
c0013478:	52                   	push   edx
c0013479:	8d 44 24 60          	lea    eax,[esp+0x60]
c001347d:	50                   	push   eax
c001347e:	53                   	push   ebx
c001347f:	e8 fc d2 fe ff       	call   c0000780 <strcmp>
c0013484:	83 c4 10             	add    esp,0x10
c0013487:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001348b:	85 c0                	test   eax,eax
c001348d:	75 91                	jne    c0013420 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001348f:	50                   	push   eax
c0013490:	42                   	inc    edx
c0013491:	50                   	push   eax
c0013492:	52                   	push   edx
c0013493:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001349a:	e8 b1 d1 fe ff       	call   c0000650 <strcpy>
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	eb 11                	jmp    c00134b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00134a4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134a8:	8d 50 01             	lea    edx,[eax+0x1]
c00134ab:	47                   	inc    edi
c00134ac:	89 d0                	mov    eax,edx
c00134ae:	e9 df fe ff ff       	jmp    c0013392 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00134b3:	31 ed                	xor    ebp,ebp
c00134b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00134bb:	89 e8                	mov    eax,ebp
c00134bd:	5b                   	pop    ebx
c00134be:	5e                   	pop    esi
c00134bf:	5f                   	pop    edi
c00134c0:	5d                   	pop    ebp
c00134c1:	c3                   	ret    

c00134c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00134c2:	57                   	push   edi
c00134c3:	56                   	push   esi
c00134c4:	53                   	push   ebx
c00134c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134cb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00134d2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00134d9:	53                   	push   ebx
c00134da:	e8 a1 d0 fe ff       	call   c0000580 <strlen>
c00134df:	89 34 24             	mov    DWORD PTR [esp],esi
c00134e2:	89 c7                	mov    edi,eax
c00134e4:	e8 97 d0 fe ff       	call   c0000580 <strlen>
c00134e9:	83 c4 10             	add    esp,0x10
c00134ec:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00134f0:	3d ff 00 00 00       	cmp    eax,0xff
c00134f5:	0f 87 d3 00 00 00    	ja     c00135ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00134fb:	57                   	push   edi
c00134fc:	57                   	push   edi
c00134fd:	56                   	push   esi
c00134fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013502:	56                   	push   esi
c0013503:	e8 48 d1 fe ff       	call   c0000650 <strcpy>
c0013508:	58                   	pop    eax
c0013509:	5a                   	pop    edx
c001350a:	68 78 21 02 c0       	push   0xc0022178
c001350f:	56                   	push   esi
c0013510:	e8 5b d3 fe ff       	call   c0000870 <strcat>
c0013515:	59                   	pop    ecx
c0013516:	5f                   	pop    edi
c0013517:	53                   	push   ebx
c0013518:	56                   	push   esi
c0013519:	e8 52 d3 fe ff       	call   c0000870 <strcat>
c001351e:	58                   	pop    eax
c001351f:	5a                   	pop    edx
c0013520:	68 24 1e 02 c0       	push   0xc0021e24
c0013525:	56                   	push   esi
c0013526:	e8 45 d3 fe ff       	call   c0000870 <strcat>
c001352b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013532:	e8 9c 45 ff ff       	call   c0007ad3 <malloc>
c0013537:	83 c4 0c             	add    esp,0xc
c001353a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0013540:	56                   	push   esi
c0013541:	50                   	push   eax
c0013542:	89 c3                	mov    ebx,eax
c0013544:	e8 7d 81 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	85 db                	test   ebx,ebx
c001354e:	74 7e                	je     c00135ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013550:	51                   	push   ecx
c0013551:	51                   	push   ecx
c0013552:	6a 01                	push   0x1
c0013554:	53                   	push   ebx
c0013555:	e8 28 82 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	85 c0                	test   eax,eax
c001355f:	74 08                	je     c0013569 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013566:	53                   	push   ebx
c0013567:	eb 5f                	jmp    c00135c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013569:	52                   	push   edx
c001356a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001356e:	50                   	push   eax
c001356f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013573:	50                   	push   eax
c0013574:	53                   	push   ebx
c0013575:	e8 0a 85 ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c001357a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	89 c1                	mov    ecx,eax
c0013583:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013587:	74 31                	je     c00135ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013589:	83 ec 0c             	sub    esp,0xc
c001358c:	50                   	push   eax
c001358d:	e8 41 45 ff ff       	call   c0007ad3 <malloc>
c0013592:	89 c6                	mov    esi,eax
c0013594:	58                   	pop    eax
c0013595:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013597:	8d 54 24 20          	lea    edx,[esp+0x20]
c001359b:	52                   	push   edx
c001359c:	56                   	push   esi
c001359d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135a5:	53                   	push   ebx
c00135a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135a9:	83 c4 20             	add    esp,0x20
c00135ac:	85 c0                	test   eax,eax
c00135ae:	75 0a                	jne    c00135ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135b4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135b8:	74 18                	je     c00135d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00135ba:	83 ec 0c             	sub    esp,0xc
c00135bd:	53                   	push   ebx
c00135be:	e8 1d 82 ff ff       	call   c000b7e0 <File::close()>
c00135c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	31 c0                	xor    eax,eax
c00135d0:	eb 3b                	jmp    c001360d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00135d2:	83 ec 0c             	sub    esp,0xc
c00135d5:	53                   	push   ebx
c00135d6:	e8 05 82 ff ff       	call   c000b7e0 <File::close()>
c00135db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00135ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00135f4:	56                   	push   esi
c00135f5:	e8 3c fd ff ff       	call   c0013336 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00135fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00135fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013601:	e8 dd 44 ff ff       	call   c0007ae3 <free>
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001360d:	81 c4 20 01 00 00    	add    esp,0x120
c0013613:	5b                   	pop    ebx
c0013614:	5e                   	pop    esi
c0013615:	5f                   	pop    edi
c0013616:	c3                   	ret    

c0013617 <Reg::getLine(char*, char*, char*)>:
c0013617:	57                   	push   edi
c0013618:	56                   	push   esi
c0013619:	53                   	push   ebx
c001361a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001361e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013622:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013626:	57                   	push   edi
c0013627:	56                   	push   esi
c0013628:	53                   	push   ebx
c0013629:	68 29 1e 02 c0       	push   0xc0021e29
c001362e:	e8 8f fe ff ff       	call   c00134c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013633:	83 c4 10             	add    esp,0x10
c0013636:	84 c0                	test   al,al
c0013638:	75 10                	jne    c001364a <Reg::getLine(char*, char*, char*)+0x33>
c001363a:	57                   	push   edi
c001363b:	56                   	push   esi
c001363c:	53                   	push   ebx
c001363d:	68 4e 1e 02 c0       	push   0xc0021e4e
c0013642:	e8 7b fe ff ff       	call   c00134c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	5b                   	pop    ebx
c001364b:	5e                   	pop    esi
c001364c:	5f                   	pop    edi
c001364d:	c3                   	ret    

c001364e <Reg::readInt(char*, char*, int*)>:
c001364e:	55                   	push   ebp
c001364f:	57                   	push   edi
c0013650:	56                   	push   esi
c0013651:	53                   	push   ebx
c0013652:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013658:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001365c:	55                   	push   ebp
c001365d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013664:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001366b:	e8 a7 ff ff ff       	call   c0013617 <Reg::getLine(char*, char*, char*)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	84 c0                	test   al,al
c0013675:	0f 84 b6 00 00 00    	je     c0013731 <Reg::readInt(char*, char*, int*)+0xe3>
c001367b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013680:	83 fa 2b             	cmp    edx,0x2b
c0013683:	74 0c                	je     c0013691 <Reg::readInt(char*, char*, int*)+0x43>
c0013685:	83 fa 2d             	cmp    edx,0x2d
c0013688:	75 0e                	jne    c0013698 <Reg::readInt(char*, char*, int*)+0x4a>
c001368a:	ba 01 00 00 00       	mov    edx,0x1
c001368f:	eb 0b                	jmp    c001369c <Reg::readInt(char*, char*, int*)+0x4e>
c0013691:	ba 01 00 00 00       	mov    edx,0x1
c0013696:	eb 02                	jmp    c001369a <Reg::readInt(char*, char*, int*)+0x4c>
c0013698:	31 d2                	xor    edx,edx
c001369a:	31 c0                	xor    eax,eax
c001369c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00136a1:	be 0a 00 00 00       	mov    esi,0xa
c00136a6:	75 21                	jne    c00136c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136a8:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00136ad:	83 f9 78             	cmp    ecx,0x78
c00136b0:	75 0a                	jne    c00136bc <Reg::readInt(char*, char*, int*)+0x6e>
c00136b2:	83 c2 02             	add    edx,0x2
c00136b5:	be 10 00 00 00       	mov    esi,0x10
c00136ba:	eb 0d                	jmp    c00136c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136bc:	83 f9 62             	cmp    ecx,0x62
c00136bf:	75 08                	jne    c00136c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136c1:	83 c2 02             	add    edx,0x2
c00136c4:	be 02 00 00 00       	mov    esi,0x2
c00136c9:	01 d5                	add    ebp,edx
c00136cb:	31 d2                	xor    edx,edx
c00136cd:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00136d1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00136d5:	85 c9                	test   ecx,ecx
c00136d7:	0f 94 c3             	sete   bl
c00136da:	83 f9 0d             	cmp    ecx,0xd
c00136dd:	89 df                	mov    edi,ebx
c00136df:	0f 94 c3             	sete   bl
c00136e2:	09 df                	or     edi,ebx
c00136e4:	89 fb                	mov    ebx,edi
c00136e6:	83 e7 01             	and    edi,0x1
c00136e9:	75 35                	jne    c0013720 <Reg::readInt(char*, char*, int*)+0xd2>
c00136eb:	0f af d6             	imul   edx,esi
c00136ee:	83 fe 10             	cmp    esi,0x10
c00136f1:	75 26                	jne    c0013719 <Reg::readInt(char*, char*, int*)+0xcb>
c00136f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00136f7:	83 ef 41             	sub    edi,0x41
c00136fa:	89 fb                	mov    ebx,edi
c00136fc:	80 fb 05             	cmp    bl,0x5
c00136ff:	77 06                	ja     c0013707 <Reg::readInt(char*, char*, int*)+0xb9>
c0013701:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013705:	eb 16                	jmp    c001371d <Reg::readInt(char*, char*, int*)+0xcf>
c0013707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001370b:	83 eb 61             	sub    ebx,0x61
c001370e:	80 fb 05             	cmp    bl,0x5
c0013711:	77 06                	ja     c0013719 <Reg::readInt(char*, char*, int*)+0xcb>
c0013713:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013717:	eb 04                	jmp    c001371d <Reg::readInt(char*, char*, int*)+0xcf>
c0013719:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001371d:	45                   	inc    ebp
c001371e:	eb ad                	jmp    c00136cd <Reg::readInt(char*, char*, int*)+0x7f>
c0013720:	84 c0                	test   al,al
c0013722:	74 02                	je     c0013726 <Reg::readInt(char*, char*, int*)+0xd8>
c0013724:	f7 da                	neg    edx
c0013726:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001372d:	89 10                	mov    DWORD PTR [eax],edx
c001372f:	88 d8                	mov    al,bl
c0013731:	81 c4 ec 00 00 00    	add    esp,0xec
c0013737:	5b                   	pop    ebx
c0013738:	5e                   	pop    esi
c0013739:	5f                   	pop    edi
c001373a:	5d                   	pop    ebp
c001373b:	c3                   	ret    

c001373c <Reg::readString(char*, char*, char*, int)>:
c001373c:	57                   	push   edi
c001373d:	56                   	push   esi
c001373e:	53                   	push   ebx
c001373f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013745:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013749:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013750:	57                   	push   edi
c0013751:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013758:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001375f:	e8 b3 fe ff ff       	call   c0013617 <Reg::getLine(char*, char*, char*)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	84 c0                	test   al,al
c0013769:	89 c6                	mov    esi,eax
c001376b:	74 44                	je     c00137b1 <Reg::readString(char*, char*, char*, int)+0x75>
c001376d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013774:	31 c0                	xor    eax,eax
c0013776:	4a                   	dec    edx
c0013777:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001377a:	84 c9                	test   cl,cl
c001377c:	74 0f                	je     c001378d <Reg::readString(char*, char*, char*, int)+0x51>
c001377e:	39 c2                	cmp    edx,eax
c0013780:	7e 0b                	jle    c001378d <Reg::readString(char*, char*, char*, int)+0x51>
c0013782:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013785:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001378a:	40                   	inc    eax
c001378b:	eb ea                	jmp    c0013777 <Reg::readString(char*, char*, char*, int)+0x3b>
c001378d:	83 ec 0c             	sub    esp,0xc
c0013790:	53                   	push   ebx
c0013791:	e8 ea cd fe ff       	call   c0000580 <strlen>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001379e:	75 11                	jne    c00137b1 <Reg::readString(char*, char*, char*, int)+0x75>
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	53                   	push   ebx
c00137a4:	e8 d7 cd fe ff       	call   c0000580 <strlen>
c00137a9:	83 c4 10             	add    esp,0x10
c00137ac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00137b1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00137b7:	89 f0                	mov    eax,esi
c00137b9:	5b                   	pop    ebx
c00137ba:	5e                   	pop    esi
c00137bb:	5f                   	pop    edi
c00137bc:	c3                   	ret    

c00137bd <Reg::readBool(char*, char*, bool*)>:
c00137bd:	83 ec 20             	sub    esp,0x20
c00137c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137c4:	50                   	push   eax
c00137c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137cd:	e8 7c fe ff ff       	call   c001364e <Reg::readInt(char*, char*, int*)>
c00137d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00137d6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00137db:	0f 95 02             	setne  BYTE PTR [edx]
c00137de:	83 c4 2c             	add    esp,0x2c
c00137e1:	c3                   	ret    

c00137e2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00137e2:	53                   	push   ebx
c00137e3:	83 ec 1c             	sub    esp,0x1c
c00137e6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00137ea:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00137ee:	50                   	push   eax
c00137ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137f7:	e8 c1 ff ff ff       	call   c00137bd <Reg::readBool(char*, char*, bool*)>
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	84 c0                	test   al,al
c0013801:	74 04                	je     c0013807 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013803:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013807:	83 c4 18             	add    esp,0x18
c001380a:	88 d8                	mov    al,bl
c001380c:	5b                   	pop    ebx
c001380d:	c3                   	ret    

c001380e <Reg::readIntWithDefault(char*, char*, int)>:
c001380e:	53                   	push   ebx
c001380f:	83 ec 1c             	sub    esp,0x1c
c0013812:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013816:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001381a:	50                   	push   eax
c001381b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001381f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013823:	e8 26 fe ff ff       	call   c001364e <Reg::readInt(char*, char*, int*)>
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	84 c0                	test   al,al
c001382d:	74 04                	je     c0013833 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001382f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013833:	83 c4 18             	add    esp,0x18
c0013836:	89 d8                	mov    eax,ebx
c0013838:	5b                   	pop    ebx
c0013839:	c3                   	ret    

c001383a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001383a:	57                   	push   edi
c001383b:	56                   	push   esi
c001383c:	53                   	push   ebx
c001383d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013841:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013845:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013849:	56                   	push   esi
c001384a:	57                   	push   edi
c001384b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001384f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013853:	e8 e4 fe ff ff       	call   c001373c <Reg::readString(char*, char*, char*, int)>
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	84 c0                	test   al,al
c001385d:	75 16                	jne    c0013875 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001385f:	50                   	push   eax
c0013860:	56                   	push   esi
c0013861:	6a 00                	push   0x0
c0013863:	57                   	push   edi
c0013864:	e8 87 cc fe ff       	call   c00004f0 <memset>
c0013869:	8d 4e ff             	lea    ecx,[esi-0x1]
c001386c:	89 de                	mov    esi,ebx
c001386e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	89 df                	mov    edi,ebx
c0013875:	5b                   	pop    ebx
c0013876:	89 f8                	mov    eax,edi
c0013878:	5e                   	pop    esi
c0013879:	5f                   	pop    edi
c001387a:	c3                   	ret    

c001387b <SysEject(regs*)>:
c001387b:	83 ec 0c             	sub    esp,0xc
c001387e:	83 ca ff             	or     edx,0xffffffff
c0013881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013885:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013888:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001388d:	83 e9 41             	sub    ecx,0x41
c0013890:	83 f9 19             	cmp    ecx,0x19
c0013893:	77 18                	ja     c00138ad <SysEject(regs*)+0x32>
c0013895:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c001389c:	85 c9                	test   ecx,ecx
c001389e:	74 0d                	je     c00138ad <SysEject(regs*)+0x32>
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	51                   	push   ecx
c00138a4:	e8 ab a0 ff ff       	call   c000d954 <LogicalDisk::eject()>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	99                   	cdq    
c00138ad:	83 c4 0c             	add    esp,0xc
c00138b0:	c3                   	ret    

c00138b1 <SysExit(regs*)>:
c00138b1:	83 ec 18             	sub    esp,0x18
c00138b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138bb:	e8 10 2b 00 00       	call   c00163d0 <terminateTask(int)>
c00138c0:	83 c8 ff             	or     eax,0xffffffff
c00138c3:	83 c4 1c             	add    esp,0x1c
c00138c6:	89 c2                	mov    edx,eax
c00138c8:	c3                   	ret    

c00138c9 <SysGetCwd(regs*)>:
c00138c9:	83 ec 10             	sub    esp,0x10
c00138cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138d0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00138d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00138de:	e8 b3 7b ff ff       	call   c000b496 <Fs::getcwd(Process*, char*, int)>
c00138e3:	83 c4 1c             	add    esp,0x1c
c00138e6:	99                   	cdq    
c00138e7:	c3                   	ret    

c00138e8 <SysGetPID(regs*)>:
c00138e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138f2:	99                   	cdq    
c00138f3:	c3                   	ret    

c00138f4 <SysGetRAMData(regs*)>:
c00138f4:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c00138fe:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013904:	99                   	cdq    
c0013905:	f7 f9                	idiv   ecx
c0013907:	c1 e0 18             	shl    eax,0x18
c001390a:	09 c8                	or     eax,ecx
c001390c:	99                   	cdq    
c001390d:	c3                   	ret    

c001390e <SysGetVGAPtr(regs*)>:
c001390e:	55                   	push   ebp
c001390f:	57                   	push   edi
c0013910:	56                   	push   esi
c0013911:	53                   	push   ebx
c0013912:	83 ec 18             	sub    esp,0x18
c0013915:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013919:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001391c:	e8 7b 25 00 00       	call   c0015e9c <Thr::processFromPID(int)>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	89 c1                	mov    ecx,eax
c0013926:	b8 01 00 00 00       	mov    eax,0x1
c001392b:	85 c9                	test   ecx,ecx
c001392d:	74 57                	je     c0013986 <SysGetVGAPtr(regs*)+0x78>
c001392f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013933:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013939:	74 0c                	je     c0013947 <SysGetVGAPtr(regs*)+0x39>
c001393b:	83 ec 0c             	sub    esp,0xc
c001393e:	55                   	push   ebp
c001393f:	e8 2b 4e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001394a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001394f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013954:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013957:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001395a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013960:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013963:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013966:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001396c:	50                   	push   eax
c001396d:	50                   	push   eax
c001396e:	68 69 1e 02 c0       	push   0xc0021e69
c0013973:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013976:	05 a8 0f 00 00       	add    eax,0xfa8
c001397b:	50                   	push   eax
c001397c:	e8 cf cc fe ff       	call   c0000650 <strcpy>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	31 c0                	xor    eax,eax
c0013986:	83 c4 0c             	add    esp,0xc
c0013989:	31 d2                	xor    edx,edx
c001398b:	5b                   	pop    ebx
c001398c:	5e                   	pop    esi
c001398d:	5f                   	pop    edi
c001398e:	5d                   	pop    ebp
c001398f:	c3                   	ret    

c0013990 <SysKill(regs*)>:
c0013990:	53                   	push   ebx
c0013991:	83 ec 08             	sub    esp,0x8
c0013994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013998:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001399c:	75 16                	jne    c00139b4 <SysKill(regs*)+0x24>
c001399e:	83 ec 0c             	sub    esp,0xc
c00139a1:	68 73 1e 02 c0       	push   0xc0021e73
c00139a6:	e8 a2 d7 ff ff       	call   c001114d <KePanic(char const*)>
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	e9 89 00 00 00       	jmp    c0013a3c <SysKill(regs*)+0xac>
c00139b3:	90                   	nop
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	68 84 a4 02 c0       	push   0xc002a484
c00139bc:	e8 3b bd 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	85 c0                	test   eax,eax
c00139c9:	74 19                	je     c00139e4 <SysKill(regs*)+0x54>
c00139cb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00139ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00139d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00139d3:	74 33                	je     c0013a08 <SysKill(regs*)+0x78>
c00139d5:	52                   	push   edx
c00139d6:	52                   	push   edx
c00139d7:	50                   	push   eax
c00139d8:	68 84 a4 02 c0       	push   0xc002a484
c00139dd:	e8 3a c0 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00139e2:	eb e0                	jmp    c00139c4 <SysKill(regs*)+0x34>
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	68 78 a4 02 c0       	push   0xc002a478
c00139ec:	e8 0b bd 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139f1:	8d 76 00             	lea    esi,[esi+0x0]
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	85 c0                	test   eax,eax
c00139f9:	74 41                	je     c0013a3c <SysKill(regs*)+0xac>
c00139fb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00139fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a01:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a03:	75 27                	jne    c0013a2c <SysKill(regs*)+0x9c>
c0013a05:	8d 76 00             	lea    esi,[esi+0x0]
c0013a08:	51                   	push   ecx
c0013a09:	51                   	push   ecx
c0013a0a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a15:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a1b:	e8 cb db ff ff       	call   c00115eb <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a20:	83 c4 10             	add    esp,0x10
c0013a23:	31 c0                	xor    eax,eax
c0013a25:	31 d2                	xor    edx,edx
c0013a27:	eb 1b                	jmp    c0013a44 <SysKill(regs*)+0xb4>
c0013a29:	8d 76 00             	lea    esi,[esi+0x0]
c0013a2c:	52                   	push   edx
c0013a2d:	52                   	push   edx
c0013a2e:	50                   	push   eax
c0013a2f:	68 78 a4 02 c0       	push   0xc002a478
c0013a34:	e8 e3 bf 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a39:	eb b9                	jmp    c00139f4 <SysKill(regs*)+0x64>
c0013a3b:	90                   	nop
c0013a3c:	83 c8 ff             	or     eax,0xffffffff
c0013a3f:	89 c2                	mov    edx,eax
c0013a41:	8d 76 00             	lea    esi,[esi+0x0]
c0013a44:	83 c4 08             	add    esp,0x8
c0013a47:	5b                   	pop    ebx
c0013a48:	c3                   	ret    

c0013a49 <SysLoadDLL(regs*)>:
c0013a49:	56                   	push   esi
c0013a4a:	31 d2                	xor    edx,edx
c0013a4c:	53                   	push   ebx
c0013a4d:	b8 01 00 00 00       	mov    eax,0x1
c0013a52:	51                   	push   ecx
c0013a53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a57:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013a5b:	0f 84 8c 00 00 00    	je     c0013aed <SysLoadDLL(regs*)+0xa4>
c0013a61:	83 ec 0c             	sub    esp,0xc
c0013a64:	68 14 01 00 00       	push   0x114
c0013a69:	e8 65 40 ff ff       	call   c0007ad3 <malloc>
c0013a6e:	83 c4 0c             	add    esp,0xc
c0013a71:	89 c3                	mov    ebx,eax
c0013a73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a78:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a7b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a7e:	53                   	push   ebx
c0013a7f:	e8 42 7c ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	31 d2                	xor    edx,edx
c0013a89:	85 db                	test   ebx,ebx
c0013a8b:	b8 02 00 00 00       	mov    eax,0x2
c0013a90:	74 5b                	je     c0013aed <SysLoadDLL(regs*)+0xa4>
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	53                   	push   ebx
c0013a96:	e8 ab 7f ff ff       	call   c000ba46 <File::exists()>
c0013a9b:	83 c4 10             	add    esp,0x10
c0013a9e:	84 c0                	test   al,al
c0013aa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aa2:	75 11                	jne    c0013ab5 <SysLoadDLL(regs*)+0x6c>
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	53                   	push   ebx
c0013aa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	b8 03 00 00 00       	mov    eax,0x3
c0013ab3:	eb 36                	jmp    c0013aeb <SysLoadDLL(regs*)+0xa2>
c0013ab5:	83 ec 0c             	sub    esp,0xc
c0013ab8:	53                   	push   ebx
c0013ab9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013abc:	58                   	pop    eax
c0013abd:	5a                   	pop    edx
c0013abe:	6a 00                	push   0x0
c0013ac0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ac3:	e8 1c 15 00 00       	call   c0014fe4 <Thr::loadDLL(char const*, bool)>
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	31 d2                	xor    edx,edx
c0013acd:	89 c1                	mov    ecx,eax
c0013acf:	b8 04 00 00 00       	mov    eax,0x4
c0013ad4:	85 c9                	test   ecx,ecx
c0013ad6:	74 15                	je     c0013aed <SysLoadDLL(regs*)+0xa4>
c0013ad8:	53                   	push   ebx
c0013ad9:	53                   	push   ebx
c0013ada:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013ae0:	51                   	push   ecx
c0013ae1:	e8 3e 17 00 00       	call   c0015224 <Thr::executeDLL(unsigned long, void*)>
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	31 c0                	xor    eax,eax
c0013aeb:	31 d2                	xor    edx,edx
c0013aed:	59                   	pop    ecx
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	c3                   	ret    

c0013af1 <SysRead(regs*)>:
c0013af1:	57                   	push   edi
c0013af2:	56                   	push   esi
c0013af3:	53                   	push   ebx
c0013af4:	83 ec 10             	sub    esp,0x10
c0013af7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013afb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013afe:	83 f8 02             	cmp    eax,0x2
c0013b01:	77 10                	ja     c0013b13 <SysRead(regs*)+0x22>
c0013b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b0b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b11:	eb 0e                	jmp    c0013b21 <SysRead(regs*)+0x30>
c0013b13:	83 ec 0c             	sub    esp,0xc
c0013b16:	50                   	push   eax
c0013b17:	e8 7f 59 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013b1c:	83 c4 10             	add    esp,0x10
c0013b1f:	89 c1                	mov    ecx,eax
c0013b21:	83 c8 ff             	or     eax,0xffffffff
c0013b24:	85 c9                	test   ecx,ecx
c0013b26:	89 c2                	mov    edx,eax
c0013b28:	74 28                	je     c0013b52 <SysRead(regs*)+0x61>
c0013b2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	31 ff                	xor    edi,edi
c0013b37:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b3d:	52                   	push   edx
c0013b3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013b41:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013b44:	57                   	push   edi
c0013b45:	56                   	push   esi
c0013b46:	51                   	push   ecx
c0013b47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013b4e:	83 c4 20             	add    esp,0x20
c0013b51:	99                   	cdq    
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	5b                   	pop    ebx
c0013b56:	5e                   	pop    esi
c0013b57:	5f                   	pop    edi
c0013b58:	c3                   	ret    

c0013b59 <SysRegisterSignal(regs*)>:
c0013b59:	83 ec 18             	sub    esp,0x18
c0013b5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b60:	6a 00                	push   0x0
c0013b62:	6a 00                	push   0x0
c0013b64:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013b67:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b72:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b78:	e8 38 da ff ff       	call   c00115b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013b7d:	83 c4 2c             	add    esp,0x2c
c0013b80:	99                   	cdq    
c0013b81:	c3                   	ret    

c0013b82 <SysRegistryGetTypeFromPath(regs*)>:
c0013b82:	57                   	push   edi
c0013b83:	56                   	push   esi
c0013b84:	53                   	push   ebx
c0013b85:	81 ec 38 01 00 00    	sub    esp,0x138
c0013b8b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013b92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013b95:	68 94 1e 02 c0       	push   0xc0021e94
c0013b9a:	e8 6b 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013b9f:	5a                   	pop    edx
c0013ba0:	59                   	pop    ecx
c0013ba1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ba4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ba7:	e8 34 f6 ff ff       	call   c00131e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013bac:	5f                   	pop    edi
c0013bad:	5a                   	pop    edx
c0013bae:	89 c6                	mov    esi,eax
c0013bb0:	50                   	push   eax
c0013bb1:	68 b4 1e 02 c0       	push   0xc0021eb4
c0013bb6:	e8 4f 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	85 f6                	test   esi,esi
c0013bc0:	74 28                	je     c0013bea <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013bc2:	50                   	push   eax
c0013bc3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013bc7:	57                   	push   edi
c0013bc8:	56                   	push   esi
c0013bc9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bcc:	e8 f4 f1 ff ff       	call   c0012dc5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013bd1:	83 c4 0c             	add    esp,0xc
c0013bd4:	57                   	push   edi
c0013bd5:	50                   	push   eax
c0013bd6:	89 c3                	mov    ebx,eax
c0013bd8:	68 bc 1e 02 c0       	push   0xc0021ebc
c0013bdd:	e8 28 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013be2:	89 d8                	mov    eax,ebx
c0013be4:	83 c4 10             	add    esp,0x10
c0013be7:	99                   	cdq    
c0013be8:	eb 05                	jmp    c0013bef <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013bea:	83 c8 ff             	or     eax,0xffffffff
c0013bed:	89 c2                	mov    edx,eax
c0013bef:	81 c4 30 01 00 00    	add    esp,0x130
c0013bf5:	5b                   	pop    ebx
c0013bf6:	5e                   	pop    esi
c0013bf7:	5f                   	pop    edi
c0013bf8:	c3                   	ret    

c0013bf9 <SysRegistryReadExtent(regs*)>:
c0013bf9:	83 ec 1c             	sub    esp,0x1c
c0013bfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c00:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c03:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c06:	85 c0                	test   eax,eax
c0013c08:	79 1f                	jns    c0013c29 <SysRegistryReadExtent(regs*)+0x30>
c0013c0a:	52                   	push   edx
c0013c0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c14:	52                   	push   edx
c0013c15:	50                   	push   eax
c0013c16:	51                   	push   ecx
c0013c17:	e8 9b f0 ff ff       	call   c0012cb7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c24:	83 c4 10             	add    esp,0x10
c0013c27:	eb 14                	jmp    c0013c3d <SysRegistryReadExtent(regs*)+0x44>
c0013c29:	83 ec 04             	sub    esp,0x4
c0013c2c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013c2f:	50                   	push   eax
c0013c30:	51                   	push   ecx
c0013c31:	e8 1f eb ff ff       	call   c0012755 <CmGetString(Reghive_Tag*, int, char*)>
c0013c36:	83 c4 10             	add    esp,0x10
c0013c39:	31 c0                	xor    eax,eax
c0013c3b:	31 d2                	xor    edx,edx
c0013c3d:	83 c4 1c             	add    esp,0x1c
c0013c40:	c3                   	ret    

c0013c41 <SysRegistryPathToExtentLookup(regs*)>:
c0013c41:	53                   	push   ebx
c0013c42:	83 ec 10             	sub    esp,0x10
c0013c45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c4c:	68 d2 1e 02 c0       	push   0xc0021ed2
c0013c51:	e8 b4 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c56:	58                   	pop    eax
c0013c57:	5a                   	pop    edx
c0013c58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c5e:	e8 7d f5 ff ff       	call   c00131e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c63:	83 c4 18             	add    esp,0x18
c0013c66:	5b                   	pop    ebx
c0013c67:	99                   	cdq    
c0013c68:	c3                   	ret    

c0013c69 <SysRegistryEnterDirectory(regs*)>:
c0013c69:	53                   	push   ebx
c0013c6a:	83 ec 10             	sub    esp,0x10
c0013c6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c74:	68 f5 1e 02 c0       	push   0xc0021ef5
c0013c79:	e8 8c 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c7e:	58                   	pop    eax
c0013c7f:	5a                   	pop    edx
c0013c80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c83:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c86:	e8 41 eb ff ff       	call   c00127cc <CmEnterDirectory(Reghive_Tag*, int)>
c0013c8b:	83 c4 18             	add    esp,0x18
c0013c8e:	5b                   	pop    ebx
c0013c8f:	99                   	cdq    
c0013c90:	c3                   	ret    

c0013c91 <SysRegistryGetNext(regs*)>:
c0013c91:	53                   	push   ebx
c0013c92:	83 ec 10             	sub    esp,0x10
c0013c95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c99:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c9c:	68 13 1f 02 c0       	push   0xc0021f13
c0013ca1:	e8 64 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ca6:	58                   	pop    eax
c0013ca7:	5a                   	pop    edx
c0013ca8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cae:	e8 58 eb ff ff       	call   c001280b <CmGetNext(Reghive_Tag*, int)>
c0013cb3:	83 c4 18             	add    esp,0x18
c0013cb6:	5b                   	pop    ebx
c0013cb7:	99                   	cdq    
c0013cb8:	c3                   	ret    

c0013cb9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013cb9:	57                   	push   edi
c0013cba:	56                   	push   esi
c0013cbb:	53                   	push   ebx
c0013cbc:	81 ec 34 01 00 00    	sub    esp,0x134
c0013cc2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013cc9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ccd:	57                   	push   edi
c0013cce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013cd1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cd4:	e8 ec f0 ff ff       	call   c0012dc5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cd9:	89 c3                	mov    ebx,eax
c0013cdb:	58                   	pop    eax
c0013cdc:	5a                   	pop    edx
c0013cdd:	57                   	push   edi
c0013cde:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013ce1:	e8 6a c9 fe ff       	call   c0000650 <strcpy>
c0013ce6:	81 c4 40 01 00 00    	add    esp,0x140
c0013cec:	89 d8                	mov    eax,ebx
c0013cee:	5b                   	pop    ebx
c0013cef:	99                   	cdq    
c0013cf0:	5e                   	pop    esi
c0013cf1:	5f                   	pop    edi
c0013cf2:	c3                   	ret    

c0013cf3 <SysRegistryOpen(regs*)>:
c0013cf3:	83 ec 18             	sub    esp,0x18
c0013cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cfa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013cfd:	e8 e3 e8 ff ff       	call   c00125e5 <CmOpen(char const*)>
c0013d02:	83 c4 1c             	add    esp,0x1c
c0013d05:	99                   	cdq    
c0013d06:	c3                   	ret    

c0013d07 <SysRegistryClose(regs*)>:
c0013d07:	83 ec 18             	sub    esp,0x18
c0013d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d11:	e8 ed e9 ff ff       	call   c0012703 <CmClose(Reghive_Tag*)>
c0013d16:	31 c0                	xor    eax,eax
c0013d18:	31 d2                	xor    edx,edx
c0013d1a:	83 c4 1c             	add    esp,0x1c
c0013d1d:	c3                   	ret    

c0013d1e <SysSbrk(regs*)>:
c0013d1e:	56                   	push   esi
c0013d1f:	53                   	push   ebx
c0013d20:	50                   	push   eax
c0013d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d2d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013d30:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013d36:	85 db                	test   ebx,ebx
c0013d38:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013d3b:	74 02                	je     c0013d3f <SysSbrk(regs*)+0x21>
c0013d3d:	79 06                	jns    c0013d45 <SysSbrk(regs*)+0x27>
c0013d3f:	89 f0                	mov    eax,esi
c0013d41:	31 d2                	xor    edx,edx
c0013d43:	eb 2a                	jmp    c0013d6f <SysSbrk(regs*)+0x51>
c0013d45:	83 c8 ff             	or     eax,0xffffffff
c0013d48:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013d4e:	89 c2                	mov    edx,eax
c0013d50:	77 1d                	ja     c0013d6f <SysSbrk(regs*)+0x51>
c0013d52:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013d58:	50                   	push   eax
c0013d59:	68 07 0c 00 00       	push   0xc07
c0013d5e:	c1 ea 0c             	shr    edx,0xc
c0013d61:	52                   	push   edx
c0013d62:	51                   	push   ecx
c0013d63:	e8 9e 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013d68:	89 f0                	mov    eax,esi
c0013d6a:	31 d2                	xor    edx,edx
c0013d6c:	83 c4 10             	add    esp,0x10
c0013d6f:	59                   	pop    ecx
c0013d70:	5b                   	pop    ebx
c0013d71:	5e                   	pop    esi
c0013d72:	c3                   	ret    

c0013d73 <SysSetCwd(regs*)>:
c0013d73:	83 ec 14             	sub    esp,0x14
c0013d76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d7a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d82:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d85:	e8 5b 7d ff ff       	call   c000bae5 <Fs::setcwd(Process*, char*)>
c0013d8a:	83 c4 1c             	add    esp,0x1c
c0013d8d:	99                   	cdq    
c0013d8e:	c3                   	ret    

c0013d8f <SysSetTime(regs*)>:
c0013d8f:	55                   	push   ebp
c0013d90:	31 c9                	xor    ecx,ecx
c0013d92:	57                   	push   edi
c0013d93:	bd 0c 00 00 00       	mov    ebp,0xc
c0013d98:	56                   	push   esi
c0013d99:	53                   	push   ebx
c0013d9a:	31 db                	xor    ebx,ebx
c0013d9c:	83 ec 10             	sub    esp,0x10
c0013d9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013da3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013da6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013da9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013dac:	89 c2                	mov    edx,eax
c0013dae:	c1 e8 05             	shr    eax,0x5
c0013db1:	83 e2 1f             	and    edx,0x1f
c0013db4:	42                   	inc    edx
c0013db5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013dbb:	c1 e7 10             	shl    edi,0x10
c0013dbe:	88 d1                	mov    cl,dl
c0013dc0:	31 d2                	xor    edx,edx
c0013dc2:	f7 f5                	div    ebp
c0013dc4:	89 dd                	mov    ebp,ebx
c0013dc6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013dcc:	88 d5                	mov    ch,dl
c0013dce:	31 d2                	xor    edx,edx
c0013dd0:	0f b7 c1             	movzx  eax,cx
c0013dd3:	09 f8                	or     eax,edi
c0013dd5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013dda:	89 c1                	mov    ecx,eax
c0013ddc:	89 f0                	mov    eax,esi
c0013dde:	f7 f7                	div    edi
c0013de0:	c1 e2 10             	shl    edx,0x10
c0013de3:	09 d5                	or     ebp,edx
c0013de5:	31 d2                	xor    edx,edx
c0013de7:	f7 f7                	div    edi
c0013de9:	89 eb                	mov    ebx,ebp
c0013deb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013df0:	89 f0                	mov    eax,esi
c0013df2:	88 d7                	mov    bh,dl
c0013df4:	31 d2                	xor    edx,edx
c0013df6:	f7 f7                	div    edi
c0013df8:	bf 18 00 00 00       	mov    edi,0x18
c0013dfd:	31 d2                	xor    edx,edx
c0013dff:	f7 f7                	div    edi
c0013e01:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e06:	88 d3                	mov    bl,dl
c0013e08:	53                   	push   ebx
c0013e09:	51                   	push   ecx
c0013e0a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e10:	e8 d3 84 ff ff       	call   c000c2e8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e15:	83 c4 1c             	add    esp,0x1c
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	5b                   	pop    ebx
c0013e1b:	5e                   	pop    esi
c0013e1c:	83 f0 01             	xor    eax,0x1
c0013e1f:	5f                   	pop    edi
c0013e20:	0f b6 c0             	movzx  eax,al
c0013e23:	5d                   	pop    ebp
c0013e24:	c3                   	ret    

c0013e25 <SysTimezone(regs*)>:
c0013e25:	53                   	push   ebx
c0013e26:	83 ec 08             	sub    esp,0x8
c0013e29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e2d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013e31:	75 17                	jne    c0013e4a <SysTimezone(regs*)+0x25>
c0013e33:	83 ec 0c             	sub    esp,0xc
c0013e36:	68 2a 1f 02 c0       	push   0xc0021f2a
c0013e3b:	e8 ca 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e40:	83 c8 ff             	or     eax,0xffffffff
c0013e43:	83 c4 10             	add    esp,0x10
c0013e46:	89 c2                	mov    edx,eax
c0013e48:	eb 20                	jmp    c0013e6a <SysTimezone(regs*)+0x45>
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	68 3f 1f 02 c0       	push   0xc0021f3f
c0013e52:	e8 b3 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e57:	58                   	pop    eax
c0013e58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e5b:	e8 ec 81 ff ff       	call   c000c04c <User::loadClockSettings(int)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	b8 01 00 00 00       	mov    eax,0x1
c0013e68:	31 d2                	xor    edx,edx
c0013e6a:	83 c4 08             	add    esp,0x8
c0013e6d:	5b                   	pop    ebx
c0013e6e:	c3                   	ret    

c0013e6f <SysTruncate(regs*)>:
c0013e6f:	55                   	push   ebp
c0013e70:	57                   	push   edi
c0013e71:	31 ff                	xor    edi,edi
c0013e73:	56                   	push   esi
c0013e74:	53                   	push   ebx
c0013e75:	83 ec 0c             	sub    esp,0xc
c0013e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e7f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013e83:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013e86:	89 ce                	mov    esi,ecx
c0013e88:	0f 84 9a 00 00 00    	je     c0013f28 <SysTruncate(regs*)+0xb9>
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	68 14 01 00 00       	push   0x114
c0013e96:	e8 38 3c ff ff       	call   c0007ad3 <malloc>
c0013e9b:	83 c4 0c             	add    esp,0xc
c0013e9e:	89 c3                	mov    ebx,eax
c0013ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ea5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ea8:	55                   	push   ebp
c0013ea9:	53                   	push   ebx
c0013eaa:	e8 17 78 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	31 d2                	xor    edx,edx
c0013eb4:	85 db                	test   ebx,ebx
c0013eb6:	b8 03 00 00 00       	mov    eax,0x3
c0013ebb:	0f 84 a2 00 00 00    	je     c0013f63 <SysTruncate(regs*)+0xf4>
c0013ec1:	51                   	push   ecx
c0013ec2:	51                   	push   ecx
c0013ec3:	6a 02                	push   0x2
c0013ec5:	53                   	push   ebx
c0013ec6:	e8 b7 78 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	85 c0                	test   eax,eax
c0013ed0:	74 13                	je     c0013ee5 <SysTruncate(regs*)+0x76>
c0013ed2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	53                   	push   ebx
c0013ed8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	b8 04 00 00 00       	mov    eax,0x4
c0013ee3:	eb 7c                	jmp    c0013f61 <SysTruncate(regs*)+0xf2>
c0013ee5:	52                   	push   edx
c0013ee6:	57                   	push   edi
c0013ee7:	56                   	push   esi
c0013ee8:	53                   	push   ebx
c0013ee9:	e8 a8 79 ff ff       	call   c000b896 <File::truncate(unsigned long long)>
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	85 c0                	test   eax,eax
c0013ef3:	74 1b                	je     c0013f10 <SysTruncate(regs*)+0xa1>
c0013ef5:	83 ec 0c             	sub    esp,0xc
c0013ef8:	53                   	push   ebx
c0013ef9:	e8 e2 78 ff ff       	call   c000b7e0 <File::close()>
c0013efe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	b8 05 00 00 00       	mov    eax,0x5
c0013f0e:	eb 51                	jmp    c0013f61 <SysTruncate(regs*)+0xf2>
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	53                   	push   ebx
c0013f14:	e8 c7 78 ff ff       	call   c000b7e0 <File::close()>
c0013f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	31 c0                	xor    eax,eax
c0013f26:	eb 39                	jmp    c0013f61 <SysTruncate(regs*)+0xf2>
c0013f28:	31 d2                	xor    edx,edx
c0013f2a:	83 fd 02             	cmp    ebp,0x2
c0013f2d:	b8 01 00 00 00       	mov    eax,0x1
c0013f32:	7e 2f                	jle    c0013f63 <SysTruncate(regs*)+0xf4>
c0013f34:	83 ec 0c             	sub    esp,0xc
c0013f37:	51                   	push   ecx
c0013f38:	e8 5e 55 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013f3d:	83 c4 10             	add    esp,0x10
c0013f40:	31 d2                	xor    edx,edx
c0013f42:	89 c1                	mov    ecx,eax
c0013f44:	b8 02 00 00 00       	mov    eax,0x2
c0013f49:	85 c9                	test   ecx,ecx
c0013f4b:	74 16                	je     c0013f63 <SysTruncate(regs*)+0xf4>
c0013f4d:	50                   	push   eax
c0013f4e:	57                   	push   edi
c0013f4f:	56                   	push   esi
c0013f50:	51                   	push   ecx
c0013f51:	e8 40 79 ff ff       	call   c000b896 <File::truncate(unsigned long long)>
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	85 c0                	test   eax,eax
c0013f5b:	0f 95 c0             	setne  al
c0013f5e:	0f b6 c0             	movzx  eax,al
c0013f61:	31 d2                	xor    edx,edx
c0013f63:	83 c4 0c             	add    esp,0xc
c0013f66:	5b                   	pop    ebx
c0013f67:	5e                   	pop    esi
c0013f68:	5f                   	pop    edi
c0013f69:	5d                   	pop    ebp
c0013f6a:	c3                   	ret    

c0013f6b <SysWrite(regs*)>:
c0013f6b:	57                   	push   edi
c0013f6c:	56                   	push   esi
c0013f6d:	53                   	push   ebx
c0013f6e:	83 ec 10             	sub    esp,0x10
c0013f71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f78:	83 f8 02             	cmp    eax,0x2
c0013f7b:	77 10                	ja     c0013f8d <SysWrite(regs*)+0x22>
c0013f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f85:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013f8b:	eb 0e                	jmp    c0013f9b <SysWrite(regs*)+0x30>
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	50                   	push   eax
c0013f91:	e8 05 55 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	89 c1                	mov    ecx,eax
c0013f9b:	83 c8 ff             	or     eax,0xffffffff
c0013f9e:	85 c9                	test   ecx,ecx
c0013fa0:	89 c2                	mov    edx,eax
c0013fa2:	74 28                	je     c0013fcc <SysWrite(regs*)+0x61>
c0013fa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	31 ff                	xor    edi,edi
c0013fb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013fb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fb7:	52                   	push   edx
c0013fb8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fbb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013fbe:	57                   	push   edi
c0013fbf:	56                   	push   esi
c0013fc0:	51                   	push   ecx
c0013fc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013fc8:	83 c4 20             	add    esp,0x20
c0013fcb:	99                   	cdq    
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	5b                   	pop    ebx
c0013fd0:	5e                   	pop    esi
c0013fd1:	5f                   	pop    edi
c0013fd2:	c3                   	ret    

c0013fd3 <SysWsbe(regs*)>:
c0013fd3:	57                   	push   edi
c0013fd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0013fd9:	56                   	push   esi
c0013fda:	be 7e 1f 02 c0       	mov    esi,0xc0021f7e
c0013fdf:	53                   	push   ebx
c0013fe0:	83 ec 30             	sub    esp,0x30
c0013fe3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013fe7:	fc                   	cld    
c0013fe8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013ff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ff6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ff9:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013fff:	8b 06                	mov    eax,DWORD PTR [esi]
c0014001:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014004:	57                   	push   edi
c0014005:	e8 76 c5 fe ff       	call   c0000580 <strlen>
c001400a:	5a                   	pop    edx
c001400b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001400f:	52                   	push   edx
c0014010:	31 d2                	xor    edx,edx
c0014012:	57                   	push   edi
c0014013:	52                   	push   edx
c0014014:	50                   	push   eax
c0014015:	56                   	push   esi
c0014016:	ff d3                	call   ebx
c0014018:	83 c4 14             	add    esp,0x14
c001401b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001401f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014022:	e8 a9 23 00 00       	call   c00163d0 <terminateTask(int)>
c0014027:	83 c4 40             	add    esp,0x40
c001402a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001402f:	5b                   	pop    ebx
c0014030:	31 d2                	xor    edx,edx
c0014032:	5e                   	pop    esi
c0014033:	5f                   	pop    edi
c0014034:	c3                   	ret    

c0014035 <SysYield(regs*)>:
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	fa                   	cli    
c0014039:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001403f:	e8 0c 1a 00 00       	call   c0015a50 <schedule()>
c0014044:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014049:	48                   	dec    eax
c001404a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001404f:	75 01                	jne    c0014052 <SysYield(regs*)+0x1d>
c0014051:	fb                   	sti    
c0014052:	31 c0                	xor    eax,eax
c0014054:	31 d2                	xor    edx,edx
c0014056:	83 c4 0c             	add    esp,0xc
c0014059:	c3                   	ret    

c001405a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001405a:	55                   	push   ebp
c001405b:	57                   	push   edi
c001405c:	56                   	push   esi
c001405d:	53                   	push   ebx
c001405e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014064:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001406f:	74 3b                	je     c00140ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014071:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014079:	74 31                	je     c00140ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001407b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014083:	75 27                	jne    c00140ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014085:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001408c:	05 00 10 00 00       	add    eax,0x1000
c0014091:	89 c2                	mov    edx,eax
c0014093:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014098:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001409f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00140a5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00140ac:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00140b3:	83 ec 0c             	sub    esp,0xc
c00140b6:	6a 01                	push   0x1
c00140b8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00140be:	e8 32 55 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00140c3:	83 c4 10             	add    esp,0x10
c00140c6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00140cc:	89 c3                	mov    ebx,eax
c00140ce:	0f 86 26 01 00 00    	jbe    c00141fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00140d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140dc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00140e3:	c1 ee 0c             	shr    esi,0xc
c00140e6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00140ea:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00140f1:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00140f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140fc:	29 ef                	sub    edi,ebp
c00140fe:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014102:	0f 83 f9 00 00 00    	jae    c0014201 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014108:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001410e:	b8 00 10 00 00       	mov    eax,0x1000
c0014113:	0f 47 f8             	cmova  edi,eax
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014120:	31 d2                	xor    edx,edx
c0014122:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014124:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014128:	50                   	push   eax
c0014129:	8d 74 24 30          	lea    esi,[esp+0x30]
c001412d:	56                   	push   esi
c001412e:	52                   	push   edx
c001412f:	57                   	push   edi
c0014130:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014137:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001413a:	83 c4 20             	add    esp,0x20
c001413d:	85 c0                	test   eax,eax
c001413f:	75 06                	jne    c0014147 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014141:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014145:	74 13                	je     c001415a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	53                   	push   ebx
c001414b:	e8 b9 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	31 c0                	xor    eax,eax
c0014155:	e9 7c 01 00 00       	jmp    c00142d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001415a:	fa                   	cli    
c001415b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014161:	e8 7c 3c ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014166:	6a 07                	push   0x7
c0014168:	53                   	push   ebx
c0014169:	50                   	push   eax
c001416a:	89 c7                	mov    edi,eax
c001416c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014171:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014174:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001417a:	e8 7f 5b ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001417f:	83 c4 0c             	add    esp,0xc
c0014182:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014189:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001418f:	6a 00                	push   0x0
c0014191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014196:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014199:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001419f:	e8 c0 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00141a4:	58                   	pop    eax
c00141a5:	5a                   	pop    edx
c00141a6:	68 07 0c 00 00       	push   0xc07
c00141ab:	55                   	push   ebp
c00141ac:	57                   	push   edi
c00141ad:	89 df                	mov    edi,ebx
c00141af:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00141b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141bc:	6a 00                	push   0x0
c00141be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141cc:	e8 91 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00141d1:	b9 00 10 00 00       	mov    ecx,0x1000
c00141d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00141dd:	83 c4 20             	add    esp,0x20
c00141e0:	48                   	dec    eax
c00141e1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00141e6:	85 c0                	test   eax,eax
c00141e8:	75 01                	jne    c00141eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00141ea:	fb                   	sti    
c00141eb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00141ef:	81 c5 00 10 00 00    	add    ebp,0x1000
c00141f5:	e9 f0 fe ff ff       	jmp    c00140ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00141fa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014201:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014208:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001420e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014214:	0f 86 ae 00 00 00    	jbe    c00142c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001421a:	fa                   	cli    
c001421b:	51                   	push   ecx
c001421c:	31 ff                	xor    edi,edi
c001421e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014225:	c1 ee 0c             	shr    esi,0xc
c0014228:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001422e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014234:	6a 00                	push   0x0
c0014236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001423b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001423e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014244:	e8 1b 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	e8 91 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014251:	47                   	inc    edi
c0014252:	6a 07                	push   0x7
c0014254:	53                   	push   ebx
c0014255:	50                   	push   eax
c0014256:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001425a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014260:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014263:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014269:	e8 90 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001426e:	58                   	pop    eax
c001426f:	5a                   	pop    edx
c0014270:	68 07 0c 00 00       	push   0xc07
c0014275:	55                   	push   ebp
c0014276:	81 c5 00 10 00 00    	add    ebp,0x1000
c001427c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014280:	50                   	push   eax
c0014281:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014288:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001428e:	6a 00                	push   0x0
c0014290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014295:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014298:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429e:	e8 bf 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142a3:	83 c4 1c             	add    esp,0x1c
c00142a6:	68 00 10 00 00       	push   0x1000
c00142ab:	6a 00                	push   0x0
c00142ad:	53                   	push   ebx
c00142ae:	e8 3d c2 fe ff       	call   c00004f0 <memset>
c00142b3:	83 c4 10             	add    esp,0x10
c00142b6:	39 fe                	cmp    esi,edi
c00142b8:	77 92                	ja     c001424c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00142ba:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00142bf:	48                   	dec    eax
c00142c0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00142c5:	75 01                	jne    c00142c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00142c7:	fb                   	sti    
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	53                   	push   ebx
c00142cc:	e8 38 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	b0 01                	mov    al,0x1
c00142d6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00142dc:	5b                   	pop    ebx
c00142dd:	5e                   	pop    esi
c00142de:	5f                   	pop    edi
c00142df:	5d                   	pop    ebp
c00142e0:	c3                   	ret    

c00142e1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00142e1:	55                   	push   ebp
c00142e2:	57                   	push   edi
c00142e3:	56                   	push   esi
c00142e4:	53                   	push   ebx
c00142e5:	83 ec 48             	sub    esp,0x48
c00142e8:	68 14 01 00 00       	push   0x114
c00142ed:	e8 e1 37 ff ff       	call   c0007ad3 <malloc>
c00142f2:	83 c4 0c             	add    esp,0xc
c00142f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00142f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00142fd:	89 c7                	mov    edi,eax
c00142ff:	50                   	push   eax
c0014300:	e8 c1 73 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0014305:	58                   	pop    eax
c0014306:	5a                   	pop    edx
c0014307:	6a 01                	push   0x1
c0014309:	57                   	push   edi
c001430a:	e8 73 74 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	85 c0                	test   eax,eax
c0014314:	0f 85 4c 01 00 00    	jne    c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001431a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	6a 34                	push   0x34
c0014327:	e8 a7 37 ff ff       	call   c0007ad3 <malloc>
c001432c:	89 c3                	mov    ebx,eax
c001432e:	58                   	pop    eax
c001432f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014331:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014335:	56                   	push   esi
c0014336:	53                   	push   ebx
c0014337:	6a 00                	push   0x0
c0014339:	6a 34                	push   0x34
c001433b:	57                   	push   edi
c001433c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001433f:	83 c4 20             	add    esp,0x20
c0014342:	85 c0                	test   eax,eax
c0014344:	0f 85 1c 01 00 00    	jne    c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001434a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014350:	0f 85 10 01 00 00    	jne    c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014356:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014359:	85 c0                	test   eax,eax
c001435b:	0f 84 05 01 00 00    	je     c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014361:	31 d2                	xor    edx,edx
c0014363:	55                   	push   ebp
c0014364:	52                   	push   edx
c0014365:	50                   	push   eax
c0014366:	57                   	push   edi
c0014367:	e8 d4 74 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	85 c0                	test   eax,eax
c0014371:	0f 85 ef 00 00 00    	jne    c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014377:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001437a:	83 ec 0c             	sub    esp,0xc
c001437d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014381:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014385:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014389:	0f af c2             	imul   eax,edx
c001438c:	50                   	push   eax
c001438d:	e8 41 37 ff ff       	call   c0007ad3 <malloc>
c0014392:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014394:	89 34 24             	mov    DWORD PTR [esp],esi
c0014397:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001439b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001439f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143a3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00143a7:	0f af c2             	imul   eax,edx
c00143aa:	99                   	cdq    
c00143ab:	52                   	push   edx
c00143ac:	50                   	push   eax
c00143ad:	57                   	push   edi
c00143ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143b1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00143b4:	83 c4 20             	add    esp,0x20
c00143b7:	85 c0                	test   eax,eax
c00143b9:	0f 84 a7 00 00 00    	je     c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143bf:	31 d2                	xor    edx,edx
c00143c1:	51                   	push   ecx
c00143c2:	52                   	push   edx
c00143c3:	50                   	push   eax
c00143c4:	57                   	push   edi
c00143c5:	e8 76 74 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	85 c0                	test   eax,eax
c00143cf:	0f 85 91 00 00 00    	jne    c0014466 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143d5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00143e0:	0f af c2             	imul   eax,edx
c00143e3:	50                   	push   eax
c00143e4:	e8 ea 36 ff ff       	call   c0007ad3 <malloc>
c00143e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00143eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00143ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00143f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143f6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00143fa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00143fe:	0f af c2             	imul   eax,edx
c0014401:	99                   	cdq    
c0014402:	52                   	push   edx
c0014403:	50                   	push   eax
c0014404:	57                   	push   edi
c0014405:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014408:	83 c4 20             	add    esp,0x20
c001440b:	31 c9                	xor    ecx,ecx
c001440d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014415:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014419:	0f b7 e9             	movzx  ebp,cx
c001441c:	0f 83 86 00 00 00    	jae    c00144a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014422:	c1 e5 05             	shl    ebp,0x5
c0014425:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014429:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001442d:	75 73                	jne    c00144a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001442f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014436:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001443d:	52                   	push   edx
c001443e:	31 d2                	xor    edx,edx
c0014440:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014443:	52                   	push   edx
c0014444:	50                   	push   eax
c0014445:	57                   	push   edi
c0014446:	e8 f5 73 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014452:	85 c0                	test   eax,eax
c0014454:	74 17                	je     c001446d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	68 aa 1f 02 c0       	push   0xc0021faa
c001445e:	e8 a7 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	31 c0                	xor    eax,eax
c0014468:	e9 8b 00 00 00       	jmp    c00144f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c001446d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014471:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001447a:	50                   	push   eax
c001447b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001447f:	56                   	push   esi
c0014480:	57                   	push   edi
c0014481:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014485:	e8 d0 fb ff ff       	call   c001405a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001448a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001448e:	83 c4 20             	add    esp,0x20
c0014491:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014495:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014499:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001449e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00144a2:	41                   	inc    ecx
c00144a3:	e9 6d ff ff ff       	jmp    c0014415 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00144a8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144b7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00144bd:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00144c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144c8:	05 00 10 00 00       	add    eax,0x1000
c00144cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144d4:	e8 0a 36 ff ff       	call   c0007ae3 <free>
c00144d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144dc:	e8 02 36 ff ff       	call   c0007ae3 <free>
c00144e1:	58                   	pop    eax
c00144e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144e6:	e8 f8 35 ff ff       	call   c0007ae3 <free>
c00144eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144ee:	e8 ed 72 ff ff       	call   c000b7e0 <File::close()>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	b0 01                	mov    al,0x1
c00144f8:	83 c4 3c             	add    esp,0x3c
c00144fb:	5b                   	pop    ebx
c00144fc:	5e                   	pop    esi
c00144fd:	5f                   	pop    edi
c00144fe:	5d                   	pop    ebp
c00144ff:	c3                   	ret    

c0014500 <Thr::runtimeReferenceHelper()>:
c0014500:	83 ec 18             	sub    esp,0x18
c0014503:	68 b2 1f 02 c0       	push   0xc0021fb2
c0014508:	e8 fd 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001450d:	fa                   	cli    
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	eb fe                	jmp    c0014511 <Thr::runtimeReferenceHelper()+0x11>

c0014513 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014513:	57                   	push   edi
c0014514:	56                   	push   esi
c0014515:	53                   	push   ebx
c0014516:	31 db                	xor    ebx,ebx
c0014518:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c001451e:	7e 3c                	jle    c001455c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014520:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c0014527:	31 ff                	xor    edi,edi
c0014529:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c0014530:	7e 27                	jle    c0014559 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014532:	50                   	push   eax
c0014533:	50                   	push   eax
c0014534:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014538:	8b 06                	mov    eax,DWORD PTR [esi]
c001453a:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c0014541:	50                   	push   eax
c0014542:	e8 39 c2 fe ff       	call   c0000780 <strcmp>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	85 c0                	test   eax,eax
c001454c:	75 05                	jne    c0014553 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001454e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014551:	eb 0b                	jmp    c001455e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014553:	83 c6 10             	add    esi,0x10
c0014556:	47                   	inc    edi
c0014557:	eb d0                	jmp    c0014529 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014559:	43                   	inc    ebx
c001455a:	eb bc                	jmp    c0014518 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001455c:	31 c0                	xor    eax,eax
c001455e:	5b                   	pop    ebx
c001455f:	5e                   	pop    esi
c0014560:	5f                   	pop    edi
c0014561:	c3                   	ret    

c0014562 <Thr::loadKernelSymbolTable(char const*)>:
c0014562:	55                   	push   ebp
c0014563:	57                   	push   edi
c0014564:	56                   	push   esi
c0014565:	53                   	push   ebx
c0014566:	83 ec 68             	sub    esp,0x68
c0014569:	68 14 01 00 00       	push   0x114
c001456e:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014574:	e8 5a 35 ff ff       	call   c0007ad3 <malloc>
c0014579:	83 c4 0c             	add    esp,0xc
c001457c:	56                   	push   esi
c001457d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014581:	89 c3                	mov    ebx,eax
c0014583:	50                   	push   eax
c0014584:	e8 3d 71 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0014589:	5e                   	pop    esi
c001458a:	5f                   	pop    edi
c001458b:	6a 01                	push   0x1
c001458d:	53                   	push   ebx
c001458e:	e8 ef 71 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	85 c0                	test   eax,eax
c0014598:	74 0a                	je     c00145a4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001459a:	83 ec 0c             	sub    esp,0xc
c001459d:	68 d4 1f 02 c0       	push   0xc0021fd4
c00145a2:	eb 34                	jmp    c00145d8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00145a4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00145ac:	83 ec 0c             	sub    esp,0xc
c00145af:	6a 34                	push   0x34
c00145b1:	e8 1d 35 ff ff       	call   c0007ad3 <malloc>
c00145b6:	59                   	pop    ecx
c00145b7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00145bb:	89 c7                	mov    edi,eax
c00145bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145bf:	56                   	push   esi
c00145c0:	57                   	push   edi
c00145c1:	6a 00                	push   0x0
c00145c3:	6a 34                	push   0x34
c00145c5:	53                   	push   ebx
c00145c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145c9:	83 c4 20             	add    esp,0x20
c00145cc:	85 c0                	test   eax,eax
c00145ce:	74 17                	je     c00145e7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	68 eb 1f 02 c0       	push   0xc0021feb
c00145d8:	e8 70 cb ff ff       	call   c001114d <KePanic(char const*)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	31 c0                	xor    eax,eax
c00145e2:	e9 31 02 00 00       	jmp    c0014818 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00145e7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00145ed:	75 e1                	jne    c00145d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00145ef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00145f2:	85 c0                	test   eax,eax
c00145f4:	74 da                	je     c00145d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00145f6:	52                   	push   edx
c00145f7:	31 d2                	xor    edx,edx
c00145f9:	52                   	push   edx
c00145fa:	50                   	push   eax
c00145fb:	53                   	push   ebx
c00145fc:	e8 3f 72 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014601:	83 c4 10             	add    esp,0x10
c0014604:	85 c0                	test   eax,eax
c0014606:	75 c8                	jne    c00145d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014608:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	31 ed                	xor    ebp,ebp
c0014611:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014615:	0f af c2             	imul   eax,edx
c0014618:	50                   	push   eax
c0014619:	e8 b5 34 ff ff       	call   c0007ad3 <malloc>
c001461e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014620:	89 34 24             	mov    DWORD PTR [esp],esi
c0014623:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001462b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001462f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014633:	0f af c2             	imul   eax,edx
c0014636:	99                   	cdq    
c0014637:	52                   	push   edx
c0014638:	50                   	push   eax
c0014639:	53                   	push   ebx
c001463a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001463d:	83 c4 20             	add    esp,0x20
c0014640:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014648:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014650:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014658:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014660:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014664:	0f b7 f5             	movzx  esi,bp
c0014667:	0f 83 a7 00 00 00    	jae    c0014714 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001466d:	6b f6 28             	imul   esi,esi,0x28
c0014670:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014674:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001467b:	50                   	push   eax
c001467c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014684:	8b 16                	mov    edx,DWORD PTR [esi]
c0014686:	6b c0 28             	imul   eax,eax,0x28
c0014689:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001468d:	89 d0                	mov    eax,edx
c001468f:	31 d2                	xor    edx,edx
c0014691:	52                   	push   edx
c0014692:	50                   	push   eax
c0014693:	53                   	push   ebx
c0014694:	e8 a7 71 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	6a 20                	push   0x20
c001469e:	6a 00                	push   0x0
c00146a0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146a4:	52                   	push   edx
c00146a5:	e8 46 be fe ff       	call   c00004f0 <memset>
c00146aa:	58                   	pop    eax
c00146ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146ad:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00146b1:	51                   	push   ecx
c00146b2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00146b6:	52                   	push   edx
c00146b7:	6a 00                	push   0x0
c00146b9:	6a 1f                	push   0x1f
c00146bb:	53                   	push   ebx
c00146bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146bf:	83 c4 18             	add    esp,0x18
c00146c2:	68 02 20 02 c0       	push   0xc0022002
c00146c7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146cb:	52                   	push   edx
c00146cc:	e8 af c0 fe ff       	call   c0000780 <strcmp>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	85 c0                	test   eax,eax
c00146d6:	75 0f                	jne    c00146e7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00146d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00146db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146e7:	50                   	push   eax
c00146e8:	50                   	push   eax
c00146e9:	68 0a 20 02 c0       	push   0xc002200a
c00146ee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00146f2:	50                   	push   eax
c00146f3:	e8 88 c0 fe ff       	call   c0000780 <strcmp>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	85 c0                	test   eax,eax
c00146fd:	75 0f                	jne    c001470e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00146ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014702:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001470a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001470e:	45                   	inc    ebp
c001470f:	e9 4c ff ff ff       	jmp    c0014660 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014714:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014719:	75 10                	jne    c001472b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001471b:	83 ec 0c             	sub    esp,0xc
c001471e:	68 12 20 02 c0       	push   0xc0022012
c0014723:	e8 25 ca ff ff       	call   c001114d <KePanic(char const*)>
c0014728:	83 c4 10             	add    esp,0x10
c001472b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014730:	75 10                	jne    c0014742 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	68 12 20 02 c0       	push   0xc0022012
c001473a:	e8 0e ca ff ff       	call   c001114d <KePanic(char const*)>
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	50                   	push   eax
c0014743:	31 d2                	xor    edx,edx
c0014745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014749:	52                   	push   edx
c001474a:	50                   	push   eax
c001474b:	53                   	push   ebx
c001474c:	e8 ef 70 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014751:	5a                   	pop    edx
c0014752:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014756:	e8 78 33 ff ff       	call   c0007ad3 <malloc>
c001475b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001475f:	31 c9                	xor    ecx,ecx
c0014761:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014765:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014767:	5e                   	pop    esi
c0014768:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001476c:	55                   	push   ebp
c001476d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014771:	51                   	push   ecx
c0014772:	52                   	push   edx
c0014773:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014777:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001477b:	53                   	push   ebx
c001477c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001477f:	83 c4 14             	add    esp,0x14
c0014782:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014786:	e8 48 33 ff ff       	call   c0007ad3 <malloc>
c001478b:	89 c6                	mov    esi,eax
c001478d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014792:	56                   	push   esi
c0014793:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014797:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001479b:	51                   	push   ecx
c001479c:	52                   	push   edx
c001479d:	53                   	push   ebx
c001479e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147a5:	83 c4 1c             	add    esp,0x1c
c00147a8:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c00147ae:	c1 e8 04             	shr    eax,0x4
c00147b1:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c00147b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147bc:	31 d2                	xor    edx,edx
c00147be:	52                   	push   edx
c00147bf:	50                   	push   eax
c00147c0:	53                   	push   ebx
c00147c1:	e8 7a 70 ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00147c6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147c8:	31 d2                	xor    edx,edx
c00147ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147cd:	56                   	push   esi
c00147ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147d2:	52                   	push   edx
c00147d3:	50                   	push   eax
c00147d4:	53                   	push   ebx
c00147d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147d8:	83 c4 14             	add    esp,0x14
c00147db:	53                   	push   ebx
c00147dc:	e8 ff 6f ff ff       	call   c000b7e0 <File::close()>
c00147e1:	5d                   	pop    ebp
c00147e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00147e6:	e8 f8 32 ff ff       	call   c0007ae3 <free>
c00147eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147ee:	e8 f0 32 ff ff       	call   c0007ae3 <free>
c00147f3:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c00147f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c0014806:	8d 50 01             	lea    edx,[eax+0x1]
c0014809:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014810:	b0 01                	mov    al,0x1
c0014812:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c0014818:	83 c4 5c             	add    esp,0x5c
c001481b:	5b                   	pop    ebx
c001481c:	5e                   	pop    esi
c001481d:	5f                   	pop    edi
c001481e:	5d                   	pop    ebp
c001481f:	c3                   	ret    

c0014820 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014820:	55                   	push   ebp
c0014821:	57                   	push   edi
c0014822:	56                   	push   esi
c0014823:	53                   	push   ebx
c0014824:	81 ec 68 03 00 00    	sub    esp,0x368
c001482a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014831:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014837:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001483b:	68 14 01 00 00       	push   0x114
c0014840:	e8 8e 32 ff ff       	call   c0007ad3 <malloc>
c0014845:	83 c4 0c             	add    esp,0xc
c0014848:	56                   	push   esi
c0014849:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014850:	50                   	push   eax
c0014851:	89 c3                	mov    ebx,eax
c0014853:	e8 6e 6e ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0014858:	5f                   	pop    edi
c0014859:	5d                   	pop    ebp
c001485a:	6a 01                	push   0x1
c001485c:	53                   	push   ebx
c001485d:	e8 20 6f ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	85 c0                	test   eax,eax
c0014867:	0f 85 b3 06 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001486d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014875:	83 ec 0c             	sub    esp,0xc
c0014878:	6a 34                	push   0x34
c001487a:	e8 54 32 ff ff       	call   c0007ad3 <malloc>
c001487f:	5e                   	pop    esi
c0014880:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014884:	89 c5                	mov    ebp,eax
c0014886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014888:	56                   	push   esi
c0014889:	55                   	push   ebp
c001488a:	6a 00                	push   0x0
c001488c:	6a 34                	push   0x34
c001488e:	53                   	push   ebx
c001488f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014892:	83 c4 20             	add    esp,0x20
c0014895:	85 c0                	test   eax,eax
c0014897:	0f 85 83 06 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001489d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00148a4:	0f 85 76 06 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148aa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00148ad:	85 c0                	test   eax,eax
c00148af:	0f 84 6b 06 00 00    	je     c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148b5:	31 d2                	xor    edx,edx
c00148b7:	51                   	push   ecx
c00148b8:	52                   	push   edx
c00148b9:	50                   	push   eax
c00148ba:	53                   	push   ebx
c00148bb:	e8 80 6f ff ff       	call   c000b840 <File::seek(unsigned long long)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	85 c0                	test   eax,eax
c00148c5:	0f 85 55 06 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148cb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00148ce:	83 ec 0c             	sub    esp,0xc
c00148d1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00148d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00148d9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00148dd:	0f af c2             	imul   eax,edx
c00148e0:	50                   	push   eax
c00148e1:	e8 ed 31 ff ff       	call   c0007ad3 <malloc>
c00148e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00148eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148f3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00148f7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00148fb:	0f af c2             	imul   eax,edx
c00148fe:	99                   	cdq    
c00148ff:	52                   	push   edx
c0014900:	50                   	push   eax
c0014901:	53                   	push   ebx
c0014902:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014905:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014908:	83 c4 20             	add    esp,0x20
c001490b:	85 c0                	test   eax,eax
c001490d:	0f 84 0d 06 00 00    	je     c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014913:	52                   	push   edx
c0014914:	31 d2                	xor    edx,edx
c0014916:	52                   	push   edx
c0014917:	50                   	push   eax
c0014918:	53                   	push   ebx
c0014919:	e8 22 6f ff ff       	call   c000b840 <File::seek(unsigned long long)>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	85 c0                	test   eax,eax
c0014923:	0f 85 f7 05 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014929:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001492d:	83 ec 0c             	sub    esp,0xc
c0014930:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014934:	0f af c2             	imul   eax,edx
c0014937:	50                   	push   eax
c0014938:	e8 96 31 ff ff       	call   c0007ad3 <malloc>
c001493d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001493f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001494a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001494e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014952:	0f af c2             	imul   eax,edx
c0014955:	99                   	cdq    
c0014956:	52                   	push   edx
c0014957:	50                   	push   eax
c0014958:	53                   	push   ebx
c0014959:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001495c:	83 c4 20             	add    esp,0x20
c001495f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014965:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014968:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001496c:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014970:	73 78                	jae    c00149ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014972:	c1 e7 05             	shl    edi,0x5
c0014975:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014979:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001497c:	75 63                	jne    c00149e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001497e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014981:	31 d2                	xor    edx,edx
c0014983:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014986:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001498a:	50                   	push   eax
c001498b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001498e:	52                   	push   edx
c001498f:	50                   	push   eax
c0014990:	53                   	push   ebx
c0014991:	e8 aa 6e ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014996:	83 c4 10             	add    esp,0x10
c0014999:	85 c0                	test   eax,eax
c001499b:	0f 85 7f 05 00 00    	jne    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149a1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00149a8:	83 ec 0c             	sub    esp,0xc
c00149ab:	31 d2                	xor    edx,edx
c00149ad:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00149b1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149b3:	01 c6                	add    esi,eax
c00149b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149bc:	50                   	push   eax
c00149bd:	56                   	push   esi
c00149be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149c2:	52                   	push   edx
c00149c3:	50                   	push   eax
c00149c4:	53                   	push   ebx
c00149c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149c8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00149cb:	83 c4 1c             	add    esp,0x1c
c00149ce:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00149d1:	50                   	push   eax
c00149d2:	6a 00                	push   0x0
c00149d4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00149d8:	56                   	push   esi
c00149d9:	e8 12 bb fe ff       	call   c00004f0 <memset>
c00149de:	83 c4 10             	add    esp,0x10
c00149e1:	66 ff 04 24          	inc    WORD PTR [esp]
c00149e5:	e9 7b ff ff ff       	jmp    c0014965 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00149ea:	50                   	push   eax
c00149eb:	68 00 01 00 00       	push   0x100
c00149f0:	6a 00                	push   0x0
c00149f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00149f6:	50                   	push   eax
c00149f7:	e8 f4 ba fe ff       	call   c00004f0 <memset>
c00149fc:	83 c4 0c             	add    esp,0xc
c00149ff:	68 00 01 00 00       	push   0x100
c0014a04:	6a 00                	push   0x0
c0014a06:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a0d:	50                   	push   eax
c0014a0e:	e8 dd ba fe ff       	call   c00004f0 <memset>
c0014a13:	83 c4 10             	add    esp,0x10
c0014a16:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014a1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a24:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014a34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a3c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a48:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014a4c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014a51:	0f 83 16 01 00 00    	jae    c0014b6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014a57:	6b ff 28             	imul   edi,edi,0x28
c0014a5a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014a5e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014a61:	51                   	push   ecx
c0014a62:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014a66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014a6a:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a6c:	6b d2 28             	imul   edx,edx,0x28
c0014a6f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014a73:	31 d2                	xor    edx,edx
c0014a75:	52                   	push   edx
c0014a76:	50                   	push   eax
c0014a77:	53                   	push   ebx
c0014a78:	e8 c3 6d ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014a7d:	83 c4 0c             	add    esp,0xc
c0014a80:	6a 20                	push   0x20
c0014a82:	6a 00                	push   0x0
c0014a84:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014a8b:	51                   	push   ecx
c0014a8c:	e8 5f ba fe ff       	call   c00004f0 <memset>
c0014a91:	58                   	pop    eax
c0014a92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014a98:	52                   	push   edx
c0014a99:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014aa0:	51                   	push   ecx
c0014aa1:	6a 00                	push   0x0
c0014aa3:	6a 1f                	push   0x1f
c0014aa5:	53                   	push   ebx
c0014aa6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aa9:	83 c4 1c             	add    esp,0x1c
c0014aac:	6a 09                	push   0x9
c0014aae:	68 2c 20 02 c0       	push   0xc002202c
c0014ab3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014aba:	51                   	push   ecx
c0014abb:	e8 c0 b8 fe ff       	call   c0000380 <memcmp>
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	85 c0                	test   eax,eax
c0014ac5:	75 1a                	jne    c0014ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014ac7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014aca:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014acd:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014ad1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014ad4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014adb:	89 d0                	mov    eax,edx
c0014add:	40                   	inc    eax
c0014ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ae1:	52                   	push   edx
c0014ae2:	6a 09                	push   0x9
c0014ae4:	68 36 20 02 c0       	push   0xc0022036
c0014ae9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014af0:	50                   	push   eax
c0014af1:	e8 8a b8 fe ff       	call   c0000380 <memcmp>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	85 c0                	test   eax,eax
c0014afb:	75 1a                	jne    c0014b17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014afd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b00:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b03:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b07:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b0a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b11:	89 c8                	mov    eax,ecx
c0014b13:	40                   	inc    eax
c0014b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b17:	50                   	push   eax
c0014b18:	50                   	push   eax
c0014b19:	68 02 20 02 c0       	push   0xc0022002
c0014b1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b25:	50                   	push   eax
c0014b26:	e8 55 bc fe ff       	call   c0000780 <strcmp>
c0014b2b:	83 c4 10             	add    esp,0x10
c0014b2e:	85 c0                	test   eax,eax
c0014b30:	75 0b                	jne    c0014b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014b32:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014b36:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b3d:	50                   	push   eax
c0014b3e:	50                   	push   eax
c0014b3f:	68 0a 20 02 c0       	push   0xc002200a
c0014b44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b4b:	50                   	push   eax
c0014b4c:	e8 2f bc fe ff       	call   c0000780 <strcmp>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	85 c0                	test   eax,eax
c0014b56:	75 0b                	jne    c0014b63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014b58:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014b5c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b63:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014b68:	e9 d7 fe ff ff       	jmp    c0014a44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014b6d:	50                   	push   eax
c0014b6e:	31 d2                	xor    edx,edx
c0014b70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b74:	52                   	push   edx
c0014b75:	50                   	push   eax
c0014b76:	53                   	push   ebx
c0014b77:	e8 c4 6c ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014b7c:	58                   	pop    eax
c0014b7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b81:	e8 4d 2f ff ff       	call   c0007ad3 <malloc>
c0014b86:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b88:	31 d2                	xor    edx,edx
c0014b8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014b8e:	58                   	pop    eax
c0014b8f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014b93:	56                   	push   esi
c0014b94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b9c:	52                   	push   edx
c0014b9d:	50                   	push   eax
c0014b9e:	53                   	push   ebx
c0014b9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ba2:	83 c4 14             	add    esp,0x14
c0014ba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba9:	e8 25 2f ff ff       	call   c0007ad3 <malloc>
c0014bae:	31 d2                	xor    edx,edx
c0014bb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014bb4:	83 c4 0c             	add    esp,0xc
c0014bb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bbb:	52                   	push   edx
c0014bbc:	50                   	push   eax
c0014bbd:	53                   	push   ebx
c0014bbe:	e8 7d 6c ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014bc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bc5:	31 d2                	xor    edx,edx
c0014bc7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014bd2:	52                   	push   edx
c0014bd3:	50                   	push   eax
c0014bd4:	53                   	push   ebx
c0014bd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bd8:	83 c4 20             	add    esp,0x20
c0014bdb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014be8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014bec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014bf0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014bf3:	0f 84 2b 03 00 00    	je     c0014f24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014bf9:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c00:	31 d2                	xor    edx,edx
c0014c02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c06:	c1 e8 03             	shr    eax,0x3
c0014c09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c0d:	51                   	push   ecx
c0014c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c12:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014c16:	52                   	push   edx
c0014c17:	50                   	push   eax
c0014c18:	53                   	push   ebx
c0014c19:	e8 22 6c ff ff       	call   c000b840 <File::seek(unsigned long long)>
c0014c1e:	5e                   	pop    esi
c0014c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c23:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014c2a:	e8 a4 2e ff ff       	call   c0007ad3 <malloc>
c0014c2f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c31:	31 d2                	xor    edx,edx
c0014c33:	89 c7                	mov    edi,eax
c0014c35:	58                   	pop    eax
c0014c36:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014c3a:	50                   	push   eax
c0014c3b:	57                   	push   edi
c0014c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c40:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014c47:	52                   	push   edx
c0014c48:	50                   	push   eax
c0014c49:	53                   	push   ebx
c0014c4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c4d:	83 c4 20             	add    esp,0x20
c0014c50:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c58:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014c5c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014c60:	0f 8d a5 02 00 00    	jge    c0014f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014c66:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c6f:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014c72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c7a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014c7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c82:	c1 e8 08             	shr    eax,0x8
c0014c85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c89:	89 c2                	mov    edx,eax
c0014c8b:	c1 e2 04             	shl    edx,0x4
c0014c8e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014c92:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014c95:	85 f6                	test   esi,esi
c0014c97:	0f 85 cf 00 00 00    	jne    c0014d6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014c9d:	83 ec 0c             	sub    esp,0xc
c0014ca0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca8:	03 02                	add    eax,DWORD PTR [edx]
c0014caa:	50                   	push   eax
c0014cab:	e8 63 f8 ff ff       	call   c0014513 <Thr::getAddressOfKernelSymbol(char const*)>
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cb7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014cbc:	85 c0                	test   eax,eax
c0014cbe:	89 c6                	mov    esi,eax
c0014cc0:	0f 85 a6 00 00 00    	jne    c0014d6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cc6:	83 ec 0c             	sub    esp,0xc
c0014cc9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd1:	03 02                	add    eax,DWORD PTR [edx]
c0014cd3:	50                   	push   eax
c0014cd4:	e8 5f c6 ff ff       	call   c0011338 <KeResolveCompatibilitySymbol(char*)>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ce0:	85 c0                	test   eax,eax
c0014ce2:	89 c6                	mov    esi,eax
c0014ce4:	0f 85 82 00 00 00    	jne    c0014d6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cea:	50                   	push   eax
c0014ceb:	50                   	push   eax
c0014cec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cf0:	03 02                	add    eax,DWORD PTR [edx]
c0014cf2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014cf6:	50                   	push   eax
c0014cf7:	68 40 20 02 c0       	push   0xc0022040
c0014cfc:	e8 09 5c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d01:	58                   	pop    eax
c0014d02:	5a                   	pop    edx
c0014d03:	68 5a 20 02 c0       	push   0xc002205a
c0014d08:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d0f:	51                   	push   ecx
c0014d10:	e8 3b b9 fe ff       	call   c0000650 <strcpy>
c0014d15:	59                   	pop    ecx
c0014d16:	58                   	pop    eax
c0014d17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d1f:	03 02                	add    eax,DWORD PTR [edx]
c0014d21:	50                   	push   eax
c0014d22:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d29:	51                   	push   ecx
c0014d2a:	e8 41 bb fe ff       	call   c0000870 <strcat>
c0014d2f:	58                   	pop    eax
c0014d30:	5a                   	pop    edx
c0014d31:	68 f0 20 02 c0       	push   0xc00220f0
c0014d36:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d3d:	51                   	push   ecx
c0014d3e:	e8 2d bb fe ff       	call   c0000870 <strcat>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014d4b:	0f 84 77 01 00 00    	je     c0014ec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014d51:	83 ec 0c             	sub    esp,0xc
c0014d54:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d5b:	51                   	push   ecx
c0014d5c:	e8 ec c3 ff ff       	call   c001114d <KePanic(char const*)>
c0014d61:	83 c4 10             	add    esp,0x10
c0014d64:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014d68:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014d6c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014d71:	83 f8 01             	cmp    eax,0x1
c0014d74:	0f 85 9b 00 00 00    	jne    c0014e15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014d7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d7e:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014d85:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014d89:	01 d0                	add    eax,edx
c0014d8b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d97:	0f 94 c0             	sete   al
c0014d9a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014da2:	0f 94 c1             	sete   cl
c0014da5:	09 c1                	or     ecx,eax
c0014da7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dab:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014db0:	0f b6 c9             	movzx  ecx,cl
c0014db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db5:	74 41                	je     c0014df8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014db7:	8d 14 06             	lea    edx,[esi+eax*1]
c0014dba:	85 c9                	test   ecx,ecx
c0014dbc:	75 15                	jne    c0014dd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014dbe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014dc2:	66 83 f8 0c          	cmp    ax,0xc
c0014dc6:	76 05                	jbe    c0014dcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014dc8:	b8 0c 00 00 00       	mov    eax,0xc
c0014dcd:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014dd1:	76 37                	jbe    c0014e0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014dd3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014dd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014ddc:	0f 84 e6 00 00 00    	je     c0014ec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014de2:	83 ec 0c             	sub    esp,0xc
c0014de5:	68 71 20 02 c0       	push   0xc0022071
c0014dea:	e8 5e c3 ff ff       	call   c001114d <KePanic(char const*)>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014df6:	eb 12                	jmp    c0014e0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014df8:	01 c2                	add    edx,eax
c0014dfa:	85 c9                	test   ecx,ecx
c0014dfc:	75 0c                	jne    c0014e0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014dfe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e02:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e06:	77 02                	ja     c0014e0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e08:	01 f2                	add    edx,esi
c0014e0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e0e:	89 10                	mov    DWORD PTR [eax],edx
c0014e10:	e9 ed 00 00 00       	jmp    c0014f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e15:	83 f8 02             	cmp    eax,0x2
c0014e18:	0f 85 81 00 00 00    	jne    c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014e1e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e25:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014e29:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014e2d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e35:	74 21                	je     c0014e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e37:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e3f:	74 17                	je     c0014e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e41:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014e45:	ba 0a 00 00 00       	mov    edx,0xa
c0014e4a:	83 f9 0e             	cmp    ecx,0xe
c0014e4d:	77 03                	ja     c0014e52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014e4f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014e52:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014e56:	76 1f                	jbe    c0014e77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014e58:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e61:	74 65                	je     c0014ec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e63:	83 ec 0c             	sub    esp,0xc
c0014e66:	68 8d 20 02 c0       	push   0xc002208d
c0014e6b:	e8 dd c2 ff ff       	call   c001114d <KePanic(char const*)>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e77:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014e7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0014e7e:	74 15                	je     c0014e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014e80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e84:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014e8b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e8f:	01 d1                	add    ecx,edx
c0014e91:	01 ce                	add    esi,ecx
c0014e93:	eb 06                	jmp    c0014e9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014e95:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014e99:	01 d6                	add    esi,edx
c0014e9b:	89 30                	mov    DWORD PTR [eax],esi
c0014e9d:	eb 63                	jmp    c0014f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e9f:	56                   	push   esi
c0014ea0:	56                   	push   esi
c0014ea1:	50                   	push   eax
c0014ea2:	68 a9 20 02 c0       	push   0xc00220a9
c0014ea7:	e8 5e 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014eb4:	74 12                	je     c0014ec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014eb6:	83 ec 0c             	sub    esp,0xc
c0014eb9:	68 b4 20 02 c0       	push   0xc00220b4
c0014ebe:	e8 8a c2 ff ff       	call   c001114d <KePanic(char const*)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	eb 3a                	jmp    c0014f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	53                   	push   ebx
c0014ecc:	e8 0f 69 ff ff       	call   c000b7e0 <File::close()>
c0014ed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ed3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ed6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ed9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014edc:	e8 02 2c ff ff       	call   c0007ae3 <free>
c0014ee1:	59                   	pop    ecx
c0014ee2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ee6:	e8 f8 2b ff ff       	call   c0007ae3 <free>
c0014eeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eee:	e8 f0 2b ff ff       	call   c0007ae3 <free>
c0014ef3:	5b                   	pop    ebx
c0014ef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ef8:	e8 e6 2b ff ff       	call   c0007ae3 <free>
c0014efd:	83 c4 10             	add    esp,0x10
c0014f00:	eb 1e                	jmp    c0014f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f02:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f06:	e9 4d fd ff ff       	jmp    c0014c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f0b:	83 ec 0c             	sub    esp,0xc
c0014f0e:	57                   	push   edi
c0014f0f:	e8 cf 2b ff ff       	call   c0007ae3 <free>
c0014f14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	e9 cc fc ff ff       	jmp    c0014bec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014f20:	31 c0                	xor    eax,eax
c0014f22:	eb 32                	jmp    c0014f56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	53                   	push   ebx
c0014f28:	e8 b3 68 ff ff       	call   c000b7e0 <File::close()>
c0014f2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f35:	58                   	pop    eax
c0014f36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f3a:	e8 a4 2b ff ff       	call   c0007ae3 <free>
c0014f3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f42:	e8 9c 2b ff ff       	call   c0007ae3 <free>
c0014f47:	5a                   	pop    edx
c0014f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f4c:	e8 92 2b ff ff       	call   c0007ae3 <free>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	b0 01                	mov    al,0x1
c0014f56:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014f5c:	5b                   	pop    ebx
c0014f5d:	5e                   	pop    esi
c0014f5e:	5f                   	pop    edi
c0014f5f:	5d                   	pop    ebp
c0014f60:	c3                   	ret    

c0014f61 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014f61:	56                   	push   esi
c0014f62:	31 d2                	xor    edx,edx
c0014f64:	53                   	push   ebx
c0014f65:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014f6b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f6f:	39 d3                	cmp    ebx,edx
c0014f71:	7e 1b                	jle    c0014f8e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014f73:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0014f7a:	39 c8                	cmp    eax,ecx
c0014f7c:	77 0d                	ja     c0014f8b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014f7e:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c0014f85:	01 c6                	add    esi,eax
c0014f87:	39 ce                	cmp    esi,ecx
c0014f89:	77 05                	ja     c0014f90 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014f8b:	42                   	inc    edx
c0014f8c:	eb e1                	jmp    c0014f6f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014f8e:	31 c0                	xor    eax,eax
c0014f90:	5b                   	pop    ebx
c0014f91:	5e                   	pop    esi
c0014f92:	c3                   	ret    

c0014f93 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014f93:	53                   	push   ebx
c0014f94:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014f9a:	31 c0                	xor    eax,eax
c0014f9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014fa0:	39 c3                	cmp    ebx,eax
c0014fa2:	7e 22                	jle    c0014fc6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014fa4:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0014fab:	39 ca                	cmp    edx,ecx
c0014fad:	77 14                	ja     c0014fc3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014faf:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0014fb6:	39 ca                	cmp    edx,ecx
c0014fb8:	76 09                	jbe    c0014fc3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014fba:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c0014fc1:	eb 05                	jmp    c0014fc8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014fc3:	40                   	inc    eax
c0014fc4:	eb da                	jmp    c0014fa0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014fc6:	31 c0                	xor    eax,eax
c0014fc8:	5b                   	pop    ebx
c0014fc9:	c3                   	ret    

c0014fca <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014fca:	53                   	push   ebx
c0014fcb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014fcf:	53                   	push   ebx
c0014fd0:	e8 8c ff ff ff       	call   c0014f61 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014fd5:	5a                   	pop    edx
c0014fd6:	31 d2                	xor    edx,edx
c0014fd8:	85 c0                	test   eax,eax
c0014fda:	74 04                	je     c0014fe0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014fdc:	89 da                	mov    edx,ebx
c0014fde:	29 c2                	sub    edx,eax
c0014fe0:	5b                   	pop    ebx
c0014fe1:	89 d0                	mov    eax,edx
c0014fe3:	c3                   	ret    

c0014fe4 <Thr::loadDLL(char const*, bool)>:
c0014fe4:	55                   	push   ebp
c0014fe5:	57                   	push   edi
c0014fe6:	56                   	push   esi
c0014fe7:	53                   	push   ebx
c0014fe8:	81 ec 34 01 00 00    	sub    esp,0x134
c0014fee:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014ff5:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014ffc:	56                   	push   esi
c0014ffd:	68 cc 20 02 c0       	push   0xc00220cc
c0015002:	e8 03 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015007:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001500e:	e8 c0 2a ff ff       	call   c0007ad3 <malloc>
c0015013:	83 c4 0c             	add    esp,0xc
c0015016:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001501c:	56                   	push   esi
c001501d:	50                   	push   eax
c001501e:	89 c3                	mov    ebx,eax
c0015020:	e8 a1 66 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	85 db                	test   ebx,ebx
c001502a:	75 3c                	jne    c0015068 <Thr::loadDLL(char const*, bool)+0x84>
c001502c:	89 e8                	mov    eax,ebp
c001502e:	84 c0                	test   al,al
c0015030:	0f 84 e1 01 00 00    	je     c0015217 <Thr::loadDLL(char const*, bool)+0x233>
c0015036:	50                   	push   eax
c0015037:	50                   	push   eax
c0015038:	68 dd 20 02 c0       	push   0xc00220dd
c001503d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015041:	57                   	push   edi
c0015042:	e8 09 b6 fe ff       	call   c0000650 <strcpy>
c0015047:	58                   	pop    eax
c0015048:	5a                   	pop    edx
c0015049:	56                   	push   esi
c001504a:	57                   	push   edi
c001504b:	e8 20 b8 fe ff       	call   c0000870 <strcat>
c0015050:	59                   	pop    ecx
c0015051:	58                   	pop    eax
c0015052:	68 f0 20 02 c0       	push   0xc00220f0
c0015057:	57                   	push   edi
c0015058:	e8 13 b8 fe ff       	call   c0000870 <strcat>
c001505d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015060:	e8 e8 c0 ff ff       	call   c001114d <KePanic(char const*)>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	50                   	push   eax
c0015069:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001506d:	50                   	push   eax
c001506e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015072:	50                   	push   eax
c0015073:	53                   	push   ebx
c0015074:	e8 0b 6a ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	85 db                	test   ebx,ebx
c001507e:	74 0c                	je     c001508c <Thr::loadDLL(char const*, bool)+0xa8>
c0015080:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015082:	83 ec 0c             	sub    esp,0xc
c0015085:	53                   	push   ebx
c0015086:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015091:	75 0a                	jne    c001509d <Thr::loadDLL(char const*, bool)+0xb9>
c0015093:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015097:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001509b:	75 3e                	jne    c00150db <Thr::loadDLL(char const*, bool)+0xf7>
c001509d:	89 e8                	mov    eax,ebp
c001509f:	31 db                	xor    ebx,ebx
c00150a1:	84 c0                	test   al,al
c00150a3:	0f 84 6e 01 00 00    	je     c0015217 <Thr::loadDLL(char const*, bool)+0x233>
c00150a9:	50                   	push   eax
c00150aa:	50                   	push   eax
c00150ab:	68 dd 20 02 c0       	push   0xc00220dd
c00150b0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00150b4:	53                   	push   ebx
c00150b5:	e8 96 b5 fe ff       	call   c0000650 <strcpy>
c00150ba:	58                   	pop    eax
c00150bb:	5a                   	pop    edx
c00150bc:	56                   	push   esi
c00150bd:	53                   	push   ebx
c00150be:	e8 ad b7 fe ff       	call   c0000870 <strcat>
c00150c3:	59                   	pop    ecx
c00150c4:	5f                   	pop    edi
c00150c5:	68 f0 20 02 c0       	push   0xc00220f0
c00150ca:	53                   	push   ebx
c00150cb:	e8 a0 b7 fe ff       	call   c0000870 <strcat>
c00150d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150d3:	e8 75 c0 ff ff       	call   c001114d <KePanic(char const*)>
c00150d8:	83 c4 10             	add    esp,0x10
c00150db:	53                   	push   ebx
c00150dc:	6a 03                	push   0x3
c00150de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00150e6:	05 ff 0f 00 00       	add    eax,0xfff
c00150eb:	83 d2 00             	adc    edx,0x0
c00150ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00150f2:	50                   	push   eax
c00150f3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00150f9:	e8 08 4d ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00150fe:	89 c3                	mov    ebx,eax
c0015100:	58                   	pop    eax
c0015101:	5a                   	pop    edx
c0015102:	53                   	push   ebx
c0015103:	68 92 07 02 c0       	push   0xc0020792
c0015108:	e8 fd 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001510d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015110:	e8 6b b4 fe ff       	call   c0000580 <strlen>
c0015115:	8b 3d a0 9c 02 c0    	mov    edi,DWORD PTR ds:0xc0029ca0
c001511b:	40                   	inc    eax
c001511c:	89 04 24             	mov    DWORD PTR [esp],eax
c001511f:	e8 af 29 ff ff       	call   c0007ad3 <malloc>
c0015124:	59                   	pop    ecx
c0015125:	89 04 bd c0 a0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5f40],eax
c001512c:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015131:	5f                   	pop    edi
c0015132:	56                   	push   esi
c0015133:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c001513a:	e8 11 b5 fe ff       	call   c0000650 <strcpy>
c001513f:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015144:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c001514b:	8d 50 01             	lea    edx,[eax+0x1]
c001514e:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c0015154:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015158:	83 c4 0c             	add    esp,0xc
c001515b:	6a 01                	push   0x1
c001515d:	53                   	push   ebx
c001515e:	56                   	push   esi
c001515f:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c0015166:	e8 b5 f6 ff ff       	call   c0014820 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	89 c7                	mov    edi,eax
c0015170:	89 f8                	mov    eax,edi
c0015172:	83 f0 01             	xor    eax,0x1
c0015175:	84 c0                	test   al,al
c0015177:	74 18                	je     c0015191 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015179:	89 e8                	mov    eax,ebp
c001517b:	84 c0                	test   al,al
c001517d:	74 12                	je     c0015191 <Thr::loadDLL(char const*, bool)+0x1ad>
c001517f:	83 ec 0c             	sub    esp,0xc
c0015182:	68 f2 20 02 c0       	push   0xc00220f2
c0015187:	e8 c1 bf ff ff       	call   c001114d <KePanic(char const*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	eb 06                	jmp    c0015197 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015191:	89 f8                	mov    eax,edi
c0015193:	84 c0                	test   al,al
c0015195:	75 10                	jne    c00151a7 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015197:	83 ec 0c             	sub    esp,0xc
c001519a:	68 11 21 02 c0       	push   0xc0022111
c001519f:	e8 a9 bf ff ff       	call   c001114d <KePanic(char const*)>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	31 f6                	xor    esi,esi
c00151a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151b1:	05 ff 0f 00 00       	add    eax,0xfff
c00151b6:	83 d2 00             	adc    edx,0x0
c00151b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151c1:	c1 ea 0c             	shr    edx,0xc
c00151c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151c8:	ba 00 00 00 00       	mov    edx,0x0
c00151cd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00151d1:	89 d0                	mov    eax,edx
c00151d3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00151d7:	73 32                	jae    c001520b <Thr::loadDLL(char const*, bool)+0x227>
c00151d9:	50                   	push   eax
c00151da:	50                   	push   eax
c00151db:	89 f0                	mov    eax,esi
c00151dd:	c1 e0 0c             	shl    eax,0xc
c00151e0:	01 d8                	add    eax,ebx
c00151e2:	50                   	push   eax
c00151e3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151e9:	e8 fc 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f3:	a8 60                	test   al,0x60
c00151f5:	75 11                	jne    c0015208 <Thr::loadDLL(char const*, bool)+0x224>
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00151ff:	50                   	push   eax
c0015200:	e8 74 2b ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015205:	83 c4 10             	add    esp,0x10
c0015208:	46                   	inc    esi
c0015209:	eb 9e                	jmp    c00151a9 <Thr::loadDLL(char const*, bool)+0x1c5>
c001520b:	89 f8                	mov    eax,edi
c001520d:	84 c0                	test   al,al
c001520f:	b8 00 00 00 00       	mov    eax,0x0
c0015214:	0f 44 d8             	cmove  ebx,eax
c0015217:	81 c4 2c 01 00 00    	add    esp,0x12c
c001521d:	89 d8                	mov    eax,ebx
c001521f:	5b                   	pop    ebx
c0015220:	5e                   	pop    esi
c0015221:	5f                   	pop    edi
c0015222:	5d                   	pop    ebp
c0015223:	c3                   	ret    

c0015224 <Thr::executeDLL(unsigned long, void*)>:
c0015224:	56                   	push   esi
c0015225:	53                   	push   ebx
c0015226:	52                   	push   edx
c0015227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001522b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001522f:	85 db                	test   ebx,ebx
c0015231:	75 10                	jne    c0015243 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015233:	83 ec 0c             	sub    esp,0xc
c0015236:	68 2d 21 02 c0       	push   0xc002212d
c001523b:	e8 0d bf ff ff       	call   c001114d <KePanic(char const*)>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	50                   	push   eax
c0015244:	50                   	push   eax
c0015245:	53                   	push   ebx
c0015246:	68 57 21 02 c0       	push   0xc0022157
c001524b:	e8 ba 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015250:	89 d8                	mov    eax,ebx
c0015252:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015256:	83 c4 14             	add    esp,0x14
c0015259:	5b                   	pop    ebx
c001525a:	5e                   	pop    esi
c001525b:	ff e0                	jmp    eax
c001525d:	66 90                	xchg   ax,ax
c001525f:	90                   	nop

c0015260 <userModeEntryPoint(void*)>:
c0015260:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015265:	83 e8 01             	sub    eax,0x1
c0015268:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001526d:	75 01                	jne    c0015270 <userModeEntryPoint(void*)+0x10>
c001526f:	fb                   	sti    
c0015270:	fb                   	sti    
c0015271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015276:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015279:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001527f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015283:	e9 b7 af fe ff       	jmp    c000023f <goToUsermode>

c0015288 <changeTSS>:
c0015288:	83 ec 14             	sub    esp,0x14
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015293:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015298:	c1 e2 15             	shl    edx,0x15
c001529b:	29 d0                	sub    eax,edx
c001529d:	50                   	push   eax
c001529e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00152a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152a9:	05 7c 11 00 00       	add    eax,0x117c
c00152ae:	50                   	push   eax
c00152af:	e8 88 3c ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00152b4:	83 c4 1c             	add    esp,0x1c
c00152b7:	c3                   	ret    

c00152b8 <switchToThread(ThreadControlBlock*)>:
c00152b8:	57                   	push   edi
c00152b9:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00152bf:	56                   	push   esi
c00152c0:	53                   	push   ebx
c00152c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152c5:	85 c9                	test   ecx,ecx
c00152c7:	0f 85 8b 00 00 00    	jne    c0015358 <switchToThread(ThreadControlBlock*)+0xa0>
c00152cd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00152d1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00152d7:	74 7b                	je     c0015354 <switchToThread(ThreadControlBlock*)+0x9c>
c00152d9:	b8 00 04 00 00       	mov    eax,0x400
c00152de:	29 d0                	sub    eax,edx
c00152e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00152e3:	d1 f8                	sar    eax,1
c00152e5:	01 d0                	add    eax,edx
c00152e7:	90                   	nop
c00152e8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00152eb:	e8 04 28 00 00       	call   c0017af4 <HalQueryPerformanceCounter()>
c00152f0:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c00152f5:	89 c6                	mov    esi,eax
c00152f7:	89 d7                	mov    edi,edx
c00152f9:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c00152ff:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015304:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c001530a:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c0015310:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c0015316:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001531c:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c0015322:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c0015328:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001532b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001532e:	01 c6                	add    esi,eax
c0015330:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015333:	11 d7                	adc    edi,edx
c0015335:	83 ec 0c             	sub    esp,0xc
c0015338:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001533b:	53                   	push   ebx
c001533c:	e8 36 af fe ff       	call   c0000277 <switchToThreadASM>
c0015341:	0f 20 c0             	mov    eax,cr0
c0015344:	83 c8 08             	or     eax,0x8
c0015347:	0f 22 c0             	mov    cr0,eax
c001534a:	83 c4 10             	add    esp,0x10
c001534d:	5b                   	pop    ebx
c001534e:	5e                   	pop    esi
c001534f:	5f                   	pop    edi
c0015350:	c3                   	ret    
c0015351:	8d 76 00             	lea    esi,[esi+0x0]
c0015354:	31 c0                	xor    eax,eax
c0015356:	eb 90                	jmp    c00152e8 <switchToThread(ThreadControlBlock*)+0x30>
c0015358:	5b                   	pop    ebx
c0015359:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015363:	5e                   	pop    esi
c0015364:	5f                   	pop    edi
c0015365:	c3                   	ret    
c0015366:	66 90                	xchg   ax,ax

c0015368 <Process::addArgs(char**)>:
c0015368:	57                   	push   edi
c0015369:	56                   	push   esi
c001536a:	53                   	push   ebx
c001536b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001536f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015373:	85 f6                	test   esi,esi
c0015375:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001537f:	74 4f                	je     c00153d0 <Process::addArgs(char**)+0x68>
c0015381:	8b 06                	mov    eax,DWORD PTR [esi]
c0015383:	85 c0                	test   eax,eax
c0015385:	74 49                	je     c00153d0 <Process::addArgs(char**)+0x68>
c0015387:	31 db                	xor    ebx,ebx
c0015389:	8d 76 00             	lea    esi,[esi+0x0]
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	50                   	push   eax
c0015390:	e8 eb b1 fe ff       	call   c0000580 <strlen>
c0015395:	83 c0 01             	add    eax,0x1
c0015398:	89 04 24             	mov    DWORD PTR [esp],eax
c001539b:	e8 33 27 ff ff       	call   c0007ad3 <malloc>
c00153a0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00153a7:	5a                   	pop    edx
c00153a8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00153ab:	83 c3 01             	add    ebx,0x1
c00153ae:	59                   	pop    ecx
c00153af:	52                   	push   edx
c00153b0:	50                   	push   eax
c00153b1:	e8 9a b2 fe ff       	call   c0000650 <strcpy>
c00153b6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	83 c1 01             	add    ecx,0x1
c00153c2:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00153c8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00153cb:	85 c0                	test   eax,eax
c00153cd:	75 bd                	jne    c001538c <Process::addArgs(char**)+0x24>
c00153cf:	90                   	nop
c00153d0:	5b                   	pop    ebx
c00153d1:	5e                   	pop    esi
c00153d2:	5f                   	pop    edi
c00153d3:	c3                   	ret    

c00153d4 <Process::Process(char const*, Process*, char**)>:
c00153d4:	56                   	push   esi
c00153d5:	53                   	push   ebx
c00153d6:	83 ec 14             	sub    esp,0x14
c00153d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153dd:	05 0c 02 00 00       	add    eax,0x20c
c00153e2:	bb 07 00 00 00       	mov    ebx,0x7
c00153e7:	89 c6                	mov    esi,eax
c00153e9:	8d 76 00             	lea    esi,[esi+0x0]
c00153ec:	85 db                	test   ebx,ebx
c00153ee:	78 14                	js     c0015404 <Process::Process(char const*, Process*, char**)+0x30>
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	56                   	push   esi
c00153f4:	e8 2f a6 00 00       	call   c001fa28 <ThreadControlBlock::ThreadControlBlock()>
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	83 c6 5f             	add    esi,0x5f
c00153ff:	83 eb 01             	sub    ebx,0x1
c0015402:	eb e8                	jmp    c00153ec <Process::Process(char const*, Process*, char**)+0x18>
c0015404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015408:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001540f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015413:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015421:	e8 1c bb ff ff       	call   c0010f42 <KeNewProcessEnv(Process*)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	89 c2                	mov    edx,eax
c001542b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001542f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015439:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015442:	a1 80 33 02 c0       	mov    eax,ds:0xc0023380
c0015447:	8d 50 01             	lea    edx,[eax+0x1]
c001544a:	89 15 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,edx
c0015450:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015454:	89 02                	mov    DWORD PTR [edx],eax
c0015456:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015465:	e8 69 26 ff ff       	call   c0007ad3 <malloc>
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	89 c3                	mov    ebx,eax
c001546f:	83 ec 08             	sub    esp,0x8
c0015472:	6a 00                	push   0x0
c0015474:	53                   	push   ebx
c0015475:	e8 d8 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015481:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001548b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015499:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001549d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00154a3:	e8 be c0 ff ff       	call   c0011566 <KeInitSignals()>
c00154a8:	89 c2                	mov    edx,eax
c00154aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154ae:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00154b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154be:	85 c0                	test   eax,eax
c00154c0:	74 42                	je     c0015504 <Process::Process(char const*, Process*, char**)+0x130>
c00154c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154cc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00154d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154d6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00154dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154e6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00154ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f0:	05 0c 01 00 00       	add    eax,0x10c
c00154f5:	83 ec 08             	sub    esp,0x8
c00154f8:	52                   	push   edx
c00154f9:	50                   	push   eax
c00154fa:	e8 51 b1 fe ff       	call   c0000650 <strcpy>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	eb 64                	jmp    c0015568 <Process::Process(char const*, Process*, char**)+0x194>
c0015504:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015513:	e8 bb 25 ff ff       	call   c0007ad3 <malloc>
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	89 c3                	mov    ebx,eax
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015524:	53                   	push   ebx
c0015525:	e8 42 37 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001552a:	83 c4 10             	add    esp,0x10
c001552d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015531:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	50                   	push   eax
c0015545:	e8 d0 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015551:	05 0c 01 00 00       	add    eax,0x10c
c0015556:	83 ec 08             	sub    esp,0x8
c0015559:	68 76 21 02 c0       	push   0xc0022176
c001555e:	50                   	push   eax
c001555f:	e8 ec b0 fe ff       	call   c0000650 <strcpy>
c0015564:	83 c4 10             	add    esp,0x10
c0015567:	90                   	nop
c0015568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556c:	83 c0 0c             	add    eax,0xc
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015576:	50                   	push   eax
c0015577:	e8 d4 b0 fe ff       	call   c0000650 <strcpy>
c001557c:	83 c4 10             	add    esp,0x10
c001557f:	83 ec 08             	sub    esp,0x8
c0015582:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001558a:	e8 d9 fd ff ff       	call   c0015368 <Process::addArgs(char**)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	83 ec 08             	sub    esp,0x8
c0015595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559d:	e8 3f ed ff ff       	call   c00142e1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00155a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155ad:	83 f0 01             	xor    eax,0x1
c00155b0:	88 c2                	mov    dl,al
c00155b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00155bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00155c1:	83 ec 04             	sub    esp,0x4
c00155c4:	50                   	push   eax
c00155c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155c9:	68 d0 21 02 c0       	push   0xc00221d0
c00155ce:	e8 37 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	90                   	nop
c00155d7:	83 c4 14             	add    esp,0x14
c00155da:	5b                   	pop    ebx
c00155db:	5e                   	pop    esi
c00155dc:	c3                   	ret    
c00155dd:	90                   	nop
c00155de:	66 90                	xchg   ax,ax

c00155e0 <Process::Process(bool, char const*, Process*, char**)>:
c00155e0:	56                   	push   esi
c00155e1:	53                   	push   ebx
c00155e2:	83 ec 24             	sub    esp,0x24
c00155e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00155e9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00155ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155f1:	05 0c 02 00 00       	add    eax,0x20c
c00155f6:	bb 07 00 00 00       	mov    ebx,0x7
c00155fb:	89 c6                	mov    esi,eax
c00155fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015600:	85 db                	test   ebx,ebx
c0015602:	78 14                	js     c0015618 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015604:	83 ec 0c             	sub    esp,0xc
c0015607:	56                   	push   esi
c0015608:	e8 1b a4 00 00       	call   c001fa28 <ThreadControlBlock::ThreadControlBlock()>
c001560d:	83 c4 10             	add    esp,0x10
c0015610:	83 c6 5f             	add    esi,0x5f
c0015613:	83 eb 01             	sub    ebx,0x1
c0015616:	eb e8                	jmp    c0015600 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001561c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015623:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015627:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001562e:	83 ec 0c             	sub    esp,0xc
c0015631:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015635:	e8 08 b9 ff ff       	call   c0010f42 <KeNewProcessEnv(Process*)>
c001563a:	83 c4 10             	add    esp,0x10
c001563d:	89 c2                	mov    edx,eax
c001563f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015643:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001564d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015656:	a1 80 33 02 c0       	mov    eax,ds:0xc0023380
c001565b:	8d 50 01             	lea    edx,[eax+0x1]
c001565e:	89 15 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,edx
c0015664:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015668:	89 02                	mov    DWORD PTR [edx],eax
c001566a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015672:	83 ec 0c             	sub    esp,0xc
c0015675:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015679:	e8 55 24 ff ff       	call   c0007ad3 <malloc>
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	89 c3                	mov    ebx,eax
c0015683:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015688:	83 ec 08             	sub    esp,0x8
c001568b:	50                   	push   eax
c001568c:	53                   	push   ebx
c001568d:	e8 c0 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015699:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001569f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156a3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156b1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156b5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156bb:	e8 a6 be ff ff       	call   c0011566 <KeInitSignals()>
c00156c0:	89 c2                	mov    edx,eax
c00156c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156d6:	85 c0                	test   eax,eax
c00156d8:	74 42                	je     c001571c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00156da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156de:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156e4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00156f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015708:	05 0c 01 00 00       	add    eax,0x10c
c001570d:	83 ec 08             	sub    esp,0x8
c0015710:	52                   	push   edx
c0015711:	50                   	push   eax
c0015712:	e8 39 af fe ff       	call   c0000650 <strcpy>
c0015717:	83 c4 10             	add    esp,0x10
c001571a:	eb 64                	jmp    c0015780 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001571c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001572b:	e8 a3 23 ff ff       	call   c0007ad3 <malloc>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	89 c3                	mov    ebx,eax
c0015735:	83 ec 08             	sub    esp,0x8
c0015738:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001573c:	53                   	push   ebx
c001573d:	e8 2a 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015749:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001574f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015753:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015759:	83 ec 0c             	sub    esp,0xc
c001575c:	50                   	push   eax
c001575d:	e8 b8 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015769:	05 0c 01 00 00       	add    eax,0x10c
c001576e:	83 ec 08             	sub    esp,0x8
c0015771:	68 76 21 02 c0       	push   0xc0022176
c0015776:	50                   	push   eax
c0015777:	e8 d4 ae fe ff       	call   c0000650 <strcpy>
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	90                   	nop
c0015780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015784:	83 c0 0c             	add    eax,0xc
c0015787:	83 ec 08             	sub    esp,0x8
c001578a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001578e:	50                   	push   eax
c001578f:	e8 bc ae fe ff       	call   c0000650 <strcpy>
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	83 ec 08             	sub    esp,0x8
c001579a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001579e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157a2:	e8 c1 fb ff ff       	call   c0015368 <Process::addArgs(char**)>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	90                   	nop
c00157ab:	83 c4 24             	add    esp,0x24
c00157ae:	5b                   	pop    ebx
c00157af:	5e                   	pop    esi
c00157b0:	c3                   	ret    
c00157b1:	8d 76 00             	lea    esi,[esi+0x0]

c00157b4 <taskStartupFunction>:
c00157b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00157bc:	c3                   	ret    
c00157bd:	90                   	nop
c00157be:	66 90                	xchg   ax,ax

c00157c0 <Semaphore::Semaphore(int)>:
c00157c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00157c8:	89 10                	mov    DWORD PTR [eax],edx
c00157ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157ce:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00157d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00157e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00157eb:	90                   	nop
c00157ec:	c3                   	ret    
c00157ed:	90                   	nop
c00157ee:	66 90                	xchg   ax,ax

c00157f0 <Mutex::Mutex()>:
c00157f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f4:	6a 01                	push   0x1
c00157f6:	50                   	push   eax
c00157f7:	e8 c4 ff ff ff       	call   c00157c0 <Semaphore::Semaphore(int)>
c00157fc:	83 c4 08             	add    esp,0x8
c00157ff:	90                   	nop
c0015800:	c3                   	ret    
c0015801:	90                   	nop
c0015802:	66 90                	xchg   ax,ax

c0015804 <Process::createThread(void (*)(void*), void*, int)>:
c0015804:	57                   	push   edi
c0015805:	31 c9                	xor    ecx,ecx
c0015807:	56                   	push   esi
c0015808:	53                   	push   ebx
c0015809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001580d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015814:	89 f2                	mov    edx,esi
c0015816:	66 90                	xchg   ax,ax
c0015818:	0f b7 c2             	movzx  eax,dx
c001581b:	80 e2 01             	and    dl,0x1
c001581e:	74 14                	je     c0015834 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015820:	d1 f8                	sar    eax,1
c0015822:	83 c1 01             	add    ecx,0x1
c0015825:	83 f9 10             	cmp    ecx,0x10
c0015828:	89 c2                	mov    edx,eax
c001582a:	75 ec                	jne    c0015818 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001582c:	31 db                	xor    ebx,ebx
c001582e:	89 d8                	mov    eax,ebx
c0015830:	5b                   	pop    ebx
c0015831:	5e                   	pop    esi
c0015832:	5f                   	pop    edi
c0015833:	c3                   	ret    
c0015834:	b8 01 00 00 00       	mov    eax,0x1
c0015839:	d3 e0                	shl    eax,cl
c001583b:	09 c6                	or     esi,eax
c001583d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015844:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015847:	c1 e0 05             	shl    eax,0x5
c001584a:	29 c8                	sub    eax,ecx
c001584c:	01 d8                	add    eax,ebx
c001584e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015855:	75 0d                	jne    c0015864 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015857:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015861:	8d 76 00             	lea    esi,[esi+0x0]
c0015864:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001586a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001586d:	83 ec 0c             	sub    esp,0xc
c0015870:	c1 e6 05             	shl    esi,0x5
c0015873:	29 ce                	sub    esi,ecx
c0015875:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015878:	8d 04 33             	lea    eax,[ebx+esi*1]
c001587b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015881:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015887:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001588d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015894:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001589a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001589e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00158a4:	89 ca                	mov    edx,ecx
c00158a6:	f7 da                	neg    edx
c00158a8:	c1 e2 15             	shl    edx,0x15
c00158ab:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00158b1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00158b7:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00158bb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00158c5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00158cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158cf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00158d5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00158df:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00158e9:	68 00 01 00 00       	push   0x100
c00158ee:	e8 e0 21 ff ff       	call   c0007ad3 <malloc>
c00158f3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00158f6:	58                   	pop    eax
c00158f7:	5a                   	pop    edx
c00158f8:	53                   	push   ebx
c00158f9:	68 84 a4 02 c0       	push   0xc002a484
c00158fe:	e8 bd 9e 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	89 d8                	mov    eax,ebx
c0015908:	5b                   	pop    ebx
c0015909:	5e                   	pop    esi
c001590a:	5f                   	pop    edi
c001590b:	c3                   	ret    

c001590c <Process::createUserThread()>:
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	68 80 00 00 00       	push   0x80
c0015914:	6a 00                	push   0x0
c0015916:	68 60 52 01 c0       	push   0xc0015260
c001591b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001591f:	50                   	push   eax
c0015920:	e8 df fe ff ff       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c0015925:	83 c4 1c             	add    esp,0x1c
c0015928:	c3                   	ret    
c0015929:	8d 76 00             	lea    esi,[esi+0x0]

c001592c <setupMultitasking(void (*)())>:
c001592c:	56                   	push   esi
c001592d:	53                   	push   ebx
c001592e:	83 ec 04             	sub    esp,0x4
c0015931:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015935:	eb 11                	jmp    c0015948 <setupMultitasking(void (*)())+0x1c>
c0015937:	90                   	nop
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 84 a4 02 c0       	push   0xc002a484
c0015940:	e8 bf 9d 00 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	68 84 a4 02 c0       	push   0xc002a484
c0015950:	e8 8b 9d 00 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015955:	83 c4 10             	add    esp,0x10
c0015958:	84 c0                	test   al,al
c001595a:	74 dc                	je     c0015938 <setupMultitasking(void (*)())+0xc>
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 24 07 00 00       	push   0x724
c0015964:	e8 6a 21 ff ff       	call   c0007ad3 <malloc>
c0015969:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015970:	6a 00                	push   0x0
c0015972:	68 7a 21 02 c0       	push   0xc002217a
c0015977:	6a 01                	push   0x1
c0015979:	50                   	push   eax
c001597a:	89 c3                	mov    ebx,eax
c001597c:	e8 5f fc ff ff       	call   c00155e0 <Process::Process(bool, char const*, Process*, char**)>
c0015981:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015987:	83 c4 14             	add    esp,0x14
c001598a:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c0015990:	50                   	push   eax
c0015991:	e8 d9 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015996:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001599d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00159a7:	83 c8 01             	or     eax,0x1
c00159aa:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00159b1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00159ba:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00159c4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00159ca:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00159d4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00159da:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00159e4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00159ee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00159f4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00159fa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a04:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a0e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a15:	e8 b9 20 ff ff       	call   c0007ad3 <malloc>
c0015a1a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a20:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a26:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a2c:	5a                   	pop    edx
c0015a2d:	59                   	pop    ecx
c0015a2e:	68 76 21 02 c0       	push   0xc0022176
c0015a33:	50                   	push   eax
c0015a34:	e8 17 ac fe ff       	call   c0000650 <strcpy>
c0015a39:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015a40:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015a44:	83 c4 14             	add    esp,0x14
c0015a47:	5b                   	pop    ebx
c0015a48:	5e                   	pop    esi
c0015a49:	e9 1b a8 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015a4e:	66 90                	xchg   ax,ax

c0015a50 <schedule()>:
c0015a50:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015a56:	85 d2                	test   edx,edx
c0015a58:	74 0e                	je     c0015a68 <schedule()+0x18>
c0015a5a:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015a64:	c3                   	ret    
c0015a65:	8d 76 00             	lea    esi,[esi+0x0]
c0015a68:	53                   	push   ebx
c0015a69:	83 ec 14             	sub    esp,0x14
c0015a6c:	68 84 a4 02 c0       	push   0xc002a484
c0015a71:	e8 6a 9c 00 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	84 c0                	test   al,al
c0015a7b:	75 3f                	jne    c0015abc <schedule()+0x6c>
c0015a7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015a85:	83 fa 01             	cmp    edx,0x1
c0015a88:	74 3a                	je     c0015ac4 <schedule()+0x74>
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	68 84 a4 02 c0       	push   0xc002a484
c0015a94:	e8 63 9c 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a99:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015aa0:	89 c3                	mov    ebx,eax
c0015aa2:	e8 5d 9c 00 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015aa7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015aae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab1:	e8 02 f8 ff ff       	call   c00152b8 <switchToThread(ThreadControlBlock*)>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0015abc:	83 c4 08             	add    esp,0x8
c0015abf:	5b                   	pop    ebx
c0015ac0:	c3                   	ret    
c0015ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015acb:	83 ec 08             	sub    esp,0x8
c0015ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad3:	50                   	push   eax
c0015ad4:	68 84 a4 02 c0       	push   0xc002a484
c0015ad9:	e8 e2 9c 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	eb a9                	jmp    c0015a8c <schedule()+0x3c>
c0015ae3:	90                   	nop

c0015ae4 <Semaphore::tryAcquire()>:
c0015ae4:	53                   	push   ebx
c0015ae5:	83 ec 08             	sub    esp,0x8
c0015ae8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015aec:	fa                   	cli    
c0015aed:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015af3:	8d 42 01             	lea    eax,[edx+0x1]
c0015af6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015afb:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015b00:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b03:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b09:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b0c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b0e:	7c 2c                	jl     c0015b3c <Semaphore::tryAcquire()+0x58>
c0015b10:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b15:	85 c0                	test   eax,eax
c0015b17:	75 0b                	jne    c0015b24 <Semaphore::tryAcquire()+0x40>
c0015b19:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015b1e:	85 c0                	test   eax,eax
c0015b20:	75 5a                	jne    c0015b7c <Semaphore::tryAcquire()+0x98>
c0015b22:	66 90                	xchg   ax,ax
c0015b24:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b2a:	31 c0                	xor    eax,eax
c0015b2c:	85 d2                	test   edx,edx
c0015b2e:	75 04                	jne    c0015b34 <Semaphore::tryAcquire()+0x50>
c0015b30:	fb                   	sti    
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]
c0015b34:	83 c4 08             	add    esp,0x8
c0015b37:	5b                   	pop    ebx
c0015b38:	c3                   	ret    
c0015b39:	8d 76 00             	lea    esi,[esi+0x0]
c0015b3c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b41:	83 c3 01             	add    ebx,0x1
c0015b44:	85 c0                	test   eax,eax
c0015b46:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015b49:	75 21                	jne    c0015b6c <Semaphore::tryAcquire()+0x88>
c0015b4b:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015b51:	85 c9                	test   ecx,ecx
c0015b53:	74 17                	je     c0015b6c <Semaphore::tryAcquire()+0x88>
c0015b55:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015b5f:	e8 ec fe ff ff       	call   c0015a50 <schedule()>
c0015b64:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b69:	8d 50 ff             	lea    edx,[eax-0x1]
c0015b6c:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b72:	85 d2                	test   edx,edx
c0015b74:	b0 01                	mov    al,0x1
c0015b76:	75 bc                	jne    c0015b34 <Semaphore::tryAcquire()+0x50>
c0015b78:	eb b6                	jmp    c0015b30 <Semaphore::tryAcquire()+0x4c>
c0015b7a:	66 90                	xchg   ax,ax
c0015b7c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015b86:	e8 c5 fe ff ff       	call   c0015a50 <schedule()>
c0015b8b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b90:	8d 50 ff             	lea    edx,[eax-0x1]
c0015b93:	31 c0                	xor    eax,eax
c0015b95:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b9b:	85 d2                	test   edx,edx
c0015b9d:	75 95                	jne    c0015b34 <Semaphore::tryAcquire()+0x50>
c0015b9f:	eb 8f                	jmp    c0015b30 <Semaphore::tryAcquire()+0x4c>
c0015ba1:	90                   	nop
c0015ba2:	66 90                	xchg   ax,ax

c0015ba4 <Semaphore::assertLocked(char const*)>:
c0015ba4:	83 ec 0c             	sub    esp,0xc
c0015ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bab:	fa                   	cli    
c0015bac:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015bb2:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015bb7:	83 c1 01             	add    ecx,0x1
c0015bba:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015bc0:	8d 48 01             	lea    ecx,[eax+0x1]
c0015bc3:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015bc9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015bcb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015bce:	7c 28                	jl     c0015bf8 <Semaphore::assertLocked(char const*)+0x54>
c0015bd0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015bd5:	85 c0                	test   eax,eax
c0015bd7:	75 0b                	jne    c0015be4 <Semaphore::assertLocked(char const*)+0x40>
c0015bd9:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015bde:	85 c0                	test   eax,eax
c0015be0:	75 32                	jne    c0015c14 <Semaphore::assertLocked(char const*)+0x70>
c0015be2:	66 90                	xchg   ax,ax
c0015be4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015be9:	83 e8 01             	sub    eax,0x1
c0015bec:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015bf1:	75 01                	jne    c0015bf4 <Semaphore::assertLocked(char const*)+0x50>
c0015bf3:	fb                   	sti    
c0015bf4:	83 c4 0c             	add    esp,0xc
c0015bf7:	c3                   	ret    
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bff:	52                   	push   edx
c0015c00:	e8 48 b5 ff ff       	call   c001114d <KePanic(char const*)>
c0015c05:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	83 e8 01             	sub    eax,0x1
c0015c10:	eb be                	jmp    c0015bd0 <Semaphore::assertLocked(char const*)+0x2c>
c0015c12:	66 90                	xchg   ax,ax
c0015c14:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c1e:	e8 2d fe ff ff       	call   c0015a50 <schedule()>
c0015c23:	eb bf                	jmp    c0015be4 <Semaphore::assertLocked(char const*)+0x40>
c0015c25:	8d 76 00             	lea    esi,[esi+0x0]

c0015c28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015c28:	83 ec 0c             	sub    esp,0xc
c0015c2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c37:	e8 14 fe ff ff       	call   c0015a50 <schedule()>
c0015c3c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c41:	83 e8 01             	sub    eax,0x1
c0015c44:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c49:	75 01                	jne    c0015c4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015c4b:	fb                   	sti    
c0015c4c:	83 c4 0c             	add    esp,0xc
c0015c4f:	c3                   	ret    

c0015c50 <blockTask(TaskState)>:
c0015c50:	83 ec 0c             	sub    esp,0xc
c0015c53:	fa                   	cli    
c0015c54:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c5d:	83 c0 01             	add    eax,0x1
c0015c60:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c6d:	e8 de fd ff ff       	call   c0015a50 <schedule()>
c0015c72:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c77:	83 e8 01             	sub    eax,0x1
c0015c7a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c7f:	75 03                	jne    c0015c84 <blockTask(TaskState)+0x34>
c0015c81:	fb                   	sti    
c0015c82:	66 90                	xchg   ax,ax
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	c3                   	ret    

c0015c88 <waitTask(int, int*, int)>:
c0015c88:	83 ec 18             	sub    esp,0x18
c0015c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015c94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015c97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015ca3:	6a 07                	push   0x7
c0015ca5:	e8 a6 ff ff ff       	call   c0015c50 <blockTask(TaskState)>
c0015caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015caf:	83 c4 10             	add    esp,0x10
c0015cb2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015cb5:	85 d2                	test   edx,edx
c0015cb7:	74 0b                	je     c0015cc4 <waitTask(int, int*, int)+0x3c>
c0015cb9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015cbc:	89 02                	mov    DWORD PTR [edx],eax
c0015cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cc3:	90                   	nop
c0015cc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015cc7:	83 c4 0c             	add    esp,0xc
c0015cca:	c3                   	ret    
c0015ccb:	90                   	nop

c0015ccc <milliTenthSleepUntil(unsigned int)>:
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd3:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015cd9:	76 05                	jbe    c0015ce0 <milliTenthSleepUntil(unsigned int)+0x14>
c0015cdb:	90                   	nop
c0015cdc:	83 c4 0c             	add    esp,0xc
c0015cdf:	c3                   	ret    
c0015ce0:	fa                   	cli    
c0015ce1:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015ce7:	83 ec 08             	sub    esp,0x8
c0015cea:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015cf0:	83 c2 01             	add    edx,0x1
c0015cf3:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015cf9:	83 c1 01             	add    ecx,0x1
c0015cfc:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d02:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d08:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d10:	50                   	push   eax
c0015d11:	68 78 a4 02 c0       	push   0xc002a478
c0015d16:	e8 a5 9a 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d1b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d22:	e8 29 ff ff ff       	call   c0015c50 <blockTask(TaskState)>
c0015d27:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	83 e8 01             	sub    eax,0x1
c0015d32:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015d37:	85 c0                	test   eax,eax
c0015d39:	75 09                	jne    c0015d44 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d3b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015d40:	85 c0                	test   eax,eax
c0015d42:	75 14                	jne    c0015d58 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015d44:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015d49:	83 e8 01             	sub    eax,0x1
c0015d4c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015d51:	75 89                	jne    c0015cdc <milliTenthSleepUntil(unsigned int)+0x10>
c0015d53:	fb                   	sti    
c0015d54:	83 c4 0c             	add    esp,0xc
c0015d57:	c3                   	ret    
c0015d58:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015d62:	e8 e9 fc ff ff       	call   c0015a50 <schedule()>
c0015d67:	eb db                	jmp    c0015d44 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d69:	8d 76 00             	lea    esi,[esi+0x0]

c0015d6c <milliTenthSleep(unsigned int)>:
c0015d6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d70:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015d75:	01 c2                	add    edx,eax
c0015d77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015d7b:	e9 4c ff ff ff       	jmp    c0015ccc <milliTenthSleepUntil(unsigned int)>

c0015d80 <sleep(unsigned int)>:
c0015d80:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d8c:	eb de                	jmp    c0015d6c <milliTenthSleep(unsigned int)>
c0015d8e:	66 90                	xchg   ax,ax

c0015d90 <Semaphore::acquire()>:
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d97:	fa                   	cli    
c0015d98:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015d9d:	83 c0 01             	add    eax,0x1
c0015da0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015da5:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015daa:	8d 48 01             	lea    ecx,[eax+0x1]
c0015dad:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015db3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015db6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015db8:	7d 2e                	jge    c0015de8 <Semaphore::acquire()+0x58>
c0015dba:	83 c1 01             	add    ecx,0x1
c0015dbd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015dc0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015dc5:	85 c0                	test   eax,eax
c0015dc7:	75 0b                	jne    c0015dd4 <Semaphore::acquire()+0x44>
c0015dc9:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015dce:	85 c0                	test   eax,eax
c0015dd0:	75 66                	jne    c0015e38 <Semaphore::acquire()+0xa8>
c0015dd2:	66 90                	xchg   ax,ax
c0015dd4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dd9:	83 e8 01             	sub    eax,0x1
c0015ddc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015de1:	75 01                	jne    c0015de4 <Semaphore::acquire()+0x54>
c0015de3:	fb                   	sti    
c0015de4:	83 c4 0c             	add    esp,0xc
c0015de7:	c3                   	ret    
c0015de8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ded:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015df4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015df7:	85 c9                	test   ecx,ecx
c0015df9:	74 51                	je     c0015e4c <Semaphore::acquire()+0xbc>
c0015dfb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015dfe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e04:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e07:	90                   	nop
c0015e08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e0d:	83 ec 0c             	sub    esp,0xc
c0015e10:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e13:	68 fc 21 02 c0       	push   0xc00221fc
c0015e18:	e8 ed 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015e1d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015e24:	e8 27 fe ff ff       	call   c0015c50 <blockTask(TaskState)>
c0015e29:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	83 e8 01             	sub    eax,0x1
c0015e34:	eb 8a                	jmp    c0015dc0 <Semaphore::acquire()+0x30>
c0015e36:	66 90                	xchg   ax,ax
c0015e38:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015e42:	e8 09 fc ff ff       	call   c0015a50 <schedule()>
c0015e47:	eb 8b                	jmp    c0015dd4 <Semaphore::acquire()+0x44>
c0015e49:	8d 76 00             	lea    esi,[esi+0x0]
c0015e4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e51:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e54:	eb b2                	jmp    c0015e08 <Semaphore::acquire()+0x78>
c0015e56:	66 90                	xchg   ax,ax

c0015e58 <taskReturned>:
c0015e58:	83 ec 18             	sub    esp,0x18
c0015e5b:	68 1c 22 02 c0       	push   0xc002221c
c0015e60:	e8 e8 b2 ff ff       	call   c001114d <KePanic(char const*)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	6a 02                	push   0x2
c0015e6d:	e8 de fd ff ff       	call   c0015c50 <blockTask(TaskState)>
c0015e72:	fa                   	cli    
c0015e73:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e78:	83 c0 01             	add    eax,0x1
c0015e7b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e80:	e8 cb fb ff ff       	call   c0015a50 <schedule()>
c0015e85:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	83 e8 01             	sub    eax,0x1
c0015e90:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e95:	85 c0                	test   eax,eax
c0015e97:	75 cf                	jne    c0015e68 <taskReturned+0x10>
c0015e99:	fb                   	sti    
c0015e9a:	eb cc                	jmp    c0015e68 <taskReturned+0x10>

c0015e9c <Thr::processFromPID(int)>:
c0015e9c:	57                   	push   edi
c0015e9d:	56                   	push   esi
c0015e9e:	53                   	push   ebx
c0015e9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ea3:	fa                   	cli    
c0015ea4:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015eaa:	83 ec 0c             	sub    esp,0xc
c0015ead:	68 84 a4 02 c0       	push   0xc002a484
c0015eb2:	83 c1 01             	add    ecx,0x1
c0015eb5:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015ebb:	e8 3c 98 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ec0:	83 c4 10             	add    esp,0x10
c0015ec3:	89 c7                	mov    edi,eax
c0015ec5:	eb 15                	jmp    c0015edc <Thr::processFromPID(int)+0x40>
c0015ec7:	90                   	nop
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	68 84 a4 02 c0       	push   0xc002a484
c0015ed0:	e8 27 98 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	39 f8                	cmp    eax,edi
c0015eda:	74 50                	je     c0015f2c <Thr::processFromPID(int)+0x90>
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	68 84 a4 02 c0       	push   0xc002a484
c0015ee4:	e8 13 98 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ee9:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015ef0:	89 c3                	mov    ebx,eax
c0015ef2:	e8 0d 98 00 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ef7:	58                   	pop    eax
c0015ef8:	5a                   	pop    edx
c0015ef9:	53                   	push   ebx
c0015efa:	68 84 a4 02 c0       	push   0xc002a484
c0015eff:	e8 bc 98 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f04:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f07:	83 c4 10             	add    esp,0x10
c0015f0a:	39 30                	cmp    DWORD PTR [eax],esi
c0015f0c:	75 ba                	jne    c0015ec8 <Thr::processFromPID(int)+0x2c>
c0015f0e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f13:	83 e8 01             	sub    eax,0x1
c0015f16:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f1b:	74 0b                	je     c0015f28 <Thr::processFromPID(int)+0x8c>
c0015f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f23:	90                   	nop
c0015f24:	5b                   	pop    ebx
c0015f25:	5e                   	pop    esi
c0015f26:	5f                   	pop    edi
c0015f27:	c3                   	ret    
c0015f28:	fb                   	sti    
c0015f29:	eb f5                	jmp    c0015f20 <Thr::processFromPID(int)+0x84>
c0015f2b:	90                   	nop
c0015f2c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f31:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f34:	31 c0                	xor    eax,eax
c0015f36:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015f3c:	85 d2                	test   edx,edx
c0015f3e:	75 e4                	jne    c0015f24 <Thr::processFromPID(int)+0x88>
c0015f40:	fb                   	sti    
c0015f41:	5b                   	pop    ebx
c0015f42:	5e                   	pop    esi
c0015f43:	5f                   	pop    edi
c0015f44:	c3                   	ret    
c0015f45:	8d 76 00             	lea    esi,[esi+0x0]

c0015f48 <unblockTask(ThreadControlBlock*)>:
c0015f48:	53                   	push   ebx
c0015f49:	83 ec 08             	sub    esp,0x8
c0015f4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f50:	fa                   	cli    
c0015f51:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f56:	83 c0 01             	add    eax,0x1
c0015f59:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f61:	85 c0                	test   eax,eax
c0015f63:	74 67                	je     c0015fcc <unblockTask(ThreadControlBlock*)+0x84>
c0015f65:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f68:	83 f8 01             	cmp    eax,0x1
c0015f6b:	74 37                	je     c0015fa4 <unblockTask(ThreadControlBlock*)+0x5c>
c0015f6d:	83 ec 0c             	sub    esp,0xc
c0015f70:	68 84 a4 02 c0       	push   0xc002a484
c0015f75:	e8 82 97 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f7a:	83 c4 10             	add    esp,0x10
c0015f7d:	85 c0                	test   eax,eax
c0015f7f:	75 1b                	jne    c0015f9c <unblockTask(ThreadControlBlock*)+0x54>
c0015f81:	eb 5d                	jmp    c0015fe0 <unblockTask(ThreadControlBlock*)+0x98>
c0015f83:	90                   	nop
c0015f84:	83 ec 08             	sub    esp,0x8
c0015f87:	50                   	push   eax
c0015f88:	68 84 a4 02 c0       	push   0xc002a484
c0015f8d:	e8 8a 9a 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	85 c0                	test   eax,eax
c0015f97:	74 47                	je     c0015fe0 <unblockTask(ThreadControlBlock*)+0x98>
c0015f99:	8d 76 00             	lea    esi,[esi+0x0]
c0015f9c:	39 c3                	cmp    ebx,eax
c0015f9e:	75 e4                	jne    c0015f84 <unblockTask(ThreadControlBlock*)+0x3c>
c0015fa0:	eb 12                	jmp    c0015fb4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015fa2:	66 90                	xchg   ax,ax
c0015fa4:	83 ec 0c             	sub    esp,0xc
c0015fa7:	68 98 21 02 c0       	push   0xc0022198
c0015fac:	e8 59 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fb9:	83 e8 01             	sub    eax,0x1
c0015fbc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fc1:	75 01                	jne    c0015fc4 <unblockTask(ThreadControlBlock*)+0x7c>
c0015fc3:	fb                   	sti    
c0015fc4:	83 c4 08             	add    esp,0x8
c0015fc7:	5b                   	pop    ebx
c0015fc8:	c3                   	ret    
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	68 81 21 02 c0       	push   0xc0022181
c0015fd4:	e8 31 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fd9:	83 c4 10             	add    esp,0x10
c0015fdc:	eb d6                	jmp    c0015fb4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015fde:	66 90                	xchg   ax,ax
c0015fe0:	83 ec 08             	sub    esp,0x8
c0015fe3:	53                   	push   ebx
c0015fe4:	68 84 a4 02 c0       	push   0xc002a484
c0015fe9:	e8 d2 97 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fee:	83 c4 10             	add    esp,0x10
c0015ff1:	eb c1                	jmp    c0015fb4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015ff3:	90                   	nop

c0015ff4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015ff4:	55                   	push   ebp
c0015ff5:	57                   	push   edi
c0015ff6:	56                   	push   esi
c0015ff7:	53                   	push   ebx
c0015ff8:	83 ec 1c             	sub    esp,0x1c
c0015ffb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015fff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016002:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016008:	85 ed                	test   ebp,ebp
c001600a:	7e 28                	jle    c0016034 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001600c:	31 f6                	xor    esi,esi
c001600e:	66 90                	xchg   ax,ax
c0016010:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016017:	83 ec 0c             	sub    esp,0xc
c001601a:	83 c6 01             	add    esi,0x1
c001601d:	57                   	push   edi
c001601e:	e8 c0 1a ff ff       	call   c0007ae3 <free>
c0016023:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016026:	83 c4 10             	add    esp,0x10
c0016029:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001602f:	7f df                	jg     c0016010 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016031:	8d 76 00             	lea    esi,[esi+0x0]
c0016034:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001603e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016043:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016046:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016049:	d3 c0                	rol    eax,cl
c001604b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016052:	21 c8                	and    eax,ecx
c0016054:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001605b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001605e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016066:	89 f7                	mov    edi,esi
c0016068:	0f 85 72 01 00 00    	jne    c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001606e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016074:	85 ed                	test   ebp,ebp
c0016076:	74 1c                	je     c0016094 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016078:	83 ec 0c             	sub    esp,0xc
c001607b:	55                   	push   ebp
c001607c:	e8 dd ad ff ff       	call   c0010e5e <EnvVarContainer::~EnvVarContainer()>
c0016081:	59                   	pop    ecx
c0016082:	5e                   	pop    esi
c0016083:	6a 0c                	push   0xc
c0016085:	55                   	push   ebp
c0016086:	e8 81 47 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001608b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	89 f7                	mov    edi,esi
c0016093:	90                   	nop
c0016094:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001609a:	85 c0                	test   eax,eax
c001609c:	0f 84 b2 00 00 00    	je     c0016154 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160a2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00160a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00160a9:	31 c9                	xor    ecx,ecx
c00160ab:	eb 17                	jmp    c00160c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]
c00160b0:	83 c1 01             	add    ecx,0x1
c00160b3:	83 f9 10             	cmp    ecx,0x10
c00160b6:	0f 84 98 00 00 00    	je     c0016154 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160c2:	66 90                	xchg   ax,ax
c00160c4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00160cb:	d3 fa                	sar    edx,cl
c00160cd:	80 e2 01             	and    dl,0x1
c00160d0:	74 de                	je     c00160b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00160d2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00160d5:	c1 e2 05             	shl    edx,0x5
c00160d8:	29 ca                	sub    edx,ecx
c00160da:	01 d0                	add    eax,edx
c00160dc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00160e2:	83 fd 07             	cmp    ebp,0x7
c00160e5:	75 c9                	jne    c00160b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00160e7:	05 40 02 00 00       	add    eax,0x240
c00160ec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00160ef:	83 fd ff             	cmp    ebp,0xffffffff
c00160f2:	0f 8c f0 00 00 00    	jl     c00161e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00160f8:	0f 84 ae 01 00 00    	je     c00162ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00160fe:	85 ed                	test   ebp,ebp
c0016100:	0f 84 92 01 00 00    	je     c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016106:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016108:	75 a6                	jne    c00160b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001610a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001610e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016114:	01 d0                	add    eax,edx
c0016116:	66 90                	xchg   ax,ax
c0016118:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001611c:	83 ec 0c             	sub    esp,0xc
c001611f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016125:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016128:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001612e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016135:	50                   	push   eax
c0016136:	e8 0d fe ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016141:	89 f7                	mov    edi,esi
c0016143:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016147:	83 c1 01             	add    ecx,0x1
c001614a:	83 f9 10             	cmp    ecx,0x10
c001614d:	0f 85 69 ff ff ff    	jne    c00160bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016153:	90                   	nop
c0016154:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001615a:	85 c0                	test   eax,eax
c001615c:	74 62                	je     c00161c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001615e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016164:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001616a:	74 54                	je     c00161c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	68 84 a4 02 c0       	push   0xc002a484
c0016174:	e8 83 95 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016179:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016180:	89 c7                	mov    edi,eax
c0016182:	e8 59 95 00 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016187:	83 c4 10             	add    esp,0x10
c001618a:	84 c0                	test   al,al
c001618c:	0f 84 ce 00 00 00    	je     c0016260 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016192:	66 90                	xchg   ax,ax
c0016194:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016197:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001619d:	85 d2                	test   edx,edx
c001619f:	74 0f                	je     c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00161a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00161a3:	83 ec 0c             	sub    esp,0xc
c00161a6:	52                   	push   edx
c00161a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00161ba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00161bd:	8d 76 00             	lea    esi,[esi+0x0]
c00161c0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00161c6:	85 db                	test   ebx,ebx
c00161c8:	74 16                	je     c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161ca:	83 ec 0c             	sub    esp,0xc
c00161cd:	53                   	push   ebx
c00161ce:	e8 bd 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c00161d3:	58                   	pop    eax
c00161d4:	5a                   	pop    edx
c00161d5:	6a 14                	push   0x14
c00161d7:	53                   	push   ebx
c00161d8:	e8 2f 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00161dd:	83 c4 10             	add    esp,0x10
c00161e0:	83 c4 1c             	add    esp,0x1c
c00161e3:	5b                   	pop    ebx
c00161e4:	5e                   	pop    esi
c00161e5:	5f                   	pop    edi
c00161e6:	5d                   	pop    ebp
c00161e7:	c3                   	ret    
c00161e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161ec:	83 ec 0c             	sub    esp,0xc
c00161ef:	68 50 22 02 c0       	push   0xc0022250
c00161f4:	e8 54 af ff ff       	call   c001114d <KePanic(char const*)>
c00161f9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161fc:	83 c4 10             	add    esp,0x10
c00161ff:	89 f7                	mov    edi,esi
c0016201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016205:	e9 a6 fe ff ff       	jmp    c00160b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001620a:	66 90                	xchg   ax,ax
c001620c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016212:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016218:	75 1e                	jne    c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	68 b8 22 02 c0       	push   0xc00222b8
c0016222:	e8 e3 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016227:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001622e:	e8 1d fa ff ff       	call   c0015c50 <blockTask(TaskState)>
c0016233:	83 c4 10             	add    esp,0x10
c0016236:	66 90                	xchg   ax,ax
c0016238:	83 ec 08             	sub    esp,0x8
c001623b:	56                   	push   esi
c001623c:	68 84 a4 02 c0       	push   0xc002a484
c0016241:	e8 7a 95 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016246:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c001624d:	e8 aa 94 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	39 f8                	cmp    eax,edi
c0016257:	0f 84 37 ff ff ff    	je     c0016194 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001625d:	8d 76 00             	lea    esi,[esi+0x0]
c0016260:	83 ec 0c             	sub    esp,0xc
c0016263:	68 84 a4 02 c0       	push   0xc002a484
c0016268:	e8 8f 94 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001626d:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016274:	89 c6                	mov    esi,eax
c0016276:	e8 89 94 00 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	39 f3                	cmp    ebx,esi
c0016280:	74 b6                	je     c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016282:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016285:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016288:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001628e:	75 a8                	jne    c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016290:	e9 77 ff ff ff       	jmp    c001620c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016295:	8d 76 00             	lea    esi,[esi+0x0]
c0016298:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	68 84 22 02 c0       	push   0xc0022284
c00162a4:	e9 4b ff ff ff       	jmp    c00161f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00162a9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00162b2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00162b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162b8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00162be:	01 d7                	add    edi,edx
c00162c0:	89 f8                	mov    eax,edi
c00162c2:	e9 51 fe ff ff       	jmp    c0016118 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00162c7:	90                   	nop

c00162c8 <cleanerTaskFunction(void*)>:
c00162c8:	53                   	push   ebx
c00162c9:	83 ec 08             	sub    esp,0x8
c00162cc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00162d1:	83 e8 01             	sub    eax,0x1
c00162d4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00162d9:	75 01                	jne    c00162dc <cleanerTaskFunction(void*)+0x14>
c00162db:	fb                   	sti    
c00162dc:	fa                   	cli    
c00162dd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00162e2:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c00162e9:	8d 50 01             	lea    edx,[eax+0x1]
c00162ec:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00162f2:	0f 84 c4 00 00 00    	je     c00163bc <cleanerTaskFunction(void*)+0xf4>
c00162f8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00162fd:	85 c0                	test   eax,eax
c00162ff:	75 03                	jne    c0016304 <cleanerTaskFunction(void*)+0x3c>
c0016301:	fb                   	sti    
c0016302:	66 90                	xchg   ax,ax
c0016304:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c001630b:	fa                   	cli    
c001630c:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016312:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0016318:	83 c2 01             	add    edx,0x1
c001631b:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016321:	83 c1 01             	add    ecx,0x1
c0016324:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001632a:	fa                   	cli    
c001632b:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0016331:	83 c3 01             	add    ebx,0x1
c0016334:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c001633a:	eb 28                	jmp    c0016364 <cleanerTaskFunction(void*)+0x9c>
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	68 6c a4 02 c0       	push   0xc002a46c
c0016344:	e8 b3 93 00 00       	call   c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016349:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c0016350:	89 c3                	mov    ebx,eax
c0016352:	e8 ad 93 00 00       	call   c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016357:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001635a:	e8 95 fc ff ff       	call   c0015ff4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001635f:	83 c4 10             	add    esp,0x10
c0016362:	66 90                	xchg   ax,ax
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	68 6c a4 02 c0       	push   0xc002a46c
c001636c:	e8 6f 93 00 00       	call   c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	84 c0                	test   al,al
c0016376:	74 c4                	je     c001633c <cleanerTaskFunction(void*)+0x74>
c0016378:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001637d:	83 e8 01             	sub    eax,0x1
c0016380:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016385:	75 01                	jne    c0016388 <cleanerTaskFunction(void*)+0xc0>
c0016387:	fb                   	sti    
c0016388:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001638d:	83 e8 01             	sub    eax,0x1
c0016390:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016395:	0f 85 31 ff ff ff    	jne    c00162cc <cleanerTaskFunction(void*)+0x4>
c001639b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c00163a0:	85 c0                	test   eax,eax
c00163a2:	0f 84 24 ff ff ff    	je     c00162cc <cleanerTaskFunction(void*)+0x4>
c00163a8:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00163b2:	e8 99 f6 ff ff       	call   c0015a50 <schedule()>
c00163b7:	e9 10 ff ff ff       	jmp    c00162cc <cleanerTaskFunction(void*)+0x4>
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	6a 02                	push   0x2
c00163c1:	e8 62 f8 ff ff       	call   c0015c28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	e9 36 ff ff ff       	jmp    c0016304 <cleanerTaskFunction(void*)+0x3c>
c00163ce:	66 90                	xchg   ax,ax

c00163d0 <terminateTask(int)>:
c00163d0:	83 ec 14             	sub    esp,0x14
c00163d3:	fa                   	cli    
c00163d4:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00163da:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00163e0:	83 c2 01             	add    edx,0x1
c00163e3:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00163e9:	83 c1 01             	add    ecx,0x1
c00163ec:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00163f2:	fa                   	cli    
c00163f3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00163f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163fc:	83 c0 01             	add    eax,0x1
c00163ff:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016404:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016409:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001640c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016411:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016414:	50                   	push   eax
c0016415:	68 6c a4 02 c0       	push   0xc002a46c
c001641a:	e8 a1 93 00 00       	call   c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001641f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001642e:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c0016433:	85 c0                	test   eax,eax
c0016435:	74 65                	je     c001649c <terminateTask(int)+0xcc>
c0016437:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	50                   	push   eax
c0016442:	e8 01 fb ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	66 90                	xchg   ax,ax
c001644c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016451:	83 e8 01             	sub    eax,0x1
c0016454:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016459:	75 01                	jne    c001645c <terminateTask(int)+0x8c>
c001645b:	fb                   	sti    
c001645c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016461:	83 e8 01             	sub    eax,0x1
c0016464:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016469:	75 09                	jne    c0016474 <terminateTask(int)+0xa4>
c001646b:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c0016472:	75 3c                	jne    c00164b0 <terminateTask(int)+0xe0>
c0016474:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016479:	83 e8 01             	sub    eax,0x1
c001647c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016481:	75 01                	jne    c0016484 <terminateTask(int)+0xb4>
c0016483:	fb                   	sti    
c0016484:	fa                   	cli    
c0016485:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001648a:	83 c0 01             	add    eax,0x1
c001648d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016492:	66 90                	xchg   ax,ax
c0016494:	e8 b7 f5 ff ff       	call   c0015a50 <schedule()>
c0016499:	eb d9                	jmp    c0016474 <terminateTask(int)+0xa4>
c001649b:	90                   	nop
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	68 af 21 02 c0       	push   0xc00221af
c00164a4:	e8 61 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00164a9:	83 c4 10             	add    esp,0x10
c00164ac:	eb 9e                	jmp    c001644c <terminateTask(int)+0x7c>
c00164ae:	66 90                	xchg   ax,ax
c00164b0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00164ba:	eb d8                	jmp    c0016494 <terminateTask(int)+0xc4>

c00164bc <Thr::terminateFromIRQ(int)>:
c00164bc:	83 ec 18             	sub    esp,0x18
c00164bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164c3:	50                   	push   eax
c00164c4:	e8 07 ff ff ff       	call   c00163d0 <terminateTask(int)>
c00164c9:	90                   	nop
c00164ca:	66 90                	xchg   ax,ax

c00164cc <Semaphore::release()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164d3:	fa                   	cli    
c00164d4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164d9:	83 c0 01             	add    eax,0x1
c00164dc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164e1:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00164e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00164e9:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00164ef:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164f2:	85 c9                	test   ecx,ecx
c00164f4:	74 42                	je     c0016538 <Semaphore::release()+0x6c>
c00164f6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00164f9:	83 ec 0c             	sub    esp,0xc
c00164fc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164ff:	51                   	push   ecx
c0016500:	e8 43 fa ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c0016505:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001650a:	83 c4 10             	add    esp,0x10
c001650d:	83 e8 01             	sub    eax,0x1
c0016510:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016515:	85 c0                	test   eax,eax
c0016517:	75 0b                	jne    c0016524 <Semaphore::release()+0x58>
c0016519:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001651e:	85 c0                	test   eax,eax
c0016520:	75 22                	jne    c0016544 <Semaphore::release()+0x78>
c0016522:	66 90                	xchg   ax,ax
c0016524:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016529:	83 e8 01             	sub    eax,0x1
c001652c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016531:	75 01                	jne    c0016534 <Semaphore::release()+0x68>
c0016533:	fb                   	sti    
c0016534:	83 c4 0c             	add    esp,0xc
c0016537:	c3                   	ret    
c0016538:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001653b:	83 e9 01             	sub    ecx,0x1
c001653e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016541:	eb cd                	jmp    c0016510 <Semaphore::release()+0x44>
c0016543:	90                   	nop
c0016544:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001654e:	e8 fd f4 ff ff       	call   c0015a50 <schedule()>
c0016553:	eb cf                	jmp    c0016524 <Semaphore::release()+0x58>
c0016555:	8d 76 00             	lea    esi,[esi+0x0]

c0016558 <__static_initialization_and_destruction_0(int, int)>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016560:	0f 85 8e 00 00 00    	jne    c00165f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016566:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001656e:	0f 85 80 00 00 00    	jne    c00165f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	68 84 a4 02 c0       	push   0xc002a484
c001657c:	e8 f3 94 00 00       	call   c001fa74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	83 ec 04             	sub    esp,0x4
c0016587:	68 88 2e 02 c0       	push   0xc0022e88
c001658c:	68 84 a4 02 c0       	push   0xc002a484
c0016591:	68 24 fa 01 c0       	push   0xc001fa24
c0016596:	e8 21 42 ff ff       	call   c000a7bc <__cxa_atexit>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	68 78 a4 02 c0       	push   0xc002a478
c00165a6:	e8 c9 94 00 00       	call   c001fa74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	83 ec 04             	sub    esp,0x4
c00165b1:	68 88 2e 02 c0       	push   0xc0022e88
c00165b6:	68 78 a4 02 c0       	push   0xc002a478
c00165bb:	68 24 fa 01 c0       	push   0xc001fa24
c00165c0:	e8 f7 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165c5:	83 c4 10             	add    esp,0x10
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	68 6c a4 02 c0       	push   0xc002a46c
c00165d0:	e8 9f 94 00 00       	call   c001fa74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	83 ec 04             	sub    esp,0x4
c00165db:	68 88 2e 02 c0       	push   0xc0022e88
c00165e0:	68 6c a4 02 c0       	push   0xc002a46c
c00165e5:	68 24 fa 01 c0       	push   0xc001fa24
c00165ea:	e8 cd 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	66 90                	xchg   ax,ax
c00165f4:	90                   	nop
c00165f5:	83 c4 0c             	add    esp,0xc
c00165f8:	c3                   	ret    
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]

c00165fc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	83 ec 08             	sub    esp,0x8
c0016602:	68 ff ff 00 00       	push   0xffff
c0016607:	6a 01                	push   0x1
c0016609:	e8 4a ff ff ff       	call   c0016558 <__static_initialization_and_destruction_0(int, int)>
c001660e:	83 c4 10             	add    esp,0x10
c0016611:	83 c4 0c             	add    esp,0xc
c0016614:	c3                   	ret    

c0016615 <Vm::inbv(unsigned short)>:
c0016615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016619:	66 81 fa fe fe       	cmp    dx,0xfefe
c001661e:	75 06                	jne    c0016626 <Vm::inbv(unsigned short)+0x11>
c0016620:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c0016625:	c3                   	ret    
c0016626:	ec                   	in     al,dx
c0016627:	c3                   	ret    

c0016628 <Vm::outbv(unsigned short, unsigned char)>:
c0016628:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001662c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016630:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016635:	75 25                	jne    c001665c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016637:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c001663d:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c0016643:	8d 51 01             	lea    edx,[ecx+0x1]
c0016646:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c001664c:	83 fa 20             	cmp    edx,0x20
c001664f:	75 0c                	jne    c001665d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016651:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c001665b:	c3                   	ret    
c001665c:	ee                   	out    dx,al
c001665d:	c3                   	ret    

c001665e <Vm::realToLinear(unsigned short, unsigned short)>:
c001665e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016663:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016668:	c1 e0 04             	shl    eax,0x4
c001666b:	01 d0                	add    eax,edx
c001666d:	c3                   	ret    

c001666e <Vm::getSegment(unsigned int)>:
c001666e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016672:	c1 e8 10             	shr    eax,0x10
c0016675:	c3                   	ret    

c0016676 <Vm::getOffset(unsigned int)>:
c0016676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001667a:	c3                   	ret    

c001667b <Vm::mainloop2()>:
c001667b:	83 ec 18             	sub    esp,0x18
c001667e:	fa                   	cli    
c001667f:	6a 02                	push   0x2
c0016681:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016687:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c001668e:	e8 95 f5 ff ff       	call   c0015c28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016698:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001669c:	52                   	push   edx
c001669d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00166a1:	52                   	push   edx
c00166a2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00166a6:	52                   	push   edx
c00166a7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00166ab:	50                   	push   eax
c00166ac:	e8 5e 9b fe ff       	call   c000020f <goToVM86>
c00166b1:	83 c4 2c             	add    esp,0x2c
c00166b4:	c3                   	ret    

c00166b5 <Vm::mainVm8086Loop(void*)>:
c00166b5:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00166ba:	48                   	dec    eax
c00166bb:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00166c0:	75 01                	jne    c00166c3 <Vm::mainVm8086Loop(void*)+0xe>
c00166c2:	fb                   	sti    
c00166c3:	eb b6                	jmp    c001667b <Vm::mainloop2()>

c00166c5 <Vm::mainloop3(unsigned long)>:
c00166c5:	83 ec 18             	sub    esp,0x18
c00166c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166cc:	fa                   	cli    
c00166cd:	6a 02                	push   0x2
c00166cf:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00166d5:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c00166dc:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c00166e1:	e8 42 f5 ff ff       	call   c0015c28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166e6:	83 c4 1c             	add    esp,0x1c
c00166e9:	eb 90                	jmp    c001667b <Vm::mainloop2()>

c00166eb <Vm::initialise8086()>:
c00166eb:	83 ec 0c             	sub    esp,0xc
c00166ee:	68 80 00 00 00       	push   0x80
c00166f3:	6a 00                	push   0x0
c00166f5:	68 b5 66 01 c0       	push   0xc00166b5
c00166fa:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0016700:	e8 ff f0 ff ff       	call   c0015804 <Process::createThread(void (*)(void*), void*, int)>
c0016705:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001670c:	68 00 01 00 00       	push   0x100
c0016711:	6a 00                	push   0x0
c0016713:	6a 00                	push   0x0
c0016715:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c001671a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001671f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016725:	e8 de 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001672a:	83 c4 2c             	add    esp,0x2c
c001672d:	c3                   	ret    

c001672e <Vm::finish8086()>:
c001672e:	53                   	push   ebx
c001672f:	83 ec 08             	sub    esp,0x8
c0016732:	fa                   	cli    
c0016733:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016739:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c0016740:	75 15                	jne    c0016757 <Vm::finish8086()+0x29>
c0016742:	e8 09 f3 ff ff       	call   c0015a50 <schedule()>
c0016747:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001674c:	48                   	dec    eax
c001674d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016752:	75 de                	jne    c0016732 <Vm::finish8086()+0x4>
c0016754:	fb                   	sti    
c0016755:	eb db                	jmp    c0016732 <Vm::finish8086()+0x4>
c0016757:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c001675e:	83 ec 0c             	sub    esp,0xc
c0016761:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c0016767:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c001676d:	e8 d6 f7 ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c0016772:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	8d 50 ff             	lea    edx,[eax-0x1]
c001677d:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016783:	85 d2                	test   edx,edx
c0016785:	75 01                	jne    c0016788 <Vm::finish8086()+0x5a>
c0016787:	fb                   	sti    
c0016788:	83 c4 08             	add    esp,0x8
c001678b:	89 d8                	mov    eax,ebx
c001678d:	5b                   	pop    ebx
c001678e:	c3                   	ret    

c001678f <Vm::getOutput8086(unsigned char*)>:
c001678f:	57                   	push   edi
c0016790:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c0016796:	56                   	push   esi
c0016797:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c001679c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00167a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167a2:	5e                   	pop    esi
c00167a3:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c00167a8:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00167b2:	5f                   	pop    edi
c00167b3:	c3                   	ret    

c00167b4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00167b4:	55                   	push   ebp
c00167b5:	57                   	push   edi
c00167b6:	56                   	push   esi
c00167b7:	53                   	push   ebx
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00167bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00167c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00167c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00167cb:	fa                   	cli    
c00167cc:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167d2:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c00167d9:	75 15                	jne    c00167f0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00167db:	e8 70 f2 ff ff       	call   c0015a50 <schedule()>
c00167e0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167e5:	48                   	dec    eax
c00167e6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00167eb:	75 de                	jne    c00167cb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00167ed:	fb                   	sti    
c00167ee:	eb db                	jmp    c00167cb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00167f0:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00167fa:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c00167ff:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016803:	0f b7 ff             	movzx  edi,di
c0016806:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001680a:	0f b7 f6             	movzx  esi,si
c001680d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016811:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016815:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016819:	50                   	push   eax
c001681a:	6a 20                	push   0x20
c001681c:	6a 00                	push   0x0
c001681e:	68 e0 a4 02 c0       	push   0xc002a4e0
c0016823:	e8 c8 9c fe ff       	call   c00004f0 <memset>
c0016828:	5a                   	pop    edx
c0016829:	59                   	pop    ecx
c001682a:	57                   	push   edi
c001682b:	56                   	push   esi
c001682c:	e8 2d fe ff ff       	call   c001665e <Vm::realToLinear(unsigned short, unsigned short)>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016838:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001683c:	89 c7                	mov    edi,eax
c001683e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016840:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016847:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001684c:	48                   	dec    eax
c001684d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016852:	75 01                	jne    c0016855 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016854:	fb                   	sti    
c0016855:	83 ec 0c             	sub    esp,0xc
c0016858:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c001685e:	e8 e5 f6 ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c0016863:	83 c4 1c             	add    esp,0x1c
c0016866:	b0 01                	mov    al,0x1
c0016868:	5b                   	pop    ebx
c0016869:	5e                   	pop    esi
c001686a:	5f                   	pop    edi
c001686b:	5d                   	pop    ebp
c001686c:	c3                   	ret    

c001686d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001686d:	55                   	push   ebp
c001686e:	57                   	push   edi
c001686f:	56                   	push   esi
c0016870:	53                   	push   ebx
c0016871:	83 ec 34             	sub    esp,0x34
c0016874:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016878:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001687c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016880:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016884:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001688c:	68 e0 22 02 c0       	push   0xc00222e0
c0016891:	e8 74 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	fa                   	cli    
c001689a:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c00168a0:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00168a6:	84 db                	test   bl,bl
c00168a8:	75 15                	jne    c00168bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00168aa:	e8 a1 f1 ff ff       	call   c0015a50 <schedule()>
c00168af:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168b4:	48                   	dec    eax
c00168b5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168ba:	75 dd                	jne    c0016899 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168bc:	fb                   	sti    
c00168bd:	eb da                	jmp    c0016899 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168bf:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00168c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168cd:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c00168d2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00168d6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00168da:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00168de:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00168e2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00168e6:	50                   	push   eax
c00168e7:	6a 20                	push   0x20
c00168e9:	6a 00                	push   0x0
c00168eb:	68 e0 a4 02 c0       	push   0xc002a4e0
c00168f0:	e8 fb 9b fe ff       	call   c00004f0 <memset>
c00168f5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00168fc:	e8 d2 11 ff ff       	call   c0007ad3 <malloc>
c0016901:	83 c4 0c             	add    esp,0xc
c0016904:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001690a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001690e:	89 c5                	mov    ebp,eax
c0016910:	50                   	push   eax
c0016911:	e8 b0 4d ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	85 ed                	test   ebp,ebp
c001691b:	75 0a                	jne    c0016927 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	68 02 23 02 c0       	push   0xc0022302
c0016925:	eb 2b                	jmp    c0016952 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016927:	50                   	push   eax
c0016928:	8d 44 24 17          	lea    eax,[esp+0x17]
c001692c:	50                   	push   eax
c001692d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016931:	50                   	push   eax
c0016932:	55                   	push   ebp
c0016933:	e8 4c 51 ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c0016938:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001693c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016940:	83 c4 10             	add    esp,0x10
c0016943:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016948:	74 27                	je     c0016971 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	68 16 23 02 c0       	push   0xc0022316
c0016952:	e8 f6 a7 ff ff       	call   c001114d <KePanic(char const*)>
c0016957:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	48                   	dec    eax
c0016960:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016965:	85 c0                	test   eax,eax
c0016967:	75 01                	jne    c001696a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016969:	fb                   	sti    
c001696a:	31 db                	xor    ebx,ebx
c001696c:	e9 90 00 00 00       	jmp    c0016a01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016971:	51                   	push   ecx
c0016972:	51                   	push   ecx
c0016973:	6a 01                	push   0x1
c0016975:	55                   	push   ebp
c0016976:	e8 07 4e ff ff       	call   c000b782 <File::open(FileOpenMode)>
c001697b:	83 c4 10             	add    esp,0x10
c001697e:	85 c0                	test   eax,eax
c0016980:	74 26                	je     c00169a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016982:	83 ec 0c             	sub    esp,0xc
c0016985:	68 2f 23 02 c0       	push   0xc002232f
c001698a:	e8 be a7 ff ff       	call   c001114d <KePanic(char const*)>
c001698f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	48                   	dec    eax
c0016998:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001699d:	85 c0                	test   eax,eax
c001699f:	75 c9                	jne    c001696a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169a1:	fb                   	sti    
c00169a2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00169a6:	eb 59                	jmp    c0016a01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169a8:	50                   	push   eax
c00169a9:	0f b7 ff             	movzx  edi,di
c00169ac:	50                   	push   eax
c00169ad:	0f b7 f6             	movzx  esi,si
c00169b0:	57                   	push   edi
c00169b1:	56                   	push   esi
c00169b2:	e8 a7 fc ff ff       	call   c001665e <Vm::realToLinear(unsigned short, unsigned short)>
c00169b7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00169ba:	5a                   	pop    edx
c00169bb:	8d 74 24 20          	lea    esi,[esp+0x20]
c00169bf:	56                   	push   esi
c00169c0:	50                   	push   eax
c00169c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169c9:	55                   	push   ebp
c00169ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169cd:	83 c4 14             	add    esp,0x14
c00169d0:	55                   	push   ebp
c00169d1:	e8 0a 4e ff ff       	call   c000b7e0 <File::close()>
c00169d6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c00169e5:	48                   	dec    eax
c00169e6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169eb:	85 c0                	test   eax,eax
c00169ed:	75 01                	jne    c00169f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00169ef:	fb                   	sti    
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00169f9:	e8 4a f5 ff ff       	call   c0015f48 <unblockTask(ThreadControlBlock*)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	83 c4 2c             	add    esp,0x2c
c0016a04:	88 d8                	mov    al,bl
c0016a06:	5b                   	pop    ebx
c0016a07:	5e                   	pop    esi
c0016a08:	5f                   	pop    edi
c0016a09:	5d                   	pop    ebp
c0016a0a:	c3                   	ret    

c0016a0b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a0b:	57                   	push   edi
c0016a0c:	56                   	push   esi
c0016a0d:	53                   	push   ebx
c0016a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a1a:	83 e8 06             	sub    eax,0x6
c0016a1d:	0f b7 c0             	movzx  eax,ax
c0016a20:	50                   	push   eax
c0016a21:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a26:	50                   	push   eax
c0016a27:	e8 32 fc ff ff       	call   c001665e <Vm::realToLinear(unsigned short, unsigned short)>
c0016a2c:	5a                   	pop    edx
c0016a2d:	59                   	pop    ecx
c0016a2e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016a31:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016a34:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016a37:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a3d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016a40:	8d 51 02             	lea    edx,[ecx+0x2]
c0016a43:	66 89 10             	mov    WORD PTR [eax],dx
c0016a46:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016a4a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016a4e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016a52:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016a55:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016a5f:	89 f1                	mov    ecx,esi
c0016a61:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016a65:	89 f2                	mov    edx,esi
c0016a67:	0f b6 d6             	movzx  edx,dh
c0016a6a:	0f b6 f1             	movzx  esi,cl
c0016a6d:	74 0a                	je     c0016a79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016a6f:	c1 e2 08             	shl    edx,0x8
c0016a72:	09 f2                	or     edx,esi
c0016a74:	80 ce 02             	or     dh,0x2
c0016a77:	eb 08                	jmp    c0016a81 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016a79:	c1 e2 08             	shl    edx,0x8
c0016a7c:	09 f2                	or     edx,esi
c0016a7e:	80 e6 fd             	and    dh,0xfd
c0016a81:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a8a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016a8e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016a96:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016a99:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016aa1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016aa4:	5b                   	pop    ebx
c0016aa5:	5e                   	pop    esi
c0016aa6:	5f                   	pop    edi
c0016aa7:	c3                   	ret    

c0016aa8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016aa8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016aad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ab2:	c1 e0 04             	shl    eax,0x4
c0016ab5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016ab8:	c3                   	ret    

c0016ab9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016ab9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016abe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ac3:	c1 e0 04             	shl    eax,0x4
c0016ac6:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016aca:	c3                   	ret    

c0016acb <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016acb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ad0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ad5:	c1 e0 04             	shl    eax,0x4
c0016ad8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016adb:	c3                   	ret    

c0016adc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016adc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ae1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ae6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016aea:	c1 e0 04             	shl    eax,0x4
c0016aed:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016af0:	c3                   	ret    

c0016af1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016af1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016af6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016afb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016aff:	c1 e0 04             	shl    eax,0x4
c0016b02:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b06:	c3                   	ret    

c0016b07 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b15:	c1 e0 04             	shl    eax,0x4
c0016b18:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b1b:	c3                   	ret    

c0016b1c <Vm::faultHandler(regs*)>:
c0016b1c:	55                   	push   ebp
c0016b1d:	57                   	push   edi
c0016b1e:	56                   	push   esi
c0016b1f:	53                   	push   ebx
c0016b20:	83 ec 2c             	sub    esp,0x2c
c0016b23:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b27:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b2a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016b2e:	0f b7 f8             	movzx  edi,ax
c0016b31:	0f b7 c0             	movzx  eax,ax
c0016b34:	52                   	push   edx
c0016b35:	50                   	push   eax
c0016b36:	e8 23 fb ff ff       	call   c001665e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b3b:	5a                   	pop    edx
c0016b3c:	59                   	pop    ecx
c0016b3d:	89 c1                	mov    ecx,eax
c0016b3f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016b42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b46:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016b4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016b52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b56:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016b5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b67:	e8 f2 fa ff ff       	call   c001665e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b6c:	5e                   	pop    esi
c0016b6d:	be 06 00 00 00       	mov    esi,0x6
c0016b72:	5d                   	pop    ebp
c0016b73:	31 ed                	xor    ebp,ebp
c0016b75:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016b7a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016b7d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016b83:	0f 84 74 02 00 00    	je     c0016dfd <Vm::faultHandler(regs*)+0x2e1>
c0016b89:	0f 87 94 00 00 00    	ja     c0016c23 <Vm::faultHandler(regs*)+0x107>
c0016b8f:	83 fa 66             	cmp    edx,0x66
c0016b92:	0f 84 e2 01 00 00    	je     c0016d7a <Vm::faultHandler(regs*)+0x25e>
c0016b98:	77 47                	ja     c0016be1 <Vm::faultHandler(regs*)+0xc5>
c0016b9a:	83 fa 36             	cmp    edx,0x36
c0016b9d:	0f 84 ca 01 00 00    	je     c0016d6d <Vm::faultHandler(regs*)+0x251>
c0016ba3:	77 1a                	ja     c0016bbf <Vm::faultHandler(regs*)+0xa3>
c0016ba5:	83 fa 26             	cmp    edx,0x26
c0016ba8:	0f 84 98 01 00 00    	je     c0016d46 <Vm::faultHandler(regs*)+0x22a>
c0016bae:	83 fa 2e             	cmp    edx,0x2e
c0016bb1:	0f 85 27 06 00 00    	jne    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016bb7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bba:	31 f6                	xor    esi,esi
c0016bbc:	41                   	inc    ecx
c0016bbd:	eb bb                	jmp    c0016b7a <Vm::faultHandler(regs*)+0x5e>
c0016bbf:	83 fa 64             	cmp    edx,0x64
c0016bc2:	0f 84 8b 01 00 00    	je     c0016d53 <Vm::faultHandler(regs*)+0x237>
c0016bc8:	0f 87 92 01 00 00    	ja     c0016d60 <Vm::faultHandler(regs*)+0x244>
c0016bce:	83 fa 3e             	cmp    edx,0x3e
c0016bd1:	0f 85 07 06 00 00    	jne    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016bd7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bda:	be 01 00 00 00       	mov    esi,0x1
c0016bdf:	eb db                	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016be1:	83 fa 6d             	cmp    edx,0x6d
c0016be4:	0f 84 34 03 00 00    	je     c0016f1e <Vm::faultHandler(regs*)+0x402>
c0016bea:	77 17                	ja     c0016c03 <Vm::faultHandler(regs*)+0xe7>
c0016bec:	83 fa 67             	cmp    edx,0x67
c0016bef:	0f 84 92 01 00 00    	je     c0016d87 <Vm::faultHandler(regs*)+0x26b>
c0016bf5:	83 fa 6c             	cmp    edx,0x6c
c0016bf8:	0f 84 b1 02 00 00    	je     c0016eaf <Vm::faultHandler(regs*)+0x393>
c0016bfe:	e9 db 05 00 00       	jmp    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016c03:	83 fa 6f             	cmp    edx,0x6f
c0016c06:	0f 84 40 04 00 00    	je     c001704c <Vm::faultHandler(regs*)+0x530>
c0016c0c:	0f 82 a2 03 00 00    	jb     c0016fb4 <Vm::faultHandler(regs*)+0x498>
c0016c12:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c18:	0f 84 76 01 00 00    	je     c0016d94 <Vm::faultHandler(regs*)+0x278>
c0016c1e:	e9 bb 05 00 00       	jmp    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016c23:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016c29:	0f 84 57 05 00 00    	je     c0017186 <Vm::faultHandler(regs*)+0x66a>
c0016c2f:	0f 87 a9 00 00 00    	ja     c0016cde <Vm::faultHandler(regs*)+0x1c2>
c0016c35:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016c3b:	0f 84 d6 04 00 00    	je     c0017117 <Vm::faultHandler(regs*)+0x5fb>
c0016c41:	77 78                	ja     c0016cbb <Vm::faultHandler(regs*)+0x19f>
c0016c43:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016c49:	0f 84 0e 02 00 00    	je     c0016e5d <Vm::faultHandler(regs*)+0x341>
c0016c4f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016c55:	0f 85 83 05 00 00    	jne    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016c5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016c5f:	89 d1                	mov    ecx,edx
c0016c61:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016c64:	c1 e1 08             	shl    ecx,0x8
c0016c67:	09 ca                	or     edx,ecx
c0016c69:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016c6c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016c70:	89 d1                	mov    ecx,edx
c0016c72:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016c76:	c1 e1 08             	shl    ecx,0x8
c0016c79:	09 ca                	or     edx,ecx
c0016c7b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016c7e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016c82:	89 d1                	mov    ecx,edx
c0016c84:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016c88:	c1 e1 08             	shl    ecx,0x8
c0016c8b:	09 ca                	or     edx,ecx
c0016c8d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016c93:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016c96:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016c9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ca0:	d1 e8                	shr    eax,1
c0016ca2:	83 e0 01             	and    eax,0x1
c0016ca5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ca8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cab:	83 c0 06             	add    eax,0x6
c0016cae:	25 ff ff 00 00       	and    eax,0xffff
c0016cb3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016cb6:	e9 1f 05 00 00       	jmp    c00171da <Vm::faultHandler(regs*)+0x6be>
c0016cbb:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016cc1:	0f 84 95 04 00 00    	je     c001715c <Vm::faultHandler(regs*)+0x640>
c0016cc7:	0f 82 66 04 00 00    	jb     c0017133 <Vm::faultHandler(regs*)+0x617>
c0016ccd:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016cd3:	0f 84 9a 04 00 00    	je     c0017173 <Vm::faultHandler(regs*)+0x657>
c0016cd9:	e9 00 05 00 00       	jmp    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016cde:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016ce4:	0f 84 dd 04 00 00    	je     c00171c7 <Vm::faultHandler(regs*)+0x6ab>
c0016cea:	77 2e                	ja     c0016d1a <Vm::faultHandler(regs*)+0x1fe>
c0016cec:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016cf2:	0f 84 aa 04 00 00    	je     c00171a2 <Vm::faultHandler(regs*)+0x686>
c0016cf8:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016cfe:	0f 85 da 04 00 00    	jne    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016d04:	50                   	push   eax
c0016d05:	50                   	push   eax
c0016d06:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d0a:	50                   	push   eax
c0016d0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d0f:	50                   	push   eax
c0016d10:	e8 13 f9 ff ff       	call   c0016628 <Vm::outbv(unsigned short, unsigned char)>
c0016d15:	e9 a5 04 00 00       	jmp    c00171bf <Vm::faultHandler(regs*)+0x6a3>
c0016d1a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d20:	0f 84 6d 01 00 00    	je     c0016e93 <Vm::faultHandler(regs*)+0x377>
c0016d26:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016d2c:	0f 84 6f 01 00 00    	je     c0016ea1 <Vm::faultHandler(regs*)+0x385>
c0016d32:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016d38:	0f 85 a0 04 00 00    	jne    c00171de <Vm::faultHandler(regs*)+0x6c2>
c0016d3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d41:	e9 76 fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d49:	be 02 00 00 00       	mov    esi,0x2
c0016d4e:	e9 69 fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d53:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d56:	be 03 00 00 00       	mov    esi,0x3
c0016d5b:	e9 5c fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d63:	be 04 00 00 00       	mov    esi,0x4
c0016d68:	e9 4f fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d70:	be 05 00 00 00       	mov    esi,0x5
c0016d75:	e9 42 fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d7a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0016d82:	e9 35 fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d8a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016d8f:	e9 28 fe ff ff       	jmp    c0016bbc <Vm::faultHandler(regs*)+0xa0>
c0016d94:	83 e5 01             	and    ebp,0x1
c0016d97:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016d9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d9e:	74 30                	je     c0016dd0 <Vm::faultHandler(regs*)+0x2b4>
c0016da0:	83 e9 04             	sub    ecx,0x4
c0016da3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016da9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016daf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016db2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016db5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016dbb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016dbf:	0f 84 12 04 00 00    	je     c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016dc5:	80 ce 02             	or     dh,0x2
c0016dc8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016dcb:	e9 07 04 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016dd0:	83 e9 02             	sub    ecx,0x2
c0016dd3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016dd9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ddc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016de0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016de6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016dea:	74 05                	je     c0016df1 <Vm::faultHandler(regs*)+0x2d5>
c0016dec:	80 ce 02             	or     dh,0x2
c0016def:	eb 03                	jmp    c0016df4 <Vm::faultHandler(regs*)+0x2d8>
c0016df1:	80 e6 fd             	and    dh,0xfd
c0016df4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016df8:	e9 da 03 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016dfd:	83 e5 01             	and    ebp,0x1
c0016e00:	74 2a                	je     c0016e2c <Vm::faultHandler(regs*)+0x310>
c0016e02:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e04:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e0a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e10:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e1b:	c1 e8 09             	shr    eax,0x9
c0016e1e:	83 e0 01             	and    eax,0x1
c0016e21:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e24:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e27:	83 c0 04             	add    eax,0x4
c0016e2a:	eb 24                	jmp    c0016e50 <Vm::faultHandler(regs*)+0x334>
c0016e2c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016e2f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e35:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e38:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016e3b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e41:	c1 e8 09             	shr    eax,0x9
c0016e44:	83 e0 01             	and    eax,0x1
c0016e47:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e4a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e4d:	83 c0 02             	add    eax,0x2
c0016e50:	25 ff ff 00 00       	and    eax,0xffff
c0016e55:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e58:	e9 7a 03 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016e5d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e61:	3d ee 00 00 00       	cmp    eax,0xee
c0016e66:	75 10                	jne    c0016e78 <Vm::faultHandler(regs*)+0x35c>
c0016e68:	83 ec 0c             	sub    esp,0xc
c0016e6b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016e6e:	e8 52 f8 ff ff       	call   c00166c5 <Vm::mainloop3(unsigned long)>
c0016e73:	e9 4a 03 00 00       	jmp    c00171c2 <Vm::faultHandler(regs*)+0x6a6>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e83:	51                   	push   ecx
c0016e84:	50                   	push   eax
c0016e85:	53                   	push   ebx
c0016e86:	e8 80 fb ff ff       	call   c0016a0b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016e8b:	83 c4 20             	add    esp,0x20
c0016e8e:	e9 47 03 00 00       	jmp    c00171da <Vm::faultHandler(regs*)+0x6be>
c0016e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e98:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016e9c:	e9 36 03 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016ea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016eaa:	e9 28 03 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016eaf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016eb4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016eb7:	74 2b                	je     c0016ee4 <Vm::faultHandler(regs*)+0x3c8>
c0016eb9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016ec0:	76 22                	jbe    c0016ee4 <Vm::faultHandler(regs*)+0x3c8>
c0016ec2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ec6:	50                   	push   eax
c0016ec7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ecb:	50                   	push   eax
c0016ecc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ed0:	50                   	push   eax
c0016ed1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ed5:	50                   	push   eax
c0016ed6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016eda:	50                   	push   eax
c0016edb:	6a 6c                	push   0x6c
c0016edd:	6a 6c                	push   0x6c
c0016edf:	e9 c0 01 00 00       	jmp    c00170a4 <Vm::faultHandler(regs*)+0x588>
c0016ee4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ee8:	83 ec 0c             	sub    esp,0xc
c0016eeb:	0f b7 f6             	movzx  esi,si
c0016eee:	50                   	push   eax
c0016eef:	e8 21 f7 ff ff       	call   c0016615 <Vm::inbv(unsigned short)>
c0016ef4:	83 c4 0c             	add    esp,0xc
c0016ef7:	0f b6 c0             	movzx  eax,al
c0016efa:	50                   	push   eax
c0016efb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016eff:	50                   	push   eax
c0016f00:	56                   	push   esi
c0016f01:	e8 d6 fb ff ff       	call   c0016adc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f0c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f10:	74 03                	je     c0016f15 <Vm::faultHandler(regs*)+0x3f9>
c0016f12:	48                   	dec    eax
c0016f13:	eb 01                	jmp    c0016f16 <Vm::faultHandler(regs*)+0x3fa>
c0016f15:	40                   	inc    eax
c0016f16:	0f b7 c0             	movzx  eax,ax
c0016f19:	e9 8e 00 00 00       	jmp    c0016fac <Vm::faultHandler(regs*)+0x490>
c0016f1e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f23:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f29:	74 29                	je     c0016f54 <Vm::faultHandler(regs*)+0x438>
c0016f2b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016f30:	76 22                	jbe    c0016f54 <Vm::faultHandler(regs*)+0x438>
c0016f32:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f36:	50                   	push   eax
c0016f37:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f3b:	50                   	push   eax
c0016f3c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f40:	50                   	push   eax
c0016f41:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f45:	50                   	push   eax
c0016f46:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f4a:	50                   	push   eax
c0016f4b:	6a 6d                	push   0x6d
c0016f4d:	6a 6d                	push   0x6d
c0016f4f:	e9 50 01 00 00       	jmp    c00170a4 <Vm::faultHandler(regs*)+0x588>
c0016f54:	83 e5 01             	and    ebp,0x1
c0016f57:	0f b7 c8             	movzx  ecx,ax
c0016f5a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016f5d:	0f b7 f6             	movzx  esi,si
c0016f60:	74 1e                	je     c0016f80 <Vm::faultHandler(regs*)+0x464>
c0016f62:	ed                   	in     eax,dx
c0016f63:	55                   	push   ebp
c0016f64:	50                   	push   eax
c0016f65:	51                   	push   ecx
c0016f66:	56                   	push   esi
c0016f67:	e8 9b fb ff ff       	call   c0016b07 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016f6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	8d 50 04             	lea    edx,[eax+0x4]
c0016f75:	83 e8 04             	sub    eax,0x4
c0016f78:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016f7e:	eb 20                	jmp    c0016fa0 <Vm::faultHandler(regs*)+0x484>
c0016f80:	66 ed                	in     ax,dx
c0016f82:	57                   	push   edi
c0016f83:	0f b7 c0             	movzx  eax,ax
c0016f86:	50                   	push   eax
c0016f87:	51                   	push   ecx
c0016f88:	56                   	push   esi
c0016f89:	e8 63 fb ff ff       	call   c0016af1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016f8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f91:	83 c4 10             	add    esp,0x10
c0016f94:	8d 50 02             	lea    edx,[eax+0x2]
c0016f97:	83 e8 02             	sub    eax,0x2
c0016f9a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fa0:	25 ff ff 00 00       	and    eax,0xffff
c0016fa5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fa9:	0f 44 c2             	cmove  eax,edx
c0016fac:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016faf:	e9 23 02 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0016fb4:	8d 46 ff             	lea    eax,[esi-0x1]
c0016fb7:	0f b6 f0             	movzx  esi,al
c0016fba:	83 fe 05             	cmp    esi,0x5
c0016fbd:	77 23                	ja     c0016fe2 <Vm::faultHandler(regs*)+0x4c6>
c0016fbf:	ff 24 b5 a4 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc5c]
c0016fc6:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016fcb:	eb 15                	jmp    c0016fe2 <Vm::faultHandler(regs*)+0x4c6>
c0016fcd:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016fd1:	eb 0f                	jmp    c0016fe2 <Vm::faultHandler(regs*)+0x4c6>
c0016fd3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016fd7:	eb 09                	jmp    c0016fe2 <Vm::faultHandler(regs*)+0x4c6>
c0016fd9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016fdd:	eb 03                	jmp    c0016fe2 <Vm::faultHandler(regs*)+0x4c6>
c0016fdf:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016fe2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fe7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016fea:	74 29                	je     c0017015 <Vm::faultHandler(regs*)+0x4f9>
c0016fec:	3d ff ff 00 00       	cmp    eax,0xffff
c0016ff1:	76 22                	jbe    c0017015 <Vm::faultHandler(regs*)+0x4f9>
c0016ff3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ff7:	50                   	push   eax
c0016ff8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ffc:	50                   	push   eax
c0016ffd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017001:	50                   	push   eax
c0017002:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017006:	50                   	push   eax
c0017007:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001700b:	50                   	push   eax
c001700c:	6a 6e                	push   0x6e
c001700e:	6a 6e                	push   0x6e
c0017010:	e9 8f 00 00 00       	jmp    c00170a4 <Vm::faultHandler(regs*)+0x588>
c0017015:	52                   	push   edx
c0017016:	0f b7 c0             	movzx  eax,ax
c0017019:	52                   	push   edx
c001701a:	50                   	push   eax
c001701b:	57                   	push   edi
c001701c:	e8 87 fa ff ff       	call   c0016aa8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017021:	59                   	pop    ecx
c0017022:	5e                   	pop    esi
c0017023:	0f b6 c0             	movzx  eax,al
c0017026:	50                   	push   eax
c0017027:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001702b:	50                   	push   eax
c001702c:	e8 f7 f5 ff ff       	call   c0016628 <Vm::outbv(unsigned short, unsigned char)>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017037:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001703b:	74 03                	je     c0017040 <Vm::faultHandler(regs*)+0x524>
c001703d:	48                   	dec    eax
c001703e:	eb 01                	jmp    c0017041 <Vm::faultHandler(regs*)+0x525>
c0017040:	40                   	inc    eax
c0017041:	0f b7 c0             	movzx  eax,ax
c0017044:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017047:	e9 8b 01 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c001704c:	8d 46 ff             	lea    eax,[esi-0x1]
c001704f:	0f b6 f0             	movzx  esi,al
c0017052:	83 fe 05             	cmp    esi,0x5
c0017055:	77 1e                	ja     c0017075 <Vm::faultHandler(regs*)+0x559>
c0017057:	ff 24 b5 bc 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc44]
c001705e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017062:	eb 11                	jmp    c0017075 <Vm::faultHandler(regs*)+0x559>
c0017064:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017067:	eb 0c                	jmp    c0017075 <Vm::faultHandler(regs*)+0x559>
c0017069:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001706c:	eb 07                	jmp    c0017075 <Vm::faultHandler(regs*)+0x559>
c001706e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017071:	eb 02                	jmp    c0017075 <Vm::faultHandler(regs*)+0x559>
c0017073:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017075:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001707a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001707d:	74 37                	je     c00170b6 <Vm::faultHandler(regs*)+0x59a>
c001707f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017085:	76 2f                	jbe    c00170b6 <Vm::faultHandler(regs*)+0x59a>
c0017087:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001708b:	50                   	push   eax
c001708c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017090:	50                   	push   eax
c0017091:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017095:	50                   	push   eax
c0017096:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001709a:	50                   	push   eax
c001709b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001709f:	50                   	push   eax
c00170a0:	6a 6f                	push   0x6f
c00170a2:	6a 6f                	push   0x6f
c00170a4:	68 48 23 02 c0       	push   0xc0022348
c00170a9:	e8 5c 38 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00170ae:	83 c4 20             	add    esp,0x20
c00170b1:	e9 86 01 00 00       	jmp    c001723c <Vm::faultHandler(regs*)+0x720>
c00170b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170b9:	0f b7 d7             	movzx  edx,di
c00170bc:	0f b7 c6             	movzx  eax,si
c00170bf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00170c2:	81 e1 00 04 00 00    	and    ecx,0x400
c00170c8:	83 e5 01             	and    ebp,0x1
c00170cb:	74 1c                	je     c00170e9 <Vm::faultHandler(regs*)+0x5cd>
c00170cd:	55                   	push   ebp
c00170ce:	55                   	push   ebp
c00170cf:	50                   	push   eax
c00170d0:	52                   	push   edx
c00170d1:	e8 f5 f9 ff ff       	call   c0016acb <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	89 fa                	mov    edx,edi
c00170db:	ef                   	out    dx,eax
c00170dc:	8d 46 04             	lea    eax,[esi+0x4]
c00170df:	83 ee 04             	sub    esi,0x4
c00170e2:	25 ff ff 00 00       	and    eax,0xffff
c00170e7:	eb 1b                	jmp    c0017104 <Vm::faultHandler(regs*)+0x5e8>
c00170e9:	55                   	push   ebp
c00170ea:	55                   	push   ebp
c00170eb:	50                   	push   eax
c00170ec:	52                   	push   edx
c00170ed:	e8 c7 f9 ff ff       	call   c0016ab9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00170f2:	83 c4 10             	add    esp,0x10
c00170f5:	89 fa                	mov    edx,edi
c00170f7:	66 ef                	out    dx,ax
c00170f9:	8d 46 02             	lea    eax,[esi+0x2]
c00170fc:	83 ee 02             	sub    esi,0x2
c00170ff:	25 ff ff 00 00       	and    eax,0xffff
c0017104:	81 e6 ff ff 00 00    	and    esi,0xffff
c001710a:	85 c9                	test   ecx,ecx
c001710c:	0f 44 f0             	cmove  esi,eax
c001710f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017112:	e9 c0 00 00 00       	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c0017117:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017125:	50                   	push   eax
c0017126:	e8 ea f4 ff ff       	call   c0016615 <Vm::inbv(unsigned short)>
c001712b:	0f b6 c0             	movzx  eax,al
c001712e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017131:	eb 3a                	jmp    c001716d <Vm::faultHandler(regs*)+0x651>
c0017133:	83 e5 01             	and    ebp,0x1
c0017136:	74 07                	je     c001713f <Vm::faultHandler(regs*)+0x623>
c0017138:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001713c:	ed                   	in     eax,dx
c001713d:	eb 14                	jmp    c0017153 <Vm::faultHandler(regs*)+0x637>
c001713f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017142:	66 31 f6             	xor    si,si
c0017145:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017148:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001714c:	66 ed                	in     ax,dx
c001714e:	0f b7 c0             	movzx  eax,ax
c0017151:	09 f0                	or     eax,esi
c0017153:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017156:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001715a:	eb 7e                	jmp    c00171da <Vm::faultHandler(regs*)+0x6be>
c001715c:	52                   	push   edx
c001715d:	52                   	push   edx
c001715e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017162:	50                   	push   eax
c0017163:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017167:	50                   	push   eax
c0017168:	e8 bb f4 ff ff       	call   c0016628 <Vm::outbv(unsigned short, unsigned char)>
c001716d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017171:	eb 4f                	jmp    c00171c2 <Vm::faultHandler(regs*)+0x6a6>
c0017173:	83 e5 01             	and    ebp,0x1
c0017176:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017179:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001717d:	74 03                	je     c0017182 <Vm::faultHandler(regs*)+0x666>
c001717f:	ef                   	out    dx,eax
c0017180:	eb d4                	jmp    c0017156 <Vm::faultHandler(regs*)+0x63a>
c0017182:	66 ef                	out    dx,ax
c0017184:	eb d0                	jmp    c0017156 <Vm::faultHandler(regs*)+0x63a>
c0017186:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001718a:	83 ec 0c             	sub    esp,0xc
c001718d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017194:	50                   	push   eax
c0017195:	e8 7b f4 ff ff       	call   c0016615 <Vm::inbv(unsigned short)>
c001719a:	0f b6 c0             	movzx  eax,al
c001719d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171a0:	eb 1d                	jmp    c00171bf <Vm::faultHandler(regs*)+0x6a3>
c00171a2:	83 e5 01             	and    ebp,0x1
c00171a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171a8:	74 03                	je     c00171ad <Vm::faultHandler(regs*)+0x691>
c00171aa:	ed                   	in     eax,dx
c00171ab:	eb 0d                	jmp    c00171ba <Vm::faultHandler(regs*)+0x69e>
c00171ad:	66 ed                	in     ax,dx
c00171af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00171b2:	0f b7 c0             	movzx  eax,ax
c00171b5:	66 31 d2             	xor    dx,dx
c00171b8:	09 d0                	or     eax,edx
c00171ba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171bd:	eb 18                	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c00171bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171c2:	83 c4 10             	add    esp,0x10
c00171c5:	eb 13                	jmp    c00171da <Vm::faultHandler(regs*)+0x6be>
c00171c7:	83 e5 01             	and    ebp,0x1
c00171ca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171d0:	74 03                	je     c00171d5 <Vm::faultHandler(regs*)+0x6b9>
c00171d2:	ef                   	out    dx,eax
c00171d3:	eb 02                	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6bb>
c00171d5:	66 ef                	out    dx,ax
c00171d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171da:	b0 01                	mov    al,0x1
c00171dc:	eb 60                	jmp    c001723e <Vm::faultHandler(regs*)+0x722>
c00171de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171e2:	50                   	push   eax
c00171e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171e7:	50                   	push   eax
c00171e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171ec:	50                   	push   eax
c00171ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171f1:	50                   	push   eax
c00171f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171f6:	50                   	push   eax
c00171f7:	52                   	push   edx
c00171f8:	52                   	push   edx
c00171f9:	68 75 23 02 c0       	push   0xc0022375
c00171fe:	e8 07 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017203:	83 c4 20             	add    esp,0x20
c0017206:	83 ec 0c             	sub    esp,0xc
c0017209:	6a 60                	push   0x60
c001720b:	e8 05 f4 ff ff       	call   c0016615 <Vm::inbv(unsigned short)>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	0f b6 d0             	movzx  edx,al
c0017216:	83 fa 1c             	cmp    edx,0x1c
c0017219:	74 05                	je     c0017220 <Vm::faultHandler(regs*)+0x704>
c001721b:	83 fa 5a             	cmp    edx,0x5a
c001721e:	75 e6                	jne    c0017206 <Vm::faultHandler(regs*)+0x6ea>
c0017220:	0f b6 c0             	movzx  eax,al
c0017223:	83 f8 1c             	cmp    eax,0x1c
c0017226:	74 05                	je     c001722d <Vm::faultHandler(regs*)+0x711>
c0017228:	83 f8 5a             	cmp    eax,0x5a
c001722b:	75 0f                	jne    c001723c <Vm::faultHandler(regs*)+0x720>
c001722d:	83 ec 0c             	sub    esp,0xc
c0017230:	6a 60                	push   0x60
c0017232:	e8 de f3 ff ff       	call   c0016615 <Vm::inbv(unsigned short)>
c0017237:	83 c4 10             	add    esp,0x10
c001723a:	eb e4                	jmp    c0017220 <Vm::faultHandler(regs*)+0x704>
c001723c:	31 c0                	xor    eax,eax
c001723e:	83 c4 2c             	add    esp,0x2c
c0017241:	5b                   	pop    ebx
c0017242:	5e                   	pop    esi
c0017243:	5f                   	pop    edi
c0017244:	5d                   	pop    ebp
c0017245:	c3                   	ret    

c0017246 <noCopro(unsigned long)>:
c0017246:	c3                   	ret    

c0017247 <nmiHandler(regs*, void*)>:
c0017247:	83 ec 0c             	sub    esp,0xc
c001724a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001724f:	83 ec 0c             	sub    esp,0xc
c0017252:	50                   	push   eax
c0017253:	e8 80 00 ff ff       	call   c00072d8 <Computer::handleNMI()>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	90                   	nop
c001725c:	83 c4 0c             	add    esp,0xc
c001725f:	c3                   	ret    

c0017260 <doubleFault(regs*, void*)>:
c0017260:	55                   	push   ebp
c0017261:	89 e5                	mov    ebp,esp
c0017263:	83 ec 08             	sub    esp,0x8
c0017266:	83 ec 0c             	sub    esp,0xc
c0017269:	68 d4 23 02 c0       	push   0xc00223d4
c001726e:	e8 da 9e ff ff       	call   c001114d <KePanic(char const*)>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	90                   	nop
c0017277:	c9                   	leave  
c0017278:	c3                   	ret    

c0017279 <displayDebugInfo(regs*)>:
c0017279:	83 ec 1c             	sub    esp,0x1c
c001727c:	0f 20 c0             	mov    eax,cr0
c001727f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017283:	0f 20 d0             	mov    eax,cr2
c0017286:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001728a:	0f 20 d8             	mov    eax,cr3
c001728d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017291:	0f 20 e0             	mov    eax,cr4
c0017294:	89 04 24             	mov    DWORD PTR [esp],eax
c0017297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001729b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001729e:	83 ec 08             	sub    esp,0x8
c00172a1:	50                   	push   eax
c00172a2:	68 f0 23 02 c0       	push   0xc00223f0
c00172a7:	e8 5e 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172ac:	83 c4 10             	add    esp,0x10
c00172af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172b3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00172b6:	83 ec 08             	sub    esp,0x8
c00172b9:	50                   	push   eax
c00172ba:	68 e1 23 02 c0       	push   0xc00223e1
c00172bf:	e8 46 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172c4:	83 c4 10             	add    esp,0x10
c00172c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172cb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00172ce:	83 ec 08             	sub    esp,0x8
c00172d1:	50                   	push   eax
c00172d2:	68 ec 23 02 c0       	push   0xc00223ec
c00172d7:	e8 2e 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00172e6:	83 ec 08             	sub    esp,0x8
c00172e9:	50                   	push   eax
c00172ea:	68 fb 23 02 c0       	push   0xc00223fb
c00172ef:	e8 16 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172f4:	83 c4 10             	add    esp,0x10
c00172f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172fb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00172fe:	83 ec 08             	sub    esp,0x8
c0017301:	50                   	push   eax
c0017302:	68 06 24 02 c0       	push   0xc0022406
c0017307:	e8 fe 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	83 ec 08             	sub    esp,0x8
c0017312:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017316:	68 11 24 02 c0       	push   0xc0022411
c001731b:	e8 ea 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	83 ec 08             	sub    esp,0x8
c0017326:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001732a:	68 1c 24 02 c0       	push   0xc002241c
c001732f:	e8 d6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001733b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001733e:	c1 e0 05             	shl    eax,0x5
c0017341:	8d 90 a0 33 02 c0    	lea    edx,[eax-0x3ffdcc60]
c0017347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001734b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001734e:	83 ec 04             	sub    esp,0x4
c0017351:	52                   	push   edx
c0017352:	50                   	push   eax
c0017353:	68 27 24 02 c0       	push   0xc0022427
c0017358:	e8 ad 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017365:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001736b:	83 ec 0c             	sub    esp,0xc
c001736e:	50                   	push   eax
c001736f:	e8 fb 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017374:	83 c4 10             	add    esp,0x10
c0017377:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001737c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017382:	83 ec 08             	sub    esp,0x8
c0017385:	68 36 24 02 c0       	push   0xc0022436
c001738a:	50                   	push   eax
c001738b:	e8 1c 17 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017390:	83 c4 10             	add    esp,0x10
c0017393:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017398:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001739e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173a2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00173a5:	83 ec 08             	sub    esp,0x8
c00173a8:	52                   	push   edx
c00173a9:	50                   	push   eax
c00173aa:	e8 b7 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173bd:	83 ec 08             	sub    esp,0x8
c00173c0:	68 44 24 02 c0       	push   0xc0022444
c00173c5:	50                   	push   eax
c00173c6:	e8 e1 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173cb:	83 c4 10             	add    esp,0x10
c00173ce:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173d9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00173de:	8b 12                	mov    edx,DWORD PTR [edx]
c00173e0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00173e3:	83 c2 0c             	add    edx,0xc
c00173e6:	83 ec 08             	sub    esp,0x8
c00173e9:	52                   	push   edx
c00173ea:	50                   	push   eax
c00173eb:	e8 bc 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173f0:	83 c4 10             	add    esp,0x10
c00173f3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173fe:	83 ec 08             	sub    esp,0x8
c0017401:	68 4d 24 02 c0       	push   0xc002244d
c0017406:	50                   	push   eax
c0017407:	e8 a0 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001740c:	83 c4 10             	add    esp,0x10
c001740f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017414:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001741a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001741e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017421:	83 ec 08             	sub    esp,0x8
c0017424:	52                   	push   edx
c0017425:	50                   	push   eax
c0017426:	e8 3b 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017433:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017439:	83 ec 08             	sub    esp,0x8
c001743c:	68 55 24 02 c0       	push   0xc0022455
c0017441:	50                   	push   eax
c0017442:	e8 65 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017447:	83 c4 10             	add    esp,0x10
c001744a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001744f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017455:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017459:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001745c:	83 ec 08             	sub    esp,0x8
c001745f:	52                   	push   edx
c0017460:	50                   	push   eax
c0017461:	e8 00 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017466:	83 c4 10             	add    esp,0x10
c0017469:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001746e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017474:	83 ec 08             	sub    esp,0x8
c0017477:	68 5d 24 02 c0       	push   0xc002245d
c001747c:	50                   	push   eax
c001747d:	e8 2a 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001748a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017494:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017497:	83 ec 08             	sub    esp,0x8
c001749a:	52                   	push   edx
c001749b:	50                   	push   eax
c001749c:	e8 c5 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174af:	83 ec 08             	sub    esp,0x8
c00174b2:	68 65 24 02 c0       	push   0xc0022465
c00174b7:	50                   	push   eax
c00174b8:	e8 ef 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174cf:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174d2:	83 ec 08             	sub    esp,0x8
c00174d5:	52                   	push   edx
c00174d6:	50                   	push   eax
c00174d7:	e8 8a 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174dc:	83 c4 10             	add    esp,0x10
c00174df:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ea:	83 ec 08             	sub    esp,0x8
c00174ed:	68 6d 24 02 c0       	push   0xc002246d
c00174f2:	50                   	push   eax
c00174f3:	e8 b4 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174f8:	83 c4 10             	add    esp,0x10
c00174fb:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017500:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017506:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001750a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001750d:	83 ec 08             	sub    esp,0x8
c0017510:	52                   	push   edx
c0017511:	50                   	push   eax
c0017512:	e8 4f 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001751f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017525:	83 ec 08             	sub    esp,0x8
c0017528:	68 75 24 02 c0       	push   0xc0022475
c001752d:	50                   	push   eax
c001752e:	e8 79 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001753b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017541:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017545:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017548:	83 ec 08             	sub    esp,0x8
c001754b:	52                   	push   edx
c001754c:	50                   	push   eax
c001754d:	e8 14 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001755a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017560:	83 ec 08             	sub    esp,0x8
c0017563:	68 7d 24 02 c0       	push   0xc002247d
c0017568:	50                   	push   eax
c0017569:	e8 3e 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001756e:	83 c4 10             	add    esp,0x10
c0017571:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017576:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017583:	50                   	push   eax
c0017584:	e8 dd 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017591:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017597:	83 ec 08             	sub    esp,0x8
c001759a:	68 86 24 02 c0       	push   0xc0022486
c001759f:	50                   	push   eax
c00175a0:	e8 07 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175a5:	83 c4 10             	add    esp,0x10
c00175a8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b3:	83 ec 08             	sub    esp,0x8
c00175b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175ba:	50                   	push   eax
c00175bb:	e8 a6 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175c0:	83 c4 10             	add    esp,0x10
c00175c3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ce:	83 ec 08             	sub    esp,0x8
c00175d1:	68 8e 24 02 c0       	push   0xc002248e
c00175d6:	50                   	push   eax
c00175d7:	e8 d0 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ea:	83 ec 08             	sub    esp,0x8
c00175ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00175f1:	50                   	push   eax
c00175f2:	e8 6f 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	fa                   	cli    
c00175fb:	f4                   	hlt    
c00175fc:	eb fe                	jmp    c00175fc <displayDebugInfo(regs*)+0x383>

c00175fe <HalSystemIdle()>:
c00175fe:	56                   	push   esi
c00175ff:	53                   	push   ebx
c0017600:	83 ec 14             	sub    esp,0x14
c0017603:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017608:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001760e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017614:	83 e0 04             	and    eax,0x4
c0017617:	0f b6 c0             	movzx  eax,al
c001761a:	85 c0                	test   eax,eax
c001761c:	0f 95 c0             	setne  al
c001761f:	0f b6 c0             	movzx  eax,al
c0017622:	85 c0                	test   eax,eax
c0017624:	74 4c                	je     c0017672 <HalSystemIdle()+0x74>
c0017626:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001762b:	83 ec 08             	sub    esp,0x8
c001762e:	68 e1 00 00 00       	push   0xe1
c0017633:	50                   	push   eax
c0017634:	e8 ab fa fe ff       	call   c00070e4 <Computer::rdmsr(unsigned int)>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017644:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017649:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001764d:	83 e2 02             	and    edx,0x2
c0017650:	89 d3                	mov    ebx,edx
c0017652:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017656:	83 e2 00             	and    edx,0x0
c0017659:	89 d6                	mov    esi,edx
c001765b:	56                   	push   esi
c001765c:	53                   	push   ebx
c001765d:	68 e1 00 00 00       	push   0xe1
c0017662:	50                   	push   eax
c0017663:	e8 a8 fa fe ff       	call   c0007110 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017668:	83 c4 10             	add    esp,0x10
c001766b:	e8 24 8b fe ff       	call   c0000194 <doTPAUSE>
c0017670:	eb 01                	jmp    c0017673 <HalSystemIdle()+0x75>
c0017672:	f4                   	hlt    
c0017673:	90                   	nop
c0017674:	83 c4 14             	add    esp,0x14
c0017677:	5b                   	pop    ebx
c0017678:	5e                   	pop    esi
c0017679:	c3                   	ret    

c001767a <displayProgramFault(char const*)>:
c001767a:	83 ec 0c             	sub    esp,0xc
c001767d:	83 ec 0c             	sub    esp,0xc
c0017680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017684:	e8 81 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017691:	8b 00                	mov    eax,DWORD PTR [eax]
c0017693:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017696:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769c:	85 c0                	test   eax,eax
c001769e:	74 21                	je     c00176c1 <displayProgramFault(char const*)+0x47>
c00176a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00176a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b0:	6a 04                	push   0x4
c00176b2:	6a 0f                	push   0xf
c00176b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176b8:	50                   	push   eax
c00176b9:	e8 60 14 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	90                   	nop
c00176c2:	83 c4 0c             	add    esp,0xc
c00176c5:	c3                   	ret    

c00176c6 <gpFault(regs*, void*)>:
c00176c6:	83 ec 1c             	sub    esp,0x1c
c00176c9:	c7 05 14 a5 02 c0 1c 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016b1c
c00176d3:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c00176d8:	85 c0                	test   eax,eax
c00176da:	74 1e                	je     c00176fa <gpFault(regs*, void*)+0x34>
c00176dc:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c00176e1:	83 ec 0c             	sub    esp,0xc
c00176e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176e8:	ff d0                	call   eax
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00176f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00176f6:	85 c0                	test   eax,eax
c00176f8:	75 2e                	jne    c0017728 <gpFault(regs*, void*)+0x62>
c00176fa:	83 ec 0c             	sub    esp,0xc
c00176fd:	68 96 24 02 c0       	push   0xc0022496
c0017702:	e8 73 ff ff ff       	call   c001767a <displayProgramFault(char const*)>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	83 ec 0c             	sub    esp,0xc
c001770d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017711:	e8 63 fb ff ff       	call   c0017279 <displayDebugInfo(regs*)>
c0017716:	83 c4 10             	add    esp,0x10
c0017719:	83 ec 0c             	sub    esp,0xc
c001771c:	6a 00                	push   0x0
c001771e:	e8 99 ed ff ff       	call   c00164bc <Thr::terminateFromIRQ(int)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	eb 01                	jmp    c0017729 <gpFault(regs*, void*)+0x63>
c0017728:	90                   	nop
c0017729:	83 c4 1c             	add    esp,0x1c
c001772c:	c3                   	ret    

c001772d <pgFault(regs*, void*)>:
c001772d:	83 ec 1c             	sub    esp,0x1c
c0017730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017734:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017737:	0f 20 d0             	mov    eax,cr2
c001773a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001773e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017742:	83 ec 04             	sub    esp,0x4
c0017745:	52                   	push   edx
c0017746:	50                   	push   eax
c0017747:	68 74 25 02 c0       	push   0xc0022574
c001774c:	e8 b9 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017759:	8b 00                	mov    eax,DWORD PTR [eax]
c001775b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001775e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017764:	0f 20 d2             	mov    edx,cr2
c0017767:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001776b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001776f:	83 ec 08             	sub    esp,0x8
c0017772:	52                   	push   edx
c0017773:	50                   	push   eax
c0017774:	e8 01 2c ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	0f b6 c0             	movzx  eax,al
c001777f:	85 c0                	test   eax,eax
c0017781:	75 2e                	jne    c00177b1 <pgFault(regs*, void*)+0x84>
c0017783:	83 ec 0c             	sub    esp,0xc
c0017786:	68 af 24 02 c0       	push   0xc00224af
c001778b:	e8 ea fe ff ff       	call   c001767a <displayProgramFault(char const*)>
c0017790:	83 c4 10             	add    esp,0x10
c0017793:	83 ec 0c             	sub    esp,0xc
c0017796:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001779a:	e8 da fa ff ff       	call   c0017279 <displayDebugInfo(regs*)>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	6a 00                	push   0x0
c00177a7:	e8 10 ed ff ff       	call   c00164bc <Thr::terminateFromIRQ(int)>
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	eb 01                	jmp    c00177b2 <pgFault(regs*, void*)+0x85>
c00177b1:	90                   	nop
c00177b2:	83 c4 1c             	add    esp,0x1c
c00177b5:	c3                   	ret    

c00177b6 <otherISRHandler(regs*, void*)>:
c00177b6:	83 ec 0c             	sub    esp,0xc
c00177b9:	83 ec 0c             	sub    esp,0xc
c00177bc:	68 9c 25 02 c0       	push   0xc002259c
c00177c1:	e8 b4 fe ff ff       	call   c001767a <displayProgramFault(char const*)>
c00177c6:	83 c4 10             	add    esp,0x10
c00177c9:	83 ec 0c             	sub    esp,0xc
c00177cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177d0:	e8 a4 fa ff ff       	call   c0017279 <displayDebugInfo(regs*)>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	83 ec 0c             	sub    esp,0xc
c00177db:	6a 00                	push   0x0
c00177dd:	e8 da ec ff ff       	call   c00164bc <Thr::terminateFromIRQ(int)>
c00177e2:	83 c4 10             	add    esp,0x10
c00177e5:	90                   	nop
c00177e6:	83 c4 0c             	add    esp,0xc
c00177e9:	c3                   	ret    

c00177ea <opcodeFault(regs*, void*)>:
c00177ea:	55                   	push   ebp
c00177eb:	89 e5                	mov    ebp,esp
c00177ed:	83 ec 08             	sub    esp,0x8
c00177f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	50                   	push   eax
c00177fa:	68 ba 24 02 c0       	push   0xc00224ba
c00177ff:	e8 06 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001780c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017812:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017818:	0f b6 c0             	movzx  eax,al
c001781b:	85 c0                	test   eax,eax
c001781d:	74 21                	je     c0017840 <opcodeFault(regs*, void*)+0x56>
c001781f:	83 ec 0c             	sub    esp,0xc
c0017822:	68 c4 25 02 c0       	push   0xc00225c4
c0017827:	e8 de 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017832:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017835:	8d 50 19             	lea    edx,[eax+0x19]
c0017838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001783b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001783e:	eb 2b                	jmp    c001786b <opcodeFault(regs*, void*)+0x81>
c0017840:	83 ec 0c             	sub    esp,0xc
c0017843:	68 c8 24 02 c0       	push   0xc00224c8
c0017848:	e8 2d fe ff ff       	call   c001767a <displayProgramFault(char const*)>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	83 ec 0c             	sub    esp,0xc
c0017853:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017856:	e8 1e fa ff ff       	call   c0017279 <displayDebugInfo(regs*)>
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	83 ec 0c             	sub    esp,0xc
c0017861:	6a 00                	push   0x0
c0017863:	e8 54 ec ff ff       	call   c00164bc <Thr::terminateFromIRQ(int)>
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	c9                   	leave  
c001786c:	c3                   	ret    

c001786d <i386SaveCoprocessor(void*)>:
c001786d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017871:	83 c0 3f             	add    eax,0x3f
c0017874:	83 e0 c0             	and    eax,0xffffffc0
c0017877:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001787b:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c0017881 <i386LoadCoprocessor(void*)>:
c0017881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017885:	83 c0 3f             	add    eax,0x3f
c0017888:	83 e0 c0             	and    eax,0xffffffc0
c001788b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001788f:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c0017895 <x87EmulHandler(regs*, void*)>:
c0017895:	53                   	push   ebx
c0017896:	83 ec 08             	sub    esp,0x8
c0017899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001789e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00178a2:	74 10                	je     c00178b4 <x87EmulHandler(regs*, void*)+0x1f>
c00178a4:	83 ec 0c             	sub    esp,0xc
c00178a7:	68 d5 24 02 c0       	push   0xc00224d5
c00178ac:	e8 9c 98 ff ff       	call   c001114d <KePanic(char const*)>
c00178b1:	83 c4 10             	add    esp,0x10
c00178b4:	0f 20 c0             	mov    eax,cr0
c00178b7:	a8 08                	test   al,0x8
c00178b9:	74 59                	je     c0017914 <x87EmulHandler(regs*, void*)+0x7f>
c00178bb:	0f 06                	clts   
c00178bd:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c00178c2:	85 c0                	test   eax,eax
c00178c4:	74 0e                	je     c00178d4 <x87EmulHandler(regs*, void*)+0x3f>
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00178cc:	e8 9c ff ff ff       	call   c001786d <i386SaveCoprocessor(void*)>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178da:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00178de:	75 12                	jne    c00178f2 <x87EmulHandler(regs*, void*)+0x5d>
c00178e0:	83 ec 0c             	sub    esp,0xc
c00178e3:	68 40 02 00 00       	push   0x240
c00178e8:	e8 e6 01 ff ff       	call   c0007ad3 <malloc>
c00178ed:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00178f0:	eb 10                	jmp    c0017902 <x87EmulHandler(regs*, void*)+0x6d>
c00178f2:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c00178f7:	83 ec 0c             	sub    esp,0xc
c00178fa:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00178fd:	e8 7f ff ff ff       	call   c0017881 <i386LoadCoprocessor(void*)>
c0017902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c001790f:	83 c4 08             	add    esp,0x8
c0017912:	5b                   	pop    ebx
c0017913:	c3                   	ret    
c0017914:	83 ec 0c             	sub    esp,0xc
c0017917:	68 e9 24 02 c0       	push   0xc00224e9
c001791c:	e8 e9 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017921:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017929:	83 c4 18             	add    esp,0x18
c001792c:	5b                   	pop    ebx
c001792d:	e9 8a eb ff ff       	jmp    c00164bc <Thr::terminateFromIRQ(int)>

c0017932 <HalInitialiseCoprocessor()>:
c0017932:	83 ec 10             	sub    esp,0x10
c0017935:	6a 00                	push   0x0
c0017937:	68 95 78 01 c0       	push   0xc0017895
c001793c:	6a 07                	push   0x7
c001793e:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c0017948:	e8 bd 51 ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001794d:	e8 ae 70 00 00       	call   c001ea00 <avxDetect>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	85 c0                	test   eax,eax
c0017957:	74 1c                	je     c0017975 <HalInitialiseCoprocessor()+0x43>
c0017959:	c7 05 10 a5 02 c0 2a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea2a
c0017963:	c7 05 0c a5 02 c0 3b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea3b
c001796d:	83 c4 0c             	add    esp,0xc
c0017970:	e9 d7 70 00 00       	jmp    c001ea4c <avxInit>
c0017975:	e8 16 74 00 00       	call   c001ed90 <absolutelyNoChanceInHell>
c001797a:	85 c0                	test   eax,eax
c001797c:	74 1c                	je     c001799a <HalInitialiseCoprocessor()+0x68>
c001797e:	c7 05 10 a5 02 c0 a8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001eda8
c0017988:	c7 05 0c a5 02 c0 b0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edb0
c0017992:	83 c4 0c             	add    esp,0xc
c0017995:	e9 1e 74 00 00       	jmp    c001edb8 <sseInit>
c001799a:	e8 37 74 00 00       	call   c001edd6 <x87Detect>
c001799f:	85 c0                	test   eax,eax
c00179a1:	74 1c                	je     c00179bf <HalInitialiseCoprocessor()+0x8d>
c00179a3:	c7 05 10 a5 02 c0 f1 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edf1
c00179ad:	c7 05 0c a5 02 c0 f8 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edf8
c00179b7:	83 c4 0c             	add    esp,0xc
c00179ba:	e9 40 74 00 00       	jmp    c001edff <x87Init>
c00179bf:	c7 05 10 a5 02 c0 46 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc0017246
c00179c9:	c7 05 0c a5 02 c0 46 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc0017246
c00179d3:	0f 20 c0             	mov    eax,cr0
c00179d6:	83 c8 04             	or     eax,0x4
c00179d9:	0f 22 c0             	mov    cr0,eax
c00179dc:	83 c4 0c             	add    esp,0xc
c00179df:	c3                   	ret    

c00179e0 <HalPanic(char const*)>:
c00179e0:	53                   	push   ebx
c00179e1:	83 ec 10             	sub    esp,0x10
c00179e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179e8:	fa                   	cli    
c00179e9:	53                   	push   ebx
c00179ea:	68 ff 24 02 c0       	push   0xc00224ff
c00179ef:	e8 16 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179f4:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	85 c0                	test   eax,eax
c00179fe:	74 09                	je     c0017a09 <HalPanic(char const*)+0x29>
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	53                   	push   ebx
c0017a04:	ff d0                	call   eax
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a0e:	85 c0                	test   eax,eax
c0017a10:	0f 84 dc 00 00 00    	je     c0017af2 <HalPanic(char const*)+0x112>
c0017a16:	52                   	push   edx
c0017a17:	6a 01                	push   0x1
c0017a19:	6a 0f                	push   0xf
c0017a1b:	50                   	push   eax
c0017a1c:	e8 a9 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a21:	59                   	pop    ecx
c0017a22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a28:	e8 8d 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017a2d:	58                   	pop    eax
c0017a2e:	5a                   	pop    edx
c0017a2f:	68 44 08 02 c0       	push   0xc0020844
c0017a34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a3a:	e8 c3 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017a3f:	83 c4 0c             	add    esp,0xc
c0017a42:	6a 01                	push   0x1
c0017a44:	6a 0f                	push   0xf
c0017a46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a4c:	e8 79 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a51:	59                   	pop    ecx
c0017a52:	58                   	pop    eax
c0017a53:	68 18 25 02 c0       	push   0xc0022518
c0017a58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a5e:	e8 49 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a63:	83 c4 0c             	add    esp,0xc
c0017a66:	6a 0f                	push   0xf
c0017a68:	6a 01                	push   0x1
c0017a6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a70:	e8 55 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a75:	58                   	pop    eax
c0017a76:	5a                   	pop    edx
c0017a77:	68 21 25 02 c0       	push   0xc0022521
c0017a7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a82:	e8 25 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a87:	83 c4 0c             	add    esp,0xc
c0017a8a:	6a 01                	push   0x1
c0017a8c:	6a 0f                	push   0xf
c0017a8e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a94:	e8 31 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a99:	59                   	pop    ecx
c0017a9a:	58                   	pop    eax
c0017a9b:	68 65 25 02 c0       	push   0xc0022565
c0017aa0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aa6:	e8 01 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aab:	58                   	pop    eax
c0017aac:	5a                   	pop    edx
c0017aad:	68 2e 25 02 c0       	push   0xc002252e
c0017ab2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ab8:	e8 ef 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017abd:	59                   	pop    ecx
c0017abe:	58                   	pop    eax
c0017abf:	68 68 25 02 c0       	push   0xc0022568
c0017ac4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aca:	e8 dd 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017acf:	58                   	pop    eax
c0017ad0:	5a                   	pop    edx
c0017ad1:	53                   	push   ebx
c0017ad2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ad8:	e8 cf 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017add:	59                   	pop    ecx
c0017ade:	5b                   	pop    ebx
c0017adf:	68 65 25 02 c0       	push   0xc0022565
c0017ae4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aea:	e8 bd 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	eb fe                	jmp    c0017af2 <HalPanic(char const*)+0x112>

c0017af4 <HalQueryPerformanceCounter()>:
c0017af4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017af9:	31 d2                	xor    edx,edx
c0017afb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b01:	31 c0                	xor    eax,eax
c0017b03:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b0a:	74 02                	je     c0017b0e <HalQueryPerformanceCounter()+0x1a>
c0017b0c:	0f 31                	rdtsc  
c0017b0e:	c3                   	ret    

c0017b0f <HalInitialise()>:
c0017b0f:	53                   	push   ebx
c0017b10:	83 ec 08             	sub    esp,0x8
c0017b13:	e8 29 52 ff ff       	call   c000cd41 <setupINTS()>
c0017b18:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b1d:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017b24:	75 0f                	jne    c0017b35 <HalInitialise()+0x26>
c0017b26:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b2c:	83 e2 fe             	and    edx,0xfffffffe
c0017b2f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b35:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017b3c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b42:	83 e2 fe             	and    edx,0xfffffffe
c0017b45:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b4b:	e8 a0 02 00 00       	call   c0017df0 <picOpen()>
c0017b50:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017b57:	74 0a                	je     c0017b63 <HalInitialise()+0x54>
c0017b59:	e8 e2 01 00 00       	call   c0017d40 <picDisable()>
c0017b5e:	e8 0d 68 00 00       	call   c001e370 <apicOpen()>
c0017b63:	50                   	push   eax
c0017b64:	bb 0f 00 00 00       	mov    ebx,0xf
c0017b69:	6a 00                	push   0x0
c0017b6b:	68 b6 77 01 c0       	push   0xc00177b6
c0017b70:	6a 00                	push   0x0
c0017b72:	e8 93 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b77:	83 c4 0c             	add    esp,0xc
c0017b7a:	6a 00                	push   0x0
c0017b7c:	68 b6 77 01 c0       	push   0xc00177b6
c0017b81:	6a 01                	push   0x1
c0017b83:	e8 82 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b88:	83 c4 0c             	add    esp,0xc
c0017b8b:	6a 00                	push   0x0
c0017b8d:	68 47 72 01 c0       	push   0xc0017247
c0017b92:	6a 02                	push   0x2
c0017b94:	e8 71 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b99:	83 c4 0c             	add    esp,0xc
c0017b9c:	6a 00                	push   0x0
c0017b9e:	68 b6 77 01 c0       	push   0xc00177b6
c0017ba3:	6a 03                	push   0x3
c0017ba5:	e8 60 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017baa:	83 c4 0c             	add    esp,0xc
c0017bad:	6a 00                	push   0x0
c0017baf:	68 b6 77 01 c0       	push   0xc00177b6
c0017bb4:	6a 04                	push   0x4
c0017bb6:	e8 4f 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bbb:	83 c4 0c             	add    esp,0xc
c0017bbe:	6a 00                	push   0x0
c0017bc0:	68 b6 77 01 c0       	push   0xc00177b6
c0017bc5:	6a 05                	push   0x5
c0017bc7:	e8 3e 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bcc:	83 c4 0c             	add    esp,0xc
c0017bcf:	6a 00                	push   0x0
c0017bd1:	68 ea 77 01 c0       	push   0xc00177ea
c0017bd6:	6a 06                	push   0x6
c0017bd8:	e8 2d 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bdd:	83 c4 0c             	add    esp,0xc
c0017be0:	6a 00                	push   0x0
c0017be2:	68 60 72 01 c0       	push   0xc0017260
c0017be7:	6a 08                	push   0x8
c0017be9:	e8 1c 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bee:	83 c4 0c             	add    esp,0xc
c0017bf1:	6a 00                	push   0x0
c0017bf3:	68 b6 77 01 c0       	push   0xc00177b6
c0017bf8:	6a 09                	push   0x9
c0017bfa:	e8 0b 4f ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bff:	83 c4 0c             	add    esp,0xc
c0017c02:	6a 00                	push   0x0
c0017c04:	68 b6 77 01 c0       	push   0xc00177b6
c0017c09:	6a 0a                	push   0xa
c0017c0b:	e8 fa 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c10:	83 c4 0c             	add    esp,0xc
c0017c13:	6a 00                	push   0x0
c0017c15:	68 b6 77 01 c0       	push   0xc00177b6
c0017c1a:	6a 0b                	push   0xb
c0017c1c:	e8 e9 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c21:	83 c4 0c             	add    esp,0xc
c0017c24:	6a 00                	push   0x0
c0017c26:	68 c6 76 01 c0       	push   0xc00176c6
c0017c2b:	6a 0d                	push   0xd
c0017c2d:	e8 d8 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c32:	83 c4 0c             	add    esp,0xc
c0017c35:	6a 00                	push   0x0
c0017c37:	68 2d 77 01 c0       	push   0xc001772d
c0017c3c:	6a 0e                	push   0xe
c0017c3e:	e8 c7 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	50                   	push   eax
c0017c47:	6a 00                	push   0x0
c0017c49:	68 b6 77 01 c0       	push   0xc00177b6
c0017c4e:	53                   	push   ebx
c0017c4f:	43                   	inc    ebx
c0017c50:	e8 b5 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c55:	83 c4 10             	add    esp,0x10
c0017c58:	83 fb 1e             	cmp    ebx,0x1e
c0017c5b:	75 e9                	jne    c0017c46 <HalInitialise()+0x137>
c0017c5d:	50                   	push   eax
c0017c5e:	6a 00                	push   0x0
c0017c60:	68 47 24 01 c0       	push   0xc0012447
c0017c65:	6a 60                	push   0x60
c0017c67:	e8 9e 4e ff ff       	call   c000cb0a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c6c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c71:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017c7b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017c82:	e8 4c fe fe ff       	call   c0007ad3 <malloc>
c0017c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c8a:	89 c3                	mov    ebx,eax
c0017c8c:	e8 37 09 00 00       	call   c00185c8 <RTC::RTC()>
c0017c91:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017c9b:	5a                   	pop    edx
c0017c9c:	59                   	pop    ecx
c0017c9d:	53                   	push   ebx
c0017c9e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ca4:	e8 2b 49 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c0017ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cab:	6a 00                	push   0x0
c0017cad:	6a 00                	push   0x0
c0017caf:	6a 00                	push   0x0
c0017cb1:	53                   	push   ebx
c0017cb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cb5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cba:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017cc0:	83 c4 28             	add    esp,0x28
c0017cc3:	5b                   	pop    ebx
c0017cc4:	c3                   	ret    

c0017cc5 <HalMakeBeep(int)>:
c0017cc5:	53                   	push   ebx
c0017cc6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017cca:	85 db                	test   ebx,ebx
c0017ccc:	75 07                	jne    c0017cd5 <HalMakeBeep(int)+0x10>
c0017cce:	e4 61                	in     al,0x61
c0017cd0:	83 e0 fc             	and    eax,0xfffffffc
c0017cd3:	eb 26                	jmp    c0017cfb <HalMakeBeep(int)+0x36>
c0017cd5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017cda:	99                   	cdq    
c0017cdb:	f7 fb                	idiv   ebx
c0017cdd:	89 c1                	mov    ecx,eax
c0017cdf:	b0 b6                	mov    al,0xb6
c0017ce1:	e6 43                	out    0x43,al
c0017ce3:	88 c8                	mov    al,cl
c0017ce5:	e6 42                	out    0x42,al
c0017ce7:	89 c8                	mov    eax,ecx
c0017ce9:	c1 e8 08             	shr    eax,0x8
c0017cec:	e6 42                	out    0x42,al
c0017cee:	e4 61                	in     al,0x61
c0017cf0:	89 c2                	mov    edx,eax
c0017cf2:	83 ca 03             	or     edx,0x3
c0017cf5:	38 d0                	cmp    al,dl
c0017cf7:	74 04                	je     c0017cfd <HalMakeBeep(int)+0x38>
c0017cf9:	88 d0                	mov    al,dl
c0017cfb:	e6 61                	out    0x61,al
c0017cfd:	5b                   	pop    ebx
c0017cfe:	c3                   	ret    

c0017cff <HalGetRand()>:
c0017cff:	31 c0                	xor    eax,eax
c0017d01:	c3                   	ret    

c0017d02 <HalEndOfInterrupt(int)>:
c0017d02:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d09:	74 23                	je     c0017d2e <HalEndOfInterrupt(int)+0x2c>
c0017d0b:	83 ec 14             	sub    esp,0x14
c0017d0e:	6a 1b                	push   0x1b
c0017d10:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d16:	e8 c9 f3 fe ff       	call   c00070e4 <Computer::rdmsr(unsigned int)>
c0017d1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d20:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017d2a:	83 c4 1c             	add    esp,0x1c
c0017d2d:	c3                   	ret    
c0017d2e:	e9 41 02 00 00       	jmp    c0017f74 <picEOI(int)>

c0017d33 <HalRestart()>:
c0017d33:	c3                   	ret    

c0017d34 <HalShutdown()>:
c0017d34:	c3                   	ret    

c0017d35 <HalSleep()>:
c0017d35:	c3                   	ret    
c0017d36:	66 90                	xchg   ax,ax

c0017d38 <picIoWait()>:
c0017d38:	eb 00                	jmp    c0017d3a <picIoWait()+0x2>
c0017d3a:	eb 00                	jmp    c0017d3c <picIoWait()+0x4>
c0017d3c:	90                   	nop
c0017d3d:	c3                   	ret    
c0017d3e:	66 90                	xchg   ax,ax

c0017d40 <picDisable()>:
c0017d40:	83 ec 10             	sub    esp,0x10
c0017d43:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017d4a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017d4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017d53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017d58:	ee                   	out    dx,al
c0017d59:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017d60:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017d65:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017d69:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017d6e:	ee                   	out    dx,al
c0017d6f:	90                   	nop
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	c3                   	ret    

c0017d74 <picGetIRQReg(int)>:
c0017d74:	83 ec 10             	sub    esp,0x10
c0017d77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d7b:	0f b6 c0             	movzx  eax,al
c0017d7e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017d85:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017d89:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017d8d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017d92:	ee                   	out    dx,al
c0017d93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d97:	0f b6 c0             	movzx  eax,al
c0017d9a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017da1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017da5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017da9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017dae:	ee                   	out    dx,al
c0017daf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017db6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017dbb:	89 c2                	mov    edx,eax
c0017dbd:	ec                   	in     al,dx
c0017dbe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017dc2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dc6:	0f b6 c0             	movzx  eax,al
c0017dc9:	c1 e0 08             	shl    eax,0x8
c0017dcc:	89 c1                	mov    ecx,eax
c0017dce:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017dd5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017dda:	89 c2                	mov    edx,eax
c0017ddc:	ec                   	in     al,dx
c0017ddd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017de1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017de5:	0f b6 c0             	movzx  eax,al
c0017de8:	09 c8                	or     eax,ecx
c0017dea:	83 c4 10             	add    esp,0x10
c0017ded:	c3                   	ret    
c0017dee:	66 90                	xchg   ax,ax

c0017df0 <picOpen()>:
c0017df0:	83 ec 50             	sub    esp,0x50
c0017df3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017dfa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017dff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e07:	ee                   	out    dx,al
c0017e08:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e14:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e1c:	ee                   	out    dx,al
c0017e1d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e25:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017e2d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e38:	89 c2                	mov    edx,eax
c0017e3a:	ec                   	in     al,dx
c0017e3b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017e3f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e43:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017e47:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017e4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e52:	89 c2                	mov    edx,eax
c0017e54:	ec                   	in     al,dx
c0017e55:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e5d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017e61:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017e68:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017e6d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017e71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e75:	ee                   	out    dx,al
c0017e76:	e8 bd fe ff ff       	call   c0017d38 <picIoWait()>
c0017e7b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017e82:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017e87:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017e8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e8f:	ee                   	out    dx,al
c0017e90:	e8 a3 fe ff ff       	call   c0017d38 <picIoWait()>
c0017e95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017e99:	0f b6 c0             	movzx  eax,al
c0017e9c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017ea3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017ea7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017eab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eaf:	ee                   	out    dx,al
c0017eb0:	e8 83 fe ff ff       	call   c0017d38 <picIoWait()>
c0017eb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017eb9:	0f b6 c0             	movzx  eax,al
c0017ebc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017ec3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017ec7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017ecb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ecf:	ee                   	out    dx,al
c0017ed0:	e8 63 fe ff ff       	call   c0017d38 <picIoWait()>
c0017ed5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017edc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017ee1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017ee5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ee9:	ee                   	out    dx,al
c0017eea:	e8 49 fe ff ff       	call   c0017d38 <picIoWait()>
c0017eef:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017ef6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017efb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017eff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f03:	ee                   	out    dx,al
c0017f04:	e8 2f fe ff ff       	call   c0017d38 <picIoWait()>
c0017f09:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f10:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f15:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f1d:	ee                   	out    dx,al
c0017f1e:	e8 15 fe ff ff       	call   c0017d38 <picIoWait()>
c0017f23:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017f2a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017f2f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017f33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017f37:	ee                   	out    dx,al
c0017f38:	e8 fb fd ff ff       	call   c0017d38 <picIoWait()>
c0017f3d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017f42:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017f49:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017f4d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017f51:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f55:	ee                   	out    dx,al
c0017f56:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017f5b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017f62:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017f66:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017f6a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017f6e:	ee                   	out    dx,al
c0017f6f:	90                   	nop
c0017f70:	83 c4 50             	add    esp,0x50
c0017f73:	c3                   	ret    

c0017f74 <picEOI(int)>:
c0017f74:	83 ec 10             	sub    esp,0x10
c0017f77:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017f7c:	75 1e                	jne    c0017f9c <picEOI(int)+0x28>
c0017f7e:	6a 0b                	push   0xb
c0017f80:	e8 ef fd ff ff       	call   c0017d74 <picGetIRQReg(int)>
c0017f85:	83 c4 04             	add    esp,0x4
c0017f88:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017f8d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017f92:	25 80 00 00 00       	and    eax,0x80
c0017f97:	74 73                	je     c001800c <picEOI(int)+0x98>
c0017f99:	8d 76 00             	lea    esi,[esi+0x0]
c0017f9c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017fa1:	75 31                	jne    c0017fd4 <picEOI(int)+0x60>
c0017fa3:	6a 0b                	push   0xb
c0017fa5:	e8 ca fd ff ff       	call   c0017d74 <picGetIRQReg(int)>
c0017faa:	83 c4 04             	add    esp,0x4
c0017fad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fb6:	98                   	cwde   
c0017fb7:	85 c0                	test   eax,eax
c0017fb9:	78 19                	js     c0017fd4 <picEOI(int)+0x60>
c0017fbb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017fc2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017fc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017fd0:	ee                   	out    dx,al
c0017fd1:	eb 3d                	jmp    c0018010 <picEOI(int)+0x9c>
c0017fd3:	90                   	nop
c0017fd4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017fd9:	7e 19                	jle    c0017ff4 <picEOI(int)+0x80>
c0017fdb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017fe2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017fe7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017feb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017ff0:	ee                   	out    dx,al
c0017ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ff4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017ffb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018000:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018004:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018009:	ee                   	out    dx,al
c001800a:	eb 04                	jmp    c0018010 <picEOI(int)+0x9c>
c001800c:	90                   	nop
c001800d:	8d 76 00             	lea    esi,[esi+0x0]
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	c3                   	ret    

c0018014 <RTC::open(int, int, void*)>:
c0018014:	31 c0                	xor    eax,eax
c0018016:	c3                   	ret    
c0018017:	90                   	nop

c0018018 <RTC::close(int, int, void*)>:
c0018018:	31 c0                	xor    eax,eax
c001801a:	c3                   	ret    
c001801b:	90                   	nop

c001801c <RTC::timeInSecondsUTC()>:
c001801c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018020:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018026:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001802c:	c3                   	ret    
c001802d:	90                   	nop

c001802e <RTC::timeInDatetimeUTC()>:
c001802e:	53                   	push   ebx
c001802f:	83 ec 14             	sub    esp,0x14
c0018032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018036:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001803a:	8b 10                	mov    edx,DWORD PTR [eax]
c001803c:	50                   	push   eax
c001803d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018040:	83 c4 0c             	add    esp,0xc
c0018043:	52                   	push   edx
c0018044:	50                   	push   eax
c0018045:	53                   	push   ebx
c0018046:	e8 fd 42 ff ff       	call   c000c348 <secondsToDatetime(unsigned long long)>
c001804b:	89 d8                	mov    eax,ebx
c001804d:	83 c4 14             	add    esp,0x14
c0018050:	5b                   	pop    ebx
c0018051:	c2 04 00             	ret    0x4

c0018054 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018054:	56                   	push   esi
c0018055:	53                   	push   ebx
c0018056:	83 ec 14             	sub    esp,0x14
c0018059:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001805d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001805f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018062:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018066:	52                   	push   edx
c0018067:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001806b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001806f:	50                   	push   eax
c0018070:	e8 d3 42 ff ff       	call   c000c348 <secondsToDatetime(unsigned long long)>
c0018075:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001807d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018081:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018085:	89 f0                	mov    eax,esi
c0018087:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001808b:	83 c4 20             	add    esp,0x20
c001808e:	5b                   	pop    ebx
c001808f:	5e                   	pop    esi
c0018090:	ff e0                	jmp    eax

c0018092 <RTC::~RTC()>:
c0018092:	83 ec 0c             	sub    esp,0xc
c0018095:	ba 04 26 02 c0       	mov    edx,0xc0022604
c001809a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809e:	89 10                	mov    DWORD PTR [eax],edx
c00180a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	50                   	push   eax
c00180a8:	e8 27 40 ff ff       	call   c000c0d4 <Clock::~Clock()>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	90                   	nop
c00180b1:	83 c4 0c             	add    esp,0xc
c00180b4:	c3                   	ret    
c00180b5:	90                   	nop

c00180b6 <RTC::~RTC()>:
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	83 ec 0c             	sub    esp,0xc
c00180bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180c0:	e8 cd ff ff ff       	call   c0018092 <RTC::~RTC()>
c00180c5:	83 c4 10             	add    esp,0x10
c00180c8:	83 ec 08             	sub    esp,0x8
c00180cb:	68 60 01 00 00       	push   0x160
c00180d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180d4:	e8 33 27 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	83 c4 0c             	add    esp,0xc
c00180df:	c3                   	ret    

c00180e0 <RTC::get_update_in_progress_flag()>:
c00180e0:	83 ec 14             	sub    esp,0x14
c00180e3:	6a 0a                	push   0xa
c00180e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00180eb:	e8 ac f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c00180f0:	83 c4 1c             	add    esp,0x1c
c00180f3:	0f b6 c0             	movzx  eax,al
c00180f6:	c1 e8 07             	shr    eax,0x7
c00180f9:	c3                   	ret    

c00180fa <RTC::completeRTCRefresh()>:
c00180fa:	55                   	push   ebp
c00180fb:	57                   	push   edi
c00180fc:	56                   	push   esi
c00180fd:	53                   	push   ebx
c00180fe:	83 ec 3c             	sub    esp,0x3c
c0018101:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018107:	83 ec 0c             	sub    esp,0xc
c001810a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001810e:	e8 cd ff ff ff       	call   c00180e0 <RTC::get_update_in_progress_flag()>
c0018113:	83 c4 10             	add    esp,0x10
c0018116:	84 c0                	test   al,al
c0018118:	74 0e                	je     c0018128 <RTC::completeRTCRefresh()+0x2e>
c001811a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018120:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018126:	73 df                	jae    c0018107 <RTC::completeRTCRefresh()+0xd>
c0018128:	50                   	push   eax
c0018129:	50                   	push   eax
c001812a:	6a 00                	push   0x0
c001812c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018132:	e8 65 f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018137:	89 c7                	mov    edi,eax
c0018139:	58                   	pop    eax
c001813a:	5a                   	pop    edx
c001813b:	6a 02                	push   0x2
c001813d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018143:	e8 54 f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018148:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001814c:	59                   	pop    ecx
c001814d:	5b                   	pop    ebx
c001814e:	6a 04                	push   0x4
c0018150:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018156:	e8 41 f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c001815b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001815f:	5e                   	pop    esi
c0018160:	5d                   	pop    ebp
c0018161:	6a 07                	push   0x7
c0018163:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018169:	e8 2e f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c001816e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018172:	58                   	pop    eax
c0018173:	5a                   	pop    edx
c0018174:	6a 08                	push   0x8
c0018176:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001817c:	e8 1b f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018181:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018185:	59                   	pop    ecx
c0018186:	5b                   	pop    ebx
c0018187:	6a 09                	push   0x9
c0018189:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001818f:	e8 08 f0 fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018194:	0f b6 c0             	movzx  eax,al
c0018197:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c00181a4:	83 ec 0c             	sub    esp,0xc
c00181a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00181ab:	e8 30 ff ff ff       	call   c00180e0 <RTC::get_update_in_progress_flag()>
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	84 c0                	test   al,al
c00181b5:	74 0e                	je     c00181c5 <RTC::completeRTCRefresh()+0xcb>
c00181b7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181bd:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c00181c3:	73 df                	jae    c00181a4 <RTC::completeRTCRefresh()+0xaa>
c00181c5:	51                   	push   ecx
c00181c6:	51                   	push   ecx
c00181c7:	6a 00                	push   0x0
c00181c9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181cf:	e8 c8 ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c00181d4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00181d8:	5b                   	pop    ebx
c00181d9:	5e                   	pop    esi
c00181da:	6a 02                	push   0x2
c00181dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e2:	e8 b5 ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c00181e7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00181eb:	5d                   	pop    ebp
c00181ec:	58                   	pop    eax
c00181ed:	6a 04                	push   0x4
c00181ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f5:	e8 a2 ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c00181fa:	88 c3                	mov    bl,al
c00181fc:	58                   	pop    eax
c00181fd:	5a                   	pop    edx
c00181fe:	6a 07                	push   0x7
c0018200:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018206:	e8 91 ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c001820b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001820f:	59                   	pop    ecx
c0018210:	5e                   	pop    esi
c0018211:	6a 08                	push   0x8
c0018213:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018219:	e8 7e ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c001821e:	5d                   	pop    ebp
c001821f:	89 c6                	mov    esi,eax
c0018221:	58                   	pop    eax
c0018222:	6a 09                	push   0x9
c0018224:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822a:	e8 6d ef fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c001822f:	89 f9                	mov    ecx,edi
c0018231:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	0f b6 e8             	movzx  ebp,al
c001823b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018240:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018248:	74 27                	je     c0018271 <RTC::completeRTCRefresh()+0x177>
c001824a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001824e:	89 f0                	mov    eax,esi
c0018250:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018254:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018258:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001825c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018260:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018264:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018268:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001826c:	e9 2d ff ff ff       	jmp    c001819e <RTC::completeRTCRefresh()+0xa4>
c0018271:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018276:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001827a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001827e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018282:	75 c6                	jne    c001824a <RTC::completeRTCRefresh()+0x150>
c0018284:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018289:	89 f1                	mov    ecx,esi
c001828b:	0f b6 fb             	movzx  edi,bl
c001828e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018292:	0f b6 c9             	movzx  ecx,cl
c0018295:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018299:	89 f1                	mov    ecx,esi
c001829b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001829f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182a3:	0f 94 c2             	sete   dl
c00182a6:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00182aa:	0f 94 c0             	sete   al
c00182ad:	21 d0                	and    eax,edx
c00182af:	31 d2                	xor    edx,edx
c00182b1:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00182b5:	0f 94 c2             	sete   dl
c00182b8:	85 c2                	test   edx,eax
c00182ba:	74 8e                	je     c001824a <RTC::completeRTCRefresh()+0x150>
c00182bc:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00182c0:	75 88                	jne    c001824a <RTC::completeRTCRefresh()+0x150>
c00182c2:	52                   	push   edx
c00182c3:	52                   	push   edx
c00182c4:	6a 0b                	push   0xb
c00182c6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182cc:	e8 cb ee fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	a8 04                	test   al,0x4
c00182d6:	75 7a                	jne    c0018352 <RTC::completeRTCRefresh()+0x258>
c00182d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182dc:	c1 ef 04             	shr    edi,0x4
c00182df:	83 e6 0f             	and    esi,0xf
c00182e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182e6:	c1 ed 04             	shr    ebp,0x4
c00182e9:	6b ed 0a             	imul   ebp,ebp,0xa
c00182ec:	c1 ea 04             	shr    edx,0x4
c00182ef:	6b d2 0a             	imul   edx,edx,0xa
c00182f2:	83 e1 0f             	and    ecx,0xf
c00182f5:	01 d1                	add    ecx,edx
c00182f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00182fb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00182ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018303:	c1 ea 04             	shr    edx,0x4
c0018306:	6b d2 0a             	imul   edx,edx,0xa
c0018309:	83 e1 0f             	and    ecx,0xf
c001830c:	01 d1                	add    ecx,edx
c001830e:	89 fa                	mov    edx,edi
c0018310:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018314:	83 e2 07             	and    edx,0x7
c0018317:	89 d9                	mov    ecx,ebx
c0018319:	6b d2 0a             	imul   edx,edx,0xa
c001831c:	83 e1 0f             	and    ecx,0xf
c001831f:	83 e3 80             	and    ebx,0xffffff80
c0018322:	01 d1                	add    ecx,edx
c0018324:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018328:	09 cb                	or     ebx,ecx
c001832a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001832e:	c1 ea 04             	shr    edx,0x4
c0018331:	6b d2 0a             	imul   edx,edx,0xa
c0018334:	83 e1 0f             	and    ecx,0xf
c0018337:	01 d1                	add    ecx,edx
c0018339:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001833d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018341:	c1 ea 04             	shr    edx,0x4
c0018344:	6b d2 0a             	imul   edx,edx,0xa
c0018347:	01 d6                	add    esi,edx
c0018349:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001834d:	83 e2 0f             	and    edx,0xf
c0018350:	01 d5                	add    ebp,edx
c0018352:	a8 02                	test   al,0x2
c0018354:	75 15                	jne    c001836b <RTC::completeRTCRefresh()+0x271>
c0018356:	f6 c3 80             	test   bl,0x80
c0018359:	74 10                	je     c001836b <RTC::completeRTCRefresh()+0x271>
c001835b:	83 e3 7f             	and    ebx,0x7f
c001835e:	b9 18 00 00 00       	mov    ecx,0x18
c0018363:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018366:	99                   	cdq    
c0018367:	f7 f9                	idiv   ecx
c0018369:	88 d3                	mov    bl,dl
c001836b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018371:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018377:	77 06                	ja     c001837f <RTC::completeRTCRefresh()+0x285>
c0018379:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001837f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018384:	31 c9                	xor    ecx,ecx
c0018386:	31 d2                	xor    edx,edx
c0018388:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001838c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018390:	89 cd                	mov    ebp,ecx
c0018392:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018396:	c1 e7 10             	shl    edi,0x10
c0018399:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001839f:	c1 e0 10             	shl    eax,0x10
c00183a2:	09 c5                	or     ebp,eax
c00183a4:	89 e9                	mov    ecx,ebp
c00183a6:	0f b7 c2             	movzx  eax,dx
c00183a9:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00183ad:	09 f8                	or     eax,edi
c00183af:	89 c2                	mov    edx,eax
c00183b1:	50                   	push   eax
c00183b2:	50                   	push   eax
c00183b3:	88 d9                	mov    cl,bl
c00183b5:	51                   	push   ecx
c00183b6:	52                   	push   edx
c00183b7:	e8 07 3e ff ff       	call   c000c1c3 <datetimeToSeconds(datetime_t)>
c00183bc:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00183c0:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00183c6:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00183cc:	83 c4 4c             	add    esp,0x4c
c00183cf:	5b                   	pop    ebx
c00183d0:	5e                   	pop    esi
c00183d1:	5f                   	pop    edi
c00183d2:	5d                   	pop    ebp
c00183d3:	c3                   	ret    

c00183d4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00183d4:	55                   	push   ebp
c00183d5:	57                   	push   edi
c00183d6:	56                   	push   esi
c00183d7:	53                   	push   ebx
c00183d8:	83 ec 30             	sub    esp,0x30
c00183db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00183df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00183e3:	6a 00                	push   0x0
c00183e5:	6a 00                	push   0x0
c00183e7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ed:	e8 c2 ee fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00183f2:	83 c4 0c             	add    esp,0xc
c00183f5:	6a 00                	push   0x0
c00183f7:	6a 02                	push   0x2
c00183f9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ff:	e8 b0 ee fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018404:	89 f8                	mov    eax,edi
c0018406:	89 f9                	mov    ecx,edi
c0018408:	0f b6 c4             	movzx  eax,ah
c001840b:	31 d2                	xor    edx,edx
c001840d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018411:	c1 e9 10             	shr    ecx,0x10
c0018414:	89 f0                	mov    eax,esi
c0018416:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001841a:	89 f0                	mov    eax,esi
c001841c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018420:	0f b6 c4             	movzx  eax,ah
c0018423:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018427:	89 f0                	mov    eax,esi
c0018429:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001842d:	c1 e8 10             	shr    eax,0x10
c0018430:	b9 64 00 00 00       	mov    ecx,0x64
c0018435:	f7 f1                	div    ecx
c0018437:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001843b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001843f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018443:	59                   	pop    ecx
c0018444:	5b                   	pop    ebx
c0018445:	89 fb                	mov    ebx,edi
c0018447:	6a 0b                	push   0xb
c0018449:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844f:	e8 48 ed fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	a8 04                	test   al,0x4
c0018459:	89 c5                	mov    ebp,eax
c001845b:	75 6e                	jne    c00184cb <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001845d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018461:	31 d2                	xor    edx,edx
c0018463:	0f b6 c1             	movzx  eax,cl
c0018466:	b9 0a 00 00 00       	mov    ecx,0xa
c001846b:	f7 f1                	div    ecx
c001846d:	c1 e0 04             	shl    eax,0x4
c0018470:	09 d0                	or     eax,edx
c0018472:	31 d2                	xor    edx,edx
c0018474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018478:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001847d:	f7 f1                	div    ecx
c001847f:	c1 e0 04             	shl    eax,0x4
c0018482:	09 d0                	or     eax,edx
c0018484:	31 d2                	xor    edx,edx
c0018486:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001848a:	0f b6 c3             	movzx  eax,bl
c001848d:	f7 f1                	div    ecx
c001848f:	c1 e0 04             	shl    eax,0x4
c0018492:	09 d0                	or     eax,edx
c0018494:	31 d2                	xor    edx,edx
c0018496:	89 c3                	mov    ebx,eax
c0018498:	89 f0                	mov    eax,esi
c001849a:	0f b6 c0             	movzx  eax,al
c001849d:	f7 f1                	div    ecx
c001849f:	c1 e0 04             	shl    eax,0x4
c00184a2:	09 d0                	or     eax,edx
c00184a4:	31 d2                	xor    edx,edx
c00184a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00184aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184af:	f7 f1                	div    ecx
c00184b1:	c1 e0 04             	shl    eax,0x4
c00184b4:	09 d0                	or     eax,edx
c00184b6:	31 d2                	xor    edx,edx
c00184b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184c0:	f7 f1                	div    ecx
c00184c2:	c1 e0 04             	shl    eax,0x4
c00184c5:	09 d0                	or     eax,edx
c00184c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184cb:	83 e5 02             	and    ebp,0x2
c00184ce:	75 1e                	jne    c00184ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184d0:	0f b6 c3             	movzx  eax,bl
c00184d3:	83 f8 0b             	cmp    eax,0xb
c00184d6:	76 10                	jbe    c00184e8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00184d8:	8d 53 f4             	lea    edx,[ebx-0xc]
c00184db:	84 d2                	test   dl,dl
c00184dd:	88 d3                	mov    bl,dl
c00184df:	75 02                	jne    c00184e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00184e1:	b3 0c                	mov    bl,0xc
c00184e3:	83 cb 80             	or     ebx,0xffffff80
c00184e6:	eb 06                	jmp    c00184ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184e8:	85 c0                	test   eax,eax
c00184ea:	75 02                	jne    c00184ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184ec:	b3 0c                	mov    bl,0xc
c00184ee:	50                   	push   eax
c00184ef:	0f b6 db             	movzx  ebx,bl
c00184f2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00184f7:	52                   	push   edx
c00184f8:	6a 00                	push   0x0
c00184fa:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018500:	e8 af ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018505:	83 c4 0c             	add    esp,0xc
c0018508:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001850d:	50                   	push   eax
c001850e:	6a 02                	push   0x2
c0018510:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018516:	e8 99 ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001851b:	83 c4 0c             	add    esp,0xc
c001851e:	53                   	push   ebx
c001851f:	6a 04                	push   0x4
c0018521:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018527:	e8 88 ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001852c:	83 c4 0c             	add    esp,0xc
c001852f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018534:	52                   	push   edx
c0018535:	6a 07                	push   0x7
c0018537:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001853d:	e8 72 ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018542:	83 c4 0c             	add    esp,0xc
c0018545:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001854a:	50                   	push   eax
c001854b:	6a 08                	push   0x8
c001854d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018553:	e8 5c ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018558:	83 c4 0c             	add    esp,0xc
c001855b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018560:	55                   	push   ebp
c0018561:	6a 09                	push   0x9
c0018563:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018569:	e8 46 ed fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001856e:	5a                   	pop    edx
c001856f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018573:	e8 82 fb ff ff       	call   c00180fa <RTC::completeRTCRefresh()>
c0018578:	83 c4 3c             	add    esp,0x3c
c001857b:	b0 01                	mov    al,0x1
c001857d:	5b                   	pop    ebx
c001857e:	5e                   	pop    esi
c001857f:	5f                   	pop    edi
c0018580:	5d                   	pop    ebp
c0018581:	c3                   	ret    

c0018582 <rtcIRQHandler(regs*, void*)>:
c0018582:	53                   	push   ebx
c0018583:	83 ec 10             	sub    esp,0x10
c0018586:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001858a:	6a 0c                	push   0xc
c001858c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018592:	e8 05 ec fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	a8 80                	test   al,0x80
c001859c:	74 24                	je     c00185c2 <rtcIRQHandler(regs*, void*)+0x40>
c001859e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00185a5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00185ac:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c00185b3:	75 0d                	jne    c00185c2 <rtcIRQHandler(regs*, void*)+0x40>
c00185b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185b9:	83 c4 08             	add    esp,0x8
c00185bc:	5b                   	pop    ebx
c00185bd:	e9 38 fb ff ff       	jmp    c00180fa <RTC::completeRTCRefresh()>
c00185c2:	83 c4 08             	add    esp,0x8
c00185c5:	5b                   	pop    ebx
c00185c6:	c3                   	ret    
c00185c7:	90                   	nop

c00185c8 <RTC::RTC()>:
c00185c8:	83 ec 1c             	sub    esp,0x1c
c00185cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185cf:	83 ec 08             	sub    esp,0x8
c00185d2:	68 e7 25 02 c0       	push   0xc00225e7
c00185d7:	50                   	push   eax
c00185d8:	e8 c1 3a ff ff       	call   c000c09e <Clock::Clock(char const*)>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	ba 04 26 02 c0       	mov    edx,0xc0022604
c00185e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e9:	89 10                	mov    DWORD PTR [eax],edx
c00185eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ef:	83 ec 0c             	sub    esp,0xc
c00185f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185f6:	6a 01                	push   0x1
c00185f8:	68 82 85 01 c0       	push   0xc0018582
c00185fd:	6a 08                	push   0x8
c00185ff:	50                   	push   eax
c0018600:	e8 7b 3f ff ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018605:	83 c4 20             	add    esp,0x20
c0018608:	89 c2                	mov    edx,eax
c001860a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001860e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018614:	fa                   	cli    
c0018615:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001861a:	83 c0 01             	add    eax,0x1
c001861d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018622:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018627:	83 ec 08             	sub    esp,0x8
c001862a:	6a 0b                	push   0xb
c001862c:	50                   	push   eax
c001862d:	e8 6a eb fe ff       	call   c000719c <Computer::readCMOS(unsigned char)>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018639:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001863e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018642:	83 ca 10             	or     edx,0x10
c0018645:	0f b6 d2             	movzx  edx,dl
c0018648:	83 ec 04             	sub    esp,0x4
c001864b:	52                   	push   edx
c001864c:	6a 0b                	push   0xb
c001864e:	50                   	push   eax
c001864f:	e8 60 ec fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	83 ec 0c             	sub    esp,0xc
c001865a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001865e:	e8 97 fa ff ff       	call   c00180fa <RTC::completeRTCRefresh()>
c0018663:	83 c4 10             	add    esp,0x10
c0018666:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001866b:	83 e8 01             	sub    eax,0x1
c001866e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018673:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0018678:	85 c0                	test   eax,eax
c001867a:	75 01                	jne    c001867d <RTC::RTC()+0xb5>
c001867c:	fb                   	sti    
c001867d:	90                   	nop
c001867e:	83 c4 1c             	add    esp,0x1c
c0018681:	c3                   	ret    
c0018682:	66 90                	xchg   ax,ax

c0018684 <HalConsoleScroll(int, int)>:
c0018684:	83 ec 10             	sub    esp,0x10
c0018687:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001868f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018697:	90                   	nop
c0018698:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001869d:	0f 8f e1 00 00 00    	jg     c0018784 <HalConsoleScroll(int, int)+0x100>
c00186a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00186ab:	90                   	nop
c00186ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00186b4:	0f 8f be 00 00 00    	jg     c0018778 <HalConsoleScroll(int, int)+0xf4>
c00186ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186be:	89 d0                	mov    eax,edx
c00186c0:	c1 e0 02             	shl    eax,0x2
c00186c3:	01 d0                	add    eax,edx
c00186c5:	c1 e0 05             	shl    eax,0x5
c00186c8:	89 c2                	mov    edx,eax
c00186ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186ce:	01 d0                	add    eax,edx
c00186d0:	89 c2                	mov    edx,eax
c00186d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00186d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186dd:	89 d0                	mov    eax,edx
c00186df:	c1 e0 02             	shl    eax,0x2
c00186e2:	01 d0                	add    eax,edx
c00186e4:	c1 e0 05             	shl    eax,0x5
c00186e7:	89 c2                	mov    edx,eax
c00186e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186ed:	01 d0                	add    eax,edx
c00186ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00186f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186f9:	01 d0                	add    eax,edx
c00186fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00186fd:	88 10                	mov    BYTE PTR [eax],dl
c00186ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018704:	75 66                	jne    c001876c <HalConsoleScroll(int, int)+0xe8>
c0018706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001870a:	83 e0 01             	and    eax,0x1
c001870d:	74 39                	je     c0018748 <HalConsoleScroll(int, int)+0xc4>
c001870f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018713:	83 e0 0f             	and    eax,0xf
c0018716:	88 c2                	mov    dl,al
c0018718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001871c:	c1 e0 04             	shl    eax,0x4
c001871f:	09 d0                	or     eax,edx
c0018721:	88 c1                	mov    cl,al
c0018723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018727:	89 d0                	mov    eax,edx
c0018729:	c1 e0 02             	shl    eax,0x2
c001872c:	01 d0                	add    eax,edx
c001872e:	c1 e0 05             	shl    eax,0x5
c0018731:	89 c2                	mov    edx,eax
c0018733:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018737:	01 d0                	add    eax,edx
c0018739:	89 c2                	mov    edx,eax
c001873b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001873f:	01 d0                	add    eax,edx
c0018741:	88 ca                	mov    dl,cl
c0018743:	88 10                	mov    BYTE PTR [eax],dl
c0018745:	eb 25                	jmp    c001876c <HalConsoleScroll(int, int)+0xe8>
c0018747:	90                   	nop
c0018748:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001874c:	89 d0                	mov    eax,edx
c001874e:	c1 e0 02             	shl    eax,0x2
c0018751:	01 d0                	add    eax,edx
c0018753:	c1 e0 05             	shl    eax,0x5
c0018756:	89 c2                	mov    edx,eax
c0018758:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875c:	01 d0                	add    eax,edx
c001875e:	89 c2                	mov    edx,eax
c0018760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018764:	01 d0                	add    eax,edx
c0018766:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018769:	8d 76 00             	lea    esi,[esi+0x0]
c001876c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018771:	e9 36 ff ff ff       	jmp    c00186ac <HalConsoleScroll(int, int)+0x28>
c0018776:	66 90                	xchg   ax,ax
c0018778:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001877d:	e9 16 ff ff ff       	jmp    c0018698 <HalConsoleScroll(int, int)+0x14>
c0018782:	66 90                	xchg   ax,ax
c0018784:	90                   	nop
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	c3                   	ret    
c0018789:	8d 76 00             	lea    esi,[esi+0x0]

c001878c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001878c:	83 ec 14             	sub    esp,0x14
c001878f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018793:	88 04 24             	mov    BYTE PTR [esp],al
c0018796:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018799:	0f b6 c0             	movzx  eax,al
c001879c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187a0:	89 d1                	mov    ecx,edx
c00187a2:	83 e1 0f             	and    ecx,0xf
c00187a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187a9:	c1 e2 04             	shl    edx,0x4
c00187ac:	0f b6 d2             	movzx  edx,dl
c00187af:	09 ca                	or     edx,ecx
c00187b1:	c1 e2 08             	shl    edx,0x8
c00187b4:	09 d0                	or     eax,edx
c00187b6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00187bb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00187c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187c7:	89 d0                	mov    eax,edx
c00187c9:	c1 e0 02             	shl    eax,0x2
c00187cc:	01 d0                	add    eax,edx
c00187ce:	c1 e0 04             	shl    eax,0x4
c00187d1:	89 c2                	mov    edx,eax
c00187d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187d7:	01 d0                	add    eax,edx
c00187d9:	d1 e0                	shl    eax,1
c00187db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00187df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187e3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00187e8:	66 89 10             	mov    WORD PTR [eax],dx
c00187eb:	90                   	nop
c00187ec:	83 c4 14             	add    esp,0x14
c00187ef:	c3                   	ret    

c00187f0 <HalConsoleCursorUpdate(int, int)>:
c00187f0:	83 ec 20             	sub    esp,0x20
c00187f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187f7:	89 c2                	mov    edx,eax
c00187f9:	c1 e2 02             	shl    edx,0x2
c00187fc:	01 d0                	add    eax,edx
c00187fe:	c1 e0 04             	shl    eax,0x4
c0018801:	89 c2                	mov    edx,eax
c0018803:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018807:	01 d0                	add    eax,edx
c0018809:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001880e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018815:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001881a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001881e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018822:	ee                   	out    dx,al
c0018823:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018828:	0f b6 c0             	movzx  eax,al
c001882b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018832:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018836:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001883a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001883e:	ee                   	out    dx,al
c001883f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018846:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001884b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001884f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018853:	ee                   	out    dx,al
c0018854:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018859:	c1 e8 08             	shr    eax,0x8
c001885c:	0f b6 c0             	movzx  eax,al
c001885f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018866:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001886a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001886e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018872:	ee                   	out    dx,al
c0018873:	90                   	nop
c0018874:	83 c4 20             	add    esp,0x20
c0018877:	c3                   	ret    

c0018878 <FAT::getName()>:
c0018878:	b8 38 26 02 c0       	mov    eax,0xc0022638
c001887d:	c3                   	ret    
c001887e:	66 90                	xchg   ax,ax

c0018880 <FAT::tell(void*, unsigned long long*)>:
c0018880:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018885:	75 09                	jne    c0018890 <FAT::tell(void*, unsigned long long*)+0x10>
c0018887:	b8 04 00 00 00       	mov    eax,0x4
c001888c:	c3                   	ret    
c001888d:	8d 76 00             	lea    esi,[esi+0x0]
c0018890:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018895:	75 09                	jne    c00188a0 <FAT::tell(void*, unsigned long long*)+0x20>
c0018897:	b8 04 00 00 00       	mov    eax,0x4
c001889c:	c3                   	ret    
c001889d:	8d 76 00             	lea    esi,[esi+0x0]
c00188a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00188a7:	ba 00 00 00 00       	mov    edx,0x0
c00188ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188b0:	89 01                	mov    DWORD PTR [ecx],eax
c00188b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00188b5:	b8 00 00 00 00       	mov    eax,0x0
c00188ba:	c3                   	ret    
c00188bb:	90                   	nop

c00188bc <FAT::stat(void*, unsigned long long*)>:
c00188bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188c1:	75 09                	jne    c00188cc <FAT::stat(void*, unsigned long long*)+0x10>
c00188c3:	b8 04 00 00 00       	mov    eax,0x4
c00188c8:	c3                   	ret    
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188d1:	75 09                	jne    c00188dc <FAT::stat(void*, unsigned long long*)+0x20>
c00188d3:	b8 04 00 00 00       	mov    eax,0x4
c00188d8:	c3                   	ret    
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00188e3:	ba 00 00 00 00       	mov    edx,0x0
c00188e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188ec:	89 01                	mov    DWORD PTR [ecx],eax
c00188ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00188f1:	b8 00 00 00 00       	mov    eax,0x0
c00188f6:	c3                   	ret    
c00188f7:	90                   	nop

c00188f8 <FAT::~FAT()>:
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	ba 84 26 02 c0       	mov    edx,0xc0022684
c0018900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018904:	89 10                	mov    DWORD PTR [eax],edx
c0018906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001890a:	83 ec 0c             	sub    esp,0xc
c001890d:	50                   	push   eax
c001890e:	e8 51 2b ff ff       	call   c000b464 <Filesystem::~Filesystem()>
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	90                   	nop
c0018917:	83 c4 0c             	add    esp,0xc
c001891a:	c3                   	ret    
c001891b:	90                   	nop

c001891c <FAT::~FAT()>:
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	83 ec 0c             	sub    esp,0xc
c0018922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018926:	e8 cd ff ff ff       	call   c00188f8 <FAT::~FAT()>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	83 ec 08             	sub    esp,0x8
c0018931:	6a 08                	push   0x8
c0018933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018937:	e8 d0 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001893c:	83 c4 10             	add    esp,0x10
c001893f:	83 c4 0c             	add    esp,0xc
c0018942:	c3                   	ret    
c0018943:	90                   	nop

c0018944 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018944:	83 ec 1c             	sub    esp,0x1c
c0018947:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001894e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018957:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001895e:	83 f8 ff             	cmp    eax,0xffffffff
c0018961:	75 35                	jne    c0018998 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018963:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018967:	88 c2                	mov    dl,al
c0018969:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001896e:	01 d0                	add    eax,edx
c0018970:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018974:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c001897a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001897e:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018985:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001898a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001898e:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018995:	eb 19                	jmp    c00189b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018997:	90                   	nop
c0018998:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001899c:	88 c2                	mov    dl,al
c001899e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189a2:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189a9:	01 d0                	add    eax,edx
c00189ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189af:	90                   	nop
c00189b0:	83 ec 04             	sub    esp,0x4
c00189b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189bb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00189bf:	50                   	push   eax
c00189c0:	e8 2e c6 fe ff       	call   c0004ff3 <f_getlabel>
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189d1:	75 09                	jne    c00189dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00189d3:	b8 00 00 00 00       	mov    eax,0x0
c00189d8:	eb 0a                	jmp    c00189e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00189da:	66 90                	xchg   ax,ax
c00189dc:	b8 01 00 00 00       	mov    eax,0x1
c00189e1:	8d 76 00             	lea    esi,[esi+0x0]
c00189e4:	83 c4 1c             	add    esp,0x1c
c00189e7:	c3                   	ret    

c00189e8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00189e8:	53                   	push   ebx
c00189e9:	83 ec 58             	sub    esp,0x58
c00189ec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00189f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00189f8:	b9 00 00 00 00       	mov    ecx,0x0
c00189fd:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a02:	83 e0 f8             	and    eax,0xfffffff8
c0018a05:	89 c3                	mov    ebx,eax
c0018a07:	b8 00 00 00 00       	mov    eax,0x0
c0018a0c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a10:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018a14:	83 c0 08             	add    eax,0x8
c0018a17:	39 d8                	cmp    eax,ebx
c0018a19:	72 f1                	jb     c0018a0c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018a1b:	01 c2                	add    edx,eax
c0018a1d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018a1f:	83 c2 04             	add    edx,0x4
c0018a22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a26:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a2d:	83 f8 ff             	cmp    eax,0xffffffff
c0018a30:	75 36                	jne    c0018a68 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018a32:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a36:	88 c2                	mov    dl,al
c0018a38:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a3d:	01 d0                	add    eax,edx
c0018a3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a43:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018a49:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a4d:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018a54:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a59:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018a5d:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a64:	eb 1a                	jmp    c0018a80 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018a66:	66 90                	xchg   ax,ax
c0018a68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a6c:	88 c2                	mov    dl,al
c0018a6e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a72:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a79:	01 d0                	add    eax,edx
c0018a7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a7f:	90                   	nop
c0018a80:	83 ec 08             	sub    esp,0x8
c0018a83:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018a87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a8b:	50                   	push   eax
c0018a8c:	e8 df 7d fe ff       	call   c0000870 <strcat>
c0018a91:	83 c4 10             	add    esp,0x10
c0018a94:	83 ec 0c             	sub    esp,0xc
c0018a97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a9b:	50                   	push   eax
c0018a9c:	e8 a6 c6 fe ff       	call   c0005147 <f_setlabel>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018aa8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018aad:	75 09                	jne    c0018ab8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018aaf:	b8 00 00 00 00       	mov    eax,0x0
c0018ab4:	eb 0a                	jmp    c0018ac0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018ab6:	66 90                	xchg   ax,ax
c0018ab8:	b8 01 00 00 00       	mov    eax,0x1
c0018abd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac0:	83 c4 58             	add    esp,0x58
c0018ac3:	5b                   	pop    ebx
c0018ac4:	c3                   	ret    
c0018ac5:	90                   	nop
c0018ac6:	66 90                	xchg   ax,ax

c0018ac8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018ac8:	83 ec 2c             	sub    esp,0x2c
c0018acb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ad3:	83 ec 08             	sub    esp,0x8
c0018ad6:	68 5c 26 02 c0       	push   0xc002265c
c0018adb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018adf:	e8 9c 7c fe ff       	call   c0000780 <strcmp>
c0018ae4:	83 c4 10             	add    esp,0x10
c0018ae7:	85 c0                	test   eax,eax
c0018ae9:	0f 94 c0             	sete   al
c0018aec:	0f b6 c0             	movzx  eax,al
c0018aef:	85 c0                	test   eax,eax
c0018af1:	74 0d                	je     c0018b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018af3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018afb:	e9 c0 00 00 00       	jmp    c0018bc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b00:	83 ec 08             	sub    esp,0x8
c0018b03:	68 4e 26 02 c0       	push   0xc002264e
c0018b08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b0c:	e8 6f 7c fe ff       	call   c0000780 <strcmp>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	85 c0                	test   eax,eax
c0018b16:	0f 94 c0             	sete   al
c0018b19:	0f b6 c0             	movzx  eax,al
c0018b1c:	85 c0                	test   eax,eax
c0018b1e:	74 10                	je     c0018b30 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b20:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b28:	e9 93 00 00 00       	jmp    c0018bc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b30:	83 ec 08             	sub    esp,0x8
c0018b33:	68 54 26 02 c0       	push   0xc0022654
c0018b38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b3c:	e8 3f 7c fe ff       	call   c0000780 <strcmp>
c0018b41:	83 c4 10             	add    esp,0x10
c0018b44:	85 c0                	test   eax,eax
c0018b46:	0f 94 c0             	sete   al
c0018b49:	0f b6 c0             	movzx  eax,al
c0018b4c:	85 c0                	test   eax,eax
c0018b4e:	74 0c                	je     c0018b5c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018b50:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b58:	eb 66                	jmp    c0018bc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	83 ec 08             	sub    esp,0x8
c0018b5f:	68 fc fe 01 c0       	push   0xc001fefc
c0018b64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b68:	e8 13 7c fe ff       	call   c0000780 <strcmp>
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	85 c0                	test   eax,eax
c0018b72:	0f 94 c0             	sete   al
c0018b75:	0f b6 c0             	movzx  eax,al
c0018b78:	85 c0                	test   eax,eax
c0018b7a:	74 0c                	je     c0018b88 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018b7c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018b84:	eb 3a                	jmp    c0018bc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b86:	66 90                	xchg   ax,ax
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	68 5a 26 02 c0       	push   0xc002265a
c0018b90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b94:	e8 e7 7b fe ff       	call   c0000780 <strcmp>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	85 c0                	test   eax,eax
c0018b9e:	0f 94 c0             	sete   al
c0018ba1:	0f b6 c0             	movzx  eax,al
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	74 0c                	je     c0018bb4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018ba8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018bb0:	eb 0e                	jmp    c0018bc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bb2:	66 90                	xchg   ax,ax
c0018bb4:	b8 08 00 00 00       	mov    eax,0x8
c0018bb9:	e9 ea 00 00 00       	jmp    c0018ca8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018bbe:	66 90                	xchg   ax,ax
c0018bc0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018bc7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018bcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018bd0:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018bd7:	83 f8 ff             	cmp    eax,0xffffffff
c0018bda:	75 34                	jne    c0018c10 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018bdc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018be0:	88 c2                	mov    dl,al
c0018be2:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018be7:	01 d0                	add    eax,edx
c0018be9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018bed:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018bf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018bf7:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018bfe:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c03:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c07:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c0e:	eb 18                	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c10:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c14:	88 c2                	mov    dl,al
c0018c16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c1a:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c21:	01 d0                	add    eax,edx
c0018c23:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c27:	90                   	nop
c0018c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c2c:	88 04 24             	mov    BYTE PTR [esp],al
c0018c2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c3f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018c44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	68 00 20 00 00       	push   0x2000
c0018c54:	e8 7a ee fe ff       	call   c0007ad3 <malloc>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c60:	68 00 20 00 00       	push   0x2000
c0018c65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c69:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c6d:	50                   	push   eax
c0018c6e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018c72:	50                   	push   eax
c0018c73:	e8 cc c7 fe ff       	call   c0005444 <f_mkfs>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018c84:	75 0a                	jne    c0018c90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018c86:	b8 00 00 00 00       	mov    eax,0x0
c0018c8b:	eb 1b                	jmp    c0018ca8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c90:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018c95:	75 09                	jne    c0018ca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018c97:	b8 09 00 00 00       	mov    eax,0x9
c0018c9c:	eb 0a                	jmp    c0018ca8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c9e:	66 90                	xchg   ax,ax
c0018ca0:	b8 01 00 00 00       	mov    eax,0x1
c0018ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca8:	83 c4 2c             	add    esp,0x2c
c0018cab:	c3                   	ret    

c0018cac <FAT::tryMount(LogicalDisk*, int)>:
c0018cac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018cb2:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018cb7:	83 f8 14             	cmp    eax,0x14
c0018cba:	75 18                	jne    c0018cd4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018cbc:	83 ec 0c             	sub    esp,0xc
c0018cbf:	68 60 26 02 c0       	push   0xc0022660
c0018cc4:	e8 84 84 ff ff       	call   c001114d <KePanic(char const*)>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	b0 00                	mov    al,0x0
c0018cce:	e9 ed 01 00 00       	jmp    c0018ec0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018cd3:	90                   	nop
c0018cd4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018cdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018ce1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018ce7:	3d 00 02 00 00       	cmp    eax,0x200
c0018cec:	74 0a                	je     c0018cf8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018cee:	b0 00                	mov    al,0x0
c0018cf0:	e9 cb 01 00 00       	jmp    c0018ec0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d00:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d07:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d0e:	83 f8 ff             	cmp    eax,0xffffffff
c0018d11:	74 09                	je     c0018d1c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d13:	b0 01                	mov    al,0x1
c0018d15:	e9 a6 01 00 00       	jmp    c0018ec0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d1a:	66 90                	xchg   ax,ax
c0018d1c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d26:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d2e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d35:	88 c2                	mov    dl,al
c0018d37:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d3c:	01 d0                	add    eax,edx
c0018d3e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018d45:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018d4b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d52:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018d59:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d5e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018d65:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018d6c:	83 ec 0c             	sub    esp,0xc
c0018d6f:	68 34 02 00 00       	push   0x234
c0018d74:	e8 5a ed fe ff       	call   c0007ad3 <malloc>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018d83:	83 ec 04             	sub    esp,0x4
c0018d86:	6a 00                	push   0x0
c0018d88:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018d8f:	50                   	push   eax
c0018d90:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018d97:	e8 a2 ae fe ff       	call   c0003c3e <f_mount>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018da6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018dae:	74 1c                	je     c0018dcc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018dba:	e8 34 ed fe ff       	call   c0007af3 <rfree>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	b0 00                	mov    al,0x0
c0018dc4:	e9 f7 00 00 00       	jmp    c0018ec0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dcc:	83 ec 04             	sub    esp,0x4
c0018dcf:	68 00 01 00 00       	push   0x100
c0018dd4:	6a 00                	push   0x0
c0018dd6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ddd:	50                   	push   eax
c0018dde:	e8 0d 77 fe ff       	call   c00004f0 <memset>
c0018de3:	83 c4 10             	add    esp,0x10
c0018de6:	83 ec 08             	sub    esp,0x8
c0018de9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018df0:	50                   	push   eax
c0018df1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018df8:	50                   	push   eax
c0018df9:	e8 72 7a fe ff       	call   c0000870 <strcat>
c0018dfe:	83 c4 10             	add    esp,0x10
c0018e01:	83 ec 08             	sub    esp,0x8
c0018e04:	68 6e 26 02 c0       	push   0xc002266e
c0018e09:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e10:	50                   	push   eax
c0018e11:	e8 5a 7a fe ff       	call   c0000870 <strcat>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	83 ec 04             	sub    esp,0x4
c0018e1c:	6a 01                	push   0x1
c0018e1e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e25:	50                   	push   eax
c0018e26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e2a:	50                   	push   eax
c0018e2b:	e8 70 ae fe ff       	call   c0003ca0 <f_open>
c0018e30:	83 c4 10             	add    esp,0x10
c0018e33:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e3a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018e41:	85 c0                	test   eax,eax
c0018e43:	74 0b                	je     c0018e50 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018e45:	78 31                	js     c0018e78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e47:	83 e8 04             	sub    eax,0x4
c0018e4a:	83 f8 01             	cmp    eax,0x1
c0018e4d:	77 29                	ja     c0018e78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e4f:	90                   	nop
c0018e50:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018e58:	83 ec 0c             	sub    esp,0xc
c0018e5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e5f:	50                   	push   eax
c0018e60:	e8 eb b5 fe ff       	call   c0004450 <f_close>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	90                   	nop
c0018e69:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018e71:	85 c0                	test   eax,eax
c0018e73:	74 43                	je     c0018eb8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018e75:	eb 31                	jmp    c0018ea8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018e77:	90                   	nop
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e82:	e8 6c ec fe ff       	call   c0007af3 <rfree>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	83 ec 04             	sub    esp,0x4
c0018e8d:	6a 00                	push   0x0
c0018e8f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e96:	50                   	push   eax
c0018e97:	6a 00                	push   0x0
c0018e99:	e8 a0 ad fe ff       	call   c0003c3e <f_mount>
c0018e9e:	83 c4 10             	add    esp,0x10
c0018ea1:	b0 00                	mov    al,0x0
c0018ea3:	eb 1b                	jmp    c0018ec0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea8:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ead:	83 c0 01             	add    eax,0x1
c0018eb0:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018ebf:	90                   	nop
c0018ec0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018ec6:	c3                   	ret    
c0018ec7:	90                   	nop

c0018ec8 <FAT::allocateSwapfile(char const*, int)>:
c0018ec8:	55                   	push   ebp
c0018ec9:	57                   	push   edi
c0018eca:	56                   	push   esi
c0018ecb:	53                   	push   ebx
c0018ecc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018ed2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018edd:	83 ec 0c             	sub    esp,0xc
c0018ee0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018ee7:	e8 e7 eb fe ff       	call   c0007ad3 <malloc>
c0018eec:	83 c4 10             	add    esp,0x10
c0018eef:	89 c7                	mov    edi,eax
c0018ef1:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018ef6:	83 ec 04             	sub    esp,0x4
c0018ef9:	50                   	push   eax
c0018efa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f01:	57                   	push   edi
c0018f02:	e8 bf 27 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c0018f07:	83 c4 10             	add    esp,0x10
c0018f0a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f11:	83 ec 04             	sub    esp,0x4
c0018f14:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f18:	50                   	push   eax
c0018f19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f1d:	50                   	push   eax
c0018f1e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f25:	e8 5a 2b ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c0018f2a:	83 c4 10             	add    esp,0x10
c0018f2d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f34:	c1 e0 14             	shl    eax,0x14
c0018f37:	89 c7                	mov    edi,eax
c0018f39:	89 c5                	mov    ebp,eax
c0018f3b:	c1 fd 1f             	sar    ebp,0x1f
c0018f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f46:	89 f9                	mov    ecx,edi
c0018f48:	31 c1                	xor    ecx,eax
c0018f4a:	89 cb                	mov    ebx,ecx
c0018f4c:	89 e9                	mov    ecx,ebp
c0018f4e:	31 d1                	xor    ecx,edx
c0018f50:	89 ce                	mov    esi,ecx
c0018f52:	89 f0                	mov    eax,esi
c0018f54:	09 d8                	or     eax,ebx
c0018f56:	0f 84 9c 00 00 00    	je     c0018ff8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018f5c:	83 ec 0c             	sub    esp,0xc
c0018f5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f66:	e8 e5 29 ff ff       	call   c000b950 <File::unlink()>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	83 ec 08             	sub    esp,0x8
c0018f71:	6a 12                	push   0x12
c0018f73:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f7a:	e8 03 28 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018f89:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018f8f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018f96:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f9d:	c1 e0 14             	shl    eax,0x14
c0018fa0:	83 ec 04             	sub    esp,0x4
c0018fa3:	6a 01                	push   0x1
c0018fa5:	50                   	push   eax
c0018fa6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018fad:	e8 25 c3 fe ff       	call   c00052d7 <f_expand>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fbe:	83 c0 10             	add    eax,0x10
c0018fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fc3:	83 ec 0c             	sub    esp,0xc
c0018fc6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018fca:	52                   	push   edx
c0018fcb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018fcf:	52                   	push   edx
c0018fd0:	6a 00                	push   0x0
c0018fd2:	68 00 04 00 00       	push   0x400
c0018fd7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018fde:	ff d0                	call   eax
c0018fe0:	83 c4 20             	add    esp,0x20
c0018fe3:	83 ec 0c             	sub    esp,0xc
c0018fe6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fed:	e8 ee 27 ff ff       	call   c000b7e0 <File::close()>
c0018ff2:	83 c4 10             	add    esp,0x10
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	83 ec 08             	sub    esp,0x8
c0018ffb:	6a 01                	push   0x1
c0018ffd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019004:	e8 79 27 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019013:	8b 00                	mov    eax,DWORD PTR [eax]
c0019015:	83 c0 0c             	add    eax,0xc
c0019018:	8b 00                	mov    eax,DWORD PTR [eax]
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019021:	52                   	push   edx
c0019022:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019026:	52                   	push   edx
c0019027:	6a 00                	push   0x0
c0019029:	6a 04                	push   0x4
c001902b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019032:	ff d0                	call   eax
c0019034:	83 c4 20             	add    esp,0x20
c0019037:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001903e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019044:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001904b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019052:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019055:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001905c:	83 ec 0c             	sub    esp,0xc
c001905f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019066:	e8 75 27 ff ff       	call   c000b7e0 <File::close()>
c001906b:	83 c4 10             	add    esp,0x10
c001906e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019075:	ba 00 00 00 00       	mov    edx,0x0
c001907a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019080:	5b                   	pop    ebx
c0019081:	5e                   	pop    esi
c0019082:	5f                   	pop    edi
c0019083:	5d                   	pop    ebp
c0019084:	c3                   	ret    
c0019085:	90                   	nop
c0019086:	66 90                	xchg   ax,ax

c0019088 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019088:	57                   	push   edi
c0019089:	56                   	push   esi
c001908a:	53                   	push   ebx
c001908b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019091:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019099:	74 0d                	je     c00190a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001909b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00190a3:	75 0f                	jne    c00190b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00190a5:	8d 76 00             	lea    esi,[esi+0x0]
c00190a8:	b8 04 00 00 00       	mov    eax,0x4
c00190ad:	e9 3a 01 00 00       	jmp    c00191ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00190b2:	66 90                	xchg   ax,ax
c00190b4:	83 ec 08             	sub    esp,0x8
c00190b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00190be:	50                   	push   eax
c00190bf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00190c6:	e8 51 b6 fe ff       	call   c000471c <f_readdir>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00190d5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00190e6:	83 c0 16             	add    eax,0x16
c00190e9:	50                   	push   eax
c00190ea:	e8 91 74 fe ff       	call   c0000580 <strlen>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	ba 00 00 00 00       	mov    edx,0x0
c00190f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00190ff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019106:	0f b6 c0             	movzx  eax,al
c0019109:	83 e0 10             	and    eax,0x10
c001910c:	74 0a                	je     c0019118 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001910e:	b8 02 00 00 00       	mov    eax,0x2
c0019113:	eb 0b                	jmp    c0019120 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019115:	8d 76 00             	lea    esi,[esi+0x0]
c0019118:	b8 01 00 00 00       	mov    eax,0x1
c001911d:	8d 76 00             	lea    esi,[esi+0x0]
c0019120:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019124:	83 ec 08             	sub    esp,0x8
c0019127:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001912e:	83 c0 16             	add    eax,0x16
c0019131:	50                   	push   eax
c0019132:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019136:	83 c0 10             	add    eax,0x10
c0019139:	50                   	push   eax
c001913a:	e8 11 75 fe ff       	call   c0000650 <strcpy>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019149:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019150:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019154:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001915b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019162:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019169:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019170:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019177:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001917e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019185:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001918c:	89 c6                	mov    esi,eax
c001918e:	89 d7                	mov    edi,edx
c0019190:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019192:	89 c8                	mov    eax,ecx
c0019194:	89 fa                	mov    edx,edi
c0019196:	89 f3                	mov    ebx,esi
c0019198:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001919f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00191a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00191ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00191b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00191ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00191c1:	0f be c0             	movsx  eax,al
c00191c4:	85 c0                	test   eax,eax
c00191c6:	75 08                	jne    c00191d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00191c8:	b8 07 00 00 00       	mov    eax,0x7
c00191cd:	eb 1d                	jmp    c00191ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191cf:	90                   	nop
c00191d0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00191d7:	85 c0                	test   eax,eax
c00191d9:	75 09                	jne    c00191e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00191db:	b8 00 00 00 00       	mov    eax,0x0
c00191e0:	eb 0a                	jmp    c00191ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191e2:	66 90                	xchg   ax,ax
c00191e4:	b8 01 00 00 00       	mov    eax,0x1
c00191e9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ec:	81 c4 50 02 00 00    	add    esp,0x250
c00191f2:	5b                   	pop    ebx
c00191f3:	5e                   	pop    esi
c00191f4:	5f                   	pop    edi
c00191f5:	c3                   	ret    
c00191f6:	66 90                	xchg   ax,ax

c00191f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00191f8:	83 ec 1c             	sub    esp,0x1c
c00191fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019200:	74 0a                	je     c001920c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019202:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019207:	75 0b                	jne    c0019214 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019209:	8d 76 00             	lea    esi,[esi+0x0]
c001920c:	b8 04 00 00 00       	mov    eax,0x4
c0019211:	eb 41                	jmp    c0019254 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019213:	90                   	nop
c0019214:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019218:	50                   	push   eax
c0019219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001921d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019221:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019225:	e8 39 ad fe ff       	call   c0003f63 <f_read>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019235:	89 c2                	mov    edx,eax
c0019237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001923b:	89 10                	mov    DWORD PTR [eax],edx
c001923d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019241:	85 c0                	test   eax,eax
c0019243:	75 07                	jne    c001924c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019245:	b8 00 00 00 00       	mov    eax,0x0
c001924a:	eb 08                	jmp    c0019254 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001924c:	b8 01 00 00 00       	mov    eax,0x1
c0019251:	8d 76 00             	lea    esi,[esi+0x0]
c0019254:	83 c4 1c             	add    esp,0x1c
c0019257:	c3                   	ret    

c0019258 <FAT::write(void*, unsigned long, void*, int*)>:
c0019258:	83 ec 1c             	sub    esp,0x1c
c001925b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019260:	74 0a                	je     c001926c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019262:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019267:	75 0b                	jne    c0019274 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019269:	8d 76 00             	lea    esi,[esi+0x0]
c001926c:	b8 04 00 00 00       	mov    eax,0x4
c0019271:	eb 41                	jmp    c00192b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019273:	90                   	nop
c0019274:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019278:	50                   	push   eax
c0019279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001927d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019285:	e8 ba ae fe ff       	call   c0004144 <f_write>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019295:	89 c2                	mov    edx,eax
c0019297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001929b:	89 10                	mov    DWORD PTR [eax],edx
c001929d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192a1:	85 c0                	test   eax,eax
c00192a3:	75 07                	jne    c00192ac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00192a5:	b8 00 00 00 00       	mov    eax,0x0
c00192aa:	eb 08                	jmp    c00192b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192ac:	b8 01 00 00 00       	mov    eax,0x1
c00192b1:	8d 76 00             	lea    esi,[esi+0x0]
c00192b4:	83 c4 1c             	add    esp,0x1c
c00192b7:	c3                   	ret    

c00192b8 <FAT::close(void*)>:
c00192b8:	83 ec 1c             	sub    esp,0x1c
c00192bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192c0:	75 0a                	jne    c00192cc <FAT::close(void*)+0x14>
c00192c2:	b8 04 00 00 00       	mov    eax,0x4
c00192c7:	eb 3f                	jmp    c0019308 <FAT::close(void*)+0x50>
c00192c9:	8d 76 00             	lea    esi,[esi+0x0]
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192d3:	e8 78 b1 fe ff       	call   c0004450 <f_close>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192df:	83 ec 0c             	sub    esp,0xc
c00192e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192e6:	e8 f8 e7 fe ff       	call   c0007ae3 <free>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192f2:	85 c0                	test   eax,eax
c00192f4:	75 0a                	jne    c0019300 <FAT::close(void*)+0x48>
c00192f6:	b8 00 00 00 00       	mov    eax,0x0
c00192fb:	eb 0b                	jmp    c0019308 <FAT::close(void*)+0x50>
c00192fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019300:	b8 01 00 00 00       	mov    eax,0x1
c0019305:	8d 76 00             	lea    esi,[esi+0x0]
c0019308:	83 c4 1c             	add    esp,0x1c
c001930b:	c3                   	ret    

c001930c <FAT::closeDir(void*)>:
c001930c:	83 ec 1c             	sub    esp,0x1c
c001930f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019314:	75 0a                	jne    c0019320 <FAT::closeDir(void*)+0x14>
c0019316:	b8 04 00 00 00       	mov    eax,0x4
c001931b:	eb 3f                	jmp    c001935c <FAT::closeDir(void*)+0x50>
c001931d:	8d 76 00             	lea    esi,[esi+0x0]
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019327:	e8 ce b3 fe ff       	call   c00046fa <f_closedir>
c001932c:	83 c4 10             	add    esp,0x10
c001932f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019333:	83 ec 0c             	sub    esp,0xc
c0019336:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001933a:	e8 a4 e7 fe ff       	call   c0007ae3 <free>
c001933f:	83 c4 10             	add    esp,0x10
c0019342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019346:	85 c0                	test   eax,eax
c0019348:	75 0a                	jne    c0019354 <FAT::closeDir(void*)+0x48>
c001934a:	b8 00 00 00 00       	mov    eax,0x0
c001934f:	eb 0b                	jmp    c001935c <FAT::closeDir(void*)+0x50>
c0019351:	8d 76 00             	lea    esi,[esi+0x0]
c0019354:	b8 01 00 00 00       	mov    eax,0x1
c0019359:	8d 76 00             	lea    esi,[esi+0x0]
c001935c:	83 c4 1c             	add    esp,0x1c
c001935f:	c3                   	ret    

c0019360 <FAT::truncate(void*, unsigned long long)>:
c0019360:	83 ec 2c             	sub    esp,0x2c
c0019363:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001936b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001936f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019373:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019378:	75 0a                	jne    c0019384 <FAT::truncate(void*, unsigned long long)+0x24>
c001937a:	b8 04 00 00 00       	mov    eax,0x4
c001937f:	eb 47                	jmp    c00193c8 <FAT::truncate(void*, unsigned long long)+0x68>
c0019381:	8d 76 00             	lea    esi,[esi+0x0]
c0019384:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019388:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001938b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001938f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019397:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001939b:	83 ec 08             	sub    esp,0x8
c001939e:	50                   	push   eax
c001939f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00193a3:	e8 d7 b0 fe ff       	call   c000447f <f_lseek>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193b3:	85 c0                	test   eax,eax
c00193b5:	75 09                	jne    c00193c0 <FAT::truncate(void*, unsigned long long)+0x60>
c00193b7:	b8 00 00 00 00       	mov    eax,0x0
c00193bc:	eb 0a                	jmp    c00193c8 <FAT::truncate(void*, unsigned long long)+0x68>
c00193be:	66 90                	xchg   ax,ax
c00193c0:	b8 01 00 00 00       	mov    eax,0x1
c00193c5:	8d 76 00             	lea    esi,[esi+0x0]
c00193c8:	83 c4 2c             	add    esp,0x2c
c00193cb:	c3                   	ret    

c00193cc <FAT::seek(void*, unsigned long long)>:
c00193cc:	83 ec 2c             	sub    esp,0x2c
c00193cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193e4:	75 0a                	jne    c00193f0 <FAT::seek(void*, unsigned long long)+0x24>
c00193e6:	b8 04 00 00 00       	mov    eax,0x4
c00193eb:	eb 33                	jmp    c0019420 <FAT::seek(void*, unsigned long long)+0x54>
c00193ed:	8d 76 00             	lea    esi,[esi+0x0]
c00193f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193f4:	83 ec 08             	sub    esp,0x8
c00193f7:	50                   	push   eax
c00193f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00193fc:	e8 7e b0 fe ff       	call   c000447f <f_lseek>
c0019401:	83 c4 10             	add    esp,0x10
c0019404:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019408:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001940c:	85 c0                	test   eax,eax
c001940e:	75 08                	jne    c0019418 <FAT::seek(void*, unsigned long long)+0x4c>
c0019410:	b8 00 00 00 00       	mov    eax,0x0
c0019415:	eb 09                	jmp    c0019420 <FAT::seek(void*, unsigned long long)+0x54>
c0019417:	90                   	nop
c0019418:	b8 01 00 00 00       	mov    eax,0x1
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	83 c4 2c             	add    esp,0x2c
c0019423:	c3                   	ret    

c0019424 <fatWrapperReadDisk>:
c0019424:	53                   	push   ebx
c0019425:	83 ec 18             	sub    esp,0x18
c0019428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001942c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019430:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019435:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c001943c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019440:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019444:	ba 00 00 00 00       	mov    edx,0x0
c0019449:	83 ec 0c             	sub    esp,0xc
c001944c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019450:	53                   	push   ebx
c0019451:	52                   	push   edx
c0019452:	50                   	push   eax
c0019453:	51                   	push   ecx
c0019454:	e8 65 45 ff ff       	call   c000d9be <LogicalDisk::read(unsigned long long, int, void*)>
c0019459:	83 c4 20             	add    esp,0x20
c001945c:	83 c4 18             	add    esp,0x18
c001945f:	5b                   	pop    ebx
c0019460:	c3                   	ret    
c0019461:	8d 76 00             	lea    esi,[esi+0x0]

c0019464 <fatWrapperWriteDisk>:
c0019464:	53                   	push   ebx
c0019465:	83 ec 18             	sub    esp,0x18
c0019468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001946c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019470:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019475:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c001947c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019484:	ba 00 00 00 00       	mov    edx,0x0
c0019489:	83 ec 0c             	sub    esp,0xc
c001948c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019490:	53                   	push   ebx
c0019491:	52                   	push   edx
c0019492:	50                   	push   eax
c0019493:	51                   	push   ecx
c0019494:	e8 91 45 ff ff       	call   c000da2a <LogicalDisk::write(unsigned long long, int, void*)>
c0019499:	83 c4 20             	add    esp,0x20
c001949c:	83 c4 18             	add    esp,0x18
c001949f:	5b                   	pop    ebx
c00194a0:	c3                   	ret    
c00194a1:	8d 76 00             	lea    esi,[esi+0x0]

c00194a4 <fatWrapperIoctl>:
c00194a4:	53                   	push   ebx
c00194a5:	83 ec 28             	sub    esp,0x28
c00194a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00194b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194b4:	88 d0                	mov    al,dl
c00194b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00194ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194bf:	83 f8 02             	cmp    eax,0x2
c00194c2:	75 34                	jne    c00194f8 <fatWrapperIoctl+0x54>
c00194c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194d1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c00194d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00194de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00194e4:	89 c2                	mov    edx,eax
c00194e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194ea:	66 89 10             	mov    WORD PTR [eax],dx
c00194ed:	b8 00 00 00 00       	mov    eax,0x0
c00194f2:	e9 c5 00 00 00       	jmp    c00195bc <fatWrapperIoctl+0x118>
c00194f7:	90                   	nop
c00194f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194fd:	83 f8 01             	cmp    eax,0x1
c0019500:	75 6a                	jne    c001956c <fatWrapperIoctl+0xc8>
c0019502:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019506:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001950a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001950f:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0019516:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001951c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019522:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019528:	89 c8                	mov    eax,ecx
c001952a:	89 da                	mov    edx,ebx
c001952c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019530:	c1 e0 0a             	shl    eax,0xa
c0019533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019538:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c001953f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019545:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001954b:	89 cb                	mov    ebx,ecx
c001954d:	c1 fb 1f             	sar    ebx,0x1f
c0019550:	53                   	push   ebx
c0019551:	51                   	push   ecx
c0019552:	52                   	push   edx
c0019553:	50                   	push   eax
c0019554:	e8 b7 5b 00 00       	call   c001f110 <__udivdi3>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	89 c2                	mov    edx,eax
c001955e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019562:	89 10                	mov    DWORD PTR [eax],edx
c0019564:	b8 00 00 00 00       	mov    eax,0x0
c0019569:	eb 51                	jmp    c00195bc <fatWrapperIoctl+0x118>
c001956b:	90                   	nop
c001956c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019571:	85 c0                	test   eax,eax
c0019573:	75 07                	jne    c001957c <fatWrapperIoctl+0xd8>
c0019575:	b8 00 00 00 00       	mov    eax,0x0
c001957a:	eb 40                	jmp    c00195bc <fatWrapperIoctl+0x118>
c001957c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019581:	83 f8 03             	cmp    eax,0x3
c0019584:	75 1a                	jne    c00195a0 <fatWrapperIoctl+0xfc>
c0019586:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001958a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001958e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019592:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019598:	b8 00 00 00 00       	mov    eax,0x0
c001959d:	eb 1d                	jmp    c00195bc <fatWrapperIoctl+0x118>
c001959f:	90                   	nop
c00195a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195a5:	83 f8 04             	cmp    eax,0x4
c00195a8:	75 0a                	jne    c00195b4 <fatWrapperIoctl+0x110>
c00195aa:	b8 00 00 00 00       	mov    eax,0x0
c00195af:	eb 0b                	jmp    c00195bc <fatWrapperIoctl+0x118>
c00195b1:	8d 76 00             	lea    esi,[esi+0x0]
c00195b4:	b8 04 00 00 00       	mov    eax,0x4
c00195b9:	8d 76 00             	lea    esi,[esi+0x0]
c00195bc:	83 c4 28             	add    esp,0x28
c00195bf:	5b                   	pop    ebx
c00195c0:	c3                   	ret    
c00195c1:	90                   	nop
c00195c2:	66 90                	xchg   ax,ax

c00195c4 <FAT::FAT()>:
c00195c4:	83 ec 1c             	sub    esp,0x1c
c00195c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195cb:	83 ec 0c             	sub    esp,0xc
c00195ce:	50                   	push   eax
c00195cf:	e8 6c 1e ff ff       	call   c000b440 <Filesystem::Filesystem()>
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	ba 84 26 02 c0       	mov    edx,0xc0022684
c00195dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195e0:	89 10                	mov    DWORD PTR [eax],edx
c00195e2:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c00195ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00195f4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00195f9:	7f 19                	jg     c0019614 <FAT::FAT()+0x50>
c00195fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195ff:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001960a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001960f:	eb e3                	jmp    c00195f4 <FAT::FAT()+0x30>
c0019611:	8d 76 00             	lea    esi,[esi+0x0]
c0019614:	90                   	nop
c0019615:	83 c4 1c             	add    esp,0x1c
c0019618:	c3                   	ret    
c0019619:	90                   	nop
c001961a:	66 90                	xchg   ax,ax

c001961c <FAT::fixFilepath(char*)>:
c001961c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019620:	8a 00                	mov    al,BYTE PTR [eax]
c0019622:	0f be c0             	movsx  eax,al
c0019625:	83 f8 40             	cmp    eax,0x40
c0019628:	7e 2e                	jle    c0019658 <FAT::fixFilepath(char*)+0x3c>
c001962a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001962e:	8a 00                	mov    al,BYTE PTR [eax]
c0019630:	83 e8 41             	sub    eax,0x41
c0019633:	88 c2                	mov    dl,al
c0019635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019639:	88 10                	mov    BYTE PTR [eax],dl
c001963b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001963f:	8a 00                	mov    al,BYTE PTR [eax]
c0019641:	0f be c0             	movsx  eax,al
c0019644:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001964b:	83 c0 30             	add    eax,0x30
c001964e:	88 c2                	mov    dl,al
c0019650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019654:	88 10                	mov    BYTE PTR [eax],dl
c0019656:	66 90                	xchg   ax,ax
c0019658:	90                   	nop
c0019659:	c3                   	ret    
c001965a:	66 90                	xchg   ax,ax

c001965c <FAT::open(char const*, void**, FileOpenMode)>:
c001965c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019662:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001966a:	74 0c                	je     c0019678 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001966c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019674:	75 0e                	jne    c0019684 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019676:	66 90                	xchg   ax,ax
c0019678:	b8 04 00 00 00       	mov    eax,0x4
c001967d:	e9 46 01 00 00       	jmp    c00197c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019682:	66 90                	xchg   ax,ax
c0019684:	83 ec 08             	sub    esp,0x8
c0019687:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001968e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019692:	50                   	push   eax
c0019693:	e8 b8 6f fe ff       	call   c0000650 <strcpy>
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	83 ec 08             	sub    esp,0x8
c001969e:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196a2:	50                   	push   eax
c00196a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196aa:	e8 6d ff ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c00196af:	83 c4 10             	add    esp,0x10
c00196b2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00196ba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00196c1:	83 e0 01             	and    eax,0x1
c00196c4:	74 12                	je     c00196d8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00196c6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196cd:	83 c8 01             	or     eax,0x1
c00196d0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00196d7:	90                   	nop
c00196d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00196df:	83 e0 04             	and    eax,0x4
c00196e2:	74 24                	je     c0019708 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00196e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196eb:	83 c8 30             	or     eax,0x30
c00196ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00196f5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196fc:	83 c8 02             	or     eax,0x2
c00196ff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019706:	66 90                	xchg   ax,ax
c0019708:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001970f:	83 e0 02             	and    eax,0x2
c0019712:	74 14                	je     c0019728 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019714:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001971b:	83 c8 02             	or     eax,0x2
c001971e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019725:	8d 76 00             	lea    esi,[esi+0x0]
c0019728:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001972f:	83 e0 08             	and    eax,0x8
c0019732:	74 14                	je     c0019748 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019734:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001973b:	83 c8 04             	or     eax,0x4
c001973e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001974f:	83 e0 10             	and    eax,0x10
c0019752:	74 14                	je     c0019768 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019754:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001975b:	83 c8 08             	or     eax,0x8
c001975e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019765:	8d 76 00             	lea    esi,[esi+0x0]
c0019768:	83 ec 0c             	sub    esp,0xc
c001976b:	68 28 02 00 00       	push   0x228
c0019770:	e8 5e e3 fe ff       	call   c0007ad3 <malloc>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	89 c2                	mov    edx,eax
c001977a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019781:	89 10                	mov    DWORD PTR [eax],edx
c0019783:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001978b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019792:	8b 00                	mov    eax,DWORD PTR [eax]
c0019794:	83 ec 04             	sub    esp,0x4
c0019797:	52                   	push   edx
c0019798:	8d 54 24 10          	lea    edx,[esp+0x10]
c001979c:	52                   	push   edx
c001979d:	50                   	push   eax
c001979e:	e8 fd a4 fe ff       	call   c0003ca0 <f_open>
c00197a3:	83 c4 10             	add    esp,0x10
c00197a6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00197ad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00197b5:	74 09                	je     c00197c0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00197b7:	b8 01 00 00 00       	mov    eax,0x1
c00197bc:	eb 0a                	jmp    c00197c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00197be:	66 90                	xchg   ax,ax
c00197c0:	b8 00 00 00 00       	mov    eax,0x0
c00197c5:	8d 76 00             	lea    esi,[esi+0x0]
c00197c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197ce:	c3                   	ret    
c00197cf:	90                   	nop

c00197d0 <FAT::openDir(char const*, void**)>:
c00197d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197de:	74 0c                	je     c00197ec <FAT::openDir(char const*, void**)+0x1c>
c00197e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197e8:	75 0e                	jne    c00197f8 <FAT::openDir(char const*, void**)+0x28>
c00197ea:	66 90                	xchg   ax,ax
c00197ec:	b8 04 00 00 00       	mov    eax,0x4
c00197f1:	e9 82 00 00 00       	jmp    c0019878 <FAT::openDir(char const*, void**)+0xa8>
c00197f6:	66 90                	xchg   ax,ax
c00197f8:	83 ec 08             	sub    esp,0x8
c00197fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019802:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019806:	50                   	push   eax
c0019807:	e8 44 6e fe ff       	call   c0000650 <strcpy>
c001980c:	83 c4 10             	add    esp,0x10
c001980f:	83 ec 08             	sub    esp,0x8
c0019812:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019816:	50                   	push   eax
c0019817:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001981e:	e8 f9 fd ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	83 ec 0c             	sub    esp,0xc
c0019829:	6a 30                	push   0x30
c001982b:	e8 a3 e2 fe ff       	call   c0007ad3 <malloc>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	89 c2                	mov    edx,eax
c0019835:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001983c:	89 10                	mov    DWORD PTR [eax],edx
c001983e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019845:	8b 00                	mov    eax,DWORD PTR [eax]
c0019847:	83 ec 08             	sub    esp,0x8
c001984a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001984e:	52                   	push   edx
c001984f:	50                   	push   eax
c0019850:	e8 da ad fe ff       	call   c000462f <f_opendir>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001985f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019867:	74 07                	je     c0019870 <FAT::openDir(char const*, void**)+0xa0>
c0019869:	b8 01 00 00 00       	mov    eax,0x1
c001986e:	eb 08                	jmp    c0019878 <FAT::openDir(char const*, void**)+0xa8>
c0019870:	b8 00 00 00 00       	mov    eax,0x0
c0019875:	8d 76 00             	lea    esi,[esi+0x0]
c0019878:	81 c4 1c 01 00 00    	add    esp,0x11c
c001987e:	c3                   	ret    
c001987f:	90                   	nop

c0019880 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019880:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019886:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001988e:	75 0c                	jne    c001989c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019890:	b8 04 00 00 00       	mov    eax,0x4
c0019895:	e9 d6 00 00 00       	jmp    c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001989a:	66 90                	xchg   ax,ax
c001989c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198a4:	75 0a                	jne    c00198b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00198a6:	b8 04 00 00 00       	mov    eax,0x4
c00198ab:	e9 c0 00 00 00       	jmp    c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00198b8:	75 0a                	jne    c00198c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00198ba:	b8 04 00 00 00       	mov    eax,0x4
c00198bf:	e9 ac 00 00 00       	jmp    c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198c4:	83 ec 08             	sub    esp,0x8
c00198c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00198ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00198d5:	50                   	push   eax
c00198d6:	e8 75 6d fe ff       	call   c0000650 <strcpy>
c00198db:	83 c4 10             	add    esp,0x10
c00198de:	83 ec 08             	sub    esp,0x8
c00198e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00198e8:	50                   	push   eax
c00198e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00198f0:	e8 27 fd ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	83 ec 08             	sub    esp,0x8
c00198fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00198ff:	50                   	push   eax
c0019900:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019907:	50                   	push   eax
c0019908:	e8 a1 ae fe ff       	call   c00047ae <f_stat>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019917:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001991e:	85 c0                	test   eax,eax
c0019920:	74 0a                	je     c001992c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019922:	83 f8 04             	cmp    eax,0x4
c0019925:	74 39                	je     c0019960 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019927:	eb 3f                	jmp    c0019968 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019929:	8d 76 00             	lea    esi,[esi+0x0]
c001992c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019930:	0f b6 c0             	movzx  eax,al
c0019933:	83 e0 10             	and    eax,0x10
c0019936:	0f 95 c2             	setne  dl
c0019939:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019940:	88 10                	mov    BYTE PTR [eax],dl
c0019942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019946:	ba 00 00 00 00       	mov    edx,0x0
c001994b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019952:	89 01                	mov    DWORD PTR [ecx],eax
c0019954:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019957:	b8 00 00 00 00       	mov    eax,0x0
c001995c:	eb 12                	jmp    c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001995e:	66 90                	xchg   ax,ax
c0019960:	b8 02 00 00 00       	mov    eax,0x2
c0019965:	eb 09                	jmp    c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019967:	90                   	nop
c0019968:	b8 01 00 00 00       	mov    eax,0x1
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019976:	c3                   	ret    
c0019977:	90                   	nop

c0019978 <FAT::unlink(char const*)>:
c0019978:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001997e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019986:	75 08                	jne    c0019990 <FAT::unlink(char const*)+0x18>
c0019988:	b8 04 00 00 00       	mov    eax,0x4
c001998d:	eb 61                	jmp    c00199f0 <FAT::unlink(char const*)+0x78>
c001998f:	90                   	nop
c0019990:	83 ec 08             	sub    esp,0x8
c0019993:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001999a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001999e:	50                   	push   eax
c001999f:	e8 ac 6c fe ff       	call   c0000650 <strcpy>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	83 ec 08             	sub    esp,0x8
c00199aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199ae:	50                   	push   eax
c00199af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199b6:	e8 61 fc ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199c5:	50                   	push   eax
c00199c6:	e8 55 b0 fe ff       	call   c0004a20 <f_unlink>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00199dc:	85 c0                	test   eax,eax
c00199de:	75 08                	jne    c00199e8 <FAT::unlink(char const*)+0x70>
c00199e0:	b8 00 00 00 00       	mov    eax,0x0
c00199e5:	eb 09                	jmp    c00199f0 <FAT::unlink(char const*)+0x78>
c00199e7:	90                   	nop
c00199e8:	b8 01 00 00 00       	mov    eax,0x1
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199f6:	c3                   	ret    
c00199f7:	90                   	nop

c00199f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00199f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00199fe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a05:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a10:	88 d0                	mov    al,dl
c0019a12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a1e:	75 0c                	jne    c0019a2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019a20:	b8 04 00 00 00       	mov    eax,0x4
c0019a25:	e9 7e 01 00 00       	jmp    c0019ba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019a2a:	66 90                	xchg   ax,ax
c0019a2c:	83 ec 08             	sub    esp,0x8
c0019a2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a3a:	50                   	push   eax
c0019a3b:	e8 10 6c fe ff       	call   c0000650 <strcpy>
c0019a40:	83 c4 10             	add    esp,0x10
c0019a43:	83 ec 08             	sub    esp,0x8
c0019a46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a4a:	50                   	push   eax
c0019a4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a52:	e8 c5 fb ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019a57:	83 c4 10             	add    esp,0x10
c0019a5a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a62:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019a6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a6f:	83 e0 01             	and    eax,0x1
c0019a72:	74 14                	je     c0019a88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019a74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019a7b:	83 c8 01             	or     eax,0x1
c0019a7e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a8d:	83 e0 02             	and    eax,0x2
c0019a90:	74 12                	je     c0019aa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019a92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019a99:	83 c8 20             	or     eax,0x20
c0019a9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019aa3:	90                   	nop
c0019aa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aa9:	83 e0 04             	and    eax,0x4
c0019aac:	74 12                	je     c0019ac0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019aae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ab5:	83 c8 04             	or     eax,0x4
c0019ab8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019abf:	90                   	nop
c0019ac0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ac5:	83 e0 08             	and    eax,0x8
c0019ac8:	74 12                	je     c0019adc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019aca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ad1:	83 c8 02             	or     eax,0x2
c0019ad4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019adb:	90                   	nop
c0019adc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ae1:	83 e0 01             	and    eax,0x1
c0019ae4:	74 12                	je     c0019af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019ae6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019aed:	83 c8 01             	or     eax,0x1
c0019af0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019af7:	90                   	nop
c0019af8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019afd:	83 e0 02             	and    eax,0x2
c0019b00:	74 12                	je     c0019b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b02:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b09:	83 c8 20             	or     eax,0x20
c0019b0c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b13:	90                   	nop
c0019b14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b19:	83 e0 04             	and    eax,0x4
c0019b1c:	74 12                	je     c0019b30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019b1e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b25:	83 c8 04             	or     eax,0x4
c0019b28:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b2f:	90                   	nop
c0019b30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b35:	83 e0 08             	and    eax,0x8
c0019b38:	74 12                	je     c0019b4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019b3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b41:	83 c8 02             	or     eax,0x2
c0019b44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b4b:	90                   	nop
c0019b4c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019b53:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b5a:	09 d0                	or     eax,edx
c0019b5c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b63:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b6b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b73:	83 ec 04             	sub    esp,0x4
c0019b76:	52                   	push   edx
c0019b77:	50                   	push   eax
c0019b78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b7c:	50                   	push   eax
c0019b7d:	e8 11 b3 fe ff       	call   c0004e93 <f_chmod>
c0019b82:	83 c4 10             	add    esp,0x10
c0019b85:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019b8c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019b93:	85 c0                	test   eax,eax
c0019b95:	75 09                	jne    c0019ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019b97:	b8 00 00 00 00       	mov    eax,0x0
c0019b9c:	eb 0a                	jmp    c0019ba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019b9e:	66 90                	xchg   ax,ax
c0019ba0:	b8 01 00 00 00       	mov    eax,0x1
c0019ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <FAT::rename(char const*, char const*)>:
c0019bb0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019bb6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019bbe:	74 0c                	je     c0019bcc <FAT::rename(char const*, char const*)+0x1c>
c0019bc0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019bc8:	75 0e                	jne    c0019bd8 <FAT::rename(char const*, char const*)+0x28>
c0019bca:	66 90                	xchg   ax,ax
c0019bcc:	b8 04 00 00 00       	mov    eax,0x4
c0019bd1:	e9 9e 00 00 00       	jmp    c0019c74 <FAT::rename(char const*, char const*)+0xc4>
c0019bd6:	66 90                	xchg   ax,ax
c0019bd8:	83 ec 08             	sub    esp,0x8
c0019bdb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019be2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019be9:	50                   	push   eax
c0019bea:	e8 61 6a fe ff       	call   c0000650 <strcpy>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	83 ec 08             	sub    esp,0x8
c0019bf5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019bfc:	50                   	push   eax
c0019bfd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c04:	e8 13 fa ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019c09:	83 c4 10             	add    esp,0x10
c0019c0c:	83 ec 08             	sub    esp,0x8
c0019c0f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c1a:	50                   	push   eax
c0019c1b:	e8 30 6a fe ff       	call   c0000650 <strcpy>
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	83 ec 08             	sub    esp,0x8
c0019c26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c2a:	50                   	push   eax
c0019c2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c32:	e8 e5 f9 ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019c37:	83 c4 10             	add    esp,0x10
c0019c3a:	83 ec 08             	sub    esp,0x8
c0019c3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c41:	50                   	push   eax
c0019c42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c49:	50                   	push   eax
c0019c4a:	e8 8c b0 fe ff       	call   c0004cdb <f_rename>
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c59:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c60:	85 c0                	test   eax,eax
c0019c62:	75 08                	jne    c0019c6c <FAT::rename(char const*, char const*)+0xbc>
c0019c64:	b8 00 00 00 00       	mov    eax,0x0
c0019c69:	eb 09                	jmp    c0019c74 <FAT::rename(char const*, char const*)+0xc4>
c0019c6b:	90                   	nop
c0019c6c:	b8 01 00 00 00       	mov    eax,0x1
c0019c71:	8d 76 00             	lea    esi,[esi+0x0]
c0019c74:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c7a:	c3                   	ret    
c0019c7b:	90                   	nop

c0019c7c <FAT::mkdir(char const*)>:
c0019c7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c8a:	75 08                	jne    c0019c94 <FAT::mkdir(char const*)+0x18>
c0019c8c:	b8 04 00 00 00       	mov    eax,0x4
c0019c91:	eb 61                	jmp    c0019cf4 <FAT::mkdir(char const*)+0x78>
c0019c93:	90                   	nop
c0019c94:	83 ec 08             	sub    esp,0x8
c0019c97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ca2:	50                   	push   eax
c0019ca3:	e8 a8 69 fe ff       	call   c0000650 <strcpy>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	83 ec 08             	sub    esp,0x8
c0019cae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb2:	50                   	push   eax
c0019cb3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cba:	e8 5d f9 ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	83 ec 0c             	sub    esp,0xc
c0019cc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cc9:	50                   	push   eax
c0019cca:	e8 71 ae fe ff       	call   c0004b40 <f_mkdir>
c0019ccf:	83 c4 10             	add    esp,0x10
c0019cd2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019cd9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019ce0:	85 c0                	test   eax,eax
c0019ce2:	75 08                	jne    c0019cec <FAT::mkdir(char const*)+0x70>
c0019ce4:	b8 00 00 00 00       	mov    eax,0x0
c0019ce9:	eb 09                	jmp    c0019cf4 <FAT::mkdir(char const*)+0x78>
c0019ceb:	90                   	nop
c0019cec:	b8 01 00 00 00       	mov    eax,0x1
c0019cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cfa:	c3                   	ret    
c0019cfb:	90                   	nop

c0019cfc <FAT::exists(char const*)>:
c0019cfc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d02:	83 ec 08             	sub    esp,0x8
c0019d05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d0c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d10:	50                   	push   eax
c0019d11:	e8 3a 69 fe ff       	call   c0000650 <strcpy>
c0019d16:	83 c4 10             	add    esp,0x10
c0019d19:	83 ec 08             	sub    esp,0x8
c0019d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d20:	50                   	push   eax
c0019d21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d28:	e8 ef f8 ff ff       	call   c001961c <FAT::fixFilepath(char*)>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	83 ec 08             	sub    esp,0x8
c0019d33:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d3a:	50                   	push   eax
c0019d3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d3f:	50                   	push   eax
c0019d40:	e8 69 aa fe ff       	call   c00047ae <f_stat>
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019d4f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019d56:	85 c0                	test   eax,eax
c0019d58:	75 06                	jne    c0019d60 <FAT::exists(char const*)+0x64>
c0019d5a:	b0 01                	mov    al,0x1
c0019d5c:	eb 06                	jmp    c0019d64 <FAT::exists(char const*)+0x68>
c0019d5e:	66 90                	xchg   ax,ax
c0019d60:	b0 00                	mov    al,0x0
c0019d62:	66 90                	xchg   ax,ax
c0019d64:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <isoReadDiscSectorHelper>:
c0019d6c:	83 ec 2c             	sub    esp,0x2c
c0019d6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019d77:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019d7c:	83 e8 41             	sub    eax,0x41
c0019d7f:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019d86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d8a:	ba 00 00 00 00       	mov    edx,0x0
c0019d8f:	83 ec 0c             	sub    esp,0xc
c0019d92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d9a:	52                   	push   edx
c0019d9b:	50                   	push   eax
c0019d9c:	51                   	push   ecx
c0019d9d:	e8 1c 3c ff ff       	call   c000d9be <LogicalDisk::read(unsigned long long, int, void*)>
c0019da2:	83 c4 20             	add    esp,0x20
c0019da5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019da9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019dae:	74 0c                	je     c0019dbc <isoReadDiscSectorHelper+0x50>
c0019db0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019db4:	c1 e0 0b             	shl    eax,0xb
c0019db7:	eb 0b                	jmp    c0019dc4 <isoReadDiscSectorHelper+0x58>
c0019db9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dbc:	b8 00 00 00 00       	mov    eax,0x0
c0019dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc4:	83 c4 2c             	add    esp,0x2c
c0019dc7:	c3                   	ret    

c0019dc8 <iso_kprintf>:
c0019dc8:	83 ec 0c             	sub    esp,0xc
c0019dcb:	83 ec 08             	sub    esp,0x8
c0019dce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dd2:	68 32 24 02 c0       	push   0xc0022432
c0019dd7:	e8 2e 0b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019ddc:	83 c4 10             	add    esp,0x10
c0019ddf:	90                   	nop
c0019de0:	83 c4 0c             	add    esp,0xc
c0019de3:	c3                   	ret    

c0019de4 <iso_kprintfd>:
c0019de4:	83 ec 0c             	sub    esp,0xc
c0019de7:	83 ec 08             	sub    esp,0x8
c0019dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dee:	68 da 0c 02 c0       	push   0xc0020cda
c0019df3:	e8 12 0b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	90                   	nop
c0019dfc:	83 c4 0c             	add    esp,0xc
c0019dff:	c3                   	ret    

c0019e00 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e00:	b8 08 00 00 00       	mov    eax,0x8
c0019e05:	c3                   	ret    

c0019e06 <ISO9660::truncate(void*, unsigned long long)>:
c0019e06:	b8 01 00 00 00       	mov    eax,0x1
c0019e0b:	c3                   	ret    

c0019e0c <ISO9660::getName()>:
c0019e0c:	b8 e8 26 02 c0       	mov    eax,0xc00226e8
c0019e11:	c3                   	ret    

c0019e12 <ISO9660::closeDir(void*)>:
c0019e12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e18:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e1b:	90                   	nop

c0019e1c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e1c:	b8 01 00 00 00       	mov    eax,0x1
c0019e21:	c3                   	ret    

c0019e22 <ISO9660::unlink(char const*)>:
c0019e22:	b8 01 00 00 00       	mov    eax,0x1
c0019e27:	c3                   	ret    

c0019e28 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e28:	b8 03 00 00 00       	mov    eax,0x3
c0019e2d:	c3                   	ret    

c0019e2e <ISO9660::rename(char const*, char const*)>:
c0019e2e:	b8 01 00 00 00       	mov    eax,0x1
c0019e33:	c3                   	ret    

c0019e34 <ISO9660::mkdir(char const*)>:
c0019e34:	b8 01 00 00 00       	mov    eax,0x1
c0019e39:	c3                   	ret    

c0019e3a <ISO9660::~ISO9660()>:
c0019e3a:	83 ec 0c             	sub    esp,0xc
c0019e3d:	ba 28 28 02 c0       	mov    edx,0xc0022828
c0019e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e46:	89 10                	mov    DWORD PTR [eax],edx
c0019e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e4c:	83 ec 0c             	sub    esp,0xc
c0019e4f:	50                   	push   eax
c0019e50:	e8 0f 16 ff ff       	call   c000b464 <Filesystem::~Filesystem()>
c0019e55:	83 c4 10             	add    esp,0x10
c0019e58:	90                   	nop
c0019e59:	83 c4 0c             	add    esp,0xc
c0019e5c:	c3                   	ret    
c0019e5d:	90                   	nop

c0019e5e <ISO9660::~ISO9660()>:
c0019e5e:	83 ec 0c             	sub    esp,0xc
c0019e61:	83 ec 0c             	sub    esp,0xc
c0019e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e68:	e8 cd ff ff ff       	call   c0019e3a <ISO9660::~ISO9660()>
c0019e6d:	83 c4 10             	add    esp,0x10
c0019e70:	83 ec 08             	sub    esp,0x8
c0019e73:	6a 08                	push   0x8
c0019e75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e79:	e8 8e 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019e7e:	83 c4 10             	add    esp,0x10
c0019e81:	83 c4 0c             	add    esp,0xc
c0019e84:	c3                   	ret    
c0019e85:	90                   	nop

c0019e86 <ISO9660::exists(char const*)>:
c0019e86:	83 ec 18             	sub    esp,0x18
c0019e89:	68 03 27 02 c0       	push   0xc0022703
c0019e8e:	e8 ba 72 ff ff       	call   c001114d <KePanic(char const*)>
c0019e93:	31 c0                	xor    eax,eax
c0019e95:	83 c4 1c             	add    esp,0x1c
c0019e98:	c3                   	ret    
c0019e99:	90                   	nop

c0019e9a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019e9a:	56                   	push   esi
c0019e9b:	53                   	push   ebx
c0019e9c:	53                   	push   ebx
c0019e9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ea1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ea5:	85 db                	test   ebx,ebx
c0019ea7:	0f 84 ca 00 00 00    	je     c0019f77 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ead:	85 f6                	test   esi,esi
c0019eaf:	0f 84 c2 00 00 00    	je     c0019f77 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019eb5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019eba:	b8 03 00 00 00       	mov    eax,0x3
c0019ebf:	0f 85 b7 00 00 00    	jne    c0019f7c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019ec5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019ec7:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019ecd:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019ed4:	74 1b                	je     c0019ef1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019ed6:	85 c0                	test   eax,eax
c0019ed8:	74 10                	je     c0019eea <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019eda:	83 ec 0c             	sub    esp,0xc
c0019edd:	68 21 27 02 c0       	push   0xc0022721
c0019ee2:	e8 66 72 ff ff       	call   c001114d <KePanic(char const*)>
c0019ee7:	83 c4 10             	add    esp,0x10
c0019eea:	8a 03                	mov    al,BYTE PTR [ebx]
c0019eec:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019ef1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019ef4:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019efb:	85 c0                	test   eax,eax
c0019efd:	74 09                	je     c0019f08 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019eff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f06:	74 48                	je     c0019f50 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	68 31 27 02 c0       	push   0xc0022731
c0019f10:	e8 f5 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f22:	85 c0                	test   eax,eax
c0019f24:	74 17                	je     c0019f3d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f26:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	68 51 27 02 c0       	push   0xc0022751
c0019f35:	e8 d0 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f44:	83 ec 0c             	sub    esp,0xc
c0019f47:	50                   	push   eax
c0019f48:	e8 1a cb fe ff       	call   c0006a67 <init_percd>
c0019f4d:	83 c4 10             	add    esp,0x10
c0019f50:	51                   	push   ecx
c0019f51:	83 c3 03             	add    ebx,0x3
c0019f54:	51                   	push   ecx
c0019f55:	6a 00                	push   0x0
c0019f57:	53                   	push   ebx
c0019f58:	e8 cd c5 fe ff       	call   c000652a <iso_open>
c0019f5d:	83 c4 10             	add    esp,0x10
c0019f60:	89 c2                	mov    edx,eax
c0019f62:	b8 01 00 00 00       	mov    eax,0x1
c0019f67:	83 fa ff             	cmp    edx,0xffffffff
c0019f6a:	74 10                	je     c0019f7c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f6c:	83 c2 32             	add    edx,0x32
c0019f6f:	31 c0                	xor    eax,eax
c0019f71:	01 d2                	add    edx,edx
c0019f73:	89 16                	mov    DWORD PTR [esi],edx
c0019f75:	eb 05                	jmp    c0019f7c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f77:	b8 04 00 00 00       	mov    eax,0x4
c0019f7c:	5a                   	pop    edx
c0019f7d:	5b                   	pop    ebx
c0019f7e:	5e                   	pop    esi
c0019f7f:	c3                   	ret    

c0019f80 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019f80:	53                   	push   ebx
c0019f81:	83 ec 08             	sub    esp,0x8
c0019f84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f8c:	85 c0                	test   eax,eax
c0019f8e:	74 2d                	je     c0019fbd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019f90:	85 db                	test   ebx,ebx
c0019f92:	74 29                	je     c0019fbd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019f94:	52                   	push   edx
c0019f95:	b9 02 00 00 00       	mov    ecx,0x2
c0019f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f9e:	99                   	cdq    
c0019f9f:	f7 f9                	idiv   ecx
c0019fa1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fa5:	83 e8 32             	sub    eax,0x32
c0019fa8:	50                   	push   eax
c0019fa9:	e8 24 c6 fe ff       	call   c00065d2 <iso_read>
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	89 03                	mov    DWORD PTR [ebx],eax
c0019fb3:	09 d0                	or     eax,edx
c0019fb5:	0f 94 c0             	sete   al
c0019fb8:	0f b6 c0             	movzx  eax,al
c0019fbb:	eb 05                	jmp    c0019fc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019fbd:	b8 04 00 00 00       	mov    eax,0x4
c0019fc2:	83 c4 08             	add    esp,0x8
c0019fc5:	5b                   	pop    ebx
c0019fc6:	c3                   	ret    
c0019fc7:	90                   	nop

c0019fc8 <ISO9660::seek(void*, unsigned long long)>:
c0019fc8:	57                   	push   edi
c0019fc9:	b8 04 00 00 00       	mov    eax,0x4
c0019fce:	56                   	push   esi
c0019fcf:	51                   	push   ecx
c0019fd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019fd4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fd8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fdc:	85 d2                	test   edx,edx
c0019fde:	74 26                	je     c001a006 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019fe0:	89 d0                	mov    eax,edx
c0019fe2:	b9 02 00 00 00       	mov    ecx,0x2
c0019fe7:	6a 00                	push   0x0
c0019fe9:	99                   	cdq    
c0019fea:	f7 f9                	idiv   ecx
c0019fec:	57                   	push   edi
c0019fed:	56                   	push   esi
c0019fee:	83 e8 32             	sub    eax,0x32
c0019ff1:	50                   	push   eax
c0019ff2:	e8 f1 c6 fe ff       	call   c00066e8 <iso_seek>
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	31 f0                	xor    eax,esi
c0019ffc:	31 fa                	xor    edx,edi
c0019ffe:	09 d0                	or     eax,edx
c001a000:	0f 95 c0             	setne  al
c001a003:	0f b6 c0             	movzx  eax,al
c001a006:	5a                   	pop    edx
c001a007:	5e                   	pop    esi
c001a008:	5f                   	pop    edi
c001a009:	c3                   	ret    

c001a00a <ISO9660::tell(void*, unsigned long long*)>:
c001a00a:	53                   	push   ebx
c001a00b:	83 ec 08             	sub    esp,0x8
c001a00e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a012:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a016:	85 c0                	test   eax,eax
c001a018:	74 24                	je     c001a03e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a01a:	85 db                	test   ebx,ebx
c001a01c:	74 20                	je     c001a03e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a01e:	b9 02 00 00 00       	mov    ecx,0x2
c001a023:	99                   	cdq    
c001a024:	f7 f9                	idiv   ecx
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	83 e8 32             	sub    eax,0x32
c001a02c:	50                   	push   eax
c001a02d:	e8 3a c7 fe ff       	call   c000676c <iso_tell>
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	89 03                	mov    DWORD PTR [ebx],eax
c001a037:	31 c0                	xor    eax,eax
c001a039:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a03c:	eb 05                	jmp    c001a043 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a03e:	b8 04 00 00 00       	mov    eax,0x4
c001a043:	83 c4 08             	add    esp,0x8
c001a046:	5b                   	pop    ebx
c001a047:	c3                   	ret    

c001a048 <ISO9660::stat(void*, unsigned long long*)>:
c001a048:	56                   	push   esi
c001a049:	53                   	push   ebx
c001a04a:	83 ec 10             	sub    esp,0x10
c001a04d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a051:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a055:	68 75 27 02 c0       	push   0xc0022775
c001a05a:	e8 ab 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a05f:	83 c4 10             	add    esp,0x10
c001a062:	85 db                	test   ebx,ebx
c001a064:	74 2a                	je     c001a090 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a066:	85 f6                	test   esi,esi
c001a068:	74 26                	je     c001a090 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a06a:	89 d8                	mov    eax,ebx
c001a06c:	b9 02 00 00 00       	mov    ecx,0x2
c001a071:	99                   	cdq    
c001a072:	83 ec 0c             	sub    esp,0xc
c001a075:	f7 f9                	idiv   ecx
c001a077:	83 e8 32             	sub    eax,0x32
c001a07a:	50                   	push   eax
c001a07b:	e8 1d c7 fe ff       	call   c000679d <iso_total>
c001a080:	83 c4 10             	add    esp,0x10
c001a083:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a08a:	89 06                	mov    DWORD PTR [esi],eax
c001a08c:	31 c0                	xor    eax,eax
c001a08e:	eb 05                	jmp    c001a095 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a090:	b8 04 00 00 00       	mov    eax,0x4
c001a095:	5a                   	pop    edx
c001a096:	5b                   	pop    ebx
c001a097:	5e                   	pop    esi
c001a098:	c3                   	ret    
c001a099:	90                   	nop

c001a09a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a09a:	55                   	push   ebp
c001a09b:	57                   	push   edi
c001a09c:	56                   	push   esi
c001a09d:	53                   	push   ebx
c001a09e:	83 ec 18             	sub    esp,0x18
c001a0a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a0a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a0a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0ad:	68 7d 27 02 c0       	push   0xc002277d
c001a0b2:	e8 53 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	85 ff                	test   edi,edi
c001a0bc:	0f 94 c0             	sete   al
c001a0bf:	85 f6                	test   esi,esi
c001a0c1:	0f 94 c2             	sete   dl
c001a0c4:	09 d0                	or     eax,edx
c001a0c6:	a8 01                	test   al,0x1
c001a0c8:	0f 85 dd 00 00 00    	jne    c001a1ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0ce:	85 db                	test   ebx,ebx
c001a0d0:	0f 84 d5 00 00 00    	je     c001a1ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a0d9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a0df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a0e6:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a0ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a0ef:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a0f5:	74 1b                	je     c001a112 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a0f7:	85 c0                	test   eax,eax
c001a0f9:	74 10                	je     c001a10b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a0fb:	83 ec 0c             	sub    esp,0xc
c001a0fe:	68 21 27 02 c0       	push   0xc0022721
c001a103:	e8 45 70 ff ff       	call   c001114d <KePanic(char const*)>
c001a108:	83 c4 10             	add    esp,0x10
c001a10b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a10d:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a112:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a115:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a11c:	85 c0                	test   eax,eax
c001a11e:	74 09                	je     c001a129 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a120:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a127:	74 51                	je     c001a17a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a129:	83 ec 0c             	sub    esp,0xc
c001a12c:	68 85 27 02 c0       	push   0xc0022785
c001a131:	e8 d4 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a136:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a144:	74 21                	je     c001a167 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a146:	83 ec 0c             	sub    esp,0xc
c001a149:	68 a5 27 02 c0       	push   0xc00227a5
c001a14e:	e8 b7 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a153:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a160:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a167:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a16e:	83 ec 0c             	sub    esp,0xc
c001a171:	50                   	push   eax
c001a172:	e8 f0 c8 fe ff       	call   c0006a67 <init_percd>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	52                   	push   edx
c001a17b:	83 c3 03             	add    ebx,0x3
c001a17e:	52                   	push   edx
c001a17f:	6a 00                	push   0x0
c001a181:	53                   	push   ebx
c001a182:	e8 a3 c3 fe ff       	call   c000652a <iso_open>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	83 f8 ff             	cmp    eax,0xffffffff
c001a18d:	89 c5                	mov    ebp,eax
c001a18f:	75 21                	jne    c001a1b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a191:	50                   	push   eax
c001a192:	50                   	push   eax
c001a193:	6a 01                	push   0x1
c001a195:	53                   	push   ebx
c001a196:	e8 8f c3 fe ff       	call   c000652a <iso_open>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	ba 02 00 00 00       	mov    edx,0x2
c001a1a3:	40                   	inc    eax
c001a1a4:	74 2b                	je     c001a1d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1a6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a1a9:	eb 24                	jmp    c001a1cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a1ab:	ba 04 00 00 00       	mov    edx,0x4
c001a1b0:	eb 1f                	jmp    c001a1d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1b2:	83 ec 0c             	sub    esp,0xc
c001a1b5:	50                   	push   eax
c001a1b6:	e8 e2 c5 fe ff       	call   c000679d <iso_total>
c001a1bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1c2:	89 07                	mov    DWORD PTR [edi],eax
c001a1c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1c7:	e8 e8 c3 fe ff       	call   c00065b4 <iso_close>
c001a1cc:	83 c4 10             	add    esp,0x10
c001a1cf:	31 d2                	xor    edx,edx
c001a1d1:	83 c4 0c             	add    esp,0xc
c001a1d4:	89 d0                	mov    eax,edx
c001a1d6:	5b                   	pop    ebx
c001a1d7:	5e                   	pop    esi
c001a1d8:	5f                   	pop    edi
c001a1d9:	5d                   	pop    ebp
c001a1da:	c3                   	ret    
c001a1db:	90                   	nop

c001a1dc <ISO9660::close(void*)>:
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	b8 04 00 00 00       	mov    eax,0x4
c001a1e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1e8:	85 d2                	test   edx,edx
c001a1ea:	74 1b                	je     c001a207 <ISO9660::close(void*)+0x2b>
c001a1ec:	89 d0                	mov    eax,edx
c001a1ee:	b9 02 00 00 00       	mov    ecx,0x2
c001a1f3:	99                   	cdq    
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	f7 f9                	idiv   ecx
c001a1f9:	83 e8 32             	sub    eax,0x32
c001a1fc:	50                   	push   eax
c001a1fd:	e8 b2 c3 fe ff       	call   c00065b4 <iso_close>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	31 c0                	xor    eax,eax
c001a207:	83 c4 0c             	add    esp,0xc
c001a20a:	c3                   	ret    
c001a20b:	90                   	nop

c001a20c <ISO9660::openDir(char const*, void**)>:
c001a20c:	56                   	push   esi
c001a20d:	53                   	push   ebx
c001a20e:	50                   	push   eax
c001a20f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a213:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a217:	85 db                	test   ebx,ebx
c001a219:	0f 84 bd 00 00 00    	je     c001a2dc <ISO9660::openDir(char const*, void**)+0xd0>
c001a21f:	85 f6                	test   esi,esi
c001a221:	0f 84 b5 00 00 00    	je     c001a2dc <ISO9660::openDir(char const*, void**)+0xd0>
c001a227:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a229:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a22f:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a236:	74 1b                	je     c001a253 <ISO9660::openDir(char const*, void**)+0x47>
c001a238:	85 c0                	test   eax,eax
c001a23a:	74 10                	je     c001a24c <ISO9660::openDir(char const*, void**)+0x40>
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	68 21 27 02 c0       	push   0xc0022721
c001a244:	e8 04 6f ff ff       	call   c001114d <KePanic(char const*)>
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a24e:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a253:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a256:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a25d:	85 c0                	test   eax,eax
c001a25f:	74 10                	je     c001a271 <ISO9660::openDir(char const*, void**)+0x65>
c001a261:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a268:	74 1a                	je     c001a284 <ISO9660::openDir(char const*, void**)+0x78>
c001a26a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a271:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a278:	83 ec 0c             	sub    esp,0xc
c001a27b:	50                   	push   eax
c001a27c:	e8 e6 c7 fe ff       	call   c0006a67 <init_percd>
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	50                   	push   eax
c001a285:	83 c3 03             	add    ebx,0x3
c001a288:	50                   	push   eax
c001a289:	6a 01                	push   0x1
c001a28b:	53                   	push   ebx
c001a28c:	e8 99 c2 fe ff       	call   c000652a <iso_open>
c001a291:	83 c4 10             	add    esp,0x10
c001a294:	83 f8 ff             	cmp    eax,0xffffffff
c001a297:	89 c3                	mov    ebx,eax
c001a299:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a29e:	75 1c                	jne    c001a2bc <ISO9660::openDir(char const*, void**)+0xb0>
c001a2a0:	53                   	push   ebx
c001a2a1:	53                   	push   ebx
c001a2a2:	68 c9 27 02 c0       	push   0xc00227c9
c001a2a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2ad:	e8 fa e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	b8 01 00 00 00       	mov    eax,0x1
c001a2ba:	eb 25                	jmp    c001a2e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a2bc:	51                   	push   ecx
c001a2bd:	01 db                	add    ebx,ebx
c001a2bf:	51                   	push   ecx
c001a2c0:	83 c3 65             	add    ebx,0x65
c001a2c3:	68 dc 27 02 c0       	push   0xc00227dc
c001a2c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2ce:	e8 d9 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2d3:	83 c4 10             	add    esp,0x10
c001a2d6:	31 c0                	xor    eax,eax
c001a2d8:	89 1e                	mov    DWORD PTR [esi],ebx
c001a2da:	eb 05                	jmp    c001a2e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a2dc:	b8 04 00 00 00       	mov    eax,0x4
c001a2e1:	5a                   	pop    edx
c001a2e2:	5b                   	pop    ebx
c001a2e3:	5e                   	pop    esi
c001a2e4:	c3                   	ret    
c001a2e5:	90                   	nop

c001a2e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a2e6:	55                   	push   ebp
c001a2e7:	57                   	push   edi
c001a2e8:	56                   	push   esi
c001a2e9:	53                   	push   ebx
c001a2ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2f0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a2f7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a2fe:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a305:	85 db                	test   ebx,ebx
c001a307:	0f 84 e4 00 00 00    	je     c001a3f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a30d:	85 ed                	test   ebp,ebp
c001a30f:	0f 84 dc 00 00 00    	je     c001a3f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	68 ef 27 02 c0       	push   0xc00227ef
c001a31d:	e8 e8 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a322:	89 d8                	mov    eax,ebx
c001a324:	b9 02 00 00 00       	mov    ecx,0x2
c001a329:	99                   	cdq    
c001a32a:	f7 f9                	idiv   ecx
c001a32c:	83 e8 32             	sub    eax,0x32
c001a32f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a332:	e8 b8 c4 fe ff       	call   c00067ef <iso_readdir>
c001a337:	83 c4 10             	add    esp,0x10
c001a33a:	85 c0                	test   eax,eax
c001a33c:	89 c3                	mov    ebx,eax
c001a33e:	75 38                	jne    c001a378 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a340:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a345:	53                   	push   ebx
c001a346:	53                   	push   ebx
c001a347:	68 fa 27 02 c0       	push   0xc00227fa
c001a34c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a352:	e8 55 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a357:	83 c4 0c             	add    esp,0xc
c001a35a:	68 10 01 00 00       	push   0x110
c001a35f:	6a 00                	push   0x0
c001a361:	57                   	push   edi
c001a362:	e8 89 61 fe ff       	call   c00004f0 <memset>
c001a367:	83 c4 10             	add    esp,0x10
c001a36a:	b8 01 00 00 00       	mov    eax,0x1
c001a36f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a376:	eb 7e                	jmp    c001a3f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a378:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a37e:	8d 70 08             	lea    esi,[eax+0x8]
c001a381:	83 ec 0c             	sub    esp,0xc
c001a384:	56                   	push   esi
c001a385:	e8 f6 61 fe ff       	call   c0000580 <strlen>
c001a38a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a392:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a396:	83 c4 10             	add    esp,0x10
c001a399:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a39d:	75 0a                	jne    c001a3a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a39f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a3a2:	b8 02 00 00 00       	mov    eax,0x2
c001a3a7:	74 05                	je     c001a3ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a3a9:	b8 01 00 00 00       	mov    eax,0x1
c001a3ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3b2:	50                   	push   eax
c001a3b3:	50                   	push   eax
c001a3b4:	56                   	push   esi
c001a3b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a3b9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a3bd:	50                   	push   eax
c001a3be:	e8 8d 62 fe ff       	call   c0000650 <strcpy>
c001a3c3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a3ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3cc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a3d3:	5a                   	pop    edx
c001a3d4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a3d9:	59                   	pop    ecx
c001a3da:	68 0d 28 02 c0       	push   0xc002280d
c001a3df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3e5:	e8 c2 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	31 c0                	xor    eax,eax
c001a3ef:	eb 05                	jmp    c001a3f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a3f1:	b8 04 00 00 00       	mov    eax,0x4
c001a3f6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3fc:	5b                   	pop    ebx
c001a3fd:	5e                   	pop    esi
c001a3fe:	5f                   	pop    edi
c001a3ff:	5d                   	pop    ebp
c001a400:	c3                   	ret    

c001a401 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a401:	57                   	push   edi
c001a402:	56                   	push   esi
c001a403:	53                   	push   ebx
c001a404:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a40c:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a412:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a416:	0f be cb             	movsx  ecx,bl
c001a419:	75 0b                	jne    c001a426 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a41b:	0f be 05 40 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023640
c001a422:	39 c8                	cmp    eax,ecx
c001a424:	74 47                	je     c001a46d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a426:	83 ec 0c             	sub    esp,0xc
c001a429:	31 d2                	xor    edx,edx
c001a42b:	68 40 a6 02 c0       	push   0xc002a640
c001a430:	6a 01                	push   0x1
c001a432:	52                   	push   edx
c001a433:	56                   	push   esi
c001a434:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a43b:	e8 7e 35 ff ff       	call   c000d9be <LogicalDisk::read(unsigned long long, int, void*)>
c001a440:	83 c4 20             	add    esp,0x20
c001a443:	85 c0                	test   eax,eax
c001a445:	75 0e                	jne    c001a455 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a447:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a44d:	88 1d 40 36 02 c0    	mov    BYTE PTR ds:0xc0023640,bl
c001a453:	eb 18                	jmp    c001a46d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a455:	50                   	push   eax
c001a456:	68 00 08 00 00       	push   0x800
c001a45b:	6a 00                	push   0x0
c001a45d:	57                   	push   edi
c001a45e:	e8 8d 60 fe ff       	call   c00004f0 <memset>
c001a463:	83 c4 10             	add    esp,0x10
c001a466:	b8 01 00 00 00       	mov    eax,0x1
c001a46b:	eb 0e                	jmp    c001a47b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a46d:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a472:	b9 00 08 00 00       	mov    ecx,0x800
c001a477:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a479:	31 c0                	xor    eax,eax
c001a47b:	5b                   	pop    ebx
c001a47c:	5e                   	pop    esi
c001a47d:	5f                   	pop    edi
c001a47e:	c3                   	ret    
c001a47f:	90                   	nop

c001a480 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a480:	53                   	push   ebx
c001a481:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a487:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a491:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a498:	8d 58 41             	lea    ebx,[eax+0x41]
c001a49b:	0f be db             	movsx  ebx,bl
c001a49e:	53                   	push   ebx
c001a49f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4a3:	50                   	push   eax
c001a4a4:	6a 10                	push   0x10
c001a4a6:	e8 56 ff ff ff       	call   c001a401 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	31 d2                	xor    edx,edx
c001a4b0:	85 c0                	test   eax,eax
c001a4b2:	75 33                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4b4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a4b9:	75 2c                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4bb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a4c0:	75 25                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4c2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a4c7:	75 1e                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4c9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a4ce:	75 17                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4d0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a4d5:	75 10                	jne    c001a4e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4d7:	83 ec 0c             	sub    esp,0xc
c001a4da:	53                   	push   ebx
c001a4db:	e8 87 c5 fe ff       	call   c0006a67 <init_percd>
c001a4e0:	83 c4 10             	add    esp,0x10
c001a4e3:	40                   	inc    eax
c001a4e4:	0f 95 c2             	setne  dl
c001a4e7:	81 c4 08 08 00 00    	add    esp,0x808
c001a4ed:	88 d0                	mov    al,dl
c001a4ef:	5b                   	pop    ebx
c001a4f0:	c3                   	ret    
c001a4f1:	90                   	nop

c001a4f2 <ISO9660::ISO9660()>:
c001a4f2:	83 ec 0c             	sub    esp,0xc
c001a4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f9:	83 ec 0c             	sub    esp,0xc
c001a4fc:	50                   	push   eax
c001a4fd:	e8 3e 0f ff ff       	call   c000b440 <Filesystem::Filesystem()>
c001a502:	83 c4 10             	add    esp,0x10
c001a505:	ba 28 28 02 c0       	mov    edx,0xc0022828
c001a50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a50e:	89 10                	mov    DWORD PTR [eax],edx
c001a510:	e8 64 c6 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a515:	90                   	nop
c001a516:	83 c4 0c             	add    esp,0xc
c001a519:	c3                   	ret    

c001a51a <SoundCard::beginPlayback()>:
c001a51a:	c7 44 24 04 8c 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc002288c
c001a522:	e9 26 6c ff ff       	jmp    c001114d <KePanic(char const*)>
c001a527:	90                   	nop

c001a528 <SoundCard::stopPlayback()>:
c001a528:	c7 44 24 04 8c 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc002288c
c001a530:	e9 18 6c ff ff       	jmp    c001114d <KePanic(char const*)>
c001a535:	90                   	nop

c001a536 <SoundCard::SoundCard(char const*)>:
c001a536:	83 ec 1c             	sub    esp,0x1c
c001a539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a53d:	83 ec 08             	sub    esp,0x8
c001a540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a544:	50                   	push   eax
c001a545:	e8 22 22 ff ff       	call   c000c76c <Device::Device(char const*)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	ba d8 28 02 c0       	mov    edx,0xc00228d8
c001a552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a556:	89 10                	mov    DWORD PTR [eax],edx
c001a558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a55c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a567:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a575:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a57f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a583:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a591:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a59b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5a3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a5a8:	7f 1a                	jg     c001a5c4 <SoundCard::SoundCard(char const*)+0x8e>
c001a5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5b2:	83 c2 54             	add    edx,0x54
c001a5b5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a5bd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a5c2:	eb df                	jmp    c001a5a3 <SoundCard::SoundCard(char const*)+0x6d>
c001a5c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5cf:	90                   	nop
c001a5d0:	83 c4 1c             	add    esp,0x1c
c001a5d3:	c3                   	ret    

c001a5d4 <SoundCard::~SoundCard()>:
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	ba d8 28 02 c0       	mov    edx,0xc00228d8
c001a5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e0:	89 10                	mov    DWORD PTR [eax],edx
c001a5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e6:	83 ec 0c             	sub    esp,0xc
c001a5e9:	50                   	push   eax
c001a5ea:	e8 e7 1e ff ff       	call   c000c4d6 <Device::~Device()>
c001a5ef:	83 c4 10             	add    esp,0x10
c001a5f2:	90                   	nop
c001a5f3:	83 c4 0c             	add    esp,0xc
c001a5f6:	c3                   	ret    
c001a5f7:	90                   	nop

c001a5f8 <SoundCard::~SoundCard()>:
c001a5f8:	83 ec 0c             	sub    esp,0xc
c001a5fb:	83 ec 0c             	sub    esp,0xc
c001a5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a602:	e8 cd ff ff ff       	call   c001a5d4 <SoundCard::~SoundCard()>
c001a607:	83 c4 10             	add    esp,0x10
c001a60a:	83 ec 08             	sub    esp,0x8
c001a60d:	68 e8 01 00 00       	push   0x1e8
c001a612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a616:	e8 f1 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	83 c4 0c             	add    esp,0xc
c001a621:	c3                   	ret    

c001a622 <SoundCard::configureRates(int, int, int)>:
c001a622:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a626:	31 c0                	xor    eax,eax
c001a628:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a62f:	75 20                	jne    c001a651 <SoundCard::configureRates(int, int, int)+0x2f>
c001a631:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a635:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a63b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a63f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a649:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a64f:	b0 01                	mov    al,0x1
c001a651:	c3                   	ret    

c001a652 <SoundCard::getSamples16(int, short*)>:
c001a652:	55                   	push   ebp
c001a653:	57                   	push   edi
c001a654:	31 ff                	xor    edi,edi
c001a656:	56                   	push   esi
c001a657:	53                   	push   ebx
c001a658:	31 db                	xor    ebx,ebx
c001a65a:	83 ec 10             	sub    esp,0x10
c001a65d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a661:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a665:	8d 04 36             	lea    eax,[esi+esi*1]
c001a668:	50                   	push   eax
c001a669:	6a 00                	push   0x0
c001a66b:	55                   	push   ebp
c001a66c:	e8 7f 5e fe ff       	call   c00004f0 <memset>
c001a671:	83 c4 10             	add    esp,0x10
c001a674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a678:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a67f:	85 c0                	test   eax,eax
c001a681:	74 1a                	je     c001a69d <SoundCard::getSamples16(int, short*)+0x4b>
c001a683:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a687:	75 14                	jne    c001a69d <SoundCard::getSamples16(int, short*)+0x4b>
c001a689:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a68d:	55                   	push   ebp
c001a68e:	56                   	push   esi
c001a68f:	50                   	push   eax
c001a690:	e8 f3 02 00 00       	call   c001a988 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	39 c3                	cmp    ebx,eax
c001a69a:	0f 4c d8             	cmovl  ebx,eax
c001a69d:	47                   	inc    edi
c001a69e:	83 ff 20             	cmp    edi,0x20
c001a6a1:	75 d1                	jne    c001a674 <SoundCard::getSamples16(int, short*)+0x22>
c001a6a3:	83 c4 0c             	add    esp,0xc
c001a6a6:	89 d8                	mov    eax,ebx
c001a6a8:	5b                   	pop    ebx
c001a6a9:	5e                   	pop    esi
c001a6aa:	5f                   	pop    edi
c001a6ab:	5d                   	pop    ebp
c001a6ac:	c3                   	ret    
c001a6ad:	90                   	nop

c001a6ae <SoundCard::getSamples32(int, int*)>:
c001a6ae:	55                   	push   ebp
c001a6af:	57                   	push   edi
c001a6b0:	31 ff                	xor    edi,edi
c001a6b2:	56                   	push   esi
c001a6b3:	31 f6                	xor    esi,esi
c001a6b5:	53                   	push   ebx
c001a6b6:	83 ec 10             	sub    esp,0x10
c001a6b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6bd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6c1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6c5:	c1 e0 02             	shl    eax,0x2
c001a6c8:	50                   	push   eax
c001a6c9:	6a 00                	push   0x0
c001a6cb:	55                   	push   ebp
c001a6cc:	e8 1f 5e fe ff       	call   c00004f0 <memset>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a6db:	85 c0                	test   eax,eax
c001a6dd:	74 1a                	je     c001a6f9 <SoundCard::getSamples32(int, int*)+0x4b>
c001a6df:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6e3:	75 14                	jne    c001a6f9 <SoundCard::getSamples32(int, int*)+0x4b>
c001a6e5:	53                   	push   ebx
c001a6e6:	55                   	push   ebp
c001a6e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6eb:	50                   	push   eax
c001a6ec:	e8 67 03 00 00       	call   c001aa58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a6f1:	83 c4 10             	add    esp,0x10
c001a6f4:	39 c6                	cmp    esi,eax
c001a6f6:	0f 4c f0             	cmovl  esi,eax
c001a6f9:	47                   	inc    edi
c001a6fa:	83 ff 20             	cmp    edi,0x20
c001a6fd:	75 d5                	jne    c001a6d4 <SoundCard::getSamples32(int, int*)+0x26>
c001a6ff:	85 f6                	test   esi,esi
c001a701:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a708:	75 0f                	jne    c001a719 <SoundCard::getSamples32(int, int*)+0x6b>
c001a70a:	85 c0                	test   eax,eax
c001a70c:	74 1b                	je     c001a729 <SoundCard::getSamples32(int, int*)+0x7b>
c001a70e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	53                   	push   ebx
c001a714:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a717:	eb 0d                	jmp    c001a726 <SoundCard::getSamples32(int, int*)+0x78>
c001a719:	85 c0                	test   eax,eax
c001a71b:	75 0c                	jne    c001a729 <SoundCard::getSamples32(int, int*)+0x7b>
c001a71d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	53                   	push   ebx
c001a723:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	83 c4 0c             	add    esp,0xc
c001a72c:	89 f0                	mov    eax,esi
c001a72e:	5b                   	pop    ebx
c001a72f:	5e                   	pop    esi
c001a730:	5f                   	pop    edi
c001a731:	5d                   	pop    ebp
c001a732:	c3                   	ret    
c001a733:	90                   	nop

c001a734 <SoundCard::addChannel(SoundPort*)>:
c001a734:	83 ec 0c             	sub    esp,0xc
c001a737:	31 c0                	xor    eax,eax
c001a739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a73d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a745:	74 1b                	je     c001a762 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a747:	40                   	inc    eax
c001a748:	83 f8 20             	cmp    eax,0x20
c001a74b:	75 f0                	jne    c001a73d <SoundCard::addChannel(SoundPort*)+0x9>
c001a74d:	83 ec 0c             	sub    esp,0xc
c001a750:	68 b1 28 02 c0       	push   0xc00228b1
c001a755:	e8 f3 69 ff ff       	call   c001114d <KePanic(char const*)>
c001a75a:	83 c4 10             	add    esp,0x10
c001a75d:	83 c8 ff             	or     eax,0xffffffff
c001a760:	eb 0b                	jmp    c001a76d <SoundCard::addChannel(SoundPort*)+0x39>
c001a762:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a766:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a76d:	83 c4 0c             	add    esp,0xc
c001a770:	c3                   	ret    
c001a771:	90                   	nop

c001a772 <SoundCard::removeChannel(int)>:
c001a772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a77a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a785:	c3                   	ret    
c001a786:	66 90                	xchg   ax,ax

c001a788 <SoundPort::SoundPort(int, int, int, int)>:
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a78f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a79a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7a6:	89 10                	mov    DWORD PTR [eax],edx
c001a7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a7be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a7c3:	75 13                	jne    c001a7d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7cb:	05 a0 0f 00 00       	add    eax,0xfa0
c001a7d0:	d1 e0                	shl    eax,1
c001a7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7d6:	66 90                	xchg   ax,ax
c001a7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a7e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a7f5:	c1 e0 02             	shl    eax,0x2
c001a7f8:	83 ec 0c             	sub    esp,0xc
c001a7fb:	50                   	push   eax
c001a7fc:	e8 d2 d2 fe ff       	call   c0007ad3 <malloc>
c001a801:	83 c4 10             	add    esp,0x10
c001a804:	89 c2                	mov    edx,eax
c001a806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a80d:	90                   	nop
c001a80e:	83 c4 0c             	add    esp,0xc
c001a811:	c3                   	ret    
c001a812:	66 90                	xchg   ax,ax

c001a814 <SoundPort::~SoundPort()>:
c001a814:	83 ec 0c             	sub    esp,0xc
c001a817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a81e:	85 c0                	test   eax,eax
c001a820:	74 1e                	je     c001a840 <SoundPort::~SoundPort()+0x2c>
c001a822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a826:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a829:	83 ec 0c             	sub    esp,0xc
c001a82c:	50                   	push   eax
c001a82d:	e8 b1 d2 fe ff       	call   c0007ae3 <free>
c001a832:	83 c4 10             	add    esp,0x10
c001a835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a839:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a840:	90                   	nop
c001a841:	83 c4 0c             	add    esp,0xc
c001a844:	c3                   	ret    
c001a845:	90                   	nop
c001a846:	66 90                	xchg   ax,ax

c001a848 <SoundPort::unpause()>:
c001a848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a84c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a850:	c3                   	ret    
c001a851:	90                   	nop
c001a852:	66 90                	xchg   ax,ax

c001a854 <SoundPort::pause()>:
c001a854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a858:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a85c:	c3                   	ret    
c001a85d:	90                   	nop
c001a85e:	66 90                	xchg   ax,ax

c001a860 <SoundPort::getBufferUsed()>:
c001a860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a864:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a867:	c3                   	ret    

c001a868 <SoundPort::getBufferSize()>:
c001a868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a86c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a86f:	c3                   	ret    

c001a870 <SoundPort::buffer16(short*, int)>:
c001a870:	55                   	push   ebp
c001a871:	57                   	push   edi
c001a872:	56                   	push   esi
c001a873:	53                   	push   ebx
c001a874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a878:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a87c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a87f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a882:	74 68                	je     c001a8ec <SoundPort::buffer16(short*, int)+0x7c>
c001a884:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a888:	85 c9                	test   ecx,ecx
c001a88a:	7e 60                	jle    c001a8ec <SoundPort::buffer16(short*, int)+0x7c>
c001a88c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a890:	8d 70 01             	lea    esi,[eax+0x1]
c001a893:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a896:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a899:	c1 e1 0f             	shl    ecx,0xf
c001a89c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a89f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8a2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8a5:	74 4d                	je     c001a8f4 <SoundPort::buffer16(short*, int)+0x84>
c001a8a7:	31 f6                	xor    esi,esi
c001a8a9:	eb 21                	jmp    c001a8cc <SoundPort::buffer16(short*, int)+0x5c>
c001a8ab:	90                   	nop
c001a8ac:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a8b1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a8b4:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a8b7:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a8ba:	c1 e3 0f             	shl    ebx,0xf
c001a8bd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a8c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8c6:	74 1c                	je     c001a8e4 <SoundPort::buffer16(short*, int)+0x74>
c001a8c8:	89 c6                	mov    esi,eax
c001a8ca:	66 90                	xchg   ax,ax
c001a8cc:	8d 46 01             	lea    eax,[esi+0x1]
c001a8cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a8d3:	75 d7                	jne    c001a8ac <SoundPort::buffer16(short*, int)+0x3c>
c001a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8dc:	5b                   	pop    ebx
c001a8dd:	5e                   	pop    esi
c001a8de:	5f                   	pop    edi
c001a8df:	5d                   	pop    ebp
c001a8e0:	c3                   	ret    
c001a8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e4:	5b                   	pop    ebx
c001a8e5:	8d 46 02             	lea    eax,[esi+0x2]
c001a8e8:	5e                   	pop    esi
c001a8e9:	5f                   	pop    edi
c001a8ea:	5d                   	pop    ebp
c001a8eb:	c3                   	ret    
c001a8ec:	5b                   	pop    ebx
c001a8ed:	31 c0                	xor    eax,eax
c001a8ef:	5e                   	pop    esi
c001a8f0:	5f                   	pop    edi
c001a8f1:	5d                   	pop    ebp
c001a8f2:	c3                   	ret    
c001a8f3:	90                   	nop
c001a8f4:	b8 01 00 00 00       	mov    eax,0x1
c001a8f9:	eb e1                	jmp    c001a8dc <SoundPort::buffer16(short*, int)+0x6c>
c001a8fb:	90                   	nop

c001a8fc <SoundPort::buffer32(int*, int)>:
c001a8fc:	55                   	push   ebp
c001a8fd:	57                   	push   edi
c001a8fe:	56                   	push   esi
c001a8ff:	53                   	push   ebx
c001a900:	83 ec 04             	sub    esp,0x4
c001a903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a90b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a90f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a912:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a915:	89 04 24             	mov    DWORD PTR [esp],eax
c001a918:	74 5a                	je     c001a974 <SoundPort::buffer32(int*, int)+0x78>
c001a91a:	85 c0                	test   eax,eax
c001a91c:	7e 56                	jle    c001a974 <SoundPort::buffer32(int*, int)+0x78>
c001a91e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a921:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a924:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a927:	8b 37                	mov    esi,DWORD PTR [edi]
c001a929:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a92c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a92f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a932:	74 4c                	je     c001a980 <SoundPort::buffer32(int*, int)+0x84>
c001a934:	31 f6                	xor    esi,esi
c001a936:	eb 1c                	jmp    c001a954 <SoundPort::buffer32(int*, int)+0x58>
c001a938:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a93b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a93e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a941:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a944:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a948:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a94b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a94e:	74 18                	je     c001a968 <SoundPort::buffer32(int*, int)+0x6c>
c001a950:	89 de                	mov    esi,ebx
c001a952:	66 90                	xchg   ax,ax
c001a954:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a957:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a95a:	75 dc                	jne    c001a938 <SoundPort::buffer32(int*, int)+0x3c>
c001a95c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a95f:	90                   	nop
c001a960:	83 c4 04             	add    esp,0x4
c001a963:	5b                   	pop    ebx
c001a964:	5e                   	pop    esi
c001a965:	5f                   	pop    edi
c001a966:	5d                   	pop    ebp
c001a967:	c3                   	ret    
c001a968:	8d 46 02             	lea    eax,[esi+0x2]
c001a96b:	83 c4 04             	add    esp,0x4
c001a96e:	5b                   	pop    ebx
c001a96f:	5e                   	pop    esi
c001a970:	5f                   	pop    edi
c001a971:	5d                   	pop    ebp
c001a972:	c3                   	ret    
c001a973:	90                   	nop
c001a974:	83 c4 04             	add    esp,0x4
c001a977:	31 c0                	xor    eax,eax
c001a979:	5b                   	pop    ebx
c001a97a:	5e                   	pop    esi
c001a97b:	5f                   	pop    edi
c001a97c:	5d                   	pop    ebp
c001a97d:	c3                   	ret    
c001a97e:	66 90                	xchg   ax,ax
c001a980:	b8 01 00 00 00       	mov    eax,0x1
c001a985:	eb d9                	jmp    c001a960 <SoundPort::buffer32(int*, int)+0x64>
c001a987:	90                   	nop

c001a988 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a988:	55                   	push   ebp
c001a989:	57                   	push   edi
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a993:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a997:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a99b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a99f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a9a5:	39 03                	cmp    DWORD PTR [ebx],eax
c001a9a7:	74 13                	je     c001a9bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a9a9:	83 ec 0c             	sub    esp,0xc
c001a9ac:	68 04 29 02 c0       	push   0xc0022904
c001a9b1:	e8 97 67 ff ff       	call   c001114d <KePanic(char const*)>
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a9c2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a9c5:	74 11                	je     c001a9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	68 43 29 02 c0       	push   0xc0022943
c001a9cf:	e8 79 67 ff ff       	call   c001114d <KePanic(char const*)>
c001a9d4:	83 c4 10             	add    esp,0x10
c001a9d7:	90                   	nop
c001a9d8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a9de:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a9e1:	74 11                	je     c001a9f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	68 43 29 02 c0       	push   0xc0022943
c001a9eb:	e8 5d 67 ff ff       	call   c001114d <KePanic(char const*)>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	90                   	nop
c001a9f4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001a9f7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001a9fb:	85 f6                	test   esi,esi
c001a9fd:	7e 2d                	jle    c001aa2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001a9ff:	31 c0                	xor    eax,eax
c001aa01:	8d 76 00             	lea    esi,[esi+0x0]
c001aa04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa07:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa0a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa10:	85 c9                	test   ecx,ecx
c001aa12:	0f 49 d1             	cmovns edx,ecx
c001aa15:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aa19:	c1 fa 0f             	sar    edx,0xf
c001aa1c:	01 d1                	add    ecx,edx
c001aa1e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aa22:	83 c0 01             	add    eax,0x1
c001aa25:	39 f0                	cmp    eax,esi
c001aa27:	75 db                	jne    c001aa04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aa29:	8d 76 00             	lea    esi,[esi+0x0]
c001aa2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa2f:	83 ec 04             	sub    esp,0x4
c001aa32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa35:	29 f0                	sub    eax,esi
c001aa37:	c1 e0 02             	shl    eax,0x2
c001aa3a:	50                   	push   eax
c001aa3b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa3e:	50                   	push   eax
c001aa3f:	52                   	push   edx
c001aa40:	e8 8b 59 fe ff       	call   c00003d0 <memmove>
c001aa45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa48:	29 f0                	sub    eax,esi
c001aa4a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aa4d:	83 c4 1c             	add    esp,0x1c
c001aa50:	89 f0                	mov    eax,esi
c001aa52:	5b                   	pop    ebx
c001aa53:	5e                   	pop    esi
c001aa54:	5f                   	pop    edi
c001aa55:	5d                   	pop    ebp
c001aa56:	c3                   	ret    
c001aa57:	90                   	nop

c001aa58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aa58:	55                   	push   ebp
c001aa59:	57                   	push   edi
c001aa5a:	56                   	push   esi
c001aa5b:	53                   	push   ebx
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa67:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aa6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aa6f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa75:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa77:	74 13                	je     c001aa8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aa79:	83 ec 0c             	sub    esp,0xc
c001aa7c:	68 24 29 02 c0       	push   0xc0022924
c001aa81:	e8 c7 66 ff ff       	call   c001114d <KePanic(char const*)>
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	8d 76 00             	lea    esi,[esi+0x0]
c001aa8c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aa92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa95:	74 11                	je     c001aaa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001aa97:	83 ec 0c             	sub    esp,0xc
c001aa9a:	68 5f 29 02 c0       	push   0xc002295f
c001aa9f:	e8 a9 66 ff ff       	call   c001114d <KePanic(char const*)>
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	90                   	nop
c001aaa8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aaae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aab1:	74 11                	je     c001aac4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001aab3:	83 ec 0c             	sub    esp,0xc
c001aab6:	68 5f 29 02 c0       	push   0xc002295f
c001aabb:	e8 8d 66 ff ff       	call   c001114d <KePanic(char const*)>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	90                   	nop
c001aac4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001aac7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001aacb:	85 ff                	test   edi,edi
c001aacd:	7e 21                	jle    c001aaf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001aacf:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001aad6:	31 c0                	xor    eax,eax
c001aad8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aadb:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001aade:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001aae1:	01 d5                	add    ebp,edx
c001aae3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001aae6:	83 c0 04             	add    eax,0x4
c001aae9:	39 c1                	cmp    ecx,eax
c001aaeb:	75 eb                	jne    c001aad8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001aaed:	8d 76 00             	lea    esi,[esi+0x0]
c001aaf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aaf3:	83 ec 04             	sub    esp,0x4
c001aaf6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aaf9:	29 f8                	sub    eax,edi
c001aafb:	c1 e0 02             	shl    eax,0x2
c001aafe:	50                   	push   eax
c001aaff:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab02:	50                   	push   eax
c001ab03:	52                   	push   edx
c001ab04:	e8 c7 58 fe ff       	call   c00003d0 <memmove>
c001ab09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab0c:	29 f8                	sub    eax,edi
c001ab0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab11:	83 c4 1c             	add    esp,0x1c
c001ab14:	89 f8                	mov    eax,edi
c001ab16:	5b                   	pop    ebx
c001ab17:	5e                   	pop    esi
c001ab18:	5f                   	pop    edi
c001ab19:	5d                   	pop    ebp
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <PCI::open(int, int, void*)>:
c001ab1c:	83 ec 18             	sub    esp,0x18
c001ab1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab2d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab2f:	50                   	push   eax
c001ab30:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab33:	31 c0                	xor    eax,eax
c001ab35:	83 c4 1c             	add    esp,0x1c
c001ab38:	c3                   	ret    
c001ab39:	90                   	nop

c001ab3a <PCI::close(int, int, void*)>:
c001ab3a:	31 c0                	xor    eax,eax
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop

c001ab3e <PCI::PCI()>:
c001ab3e:	83 ec 0c             	sub    esp,0xc
c001ab41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab45:	83 ec 08             	sub    esp,0x8
c001ab48:	68 7b 29 02 c0       	push   0xc002297b
c001ab4d:	50                   	push   eax
c001ab4e:	e8 dd 13 ff ff       	call   c000bf30 <Bus::Bus(char const*)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	ba 24 2a 02 c0       	mov    edx,0xc0022a24
c001ab5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5f:	89 10                	mov    DWORD PTR [eax],edx
c001ab61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab65:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab73:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001ab78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ab82:	0f b6 d0             	movzx  edx,al
c001ab85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab89:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ab90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ab9a:	0f b6 d0             	movzx  edx,al
c001ab9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abb0:	8d 50 01             	lea    edx,[eax+0x1]
c001abb3:	88 d1                	mov    cl,dl
c001abb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abb9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001abbf:	0f b6 d0             	movzx  edx,al
c001abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001abca:	83 c9 c0             	or     ecx,0xffffffc0
c001abcd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001abd1:	90                   	nop
c001abd2:	83 c4 0c             	add    esp,0xc
c001abd5:	c3                   	ret    

c001abd6 <PCI::readBAR8(unsigned int, int)>:
c001abd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abde:	f6 c2 01             	test   dl,0x1
c001abe1:	74 07                	je     c001abea <PCI::readBAR8(unsigned int, int)+0x14>
c001abe3:	83 e2 fc             	and    edx,0xfffffffc
c001abe6:	01 c2                	add    edx,eax
c001abe8:	ec                   	in     al,dx
c001abe9:	c3                   	ret    
c001abea:	83 e2 f0             	and    edx,0xfffffff0
c001abed:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001abf0:	c3                   	ret    
c001abf1:	90                   	nop

c001abf2 <PCI::readBAR16(unsigned int, int)>:
c001abf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abfa:	f6 c2 01             	test   dl,0x1
c001abfd:	74 08                	je     c001ac07 <PCI::readBAR16(unsigned int, int)+0x15>
c001abff:	83 e2 fc             	and    edx,0xfffffffc
c001ac02:	01 c2                	add    edx,eax
c001ac04:	66 ed                	in     ax,dx
c001ac06:	c3                   	ret    
c001ac07:	83 e2 f0             	and    edx,0xfffffff0
c001ac0a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <PCI::readBAR32(unsigned int, int)>:
c001ac10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac18:	f6 c2 01             	test   dl,0x1
c001ac1b:	74 07                	je     c001ac24 <PCI::readBAR32(unsigned int, int)+0x14>
c001ac1d:	83 e2 fc             	and    edx,0xfffffffc
c001ac20:	01 c2                	add    edx,eax
c001ac22:	ed                   	in     eax,dx
c001ac23:	c3                   	ret    
c001ac24:	83 e2 f0             	and    edx,0xfffffff0
c001ac27:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac2a:	c3                   	ret    
c001ac2b:	90                   	nop

c001ac2c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac38:	f6 c2 01             	test   dl,0x1
c001ac3b:	74 07                	je     c001ac44 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac3d:	83 e2 fc             	and    edx,0xfffffffc
c001ac40:	01 ca                	add    edx,ecx
c001ac42:	ee                   	out    dx,al
c001ac43:	c3                   	ret    
c001ac44:	83 e2 f0             	and    edx,0xfffffff0
c001ac47:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ac4a:	c3                   	ret    
c001ac4b:	90                   	nop

c001ac4c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ac4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac58:	f6 c2 01             	test   dl,0x1
c001ac5b:	74 08                	je     c001ac65 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ac5d:	83 e2 fc             	and    edx,0xfffffffc
c001ac60:	01 ca                	add    edx,ecx
c001ac62:	66 ef                	out    dx,ax
c001ac64:	c3                   	ret    
c001ac65:	83 e2 f0             	and    edx,0xfffffff0
c001ac68:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ac6c:	c3                   	ret    
c001ac6d:	90                   	nop

c001ac6e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ac6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac7a:	f6 c2 01             	test   dl,0x1
c001ac7d:	74 07                	je     c001ac86 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ac7f:	83 e2 fc             	and    edx,0xfffffffc
c001ac82:	01 ca                	add    edx,ecx
c001ac84:	ef                   	out    dx,eax
c001ac85:	c3                   	ret    
c001ac86:	83 e2 f0             	and    edx,0xfffffff0
c001ac89:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ac8c:	c3                   	ret    
c001ac8d:	90                   	nop

c001ac8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ac8e:	55                   	push   ebp
c001ac8f:	57                   	push   edi
c001ac90:	56                   	push   esi
c001ac91:	53                   	push   ebx
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ac9a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ac9e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001aca2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aca6:	83 fe 07             	cmp    esi,0x7
c001aca9:	76 10                	jbe    c001acbb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001acab:	83 ec 0c             	sub    esp,0xc
c001acae:	68 83 29 02 c0       	push   0xc0022983
c001acb3:	e8 95 64 ff ff       	call   c001114d <KePanic(char const*)>
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	0f b6 db             	movzx  ebx,bl
c001acbe:	83 fb 0f             	cmp    ebx,0xf
c001acc1:	76 10                	jbe    c001acd3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001acc3:	83 ec 0c             	sub    esp,0xc
c001acc6:	68 b3 29 02 c0       	push   0xc00229b3
c001accb:	e8 7d 64 ff ff       	call   c001114d <KePanic(char const*)>
c001acd0:	83 c4 10             	add    esp,0x10
c001acd3:	8d 04 36             	lea    eax,[esi+esi*1]
c001acd6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acdb:	83 c8 f0             	or     eax,0xfffffff0
c001acde:	ee                   	out    dx,al
c001acdf:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ace4:	89 e8                	mov    eax,ebp
c001ace6:	ee                   	out    dx,al
c001ace7:	89 f9                	mov    ecx,edi
c001ace9:	89 d8                	mov    eax,ebx
c001aceb:	0f b6 d9             	movzx  ebx,cl
c001acee:	83 c4 0c             	add    esp,0xc
c001acf1:	c1 e0 08             	shl    eax,0x8
c001acf4:	83 e3 fc             	and    ebx,0xfffffffc
c001acf7:	09 d8                	or     eax,ebx
c001acf9:	5b                   	pop    ebx
c001acfa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001acff:	5e                   	pop    esi
c001ad00:	5f                   	pop    edi
c001ad01:	5d                   	pop    ebp
c001ad02:	c3                   	ret    
c001ad03:	90                   	nop

c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad04:	57                   	push   edi
c001ad05:	56                   	push   esi
c001ad06:	53                   	push   ebx
c001ad07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad17:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad21:	83 ff 01             	cmp    edi,0x1
c001ad24:	75 3f                	jne    c001ad65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad26:	89 de                	mov    esi,ebx
c001ad28:	0f b6 c0             	movzx  eax,al
c001ad2b:	c1 e0 10             	shl    eax,0x10
c001ad2e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad34:	0f b6 c9             	movzx  ecx,cl
c001ad37:	09 f0                	or     eax,esi
c001ad39:	c1 e1 08             	shl    ecx,0x8
c001ad3c:	0f b6 d2             	movzx  edx,dl
c001ad3f:	c1 e2 0b             	shl    edx,0xb
c001ad42:	09 c8                	or     eax,ecx
c001ad44:	09 d0                	or     eax,edx
c001ad46:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad4b:	0d 00 00 00 80       	or     eax,0x80000000
c001ad50:	ef                   	out    dx,eax
c001ad51:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad56:	ed                   	in     eax,dx
c001ad57:	83 e3 02             	and    ebx,0x2
c001ad5a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ad61:	d3 e8                	shr    eax,cl
c001ad63:	eb 44                	jmp    c001ada9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ad65:	83 ff 02             	cmp    edi,0x2
c001ad68:	75 2d                	jne    c001ad97 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ad6a:	83 ec 0c             	sub    esp,0xc
c001ad6d:	0f b6 fb             	movzx  edi,bl
c001ad70:	57                   	push   edi
c001ad71:	0f b6 c9             	movzx  ecx,cl
c001ad74:	51                   	push   ecx
c001ad75:	0f b6 d2             	movzx  edx,dl
c001ad78:	52                   	push   edx
c001ad79:	0f b6 c0             	movzx  eax,al
c001ad7c:	50                   	push   eax
c001ad7d:	56                   	push   esi
c001ad7e:	e8 0b ff ff ff       	call   c001ac8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad83:	89 c2                	mov    edx,eax
c001ad85:	ed                   	in     eax,dx
c001ad86:	83 e3 02             	and    ebx,0x2
c001ad89:	83 c4 20             	add    esp,0x20
c001ad8c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ad93:	d3 e8                	shr    eax,cl
c001ad95:	eb 12                	jmp    c001ada9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ad97:	83 ec 0c             	sub    esp,0xc
c001ad9a:	68 e3 29 02 c0       	push   0xc00229e3
c001ad9f:	e8 a9 63 ff ff       	call   c001114d <KePanic(char const*)>
c001ada4:	83 c4 10             	add    esp,0x10
c001ada7:	31 c0                	xor    eax,eax
c001ada9:	5b                   	pop    ebx
c001adaa:	5e                   	pop    esi
c001adab:	5f                   	pop    edi
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001adae:	83 ec 18             	sub    esp,0x18
c001adb1:	6a 00                	push   0x0
c001adb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adb8:	50                   	push   eax
c001adb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adbe:	50                   	push   eax
c001adbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adc4:	50                   	push   eax
c001adc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adc9:	e8 36 ff ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adce:	83 c4 2c             	add    esp,0x2c
c001add1:	c3                   	ret    

c001add2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001add2:	83 ec 18             	sub    esp,0x18
c001add5:	6a 0e                	push   0xe
c001add7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001addc:	50                   	push   eax
c001addd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ade2:	50                   	push   eax
c001ade3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ade8:	50                   	push   eax
c001ade9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aded:	e8 12 ff ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adf2:	83 c4 2c             	add    esp,0x2c
c001adf5:	0f b6 c0             	movzx  eax,al
c001adf8:	c3                   	ret    
c001adf9:	90                   	nop

c001adfa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001adfa:	55                   	push   ebp
c001adfb:	57                   	push   edi
c001adfc:	56                   	push   esi
c001adfd:	53                   	push   ebx
c001adfe:	83 ec 18             	sub    esp,0x18
c001ae01:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae06:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae0b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae10:	6a 0a                	push   0xa
c001ae12:	56                   	push   esi
c001ae13:	55                   	push   ebp
c001ae14:	57                   	push   edi
c001ae15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae19:	e8 e6 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae1e:	83 c4 14             	add    esp,0x14
c001ae21:	6a 0a                	push   0xa
c001ae23:	56                   	push   esi
c001ae24:	55                   	push   ebp
c001ae25:	57                   	push   edi
c001ae26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae2a:	89 c3                	mov    ebx,eax
c001ae2c:	0f b6 db             	movzx  ebx,bl
c001ae2f:	e8 d0 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae34:	83 c4 2c             	add    esp,0x2c
c001ae37:	25 00 ff 00 00       	and    eax,0xff00
c001ae3c:	09 d8                	or     eax,ebx
c001ae3e:	5b                   	pop    ebx
c001ae3f:	5e                   	pop    esi
c001ae40:	5f                   	pop    edi
c001ae41:	5d                   	pop    ebp
c001ae42:	c3                   	ret    
c001ae43:	90                   	nop

c001ae44 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae44:	83 ec 18             	sub    esp,0x18
c001ae47:	6a 08                	push   0x8
c001ae49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae4e:	50                   	push   eax
c001ae4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae54:	50                   	push   eax
c001ae55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae5a:	50                   	push   eax
c001ae5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae5f:	e8 a0 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae64:	83 c4 2c             	add    esp,0x2c
c001ae67:	0f b6 c4             	movzx  eax,ah
c001ae6a:	c3                   	ret    
c001ae6b:	90                   	nop

c001ae6c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ae6c:	83 ec 18             	sub    esp,0x18
c001ae6f:	6a 08                	push   0x8
c001ae71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae76:	50                   	push   eax
c001ae77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae7c:	50                   	push   eax
c001ae7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae82:	50                   	push   eax
c001ae83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae87:	e8 78 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae8c:	83 c4 2c             	add    esp,0x2c
c001ae8f:	c3                   	ret    

c001ae90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ae90:	83 ec 18             	sub    esp,0x18
c001ae93:	6a 3c                	push   0x3c
c001ae95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae9a:	50                   	push   eax
c001ae9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea0:	50                   	push   eax
c001aea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea6:	50                   	push   eax
c001aea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeab:	e8 54 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeb0:	83 c4 2c             	add    esp,0x2c
c001aeb3:	c3                   	ret    

c001aeb4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001aeb4:	83 ec 18             	sub    esp,0x18
c001aeb7:	6a 18                	push   0x18
c001aeb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aebe:	50                   	push   eax
c001aebf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec4:	50                   	push   eax
c001aec5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeca:	50                   	push   eax
c001aecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aecf:	e8 30 fe ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aed4:	83 c4 2c             	add    esp,0x2c
c001aed7:	0f b6 c4             	movzx  eax,ah
c001aeda:	c3                   	ret    
c001aedb:	90                   	nop

c001aedc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aedc:	55                   	push   ebp
c001aedd:	57                   	push   edi
c001aede:	56                   	push   esi
c001aedf:	53                   	push   ebx
c001aee0:	83 ec 28             	sub    esp,0x28
c001aee3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001aee7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001aeec:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001aef1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001aef6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001aefd:	8d 43 12             	lea    eax,[ebx+0x12]
c001af00:	83 c3 10             	add    ebx,0x10
c001af03:	0f b6 c0             	movzx  eax,al
c001af06:	0f b6 db             	movzx  ebx,bl
c001af09:	50                   	push   eax
c001af0a:	51                   	push   ecx
c001af0b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af0f:	57                   	push   edi
c001af10:	55                   	push   ebp
c001af11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af15:	e8 ea fd ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1a:	83 c4 14             	add    esp,0x14
c001af1d:	53                   	push   ebx
c001af1e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af22:	51                   	push   ecx
c001af23:	89 c6                	mov    esi,eax
c001af25:	57                   	push   edi
c001af26:	55                   	push   ebp
c001af27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af2b:	c1 e6 10             	shl    esi,0x10
c001af2e:	e8 d1 fd ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af33:	83 c4 3c             	add    esp,0x3c
c001af36:	5b                   	pop    ebx
c001af37:	0f b7 c0             	movzx  eax,ax
c001af3a:	09 f0                	or     eax,esi
c001af3c:	5e                   	pop    esi
c001af3d:	5f                   	pop    edi
c001af3e:	5d                   	pop    ebp
c001af3f:	c3                   	ret    

c001af40 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001af40:	55                   	push   ebp
c001af41:	57                   	push   edi
c001af42:	56                   	push   esi
c001af43:	53                   	push   ebx
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af53:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001af57:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001af5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af61:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001af65:	83 f9 01             	cmp    ecx,0x1
c001af68:	75 5d                	jne    c001afc7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001af6a:	0f b6 c8             	movzx  ecx,al
c001af6d:	89 f0                	mov    eax,esi
c001af6f:	25 fc 00 00 00       	and    eax,0xfc
c001af74:	0f b6 d2             	movzx  edx,dl
c001af77:	c1 e1 10             	shl    ecx,0x10
c001af7a:	c1 e2 0b             	shl    edx,0xb
c001af7d:	09 c1                	or     ecx,eax
c001af7f:	89 f8                	mov    eax,edi
c001af81:	0f b6 f8             	movzx  edi,al
c001af84:	c1 e7 08             	shl    edi,0x8
c001af87:	09 f9                	or     ecx,edi
c001af89:	09 d1                	or     ecx,edx
c001af8b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af90:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001af96:	89 c8                	mov    eax,ecx
c001af98:	ef                   	out    dx,eax
c001af99:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af9e:	ed                   	in     eax,dx
c001af9f:	83 e6 02             	and    esi,0x2
c001afa2:	0f b7 db             	movzx  ebx,bx
c001afa5:	74 0a                	je     c001afb1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001afa7:	c1 e3 10             	shl    ebx,0x10
c001afaa:	0f b7 d0             	movzx  edx,ax
c001afad:	09 d3                	or     ebx,edx
c001afaf:	eb 05                	jmp    c001afb6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001afb1:	66 31 c0             	xor    ax,ax
c001afb4:	09 c3                	or     ebx,eax
c001afb6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afbb:	89 c8                	mov    eax,ecx
c001afbd:	ef                   	out    dx,eax
c001afbe:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afc3:	89 d8                	mov    eax,ebx
c001afc5:	eb 41                	jmp    c001b008 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001afc7:	83 f9 02             	cmp    ecx,0x2
c001afca:	75 45                	jne    c001b011 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001afcc:	89 f1                	mov    ecx,esi
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	0f b6 f1             	movzx  esi,cl
c001afd4:	89 f9                	mov    ecx,edi
c001afd6:	56                   	push   esi
c001afd7:	0f b6 f9             	movzx  edi,cl
c001afda:	57                   	push   edi
c001afdb:	0f b6 d2             	movzx  edx,dl
c001afde:	52                   	push   edx
c001afdf:	0f b6 c0             	movzx  eax,al
c001afe2:	50                   	push   eax
c001afe3:	55                   	push   ebp
c001afe4:	e8 a5 fc ff ff       	call   c001ac8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afe9:	89 c2                	mov    edx,eax
c001afeb:	ed                   	in     eax,dx
c001afec:	83 c4 20             	add    esp,0x20
c001afef:	f6 c2 02             	test   dl,0x2
c001aff2:	0f b7 db             	movzx  ebx,bx
c001aff5:	74 0c                	je     c001b003 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001aff7:	0f b7 c8             	movzx  ecx,ax
c001affa:	89 d8                	mov    eax,ebx
c001affc:	c1 e0 10             	shl    eax,0x10
c001afff:	09 c8                	or     eax,ecx
c001b001:	eb 05                	jmp    c001b008 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b003:	66 31 c0             	xor    ax,ax
c001b006:	09 d8                	or     eax,ebx
c001b008:	ef                   	out    dx,eax
c001b009:	83 c4 0c             	add    esp,0xc
c001b00c:	5b                   	pop    ebx
c001b00d:	5e                   	pop    esi
c001b00e:	5f                   	pop    edi
c001b00f:	5d                   	pop    ebp
c001b010:	c3                   	ret    
c001b011:	c7 44 24 20 e3 29 02 c0 	mov    DWORD PTR [esp+0x20],0xc00229e3
c001b019:	83 c4 0c             	add    esp,0xc
c001b01c:	5b                   	pop    ebx
c001b01d:	5e                   	pop    esi
c001b01e:	5f                   	pop    edi
c001b01f:	5d                   	pop    ebp
c001b020:	e9 28 61 ff ff       	jmp    c001114d <KePanic(char const*)>
c001b025:	90                   	nop

c001b026 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b026:	55                   	push   ebp
c001b027:	57                   	push   edi
c001b028:	56                   	push   esi
c001b029:	53                   	push   ebx
c001b02a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b030:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b037:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b03e:	0f 85 bd 00 00 00    	jne    c001b101 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b044:	83 ec 0c             	sub    esp,0xc
c001b047:	68 14 01 00 00       	push   0x114
c001b04c:	e8 82 ca fe ff       	call   c0007ad3 <malloc>
c001b051:	83 c4 0c             	add    esp,0xc
c001b054:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b05a:	68 e9 29 02 c0       	push   0xc00229e9
c001b05f:	50                   	push   eax
c001b060:	89 c3                	mov    ebx,eax
c001b062:	e8 5f 06 ff ff       	call   c000b6c6 <File::File(char const*, Process*)>
c001b067:	83 c4 10             	add    esp,0x10
c001b06a:	85 db                	test   ebx,ebx
c001b06c:	0f 84 6b 02 00 00    	je     c001b2dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b072:	57                   	push   edi
c001b073:	57                   	push   edi
c001b074:	6a 01                	push   0x1
c001b076:	53                   	push   ebx
c001b077:	e8 06 07 ff ff       	call   c000b782 <File::open(FileOpenMode)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	85 c0                	test   eax,eax
c001b081:	0f 85 56 02 00 00    	jne    c001b2dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b087:	52                   	push   edx
c001b088:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b08c:	50                   	push   eax
c001b08d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b091:	50                   	push   eax
c001b092:	53                   	push   ebx
c001b093:	e8 ec 09 ff ff       	call   c000ba84 <File::stat(unsigned long long*, bool*)>
c001b098:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b09c:	40                   	inc    eax
c001b09d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0a0:	e8 2e ca fe ff       	call   c0007ad3 <malloc>
c001b0a5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0a9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b0ad:	59                   	pop    ecx
c001b0ae:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b0b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0b5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b0b9:	51                   	push   ecx
c001b0ba:	50                   	push   eax
c001b0bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0bf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0c3:	53                   	push   ebx
c001b0c4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0c7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b0cb:	83 c4 20             	add    esp,0x20
c001b0ce:	89 c8                	mov    eax,ecx
c001b0d0:	99                   	cdq    
c001b0d1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b0d5:	0f 85 02 02 00 00    	jne    c001b2dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0db:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b0df:	0f 85 f8 01 00 00    	jne    c001b2dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	53                   	push   ebx
c001b0e9:	e8 f2 06 ff ff       	call   c000b7e0 <File::close()>
c001b0ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b0fc:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b101:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b109:	31 c9                	xor    ecx,ecx
c001b10b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b112:	8b 2d 44 ae 02 c0    	mov    ebp,DWORD PTR ds:0xc002ae44
c001b118:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b11f:	8b 15 48 ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae48
c001b125:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b12a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b132:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b137:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b13f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b143:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b14b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b14f:	39 cd                	cmp    ebp,ecx
c001b151:	0f 8e 86 01 00 00    	jle    c001b2dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b157:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b15a:	d4 40                	aam    0x40
c001b15c:	d5 39                	aad    0x39
c001b15e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b162:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b166:	d4 40                	aam    0x40
c001b168:	d5 39                	aad    0x39
c001b16a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b16e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b172:	d4 40                	aam    0x40
c001b174:	d5 39                	aad    0x39
c001b176:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b17a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b17e:	d4 40                	aam    0x40
c001b180:	d5 39                	aad    0x39
c001b182:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b186:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b18a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b18e:	3c 56                	cmp    al,0x56
c001b190:	74 47                	je     c001b1d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b192:	d4 40                	aam    0x40
c001b194:	d5 39                	aad    0x39
c001b196:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b199:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b19d:	0f b6 db             	movzx  ebx,bl
c001b1a0:	c1 e3 04             	shl    ebx,0x4
c001b1a3:	d4 40                	aam    0x40
c001b1a5:	d5 39                	aad    0x39
c001b1a7:	83 e8 30             	sub    eax,0x30
c001b1aa:	0f b6 c0             	movzx  eax,al
c001b1ad:	09 c3                	or     ebx,eax
c001b1af:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b1b3:	c1 e3 04             	shl    ebx,0x4
c001b1b6:	d4 40                	aam    0x40
c001b1b8:	d5 39                	aad    0x39
c001b1ba:	83 e8 30             	sub    eax,0x30
c001b1bd:	0f b6 c0             	movzx  eax,al
c001b1c0:	09 c3                	or     ebx,eax
c001b1c2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b1c6:	c1 e3 04             	shl    ebx,0x4
c001b1c9:	d4 40                	aam    0x40
c001b1cb:	d5 39                	aad    0x39
c001b1cd:	83 e8 30             	sub    eax,0x30
c001b1d0:	0f b6 c0             	movzx  eax,al
c001b1d3:	09 c3                	or     ebx,eax
c001b1d5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b1d9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b1dd:	80 fb 58             	cmp    bl,0x58
c001b1e0:	74 49                	je     c001b22b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b1e2:	88 d8                	mov    al,bl
c001b1e4:	d4 40                	aam    0x40
c001b1e6:	d5 39                	aad    0x39
c001b1e8:	83 e8 30             	sub    eax,0x30
c001b1eb:	0f b6 f8             	movzx  edi,al
c001b1ee:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b1f2:	c1 e7 04             	shl    edi,0x4
c001b1f5:	d4 40                	aam    0x40
c001b1f7:	d5 39                	aad    0x39
c001b1f9:	83 e8 30             	sub    eax,0x30
c001b1fc:	0f b6 c0             	movzx  eax,al
c001b1ff:	09 c7                	or     edi,eax
c001b201:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b205:	c1 e7 04             	shl    edi,0x4
c001b208:	d4 40                	aam    0x40
c001b20a:	d5 39                	aad    0x39
c001b20c:	83 e8 30             	sub    eax,0x30
c001b20f:	0f b6 c0             	movzx  eax,al
c001b212:	09 c7                	or     edi,eax
c001b214:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b218:	c1 e7 04             	shl    edi,0x4
c001b21b:	d4 40                	aam    0x40
c001b21d:	d5 39                	aad    0x39
c001b21f:	83 e8 30             	sub    eax,0x30
c001b222:	0f b6 c0             	movzx  eax,al
c001b225:	09 c7                	or     edi,eax
c001b227:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b22b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b22e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b232:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b236:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b23a:	83 f9 0a             	cmp    ecx,0xa
c001b23d:	74 07                	je     c001b246 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b23f:	47                   	inc    edi
c001b240:	39 c5                	cmp    ebp,eax
c001b242:	75 16                	jne    c001b25a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b244:	89 e8                	mov    eax,ebp
c001b246:	83 f9 0a             	cmp    ecx,0xa
c001b249:	0f 94 c1             	sete   cl
c001b24c:	0f b6 c9             	movzx  ecx,cl
c001b24f:	01 c1                	add    ecx,eax
c001b251:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b256:	75 0f                	jne    c001b267 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b258:	eb 1c                	jmp    c001b276 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b25a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b25d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b261:	40                   	inc    eax
c001b262:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b265:	eb cb                	jmp    c001b232 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b267:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b26b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b270:	0f 85 d9 fe ff ff    	jne    c001b14f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b276:	80 fb 58             	cmp    bl,0x58
c001b279:	74 10                	je     c001b28b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b27b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b280:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b285:	0f 85 c4 fe ff ff    	jne    c001b14f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b28b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b28f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b293:	83 e8 30             	sub    eax,0x30
c001b296:	c1 e0 04             	shl    eax,0x4
c001b299:	83 eb 30             	sub    ebx,0x30
c001b29c:	09 d8                	or     eax,ebx
c001b29e:	0f b6 c0             	movzx  eax,al
c001b2a1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b2a5:	0f 85 a4 fe ff ff    	jne    c001b14f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2af:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b2b3:	83 e8 30             	sub    eax,0x30
c001b2b6:	c1 e0 04             	shl    eax,0x4
c001b2b9:	83 eb 30             	sub    ebx,0x30
c001b2bc:	09 d8                	or     eax,ebx
c001b2be:	0f b6 c0             	movzx  eax,al
c001b2c1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b2c5:	0f 85 84 fe ff ff    	jne    c001b14f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2cb:	50                   	push   eax
c001b2cc:	50                   	push   eax
c001b2cd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b2d1:	50                   	push   eax
c001b2d2:	56                   	push   esi
c001b2d3:	e8 78 53 fe ff       	call   c0000650 <strcpy>
c001b2d8:	83 c4 10             	add    esp,0x10
c001b2db:	eb 05                	jmp    c001b2e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b2dd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b2e0:	31 f6                	xor    esi,esi
c001b2e2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b2e8:	89 f0                	mov    eax,esi
c001b2ea:	5b                   	pop    ebx
c001b2eb:	5e                   	pop    esi
c001b2ec:	5f                   	pop    edi
c001b2ed:	5d                   	pop    ebp
c001b2ee:	c3                   	ret    
c001b2ef:	90                   	nop

c001b2f0 <PCI::checkBus(unsigned char)>:
c001b2f0:	56                   	push   esi
c001b2f1:	53                   	push   ebx
c001b2f2:	31 db                	xor    ebx,ebx
c001b2f4:	51                   	push   ecx
c001b2f5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b2fa:	52                   	push   edx
c001b2fb:	53                   	push   ebx
c001b2fc:	43                   	inc    ebx
c001b2fd:	56                   	push   esi
c001b2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b302:	e8 0f 03 00 00       	call   c001b616 <PCI::checkDevice(unsigned char, unsigned char)>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	83 fb 20             	cmp    ebx,0x20
c001b30d:	75 eb                	jne    c001b2fa <PCI::checkBus(unsigned char)+0xa>
c001b30f:	58                   	pop    eax
c001b310:	5b                   	pop    ebx
c001b311:	5e                   	pop    esi
c001b312:	c3                   	ret    
c001b313:	90                   	nop

c001b314 <PCI::foundDevice(PCIDeviceInfo)>:
c001b314:	55                   	push   ebp
c001b315:	57                   	push   edi
c001b316:	56                   	push   esi
c001b317:	53                   	push   ebx
c001b318:	83 ec 1c             	sub    esp,0x1c
c001b31b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b320:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b324:	3d ff ff 00 00       	cmp    eax,0xffff
c001b329:	0f 84 63 01 00 00    	je     c001b492 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b32f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b334:	66 3d 06 04          	cmp    ax,0x406
c001b338:	75 2c                	jne    c001b366 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b33a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b33f:	50                   	push   eax
c001b340:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b345:	50                   	push   eax
c001b346:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b34b:	50                   	push   eax
c001b34c:	53                   	push   ebx
c001b34d:	e8 62 fb ff ff       	call   c001aeb4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b352:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b356:	0f b6 c0             	movzx  eax,al
c001b359:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b35d:	83 c4 2c             	add    esp,0x2c
c001b360:	5b                   	pop    ebx
c001b361:	5e                   	pop    esi
c001b362:	5f                   	pop    edi
c001b363:	5d                   	pop    ebp
c001b364:	eb 8a                	jmp    c001b2f0 <PCI::checkBus(unsigned char)>
c001b366:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b36b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b371:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b375:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b379:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b37d:	85 d2                	test   edx,edx
c001b37f:	74 34                	je     c001b3b5 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b381:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b384:	85 c9                	test   ecx,ecx
c001b386:	74 29                	je     c001b3b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b388:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b38e:	31 f5                	xor    ebp,esi
c001b390:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b396:	75 19                	jne    c001b3b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b398:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b39e:	75 11                	jne    c001b3b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3a0:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b3a7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b3ab:	0f 84 e1 00 00 00    	je     c001b492 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b3b1:	8b 12                	mov    edx,DWORD PTR [edx]
c001b3b3:	eb c8                	jmp    c001b37d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b3b5:	3d 01 06 00 00       	cmp    eax,0x601
c001b3ba:	75 19                	jne    c001b3d5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	68 64 01 00 00       	push   0x164
c001b3c4:	e8 0a c7 fe ff       	call   c0007ad3 <malloc>
c001b3c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3cc:	89 c5                	mov    ebp,eax
c001b3ce:	e8 ab 0e 00 00       	call   c001c27e <SATABus::SATABus()>
c001b3d3:	eb 1e                	jmp    c001b3f3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b3d5:	3d 01 01 00 00       	cmp    eax,0x101
c001b3da:	75 62                	jne    c001b43e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b3dc:	83 ec 0c             	sub    esp,0xc
c001b3df:	68 70 02 00 00       	push   0x270
c001b3e4:	e8 ea c6 fe ff       	call   c0007ad3 <malloc>
c001b3e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3ec:	89 c5                	mov    ebp,eax
c001b3ee:	e8 f3 02 00 00       	call   c001b6e6 <IDE::IDE()>
c001b3f3:	58                   	pop    eax
c001b3f4:	5a                   	pop    edx
c001b3f5:	55                   	push   ebp
c001b3f6:	53                   	push   ebx
c001b3f7:	e8 d8 11 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c001b3fc:	83 ec 1c             	sub    esp,0x1c
c001b3ff:	b9 09 00 00 00       	mov    ecx,0x9
c001b404:	fc                   	cld    
c001b405:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b409:	89 e7                	mov    edi,esp
c001b40b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b40d:	55                   	push   ebp
c001b40e:	e8 07 11 ff ff       	call   c000c51a <Device::preOpenPCI(PCIDeviceInfo)>
c001b413:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b416:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b41a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b422:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b42a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b432:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b435:	83 c4 4c             	add    esp,0x4c
c001b438:	5b                   	pop    ebx
c001b439:	5e                   	pop    esi
c001b43a:	5f                   	pop    edi
c001b43b:	5d                   	pop    ebp
c001b43c:	ff e0                	jmp    eax
c001b43e:	83 ec 0c             	sub    esp,0xc
c001b441:	68 58 01 00 00       	push   0x158
c001b446:	e8 88 c6 fe ff       	call   c0007ad3 <malloc>
c001b44b:	5a                   	pop    edx
c001b44c:	59                   	pop    ecx
c001b44d:	68 02 2a 02 c0       	push   0xc0022a02
c001b452:	50                   	push   eax
c001b453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b457:	e8 16 14 ff ff       	call   c000c872 <DriverlessDevice::DriverlessDevice(char const*)>
c001b45c:	5e                   	pop    esi
c001b45d:	5f                   	pop    edi
c001b45e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b462:	50                   	push   eax
c001b463:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b467:	53                   	push   ebx
c001b468:	e8 67 11 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	b9 09 00 00 00       	mov    ecx,0x9
c001b475:	fc                   	cld    
c001b476:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b47a:	89 fe                	mov    esi,edi
c001b47c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b47e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b482:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b486:	83 c4 1c             	add    esp,0x1c
c001b489:	5b                   	pop    ebx
c001b48a:	5e                   	pop    esi
c001b48b:	5f                   	pop    edi
c001b48c:	5d                   	pop    ebp
c001b48d:	e9 88 10 ff ff       	jmp    c000c51a <Device::preOpenPCI(PCIDeviceInfo)>
c001b492:	83 c4 1c             	add    esp,0x1c
c001b495:	5b                   	pop    ebx
c001b496:	5e                   	pop    esi
c001b497:	5f                   	pop    edi
c001b498:	5d                   	pop    ebp
c001b499:	c3                   	ret    

c001b49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b49a:	55                   	push   ebp
c001b49b:	57                   	push   edi
c001b49c:	56                   	push   esi
c001b49d:	53                   	push   ebx
c001b49e:	83 ec 68             	sub    esp,0x68
c001b4a1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b4a8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4b0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b4b7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b4bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b4c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b4c7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b4cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b4d0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b4d5:	6a 0c                	push   0xc
c001b4d7:	57                   	push   edi
c001b4d8:	53                   	push   ebx
c001b4d9:	56                   	push   esi
c001b4da:	55                   	push   ebp
c001b4db:	e8 24 f8 ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e0:	83 c4 20             	add    esp,0x20
c001b4e3:	57                   	push   edi
c001b4e4:	53                   	push   ebx
c001b4e5:	56                   	push   esi
c001b4e6:	55                   	push   ebp
c001b4e7:	e8 0e f9 ff ff       	call   c001adfa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b4ec:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b4f1:	57                   	push   edi
c001b4f2:	53                   	push   ebx
c001b4f3:	56                   	push   esi
c001b4f4:	55                   	push   ebp
c001b4f5:	e8 96 f9 ff ff       	call   c001ae90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b4fa:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b4fe:	83 c4 14             	add    esp,0x14
c001b501:	6a 3c                	push   0x3c
c001b503:	57                   	push   edi
c001b504:	53                   	push   ebx
c001b505:	56                   	push   esi
c001b506:	55                   	push   ebp
c001b507:	e8 f8 f7 ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b50c:	0f b6 c4             	movzx  eax,ah
c001b50f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b513:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b517:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b51b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b520:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b526:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b52c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b530:	83 c4 20             	add    esp,0x20
c001b533:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b538:	74 30                	je     c001b56a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b53a:	31 c0                	xor    eax,eax
c001b53c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b540:	7e 28                	jle    c001b56a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b542:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b54a:	39 cb                	cmp    ebx,ecx
c001b54c:	75 19                	jne    c001b567 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b54e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b556:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b55a:	75 0b                	jne    c001b567 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b55c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b563:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b567:	40                   	inc    eax
c001b568:	eb d2                	jmp    c001b53c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b56a:	31 d2                	xor    edx,edx
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	57                   	push   edi
c001b570:	53                   	push   ebx
c001b571:	56                   	push   esi
c001b572:	52                   	push   edx
c001b573:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b577:	55                   	push   ebp
c001b578:	e8 5f f9 ff ff       	call   c001aedc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b57d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b581:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b585:	42                   	inc    edx
c001b586:	83 c4 20             	add    esp,0x20
c001b589:	83 fa 06             	cmp    edx,0x6
c001b58c:	75 de                	jne    c001b56c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b58e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b592:	83 ec 0c             	sub    esp,0xc
c001b595:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b599:	c1 e2 08             	shl    edx,0x8
c001b59c:	0f b6 c4             	movzx  eax,ah
c001b59f:	09 d0                	or     eax,edx
c001b5a1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5a6:	6a 02                	push   0x2
c001b5a8:	57                   	push   edi
c001b5a9:	53                   	push   ebx
c001b5aa:	56                   	push   esi
c001b5ab:	55                   	push   ebp
c001b5ac:	e8 53 f7 ff ff       	call   c001ad04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b5b6:	83 c4 20             	add    esp,0x20
c001b5b9:	57                   	push   edi
c001b5ba:	53                   	push   ebx
c001b5bb:	56                   	push   esi
c001b5bc:	55                   	push   ebp
c001b5bd:	e8 82 f8 ff ff       	call   c001ae44 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b5c2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b5c6:	57                   	push   edi
c001b5c7:	53                   	push   ebx
c001b5c8:	56                   	push   esi
c001b5c9:	55                   	push   ebp
c001b5ca:	e8 df f7 ff ff       	call   c001adae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5cf:	b9 09 00 00 00       	mov    ecx,0x9
c001b5d4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b5d9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b5dd:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b5e1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b5e5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b5e9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b5ed:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b5f1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b5f5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b5f9:	83 ec 0c             	sub    esp,0xc
c001b5fc:	fc                   	cld    
c001b5fd:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b601:	89 e7                	mov    edi,esp
c001b603:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b605:	55                   	push   ebp
c001b606:	e8 09 fd ff ff       	call   c001b314 <PCI::foundDevice(PCIDeviceInfo)>
c001b60b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b611:	5b                   	pop    ebx
c001b612:	5e                   	pop    esi
c001b613:	5f                   	pop    edi
c001b614:	5d                   	pop    ebp
c001b615:	c3                   	ret    

c001b616 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b616:	55                   	push   ebp
c001b617:	57                   	push   edi
c001b618:	56                   	push   esi
c001b619:	53                   	push   ebx
c001b61a:	83 ec 0c             	sub    esp,0xc
c001b61d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b622:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b627:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b62b:	6a 00                	push   0x0
c001b62d:	56                   	push   esi
c001b62e:	57                   	push   edi
c001b62f:	55                   	push   ebp
c001b630:	e8 79 f7 ff ff       	call   c001adae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b635:	6a 00                	push   0x0
c001b637:	56                   	push   esi
c001b638:	57                   	push   edi
c001b639:	55                   	push   ebp
c001b63a:	e8 5b fe ff ff       	call   c001b49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b63f:	83 c4 20             	add    esp,0x20
c001b642:	6a 00                	push   0x0
c001b644:	56                   	push   esi
c001b645:	57                   	push   edi
c001b646:	55                   	push   ebp
c001b647:	e8 86 f7 ff ff       	call   c001add2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b64c:	83 c4 10             	add    esp,0x10
c001b64f:	a8 80                	test   al,0x80
c001b651:	74 2d                	je     c001b680 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b653:	bb 01 00 00 00       	mov    ebx,0x1
c001b658:	53                   	push   ebx
c001b659:	56                   	push   esi
c001b65a:	57                   	push   edi
c001b65b:	55                   	push   ebp
c001b65c:	e8 4d f7 ff ff       	call   c001adae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	0f b7 c0             	movzx  eax,ax
c001b667:	3d ff ff 00 00       	cmp    eax,0xffff
c001b66c:	74 0c                	je     c001b67a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b66e:	53                   	push   ebx
c001b66f:	56                   	push   esi
c001b670:	57                   	push   edi
c001b671:	55                   	push   ebp
c001b672:	e8 23 fe ff ff       	call   c001b49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	43                   	inc    ebx
c001b67b:	83 fb 08             	cmp    ebx,0x8
c001b67e:	75 d8                	jne    c001b658 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b680:	83 c4 0c             	add    esp,0xc
c001b683:	5b                   	pop    ebx
c001b684:	5e                   	pop    esi
c001b685:	5f                   	pop    edi
c001b686:	5d                   	pop    ebp
c001b687:	c3                   	ret    

c001b688 <PCI::detect()>:
c001b688:	56                   	push   esi
c001b689:	53                   	push   ebx
c001b68a:	53                   	push   ebx
c001b68b:	31 db                	xor    ebx,ebx
c001b68d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b691:	6a 00                	push   0x0
c001b693:	6a 00                	push   0x0
c001b695:	6a 00                	push   0x0
c001b697:	56                   	push   esi
c001b698:	e8 35 f7 ff ff       	call   c001add2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	a8 80                	test   al,0x80
c001b6a2:	75 21                	jne    c001b6c5 <PCI::detect()+0x3d>
c001b6a4:	51                   	push   ecx
c001b6a5:	51                   	push   ecx
c001b6a6:	6a 00                	push   0x0
c001b6a8:	56                   	push   esi
c001b6a9:	e8 42 fc ff ff       	call   c001b2f0 <PCI::checkBus(unsigned char)>
c001b6ae:	83 c4 10             	add    esp,0x10
c001b6b1:	eb 2a                	jmp    c001b6dd <PCI::detect()+0x55>
c001b6b3:	52                   	push   edx
c001b6b4:	52                   	push   edx
c001b6b5:	53                   	push   ebx
c001b6b6:	43                   	inc    ebx
c001b6b7:	56                   	push   esi
c001b6b8:	e8 33 fc ff ff       	call   c001b2f0 <PCI::checkBus(unsigned char)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	83 fb 08             	cmp    ebx,0x8
c001b6c3:	74 18                	je     c001b6dd <PCI::detect()+0x55>
c001b6c5:	53                   	push   ebx
c001b6c6:	6a 00                	push   0x0
c001b6c8:	6a 00                	push   0x0
c001b6ca:	56                   	push   esi
c001b6cb:	e8 de f6 ff ff       	call   c001adae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	0f b7 c0             	movzx  eax,ax
c001b6d6:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6db:	74 d6                	je     c001b6b3 <PCI::detect()+0x2b>
c001b6dd:	58                   	pop    eax
c001b6de:	5b                   	pop    ebx
c001b6df:	5e                   	pop    esi
c001b6e0:	c3                   	ret    
c001b6e1:	90                   	nop

c001b6e2 <IDE::close(int, int, void*)>:
c001b6e2:	83 c8 ff             	or     eax,0xffffffff
c001b6e5:	c3                   	ret    

c001b6e6 <IDE::IDE()>:
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ed:	83 ec 08             	sub    esp,0x8
c001b6f0:	68 48 2a 02 c0       	push   0xc0022a48
c001b6f5:	50                   	push   eax
c001b6f6:	e8 1d 12 ff ff       	call   c000c918 <HardDiskController::HardDiskController(char const*)>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c001b703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b707:	89 10                	mov    DWORD PTR [eax],edx
c001b709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b714:	90                   	nop
c001b715:	83 c4 0c             	add    esp,0xc
c001b718:	c3                   	ret    
c001b719:	90                   	nop

c001b71a <IDE::prepareInterrupt(unsigned char)>:
c001b71a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b71f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b723:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b72b:	c3                   	ret    

c001b72c <selectDrive(unsigned char, unsigned char)>:
c001b72c:	c3                   	ret    
c001b72d:	90                   	nop

c001b72e <IDE::getBase(unsigned char)>:
c001b72e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b737:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b73f:	c3                   	ret    

c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b740:	55                   	push   ebp
c001b741:	57                   	push   edi
c001b742:	56                   	push   esi
c001b743:	53                   	push   ebx
c001b744:	83 ec 1c             	sub    esp,0x1c
c001b747:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b74b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b74f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b753:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b757:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b75a:	80 f9 03             	cmp    cl,0x3
c001b75d:	77 4f                	ja     c001b7ae <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b75f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b763:	0f b6 f2             	movzx  esi,dl
c001b766:	0f b6 db             	movzx  ebx,bl
c001b769:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b76c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b771:	80 ca 80             	or     dl,0x80
c001b774:	52                   	push   edx
c001b775:	6a 0c                	push   0xc
c001b777:	56                   	push   esi
c001b778:	57                   	push   edi
c001b779:	e8 c2 ff ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b77e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b787:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b78b:	ee                   	out    dx,al
c001b78c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b791:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b795:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b799:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7a1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7a5:	83 c4 2c             	add    esp,0x2c
c001b7a8:	5b                   	pop    ebx
c001b7a9:	5e                   	pop    esi
c001b7aa:	5f                   	pop    edi
c001b7ab:	5d                   	pop    ebp
c001b7ac:	eb 92                	jmp    c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7ae:	0f b6 cb             	movzx  ecx,bl
c001b7b1:	83 f9 07             	cmp    ecx,0x7
c001b7b4:	77 12                	ja     c001b7c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b7b6:	0f b6 d2             	movzx  edx,dl
c001b7b9:	0f b6 db             	movzx  ebx,bl
c001b7bc:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b7c4:	01 da                	add    edx,ebx
c001b7c6:	eb 2f                	jmp    c001b7f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7c8:	83 f9 0d             	cmp    ecx,0xd
c001b7cb:	77 13                	ja     c001b7e0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b7cd:	0f b6 d2             	movzx  edx,dl
c001b7d0:	0f b6 db             	movzx  ebx,bl
c001b7d3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b7da:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b7de:	eb 17                	jmp    c001b7f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7e0:	83 f9 15             	cmp    ecx,0x15
c001b7e3:	77 13                	ja     c001b7f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b7e5:	0f b6 d2             	movzx  edx,dl
c001b7e8:	0f b6 db             	movzx  ebx,bl
c001b7eb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b7f3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b7f7:	ee                   	out    dx,al
c001b7f8:	83 c4 1c             	add    esp,0x1c
c001b7fb:	5b                   	pop    ebx
c001b7fc:	5e                   	pop    esi
c001b7fd:	5f                   	pop    edi
c001b7fe:	5d                   	pop    ebp
c001b7ff:	c3                   	ret    

c001b800 <IDE::read(unsigned char, unsigned char)>:
c001b800:	57                   	push   edi
c001b801:	56                   	push   esi
c001b802:	53                   	push   ebx
c001b803:	83 ec 10             	sub    esp,0x10
c001b806:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b80a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b80e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b812:	8d 42 f8             	lea    eax,[edx-0x8]
c001b815:	3c 03                	cmp    al,0x3
c001b817:	77 48                	ja     c001b861 <IDE::read(unsigned char, unsigned char)+0x61>
c001b819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b81d:	0f b6 f1             	movzx  esi,cl
c001b820:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b823:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b828:	0c 80                	or     al,0x80
c001b82a:	50                   	push   eax
c001b82b:	6a 0c                	push   0xc
c001b82d:	56                   	push   esi
c001b82e:	53                   	push   ebx
c001b82f:	e8 0c ff ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b834:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b838:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b83d:	0f b6 d2             	movzx  edx,dl
c001b840:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b844:	ec                   	in     al,dx
c001b845:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b849:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b84e:	52                   	push   edx
c001b84f:	6a 0c                	push   0xc
c001b851:	56                   	push   esi
c001b852:	53                   	push   ebx
c001b853:	e8 e8 fe ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b858:	83 c4 20             	add    esp,0x20
c001b85b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b85f:	eb 4c                	jmp    c001b8ad <IDE::read(unsigned char, unsigned char)+0xad>
c001b861:	0f b6 f2             	movzx  esi,dl
c001b864:	83 fe 07             	cmp    esi,0x7
c001b867:	77 12                	ja     c001b87b <IDE::read(unsigned char, unsigned char)+0x7b>
c001b869:	0f b6 c9             	movzx  ecx,cl
c001b86c:	0f b6 d2             	movzx  edx,dl
c001b86f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b877:	01 c2                	add    edx,eax
c001b879:	eb 31                	jmp    c001b8ac <IDE::read(unsigned char, unsigned char)+0xac>
c001b87b:	83 fe 0d             	cmp    esi,0xd
c001b87e:	77 13                	ja     c001b893 <IDE::read(unsigned char, unsigned char)+0x93>
c001b880:	0f b6 c9             	movzx  ecx,cl
c001b883:	0f b6 d2             	movzx  edx,dl
c001b886:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b88d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b891:	eb 19                	jmp    c001b8ac <IDE::read(unsigned char, unsigned char)+0xac>
c001b893:	31 c0                	xor    eax,eax
c001b895:	83 fe 15             	cmp    esi,0x15
c001b898:	77 13                	ja     c001b8ad <IDE::read(unsigned char, unsigned char)+0xad>
c001b89a:	0f b6 c9             	movzx  ecx,cl
c001b89d:	0f b6 d2             	movzx  edx,dl
c001b8a0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b8a8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8ac:	ec                   	in     al,dx
c001b8ad:	83 c4 10             	add    esp,0x10
c001b8b0:	5b                   	pop    ebx
c001b8b1:	5e                   	pop    esi
c001b8b2:	5f                   	pop    edi
c001b8b3:	c3                   	ret    

c001b8b4 <IDE::waitInterrupt(unsigned char)>:
c001b8b4:	55                   	push   ebp
c001b8b5:	57                   	push   edi
c001b8b6:	56                   	push   esi
c001b8b7:	53                   	push   ebx
c001b8b8:	31 db                	xor    ebx,ebx
c001b8ba:	83 ec 0c             	sub    esp,0xc
c001b8bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b8c1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b8c6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b8ce:	89 e8                	mov    eax,ebp
c001b8d0:	84 c0                	test   al,al
c001b8d2:	75 30                	jne    c001b904 <IDE::waitInterrupt(unsigned char)+0x50>
c001b8d4:	50                   	push   eax
c001b8d5:	6a 0c                	push   0xc
c001b8d7:	56                   	push   esi
c001b8d8:	57                   	push   edi
c001b8d9:	e8 22 ff ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001b8de:	83 c4 10             	add    esp,0x10
c001b8e1:	a8 01                	test   al,0x1
c001b8e3:	75 27                	jne    c001b90c <IDE::waitInterrupt(unsigned char)+0x58>
c001b8e5:	f6 c3 04             	test   bl,0x4
c001b8e8:	75 12                	jne    c001b8fc <IDE::waitInterrupt(unsigned char)+0x48>
c001b8ea:	83 fb 32             	cmp    ebx,0x32
c001b8ed:	7e 0d                	jle    c001b8fc <IDE::waitInterrupt(unsigned char)+0x48>
c001b8ef:	83 ec 0c             	sub    esp,0xc
c001b8f2:	6a 64                	push   0x64
c001b8f4:	e8 73 a4 ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001b8f9:	83 c4 10             	add    esp,0x10
c001b8fc:	83 fb 3c             	cmp    ebx,0x3c
c001b8ff:	74 0b                	je     c001b90c <IDE::waitInterrupt(unsigned char)+0x58>
c001b901:	43                   	inc    ebx
c001b902:	eb c2                	jmp    c001b8c6 <IDE::waitInterrupt(unsigned char)+0x12>
c001b904:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b90c:	83 c4 0c             	add    esp,0xc
c001b90f:	89 e8                	mov    eax,ebp
c001b911:	5b                   	pop    ebx
c001b912:	5e                   	pop    esi
c001b913:	5f                   	pop    edi
c001b914:	5d                   	pop    ebp
c001b915:	c3                   	ret    

c001b916 <ideChannel0IRQHandler(regs*, void*)>:
c001b916:	83 ec 10             	sub    esp,0x10
c001b919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b91d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b924:	6a 07                	push   0x7
c001b926:	6a 00                	push   0x0
c001b928:	50                   	push   eax
c001b929:	e8 d2 fe ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001b92e:	83 c4 1c             	add    esp,0x1c
c001b931:	c3                   	ret    

c001b932 <ideChannel1IRQHandler(regs*, void*)>:
c001b932:	83 ec 10             	sub    esp,0x10
c001b935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b939:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b940:	6a 07                	push   0x7
c001b942:	6a 01                	push   0x1
c001b944:	50                   	push   eax
c001b945:	e8 b6 fe ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001b94a:	83 c4 1c             	add    esp,0x1c
c001b94d:	c3                   	ret    

c001b94e <IDE::enableIRQs(unsigned char, bool)>:
c001b94e:	57                   	push   edi
c001b94f:	b8 02 00 00 00       	mov    eax,0x2
c001b954:	56                   	push   esi
c001b955:	53                   	push   ebx
c001b956:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b95b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b95f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b963:	74 02                	je     c001b967 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b965:	31 c0                	xor    eax,eax
c001b967:	0f b6 db             	movzx  ebx,bl
c001b96a:	bf 04 00 00 00       	mov    edi,0x4
c001b96f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b976:	50                   	push   eax
c001b977:	6a 0c                	push   0xc
c001b979:	53                   	push   ebx
c001b97a:	56                   	push   esi
c001b97b:	e8 c0 fd ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b980:	83 c4 10             	add    esp,0x10
c001b983:	50                   	push   eax
c001b984:	6a 0c                	push   0xc
c001b986:	53                   	push   ebx
c001b987:	56                   	push   esi
c001b988:	e8 73 fe ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	4f                   	dec    edi
c001b991:	75 f0                	jne    c001b983 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b993:	5b                   	pop    ebx
c001b994:	5e                   	pop    esi
c001b995:	5f                   	pop    edi
c001b996:	c3                   	ret    
c001b997:	90                   	nop

c001b998 <IDE::open(int, int, void*)>:
c001b998:	55                   	push   ebp
c001b999:	57                   	push   edi
c001b99a:	56                   	push   esi
c001b99b:	53                   	push   ebx
c001b99c:	83 ec 1c             	sub    esp,0x1c
c001b99f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9a3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b9aa:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9b3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9bc:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9c3:	0f 85 da 02 00 00    	jne    c001bca3 <IDE::open(int, int, void*)+0x30b>
c001b9c9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b9cf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9d7:	83 e0 7f             	and    eax,0x7f
c001b9da:	83 f8 05             	cmp    eax,0x5
c001b9dd:	74 05                	je     c001b9e4 <IDE::open(int, int, void*)+0x4c>
c001b9df:	83 f8 0f             	cmp    eax,0xf
c001b9e2:	75 32                	jne    c001ba16 <IDE::open(int, int, void*)+0x7e>
c001b9e4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b9ea:	83 e0 fc             	and    eax,0xfffffffc
c001b9ed:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b9f4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b9fa:	83 e0 fc             	and    eax,0xfffffffc
c001b9fd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba04:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba0a:	83 e0 fc             	and    eax,0xfffffffc
c001ba0d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba14:	eb 14                	jmp    c001ba2a <IDE::open(int, int, void*)+0x92>
c001ba16:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba20:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba2a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ba31:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba36:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba3d:	89 fa                	mov    edx,edi
c001ba3f:	89 f1                	mov    ecx,esi
c001ba41:	c1 e1 10             	shl    ecx,0x10
c001ba44:	89 e8                	mov    eax,ebp
c001ba46:	c1 e0 0b             	shl    eax,0xb
c001ba49:	09 c1                	or     ecx,eax
c001ba4b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ba52:	c1 e0 08             	shl    eax,0x8
c001ba55:	09 c1                	or     ecx,eax
c001ba57:	89 c8                	mov    eax,ecx
c001ba59:	0d 08 00 00 80       	or     eax,0x80000008
c001ba5e:	ef                   	out    dx,eax
c001ba5f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba64:	ed                   	in     eax,dx
c001ba65:	c1 e8 10             	shr    eax,0x10
c001ba68:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba6d:	0f 84 f9 00 00 00    	je     c001bb6c <IDE::open(int, int, void*)+0x1d4>
c001ba73:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ba79:	89 fa                	mov    edx,edi
c001ba7b:	89 c8                	mov    eax,ecx
c001ba7d:	ef                   	out    dx,eax
c001ba7e:	b0 fe                	mov    al,0xfe
c001ba80:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba85:	ee                   	out    dx,al
c001ba86:	89 c8                	mov    eax,ecx
c001ba88:	89 fa                	mov    edx,edi
c001ba8a:	ef                   	out    dx,eax
c001ba8b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba90:	ed                   	in     eax,dx
c001ba91:	3c fe                	cmp    al,0xfe
c001ba93:	0f 85 a4 00 00 00    	jne    c001bb3d <IDE::open(int, int, void*)+0x1a5>
c001ba99:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001ba9f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001baa6:	74 30                	je     c001bad8 <IDE::open(int, int, void*)+0x140>
c001baa8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001baae:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bab2:	83 ec 0c             	sub    esp,0xc
c001bab5:	40                   	inc    eax
c001bab6:	0f b6 c0             	movzx  eax,al
c001bab9:	50                   	push   eax
c001baba:	55                   	push   ebp
c001babb:	56                   	push   esi
c001babc:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bac2:	51                   	push   ecx
c001bac3:	e8 a8 3a ff ff       	call   c000f570 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bac8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bacd:	83 c4 1c             	add    esp,0x1c
c001bad0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bad6:	eb 0a                	jmp    c001bae2 <IDE::open(int, int, void*)+0x14a>
c001bad8:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bae2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bae9:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001baee:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001baf5:	89 ea                	mov    edx,ebp
c001baf7:	c1 e1 10             	shl    ecx,0x10
c001bafa:	c1 e0 08             	shl    eax,0x8
c001bafd:	09 c1                	or     ecx,eax
c001baff:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb06:	c1 e0 0b             	shl    eax,0xb
c001bb09:	09 c1                	or     ecx,eax
c001bb0b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb11:	89 c8                	mov    eax,ecx
c001bb13:	ef                   	out    dx,eax
c001bb14:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bb1a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb1f:	89 f2                	mov    edx,esi
c001bb21:	89 f8                	mov    eax,edi
c001bb23:	ee                   	out    dx,al
c001bb24:	89 c8                	mov    eax,ecx
c001bb26:	89 ea                	mov    edx,ebp
c001bb28:	ef                   	out    dx,eax
c001bb29:	89 f2                	mov    edx,esi
c001bb2b:	ed                   	in     eax,dx
c001bb2c:	0f b6 c0             	movzx  eax,al
c001bb2f:	39 f8                	cmp    eax,edi
c001bb31:	74 49                	je     c001bb7c <IDE::open(int, int, void*)+0x1e4>
c001bb33:	83 ec 0c             	sub    esp,0xc
c001bb36:	68 60 2a 02 c0       	push   0xc0022a60
c001bb3b:	eb 37                	jmp    c001bb74 <IDE::open(int, int, void*)+0x1dc>
c001bb3d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb46:	75 1a                	jne    c001bb62 <IDE::open(int, int, void*)+0x1ca>
c001bb48:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bb4d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bb52:	74 05                	je     c001bb59 <IDE::open(int, int, void*)+0x1c1>
c001bb54:	83 c0 80             	add    eax,0xffffff80
c001bb57:	75 09                	jne    c001bb62 <IDE::open(int, int, void*)+0x1ca>
c001bb59:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bb60:	eb 1a                	jmp    c001bb7c <IDE::open(int, int, void*)+0x1e4>
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	68 68 2a 02 c0       	push   0xc0022a68
c001bb6a:	eb 08                	jmp    c001bb74 <IDE::open(int, int, void*)+0x1dc>
c001bb6c:	83 ec 0c             	sub    esp,0xc
c001bb6f:	68 99 2a 02 c0       	push   0xc0022a99
c001bb74:	e8 d4 55 ff ff       	call   c001114d <KePanic(char const*)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bb83:	74 1a                	je     c001bb9f <IDE::open(int, int, void*)+0x207>
c001bb85:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bb8b:	83 e0 fc             	and    eax,0xfffffffc
c001bb8e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bb95:	83 c0 08             	add    eax,0x8
c001bb98:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bb9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bba5:	89 c2                	mov    edx,eax
c001bba7:	83 e2 0f             	and    edx,0xf
c001bbaa:	83 fa 08             	cmp    edx,0x8
c001bbad:	75 0a                	jne    c001bbb9 <IDE::open(int, int, void*)+0x221>
c001bbaf:	83 e8 02             	sub    eax,0x2
c001bbb2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbb9:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bbbf:	89 c2                	mov    edx,eax
c001bbc1:	83 e2 0f             	and    edx,0xf
c001bbc4:	83 fa 08             	cmp    edx,0x8
c001bbc7:	75 0a                	jne    c001bbd3 <IDE::open(int, int, void*)+0x23b>
c001bbc9:	83 e8 02             	sub    eax,0x2
c001bbcc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bbd3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bbda:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bbe1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bbe4:	89 d0                	mov    eax,edx
c001bbe6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bbea:	8d 7a 01             	lea    edi,[edx+0x1]
c001bbed:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bbf1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bbf5:	83 e1 3f             	and    ecx,0x3f
c001bbf8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bbfc:	89 f9                	mov    ecx,edi
c001bbfe:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc05:	8d 78 02             	lea    edi,[eax+0x2]
c001bc08:	0f b6 c9             	movzx  ecx,cl
c001bc0b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc0e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc12:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc16:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc1a:	83 e2 3f             	and    edx,0x3f
c001bc1d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc21:	89 f9                	mov    ecx,edi
c001bc23:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc29:	8d 78 03             	lea    edi,[eax+0x3]
c001bc2c:	0f b6 d1             	movzx  edx,cl
c001bc2f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc32:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc3a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc3e:	83 e1 3f             	and    ecx,0x3f
c001bc41:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc45:	89 f9                	mov    ecx,edi
c001bc47:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc4d:	8d 78 04             	lea    edi,[eax+0x4]
c001bc50:	0f b6 c9             	movzx  ecx,cl
c001bc53:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc56:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc5a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc5e:	89 fa                	mov    edx,edi
c001bc60:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc66:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc6a:	83 e2 3f             	and    edx,0x3f
c001bc6d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc71:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bc78:	66 85 f6             	test   si,si
c001bc7b:	74 65                	je     c001bce2 <IDE::open(int, int, void*)+0x34a>
c001bc7d:	89 f9                	mov    ecx,edi
c001bc7f:	83 c0 05             	add    eax,0x5
c001bc82:	0f b6 d1             	movzx  edx,cl
c001bc85:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc88:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc8c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bc90:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bc96:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bc9a:	83 e0 3f             	and    eax,0x3f
c001bc9d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bca1:	eb 3f                	jmp    c001bce2 <IDE::open(int, int, void*)+0x34a>
c001bca3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcaa:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcb0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcb7:	05 06 02 00 00       	add    eax,0x206
c001bcbc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcc3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bcca:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bcd1:	05 06 02 00 00       	add    eax,0x206
c001bcd6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bcdd:	e9 bd fe ff ff       	jmp    c001bb9f <IDE::open(int, int, void*)+0x207>
c001bce2:	50                   	push   eax
c001bce3:	50                   	push   eax
c001bce4:	6a 00                	push   0x0
c001bce6:	53                   	push   ebx
c001bce7:	e8 2e fa ff ff       	call   c001b71a <IDE::prepareInterrupt(unsigned char)>
c001bcec:	5a                   	pop    edx
c001bced:	59                   	pop    ecx
c001bcee:	6a 01                	push   0x1
c001bcf0:	53                   	push   ebx
c001bcf1:	e8 24 fa ff ff       	call   c001b71a <IDE::prepareInterrupt(unsigned char)>
c001bcf6:	83 c4 0c             	add    esp,0xc
c001bcf9:	6a 00                	push   0x0
c001bcfb:	6a 00                	push   0x0
c001bcfd:	53                   	push   ebx
c001bcfe:	e8 4b fc ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001bd03:	83 c4 0c             	add    esp,0xc
c001bd06:	6a 00                	push   0x0
c001bd08:	6a 01                	push   0x1
c001bd0a:	53                   	push   ebx
c001bd0b:	e8 3e fc ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd1a:	74 34                	je     c001bd50 <IDE::open(int, int, void*)+0x3b8>
c001bd1c:	83 ec 0c             	sub    esp,0xc
c001bd1f:	53                   	push   ebx
c001bd20:	6a 01                	push   0x1
c001bd22:	68 16 b9 01 c0       	push   0xc001b916
c001bd27:	6a 0e                	push   0xe
c001bd29:	53                   	push   ebx
c001bd2a:	e8 51 08 ff ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd2f:	83 c4 14             	add    esp,0x14
c001bd32:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd38:	53                   	push   ebx
c001bd39:	6a 01                	push   0x1
c001bd3b:	68 32 b9 01 c0       	push   0xc001b932
c001bd40:	6a 0f                	push   0xf
c001bd42:	53                   	push   ebx
c001bd43:	e8 38 08 ff ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd48:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd4e:	eb 38                	jmp    c001bd88 <IDE::open(int, int, void*)+0x3f0>
c001bd50:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	53                   	push   ebx
c001bd5e:	6a 00                	push   0x0
c001bd60:	68 16 b9 01 c0       	push   0xc001b916
c001bd65:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd6b:	53                   	push   ebx
c001bd6c:	e8 0f 08 ff ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd71:	83 c4 14             	add    esp,0x14
c001bd74:	53                   	push   ebx
c001bd75:	6a 00                	push   0x0
c001bd77:	68 32 b9 01 c0       	push   0xc001b932
c001bd7c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bd82:	53                   	push   ebx
c001bd83:	e8 f8 07 ff ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8a:	83 c4 20             	add    esp,0x20
c001bd8d:	83 ec 0c             	sub    esp,0xc
c001bd90:	53                   	push   ebx
c001bd91:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bd94:	83 c4 0c             	add    esp,0xc
c001bd97:	6a 07                	push   0x7
c001bd99:	6a 00                	push   0x0
c001bd9b:	53                   	push   ebx
c001bd9c:	e8 5f fa ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bda1:	83 c4 0c             	add    esp,0xc
c001bda4:	6a 07                	push   0x7
c001bda6:	6a 01                	push   0x1
c001bda8:	53                   	push   ebx
c001bda9:	e8 52 fa ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bdae:	83 c4 0c             	add    esp,0xc
c001bdb1:	6a 01                	push   0x1
c001bdb3:	6a 00                	push   0x0
c001bdb5:	53                   	push   ebx
c001bdb6:	e8 93 fb ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001bdbb:	83 c4 0c             	add    esp,0xc
c001bdbe:	6a 01                	push   0x1
c001bdc0:	6a 01                	push   0x1
c001bdc2:	53                   	push   ebx
c001bdc3:	e8 86 fb ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001bdc8:	83 c4 2c             	add    esp,0x2c
c001bdcb:	31 c0                	xor    eax,eax
c001bdcd:	5b                   	pop    ebx
c001bdce:	5e                   	pop    esi
c001bdcf:	5f                   	pop    edi
c001bdd0:	5d                   	pop    ebp
c001bdd1:	c3                   	ret    

c001bdd2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bdd2:	55                   	push   ebp
c001bdd3:	57                   	push   edi
c001bdd4:	56                   	push   esi
c001bdd5:	53                   	push   ebx
c001bdd6:	83 ec 1c             	sub    esp,0x1c
c001bdd9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bddd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bde1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bde5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bde9:	8d 42 f8             	lea    eax,[edx-0x8]
c001bdec:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bdf0:	3c 03                	cmp    al,0x3
c001bdf2:	77 5a                	ja     c001be4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bdf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bdf8:	0f b6 db             	movzx  ebx,bl
c001bdfb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bdff:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be02:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be07:	0c 80                	or     al,0x80
c001be09:	50                   	push   eax
c001be0a:	6a 0c                	push   0xc
c001be0c:	53                   	push   ebx
c001be0d:	56                   	push   esi
c001be0e:	e8 2d f9 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be17:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be20:	0f b6 d2             	movzx  edx,dl
c001be23:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be29:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be2e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be32:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be36:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be42:	83 c4 2c             	add    esp,0x2c
c001be45:	5b                   	pop    ebx
c001be46:	5e                   	pop    esi
c001be47:	5f                   	pop    edi
c001be48:	5d                   	pop    ebp
c001be49:	e9 f2 f8 ff ff       	jmp    c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be4e:	0f b6 c2             	movzx  eax,dl
c001be51:	83 f8 07             	cmp    eax,0x7
c001be54:	77 12                	ja     c001be68 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001be56:	0f b6 db             	movzx  ebx,bl
c001be59:	0f b6 c2             	movzx  eax,dl
c001be5c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001be64:	01 c2                	add    edx,eax
c001be66:	eb 2f                	jmp    c001be97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be68:	83 f8 0d             	cmp    eax,0xd
c001be6b:	77 13                	ja     c001be80 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001be6d:	0f b6 db             	movzx  ebx,bl
c001be70:	0f b6 d2             	movzx  edx,dl
c001be73:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001be7a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be7e:	eb 17                	jmp    c001be97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be80:	83 f8 15             	cmp    eax,0x15
c001be83:	77 14                	ja     c001be99 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001be85:	0f b6 db             	movzx  ebx,bl
c001be88:	0f b6 d2             	movzx  edx,dl
c001be8b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001be93:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be97:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be99:	83 c4 1c             	add    esp,0x1c
c001be9c:	5b                   	pop    ebx
c001be9d:	5e                   	pop    esi
c001be9e:	5f                   	pop    edi
c001be9f:	5d                   	pop    ebp
c001bea0:	c3                   	ret    
c001bea1:	90                   	nop

c001bea2 <IDE::detect()>:
c001bea2:	55                   	push   ebp
c001bea3:	57                   	push   edi
c001bea4:	56                   	push   esi
c001bea5:	53                   	push   ebx
c001bea6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001beac:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001beb3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001beba:	0f 85 9e 02 00 00    	jne    c001c15e <IDE::detect()+0x2bc>
c001bec0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bec7:	31 f6                	xor    esi,esi
c001bec9:	31 ff                	xor    edi,edi
c001becb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bed3:	89 f8                	mov    eax,edi
c001bed5:	c1 e0 06             	shl    eax,0x6
c001bed8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bee0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bee4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beec:	c1 e0 04             	shl    eax,0x4
c001beef:	83 c8 a0             	or     eax,0xffffffa0
c001bef2:	0f b6 c0             	movzx  eax,al
c001bef5:	50                   	push   eax
c001bef6:	6a 06                	push   0x6
c001bef8:	56                   	push   esi
c001bef9:	53                   	push   ebx
c001befa:	e8 41 f8 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beff:	83 c4 0c             	add    esp,0xc
c001bf02:	6a 0c                	push   0xc
c001bf04:	56                   	push   esi
c001bf05:	53                   	push   ebx
c001bf06:	e8 f5 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf0b:	83 c4 0c             	add    esp,0xc
c001bf0e:	6a 0c                	push   0xc
c001bf10:	56                   	push   esi
c001bf11:	53                   	push   ebx
c001bf12:	e8 e9 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	6a 0c                	push   0xc
c001bf1c:	56                   	push   esi
c001bf1d:	53                   	push   ebx
c001bf1e:	e8 dd f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf23:	83 c4 0c             	add    esp,0xc
c001bf26:	6a 0c                	push   0xc
c001bf28:	56                   	push   esi
c001bf29:	53                   	push   ebx
c001bf2a:	e8 d1 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf2f:	68 ec 00 00 00       	push   0xec
c001bf34:	6a 07                	push   0x7
c001bf36:	56                   	push   esi
c001bf37:	53                   	push   ebx
c001bf38:	e8 03 f8 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf3d:	83 c4 1c             	add    esp,0x1c
c001bf40:	6a 0c                	push   0xc
c001bf42:	56                   	push   esi
c001bf43:	53                   	push   ebx
c001bf44:	e8 b7 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf49:	83 c4 0c             	add    esp,0xc
c001bf4c:	6a 0c                	push   0xc
c001bf4e:	56                   	push   esi
c001bf4f:	53                   	push   ebx
c001bf50:	e8 ab f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf55:	83 c4 0c             	add    esp,0xc
c001bf58:	6a 0c                	push   0xc
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	e8 9f f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf61:	83 c4 0c             	add    esp,0xc
c001bf64:	6a 0c                	push   0xc
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	e8 93 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf6d:	83 c4 0c             	add    esp,0xc
c001bf70:	6a 0c                	push   0xc
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	e8 87 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	84 c0                	test   al,al
c001bf7e:	0f 84 61 01 00 00    	je     c001c0e5 <IDE::detect()+0x243>
c001bf84:	31 ed                	xor    ebp,ebp
c001bf86:	50                   	push   eax
c001bf87:	6a 0c                	push   0xc
c001bf89:	56                   	push   esi
c001bf8a:	53                   	push   ebx
c001bf8b:	e8 70 f8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	a8 01                	test   al,0x1
c001bf95:	0f 85 6b 01 00 00    	jne    c001c106 <IDE::detect()+0x264>
c001bf9b:	a8 80                	test   al,0x80
c001bf9d:	75 04                	jne    c001bfa3 <IDE::detect()+0x101>
c001bf9f:	a8 08                	test   al,0x8
c001bfa1:	75 23                	jne    c001bfc6 <IDE::detect()+0x124>
c001bfa3:	45                   	inc    ebp
c001bfa4:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001bfaa:	7e da                	jle    c001bf86 <IDE::detect()+0xe4>
c001bfac:	83 ec 0c             	sub    esp,0xc
c001bfaf:	6a 32                	push   0x32
c001bfb1:	e8 b6 9d ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001bfb6:	83 c4 10             	add    esp,0x10
c001bfb9:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001bfbf:	75 c5                	jne    c001bf86 <IDE::detect()+0xe4>
c001bfc1:	e9 40 01 00 00       	jmp    c001c106 <IDE::detect()+0x264>
c001bfc6:	31 c9                	xor    ecx,ecx
c001bfc8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bfcc:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001bfd0:	83 ec 0c             	sub    esp,0xc
c001bfd3:	68 80 00 00 00       	push   0x80
c001bfd8:	55                   	push   ebp
c001bfd9:	6a 00                	push   0x0
c001bfdb:	56                   	push   esi
c001bfdc:	53                   	push   ebx
c001bfdd:	e8 f0 fd ff ff       	call   c001bdd2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bfe2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bfe7:	89 f8                	mov    eax,edi
c001bfe9:	c1 e0 06             	shl    eax,0x6
c001bfec:	01 d8                	add    eax,ebx
c001bfee:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bff5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bffc:	89 d1                	mov    ecx,edx
c001bffe:	89 f2                	mov    edx,esi
c001c000:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c006:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c00a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c010:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c014:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c01b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c023:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c02a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c032:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c038:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c03f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c045:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c049:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c04d:	83 c4 20             	add    esp,0x20
c001c050:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c053:	83 c5 02             	add    ebp,0x2
c001c056:	83 c0 02             	add    eax,0x2
c001c059:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c05f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c062:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c068:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c06c:	75 e2                	jne    c001c050 <IDE::detect()+0x1ae>
c001c06e:	89 f8                	mov    eax,edi
c001c070:	c1 e0 06             	shl    eax,0x6
c001c073:	01 d8                	add    eax,ebx
c001c075:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c07c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c083:	c1 ea 09             	shr    edx,0x9
c001c086:	83 e2 01             	and    edx,0x1
c001c089:	80 e1 01             	and    cl,0x1
c001c08c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c092:	75 22                	jne    c001c0b6 <IDE::detect()+0x214>
c001c094:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c09b:	74 47                	je     c001c0e4 <IDE::detect()+0x242>
c001c09d:	83 ec 0c             	sub    esp,0xc
c001c0a0:	68 7c 01 00 00       	push   0x17c
c001c0a5:	e8 29 ba fe ff       	call   c0007ad3 <malloc>
c001c0aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0ad:	89 c5                	mov    ebp,eax
c001c0af:	e8 16 05 00 00       	call   c001c5ca <ATA::ATA()>
c001c0b4:	eb 17                	jmp    c001c0cd <IDE::detect()+0x22b>
c001c0b6:	83 ec 0c             	sub    esp,0xc
c001c0b9:	68 84 01 00 00       	push   0x184
c001c0be:	e8 10 ba fe ff       	call   c0007ad3 <malloc>
c001c0c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0c6:	89 c5                	mov    ebp,eax
c001c0c8:	e8 6f 0e 00 00       	call   c001cf3c <ATAPI::ATAPI()>
c001c0cd:	5a                   	pop    edx
c001c0ce:	59                   	pop    ecx
c001c0cf:	55                   	push   ebp
c001c0d0:	53                   	push   ebx
c001c0d1:	e8 fe 04 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c001c0d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0d9:	53                   	push   ebx
c001c0da:	57                   	push   edi
c001c0db:	6a 00                	push   0x0
c001c0dd:	55                   	push   ebp
c001c0de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0e1:	83 c4 20             	add    esp,0x20
c001c0e4:	47                   	inc    edi
c001c0e5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c0ea:	74 0d                	je     c001c0f9 <IDE::detect()+0x257>
c001c0ec:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c0f4:	e9 da fd ff ff       	jmp    c001bed3 <IDE::detect()+0x31>
c001c0f9:	4e                   	dec    esi
c001c0fa:	74 62                	je     c001c15e <IDE::detect()+0x2bc>
c001c0fc:	be 01 00 00 00       	mov    esi,0x1
c001c101:	e9 c5 fd ff ff       	jmp    c001becb <IDE::detect()+0x29>
c001c106:	50                   	push   eax
c001c107:	6a 04                	push   0x4
c001c109:	56                   	push   esi
c001c10a:	53                   	push   ebx
c001c10b:	e8 f0 f6 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c110:	83 c4 0c             	add    esp,0xc
c001c113:	6a 05                	push   0x5
c001c115:	56                   	push   esi
c001c116:	53                   	push   ebx
c001c117:	89 c5                	mov    ebp,eax
c001c119:	e8 e2 f6 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c11e:	89 e9                	mov    ecx,ebp
c001c120:	83 c4 10             	add    esp,0x10
c001c123:	0f b6 e9             	movzx  ebp,cl
c001c126:	83 fd 14             	cmp    ebp,0x14
c001c129:	74 2d                	je     c001c158 <IDE::detect()+0x2b6>
c001c12b:	83 fd 69             	cmp    ebp,0x69
c001c12e:	75 b5                	jne    c001c0e5 <IDE::detect()+0x243>
c001c130:	3c 96                	cmp    al,0x96
c001c132:	75 b1                	jne    c001c0e5 <IDE::detect()+0x243>
c001c134:	68 a1 00 00 00       	push   0xa1
c001c139:	6a 07                	push   0x7
c001c13b:	56                   	push   esi
c001c13c:	53                   	push   ebx
c001c13d:	e8 fe f5 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c142:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c149:	e8 1e 9c ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001c14e:	83 c4 10             	add    esp,0x10
c001c151:	b1 01                	mov    cl,0x1
c001c153:	e9 70 fe ff ff       	jmp    c001bfc8 <IDE::detect()+0x126>
c001c158:	3c eb                	cmp    al,0xeb
c001c15a:	75 cf                	jne    c001c12b <IDE::detect()+0x289>
c001c15c:	eb d6                	jmp    c001c134 <IDE::detect()+0x292>
c001c15e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c164:	5b                   	pop    ebx
c001c165:	5e                   	pop    esi
c001c166:	5f                   	pop    edi
c001c167:	5d                   	pop    ebp
c001c168:	c3                   	ret    
c001c169:	90                   	nop

c001c16a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c16a:	55                   	push   ebp
c001c16b:	57                   	push   edi
c001c16c:	56                   	push   esi
c001c16d:	53                   	push   ebx
c001c16e:	83 ec 1c             	sub    esp,0x1c
c001c171:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c175:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c179:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c17d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c185:	88 c3                	mov    bl,al
c001c187:	25 ff 00 00 00       	and    eax,0xff
c001c18c:	0f 84 88 00 00 00    	je     c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c192:	83 ec 0c             	sub    esp,0xc
c001c195:	89 c7                	mov    edi,eax
c001c197:	68 c3 2a 02 c0       	push   0xc0022ac3
c001c19c:	e8 69 e7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	83 ff 01             	cmp    edi,0x1
c001c1a7:	74 6b                	je     c001c214 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c1a9:	83 ff 02             	cmp    edi,0x2
c001c1ac:	75 58                	jne    c001c206 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c1ae:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c1b3:	50                   	push   eax
c001c1b4:	6a 01                	push   0x1
c001c1b6:	01 ff                	add    edi,edi
c001c1b8:	09 fe                	or     esi,edi
c001c1ba:	89 f0                	mov    eax,esi
c001c1bc:	0f b6 f0             	movzx  esi,al
c001c1bf:	c1 e6 06             	shl    esi,0x6
c001c1c2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c1ca:	50                   	push   eax
c001c1cb:	55                   	push   ebp
c001c1cc:	e8 2f f6 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	a8 01                	test   al,0x1
c001c1d6:	74 02                	je     c001c1da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c1d8:	b3 07                	mov    bl,0x7
c001c1da:	a8 02                	test   al,0x2
c001c1dc:	74 02                	je     c001c1e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c1de:	b3 03                	mov    bl,0x3
c001c1e0:	a8 04                	test   al,0x4
c001c1e2:	74 02                	je     c001c1e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c1e4:	b3 14                	mov    bl,0x14
c001c1e6:	a8 08                	test   al,0x8
c001c1e8:	74 02                	je     c001c1ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c1ea:	b3 03                	mov    bl,0x3
c001c1ec:	a8 10                	test   al,0x10
c001c1ee:	74 02                	je     c001c1f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c1f0:	b3 15                	mov    bl,0x15
c001c1f2:	a8 20                	test   al,0x20
c001c1f4:	74 02                	je     c001c1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c1f6:	b3 03                	mov    bl,0x3
c001c1f8:	a8 40                	test   al,0x40
c001c1fa:	74 02                	je     c001c1fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c1fc:	b3 16                	mov    bl,0x16
c001c1fe:	a8 80                	test   al,0x80
c001c200:	74 18                	je     c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c202:	b3 0d                	mov    bl,0xd
c001c204:	eb 14                	jmp    c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c206:	83 ff 03             	cmp    edi,0x3
c001c209:	74 0d                	je     c001c218 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c20b:	83 ff 04             	cmp    edi,0x4
c001c20e:	75 0a                	jne    c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c210:	b3 08                	mov    bl,0x8
c001c212:	eb 06                	jmp    c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c214:	b3 13                	mov    bl,0x13
c001c216:	eb 02                	jmp    c001c21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c218:	b3 17                	mov    bl,0x17
c001c21a:	83 c4 1c             	add    esp,0x1c
c001c21d:	88 d8                	mov    al,bl
c001c21f:	5b                   	pop    ebx
c001c220:	5e                   	pop    esi
c001c221:	5f                   	pop    edi
c001c222:	5d                   	pop    ebp
c001c223:	c3                   	ret    

c001c224 <IDE::polling(unsigned char, unsigned int)>:
c001c224:	57                   	push   edi
c001c225:	56                   	push   esi
c001c226:	53                   	push   ebx
c001c227:	bb 04 00 00 00       	mov    ebx,0x4
c001c22c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c230:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c235:	52                   	push   edx
c001c236:	6a 0c                	push   0xc
c001c238:	56                   	push   esi
c001c239:	57                   	push   edi
c001c23a:	e8 c1 f5 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c23f:	83 c4 10             	add    esp,0x10
c001c242:	4b                   	dec    ebx
c001c243:	75 f0                	jne    c001c235 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c245:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c24a:	50                   	push   eax
c001c24b:	6a 0c                	push   0xc
c001c24d:	56                   	push   esi
c001c24e:	57                   	push   edi
c001c24f:	e8 ac f5 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c254:	83 c4 10             	add    esp,0x10
c001c257:	a8 01                	test   al,0x1
c001c259:	75 17                	jne    c001c272 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c25b:	a8 20                	test   al,0x20
c001c25d:	75 0f                	jne    c001c26e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c25f:	4b                   	dec    ebx
c001c260:	74 10                	je     c001c272 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c262:	a8 80                	test   al,0x80
c001c264:	75 e4                	jne    c001c24a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c266:	a8 08                	test   al,0x8
c001c268:	74 e0                	je     c001c24a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c26a:	31 c0                	xor    eax,eax
c001c26c:	eb 06                	jmp    c001c274 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c26e:	b0 01                	mov    al,0x1
c001c270:	eb 02                	jmp    c001c274 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c272:	b0 02                	mov    al,0x2
c001c274:	5b                   	pop    ebx
c001c275:	5e                   	pop    esi
c001c276:	5f                   	pop    edi
c001c277:	c3                   	ret    

c001c278 <SATABus::close(int, int, void*)>:
c001c278:	31 c0                	xor    eax,eax
c001c27a:	c3                   	ret    
c001c27b:	90                   	nop

c001c27c <SATABus::detect()>:
c001c27c:	c3                   	ret    
c001c27d:	90                   	nop

c001c27e <SATABus::SATABus()>:
c001c27e:	83 ec 0c             	sub    esp,0xc
c001c281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c285:	83 ec 08             	sub    esp,0x8
c001c288:	68 fc 2a 02 c0       	push   0xc0022afc
c001c28d:	50                   	push   eax
c001c28e:	e8 85 06 ff ff       	call   c000c918 <HardDiskController::HardDiskController(char const*)>
c001c293:	83 c4 10             	add    esp,0x10
c001c296:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c001c29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29f:	89 10                	mov    DWORD PTR [eax],edx
c001c2a1:	83 ec 0c             	sub    esp,0xc
c001c2a4:	6a 50                	push   0x50
c001c2a6:	e8 06 bc fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	89 c2                	mov    edx,eax
c001c2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c2ba:	83 ec 0c             	sub    esp,0xc
c001c2bd:	6a 50                	push   0x50
c001c2bf:	e8 31 d3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	89 c2                	mov    edx,eax
c001c2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c2d3:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c2d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2dc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c2e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c2ec:	83 ec 0c             	sub    esp,0xc
c001c2ef:	6a 03                	push   0x3
c001c2f1:	6a 50                	push   0x50
c001c2f3:	51                   	push   ecx
c001c2f4:	52                   	push   edx
c001c2f5:	50                   	push   eax
c001c2f6:	e8 0d dc fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c2fb:	83 c4 20             	add    esp,0x20
c001c2fe:	90                   	nop
c001c2ff:	83 c4 0c             	add    esp,0xc
c001c302:	c3                   	ret    
c001c303:	90                   	nop

c001c304 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c308:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c30b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c30e:	09 c2                	or     edx,eax
c001c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c314:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c31a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c31c:	31 c0                	xor    eax,eax
c001c31e:	c1 e9 08             	shr    ecx,0x8
c001c321:	83 e1 0f             	and    ecx,0xf
c001c324:	39 c8                	cmp    eax,ecx
c001c326:	74 0a                	je     c001c332 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c328:	f6 c2 01             	test   dl,0x1
c001c32b:	74 08                	je     c001c335 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c32d:	d1 ea                	shr    edx,1
c001c32f:	40                   	inc    eax
c001c330:	eb f2                	jmp    c001c324 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c332:	83 c8 ff             	or     eax,0xffffffff
c001c335:	c3                   	ret    

c001c336 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c336:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c33a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c33d:	89 c2                	mov    edx,eax
c001c33f:	c1 ea 08             	shr    edx,0x8
c001c342:	83 e2 0f             	and    edx,0xf
c001c345:	4a                   	dec    edx
c001c346:	75 32                	jne    c001c37a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c348:	83 e0 0f             	and    eax,0xf
c001c34b:	83 f8 03             	cmp    eax,0x3
c001c34e:	75 2a                	jne    c001c37a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c350:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c353:	b8 02 00 00 00       	mov    eax,0x2
c001c358:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c35e:	74 1c                	je     c001c37c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c360:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c366:	b8 04 00 00 00       	mov    eax,0x4
c001c36b:	74 0f                	je     c001c37c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c36d:	31 c0                	xor    eax,eax
c001c36f:	83 fa 03             	cmp    edx,0x3
c001c372:	0f 94 c0             	sete   al
c001c375:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c379:	c3                   	ret    
c001c37a:	31 c0                	xor    eax,eax
c001c37c:	c3                   	ret    
c001c37d:	90                   	nop

c001c37e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c37e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c382:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c385:	0f ba e2 0f          	bt     edx,0xf
c001c389:	72 f7                	jb     c001c382 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c38b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c38e:	83 ca 10             	or     edx,0x10
c001c391:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c394:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c397:	83 ca 01             	or     edx,0x1
c001c39a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c39d:	c3                   	ret    

c001c39e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3a5:	83 e2 fe             	and    edx,0xfffffffe
c001c3a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3ae:	83 e2 ef             	and    edx,0xffffffef
c001c3b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3b7:	0f ba e2 0e          	bt     edx,0xe
c001c3bb:	72 f7                	jb     c001c3b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3c0:	0f ba e2 0f          	bt     edx,0xf
c001c3c4:	72 ee                	jb     c001c3b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c3c8:	55                   	push   ebp
c001c3c9:	57                   	push   edi
c001c3ca:	56                   	push   esi
c001c3cb:	53                   	push   ebx
c001c3cc:	83 ec 1c             	sub    esp,0x1c
c001c3cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c3d7:	53                   	push   ebx
c001c3d8:	57                   	push   edi
c001c3d9:	e8 c0 ff ff ff       	call   c001c39e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c3de:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c3eb:	c1 e5 0a             	shl    ebp,0xa
c001c3ee:	01 e8                	add    eax,ebp
c001c3f0:	89 03                	mov    DWORD PTR [ebx],eax
c001c3f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3f4:	68 00 04 00 00       	push   0x400
c001c3f9:	6a 00                	push   0x0
c001c3fb:	50                   	push   eax
c001c3fc:	e8 ef 40 fe ff       	call   c00004f0 <memset>
c001c401:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c407:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c40b:	83 c4 1c             	add    esp,0x1c
c001c40e:	01 e8                	add    eax,ebp
c001c410:	89 03                	mov    DWORD PTR [ebx],eax
c001c412:	c1 e6 08             	shl    esi,0x8
c001c415:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c41c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c422:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c428:	01 f0                	add    eax,esi
c001c42a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c42d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c430:	68 00 01 00 00       	push   0x100
c001c435:	6a 00                	push   0x0
c001c437:	50                   	push   eax
c001c438:	e8 b3 40 fe ff       	call   c00004f0 <memset>
c001c43d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c443:	31 d2                	xor    edx,edx
c001c445:	01 f0                	add    eax,esi
c001c447:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c44a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c451:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c457:	01 ee                	add    esi,ebp
c001c459:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	c1 e5 0d             	shl    ebp,0xd
c001c463:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c469:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c46f:	83 c6 20             	add    esi,0x20
c001c472:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c476:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c47c:	01 e8                	add    eax,ebp
c001c47e:	01 d0                	add    eax,edx
c001c480:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c483:	52                   	push   edx
c001c484:	68 00 01 00 00       	push   0x100
c001c489:	6a 00                	push   0x0
c001c48b:	50                   	push   eax
c001c48c:	e8 5f 40 fe ff       	call   c00004f0 <memset>
c001c491:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c497:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c49e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	01 e8                	add    eax,ebp
c001c4a7:	01 d0                	add    eax,edx
c001c4a9:	81 c2 00 01 00 00    	add    edx,0x100
c001c4af:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4b2:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c4b8:	75 af                	jne    c001c469 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c4ba:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4c1:	50                   	push   eax
c001c4c2:	50                   	push   eax
c001c4c3:	53                   	push   ebx
c001c4c4:	57                   	push   edi
c001c4c5:	e8 b4 fe ff ff       	call   c001c37e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c4ca:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4d1:	83 c4 2c             	add    esp,0x2c
c001c4d4:	5b                   	pop    ebx
c001c4d5:	5e                   	pop    esi
c001c4d6:	5f                   	pop    edi
c001c4d7:	5d                   	pop    ebp
c001c4d8:	c3                   	ret    
c001c4d9:	90                   	nop

c001c4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c4da:	55                   	push   ebp
c001c4db:	57                   	push   edi
c001c4dc:	56                   	push   esi
c001c4dd:	53                   	push   ebx
c001c4de:	31 db                	xor    ebx,ebx
c001c4e0:	83 ec 0c             	sub    esp,0xc
c001c4e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4e7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c4eb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c4ee:	f7 c7 01 00 00 00    	test   edi,0x1
c001c4f4:	74 7a                	je     c001c570 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c4f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c4fa:	89 d8                	mov    eax,ebx
c001c4fc:	c1 e0 07             	shl    eax,0x7
c001c4ff:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c506:	55                   	push   ebp
c001c507:	56                   	push   esi
c001c508:	e8 29 fe ff ff       	call   c001c336 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c50d:	5a                   	pop    edx
c001c50e:	59                   	pop    ecx
c001c50f:	83 f8 01             	cmp    eax,0x1
c001c512:	75 21                	jne    c001c535 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c514:	50                   	push   eax
c001c515:	53                   	push   ebx
c001c516:	55                   	push   ebp
c001c517:	56                   	push   esi
c001c518:	e8 ab fe ff ff       	call   c001c3c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c51d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c524:	e8 aa b5 fe ff       	call   c0007ad3 <malloc>
c001c529:	89 04 24             	mov    DWORD PTR [esp],eax
c001c52c:	89 c5                	mov    ebp,eax
c001c52e:	e8 c1 10 00 00       	call   c001d5f4 <SATA::SATA()>
c001c533:	eb 24                	jmp    c001c559 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c535:	83 f8 04             	cmp    eax,0x4
c001c538:	75 36                	jne    c001c570 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c53a:	51                   	push   ecx
c001c53b:	53                   	push   ebx
c001c53c:	55                   	push   ebp
c001c53d:	56                   	push   esi
c001c53e:	e8 85 fe ff ff       	call   c001c3c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c543:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c54a:	e8 84 b5 fe ff       	call   c0007ad3 <malloc>
c001c54f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c552:	89 c5                	mov    ebp,eax
c001c554:	e8 f5 17 00 00       	call   c001dd4e <SATAPI::SATAPI()>
c001c559:	58                   	pop    eax
c001c55a:	5a                   	pop    edx
c001c55b:	55                   	push   ebp
c001c55c:	56                   	push   esi
c001c55d:	e8 72 00 ff ff       	call   c000c5d4 <Device::addChild(Device*)>
c001c562:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c565:	56                   	push   esi
c001c566:	6a 00                	push   0x0
c001c568:	53                   	push   ebx
c001c569:	55                   	push   ebp
c001c56a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c56d:	83 c4 20             	add    esp,0x20
c001c570:	d1 ef                	shr    edi,1
c001c572:	43                   	inc    ebx
c001c573:	83 fb 20             	cmp    ebx,0x20
c001c576:	0f 85 72 ff ff ff    	jne    c001c4ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c57c:	83 c4 0c             	add    esp,0xc
c001c57f:	5b                   	pop    ebx
c001c580:	5e                   	pop    esi
c001c581:	5f                   	pop    edi
c001c582:	5d                   	pop    ebp
c001c583:	c3                   	ret    

c001c584 <SATABus::open(int, int, void*)>:
c001c584:	83 ec 14             	sub    esp,0x14
c001c587:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c58b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c591:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c597:	52                   	push   edx
c001c598:	50                   	push   eax
c001c599:	e8 3c ff ff ff       	call   c001c4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c59e:	31 c0                	xor    eax,eax
c001c5a0:	83 c4 1c             	add    esp,0x1c
c001c5a3:	c3                   	ret    

c001c5a4 <ATA::close(int, int, void*)>:
c001c5a4:	83 ec 0c             	sub    esp,0xc
c001c5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c5b1:	85 c0                	test   eax,eax
c001c5b3:	74 0c                	je     c001c5c1 <ATA::close(int, int, void*)+0x1d>
c001c5b5:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5b7:	83 ec 0c             	sub    esp,0xc
c001c5ba:	50                   	push   eax
c001c5bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c5be:	83 c4 10             	add    esp,0x10
c001c5c1:	31 c0                	xor    eax,eax
c001c5c3:	83 c4 0c             	add    esp,0xc
c001c5c6:	c3                   	ret    
c001c5c7:	90                   	nop

c001c5c8 <ATA::powerSaving(PowerSavingLevel)>:
c001c5c8:	c3                   	ret    
c001c5c9:	90                   	nop

c001c5ca <ATA::ATA()>:
c001c5ca:	83 ec 0c             	sub    esp,0xc
c001c5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d1:	83 ec 04             	sub    esp,0x4
c001c5d4:	68 00 02 00 00       	push   0x200
c001c5d9:	68 f5 2b 02 c0       	push   0xc0022bf5
c001c5de:	50                   	push   eax
c001c5df:	e8 be 03 ff ff       	call   c000c9a2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c5e4:	83 c4 10             	add    esp,0x10
c001c5e7:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001c5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f0:	89 10                	mov    DWORD PTR [eax],edx
c001c5f2:	90                   	nop
c001c5f3:	83 c4 0c             	add    esp,0xc
c001c5f6:	c3                   	ret    
c001c5f7:	90                   	nop

c001c5f8 <ATA::flush(bool)>:
c001c5f8:	53                   	push   ebx
c001c5f9:	83 ec 08             	sub    esp,0x8
c001c5fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c605:	83 f8 01             	cmp    eax,0x1
c001c608:	19 c0                	sbb    eax,eax
c001c60a:	83 e0 fd             	and    eax,0xfffffffd
c001c60d:	05 ea 00 00 00       	add    eax,0xea
c001c612:	50                   	push   eax
c001c613:	6a 07                	push   0x7
c001c615:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c61c:	50                   	push   eax
c001c61d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c623:	e8 18 f1 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c628:	83 c4 0c             	add    esp,0xc
c001c62b:	6a 00                	push   0x0
c001c62d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c634:	50                   	push   eax
c001c635:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c63b:	e8 e4 fb ff ff       	call   c001c224 <IDE::polling(unsigned char, unsigned int)>
c001c640:	83 c4 18             	add    esp,0x18
c001c643:	5b                   	pop    ebx
c001c644:	c3                   	ret    
c001c645:	90                   	nop

c001c646 <ATA::readyForCommand()>:
c001c646:	56                   	push   esi
c001c647:	53                   	push   ebx
c001c648:	53                   	push   ebx
c001c649:	31 db                	xor    ebx,ebx
c001c64b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c64f:	51                   	push   ecx
c001c650:	6a 0c                	push   0xc
c001c652:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c659:	50                   	push   eax
c001c65a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c660:	e8 9b f1 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	a8 88                	test   al,0x88
c001c66a:	74 1f                	je     c001c68b <ATA::readyForCommand()+0x45>
c001c66c:	43                   	inc    ebx
c001c66d:	83 fb 63             	cmp    ebx,0x63
c001c670:	7e dd                	jle    c001c64f <ATA::readyForCommand()+0x9>
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	6a 0a                	push   0xa
c001c677:	e8 f0 96 ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c685:	75 c8                	jne    c001c64f <ATA::readyForCommand()+0x9>
c001c687:	31 c0                	xor    eax,eax
c001c689:	eb 02                	jmp    c001c68d <ATA::readyForCommand()+0x47>
c001c68b:	b0 01                	mov    al,0x1
c001c68d:	5a                   	pop    edx
c001c68e:	5b                   	pop    ebx
c001c68f:	5e                   	pop    esi
c001c690:	c3                   	ret    
c001c691:	90                   	nop

c001c692 <ATA::access(unsigned long long, int, void*, bool)>:
c001c692:	55                   	push   ebp
c001c693:	57                   	push   edi
c001c694:	56                   	push   esi
c001c695:	53                   	push   ebx
c001c696:	83 ec 2c             	sub    esp,0x2c
c001c699:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c69d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6a1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6a5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6ad:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c6b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c6bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6bf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c6c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6c9:	c1 e0 06             	shl    eax,0x6
c001c6cc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c6d4:	74 5b                	je     c001c731 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c6d6:	89 fa                	mov    edx,edi
c001c6d8:	89 f0                	mov    eax,esi
c001c6da:	c1 ea 1c             	shr    edx,0x1c
c001c6dd:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c6e1:	89 d1                	mov    ecx,edx
c001c6e3:	09 c1                	or     ecx,eax
c001c6e5:	74 25                	je     c001c70c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c6e7:	31 ed                	xor    ebp,ebp
c001c6e9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c6f0:	89 fa                	mov    edx,edi
c001c6f2:	89 f0                	mov    eax,esi
c001c6f4:	0f ad d0             	shrd   eax,edx,cl
c001c6f7:	d3 ea                	shr    edx,cl
c001c6f9:	f6 c1 20             	test   cl,0x20
c001c6fc:	74 02                	je     c001c700 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c6fe:	89 d0                	mov    eax,edx
c001c700:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c704:	45                   	inc    ebp
c001c705:	83 fd 06             	cmp    ebp,0x6
c001c708:	75 df                	jne    c001c6e9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c70a:	eb 71                	jmp    c001c77d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c70c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c711:	89 f0                	mov    eax,esi
c001c713:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c71a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c71e:	bf 01 00 00 00       	mov    edi,0x1
c001c723:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c727:	c1 ee 18             	shr    esi,0x18
c001c72a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c72f:	eb 53                	jmp    c001c784 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c731:	6a 00                	push   0x0
c001c733:	6a 3f                	push   0x3f
c001c735:	57                   	push   edi
c001c736:	56                   	push   esi
c001c737:	e8 d4 2a 00 00       	call   c001f210 <__umoddi3>
c001c73c:	83 c4 10             	add    esp,0x10
c001c73f:	40                   	inc    eax
c001c740:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c744:	6a 00                	push   0x0
c001c746:	68 f0 03 00 00       	push   0x3f0
c001c74b:	57                   	push   edi
c001c74c:	56                   	push   esi
c001c74d:	e8 be 29 00 00       	call   c001f110 <__udivdi3>
c001c752:	83 c4 10             	add    esp,0x10
c001c755:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c75a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c761:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c766:	6a 00                	push   0x0
c001c768:	6a 3f                	push   0x3f
c001c76a:	57                   	push   edi
c001c76b:	31 ff                	xor    edi,edi
c001c76d:	56                   	push   esi
c001c76e:	e8 9d 29 00 00       	call   c001f110 <__udivdi3>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	83 e0 0f             	and    eax,0xf
c001c779:	89 c6                	mov    esi,eax
c001c77b:	eb 07                	jmp    c001c784 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c77d:	31 f6                	xor    esi,esi
c001c77f:	bf 02 00 00 00       	mov    edi,0x2
c001c784:	50                   	push   eax
c001c785:	6a 00                	push   0x0
c001c787:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c78e:	50                   	push   eax
c001c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c793:	e8 b6 f1 ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001c798:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c79b:	e8 a6 fe ff ff       	call   c001c646 <ATA::readyForCommand()>
c001c7a0:	83 c4 10             	add    esp,0x10
c001c7a3:	84 c0                	test   al,al
c001c7a5:	75 0a                	jne    c001c7b1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c7a7:	be 01 00 00 00       	mov    esi,0x1
c001c7ac:	e9 9b 02 00 00       	jmp    c001ca4c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c7b1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c7b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c7bd:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c7c4:	c1 e0 04             	shl    eax,0x4
c001c7c7:	09 c6                	or     esi,eax
c001c7c9:	f7 c7 03 00 00 00    	test   edi,0x3
c001c7cf:	75 05                	jne    c001c7d6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c7d1:	83 ce a0             	or     esi,0xffffffa0
c001c7d4:	eb 03                	jmp    c001c7d9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c7d6:	83 ce e0             	or     esi,0xffffffe0
c001c7d9:	89 f0                	mov    eax,esi
c001c7db:	0f b6 f0             	movzx  esi,al
c001c7de:	56                   	push   esi
c001c7df:	6a 06                	push   0x6
c001c7e1:	51                   	push   ecx
c001c7e2:	52                   	push   edx
c001c7e3:	e8 58 ef ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	6a 00                	push   0x0
c001c7ed:	6a 01                	push   0x1
c001c7ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7f6:	50                   	push   eax
c001c7f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7fd:	e8 3e ef ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c802:	89 f8                	mov    eax,edi
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	0f b6 f0             	movzx  esi,al
c001c80a:	83 fe 02             	cmp    esi,0x2
c001c80d:	75 6e                	jne    c001c87d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c80f:	6a 00                	push   0x0
c001c811:	6a 08                	push   0x8
c001c813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c81a:	50                   	push   eax
c001c81b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c821:	e8 1a ef ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c826:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c82b:	50                   	push   eax
c001c82c:	6a 09                	push   0x9
c001c82e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c835:	50                   	push   eax
c001c836:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c83c:	e8 ff ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c841:	83 c4 20             	add    esp,0x20
c001c844:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c849:	50                   	push   eax
c001c84a:	6a 0a                	push   0xa
c001c84c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c853:	50                   	push   eax
c001c854:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c85a:	e8 e1 ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c85f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c864:	50                   	push   eax
c001c865:	6a 0b                	push   0xb
c001c867:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c86e:	50                   	push   eax
c001c86f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c875:	e8 c6 ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c87a:	83 c4 20             	add    esp,0x20
c001c87d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c882:	50                   	push   eax
c001c883:	6a 02                	push   0x2
c001c885:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c88c:	50                   	push   eax
c001c88d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c893:	e8 a8 ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c898:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c89d:	50                   	push   eax
c001c89e:	6a 03                	push   0x3
c001c8a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a7:	50                   	push   eax
c001c8a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ae:	e8 8d ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b3:	83 c4 20             	add    esp,0x20
c001c8b6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c8bb:	50                   	push   eax
c001c8bc:	6a 04                	push   0x4
c001c8be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8c5:	50                   	push   eax
c001c8c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8cc:	e8 6f ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c8d6:	50                   	push   eax
c001c8d7:	6a 05                	push   0x5
c001c8d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e0:	50                   	push   eax
c001c8e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8e7:	e8 54 ee ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ec:	83 c4 20             	add    esp,0x20
c001c8ef:	83 fe 02             	cmp    esi,0x2
c001c8f2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c8f7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c8fc:	85 c9                	test   ecx,ecx
c001c8fe:	74 07                	je     c001c907 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c900:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c905:	75 47                	jne    c001c94e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c907:	89 f8                	mov    eax,edi
c001c909:	0f b6 f8             	movzx  edi,al
c001c90c:	31 c0                	xor    eax,eax
c001c90e:	83 ff 02             	cmp    edi,0x2
c001c911:	0f 95 c0             	setne  al
c001c914:	89 c6                	mov    esi,eax
c001c916:	74 0c                	je     c001c924 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c918:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c91d:	b8 30 00 00 00       	mov    eax,0x30
c001c922:	75 2f                	jne    c001c953 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c924:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c928:	83 f2 01             	xor    edx,0x1
c001c92b:	85 c9                	test   ecx,ecx
c001c92d:	74 09                	je     c001c938 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c92f:	84 d2                	test   dl,dl
c001c931:	b8 24 00 00 00       	mov    eax,0x24
c001c936:	75 1b                	jne    c001c953 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c938:	85 f6                	test   esi,esi
c001c93a:	0f 84 67 fe ff ff    	je     c001c7a7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c940:	84 d2                	test   dl,dl
c001c942:	b8 20 00 00 00       	mov    eax,0x20
c001c947:	75 0a                	jne    c001c953 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c949:	e9 59 fe ff ff       	jmp    c001c7a7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c94e:	b8 34 00 00 00       	mov    eax,0x34
c001c953:	50                   	push   eax
c001c954:	6a 07                	push   0x7
c001c956:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c95d:	50                   	push   eax
c001c95e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c964:	e8 d7 ed ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c969:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c975:	85 f6                	test   esi,esi
c001c977:	0f 84 b5 00 00 00    	je     c001ca32 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c97d:	50                   	push   eax
c001c97e:	6a 01                	push   0x1
c001c980:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c987:	50                   	push   eax
c001c988:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c98e:	e8 91 f8 ff ff       	call   c001c224 <IDE::polling(unsigned char, unsigned int)>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c99c:	0f b6 c0             	movzx  eax,al
c001c99f:	85 c0                	test   eax,eax
c001c9a1:	74 1f                	je     c001c9c2 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c9a3:	50                   	push   eax
c001c9a4:	89 c6                	mov    esi,eax
c001c9a6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9ad:	0f b6 d2             	movzx  edx,dl
c001c9b0:	50                   	push   eax
c001c9b1:	52                   	push   edx
c001c9b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b8:	e8 ad f7 ff ff       	call   c001c16a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9bd:	e9 87 00 00 00       	jmp    c001ca49 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c9c2:	85 ed                	test   ebp,ebp
c001c9c4:	74 3b                	je     c001ca01 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c9c6:	31 ff                	xor    edi,edi
c001c9c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9cc:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c9d0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c9d5:	50                   	push   eax
c001c9d6:	50                   	push   eax
c001c9d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9de:	50                   	push   eax
c001c9df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e5:	e8 44 ed ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001c9ea:	89 c2                	mov    edx,eax
c001c9ec:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c9f1:	66 ef                	out    dx,ax
c001c9f3:	47                   	inc    edi
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	81 ff 00 01 00 00    	cmp    edi,0x100
c001c9fd:	75 c9                	jne    c001c9c8 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001c9ff:	eb 23                	jmp    c001ca24 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca01:	51                   	push   ecx
c001ca02:	0f b6 d2             	movzx  edx,dl
c001ca05:	51                   	push   ecx
c001ca06:	52                   	push   edx
c001ca07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0d:	e8 1c ed ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001ca12:	b9 00 01 00 00       	mov    ecx,0x100
c001ca17:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca1b:	89 c2                	mov    edx,eax
c001ca1d:	fc                   	cld    
c001ca1e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca2c:	4e                   	dec    esi
c001ca2d:	e9 43 ff ff ff       	jmp    c001c975 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001ca32:	31 f6                	xor    esi,esi
c001ca34:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca39:	74 11                	je     c001ca4c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ca3b:	50                   	push   eax
c001ca3c:	50                   	push   eax
c001ca3d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ca42:	50                   	push   eax
c001ca43:	53                   	push   ebx
c001ca44:	e8 af fb ff ff       	call   c001c5f8 <ATA::flush(bool)>
c001ca49:	83 c4 10             	add    esp,0x10
c001ca4c:	83 c4 2c             	add    esp,0x2c
c001ca4f:	89 f0                	mov    eax,esi
c001ca51:	5b                   	pop    ebx
c001ca52:	5e                   	pop    esi
c001ca53:	5f                   	pop    edi
c001ca54:	5d                   	pop    ebp
c001ca55:	c3                   	ret    

c001ca56 <ATA::detectCHS()>:
c001ca56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca5a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca60:	c1 e0 06             	shl    eax,0x6
c001ca63:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca69:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca73:	c7 44 24 04 4c 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b4c
c001ca7b:	e9 cd 46 ff ff       	jmp    c001114d <KePanic(char const*)>

c001ca80 <ATA::open(int, int, void*)>:
c001ca80:	53                   	push   ebx
c001ca81:	83 ec 08             	sub    esp,0x8
c001ca84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca96:	c1 e0 06             	shl    eax,0x6
c001ca99:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ca9f:	01 d0                	add    eax,edx
c001caa1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001caa8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001caae:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cab5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cabf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cac6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cacc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cad3:	75 0c                	jne    c001cae1 <ATA::open(int, int, void*)+0x61>
c001cad5:	83 ec 0c             	sub    esp,0xc
c001cad8:	53                   	push   ebx
c001cad9:	e8 78 ff ff ff       	call   c001ca56 <ATA::detectCHS()>
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cae7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001caed:	c1 e0 06             	shl    eax,0x6
c001caf0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001caf7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb01:	d1 e8                	shr    eax,1
c001cb03:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb09:	6a 04                	push   0x4
c001cb0b:	6a 0c                	push   0xc
c001cb0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb14:	50                   	push   eax
c001cb15:	52                   	push   edx
c001cb16:	e8 25 ec ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1b:	90                   	nop
c001cb1c:	90                   	nop
c001cb1d:	6a 00                	push   0x0
c001cb1f:	6a 0c                	push   0xc
c001cb21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb28:	50                   	push   eax
c001cb29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb2f:	e8 0c ec ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb34:	83 c4 14             	add    esp,0x14
c001cb37:	53                   	push   ebx
c001cb38:	e8 cd fe fe ff       	call   c000ca0a <PhysicalDisk::startCache()>
c001cb3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb40:	e8 11 11 ff ff       	call   c000dc56 <createPartitionsForDisk(PhysicalDisk*)>
c001cb45:	83 c4 18             	add    esp,0x18
c001cb48:	31 c0                	xor    eax,eax
c001cb4a:	5b                   	pop    ebx
c001cb4b:	c3                   	ret    

c001cb4c <combineCharAndColour(char, unsigned char)>:
c001cb4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb51:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb57:	c1 e0 08             	shl    eax,0x8
c001cb5a:	09 d0                	or     eax,edx
c001cb5c:	c3                   	ret    

c001cb5d <combineColours(unsigned char, unsigned char)>:
c001cb5d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb62:	c1 e0 04             	shl    eax,0x4
c001cb65:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb69:	c3                   	ret    

c001cb6a <ATA::read(unsigned long long, int, void*)>:
c001cb6a:	55                   	push   ebp
c001cb6b:	57                   	push   edi
c001cb6c:	56                   	push   esi
c001cb6d:	be 04 00 00 00       	mov    esi,0x4
c001cb72:	53                   	push   ebx
c001cb73:	83 ec 0c             	sub    esp,0xc
c001cb76:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb86:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cb89:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cb8f:	0f 87 a1 01 00 00    	ja     c001cd36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cb95:	85 c9                	test   ecx,ecx
c001cb97:	be 06 00 00 00       	mov    esi,0x6
c001cb9c:	0f 84 94 01 00 00    	je     c001cd36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cba2:	55                   	push   ebp
c001cba3:	55                   	push   ebp
c001cba4:	6a 00                	push   0x0
c001cba6:	51                   	push   ecx
c001cba7:	53                   	push   ebx
c001cba8:	52                   	push   edx
c001cba9:	50                   	push   eax
c001cbaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbae:	e8 df fa ff ff       	call   c001c692 <ATA::access(unsigned long long, int, void*, bool)>
c001cbb3:	83 c4 20             	add    esp,0x20
c001cbb6:	85 c0                	test   eax,eax
c001cbb8:	89 c6                	mov    esi,eax
c001cbba:	0f 85 71 01 00 00    	jne    c001cd31 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbc0:	50                   	push   eax
c001cbc1:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbc6:	50                   	push   eax
c001cbc7:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbcd:	6a 0f                	push   0xf
c001cbcf:	6a 00                	push   0x0
c001cbd1:	89 da                	mov    edx,ebx
c001cbd3:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cbd9:	e8 7f ff ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001cbde:	59                   	pop    ecx
c001cbdf:	b9 0a 00 00 00       	mov    ecx,0xa
c001cbe4:	5b                   	pop    ebx
c001cbe5:	0f b6 d8             	movzx  ebx,al
c001cbe8:	89 d0                	mov    eax,edx
c001cbea:	53                   	push   ebx
c001cbeb:	99                   	cdq    
c001cbec:	f7 fd                	idiv   ebp
c001cbee:	99                   	cdq    
c001cbef:	f7 f9                	idiv   ecx
c001cbf1:	83 c2 30             	add    edx,0x30
c001cbf4:	0f b6 d2             	movzx  edx,dl
c001cbf7:	52                   	push   edx
c001cbf8:	e8 4f ff ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cbfd:	5f                   	pop    edi
c001cbfe:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc03:	5a                   	pop    edx
c001cc04:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc0a:	53                   	push   ebx
c001cc0b:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc10:	99                   	cdq    
c001cc11:	f7 ff                	idiv   edi
c001cc13:	99                   	cdq    
c001cc14:	f7 f9                	idiv   ecx
c001cc16:	8d 42 30             	lea    eax,[edx+0x30]
c001cc19:	0f b6 c0             	movzx  eax,al
c001cc1c:	50                   	push   eax
c001cc1d:	e8 2a ff ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cc22:	5f                   	pop    edi
c001cc23:	bf 64 00 00 00       	mov    edi,0x64
c001cc28:	5a                   	pop    edx
c001cc29:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc2f:	53                   	push   ebx
c001cc30:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc35:	99                   	cdq    
c001cc36:	f7 ff                	idiv   edi
c001cc38:	99                   	cdq    
c001cc39:	f7 f9                	idiv   ecx
c001cc3b:	8d 42 30             	lea    eax,[edx+0x30]
c001cc3e:	0f b6 c0             	movzx  eax,al
c001cc41:	50                   	push   eax
c001cc42:	e8 05 ff ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cc47:	5a                   	pop    edx
c001cc48:	5a                   	pop    edx
c001cc49:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc4f:	53                   	push   ebx
c001cc50:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc55:	99                   	cdq    
c001cc56:	f7 f9                	idiv   ecx
c001cc58:	99                   	cdq    
c001cc59:	f7 f9                	idiv   ecx
c001cc5b:	8d 42 30             	lea    eax,[edx+0x30]
c001cc5e:	0f b6 c0             	movzx  eax,al
c001cc61:	50                   	push   eax
c001cc62:	e8 e5 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cc67:	5a                   	pop    edx
c001cc68:	5a                   	pop    edx
c001cc69:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc6f:	53                   	push   ebx
c001cc70:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc75:	99                   	cdq    
c001cc76:	f7 f9                	idiv   ecx
c001cc78:	83 c2 30             	add    edx,0x30
c001cc7b:	0f b6 d2             	movzx  edx,dl
c001cc7e:	52                   	push   edx
c001cc7f:	e8 c8 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cc84:	5a                   	pop    edx
c001cc85:	5a                   	pop    edx
c001cc86:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cc8c:	53                   	push   ebx
c001cc8d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cc92:	99                   	cdq    
c001cc93:	f7 fd                	idiv   ebp
c001cc95:	99                   	cdq    
c001cc96:	f7 f9                	idiv   ecx
c001cc98:	8d 42 30             	lea    eax,[edx+0x30]
c001cc9b:	0f b6 c0             	movzx  eax,al
c001cc9e:	50                   	push   eax
c001cc9f:	e8 a8 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cca4:	5d                   	pop    ebp
c001cca5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccaa:	5a                   	pop    edx
c001ccab:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ccb1:	53                   	push   ebx
c001ccb2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccb7:	99                   	cdq    
c001ccb8:	f7 fd                	idiv   ebp
c001ccba:	99                   	cdq    
c001ccbb:	f7 f9                	idiv   ecx
c001ccbd:	8d 42 30             	lea    eax,[edx+0x30]
c001ccc0:	0f b6 c0             	movzx  eax,al
c001ccc3:	50                   	push   eax
c001ccc4:	e8 83 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ccc9:	5d                   	pop    ebp
c001ccca:	5a                   	pop    edx
c001cccb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ccd1:	53                   	push   ebx
c001ccd2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccd7:	99                   	cdq    
c001ccd8:	f7 ff                	idiv   edi
c001ccda:	99                   	cdq    
c001ccdb:	f7 f9                	idiv   ecx
c001ccdd:	8d 42 30             	lea    eax,[edx+0x30]
c001cce0:	0f b6 c0             	movzx  eax,al
c001cce3:	50                   	push   eax
c001cce4:	e8 63 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cce9:	5f                   	pop    edi
c001ccea:	5d                   	pop    ebp
c001cceb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ccf1:	53                   	push   ebx
c001ccf2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccf7:	99                   	cdq    
c001ccf8:	f7 f9                	idiv   ecx
c001ccfa:	99                   	cdq    
c001ccfb:	f7 f9                	idiv   ecx
c001ccfd:	8d 42 30             	lea    eax,[edx+0x30]
c001cd00:	0f b6 c0             	movzx  eax,al
c001cd03:	50                   	push   eax
c001cd04:	e8 43 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cd09:	5a                   	pop    edx
c001cd0a:	5f                   	pop    edi
c001cd0b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd11:	53                   	push   ebx
c001cd12:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd17:	99                   	cdq    
c001cd18:	f7 f9                	idiv   ecx
c001cd1a:	83 c2 30             	add    edx,0x30
c001cd1d:	0f b6 d2             	movzx  edx,dl
c001cd20:	52                   	push   edx
c001cd21:	e8 26 fe ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd2f:	eb 05                	jmp    c001cd36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd31:	be 01 00 00 00       	mov    esi,0x1
c001cd36:	83 c4 0c             	add    esp,0xc
c001cd39:	89 f0                	mov    eax,esi
c001cd3b:	5b                   	pop    ebx
c001cd3c:	5e                   	pop    esi
c001cd3d:	5f                   	pop    edi
c001cd3e:	5d                   	pop    ebp
c001cd3f:	c3                   	ret    

c001cd40 <ATA::write(unsigned long long, int, void*)>:
c001cd40:	55                   	push   ebp
c001cd41:	57                   	push   edi
c001cd42:	56                   	push   esi
c001cd43:	be 04 00 00 00       	mov    esi,0x4
c001cd48:	53                   	push   ebx
c001cd49:	83 ec 0c             	sub    esp,0xc
c001cd4c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd5c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd5f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd65:	0f 87 9c 01 00 00    	ja     c001cf07 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd6b:	85 c9                	test   ecx,ecx
c001cd6d:	be 06 00 00 00       	mov    esi,0x6
c001cd72:	0f 84 8f 01 00 00    	je     c001cf07 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd78:	55                   	push   ebp
c001cd79:	55                   	push   ebp
c001cd7a:	6a 01                	push   0x1
c001cd7c:	51                   	push   ecx
c001cd7d:	53                   	push   ebx
c001cd7e:	52                   	push   edx
c001cd7f:	50                   	push   eax
c001cd80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd84:	e8 09 f9 ff ff       	call   c001c692 <ATA::access(unsigned long long, int, void*, bool)>
c001cd89:	83 c4 20             	add    esp,0x20
c001cd8c:	85 c0                	test   eax,eax
c001cd8e:	89 c6                	mov    esi,eax
c001cd90:	0f 85 6c 01 00 00    	jne    c001cf02 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cd96:	50                   	push   eax
c001cd97:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd9c:	50                   	push   eax
c001cd9d:	6a 0f                	push   0xf
c001cd9f:	6a 00                	push   0x0
c001cda1:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cda7:	e8 b1 fd ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001cdac:	5a                   	pop    edx
c001cdad:	59                   	pop    ecx
c001cdae:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdb3:	0f b6 d8             	movzx  ebx,al
c001cdb6:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdbb:	53                   	push   ebx
c001cdbc:	99                   	cdq    
c001cdbd:	f7 fd                	idiv   ebp
c001cdbf:	99                   	cdq    
c001cdc0:	f7 f9                	idiv   ecx
c001cdc2:	8d 42 30             	lea    eax,[edx+0x30]
c001cdc5:	0f b6 c0             	movzx  eax,al
c001cdc8:	50                   	push   eax
c001cdc9:	e8 7e fd ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cdce:	5f                   	pop    edi
c001cdcf:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdd4:	5a                   	pop    edx
c001cdd5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cddb:	53                   	push   ebx
c001cddc:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cde1:	99                   	cdq    
c001cde2:	f7 ff                	idiv   edi
c001cde4:	99                   	cdq    
c001cde5:	f7 f9                	idiv   ecx
c001cde7:	8d 42 30             	lea    eax,[edx+0x30]
c001cdea:	0f b6 c0             	movzx  eax,al
c001cded:	50                   	push   eax
c001cdee:	e8 59 fd ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cdf3:	5f                   	pop    edi
c001cdf4:	bf 64 00 00 00       	mov    edi,0x64
c001cdf9:	5a                   	pop    edx
c001cdfa:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce00:	53                   	push   ebx
c001ce01:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce06:	99                   	cdq    
c001ce07:	f7 ff                	idiv   edi
c001ce09:	99                   	cdq    
c001ce0a:	f7 f9                	idiv   ecx
c001ce0c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce0f:	0f b6 c0             	movzx  eax,al
c001ce12:	50                   	push   eax
c001ce13:	e8 34 fd ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ce18:	5a                   	pop    edx
c001ce19:	5a                   	pop    edx
c001ce1a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce20:	53                   	push   ebx
c001ce21:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce26:	99                   	cdq    
c001ce27:	f7 f9                	idiv   ecx
c001ce29:	99                   	cdq    
c001ce2a:	f7 f9                	idiv   ecx
c001ce2c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce2f:	0f b6 c0             	movzx  eax,al
c001ce32:	50                   	push   eax
c001ce33:	e8 14 fd ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ce38:	5a                   	pop    edx
c001ce39:	5a                   	pop    edx
c001ce3a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce40:	53                   	push   ebx
c001ce41:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce46:	99                   	cdq    
c001ce47:	f7 f9                	idiv   ecx
c001ce49:	83 c2 30             	add    edx,0x30
c001ce4c:	0f b6 d2             	movzx  edx,dl
c001ce4f:	52                   	push   edx
c001ce50:	e8 f7 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ce55:	5a                   	pop    edx
c001ce56:	5a                   	pop    edx
c001ce57:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce5d:	53                   	push   ebx
c001ce5e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce63:	99                   	cdq    
c001ce64:	f7 fd                	idiv   ebp
c001ce66:	99                   	cdq    
c001ce67:	f7 f9                	idiv   ecx
c001ce69:	8d 42 30             	lea    eax,[edx+0x30]
c001ce6c:	0f b6 c0             	movzx  eax,al
c001ce6f:	50                   	push   eax
c001ce70:	e8 d7 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ce75:	5d                   	pop    ebp
c001ce76:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce7b:	5a                   	pop    edx
c001ce7c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce82:	53                   	push   ebx
c001ce83:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce88:	99                   	cdq    
c001ce89:	f7 fd                	idiv   ebp
c001ce8b:	99                   	cdq    
c001ce8c:	f7 f9                	idiv   ecx
c001ce8e:	8d 42 30             	lea    eax,[edx+0x30]
c001ce91:	0f b6 c0             	movzx  eax,al
c001ce94:	50                   	push   eax
c001ce95:	e8 b2 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ce9a:	5d                   	pop    ebp
c001ce9b:	5a                   	pop    edx
c001ce9c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cea2:	53                   	push   ebx
c001cea3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cea8:	99                   	cdq    
c001cea9:	f7 ff                	idiv   edi
c001ceab:	99                   	cdq    
c001ceac:	f7 f9                	idiv   ecx
c001ceae:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb1:	0f b6 c0             	movzx  eax,al
c001ceb4:	50                   	push   eax
c001ceb5:	e8 92 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ceba:	5f                   	pop    edi
c001cebb:	5d                   	pop    ebp
c001cebc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cec2:	53                   	push   ebx
c001cec3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cec8:	99                   	cdq    
c001cec9:	f7 f9                	idiv   ecx
c001cecb:	99                   	cdq    
c001cecc:	f7 f9                	idiv   ecx
c001cece:	8d 42 30             	lea    eax,[edx+0x30]
c001ced1:	0f b6 c0             	movzx  eax,al
c001ced4:	50                   	push   eax
c001ced5:	e8 72 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001ceda:	5a                   	pop    edx
c001cedb:	5f                   	pop    edi
c001cedc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cee2:	53                   	push   ebx
c001cee3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cee8:	99                   	cdq    
c001cee9:	f7 f9                	idiv   ecx
c001ceeb:	83 c2 30             	add    edx,0x30
c001ceee:	0f b6 d2             	movzx  edx,dl
c001cef1:	52                   	push   edx
c001cef2:	e8 55 fc ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001cef7:	83 c4 10             	add    esp,0x10
c001cefa:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf00:	eb 05                	jmp    c001cf07 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf02:	be 01 00 00 00       	mov    esi,0x1
c001cf07:	83 c4 0c             	add    esp,0xc
c001cf0a:	89 f0                	mov    eax,esi
c001cf0c:	5b                   	pop    ebx
c001cf0d:	5e                   	pop    esi
c001cf0e:	5f                   	pop    edi
c001cf0f:	5d                   	pop    ebp
c001cf10:	c3                   	ret    
c001cf11:	90                   	nop

c001cf12 <ATAPI::write(unsigned long long, int, void*)>:
c001cf12:	b8 03 00 00 00       	mov    eax,0x3
c001cf17:	c3                   	ret    

c001cf18 <ATAPI::close(int, int, void*)>:
c001cf18:	83 ec 0c             	sub    esp,0xc
c001cf1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf25:	85 c0                	test   eax,eax
c001cf27:	74 0c                	je     c001cf35 <ATAPI::close(int, int, void*)+0x1d>
c001cf29:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf2b:	83 ec 0c             	sub    esp,0xc
c001cf2e:	50                   	push   eax
c001cf2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf32:	83 c4 10             	add    esp,0x10
c001cf35:	31 c0                	xor    eax,eax
c001cf37:	83 c4 0c             	add    esp,0xc
c001cf3a:	c3                   	ret    
c001cf3b:	90                   	nop

c001cf3c <ATAPI::ATAPI()>:
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf43:	83 ec 04             	sub    esp,0x4
c001cf46:	68 00 08 00 00       	push   0x800
c001cf4b:	68 95 2c 02 c0       	push   0xc0022c95
c001cf50:	50                   	push   eax
c001cf51:	e8 4c fa fe ff       	call   c000c9a2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	ba b0 2b 02 c0       	mov    edx,0xc0022bb0
c001cf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf62:	89 10                	mov    DWORD PTR [eax],edx
c001cf64:	90                   	nop
c001cf65:	83 c4 0c             	add    esp,0xc
c001cf68:	c3                   	ret    
c001cf69:	90                   	nop

c001cf6a <ATAPI::readyForCommand()>:
c001cf6a:	56                   	push   esi
c001cf6b:	53                   	push   ebx
c001cf6c:	53                   	push   ebx
c001cf6d:	31 db                	xor    ebx,ebx
c001cf6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf73:	51                   	push   ecx
c001cf74:	6a 0c                	push   0xc
c001cf76:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cf7d:	50                   	push   eax
c001cf7e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cf84:	e8 77 e8 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001cf89:	83 c4 10             	add    esp,0x10
c001cf8c:	a8 88                	test   al,0x88
c001cf8e:	74 25                	je     c001cfb5 <ATAPI::readyForCommand()+0x4b>
c001cf90:	43                   	inc    ebx
c001cf91:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cf97:	7e da                	jle    c001cf73 <ATAPI::readyForCommand()+0x9>
c001cf99:	83 ec 0c             	sub    esp,0xc
c001cf9c:	68 5e 01 00 00       	push   0x15e
c001cfa1:	e8 c6 8d ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001cfa6:	83 c4 10             	add    esp,0x10
c001cfa9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfaf:	75 c2                	jne    c001cf73 <ATAPI::readyForCommand()+0x9>
c001cfb1:	31 c0                	xor    eax,eax
c001cfb3:	eb 02                	jmp    c001cfb7 <ATAPI::readyForCommand()+0x4d>
c001cfb5:	b0 01                	mov    al,0x1
c001cfb7:	5a                   	pop    edx
c001cfb8:	5b                   	pop    ebx
c001cfb9:	5e                   	pop    esi
c001cfba:	c3                   	ret    
c001cfbb:	90                   	nop

c001cfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfbc:	55                   	push   ebp
c001cfbd:	57                   	push   edi
c001cfbe:	56                   	push   esi
c001cfbf:	53                   	push   ebx
c001cfc0:	83 ec 20             	sub    esp,0x20
c001cfc3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfc7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cfcb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cfcf:	6a 01                	push   0x1
c001cfd1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfd8:	50                   	push   eax
c001cfd9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfdf:	e8 6a e9 ff ff       	call   c001b94e <IDE::enableIRQs(unsigned char, bool)>
c001cfe4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfeb:	59                   	pop    ecx
c001cfec:	5e                   	pop    esi
c001cfed:	50                   	push   eax
c001cfee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cff4:	e8 21 e7 ff ff       	call   c001b71a <IDE::prepareInterrupt(unsigned char)>
c001cff9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cffc:	e8 69 ff ff ff       	call   c001cf6a <ATAPI::readyForCommand()>
c001d001:	83 c4 10             	add    esp,0x10
c001d004:	84 c0                	test   al,al
c001d006:	75 0a                	jne    c001d012 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d008:	bb 01 00 00 00       	mov    ebx,0x1
c001d00d:	e9 5f 02 00 00       	jmp    c001d271 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d012:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d018:	c1 e0 04             	shl    eax,0x4
c001d01b:	0f b6 c0             	movzx  eax,al
c001d01e:	50                   	push   eax
c001d01f:	6a 06                	push   0x6
c001d021:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d028:	50                   	push   eax
c001d029:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d02f:	e8 0c e7 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d034:	6a 00                	push   0x0
c001d036:	6a 01                	push   0x1
c001d038:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d03f:	50                   	push   eax
c001d040:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d046:	e8 f5 e6 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d04b:	83 c4 20             	add    esp,0x20
c001d04e:	0f b6 c3             	movzx  eax,bl
c001d051:	50                   	push   eax
c001d052:	0f b6 df             	movzx  ebx,bh
c001d055:	6a 04                	push   0x4
c001d057:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d05e:	50                   	push   eax
c001d05f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d065:	e8 d6 e6 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06a:	53                   	push   ebx
c001d06b:	6a 05                	push   0x5
c001d06d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d074:	50                   	push   eax
c001d075:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d07b:	e8 c0 e6 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d080:	83 c4 20             	add    esp,0x20
c001d083:	68 a0 00 00 00       	push   0xa0
c001d088:	6a 07                	push   0x7
c001d08a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d091:	50                   	push   eax
c001d092:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d098:	e8 a3 e6 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09d:	83 c4 0c             	add    esp,0xc
c001d0a0:	6a 01                	push   0x1
c001d0a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a9:	50                   	push   eax
c001d0aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0b0:	e8 6f f1 ff ff       	call   c001c224 <IDE::polling(unsigned char, unsigned int)>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	0f b6 d8             	movzx  ebx,al
c001d0bb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0c1:	85 db                	test   ebx,ebx
c001d0c3:	74 20                	je     c001d0e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d0c5:	53                   	push   ebx
c001d0c6:	0f b6 c0             	movzx  eax,al
c001d0c9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d0d0:	52                   	push   edx
c001d0d1:	50                   	push   eax
c001d0d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0d8:	e8 8d f0 ff ff       	call   c001c16a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	e9 8c 01 00 00       	jmp    c001d271 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d0e5:	52                   	push   edx
c001d0e6:	0f b6 c0             	movzx  eax,al
c001d0e9:	52                   	push   edx
c001d0ea:	50                   	push   eax
c001d0eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f1:	e8 38 e6 ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001d0f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d0fa:	b9 06 00 00 00       	mov    ecx,0x6
c001d0ff:	89 c2                	mov    edx,eax
c001d101:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d104:	89 e8                	mov    eax,ebp
c001d106:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	0f b6 c0             	movzx  eax,al
c001d110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d114:	85 db                	test   ebx,ebx
c001d116:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d11c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d123:	0f 84 eb 00 00 00    	je     c001d214 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d129:	55                   	push   ebp
c001d12a:	55                   	push   ebp
c001d12b:	52                   	push   edx
c001d12c:	50                   	push   eax
c001d12d:	e8 82 e7 ff ff       	call   c001b8b4 <IDE::waitInterrupt(unsigned char)>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	84 c0                	test   al,al
c001d137:	0f 84 cb fe ff ff    	je     c001d008 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d13d:	56                   	push   esi
c001d13e:	56                   	push   esi
c001d13f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d146:	50                   	push   eax
c001d147:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d14d:	e8 c8 e5 ff ff       	call   c001b71a <IDE::prepareInterrupt(unsigned char)>
c001d152:	83 c4 0c             	add    esp,0xc
c001d155:	6a 04                	push   0x4
c001d157:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d15e:	50                   	push   eax
c001d15f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d165:	e8 96 e6 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001d16a:	83 c4 0c             	add    esp,0xc
c001d16d:	6a 05                	push   0x5
c001d16f:	89 c6                	mov    esi,eax
c001d171:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d178:	50                   	push   eax
c001d179:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17f:	e8 7c e6 ff ff       	call   c001b800 <IDE::read(unsigned char, unsigned char)>
c001d184:	83 c4 10             	add    esp,0x10
c001d187:	0f b6 e8             	movzx  ebp,al
c001d18a:	89 f0                	mov    eax,esi
c001d18c:	c1 e5 08             	shl    ebp,0x8
c001d18f:	0f b6 f0             	movzx  esi,al
c001d192:	09 f5                	or     ebp,esi
c001d194:	31 f6                	xor    esi,esi
c001d196:	d1 fd                	sar    ebp,1
c001d198:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d19d:	74 5c                	je     c001d1fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d19f:	39 ee                	cmp    esi,ebp
c001d1a1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1a7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1ae:	75 0d                	jne    c001d1bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d1b0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d1b3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d1b7:	4b                   	dec    ebx
c001d1b8:	e9 57 ff ff ff       	jmp    c001d114 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d1bd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d1c1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d1c5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d1ca:	51                   	push   ecx
c001d1cb:	51                   	push   ecx
c001d1cc:	52                   	push   edx
c001d1cd:	50                   	push   eax
c001d1ce:	e8 5b e5 ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001d1d3:	89 c2                	mov    edx,eax
c001d1d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d1da:	66 ef                	out    dx,ax
c001d1dc:	46                   	inc    esi
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	eb bd                	jmp    c001d19f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d1e2:	51                   	push   ecx
c001d1e3:	51                   	push   ecx
c001d1e4:	52                   	push   edx
c001d1e5:	50                   	push   eax
c001d1e6:	e8 43 e5 ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001d1eb:	89 c2                	mov    edx,eax
c001d1ed:	66 ed                	in     ax,dx
c001d1ef:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d1fa:	46                   	inc    esi
c001d1fb:	39 ee                	cmp    esi,ebp
c001d1fd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d203:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d20a:	75 d6                	jne    c001d1e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d20c:	01 f6                	add    esi,esi
c001d20e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d212:	eb a3                	jmp    c001d1b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d214:	51                   	push   ecx
c001d215:	51                   	push   ecx
c001d216:	52                   	push   edx
c001d217:	50                   	push   eax
c001d218:	e8 97 e6 ff ff       	call   c001b8b4 <IDE::waitInterrupt(unsigned char)>
c001d21d:	83 c4 10             	add    esp,0x10
c001d220:	84 c0                	test   al,al
c001d222:	0f 84 e0 fd ff ff    	je     c001d008 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d228:	52                   	push   edx
c001d229:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d22e:	52                   	push   edx
c001d22f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d236:	50                   	push   eax
c001d237:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d23d:	e8 d8 e4 ff ff       	call   c001b71a <IDE::prepareInterrupt(unsigned char)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	50                   	push   eax
c001d246:	50                   	push   eax
c001d247:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d24e:	50                   	push   eax
c001d24f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d255:	e8 d4 e4 ff ff       	call   c001b72e <IDE::getBase(unsigned char)>
c001d25a:	8d 50 07             	lea    edx,[eax+0x7]
c001d25d:	ec                   	in     al,dx
c001d25e:	83 c4 10             	add    esp,0x10
c001d261:	a8 88                	test   al,0x88
c001d263:	74 0a                	je     c001d26f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d265:	4b                   	dec    ebx
c001d266:	75 dd                	jne    c001d245 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d268:	bb 02 00 00 00       	mov    ebx,0x2
c001d26d:	eb 02                	jmp    c001d271 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d26f:	31 db                	xor    ebx,ebx
c001d271:	83 c4 1c             	add    esp,0x1c
c001d274:	89 d8                	mov    eax,ebx
c001d276:	5b                   	pop    ebx
c001d277:	5e                   	pop    esi
c001d278:	5f                   	pop    edi
c001d279:	5d                   	pop    ebp
c001d27a:	c3                   	ret    
c001d27b:	90                   	nop

c001d27c <ATAPI::diskRemoved()>:
c001d27c:	53                   	push   ebx
c001d27d:	83 ec 14             	sub    esp,0x14
c001d280:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d284:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d28b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d291:	e8 ae 06 ff ff       	call   c000d944 <LogicalDisk::unmount()>
c001d296:	58                   	pop    eax
c001d297:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d29d:	e8 86 10 ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c001d2a2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ac:	83 c4 18             	add    esp,0x18
c001d2af:	5b                   	pop    ebx
c001d2b0:	e9 63 10 ff ff       	jmp    c000e318 <VCache::invalidateReadBuffer()>
c001d2b5:	90                   	nop

c001d2b6 <ATAPI::eject()>:
c001d2b6:	57                   	push   edi
c001d2b7:	b9 03 00 00 00       	mov    ecx,0x3
c001d2bc:	53                   	push   ebx
c001d2bd:	83 ec 14             	sub    esp,0x14
c001d2c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2c8:	fc                   	cld    
c001d2c9:	31 c0                	xor    eax,eax
c001d2cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2cd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d2d2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d2d7:	50                   	push   eax
c001d2d8:	50                   	push   eax
c001d2d9:	6a 00                	push   0x0
c001d2db:	6a 00                	push   0x0
c001d2dd:	6a 00                	push   0x0
c001d2df:	6a 02                	push   0x2
c001d2e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2e5:	50                   	push   eax
c001d2e6:	53                   	push   ebx
c001d2e7:	e8 d0 fc ff ff       	call   c001cfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d2ec:	83 c4 14             	add    esp,0x14
c001d2ef:	53                   	push   ebx
c001d2f0:	e8 87 ff ff ff       	call   c001d27c <ATAPI::diskRemoved()>
c001d2f5:	83 c4 24             	add    esp,0x24
c001d2f8:	31 c0                	xor    eax,eax
c001d2fa:	5b                   	pop    ebx
c001d2fb:	5f                   	pop    edi
c001d2fc:	c3                   	ret    
c001d2fd:	90                   	nop

c001d2fe <ATAPI::diskInserted()>:
c001d2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d302:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d309:	c3                   	ret    

c001d30a <ATAPI::detectMedia()>:
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	83 ec 28             	sub    esp,0x28
c001d30f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d313:	6a 0c                	push   0xc
c001d315:	6a 00                	push   0x0
c001d317:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d31b:	56                   	push   esi
c001d31c:	e8 cf 31 fe ff       	call   c00004f0 <memset>
c001d321:	58                   	pop    eax
c001d322:	5a                   	pop    edx
c001d323:	6a 00                	push   0x0
c001d325:	6a 00                	push   0x0
c001d327:	6a 00                	push   0x0
c001d329:	6a 00                	push   0x0
c001d32b:	56                   	push   esi
c001d32c:	53                   	push   ebx
c001d32d:	e8 8a fc ff ff       	call   c001cfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d332:	83 c4 1c             	add    esp,0x1c
c001d335:	6a 0c                	push   0xc
c001d337:	6a 00                	push   0x0
c001d339:	56                   	push   esi
c001d33a:	e8 b1 31 fe ff       	call   c00004f0 <memset>
c001d33f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d344:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d349:	59                   	pop    ecx
c001d34a:	58                   	pop    eax
c001d34b:	6a 01                	push   0x1
c001d34d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d351:	50                   	push   eax
c001d352:	6a 00                	push   0x0
c001d354:	6a 12                	push   0x12
c001d356:	56                   	push   esi
c001d357:	53                   	push   ebx
c001d358:	e8 5f fc ff ff       	call   c001cfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d35d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d361:	83 c4 20             	add    esp,0x20
c001d364:	83 e0 7f             	and    eax,0x7f
c001d367:	83 f8 70             	cmp    eax,0x70
c001d36a:	74 15                	je     c001d381 <ATAPI::detectMedia()+0x77>
c001d36c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d373:	75 0c                	jne    c001d381 <ATAPI::detectMedia()+0x77>
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	53                   	push   ebx
c001d379:	e8 80 ff ff ff       	call   c001d2fe <ATAPI::diskInserted()>
c001d37e:	83 c4 10             	add    esp,0x10
c001d381:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d385:	83 e0 0f             	and    eax,0xf
c001d388:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d38d:	0f b6 c0             	movzx  eax,al
c001d390:	75 19                	jne    c001d3ab <ATAPI::detectMedia()+0xa1>
c001d392:	83 f8 02             	cmp    eax,0x2
c001d395:	75 14                	jne    c001d3ab <ATAPI::detectMedia()+0xa1>
c001d397:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d39e:	74 24                	je     c001d3c4 <ATAPI::detectMedia()+0xba>
c001d3a0:	83 ec 0c             	sub    esp,0xc
c001d3a3:	53                   	push   ebx
c001d3a4:	e8 d3 fe ff ff       	call   c001d27c <ATAPI::diskRemoved()>
c001d3a9:	eb 16                	jmp    c001d3c1 <ATAPI::detectMedia()+0xb7>
c001d3ab:	85 c0                	test   eax,eax
c001d3ad:	75 15                	jne    c001d3c4 <ATAPI::detectMedia()+0xba>
c001d3af:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3b6:	75 0c                	jne    c001d3c4 <ATAPI::detectMedia()+0xba>
c001d3b8:	83 ec 0c             	sub    esp,0xc
c001d3bb:	53                   	push   ebx
c001d3bc:	e8 3d ff ff ff       	call   c001d2fe <ATAPI::diskInserted()>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	83 c4 24             	add    esp,0x24
c001d3c7:	5b                   	pop    ebx
c001d3c8:	5e                   	pop    esi
c001d3c9:	c3                   	ret    

c001d3ca <ATAPI::open(int, int, void*)>:
c001d3ca:	56                   	push   esi
c001d3cb:	53                   	push   ebx
c001d3cc:	50                   	push   eax
c001d3cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3d9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d3df:	c1 e0 06             	shl    eax,0x6
c001d3e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d3e8:	01 d0                	add    eax,edx
c001d3ea:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d3f1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d3f7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d3fe:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d408:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d40f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d415:	6a 04                	push   0x4
c001d417:	6a 0c                	push   0xc
c001d419:	51                   	push   ecx
c001d41a:	52                   	push   edx
c001d41b:	e8 20 e3 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d420:	90                   	nop
c001d421:	90                   	nop
c001d422:	6a 00                	push   0x0
c001d424:	6a 0c                	push   0xc
c001d426:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d42d:	50                   	push   eax
c001d42e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d434:	e8 07 e3 ff ff       	call   c001b740 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d439:	83 c4 14             	add    esp,0x14
c001d43c:	68 78 01 00 00       	push   0x178
c001d441:	e8 8d a6 fe ff       	call   c0007ad3 <malloc>
c001d446:	83 c4 0c             	add    esp,0xc
c001d449:	6a 00                	push   0x0
c001d44b:	68 ff ff ff 7f       	push   0x7fffffff
c001d450:	6a 00                	push   0x0
c001d452:	6a 00                	push   0x0
c001d454:	53                   	push   ebx
c001d455:	68 47 2d 02 c0       	push   0xc0022d47
c001d45a:	89 c6                	mov    esi,eax
c001d45c:	50                   	push   eax
c001d45d:	e8 20 03 ff ff       	call   c000d782 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d462:	83 c4 14             	add    esp,0x14
c001d465:	56                   	push   esi
c001d466:	e8 d7 03 ff ff       	call   c000d842 <LogicalDisk::assignDriveLetter()>
c001d46b:	5a                   	pop    edx
c001d46c:	59                   	pop    ecx
c001d46d:	0f be c0             	movsx  eax,al
c001d470:	50                   	push   eax
c001d471:	68 98 2b 02 c0       	push   0xc0022b98
c001d476:	e8 8f d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d47b:	58                   	pop    eax
c001d47c:	5a                   	pop    edx
c001d47d:	56                   	push   esi
c001d47e:	53                   	push   ebx
c001d47f:	e8 50 f1 fe ff       	call   c000c5d4 <Device::addChild(Device*)>
c001d484:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d48a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d48d:	e8 78 f5 fe ff       	call   c000ca0a <PhysicalDisk::startCache()>
c001d492:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d499:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d49c:	e8 69 fe ff ff       	call   c001d30a <ATAPI::detectMedia()>
c001d4a1:	83 c4 14             	add    esp,0x14
c001d4a4:	31 c0                	xor    eax,eax
c001d4a6:	5b                   	pop    ebx
c001d4a7:	5e                   	pop    esi
c001d4a8:	c3                   	ret    
c001d4a9:	90                   	nop

c001d4aa <ATAPI::read(unsigned long long, int, void*)>:
c001d4aa:	55                   	push   ebp
c001d4ab:	57                   	push   edi
c001d4ac:	56                   	push   esi
c001d4ad:	53                   	push   ebx
c001d4ae:	83 ec 1c             	sub    esp,0x1c
c001d4b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4b9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4bd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4c4:	74 3c                	je     c001d502 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4c6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4ca:	b9 03 00 00 00       	mov    ecx,0x3
c001d4cf:	fc                   	cld    
c001d4d0:	31 c0                	xor    eax,eax
c001d4d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4d4:	89 e8                	mov    eax,ebp
c001d4d6:	0f ce                	bswap  esi
c001d4d8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d4dc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d4e1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d4e5:	50                   	push   eax
c001d4e6:	50                   	push   eax
c001d4e7:	55                   	push   ebp
c001d4e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4ec:	c1 e5 0b             	shl    ebp,0xb
c001d4ef:	6a 00                	push   0x0
c001d4f1:	55                   	push   ebp
c001d4f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4f6:	50                   	push   eax
c001d4f7:	53                   	push   ebx
c001d4f8:	e8 bf fa ff ff       	call   c001cfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4fd:	83 c4 20             	add    esp,0x20
c001d500:	eb 1a                	jmp    c001d51c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d502:	83 ec 0c             	sub    esp,0xc
c001d505:	53                   	push   ebx
c001d506:	e8 ff fd ff ff       	call   c001d30a <ATAPI::detectMedia()>
c001d50b:	83 c4 10             	add    esp,0x10
c001d50e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d515:	75 af                	jne    c001d4c6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d517:	b8 02 00 00 00       	mov    eax,0x2
c001d51c:	83 c4 1c             	add    esp,0x1c
c001d51f:	5b                   	pop    ebx
c001d520:	5e                   	pop    esi
c001d521:	5f                   	pop    edi
c001d522:	5d                   	pop    ebp
c001d523:	c3                   	ret    

c001d524 <SATA::close(int, int, void*)>:
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d531:	85 c0                	test   eax,eax
c001d533:	74 0c                	je     c001d541 <SATA::close(int, int, void*)+0x1d>
c001d535:	8b 10                	mov    edx,DWORD PTR [eax]
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	50                   	push   eax
c001d53b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	31 c0                	xor    eax,eax
c001d543:	83 c4 0c             	add    esp,0xc
c001d546:	c3                   	ret    
c001d547:	90                   	nop

c001d548 <SATA::powerSaving(PowerSavingLevel)>:
c001d548:	c3                   	ret    
c001d549:	90                   	nop

c001d54a <SATA::open(int, int, void*)>:
c001d54a:	56                   	push   esi
c001d54b:	53                   	push   ebx
c001d54c:	50                   	push   eax
c001d54d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d551:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d555:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d55f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d569:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d573:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d57d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d584:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d58a:	e8 53 a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d58f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d595:	89 c6                	mov    esi,eax
c001d597:	e8 46 a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d59c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5a2:	39 c6                	cmp    esi,eax
c001d5a4:	74 10                	je     c001d5b6 <SATA::open(int, int, void*)+0x6c>
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	68 e0 2b 02 c0       	push   0xc0022be0
c001d5ae:	e8 9a 3b ff ff       	call   c001114d <KePanic(char const*)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	83 ec 0c             	sub    esp,0xc
c001d5b9:	6a 02                	push   0x2
c001d5bb:	e8 35 c0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d5c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5c6:	6a 03                	push   0x3
c001d5c8:	50                   	push   eax
c001d5c9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d5cf:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d5d5:	e8 24 c7 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5da:	83 c4 14             	add    esp,0x14
c001d5dd:	53                   	push   ebx
c001d5de:	e8 27 f4 fe ff       	call   c000ca0a <PhysicalDisk::startCache()>
c001d5e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5e6:	e8 6b 06 ff ff       	call   c000dc56 <createPartitionsForDisk(PhysicalDisk*)>
c001d5eb:	83 c4 14             	add    esp,0x14
c001d5ee:	31 c0                	xor    eax,eax
c001d5f0:	5b                   	pop    ebx
c001d5f1:	5e                   	pop    esi
c001d5f2:	c3                   	ret    
c001d5f3:	90                   	nop

c001d5f4 <SATA::SATA()>:
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	83 ec 04             	sub    esp,0x4
c001d5fe:	68 00 02 00 00       	push   0x200
c001d603:	68 f4 2b 02 c0       	push   0xc0022bf4
c001d608:	50                   	push   eax
c001d609:	e8 94 f3 fe ff       	call   c000c9a2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d60e:	83 c4 10             	add    esp,0x10
c001d611:	ba 64 2c 02 c0       	mov    edx,0xc0022c64
c001d616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61a:	89 10                	mov    DWORD PTR [eax],edx
c001d61c:	90                   	nop
c001d61d:	83 c4 0c             	add    esp,0xc
c001d620:	c3                   	ret    
c001d621:	90                   	nop

c001d622 <SATA::access(unsigned long long, int, void*, bool)>:
c001d622:	55                   	push   ebp
c001d623:	57                   	push   edi
c001d624:	56                   	push   esi
c001d625:	53                   	push   ebx
c001d626:	83 ec 2c             	sub    esp,0x2c
c001d629:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d62d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d632:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d636:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d63a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d63e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d642:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d646:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d64a:	7e 10                	jle    c001d65c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d64c:	83 ec 0c             	sub    esp,0xc
c001d64f:	68 04 2c 02 c0       	push   0xc0022c04
c001d654:	e8 f4 3a ff ff       	call   c001114d <KePanic(char const*)>
c001d659:	83 c4 10             	add    esp,0x10
c001d65c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d662:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d668:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d66e:	89 e8                	mov    eax,ebp
c001d670:	c1 e0 07             	shl    eax,0x7
c001d673:	01 d0                	add    eax,edx
c001d675:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d67f:	8d 45 02             	lea    eax,[ebp+0x2]
c001d682:	51                   	push   ecx
c001d683:	c1 e0 07             	shl    eax,0x7
c001d686:	51                   	push   ecx
c001d687:	01 d0                	add    eax,edx
c001d689:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d68d:	50                   	push   eax
c001d68e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d694:	e8 6b ec ff ff       	call   c001c304 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d699:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d6a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6a9:	0f 84 5b 01 00 00    	je     c001d80a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6b3:	c1 e0 09             	shl    eax,0x9
c001d6b6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d6bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6bf:	74 0e                	je     c001d6cf <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d6c1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6c7:	89 c1                	mov    ecx,eax
c001d6c9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d6cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6d3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d6d9:	8d 45 02             	lea    eax,[ebp+0x2]
c001d6dc:	c1 e0 07             	shl    eax,0x7
c001d6df:	01 d0                	add    eax,edx
c001d6e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6e3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d6e9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d6ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6f3:	c1 e1 05             	shl    ecx,0x5
c001d6f6:	01 c8                	add    eax,ecx
c001d6f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6fc:	83 e1 01             	and    ecx,0x1
c001d6ff:	89 ce                	mov    esi,ecx
c001d701:	8a 08                	mov    cl,BYTE PTR [eax]
c001d703:	c1 e6 06             	shl    esi,0x6
c001d706:	83 e1 bf             	and    ecx,0xffffffbf
c001d709:	09 f1                	or     ecx,esi
c001d70b:	88 08                	mov    BYTE PTR [eax],cl
c001d70d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d70f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d715:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d71b:	89 08                	mov    DWORD PTR [eax],ecx
c001d71d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d723:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d729:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d72f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d732:	50                   	push   eax
c001d733:	68 90 00 00 00       	push   0x90
c001d738:	6a 00                	push   0x0
c001d73a:	56                   	push   esi
c001d73b:	e8 b0 2d fe ff       	call   c00004f0 <memset>
c001d740:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d746:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d74c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d750:	83 c4 10             	add    esp,0x10
c001d753:	48                   	dec    eax
c001d754:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d759:	89 c1                	mov    ecx,eax
c001d75b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d761:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d766:	09 c8                	or     eax,ecx
c001d768:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d76e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d774:	83 c8 80             	or     eax,0xffffff80
c001d777:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d77d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d780:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d784:	25 00 7f 00 00       	and    eax,0x7f00
c001d789:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d78e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d793:	66 89 06             	mov    WORD PTR [esi],ax
c001d796:	b0 35                	mov    al,0x35
c001d798:	75 02                	jne    c001d79c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d79a:	b0 25                	mov    al,0x25
c001d79c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d79f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7a3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7a7:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d7ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7af:	c1 e8 10             	shr    eax,0x10
c001d7b2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7b9:	c1 e8 18             	shr    eax,0x18
c001d7bc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7bf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7c3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7ca:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7d1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d7d5:	89 ee                	mov    esi,ebp
c001d7d7:	31 c0                	xor    eax,eax
c001d7d9:	c1 e6 07             	shl    esi,0x7
c001d7dc:	01 d6                	add    esi,edx
c001d7de:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d7e4:	80 e1 88             	and    cl,0x88
c001d7e7:	74 0a                	je     c001d7f3 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d7e9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7ee:	74 0a                	je     c001d7fa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d7f0:	40                   	inc    eax
c001d7f1:	eb eb                	jmp    c001d7de <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d7f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7f8:	75 17                	jne    c001d811 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d7fa:	83 ec 0c             	sub    esp,0xc
c001d7fd:	68 3d 2c 02 c0       	push   0xc0022c3d
c001d802:	e8 03 d1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	b8 01 00 00 00       	mov    eax,0x1
c001d80f:	eb 5b                	jmp    c001d86c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d811:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d815:	c1 e5 07             	shl    ebp,0x7
c001d818:	b8 01 00 00 00       	mov    eax,0x1
c001d81d:	01 ea                	add    edx,ebp
c001d81f:	d3 e0                	shl    eax,cl
c001d821:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d827:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d82d:	85 c8                	test   eax,ecx
c001d82f:	74 16                	je     c001d847 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d831:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d837:	0f ba e1 1e          	bt     ecx,0x1e
c001d83b:	73 ea                	jae    c001d827 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d83d:	83 ec 0c             	sub    esp,0xc
c001d840:	68 4b 2c 02 c0       	push   0xc0022c4b
c001d845:	eb bb                	jmp    c001d802 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d847:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d84d:	0f ba e0 1e          	bt     eax,0x1e
c001d851:	72 b7                	jb     c001d80a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d853:	31 c0                	xor    eax,eax
c001d855:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d85a:	75 10                	jne    c001d86c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d85c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d862:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d866:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d86a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d86c:	83 c4 2c             	add    esp,0x2c
c001d86f:	5b                   	pop    ebx
c001d870:	5e                   	pop    esi
c001d871:	5f                   	pop    edi
c001d872:	5d                   	pop    ebp
c001d873:	c3                   	ret    

c001d874 <SATA::read(unsigned long long, int, void*)>:
c001d874:	55                   	push   ebp
c001d875:	57                   	push   edi
c001d876:	56                   	push   esi
c001d877:	be 04 00 00 00       	mov    esi,0x4
c001d87c:	53                   	push   ebx
c001d87d:	83 ec 0c             	sub    esp,0xc
c001d880:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d888:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d88c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d890:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d893:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d899:	0f 87 1a 02 00 00    	ja     c001dab9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d89f:	85 c9                	test   ecx,ecx
c001d8a1:	be 06 00 00 00       	mov    esi,0x6
c001d8a6:	0f 84 0d 02 00 00    	je     c001dab9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d8ac:	56                   	push   esi
c001d8ad:	56                   	push   esi
c001d8ae:	6a 00                	push   0x0
c001d8b0:	51                   	push   ecx
c001d8b1:	53                   	push   ebx
c001d8b2:	52                   	push   edx
c001d8b3:	50                   	push   eax
c001d8b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8b8:	e8 65 fd ff ff       	call   c001d622 <SATA::access(unsigned long long, int, void*, bool)>
c001d8bd:	83 c4 20             	add    esp,0x20
c001d8c0:	85 c0                	test   eax,eax
c001d8c2:	89 c6                	mov    esi,eax
c001d8c4:	0f 85 ea 01 00 00    	jne    c001dab4 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8ca:	50                   	push   eax
c001d8cb:	50                   	push   eax
c001d8cc:	6a 0f                	push   0xf
c001d8ce:	6a 00                	push   0x0
c001d8d0:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d8d6:	bb 0a 00 00 00       	mov    ebx,0xa
c001d8db:	e8 7d f2 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d8e0:	5a                   	pop    edx
c001d8e1:	59                   	pop    ecx
c001d8e2:	b9 10 27 00 00       	mov    ecx,0x2710
c001d8e7:	0f b6 c0             	movzx  eax,al
c001d8ea:	50                   	push   eax
c001d8eb:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d8f0:	99                   	cdq    
c001d8f1:	f7 f9                	idiv   ecx
c001d8f3:	99                   	cdq    
c001d8f4:	f7 fb                	idiv   ebx
c001d8f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d8f9:	0f b6 c0             	movzx  eax,al
c001d8fc:	50                   	push   eax
c001d8fd:	e8 4a f2 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d902:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d908:	5f                   	pop    edi
c001d909:	5d                   	pop    ebp
c001d90a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d90f:	6a 0f                	push   0xf
c001d911:	6a 00                	push   0x0
c001d913:	e8 45 f2 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d918:	5a                   	pop    edx
c001d919:	59                   	pop    ecx
c001d91a:	0f b6 c0             	movzx  eax,al
c001d91d:	50                   	push   eax
c001d91e:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d923:	99                   	cdq    
c001d924:	f7 fd                	idiv   ebp
c001d926:	99                   	cdq    
c001d927:	f7 fb                	idiv   ebx
c001d929:	8d 42 30             	lea    eax,[edx+0x30]
c001d92c:	0f b6 c0             	movzx  eax,al
c001d92f:	50                   	push   eax
c001d930:	e8 17 f2 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d935:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d93b:	5f                   	pop    edi
c001d93c:	bf 64 00 00 00       	mov    edi,0x64
c001d941:	58                   	pop    eax
c001d942:	6a 0f                	push   0xf
c001d944:	6a 00                	push   0x0
c001d946:	e8 12 f2 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d94b:	5a                   	pop    edx
c001d94c:	59                   	pop    ecx
c001d94d:	0f b6 c0             	movzx  eax,al
c001d950:	50                   	push   eax
c001d951:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d956:	99                   	cdq    
c001d957:	f7 ff                	idiv   edi
c001d959:	99                   	cdq    
c001d95a:	f7 fb                	idiv   ebx
c001d95c:	8d 42 30             	lea    eax,[edx+0x30]
c001d95f:	0f b6 c0             	movzx  eax,al
c001d962:	50                   	push   eax
c001d963:	e8 e4 f1 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d968:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d96e:	58                   	pop    eax
c001d96f:	5a                   	pop    edx
c001d970:	6a 0f                	push   0xf
c001d972:	6a 00                	push   0x0
c001d974:	e8 e4 f1 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d979:	59                   	pop    ecx
c001d97a:	5a                   	pop    edx
c001d97b:	0f b6 c0             	movzx  eax,al
c001d97e:	50                   	push   eax
c001d97f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d984:	99                   	cdq    
c001d985:	f7 fb                	idiv   ebx
c001d987:	99                   	cdq    
c001d988:	f7 fb                	idiv   ebx
c001d98a:	8d 42 30             	lea    eax,[edx+0x30]
c001d98d:	0f b6 c0             	movzx  eax,al
c001d990:	50                   	push   eax
c001d991:	e8 b6 f1 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d996:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d99c:	59                   	pop    ecx
c001d99d:	58                   	pop    eax
c001d99e:	6a 0f                	push   0xf
c001d9a0:	6a 00                	push   0x0
c001d9a2:	e8 b6 f1 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d9a7:	5a                   	pop    edx
c001d9a8:	59                   	pop    ecx
c001d9a9:	0f b6 c0             	movzx  eax,al
c001d9ac:	50                   	push   eax
c001d9ad:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9b2:	99                   	cdq    
c001d9b3:	f7 fb                	idiv   ebx
c001d9b5:	83 c2 30             	add    edx,0x30
c001d9b8:	0f b6 d2             	movzx  edx,dl
c001d9bb:	52                   	push   edx
c001d9bc:	e8 8b f1 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d9c1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9c7:	58                   	pop    eax
c001d9c8:	5a                   	pop    edx
c001d9c9:	6a 0f                	push   0xf
c001d9cb:	6a 00                	push   0x0
c001d9cd:	e8 8b f1 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001d9d2:	59                   	pop    ecx
c001d9d3:	b9 10 27 00 00       	mov    ecx,0x2710
c001d9d8:	5a                   	pop    edx
c001d9d9:	0f b6 c0             	movzx  eax,al
c001d9dc:	50                   	push   eax
c001d9dd:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001d9e2:	99                   	cdq    
c001d9e3:	f7 f9                	idiv   ecx
c001d9e5:	99                   	cdq    
c001d9e6:	f7 fb                	idiv   ebx
c001d9e8:	8d 42 30             	lea    eax,[edx+0x30]
c001d9eb:	0f b6 c0             	movzx  eax,al
c001d9ee:	50                   	push   eax
c001d9ef:	e8 58 f1 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001d9f4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d9fa:	59                   	pop    ecx
c001d9fb:	58                   	pop    eax
c001d9fc:	6a 0f                	push   0xf
c001d9fe:	6a 00                	push   0x0
c001da00:	e8 58 f1 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001da05:	5a                   	pop    edx
c001da06:	59                   	pop    ecx
c001da07:	0f b6 c0             	movzx  eax,al
c001da0a:	50                   	push   eax
c001da0b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da10:	99                   	cdq    
c001da11:	f7 fd                	idiv   ebp
c001da13:	99                   	cdq    
c001da14:	f7 fb                	idiv   ebx
c001da16:	8d 42 30             	lea    eax,[edx+0x30]
c001da19:	0f b6 c0             	movzx  eax,al
c001da1c:	50                   	push   eax
c001da1d:	e8 2a f1 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001da22:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da28:	5d                   	pop    ebp
c001da29:	58                   	pop    eax
c001da2a:	6a 0f                	push   0xf
c001da2c:	6a 00                	push   0x0
c001da2e:	e8 2a f1 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001da33:	5a                   	pop    edx
c001da34:	59                   	pop    ecx
c001da35:	0f b6 c0             	movzx  eax,al
c001da38:	50                   	push   eax
c001da39:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da3e:	99                   	cdq    
c001da3f:	f7 ff                	idiv   edi
c001da41:	99                   	cdq    
c001da42:	f7 fb                	idiv   ebx
c001da44:	8d 42 30             	lea    eax,[edx+0x30]
c001da47:	0f b6 c0             	movzx  eax,al
c001da4a:	50                   	push   eax
c001da4b:	e8 fc f0 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001da50:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da56:	5f                   	pop    edi
c001da57:	5d                   	pop    ebp
c001da58:	6a 0f                	push   0xf
c001da5a:	6a 00                	push   0x0
c001da5c:	e8 fc f0 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001da61:	5a                   	pop    edx
c001da62:	59                   	pop    ecx
c001da63:	0f b6 c0             	movzx  eax,al
c001da66:	50                   	push   eax
c001da67:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da6c:	99                   	cdq    
c001da6d:	f7 fb                	idiv   ebx
c001da6f:	99                   	cdq    
c001da70:	f7 fb                	idiv   ebx
c001da72:	8d 42 30             	lea    eax,[edx+0x30]
c001da75:	0f b6 c0             	movzx  eax,al
c001da78:	50                   	push   eax
c001da79:	e8 ce f0 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001da7e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001da84:	5f                   	pop    edi
c001da85:	5d                   	pop    ebp
c001da86:	6a 0f                	push   0xf
c001da88:	6a 00                	push   0x0
c001da8a:	e8 ce f0 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001da8f:	5a                   	pop    edx
c001da90:	59                   	pop    ecx
c001da91:	0f b6 c0             	movzx  eax,al
c001da94:	50                   	push   eax
c001da95:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da9a:	99                   	cdq    
c001da9b:	f7 fb                	idiv   ebx
c001da9d:	83 c2 30             	add    edx,0x30
c001daa0:	0f b6 d2             	movzx  edx,dl
c001daa3:	52                   	push   edx
c001daa4:	e8 a3 f0 ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001daa9:	83 c4 10             	add    esp,0x10
c001daac:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dab2:	eb 05                	jmp    c001dab9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dab4:	be 01 00 00 00       	mov    esi,0x1
c001dab9:	83 c4 0c             	add    esp,0xc
c001dabc:	89 f0                	mov    eax,esi
c001dabe:	5b                   	pop    ebx
c001dabf:	5e                   	pop    esi
c001dac0:	5f                   	pop    edi
c001dac1:	5d                   	pop    ebp
c001dac2:	c3                   	ret    
c001dac3:	90                   	nop

c001dac4 <SATA::write(unsigned long long, int, void*)>:
c001dac4:	55                   	push   ebp
c001dac5:	57                   	push   edi
c001dac6:	56                   	push   esi
c001dac7:	53                   	push   ebx
c001dac8:	83 ec 0c             	sub    esp,0xc
c001dacb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dacf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dad7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dadb:	8d 70 ff             	lea    esi,[eax-0x1]
c001dade:	b8 04 00 00 00       	mov    eax,0x4
c001dae3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dae9:	0f 87 2c 02 00 00    	ja     c001dd1b <SATA::write(unsigned long long, int, void*)+0x257>
c001daef:	85 db                	test   ebx,ebx
c001daf1:	b8 06 00 00 00       	mov    eax,0x6
c001daf6:	0f 84 1f 02 00 00    	je     c001dd1b <SATA::write(unsigned long long, int, void*)+0x257>
c001dafc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db00:	c1 e6 09             	shl    esi,0x9
c001db03:	01 de                	add    esi,ebx
c001db05:	50                   	push   eax
c001db06:	89 d7                	mov    edi,edx
c001db08:	50                   	push   eax
c001db09:	83 c7 01             	add    edi,0x1
c001db0c:	6a 01                	push   0x1
c001db0e:	89 cd                	mov    ebp,ecx
c001db10:	53                   	push   ebx
c001db11:	83 d5 00             	adc    ebp,0x0
c001db14:	6a 01                	push   0x1
c001db16:	81 c3 00 02 00 00    	add    ebx,0x200
c001db1c:	51                   	push   ecx
c001db1d:	52                   	push   edx
c001db1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db22:	e8 fb fa ff ff       	call   c001d622 <SATA::access(unsigned long long, int, void*, bool)>
c001db27:	83 c4 20             	add    esp,0x20
c001db2a:	39 f3                	cmp    ebx,esi
c001db2c:	89 fa                	mov    edx,edi
c001db2e:	89 e9                	mov    ecx,ebp
c001db30:	75 d3                	jne    c001db05 <SATA::write(unsigned long long, int, void*)+0x41>
c001db32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db36:	bd 10 27 00 00       	mov    ebp,0x2710
c001db3b:	bb 0a 00 00 00       	mov    ebx,0xa
c001db40:	01 05 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,eax
c001db46:	50                   	push   eax
c001db47:	50                   	push   eax
c001db48:	6a 0f                	push   0xf
c001db4a:	6a 00                	push   0x0
c001db4c:	e8 0c f0 ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001db51:	5a                   	pop    edx
c001db52:	59                   	pop    ecx
c001db53:	0f b6 c0             	movzx  eax,al
c001db56:	50                   	push   eax
c001db57:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db5c:	99                   	cdq    
c001db5d:	f7 fd                	idiv   ebp
c001db5f:	99                   	cdq    
c001db60:	f7 fb                	idiv   ebx
c001db62:	8d 42 30             	lea    eax,[edx+0x30]
c001db65:	0f b6 c0             	movzx  eax,al
c001db68:	50                   	push   eax
c001db69:	e8 de ef ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001db6e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db74:	5e                   	pop    esi
c001db75:	5f                   	pop    edi
c001db76:	bf e8 03 00 00       	mov    edi,0x3e8
c001db7b:	6a 0f                	push   0xf
c001db7d:	6a 00                	push   0x0
c001db7f:	e8 d9 ef ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001db84:	5a                   	pop    edx
c001db85:	59                   	pop    ecx
c001db86:	0f b6 c0             	movzx  eax,al
c001db89:	50                   	push   eax
c001db8a:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db8f:	99                   	cdq    
c001db90:	f7 ff                	idiv   edi
c001db92:	99                   	cdq    
c001db93:	f7 fb                	idiv   ebx
c001db95:	8d 42 30             	lea    eax,[edx+0x30]
c001db98:	0f b6 c0             	movzx  eax,al
c001db9b:	50                   	push   eax
c001db9c:	e8 ab ef ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dba1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dba7:	5e                   	pop    esi
c001dba8:	be 64 00 00 00       	mov    esi,0x64
c001dbad:	58                   	pop    eax
c001dbae:	6a 0f                	push   0xf
c001dbb0:	6a 00                	push   0x0
c001dbb2:	e8 a6 ef ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dbb7:	5a                   	pop    edx
c001dbb8:	59                   	pop    ecx
c001dbb9:	0f b6 c0             	movzx  eax,al
c001dbbc:	50                   	push   eax
c001dbbd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbc2:	99                   	cdq    
c001dbc3:	f7 fe                	idiv   esi
c001dbc5:	99                   	cdq    
c001dbc6:	f7 fb                	idiv   ebx
c001dbc8:	8d 42 30             	lea    eax,[edx+0x30]
c001dbcb:	0f b6 c0             	movzx  eax,al
c001dbce:	50                   	push   eax
c001dbcf:	e8 78 ef ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dbd4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbda:	58                   	pop    eax
c001dbdb:	5a                   	pop    edx
c001dbdc:	6a 0f                	push   0xf
c001dbde:	6a 00                	push   0x0
c001dbe0:	e8 78 ef ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dbe5:	59                   	pop    ecx
c001dbe6:	5a                   	pop    edx
c001dbe7:	0f b6 c0             	movzx  eax,al
c001dbea:	50                   	push   eax
c001dbeb:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbf0:	99                   	cdq    
c001dbf1:	f7 fb                	idiv   ebx
c001dbf3:	99                   	cdq    
c001dbf4:	f7 fb                	idiv   ebx
c001dbf6:	8d 42 30             	lea    eax,[edx+0x30]
c001dbf9:	0f b6 c0             	movzx  eax,al
c001dbfc:	50                   	push   eax
c001dbfd:	e8 4a ef ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dc02:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc08:	59                   	pop    ecx
c001dc09:	58                   	pop    eax
c001dc0a:	6a 0f                	push   0xf
c001dc0c:	6a 00                	push   0x0
c001dc0e:	e8 4a ef ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dc13:	5a                   	pop    edx
c001dc14:	59                   	pop    ecx
c001dc15:	0f b6 c0             	movzx  eax,al
c001dc18:	50                   	push   eax
c001dc19:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc1e:	99                   	cdq    
c001dc1f:	f7 fb                	idiv   ebx
c001dc21:	83 c2 30             	add    edx,0x30
c001dc24:	0f b6 d2             	movzx  edx,dl
c001dc27:	52                   	push   edx
c001dc28:	e8 1f ef ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dc2d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc33:	58                   	pop    eax
c001dc34:	5a                   	pop    edx
c001dc35:	6a 0f                	push   0xf
c001dc37:	6a 00                	push   0x0
c001dc39:	e8 1f ef ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dc3e:	59                   	pop    ecx
c001dc3f:	5a                   	pop    edx
c001dc40:	0f b6 c0             	movzx  eax,al
c001dc43:	50                   	push   eax
c001dc44:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc49:	99                   	cdq    
c001dc4a:	f7 fd                	idiv   ebp
c001dc4c:	99                   	cdq    
c001dc4d:	f7 fb                	idiv   ebx
c001dc4f:	8d 42 30             	lea    eax,[edx+0x30]
c001dc52:	0f b6 c0             	movzx  eax,al
c001dc55:	50                   	push   eax
c001dc56:	e8 f1 ee ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dc5b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc61:	59                   	pop    ecx
c001dc62:	5d                   	pop    ebp
c001dc63:	6a 0f                	push   0xf
c001dc65:	6a 00                	push   0x0
c001dc67:	e8 f1 ee ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dc6c:	5a                   	pop    edx
c001dc6d:	59                   	pop    ecx
c001dc6e:	0f b6 c0             	movzx  eax,al
c001dc71:	50                   	push   eax
c001dc72:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc77:	99                   	cdq    
c001dc78:	f7 ff                	idiv   edi
c001dc7a:	99                   	cdq    
c001dc7b:	f7 fb                	idiv   ebx
c001dc7d:	8d 42 30             	lea    eax,[edx+0x30]
c001dc80:	0f b6 c0             	movzx  eax,al
c001dc83:	50                   	push   eax
c001dc84:	e8 c3 ee ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dc89:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc8f:	5f                   	pop    edi
c001dc90:	5d                   	pop    ebp
c001dc91:	6a 0f                	push   0xf
c001dc93:	6a 00                	push   0x0
c001dc95:	e8 c3 ee ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dc9a:	5a                   	pop    edx
c001dc9b:	59                   	pop    ecx
c001dc9c:	0f b6 c0             	movzx  eax,al
c001dc9f:	50                   	push   eax
c001dca0:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dca5:	99                   	cdq    
c001dca6:	f7 fe                	idiv   esi
c001dca8:	99                   	cdq    
c001dca9:	f7 fb                	idiv   ebx
c001dcab:	8d 42 30             	lea    eax,[edx+0x30]
c001dcae:	0f b6 c0             	movzx  eax,al
c001dcb1:	50                   	push   eax
c001dcb2:	e8 95 ee ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dcb7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcbd:	5e                   	pop    esi
c001dcbe:	5f                   	pop    edi
c001dcbf:	6a 0f                	push   0xf
c001dcc1:	6a 00                	push   0x0
c001dcc3:	e8 95 ee ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dcc8:	5d                   	pop    ebp
c001dcc9:	5a                   	pop    edx
c001dcca:	0f b6 c0             	movzx  eax,al
c001dccd:	50                   	push   eax
c001dcce:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcd3:	99                   	cdq    
c001dcd4:	f7 fb                	idiv   ebx
c001dcd6:	99                   	cdq    
c001dcd7:	f7 fb                	idiv   ebx
c001dcd9:	8d 42 30             	lea    eax,[edx+0x30]
c001dcdc:	0f b6 c0             	movzx  eax,al
c001dcdf:	50                   	push   eax
c001dce0:	e8 67 ee ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dce5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dceb:	59                   	pop    ecx
c001dcec:	5e                   	pop    esi
c001dced:	6a 0f                	push   0xf
c001dcef:	6a 00                	push   0x0
c001dcf1:	e8 67 ee ff ff       	call   c001cb5d <combineColours(unsigned char, unsigned char)>
c001dcf6:	5f                   	pop    edi
c001dcf7:	5d                   	pop    ebp
c001dcf8:	0f b6 c0             	movzx  eax,al
c001dcfb:	50                   	push   eax
c001dcfc:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd01:	99                   	cdq    
c001dd02:	f7 fb                	idiv   ebx
c001dd04:	83 c2 30             	add    edx,0x30
c001dd07:	0f b6 d2             	movzx  edx,dl
c001dd0a:	52                   	push   edx
c001dd0b:	e8 3c ee ff ff       	call   c001cb4c <combineCharAndColour(char, unsigned char)>
c001dd10:	83 c4 10             	add    esp,0x10
c001dd13:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd19:	31 c0                	xor    eax,eax
c001dd1b:	83 c4 0c             	add    esp,0xc
c001dd1e:	5b                   	pop    ebx
c001dd1f:	5e                   	pop    esi
c001dd20:	5f                   	pop    edi
c001dd21:	5d                   	pop    ebp
c001dd22:	c3                   	ret    
c001dd23:	90                   	nop

c001dd24 <SATAPI::write(unsigned long long, int, void*)>:
c001dd24:	b8 03 00 00 00       	mov    eax,0x3
c001dd29:	c3                   	ret    

c001dd2a <SATAPI::close(int, int, void*)>:
c001dd2a:	83 ec 0c             	sub    esp,0xc
c001dd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd37:	85 c0                	test   eax,eax
c001dd39:	74 0c                	je     c001dd47 <SATAPI::close(int, int, void*)+0x1d>
c001dd3b:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd3d:	83 ec 0c             	sub    esp,0xc
c001dd40:	50                   	push   eax
c001dd41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	31 c0                	xor    eax,eax
c001dd49:	83 c4 0c             	add    esp,0xc
c001dd4c:	c3                   	ret    
c001dd4d:	90                   	nop

c001dd4e <SATAPI::SATAPI()>:
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd55:	83 ec 04             	sub    esp,0x4
c001dd58:	68 00 08 00 00       	push   0x800
c001dd5d:	68 94 2c 02 c0       	push   0xc0022c94
c001dd62:	50                   	push   eax
c001dd63:	e8 3a ec fe ff       	call   c000c9a2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd68:	83 c4 10             	add    esp,0x10
c001dd6b:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c001dd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd74:	89 10                	mov    DWORD PTR [eax],edx
c001dd76:	90                   	nop
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	c3                   	ret    
c001dd7b:	90                   	nop

c001dd7c <SATAPI::diskRemoved()>:
c001dd7c:	c3                   	ret    
c001dd7d:	90                   	nop

c001dd7e <SATAPI::diskInserted()>:
c001dd7e:	83 ec 18             	sub    esp,0x18
c001dd81:	68 a0 2c 02 c0       	push   0xc0022ca0
c001dd86:	e8 7f cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd8f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001dd96:	83 c4 1c             	add    esp,0x1c
c001dd99:	c3                   	ret    

c001dd9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001dd9a:	55                   	push   ebp
c001dd9b:	57                   	push   edi
c001dd9c:	56                   	push   esi
c001dd9d:	53                   	push   ebx
c001dd9e:	83 ec 34             	sub    esp,0x34
c001dda1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dda5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dda9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ddad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ddb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddb5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ddbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddc5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ddcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddcf:	83 c0 02             	add    eax,0x2
c001ddd2:	c1 e0 07             	shl    eax,0x7
c001ddd5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dde1:	c1 e0 07             	shl    eax,0x7
c001dde4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dde8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ddec:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ddf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ddfa:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de00:	e8 ff e4 ff ff       	call   c001c304 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	89 c2                	mov    edx,eax
c001de0a:	b8 01 00 00 00       	mov    eax,0x1
c001de0f:	83 fa ff             	cmp    edx,0xffffffff
c001de12:	0f 84 5f 02 00 00    	je     c001e077 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001de18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de20:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de26:	8b 00                	mov    eax,DWORD PTR [eax]
c001de28:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de2e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de34:	89 d1                	mov    ecx,edx
c001de36:	c1 e1 05             	shl    ecx,0x5
c001de39:	01 c8                	add    eax,ecx
c001de3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de3d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de43:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de49:	89 08                	mov    DWORD PTR [eax],ecx
c001de4b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de51:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de57:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de5d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de60:	50                   	push   eax
c001de61:	68 90 00 00 00       	push   0x90
c001de66:	6a 00                	push   0x0
c001de68:	53                   	push   ebx
c001de69:	e8 82 26 fe ff       	call   c00004f0 <memset>
c001de6e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de71:	b9 0c 00 00 00       	mov    ecx,0xc
c001de76:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001de7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de7c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001de82:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001de86:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001de8a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001de90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de94:	48                   	dec    eax
c001de95:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de9a:	89 c1                	mov    ecx,eax
c001de9c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dea2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dea7:	09 c8                	or     eax,ecx
c001dea9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001deaf:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001deb5:	83 c8 80             	or     eax,0xffffff80
c001deb8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001debe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001dec1:	25 00 7f 00 00       	and    eax,0x7f00
c001dec6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001decb:	66 89 03             	mov    WORD PTR [ebx],ax
c001dece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001ded6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deda:	c1 e8 10             	shr    eax,0x10
c001dedd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee4:	c1 e8 18             	shr    eax,0x18
c001dee7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001deea:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001deee:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001def1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001def5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001def8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df03:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df07:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df0b:	31 c0                	xor    eax,eax
c001df0d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df13:	80 e1 88             	and    cl,0x88
c001df16:	74 0a                	je     c001df22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001df18:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df1d:	74 0a                	je     c001df29 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001df1f:	40                   	inc    eax
c001df20:	eb eb                	jmp    c001df0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001df22:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df27:	75 43                	jne    c001df6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	68 b8 2c 02 c0       	push   0xc0022cb8
c001df31:	e8 d4 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df36:	58                   	pop    eax
c001df37:	5a                   	pop    edx
c001df38:	68 cd 2c 02 c0       	push   0xc0022ccd
c001df3d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df43:	e8 64 ab fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001df48:	59                   	pop    ecx
c001df49:	5b                   	pop    ebx
c001df4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df4e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df54:	e8 45 e4 ff ff       	call   c001c39e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df59:	5e                   	pop    esi
c001df5a:	5f                   	pop    edi
c001df5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df5f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df65:	e8 14 e4 ff ff       	call   c001c37e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df6a:	eb 48                	jmp    c001dfb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001df6c:	b8 01 00 00 00       	mov    eax,0x1
c001df71:	88 d1                	mov    cl,dl
c001df73:	d3 e0                	shl    eax,cl
c001df75:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001df7a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001df80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df84:	89 c7                	mov    edi,eax
c001df86:	c1 e3 07             	shl    ebx,0x7
c001df89:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001df8d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001df93:	85 c7                	test   edi,eax
c001df95:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001df9b:	0f 84 a3 00 00 00    	je     c001e044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001dfa1:	0f ba e0 1e          	bt     eax,0x1e
c001dfa5:	73 1a                	jae    c001dfc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001dfa7:	83 ec 0c             	sub    esp,0xc
c001dfaa:	68 df 2c 02 c0       	push   0xc0022cdf
c001dfaf:	e8 56 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	b8 01 00 00 00       	mov    eax,0x1
c001dfbc:	e9 b6 00 00 00       	jmp    c001e077 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfc1:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001dfc7:	83 f8 0d             	cmp    eax,0xd
c001dfca:	77 0a                	ja     c001dfd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001dfcc:	83 ec 0c             	sub    esp,0xc
c001dfcf:	68 c8 00 00 00       	push   0xc8
c001dfd4:	eb 28                	jmp    c001dffe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001dfd6:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001dfdc:	83 f8 0d             	cmp    eax,0xd
c001dfdf:	77 0a                	ja     c001dfeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001dfe1:	83 ec 0c             	sub    esp,0xc
c001dfe4:	68 58 02 00 00       	push   0x258
c001dfe9:	eb 13                	jmp    c001dffe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001dfeb:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001dff1:	83 f8 06             	cmp    eax,0x6
c001dff4:	77 10                	ja     c001e006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	68 dc 05 00 00       	push   0x5dc
c001dffe:	e8 69 7d ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001e003:	83 c4 10             	add    esp,0x10
c001e006:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e00a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e00d:	75 06                	jne    c001e015 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e00f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e013:	74 15                	je     c001e02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e015:	83 fe 06             	cmp    esi,0x6
c001e018:	77 10                	ja     c001e02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e01a:	83 ec 0c             	sub    esp,0xc
c001e01d:	68 c4 09 00 00       	push   0x9c4
c001e022:	e8 45 7d ff ff       	call   c0015d6c <milliTenthSleep(unsigned int)>
c001e027:	83 c4 10             	add    esp,0x10
c001e02a:	46                   	inc    esi
c001e02b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e031:	0f 85 56 ff ff ff    	jne    c001df8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e037:	83 ec 0c             	sub    esp,0xc
c001e03a:	68 f2 2c 02 c0       	push   0xc0022cf2
c001e03f:	e9 6b ff ff ff       	jmp    c001dfaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e044:	0f ba e0 1e          	bt     eax,0x1e
c001e048:	73 0d                	jae    c001e057 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e04a:	83 ec 0c             	sub    esp,0xc
c001e04d:	68 06 2d 02 c0       	push   0xc0022d06
c001e052:	e9 58 ff ff ff       	jmp    c001dfaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e057:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e05c:	74 17                	je     c001e075 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e05e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e063:	74 10                	je     c001e075 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e065:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e06b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e06f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e073:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e075:	31 c0                	xor    eax,eax
c001e077:	83 c4 2c             	add    esp,0x2c
c001e07a:	5b                   	pop    ebx
c001e07b:	5e                   	pop    esi
c001e07c:	5f                   	pop    edi
c001e07d:	5d                   	pop    ebp
c001e07e:	c3                   	ret    
c001e07f:	90                   	nop

c001e080 <SATAPI::eject()>:
c001e080:	57                   	push   edi
c001e081:	b9 03 00 00 00       	mov    ecx,0x3
c001e086:	83 ec 18             	sub    esp,0x18
c001e089:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e08d:	fc                   	cld    
c001e08e:	31 c0                	xor    eax,eax
c001e090:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e092:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e097:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e09c:	50                   	push   eax
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 00                	push   0x0
c001e0a1:	6a 00                	push   0x0
c001e0a3:	6a 00                	push   0x0
c001e0a5:	6a 02                	push   0x2
c001e0a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0ab:	50                   	push   eax
c001e0ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0b0:	e8 e5 fc ff ff       	call   c001dd9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0b5:	83 c4 38             	add    esp,0x38
c001e0b8:	31 c0                	xor    eax,eax
c001e0ba:	5f                   	pop    edi
c001e0bb:	c3                   	ret    

c001e0bc <SATAPI::detectMedia()>:
c001e0bc:	53                   	push   ebx
c001e0bd:	83 ec 14             	sub    esp,0x14
c001e0c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0c4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0ca:	e8 59 02 ff ff       	call   c000e328 <VCache::writeWriteBuffer()>
c001e0cf:	59                   	pop    ecx
c001e0d0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0d6:	e8 3d 02 ff ff       	call   c000e318 <VCache::invalidateReadBuffer()>
c001e0db:	c7 04 24 1b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d1b
c001e0e2:	e8 23 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0e7:	83 c4 10             	add    esp,0x10
c001e0ea:	31 c0                	xor    eax,eax
c001e0ec:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e0f3:	85 d2                	test   edx,edx
c001e0f5:	74 0f                	je     c001e106 <SATAPI::detectMedia()+0x4a>
c001e0f7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e0fd:	75 07                	jne    c001e106 <SATAPI::detectMedia()+0x4a>
c001e0ff:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e106:	40                   	inc    eax
c001e107:	83 f8 1a             	cmp    eax,0x1a
c001e10a:	75 e0                	jne    c001e0ec <SATAPI::detectMedia()+0x30>
c001e10c:	83 c4 08             	add    esp,0x8
c001e10f:	5b                   	pop    ebx
c001e110:	c3                   	ret    
c001e111:	90                   	nop

c001e112 <SATAPI::open(int, int, void*)>:
c001e112:	56                   	push   esi
c001e113:	53                   	push   ebx
c001e114:	51                   	push   ecx
c001e115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e11d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e127:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e12d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e131:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e13b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e145:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e14c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e152:	e8 8b 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e157:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e15d:	89 c6                	mov    esi,eax
c001e15f:	e8 7e 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e164:	81 c6 00 10 00 00    	add    esi,0x1000
c001e16a:	39 c6                	cmp    esi,eax
c001e16c:	74 10                	je     c001e17e <SATAPI::open(int, int, void*)+0x6c>
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	68 30 2d 02 c0       	push   0xc0022d30
c001e176:	e8 d2 2f ff ff       	call   c001114d <KePanic(char const*)>
c001e17b:	83 c4 10             	add    esp,0x10
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	6a 02                	push   0x2
c001e183:	e8 6d b4 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e188:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e18e:	6a 03                	push   0x3
c001e190:	50                   	push   eax
c001e191:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e197:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e19d:	e8 5c bb fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1a2:	83 c4 14             	add    esp,0x14
c001e1a5:	68 78 01 00 00       	push   0x178
c001e1aa:	e8 24 99 fe ff       	call   c0007ad3 <malloc>
c001e1af:	83 c4 0c             	add    esp,0xc
c001e1b2:	6a 00                	push   0x0
c001e1b4:	68 ff ff ff 7f       	push   0x7fffffff
c001e1b9:	6a 00                	push   0x0
c001e1bb:	6a 00                	push   0x0
c001e1bd:	53                   	push   ebx
c001e1be:	68 46 2d 02 c0       	push   0xc0022d46
c001e1c3:	89 c6                	mov    esi,eax
c001e1c5:	50                   	push   eax
c001e1c6:	e8 b7 f5 fe ff       	call   c000d782 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1cb:	83 c4 14             	add    esp,0x14
c001e1ce:	56                   	push   esi
c001e1cf:	e8 6e f6 fe ff       	call   c000d842 <LogicalDisk::assignDriveLetter()>
c001e1d4:	5a                   	pop    edx
c001e1d5:	59                   	pop    ecx
c001e1d6:	0f be c0             	movsx  eax,al
c001e1d9:	50                   	push   eax
c001e1da:	68 98 2b 02 c0       	push   0xc0022b98
c001e1df:	e8 26 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e1e4:	58                   	pop    eax
c001e1e5:	5a                   	pop    edx
c001e1e6:	56                   	push   esi
c001e1e7:	53                   	push   ebx
c001e1e8:	e8 e7 e3 fe ff       	call   c000c5d4 <Device::addChild(Device*)>
c001e1ed:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e1f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1f6:	e8 0f e8 fe ff       	call   c000ca0a <PhysicalDisk::startCache()>
c001e1fb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e205:	e8 b2 fe ff ff       	call   c001e0bc <SATAPI::detectMedia()>
c001e20a:	83 c4 14             	add    esp,0x14
c001e20d:	31 c0                	xor    eax,eax
c001e20f:	5b                   	pop    ebx
c001e210:	5e                   	pop    esi
c001e211:	c3                   	ret    

c001e212 <SATAPI::read(unsigned long long, int, void*)>:
c001e212:	55                   	push   ebp
c001e213:	57                   	push   edi
c001e214:	56                   	push   esi
c001e215:	53                   	push   ebx
c001e216:	83 ec 3c             	sub    esp,0x3c
c001e219:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e21d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e221:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e225:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e229:	83 fd 04             	cmp    ebp,0x4
c001e22c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e230:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e234:	7e 10                	jle    c001e246 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	68 54 2d 02 c0       	push   0xc0022d54
c001e23e:	e8 0a 2f ff ff       	call   c001114d <KePanic(char const*)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e24c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e252:	51                   	push   ecx
c001e253:	50                   	push   eax
c001e254:	83 c0 02             	add    eax,0x2
c001e257:	c1 e0 07             	shl    eax,0x7
c001e25a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e260:	50                   	push   eax
c001e261:	52                   	push   edx
c001e262:	e8 61 e1 ff ff       	call   c001c3c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e267:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e26b:	b9 03 00 00 00       	mov    ecx,0x3
c001e270:	fc                   	cld    
c001e271:	31 c0                	xor    eax,eax
c001e273:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e275:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e27a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e27f:	83 c4 0c             	add    esp,0xc
c001e282:	6a 00                	push   0x0
c001e284:	6a 00                	push   0x0
c001e286:	6a 00                	push   0x0
c001e288:	6a 00                	push   0x0
c001e28a:	6a 02                	push   0x2
c001e28c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e290:	50                   	push   eax
c001e291:	53                   	push   ebx
c001e292:	e8 03 fb ff ff       	call   c001dd9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e297:	83 c4 20             	add    esp,0x20
c001e29a:	85 c0                	test   eax,eax
c001e29c:	89 c6                	mov    esi,eax
c001e29e:	75 46                	jne    c001e2e6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e2a0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2a4:	b9 03 00 00 00       	mov    ecx,0x3
c001e2a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2af:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2b4:	0f c8                	bswap  eax
c001e2b6:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2ba:	89 e8                	mov    eax,ebp
c001e2bc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2c0:	50                   	push   eax
c001e2c1:	55                   	push   ebp
c001e2c2:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e2c6:	c1 e5 0b             	shl    ebp,0xb
c001e2c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2d1:	55                   	push   ebp
c001e2d2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e2d6:	50                   	push   eax
c001e2d7:	53                   	push   ebx
c001e2d8:	e8 bd fa ff ff       	call   c001dd9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2dd:	83 c4 20             	add    esp,0x20
c001e2e0:	85 c0                	test   eax,eax
c001e2e2:	89 c6                	mov    esi,eax
c001e2e4:	74 0c                	je     c001e2f2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	53                   	push   ebx
c001e2ea:	e8 cd fd ff ff       	call   c001e0bc <SATAPI::detectMedia()>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	83 c4 3c             	add    esp,0x3c
c001e2f5:	89 f0                	mov    eax,esi
c001e2f7:	5b                   	pop    ebx
c001e2f8:	5e                   	pop    esi
c001e2f9:	5f                   	pop    edi
c001e2fa:	5d                   	pop    ebp
c001e2fb:	c3                   	ret    

c001e2fc <IOAPIC::close(int, int, void*)>:
c001e2fc:	b8 00 00 00 00       	mov    eax,0x0
c001e301:	c3                   	ret    

c001e302 <apicGetBase()>:
c001e302:	55                   	push   ebp
c001e303:	89 e5                	mov    ebp,esp
c001e305:	83 ec 18             	sub    esp,0x18
c001e308:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e30d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e313:	83 e0 08             	and    eax,0x8
c001e316:	0f b6 c0             	movzx  eax,al
c001e319:	85 c0                	test   eax,eax
c001e31b:	75 07                	jne    c001e324 <apicGetBase()+0x22>
c001e31d:	b8 00 00 00 00       	mov    eax,0x0
c001e322:	eb 21                	jmp    c001e345 <apicGetBase()+0x43>
c001e324:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e329:	83 ec 08             	sub    esp,0x8
c001e32c:	6a 1b                	push   0x1b
c001e32e:	50                   	push   eax
c001e32f:	e8 b0 8d fe ff       	call   c00070e4 <Computer::rdmsr(unsigned int)>
c001e334:	83 c4 10             	add    esp,0x10
c001e337:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e33a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e33d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e340:	25 00 00 ff ff       	and    eax,0xffff0000
c001e345:	c9                   	leave  
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <IOAPIC::IOAPIC()>:
c001e348:	83 ec 0c             	sub    esp,0xc
c001e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34f:	83 ec 08             	sub    esp,0x8
c001e352:	68 b8 2d 02 c0       	push   0xc0022db8
c001e357:	50                   	push   eax
c001e358:	e8 0f e4 fe ff       	call   c000c76c <Device::Device(char const*)>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001e365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e369:	89 10                	mov    DWORD PTR [eax],edx
c001e36b:	90                   	nop
c001e36c:	83 c4 0c             	add    esp,0xc
c001e36f:	c3                   	ret    

c001e370 <apicOpen()>:
c001e370:	55                   	push   ebp
c001e371:	89 e5                	mov    ebp,esp
c001e373:	53                   	push   ebx
c001e374:	83 ec 34             	sub    esp,0x34
c001e377:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e37c:	83 f0 01             	xor    eax,0x1
c001e37f:	0f b6 c0             	movzx  eax,al
c001e382:	85 c0                	test   eax,eax
c001e384:	0f 84 a3 00 00 00    	je     c001e42d <apicOpen()+0xbd>
c001e38a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e38e:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e393:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e397:	0f b6 c0             	movzx  eax,al
c001e39a:	39 c2                	cmp    edx,eax
c001e39c:	0f 83 84 00 00 00    	jae    c001e426 <apicOpen()+0xb6>
c001e3a2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3a9:	83 ec 0c             	sub    esp,0xc
c001e3ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3af:	e8 1f 97 fe ff       	call   c0007ad3 <malloc>
c001e3b4:	83 c4 10             	add    esp,0x10
c001e3b7:	89 c3                	mov    ebx,eax
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	53                   	push   ebx
c001e3bd:	e8 86 ff ff ff       	call   c001e348 <IOAPIC::IOAPIC()>
c001e3c2:	83 c4 10             	add    esp,0x10
c001e3c5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3c8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e3cf:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e3d6:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e3db:	83 c0 01             	add    eax,0x1
c001e3de:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e3e3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3e8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e3ee:	83 ec 08             	sub    esp,0x8
c001e3f1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e3f4:	50                   	push   eax
c001e3f5:	e8 da e1 fe ff       	call   c000c5d4 <Device::addChild(Device*)>
c001e3fa:	83 c4 10             	add    esp,0x10
c001e3fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e400:	8b 00                	mov    eax,DWORD PTR [eax]
c001e402:	83 c0 08             	add    eax,0x8
c001e405:	8b 00                	mov    eax,DWORD PTR [eax]
c001e407:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e40b:	6a 00                	push   0x0
c001e40d:	6a 00                	push   0x0
c001e40f:	52                   	push   edx
c001e410:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e413:	ff d0                	call   eax
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e41b:	83 c0 01             	add    eax,0x1
c001e41e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e421:	e9 68 ff ff ff       	jmp    c001e38e <apicOpen()+0x1e>
c001e426:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e42d:	e8 d0 fe ff ff       	call   c001e302 <apicGetBase()>
c001e432:	05 f0 00 00 00       	add    eax,0xf0
c001e437:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e43a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e43d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e43f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e442:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e449:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e450:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e453:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e456:	89 10                	mov    DWORD PTR [eax],edx
c001e458:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e45f:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e464:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e467:	7d 7c                	jge    c001e4e5 <apicOpen()+0x175>
c001e469:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e46c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e473:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e476:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e479:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e480:	c1 e8 08             	shr    eax,0x8
c001e483:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e487:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e48a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e491:	c1 e8 18             	shr    eax,0x18
c001e494:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e497:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e49b:	3d ff 00 00 00       	cmp    eax,0xff
c001e4a0:	75 3a                	jne    c001e4dc <apicOpen()+0x16c>
c001e4a2:	e8 5b fe ff ff       	call   c001e302 <apicGetBase()>
c001e4a7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4ab:	83 fa 01             	cmp    edx,0x1
c001e4ae:	75 07                	jne    c001e4b7 <apicOpen()+0x147>
c001e4b0:	ba 60 03 00 00       	mov    edx,0x360
c001e4b5:	eb 05                	jmp    c001e4bc <apicOpen()+0x14c>
c001e4b7:	ba 50 03 00 00       	mov    edx,0x350
c001e4bc:	01 d0                	add    eax,edx
c001e4be:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4c6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4c9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e4d0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e4d4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4d7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e4da:	89 10                	mov    DWORD PTR [eax],edx
c001e4dc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e4e0:	e9 7a ff ff ff       	jmp    c001e45f <apicOpen()+0xef>
c001e4e5:	90                   	nop
c001e4e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e4e9:	c9                   	leave  
c001e4ea:	c3                   	ret    
c001e4eb:	90                   	nop

c001e4ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e4ec:	55                   	push   ebp
c001e4ed:	89 e5                	mov    ebp,esp
c001e4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e4fb:	72 1d                	jb     c001e51a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e500:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e509:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e50f:	01 d0                	add    eax,edx
c001e511:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e514:	73 04                	jae    c001e51a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e516:	b0 01                	mov    al,0x1
c001e518:	eb 02                	jmp    c001e51c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e51a:	b0 00                	mov    al,0x0
c001e51c:	5d                   	pop    ebp
c001e51d:	c3                   	ret    

c001e51e <IOAPIC::read(int)>:
c001e51e:	55                   	push   ebp
c001e51f:	89 e5                	mov    ebp,esp
c001e521:	83 ec 10             	sub    esp,0x10
c001e524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e527:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e52d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e530:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e533:	0f b6 d0             	movzx  edx,al
c001e536:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e539:	89 10                	mov    DWORD PTR [eax],edx
c001e53b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e53e:	83 c0 10             	add    eax,0x10
c001e541:	8b 00                	mov    eax,DWORD PTR [eax]
c001e543:	c9                   	leave  
c001e544:	c3                   	ret    
c001e545:	90                   	nop

c001e546 <IOAPIC::open(int, int, void*)>:
c001e546:	55                   	push   ebp
c001e547:	89 e5                	mov    ebp,esp
c001e549:	57                   	push   edi
c001e54a:	56                   	push   esi
c001e54b:	53                   	push   ebx
c001e54c:	83 ec 04             	sub    esp,0x4
c001e54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e552:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e555:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e55e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e564:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e56e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e577:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e57d:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e587:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e590:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e599:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e59f:	0f b6 f0             	movzx  esi,al
c001e5a2:	89 d0                	mov    eax,edx
c001e5a4:	ba 00 00 00 00       	mov    edx,0x0
c001e5a9:	89 c7                	mov    edi,eax
c001e5ab:	83 e7 ff             	and    edi,0xffffffff
c001e5ae:	89 f9                	mov    ecx,edi
c001e5b0:	0f b6 da             	movzx  ebx,dl
c001e5b3:	89 c8                	mov    eax,ecx
c001e5b5:	89 da                	mov    edx,ebx
c001e5b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5ba:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5bd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5c1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5c5:	83 e0 00             	and    eax,0x0
c001e5c8:	09 d0                	or     eax,edx
c001e5ca:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5d7:	8d 50 01             	lea    edx,[eax+0x1]
c001e5da:	88 d1                	mov    cl,dl
c001e5dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e5df:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e5e5:	0f b6 d0             	movzx  edx,al
c001e5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5eb:	83 c2 08             	add    edx,0x8
c001e5ee:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e5f2:	0f b6 c9             	movzx  ecx,cl
c001e5f5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e5fb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e5ff:	6a 01                	push   0x1
c001e601:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e604:	e8 15 ff ff ff       	call   c001e51e <IOAPIC::read(int)>
c001e609:	83 c4 08             	add    esp,0x8
c001e60c:	c1 f8 10             	sar    eax,0x10
c001e60f:	0f b6 c0             	movzx  eax,al
c001e612:	8d 50 01             	lea    edx,[eax+0x1]
c001e615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e618:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e61e:	b8 00 00 00 00       	mov    eax,0x0
c001e623:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e626:	5b                   	pop    ebx
c001e627:	5e                   	pop    esi
c001e628:	5f                   	pop    edi
c001e629:	5d                   	pop    ebp
c001e62a:	c3                   	ret    
c001e62b:	90                   	nop

c001e62c <IOAPIC::write(int, int)>:
c001e62c:	55                   	push   ebp
c001e62d:	89 e5                	mov    ebp,esp
c001e62f:	83 ec 10             	sub    esp,0x10
c001e632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e635:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e63b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e63e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e641:	0f b6 d0             	movzx  edx,al
c001e644:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e647:	89 10                	mov    DWORD PTR [eax],edx
c001e649:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e64c:	8d 50 10             	lea    edx,[eax+0x10]
c001e64f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e652:	89 02                	mov    DWORD PTR [edx],eax
c001e654:	90                   	nop
c001e655:	c9                   	leave  
c001e656:	c3                   	ret    
c001e657:	90                   	nop

c001e658 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e658:	55                   	push   ebp
c001e659:	89 e5                	mov    ebp,esp
c001e65b:	53                   	push   ebx
c001e65c:	83 ec 2c             	sub    esp,0x2c
c001e65f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e662:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e665:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e668:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e66b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e66e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e671:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e674:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e677:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e67a:	88 d8                	mov    al,bl
c001e67c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e67f:	88 c8                	mov    al,cl
c001e681:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e684:	88 d0                	mov    al,dl
c001e686:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e689:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e68d:	83 c0 08             	add    eax,0x8
c001e690:	d1 e0                	shl    eax,1
c001e692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e695:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e699:	83 c0 08             	add    eax,0x8
c001e69c:	d1 e0                	shl    eax,1
c001e69e:	83 c0 01             	add    eax,0x1
c001e6a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6a7:	50                   	push   eax
c001e6a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6ab:	e8 6e fe ff ff       	call   c001e51e <IOAPIC::read(int)>
c001e6b0:	83 c4 08             	add    esp,0x8
c001e6b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6b6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6c0:	c1 e0 18             	shl    eax,0x18
c001e6c3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6cc:	52                   	push   edx
c001e6cd:	50                   	push   eax
c001e6ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6d1:	e8 56 ff ff ff       	call   c001e62c <IOAPIC::write(int, int)>
c001e6d6:	83 c4 0c             	add    esp,0xc
c001e6d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6dc:	50                   	push   eax
c001e6dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e0:	e8 39 fe ff ff       	call   c001e51e <IOAPIC::read(int)>
c001e6e5:	83 c4 08             	add    esp,0x8
c001e6e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e6eb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e6f2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e6f9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e700:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e704:	85 c0                	test   eax,eax
c001e706:	74 09                	je     c001e711 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e708:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e70f:	eb 07                	jmp    c001e718 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e711:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e718:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e71c:	85 c0                	test   eax,eax
c001e71e:	74 09                	je     c001e729 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e720:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e727:	eb 07                	jmp    c001e730 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e729:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e730:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e737:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e73b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e73e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e741:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e744:	52                   	push   edx
c001e745:	50                   	push   eax
c001e746:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e749:	e8 de fe ff ff       	call   c001e62c <IOAPIC::write(int, int)>
c001e74e:	83 c4 0c             	add    esp,0xc
c001e751:	90                   	nop
c001e752:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e755:	c9                   	leave  
c001e756:	c3                   	ret    
c001e757:	90                   	nop

c001e758 <APICTimer::close(int, int, void*)>:
c001e758:	b8 00 00 00 00       	mov    eax,0x0
c001e75d:	c3                   	ret    
c001e75e:	66 90                	xchg   ax,ax

c001e760 <apicTimerHandler(regs*, void*)>:
c001e760:	83 ec 0c             	sub    esp,0xc
c001e763:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e767:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e769:	b8 10 27 00 00       	mov    eax,0x2710
c001e76e:	ba 00 00 00 00       	mov    edx,0x0
c001e773:	f7 f1                	div    ecx
c001e775:	83 ec 0c             	sub    esp,0xc
c001e778:	50                   	push   eax
c001e779:	e8 c2 f8 fe ff       	call   c000e040 <timerHandler(unsigned int)>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	90                   	nop
c001e782:	83 c4 0c             	add    esp,0xc
c001e785:	c3                   	ret    
c001e786:	66 90                	xchg   ax,ax

c001e788 <APICTimer::open(int, int, void*)>:
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e791:	83 c0 24             	add    eax,0x24
c001e794:	8b 00                	mov    eax,DWORD PTR [eax]
c001e796:	83 ec 08             	sub    esp,0x8
c001e799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e79d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7a1:	ff d0                	call   eax
c001e7a3:	83 c4 10             	add    esp,0x10
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7bc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	51                   	push   ecx
c001e7d0:	6a 01                	push   0x1
c001e7d2:	68 60 e7 01 c0       	push   0xc001e760
c001e7d7:	52                   	push   edx
c001e7d8:	50                   	push   eax
c001e7d9:	e8 a2 dd fe ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7de:	83 c4 20             	add    esp,0x20
c001e7e1:	89 c2                	mov    edx,eax
c001e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e7ed:	b8 00 00 00 00       	mov    eax,0x0
c001e7f2:	83 c4 0c             	add    esp,0xc
c001e7f5:	c3                   	ret    
c001e7f6:	66 90                	xchg   ax,ax

c001e7f8 <APICTimer::write(int)>:
c001e7f8:	83 ec 0c             	sub    esp,0xc
c001e7fb:	83 ec 0c             	sub    esp,0xc
c001e7fe:	68 ec 2d 02 c0       	push   0xc0022dec
c001e803:	e8 45 29 ff ff       	call   c001114d <KePanic(char const*)>
c001e808:	83 c4 10             	add    esp,0x10
c001e80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e813:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e819:	90                   	nop
c001e81a:	83 c4 0c             	add    esp,0xc
c001e81d:	c3                   	ret    
c001e81e:	66 90                	xchg   ax,ax

c001e820 <APICTimer::APICTimer()>:
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e827:	83 ec 08             	sub    esp,0x8
c001e82a:	68 fc 2d 02 c0       	push   0xc0022dfc
c001e82f:	50                   	push   eax
c001e830:	e8 3f f7 fe ff       	call   c000df74 <Timer::Timer(char const*)>
c001e835:	83 c4 10             	add    esp,0x10
c001e838:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001e83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e841:	89 10                	mov    DWORD PTR [eax],edx
c001e843:	90                   	nop
c001e844:	83 c4 0c             	add    esp,0xc
c001e847:	c3                   	ret    

c001e848 <PIT::write(int)>:
c001e848:	83 ec 10             	sub    esp,0x10
c001e84b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e84f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e853:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e85d:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e862:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e867:	89 c2                	mov    edx,eax
c001e869:	c1 fa 1f             	sar    edx,0x1f
c001e86c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e870:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e874:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e87b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e880:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e884:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e889:	ee                   	out    dx,al
c001e88a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e88e:	0f b6 c0             	movzx  eax,al
c001e891:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e898:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e89c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8a0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8a5:	ee                   	out    dx,al
c001e8a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8aa:	c1 f8 08             	sar    eax,0x8
c001e8ad:	0f b6 c0             	movzx  eax,al
c001e8b0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8b7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8c4:	ee                   	out    dx,al
c001e8c5:	90                   	nop
c001e8c6:	83 c4 10             	add    esp,0x10
c001e8c9:	c3                   	ret    
c001e8ca:	66 90                	xchg   ax,ax

c001e8cc <pitHandler(regs*, void*)>:
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e8d5:	b8 10 27 00 00       	mov    eax,0x2710
c001e8da:	89 c2                	mov    edx,eax
c001e8dc:	c1 fa 1f             	sar    edx,0x1f
c001e8df:	f7 f9                	idiv   ecx
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	50                   	push   eax
c001e8e5:	e8 56 f7 fe ff       	call   c000e040 <timerHandler(unsigned int)>
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	90                   	nop
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    
c001e8f2:	66 90                	xchg   ax,ax

c001e8f4 <PIT::open(int, int, void*)>:
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8fd:	83 c0 24             	add    eax,0x24
c001e900:	8b 00                	mov    eax,DWORD PTR [eax]
c001e902:	83 ec 08             	sub    esp,0x8
c001e905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e90d:	ff d0                	call   eax
c001e90f:	83 c4 10             	add    esp,0x10
c001e912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e916:	83 ec 0c             	sub    esp,0xc
c001e919:	6a 00                	push   0x0
c001e91b:	6a 01                	push   0x1
c001e91d:	68 cc e8 01 c0       	push   0xc001e8cc
c001e922:	6a 00                	push   0x0
c001e924:	50                   	push   eax
c001e925:	e8 56 dc fe ff       	call   c000c580 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e92a:	83 c4 20             	add    esp,0x20
c001e92d:	89 c2                	mov    edx,eax
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e939:	b8 00 00 00 00       	mov    eax,0x0
c001e93e:	83 c4 0c             	add    esp,0xc
c001e941:	c3                   	ret    
c001e942:	66 90                	xchg   ax,ax

c001e944 <PIT::close(int, int, void*)>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	6a 01                	push   0x1
c001e95b:	68 cc e8 01 c0       	push   0xc001e8cc
c001e960:	6a 00                	push   0x0
c001e962:	50                   	push   eax
c001e963:	e8 4e dc fe ff       	call   c000c5b6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	b8 00 00 00 00       	mov    eax,0x0
c001e970:	83 c4 0c             	add    esp,0xc
c001e973:	c3                   	ret    

c001e974 <PIT::PIT()>:
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97b:	83 ec 08             	sub    esp,0x8
c001e97e:	68 38 2e 02 c0       	push   0xc0022e38
c001e983:	50                   	push   eax
c001e984:	e8 eb f5 fe ff       	call   c000df74 <Timer::Timer(char const*)>
c001e989:	83 c4 10             	add    esp,0x10
c001e98c:	ba 60 2e 02 c0       	mov    edx,0xc0022e60
c001e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e995:	89 10                	mov    DWORD PTR [eax],edx
c001e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9a1:	0f b6 d0             	movzx  edx,al
c001e9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9b9:	0f b6 d0             	movzx  edx,al
c001e9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9cf:	8d 50 01             	lea    edx,[eax+0x1]
c001e9d2:	88 d1                	mov    cl,dl
c001e9d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9d8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e9de:	0f b6 d0             	movzx  edx,al
c001e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e9e9:	83 e1 3f             	and    ecx,0x3f
c001e9ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e9f0:	90                   	nop
c001e9f1:	83 c4 0c             	add    esp,0xc
c001e9f4:	c3                   	ret    
c001e9f5:	66 90                	xchg   ax,ax
c001e9f7:	66 90                	xchg   ax,ax
c001e9f9:	66 90                	xchg   ax,ax
c001e9fb:	66 90                	xchg   ax,ax
c001e9fd:	66 90                	xchg   ax,ax
c001e9ff:	90                   	nop

c001ea00 <avxDetect>:
c001ea00:	b8 01 00 00 00       	mov    eax,0x1
c001ea05:	0f a2                	cpuid  
c001ea07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea0d:	74 15                	je     c001ea24 <avxDetect.noAVX>
c001ea0f:	b8 01 00 00 00       	mov    eax,0x1
c001ea14:	0f a2                	cpuid  
c001ea16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea1c:	74 06                	je     c001ea24 <avxDetect.noAVX>
c001ea1e:	b8 01 00 00 00       	mov    eax,0x1
c001ea23:	c3                   	ret    

c001ea24 <avxDetect.noAVX>:
c001ea24:	b8 00 00 00 00       	mov    eax,0x0
c001ea29:	c3                   	ret    

c001ea2a <avxSave>:
c001ea2a:	53                   	push   ebx
c001ea2b:	52                   	push   edx
c001ea2c:	31 c0                	xor    eax,eax
c001ea2e:	48                   	dec    eax
c001ea2f:	89 c2                	mov    edx,eax
c001ea31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea35:	0f ae 23             	xsave  [ebx]
c001ea38:	5a                   	pop    edx
c001ea39:	5b                   	pop    ebx
c001ea3a:	c3                   	ret    

c001ea3b <avxLoad>:
c001ea3b:	53                   	push   ebx
c001ea3c:	52                   	push   edx
c001ea3d:	31 c0                	xor    eax,eax
c001ea3f:	48                   	dec    eax
c001ea40:	89 c2                	mov    edx,eax
c001ea42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea46:	0f ae 2b             	xrstor [ebx]
c001ea49:	5a                   	pop    edx
c001ea4a:	5b                   	pop    ebx
c001ea4b:	c3                   	ret    

c001ea4c <avxInit>:
c001ea4c:	e8 67 03 00 00       	call   c001edb8 <sseInit>
c001ea51:	50                   	push   eax
c001ea52:	51                   	push   ecx
c001ea53:	0f 20 e0             	mov    eax,cr4
c001ea56:	0d 00 00 04 00       	or     eax,0x40000
c001ea5b:	0f 22 e0             	mov    cr4,eax
c001ea5e:	31 c9                	xor    ecx,ecx
c001ea60:	0f 01 d0             	xgetbv 
c001ea63:	0d 07 00 00 00       	or     eax,0x7
c001ea68:	0f 01 d1             	xsetbv 
c001ea6b:	59                   	pop    ecx
c001ea6c:	58                   	pop    eax
c001ea6d:	c3                   	ret    

c001ea6e <avxClose>:
c001ea6e:	c3                   	ret    

c001ea6f <wouldSheSayYes>:
c001ea6f:	c3                   	ret    
c001ea70:	49                   	dec    ecx
c001ea71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ea75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ea79:	75 20                	jne    c001ea9b <isr0+0xb>
c001ea7b:	4e                   	dec    esi
c001ea7c:	79 61                	jns    c001eadf <isr7+0x3>
c001ea7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ea83:	66 90                	xchg   ax,ax
c001ea85:	66 90                	xchg   ax,ax
c001ea87:	66 90                	xchg   ax,ax
c001ea89:	66 90                	xchg   ax,ax
c001ea8b:	66 90                	xchg   ax,ax
c001ea8d:	66 90                	xchg   ax,ax
c001ea8f:	90                   	nop

c001ea90 <isr0>:
c001ea90:	fa                   	cli    
c001ea91:	68 00 00 00 00       	push   0x0
c001ea96:	68 00 00 00 00       	push   0x0
c001ea9b:	e9 56 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eaa0 <isr1>:
c001eaa0:	fa                   	cli    
c001eaa1:	6a 00                	push   0x0
c001eaa3:	6a 01                	push   0x1
c001eaa5:	e9 4c 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eaaa <isr2>:
c001eaaa:	fa                   	cli    
c001eaab:	6a 00                	push   0x0
c001eaad:	6a 02                	push   0x2
c001eaaf:	e9 42 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eab4 <isr3>:
c001eab4:	fa                   	cli    
c001eab5:	6a 00                	push   0x0
c001eab7:	6a 03                	push   0x3
c001eab9:	e9 38 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eabe <isr4>:
c001eabe:	fa                   	cli    
c001eabf:	6a 00                	push   0x0
c001eac1:	6a 04                	push   0x4
c001eac3:	e9 2e 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eac8 <isr5>:
c001eac8:	fa                   	cli    
c001eac9:	6a 00                	push   0x0
c001eacb:	6a 05                	push   0x5
c001eacd:	e9 24 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001ead2 <isr6>:
c001ead2:	fa                   	cli    
c001ead3:	6a 00                	push   0x0
c001ead5:	6a 06                	push   0x6
c001ead7:	e9 1a 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eadc <isr7>:
c001eadc:	fa                   	cli    
c001eadd:	6a 00                	push   0x0
c001eadf:	6a 07                	push   0x7
c001eae1:	e9 10 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eae6 <isr8>:
c001eae6:	fa                   	cli    
c001eae7:	6a 08                	push   0x8
c001eae9:	e9 08 01 00 00       	jmp    c001ebf6 <int_common_stub>

c001eaee <isr9>:
c001eaee:	fa                   	cli    
c001eaef:	6a 00                	push   0x0
c001eaf1:	6a 09                	push   0x9
c001eaf3:	e9 fe 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eaf8 <isr10>:
c001eaf8:	fa                   	cli    
c001eaf9:	6a 0a                	push   0xa
c001eafb:	e9 f6 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb00 <isr11>:
c001eb00:	fa                   	cli    
c001eb01:	6a 0b                	push   0xb
c001eb03:	e9 ee 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb08 <isr12>:
c001eb08:	fa                   	cli    
c001eb09:	6a 0c                	push   0xc
c001eb0b:	e9 e6 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb10 <isr13>:
c001eb10:	fa                   	cli    
c001eb11:	6a 0d                	push   0xd
c001eb13:	53                   	push   ebx
c001eb14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb18:	81 fb e6 ec 01 c0    	cmp    ebx,0xc001ece6
c001eb1e:	5b                   	pop    ebx
c001eb1f:	0f 84 c3 01 00 00    	je     c001ece8 <finishSignal2>
c001eb25:	e9 cc 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb2a <isr14>:
c001eb2a:	fa                   	cli    
c001eb2b:	6a 0e                	push   0xe
c001eb2d:	e9 c4 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb32 <isr15>:
c001eb32:	fa                   	cli    
c001eb33:	6a 00                	push   0x0
c001eb35:	6a 0f                	push   0xf
c001eb37:	e9 ba 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb3c <isr16>:
c001eb3c:	fa                   	cli    
c001eb3d:	6a 00                	push   0x0
c001eb3f:	6a 10                	push   0x10
c001eb41:	e9 b0 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb46 <isr17>:
c001eb46:	fa                   	cli    
c001eb47:	6a 00                	push   0x0
c001eb49:	6a 11                	push   0x11
c001eb4b:	e9 a6 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb50 <isr18>:
c001eb50:	fa                   	cli    
c001eb51:	6a 00                	push   0x0
c001eb53:	6a 12                	push   0x12
c001eb55:	e9 9c 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb5a <irq3>:
c001eb5a:	fa                   	cli    
c001eb5b:	6a 00                	push   0x0
c001eb5d:	6a 23                	push   0x23
c001eb5f:	e9 92 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb64 <irq4>:
c001eb64:	fa                   	cli    
c001eb65:	6a 00                	push   0x0
c001eb67:	6a 24                	push   0x24
c001eb69:	e9 88 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb6e <irq5>:
c001eb6e:	fa                   	cli    
c001eb6f:	6a 00                	push   0x0
c001eb71:	6a 25                	push   0x25
c001eb73:	e9 7e 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb78 <irq6>:
c001eb78:	fa                   	cli    
c001eb79:	6a 00                	push   0x0
c001eb7b:	6a 26                	push   0x26
c001eb7d:	e9 74 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb82 <irq7>:
c001eb82:	fa                   	cli    
c001eb83:	6a 00                	push   0x0
c001eb85:	6a 27                	push   0x27
c001eb87:	e9 6a 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb8c <irq8>:
c001eb8c:	fa                   	cli    
c001eb8d:	6a 00                	push   0x0
c001eb8f:	6a 28                	push   0x28
c001eb91:	e9 60 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eb96 <irq9>:
c001eb96:	fa                   	cli    
c001eb97:	6a 00                	push   0x0
c001eb99:	6a 29                	push   0x29
c001eb9b:	e9 56 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001eba0 <irq10>:
c001eba0:	fa                   	cli    
c001eba1:	6a 00                	push   0x0
c001eba3:	6a 2a                	push   0x2a
c001eba5:	e9 4c 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebaa <irq11>:
c001ebaa:	fa                   	cli    
c001ebab:	6a 00                	push   0x0
c001ebad:	6a 2b                	push   0x2b
c001ebaf:	e9 42 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebb4 <irq12>:
c001ebb4:	fa                   	cli    
c001ebb5:	6a 00                	push   0x0
c001ebb7:	6a 2c                	push   0x2c
c001ebb9:	e9 38 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebbe <irq13>:
c001ebbe:	fa                   	cli    
c001ebbf:	6a 00                	push   0x0
c001ebc1:	6a 2d                	push   0x2d
c001ebc3:	e9 2e 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebc8 <irq14>:
c001ebc8:	fa                   	cli    
c001ebc9:	6a 00                	push   0x0
c001ebcb:	6a 2e                	push   0x2e
c001ebcd:	e9 24 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebd2 <irq15>:
c001ebd2:	fa                   	cli    
c001ebd3:	6a 00                	push   0x0
c001ebd5:	6a 2f                	push   0x2f
c001ebd7:	e9 1a 00 00 00       	jmp    c001ebf6 <int_common_stub>

c001ebdc <irq1>:
c001ebdc:	fa                   	cli    
c001ebdd:	6a 00                	push   0x0
c001ebdf:	6a 21                	push   0x21
c001ebe1:	eb 13                	jmp    c001ebf6 <int_common_stub>

c001ebe3 <irq2>:
c001ebe3:	fa                   	cli    
c001ebe4:	6a 00                	push   0x0
c001ebe6:	6a 22                	push   0x22
c001ebe8:	eb 0c                	jmp    c001ebf6 <int_common_stub>

c001ebea <isr96>:
c001ebea:	6a 00                	push   0x0
c001ebec:	6a 60                	push   0x60
c001ebee:	fb                   	sti    
c001ebef:	eb 37                	jmp    c001ec28 <syscall_common_stub>

c001ebf1 <irq0>:
c001ebf1:	fa                   	cli    
c001ebf2:	6a 00                	push   0x0
c001ebf4:	6a 20                	push   0x20

c001ebf6 <int_common_stub>:
c001ebf6:	60                   	pusha  
c001ebf7:	1e                   	push   ds
c001ebf8:	06                   	push   es
c001ebf9:	0f a0                	push   fs
c001ebfb:	0f a8                	push   gs
c001ebfd:	66 b8 10 00          	mov    ax,0x10
c001ec01:	66 8e d8             	mov    ds,ax
c001ec04:	66 8e c0             	mov    es,ax
c001ec07:	66 8e e0             	mov    fs,ax
c001ec0a:	66 8e e8             	mov    gs,ax
c001ec0d:	54                   	push   esp
c001ec0e:	fc                   	cld    
c001ec0f:	e8 6c de fe ff       	call   c000ca80 <int_handler>
c001ec14:	81 c4 04 00 00 00    	add    esp,0x4
c001ec1a:	0f a9                	pop    gs
c001ec1c:	0f a1                	pop    fs
c001ec1e:	07                   	pop    es
c001ec1f:	1f                   	pop    ds
c001ec20:	61                   	popa   
c001ec21:	81 c4 08 00 00 00    	add    esp,0x8
c001ec27:	cf                   	iret   

c001ec28 <syscall_common_stub>:
c001ec28:	60                   	pusha  
c001ec29:	1e                   	push   ds
c001ec2a:	06                   	push   es
c001ec2b:	0f a0                	push   fs
c001ec2d:	0f a8                	push   gs
c001ec2f:	66 b8 10 00          	mov    ax,0x10
c001ec33:	66 8e d8             	mov    ds,ax
c001ec36:	66 8e c0             	mov    es,ax
c001ec39:	66 8e e0             	mov    fs,ax
c001ec3c:	66 8e e8             	mov    gs,ax
c001ec3f:	54                   	push   esp
c001ec40:	fc                   	cld    
c001ec41:	e8 3a de fe ff       	call   c000ca80 <int_handler>
c001ec46:	81 c4 04 00 00 00    	add    esp,0x4
c001ec4c:	0f a9                	pop    gs
c001ec4e:	0f a1                	pop    fs
c001ec50:	07                   	pop    es
c001ec51:	1f                   	pop    ds
c001ec52:	e8 08 2b ff ff       	call   c001175f <KiCheckSignalZ>
c001ec57:	3d 00 00 00 00       	cmp    eax,0x0
c001ec5c:	0f 84 c0 00 00 00    	je     c001ed22 <skipSignals>
c001ec62:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec67:	61                   	popa   
c001ec68:	53                   	push   ebx
c001ec69:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ec72:	5b                   	pop    ebx
c001ec73:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ec78:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ec7b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ec7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ec81:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ec84:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ec87:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ec8a:	81 c4 08 00 00 00    	add    esp,0x8
c001ec90:	5e                   	pop    esi
c001ec91:	5b                   	pop    ebx
c001ec92:	59                   	pop    ecx
c001ec93:	5a                   	pop    edx
c001ec94:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ec97:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ec9a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ec9d:	52                   	push   edx
c001ec9e:	51                   	push   ecx
c001ec9f:	53                   	push   ebx
c001eca0:	56                   	push   esi
c001eca1:	81 ec 08 00 00 00    	sub    esp,0x8
c001eca7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecaa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ecad:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ecb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ecb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ecb6:	60                   	pusha  
c001ecb7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ecbd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ecc0:	89 e3                	mov    ebx,esp
c001ecc2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ecc5:	52                   	push   edx
c001ecc6:	68 e6 ec 01 c0       	push   0xc001ece6
c001eccb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecce:	89 dc                	mov    esp,ebx
c001ecd0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ecd3:	68 23 00 00 00       	push   0x23
c001ecd8:	51                   	push   ecx
c001ecd9:	68 02 02 00 00       	push   0x202
c001ecde:	68 1b 00 00 00       	push   0x1b
c001ece3:	ff 36                	push   DWORD PTR [esi]
c001ece5:	cf                   	iret   

c001ece6 <finishSignal>:
c001ece6:	cd 0f                	int    0xf

c001ece8 <finishSignal2>:
c001ece8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ecee:	e8 e9 2a ff ff       	call   c00117dc <KiFinishSignalZ>
c001ecf3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ecf9:	68 23 00 00 00       	push   0x23
c001ecfe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed01:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed04:	68 1b 00 00 00       	push   0x1b
c001ed09:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed0f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed15:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed18:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed1b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed1e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed21:	cf                   	iret   

c001ed22 <skipSignals>:
c001ed22:	61                   	popa   
c001ed23:	81 c4 08 00 00 00    	add    esp,0x8
c001ed29:	cf                   	iret   
c001ed2a:	90                   	nop
c001ed2b:	90                   	nop

c001ed2c <irq16>:
c001ed2c:	fa                   	cli    
c001ed2d:	6a 00                	push   0x0
c001ed2f:	6a 30                	push   0x30
c001ed31:	e9 c0 fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed36 <irq17>:
c001ed36:	fa                   	cli    
c001ed37:	6a 00                	push   0x0
c001ed39:	6a 31                	push   0x31
c001ed3b:	e9 b6 fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed40 <irq18>:
c001ed40:	fa                   	cli    
c001ed41:	6a 00                	push   0x0
c001ed43:	6a 32                	push   0x32
c001ed45:	e9 ac fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed4a <irq19>:
c001ed4a:	fa                   	cli    
c001ed4b:	6a 00                	push   0x0
c001ed4d:	6a 33                	push   0x33
c001ed4f:	e9 a2 fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed54 <irq20>:
c001ed54:	fa                   	cli    
c001ed55:	6a 00                	push   0x0
c001ed57:	6a 34                	push   0x34
c001ed59:	e9 98 fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed5e <irq21>:
c001ed5e:	fa                   	cli    
c001ed5f:	6a 00                	push   0x0
c001ed61:	6a 35                	push   0x35
c001ed63:	e9 8e fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed68 <irq22>:
c001ed68:	fa                   	cli    
c001ed69:	6a 00                	push   0x0
c001ed6b:	6a 36                	push   0x36
c001ed6d:	e9 84 fe ff ff       	jmp    c001ebf6 <int_common_stub>

c001ed72 <irq23>:
c001ed72:	fa                   	cli    
c001ed73:	6a 00                	push   0x0
c001ed75:	6a 37                	push   0x37
c001ed77:	e9 7a fe ff ff       	jmp    c001ebf6 <int_common_stub>
c001ed7c:	66 90                	xchg   ax,ax
c001ed7e:	66 90                	xchg   ax,ax

c001ed80 <i386GetRDRAND>:
c001ed80:	b9 64 00 00 00       	mov    ecx,0x64

c001ed85 <retry>:
c001ed85:	0f c7 f0             	rdrand eax
c001ed88:	72 05                	jb     c001ed8f <retry.done>
c001ed8a:	e2 f9                	loop   c001ed85 <retry>

c001ed8c <retry.fail>:
c001ed8c:	31 c0                	xor    eax,eax
c001ed8e:	c3                   	ret    

c001ed8f <retry.done>:
c001ed8f:	c3                   	ret    

c001ed90 <absolutelyNoChanceInHell>:
c001ed90:	b8 01 00 00 00       	mov    eax,0x1
c001ed95:	0f a2                	cpuid  
c001ed97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ed9d:	74 06                	je     c001eda5 <sseDetect.noSSE>
c001ed9f:	b8 01 00 00 00       	mov    eax,0x1
c001eda4:	c3                   	ret    

c001eda5 <sseDetect.noSSE>:
c001eda5:	31 c0                	xor    eax,eax
c001eda7:	c3                   	ret    

c001eda8 <sseSave>:
c001eda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edac:	0f ae 00             	fxsave [eax]
c001edaf:	c3                   	ret    

c001edb0 <sseLoad>:
c001edb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb4:	0f ae 08             	fxrstor [eax]
c001edb7:	c3                   	ret    

c001edb8 <sseInit>:
c001edb8:	e8 42 00 00 00       	call   c001edff <x87Init>
c001edbd:	0f 20 e0             	mov    eax,cr4
c001edc0:	66 0d 00 06          	or     ax,0x600
c001edc4:	0f 22 e0             	mov    cr4,eax
c001edc7:	c3                   	ret    

c001edc8 <sseClose>:
c001edc8:	c3                   	ret    
c001edc9:	66 90                	xchg   ax,ax
c001edcb:	66 90                	xchg   ax,ax
c001edcd:	66 90                	xchg   ax,ax
c001edcf:	90                   	nop

c001edd0 <value_37F>:
c001edd0:	7f 03                	jg     c001edd5 <value_37A+0x1>

c001edd2 <value_37E>:
c001edd2:	7e 03                	jle    c001edd7 <x87Detect+0x1>

c001edd4 <value_37A>:
c001edd4:	7a 03                	jp     c001edd9 <x87Detect+0x3>

c001edd6 <x87Detect>:
c001edd6:	b8 01 00 00 00       	mov    eax,0x1
c001eddb:	0f a2                	cpuid  
c001eddd:	f7 c2 01 00 00 00    	test   edx,0x1
c001ede3:	74 06                	je     c001edeb <x87Detect.nox87>
c001ede5:	b8 01 00 00 00       	mov    eax,0x1
c001edea:	c3                   	ret    

c001edeb <x87Detect.nox87>:
c001edeb:	b8 00 00 00 00       	mov    eax,0x0
c001edf0:	c3                   	ret    

c001edf1 <x87Save>:
c001edf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf5:	dd 30                	fnsave [eax]
c001edf7:	c3                   	ret    

c001edf8 <x87Load>:
c001edf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edfc:	dd 20                	frstor [eax]
c001edfe:	c3                   	ret    

c001edff <x87Init>:
c001edff:	0f 20 c0             	mov    eax,cr0
c001ee02:	66 25 fb ff          	and    ax,0xfffb
c001ee06:	66 0d 22 00          	or     ax,0x22
c001ee0a:	0f 22 c0             	mov    cr0,eax
c001ee0d:	db e3                	fninit 
c001ee0f:	0f 06                	clts   
c001ee11:	d9 2d d4 ed 01 c0    	fldcw  WORD PTR ds:0xc001edd4
c001ee17:	c3                   	ret    

c001ee18 <x87Close>:
c001ee18:	c3                   	ret    
c001ee19:	66 90                	xchg   ax,ax
c001ee1b:	90                   	nop

c001ee1c <__do_global_ctors_aux>:
c001ee1c:	a1 d0 fd 01 c0       	mov    eax,ds:0xc001fdd0
c001ee21:	83 f8 ff             	cmp    eax,0xffffffff
c001ee24:	74 1a                	je     c001ee40 <__do_global_ctors_aux+0x24>
c001ee26:	55                   	push   ebp
c001ee27:	89 e5                	mov    ebp,esp
c001ee29:	53                   	push   ebx
c001ee2a:	52                   	push   edx
c001ee2b:	bb d0 fd 01 c0       	mov    ebx,0xc001fdd0
c001ee30:	ff d0                	call   eax
c001ee32:	83 eb 04             	sub    ebx,0x4
c001ee35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee37:	83 f8 ff             	cmp    eax,0xffffffff
c001ee3a:	75 f4                	jne    c001ee30 <__do_global_ctors_aux+0x14>
c001ee3c:	58                   	pop    eax
c001ee3d:	5b                   	pop    ebx
c001ee3e:	5d                   	pop    ebp
c001ee3f:	c3                   	ret    
c001ee40:	c3                   	ret    
c001ee41:	66 90                	xchg   ax,ax
c001ee43:	90                   	nop

c001ee44 <__divdi3>:
c001ee44:	55                   	push   ebp
c001ee45:	57                   	push   edi
c001ee46:	56                   	push   esi
c001ee47:	53                   	push   ebx
c001ee48:	83 ec 1c             	sub    esp,0x1c
c001ee4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee62:	85 db                	test   ebx,ebx
c001ee64:	0f 88 8e 00 00 00    	js     c001eef8 <__divdi3+0xb4>
c001ee6a:	89 dd                	mov    ebp,ebx
c001ee6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ee74:	89 d3                	mov    ebx,edx
c001ee76:	85 d2                	test   edx,edx
c001ee78:	79 0d                	jns    c001ee87 <__divdi3+0x43>
c001ee7a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ee7e:	f7 d8                	neg    eax
c001ee80:	83 d2 00             	adc    edx,0x0
c001ee83:	f7 da                	neg    edx
c001ee85:	89 d3                	mov    ebx,edx
c001ee87:	89 c7                	mov    edi,eax
c001ee89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ee8c:	85 db                	test   ebx,ebx
c001ee8e:	75 48                	jne    c001eed8 <__divdi3+0x94>
c001ee90:	39 ef                	cmp    edi,ebp
c001ee92:	76 24                	jbe    c001eeb8 <__divdi3+0x74>
c001ee94:	89 ea                	mov    edx,ebp
c001ee96:	f7 f7                	div    edi
c001ee98:	89 c1                	mov    ecx,eax
c001ee9a:	31 f6                	xor    esi,esi
c001ee9c:	89 c8                	mov    eax,ecx
c001ee9e:	89 f2                	mov    edx,esi
c001eea0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eea4:	85 c9                	test   ecx,ecx
c001eea6:	74 07                	je     c001eeaf <__divdi3+0x6b>
c001eea8:	f7 d8                	neg    eax
c001eeaa:	83 d2 00             	adc    edx,0x0
c001eead:	f7 da                	neg    edx
c001eeaf:	83 c4 1c             	add    esp,0x1c
c001eeb2:	5b                   	pop    ebx
c001eeb3:	5e                   	pop    esi
c001eeb4:	5f                   	pop    edi
c001eeb5:	5d                   	pop    ebp
c001eeb6:	c3                   	ret    
c001eeb7:	90                   	nop
c001eeb8:	85 ff                	test   edi,edi
c001eeba:	75 0b                	jne    c001eec7 <__divdi3+0x83>
c001eebc:	b8 01 00 00 00       	mov    eax,0x1
c001eec1:	31 d2                	xor    edx,edx
c001eec3:	f7 f3                	div    ebx
c001eec5:	89 c7                	mov    edi,eax
c001eec7:	31 d2                	xor    edx,edx
c001eec9:	89 e8                	mov    eax,ebp
c001eecb:	f7 f7                	div    edi
c001eecd:	89 c6                	mov    esi,eax
c001eecf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eed2:	f7 f7                	div    edi
c001eed4:	89 c1                	mov    ecx,eax
c001eed6:	eb c4                	jmp    c001ee9c <__divdi3+0x58>
c001eed8:	39 eb                	cmp    ebx,ebp
c001eeda:	77 3c                	ja     c001ef18 <__divdi3+0xd4>
c001eedc:	0f bd f3             	bsr    esi,ebx
c001eedf:	83 f6 1f             	xor    esi,0x1f
c001eee2:	75 40                	jne    c001ef24 <__divdi3+0xe0>
c001eee4:	39 eb                	cmp    ebx,ebp
c001eee6:	72 09                	jb     c001eef1 <__divdi3+0xad>
c001eee8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001eeeb:	0f 87 97 00 00 00    	ja     c001ef88 <__divdi3+0x144>
c001eef1:	b9 01 00 00 00       	mov    ecx,0x1
c001eef6:	eb a4                	jmp    c001ee9c <__divdi3+0x58>
c001eef8:	f7 d9                	neg    ecx
c001eefa:	83 d3 00             	adc    ebx,0x0
c001eefd:	f7 db                	neg    ebx
c001eeff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef02:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef06:	89 dd                	mov    ebp,ebx
c001ef08:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef10:	e9 5f ff ff ff       	jmp    c001ee74 <__divdi3+0x30>
c001ef15:	8d 76 00             	lea    esi,[esi+0x0]
c001ef18:	31 f6                	xor    esi,esi
c001ef1a:	31 c9                	xor    ecx,ecx
c001ef1c:	e9 7b ff ff ff       	jmp    c001ee9c <__divdi3+0x58>
c001ef21:	8d 76 00             	lea    esi,[esi+0x0]
c001ef24:	b8 20 00 00 00       	mov    eax,0x20
c001ef29:	29 f0                	sub    eax,esi
c001ef2b:	89 f1                	mov    ecx,esi
c001ef2d:	d3 e3                	shl    ebx,cl
c001ef2f:	89 fa                	mov    edx,edi
c001ef31:	88 c1                	mov    cl,al
c001ef33:	d3 ea                	shr    edx,cl
c001ef35:	09 da                	or     edx,ebx
c001ef37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef3b:	89 f1                	mov    ecx,esi
c001ef3d:	d3 e7                	shl    edi,cl
c001ef3f:	89 eb                	mov    ebx,ebp
c001ef41:	88 c1                	mov    cl,al
c001ef43:	d3 eb                	shr    ebx,cl
c001ef45:	89 f1                	mov    ecx,esi
c001ef47:	d3 e5                	shl    ebp,cl
c001ef49:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef4c:	88 c1                	mov    cl,al
c001ef4e:	d3 ea                	shr    edx,cl
c001ef50:	09 d5                	or     ebp,edx
c001ef52:	89 e8                	mov    eax,ebp
c001ef54:	89 da                	mov    edx,ebx
c001ef56:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef5a:	89 d3                	mov    ebx,edx
c001ef5c:	89 c5                	mov    ebp,eax
c001ef5e:	f7 e7                	mul    edi
c001ef60:	39 d3                	cmp    ebx,edx
c001ef62:	72 18                	jb     c001ef7c <__divdi3+0x138>
c001ef64:	74 0a                	je     c001ef70 <__divdi3+0x12c>
c001ef66:	89 e9                	mov    ecx,ebp
c001ef68:	31 f6                	xor    esi,esi
c001ef6a:	e9 2d ff ff ff       	jmp    c001ee9c <__divdi3+0x58>
c001ef6f:	90                   	nop
c001ef70:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ef73:	89 f1                	mov    ecx,esi
c001ef75:	d3 e7                	shl    edi,cl
c001ef77:	39 c7                	cmp    edi,eax
c001ef79:	73 eb                	jae    c001ef66 <__divdi3+0x122>
c001ef7b:	90                   	nop
c001ef7c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ef7f:	31 f6                	xor    esi,esi
c001ef81:	e9 16 ff ff ff       	jmp    c001ee9c <__divdi3+0x58>
c001ef86:	66 90                	xchg   ax,ax
c001ef88:	31 c9                	xor    ecx,ecx
c001ef8a:	e9 0d ff ff ff       	jmp    c001ee9c <__divdi3+0x58>
c001ef8f:	90                   	nop

c001ef90 <__moddi3>:
c001ef90:	55                   	push   ebp
c001ef91:	57                   	push   edi
c001ef92:	56                   	push   esi
c001ef93:	53                   	push   ebx
c001ef94:	83 ec 2c             	sub    esp,0x2c
c001ef97:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ef9b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ef9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efa3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efa7:	85 db                	test   ebx,ebx
c001efa9:	0f 88 85 00 00 00    	js     c001f034 <__moddi3+0xa4>
c001efaf:	89 de                	mov    esi,ebx
c001efb1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efb9:	89 d7                	mov    edi,edx
c001efbb:	85 d2                	test   edx,edx
c001efbd:	79 09                	jns    c001efc8 <__moddi3+0x38>
c001efbf:	f7 d8                	neg    eax
c001efc1:	83 d2 00             	adc    edx,0x0
c001efc4:	f7 da                	neg    edx
c001efc6:	89 d7                	mov    edi,edx
c001efc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efcc:	89 cd                	mov    ebp,ecx
c001efce:	85 ff                	test   edi,edi
c001efd0:	75 52                	jne    c001f024 <__moddi3+0x94>
c001efd2:	89 c3                	mov    ebx,eax
c001efd4:	39 f0                	cmp    eax,esi
c001efd6:	76 24                	jbe    c001effc <__moddi3+0x6c>
c001efd8:	89 c8                	mov    eax,ecx
c001efda:	89 f2                	mov    edx,esi
c001efdc:	f7 f3                	div    ebx
c001efde:	89 d6                	mov    esi,edx
c001efe0:	89 f0                	mov    eax,esi
c001efe2:	31 d2                	xor    edx,edx
c001efe4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efe8:	85 c9                	test   ecx,ecx
c001efea:	74 07                	je     c001eff3 <__moddi3+0x63>
c001efec:	f7 d8                	neg    eax
c001efee:	83 d2 00             	adc    edx,0x0
c001eff1:	f7 da                	neg    edx
c001eff3:	83 c4 2c             	add    esp,0x2c
c001eff6:	5b                   	pop    ebx
c001eff7:	5e                   	pop    esi
c001eff8:	5f                   	pop    edi
c001eff9:	5d                   	pop    ebp
c001effa:	c3                   	ret    
c001effb:	90                   	nop
c001effc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f000:	85 db                	test   ebx,ebx
c001f002:	75 0d                	jne    c001f011 <__moddi3+0x81>
c001f004:	b8 01 00 00 00       	mov    eax,0x1
c001f009:	31 d2                	xor    edx,edx
c001f00b:	f7 f7                	div    edi
c001f00d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f011:	89 f0                	mov    eax,esi
c001f013:	31 d2                	xor    edx,edx
c001f015:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f019:	f7 f7                	div    edi
c001f01b:	89 e8                	mov    eax,ebp
c001f01d:	f7 f7                	div    edi
c001f01f:	89 d6                	mov    esi,edx
c001f021:	eb bd                	jmp    c001efe0 <__moddi3+0x50>
c001f023:	90                   	nop
c001f024:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f028:	39 f7                	cmp    edi,esi
c001f02a:	76 20                	jbe    c001f04c <__moddi3+0xbc>
c001f02c:	89 c8                	mov    eax,ecx
c001f02e:	89 f2                	mov    edx,esi
c001f030:	eb b2                	jmp    c001efe4 <__moddi3+0x54>
c001f032:	66 90                	xchg   ax,ax
c001f034:	f7 d9                	neg    ecx
c001f036:	83 d3 00             	adc    ebx,0x0
c001f039:	f7 db                	neg    ebx
c001f03b:	89 de                	mov    esi,ebx
c001f03d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f045:	e9 6f ff ff ff       	jmp    c001efb9 <__moddi3+0x29>
c001f04a:	66 90                	xchg   ax,ax
c001f04c:	0f bd c7             	bsr    eax,edi
c001f04f:	83 f0 1f             	xor    eax,0x1f
c001f052:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f056:	75 24                	jne    c001f07c <__moddi3+0xec>
c001f058:	39 f7                	cmp    edi,esi
c001f05a:	72 06                	jb     c001f062 <__moddi3+0xd2>
c001f05c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f060:	77 0c                	ja     c001f06e <__moddi3+0xde>
c001f062:	89 e9                	mov    ecx,ebp
c001f064:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f068:	19 fe                	sbb    esi,edi
c001f06a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f06e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f072:	89 f2                	mov    edx,esi
c001f074:	e9 6b ff ff ff       	jmp    c001efe4 <__moddi3+0x54>
c001f079:	8d 76 00             	lea    esi,[esi+0x0]
c001f07c:	b8 20 00 00 00       	mov    eax,0x20
c001f081:	89 c2                	mov    edx,eax
c001f083:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f087:	29 da                	sub    edx,ebx
c001f089:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f08d:	88 d9                	mov    cl,bl
c001f08f:	d3 e7                	shl    edi,cl
c001f091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f095:	88 d1                	mov    cl,dl
c001f097:	d3 e8                	shr    eax,cl
c001f099:	09 c7                	or     edi,eax
c001f09b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f09f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0a3:	89 d8                	mov    eax,ebx
c001f0a5:	88 d9                	mov    cl,bl
c001f0a7:	d3 e7                	shl    edi,cl
c001f0a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0ad:	89 f3                	mov    ebx,esi
c001f0af:	88 d1                	mov    cl,dl
c001f0b1:	d3 eb                	shr    ebx,cl
c001f0b3:	89 c7                	mov    edi,eax
c001f0b5:	88 c1                	mov    cl,al
c001f0b7:	d3 e6                	shl    esi,cl
c001f0b9:	89 e8                	mov    eax,ebp
c001f0bb:	88 d1                	mov    cl,dl
c001f0bd:	d3 e8                	shr    eax,cl
c001f0bf:	09 f0                	or     eax,esi
c001f0c1:	89 f9                	mov    ecx,edi
c001f0c3:	d3 e5                	shl    ebp,cl
c001f0c5:	89 da                	mov    edx,ebx
c001f0c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0cb:	89 d3                	mov    ebx,edx
c001f0cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0d1:	89 c6                	mov    esi,eax
c001f0d3:	89 d1                	mov    ecx,edx
c001f0d5:	39 d3                	cmp    ebx,edx
c001f0d7:	72 27                	jb     c001f100 <__moddi3+0x170>
c001f0d9:	74 21                	je     c001f0fc <__moddi3+0x16c>
c001f0db:	29 f5                	sub    ebp,esi
c001f0dd:	19 cb                	sbb    ebx,ecx
c001f0df:	89 de                	mov    esi,ebx
c001f0e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f0e5:	d3 e6                	shl    esi,cl
c001f0e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0eb:	89 f9                	mov    ecx,edi
c001f0ed:	d3 ed                	shr    ebp,cl
c001f0ef:	09 ee                	or     esi,ebp
c001f0f1:	89 f0                	mov    eax,esi
c001f0f3:	d3 eb                	shr    ebx,cl
c001f0f5:	89 da                	mov    edx,ebx
c001f0f7:	e9 e8 fe ff ff       	jmp    c001efe4 <__moddi3+0x54>
c001f0fc:	39 c5                	cmp    ebp,eax
c001f0fe:	73 db                	jae    c001f0db <__moddi3+0x14b>
c001f100:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f104:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f108:	89 d1                	mov    ecx,edx
c001f10a:	89 c6                	mov    esi,eax
c001f10c:	eb cd                	jmp    c001f0db <__moddi3+0x14b>
c001f10e:	66 90                	xchg   ax,ax

c001f110 <__udivdi3>:
c001f110:	55                   	push   ebp
c001f111:	57                   	push   edi
c001f112:	56                   	push   esi
c001f113:	53                   	push   ebx
c001f114:	83 ec 1c             	sub    esp,0x1c
c001f117:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f11b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f11f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f123:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f127:	85 d2                	test   edx,edx
c001f129:	75 41                	jne    c001f16c <__udivdi3+0x5c>
c001f12b:	39 f7                	cmp    edi,esi
c001f12d:	76 15                	jbe    c001f144 <__udivdi3+0x34>
c001f12f:	89 e8                	mov    eax,ebp
c001f131:	89 f2                	mov    edx,esi
c001f133:	f7 f7                	div    edi
c001f135:	31 db                	xor    ebx,ebx
c001f137:	89 da                	mov    edx,ebx
c001f139:	83 c4 1c             	add    esp,0x1c
c001f13c:	5b                   	pop    ebx
c001f13d:	5e                   	pop    esi
c001f13e:	5f                   	pop    edi
c001f13f:	5d                   	pop    ebp
c001f140:	c3                   	ret    
c001f141:	8d 76 00             	lea    esi,[esi+0x0]
c001f144:	89 f9                	mov    ecx,edi
c001f146:	85 ff                	test   edi,edi
c001f148:	75 0b                	jne    c001f155 <__udivdi3+0x45>
c001f14a:	b8 01 00 00 00       	mov    eax,0x1
c001f14f:	31 d2                	xor    edx,edx
c001f151:	f7 f7                	div    edi
c001f153:	89 c1                	mov    ecx,eax
c001f155:	31 d2                	xor    edx,edx
c001f157:	89 f0                	mov    eax,esi
c001f159:	f7 f1                	div    ecx
c001f15b:	89 c3                	mov    ebx,eax
c001f15d:	89 e8                	mov    eax,ebp
c001f15f:	f7 f1                	div    ecx
c001f161:	89 da                	mov    edx,ebx
c001f163:	83 c4 1c             	add    esp,0x1c
c001f166:	5b                   	pop    ebx
c001f167:	5e                   	pop    esi
c001f168:	5f                   	pop    edi
c001f169:	5d                   	pop    ebp
c001f16a:	c3                   	ret    
c001f16b:	90                   	nop
c001f16c:	39 f2                	cmp    edx,esi
c001f16e:	77 1c                	ja     c001f18c <__udivdi3+0x7c>
c001f170:	0f bd da             	bsr    ebx,edx
c001f173:	83 f3 1f             	xor    ebx,0x1f
c001f176:	75 24                	jne    c001f19c <__udivdi3+0x8c>
c001f178:	39 f2                	cmp    edx,esi
c001f17a:	72 08                	jb     c001f184 <__udivdi3+0x74>
c001f17c:	39 ef                	cmp    edi,ebp
c001f17e:	0f 87 84 00 00 00    	ja     c001f208 <__udivdi3+0xf8>
c001f184:	b8 01 00 00 00       	mov    eax,0x1
c001f189:	eb ac                	jmp    c001f137 <__udivdi3+0x27>
c001f18b:	90                   	nop
c001f18c:	31 db                	xor    ebx,ebx
c001f18e:	31 c0                	xor    eax,eax
c001f190:	89 da                	mov    edx,ebx
c001f192:	83 c4 1c             	add    esp,0x1c
c001f195:	5b                   	pop    ebx
c001f196:	5e                   	pop    esi
c001f197:	5f                   	pop    edi
c001f198:	5d                   	pop    ebp
c001f199:	c3                   	ret    
c001f19a:	66 90                	xchg   ax,ax
c001f19c:	b8 20 00 00 00       	mov    eax,0x20
c001f1a1:	29 d8                	sub    eax,ebx
c001f1a3:	88 d9                	mov    cl,bl
c001f1a5:	d3 e2                	shl    edx,cl
c001f1a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1ab:	89 fa                	mov    edx,edi
c001f1ad:	88 c1                	mov    cl,al
c001f1af:	d3 ea                	shr    edx,cl
c001f1b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1b5:	09 d1                	or     ecx,edx
c001f1b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1bb:	88 d9                	mov    cl,bl
c001f1bd:	d3 e7                	shl    edi,cl
c001f1bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1c3:	89 f7                	mov    edi,esi
c001f1c5:	88 c1                	mov    cl,al
c001f1c7:	d3 ef                	shr    edi,cl
c001f1c9:	88 d9                	mov    cl,bl
c001f1cb:	d3 e6                	shl    esi,cl
c001f1cd:	89 ea                	mov    edx,ebp
c001f1cf:	88 c1                	mov    cl,al
c001f1d1:	d3 ea                	shr    edx,cl
c001f1d3:	09 d6                	or     esi,edx
c001f1d5:	89 f0                	mov    eax,esi
c001f1d7:	89 fa                	mov    edx,edi
c001f1d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1dd:	89 d7                	mov    edi,edx
c001f1df:	89 c6                	mov    esi,eax
c001f1e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1e5:	39 d7                	cmp    edi,edx
c001f1e7:	72 13                	jb     c001f1fc <__udivdi3+0xec>
c001f1e9:	74 09                	je     c001f1f4 <__udivdi3+0xe4>
c001f1eb:	89 f0                	mov    eax,esi
c001f1ed:	31 db                	xor    ebx,ebx
c001f1ef:	e9 43 ff ff ff       	jmp    c001f137 <__udivdi3+0x27>
c001f1f4:	88 d9                	mov    cl,bl
c001f1f6:	d3 e5                	shl    ebp,cl
c001f1f8:	39 c5                	cmp    ebp,eax
c001f1fa:	73 ef                	jae    c001f1eb <__udivdi3+0xdb>
c001f1fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f1ff:	31 db                	xor    ebx,ebx
c001f201:	e9 31 ff ff ff       	jmp    c001f137 <__udivdi3+0x27>
c001f206:	66 90                	xchg   ax,ax
c001f208:	31 c0                	xor    eax,eax
c001f20a:	e9 28 ff ff ff       	jmp    c001f137 <__udivdi3+0x27>
c001f20f:	90                   	nop

c001f210 <__umoddi3>:
c001f210:	55                   	push   ebp
c001f211:	57                   	push   edi
c001f212:	56                   	push   esi
c001f213:	53                   	push   ebx
c001f214:	83 ec 1c             	sub    esp,0x1c
c001f217:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f21b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f21f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f223:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f227:	89 da                	mov    edx,ebx
c001f229:	85 c0                	test   eax,eax
c001f22b:	75 37                	jne    c001f264 <__umoddi3+0x54>
c001f22d:	39 df                	cmp    edi,ebx
c001f22f:	76 13                	jbe    c001f244 <__umoddi3+0x34>
c001f231:	89 f0                	mov    eax,esi
c001f233:	f7 f7                	div    edi
c001f235:	89 d0                	mov    eax,edx
c001f237:	31 d2                	xor    edx,edx
c001f239:	83 c4 1c             	add    esp,0x1c
c001f23c:	5b                   	pop    ebx
c001f23d:	5e                   	pop    esi
c001f23e:	5f                   	pop    edi
c001f23f:	5d                   	pop    ebp
c001f240:	c3                   	ret    
c001f241:	8d 76 00             	lea    esi,[esi+0x0]
c001f244:	89 fd                	mov    ebp,edi
c001f246:	85 ff                	test   edi,edi
c001f248:	75 0b                	jne    c001f255 <__umoddi3+0x45>
c001f24a:	b8 01 00 00 00       	mov    eax,0x1
c001f24f:	31 d2                	xor    edx,edx
c001f251:	f7 f7                	div    edi
c001f253:	89 c5                	mov    ebp,eax
c001f255:	89 d8                	mov    eax,ebx
c001f257:	31 d2                	xor    edx,edx
c001f259:	f7 f5                	div    ebp
c001f25b:	89 f0                	mov    eax,esi
c001f25d:	f7 f5                	div    ebp
c001f25f:	89 d0                	mov    eax,edx
c001f261:	eb d4                	jmp    c001f237 <__umoddi3+0x27>
c001f263:	90                   	nop
c001f264:	89 f1                	mov    ecx,esi
c001f266:	39 d8                	cmp    eax,ebx
c001f268:	76 0a                	jbe    c001f274 <__umoddi3+0x64>
c001f26a:	89 f0                	mov    eax,esi
c001f26c:	83 c4 1c             	add    esp,0x1c
c001f26f:	5b                   	pop    ebx
c001f270:	5e                   	pop    esi
c001f271:	5f                   	pop    edi
c001f272:	5d                   	pop    ebp
c001f273:	c3                   	ret    
c001f274:	0f bd e8             	bsr    ebp,eax
c001f277:	83 f5 1f             	xor    ebp,0x1f
c001f27a:	75 1c                	jne    c001f298 <__umoddi3+0x88>
c001f27c:	39 d8                	cmp    eax,ebx
c001f27e:	72 04                	jb     c001f284 <__umoddi3+0x74>
c001f280:	39 f7                	cmp    edi,esi
c001f282:	77 08                	ja     c001f28c <__umoddi3+0x7c>
c001f284:	89 da                	mov    edx,ebx
c001f286:	29 fe                	sub    esi,edi
c001f288:	19 c2                	sbb    edx,eax
c001f28a:	89 f1                	mov    ecx,esi
c001f28c:	89 c8                	mov    eax,ecx
c001f28e:	83 c4 1c             	add    esp,0x1c
c001f291:	5b                   	pop    ebx
c001f292:	5e                   	pop    esi
c001f293:	5f                   	pop    edi
c001f294:	5d                   	pop    ebp
c001f295:	c3                   	ret    
c001f296:	66 90                	xchg   ax,ax
c001f298:	ba 20 00 00 00       	mov    edx,0x20
c001f29d:	29 ea                	sub    edx,ebp
c001f29f:	89 e9                	mov    ecx,ebp
c001f2a1:	d3 e0                	shl    eax,cl
c001f2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2a7:	89 f8                	mov    eax,edi
c001f2a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2ad:	88 d1                	mov    cl,dl
c001f2af:	d3 e8                	shr    eax,cl
c001f2b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2b5:	09 c1                	or     ecx,eax
c001f2b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2bb:	89 e9                	mov    ecx,ebp
c001f2bd:	d3 e7                	shl    edi,cl
c001f2bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2c3:	89 d8                	mov    eax,ebx
c001f2c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2c9:	88 d1                	mov    cl,dl
c001f2cb:	d3 e8                	shr    eax,cl
c001f2cd:	89 c7                	mov    edi,eax
c001f2cf:	89 e9                	mov    ecx,ebp
c001f2d1:	d3 e3                	shl    ebx,cl
c001f2d3:	89 f0                	mov    eax,esi
c001f2d5:	88 d1                	mov    cl,dl
c001f2d7:	d3 e8                	shr    eax,cl
c001f2d9:	09 d8                	or     eax,ebx
c001f2db:	89 e9                	mov    ecx,ebp
c001f2dd:	d3 e6                	shl    esi,cl
c001f2df:	89 f3                	mov    ebx,esi
c001f2e1:	89 fa                	mov    edx,edi
c001f2e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2e7:	89 d1                	mov    ecx,edx
c001f2e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2ed:	89 c6                	mov    esi,eax
c001f2ef:	89 d7                	mov    edi,edx
c001f2f1:	39 d1                	cmp    ecx,edx
c001f2f3:	72 27                	jb     c001f31c <__umoddi3+0x10c>
c001f2f5:	74 21                	je     c001f318 <__umoddi3+0x108>
c001f2f7:	89 ca                	mov    edx,ecx
c001f2f9:	29 f3                	sub    ebx,esi
c001f2fb:	19 fa                	sbb    edx,edi
c001f2fd:	89 d0                	mov    eax,edx
c001f2ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f303:	d3 e0                	shl    eax,cl
c001f305:	89 e9                	mov    ecx,ebp
c001f307:	d3 eb                	shr    ebx,cl
c001f309:	09 d8                	or     eax,ebx
c001f30b:	d3 ea                	shr    edx,cl
c001f30d:	83 c4 1c             	add    esp,0x1c
c001f310:	5b                   	pop    ebx
c001f311:	5e                   	pop    esi
c001f312:	5f                   	pop    edi
c001f313:	5d                   	pop    ebp
c001f314:	c3                   	ret    
c001f315:	8d 76 00             	lea    esi,[esi+0x0]
c001f318:	39 c3                	cmp    ebx,eax
c001f31a:	73 db                	jae    c001f2f7 <__umoddi3+0xe7>
c001f31c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f320:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f324:	89 d7                	mov    edi,edx
c001f326:	89 c6                	mov    esi,eax
c001f328:	eb cd                	jmp    c001f2f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f32a <_init>:
c001f32a:	55                   	push   ebp
c001f32b:	89 e5                	mov    ebp,esp
c001f32d:	e8 c2 0d fe ff       	call   c00000f4 <frame_dummy>
c001f332:	e8 e5 fa ff ff       	call   c001ee1c <__do_global_ctors_aux>
c001f337:	5d                   	pop    ebp
c001f338:	c3                   	ret    

Disassembly of section .fini:

c001f339 <_fini>:
c001f339:	55                   	push   ebp
c001f33a:	89 e5                	mov    ebp,esp
c001f33c:	e8 43 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f341:	5d                   	pop    ebp
c001f342:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f344 <Computer::~Computer()>:
c001f344:	83 ec 0c             	sub    esp,0xc
c001f347:	ba 54 06 02 c0       	mov    edx,0xc0020654
c001f34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f350:	89 10                	mov    DWORD PTR [eax],edx
c001f352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f356:	83 ec 0c             	sub    esp,0xc
c001f359:	50                   	push   eax
c001f35a:	e8 77 d1 fe ff       	call   c000c4d6 <Device::~Device()>
c001f35f:	83 c4 10             	add    esp,0x10
c001f362:	90                   	nop
c001f363:	83 c4 0c             	add    esp,0xc
c001f366:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f368 <Computer::~Computer()>:
c001f368:	83 ec 0c             	sub    esp,0xc
c001f36b:	83 ec 0c             	sub    esp,0xc
c001f36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f372:	e8 cd ff ff ff       	call   c001f344 <Computer::~Computer()>
c001f377:	83 c4 10             	add    esp,0x10
c001f37a:	83 ec 08             	sub    esp,0x8
c001f37d:	68 70 01 00 00       	push   0x170
c001f382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f386:	e8 81 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f38b:	83 c4 10             	add    esp,0x10
c001f38e:	83 c4 0c             	add    esp,0xc
c001f391:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f392 <idleCommon()>:
c001f392:	83 ec 0c             	sub    esp,0xc
c001f395:	fa                   	cli    
c001f396:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f39c:	e8 af 66 ff ff       	call   c0015a50 <schedule()>
c001f3a1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3a6:	48                   	dec    eax
c001f3a7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3ac:	75 01                	jne    c001f3af <idleCommon()+0x1d>
c001f3ae:	fb                   	sti    
c001f3af:	83 c4 0c             	add    esp,0xc
c001f3b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3b4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3b4:	90                   	nop
c001f3b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3b6 <LinkedList<UnixFile>::LinkedList()>:
c001f3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3f6:	90                   	nop
c001f3f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f3f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f400:	75 10                	jne    c001f412 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	68 68 08 02 c0       	push   0xc0020868
c001f40a:	e8 3e 1d ff ff       	call   c001114d <KePanic(char const*)>
c001f40f:	83 c4 10             	add    esp,0x10
c001f412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f416:	8b 00                	mov    eax,DWORD PTR [eax]
c001f418:	85 c0                	test   eax,eax
c001f41a:	74 34                	je     c001f450 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f420:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f423:	85 c0                	test   eax,eax
c001f425:	74 29                	je     c001f450 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f42e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f432:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f439:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f43d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f447:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f44e:	eb 65                	jmp    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f454:	8b 00                	mov    eax,DWORD PTR [eax]
c001f456:	85 c0                	test   eax,eax
c001f458:	75 4b                	jne    c001f4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f461:	85 c0                	test   eax,eax
c001f463:	75 40                	jne    c001f4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f46d:	89 10                	mov    DWORD PTR [eax],edx
c001f46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f473:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f481:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f48f:	85 c0                	test   eax,eax
c001f491:	74 22                	je     c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f493:	83 ec 0c             	sub    esp,0xc
c001f496:	68 8a 08 02 c0       	push   0xc002088a
c001f49b:	e8 ad 1c ff ff       	call   c001114d <KePanic(char const*)>
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	eb 10                	jmp    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4a5:	83 ec 0c             	sub    esp,0xc
c001f4a8:	68 94 08 02 c0       	push   0xc0020894
c001f4ad:	e8 9b 1c ff ff       	call   c001114d <KePanic(char const*)>
c001f4b2:	83 c4 10             	add    esp,0x10
c001f4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4bc:	8d 50 01             	lea    edx,[eax+0x1]
c001f4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4c6:	90                   	nop
c001f4c7:	83 c4 0c             	add    esp,0xc
c001f4ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4cc <LinkedList<UnixFile>::getFirstElement()>:
c001f4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f4d4 <LinkedList<UnixFile>::removeFirst()>:
c001f4d4:	83 ec 0c             	sub    esp,0xc
c001f4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4db:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4dd:	85 c0                	test   eax,eax
c001f4df:	75 12                	jne    c001f4f3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f4e1:	83 ec 0c             	sub    esp,0xc
c001f4e4:	68 a0 08 02 c0       	push   0xc00208a0
c001f4e9:	e8 5f 1c ff ff       	call   c001114d <KePanic(char const*)>
c001f4ee:	83 c4 10             	add    esp,0x10
c001f4f1:	eb 7e                	jmp    c001f571 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4fd:	85 c0                	test   eax,eax
c001f4ff:	74 10                	je     c001f511 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	68 eb 08 02 c0       	push   0xc00208eb
c001f509:	e8 3f 1c ff ff       	call   c001114d <KePanic(char const*)>
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f515:	8b 00                	mov    eax,DWORD PTR [eax]
c001f517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51a:	85 c0                	test   eax,eax
c001f51c:	75 33                	jne    c001f551 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f522:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f53a:	83 f8 01             	cmp    eax,0x1
c001f53d:	74 21                	je     c001f560 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f53f:	83 ec 0c             	sub    esp,0xc
c001f542:	68 c4 08 02 c0       	push   0xc00208c4
c001f547:	e8 01 1c ff ff       	call   c001114d <KePanic(char const*)>
c001f54c:	83 c4 10             	add    esp,0x10
c001f54f:	eb 0f                	jmp    c001f560 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f555:	8b 00                	mov    eax,DWORD PTR [eax]
c001f557:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55e:	89 10                	mov    DWORD PTR [eax],edx
c001f560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f564:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f567:	8d 50 ff             	lea    edx,[eax-0x1]
c001f56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f571:	83 c4 0c             	add    esp,0xc
c001f574:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f576 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f57a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f57d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f57e <DriverlessDevice::~DriverlessDevice()>:
c001f57e:	ba bc 13 02 c0       	mov    edx,0xc00213bc
c001f583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f587:	89 10                	mov    DWORD PTR [eax],edx
c001f589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58d:	50                   	push   eax
c001f58e:	e8 43 cf fe ff       	call   c000c4d6 <Device::~Device()>
c001f593:	83 c4 04             	add    esp,0x4
c001f596:	90                   	nop
c001f597:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f598 <DriverlessDevice::~DriverlessDevice()>:
c001f598:	83 ec 0c             	sub    esp,0xc
c001f59b:	83 ec 0c             	sub    esp,0xc
c001f59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5a2:	e8 d7 ff ff ff       	call   c001f57e <DriverlessDevice::~DriverlessDevice()>
c001f5a7:	83 c4 10             	add    esp,0x10
c001f5aa:	83 ec 08             	sub    esp,0x8
c001f5ad:	68 58 01 00 00       	push   0x158
c001f5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b6:	e8 51 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5bb:	83 c4 10             	add    esp,0x10
c001f5be:	83 c4 0c             	add    esp,0xc
c001f5c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5c2 <LinkedList<Device>::addElement(Device*)>:
c001f5c2:	83 ec 0c             	sub    esp,0xc
c001f5c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5ca:	75 10                	jne    c001f5dc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5cc:	83 ec 0c             	sub    esp,0xc
c001f5cf:	68 68 08 02 c0       	push   0xc0020868
c001f5d4:	e8 74 1b ff ff       	call   c001114d <KePanic(char const*)>
c001f5d9:	83 c4 10             	add    esp,0x10
c001f5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e2:	85 c0                	test   eax,eax
c001f5e4:	74 3a                	je     c001f620 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5ed:	85 c0                	test   eax,eax
c001f5ef:	74 2f                	je     c001f620 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f606:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f60a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f611:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f614:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f61e:	eb 68                	jmp    c001f688 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f624:	8b 00                	mov    eax,DWORD PTR [eax]
c001f626:	85 c0                	test   eax,eax
c001f628:	75 4e                	jne    c001f678 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f631:	85 c0                	test   eax,eax
c001f633:	75 43                	jne    c001f678 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f639:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f63d:	89 10                	mov    DWORD PTR [eax],edx
c001f63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f643:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f647:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f651:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f662:	85 c0                	test   eax,eax
c001f664:	74 22                	je     c001f688 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	68 8a 08 02 c0       	push   0xc002088a
c001f66e:	e8 da 1a ff ff       	call   c001114d <KePanic(char const*)>
c001f673:	83 c4 10             	add    esp,0x10
c001f676:	eb 10                	jmp    c001f688 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f678:	83 ec 0c             	sub    esp,0xc
c001f67b:	68 94 08 02 c0       	push   0xc0020894
c001f680:	e8 c8 1a ff ff       	call   c001114d <KePanic(char const*)>
c001f685:	83 c4 10             	add    esp,0x10
c001f688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68f:	8d 50 01             	lea    edx,[eax+0x1]
c001f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f696:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f699:	90                   	nop
c001f69a:	83 c4 0c             	add    esp,0xc
c001f69d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f69e <LinkedList<Device>::LinkedList()>:
c001f69e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6de:	90                   	nop
c001f6df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f6e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6e6:	85 c0                	test   eax,eax
c001f6e8:	75 0e                	jne    c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6f1:	85 c0                	test   eax,eax
c001f6f3:	75 03                	jne    c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f6f5:	b0 01                	mov    al,0x1
c001f6f7:	c3                   	ret    
c001f6f8:	b0 00                	mov    al,0x0
c001f6fa:	90                   	nop
c001f6fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f6fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f700:	8b 00                	mov    eax,DWORD PTR [eax]
c001f702:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f704 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f704:	83 ec 0c             	sub    esp,0xc
c001f707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f70d:	85 c0                	test   eax,eax
c001f70f:	75 17                	jne    c001f728 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f711:	83 ec 0c             	sub    esp,0xc
c001f714:	68 a0 08 02 c0       	push   0xc00208a0
c001f719:	e8 2f 1a ff ff       	call   c001114d <KePanic(char const*)>
c001f71e:	83 c4 10             	add    esp,0x10
c001f721:	e9 96 00 00 00       	jmp    c001f7bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f726:	66 90                	xchg   ax,ax
c001f728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f72f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f732:	85 c0                	test   eax,eax
c001f734:	0f 95 c0             	setne  al
c001f737:	0f b6 c0             	movzx  eax,al
c001f73a:	85 c0                	test   eax,eax
c001f73c:	74 12                	je     c001f750 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f73e:	83 ec 0c             	sub    esp,0xc
c001f741:	68 eb 08 02 c0       	push   0xc00208eb
c001f746:	e8 02 1a ff ff       	call   c001114d <KePanic(char const*)>
c001f74b:	83 c4 10             	add    esp,0x10
c001f74e:	66 90                	xchg   ax,ax
c001f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f754:	8b 00                	mov    eax,DWORD PTR [eax]
c001f756:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f759:	85 c0                	test   eax,eax
c001f75b:	0f 94 c0             	sete   al
c001f75e:	0f b6 c0             	movzx  eax,al
c001f761:	85 c0                	test   eax,eax
c001f763:	74 33                	je     c001f798 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f769:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f773:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f781:	83 f8 01             	cmp    eax,0x1
c001f784:	74 22                	je     c001f7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	68 c4 08 02 c0       	push   0xc00208c4
c001f78e:	e8 ba 19 ff ff       	call   c001114d <KePanic(char const*)>
c001f793:	83 c4 10             	add    esp,0x10
c001f796:	eb 10                	jmp    c001f7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f79e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a5:	89 10                	mov    DWORD PTR [eax],edx
c001f7a7:	90                   	nop
c001f7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7af:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7bc:	83 c4 0c             	add    esp,0xc
c001f7bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7c8:	75 12                	jne    c001f7dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7ca:	83 ec 0c             	sub    esp,0xc
c001f7cd:	68 68 08 02 c0       	push   0xc0020868
c001f7d2:	e8 76 19 ff ff       	call   c001114d <KePanic(char const*)>
c001f7d7:	83 c4 10             	add    esp,0x10
c001f7da:	66 90                	xchg   ax,ax
c001f7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e2:	85 c0                	test   eax,eax
c001f7e4:	74 36                	je     c001f81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7ed:	85 c0                	test   eax,eax
c001f7ef:	74 2b                	je     c001f81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f818:	eb 6a                	jmp    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f81a:	66 90                	xchg   ax,ax
c001f81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f820:	8b 00                	mov    eax,DWORD PTR [eax]
c001f822:	85 c0                	test   eax,eax
c001f824:	75 4e                	jne    c001f874 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f82d:	85 c0                	test   eax,eax
c001f82f:	75 43                	jne    c001f874 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f835:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f839:	89 10                	mov    DWORD PTR [eax],edx
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f843:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f858:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85b:	85 c0                	test   eax,eax
c001f85d:	74 25                	je     c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f85f:	83 ec 0c             	sub    esp,0xc
c001f862:	68 8a 08 02 c0       	push   0xc002088a
c001f867:	e8 e1 18 ff ff       	call   c001114d <KePanic(char const*)>
c001f86c:	83 c4 10             	add    esp,0x10
c001f86f:	eb 13                	jmp    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f871:	8d 76 00             	lea    esi,[esi+0x0]
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	68 94 08 02 c0       	push   0xc0020894
c001f87c:	e8 cc 18 ff ff       	call   c001114d <KePanic(char const*)>
c001f881:	83 c4 10             	add    esp,0x10
c001f884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f88b:	8d 50 01             	lea    edx,[eax+0x1]
c001f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f892:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f895:	90                   	nop
c001f896:	83 c4 0c             	add    esp,0xc
c001f899:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f89c <ACPI::~ACPI()>:
c001f89c:	83 ec 0c             	sub    esp,0xc
c001f89f:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c001f8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a8:	89 10                	mov    DWORD PTR [eax],edx
c001f8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	50                   	push   eax
c001f8b2:	e8 1f cc fe ff       	call   c000c4d6 <Device::~Device()>
c001f8b7:	83 c4 10             	add    esp,0x10
c001f8ba:	90                   	nop
c001f8bb:	83 c4 0c             	add    esp,0xc
c001f8be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8c0 <ACPI::~ACPI()>:
c001f8c0:	83 ec 0c             	sub    esp,0xc
c001f8c3:	83 ec 0c             	sub    esp,0xc
c001f8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ca:	e8 cd ff ff ff       	call   c001f89c <ACPI::~ACPI()>
c001f8cf:	83 c4 10             	add    esp,0x10
c001f8d2:	83 ec 08             	sub    esp,0x8
c001f8d5:	68 64 12 00 00       	push   0x1264
c001f8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8de:	e8 29 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	83 c4 0c             	add    esp,0xc
c001f8e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f8ec <LinkedList<Device>::~LinkedList()>:
c001f8ec:	90                   	nop
c001f8ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f8f0 <LinkedList<Device>::isEmpty()>:
c001f8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8f6:	85 c0                	test   eax,eax
c001f8f8:	75 0e                	jne    c001f908 <LinkedList<Device>::isEmpty()+0x18>
c001f8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f901:	85 c0                	test   eax,eax
c001f903:	75 03                	jne    c001f908 <LinkedList<Device>::isEmpty()+0x18>
c001f905:	b0 01                	mov    al,0x1
c001f907:	c3                   	ret    
c001f908:	b0 00                	mov    al,0x0
c001f90a:	90                   	nop
c001f90b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f90c <LinkedList<Device>::getFirstElement()>:
c001f90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f910:	8b 00                	mov    eax,DWORD PTR [eax]
c001f912:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f914 <LinkedList<Device>::removeFirst()>:
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f91d:	85 c0                	test   eax,eax
c001f91f:	75 17                	jne    c001f938 <LinkedList<Device>::removeFirst()+0x24>
c001f921:	83 ec 0c             	sub    esp,0xc
c001f924:	68 a0 08 02 c0       	push   0xc00208a0
c001f929:	e8 1f 18 ff ff       	call   c001114d <KePanic(char const*)>
c001f92e:	83 c4 10             	add    esp,0x10
c001f931:	e9 92 00 00 00       	jmp    c001f9c8 <LinkedList<Device>::removeFirst()+0xb4>
c001f936:	66 90                	xchg   ax,ax
c001f938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f93f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f945:	85 c0                	test   eax,eax
c001f947:	74 13                	je     c001f95c <LinkedList<Device>::removeFirst()+0x48>
c001f949:	83 ec 0c             	sub    esp,0xc
c001f94c:	68 eb 08 02 c0       	push   0xc00208eb
c001f951:	e8 f7 17 ff ff       	call   c001114d <KePanic(char const*)>
c001f956:	83 c4 10             	add    esp,0x10
c001f959:	8d 76 00             	lea    esi,[esi+0x0]
c001f95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f960:	8b 00                	mov    eax,DWORD PTR [eax]
c001f962:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f968:	85 c0                	test   eax,eax
c001f96a:	75 34                	jne    c001f9a0 <LinkedList<Device>::removeFirst()+0x8c>
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f988:	83 f8 01             	cmp    eax,0x1
c001f98b:	74 27                	je     c001f9b4 <LinkedList<Device>::removeFirst()+0xa0>
c001f98d:	83 ec 0c             	sub    esp,0xc
c001f990:	68 c4 08 02 c0       	push   0xc00208c4
c001f995:	e8 b3 17 ff ff       	call   c001114d <KePanic(char const*)>
c001f99a:	83 c4 10             	add    esp,0x10
c001f99d:	eb 15                	jmp    c001f9b4 <LinkedList<Device>::removeFirst()+0xa0>
c001f99f:	90                   	nop
c001f9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	89 10                	mov    DWORD PTR [eax],edx
c001f9b2:	66 90                	xchg   ax,ax
c001f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9bb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9c8:	83 c4 0c             	add    esp,0xc
c001f9cb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9cc <CPU::~CPU()>:
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c001f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d8:	89 10                	mov    DWORD PTR [eax],edx
c001f9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	50                   	push   eax
c001f9e2:	e8 ef ca fe ff       	call   c000c4d6 <Device::~Device()>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	90                   	nop
c001f9eb:	83 c4 0c             	add    esp,0xc
c001f9ee:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f9f0 <CPU::~CPU()>:
c001f9f0:	83 ec 0c             	sub    esp,0xc
c001f9f3:	83 ec 0c             	sub    esp,0xc
c001f9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9fa:	e8 cd ff ff ff       	call   c001f9cc <CPU::~CPU()>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	83 ec 08             	sub    esp,0x8
c001fa05:	68 94 11 00 00       	push   0x1194
c001fa0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0e:	e8 f9 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	83 c4 0c             	add    esp,0xc
c001fa19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa24 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa24:	90                   	nop
c001fa25:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa28 <ThreadControlBlock::ThreadControlBlock()>:
c001fa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa37:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa42:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa58:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa63:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa6f:	90                   	nop
c001fa70:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fa74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab4:	90                   	nop
c001fab5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fab6 <PCI::~PCI()>:
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	ba 24 2a 02 c0       	mov    edx,0xc0022a24
c001fabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac2:	89 10                	mov    DWORD PTR [eax],edx
c001fac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	50                   	push   eax
c001facc:	e8 97 c4 fe ff       	call   c000bf68 <Bus::~Bus()>
c001fad1:	83 c4 10             	add    esp,0x10
c001fad4:	90                   	nop
c001fad5:	83 c4 0c             	add    esp,0xc
c001fad8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fada <PCI::~PCI()>:
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	83 ec 0c             	sub    esp,0xc
c001fae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fae4:	e8 cd ff ff ff       	call   c001fab6 <PCI::~PCI()>
c001fae9:	83 c4 10             	add    esp,0x10
c001faec:	83 ec 08             	sub    esp,0x8
c001faef:	68 5c 01 00 00       	push   0x15c
c001faf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf8:	e8 0f ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fafd:	83 c4 10             	add    esp,0x10
c001fb00:	83 c4 0c             	add    esp,0xc
c001fb03:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb04 <IDE::~IDE()>:
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c001fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb10:	89 10                	mov    DWORD PTR [eax],edx
c001fb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	50                   	push   eax
c001fb1a:	e8 31 ce fe ff       	call   c000c950 <HardDiskController::~HardDiskController()>
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	90                   	nop
c001fb23:	83 c4 0c             	add    esp,0xc
c001fb26:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb28 <IDE::~IDE()>:
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb32:	e8 cd ff ff ff       	call   c001fb04 <IDE::~IDE()>
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	83 ec 08             	sub    esp,0x8
c001fb3d:	68 70 02 00 00       	push   0x270
c001fb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb46:	e8 c1 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb4b:	83 c4 10             	add    esp,0x10
c001fb4e:	83 c4 0c             	add    esp,0xc
c001fb51:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb52 <SATABus::~SATABus()>:
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	89 10                	mov    DWORD PTR [eax],edx
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	50                   	push   eax
c001fb68:	e8 e3 cd fe ff       	call   c000c950 <HardDiskController::~HardDiskController()>
c001fb6d:	83 c4 10             	add    esp,0x10
c001fb70:	90                   	nop
c001fb71:	83 c4 0c             	add    esp,0xc
c001fb74:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fb76 <SATABus::~SATABus()>:
c001fb76:	83 ec 0c             	sub    esp,0xc
c001fb79:	83 ec 0c             	sub    esp,0xc
c001fb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb80:	e8 cd ff ff ff       	call   c001fb52 <SATABus::~SATABus()>
c001fb85:	83 c4 10             	add    esp,0x10
c001fb88:	83 ec 08             	sub    esp,0x8
c001fb8b:	68 64 01 00 00       	push   0x164
c001fb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb94:	e8 73 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	83 c4 0c             	add    esp,0xc
c001fb9f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fba0 <ATA::~ATA()>:
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbac:	89 10                	mov    DWORD PTR [eax],edx
c001fbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	50                   	push   eax
c001fbb6:	e8 77 ce fe ff       	call   c000ca32 <PhysicalDisk::~PhysicalDisk()>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	90                   	nop
c001fbbf:	83 c4 0c             	add    esp,0xc
c001fbc2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbc4 <ATA::~ATA()>:
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	83 ec 0c             	sub    esp,0xc
c001fbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbce:	e8 cd ff ff ff       	call   c001fba0 <ATA::~ATA()>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	83 ec 08             	sub    esp,0x8
c001fbd9:	68 7c 01 00 00       	push   0x17c
c001fbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe2:	e8 25 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbe7:	83 c4 10             	add    esp,0x10
c001fbea:	83 c4 0c             	add    esp,0xc
c001fbed:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fbee <ATAPI::~ATAPI()>:
c001fbee:	83 ec 0c             	sub    esp,0xc
c001fbf1:	ba b0 2b 02 c0       	mov    edx,0xc0022bb0
c001fbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfa:	89 10                	mov    DWORD PTR [eax],edx
c001fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc00:	83 ec 0c             	sub    esp,0xc
c001fc03:	50                   	push   eax
c001fc04:	e8 29 ce fe ff       	call   c000ca32 <PhysicalDisk::~PhysicalDisk()>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	90                   	nop
c001fc0d:	83 c4 0c             	add    esp,0xc
c001fc10:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc12 <ATAPI::~ATAPI()>:
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	83 ec 0c             	sub    esp,0xc
c001fc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc1c:	e8 cd ff ff ff       	call   c001fbee <ATAPI::~ATAPI()>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	83 ec 08             	sub    esp,0x8
c001fc27:	68 84 01 00 00       	push   0x184
c001fc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc30:	e8 d7 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc35:	83 c4 10             	add    esp,0x10
c001fc38:	83 c4 0c             	add    esp,0xc
c001fc3b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc3c <SATA::~SATA()>:
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	ba 64 2c 02 c0       	mov    edx,0xc0022c64
c001fc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc48:	89 10                	mov    DWORD PTR [eax],edx
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	50                   	push   eax
c001fc52:	e8 db cd fe ff       	call   c000ca32 <PhysicalDisk::~PhysicalDisk()>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	90                   	nop
c001fc5b:	83 c4 0c             	add    esp,0xc
c001fc5e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc60 <SATA::~SATA()>:
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6a:	e8 cd ff ff ff       	call   c001fc3c <SATA::~SATA()>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	83 ec 08             	sub    esp,0x8
c001fc75:	68 7c 01 00 00       	push   0x17c
c001fc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7e:	e8 89 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	83 c4 0c             	add    esp,0xc
c001fc89:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fc8a <SATAPI::~SATAPI()>:
c001fc8a:	83 ec 0c             	sub    esp,0xc
c001fc8d:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c001fc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc96:	89 10                	mov    DWORD PTR [eax],edx
c001fc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	50                   	push   eax
c001fca0:	e8 8d cd fe ff       	call   c000ca32 <PhysicalDisk::~PhysicalDisk()>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	90                   	nop
c001fca9:	83 c4 0c             	add    esp,0xc
c001fcac:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcae <SATAPI::~SATAPI()>:
c001fcae:	83 ec 0c             	sub    esp,0xc
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb8:	e8 cd ff ff ff       	call   c001fc8a <SATAPI::~SATAPI()>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	83 ec 08             	sub    esp,0x8
c001fcc3:	68 84 01 00 00       	push   0x184
c001fcc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fccc:	e8 3b ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcd1:	83 c4 10             	add    esp,0x10
c001fcd4:	83 c4 0c             	add    esp,0xc
c001fcd7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fcd8 <IOAPIC::~IOAPIC()>:
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce4:	89 10                	mov    DWORD PTR [eax],edx
c001fce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcea:	83 ec 0c             	sub    esp,0xc
c001fced:	50                   	push   eax
c001fcee:	e8 e3 c7 fe ff       	call   c000c4d6 <Device::~Device()>
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	90                   	nop
c001fcf7:	83 c4 0c             	add    esp,0xc
c001fcfa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fcfc <IOAPIC::~IOAPIC()>:
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd06:	e8 cd ff ff ff       	call   c001fcd8 <IOAPIC::~IOAPIC()>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	83 ec 08             	sub    esp,0x8
c001fd11:	68 68 01 00 00       	push   0x168
c001fd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1a:	e8 ed aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd1f:	83 c4 10             	add    esp,0x10
c001fd22:	83 c4 0c             	add    esp,0xc
c001fd25:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd28 <APICTimer::~APICTimer()>:
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	89 10                	mov    DWORD PTR [eax],edx
c001fd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3a:	83 ec 0c             	sub    esp,0xc
c001fd3d:	50                   	push   eax
c001fd3e:	e8 69 e2 fe ff       	call   c000dfac <Timer::~Timer()>
c001fd43:	83 c4 10             	add    esp,0x10
c001fd46:	90                   	nop
c001fd47:	83 c4 0c             	add    esp,0xc
c001fd4a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd4c <APICTimer::~APICTimer()>:
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	83 ec 0c             	sub    esp,0xc
c001fd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd56:	e8 cd ff ff ff       	call   c001fd28 <APICTimer::~APICTimer()>
c001fd5b:	83 c4 10             	add    esp,0x10
c001fd5e:	83 ec 08             	sub    esp,0x8
c001fd61:	68 60 01 00 00       	push   0x160
c001fd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6a:	e8 9d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd6f:	83 c4 10             	add    esp,0x10
c001fd72:	83 c4 0c             	add    esp,0xc
c001fd75:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fd78 <PIT::~PIT()>:
c001fd78:	83 ec 0c             	sub    esp,0xc
c001fd7b:	ba 60 2e 02 c0       	mov    edx,0xc0022e60
c001fd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd84:	89 10                	mov    DWORD PTR [eax],edx
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	50                   	push   eax
c001fd8e:	e8 19 e2 fe ff       	call   c000dfac <Timer::~Timer()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	90                   	nop
c001fd97:	83 c4 0c             	add    esp,0xc
c001fd9a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fd9c <PIT::~PIT()>:
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	83 ec 0c             	sub    esp,0xc
c001fda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda6:	e8 cd ff ff ff       	call   c001fd78 <PIT::~PIT()>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	83 ec 08             	sub    esp,0x8
c001fdb1:	68 5c 01 00 00       	push   0x15c
c001fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdba:	e8 4d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	83 c4 0c             	add    esp,0xc
c001fdc5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 72 1c 02 c0       	mov    esi,0xc0021c72
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 8e 1c 02 c0       	mov    esi,0xc0021c8e
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
